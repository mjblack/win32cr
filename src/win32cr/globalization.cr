require "./graphics/gdi.cr"
require "./foundation.cr"
require "./system/com.cr"

@[Link("delayimp")]
@[Link("user32")]
@[Link(ldflags: "/IGNORE:4199")]
@[Link(ldflags: "/DELAYLOAD:gdi32.dll")]
@[Link(ldflags: "/DELAYLOAD:normaliz.dll")]
@[Link(ldflags: "/DELAYLOAD:elscore.dll")]
@[Link(ldflags: "/DELAYLOAD:usp10.dll")]
@[Link(ldflags: "/DELAYLOAD:icu.dll")]
@[Link(ldflags: "/DELAYLOAD:bcp47mrm.dll")]
@[Link(ldflags: "/DELAYLOAD:advapi32.dll")]
lib LibWin32
  alias HIMC = LibC::IntPtrT
  alias HIMCC = LibC::IntPtrT
  alias HSAVEDUILANGUAGES = LibC::IntPtrT

  ALL_SERVICE_TYPES = 0_u32
  HIGHLEVEL_SERVICE_TYPES = 1_u32
  LOWLEVEL_SERVICE_TYPES = 2_u32
  ALL_SERVICES = 0_u32
  ONLINE_SERVICES = 1_u32
  OFFLINE_SERVICES = 2_u32
  MAX_LEADBYTES = 12_u32
  MAX_DEFAULTCHAR = 2_u32
  HIGH_SURROGATE_START = 55296_u32
  HIGH_SURROGATE_END = 56319_u32
  LOW_SURROGATE_START = 56320_u32
  LOW_SURROGATE_END = 57343_u32
  WC_COMPOSITECHECK = 512_u32
  WC_DISCARDNS = 16_u32
  WC_SEPCHARS = 32_u32
  WC_DEFAULTCHAR = 64_u32
  WC_ERR_INVALID_CHARS = 128_u32
  WC_NO_BEST_FIT_CHARS = 1024_u32
  CT_CTYPE1 = 1_u32
  CT_CTYPE2 = 2_u32
  CT_CTYPE3 = 4_u32
  C1_UPPER = 1_u32
  C1_LOWER = 2_u32
  C1_DIGIT = 4_u32
  C1_SPACE = 8_u32
  C1_PUNCT = 16_u32
  C1_CNTRL = 32_u32
  C1_BLANK = 64_u32
  C1_XDIGIT = 128_u32
  C1_ALPHA = 256_u32
  C1_DEFINED = 512_u32
  C2_LEFTTORIGHT = 1_u32
  C2_RIGHTTOLEFT = 2_u32
  C2_EUROPENUMBER = 3_u32
  C2_EUROPESEPARATOR = 4_u32
  C2_EUROPETERMINATOR = 5_u32
  C2_ARABICNUMBER = 6_u32
  C2_COMMONSEPARATOR = 7_u32
  C2_BLOCKSEPARATOR = 8_u32
  C2_SEGMENTSEPARATOR = 9_u32
  C2_WHITESPACE = 10_u32
  C2_OTHERNEUTRAL = 11_u32
  C2_NOTAPPLICABLE = 0_u32
  C3_NONSPACING = 1_u32
  C3_DIACRITIC = 2_u32
  C3_VOWELMARK = 4_u32
  C3_SYMBOL = 8_u32
  C3_KATAKANA = 16_u32
  C3_HIRAGANA = 32_u32
  C3_HALFWIDTH = 64_u32
  C3_FULLWIDTH = 128_u32
  C3_IDEOGRAPH = 256_u32
  C3_KASHIDA = 512_u32
  C3_LEXICAL = 1024_u32
  C3_HIGHSURROGATE = 2048_u32
  C3_LOWSURROGATE = 4096_u32
  C3_ALPHA = 32768_u32
  C3_NOTAPPLICABLE = 0_u32
  LCMAP_LOWERCASE = 256_u32
  LCMAP_UPPERCASE = 512_u32
  LCMAP_TITLECASE = 768_u32
  LCMAP_SORTKEY = 1024_u32
  LCMAP_BYTEREV = 2048_u32
  LCMAP_HIRAGANA = 1048576_u32
  LCMAP_KATAKANA = 2097152_u32
  LCMAP_HALFWIDTH = 4194304_u32
  LCMAP_FULLWIDTH = 8388608_u32
  LCMAP_LINGUISTIC_CASING = 16777216_u32
  LCMAP_SIMPLIFIED_CHINESE = 33554432_u32
  LCMAP_TRADITIONAL_CHINESE = 67108864_u32
  LCMAP_SORTHANDLE = 536870912_u32
  LCMAP_HASH = 262144_u32
  FIND_STARTSWITH = 1048576_u32
  FIND_ENDSWITH = 2097152_u32
  FIND_FROMSTART = 4194304_u32
  FIND_FROMEND = 8388608_u32
  LCID_ALTERNATE_SORTS = 4_u32
  LOCALE_ALL = 0_u32
  LOCALE_WINDOWS = 1_u32
  LOCALE_SUPPLEMENTAL = 2_u32
  LOCALE_ALTERNATE_SORTS = 4_u32
  LOCALE_REPLACEMENT = 8_u32
  LOCALE_NEUTRALDATA = 16_u32
  LOCALE_SPECIFICDATA = 32_u32
  CSTR_LESS_THAN = 1_u32
  CSTR_EQUAL = 2_u32
  CSTR_GREATER_THAN = 3_u32
  CP_ACP = 0_u32
  CP_OEMCP = 1_u32
  CP_MACCP = 2_u32
  CP_THREAD_ACP = 3_u32
  CP_SYMBOL = 42_u32
  CP_UTF7 = 65000_u32
  CP_UTF8 = 65001_u32
  CTRY_DEFAULT = 0_u32
  CTRY_ALBANIA = 355_u32
  CTRY_ALGERIA = 213_u32
  CTRY_ARGENTINA = 54_u32
  CTRY_ARMENIA = 374_u32
  CTRY_AUSTRALIA = 61_u32
  CTRY_AUSTRIA = 43_u32
  CTRY_AZERBAIJAN = 994_u32
  CTRY_BAHRAIN = 973_u32
  CTRY_BELARUS = 375_u32
  CTRY_BELGIUM = 32_u32
  CTRY_BELIZE = 501_u32
  CTRY_BOLIVIA = 591_u32
  CTRY_BRAZIL = 55_u32
  CTRY_BRUNEI_DARUSSALAM = 673_u32
  CTRY_BULGARIA = 359_u32
  CTRY_CANADA = 2_u32
  CTRY_CARIBBEAN = 1_u32
  CTRY_CHILE = 56_u32
  CTRY_COLOMBIA = 57_u32
  CTRY_COSTA_RICA = 506_u32
  CTRY_CROATIA = 385_u32
  CTRY_CZECH = 420_u32
  CTRY_DENMARK = 45_u32
  CTRY_DOMINICAN_REPUBLIC = 1_u32
  CTRY_ECUADOR = 593_u32
  CTRY_EGYPT = 20_u32
  CTRY_EL_SALVADOR = 503_u32
  CTRY_ESTONIA = 372_u32
  CTRY_FAEROE_ISLANDS = 298_u32
  CTRY_FINLAND = 358_u32
  CTRY_FRANCE = 33_u32
  CTRY_GEORGIA = 995_u32
  CTRY_GERMANY = 49_u32
  CTRY_GREECE = 30_u32
  CTRY_GUATEMALA = 502_u32
  CTRY_HONDURAS = 504_u32
  CTRY_HONG_KONG = 852_u32
  CTRY_HUNGARY = 36_u32
  CTRY_ICELAND = 354_u32
  CTRY_INDIA = 91_u32
  CTRY_INDONESIA = 62_u32
  CTRY_IRAN = 981_u32
  CTRY_IRAQ = 964_u32
  CTRY_IRELAND = 353_u32
  CTRY_ISRAEL = 972_u32
  CTRY_ITALY = 39_u32
  CTRY_JAMAICA = 1_u32
  CTRY_JAPAN = 81_u32
  CTRY_JORDAN = 962_u32
  CTRY_KAZAKSTAN = 7_u32
  CTRY_KENYA = 254_u32
  CTRY_KUWAIT = 965_u32
  CTRY_KYRGYZSTAN = 996_u32
  CTRY_LATVIA = 371_u32
  CTRY_LEBANON = 961_u32
  CTRY_LIBYA = 218_u32
  CTRY_LIECHTENSTEIN = 41_u32
  CTRY_LITHUANIA = 370_u32
  CTRY_LUXEMBOURG = 352_u32
  CTRY_MACAU = 853_u32
  CTRY_MACEDONIA = 389_u32
  CTRY_MALAYSIA = 60_u32
  CTRY_MALDIVES = 960_u32
  CTRY_MEXICO = 52_u32
  CTRY_MONACO = 33_u32
  CTRY_MONGOLIA = 976_u32
  CTRY_MOROCCO = 212_u32
  CTRY_NETHERLANDS = 31_u32
  CTRY_NEW_ZEALAND = 64_u32
  CTRY_NICARAGUA = 505_u32
  CTRY_NORWAY = 47_u32
  CTRY_OMAN = 968_u32
  CTRY_PAKISTAN = 92_u32
  CTRY_PANAMA = 507_u32
  CTRY_PARAGUAY = 595_u32
  CTRY_PERU = 51_u32
  CTRY_PHILIPPINES = 63_u32
  CTRY_POLAND = 48_u32
  CTRY_PORTUGAL = 351_u32
  CTRY_PRCHINA = 86_u32
  CTRY_PUERTO_RICO = 1_u32
  CTRY_QATAR = 974_u32
  CTRY_ROMANIA = 40_u32
  CTRY_RUSSIA = 7_u32
  CTRY_SAUDI_ARABIA = 966_u32
  CTRY_SERBIA = 381_u32
  CTRY_SINGAPORE = 65_u32
  CTRY_SLOVAK = 421_u32
  CTRY_SLOVENIA = 386_u32
  CTRY_SOUTH_AFRICA = 27_u32
  CTRY_SOUTH_KOREA = 82_u32
  CTRY_SPAIN = 34_u32
  CTRY_SWEDEN = 46_u32
  CTRY_SWITZERLAND = 41_u32
  CTRY_SYRIA = 963_u32
  CTRY_TAIWAN = 886_u32
  CTRY_TATARSTAN = 7_u32
  CTRY_THAILAND = 66_u32
  CTRY_TRINIDAD_Y_TOBAGO = 1_u32
  CTRY_TUNISIA = 216_u32
  CTRY_TURKEY = 90_u32
  CTRY_UAE = 971_u32
  CTRY_UKRAINE = 380_u32
  CTRY_UNITED_KINGDOM = 44_u32
  CTRY_UNITED_STATES = 1_u32
  CTRY_URUGUAY = 598_u32
  CTRY_UZBEKISTAN = 7_u32
  CTRY_VENEZUELA = 58_u32
  CTRY_VIET_NAM = 84_u32
  CTRY_YEMEN = 967_u32
  CTRY_ZIMBABWE = 263_u32
  LOCALE_NOUSEROVERRIDE = 2147483648_u32
  LOCALE_USE_CP_ACP = 1073741824_u32
  LOCALE_RETURN_NUMBER = 536870912_u32
  LOCALE_RETURN_GENITIVE_NAMES = 268435456_u32
  LOCALE_ALLOW_NEUTRAL_NAMES = 134217728_u32
  LOCALE_SLOCALIZEDDISPLAYNAME = 2_u32
  LOCALE_SENGLISHDISPLAYNAME = 114_u32
  LOCALE_SNATIVEDISPLAYNAME = 115_u32
  LOCALE_SLOCALIZEDLANGUAGENAME = 111_u32
  LOCALE_SENGLISHLANGUAGENAME = 4097_u32
  LOCALE_SNATIVELANGUAGENAME = 4_u32
  LOCALE_SLOCALIZEDCOUNTRYNAME = 6_u32
  LOCALE_SENGLISHCOUNTRYNAME = 4098_u32
  LOCALE_SNATIVECOUNTRYNAME = 8_u32
  LOCALE_IDIALINGCODE = 5_u32
  LOCALE_SLIST = 12_u32
  LOCALE_IMEASURE = 13_u32
  LOCALE_SDECIMAL = 14_u32
  LOCALE_STHOUSAND = 15_u32
  LOCALE_SGROUPING = 16_u32
  LOCALE_IDIGITS = 17_u32
  LOCALE_ILZERO = 18_u32
  LOCALE_INEGNUMBER = 4112_u32
  LOCALE_SNATIVEDIGITS = 19_u32
  LOCALE_SCURRENCY = 20_u32
  LOCALE_SINTLSYMBOL = 21_u32
  LOCALE_SMONDECIMALSEP = 22_u32
  LOCALE_SMONTHOUSANDSEP = 23_u32
  LOCALE_SMONGROUPING = 24_u32
  LOCALE_ICURRDIGITS = 25_u32
  LOCALE_ICURRENCY = 27_u32
  LOCALE_INEGCURR = 28_u32
  LOCALE_SSHORTDATE = 31_u32
  LOCALE_SLONGDATE = 32_u32
  LOCALE_STIMEFORMAT = 4099_u32
  LOCALE_SAM = 40_u32
  LOCALE_SPM = 41_u32
  LOCALE_ICALENDARTYPE = 4105_u32
  LOCALE_IOPTIONALCALENDAR = 4107_u32
  LOCALE_IFIRSTDAYOFWEEK = 4108_u32
  LOCALE_IFIRSTWEEKOFYEAR = 4109_u32
  LOCALE_SDAYNAME1 = 42_u32
  LOCALE_SDAYNAME2 = 43_u32
  LOCALE_SDAYNAME3 = 44_u32
  LOCALE_SDAYNAME4 = 45_u32
  LOCALE_SDAYNAME5 = 46_u32
  LOCALE_SDAYNAME6 = 47_u32
  LOCALE_SDAYNAME7 = 48_u32
  LOCALE_SABBREVDAYNAME1 = 49_u32
  LOCALE_SABBREVDAYNAME2 = 50_u32
  LOCALE_SABBREVDAYNAME3 = 51_u32
  LOCALE_SABBREVDAYNAME4 = 52_u32
  LOCALE_SABBREVDAYNAME5 = 53_u32
  LOCALE_SABBREVDAYNAME6 = 54_u32
  LOCALE_SABBREVDAYNAME7 = 55_u32
  LOCALE_SMONTHNAME1 = 56_u32
  LOCALE_SMONTHNAME2 = 57_u32
  LOCALE_SMONTHNAME3 = 58_u32
  LOCALE_SMONTHNAME4 = 59_u32
  LOCALE_SMONTHNAME5 = 60_u32
  LOCALE_SMONTHNAME6 = 61_u32
  LOCALE_SMONTHNAME7 = 62_u32
  LOCALE_SMONTHNAME8 = 63_u32
  LOCALE_SMONTHNAME9 = 64_u32
  LOCALE_SMONTHNAME10 = 65_u32
  LOCALE_SMONTHNAME11 = 66_u32
  LOCALE_SMONTHNAME12 = 67_u32
  LOCALE_SMONTHNAME13 = 4110_u32
  LOCALE_SABBREVMONTHNAME1 = 68_u32
  LOCALE_SABBREVMONTHNAME2 = 69_u32
  LOCALE_SABBREVMONTHNAME3 = 70_u32
  LOCALE_SABBREVMONTHNAME4 = 71_u32
  LOCALE_SABBREVMONTHNAME5 = 72_u32
  LOCALE_SABBREVMONTHNAME6 = 73_u32
  LOCALE_SABBREVMONTHNAME7 = 74_u32
  LOCALE_SABBREVMONTHNAME8 = 75_u32
  LOCALE_SABBREVMONTHNAME9 = 76_u32
  LOCALE_SABBREVMONTHNAME10 = 77_u32
  LOCALE_SABBREVMONTHNAME11 = 78_u32
  LOCALE_SABBREVMONTHNAME12 = 79_u32
  LOCALE_SABBREVMONTHNAME13 = 4111_u32
  LOCALE_SPOSITIVESIGN = 80_u32
  LOCALE_SNEGATIVESIGN = 81_u32
  LOCALE_IPOSSIGNPOSN = 82_u32
  LOCALE_INEGSIGNPOSN = 83_u32
  LOCALE_IPOSSYMPRECEDES = 84_u32
  LOCALE_IPOSSEPBYSPACE = 85_u32
  LOCALE_INEGSYMPRECEDES = 86_u32
  LOCALE_INEGSEPBYSPACE = 87_u32
  LOCALE_FONTSIGNATURE = 88_u32
  LOCALE_SISO639LANGNAME = 89_u32
  LOCALE_SISO3166CTRYNAME = 90_u32
  LOCALE_IPAPERSIZE = 4106_u32
  LOCALE_SENGCURRNAME = 4103_u32
  LOCALE_SNATIVECURRNAME = 4104_u32
  LOCALE_SYEARMONTH = 4102_u32
  LOCALE_SSORTNAME = 4115_u32
  LOCALE_IDIGITSUBSTITUTION = 4116_u32
  LOCALE_SNAME = 92_u32
  LOCALE_SDURATION = 93_u32
  LOCALE_SSHORTESTDAYNAME1 = 96_u32
  LOCALE_SSHORTESTDAYNAME2 = 97_u32
  LOCALE_SSHORTESTDAYNAME3 = 98_u32
  LOCALE_SSHORTESTDAYNAME4 = 99_u32
  LOCALE_SSHORTESTDAYNAME5 = 100_u32
  LOCALE_SSHORTESTDAYNAME6 = 101_u32
  LOCALE_SSHORTESTDAYNAME7 = 102_u32
  LOCALE_SISO639LANGNAME2 = 103_u32
  LOCALE_SISO3166CTRYNAME2 = 104_u32
  LOCALE_SNAN = 105_u32
  LOCALE_SPOSINFINITY = 106_u32
  LOCALE_SNEGINFINITY = 107_u32
  LOCALE_SSCRIPTS = 108_u32
  LOCALE_SPARENT = 109_u32
  LOCALE_SCONSOLEFALLBACKNAME = 110_u32
  LOCALE_IREADINGLAYOUT = 112_u32
  LOCALE_INEUTRAL = 113_u32
  LOCALE_INEGATIVEPERCENT = 116_u32
  LOCALE_IPOSITIVEPERCENT = 117_u32
  LOCALE_SPERCENT = 118_u32
  LOCALE_SPERMILLE = 119_u32
  LOCALE_SMONTHDAY = 120_u32
  LOCALE_SSHORTTIME = 121_u32
  LOCALE_SOPENTYPELANGUAGETAG = 122_u32
  LOCALE_SSORTLOCALE = 123_u32
  LOCALE_SRELATIVELONGDATE = 124_u32
  LOCALE_ICONSTRUCTEDLOCALE = 125_u32
  LOCALE_SSHORTESTAM = 126_u32
  LOCALE_SSHORTESTPM = 127_u32
  LOCALE_IUSEUTF8LEGACYACP = 1638_u32
  LOCALE_IUSEUTF8LEGACYOEMCP = 2457_u32
  LOCALE_IDEFAULTCODEPAGE = 11_u32
  LOCALE_IDEFAULTANSICODEPAGE = 4100_u32
  LOCALE_IDEFAULTMACCODEPAGE = 4113_u32
  LOCALE_IDEFAULTEBCDICCODEPAGE = 4114_u32
  LOCALE_ILANGUAGE = 1_u32
  LOCALE_SABBREVLANGNAME = 3_u32
  LOCALE_SABBREVCTRYNAME = 7_u32
  LOCALE_IGEOID = 91_u32
  LOCALE_IDEFAULTLANGUAGE = 9_u32
  LOCALE_IDEFAULTCOUNTRY = 10_u32
  LOCALE_IINTLCURRDIGITS = 26_u32
  LOCALE_SDATE = 29_u32
  LOCALE_STIME = 30_u32
  LOCALE_IDATE = 33_u32
  LOCALE_ILDATE = 34_u32
  LOCALE_ITIME = 35_u32
  LOCALE_ITIMEMARKPOSN = 4101_u32
  LOCALE_ICENTURY = 36_u32
  LOCALE_ITLZERO = 37_u32
  LOCALE_IDAYLZERO = 38_u32
  LOCALE_IMONLZERO = 39_u32
  LOCALE_SKEYBOARDSTOINSTALL = 94_u32
  LOCALE_SLANGUAGE = 2_u32
  LOCALE_SLANGDISPLAYNAME = 111_u32
  LOCALE_SENGLANGUAGE = 4097_u32
  LOCALE_SNATIVELANGNAME = 4_u32
  LOCALE_SCOUNTRY = 6_u32
  LOCALE_SENGCOUNTRY = 4098_u32
  LOCALE_SNATIVECTRYNAME = 8_u32
  LOCALE_ICOUNTRY = 5_u32
  LOCALE_S1159 = 40_u32
  LOCALE_S2359 = 41_u32
  CAL_NOUSEROVERRIDE = 2147483648_u32
  CAL_USE_CP_ACP = 1073741824_u32
  CAL_RETURN_NUMBER = 536870912_u32
  CAL_RETURN_GENITIVE_NAMES = 268435456_u32
  CAL_ICALINTVALUE = 1_u32
  CAL_SCALNAME = 2_u32
  CAL_IYEAROFFSETRANGE = 3_u32
  CAL_SERASTRING = 4_u32
  CAL_SSHORTDATE = 5_u32
  CAL_SLONGDATE = 6_u32
  CAL_SDAYNAME1 = 7_u32
  CAL_SDAYNAME2 = 8_u32
  CAL_SDAYNAME3 = 9_u32
  CAL_SDAYNAME4 = 10_u32
  CAL_SDAYNAME5 = 11_u32
  CAL_SDAYNAME6 = 12_u32
  CAL_SDAYNAME7 = 13_u32
  CAL_SABBREVDAYNAME1 = 14_u32
  CAL_SABBREVDAYNAME2 = 15_u32
  CAL_SABBREVDAYNAME3 = 16_u32
  CAL_SABBREVDAYNAME4 = 17_u32
  CAL_SABBREVDAYNAME5 = 18_u32
  CAL_SABBREVDAYNAME6 = 19_u32
  CAL_SABBREVDAYNAME7 = 20_u32
  CAL_SMONTHNAME1 = 21_u32
  CAL_SMONTHNAME2 = 22_u32
  CAL_SMONTHNAME3 = 23_u32
  CAL_SMONTHNAME4 = 24_u32
  CAL_SMONTHNAME5 = 25_u32
  CAL_SMONTHNAME6 = 26_u32
  CAL_SMONTHNAME7 = 27_u32
  CAL_SMONTHNAME8 = 28_u32
  CAL_SMONTHNAME9 = 29_u32
  CAL_SMONTHNAME10 = 30_u32
  CAL_SMONTHNAME11 = 31_u32
  CAL_SMONTHNAME12 = 32_u32
  CAL_SMONTHNAME13 = 33_u32
  CAL_SABBREVMONTHNAME1 = 34_u32
  CAL_SABBREVMONTHNAME2 = 35_u32
  CAL_SABBREVMONTHNAME3 = 36_u32
  CAL_SABBREVMONTHNAME4 = 37_u32
  CAL_SABBREVMONTHNAME5 = 38_u32
  CAL_SABBREVMONTHNAME6 = 39_u32
  CAL_SABBREVMONTHNAME7 = 40_u32
  CAL_SABBREVMONTHNAME8 = 41_u32
  CAL_SABBREVMONTHNAME9 = 42_u32
  CAL_SABBREVMONTHNAME10 = 43_u32
  CAL_SABBREVMONTHNAME11 = 44_u32
  CAL_SABBREVMONTHNAME12 = 45_u32
  CAL_SABBREVMONTHNAME13 = 46_u32
  CAL_SYEARMONTH = 47_u32
  CAL_ITWODIGITYEARMAX = 48_u32
  CAL_SSHORTESTDAYNAME1 = 49_u32
  CAL_SSHORTESTDAYNAME2 = 50_u32
  CAL_SSHORTESTDAYNAME3 = 51_u32
  CAL_SSHORTESTDAYNAME4 = 52_u32
  CAL_SSHORTESTDAYNAME5 = 53_u32
  CAL_SSHORTESTDAYNAME6 = 54_u32
  CAL_SSHORTESTDAYNAME7 = 55_u32
  CAL_SMONTHDAY = 56_u32
  CAL_SABBREVERASTRING = 57_u32
  CAL_SRELATIVELONGDATE = 58_u32
  CAL_SENGLISHERANAME = 59_u32
  CAL_SENGLISHABBREVERANAME = 60_u32
  CAL_SJAPANESEERAFIRSTYEAR = 61_u32
  ENUM_ALL_CALENDARS = 4294967295_u32
  CAL_GREGORIAN = 1_u32
  CAL_GREGORIAN_US = 2_u32
  CAL_JAPAN = 3_u32
  CAL_TAIWAN = 4_u32
  CAL_KOREA = 5_u32
  CAL_HIJRI = 6_u32
  CAL_THAI = 7_u32
  CAL_HEBREW = 8_u32
  CAL_GREGORIAN_ME_FRENCH = 9_u32
  CAL_GREGORIAN_ARABIC = 10_u32
  CAL_GREGORIAN_XLIT_ENGLISH = 11_u32
  CAL_GREGORIAN_XLIT_FRENCH = 12_u32
  CAL_PERSIAN = 22_u32
  CAL_UMALQURA = 23_u32
  LGRPID_WESTERN_EUROPE = 1_u32
  LGRPID_CENTRAL_EUROPE = 2_u32
  LGRPID_BALTIC = 3_u32
  LGRPID_GREEK = 4_u32
  LGRPID_CYRILLIC = 5_u32
  LGRPID_TURKIC = 6_u32
  LGRPID_TURKISH = 6_u32
  LGRPID_JAPANESE = 7_u32
  LGRPID_KOREAN = 8_u32
  LGRPID_TRADITIONAL_CHINESE = 9_u32
  LGRPID_SIMPLIFIED_CHINESE = 10_u32
  LGRPID_THAI = 11_u32
  LGRPID_HEBREW = 12_u32
  LGRPID_ARABIC = 13_u32
  LGRPID_VIETNAMESE = 14_u32
  LGRPID_INDIC = 15_u32
  LGRPID_GEORGIAN = 16_u32
  LGRPID_ARMENIAN = 17_u32
  MUI_LANGUAGE_ID = 4_u32
  MUI_LANGUAGE_NAME = 8_u32
  MUI_MERGE_SYSTEM_FALLBACK = 16_u32
  MUI_MERGE_USER_FALLBACK = 32_u32
  MUI_THREAD_LANGUAGES = 64_u32
  MUI_CONSOLE_FILTER = 256_u32
  MUI_COMPLEX_SCRIPT_FILTER = 512_u32
  MUI_RESET_FILTERS = 1_u32
  MUI_USER_PREFERRED_UI_LANGUAGES = 16_u32
  MUI_USE_INSTALLED_LANGUAGES = 32_u32
  MUI_USE_SEARCH_ALL_LANGUAGES = 64_u32
  MUI_LANG_NEUTRAL_PE_FILE = 256_u32
  MUI_NON_LANG_NEUTRAL_FILE = 512_u32
  MUI_MACHINE_LANGUAGE_SETTINGS = 1024_u32
  MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1_u32
  MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2_u32
  MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4_u32
  MUI_QUERY_TYPE = 1_u32
  MUI_QUERY_CHECKSUM = 2_u32
  MUI_QUERY_LANGUAGE_NAME = 4_u32
  MUI_QUERY_RESOURCE_TYPES = 8_u32
  MUI_FILEINFO_VERSION = 1_u32
  MUI_FULL_LANGUAGE = 1_u32
  MUI_PARTIAL_LANGUAGE = 2_u32
  MUI_LIP_LANGUAGE = 4_u32
  MUI_LANGUAGE_INSTALLED = 32_u32
  MUI_LANGUAGE_LICENSED = 64_u32
  GEOID_NOT_AVAILABLE = -1_i32
  SORTING_PARADIGM_NLS = 0_u32
  SORTING_PARADIGM_ICU = 16777216_u32
  IDN_ALLOW_UNASSIGNED = 1_u32
  IDN_USE_STD3_ASCII_RULES = 2_u32
  IDN_EMAIL_ADDRESS = 4_u32
  IDN_RAW_PUNYCODE = 8_u32
  VS_ALLOW_LATIN = 1_u32
  GSS_ALLOW_INHERITED_COMMON = 1_u32
  MUI_FORMAT_REG_COMPAT = 1_u32
  MUI_FORMAT_INF_COMPAT = 2_u32
  MUI_VERIFY_FILE_EXISTS = 4_u32
  MUI_SKIP_STRING_CACHE = 8_u32
  MUI_IMMUTABLE_LOOKUP = 16_u32
  MIN_SPELLING_NTDDI = 100794368_u32
  SCRIPT_UNDEFINED = 0_u32
  USP_E_SCRIPT_NOT_IN_FONT = -2147220992_i32
  SGCM_RTL = 1_u32
  SSA_PASSWORD = 1_u32
  SSA_TAB = 2_u32
  SSA_CLIP = 4_u32
  SSA_FIT = 8_u32
  SSA_DZWG = 16_u32
  SSA_FALLBACK = 32_u32
  SSA_BREAK = 64_u32
  SSA_GLYPHS = 128_u32
  SSA_RTL = 256_u32
  SSA_GCP = 512_u32
  SSA_HOTKEY = 1024_u32
  SSA_METAFILE = 2048_u32
  SSA_LINK = 4096_u32
  SSA_HIDEHOTKEY = 8192_u32
  SSA_HOTKEYONLY = 9216_u32
  SSA_FULLMEASURE = 67108864_u32
  SSA_LPKANSIFALLBACK = 134217728_u32
  SSA_PIDX = 268435456_u32
  SSA_LAYOUTRTL = 536870912_u32
  SSA_DONTGLYPH = 1073741824_u32
  SSA_NOKASHIDA = 2147483648_u32
  SCRIPT_DIGITSUBSTITUTE_CONTEXT = 0_u32
  SCRIPT_DIGITSUBSTITUTE_NONE = 1_u32
  SCRIPT_DIGITSUBSTITUTE_NATIONAL = 2_u32
  SCRIPT_DIGITSUBSTITUTE_TRADITIONAL = 3_u32
  UNISCRIBE_OPENTYPE = 256_u32
  SCRIPT_TAG_UNKNOWN = 0_u32
  MUI_LANGUAGE_EXACT = 16_u32
  NLS_CP_CPINFO = 268435456_u32
  NLS_CP_MBTOWC = 1073741824_u32
  NLS_CP_WCTOMB = 2147483648_u32
  U_DISABLE_RENAMING = 1_u32
  U_SHOW_CPLUSPLUS_API = 0_u32
  U_DEFAULT_SHOW_DRAFT = 0_u32
  U_HIDE_DRAFT_API = 1_u32
  U_HIDE_DEPRECATED_API = 1_u32
  U_HIDE_OBSOLETE_API = 1_u32
  U_HIDE_INTERNAL_API = 1_u32
  U_NO_DEFAULT_INCLUDE_UTF_HEADERS = 1_u32
  UCLN_NO_AUTO_CLEANUP = 1_u32
  U_OVERRIDE_CXX_ALLOCATION = 1_u32
  U_ENABLE_TRACING = 0_u32
  UCONFIG_ENABLE_PLUGINS = 0_u32
  U_ENABLE_DYLOAD = 1_u32
  U_CHECK_DYLOAD = 1_u32
  U_PF_UNKNOWN = 0_u32
  U_PF_WINDOWS = 1000_u32
  U_PF_MINGW = 1800_u32
  U_PF_CYGWIN = 1900_u32
  U_PF_HPUX = 2100_u32
  U_PF_SOLARIS = 2600_u32
  U_PF_BSD = 3000_u32
  U_PF_AIX = 3100_u32
  U_PF_IRIX = 3200_u32
  U_PF_DARWIN = 3500_u32
  U_PF_IPHONE = 3550_u32
  U_PF_QNX = 3700_u32
  U_PF_LINUX = 4000_u32
  U_PF_BROWSER_NATIVE_CLIENT = 4020_u32
  U_PF_ANDROID = 4050_u32
  U_PF_FUCHSIA = 4100_u32
  U_PF_EMSCRIPTEN = 5010_u32
  U_PF_OS390 = 9000_u32
  U_PF_OS400 = 9400_u32
  U_ASCII_FAMILY = 0_u32
  U_EBCDIC_FAMILY = 1_u32
  U_DEFINE_FALSE_AND_TRUE = 1_u32
  U_SIZEOF_UCHAR = 2_u32
  U_SENTINEL = -1_i32
  U8_MAX_LENGTH = 4_u32
  U16_MAX_LENGTH = 2_u32
  UTF_SIZE = 16_u32
  UTF8_ERROR_VALUE_1 = 21_u32
  UTF8_ERROR_VALUE_2 = 159_u32
  UTF_ERROR_VALUE = 65535_u32
  UTF8_MAX_CHAR_LENGTH = 4_u32
  UTF16_MAX_CHAR_LENGTH = 2_u32
  UTF32_MAX_CHAR_LENGTH = 1_u32
  UTF_MAX_CHAR_LENGTH = 2_u32
  U_COPYRIGHT_STRING_LENGTH = 128_u32
  U_MAX_VERSION_LENGTH = 4_u32
  U_MAX_VERSION_STRING_LENGTH = 20_u32
  U_MILLIS_PER_SECOND = 1000_u32
  U_MILLIS_PER_MINUTE = 60000_u32
  U_MILLIS_PER_HOUR = 3600000_u32
  U_MILLIS_PER_DAY = 86400000_u32
  U_COMBINED_IMPLEMENTATION = 1_u32
  U_SHAPE_LENGTH_GROW_SHRINK = 0_u32
  U_SHAPE_LAMALEF_RESIZE = 0_u32
  U_SHAPE_LENGTH_FIXED_SPACES_NEAR = 1_u32
  U_SHAPE_LAMALEF_NEAR = 1_u32
  U_SHAPE_LENGTH_FIXED_SPACES_AT_END = 2_u32
  U_SHAPE_LAMALEF_END = 2_u32
  U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING = 3_u32
  U_SHAPE_LAMALEF_BEGIN = 3_u32
  U_SHAPE_LAMALEF_AUTO = 65536_u32
  U_SHAPE_LENGTH_MASK = 65539_u32
  U_SHAPE_LAMALEF_MASK = 65539_u32
  U_SHAPE_TEXT_DIRECTION_LOGICAL = 0_u32
  U_SHAPE_TEXT_DIRECTION_VISUAL_RTL = 0_u32
  U_SHAPE_TEXT_DIRECTION_VISUAL_LTR = 4_u32
  U_SHAPE_TEXT_DIRECTION_MASK = 4_u32
  U_SHAPE_LETTERS_NOOP = 0_u32
  U_SHAPE_LETTERS_SHAPE = 8_u32
  U_SHAPE_LETTERS_UNSHAPE = 16_u32
  U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED = 24_u32
  U_SHAPE_LETTERS_MASK = 24_u32
  U_SHAPE_DIGITS_NOOP = 0_u32
  U_SHAPE_DIGITS_EN2AN = 32_u32
  U_SHAPE_DIGITS_AN2EN = 64_u32
  U_SHAPE_DIGITS_ALEN2AN_INIT_LR = 96_u32
  U_SHAPE_DIGITS_ALEN2AN_INIT_AL = 128_u32
  U_SHAPE_DIGITS_RESERVED = 160_u32
  U_SHAPE_DIGITS_MASK = 224_u32
  U_SHAPE_DIGIT_TYPE_AN = 0_u32
  U_SHAPE_DIGIT_TYPE_AN_EXTENDED = 256_u32
  U_SHAPE_DIGIT_TYPE_RESERVED = 512_u32
  U_SHAPE_DIGIT_TYPE_MASK = 768_u32
  U_SHAPE_AGGREGATE_TASHKEEL = 16384_u32
  U_SHAPE_AGGREGATE_TASHKEEL_NOOP = 0_u32
  U_SHAPE_AGGREGATE_TASHKEEL_MASK = 16384_u32
  U_SHAPE_PRESERVE_PRESENTATION = 32768_u32
  U_SHAPE_PRESERVE_PRESENTATION_NOOP = 0_u32
  U_SHAPE_PRESERVE_PRESENTATION_MASK = 32768_u32
  U_SHAPE_SEEN_TWOCELL_NEAR = 2097152_u32
  U_SHAPE_SEEN_MASK = 7340032_u32
  U_SHAPE_YEHHAMZA_TWOCELL_NEAR = 16777216_u32
  U_SHAPE_YEHHAMZA_MASK = 58720256_u32
  U_SHAPE_TASHKEEL_BEGIN = 262144_u32
  U_SHAPE_TASHKEEL_END = 393216_u32
  U_SHAPE_TASHKEEL_RESIZE = 524288_u32
  U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL = 786432_u32
  U_SHAPE_TASHKEEL_MASK = 917504_u32
  U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END = 67108864_u32
  U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK = 67108864_u32
  U_SHAPE_TAIL_NEW_UNICODE = 134217728_u32
  U_SHAPE_TAIL_TYPE_MASK = 134217728_u32
  ULOC_LANG_CAPACITY = 12_u32
  ULOC_COUNTRY_CAPACITY = 4_u32
  ULOC_FULLNAME_CAPACITY = 157_u32
  ULOC_SCRIPT_CAPACITY = 6_u32
  ULOC_KEYWORDS_CAPACITY = 96_u32
  ULOC_KEYWORD_AND_VALUES_CAPACITY = 100_u32
  ULOC_KEYWORD_SEPARATOR_UNICODE = 64_u32
  ULOC_KEYWORD_ASSIGN_UNICODE = 61_u32
  ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE = 59_u32
  UCNV_MAX_CONVERTER_NAME_LENGTH = 60_u32
  UCNV_SI = 15_u32
  UCNV_SO = 14_u32
  U_FOLD_CASE_DEFAULT = 0_u32
  U_FOLD_CASE_EXCLUDE_SPECIAL_I = 1_u32
  U_TITLECASE_WHOLE_STRING = 32_u32
  U_TITLECASE_SENTENCES = 64_u32
  U_TITLECASE_NO_LOWERCASE = 256_u32
  U_TITLECASE_NO_BREAK_ADJUSTMENT = 512_u32
  U_TITLECASE_ADJUST_TO_CASED = 1024_u32
  U_EDITS_NO_RESET = 8192_u32
  U_OMIT_UNCHANGED_TEXT = 16384_u32
  U_COMPARE_CODE_POINT_ORDER = 32768_u32
  U_COMPARE_IGNORE_CASE = 65536_u32
  UNORM_INPUT_IS_FCD = 131072_u32
  UCHAR_MIN_VALUE = 0_u32
  UCHAR_MAX_VALUE = 1114111_u32
  UBIDI_DEFAULT_LTR = 254_u32
  UBIDI_DEFAULT_RTL = 255_u32
  UBIDI_MAX_EXPLICIT_LEVEL = 125_u32
  UBIDI_LEVEL_OVERRIDE = 128_u32
  UBIDI_MAP_NOWHERE = -1_i32
  UBIDI_KEEP_BASE_COMBINING = 1_u32
  UBIDI_DO_MIRRORING = 2_u32
  UBIDI_INSERT_LRM_FOR_NUMERIC = 4_u32
  UBIDI_REMOVE_BIDI_CONTROLS = 8_u32
  UBIDI_OUTPUT_REVERSE = 16_u32
  USPREP_DEFAULT = 0_u32
  USPREP_ALLOW_UNASSIGNED = 1_u32
  USEARCH_DONE = -1_i32
  U_HAVE_STD_STRING = 0_u32
  U_IOSTREAM_SOURCE = 199711_u32
  CANITER_SKIP_ZEROES = 1_u32
  NUMSYS_NAME_CAPACITY = 8_u32
  U_HAVE_RBNF = 0_u32
  IME_CMODE_ALPHANUMERIC = 0_u32
  IME_CMODE_NATIVE = 1_u32
  IME_CMODE_CHINESE = 1_u32
  IME_CMODE_HANGUL = 1_u32
  IME_CMODE_JAPANESE = 1_u32
  IME_CMODE_KATAKANA = 2_u32
  IME_CMODE_LANGUAGE = 3_u32
  IME_CMODE_FULLSHAPE = 8_u32
  IME_CMODE_ROMAN = 16_u32
  IME_CMODE_CHARCODE = 32_u32
  IME_CMODE_HANJACONVERT = 64_u32
  IME_CMODE_NATIVESYMBOL = 128_u32
  MAX_MIMECP_NAME = 64_u32
  MAX_MIMECSET_NAME = 50_u32
  MAX_MIMEFACE_NAME = 32_u32
  MAX_RFC1766_NAME = 6_u32
  MAX_LOCALE_NAME = 32_u32
  MAX_SCRIPT_NAME = 48_u32
  CPIOD_PEEK = 1073741824_i32
  CPIOD_FORCE_PROMPT = -2147483648_i32
  UITER_UNKNOWN_INDEX = -2_i32
  UCPTRIE_FAST_SHIFT = 6_i32
  UCPTRIE_FAST_DATA_BLOCK_LENGTH = 64_i32
  UCPTRIE_FAST_DATA_MASK = 63_i32
  UCPTRIE_SMALL_MAX = 4095_i32
  UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET = 1_i32
  UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET = 2_i32
  UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1_i32
  UTEXT_PROVIDER_STABLE_CHUNKS = 2_i32
  UTEXT_PROVIDER_WRITABLE = 3_i32
  UTEXT_PROVIDER_HAS_META_DATA = 4_i32
  UTEXT_PROVIDER_OWNS_TEXT = 5_i32
  UTEXT_MAGIC = 878368812_i32
  USET_IGNORE_SPACE = 1_i32
  USET_CASE_INSENSITIVE = 2_i32
  USET_ADD_CASE_MAPPINGS = 4_i32
  USET_SERIALIZED_STATIC_ARRAY_CAPACITY = 8_i32
  U_PARSE_CONTEXT_LEN = 16_i32
  UIDNA_DEFAULT = 0_i32
  UIDNA_USE_STD3_RULES = 2_i32
  UIDNA_CHECK_BIDI = 4_i32
  UIDNA_CHECK_CONTEXTJ = 8_i32
  UIDNA_NONTRANSITIONAL_TO_ASCII = 16_i32
  UIDNA_NONTRANSITIONAL_TO_UNICODE = 32_i32
  UIDNA_CHECK_CONTEXTO = 64_i32
  UIDNA_ERROR_EMPTY_LABEL = 1_i32
  UIDNA_ERROR_LABEL_TOO_LONG = 2_i32
  UIDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4_i32
  UIDNA_ERROR_LEADING_HYPHEN = 8_i32
  UIDNA_ERROR_TRAILING_HYPHEN = 16_i32
  UIDNA_ERROR_HYPHEN_3_4 = 32_i32
  UIDNA_ERROR_LEADING_COMBINING_MARK = 64_i32
  UIDNA_ERROR_DISALLOWED = 128_i32
  UIDNA_ERROR_PUNYCODE = 256_i32
  UIDNA_ERROR_LABEL_HAS_DOT = 512_i32
  UIDNA_ERROR_INVALID_ACE_LABEL = 1024_i32
  UIDNA_ERROR_BIDI = 2048_i32
  UIDNA_ERROR_CONTEXTJ = 4096_i32
  UIDNA_ERROR_CONTEXTO_PUNCTUATION = 8192_i32
  UIDNA_ERROR_CONTEXTO_DIGITS = 16384_i32
  ELS_GUID_LANGUAGE_DETECTION = "cf7e00b1-909b-4d95-a8f4-611f7c377702"
  ELS_GUID_SCRIPT_DETECTION = "2d64b439-6caf-4f6b-b688-e5d0f4faa7d7"
  ELS_GUID_TRANSLITERATION_HANT_TO_HANS = "a3a8333b-f4fc-42f6-a0c4-0462fe7317cb"
  ELS_GUID_TRANSLITERATION_HANS_TO_HANT = "3caccdc8-5590-42dc-9a7b-b5a6b5b3b63b"
  ELS_GUID_TRANSLITERATION_MALAYALAM_TO_LATIN = "d8b983b1-f8bf-4a2b-bcd5-5b5ea20613e1"
  ELS_GUID_TRANSLITERATION_DEVANAGARI_TO_LATIN = "c4a4dcfe-2661-4d02-9835-f48187109803"
  ELS_GUID_TRANSLITERATION_CYRILLIC_TO_LATIN = "3dd12a98-5afd-4903-a13f-e17e6c0bfe01"
  ELS_GUID_TRANSLITERATION_BENGALI_TO_LATIN = "f4dfd825-91a4-489f-855e-9ad9bee55727"
  ELS_GUID_TRANSLITERATION_HANGUL_DECOMPOSITION = "4ba2a721-e43d-41b7-b330-536ae1e48863"
  UMSGPAT_ARG_NAME_NOT_NUMBER = -1_i32
  UMSGPAT_ARG_NAME_NOT_VALID = -2_i32
  SpellCheckerFactory = LibC::GUID.new(0x7ab36653_u32, 0x1796_u16, 0x484b_u16, StaticArray[0xbd_u8, 0xfa_u8, 0xe7_u8, 0x4f_u8, 0x1d_u8, 0xb7_u8, 0xc1_u8, 0xdc_u8])
  CMLangString = LibC::GUID.new(0xc04d65cf_u32, 0xb70d_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
  CMLangConvertCharset = LibC::GUID.new(0xd66d6f99_u32, 0xcdaa_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0x22_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0xb3_u8, 0x1f_u8])
  CMultiLanguage = LibC::GUID.new(0x275c23e2_u32, 0x3747_u16, 0x11d0_u16, StaticArray[0x9f_u8, 0xea_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3f_u8, 0x86_u8, 0x46_u8])

  type UEnumeration = Void
  type UResourceBundle = Void
  type ULocaleDisplayNames = Void
  type UCPMap = Void
  type UMutableCPTrie = Void
  type UConverter = Void
  type USet = Void
  type UBiDi = Void
  type UBiDiTransform = Void
  type UNormalizer2 = Void
  type UConverterSelector = Void
  type UBreakIterator = Void
  type UCaseMap = Void
  type UStringPrepProfile = Void
  type UIDNA = Void
  type UCollator = Void
  type UCollationElements = Void
  type UCharsetDetector = Void
  type UCharsetMatch = Void
  type UFieldPositionIterator = Void
  type UConstrainedFieldPosition = Void
  type UFormattedValue = Void
  type UDateIntervalFormat = Void
  type UFormattedDateInterval = Void
  type UGenderInfo = Void
  type UListFormatter = Void
  type UFormattedList = Void
  type ULocaleData = Void
  type UDateFormatSymbols = Void
  type UNumberFormatter = Void
  type UFormattedNumber = Void
  type UNumberingSystem = Void
  type UFormattedNumberRange = Void
  type UPluralRules = Void
  type URegularExpression = Void
  type URegion = Void
  type URelativeDateTimeFormatter = Void
  type UFormattedRelativeDateTime = Void
  type UStringSearch = Void
  type USpoofChecker = Void
  type USpoofCheckResult = Void
  type UHashtable = Void
  type USearch = Void

  alias LOCALE_ENUMPROCA = Proc(PSTR, LibC::BOOL)
  alias LOCALE_ENUMPROCW = Proc(LibC::LPWSTR, LibC::BOOL)
  alias LANGUAGEGROUP_ENUMPROCA = Proc(UInt32, PSTR, PSTR, UInt32, LibC::IntPtrT, LibC::BOOL)
  alias LANGGROUPLOCALE_ENUMPROCA = Proc(UInt32, UInt32, PSTR, LibC::IntPtrT, LibC::BOOL)
  alias UILANGUAGE_ENUMPROCA = Proc(PSTR, LibC::IntPtrT, LibC::BOOL)
  alias CODEPAGE_ENUMPROCA = Proc(PSTR, LibC::BOOL)
  alias DATEFMT_ENUMPROCA = Proc(PSTR, LibC::BOOL)
  alias DATEFMT_ENUMPROCEXA = Proc(PSTR, UInt32, LibC::BOOL)
  alias TIMEFMT_ENUMPROCA = Proc(PSTR, LibC::BOOL)
  alias CALINFO_ENUMPROCA = Proc(PSTR, LibC::BOOL)
  alias CALINFO_ENUMPROCEXA = Proc(PSTR, UInt32, LibC::BOOL)
  alias LANGUAGEGROUP_ENUMPROCW = Proc(UInt32, LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::IntPtrT, LibC::BOOL)
  alias LANGGROUPLOCALE_ENUMPROCW = Proc(UInt32, UInt32, LibC::LPWSTR, LibC::IntPtrT, LibC::BOOL)
  alias UILANGUAGE_ENUMPROCW = Proc(LibC::LPWSTR, LibC::IntPtrT, LibC::BOOL)
  alias CODEPAGE_ENUMPROCW = Proc(LibC::LPWSTR, LibC::BOOL)
  alias DATEFMT_ENUMPROCW = Proc(LibC::LPWSTR, LibC::BOOL)
  alias DATEFMT_ENUMPROCEXW = Proc(LibC::LPWSTR, UInt32, LibC::BOOL)
  alias TIMEFMT_ENUMPROCW = Proc(LibC::LPWSTR, LibC::BOOL)
  alias CALINFO_ENUMPROCW = Proc(LibC::LPWSTR, LibC::BOOL)
  alias CALINFO_ENUMPROCEXW = Proc(LibC::LPWSTR, UInt32, LibC::BOOL)
  alias GEO_ENUMPROC = Proc(Int32, LibC::BOOL)
  alias GEO_ENUMNAMEPROC = Proc(LibC::LPWSTR, LPARAM, LibC::BOOL)
  alias CALINFO_ENUMPROCEXEX = Proc(LibC::LPWSTR, UInt32, LibC::LPWSTR, LPARAM, LibC::BOOL)
  alias DATEFMT_ENUMPROCEXEX = Proc(LibC::LPWSTR, UInt32, LPARAM, LibC::BOOL)
  alias TIMEFMT_ENUMPROCEX = Proc(LibC::LPWSTR, LPARAM, LibC::BOOL)
  alias LOCALE_ENUMPROCEX = Proc(LibC::LPWSTR, UInt32, LPARAM, LibC::BOOL)
  alias PFN_MAPPINGCALLBACKPROC = Proc(MAPPING_PROPERTY_BAG*, Void*, UInt32, HRESULT, Void)
  alias UTraceEntry = Proc(Void*, Int32, Void)
  alias UTraceExit = Proc(Void*, Int32, PSTR, Int8*, Void)
  alias UTraceData = Proc(Void*, Int32, Int32, PSTR, Int8*, Void)
  alias UCharIteratorGetIndex = Proc(UCharIterator*, UCharIteratorOrigin, Int32)
  alias UCharIteratorMove = Proc(UCharIterator*, Int32, UCharIteratorOrigin, Int32)
  alias UCharIteratorHasNext = Proc(UCharIterator*, Int8)
  alias UCharIteratorHasPrevious = Proc(UCharIterator*, Int8)
  alias UCharIteratorCurrent = Proc(UCharIterator*, Int32)
  alias UCharIteratorNext = Proc(UCharIterator*, Int32)
  alias UCharIteratorPrevious = Proc(UCharIterator*, Int32)
  alias UCharIteratorReserved = Proc(UCharIterator*, Int32, Int32)
  alias UCharIteratorGetState = Proc(UCharIterator*, UInt32)
  alias UCharIteratorSetState = Proc(UCharIterator*, UInt32, UErrorCode*, Void)
  alias UCPMapValueFilter = Proc(Void*, UInt32, UInt32)
  alias UConverterToUCallback = Proc(Void*, UConverterToUnicodeArgs*, PSTR, Int32, UConverterCallbackReason, UErrorCode*, Void)
  alias UConverterFromUCallback = Proc(Void*, UConverterFromUnicodeArgs*, UInt16*, Int32, Int32, UConverterCallbackReason, UErrorCode*, Void)
  alias UMemAllocFn = Proc(Void*, LibC::UINT_PTR, Void*)
  alias UMemReallocFn = Proc(Void*, Void*, LibC::UINT_PTR, Void*)
  alias UMemFreeFn = Proc(Void*, Void*, Void)
  alias UCharEnumTypeRange = Proc(Void*, Int32, Int32, UCharCategory, Int8)
  alias UEnumCharNamesFn = Proc(Void*, Int32, UCharNameChoice, PSTR, Int32, Int8)
  alias UBiDiClassCallback = Proc(Void*, Int32, UCharDirection)
  alias UTextClone = Proc(UText*, UText*, Int8, UErrorCode*, UText*)
  alias UTextNativeLength = Proc(UText*, Int64)
  alias UTextAccess = Proc(UText*, Int64, Int8, Int8)
  alias UTextExtract = Proc(UText*, Int64, Int64, UInt16*, Int32, UErrorCode*, Int32)
  alias UTextReplace = Proc(UText*, Int64, Int64, UInt16*, Int32, UErrorCode*, Int32)
  alias UTextCopy = Proc(UText*, Int64, Int64, Int64, Int8, UErrorCode*, Void)
  alias UTextMapOffsetToNative = Proc(UText*, Int64)
  alias UTextMapNativeIndexToUTF16 = Proc(UText*, Int64, Int32)
  alias UTextClose = Proc(UText*, Void)
  alias UNESCAPE_CHAR_AT = Proc(Int32, Void*, UInt16)
  alias URegexMatchCallback = Proc(Void*, Int32, Int8)
  alias URegexFindProgressCallback = Proc(Void*, Int64, Int8)
  alias UStringCaseMapper = Proc(UCaseMap*, UInt16*, Int32, UInt16*, Int32, UErrorCode*, Int32)


  enum FOLD_STRING_MAP_FLAGS : UInt32
    MAP_COMPOSITE = 64
    MAP_EXPAND_LIGATURES = 8192
    MAP_FOLDCZONE = 16
    MAP_FOLDDIGITS = 128
    MAP_PRECOMPOSED = 32
  end

  enum ENUM_DATE_FORMATS_FLAGS : UInt32
    DATE_SHORTDATE = 1
    DATE_LONGDATE = 2
    DATE_YEARMONTH = 8
    DATE_MONTHDAY = 128
    DATE_AUTOLAYOUT = 64
    DATE_LTRREADING = 16
    DATE_RTLREADING = 32
    DATE_USE_ALT_CALENDAR = 4
  end

  enum TRANSLATE_CHARSET_INFO_FLAGS : UInt32
    TCI_SRCCHARSET = 1
    TCI_SRCCODEPAGE = 2
    TCI_SRCFONTSIG = 3
    TCI_SRCLOCALE = 4096
  end

  enum TIME_FORMAT_FLAGS : UInt32
    TIME_NOMINUTESORSECONDS = 1
    TIME_NOSECONDS = 2
    TIME_NOTIMEMARKER = 4
    TIME_FORCE24HOURFORMAT = 8
  end

  enum ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS : UInt32
    LGRPID_INSTALLED = 1
    LGRPID_SUPPORTED = 2
  end

  enum MULTI_BYTE_TO_WIDE_CHAR_FLAGS : UInt32
    MB_COMPOSITE = 2
    MB_ERR_INVALID_CHARS = 8
    MB_PRECOMPOSED = 1
    MB_USEGLYPHCHARS = 4
  end

  enum COMPARE_STRING_FLAGS : UInt32
    LINGUISTIC_IGNORECASE = 16
    LINGUISTIC_IGNOREDIACRITIC = 32
    NORM_IGNORECASE = 1
    NORM_IGNOREKANATYPE = 65536
    NORM_IGNORENONSPACE = 2
    NORM_IGNORESYMBOLS = 4
    NORM_IGNOREWIDTH = 131072
    NORM_LINGUISTIC_CASING = 134217728
    SORT_DIGITSASNUMBERS = 8
    SORT_STRINGSORT = 4096
  end

  enum IS_VALID_LOCALE_FLAGS : UInt32
    LCID_INSTALLED = 1
    LCID_SUPPORTED = 2
  end

  enum ENUM_SYSTEM_CODE_PAGES_FLAGS : UInt32
    CP_INSTALLED = 1
    CP_SUPPORTED = 2
  end

  enum SCRIPT_IS_COMPLEX_FLAGS : UInt32
    SIC_ASCIIDIGIT = 2
    SIC_COMPLEX = 1
    SIC_NEUTRAL = 4
  end

  enum IS_TEXT_UNICODE_RESULT : UInt32
    IS_TEXT_UNICODE_ASCII16 = 1
    IS_TEXT_UNICODE_REVERSE_ASCII16 = 16
    IS_TEXT_UNICODE_STATISTICS = 2
    IS_TEXT_UNICODE_REVERSE_STATISTICS = 32
    IS_TEXT_UNICODE_CONTROLS = 4
    IS_TEXT_UNICODE_REVERSE_CONTROLS = 64
    IS_TEXT_UNICODE_SIGNATURE = 8
    IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128
    IS_TEXT_UNICODE_ILLEGAL_CHARS = 256
    IS_TEXT_UNICODE_ODD_LENGTH = 512
    IS_TEXT_UNICODE_NULL_BYTES = 4096
    IS_TEXT_UNICODE_UNICODE_MASK = 15
    IS_TEXT_UNICODE_REVERSE_MASK = 240
    IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840
    IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440
  end

  enum SYSNLS_FUNCTION : Int32
    COMPARE_STRING = 1
  end

  enum SYSGEOTYPE : Int32
    GEO_NATION = 1
    GEO_LATITUDE = 2
    GEO_LONGITUDE = 3
    GEO_ISO2 = 4
    GEO_ISO3 = 5
    GEO_RFC1766 = 6
    GEO_LCID = 7
    GEO_FRIENDLYNAME = 8
    GEO_OFFICIALNAME = 9
    GEO_TIMEZONES = 10
    GEO_OFFICIALLANGUAGES = 11
    GEO_ISO_UN_NUMBER = 12
    GEO_PARENT = 13
    GEO_DIALINGCODE = 14
    GEO_CURRENCYCODE = 15
    GEO_CURRENCYSYMBOL = 16
    GEO_NAME = 17
    GEO_ID = 18
  end

  enum SYSGEOCLASS : Int32
    GEOCLASS_NATION = 16
    GEOCLASS_REGION = 14
    GEOCLASS_ALL = 0
  end

  enum NORM_FORM : Int32
    NormalizationOther = 0
    NormalizationC = 1
    NormalizationD = 2
    NormalizationKC = 5
    NormalizationKD = 6
  end

  enum WORDLIST_TYPE : Int32
    WORDLIST_TYPE_IGNORE = 0
    WORDLIST_TYPE_ADD = 1
    WORDLIST_TYPE_EXCLUDE = 2
    WORDLIST_TYPE_AUTOCORRECT = 3
  end

  enum CORRECTIVE_ACTION : Int32
    CORRECTIVE_ACTION_NONE = 0
    CORRECTIVE_ACTION_GET_SUGGESTIONS = 1
    CORRECTIVE_ACTION_REPLACE = 2
    CORRECTIVE_ACTION_DELETE = 3
  end

  enum SCRIPT_JUSTIFY : Int32
    SCRIPT_JUSTIFY_NONE = 0
    SCRIPT_JUSTIFY_ARABIC_BLANK = 1
    SCRIPT_JUSTIFY_CHARACTER = 2
    SCRIPT_JUSTIFY_RESERVED1 = 3
    SCRIPT_JUSTIFY_BLANK = 4
    SCRIPT_JUSTIFY_RESERVED2 = 5
    SCRIPT_JUSTIFY_RESERVED3 = 6
    SCRIPT_JUSTIFY_ARABIC_NORMAL = 7
    SCRIPT_JUSTIFY_ARABIC_KASHIDA = 8
    SCRIPT_JUSTIFY_ARABIC_ALEF = 9
    SCRIPT_JUSTIFY_ARABIC_HA = 10
    SCRIPT_JUSTIFY_ARABIC_RA = 11
    SCRIPT_JUSTIFY_ARABIC_BA = 12
    SCRIPT_JUSTIFY_ARABIC_BARA = 13
    SCRIPT_JUSTIFY_ARABIC_SEEN = 14
    SCRIPT_JUSTIFY_ARABIC_SEEN_M = 15
  end

  enum UErrorCode : Int32
    U_USING_FALLBACK_WARNING = -128
    U_ERROR_WARNING_START = -128
    U_USING_DEFAULT_WARNING = -127
    U_SAFECLONE_ALLOCATED_WARNING = -126
    U_STATE_OLD_WARNING = -125
    U_STRING_NOT_TERMINATED_WARNING = -124
    U_SORT_KEY_TOO_SHORT_WARNING = -123
    U_AMBIGUOUS_ALIAS_WARNING = -122
    U_DIFFERENT_UCA_VERSION = -121
    U_PLUGIN_CHANGED_LEVEL_WARNING = -120
    U_ZERO_ERROR = 0
    U_ILLEGAL_ARGUMENT_ERROR = 1
    U_MISSING_RESOURCE_ERROR = 2
    U_INVALID_FORMAT_ERROR = 3
    U_FILE_ACCESS_ERROR = 4
    U_INTERNAL_PROGRAM_ERROR = 5
    U_MESSAGE_PARSE_ERROR = 6
    U_MEMORY_ALLOCATION_ERROR = 7
    U_INDEX_OUTOFBOUNDS_ERROR = 8
    U_PARSE_ERROR = 9
    U_INVALID_CHAR_FOUND = 10
    U_TRUNCATED_CHAR_FOUND = 11
    U_ILLEGAL_CHAR_FOUND = 12
    U_INVALID_TABLE_FORMAT = 13
    U_INVALID_TABLE_FILE = 14
    U_BUFFER_OVERFLOW_ERROR = 15
    U_UNSUPPORTED_ERROR = 16
    U_RESOURCE_TYPE_MISMATCH = 17
    U_ILLEGAL_ESCAPE_SEQUENCE = 18
    U_UNSUPPORTED_ESCAPE_SEQUENCE = 19
    U_NO_SPACE_AVAILABLE = 20
    U_CE_NOT_FOUND_ERROR = 21
    U_PRIMARY_TOO_LONG_ERROR = 22
    U_STATE_TOO_OLD_ERROR = 23
    U_TOO_MANY_ALIASES_ERROR = 24
    U_ENUM_OUT_OF_SYNC_ERROR = 25
    U_INVARIANT_CONVERSION_ERROR = 26
    U_INVALID_STATE_ERROR = 27
    U_COLLATOR_VERSION_MISMATCH = 28
    U_USELESS_COLLATOR_ERROR = 29
    U_NO_WRITE_PERMISSION = 30
    U_BAD_VARIABLE_DEFINITION = 65536
    U_PARSE_ERROR_START = 65536
    U_MALFORMED_RULE = 65537
    U_MALFORMED_SET = 65538
    U_MALFORMED_SYMBOL_REFERENCE = 65539
    U_MALFORMED_UNICODE_ESCAPE = 65540
    U_MALFORMED_VARIABLE_DEFINITION = 65541
    U_MALFORMED_VARIABLE_REFERENCE = 65542
    U_MISMATCHED_SEGMENT_DELIMITERS = 65543
    U_MISPLACED_ANCHOR_START = 65544
    U_MISPLACED_CURSOR_OFFSET = 65545
    U_MISPLACED_QUANTIFIER = 65546
    U_MISSING_OPERATOR = 65547
    U_MISSING_SEGMENT_CLOSE = 65548
    U_MULTIPLE_ANTE_CONTEXTS = 65549
    U_MULTIPLE_CURSORS = 65550
    U_MULTIPLE_POST_CONTEXTS = 65551
    U_TRAILING_BACKSLASH = 65552
    U_UNDEFINED_SEGMENT_REFERENCE = 65553
    U_UNDEFINED_VARIABLE = 65554
    U_UNQUOTED_SPECIAL = 65555
    U_UNTERMINATED_QUOTE = 65556
    U_RULE_MASK_ERROR = 65557
    U_MISPLACED_COMPOUND_FILTER = 65558
    U_MULTIPLE_COMPOUND_FILTERS = 65559
    U_INVALID_RBT_SYNTAX = 65560
    U_INVALID_PROPERTY_PATTERN = 65561
    U_MALFORMED_PRAGMA = 65562
    U_UNCLOSED_SEGMENT = 65563
    U_ILLEGAL_CHAR_IN_SEGMENT = 65564
    U_VARIABLE_RANGE_EXHAUSTED = 65565
    U_VARIABLE_RANGE_OVERLAP = 65566
    U_ILLEGAL_CHARACTER = 65567
    U_INTERNAL_TRANSLITERATOR_ERROR = 65568
    U_INVALID_ID = 65569
    U_INVALID_FUNCTION = 65570
    U_UNEXPECTED_TOKEN = 65792
    U_FMT_PARSE_ERROR_START = 65792
    U_MULTIPLE_DECIMAL_SEPARATORS = 65793
    U_MULTIPLE_DECIMAL_SEPERATORS = 65793
    U_MULTIPLE_EXPONENTIAL_SYMBOLS = 65794
    U_MALFORMED_EXPONENTIAL_PATTERN = 65795
    U_MULTIPLE_PERCENT_SYMBOLS = 65796
    U_MULTIPLE_PERMILL_SYMBOLS = 65797
    U_MULTIPLE_PAD_SPECIFIERS = 65798
    U_PATTERN_SYNTAX_ERROR = 65799
    U_ILLEGAL_PAD_POSITION = 65800
    U_UNMATCHED_BRACES = 65801
    U_UNSUPPORTED_PROPERTY = 65802
    U_UNSUPPORTED_ATTRIBUTE = 65803
    U_ARGUMENT_TYPE_MISMATCH = 65804
    U_DUPLICATE_KEYWORD = 65805
    U_UNDEFINED_KEYWORD = 65806
    U_DEFAULT_KEYWORD_MISSING = 65807
    U_DECIMAL_NUMBER_SYNTAX_ERROR = 65808
    U_FORMAT_INEXACT_ERROR = 65809
    U_NUMBER_ARG_OUTOFBOUNDS_ERROR = 65810
    U_NUMBER_SKELETON_SYNTAX_ERROR = 65811
    U_BRK_INTERNAL_ERROR = 66048
    U_BRK_ERROR_START = 66048
    U_BRK_HEX_DIGITS_EXPECTED = 66049
    U_BRK_SEMICOLON_EXPECTED = 66050
    U_BRK_RULE_SYNTAX = 66051
    U_BRK_UNCLOSED_SET = 66052
    U_BRK_ASSIGN_ERROR = 66053
    U_BRK_VARIABLE_REDFINITION = 66054
    U_BRK_MISMATCHED_PAREN = 66055
    U_BRK_NEW_LINE_IN_QUOTED_STRING = 66056
    U_BRK_UNDEFINED_VARIABLE = 66057
    U_BRK_INIT_ERROR = 66058
    U_BRK_RULE_EMPTY_SET = 66059
    U_BRK_UNRECOGNIZED_OPTION = 66060
    U_BRK_MALFORMED_RULE_TAG = 66061
    U_REGEX_INTERNAL_ERROR = 66304
    U_REGEX_ERROR_START = 66304
    U_REGEX_RULE_SYNTAX = 66305
    U_REGEX_INVALID_STATE = 66306
    U_REGEX_BAD_ESCAPE_SEQUENCE = 66307
    U_REGEX_PROPERTY_SYNTAX = 66308
    U_REGEX_UNIMPLEMENTED = 66309
    U_REGEX_MISMATCHED_PAREN = 66310
    U_REGEX_NUMBER_TOO_BIG = 66311
    U_REGEX_BAD_INTERVAL = 66312
    U_REGEX_MAX_LT_MIN = 66313
    U_REGEX_INVALID_BACK_REF = 66314
    U_REGEX_INVALID_FLAG = 66315
    U_REGEX_LOOK_BEHIND_LIMIT = 66316
    U_REGEX_SET_CONTAINS_STRING = 66317
    U_REGEX_MISSING_CLOSE_BRACKET = 66319
    U_REGEX_INVALID_RANGE = 66320
    U_REGEX_STACK_OVERFLOW = 66321
    U_REGEX_TIME_OUT = 66322
    U_REGEX_STOPPED_BY_CALLER = 66323
    U_REGEX_PATTERN_TOO_BIG = 66324
    U_REGEX_INVALID_CAPTURE_GROUP_NAME = 66325
    U_IDNA_PROHIBITED_ERROR = 66560
    U_IDNA_ERROR_START = 66560
    U_IDNA_UNASSIGNED_ERROR = 66561
    U_IDNA_CHECK_BIDI_ERROR = 66562
    U_IDNA_STD3_ASCII_RULES_ERROR = 66563
    U_IDNA_ACE_PREFIX_ERROR = 66564
    U_IDNA_VERIFICATION_ERROR = 66565
    U_IDNA_LABEL_TOO_LONG_ERROR = 66566
    U_IDNA_ZERO_LENGTH_LABEL_ERROR = 66567
    U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR = 66568
    U_STRINGPREP_PROHIBITED_ERROR = 66560
    U_STRINGPREP_UNASSIGNED_ERROR = 66561
    U_STRINGPREP_CHECK_BIDI_ERROR = 66562
    U_PLUGIN_ERROR_START = 66816
    U_PLUGIN_TOO_HIGH = 66816
    U_PLUGIN_DIDNT_SET_LEVEL = 66817
  end

  enum UTraceLevel : Int32
    UTRACE_OFF = -1
    UTRACE_ERROR = 0
    UTRACE_WARNING = 3
    UTRACE_OPEN_CLOSE = 5
    UTRACE_INFO = 7
    UTRACE_VERBOSE = 9
  end

  enum UTraceFunctionNumber : Int32
    UTRACE_FUNCTION_START = 0
    UTRACE_U_INIT = 0
    UTRACE_U_CLEANUP = 1
    UTRACE_CONVERSION_START = 4096
    UTRACE_UCNV_OPEN = 4096
    UTRACE_UCNV_OPEN_PACKAGE = 4097
    UTRACE_UCNV_OPEN_ALGORITHMIC = 4098
    UTRACE_UCNV_CLONE = 4099
    UTRACE_UCNV_CLOSE = 4100
    UTRACE_UCNV_FLUSH_CACHE = 4101
    UTRACE_UCNV_LOAD = 4102
    UTRACE_UCNV_UNLOAD = 4103
    UTRACE_COLLATION_START = 8192
    UTRACE_UCOL_OPEN = 8192
    UTRACE_UCOL_CLOSE = 8193
    UTRACE_UCOL_STRCOLL = 8194
    UTRACE_UCOL_GET_SORTKEY = 8195
    UTRACE_UCOL_GETLOCALE = 8196
    UTRACE_UCOL_NEXTSORTKEYPART = 8197
    UTRACE_UCOL_STRCOLLITER = 8198
    UTRACE_UCOL_OPEN_FROM_SHORT_STRING = 8199
    UTRACE_UCOL_STRCOLLUTF8 = 8200
    UTRACE_UDATA_START = 12288
    UTRACE_UDATA_RESOURCE = 12288
    UTRACE_UDATA_BUNDLE = 12289
    UTRACE_UDATA_DATA_FILE = 12290
    UTRACE_UDATA_RES_FILE = 12291
  end

  enum UStringTrieResult : Int32
    USTRINGTRIE_NO_MATCH = 0
    USTRINGTRIE_NO_VALUE = 1
    USTRINGTRIE_FINAL_VALUE = 2
    USTRINGTRIE_INTERMEDIATE_VALUE = 3
  end

  enum UScriptCode : Int32
    USCRIPT_INVALID_CODE = -1
    USCRIPT_COMMON = 0
    USCRIPT_INHERITED = 1
    USCRIPT_ARABIC = 2
    USCRIPT_ARMENIAN = 3
    USCRIPT_BENGALI = 4
    USCRIPT_BOPOMOFO = 5
    USCRIPT_CHEROKEE = 6
    USCRIPT_COPTIC = 7
    USCRIPT_CYRILLIC = 8
    USCRIPT_DESERET = 9
    USCRIPT_DEVANAGARI = 10
    USCRIPT_ETHIOPIC = 11
    USCRIPT_GEORGIAN = 12
    USCRIPT_GOTHIC = 13
    USCRIPT_GREEK = 14
    USCRIPT_GUJARATI = 15
    USCRIPT_GURMUKHI = 16
    USCRIPT_HAN = 17
    USCRIPT_HANGUL = 18
    USCRIPT_HEBREW = 19
    USCRIPT_HIRAGANA = 20
    USCRIPT_KANNADA = 21
    USCRIPT_KATAKANA = 22
    USCRIPT_KHMER = 23
    USCRIPT_LAO = 24
    USCRIPT_LATIN = 25
    USCRIPT_MALAYALAM = 26
    USCRIPT_MONGOLIAN = 27
    USCRIPT_MYANMAR = 28
    USCRIPT_OGHAM = 29
    USCRIPT_OLD_ITALIC = 30
    USCRIPT_ORIYA = 31
    USCRIPT_RUNIC = 32
    USCRIPT_SINHALA = 33
    USCRIPT_SYRIAC = 34
    USCRIPT_TAMIL = 35
    USCRIPT_TELUGU = 36
    USCRIPT_THAANA = 37
    USCRIPT_THAI = 38
    USCRIPT_TIBETAN = 39
    USCRIPT_CANADIAN_ABORIGINAL = 40
    USCRIPT_UCAS = 40
    USCRIPT_YI = 41
    USCRIPT_TAGALOG = 42
    USCRIPT_HANUNOO = 43
    USCRIPT_BUHID = 44
    USCRIPT_TAGBANWA = 45
    USCRIPT_BRAILLE = 46
    USCRIPT_CYPRIOT = 47
    USCRIPT_LIMBU = 48
    USCRIPT_LINEAR_B = 49
    USCRIPT_OSMANYA = 50
    USCRIPT_SHAVIAN = 51
    USCRIPT_TAI_LE = 52
    USCRIPT_UGARITIC = 53
    USCRIPT_KATAKANA_OR_HIRAGANA = 54
    USCRIPT_BUGINESE = 55
    USCRIPT_GLAGOLITIC = 56
    USCRIPT_KHAROSHTHI = 57
    USCRIPT_SYLOTI_NAGRI = 58
    USCRIPT_NEW_TAI_LUE = 59
    USCRIPT_TIFINAGH = 60
    USCRIPT_OLD_PERSIAN = 61
    USCRIPT_BALINESE = 62
    USCRIPT_BATAK = 63
    USCRIPT_BLISSYMBOLS = 64
    USCRIPT_BRAHMI = 65
    USCRIPT_CHAM = 66
    USCRIPT_CIRTH = 67
    USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC = 68
    USCRIPT_DEMOTIC_EGYPTIAN = 69
    USCRIPT_HIERATIC_EGYPTIAN = 70
    USCRIPT_EGYPTIAN_HIEROGLYPHS = 71
    USCRIPT_KHUTSURI = 72
    USCRIPT_SIMPLIFIED_HAN = 73
    USCRIPT_TRADITIONAL_HAN = 74
    USCRIPT_PAHAWH_HMONG = 75
    USCRIPT_OLD_HUNGARIAN = 76
    USCRIPT_HARAPPAN_INDUS = 77
    USCRIPT_JAVANESE = 78
    USCRIPT_KAYAH_LI = 79
    USCRIPT_LATIN_FRAKTUR = 80
    USCRIPT_LATIN_GAELIC = 81
    USCRIPT_LEPCHA = 82
    USCRIPT_LINEAR_A = 83
    USCRIPT_MANDAIC = 84
    USCRIPT_MANDAEAN = 84
    USCRIPT_MAYAN_HIEROGLYPHS = 85
    USCRIPT_MEROITIC_HIEROGLYPHS = 86
    USCRIPT_MEROITIC = 86
    USCRIPT_NKO = 87
    USCRIPT_ORKHON = 88
    USCRIPT_OLD_PERMIC = 89
    USCRIPT_PHAGS_PA = 90
    USCRIPT_PHOENICIAN = 91
    USCRIPT_MIAO = 92
    USCRIPT_PHONETIC_POLLARD = 92
    USCRIPT_RONGORONGO = 93
    USCRIPT_SARATI = 94
    USCRIPT_ESTRANGELO_SYRIAC = 95
    USCRIPT_WESTERN_SYRIAC = 96
    USCRIPT_EASTERN_SYRIAC = 97
    USCRIPT_TENGWAR = 98
    USCRIPT_VAI = 99
    USCRIPT_VISIBLE_SPEECH = 100
    USCRIPT_CUNEIFORM = 101
    USCRIPT_UNWRITTEN_LANGUAGES = 102
    USCRIPT_UNKNOWN = 103
    USCRIPT_CARIAN = 104
    USCRIPT_JAPANESE = 105
    USCRIPT_LANNA = 106
    USCRIPT_LYCIAN = 107
    USCRIPT_LYDIAN = 108
    USCRIPT_OL_CHIKI = 109
    USCRIPT_REJANG = 110
    USCRIPT_SAURASHTRA = 111
    USCRIPT_SIGN_WRITING = 112
    USCRIPT_SUNDANESE = 113
    USCRIPT_MOON = 114
    USCRIPT_MEITEI_MAYEK = 115
    USCRIPT_IMPERIAL_ARAMAIC = 116
    USCRIPT_AVESTAN = 117
    USCRIPT_CHAKMA = 118
    USCRIPT_KOREAN = 119
    USCRIPT_KAITHI = 120
    USCRIPT_MANICHAEAN = 121
    USCRIPT_INSCRIPTIONAL_PAHLAVI = 122
    USCRIPT_PSALTER_PAHLAVI = 123
    USCRIPT_BOOK_PAHLAVI = 124
    USCRIPT_INSCRIPTIONAL_PARTHIAN = 125
    USCRIPT_SAMARITAN = 126
    USCRIPT_TAI_VIET = 127
    USCRIPT_MATHEMATICAL_NOTATION = 128
    USCRIPT_SYMBOLS = 129
    USCRIPT_BAMUM = 130
    USCRIPT_LISU = 131
    USCRIPT_NAKHI_GEBA = 132
    USCRIPT_OLD_SOUTH_ARABIAN = 133
    USCRIPT_BASSA_VAH = 134
    USCRIPT_DUPLOYAN = 135
    USCRIPT_ELBASAN = 136
    USCRIPT_GRANTHA = 137
    USCRIPT_KPELLE = 138
    USCRIPT_LOMA = 139
    USCRIPT_MENDE = 140
    USCRIPT_MEROITIC_CURSIVE = 141
    USCRIPT_OLD_NORTH_ARABIAN = 142
    USCRIPT_NABATAEAN = 143
    USCRIPT_PALMYRENE = 144
    USCRIPT_KHUDAWADI = 145
    USCRIPT_SINDHI = 145
    USCRIPT_WARANG_CITI = 146
    USCRIPT_AFAKA = 147
    USCRIPT_JURCHEN = 148
    USCRIPT_MRO = 149
    USCRIPT_NUSHU = 150
    USCRIPT_SHARADA = 151
    USCRIPT_SORA_SOMPENG = 152
    USCRIPT_TAKRI = 153
    USCRIPT_TANGUT = 154
    USCRIPT_WOLEAI = 155
    USCRIPT_ANATOLIAN_HIEROGLYPHS = 156
    USCRIPT_KHOJKI = 157
    USCRIPT_TIRHUTA = 158
    USCRIPT_CAUCASIAN_ALBANIAN = 159
    USCRIPT_MAHAJANI = 160
    USCRIPT_AHOM = 161
    USCRIPT_HATRAN = 162
    USCRIPT_MODI = 163
    USCRIPT_MULTANI = 164
    USCRIPT_PAU_CIN_HAU = 165
    USCRIPT_SIDDHAM = 166
    USCRIPT_ADLAM = 167
    USCRIPT_BHAIKSUKI = 168
    USCRIPT_MARCHEN = 169
    USCRIPT_NEWA = 170
    USCRIPT_OSAGE = 171
    USCRIPT_HAN_WITH_BOPOMOFO = 172
    USCRIPT_JAMO = 173
    USCRIPT_SYMBOLS_EMOJI = 174
    USCRIPT_MASARAM_GONDI = 175
    USCRIPT_SOYOMBO = 176
    USCRIPT_ZANABAZAR_SQUARE = 177
    USCRIPT_DOGRA = 178
    USCRIPT_GUNJALA_GONDI = 179
    USCRIPT_MAKASAR = 180
    USCRIPT_MEDEFAIDRIN = 181
    USCRIPT_HANIFI_ROHINGYA = 182
    USCRIPT_SOGDIAN = 183
    USCRIPT_OLD_SOGDIAN = 184
    USCRIPT_ELYMAIC = 185
    USCRIPT_NYIAKENG_PUACHUE_HMONG = 186
    USCRIPT_NANDINAGARI = 187
    USCRIPT_WANCHO = 188
    USCRIPT_CHORASMIAN = 189
    USCRIPT_DIVES_AKURU = 190
    USCRIPT_KHITAN_SMALL_SCRIPT = 191
    USCRIPT_YEZIDI = 192
  end

  enum UScriptUsage : Int32
    USCRIPT_USAGE_NOT_ENCODED = 0
    USCRIPT_USAGE_UNKNOWN = 1
    USCRIPT_USAGE_EXCLUDED = 2
    USCRIPT_USAGE_LIMITED_USE = 3
    USCRIPT_USAGE_ASPIRATIONAL = 4
    USCRIPT_USAGE_RECOMMENDED = 5
  end

  enum UCharIteratorOrigin : Int32
    UITER_START = 0
    UITER_CURRENT = 1
    UITER_LIMIT = 2
    UITER_ZERO = 3
    UITER_LENGTH = 4
  end

  enum ULocDataLocaleType : Int32
    ULOC_ACTUAL_LOCALE = 0
    ULOC_VALID_LOCALE = 1
  end

  enum ULocAvailableType : Int32
    ULOC_AVAILABLE_DEFAULT = 0
    ULOC_AVAILABLE_ONLY_LEGACY_ALIASES = 1
    ULOC_AVAILABLE_WITH_LEGACY_ALIASES = 2
  end

  enum ULayoutType : Int32
    ULOC_LAYOUT_LTR = 0
    ULOC_LAYOUT_RTL = 1
    ULOC_LAYOUT_TTB = 2
    ULOC_LAYOUT_BTT = 3
    ULOC_LAYOUT_UNKNOWN = 4
  end

  enum UAcceptResult : Int32
    ULOC_ACCEPT_FAILED = 0
    ULOC_ACCEPT_VALID = 1
    ULOC_ACCEPT_FALLBACK = 2
  end

  enum UResType : Int32
    URES_NONE = -1
    URES_STRING = 0
    URES_BINARY = 1
    URES_TABLE = 2
    URES_ALIAS = 3
    URES_INT = 7
    URES_ARRAY = 8
    URES_INT_VECTOR = 14
  end

  enum UDisplayContextType : Int32
    UDISPCTX_TYPE_DIALECT_HANDLING = 0
    UDISPCTX_TYPE_CAPITALIZATION = 1
    UDISPCTX_TYPE_DISPLAY_LENGTH = 2
    UDISPCTX_TYPE_SUBSTITUTE_HANDLING = 3
  end

  enum UDisplayContext : Int32
    UDISPCTX_STANDARD_NAMES = 0
    UDISPCTX_DIALECT_NAMES = 1
    UDISPCTX_CAPITALIZATION_NONE = 256
    UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE = 257
    UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE = 258
    UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU = 259
    UDISPCTX_CAPITALIZATION_FOR_STANDALONE = 260
    UDISPCTX_LENGTH_FULL = 512
    UDISPCTX_LENGTH_SHORT = 513
    UDISPCTX_SUBSTITUTE = 768
    UDISPCTX_NO_SUBSTITUTE = 769
  end

  enum UDialectHandling : Int32
    ULDN_STANDARD_NAMES = 0
    ULDN_DIALECT_NAMES = 1
  end

  enum UCurrencyUsage : Int32
    UCURR_USAGE_STANDARD = 0
    UCURR_USAGE_CASH = 1
  end

  enum UCurrNameStyle : Int32
    UCURR_SYMBOL_NAME = 0
    UCURR_LONG_NAME = 1
    UCURR_NARROW_SYMBOL_NAME = 2
  end

  enum UCurrCurrencyType : Int32
    UCURR_ALL = 2147483647
    UCURR_COMMON = 1
    UCURR_UNCOMMON = 2
    UCURR_DEPRECATED = 4
    UCURR_NON_DEPRECATED = 8
  end

  enum UCPMapRangeOption : Int32
    UCPMAP_RANGE_NORMAL = 0
    UCPMAP_RANGE_FIXED_LEAD_SURROGATES = 1
    UCPMAP_RANGE_FIXED_ALL_SURROGATES = 2
  end

  enum UCPTrieType : Int32
    UCPTRIE_TYPE_ANY = -1
    UCPTRIE_TYPE_FAST = 0
    UCPTRIE_TYPE_SMALL = 1
  end

  enum UCPTrieValueWidth : Int32
    UCPTRIE_VALUE_BITS_ANY = -1
    UCPTRIE_VALUE_BITS_16 = 0
    UCPTRIE_VALUE_BITS_32 = 1
    UCPTRIE_VALUE_BITS_8 = 2
  end

  enum UConverterCallbackReason : Int32
    UCNV_UNASSIGNED = 0
    UCNV_ILLEGAL = 1
    UCNV_IRREGULAR = 2
    UCNV_RESET = 3
    UCNV_CLOSE = 4
    UCNV_CLONE = 5
  end

  enum UConverterType : Int32
    UCNV_UNSUPPORTED_CONVERTER = -1
    UCNV_SBCS = 0
    UCNV_DBCS = 1
    UCNV_MBCS = 2
    UCNV_LATIN_1 = 3
    UCNV_UTF8 = 4
    UCNV_UTF16_BigEndian = 5
    UCNV_UTF16_LittleEndian = 6
    UCNV_UTF32_BigEndian = 7
    UCNV_UTF32_LittleEndian = 8
    UCNV_EBCDIC_STATEFUL = 9
    UCNV_ISO_2022 = 10
    UCNV_LMBCS_1 = 11
    UCNV_LMBCS_2 = 12
    UCNV_LMBCS_3 = 13
    UCNV_LMBCS_4 = 14
    UCNV_LMBCS_5 = 15
    UCNV_LMBCS_6 = 16
    UCNV_LMBCS_8 = 17
    UCNV_LMBCS_11 = 18
    UCNV_LMBCS_16 = 19
    UCNV_LMBCS_17 = 20
    UCNV_LMBCS_18 = 21
    UCNV_LMBCS_19 = 22
    UCNV_LMBCS_LAST = 22
    UCNV_HZ = 23
    UCNV_SCSU = 24
    UCNV_ISCII = 25
    UCNV_US_ASCII = 26
    UCNV_UTF7 = 27
    UCNV_BOCU1 = 28
    UCNV_UTF16 = 29
    UCNV_UTF32 = 30
    UCNV_CESU8 = 31
    UCNV_IMAP_MAILBOX = 32
    UCNV_COMPOUND_TEXT = 33
    UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES = 34
  end

  enum UConverterPlatform : Int32
    UCNV_UNKNOWN = -1
    UCNV_IBM = 0
  end

  enum UConverterUnicodeSet : Int32
    UCNV_ROUNDTRIP_SET = 0
    UCNV_ROUNDTRIP_AND_FALLBACK_SET = 1
  end

  enum UProperty : Int32
    UCHAR_ALPHABETIC = 0
    UCHAR_BINARY_START = 0
    UCHAR_ASCII_HEX_DIGIT = 1
    UCHAR_BIDI_CONTROL = 2
    UCHAR_BIDI_MIRRORED = 3
    UCHAR_DASH = 4
    UCHAR_DEFAULT_IGNORABLE_CODE_POINT = 5
    UCHAR_DEPRECATED = 6
    UCHAR_DIACRITIC = 7
    UCHAR_EXTENDER = 8
    UCHAR_FULL_COMPOSITION_EXCLUSION = 9
    UCHAR_GRAPHEME_BASE = 10
    UCHAR_GRAPHEME_EXTEND = 11
    UCHAR_GRAPHEME_LINK = 12
    UCHAR_HEX_DIGIT = 13
    UCHAR_HYPHEN = 14
    UCHAR_ID_CONTINUE = 15
    UCHAR_ID_START = 16
    UCHAR_IDEOGRAPHIC = 17
    UCHAR_IDS_BINARY_OPERATOR = 18
    UCHAR_IDS_TRINARY_OPERATOR = 19
    UCHAR_JOIN_CONTROL = 20
    UCHAR_LOGICAL_ORDER_EXCEPTION = 21
    UCHAR_LOWERCASE = 22
    UCHAR_MATH = 23
    UCHAR_NONCHARACTER_CODE_POINT = 24
    UCHAR_QUOTATION_MARK = 25
    UCHAR_RADICAL = 26
    UCHAR_SOFT_DOTTED = 27
    UCHAR_TERMINAL_PUNCTUATION = 28
    UCHAR_UNIFIED_IDEOGRAPH = 29
    UCHAR_UPPERCASE = 30
    UCHAR_WHITE_SPACE = 31
    UCHAR_XID_CONTINUE = 32
    UCHAR_XID_START = 33
    UCHAR_CASE_SENSITIVE = 34
    UCHAR_S_TERM = 35
    UCHAR_VARIATION_SELECTOR = 36
    UCHAR_NFD_INERT = 37
    UCHAR_NFKD_INERT = 38
    UCHAR_NFC_INERT = 39
    UCHAR_NFKC_INERT = 40
    UCHAR_SEGMENT_STARTER = 41
    UCHAR_PATTERN_SYNTAX = 42
    UCHAR_PATTERN_WHITE_SPACE = 43
    UCHAR_POSIX_ALNUM = 44
    UCHAR_POSIX_BLANK = 45
    UCHAR_POSIX_GRAPH = 46
    UCHAR_POSIX_PRINT = 47
    UCHAR_POSIX_XDIGIT = 48
    UCHAR_CASED = 49
    UCHAR_CASE_IGNORABLE = 50
    UCHAR_CHANGES_WHEN_LOWERCASED = 51
    UCHAR_CHANGES_WHEN_UPPERCASED = 52
    UCHAR_CHANGES_WHEN_TITLECASED = 53
    UCHAR_CHANGES_WHEN_CASEFOLDED = 54
    UCHAR_CHANGES_WHEN_CASEMAPPED = 55
    UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED = 56
    UCHAR_EMOJI = 57
    UCHAR_EMOJI_PRESENTATION = 58
    UCHAR_EMOJI_MODIFIER = 59
    UCHAR_EMOJI_MODIFIER_BASE = 60
    UCHAR_EMOJI_COMPONENT = 61
    UCHAR_REGIONAL_INDICATOR = 62
    UCHAR_PREPENDED_CONCATENATION_MARK = 63
    UCHAR_EXTENDED_PICTOGRAPHIC = 64
    UCHAR_BIDI_CLASS = 4096
    UCHAR_INT_START = 4096
    UCHAR_BLOCK = 4097
    UCHAR_CANONICAL_COMBINING_CLASS = 4098
    UCHAR_DECOMPOSITION_TYPE = 4099
    UCHAR_EAST_ASIAN_WIDTH = 4100
    UCHAR_GENERAL_CATEGORY = 4101
    UCHAR_JOINING_GROUP = 4102
    UCHAR_JOINING_TYPE = 4103
    UCHAR_LINE_BREAK = 4104
    UCHAR_NUMERIC_TYPE = 4105
    UCHAR_SCRIPT = 4106
    UCHAR_HANGUL_SYLLABLE_TYPE = 4107
    UCHAR_NFD_QUICK_CHECK = 4108
    UCHAR_NFKD_QUICK_CHECK = 4109
    UCHAR_NFC_QUICK_CHECK = 4110
    UCHAR_NFKC_QUICK_CHECK = 4111
    UCHAR_LEAD_CANONICAL_COMBINING_CLASS = 4112
    UCHAR_TRAIL_CANONICAL_COMBINING_CLASS = 4113
    UCHAR_GRAPHEME_CLUSTER_BREAK = 4114
    UCHAR_SENTENCE_BREAK = 4115
    UCHAR_WORD_BREAK = 4116
    UCHAR_BIDI_PAIRED_BRACKET_TYPE = 4117
    UCHAR_INDIC_POSITIONAL_CATEGORY = 4118
    UCHAR_INDIC_SYLLABIC_CATEGORY = 4119
    UCHAR_VERTICAL_ORIENTATION = 4120
    UCHAR_GENERAL_CATEGORY_MASK = 8192
    UCHAR_MASK_START = 8192
    UCHAR_NUMERIC_VALUE = 12288
    UCHAR_DOUBLE_START = 12288
    UCHAR_AGE = 16384
    UCHAR_STRING_START = 16384
    UCHAR_BIDI_MIRRORING_GLYPH = 16385
    UCHAR_CASE_FOLDING = 16386
    UCHAR_LOWERCASE_MAPPING = 16388
    UCHAR_NAME = 16389
    UCHAR_SIMPLE_CASE_FOLDING = 16390
    UCHAR_SIMPLE_LOWERCASE_MAPPING = 16391
    UCHAR_SIMPLE_TITLECASE_MAPPING = 16392
    UCHAR_SIMPLE_UPPERCASE_MAPPING = 16393
    UCHAR_TITLECASE_MAPPING = 16394
    UCHAR_UPPERCASE_MAPPING = 16396
    UCHAR_BIDI_PAIRED_BRACKET = 16397
    UCHAR_SCRIPT_EXTENSIONS = 28672
    UCHAR_OTHER_PROPERTY_START = 28672
    UCHAR_INVALID_CODE = -1
  end

  enum UCharCategory : Int32
    U_UNASSIGNED = 0
    U_GENERAL_OTHER_TYPES = 0
    U_UPPERCASE_LETTER = 1
    U_LOWERCASE_LETTER = 2
    U_TITLECASE_LETTER = 3
    U_MODIFIER_LETTER = 4
    U_OTHER_LETTER = 5
    U_NON_SPACING_MARK = 6
    U_ENCLOSING_MARK = 7
    U_COMBINING_SPACING_MARK = 8
    U_DECIMAL_DIGIT_NUMBER = 9
    U_LETTER_NUMBER = 10
    U_OTHER_NUMBER = 11
    U_SPACE_SEPARATOR = 12
    U_LINE_SEPARATOR = 13
    U_PARAGRAPH_SEPARATOR = 14
    U_CONTROL_CHAR = 15
    U_FORMAT_CHAR = 16
    U_PRIVATE_USE_CHAR = 17
    U_SURROGATE = 18
    U_DASH_PUNCTUATION = 19
    U_START_PUNCTUATION = 20
    U_END_PUNCTUATION = 21
    U_CONNECTOR_PUNCTUATION = 22
    U_OTHER_PUNCTUATION = 23
    U_MATH_SYMBOL = 24
    U_CURRENCY_SYMBOL = 25
    U_MODIFIER_SYMBOL = 26
    U_OTHER_SYMBOL = 27
    U_INITIAL_PUNCTUATION = 28
    U_FINAL_PUNCTUATION = 29
    U_CHAR_CATEGORY_COUNT = 30
  end

  enum UCharDirection : Int32
    U_LEFT_TO_RIGHT = 0
    U_RIGHT_TO_LEFT = 1
    U_EUROPEAN_NUMBER = 2
    U_EUROPEAN_NUMBER_SEPARATOR = 3
    U_EUROPEAN_NUMBER_TERMINATOR = 4
    U_ARABIC_NUMBER = 5
    U_COMMON_NUMBER_SEPARATOR = 6
    U_BLOCK_SEPARATOR = 7
    U_SEGMENT_SEPARATOR = 8
    U_WHITE_SPACE_NEUTRAL = 9
    U_OTHER_NEUTRAL = 10
    U_LEFT_TO_RIGHT_EMBEDDING = 11
    U_LEFT_TO_RIGHT_OVERRIDE = 12
    U_RIGHT_TO_LEFT_ARABIC = 13
    U_RIGHT_TO_LEFT_EMBEDDING = 14
    U_RIGHT_TO_LEFT_OVERRIDE = 15
    U_POP_DIRECTIONAL_FORMAT = 16
    U_DIR_NON_SPACING_MARK = 17
    U_BOUNDARY_NEUTRAL = 18
    U_FIRST_STRONG_ISOLATE = 19
    U_LEFT_TO_RIGHT_ISOLATE = 20
    U_RIGHT_TO_LEFT_ISOLATE = 21
    U_POP_DIRECTIONAL_ISOLATE = 22
  end

  enum UBidiPairedBracketType : Int32
    U_BPT_NONE = 0
    U_BPT_OPEN = 1
    U_BPT_CLOSE = 2
  end

  enum UBlockCode : Int32
    UBLOCK_NO_BLOCK = 0
    UBLOCK_BASIC_LATIN = 1
    UBLOCK_LATIN_1_SUPPLEMENT = 2
    UBLOCK_LATIN_EXTENDED_A = 3
    UBLOCK_LATIN_EXTENDED_B = 4
    UBLOCK_IPA_EXTENSIONS = 5
    UBLOCK_SPACING_MODIFIER_LETTERS = 6
    UBLOCK_COMBINING_DIACRITICAL_MARKS = 7
    UBLOCK_GREEK = 8
    UBLOCK_CYRILLIC = 9
    UBLOCK_ARMENIAN = 10
    UBLOCK_HEBREW = 11
    UBLOCK_ARABIC = 12
    UBLOCK_SYRIAC = 13
    UBLOCK_THAANA = 14
    UBLOCK_DEVANAGARI = 15
    UBLOCK_BENGALI = 16
    UBLOCK_GURMUKHI = 17
    UBLOCK_GUJARATI = 18
    UBLOCK_ORIYA = 19
    UBLOCK_TAMIL = 20
    UBLOCK_TELUGU = 21
    UBLOCK_KANNADA = 22
    UBLOCK_MALAYALAM = 23
    UBLOCK_SINHALA = 24
    UBLOCK_THAI = 25
    UBLOCK_LAO = 26
    UBLOCK_TIBETAN = 27
    UBLOCK_MYANMAR = 28
    UBLOCK_GEORGIAN = 29
    UBLOCK_HANGUL_JAMO = 30
    UBLOCK_ETHIOPIC = 31
    UBLOCK_CHEROKEE = 32
    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 33
    UBLOCK_OGHAM = 34
    UBLOCK_RUNIC = 35
    UBLOCK_KHMER = 36
    UBLOCK_MONGOLIAN = 37
    UBLOCK_LATIN_EXTENDED_ADDITIONAL = 38
    UBLOCK_GREEK_EXTENDED = 39
    UBLOCK_GENERAL_PUNCTUATION = 40
    UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS = 41
    UBLOCK_CURRENCY_SYMBOLS = 42
    UBLOCK_COMBINING_MARKS_FOR_SYMBOLS = 43
    UBLOCK_LETTERLIKE_SYMBOLS = 44
    UBLOCK_NUMBER_FORMS = 45
    UBLOCK_ARROWS = 46
    UBLOCK_MATHEMATICAL_OPERATORS = 47
    UBLOCK_MISCELLANEOUS_TECHNICAL = 48
    UBLOCK_CONTROL_PICTURES = 49
    UBLOCK_OPTICAL_CHARACTER_RECOGNITION = 50
    UBLOCK_ENCLOSED_ALPHANUMERICS = 51
    UBLOCK_BOX_DRAWING = 52
    UBLOCK_BLOCK_ELEMENTS = 53
    UBLOCK_GEOMETRIC_SHAPES = 54
    UBLOCK_MISCELLANEOUS_SYMBOLS = 55
    UBLOCK_DINGBATS = 56
    UBLOCK_BRAILLE_PATTERNS = 57
    UBLOCK_CJK_RADICALS_SUPPLEMENT = 58
    UBLOCK_KANGXI_RADICALS = 59
    UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS = 60
    UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION = 61
    UBLOCK_HIRAGANA = 62
    UBLOCK_KATAKANA = 63
    UBLOCK_BOPOMOFO = 64
    UBLOCK_HANGUL_COMPATIBILITY_JAMO = 65
    UBLOCK_KANBUN = 66
    UBLOCK_BOPOMOFO_EXTENDED = 67
    UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS = 68
    UBLOCK_CJK_COMPATIBILITY = 69
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = 70
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS = 71
    UBLOCK_YI_SYLLABLES = 72
    UBLOCK_YI_RADICALS = 73
    UBLOCK_HANGUL_SYLLABLES = 74
    UBLOCK_HIGH_SURROGATES = 75
    UBLOCK_HIGH_PRIVATE_USE_SURROGATES = 76
    UBLOCK_LOW_SURROGATES = 77
    UBLOCK_PRIVATE_USE_AREA = 78
    UBLOCK_PRIVATE_USE = 78
    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS = 79
    UBLOCK_ALPHABETIC_PRESENTATION_FORMS = 80
    UBLOCK_ARABIC_PRESENTATION_FORMS_A = 81
    UBLOCK_COMBINING_HALF_MARKS = 82
    UBLOCK_CJK_COMPATIBILITY_FORMS = 83
    UBLOCK_SMALL_FORM_VARIANTS = 84
    UBLOCK_ARABIC_PRESENTATION_FORMS_B = 85
    UBLOCK_SPECIALS = 86
    UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS = 87
    UBLOCK_OLD_ITALIC = 88
    UBLOCK_GOTHIC = 89
    UBLOCK_DESERET = 90
    UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = 91
    UBLOCK_MUSICAL_SYMBOLS = 92
    UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 93
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = 94
    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = 95
    UBLOCK_TAGS = 96
    UBLOCK_CYRILLIC_SUPPLEMENT = 97
    UBLOCK_CYRILLIC_SUPPLEMENTARY = 97
    UBLOCK_TAGALOG = 98
    UBLOCK_HANUNOO = 99
    UBLOCK_BUHID = 100
    UBLOCK_TAGBANWA = 101
    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = 102
    UBLOCK_SUPPLEMENTAL_ARROWS_A = 103
    UBLOCK_SUPPLEMENTAL_ARROWS_B = 104
    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = 105
    UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = 106
    UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = 107
    UBLOCK_VARIATION_SELECTORS = 108
    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = 109
    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = 110
    UBLOCK_LIMBU = 111
    UBLOCK_TAI_LE = 112
    UBLOCK_KHMER_SYMBOLS = 113
    UBLOCK_PHONETIC_EXTENSIONS = 114
    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = 115
    UBLOCK_YIJING_HEXAGRAM_SYMBOLS = 116
    UBLOCK_LINEAR_B_SYLLABARY = 117
    UBLOCK_LINEAR_B_IDEOGRAMS = 118
    UBLOCK_AEGEAN_NUMBERS = 119
    UBLOCK_UGARITIC = 120
    UBLOCK_SHAVIAN = 121
    UBLOCK_OSMANYA = 122
    UBLOCK_CYPRIOT_SYLLABARY = 123
    UBLOCK_TAI_XUAN_JING_SYMBOLS = 124
    UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = 125
    UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = 126
    UBLOCK_ANCIENT_GREEK_NUMBERS = 127
    UBLOCK_ARABIC_SUPPLEMENT = 128
    UBLOCK_BUGINESE = 129
    UBLOCK_CJK_STROKES = 130
    UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = 131
    UBLOCK_COPTIC = 132
    UBLOCK_ETHIOPIC_EXTENDED = 133
    UBLOCK_ETHIOPIC_SUPPLEMENT = 134
    UBLOCK_GEORGIAN_SUPPLEMENT = 135
    UBLOCK_GLAGOLITIC = 136
    UBLOCK_KHAROSHTHI = 137
    UBLOCK_MODIFIER_TONE_LETTERS = 138
    UBLOCK_NEW_TAI_LUE = 139
    UBLOCK_OLD_PERSIAN = 140
    UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = 141
    UBLOCK_SUPPLEMENTAL_PUNCTUATION = 142
    UBLOCK_SYLOTI_NAGRI = 143
    UBLOCK_TIFINAGH = 144
    UBLOCK_VERTICAL_FORMS = 145
    UBLOCK_NKO = 146
    UBLOCK_BALINESE = 147
    UBLOCK_LATIN_EXTENDED_C = 148
    UBLOCK_LATIN_EXTENDED_D = 149
    UBLOCK_PHAGS_PA = 150
    UBLOCK_PHOENICIAN = 151
    UBLOCK_CUNEIFORM = 152
    UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = 153
    UBLOCK_COUNTING_ROD_NUMERALS = 154
    UBLOCK_SUNDANESE = 155
    UBLOCK_LEPCHA = 156
    UBLOCK_OL_CHIKI = 157
    UBLOCK_CYRILLIC_EXTENDED_A = 158
    UBLOCK_VAI = 159
    UBLOCK_CYRILLIC_EXTENDED_B = 160
    UBLOCK_SAURASHTRA = 161
    UBLOCK_KAYAH_LI = 162
    UBLOCK_REJANG = 163
    UBLOCK_CHAM = 164
    UBLOCK_ANCIENT_SYMBOLS = 165
    UBLOCK_PHAISTOS_DISC = 166
    UBLOCK_LYCIAN = 167
    UBLOCK_CARIAN = 168
    UBLOCK_LYDIAN = 169
    UBLOCK_MAHJONG_TILES = 170
    UBLOCK_DOMINO_TILES = 171
    UBLOCK_SAMARITAN = 172
    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = 173
    UBLOCK_TAI_THAM = 174
    UBLOCK_VEDIC_EXTENSIONS = 175
    UBLOCK_LISU = 176
    UBLOCK_BAMUM = 177
    UBLOCK_COMMON_INDIC_NUMBER_FORMS = 178
    UBLOCK_DEVANAGARI_EXTENDED = 179
    UBLOCK_HANGUL_JAMO_EXTENDED_A = 180
    UBLOCK_JAVANESE = 181
    UBLOCK_MYANMAR_EXTENDED_A = 182
    UBLOCK_TAI_VIET = 183
    UBLOCK_MEETEI_MAYEK = 184
    UBLOCK_HANGUL_JAMO_EXTENDED_B = 185
    UBLOCK_IMPERIAL_ARAMAIC = 186
    UBLOCK_OLD_SOUTH_ARABIAN = 187
    UBLOCK_AVESTAN = 188
    UBLOCK_INSCRIPTIONAL_PARTHIAN = 189
    UBLOCK_INSCRIPTIONAL_PAHLAVI = 190
    UBLOCK_OLD_TURKIC = 191
    UBLOCK_RUMI_NUMERAL_SYMBOLS = 192
    UBLOCK_KAITHI = 193
    UBLOCK_EGYPTIAN_HIEROGLYPHS = 194
    UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = 195
    UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = 196
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = 197
    UBLOCK_MANDAIC = 198
    UBLOCK_BATAK = 199
    UBLOCK_ETHIOPIC_EXTENDED_A = 200
    UBLOCK_BRAHMI = 201
    UBLOCK_BAMUM_SUPPLEMENT = 202
    UBLOCK_KANA_SUPPLEMENT = 203
    UBLOCK_PLAYING_CARDS = 204
    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = 205
    UBLOCK_EMOTICONS = 206
    UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = 207
    UBLOCK_ALCHEMICAL_SYMBOLS = 208
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = 209
    UBLOCK_ARABIC_EXTENDED_A = 210
    UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = 211
    UBLOCK_CHAKMA = 212
    UBLOCK_MEETEI_MAYEK_EXTENSIONS = 213
    UBLOCK_MEROITIC_CURSIVE = 214
    UBLOCK_MEROITIC_HIEROGLYPHS = 215
    UBLOCK_MIAO = 216
    UBLOCK_SHARADA = 217
    UBLOCK_SORA_SOMPENG = 218
    UBLOCK_SUNDANESE_SUPPLEMENT = 219
    UBLOCK_TAKRI = 220
    UBLOCK_BASSA_VAH = 221
    UBLOCK_CAUCASIAN_ALBANIAN = 222
    UBLOCK_COPTIC_EPACT_NUMBERS = 223
    UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED = 224
    UBLOCK_DUPLOYAN = 225
    UBLOCK_ELBASAN = 226
    UBLOCK_GEOMETRIC_SHAPES_EXTENDED = 227
    UBLOCK_GRANTHA = 228
    UBLOCK_KHOJKI = 229
    UBLOCK_KHUDAWADI = 230
    UBLOCK_LATIN_EXTENDED_E = 231
    UBLOCK_LINEAR_A = 232
    UBLOCK_MAHAJANI = 233
    UBLOCK_MANICHAEAN = 234
    UBLOCK_MENDE_KIKAKUI = 235
    UBLOCK_MODI = 236
    UBLOCK_MRO = 237
    UBLOCK_MYANMAR_EXTENDED_B = 238
    UBLOCK_NABATAEAN = 239
    UBLOCK_OLD_NORTH_ARABIAN = 240
    UBLOCK_OLD_PERMIC = 241
    UBLOCK_ORNAMENTAL_DINGBATS = 242
    UBLOCK_PAHAWH_HMONG = 243
    UBLOCK_PALMYRENE = 244
    UBLOCK_PAU_CIN_HAU = 245
    UBLOCK_PSALTER_PAHLAVI = 246
    UBLOCK_SHORTHAND_FORMAT_CONTROLS = 247
    UBLOCK_SIDDHAM = 248
    UBLOCK_SINHALA_ARCHAIC_NUMBERS = 249
    UBLOCK_SUPPLEMENTAL_ARROWS_C = 250
    UBLOCK_TIRHUTA = 251
    UBLOCK_WARANG_CITI = 252
    UBLOCK_AHOM = 253
    UBLOCK_ANATOLIAN_HIEROGLYPHS = 254
    UBLOCK_CHEROKEE_SUPPLEMENT = 255
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E = 256
    UBLOCK_EARLY_DYNASTIC_CUNEIFORM = 257
    UBLOCK_HATRAN = 258
    UBLOCK_MULTANI = 259
    UBLOCK_OLD_HUNGARIAN = 260
    UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS = 261
    UBLOCK_SUTTON_SIGNWRITING = 262
    UBLOCK_ADLAM = 263
    UBLOCK_BHAIKSUKI = 264
    UBLOCK_CYRILLIC_EXTENDED_C = 265
    UBLOCK_GLAGOLITIC_SUPPLEMENT = 266
    UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION = 267
    UBLOCK_MARCHEN = 268
    UBLOCK_MONGOLIAN_SUPPLEMENT = 269
    UBLOCK_NEWA = 270
    UBLOCK_OSAGE = 271
    UBLOCK_TANGUT = 272
    UBLOCK_TANGUT_COMPONENTS = 273
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F = 274
    UBLOCK_KANA_EXTENDED_A = 275
    UBLOCK_MASARAM_GONDI = 276
    UBLOCK_NUSHU = 277
    UBLOCK_SOYOMBO = 278
    UBLOCK_SYRIAC_SUPPLEMENT = 279
    UBLOCK_ZANABAZAR_SQUARE = 280
    UBLOCK_CHESS_SYMBOLS = 281
    UBLOCK_DOGRA = 282
    UBLOCK_GEORGIAN_EXTENDED = 283
    UBLOCK_GUNJALA_GONDI = 284
    UBLOCK_HANIFI_ROHINGYA = 285
    UBLOCK_INDIC_SIYAQ_NUMBERS = 286
    UBLOCK_MAKASAR = 287
    UBLOCK_MAYAN_NUMERALS = 288
    UBLOCK_MEDEFAIDRIN = 289
    UBLOCK_OLD_SOGDIAN = 290
    UBLOCK_SOGDIAN = 291
    UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS = 292
    UBLOCK_ELYMAIC = 293
    UBLOCK_NANDINAGARI = 294
    UBLOCK_NYIAKENG_PUACHUE_HMONG = 295
    UBLOCK_OTTOMAN_SIYAQ_NUMBERS = 296
    UBLOCK_SMALL_KANA_EXTENSION = 297
    UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A = 298
    UBLOCK_TAMIL_SUPPLEMENT = 299
    UBLOCK_WANCHO = 300
    UBLOCK_CHORASMIAN = 301
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G = 302
    UBLOCK_DIVES_AKURU = 303
    UBLOCK_KHITAN_SMALL_SCRIPT = 304
    UBLOCK_LISU_SUPPLEMENT = 305
    UBLOCK_SYMBOLS_FOR_LEGACY_COMPUTING = 306
    UBLOCK_TANGUT_SUPPLEMENT = 307
    UBLOCK_YEZIDI = 308
    UBLOCK_INVALID_CODE = -1
  end

  enum UEastAsianWidth : Int32
    U_EA_NEUTRAL = 0
    U_EA_AMBIGUOUS = 1
    U_EA_HALFWIDTH = 2
    U_EA_FULLWIDTH = 3
    U_EA_NARROW = 4
    U_EA_WIDE = 5
  end

  enum UCharNameChoice : Int32
    U_UNICODE_CHAR_NAME = 0
    U_EXTENDED_CHAR_NAME = 2
    U_CHAR_NAME_ALIAS = 3
  end

  enum UPropertyNameChoice : Int32
    U_SHORT_PROPERTY_NAME = 0
    U_LONG_PROPERTY_NAME = 1
  end

  enum UDecompositionType : Int32
    U_DT_NONE = 0
    U_DT_CANONICAL = 1
    U_DT_COMPAT = 2
    U_DT_CIRCLE = 3
    U_DT_FINAL = 4
    U_DT_FONT = 5
    U_DT_FRACTION = 6
    U_DT_INITIAL = 7
    U_DT_ISOLATED = 8
    U_DT_MEDIAL = 9
    U_DT_NARROW = 10
    U_DT_NOBREAK = 11
    U_DT_SMALL = 12
    U_DT_SQUARE = 13
    U_DT_SUB = 14
    U_DT_SUPER = 15
    U_DT_VERTICAL = 16
    U_DT_WIDE = 17
  end

  enum UJoiningType : Int32
    U_JT_NON_JOINING = 0
    U_JT_JOIN_CAUSING = 1
    U_JT_DUAL_JOINING = 2
    U_JT_LEFT_JOINING = 3
    U_JT_RIGHT_JOINING = 4
    U_JT_TRANSPARENT = 5
  end

  enum UJoiningGroup : Int32
    U_JG_NO_JOINING_GROUP = 0
    U_JG_AIN = 1
    U_JG_ALAPH = 2
    U_JG_ALEF = 3
    U_JG_BEH = 4
    U_JG_BETH = 5
    U_JG_DAL = 6
    U_JG_DALATH_RISH = 7
    U_JG_E = 8
    U_JG_FEH = 9
    U_JG_FINAL_SEMKATH = 10
    U_JG_GAF = 11
    U_JG_GAMAL = 12
    U_JG_HAH = 13
    U_JG_TEH_MARBUTA_GOAL = 14
    U_JG_HAMZA_ON_HEH_GOAL = 14
    U_JG_HE = 15
    U_JG_HEH = 16
    U_JG_HEH_GOAL = 17
    U_JG_HETH = 18
    U_JG_KAF = 19
    U_JG_KAPH = 20
    U_JG_KNOTTED_HEH = 21
    U_JG_LAM = 22
    U_JG_LAMADH = 23
    U_JG_MEEM = 24
    U_JG_MIM = 25
    U_JG_NOON = 26
    U_JG_NUN = 27
    U_JG_PE = 28
    U_JG_QAF = 29
    U_JG_QAPH = 30
    U_JG_REH = 31
    U_JG_REVERSED_PE = 32
    U_JG_SAD = 33
    U_JG_SADHE = 34
    U_JG_SEEN = 35
    U_JG_SEMKATH = 36
    U_JG_SHIN = 37
    U_JG_SWASH_KAF = 38
    U_JG_SYRIAC_WAW = 39
    U_JG_TAH = 40
    U_JG_TAW = 41
    U_JG_TEH_MARBUTA = 42
    U_JG_TETH = 43
    U_JG_WAW = 44
    U_JG_YEH = 45
    U_JG_YEH_BARREE = 46
    U_JG_YEH_WITH_TAIL = 47
    U_JG_YUDH = 48
    U_JG_YUDH_HE = 49
    U_JG_ZAIN = 50
    U_JG_FE = 51
    U_JG_KHAPH = 52
    U_JG_ZHAIN = 53
    U_JG_BURUSHASKI_YEH_BARREE = 54
    U_JG_FARSI_YEH = 55
    U_JG_NYA = 56
    U_JG_ROHINGYA_YEH = 57
    U_JG_MANICHAEAN_ALEPH = 58
    U_JG_MANICHAEAN_AYIN = 59
    U_JG_MANICHAEAN_BETH = 60
    U_JG_MANICHAEAN_DALETH = 61
    U_JG_MANICHAEAN_DHAMEDH = 62
    U_JG_MANICHAEAN_FIVE = 63
    U_JG_MANICHAEAN_GIMEL = 64
    U_JG_MANICHAEAN_HETH = 65
    U_JG_MANICHAEAN_HUNDRED = 66
    U_JG_MANICHAEAN_KAPH = 67
    U_JG_MANICHAEAN_LAMEDH = 68
    U_JG_MANICHAEAN_MEM = 69
    U_JG_MANICHAEAN_NUN = 70
    U_JG_MANICHAEAN_ONE = 71
    U_JG_MANICHAEAN_PE = 72
    U_JG_MANICHAEAN_QOPH = 73
    U_JG_MANICHAEAN_RESH = 74
    U_JG_MANICHAEAN_SADHE = 75
    U_JG_MANICHAEAN_SAMEKH = 76
    U_JG_MANICHAEAN_TAW = 77
    U_JG_MANICHAEAN_TEN = 78
    U_JG_MANICHAEAN_TETH = 79
    U_JG_MANICHAEAN_THAMEDH = 80
    U_JG_MANICHAEAN_TWENTY = 81
    U_JG_MANICHAEAN_WAW = 82
    U_JG_MANICHAEAN_YODH = 83
    U_JG_MANICHAEAN_ZAYIN = 84
    U_JG_STRAIGHT_WAW = 85
    U_JG_AFRICAN_FEH = 86
    U_JG_AFRICAN_NOON = 87
    U_JG_AFRICAN_QAF = 88
    U_JG_MALAYALAM_BHA = 89
    U_JG_MALAYALAM_JA = 90
    U_JG_MALAYALAM_LLA = 91
    U_JG_MALAYALAM_LLLA = 92
    U_JG_MALAYALAM_NGA = 93
    U_JG_MALAYALAM_NNA = 94
    U_JG_MALAYALAM_NNNA = 95
    U_JG_MALAYALAM_NYA = 96
    U_JG_MALAYALAM_RA = 97
    U_JG_MALAYALAM_SSA = 98
    U_JG_MALAYALAM_TTA = 99
    U_JG_HANIFI_ROHINGYA_KINNA_YA = 100
    U_JG_HANIFI_ROHINGYA_PA = 101
  end

  enum UGraphemeClusterBreak : Int32
    U_GCB_OTHER = 0
    U_GCB_CONTROL = 1
    U_GCB_CR = 2
    U_GCB_EXTEND = 3
    U_GCB_L = 4
    U_GCB_LF = 5
    U_GCB_LV = 6
    U_GCB_LVT = 7
    U_GCB_T = 8
    U_GCB_V = 9
    U_GCB_SPACING_MARK = 10
    U_GCB_PREPEND = 11
    U_GCB_REGIONAL_INDICATOR = 12
    U_GCB_E_BASE = 13
    U_GCB_E_BASE_GAZ = 14
    U_GCB_E_MODIFIER = 15
    U_GCB_GLUE_AFTER_ZWJ = 16
    U_GCB_ZWJ = 17
  end

  enum UWordBreakValues : Int32
    U_WB_OTHER = 0
    U_WB_ALETTER = 1
    U_WB_FORMAT = 2
    U_WB_KATAKANA = 3
    U_WB_MIDLETTER = 4
    U_WB_MIDNUM = 5
    U_WB_NUMERIC = 6
    U_WB_EXTENDNUMLET = 7
    U_WB_CR = 8
    U_WB_EXTEND = 9
    U_WB_LF = 10
    U_WB_MIDNUMLET = 11
    U_WB_NEWLINE = 12
    U_WB_REGIONAL_INDICATOR = 13
    U_WB_HEBREW_LETTER = 14
    U_WB_SINGLE_QUOTE = 15
    U_WB_DOUBLE_QUOTE = 16
    U_WB_E_BASE = 17
    U_WB_E_BASE_GAZ = 18
    U_WB_E_MODIFIER = 19
    U_WB_GLUE_AFTER_ZWJ = 20
    U_WB_ZWJ = 21
    U_WB_WSEGSPACE = 22
  end

  enum USentenceBreak : Int32
    U_SB_OTHER = 0
    U_SB_ATERM = 1
    U_SB_CLOSE = 2
    U_SB_FORMAT = 3
    U_SB_LOWER = 4
    U_SB_NUMERIC = 5
    U_SB_OLETTER = 6
    U_SB_SEP = 7
    U_SB_SP = 8
    U_SB_STERM = 9
    U_SB_UPPER = 10
    U_SB_CR = 11
    U_SB_EXTEND = 12
    U_SB_LF = 13
    U_SB_SCONTINUE = 14
  end

  enum ULineBreak : Int32
    U_LB_UNKNOWN = 0
    U_LB_AMBIGUOUS = 1
    U_LB_ALPHABETIC = 2
    U_LB_BREAK_BOTH = 3
    U_LB_BREAK_AFTER = 4
    U_LB_BREAK_BEFORE = 5
    U_LB_MANDATORY_BREAK = 6
    U_LB_CONTINGENT_BREAK = 7
    U_LB_CLOSE_PUNCTUATION = 8
    U_LB_COMBINING_MARK = 9
    U_LB_CARRIAGE_RETURN = 10
    U_LB_EXCLAMATION = 11
    U_LB_GLUE = 12
    U_LB_HYPHEN = 13
    U_LB_IDEOGRAPHIC = 14
    U_LB_INSEPARABLE = 15
    U_LB_INSEPERABLE = 15
    U_LB_INFIX_NUMERIC = 16
    U_LB_LINE_FEED = 17
    U_LB_NONSTARTER = 18
    U_LB_NUMERIC = 19
    U_LB_OPEN_PUNCTUATION = 20
    U_LB_POSTFIX_NUMERIC = 21
    U_LB_PREFIX_NUMERIC = 22
    U_LB_QUOTATION = 23
    U_LB_COMPLEX_CONTEXT = 24
    U_LB_SURROGATE = 25
    U_LB_SPACE = 26
    U_LB_BREAK_SYMBOLS = 27
    U_LB_ZWSPACE = 28
    U_LB_NEXT_LINE = 29
    U_LB_WORD_JOINER = 30
    U_LB_H2 = 31
    U_LB_H3 = 32
    U_LB_JL = 33
    U_LB_JT = 34
    U_LB_JV = 35
    U_LB_CLOSE_PARENTHESIS = 36
    U_LB_CONDITIONAL_JAPANESE_STARTER = 37
    U_LB_HEBREW_LETTER = 38
    U_LB_REGIONAL_INDICATOR = 39
    U_LB_E_BASE = 40
    U_LB_E_MODIFIER = 41
    U_LB_ZWJ = 42
  end

  enum UNumericType : Int32
    U_NT_NONE = 0
    U_NT_DECIMAL = 1
    U_NT_DIGIT = 2
    U_NT_NUMERIC = 3
  end

  enum UHangulSyllableType : Int32
    U_HST_NOT_APPLICABLE = 0
    U_HST_LEADING_JAMO = 1
    U_HST_VOWEL_JAMO = 2
    U_HST_TRAILING_JAMO = 3
    U_HST_LV_SYLLABLE = 4
    U_HST_LVT_SYLLABLE = 5
  end

  enum UIndicPositionalCategory : Int32
    U_INPC_NA = 0
    U_INPC_BOTTOM = 1
    U_INPC_BOTTOM_AND_LEFT = 2
    U_INPC_BOTTOM_AND_RIGHT = 3
    U_INPC_LEFT = 4
    U_INPC_LEFT_AND_RIGHT = 5
    U_INPC_OVERSTRUCK = 6
    U_INPC_RIGHT = 7
    U_INPC_TOP = 8
    U_INPC_TOP_AND_BOTTOM = 9
    U_INPC_TOP_AND_BOTTOM_AND_RIGHT = 10
    U_INPC_TOP_AND_LEFT = 11
    U_INPC_TOP_AND_LEFT_AND_RIGHT = 12
    U_INPC_TOP_AND_RIGHT = 13
    U_INPC_VISUAL_ORDER_LEFT = 14
    U_INPC_TOP_AND_BOTTOM_AND_LEFT = 15
  end

  enum UIndicSyllabicCategory : Int32
    U_INSC_OTHER = 0
    U_INSC_AVAGRAHA = 1
    U_INSC_BINDU = 2
    U_INSC_BRAHMI_JOINING_NUMBER = 3
    U_INSC_CANTILLATION_MARK = 4
    U_INSC_CONSONANT = 5
    U_INSC_CONSONANT_DEAD = 6
    U_INSC_CONSONANT_FINAL = 7
    U_INSC_CONSONANT_HEAD_LETTER = 8
    U_INSC_CONSONANT_INITIAL_POSTFIXED = 9
    U_INSC_CONSONANT_KILLER = 10
    U_INSC_CONSONANT_MEDIAL = 11
    U_INSC_CONSONANT_PLACEHOLDER = 12
    U_INSC_CONSONANT_PRECEDING_REPHA = 13
    U_INSC_CONSONANT_PREFIXED = 14
    U_INSC_CONSONANT_SUBJOINED = 15
    U_INSC_CONSONANT_SUCCEEDING_REPHA = 16
    U_INSC_CONSONANT_WITH_STACKER = 17
    U_INSC_GEMINATION_MARK = 18
    U_INSC_INVISIBLE_STACKER = 19
    U_INSC_JOINER = 20
    U_INSC_MODIFYING_LETTER = 21
    U_INSC_NON_JOINER = 22
    U_INSC_NUKTA = 23
    U_INSC_NUMBER = 24
    U_INSC_NUMBER_JOINER = 25
    U_INSC_PURE_KILLER = 26
    U_INSC_REGISTER_SHIFTER = 27
    U_INSC_SYLLABLE_MODIFIER = 28
    U_INSC_TONE_LETTER = 29
    U_INSC_TONE_MARK = 30
    U_INSC_VIRAMA = 31
    U_INSC_VISARGA = 32
    U_INSC_VOWEL = 33
    U_INSC_VOWEL_DEPENDENT = 34
    U_INSC_VOWEL_INDEPENDENT = 35
  end

  enum UVerticalOrientation : Int32
    U_VO_ROTATED = 0
    U_VO_TRANSFORMED_ROTATED = 1
    U_VO_TRANSFORMED_UPRIGHT = 2
    U_VO_UPRIGHT = 3
  end

  enum UBiDiDirection : Int32
    UBIDI_LTR = 0
    UBIDI_RTL = 1
    UBIDI_MIXED = 2
    UBIDI_NEUTRAL = 3
  end

  enum UBiDiReorderingMode : Int32
    UBIDI_REORDER_DEFAULT = 0
    UBIDI_REORDER_NUMBERS_SPECIAL = 1
    UBIDI_REORDER_GROUP_NUMBERS_WITH_R = 2
    UBIDI_REORDER_RUNS_ONLY = 3
    UBIDI_REORDER_INVERSE_NUMBERS_AS_L = 4
    UBIDI_REORDER_INVERSE_LIKE_DIRECT = 5
    UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL = 6
  end

  enum UBiDiReorderingOption : Int32
    UBIDI_OPTION_DEFAULT = 0
    UBIDI_OPTION_INSERT_MARKS = 1
    UBIDI_OPTION_REMOVE_CONTROLS = 2
    UBIDI_OPTION_STREAMING = 4
  end

  enum UBiDiOrder : Int32
    UBIDI_LOGICAL = 0
    UBIDI_VISUAL = 1
  end

  enum UBiDiMirroring : Int32
    UBIDI_MIRRORING_OFF = 0
    UBIDI_MIRRORING_ON = 1
  end

  enum USetSpanCondition : Int32
    USET_SPAN_NOT_CONTAINED = 0
    USET_SPAN_CONTAINED = 1
    USET_SPAN_SIMPLE = 2
  end

  enum UNormalization2Mode : Int32
    UNORM2_COMPOSE = 0
    UNORM2_DECOMPOSE = 1
    UNORM2_FCD = 2
    UNORM2_COMPOSE_CONTIGUOUS = 3
  end

  enum UNormalizationCheckResult : Int32
    UNORM_NO = 0
    UNORM_YES = 1
    UNORM_MAYBE = 2
  end

  enum UNormalizationMode : Int32
    UNORM_NONE = 1
    UNORM_NFD = 2
    UNORM_NFKD = 3
    UNORM_NFC = 4
    UNORM_DEFAULT = 4
    UNORM_NFKC = 5
    UNORM_FCD = 6
    UNORM_MODE_COUNT = 7
  end

  enum UStringPrepProfileType : Int32
    USPREP_RFC3491_NAMEPREP = 0
    USPREP_RFC3530_NFS4_CS_PREP = 1
    USPREP_RFC3530_NFS4_CS_PREP_CI = 2
    USPREP_RFC3530_NFS4_CIS_PREP = 3
    USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX = 4
    USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX = 5
    USPREP_RFC3722_ISCSI = 6
    USPREP_RFC3920_NODEPREP = 7
    USPREP_RFC3920_RESOURCEPREP = 8
    USPREP_RFC4011_MIB = 9
    USPREP_RFC4013_SASLPREP = 10
    USPREP_RFC4505_TRACE = 11
    USPREP_RFC4518_LDAP = 12
    USPREP_RFC4518_LDAP_CI = 13
  end

  enum UBreakIteratorType : Int32
    UBRK_CHARACTER = 0
    UBRK_WORD = 1
    UBRK_LINE = 2
    UBRK_SENTENCE = 3
  end

  enum UWordBreak : Int32
    UBRK_WORD_NONE = 0
    UBRK_WORD_NONE_LIMIT = 100
    UBRK_WORD_NUMBER = 100
    UBRK_WORD_NUMBER_LIMIT = 200
    UBRK_WORD_LETTER = 200
    UBRK_WORD_LETTER_LIMIT = 300
    UBRK_WORD_KANA = 300
    UBRK_WORD_KANA_LIMIT = 400
    UBRK_WORD_IDEO = 400
    UBRK_WORD_IDEO_LIMIT = 500
  end

  enum ULineBreakTag : Int32
    UBRK_LINE_SOFT = 0
    UBRK_LINE_SOFT_LIMIT = 100
    UBRK_LINE_HARD = 100
    UBRK_LINE_HARD_LIMIT = 200
  end

  enum USentenceBreakTag : Int32
    UBRK_SENTENCE_TERM = 0
    UBRK_SENTENCE_TERM_LIMIT = 100
    UBRK_SENTENCE_SEP = 100
    UBRK_SENTENCE_SEP_LIMIT = 200
  end

  enum UCalendarType : Int32
    UCAL_TRADITIONAL = 0
    UCAL_DEFAULT = 0
    UCAL_GREGORIAN = 1
  end

  enum UCalendarDateFields : Int32
    UCAL_ERA = 0
    UCAL_YEAR = 1
    UCAL_MONTH = 2
    UCAL_WEEK_OF_YEAR = 3
    UCAL_WEEK_OF_MONTH = 4
    UCAL_DATE = 5
    UCAL_DAY_OF_YEAR = 6
    UCAL_DAY_OF_WEEK = 7
    UCAL_DAY_OF_WEEK_IN_MONTH = 8
    UCAL_AM_PM = 9
    UCAL_HOUR = 10
    UCAL_HOUR_OF_DAY = 11
    UCAL_MINUTE = 12
    UCAL_SECOND = 13
    UCAL_MILLISECOND = 14
    UCAL_ZONE_OFFSET = 15
    UCAL_DST_OFFSET = 16
    UCAL_YEAR_WOY = 17
    UCAL_DOW_LOCAL = 18
    UCAL_EXTENDED_YEAR = 19
    UCAL_JULIAN_DAY = 20
    UCAL_MILLISECONDS_IN_DAY = 21
    UCAL_IS_LEAP_MONTH = 22
    UCAL_FIELD_COUNT = 23
    UCAL_DAY_OF_MONTH = 5
  end

  enum UCalendarDaysOfWeek : Int32
    UCAL_SUNDAY = 1
    UCAL_MONDAY = 2
    UCAL_TUESDAY = 3
    UCAL_WEDNESDAY = 4
    UCAL_THURSDAY = 5
    UCAL_FRIDAY = 6
    UCAL_SATURDAY = 7
  end

  enum UCalendarMonths : Int32
    UCAL_JANUARY = 0
    UCAL_FEBRUARY = 1
    UCAL_MARCH = 2
    UCAL_APRIL = 3
    UCAL_MAY = 4
    UCAL_JUNE = 5
    UCAL_JULY = 6
    UCAL_AUGUST = 7
    UCAL_SEPTEMBER = 8
    UCAL_OCTOBER = 9
    UCAL_NOVEMBER = 10
    UCAL_DECEMBER = 11
    UCAL_UNDECIMBER = 12
  end

  enum UCalendarAMPMs : Int32
    UCAL_AM = 0
    UCAL_PM = 1
  end

  enum USystemTimeZoneType : Int32
    UCAL_ZONE_TYPE_ANY = 0
    UCAL_ZONE_TYPE_CANONICAL = 1
    UCAL_ZONE_TYPE_CANONICAL_LOCATION = 2
  end

  enum UCalendarDisplayNameType : Int32
    UCAL_STANDARD = 0
    UCAL_SHORT_STANDARD = 1
    UCAL_DST = 2
    UCAL_SHORT_DST = 3
  end

  enum UCalendarAttribute : Int32
    UCAL_LENIENT = 0
    UCAL_FIRST_DAY_OF_WEEK = 1
    UCAL_MINIMAL_DAYS_IN_FIRST_WEEK = 2
    UCAL_REPEATED_WALL_TIME = 3
    UCAL_SKIPPED_WALL_TIME = 4
  end

  enum UCalendarWallTimeOption : Int32
    UCAL_WALLTIME_LAST = 0
    UCAL_WALLTIME_FIRST = 1
    UCAL_WALLTIME_NEXT_VALID = 2
  end

  enum UCalendarLimitType : Int32
    UCAL_MINIMUM = 0
    UCAL_MAXIMUM = 1
    UCAL_GREATEST_MINIMUM = 2
    UCAL_LEAST_MAXIMUM = 3
    UCAL_ACTUAL_MINIMUM = 4
    UCAL_ACTUAL_MAXIMUM = 5
  end

  enum UCalendarWeekdayType : Int32
    UCAL_WEEKDAY = 0
    UCAL_WEEKEND = 1
    UCAL_WEEKEND_ONSET = 2
    UCAL_WEEKEND_CEASE = 3
  end

  enum UTimeZoneTransitionType : Int32
    UCAL_TZ_TRANSITION_NEXT = 0
    UCAL_TZ_TRANSITION_NEXT_INCLUSIVE = 1
    UCAL_TZ_TRANSITION_PREVIOUS = 2
    UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE = 3
  end

  enum UCollationResult : Int32
    UCOL_EQUAL = 0
    UCOL_GREATER = 1
    UCOL_LESS = -1
  end

  enum UColAttributeValue : Int32
    UCOL_DEFAULT = -1
    UCOL_PRIMARY = 0
    UCOL_SECONDARY = 1
    UCOL_TERTIARY = 2
    UCOL_DEFAULT_STRENGTH = 2
    UCOL_CE_STRENGTH_LIMIT = 3
    UCOL_QUATERNARY = 3
    UCOL_IDENTICAL = 15
    UCOL_STRENGTH_LIMIT = 16
    UCOL_OFF = 16
    UCOL_ON = 17
    UCOL_SHIFTED = 20
    UCOL_NON_IGNORABLE = 21
    UCOL_LOWER_FIRST = 24
    UCOL_UPPER_FIRST = 25
  end

  enum UColReorderCode : Int32
    UCOL_REORDER_CODE_DEFAULT = -1
    UCOL_REORDER_CODE_NONE = 103
    UCOL_REORDER_CODE_OTHERS = 103
    UCOL_REORDER_CODE_SPACE = 4096
    UCOL_REORDER_CODE_FIRST = 4096
    UCOL_REORDER_CODE_PUNCTUATION = 4097
    UCOL_REORDER_CODE_SYMBOL = 4098
    UCOL_REORDER_CODE_CURRENCY = 4099
    UCOL_REORDER_CODE_DIGIT = 4100
  end

  enum UColAttribute : Int32
    UCOL_FRENCH_COLLATION = 0
    UCOL_ALTERNATE_HANDLING = 1
    UCOL_CASE_FIRST = 2
    UCOL_CASE_LEVEL = 3
    UCOL_NORMALIZATION_MODE = 4
    UCOL_DECOMPOSITION_MODE = 4
    UCOL_STRENGTH = 5
    UCOL_NUMERIC_COLLATION = 7
    UCOL_ATTRIBUTE_COUNT = 8
  end

  enum UColRuleOption : Int32
    UCOL_TAILORING_ONLY = 0
    UCOL_FULL_RULES = 1
  end

  enum UColBoundMode : Int32
    UCOL_BOUND_LOWER = 0
    UCOL_BOUND_UPPER = 1
    UCOL_BOUND_UPPER_LONG = 2
  end

  enum UFormattableType : Int32
    UFMT_DATE = 0
    UFMT_DOUBLE = 1
    UFMT_LONG = 2
    UFMT_STRING = 3
    UFMT_ARRAY = 4
    UFMT_INT64 = 5
    UFMT_OBJECT = 6
  end

  enum UFieldCategory : Int32
    UFIELD_CATEGORY_UNDEFINED = 0
    UFIELD_CATEGORY_DATE = 1
    UFIELD_CATEGORY_NUMBER = 2
    UFIELD_CATEGORY_LIST = 3
    UFIELD_CATEGORY_RELATIVE_DATETIME = 4
    UFIELD_CATEGORY_DATE_INTERVAL = 5
    UFIELD_CATEGORY_LIST_SPAN = 4099
    UFIELD_CATEGORY_DATE_INTERVAL_SPAN = 4101
  end

  enum UGender : Int32
    UGENDER_MALE = 0
    UGENDER_FEMALE = 1
    UGENDER_OTHER = 2
  end

  enum UListFormatterField : Int32
    ULISTFMT_LITERAL_FIELD = 0
    ULISTFMT_ELEMENT_FIELD = 1
  end

  enum UListFormatterType : Int32
    ULISTFMT_TYPE_AND = 0
    ULISTFMT_TYPE_OR = 1
    ULISTFMT_TYPE_UNITS = 2
  end

  enum UListFormatterWidth : Int32
    ULISTFMT_WIDTH_WIDE = 0
    ULISTFMT_WIDTH_SHORT = 1
    ULISTFMT_WIDTH_NARROW = 2
  end

  enum ULocaleDataExemplarSetType : Int32
    ULOCDATA_ES_STANDARD = 0
    ULOCDATA_ES_AUXILIARY = 1
    ULOCDATA_ES_INDEX = 2
    ULOCDATA_ES_PUNCTUATION = 3
  end

  enum ULocaleDataDelimiterType : Int32
    ULOCDATA_QUOTATION_START = 0
    ULOCDATA_QUOTATION_END = 1
    ULOCDATA_ALT_QUOTATION_START = 2
    ULOCDATA_ALT_QUOTATION_END = 3
  end

  enum UMeasurementSystem : Int32
    UMS_SI = 0
    UMS_US = 1
    UMS_UK = 2
  end

  enum UNumberFormatStyle : Int32
    UNUM_PATTERN_DECIMAL = 0
    UNUM_DECIMAL = 1
    UNUM_CURRENCY = 2
    UNUM_PERCENT = 3
    UNUM_SCIENTIFIC = 4
    UNUM_SPELLOUT = 5
    UNUM_ORDINAL = 6
    UNUM_DURATION = 7
    UNUM_NUMBERING_SYSTEM = 8
    UNUM_PATTERN_RULEBASED = 9
    UNUM_CURRENCY_ISO = 10
    UNUM_CURRENCY_PLURAL = 11
    UNUM_CURRENCY_ACCOUNTING = 12
    UNUM_CASH_CURRENCY = 13
    UNUM_DECIMAL_COMPACT_SHORT = 14
    UNUM_DECIMAL_COMPACT_LONG = 15
    UNUM_CURRENCY_STANDARD = 16
    UNUM_DEFAULT = 1
    UNUM_IGNORE = 0
  end

  enum UNumberFormatRoundingMode : Int32
    UNUM_ROUND_CEILING = 0
    UNUM_ROUND_FLOOR = 1
    UNUM_ROUND_DOWN = 2
    UNUM_ROUND_UP = 3
    UNUM_ROUND_HALFEVEN = 4
    UNUM_ROUND_HALFDOWN = 5
    UNUM_ROUND_HALFUP = 6
    UNUM_ROUND_UNNECESSARY = 7
  end

  enum UNumberFormatPadPosition : Int32
    UNUM_PAD_BEFORE_PREFIX = 0
    UNUM_PAD_AFTER_PREFIX = 1
    UNUM_PAD_BEFORE_SUFFIX = 2
    UNUM_PAD_AFTER_SUFFIX = 3
  end

  enum UNumberCompactStyle : Int32
    UNUM_SHORT = 0
    UNUM_LONG = 1
  end

  enum UCurrencySpacing : Int32
    UNUM_CURRENCY_MATCH = 0
    UNUM_CURRENCY_SURROUNDING_MATCH = 1
    UNUM_CURRENCY_INSERT = 2
    UNUM_CURRENCY_SPACING_COUNT = 3
  end

  enum UNumberFormatFields : Int32
    UNUM_INTEGER_FIELD = 0
    UNUM_FRACTION_FIELD = 1
    UNUM_DECIMAL_SEPARATOR_FIELD = 2
    UNUM_EXPONENT_SYMBOL_FIELD = 3
    UNUM_EXPONENT_SIGN_FIELD = 4
    UNUM_EXPONENT_FIELD = 5
    UNUM_GROUPING_SEPARATOR_FIELD = 6
    UNUM_CURRENCY_FIELD = 7
    UNUM_PERCENT_FIELD = 8
    UNUM_PERMILL_FIELD = 9
    UNUM_SIGN_FIELD = 10
    UNUM_MEASURE_UNIT_FIELD = 11
    UNUM_COMPACT_FIELD = 12
  end

  enum UNumberFormatAttributeValue : Int32
    UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN = 0
  end

  enum UNumberFormatAttribute : Int32
    UNUM_PARSE_INT_ONLY = 0
    UNUM_GROUPING_USED = 1
    UNUM_DECIMAL_ALWAYS_SHOWN = 2
    UNUM_MAX_INTEGER_DIGITS = 3
    UNUM_MIN_INTEGER_DIGITS = 4
    UNUM_INTEGER_DIGITS = 5
    UNUM_MAX_FRACTION_DIGITS = 6
    UNUM_MIN_FRACTION_DIGITS = 7
    UNUM_FRACTION_DIGITS = 8
    UNUM_MULTIPLIER = 9
    UNUM_GROUPING_SIZE = 10
    UNUM_ROUNDING_MODE = 11
    UNUM_ROUNDING_INCREMENT = 12
    UNUM_FORMAT_WIDTH = 13
    UNUM_PADDING_POSITION = 14
    UNUM_SECONDARY_GROUPING_SIZE = 15
    UNUM_SIGNIFICANT_DIGITS_USED = 16
    UNUM_MIN_SIGNIFICANT_DIGITS = 17
    UNUM_MAX_SIGNIFICANT_DIGITS = 18
    UNUM_LENIENT_PARSE = 19
    UNUM_PARSE_ALL_INPUT = 20
    UNUM_SCALE = 21
    UNUM_MINIMUM_GROUPING_DIGITS = 22
    UNUM_CURRENCY_USAGE = 23
    UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS = 4096
    UNUM_PARSE_NO_EXPONENT = 4097
    UNUM_PARSE_DECIMAL_MARK_REQUIRED = 4098
    UNUM_PARSE_CASE_SENSITIVE = 4099
    UNUM_SIGN_ALWAYS_SHOWN = 4100
  end

  enum UNumberFormatTextAttribute : Int32
    UNUM_POSITIVE_PREFIX = 0
    UNUM_POSITIVE_SUFFIX = 1
    UNUM_NEGATIVE_PREFIX = 2
    UNUM_NEGATIVE_SUFFIX = 3
    UNUM_PADDING_CHARACTER = 4
    UNUM_CURRENCY_CODE = 5
    UNUM_DEFAULT_RULESET = 6
    UNUM_PUBLIC_RULESETS = 7
  end

  enum UNumberFormatSymbol : Int32
    UNUM_DECIMAL_SEPARATOR_SYMBOL = 0
    UNUM_GROUPING_SEPARATOR_SYMBOL = 1
    UNUM_PATTERN_SEPARATOR_SYMBOL = 2
    UNUM_PERCENT_SYMBOL = 3
    UNUM_ZERO_DIGIT_SYMBOL = 4
    UNUM_DIGIT_SYMBOL = 5
    UNUM_MINUS_SIGN_SYMBOL = 6
    UNUM_PLUS_SIGN_SYMBOL = 7
    UNUM_CURRENCY_SYMBOL = 8
    UNUM_INTL_CURRENCY_SYMBOL = 9
    UNUM_MONETARY_SEPARATOR_SYMBOL = 10
    UNUM_EXPONENTIAL_SYMBOL = 11
    UNUM_PERMILL_SYMBOL = 12
    UNUM_PAD_ESCAPE_SYMBOL = 13
    UNUM_INFINITY_SYMBOL = 14
    UNUM_NAN_SYMBOL = 15
    UNUM_SIGNIFICANT_DIGIT_SYMBOL = 16
    UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL = 17
    UNUM_ONE_DIGIT_SYMBOL = 18
    UNUM_TWO_DIGIT_SYMBOL = 19
    UNUM_THREE_DIGIT_SYMBOL = 20
    UNUM_FOUR_DIGIT_SYMBOL = 21
    UNUM_FIVE_DIGIT_SYMBOL = 22
    UNUM_SIX_DIGIT_SYMBOL = 23
    UNUM_SEVEN_DIGIT_SYMBOL = 24
    UNUM_EIGHT_DIGIT_SYMBOL = 25
    UNUM_NINE_DIGIT_SYMBOL = 26
    UNUM_EXPONENT_MULTIPLICATION_SYMBOL = 27
  end

  enum UDateFormatStyle : Int32
    UDAT_FULL = 0
    UDAT_LONG = 1
    UDAT_MEDIUM = 2
    UDAT_SHORT = 3
    UDAT_DEFAULT = 2
    UDAT_RELATIVE = 128
    UDAT_FULL_RELATIVE = 128
    UDAT_LONG_RELATIVE = 129
    UDAT_MEDIUM_RELATIVE = 130
    UDAT_SHORT_RELATIVE = 131
    UDAT_NONE = -1
    UDAT_PATTERN = -2
  end

  enum UDateFormatField : Int32
    UDAT_ERA_FIELD = 0
    UDAT_YEAR_FIELD = 1
    UDAT_MONTH_FIELD = 2
    UDAT_DATE_FIELD = 3
    UDAT_HOUR_OF_DAY1_FIELD = 4
    UDAT_HOUR_OF_DAY0_FIELD = 5
    UDAT_MINUTE_FIELD = 6
    UDAT_SECOND_FIELD = 7
    UDAT_FRACTIONAL_SECOND_FIELD = 8
    UDAT_DAY_OF_WEEK_FIELD = 9
    UDAT_DAY_OF_YEAR_FIELD = 10
    UDAT_DAY_OF_WEEK_IN_MONTH_FIELD = 11
    UDAT_WEEK_OF_YEAR_FIELD = 12
    UDAT_WEEK_OF_MONTH_FIELD = 13
    UDAT_AM_PM_FIELD = 14
    UDAT_HOUR1_FIELD = 15
    UDAT_HOUR0_FIELD = 16
    UDAT_TIMEZONE_FIELD = 17
    UDAT_YEAR_WOY_FIELD = 18
    UDAT_DOW_LOCAL_FIELD = 19
    UDAT_EXTENDED_YEAR_FIELD = 20
    UDAT_JULIAN_DAY_FIELD = 21
    UDAT_MILLISECONDS_IN_DAY_FIELD = 22
    UDAT_TIMEZONE_RFC_FIELD = 23
    UDAT_TIMEZONE_GENERIC_FIELD = 24
    UDAT_STANDALONE_DAY_FIELD = 25
    UDAT_STANDALONE_MONTH_FIELD = 26
    UDAT_QUARTER_FIELD = 27
    UDAT_STANDALONE_QUARTER_FIELD = 28
    UDAT_TIMEZONE_SPECIAL_FIELD = 29
    UDAT_YEAR_NAME_FIELD = 30
    UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = 31
    UDAT_TIMEZONE_ISO_FIELD = 32
    UDAT_TIMEZONE_ISO_LOCAL_FIELD = 33
    UDAT_AM_PM_MIDNIGHT_NOON_FIELD = 35
    UDAT_FLEXIBLE_DAY_PERIOD_FIELD = 36
  end

  enum UDateFormatBooleanAttribute : Int32
    UDAT_PARSE_ALLOW_WHITESPACE = 0
    UDAT_PARSE_ALLOW_NUMERIC = 1
    UDAT_PARSE_PARTIAL_LITERAL_MATCH = 2
    UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = 3
    UDAT_BOOLEAN_ATTRIBUTE_COUNT = 4
  end

  enum UDateFormatSymbolType : Int32
    UDAT_ERAS = 0
    UDAT_MONTHS = 1
    UDAT_SHORT_MONTHS = 2
    UDAT_WEEKDAYS = 3
    UDAT_SHORT_WEEKDAYS = 4
    UDAT_AM_PMS = 5
    UDAT_LOCALIZED_CHARS = 6
    UDAT_ERA_NAMES = 7
    UDAT_NARROW_MONTHS = 8
    UDAT_NARROW_WEEKDAYS = 9
    UDAT_STANDALONE_MONTHS = 10
    UDAT_STANDALONE_SHORT_MONTHS = 11
    UDAT_STANDALONE_NARROW_MONTHS = 12
    UDAT_STANDALONE_WEEKDAYS = 13
    UDAT_STANDALONE_SHORT_WEEKDAYS = 14
    UDAT_STANDALONE_NARROW_WEEKDAYS = 15
    UDAT_QUARTERS = 16
    UDAT_SHORT_QUARTERS = 17
    UDAT_STANDALONE_QUARTERS = 18
    UDAT_STANDALONE_SHORT_QUARTERS = 19
    UDAT_SHORTER_WEEKDAYS = 20
    UDAT_STANDALONE_SHORTER_WEEKDAYS = 21
    UDAT_CYCLIC_YEARS_WIDE = 22
    UDAT_CYCLIC_YEARS_ABBREVIATED = 23
    UDAT_CYCLIC_YEARS_NARROW = 24
    UDAT_ZODIAC_NAMES_WIDE = 25
    UDAT_ZODIAC_NAMES_ABBREVIATED = 26
    UDAT_ZODIAC_NAMES_NARROW = 27
  end

  enum UDateTimePatternField : Int32
    UDATPG_ERA_FIELD = 0
    UDATPG_YEAR_FIELD = 1
    UDATPG_QUARTER_FIELD = 2
    UDATPG_MONTH_FIELD = 3
    UDATPG_WEEK_OF_YEAR_FIELD = 4
    UDATPG_WEEK_OF_MONTH_FIELD = 5
    UDATPG_WEEKDAY_FIELD = 6
    UDATPG_DAY_OF_YEAR_FIELD = 7
    UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD = 8
    UDATPG_DAY_FIELD = 9
    UDATPG_DAYPERIOD_FIELD = 10
    UDATPG_HOUR_FIELD = 11
    UDATPG_MINUTE_FIELD = 12
    UDATPG_SECOND_FIELD = 13
    UDATPG_FRACTIONAL_SECOND_FIELD = 14
    UDATPG_ZONE_FIELD = 15
    UDATPG_FIELD_COUNT = 16
  end

  enum UDateTimePGDisplayWidth : Int32
    UDATPG_WIDE = 0
    UDATPG_ABBREVIATED = 1
    UDATPG_NARROW = 2
  end

  enum UDateTimePatternMatchOptions : Int32
    UDATPG_MATCH_NO_OPTIONS = 0
    UDATPG_MATCH_HOUR_FIELD_LENGTH = 2048
    UDATPG_MATCH_ALL_FIELDS_LENGTH = 65535
  end

  enum UDateTimePatternConflict : Int32
    UDATPG_NO_CONFLICT = 0
    UDATPG_BASE_CONFLICT = 1
    UDATPG_CONFLICT = 2
  end

  enum UNumberUnitWidth : Int32
    UNUM_UNIT_WIDTH_NARROW = 0
    UNUM_UNIT_WIDTH_SHORT = 1
    UNUM_UNIT_WIDTH_FULL_NAME = 2
    UNUM_UNIT_WIDTH_ISO_CODE = 3
    UNUM_UNIT_WIDTH_HIDDEN = 4
    UNUM_UNIT_WIDTH_COUNT = 5
  end

  enum UNumberGroupingStrategy : Int32
    UNUM_GROUPING_OFF = 0
    UNUM_GROUPING_MIN2 = 1
    UNUM_GROUPING_AUTO = 2
    UNUM_GROUPING_ON_ALIGNED = 3
    UNUM_GROUPING_THOUSANDS = 4
  end

  enum UNumberSignDisplay : Int32
    UNUM_SIGN_AUTO = 0
    UNUM_SIGN_ALWAYS = 1
    UNUM_SIGN_NEVER = 2
    UNUM_SIGN_ACCOUNTING = 3
    UNUM_SIGN_ACCOUNTING_ALWAYS = 4
    UNUM_SIGN_EXCEPT_ZERO = 5
    UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO = 6
    UNUM_SIGN_COUNT = 7
  end

  enum UNumberDecimalSeparatorDisplay : Int32
    UNUM_DECIMAL_SEPARATOR_AUTO = 0
    UNUM_DECIMAL_SEPARATOR_ALWAYS = 1
    UNUM_DECIMAL_SEPARATOR_COUNT = 2
  end

  enum UNumberRangeCollapse : Int32
    UNUM_RANGE_COLLAPSE_AUTO = 0
    UNUM_RANGE_COLLAPSE_NONE = 1
    UNUM_RANGE_COLLAPSE_UNIT = 2
    UNUM_RANGE_COLLAPSE_ALL = 3
  end

  enum UNumberRangeIdentityFallback : Int32
    UNUM_IDENTITY_FALLBACK_SINGLE_VALUE = 0
    UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE = 1
    UNUM_IDENTITY_FALLBACK_APPROXIMATELY = 2
    UNUM_IDENTITY_FALLBACK_RANGE = 3
  end

  enum UNumberRangeIdentityResult : Int32
    UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING = 0
    UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING = 1
    UNUM_IDENTITY_RESULT_NOT_EQUAL = 2
  end

  enum UPluralType : Int32
    UPLURAL_TYPE_CARDINAL = 0
    UPLURAL_TYPE_ORDINAL = 1
  end

  enum URegexpFlag : Int32
    UREGEX_CASE_INSENSITIVE = 2
    UREGEX_COMMENTS = 4
    UREGEX_DOTALL = 32
    UREGEX_LITERAL = 16
    UREGEX_MULTILINE = 8
    UREGEX_UNIX_LINES = 1
    UREGEX_UWORD = 256
    UREGEX_ERROR_ON_UNKNOWN_ESCAPES = 512
  end

  enum URegionType : Int32
    URGN_UNKNOWN = 0
    URGN_TERRITORY = 1
    URGN_WORLD = 2
    URGN_CONTINENT = 3
    URGN_SUBCONTINENT = 4
    URGN_GROUPING = 5
    URGN_DEPRECATED = 6
  end

  enum UDateRelativeDateTimeFormatterStyle : Int32
    UDAT_STYLE_LONG = 0
    UDAT_STYLE_SHORT = 1
    UDAT_STYLE_NARROW = 2
  end

  enum URelativeDateTimeUnit : Int32
    UDAT_REL_UNIT_YEAR = 0
    UDAT_REL_UNIT_QUARTER = 1
    UDAT_REL_UNIT_MONTH = 2
    UDAT_REL_UNIT_WEEK = 3
    UDAT_REL_UNIT_DAY = 4
    UDAT_REL_UNIT_HOUR = 5
    UDAT_REL_UNIT_MINUTE = 6
    UDAT_REL_UNIT_SECOND = 7
    UDAT_REL_UNIT_SUNDAY = 8
    UDAT_REL_UNIT_MONDAY = 9
    UDAT_REL_UNIT_TUESDAY = 10
    UDAT_REL_UNIT_WEDNESDAY = 11
    UDAT_REL_UNIT_THURSDAY = 12
    UDAT_REL_UNIT_FRIDAY = 13
    UDAT_REL_UNIT_SATURDAY = 14
  end

  enum URelativeDateTimeFormatterField : Int32
    UDAT_REL_LITERAL_FIELD = 0
    UDAT_REL_NUMERIC_FIELD = 1
  end

  enum USearchAttribute : Int32
    USEARCH_OVERLAP = 0
    USEARCH_ELEMENT_COMPARISON = 2
  end

  enum USearchAttributeValue : Int32
    USEARCH_DEFAULT = -1
    USEARCH_OFF = 0
    USEARCH_ON = 1
    USEARCH_STANDARD_ELEMENT_COMPARISON = 2
    USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD = 3
    USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD = 4
  end

  enum USpoofChecks : Int32
    USPOOF_SINGLE_SCRIPT_CONFUSABLE = 1
    USPOOF_MIXED_SCRIPT_CONFUSABLE = 2
    USPOOF_WHOLE_SCRIPT_CONFUSABLE = 4
    USPOOF_CONFUSABLE = 7
    USPOOF_RESTRICTION_LEVEL = 16
    USPOOF_INVISIBLE = 32
    USPOOF_CHAR_LIMIT = 64
    USPOOF_MIXED_NUMBERS = 128
    USPOOF_HIDDEN_OVERLAY = 256
    USPOOF_ALL_CHECKS = 65535
    USPOOF_AUX_INFO = 1073741824
  end

  enum URestrictionLevel : Int32
    USPOOF_ASCII = 268435456
    USPOOF_SINGLE_SCRIPT_RESTRICTIVE = 536870912
    USPOOF_HIGHLY_RESTRICTIVE = 805306368
    USPOOF_MODERATELY_RESTRICTIVE = 1073741824
    USPOOF_MINIMALLY_RESTRICTIVE = 1342177280
    USPOOF_UNRESTRICTIVE = 1610612736
    USPOOF_RESTRICTION_LEVEL_MASK = 2130706432
  end

  enum UDateTimeScale : Int32
    UDTS_JAVA_TIME = 0
    UDTS_UNIX_TIME = 1
    UDTS_ICU4C_TIME = 2
    UDTS_WINDOWS_FILE_TIME = 3
    UDTS_DOTNET_DATE_TIME = 4
    UDTS_MAC_OLD_TIME = 5
    UDTS_MAC_TIME = 6
    UDTS_EXCEL_TIME = 7
    UDTS_DB2_TIME = 8
    UDTS_UNIX_MICROSECONDS_TIME = 9
  end

  enum UTimeScaleValue : Int32
    UTSV_UNITS_VALUE = 0
    UTSV_EPOCH_OFFSET_VALUE = 1
    UTSV_FROM_MIN_VALUE = 2
    UTSV_FROM_MAX_VALUE = 3
    UTSV_TO_MIN_VALUE = 4
    UTSV_TO_MAX_VALUE = 5
  end

  enum UTransDirection : Int32
    UTRANS_FORWARD = 0
    UTRANS_REVERSE = 1
  end

  enum UStringTrieBuildOption : Int32
    USTRINGTRIE_BUILD_FAST = 0
    USTRINGTRIE_BUILD_SMALL = 1
  end

  enum UMessagePatternApostropheMode : Int32
    UMSGPAT_APOS_DOUBLE_OPTIONAL = 0
    UMSGPAT_APOS_DOUBLE_REQUIRED = 1
  end

  enum UMessagePatternPartType : Int32
    UMSGPAT_PART_TYPE_MSG_START = 0
    UMSGPAT_PART_TYPE_MSG_LIMIT = 1
    UMSGPAT_PART_TYPE_SKIP_SYNTAX = 2
    UMSGPAT_PART_TYPE_INSERT_CHAR = 3
    UMSGPAT_PART_TYPE_REPLACE_NUMBER = 4
    UMSGPAT_PART_TYPE_ARG_START = 5
    UMSGPAT_PART_TYPE_ARG_LIMIT = 6
    UMSGPAT_PART_TYPE_ARG_NUMBER = 7
    UMSGPAT_PART_TYPE_ARG_NAME = 8
    UMSGPAT_PART_TYPE_ARG_TYPE = 9
    UMSGPAT_PART_TYPE_ARG_STYLE = 10
    UMSGPAT_PART_TYPE_ARG_SELECTOR = 11
    UMSGPAT_PART_TYPE_ARG_INT = 12
    UMSGPAT_PART_TYPE_ARG_DOUBLE = 13
  end

  enum UMessagePatternArgType : Int32
    UMSGPAT_ARG_TYPE_NONE = 0
    UMSGPAT_ARG_TYPE_SIMPLE = 1
    UMSGPAT_ARG_TYPE_CHOICE = 2
    UMSGPAT_ARG_TYPE_PLURAL = 3
    UMSGPAT_ARG_TYPE_SELECT = 4
    UMSGPAT_ARG_TYPE_SELECTORDINAL = 5
  end

  enum UAlphabeticIndexLabelType : Int32
    U_ALPHAINDEX_NORMAL = 0
    U_ALPHAINDEX_UNDERFLOW = 1
    U_ALPHAINDEX_INFLOW = 2
    U_ALPHAINDEX_OVERFLOW = 3
  end

  enum UTimeZoneNameType : Int32
    UTZNM_UNKNOWN = 0
    UTZNM_LONG_GENERIC = 1
    UTZNM_LONG_STANDARD = 2
    UTZNM_LONG_DAYLIGHT = 4
    UTZNM_SHORT_GENERIC = 8
    UTZNM_SHORT_STANDARD = 16
    UTZNM_SHORT_DAYLIGHT = 32
    UTZNM_EXEMPLAR_LOCATION = 64
  end

  enum UTimeZoneFormatStyle : Int32
    UTZFMT_STYLE_GENERIC_LOCATION = 0
    UTZFMT_STYLE_GENERIC_LONG = 1
    UTZFMT_STYLE_GENERIC_SHORT = 2
    UTZFMT_STYLE_SPECIFIC_LONG = 3
    UTZFMT_STYLE_SPECIFIC_SHORT = 4
    UTZFMT_STYLE_LOCALIZED_GMT = 5
    UTZFMT_STYLE_LOCALIZED_GMT_SHORT = 6
    UTZFMT_STYLE_ISO_BASIC_SHORT = 7
    UTZFMT_STYLE_ISO_BASIC_LOCAL_SHORT = 8
    UTZFMT_STYLE_ISO_BASIC_FIXED = 9
    UTZFMT_STYLE_ISO_BASIC_LOCAL_FIXED = 10
    UTZFMT_STYLE_ISO_BASIC_FULL = 11
    UTZFMT_STYLE_ISO_BASIC_LOCAL_FULL = 12
    UTZFMT_STYLE_ISO_EXTENDED_FIXED = 13
    UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FIXED = 14
    UTZFMT_STYLE_ISO_EXTENDED_FULL = 15
    UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FULL = 16
    UTZFMT_STYLE_ZONE_ID = 17
    UTZFMT_STYLE_ZONE_ID_SHORT = 18
    UTZFMT_STYLE_EXEMPLAR_LOCATION = 19
  end

  enum UTimeZoneFormatGMTOffsetPatternType : Int32
    UTZFMT_PAT_POSITIVE_HM = 0
    UTZFMT_PAT_POSITIVE_HMS = 1
    UTZFMT_PAT_NEGATIVE_HM = 2
    UTZFMT_PAT_NEGATIVE_HMS = 3
    UTZFMT_PAT_POSITIVE_H = 4
    UTZFMT_PAT_NEGATIVE_H = 5
    UTZFMT_PAT_COUNT = 6
  end

  enum UTimeZoneFormatTimeType : Int32
    UTZFMT_TIME_TYPE_UNKNOWN = 0
    UTZFMT_TIME_TYPE_STANDARD = 1
    UTZFMT_TIME_TYPE_DAYLIGHT = 2
  end

  enum UTimeZoneFormatParseOption : Int32
    UTZFMT_PARSE_OPTION_NONE = 0
    UTZFMT_PARSE_OPTION_ALL_STYLES = 1
    UTZFMT_PARSE_OPTION_TZ_DATABASE_ABBREVIATIONS = 2
  end

  enum UMeasureFormatWidth : Int32
    UMEASFMT_WIDTH_WIDE = 0
    UMEASFMT_WIDTH_SHORT = 1
    UMEASFMT_WIDTH_NARROW = 2
    UMEASFMT_WIDTH_NUMERIC = 3
    UMEASFMT_WIDTH_COUNT = 4
  end

  enum UDateRelativeUnit : Int32
    UDAT_RELATIVE_SECONDS = 0
    UDAT_RELATIVE_MINUTES = 1
    UDAT_RELATIVE_HOURS = 2
    UDAT_RELATIVE_DAYS = 3
    UDAT_RELATIVE_WEEKS = 4
    UDAT_RELATIVE_MONTHS = 5
    UDAT_RELATIVE_YEARS = 6
    UDAT_RELATIVE_UNIT_COUNT = 7
  end

  enum UDateAbsoluteUnit : Int32
    UDAT_ABSOLUTE_SUNDAY = 0
    UDAT_ABSOLUTE_MONDAY = 1
    UDAT_ABSOLUTE_TUESDAY = 2
    UDAT_ABSOLUTE_WEDNESDAY = 3
    UDAT_ABSOLUTE_THURSDAY = 4
    UDAT_ABSOLUTE_FRIDAY = 5
    UDAT_ABSOLUTE_SATURDAY = 6
    UDAT_ABSOLUTE_DAY = 7
    UDAT_ABSOLUTE_WEEK = 8
    UDAT_ABSOLUTE_MONTH = 9
    UDAT_ABSOLUTE_YEAR = 10
    UDAT_ABSOLUTE_NOW = 11
    UDAT_ABSOLUTE_UNIT_COUNT = 12
  end

  enum UDateDirection : Int32
    UDAT_DIRECTION_LAST_2 = 0
    UDAT_DIRECTION_LAST = 1
    UDAT_DIRECTION_THIS = 2
    UDAT_DIRECTION_NEXT = 3
    UDAT_DIRECTION_NEXT_2 = 4
    UDAT_DIRECTION_PLAIN = 5
    UDAT_DIRECTION_COUNT = 6
  end

  enum MIMECONTF : Int32
    MIMECONTF_MAILNEWS = 1
    MIMECONTF_BROWSER = 2
    MIMECONTF_MINIMAL = 4
    MIMECONTF_IMPORT = 8
    MIMECONTF_SAVABLE_MAILNEWS = 256
    MIMECONTF_SAVABLE_BROWSER = 512
    MIMECONTF_EXPORT = 1024
    MIMECONTF_PRIVCONVERTER = 65536
    MIMECONTF_VALID = 131072
    MIMECONTF_VALID_NLS = 262144
    MIMECONTF_MIME_IE4 = 268435456
    MIMECONTF_MIME_LATEST = 536870912
    MIMECONTF_MIME_REGISTRY = 1073741824
  end

  enum SCRIPTCONTF : Int32
    Siddefault = 0
    Sidmerge = 1
    Sidasciisym = 2
    Sidasciilatin = 3
    Sidlatin = 4
    Sidgreek = 5
    Sidcyrillic = 6
    Sidarmenian = 7
    Sidhebrew = 8
    Sidarabic = 9
    Siddevanagari = 10
    Sidbengali = 11
    Sidgurmukhi = 12
    Sidgujarati = 13
    Sidoriya = 14
    Sidtamil = 15
    Sidtelugu = 16
    Sidkannada = 17
    Sidmalayalam = 18
    Sidthai = 19
    Sidlao = 20
    Sidtibetan = 21
    Sidgeorgian = 22
    Sidhangul = 23
    Sidkana = 24
    Sidbopomofo = 25
    Sidhan = 26
    Sidethiopic = 27
    Sidcansyllabic = 28
    Sidcherokee = 29
    Sidyi = 30
    Sidbraille = 31
    Sidrunic = 32
    Sidogham = 33
    Sidsinhala = 34
    Sidsyriac = 35
    Sidburmese = 36
    Sidkhmer = 37
    Sidthaana = 38
    Sidmongolian = 39
    Siduserdefined = 40
    Sidlim = 41
    Sidfefirst = 23
    Sidfelast = 26
  end

  enum Tagmlconvcharf : Int32
    MLCONVCHARF_AUTODETECT = 1
    MLCONVCHARF_ENTITIZE = 2
    MLCONVCHARF_NCR_ENTITIZE = 2
    MLCONVCHARF_NAME_ENTITIZE = 4
    MLCONVCHARF_USEDEFCHAR = 8
    MLCONVCHARF_NOBESTFITCHARS = 16
    MLCONVCHARF_DETECTJPN = 32
  end

  enum Tagmlcpf : Int32
    MLDETECTF_MAILNEWS = 1
    MLDETECTF_BROWSER = 2
    MLDETECTF_VALID = 4
    MLDETECTF_VALID_NLS = 8
    MLDETECTF_PRESERVE_ORDER = 16
    MLDETECTF_PREFERRED_ONLY = 32
    MLDETECTF_FILTER_SPECIALCHAR = 64
    MLDETECTF_EURO_UTF8 = 128
  end

  enum MLDETECTCP : Int32
    MLDETECTCP_NONE = 0
    MLDETECTCP_7BIT = 1
    MLDETECTCP_8BIT = 2
    MLDETECTCP_DBCS = 4
    MLDETECTCP_HTML = 8
    MLDETECTCP_NUMBER = 16
  end

  enum SCRIPTFONTCONTF : Int32
    SCRIPTCONTF_FIXED_FONT = 1
    SCRIPTCONTF_PROPORTIONAL_FONT = 2
    SCRIPTCONTF_SCRIPT_USER = 65536
    SCRIPTCONTF_SCRIPT_HIDE = 131072
    SCRIPTCONTF_SCRIPT_SYSTEM = 262144
  end

  enum MLSTR_FLAGS : Int32
    MLSTR_READ = 1
    MLSTR_WRITE = 2
  end

  union UCPTrieData
    ptr0 : Void*
    ptr16 : UInt16*
    ptr32 : UInt32*
    ptr8 : UInt8*
  end

  struct FONTSIGNATURE
    fs_usb : UInt32[4]*
    fs_csb : UInt32[2]*
  end
  struct CHARSETINFO
    ci_charset : UInt32
    ci_acp : UInt32
    fs : FONTSIGNATURE
  end
  struct LOCALESIGNATURE
    ls_usb : UInt32[4]*
    ls_csb_default : UInt32[2]*
    ls_csb_supported : UInt32[2]*
  end
  struct NEWTEXTMETRICEXA
    ntm_tm : NEWTEXTMETRICA
    ntm_font_sig : FONTSIGNATURE
  end
  struct NEWTEXTMETRICEXW
    ntm_tm : NEWTEXTMETRICW
    ntm_font_sig : FONTSIGNATURE
  end
  struct ENUMTEXTMETRICA
    etm_new_text_metric_ex : NEWTEXTMETRICEXA
    etm_axes_list : AXESLISTA
  end
  struct ENUMTEXTMETRICW
    etm_new_text_metric_ex : NEWTEXTMETRICEXW
    etm_axes_list : AXESLISTW
  end
  struct CPINFO
    max_char_size : UInt32
    default_char : UInt8[2]*
    lead_byte : UInt8[12]*
  end
  struct CPINFOEXA
    max_char_size : UInt32
    default_char : UInt8[2]*
    lead_byte : UInt8[12]*
    unicode_default_char : Char
    code_page : UInt32
    code_page_name : CHAR[260]*
  end
  struct CPINFOEXW
    max_char_size : UInt32
    default_char : UInt8[2]*
    lead_byte : UInt8[12]*
    unicode_default_char : Char
    code_page : UInt32
    code_page_name : Char[260]*
  end
  struct NUMBERFMTA
    num_digits : UInt32
    leading_zero : UInt32
    grouping : UInt32
    lp_decimal_sep : PSTR
    lp_thousand_sep : PSTR
    negative_order : UInt32
  end
  struct NUMBERFMTW
    num_digits : UInt32
    leading_zero : UInt32
    grouping : UInt32
    lp_decimal_sep : LibC::LPWSTR
    lp_thousand_sep : LibC::LPWSTR
    negative_order : UInt32
  end
  struct CURRENCYFMTA
    num_digits : UInt32
    leading_zero : UInt32
    grouping : UInt32
    lp_decimal_sep : PSTR
    lp_thousand_sep : PSTR
    negative_order : UInt32
    positive_order : UInt32
    lp_currency_symbol : PSTR
  end
  struct CURRENCYFMTW
    num_digits : UInt32
    leading_zero : UInt32
    grouping : UInt32
    lp_decimal_sep : LibC::LPWSTR
    lp_thousand_sep : LibC::LPWSTR
    negative_order : UInt32
    positive_order : UInt32
    lp_currency_symbol : LibC::LPWSTR
  end
  struct NLSVERSIONINFO
    dw_nls_version_info_size : UInt32
    dw_nls_version : UInt32
    dw_defined_version : UInt32
    dw_effective_id : UInt32
    guid_custom_version : Guid
  end
  struct NLSVERSIONINFOEX
    dw_nls_version_info_size : UInt32
    dw_nls_version : UInt32
    dw_defined_version : UInt32
    dw_effective_id : UInt32
    guid_custom_version : Guid
  end
  struct FILEMUIINFO
    dw_size : UInt32
    dw_version : UInt32
    dw_file_type : UInt32
    p_checksum : UInt8[16]*
    p_service_checksum : UInt8[16]*
    dw_language_name_offset : UInt32
    dw_type_id_main_size : UInt32
    dw_type_id_main_offset : UInt32
    dw_type_name_main_offset : UInt32
    dw_type_idmui_size : UInt32
    dw_type_idmui_offset : UInt32
    dw_type_name_mui_offset : UInt32
    ab_buffer : UInt8[8]*
  end
  struct MAPPING_SERVICE_INFO
    size : LibC::UINT_PTR
    psz_copyright : LibC::LPWSTR
    w_major_version : UInt16
    w_minor_version : UInt16
    w_build_version : UInt16
    w_step_version : UInt16
    dw_input_content_types_count : UInt32
    prg_input_content_types : LibC::LPWSTR*
    dw_output_content_types_count : UInt32
    prg_output_content_types : LibC::LPWSTR*
    dw_input_languages_count : UInt32
    prg_input_languages : LibC::LPWSTR*
    dw_output_languages_count : UInt32
    prg_output_languages : LibC::LPWSTR*
    dw_input_scripts_count : UInt32
    prg_input_scripts : LibC::LPWSTR*
    dw_output_scripts_count : UInt32
    prg_output_scripts : LibC::LPWSTR*
    guid : Guid
    psz_category : LibC::LPWSTR
    psz_description : LibC::LPWSTR
    dw_private_data_size : UInt32
    p_private_data : Void*
    p_context : Void*
    _bitfield : UInt32
  end
  struct MAPPING_ENUM_OPTIONS
    size : LibC::UINT_PTR
    psz_category : LibC::LPWSTR
    psz_input_language : LibC::LPWSTR
    psz_output_language : LibC::LPWSTR
    psz_input_script : LibC::LPWSTR
    psz_output_script : LibC::LPWSTR
    psz_input_content_type : LibC::LPWSTR
    psz_output_content_type : LibC::LPWSTR
    p_guid : Guid*
    _bitfield : UInt32
  end
  struct MAPPING_OPTIONS
    size : LibC::UINT_PTR
    psz_input_language : LibC::LPWSTR
    psz_output_language : LibC::LPWSTR
    psz_input_script : LibC::LPWSTR
    psz_output_script : LibC::LPWSTR
    psz_input_content_type : LibC::LPWSTR
    psz_output_content_type : LibC::LPWSTR
    psz_ui_language : LibC::LPWSTR
    pfn_recognize_callback : PFN_MAPPINGCALLBACKPROC
    p_recognize_caller_data : Void*
    dw_recognize_caller_data_size : UInt32
    pfn_action_callback : PFN_MAPPINGCALLBACKPROC
    p_action_caller_data : Void*
    dw_action_caller_data_size : UInt32
    dw_service_flag : UInt32
    _bitfield : UInt32
  end
  struct MAPPING_DATA_RANGE
    dw_start_index : UInt32
    dw_end_index : UInt32
    psz_description : LibC::LPWSTR
    dw_description_length : UInt32
    p_data : Void*
    dw_data_size : UInt32
    psz_content_type : LibC::LPWSTR
    prg_action_ids : LibC::LPWSTR*
    dw_actions_count : UInt32
    prg_action_display_names : LibC::LPWSTR*
  end
  struct MAPPING_PROPERTY_BAG
    size : LibC::UINT_PTR
    prg_result_ranges : MAPPING_DATA_RANGE*
    dw_ranges_count : UInt32
    p_service_data : Void*
    dw_service_data_size : UInt32
    p_caller_data : Void*
    dw_caller_data_size : UInt32
    p_context : Void*
  end
  struct SCRIPT_CONTROL
    _bitfield : UInt32
  end
  struct SCRIPT_STATE
    _bitfield : UInt16
  end
  struct SCRIPT_ANALYSIS
    _bitfield : UInt16
    s : SCRIPT_STATE
  end
  struct SCRIPT_ITEM
    i_char_pos : Int32
    a : SCRIPT_ANALYSIS
  end
  struct SCRIPT_VISATTR
    _bitfield : UInt16
  end
  struct GOFFSET
    du : Int32
    dv : Int32
  end
  struct SCRIPT_LOGATTR
    _bitfield : UInt8
  end
  struct SCRIPT_PROPERTIES
    _bitfield1 : UInt32
    _bitfield2 : UInt32
  end
  struct SCRIPT_FONTPROPERTIES
    c_bytes : Int32
    wg_blank : UInt16
    wg_default : UInt16
    wg_invalid : UInt16
    wg_kashida : UInt16
    i_kashida_width : Int32
  end
  struct SCRIPT_TABDEF
    c_tab_stops : Int32
    i_scale : Int32
    p_tab_stops : Int32*
    i_tab_origin : Int32
  end
  struct SCRIPT_DIGITSUBSTITUTE
    _bitfield1 : UInt32
    _bitfield2 : UInt32
    dw_reserved : UInt32
  end
  struct Opentype_feature_record
    tag_feature : UInt32
    l_parameter : Int32
  end
  struct Textrange_properties
    potf_records : Opentype_feature_record*
    cotf_records : Int32
  end
  struct Script_charprop
    _bitfield : UInt16
  end
  struct Script_glyphprop
    sva : SCRIPT_VISATTR
    reserved : UInt16
  end
  struct UReplaceableCallbacks
    length : LibC::IntPtrT
    char_at : LibC::IntPtrT
    char32_at : LibC::IntPtrT
    replace : LibC::IntPtrT
    extract : LibC::IntPtrT
    copy : LibC::IntPtrT
  end
  struct UFieldPosition
    field : Int32
    begin_index : Int32
    end_index : Int32
  end
  struct UCharIterator
    context : Void*
    length : Int32
    start : Int32
    index : Int32
    limit : Int32
    reserved_field : Int32
    get_index : UCharIteratorGetIndex
    move : UCharIteratorMove
    has_next : UCharIteratorHasNext
    has_previous : UCharIteratorHasPrevious
    current : UCharIteratorCurrent
    next : UCharIteratorNext
    previous : UCharIteratorPrevious
    reserved_fn : UCharIteratorReserved
    get_state : UCharIteratorGetState
    set_state : UCharIteratorSetState
  end
  struct UCPTrie
    index : UInt16*
    data : UCPTrieData
    index_length : Int32
    data_length : Int32
    high_start : Int32
    shifted12_high_start : UInt16
    type : Int8
    value_width : Int8
    reserved32 : UInt32
    reserved16 : UInt16
    index3_null_offset : UInt16
    data_null_offset : Int32
    null_value : UInt32
  end
  struct UConverterFromUnicodeArgs
    size : UInt16
    flush : Int8
    converter : UConverter*
    source : UInt16*
    source_limit : UInt16*
    target : PSTR
    target_limit : PSTR
    offsets : Int32*
  end
  struct UConverterToUnicodeArgs
    size : UInt16
    flush : Int8
    converter : UConverter*
    source : PSTR
    source_limit : PSTR
    target : UInt16*
    target_limit : UInt16*
    offsets : Int32*
  end
  struct UTextFuncs
    table_size : Int32
    reserved1 : Int32
    reserved2 : Int32
    reserved3 : Int32
    clone : UTextClone
    native_length : UTextNativeLength
    access : UTextAccess
    extract : UTextExtract
    replace : UTextReplace
    copy : UTextCopy
    map_offset_to_native : UTextMapOffsetToNative
    map_native_index_to_utf16 : UTextMapNativeIndexToUTF16
    close : UTextClose
    spare1 : UTextClose
    spare2 : UTextClose
    spare3 : UTextClose
  end
  struct UText
    magic : UInt32
    flags : Int32
    provider_properties : Int32
    size_of_struct : Int32
    chunk_native_limit : Int64
    extra_size : Int32
    native_indexing_limit : Int32
    chunk_native_start : Int64
    chunk_offset : Int32
    chunk_length : Int32
    chunk_contents : UInt16*
    p_funcs : UTextFuncs*
    p_extra : Void*
    context : Void*
    p : Void*
    q : Void*
    r : Void*
    priv_p : Void*
    a : Int64
    b : Int32
    c : Int32
    priv_a : Int64
    priv_b : Int32
    priv_c : Int32
  end
  struct USerializedSet
    array : UInt16*
    bmp_length : Int32
    length : Int32
    static_array : UInt16[8]*
  end
  struct UParseError
    line : Int32
    offset : Int32
    pre_context : UInt16[16]*
    post_context : UInt16[16]*
  end
  struct UIDNAInfo
    size : Int16
    is_transitional_different : Int8
    reserved_b3 : Int8
    errors : UInt32
    reserved_i2 : Int32
    reserved_i3 : Int32
  end
  struct UTransPosition
    context_start : Int32
    context_limit : Int32
    start : Int32
    limit : Int32
  end
  struct MIMECPINFO
    dw_flags : UInt32
    ui_code_page : UInt32
    ui_family_code_page : UInt32
    wsz_description : Char[64]*
    wsz_web_charset : Char[50]*
    wsz_header_charset : Char[50]*
    wsz_body_charset : Char[50]*
    wsz_fixed_width_font : Char[32]*
    wsz_proportional_font : Char[32]*
    b_gdi_charset : UInt8
  end
  struct MIMECSETINFO
    ui_code_page : UInt32
    ui_internet_encoding : UInt32
    wsz_charset : Char[50]*
  end
  struct RFC1766INFO
    lcid : UInt32
    wsz_rfc1766 : Char[6]*
    wsz_locale_name : Char[32]*
  end
  struct SCRIPTINFO
    script_id : UInt8
    ui_code_page : UInt32
    wsz_description : Char[48]*
    wsz_fixed_width_font : Char[32]*
    wsz_proportional_font : Char[32]*
  end
  struct DetectEncodingInfo
    n_lang_id : UInt32
    n_code_page : UInt32
    n_doc_percent : Int32
    n_confidence : Int32
  end
  struct Tagscripfontinfo
    scripts : Int64
    wsz_font : Char[32]*
  end
  struct UNICODERANGE
    wc_from : Char
    wc_to : Char
  end


  struct ISpellingErrorVTbl
    query_interface : Proc(ISpellingError*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpellingError*, UInt32)
    release : Proc(ISpellingError*, UInt32)
    get_start_index : Proc(ISpellingError*, UInt32*, HRESULT)
    get_length : Proc(ISpellingError*, UInt32*, HRESULT)
    get_corrective_action : Proc(ISpellingError*, CORRECTIVE_ACTION*, HRESULT)
    get_replacement : Proc(ISpellingError*, LibC::LPWSTR*, HRESULT)
  end

  struct ISpellingError
    lpVtbl : ISpellingErrorVTbl*
  end

  struct IEnumSpellingErrorVTbl
    query_interface : Proc(IEnumSpellingError*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumSpellingError*, UInt32)
    release : Proc(IEnumSpellingError*, UInt32)
    next : Proc(IEnumSpellingError*, ISpellingError*, HRESULT)
  end

  struct IEnumSpellingError
    lpVtbl : IEnumSpellingErrorVTbl*
  end

  struct IOptionDescriptionVTbl
    query_interface : Proc(IOptionDescription*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOptionDescription*, UInt32)
    release : Proc(IOptionDescription*, UInt32)
    get_id : Proc(IOptionDescription*, LibC::LPWSTR*, HRESULT)
    get_heading : Proc(IOptionDescription*, LibC::LPWSTR*, HRESULT)
    get_description : Proc(IOptionDescription*, LibC::LPWSTR*, HRESULT)
    get_labels : Proc(IOptionDescription*, IEnumString*, HRESULT)
  end

  struct IOptionDescription
    lpVtbl : IOptionDescriptionVTbl*
  end

  struct ISpellCheckerChangedEventHandlerVTbl
    query_interface : Proc(ISpellCheckerChangedEventHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpellCheckerChangedEventHandler*, UInt32)
    release : Proc(ISpellCheckerChangedEventHandler*, UInt32)
    invoke : Proc(ISpellCheckerChangedEventHandler*, ISpellChecker, HRESULT)
  end

  struct ISpellCheckerChangedEventHandler
    lpVtbl : ISpellCheckerChangedEventHandlerVTbl*
  end

  struct ISpellCheckerVTbl
    query_interface : Proc(ISpellChecker*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpellChecker*, UInt32)
    release : Proc(ISpellChecker*, UInt32)
    get_language_tag : Proc(ISpellChecker*, LibC::LPWSTR*, HRESULT)
    check : Proc(ISpellChecker*, LibC::LPWSTR, IEnumSpellingError*, HRESULT)
    suggest : Proc(ISpellChecker*, LibC::LPWSTR, IEnumString*, HRESULT)
    add : Proc(ISpellChecker*, LibC::LPWSTR, HRESULT)
    ignore : Proc(ISpellChecker*, LibC::LPWSTR, HRESULT)
    auto_correct : Proc(ISpellChecker*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_option_value : Proc(ISpellChecker*, LibC::LPWSTR, UInt8*, HRESULT)
    get_option_ids : Proc(ISpellChecker*, IEnumString*, HRESULT)
    get_id : Proc(ISpellChecker*, LibC::LPWSTR*, HRESULT)
    get_localized_name : Proc(ISpellChecker*, LibC::LPWSTR*, HRESULT)
    add_spell_checker_changed : Proc(ISpellChecker*, ISpellCheckerChangedEventHandler, UInt32*, HRESULT)
    remove_spell_checker_changed : Proc(ISpellChecker*, UInt32, HRESULT)
    get_option_description : Proc(ISpellChecker*, LibC::LPWSTR, IOptionDescription*, HRESULT)
    comprehensive_check : Proc(ISpellChecker*, LibC::LPWSTR, IEnumSpellingError*, HRESULT)
  end

  struct ISpellChecker
    lpVtbl : ISpellCheckerVTbl*
  end

  struct ISpellChecker2VTbl
    query_interface : Proc(ISpellChecker2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpellChecker2*, UInt32)
    release : Proc(ISpellChecker2*, UInt32)
    get_language_tag : Proc(ISpellChecker2*, LibC::LPWSTR*, HRESULT)
    check : Proc(ISpellChecker2*, LibC::LPWSTR, IEnumSpellingError*, HRESULT)
    suggest : Proc(ISpellChecker2*, LibC::LPWSTR, IEnumString*, HRESULT)
    add : Proc(ISpellChecker2*, LibC::LPWSTR, HRESULT)
    ignore : Proc(ISpellChecker2*, LibC::LPWSTR, HRESULT)
    auto_correct : Proc(ISpellChecker2*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    get_option_value : Proc(ISpellChecker2*, LibC::LPWSTR, UInt8*, HRESULT)
    get_option_ids : Proc(ISpellChecker2*, IEnumString*, HRESULT)
    get_id : Proc(ISpellChecker2*, LibC::LPWSTR*, HRESULT)
    get_localized_name : Proc(ISpellChecker2*, LibC::LPWSTR*, HRESULT)
    add_spell_checker_changed : Proc(ISpellChecker2*, ISpellCheckerChangedEventHandler, UInt32*, HRESULT)
    remove_spell_checker_changed : Proc(ISpellChecker2*, UInt32, HRESULT)
    get_option_description : Proc(ISpellChecker2*, LibC::LPWSTR, IOptionDescription*, HRESULT)
    comprehensive_check : Proc(ISpellChecker2*, LibC::LPWSTR, IEnumSpellingError*, HRESULT)
    remove : Proc(ISpellChecker2*, LibC::LPWSTR, HRESULT)
  end

  struct ISpellChecker2
    lpVtbl : ISpellChecker2VTbl*
  end

  struct ISpellCheckerFactoryVTbl
    query_interface : Proc(ISpellCheckerFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpellCheckerFactory*, UInt32)
    release : Proc(ISpellCheckerFactory*, UInt32)
    get_supported_languages : Proc(ISpellCheckerFactory*, IEnumString*, HRESULT)
    is_supported : Proc(ISpellCheckerFactory*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    create_spell_checker : Proc(ISpellCheckerFactory*, LibC::LPWSTR, ISpellChecker*, HRESULT)
  end

  struct ISpellCheckerFactory
    lpVtbl : ISpellCheckerFactoryVTbl*
  end

  struct IUserDictionariesRegistrarVTbl
    query_interface : Proc(IUserDictionariesRegistrar*, Guid*, Void**, HRESULT)
    add_ref : Proc(IUserDictionariesRegistrar*, UInt32)
    release : Proc(IUserDictionariesRegistrar*, UInt32)
    register_user_dictionary : Proc(IUserDictionariesRegistrar*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    unregister_user_dictionary : Proc(IUserDictionariesRegistrar*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
  end

  struct IUserDictionariesRegistrar
    lpVtbl : IUserDictionariesRegistrarVTbl*
  end

  struct ISpellCheckProviderVTbl
    query_interface : Proc(ISpellCheckProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpellCheckProvider*, UInt32)
    release : Proc(ISpellCheckProvider*, UInt32)
    get_language_tag : Proc(ISpellCheckProvider*, LibC::LPWSTR*, HRESULT)
    check : Proc(ISpellCheckProvider*, LibC::LPWSTR, IEnumSpellingError*, HRESULT)
    suggest : Proc(ISpellCheckProvider*, LibC::LPWSTR, IEnumString*, HRESULT)
    get_option_value : Proc(ISpellCheckProvider*, LibC::LPWSTR, UInt8*, HRESULT)
    set_option_value : Proc(ISpellCheckProvider*, LibC::LPWSTR, UInt8, HRESULT)
    get_option_ids : Proc(ISpellCheckProvider*, IEnumString*, HRESULT)
    get_id : Proc(ISpellCheckProvider*, LibC::LPWSTR*, HRESULT)
    get_localized_name : Proc(ISpellCheckProvider*, LibC::LPWSTR*, HRESULT)
    get_option_description : Proc(ISpellCheckProvider*, LibC::LPWSTR, IOptionDescription*, HRESULT)
    initialize_wordlist : Proc(ISpellCheckProvider*, WORDLIST_TYPE, IEnumString, HRESULT)
  end

  struct ISpellCheckProvider
    lpVtbl : ISpellCheckProviderVTbl*
  end

  struct IComprehensiveSpellCheckProviderVTbl
    query_interface : Proc(IComprehensiveSpellCheckProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComprehensiveSpellCheckProvider*, UInt32)
    release : Proc(IComprehensiveSpellCheckProvider*, UInt32)
    comprehensive_check : Proc(IComprehensiveSpellCheckProvider*, LibC::LPWSTR, IEnumSpellingError*, HRESULT)
  end

  struct IComprehensiveSpellCheckProvider
    lpVtbl : IComprehensiveSpellCheckProviderVTbl*
  end

  struct ISpellCheckProviderFactoryVTbl
    query_interface : Proc(ISpellCheckProviderFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpellCheckProviderFactory*, UInt32)
    release : Proc(ISpellCheckProviderFactory*, UInt32)
    get_supported_languages : Proc(ISpellCheckProviderFactory*, IEnumString*, HRESULT)
    is_supported : Proc(ISpellCheckProviderFactory*, LibC::LPWSTR, LibC::BOOL*, HRESULT)
    create_spell_check_provider : Proc(ISpellCheckProviderFactory*, LibC::LPWSTR, ISpellCheckProvider*, HRESULT)
  end

  struct ISpellCheckProviderFactory
    lpVtbl : ISpellCheckProviderFactoryVTbl*
  end

  struct IMLangStringBufWVTbl
    query_interface : Proc(IMLangStringBufW*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangStringBufW*, UInt32)
    release : Proc(IMLangStringBufW*, UInt32)
    get_status : Proc(IMLangStringBufW*, Int32*, Int32*, HRESULT)
    lock_buf : Proc(IMLangStringBufW*, Int32, Int32, UInt16**, Int32*, HRESULT)
    unlock_buf : Proc(IMLangStringBufW*, LibC::LPWSTR, Int32, Int32, HRESULT)
    insert : Proc(IMLangStringBufW*, Int32, Int32, Int32*, HRESULT)
    delete : Proc(IMLangStringBufW*, Int32, Int32, HRESULT)
  end

  struct IMLangStringBufW
    lpVtbl : IMLangStringBufWVTbl*
  end

  struct IMLangStringBufAVTbl
    query_interface : Proc(IMLangStringBufA*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangStringBufA*, UInt32)
    release : Proc(IMLangStringBufA*, UInt32)
    get_status : Proc(IMLangStringBufA*, Int32*, Int32*, HRESULT)
    lock_buf : Proc(IMLangStringBufA*, Int32, Int32, CHAR**, Int32*, HRESULT)
    unlock_buf : Proc(IMLangStringBufA*, PSTR, Int32, Int32, HRESULT)
    insert : Proc(IMLangStringBufA*, Int32, Int32, Int32*, HRESULT)
    delete : Proc(IMLangStringBufA*, Int32, Int32, HRESULT)
  end

  struct IMLangStringBufA
    lpVtbl : IMLangStringBufAVTbl*
  end

  struct IMLangStringVTbl
    query_interface : Proc(IMLangString*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangString*, UInt32)
    release : Proc(IMLangString*, UInt32)
    sync : Proc(IMLangString*, LibC::BOOL, HRESULT)
    get_length : Proc(IMLangString*, Int32*, HRESULT)
    set_ml_str : Proc(IMLangString*, Int32, Int32, IUnknown, Int32, Int32, HRESULT)
    get_ml_str : Proc(IMLangString*, Int32, Int32, IUnknown, UInt32, Guid*, IUnknown*, Int32*, Int32*, HRESULT)
  end

  struct IMLangString
    lpVtbl : IMLangStringVTbl*
  end

  struct IMLangStringWStrVTbl
    query_interface : Proc(IMLangStringWStr*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangStringWStr*, UInt32)
    release : Proc(IMLangStringWStr*, UInt32)
    sync : Proc(IMLangStringWStr*, LibC::BOOL, HRESULT)
    get_length : Proc(IMLangStringWStr*, Int32*, HRESULT)
    set_ml_str : Proc(IMLangStringWStr*, Int32, Int32, IUnknown, Int32, Int32, HRESULT)
    get_ml_str : Proc(IMLangStringWStr*, Int32, Int32, IUnknown, UInt32, Guid*, IUnknown*, Int32*, Int32*, HRESULT)
    set_w_str : Proc(IMLangStringWStr*, Int32, Int32, Char*, Int32, Int32*, Int32*, HRESULT)
    set_str_buf_w : Proc(IMLangStringWStr*, Int32, Int32, IMLangStringBufW, Int32*, Int32*, HRESULT)
    get_w_str : Proc(IMLangStringWStr*, Int32, Int32, Char*, Int32, Int32*, Int32*, HRESULT)
    get_str_buf_w : Proc(IMLangStringWStr*, Int32, Int32, IMLangStringBufW*, Int32*, HRESULT)
    lock_w_str : Proc(IMLangStringWStr*, Int32, Int32, Int32, Int32, LibC::LPWSTR*, Int32*, Int32*, HRESULT)
    unlock_w_str : Proc(IMLangStringWStr*, Char*, Int32, Int32*, Int32*, HRESULT)
    set_locale : Proc(IMLangStringWStr*, Int32, Int32, UInt32, HRESULT)
    get_locale : Proc(IMLangStringWStr*, Int32, Int32, UInt32*, Int32*, Int32*, HRESULT)
  end

  struct IMLangStringWStr
    lpVtbl : IMLangStringWStrVTbl*
  end

  struct IMLangStringAStrVTbl
    query_interface : Proc(IMLangStringAStr*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangStringAStr*, UInt32)
    release : Proc(IMLangStringAStr*, UInt32)
    sync : Proc(IMLangStringAStr*, LibC::BOOL, HRESULT)
    get_length : Proc(IMLangStringAStr*, Int32*, HRESULT)
    set_ml_str : Proc(IMLangStringAStr*, Int32, Int32, IUnknown, Int32, Int32, HRESULT)
    get_ml_str : Proc(IMLangStringAStr*, Int32, Int32, IUnknown, UInt32, Guid*, IUnknown*, Int32*, Int32*, HRESULT)
    set_a_str : Proc(IMLangStringAStr*, Int32, Int32, UInt32, UInt8*, Int32, Int32*, Int32*, HRESULT)
    set_str_buf_a : Proc(IMLangStringAStr*, Int32, Int32, UInt32, IMLangStringBufA, Int32*, Int32*, HRESULT)
    get_a_str : Proc(IMLangStringAStr*, Int32, Int32, UInt32, UInt32*, UInt8*, Int32, Int32*, Int32*, HRESULT)
    get_str_buf_a : Proc(IMLangStringAStr*, Int32, Int32, UInt32*, IMLangStringBufA*, Int32*, HRESULT)
    lock_a_str : Proc(IMLangStringAStr*, Int32, Int32, Int32, UInt32, Int32, UInt32*, PSTR*, Int32*, Int32*, HRESULT)
    unlock_a_str : Proc(IMLangStringAStr*, UInt8*, Int32, Int32*, Int32*, HRESULT)
    set_locale : Proc(IMLangStringAStr*, Int32, Int32, UInt32, HRESULT)
    get_locale : Proc(IMLangStringAStr*, Int32, Int32, UInt32*, Int32*, Int32*, HRESULT)
  end

  struct IMLangStringAStr
    lpVtbl : IMLangStringAStrVTbl*
  end

  struct IMLangLineBreakConsoleVTbl
    query_interface : Proc(IMLangLineBreakConsole*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangLineBreakConsole*, UInt32)
    release : Proc(IMLangLineBreakConsole*, UInt32)
    break_line_ml : Proc(IMLangLineBreakConsole*, IMLangString, Int32, Int32, Int32, Int32, Int32*, Int32*, HRESULT)
    break_line_w : Proc(IMLangLineBreakConsole*, UInt32, Char*, Int32, Int32, Int32*, Int32*, HRESULT)
    break_line_a : Proc(IMLangLineBreakConsole*, UInt32, UInt32, UInt8*, Int32, Int32, Int32*, Int32*, HRESULT)
  end

  struct IMLangLineBreakConsole
    lpVtbl : IMLangLineBreakConsoleVTbl*
  end

  struct IEnumCodePageVTbl
    query_interface : Proc(IEnumCodePage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumCodePage*, UInt32)
    release : Proc(IEnumCodePage*, UInt32)
    clone : Proc(IEnumCodePage*, IEnumCodePage*, HRESULT)
    next : Proc(IEnumCodePage*, UInt32, MIMECPINFO*, UInt32*, HRESULT)
    reset : Proc(IEnumCodePage*, HRESULT)
    skip : Proc(IEnumCodePage*, UInt32, HRESULT)
  end

  struct IEnumCodePage
    lpVtbl : IEnumCodePageVTbl*
  end

  struct IEnumRfc1766VTbl
    query_interface : Proc(IEnumRfc1766*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumRfc1766*, UInt32)
    release : Proc(IEnumRfc1766*, UInt32)
    clone : Proc(IEnumRfc1766*, IEnumRfc1766*, HRESULT)
    next : Proc(IEnumRfc1766*, UInt32, RFC1766INFO*, UInt32*, HRESULT)
    reset : Proc(IEnumRfc1766*, HRESULT)
    skip : Proc(IEnumRfc1766*, UInt32, HRESULT)
  end

  struct IEnumRfc1766
    lpVtbl : IEnumRfc1766VTbl*
  end

  struct IEnumScriptVTbl
    query_interface : Proc(IEnumScript*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumScript*, UInt32)
    release : Proc(IEnumScript*, UInt32)
    clone : Proc(IEnumScript*, IEnumScript*, HRESULT)
    next : Proc(IEnumScript*, UInt32, SCRIPTINFO*, UInt32*, HRESULT)
    reset : Proc(IEnumScript*, HRESULT)
    skip : Proc(IEnumScript*, UInt32, HRESULT)
  end

  struct IEnumScript
    lpVtbl : IEnumScriptVTbl*
  end

  struct IMLangConvertCharsetVTbl
    query_interface : Proc(IMLangConvertCharset*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangConvertCharset*, UInt32)
    release : Proc(IMLangConvertCharset*, UInt32)
    initialize : Proc(IMLangConvertCharset*, UInt32, UInt32, UInt32, HRESULT)
    get_source_code_page : Proc(IMLangConvertCharset*, UInt32*, HRESULT)
    get_destination_code_page : Proc(IMLangConvertCharset*, UInt32*, HRESULT)
    get_property : Proc(IMLangConvertCharset*, UInt32*, HRESULT)
    do_conversion : Proc(IMLangConvertCharset*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    do_conversion_to_unicode : Proc(IMLangConvertCharset*, PSTR, UInt32*, Char*, UInt32*, HRESULT)
    do_conversion_from_unicode : Proc(IMLangConvertCharset*, Char*, UInt32*, PSTR, UInt32*, HRESULT)
  end

  struct IMLangConvertCharset
    lpVtbl : IMLangConvertCharsetVTbl*
  end

  struct IMultiLanguageVTbl
    query_interface : Proc(IMultiLanguage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultiLanguage*, UInt32)
    release : Proc(IMultiLanguage*, UInt32)
    get_number_of_code_page_info : Proc(IMultiLanguage*, UInt32*, HRESULT)
    get_code_page_info : Proc(IMultiLanguage*, UInt32, MIMECPINFO*, HRESULT)
    get_family_code_page : Proc(IMultiLanguage*, UInt32, UInt32*, HRESULT)
    enum_code_pages : Proc(IMultiLanguage*, UInt32, IEnumCodePage*, HRESULT)
    get_charset_info : Proc(IMultiLanguage*, UInt8*, MIMECSETINFO*, HRESULT)
    is_convertible : Proc(IMultiLanguage*, UInt32, UInt32, HRESULT)
    convert_string : Proc(IMultiLanguage*, UInt32*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    convert_string_to_unicode : Proc(IMultiLanguage*, UInt32*, UInt32, PSTR, UInt32*, Char*, UInt32*, HRESULT)
    convert_string_from_unicode : Proc(IMultiLanguage*, UInt32*, UInt32, Char*, UInt32*, PSTR, UInt32*, HRESULT)
    convert_string_reset : Proc(IMultiLanguage*, HRESULT)
    get_rfc1766_from_lcid : Proc(IMultiLanguage*, UInt32, UInt8**, HRESULT)
    get_lcid_from_rfc1766 : Proc(IMultiLanguage*, UInt32*, UInt8*, HRESULT)
    enum_rfc1766 : Proc(IMultiLanguage*, IEnumRfc1766*, HRESULT)
    get_rfc1766_info : Proc(IMultiLanguage*, UInt32, RFC1766INFO*, HRESULT)
    create_convert_charset : Proc(IMultiLanguage*, UInt32, UInt32, UInt32, IMLangConvertCharset*, HRESULT)
  end

  struct IMultiLanguage
    lpVtbl : IMultiLanguageVTbl*
  end

  struct IMultiLanguage2VTbl
    query_interface : Proc(IMultiLanguage2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultiLanguage2*, UInt32)
    release : Proc(IMultiLanguage2*, UInt32)
    get_number_of_code_page_info : Proc(IMultiLanguage2*, UInt32*, HRESULT)
    get_code_page_info : Proc(IMultiLanguage2*, UInt32, UInt16, MIMECPINFO*, HRESULT)
    get_family_code_page : Proc(IMultiLanguage2*, UInt32, UInt32*, HRESULT)
    enum_code_pages : Proc(IMultiLanguage2*, UInt32, UInt16, IEnumCodePage*, HRESULT)
    get_charset_info : Proc(IMultiLanguage2*, UInt8*, MIMECSETINFO*, HRESULT)
    is_convertible : Proc(IMultiLanguage2*, UInt32, UInt32, HRESULT)
    convert_string : Proc(IMultiLanguage2*, UInt32*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    convert_string_to_unicode : Proc(IMultiLanguage2*, UInt32*, UInt32, PSTR, UInt32*, Char*, UInt32*, HRESULT)
    convert_string_from_unicode : Proc(IMultiLanguage2*, UInt32*, UInt32, Char*, UInt32*, PSTR, UInt32*, HRESULT)
    convert_string_reset : Proc(IMultiLanguage2*, HRESULT)
    get_rfc1766_from_lcid : Proc(IMultiLanguage2*, UInt32, UInt8**, HRESULT)
    get_lcid_from_rfc1766 : Proc(IMultiLanguage2*, UInt32*, UInt8*, HRESULT)
    enum_rfc1766 : Proc(IMultiLanguage2*, UInt16, IEnumRfc1766*, HRESULT)
    get_rfc1766_info : Proc(IMultiLanguage2*, UInt32, UInt16, RFC1766INFO*, HRESULT)
    create_convert_charset : Proc(IMultiLanguage2*, UInt32, UInt32, UInt32, IMLangConvertCharset*, HRESULT)
    convert_string_in_i_stream : Proc(IMultiLanguage2*, UInt32*, UInt32, LibC::LPWSTR, UInt32, UInt32, IStream, IStream, HRESULT)
    convert_string_to_unicode_ex : Proc(IMultiLanguage2*, UInt32*, UInt32, PSTR, UInt32*, Char*, UInt32*, UInt32, LibC::LPWSTR, HRESULT)
    convert_string_from_unicode_ex : Proc(IMultiLanguage2*, UInt32*, UInt32, Char*, UInt32*, PSTR, UInt32*, UInt32, LibC::LPWSTR, HRESULT)
    detect_codepage_in_i_stream : Proc(IMultiLanguage2*, UInt32, UInt32, IStream, DetectEncodingInfo*, Int32*, HRESULT)
    detect_input_codepage : Proc(IMultiLanguage2*, UInt32, UInt32, PSTR, Int32*, DetectEncodingInfo*, Int32*, HRESULT)
    validate_code_page : Proc(IMultiLanguage2*, UInt32, LibC::HANDLE, HRESULT)
    get_code_page_description : Proc(IMultiLanguage2*, UInt32, UInt32, Char*, Int32, HRESULT)
    is_code_page_installable : Proc(IMultiLanguage2*, UInt32, HRESULT)
    set_mime_db_source : Proc(IMultiLanguage2*, MIMECONTF, HRESULT)
    get_number_of_scripts : Proc(IMultiLanguage2*, UInt32*, HRESULT)
    enum_scripts : Proc(IMultiLanguage2*, UInt32, UInt16, IEnumScript*, HRESULT)
    validate_code_page_ex : Proc(IMultiLanguage2*, UInt32, LibC::HANDLE, UInt32, HRESULT)
  end

  struct IMultiLanguage2
    lpVtbl : IMultiLanguage2VTbl*
  end

  struct IMLangCodePagesVTbl
    query_interface : Proc(IMLangCodePages*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangCodePages*, UInt32)
    release : Proc(IMLangCodePages*, UInt32)
    get_char_code_pages : Proc(IMLangCodePages*, Char, UInt32*, HRESULT)
    get_str_code_pages : Proc(IMLangCodePages*, Char*, Int32, UInt32, UInt32*, Int32*, HRESULT)
    code_page_to_code_pages : Proc(IMLangCodePages*, UInt32, UInt32*, HRESULT)
    code_pages_to_code_page : Proc(IMLangCodePages*, UInt32, UInt32, UInt32*, HRESULT)
  end

  struct IMLangCodePages
    lpVtbl : IMLangCodePagesVTbl*
  end

  struct IMLangFontLinkVTbl
    query_interface : Proc(IMLangFontLink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangFontLink*, UInt32)
    release : Proc(IMLangFontLink*, UInt32)
    get_char_code_pages : Proc(IMLangFontLink*, Char, UInt32*, HRESULT)
    get_str_code_pages : Proc(IMLangFontLink*, Char*, Int32, UInt32, UInt32*, Int32*, HRESULT)
    code_page_to_code_pages : Proc(IMLangFontLink*, UInt32, UInt32*, HRESULT)
    code_pages_to_code_page : Proc(IMLangFontLink*, UInt32, UInt32, UInt32*, HRESULT)
    get_font_code_pages : Proc(IMLangFontLink*, HDC, HFONT, UInt32*, HRESULT)
    map_font : Proc(IMLangFontLink*, HDC, UInt32, HFONT, HFONT*, HRESULT)
    release_font : Proc(IMLangFontLink*, HFONT, HRESULT)
    reset_font_mapping : Proc(IMLangFontLink*, HRESULT)
  end

  struct IMLangFontLink
    lpVtbl : IMLangFontLinkVTbl*
  end

  struct IMLangFontLink2VTbl
    query_interface : Proc(IMLangFontLink2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMLangFontLink2*, UInt32)
    release : Proc(IMLangFontLink2*, UInt32)
    get_char_code_pages : Proc(IMLangFontLink2*, Char, UInt32*, HRESULT)
    get_str_code_pages : Proc(IMLangFontLink2*, Char*, Int32, UInt32, UInt32*, Int32*, HRESULT)
    code_page_to_code_pages : Proc(IMLangFontLink2*, UInt32, UInt32*, HRESULT)
    code_pages_to_code_page : Proc(IMLangFontLink2*, UInt32, UInt32, UInt32*, HRESULT)
    get_font_code_pages : Proc(IMLangFontLink2*, HDC, HFONT, UInt32*, HRESULT)
    release_font : Proc(IMLangFontLink2*, HFONT, HRESULT)
    reset_font_mapping : Proc(IMLangFontLink2*, HRESULT)
    map_font : Proc(IMLangFontLink2*, HDC, UInt32, Char, HFONT*, HRESULT)
    get_font_unicode_ranges : Proc(IMLangFontLink2*, HDC, UInt32*, UNICODERANGE*, HRESULT)
    get_script_font_info : Proc(IMLangFontLink2*, UInt8, UInt32, UInt32*, Tagscripfontinfo*, HRESULT)
    code_page_to_script_id : Proc(IMLangFontLink2*, UInt32, UInt8*, HRESULT)
  end

  struct IMLangFontLink2
    lpVtbl : IMLangFontLink2VTbl*
  end

  struct IMultiLanguage3VTbl
    query_interface : Proc(IMultiLanguage3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultiLanguage3*, UInt32)
    release : Proc(IMultiLanguage3*, UInt32)
    get_number_of_code_page_info : Proc(IMultiLanguage3*, UInt32*, HRESULT)
    get_code_page_info : Proc(IMultiLanguage3*, UInt32, UInt16, MIMECPINFO*, HRESULT)
    get_family_code_page : Proc(IMultiLanguage3*, UInt32, UInt32*, HRESULT)
    enum_code_pages : Proc(IMultiLanguage3*, UInt32, UInt16, IEnumCodePage*, HRESULT)
    get_charset_info : Proc(IMultiLanguage3*, UInt8*, MIMECSETINFO*, HRESULT)
    is_convertible : Proc(IMultiLanguage3*, UInt32, UInt32, HRESULT)
    convert_string : Proc(IMultiLanguage3*, UInt32*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    convert_string_to_unicode : Proc(IMultiLanguage3*, UInt32*, UInt32, PSTR, UInt32*, Char*, UInt32*, HRESULT)
    convert_string_from_unicode : Proc(IMultiLanguage3*, UInt32*, UInt32, Char*, UInt32*, PSTR, UInt32*, HRESULT)
    convert_string_reset : Proc(IMultiLanguage3*, HRESULT)
    get_rfc1766_from_lcid : Proc(IMultiLanguage3*, UInt32, UInt8**, HRESULT)
    get_lcid_from_rfc1766 : Proc(IMultiLanguage3*, UInt32*, UInt8*, HRESULT)
    enum_rfc1766 : Proc(IMultiLanguage3*, UInt16, IEnumRfc1766*, HRESULT)
    get_rfc1766_info : Proc(IMultiLanguage3*, UInt32, UInt16, RFC1766INFO*, HRESULT)
    create_convert_charset : Proc(IMultiLanguage3*, UInt32, UInt32, UInt32, IMLangConvertCharset*, HRESULT)
    convert_string_in_i_stream : Proc(IMultiLanguage3*, UInt32*, UInt32, LibC::LPWSTR, UInt32, UInt32, IStream, IStream, HRESULT)
    convert_string_to_unicode_ex : Proc(IMultiLanguage3*, UInt32*, UInt32, PSTR, UInt32*, Char*, UInt32*, UInt32, LibC::LPWSTR, HRESULT)
    convert_string_from_unicode_ex : Proc(IMultiLanguage3*, UInt32*, UInt32, Char*, UInt32*, PSTR, UInt32*, UInt32, LibC::LPWSTR, HRESULT)
    detect_codepage_in_i_stream : Proc(IMultiLanguage3*, UInt32, UInt32, IStream, DetectEncodingInfo*, Int32*, HRESULT)
    detect_input_codepage : Proc(IMultiLanguage3*, UInt32, UInt32, PSTR, Int32*, DetectEncodingInfo*, Int32*, HRESULT)
    validate_code_page : Proc(IMultiLanguage3*, UInt32, LibC::HANDLE, HRESULT)
    get_code_page_description : Proc(IMultiLanguage3*, UInt32, UInt32, Char*, Int32, HRESULT)
    is_code_page_installable : Proc(IMultiLanguage3*, UInt32, HRESULT)
    set_mime_db_source : Proc(IMultiLanguage3*, MIMECONTF, HRESULT)
    get_number_of_scripts : Proc(IMultiLanguage3*, UInt32*, HRESULT)
    enum_scripts : Proc(IMultiLanguage3*, UInt32, UInt16, IEnumScript*, HRESULT)
    validate_code_page_ex : Proc(IMultiLanguage3*, UInt32, LibC::HANDLE, UInt32, HRESULT)
    detect_outbound_code_page : Proc(IMultiLanguage3*, UInt32, Char*, UInt32, UInt32*, UInt32, UInt32*, UInt32*, LibC::LPWSTR, HRESULT)
    detect_outbound_code_page_in_i_stream : Proc(IMultiLanguage3*, UInt32, IStream, UInt32*, UInt32, UInt32*, UInt32*, LibC::LPWSTR, HRESULT)
  end

  struct IMultiLanguage3
    lpVtbl : IMultiLanguage3VTbl*
  end


  # Params # hdc : HDC [In]
  fun GetTextCharset(hdc : HDC) : Int32

  # Params # hdc : HDC [In],lpsig : FONTSIGNATURE* [In],dwflags : UInt32 [In]
  fun GetTextCharsetInfo(hdc : HDC, lpsig : FONTSIGNATURE*, dwflags : UInt32) : Int32

  # Params # lpsrc : UInt32* [In],lpcs : CHARSETINFO* [In],dwflags : TRANSLATE_CHARSET_INFO_FLAGS [In]
  fun TranslateCharsetInfo(lpsrc : UInt32*, lpcs : CHARSETINFO*, dwflags : TRANSLATE_CHARSET_INFO_FLAGS) : LibC::BOOL

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lpdate : SYSTEMTIME* [In],lpformat : PSTR [In],lpdatestr : UInt8* [In],cchdate : Int32 [In]
  fun GetDateFormatA(locale : UInt32, dwflags : UInt32, lpdate : SYSTEMTIME*, lpformat : PSTR, lpdatestr : UInt8*, cchdate : Int32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lpdate : SYSTEMTIME* [In],lpformat : LibC::LPWSTR [In],lpdatestr : Char* [In],cchdate : Int32 [In]
  fun GetDateFormatW(locale : UInt32, dwflags : UInt32, lpdate : SYSTEMTIME*, lpformat : LibC::LPWSTR, lpdatestr : Char*, cchdate : Int32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lptime : SYSTEMTIME* [In],lpformat : PSTR [In],lptimestr : UInt8* [In],cchtime : Int32 [In]
  fun GetTimeFormatA(locale : UInt32, dwflags : UInt32, lptime : SYSTEMTIME*, lpformat : PSTR, lptimestr : UInt8*, cchtime : Int32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lptime : SYSTEMTIME* [In],lpformat : LibC::LPWSTR [In],lptimestr : Char* [In],cchtime : Int32 [In]
  fun GetTimeFormatW(locale : UInt32, dwflags : UInt32, lptime : SYSTEMTIME*, lpformat : LibC::LPWSTR, lptimestr : Char*, cchtime : Int32) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],dwflags : TIME_FORMAT_FLAGS [In],lptime : SYSTEMTIME* [In],lpformat : LibC::LPWSTR [In],lptimestr : Char* [In],cchtime : Int32 [In]
  fun GetTimeFormatEx(lplocalename : LibC::LPWSTR, dwflags : TIME_FORMAT_FLAGS, lptime : SYSTEMTIME*, lpformat : LibC::LPWSTR, lptimestr : Char*, cchtime : Int32) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],dwflags : ENUM_DATE_FORMATS_FLAGS [In],lpdate : SYSTEMTIME* [In],lpformat : LibC::LPWSTR [In],lpdatestr : Char* [In],cchdate : Int32 [In],lpcalendar : LibC::LPWSTR [In]
  fun GetDateFormatEx(lplocalename : LibC::LPWSTR, dwflags : ENUM_DATE_FORMATS_FLAGS, lpdate : SYSTEMTIME*, lpformat : LibC::LPWSTR, lpdatestr : Char*, cchdate : Int32, lpcalendar : LibC::LPWSTR) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],dwflags : UInt32 [In],lpduration : SYSTEMTIME* [In],ullduration : UInt64 [In],lpformat : LibC::LPWSTR [In],lpdurationstr : Char* [In],cchduration : Int32 [In]
  fun GetDurationFormatEx(lplocalename : LibC::LPWSTR, dwflags : UInt32, lpduration : SYSTEMTIME*, ullduration : UInt64, lpformat : LibC::LPWSTR, lpdurationstr : Char*, cchduration : Int32) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],dwcmpflags : COMPARE_STRING_FLAGS [In],lpstring1 : Char* [In],cchcount1 : Int32 [In],lpstring2 : Char* [In],cchcount2 : Int32 [In],lpversioninformation : NLSVERSIONINFO* [In],lpreserved : Void* [In],lparam : LPARAM [In]
  fun CompareStringEx(lplocalename : LibC::LPWSTR, dwcmpflags : COMPARE_STRING_FLAGS, lpstring1 : Char*, cchcount1 : Int32, lpstring2 : Char*, cchcount2 : Int32, lpversioninformation : NLSVERSIONINFO*, lpreserved : Void*, lparam : LPARAM) : Int32

  # Params # lpstring1 : Char* [In],cchcount1 : Int32 [In],lpstring2 : Char* [In],cchcount2 : Int32 [In],bignorecase : LibC::BOOL [In]
  fun CompareStringOrdinal(lpstring1 : Char*, cchcount1 : Int32, lpstring2 : Char*, cchcount2 : Int32, bignorecase : LibC::BOOL) : Int32

  # Params # locale : UInt32 [In],dwcmpflags : UInt32 [In],lpstring1 : Char* [In],cchcount1 : Int32 [In],lpstring2 : Char* [In],cchcount2 : Int32 [In]
  fun CompareStringW(locale : UInt32, dwcmpflags : UInt32, lpstring1 : Char*, cchcount1 : Int32, lpstring2 : Char*, cchcount2 : Int32) : Int32

  # Params # dwmapflags : FOLD_STRING_MAP_FLAGS [In],lpsrcstr : Char* [In],cchsrc : Int32 [In],lpdeststr : Char* [In],cchdest : Int32 [In]
  fun FoldStringW(dwmapflags : FOLD_STRING_MAP_FLAGS, lpsrcstr : Char*, cchsrc : Int32, lpdeststr : Char*, cchdest : Int32) : Int32

  # Params # locale : UInt32 [In],dwinfotype : UInt32 [In],lpsrcstr : Char* [In],cchsrc : Int32 [In],lpchartype : UInt16* [In]
  fun GetStringTypeExW(locale : UInt32, dwinfotype : UInt32, lpsrcstr : Char*, cchsrc : Int32, lpchartype : UInt16*) : LibC::BOOL

  # Params # dwinfotype : UInt32 [In],lpsrcstr : Char* [In],cchsrc : Int32 [In],lpchartype : UInt16* [In]
  fun GetStringTypeW(dwinfotype : UInt32, lpsrcstr : Char*, cchsrc : Int32, lpchartype : UInt16*) : LibC::BOOL

  # Params # codepage : UInt32 [In],dwflags : MULTI_BYTE_TO_WIDE_CHAR_FLAGS [In],lpmultibytestr : UInt8* [In],cbmultibyte : Int32 [In],lpwidecharstr : Char* [In],cchwidechar : Int32 [In]
  fun MultiByteToWideChar(codepage : UInt32, dwflags : MULTI_BYTE_TO_WIDE_CHAR_FLAGS, lpmultibytestr : UInt8*, cbmultibyte : Int32, lpwidecharstr : Char*, cchwidechar : Int32) : Int32

  # Params # codepage : UInt32 [In],dwflags : UInt32 [In],lpwidecharstr : Char* [In],cchwidechar : Int32 [In],lpmultibytestr : PSTR [In],cbmultibyte : Int32 [In],lpdefaultchar : PSTR [In],lpuseddefaultchar : Int32* [In]
  # Commented out because function is part of Lib C
  #fun WideCharToMultiByte(codepage : UInt32, dwflags : UInt32, lpwidecharstr : Char*, cchwidechar : Int32, lpmultibytestr : PSTR, cbmultibyte : Int32, lpdefaultchar : PSTR, lpuseddefaultchar : Int32*) : Int32

  # Params # codepage : UInt32 [In]
  # Commented out because function is part of Lib C
  #fun IsValidCodePage(codepage : UInt32) : LibC::BOOL

  # Params # 
  fun GetACP : UInt32

  # Params # 
  fun GetOEMCP : UInt32

  # Params # codepage : UInt32 [In],lpcpinfo : CPINFO* [In]
  fun GetCPInfo(codepage : UInt32, lpcpinfo : CPINFO*) : LibC::BOOL

  # Params # codepage : UInt32 [In],dwflags : UInt32 [In],lpcpinfoex : CPINFOEXA* [In]
  fun GetCPInfoExA(codepage : UInt32, dwflags : UInt32, lpcpinfoex : CPINFOEXA*) : LibC::BOOL

  # Params # codepage : UInt32 [In],dwflags : UInt32 [In],lpcpinfoex : CPINFOEXW* [In]
  fun GetCPInfoExW(codepage : UInt32, dwflags : UInt32, lpcpinfoex : CPINFOEXW*) : LibC::BOOL

  # Params # locale : UInt32 [In],dwcmpflags : UInt32 [In],lpstring1 : Int8* [In],cchcount1 : Int32 [In],lpstring2 : Int8* [In],cchcount2 : Int32 [In]
  fun CompareStringA(locale : UInt32, dwcmpflags : UInt32, lpstring1 : Int8*, cchcount1 : Int32, lpstring2 : Int8*, cchcount2 : Int32) : Int32

  # Params # locale : UInt32 [In],dwfindnlsstringflags : UInt32 [In],lpstringsource : Char* [In],cchsource : Int32 [In],lpstringvalue : Char* [In],cchvalue : Int32 [In],pcchfound : Int32* [In]
  fun FindNLSString(locale : UInt32, dwfindnlsstringflags : UInt32, lpstringsource : Char*, cchsource : Int32, lpstringvalue : Char*, cchvalue : Int32, pcchfound : Int32*) : Int32

  # Params # locale : UInt32 [In],dwmapflags : UInt32 [In],lpsrcstr : Char* [In],cchsrc : Int32 [In],lpdeststr : LibC::LPWSTR [In],cchdest : Int32 [In]
  fun LCMapStringW(locale : UInt32, dwmapflags : UInt32, lpsrcstr : Char*, cchsrc : Int32, lpdeststr : LibC::LPWSTR, cchdest : Int32) : Int32

  # Params # locale : UInt32 [In],dwmapflags : UInt32 [In],lpsrcstr : UInt8* [In],cchsrc : Int32 [In],lpdeststr : PSTR [In],cchdest : Int32 [In]
  fun LCMapStringA(locale : UInt32, dwmapflags : UInt32, lpsrcstr : UInt8*, cchsrc : Int32, lpdeststr : PSTR, cchdest : Int32) : Int32

  # Params # locale : UInt32 [In],lctype : UInt32 [In],lplcdata : Char* [In],cchdata : Int32 [In]
  fun GetLocaleInfoW(locale : UInt32, lctype : UInt32, lplcdata : Char*, cchdata : Int32) : Int32

  # Params # locale : UInt32 [In],lctype : UInt32 [In],lplcdata : UInt8* [In],cchdata : Int32 [In]
  fun GetLocaleInfoA(locale : UInt32, lctype : UInt32, lplcdata : UInt8*, cchdata : Int32) : Int32

  # Params # locale : UInt32 [In],lctype : UInt32 [In],lplcdata : PSTR [In]
  fun SetLocaleInfoA(locale : UInt32, lctype : UInt32, lplcdata : PSTR) : LibC::BOOL

  # Params # locale : UInt32 [In],lctype : UInt32 [In],lplcdata : LibC::LPWSTR [In]
  fun SetLocaleInfoW(locale : UInt32, lctype : UInt32, lplcdata : LibC::LPWSTR) : LibC::BOOL

  # Params # locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In],lpcaldata : UInt8* [In],cchdata : Int32 [In],lpvalue : UInt32* [In]
  fun GetCalendarInfoA(locale : UInt32, calendar : UInt32, caltype : UInt32, lpcaldata : UInt8*, cchdata : Int32, lpvalue : UInt32*) : Int32

  # Params # locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In],lpcaldata : Char* [In],cchdata : Int32 [In],lpvalue : UInt32* [In]
  fun GetCalendarInfoW(locale : UInt32, calendar : UInt32, caltype : UInt32, lpcaldata : Char*, cchdata : Int32, lpvalue : UInt32*) : Int32

  # Params # locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In],lpcaldata : PSTR [In]
  fun SetCalendarInfoA(locale : UInt32, calendar : UInt32, caltype : UInt32, lpcaldata : PSTR) : LibC::BOOL

  # Params # locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In],lpcaldata : LibC::LPWSTR [In]
  fun SetCalendarInfoW(locale : UInt32, calendar : UInt32, caltype : UInt32, lpcaldata : LibC::LPWSTR) : LibC::BOOL

  # Params # testchar : UInt8 [In]
  fun IsDBCSLeadByte(testchar : UInt8) : LibC::BOOL

  # Params # codepage : UInt32 [In],testchar : UInt8 [In]
  fun IsDBCSLeadByteEx(codepage : UInt32, testchar : UInt8) : LibC::BOOL

  # Params # lpname : LibC::LPWSTR [In],dwflags : UInt32 [In]
  fun LocaleNameToLCID(lpname : LibC::LPWSTR, dwflags : UInt32) : UInt32

  # Params # locale : UInt32 [In],lpname : Char* [In],cchname : Int32 [In],dwflags : UInt32 [In]
  fun LCIDToLocaleName(locale : UInt32, lpname : Char*, cchname : Int32, dwflags : UInt32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lpduration : SYSTEMTIME* [In],ullduration : UInt64 [In],lpformat : LibC::LPWSTR [In],lpdurationstr : Char* [In],cchduration : Int32 [In]
  fun GetDurationFormat(locale : UInt32, dwflags : UInt32, lpduration : SYSTEMTIME*, ullduration : UInt64, lpformat : LibC::LPWSTR, lpdurationstr : Char*, cchduration : Int32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lpvalue : PSTR [In],lpformat : NUMBERFMTA* [In],lpnumberstr : UInt8* [In],cchnumber : Int32 [In]
  fun GetNumberFormatA(locale : UInt32, dwflags : UInt32, lpvalue : PSTR, lpformat : NUMBERFMTA*, lpnumberstr : UInt8*, cchnumber : Int32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lpvalue : LibC::LPWSTR [In],lpformat : NUMBERFMTW* [In],lpnumberstr : Char* [In],cchnumber : Int32 [In]
  fun GetNumberFormatW(locale : UInt32, dwflags : UInt32, lpvalue : LibC::LPWSTR, lpformat : NUMBERFMTW*, lpnumberstr : Char*, cchnumber : Int32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lpvalue : PSTR [In],lpformat : CURRENCYFMTA* [In],lpcurrencystr : UInt8* [In],cchcurrency : Int32 [In]
  fun GetCurrencyFormatA(locale : UInt32, dwflags : UInt32, lpvalue : PSTR, lpformat : CURRENCYFMTA*, lpcurrencystr : UInt8*, cchcurrency : Int32) : Int32

  # Params # locale : UInt32 [In],dwflags : UInt32 [In],lpvalue : LibC::LPWSTR [In],lpformat : CURRENCYFMTW* [In],lpcurrencystr : Char* [In],cchcurrency : Int32 [In]
  fun GetCurrencyFormatW(locale : UInt32, dwflags : UInt32, lpvalue : LibC::LPWSTR, lpformat : CURRENCYFMTW*, lpcurrencystr : Char*, cchcurrency : Int32) : Int32

  # Params # lpcalinfoenumproc : CALINFO_ENUMPROCA [In],locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In]
  fun EnumCalendarInfoA(lpcalinfoenumproc : CALINFO_ENUMPROCA, locale : UInt32, calendar : UInt32, caltype : UInt32) : LibC::BOOL

  # Params # lpcalinfoenumproc : CALINFO_ENUMPROCW [In],locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In]
  fun EnumCalendarInfoW(lpcalinfoenumproc : CALINFO_ENUMPROCW, locale : UInt32, calendar : UInt32, caltype : UInt32) : LibC::BOOL

  # Params # lpcalinfoenumprocex : CALINFO_ENUMPROCEXA [In],locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In]
  fun EnumCalendarInfoExA(lpcalinfoenumprocex : CALINFO_ENUMPROCEXA, locale : UInt32, calendar : UInt32, caltype : UInt32) : LibC::BOOL

  # Params # lpcalinfoenumprocex : CALINFO_ENUMPROCEXW [In],locale : UInt32 [In],calendar : UInt32 [In],caltype : UInt32 [In]
  fun EnumCalendarInfoExW(lpcalinfoenumprocex : CALINFO_ENUMPROCEXW, locale : UInt32, calendar : UInt32, caltype : UInt32) : LibC::BOOL

  # Params # lptimefmtenumproc : TIMEFMT_ENUMPROCA [In],locale : UInt32 [In],dwflags : TIME_FORMAT_FLAGS [In]
  fun EnumTimeFormatsA(lptimefmtenumproc : TIMEFMT_ENUMPROCA, locale : UInt32, dwflags : TIME_FORMAT_FLAGS) : LibC::BOOL

  # Params # lptimefmtenumproc : TIMEFMT_ENUMPROCW [In],locale : UInt32 [In],dwflags : TIME_FORMAT_FLAGS [In]
  fun EnumTimeFormatsW(lptimefmtenumproc : TIMEFMT_ENUMPROCW, locale : UInt32, dwflags : TIME_FORMAT_FLAGS) : LibC::BOOL

  # Params # lpdatefmtenumproc : DATEFMT_ENUMPROCA [In],locale : UInt32 [In],dwflags : UInt32 [In]
  fun EnumDateFormatsA(lpdatefmtenumproc : DATEFMT_ENUMPROCA, locale : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # lpdatefmtenumproc : DATEFMT_ENUMPROCW [In],locale : UInt32 [In],dwflags : UInt32 [In]
  fun EnumDateFormatsW(lpdatefmtenumproc : DATEFMT_ENUMPROCW, locale : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # lpdatefmtenumprocex : DATEFMT_ENUMPROCEXA [In],locale : UInt32 [In],dwflags : UInt32 [In]
  fun EnumDateFormatsExA(lpdatefmtenumprocex : DATEFMT_ENUMPROCEXA, locale : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # lpdatefmtenumprocex : DATEFMT_ENUMPROCEXW [In],locale : UInt32 [In],dwflags : UInt32 [In]
  fun EnumDateFormatsExW(lpdatefmtenumprocex : DATEFMT_ENUMPROCEXW, locale : UInt32, dwflags : UInt32) : LibC::BOOL

  # Params # languagegroup : UInt32 [In],dwflags : ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS [In]
  fun IsValidLanguageGroup(languagegroup : UInt32, dwflags : ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS) : LibC::BOOL

  # Params # function : UInt32 [In],locale : UInt32 [In],lpversioninformation : NLSVERSIONINFO* [In]
  fun GetNLSVersion(function : UInt32, locale : UInt32, lpversioninformation : NLSVERSIONINFO*) : LibC::BOOL

  # Params # locale : UInt32 [In],dwflags : IS_VALID_LOCALE_FLAGS [In]
  fun IsValidLocale(locale : UInt32, dwflags : IS_VALID_LOCALE_FLAGS) : LibC::BOOL

  # Params # location : Int32 [In],geotype : UInt32 [In],lpgeodata : UInt8* [In],cchdata : Int32 [In],langid : UInt16 [In]
  fun GetGeoInfoA(location : Int32, geotype : UInt32, lpgeodata : UInt8*, cchdata : Int32, langid : UInt16) : Int32

  # Params # location : Int32 [In],geotype : UInt32 [In],lpgeodata : Char* [In],cchdata : Int32 [In],langid : UInt16 [In]
  fun GetGeoInfoW(location : Int32, geotype : UInt32, lpgeodata : Char*, cchdata : Int32, langid : UInt16) : Int32

  # Params # location : LibC::LPWSTR [In],geotype : UInt32 [In],geodata : Char* [In],geodatacount : Int32 [In]
  fun GetGeoInfoEx(location : LibC::LPWSTR, geotype : UInt32, geodata : Char*, geodatacount : Int32) : Int32

  # Params # geoclass : UInt32 [In],parentgeoid : Int32 [In],lpgeoenumproc : GEO_ENUMPROC [In]
  fun EnumSystemGeoID(geoclass : UInt32, parentgeoid : Int32, lpgeoenumproc : GEO_ENUMPROC) : LibC::BOOL

  # Params # geoclass : UInt32 [In],geoenumproc : GEO_ENUMNAMEPROC [In],data : LPARAM [In]
  fun EnumSystemGeoNames(geoclass : UInt32, geoenumproc : GEO_ENUMNAMEPROC, data : LPARAM) : LibC::BOOL

  # Params # geoclass : UInt32 [In]
  fun GetUserGeoID(geoclass : UInt32) : Int32

  # Params # geoname : Char* [In],geonamecount : Int32 [In]
  fun GetUserDefaultGeoName(geoname : Char*, geonamecount : Int32) : Int32

  # Params # geoid : Int32 [In]
  fun SetUserGeoID(geoid : Int32) : LibC::BOOL

  # Params # geoname : LibC::LPWSTR [In]
  fun SetUserGeoName(geoname : LibC::LPWSTR) : LibC::BOOL

  # Params # locale : UInt32 [In]
  fun ConvertDefaultLocale(locale : UInt32) : UInt32

  # Params # 
  fun GetSystemDefaultUILanguage : UInt16

  # Params # 
  fun GetThreadLocale : UInt32

  # Params # locale : UInt32 [In]
  fun SetThreadLocale(locale : UInt32) : LibC::BOOL

  # Params # 
  fun GetUserDefaultUILanguage : UInt16

  # Params # 
  fun GetUserDefaultLangID : UInt16

  # Params # 
  fun GetSystemDefaultLangID : UInt16

  # Params # 
  fun GetSystemDefaultLCID : UInt32

  # Params # 
  fun GetUserDefaultLCID : UInt32

  # Params # langid : UInt16 [In]
  fun SetThreadUILanguage(langid : UInt16) : UInt16

  # Params # 
  fun GetThreadUILanguage : UInt16

  # Params # dwflags : UInt32 [In],pulnumlanguages : UInt32* [In],pwszlanguagesbuffer : Char* [In],pcchlanguagesbuffer : UInt32* [In]
  fun GetProcessPreferredUILanguages(dwflags : UInt32, pulnumlanguages : UInt32*, pwszlanguagesbuffer : Char*, pcchlanguagesbuffer : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pwszlanguagesbuffer : LibC::LPWSTR [In],pulnumlanguages : UInt32* [In]
  fun SetProcessPreferredUILanguages(dwflags : UInt32, pwszlanguagesbuffer : LibC::LPWSTR, pulnumlanguages : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pulnumlanguages : UInt32* [In],pwszlanguagesbuffer : Char* [In],pcchlanguagesbuffer : UInt32* [In]
  fun GetUserPreferredUILanguages(dwflags : UInt32, pulnumlanguages : UInt32*, pwszlanguagesbuffer : Char*, pcchlanguagesbuffer : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pulnumlanguages : UInt32* [In],pwszlanguagesbuffer : Char* [In],pcchlanguagesbuffer : UInt32* [In]
  fun GetSystemPreferredUILanguages(dwflags : UInt32, pulnumlanguages : UInt32*, pwszlanguagesbuffer : Char*, pcchlanguagesbuffer : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pulnumlanguages : UInt32* [In],pwszlanguagesbuffer : Char* [In],pcchlanguagesbuffer : UInt32* [In]
  fun GetThreadPreferredUILanguages(dwflags : UInt32, pulnumlanguages : UInt32*, pwszlanguagesbuffer : Char*, pcchlanguagesbuffer : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pwszlanguagesbuffer : LibC::LPWSTR [In],pulnumlanguages : UInt32* [In]
  fun SetThreadPreferredUILanguages(dwflags : UInt32, pwszlanguagesbuffer : LibC::LPWSTR, pulnumlanguages : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pcwszfilepath : LibC::LPWSTR [In],pfilemuiinfo : FILEMUIINFO* [In],pcbfilemuiinfo : UInt32* [In]
  fun GetFileMUIInfo(dwflags : UInt32, pcwszfilepath : LibC::LPWSTR, pfilemuiinfo : FILEMUIINFO*, pcbfilemuiinfo : UInt32*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pcwszfilepath : LibC::LPWSTR [In],pwszlanguage : Char* [In],pcchlanguage : UInt32* [In],pwszfilemuipath : Char* [In],pcchfilemuipath : UInt32* [In],pululenumerator : UInt64* [In]
  fun GetFileMUIPath(dwflags : UInt32, pcwszfilepath : LibC::LPWSTR, pwszlanguage : Char*, pcchlanguage : UInt32*, pwszfilemuipath : Char*, pcchfilemuipath : UInt32*, pululenumerator : UInt64*) : LibC::BOOL

  # Params # dwflags : UInt32 [In],pwmszlanguage : LibC::LPWSTR [In],pwszfallbacklanguages : Char* [In],pcchfallbacklanguages : UInt32* [In],pattributes : UInt32* [In]
  fun GetUILanguageInfo(dwflags : UInt32, pwmszlanguage : LibC::LPWSTR, pwszfallbacklanguages : Char*, pcchfallbacklanguages : UInt32*, pattributes : UInt32*) : LibC::BOOL

  # Params # flags : UInt32 [In],languages : LibC::LPWSTR [In],numlanguagesset : UInt32* [In],snapshot : HSAVEDUILANGUAGES* [In]
  fun SetThreadPreferredUILanguages2(flags : UInt32, languages : LibC::LPWSTR, numlanguagesset : UInt32*, snapshot : HSAVEDUILANGUAGES*) : LibC::BOOL

  # Params # snapshot : HSAVEDUILANGUAGES [In]
  fun RestoreThreadPreferredUILanguages(snapshot : HSAVEDUILANGUAGES)

  # Params # dwflags : UInt32 [In],pcwstrnewlanguage : LibC::LPWSTR [In],pcwstrpreviouslanguage : LibC::LPWSTR [In],dwreserved : UInt32 [In],pdwstatusrtrn : UInt32* [In]
  fun NotifyUILanguageChange(dwflags : UInt32, pcwstrnewlanguage : LibC::LPWSTR, pcwstrpreviouslanguage : LibC::LPWSTR, dwreserved : UInt32, pdwstatusrtrn : UInt32*) : LibC::BOOL

  # Params # locale : UInt32 [In],dwinfotype : UInt32 [In],lpsrcstr : UInt8* [In],cchsrc : Int32 [In],lpchartype : UInt16* [In]
  fun GetStringTypeExA(locale : UInt32, dwinfotype : UInt32, lpsrcstr : UInt8*, cchsrc : Int32, lpchartype : UInt16*) : LibC::BOOL

  # Params # locale : UInt32 [In],dwinfotype : UInt32 [In],lpsrcstr : UInt8* [In],cchsrc : Int32 [In],lpchartype : UInt16* [In]
  fun GetStringTypeA(locale : UInt32, dwinfotype : UInt32, lpsrcstr : UInt8*, cchsrc : Int32, lpchartype : UInt16*) : LibC::BOOL

  # Params # dwmapflags : FOLD_STRING_MAP_FLAGS [In],lpsrcstr : UInt8* [In],cchsrc : Int32 [In],lpdeststr : UInt8* [In],cchdest : Int32 [In]
  fun FoldStringA(dwmapflags : FOLD_STRING_MAP_FLAGS, lpsrcstr : UInt8*, cchsrc : Int32, lpdeststr : UInt8*, cchdest : Int32) : Int32

  # Params # lplocaleenumproc : LOCALE_ENUMPROCA [In],dwflags : UInt32 [In]
  fun EnumSystemLocalesA(lplocaleenumproc : LOCALE_ENUMPROCA, dwflags : UInt32) : LibC::BOOL

  # Params # lplocaleenumproc : LOCALE_ENUMPROCW [In],dwflags : UInt32 [In]
  fun EnumSystemLocalesW(lplocaleenumproc : LOCALE_ENUMPROCW, dwflags : UInt32) : LibC::BOOL

  # Params # lplanguagegroupenumproc : LANGUAGEGROUP_ENUMPROCA [In],dwflags : ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS [In],lparam : LibC::IntPtrT [In]
  fun EnumSystemLanguageGroupsA(lplanguagegroupenumproc : LANGUAGEGROUP_ENUMPROCA, dwflags : ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS, lparam : LibC::IntPtrT) : LibC::BOOL

  # Params # lplanguagegroupenumproc : LANGUAGEGROUP_ENUMPROCW [In],dwflags : ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS [In],lparam : LibC::IntPtrT [In]
  fun EnumSystemLanguageGroupsW(lplanguagegroupenumproc : LANGUAGEGROUP_ENUMPROCW, dwflags : ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS, lparam : LibC::IntPtrT) : LibC::BOOL

  # Params # lplanggrouplocaleenumproc : LANGGROUPLOCALE_ENUMPROCA [In],languagegroup : UInt32 [In],dwflags : UInt32 [In],lparam : LibC::IntPtrT [In]
  fun EnumLanguageGroupLocalesA(lplanggrouplocaleenumproc : LANGGROUPLOCALE_ENUMPROCA, languagegroup : UInt32, dwflags : UInt32, lparam : LibC::IntPtrT) : LibC::BOOL

  # Params # lplanggrouplocaleenumproc : LANGGROUPLOCALE_ENUMPROCW [In],languagegroup : UInt32 [In],dwflags : UInt32 [In],lparam : LibC::IntPtrT [In]
  fun EnumLanguageGroupLocalesW(lplanggrouplocaleenumproc : LANGGROUPLOCALE_ENUMPROCW, languagegroup : UInt32, dwflags : UInt32, lparam : LibC::IntPtrT) : LibC::BOOL

  # Params # lpuilanguageenumproc : UILANGUAGE_ENUMPROCA [In],dwflags : UInt32 [In],lparam : LibC::IntPtrT [In]
  fun EnumUILanguagesA(lpuilanguageenumproc : UILANGUAGE_ENUMPROCA, dwflags : UInt32, lparam : LibC::IntPtrT) : LibC::BOOL

  # Params # lpuilanguageenumproc : UILANGUAGE_ENUMPROCW [In],dwflags : UInt32 [In],lparam : LibC::IntPtrT [In]
  fun EnumUILanguagesW(lpuilanguageenumproc : UILANGUAGE_ENUMPROCW, dwflags : UInt32, lparam : LibC::IntPtrT) : LibC::BOOL

  # Params # lpcodepageenumproc : CODEPAGE_ENUMPROCA [In],dwflags : ENUM_SYSTEM_CODE_PAGES_FLAGS [In]
  fun EnumSystemCodePagesA(lpcodepageenumproc : CODEPAGE_ENUMPROCA, dwflags : ENUM_SYSTEM_CODE_PAGES_FLAGS) : LibC::BOOL

  # Params # lpcodepageenumproc : CODEPAGE_ENUMPROCW [In],dwflags : ENUM_SYSTEM_CODE_PAGES_FLAGS [In]
  fun EnumSystemCodePagesW(lpcodepageenumproc : CODEPAGE_ENUMPROCW, dwflags : ENUM_SYSTEM_CODE_PAGES_FLAGS) : LibC::BOOL

  # Params # dwflags : UInt32 [In],lpunicodecharstr : Char* [In],cchunicodechar : Int32 [In],lpasciicharstr : Char* [In],cchasciichar : Int32 [In]
  fun IdnToAscii(dwflags : UInt32, lpunicodecharstr : Char*, cchunicodechar : Int32, lpasciicharstr : Char*, cchasciichar : Int32) : Int32

  # Params # dwflags : UInt32 [In],lpasciicharstr : Char* [In],cchasciichar : Int32 [In],lpunicodecharstr : Char* [In],cchunicodechar : Int32 [In]
  fun IdnToUnicode(dwflags : UInt32, lpasciicharstr : Char*, cchasciichar : Int32, lpunicodecharstr : Char*, cchunicodechar : Int32) : Int32

  # Params # dwflags : UInt32 [In],lpunicodecharstr : Char* [In],cchunicodechar : Int32 [In],lpnameprepcharstr : Char* [In],cchnameprepchar : Int32 [In]
  fun IdnToNameprepUnicode(dwflags : UInt32, lpunicodecharstr : Char*, cchunicodechar : Int32, lpnameprepcharstr : Char*, cchnameprepchar : Int32) : Int32

  # Params # normform : NORM_FORM [In],lpsrcstring : Char* [In],cwsrclength : Int32 [In],lpdststring : Char* [In],cwdstlength : Int32 [In]
  fun NormalizeString(normform : NORM_FORM, lpsrcstring : Char*, cwsrclength : Int32, lpdststring : Char*, cwdstlength : Int32) : Int32

  # Params # normform : NORM_FORM [In],lpstring : Char* [In],cwlength : Int32 [In]
  fun IsNormalizedString(normform : NORM_FORM, lpstring : Char*, cwlength : Int32) : LibC::BOOL

  # Params # dwflags : UInt32 [In],lplocalescripts : LibC::LPWSTR [In],cchlocalescripts : Int32 [In],lptestscripts : LibC::LPWSTR [In],cchtestscripts : Int32 [In]
  fun VerifyScripts(dwflags : UInt32, lplocalescripts : LibC::LPWSTR, cchlocalescripts : Int32, lptestscripts : LibC::LPWSTR, cchtestscripts : Int32) : LibC::BOOL

  # Params # dwflags : UInt32 [In],lpstring : LibC::LPWSTR [In],cchstring : Int32 [In],lpscripts : Char* [In],cchscripts : Int32 [In]
  fun GetStringScripts(dwflags : UInt32, lpstring : LibC::LPWSTR, cchstring : Int32, lpscripts : Char*, cchscripts : Int32) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],lctype : UInt32 [In],lplcdata : Char* [In],cchdata : Int32 [In]
  fun GetLocaleInfoEx(lplocalename : LibC::LPWSTR, lctype : UInt32, lplcdata : Char*, cchdata : Int32) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],calendar : UInt32 [In],lpreserved : LibC::LPWSTR [In],caltype : UInt32 [In],lpcaldata : Char* [In],cchdata : Int32 [In],lpvalue : UInt32* [In]
  fun GetCalendarInfoEx(lplocalename : LibC::LPWSTR, calendar : UInt32, lpreserved : LibC::LPWSTR, caltype : UInt32, lpcaldata : Char*, cchdata : Int32, lpvalue : UInt32*) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],dwflags : UInt32 [In],lpvalue : LibC::LPWSTR [In],lpformat : NUMBERFMTW* [In],lpnumberstr : Char* [In],cchnumber : Int32 [In]
  fun GetNumberFormatEx(lplocalename : LibC::LPWSTR, dwflags : UInt32, lpvalue : LibC::LPWSTR, lpformat : NUMBERFMTW*, lpnumberstr : Char*, cchnumber : Int32) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],dwflags : UInt32 [In],lpvalue : LibC::LPWSTR [In],lpformat : CURRENCYFMTW* [In],lpcurrencystr : Char* [In],cchcurrency : Int32 [In]
  fun GetCurrencyFormatEx(lplocalename : LibC::LPWSTR, dwflags : UInt32, lpvalue : LibC::LPWSTR, lpformat : CURRENCYFMTW*, lpcurrencystr : Char*, cchcurrency : Int32) : Int32

  # Params # lplocalename : Char* [In],cchlocalename : Int32 [In]
  fun GetUserDefaultLocaleName(lplocalename : Char*, cchlocalename : Int32) : Int32

  # Params # lplocalename : Char* [In],cchlocalename : Int32 [In]
  fun GetSystemDefaultLocaleName(lplocalename : Char*, cchlocalename : Int32) : Int32

  # Params # function : UInt32 [In],dwflags : UInt32 [In],lpversioninformation : NLSVERSIONINFO* [In],lpstring : Char* [In],cchstr : Int32 [In]
  fun IsNLSDefinedString(function : UInt32, dwflags : UInt32, lpversioninformation : NLSVERSIONINFO*, lpstring : Char*, cchstr : Int32) : LibC::BOOL

  # Params # function : UInt32 [In],lplocalename : LibC::LPWSTR [In],lpversioninformation : NLSVERSIONINFOEX* [In]
  fun GetNLSVersionEx(function : UInt32, lplocalename : LibC::LPWSTR, lpversioninformation : NLSVERSIONINFOEX*) : LibC::BOOL

  # Params # function : UInt32 [In],lplocalename : LibC::LPWSTR [In],lpversioninformation : NLSVERSIONINFOEX* [In]
  fun IsValidNLSVersion(function : UInt32, lplocalename : LibC::LPWSTR, lpversioninformation : NLSVERSIONINFOEX*) : UInt32

  # Params # lplocalename : LibC::LPWSTR [In],dwfindnlsstringflags : UInt32 [In],lpstringsource : Char* [In],cchsource : Int32 [In],lpstringvalue : Char* [In],cchvalue : Int32 [In],pcchfound : Int32* [In],lpversioninformation : NLSVERSIONINFO* [In],lpreserved : Void* [In],sorthandle : LPARAM [In]
  fun FindNLSStringEx(lplocalename : LibC::LPWSTR, dwfindnlsstringflags : UInt32, lpstringsource : Char*, cchsource : Int32, lpstringvalue : Char*, cchvalue : Int32, pcchfound : Int32*, lpversioninformation : NLSVERSIONINFO*, lpreserved : Void*, sorthandle : LPARAM) : Int32

  # Params # lplocalename : LibC::LPWSTR [In],dwmapflags : UInt32 [In],lpsrcstr : Char* [In],cchsrc : Int32 [In],lpdeststr : Char* [In],cchdest : Int32 [In],lpversioninformation : NLSVERSIONINFO* [In],lpreserved : Void* [In],sorthandle : LPARAM [In]
  fun LCMapStringEx(lplocalename : LibC::LPWSTR, dwmapflags : UInt32, lpsrcstr : Char*, cchsrc : Int32, lpdeststr : Char*, cchdest : Int32, lpversioninformation : NLSVERSIONINFO*, lpreserved : Void*, sorthandle : LPARAM) : Int32

  # Params # lplocalename : LibC::LPWSTR [In]
  fun IsValidLocaleName(lplocalename : LibC::LPWSTR) : LibC::BOOL

  # Params # pcalinfoenumprocexex : CALINFO_ENUMPROCEXEX [In],lplocalename : LibC::LPWSTR [In],calendar : UInt32 [In],lpreserved : LibC::LPWSTR [In],caltype : UInt32 [In],lparam : LPARAM [In]
  fun EnumCalendarInfoExEx(pcalinfoenumprocexex : CALINFO_ENUMPROCEXEX, lplocalename : LibC::LPWSTR, calendar : UInt32, lpreserved : LibC::LPWSTR, caltype : UInt32, lparam : LPARAM) : LibC::BOOL

  # Params # lpdatefmtenumprocexex : DATEFMT_ENUMPROCEXEX [In],lplocalename : LibC::LPWSTR [In],dwflags : ENUM_DATE_FORMATS_FLAGS [In],lparam : LPARAM [In]
  fun EnumDateFormatsExEx(lpdatefmtenumprocexex : DATEFMT_ENUMPROCEXEX, lplocalename : LibC::LPWSTR, dwflags : ENUM_DATE_FORMATS_FLAGS, lparam : LPARAM) : LibC::BOOL

  # Params # lptimefmtenumprocex : TIMEFMT_ENUMPROCEX [In],lplocalename : LibC::LPWSTR [In],dwflags : UInt32 [In],lparam : LPARAM [In]
  fun EnumTimeFormatsEx(lptimefmtenumprocex : TIMEFMT_ENUMPROCEX, lplocalename : LibC::LPWSTR, dwflags : UInt32, lparam : LPARAM) : LibC::BOOL

  # Params # lplocaleenumprocex : LOCALE_ENUMPROCEX [In],dwflags : UInt32 [In],lparam : LPARAM [In],lpreserved : Void* [In]
  fun EnumSystemLocalesEx(lplocaleenumprocex : LOCALE_ENUMPROCEX, dwflags : UInt32, lparam : LPARAM, lpreserved : Void*) : LibC::BOOL

  # Params # lpnametoresolve : LibC::LPWSTR [In],lplocalename : Char* [In],cchlocalename : Int32 [In]
  fun ResolveLocaleName(lpnametoresolve : LibC::LPWSTR, lplocalename : Char*, cchlocalename : Int32) : Int32

  # Params # poptions : MAPPING_ENUM_OPTIONS* [In],prgservices : MAPPING_SERVICE_INFO** [In],pdwservicescount : UInt32* [In]
  fun MappingGetServices(poptions : MAPPING_ENUM_OPTIONS*, prgservices : MAPPING_SERVICE_INFO**, pdwservicescount : UInt32*) : HRESULT

  # Params # pserviceinfo : MAPPING_SERVICE_INFO* [In]
  fun MappingFreeServices(pserviceinfo : MAPPING_SERVICE_INFO*) : HRESULT

  # Params # pserviceinfo : MAPPING_SERVICE_INFO* [In],psztext : Char* [In],dwlength : UInt32 [In],dwindex : UInt32 [In],poptions : MAPPING_OPTIONS* [In],pbag : MAPPING_PROPERTY_BAG* [In]
  fun MappingRecognizeText(pserviceinfo : MAPPING_SERVICE_INFO*, psztext : Char*, dwlength : UInt32, dwindex : UInt32, poptions : MAPPING_OPTIONS*, pbag : MAPPING_PROPERTY_BAG*) : HRESULT

  # Params # pbag : MAPPING_PROPERTY_BAG* [In],dwrangeindex : UInt32 [In],pszactionid : LibC::LPWSTR [In]
  fun MappingDoAction(pbag : MAPPING_PROPERTY_BAG*, dwrangeindex : UInt32, pszactionid : LibC::LPWSTR) : HRESULT

  # Params # pbag : MAPPING_PROPERTY_BAG* [In]
  fun MappingFreePropertyBag(pbag : MAPPING_PROPERTY_BAG*) : HRESULT

  # Params # psc : Void** [In]
  fun ScriptFreeCache(psc : Void**) : HRESULT

  # Params # pwcinchars : Char* [In],cinchars : Int32 [In],cmaxitems : Int32 [In],pscontrol : SCRIPT_CONTROL* [In],psstate : SCRIPT_STATE* [In],pitems : SCRIPT_ITEM* [In],pcitems : Int32* [In]
  fun ScriptItemize(pwcinchars : Char*, cinchars : Int32, cmaxitems : Int32, pscontrol : SCRIPT_CONTROL*, psstate : SCRIPT_STATE*, pitems : SCRIPT_ITEM*, pcitems : Int32*) : HRESULT

  # Params # cruns : Int32 [In],pblevel : UInt8* [In],pivisualtological : Int32* [In],pilogicaltovisual : Int32* [In]
  fun ScriptLayout(cruns : Int32, pblevel : UInt8*, pivisualtological : Int32*, pilogicaltovisual : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],pwcchars : Char* [In],cchars : Int32 [In],cmaxglyphs : Int32 [In],psa : SCRIPT_ANALYSIS* [In],pwoutglyphs : UInt16* [In],pwlogclust : UInt16* [In],psva : SCRIPT_VISATTR* [In],pcglyphs : Int32* [In]
  fun ScriptShape(hdc : HDC, psc : Void**, pwcchars : Char*, cchars : Int32, cmaxglyphs : Int32, psa : SCRIPT_ANALYSIS*, pwoutglyphs : UInt16*, pwlogclust : UInt16*, psva : SCRIPT_VISATTR*, pcglyphs : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],pwglyphs : UInt16* [In],cglyphs : Int32 [In],psva : SCRIPT_VISATTR* [In],psa : SCRIPT_ANALYSIS* [In],piadvance : Int32* [In],pgoffset : GOFFSET* [In],pabc : ABC* [In]
  fun ScriptPlace(hdc : HDC, psc : Void**, pwglyphs : UInt16*, cglyphs : Int32, psva : SCRIPT_VISATTR*, psa : SCRIPT_ANALYSIS*, piadvance : Int32*, pgoffset : GOFFSET*, pabc : ABC*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],x : Int32 [In],y : Int32 [In],fuoptions : UInt32 [In],lprc : RECT* [In],psa : SCRIPT_ANALYSIS* [In],pwcreserved : LibC::LPWSTR [In],ireserved : Int32 [In],pwglyphs : UInt16* [In],cglyphs : Int32 [In],piadvance : Int32* [In],pijustify : Int32* [In],pgoffset : GOFFSET* [In]
  fun ScriptTextOut(hdc : HDC, psc : Void**, x : Int32, y : Int32, fuoptions : UInt32, lprc : RECT*, psa : SCRIPT_ANALYSIS*, pwcreserved : LibC::LPWSTR, ireserved : Int32, pwglyphs : UInt16*, cglyphs : Int32, piadvance : Int32*, pijustify : Int32*, pgoffset : GOFFSET*) : HRESULT

  # Params # psva : SCRIPT_VISATTR* [In],piadvance : Int32* [In],cglyphs : Int32 [In],idx : Int32 [In],iminkashida : Int32 [In],pijustify : Int32* [In]
  fun ScriptJustify(psva : SCRIPT_VISATTR*, piadvance : Int32*, cglyphs : Int32, idx : Int32, iminkashida : Int32, pijustify : Int32*) : HRESULT

  # Params # pwcchars : Char* [In],cchars : Int32 [In],psa : SCRIPT_ANALYSIS* [In],psla : SCRIPT_LOGATTR* [In]
  fun ScriptBreak(pwcchars : Char*, cchars : Int32, psa : SCRIPT_ANALYSIS*, psla : SCRIPT_LOGATTR*) : HRESULT

  # Params # icp : Int32 [In],ftrailing : LibC::BOOL [In],cchars : Int32 [In],cglyphs : Int32 [In],pwlogclust : UInt16* [In],psva : SCRIPT_VISATTR* [In],piadvance : Int32* [In],psa : SCRIPT_ANALYSIS* [In],pix : Int32* [In]
  fun ScriptCPtoX(icp : Int32, ftrailing : LibC::BOOL, cchars : Int32, cglyphs : Int32, pwlogclust : UInt16*, psva : SCRIPT_VISATTR*, piadvance : Int32*, psa : SCRIPT_ANALYSIS*, pix : Int32*) : HRESULT

  # Params # ix : Int32 [In],cchars : Int32 [In],cglyphs : Int32 [In],pwlogclust : UInt16* [In],psva : SCRIPT_VISATTR* [In],piadvance : Int32* [In],psa : SCRIPT_ANALYSIS* [In],picp : Int32* [In],pitrailing : Int32* [In]
  fun ScriptXtoCP(ix : Int32, cchars : Int32, cglyphs : Int32, pwlogclust : UInt16*, psva : SCRIPT_VISATTR*, piadvance : Int32*, psa : SCRIPT_ANALYSIS*, picp : Int32*, pitrailing : Int32*) : HRESULT

  # Params # psa : SCRIPT_ANALYSIS* [In],cchars : Int32 [In],cglyphs : Int32 [In],piglyphwidth : Int32* [In],pwlogclust : UInt16* [In],psva : SCRIPT_VISATTR* [In],pidx : Int32* [In]
  fun ScriptGetLogicalWidths(psa : SCRIPT_ANALYSIS*, cchars : Int32, cglyphs : Int32, piglyphwidth : Int32*, pwlogclust : UInt16*, psva : SCRIPT_VISATTR*, pidx : Int32*) : HRESULT

  # Params # pidx : Int32* [In],cchars : Int32 [In],cglyphs : Int32 [In],pwlogclust : UInt16* [In],psva : SCRIPT_VISATTR* [In],piadvance : Int32* [In],psa : SCRIPT_ANALYSIS* [In],pabc : ABC* [In],pijustify : Int32* [In]
  fun ScriptApplyLogicalWidth(pidx : Int32*, cchars : Int32, cglyphs : Int32, pwlogclust : UInt16*, psva : SCRIPT_VISATTR*, piadvance : Int32*, psa : SCRIPT_ANALYSIS*, pabc : ABC*, pijustify : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],pwcinchars : Char* [In],cchars : Int32 [In],dwflags : UInt32 [In],pwoutglyphs : UInt16* [In]
  fun ScriptGetCMap(hdc : HDC, psc : Void**, pwcinchars : Char*, cchars : Int32, dwflags : UInt32, pwoutglyphs : UInt16*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],wglyph : UInt16 [In],pabc : ABC* [In]
  fun ScriptGetGlyphABCWidth(hdc : HDC, psc : Void**, wglyph : UInt16, pabc : ABC*) : HRESULT

  # Params # ppsp : SCRIPT_PROPERTIES*** [In],pinumscripts : Int32* [In]
  fun ScriptGetProperties(ppsp : SCRIPT_PROPERTIES***, pinumscripts : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],sfp : SCRIPT_FONTPROPERTIES* [In]
  fun ScriptGetFontProperties(hdc : HDC, psc : Void**, sfp : SCRIPT_FONTPROPERTIES*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],tmheight : Int32* [In]
  fun ScriptCacheGetHeight(hdc : HDC, psc : Void**, tmheight : Int32*) : HRESULT

  # Params # hdc : HDC [In],pstring : Void* [In],cstring : Int32 [In],cglyphs : Int32 [In],icharset : Int32 [In],dwflags : UInt32 [In],ireqwidth : Int32 [In],pscontrol : SCRIPT_CONTROL* [In],psstate : SCRIPT_STATE* [In],pidx : Int32* [In],ptabdef : SCRIPT_TABDEF* [In],pbinclass : UInt8* [In],pssa : Void** [In]
  fun ScriptStringAnalyse(hdc : HDC, pstring : Void*, cstring : Int32, cglyphs : Int32, icharset : Int32, dwflags : UInt32, ireqwidth : Int32, pscontrol : SCRIPT_CONTROL*, psstate : SCRIPT_STATE*, pidx : Int32*, ptabdef : SCRIPT_TABDEF*, pbinclass : UInt8*, pssa : Void**) : HRESULT

  # Params # pssa : Void** [In]
  fun ScriptStringFree(pssa : Void**) : HRESULT

  # Params # ssa : Void* [In]
  fun ScriptString_pSize(ssa : Void*) : SIZE*

  # Params # ssa : Void* [In]
  fun ScriptString_pcOutChars(ssa : Void*) : Int32*

  # Params # ssa : Void* [In]
  fun ScriptString_pLogAttr(ssa : Void*) : SCRIPT_LOGATTR*

  # Params # ssa : Void* [In],puorder : UInt32* [In]
  fun ScriptStringGetOrder(ssa : Void*, puorder : UInt32*) : HRESULT

  # Params # ssa : Void* [In],icp : Int32 [In],ftrailing : LibC::BOOL [In],px : Int32* [In]
  fun ScriptStringCPtoX(ssa : Void*, icp : Int32, ftrailing : LibC::BOOL, px : Int32*) : HRESULT

  # Params # ssa : Void* [In],ix : Int32 [In],pich : Int32* [In],pitrailing : Int32* [In]
  fun ScriptStringXtoCP(ssa : Void*, ix : Int32, pich : Int32*, pitrailing : Int32*) : HRESULT

  # Params # ssa : Void* [In],pidx : Int32* [In]
  fun ScriptStringGetLogicalWidths(ssa : Void*, pidx : Int32*) : HRESULT

  # Params # ssa : Void* [In]
  fun ScriptStringValidate(ssa : Void*) : HRESULT

  # Params # ssa : Void* [In],ix : Int32 [In],iy : Int32 [In],uoptions : ETO_OPTIONS [In],prc : RECT* [In],iminsel : Int32 [In],imaxsel : Int32 [In],fdisabled : LibC::BOOL [In]
  fun ScriptStringOut(ssa : Void*, ix : Int32, iy : Int32, uoptions : ETO_OPTIONS, prc : RECT*, iminsel : Int32, imaxsel : Int32, fdisabled : LibC::BOOL) : HRESULT

  # Params # pwcinchars : Char* [In],cinchars : Int32 [In],dwflags : SCRIPT_IS_COMPLEX_FLAGS [In]
  fun ScriptIsComplex(pwcinchars : Char*, cinchars : Int32, dwflags : SCRIPT_IS_COMPLEX_FLAGS) : HRESULT

  # Params # locale : UInt32 [In],psds : SCRIPT_DIGITSUBSTITUTE* [In]
  fun ScriptRecordDigitSubstitution(locale : UInt32, psds : SCRIPT_DIGITSUBSTITUTE*) : HRESULT

  # Params # psds : SCRIPT_DIGITSUBSTITUTE* [In],psc : SCRIPT_CONTROL* [In],pss : SCRIPT_STATE* [In]
  fun ScriptApplyDigitSubstitution(psds : SCRIPT_DIGITSUBSTITUTE*, psc : SCRIPT_CONTROL*, pss : SCRIPT_STATE*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],tagscript : UInt32 [In],taglangsys : UInt32 [In],rcrangechars : Int32* [In],rprangeproperties : Textrange_properties** [In],cranges : Int32 [In],pwcchars : Char* [In],cchars : Int32 [In],cmaxglyphs : Int32 [In],pwlogclust : UInt16* [In],pcharprops : Script_charprop* [In],pwoutglyphs : UInt16* [In],poutglyphprops : Script_glyphprop* [In],pcglyphs : Int32* [In]
  fun ScriptShapeOpenType(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, tagscript : UInt32, taglangsys : UInt32, rcrangechars : Int32*, rprangeproperties : Textrange_properties**, cranges : Int32, pwcchars : Char*, cchars : Int32, cmaxglyphs : Int32, pwlogclust : UInt16*, pcharprops : Script_charprop*, pwoutglyphs : UInt16*, poutglyphprops : Script_glyphprop*, pcglyphs : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],tagscript : UInt32 [In],taglangsys : UInt32 [In],rcrangechars : Int32* [In],rprangeproperties : Textrange_properties** [In],cranges : Int32 [In],pwcchars : Char* [In],pwlogclust : UInt16* [In],pcharprops : Script_charprop* [In],cchars : Int32 [In],pwglyphs : UInt16* [In],pglyphprops : Script_glyphprop* [In],cglyphs : Int32 [In],piadvance : Int32* [In],pgoffset : GOFFSET* [In],pabc : ABC* [In]
  fun ScriptPlaceOpenType(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, tagscript : UInt32, taglangsys : UInt32, rcrangechars : Int32*, rprangeproperties : Textrange_properties**, cranges : Int32, pwcchars : Char*, pwlogclust : UInt16*, pcharprops : Script_charprop*, cchars : Int32, pwglyphs : UInt16*, pglyphprops : Script_glyphprop*, cglyphs : Int32, piadvance : Int32*, pgoffset : GOFFSET*, pabc : ABC*) : HRESULT

  # Params # pwcinchars : Char* [In],cinchars : Int32 [In],cmaxitems : Int32 [In],pscontrol : SCRIPT_CONTROL* [In],psstate : SCRIPT_STATE* [In],pitems : SCRIPT_ITEM* [In],pscripttags : UInt32* [In],pcitems : Int32* [In]
  fun ScriptItemizeOpenType(pwcinchars : Char*, cinchars : Int32, cmaxitems : Int32, pscontrol : SCRIPT_CONTROL*, psstate : SCRIPT_STATE*, pitems : SCRIPT_ITEM*, pscripttags : UInt32*, pcitems : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],cmaxtags : Int32 [In],pscripttags : UInt32* [In],pctags : Int32* [In]
  fun ScriptGetFontScriptTags(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, cmaxtags : Int32, pscripttags : UInt32*, pctags : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],tagscript : UInt32 [In],cmaxtags : Int32 [In],plangsystags : UInt32* [In],pctags : Int32* [In]
  fun ScriptGetFontLanguageTags(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, tagscript : UInt32, cmaxtags : Int32, plangsystags : UInt32*, pctags : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],tagscript : UInt32 [In],taglangsys : UInt32 [In],cmaxtags : Int32 [In],pfeaturetags : UInt32* [In],pctags : Int32* [In]
  fun ScriptGetFontFeatureTags(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, tagscript : UInt32, taglangsys : UInt32, cmaxtags : Int32, pfeaturetags : UInt32*, pctags : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],tagscript : UInt32 [In],taglangsys : UInt32 [In],tagfeature : UInt32 [In],wglyphid : UInt16 [In],cmaxalternates : Int32 [In],palternateglyphs : UInt16* [In],pcalternates : Int32* [In]
  fun ScriptGetFontAlternateGlyphs(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, tagscript : UInt32, taglangsys : UInt32, tagfeature : UInt32, wglyphid : UInt16, cmaxalternates : Int32, palternateglyphs : UInt16*, pcalternates : Int32*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],tagscript : UInt32 [In],taglangsys : UInt32 [In],tagfeature : UInt32 [In],lparameter : Int32 [In],wglyphid : UInt16 [In],pwoutglyphid : UInt16* [In]
  fun ScriptSubstituteSingleGlyph(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, tagscript : UInt32, taglangsys : UInt32, tagfeature : UInt32, lparameter : Int32, wglyphid : UInt16, pwoutglyphid : UInt16*) : HRESULT

  # Params # hdc : HDC [In],psc : Void** [In],psa : SCRIPT_ANALYSIS* [In],tagscript : UInt32 [In],taglangsys : UInt32 [In],tagfeature : UInt32 [In],lparameter : Int32 [In],wglyphid : UInt16 [In],iadvance : Int32 [In],goffset : GOFFSET [In],pioutadvance : Int32* [In],poutgoffset : GOFFSET* [In]
  fun ScriptPositionSingleGlyph(hdc : HDC, psc : Void**, psa : SCRIPT_ANALYSIS*, tagscript : UInt32, taglangsys : UInt32, tagfeature : UInt32, lparameter : Int32, wglyphid : UInt16, iadvance : Int32, goffset : GOFFSET, pioutadvance : Int32*, poutgoffset : GOFFSET*) : HRESULT

  # Params # s : UInt8* [In],pi : Int32* [In],length : Int32 [In],c : Int32 [In],strict : Int8 [In]
  fun utf8_nextCharSafeBody(s : UInt8*, pi : Int32*, length : Int32, c : Int32, strict : Int8) : Int32

  # Params # s : UInt8* [In],i : Int32 [In],length : Int32 [In],c : Int32 [In],piserror : Int8* [In]
  fun utf8_appendCharSafeBody(s : UInt8*, i : Int32, length : Int32, c : Int32, piserror : Int8*) : Int32

  # Params # s : UInt8* [In],start : Int32 [In],pi : Int32* [In],c : Int32 [In],strict : Int8 [In]
  fun utf8_prevCharSafeBody(s : UInt8*, start : Int32, pi : Int32*, c : Int32, strict : Int8) : Int32

  # Params # s : UInt8* [In],start : Int32 [In],i : Int32 [In]
  fun utf8_back1SafeBody(s : UInt8*, start : Int32, i : Int32) : Int32

  # Params # versionarray : UInt8* [In],versionstring : PSTR [In]
  fun u_versionFromString(versionarray : UInt8*, versionstring : PSTR)

  # Params # versionarray : UInt8* [In],versionstring : UInt16* [In]
  fun u_versionFromUString(versionarray : UInt8*, versionstring : UInt16*)

  # Params # versionarray : UInt8* [In],versionstring : PSTR [In]
  fun u_versionToString(versionarray : UInt8*, versionstring : PSTR)

  # Params # versionarray : UInt8* [In]
  fun u_getVersion(versionarray : UInt8*)

  # Params # code : UErrorCode [In]
  fun u_errorName(code : UErrorCode) : PSTR

  # Params # tracelevel : Int32 [In]
  fun utrace_setLevel(tracelevel : Int32)

  # Params # 
  fun utrace_getLevel : Int32

  # Params # context : Void* [In],e : UTraceEntry [In],x : UTraceExit [In],d : UTraceData [In]
  fun utrace_setFunctions(context : Void*, e : UTraceEntry, x : UTraceExit, d : UTraceData)

  # Params # context : Void** [In],e : UTraceEntry* [In],x : UTraceExit* [In],d : UTraceData* [In]
  fun utrace_getFunctions(context : Void**, e : UTraceEntry*, x : UTraceExit*, d : UTraceData*)

  # Params # outbuf : PSTR [In],capacity : Int32 [In],indent : Int32 [In],fmt : PSTR [In],args : Int8* [In]
  fun utrace_vformat(outbuf : PSTR, capacity : Int32, indent : Int32, fmt : PSTR, args : Int8*) : Int32

  # Params # outbuf : PSTR [In],capacity : Int32 [In],indent : Int32 [In],fmt : PSTR [In]
  fun utrace_format(outbuf : PSTR, capacity : Int32, indent : Int32, fmt : PSTR) : Int32

  # Params # fnnumber : Int32 [In]
  fun utrace_functionName(fnnumber : Int32) : PSTR

  # Params # source : UInt16* [In],sourcelength : Int32 [In],dest : UInt16* [In],destsize : Int32 [In],options : UInt32 [In],perrorcode : UErrorCode* [In]
  fun u_shapeArabic(source : UInt16*, sourcelength : Int32, dest : UInt16*, destsize : Int32, options : UInt32, perrorcode : UErrorCode*) : Int32

  # Params # nameorabbrorlocale : PSTR [In],fillin : UScriptCode* [In],capacity : Int32 [In],err : UErrorCode* [In]
  fun uscript_getCode(nameorabbrorlocale : PSTR, fillin : UScriptCode*, capacity : Int32, err : UErrorCode*) : Int32

  # Params # scriptcode : UScriptCode [In]
  fun uscript_getName(scriptcode : UScriptCode) : PSTR

  # Params # scriptcode : UScriptCode [In]
  fun uscript_getShortName(scriptcode : UScriptCode) : PSTR

  # Params # codepoint : Int32 [In],err : UErrorCode* [In]
  fun uscript_getScript(codepoint : Int32, err : UErrorCode*) : UScriptCode

  # Params # c : Int32 [In],sc : UScriptCode [In]
  fun uscript_hasScript(c : Int32, sc : UScriptCode) : Int8

  # Params # c : Int32 [In],scripts : UScriptCode* [In],capacity : Int32 [In],errorcode : UErrorCode* [In]
  fun uscript_getScriptExtensions(c : Int32, scripts : UScriptCode*, capacity : Int32, errorcode : UErrorCode*) : Int32

  # Params # script : UScriptCode [In],dest : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun uscript_getSampleString(script : UScriptCode, dest : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # script : UScriptCode [In]
  fun uscript_getUsage(script : UScriptCode) : UScriptUsage

  # Params # script : UScriptCode [In]
  fun uscript_isRightToLeft(script : UScriptCode) : Int8

  # Params # script : UScriptCode [In]
  fun uscript_breaksBetweenLetters(script : UScriptCode) : Int8

  # Params # script : UScriptCode [In]
  fun uscript_isCased(script : UScriptCode) : Int8

  # Params # iter : UCharIterator* [In]
  fun uiter_current32(iter : UCharIterator*) : Int32

  # Params # iter : UCharIterator* [In]
  fun uiter_next32(iter : UCharIterator*) : Int32

  # Params # iter : UCharIterator* [In]
  fun uiter_previous32(iter : UCharIterator*) : Int32

  # Params # iter : UCharIterator* [In]
  fun uiter_getState(iter : UCharIterator*) : UInt32

  # Params # iter : UCharIterator* [In],state : UInt32 [In],perrorcode : UErrorCode* [In]
  fun uiter_setState(iter : UCharIterator*, state : UInt32, perrorcode : UErrorCode*)

  # Params # iter : UCharIterator* [In],s : UInt16* [In],length : Int32 [In]
  fun uiter_setString(iter : UCharIterator*, s : UInt16*, length : Int32)

  # Params # iter : UCharIterator* [In],s : PSTR [In],length : Int32 [In]
  fun uiter_setUTF16BE(iter : UCharIterator*, s : PSTR, length : Int32)

  # Params # iter : UCharIterator* [In],s : PSTR [In],length : Int32 [In]
  fun uiter_setUTF8(iter : UCharIterator*, s : PSTR, length : Int32)

  # Params # en : UEnumeration* [In]
  fun uenum_close(en : UEnumeration*)

  # Params # en : UEnumeration* [In],status : UErrorCode* [In]
  fun uenum_count(en : UEnumeration*, status : UErrorCode*) : Int32

  # Params # en : UEnumeration* [In],resultlength : Int32* [In],status : UErrorCode* [In]
  fun uenum_unext(en : UEnumeration*, resultlength : Int32*, status : UErrorCode*) : UInt16*

  # Params # en : UEnumeration* [In],resultlength : Int32* [In],status : UErrorCode* [In]
  fun uenum_next(en : UEnumeration*, resultlength : Int32*, status : UErrorCode*) : PSTR

  # Params # en : UEnumeration* [In],status : UErrorCode* [In]
  fun uenum_reset(en : UEnumeration*, status : UErrorCode*)

  # Params # strings : UInt16** [In],count : Int32 [In],ec : UErrorCode* [In]
  fun uenum_openUCharStringsEnumeration(strings : UInt16**, count : Int32, ec : UErrorCode*) : UEnumeration*

  # Params # strings : Int8** [In],count : Int32 [In],ec : UErrorCode* [In]
  fun uenum_openCharStringsEnumeration(strings : Int8**, count : Int32, ec : UErrorCode*) : UEnumeration*

  # Params # 
  fun uloc_getDefault : PSTR

  # Params # localeid : PSTR [In],status : UErrorCode* [In]
  fun uloc_setDefault(localeid : PSTR, status : UErrorCode*)

  # Params # localeid : PSTR [In],language : PSTR [In],languagecapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_getLanguage(localeid : PSTR, language : PSTR, languagecapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],script : PSTR [In],scriptcapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_getScript(localeid : PSTR, script : PSTR, scriptcapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],country : PSTR [In],countrycapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_getCountry(localeid : PSTR, country : PSTR, countrycapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],variant : PSTR [In],variantcapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_getVariant(localeid : PSTR, variant : PSTR, variantcapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],name : PSTR [In],namecapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_getName(localeid : PSTR, name : PSTR, namecapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],name : PSTR [In],namecapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_canonicalize(localeid : PSTR, name : PSTR, namecapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In]
  fun uloc_getISO3Language(localeid : PSTR) : PSTR

  # Params # localeid : PSTR [In]
  fun uloc_getISO3Country(localeid : PSTR) : PSTR

  # Params # localeid : PSTR [In]
  fun uloc_getLCID(localeid : PSTR) : UInt32

  # Params # locale : PSTR [In],displaylocale : PSTR [In],language : UInt16* [In],languagecapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getDisplayLanguage(locale : PSTR, displaylocale : PSTR, language : UInt16*, languagecapacity : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],displaylocale : PSTR [In],script : UInt16* [In],scriptcapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getDisplayScript(locale : PSTR, displaylocale : PSTR, script : UInt16*, scriptcapacity : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],displaylocale : PSTR [In],country : UInt16* [In],countrycapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getDisplayCountry(locale : PSTR, displaylocale : PSTR, country : UInt16*, countrycapacity : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],displaylocale : PSTR [In],variant : UInt16* [In],variantcapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getDisplayVariant(locale : PSTR, displaylocale : PSTR, variant : UInt16*, variantcapacity : Int32, status : UErrorCode*) : Int32

  # Params # keyword : PSTR [In],displaylocale : PSTR [In],dest : UInt16* [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getDisplayKeyword(keyword : PSTR, displaylocale : PSTR, dest : UInt16*, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],keyword : PSTR [In],displaylocale : PSTR [In],dest : UInt16* [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getDisplayKeywordValue(locale : PSTR, keyword : PSTR, displaylocale : PSTR, dest : UInt16*, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],inlocaleid : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],err : UErrorCode* [In]
  fun uloc_getDisplayName(localeid : PSTR, inlocaleid : PSTR, result : UInt16*, maxresultsize : Int32, err : UErrorCode*) : Int32

  # Params # n : Int32 [In]
  fun uloc_getAvailable(n : Int32) : PSTR

  # Params # 
  fun uloc_countAvailable : Int32

  # Params # type : ULocAvailableType [In],status : UErrorCode* [In]
  fun uloc_openAvailableByType(type : ULocAvailableType, status : UErrorCode*) : UEnumeration*

  # Params # 
  fun uloc_getISOLanguages : Int8**

  # Params # 
  fun uloc_getISOCountries : Int8**

  # Params # localeid : PSTR [In],parent : PSTR [In],parentcapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_getParent(localeid : PSTR, parent : PSTR, parentcapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],name : PSTR [In],namecapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_getBaseName(localeid : PSTR, name : PSTR, namecapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],status : UErrorCode* [In]
  fun uloc_openKeywords(localeid : PSTR, status : UErrorCode*) : UEnumeration*

  # Params # localeid : PSTR [In],keywordname : PSTR [In],buffer : PSTR [In],buffercapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getKeywordValue(localeid : PSTR, keywordname : PSTR, buffer : PSTR, buffercapacity : Int32, status : UErrorCode*) : Int32

  # Params # keywordname : PSTR [In],keywordvalue : PSTR [In],buffer : PSTR [In],buffercapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_setKeywordValue(keywordname : PSTR, keywordvalue : PSTR, buffer : PSTR, buffercapacity : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In]
  fun uloc_isRightToLeft(locale : PSTR) : Int8

  # Params # localeid : PSTR [In],status : UErrorCode* [In]
  fun uloc_getCharacterOrientation(localeid : PSTR, status : UErrorCode*) : ULayoutType

  # Params # localeid : PSTR [In],status : UErrorCode* [In]
  fun uloc_getLineOrientation(localeid : PSTR, status : UErrorCode*) : ULayoutType

  # Params # result : PSTR [In],resultavailable : Int32 [In],outresult : UAcceptResult* [In],httpacceptlanguage : PSTR [In],availablelocales : UEnumeration* [In],status : UErrorCode* [In]
  fun uloc_acceptLanguageFromHTTP(result : PSTR, resultavailable : Int32, outresult : UAcceptResult*, httpacceptlanguage : PSTR, availablelocales : UEnumeration*, status : UErrorCode*) : Int32

  # Params # result : PSTR [In],resultavailable : Int32 [In],outresult : UAcceptResult* [In],acceptlist : Int8** [In],acceptlistcount : Int32 [In],availablelocales : UEnumeration* [In],status : UErrorCode* [In]
  fun uloc_acceptLanguage(result : PSTR, resultavailable : Int32, outresult : UAcceptResult*, acceptlist : Int8**, acceptlistcount : Int32, availablelocales : UEnumeration*, status : UErrorCode*) : Int32

  # Params # hostid : UInt32 [In],locale : PSTR [In],localecapacity : Int32 [In],status : UErrorCode* [In]
  fun uloc_getLocaleForLCID(hostid : UInt32, locale : PSTR, localecapacity : Int32, status : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],maximizedlocaleid : PSTR [In],maximizedlocaleidcapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_addLikelySubtags(localeid : PSTR, maximizedlocaleid : PSTR, maximizedlocaleidcapacity : Int32, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],minimizedlocaleid : PSTR [In],minimizedlocaleidcapacity : Int32 [In],err : UErrorCode* [In]
  fun uloc_minimizeSubtags(localeid : PSTR, minimizedlocaleid : PSTR, minimizedlocaleidcapacity : Int32, err : UErrorCode*) : Int32

  # Params # langtag : PSTR [In],localeid : PSTR [In],localeidcapacity : Int32 [In],parsedlength : Int32* [In],err : UErrorCode* [In]
  fun uloc_forLanguageTag(langtag : PSTR, localeid : PSTR, localeidcapacity : Int32, parsedlength : Int32*, err : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],langtag : PSTR [In],langtagcapacity : Int32 [In],strict : Int8 [In],err : UErrorCode* [In]
  fun uloc_toLanguageTag(localeid : PSTR, langtag : PSTR, langtagcapacity : Int32, strict : Int8, err : UErrorCode*) : Int32

  # Params # keyword : PSTR [In]
  fun uloc_toUnicodeLocaleKey(keyword : PSTR) : PSTR

  # Params # keyword : PSTR [In],value : PSTR [In]
  fun uloc_toUnicodeLocaleType(keyword : PSTR, value : PSTR) : PSTR

  # Params # keyword : PSTR [In]
  fun uloc_toLegacyKey(keyword : PSTR) : PSTR

  # Params # keyword : PSTR [In],value : PSTR [In]
  fun uloc_toLegacyType(keyword : PSTR, value : PSTR) : PSTR

  # Params # packagename : PSTR [In],locale : PSTR [In],status : UErrorCode* [In]
  fun ures_open(packagename : PSTR, locale : PSTR, status : UErrorCode*) : UResourceBundle*

  # Params # packagename : PSTR [In],locale : PSTR [In],status : UErrorCode* [In]
  fun ures_openDirect(packagename : PSTR, locale : PSTR, status : UErrorCode*) : UResourceBundle*

  # Params # packagename : UInt16* [In],locale : PSTR [In],status : UErrorCode* [In]
  fun ures_openU(packagename : UInt16*, locale : PSTR, status : UErrorCode*) : UResourceBundle*

  # Params # resourcebundle : UResourceBundle* [In]
  fun ures_close(resourcebundle : UResourceBundle*)

  # Params # resb : UResourceBundle* [In],versioninfo : UInt8* [In]
  fun ures_getVersion(resb : UResourceBundle*, versioninfo : UInt8*)

  # Params # resourcebundle : UResourceBundle* [In],type : ULocDataLocaleType [In],status : UErrorCode* [In]
  fun ures_getLocaleByType(resourcebundle : UResourceBundle*, type : ULocDataLocaleType, status : UErrorCode*) : PSTR

  # Params # resourcebundle : UResourceBundle* [In],len : Int32* [In],status : UErrorCode* [In]
  fun ures_getString(resourcebundle : UResourceBundle*, len : Int32*, status : UErrorCode*) : UInt16*

  # Params # resb : UResourceBundle* [In],dest : PSTR [In],length : Int32* [In],forcecopy : Int8 [In],status : UErrorCode* [In]
  fun ures_getUTF8String(resb : UResourceBundle*, dest : PSTR, length : Int32*, forcecopy : Int8, status : UErrorCode*) : PSTR

  # Params # resourcebundle : UResourceBundle* [In],len : Int32* [In],status : UErrorCode* [In]
  fun ures_getBinary(resourcebundle : UResourceBundle*, len : Int32*, status : UErrorCode*) : UInt8*

  # Params # resourcebundle : UResourceBundle* [In],len : Int32* [In],status : UErrorCode* [In]
  fun ures_getIntVector(resourcebundle : UResourceBundle*, len : Int32*, status : UErrorCode*) : Int32*

  # Params # resourcebundle : UResourceBundle* [In],status : UErrorCode* [In]
  fun ures_getUInt(resourcebundle : UResourceBundle*, status : UErrorCode*) : UInt32

  # Params # resourcebundle : UResourceBundle* [In],status : UErrorCode* [In]
  fun ures_getInt(resourcebundle : UResourceBundle*, status : UErrorCode*) : Int32

  # Params # resourcebundle : UResourceBundle* [In]
  fun ures_getSize(resourcebundle : UResourceBundle*) : Int32

  # Params # resourcebundle : UResourceBundle* [In]
  fun ures_getType(resourcebundle : UResourceBundle*) : UResType

  # Params # resourcebundle : UResourceBundle* [In]
  fun ures_getKey(resourcebundle : UResourceBundle*) : PSTR

  # Params # resourcebundle : UResourceBundle* [In]
  fun ures_resetIterator(resourcebundle : UResourceBundle*)

  # Params # resourcebundle : UResourceBundle* [In]
  fun ures_hasNext(resourcebundle : UResourceBundle*) : Int8

  # Params # resourcebundle : UResourceBundle* [In],fillin : UResourceBundle* [In],status : UErrorCode* [In]
  fun ures_getNextResource(resourcebundle : UResourceBundle*, fillin : UResourceBundle*, status : UErrorCode*) : UResourceBundle*

  # Params # resourcebundle : UResourceBundle* [In],len : Int32* [In],key : Int8** [In],status : UErrorCode* [In]
  fun ures_getNextString(resourcebundle : UResourceBundle*, len : Int32*, key : Int8**, status : UErrorCode*) : UInt16*

  # Params # resourcebundle : UResourceBundle* [In],indexr : Int32 [In],fillin : UResourceBundle* [In],status : UErrorCode* [In]
  fun ures_getByIndex(resourcebundle : UResourceBundle*, indexr : Int32, fillin : UResourceBundle*, status : UErrorCode*) : UResourceBundle*

  # Params # resourcebundle : UResourceBundle* [In],indexs : Int32 [In],len : Int32* [In],status : UErrorCode* [In]
  fun ures_getStringByIndex(resourcebundle : UResourceBundle*, indexs : Int32, len : Int32*, status : UErrorCode*) : UInt16*

  # Params # resb : UResourceBundle* [In],stringindex : Int32 [In],dest : PSTR [In],plength : Int32* [In],forcecopy : Int8 [In],status : UErrorCode* [In]
  fun ures_getUTF8StringByIndex(resb : UResourceBundle*, stringindex : Int32, dest : PSTR, plength : Int32*, forcecopy : Int8, status : UErrorCode*) : PSTR

  # Params # resourcebundle : UResourceBundle* [In],key : PSTR [In],fillin : UResourceBundle* [In],status : UErrorCode* [In]
  fun ures_getByKey(resourcebundle : UResourceBundle*, key : PSTR, fillin : UResourceBundle*, status : UErrorCode*) : UResourceBundle*

  # Params # resb : UResourceBundle* [In],key : PSTR [In],len : Int32* [In],status : UErrorCode* [In]
  fun ures_getStringByKey(resb : UResourceBundle*, key : PSTR, len : Int32*, status : UErrorCode*) : UInt16*

  # Params # resb : UResourceBundle* [In],key : PSTR [In],dest : PSTR [In],plength : Int32* [In],forcecopy : Int8 [In],status : UErrorCode* [In]
  fun ures_getUTF8StringByKey(resb : UResourceBundle*, key : PSTR, dest : PSTR, plength : Int32*, forcecopy : Int8, status : UErrorCode*) : PSTR

  # Params # packagename : PSTR [In],status : UErrorCode* [In]
  fun ures_openAvailableLocales(packagename : PSTR, status : UErrorCode*) : UEnumeration*

  # Params # locale : PSTR [In],dialecthandling : UDialectHandling [In],perrorcode : UErrorCode* [In]
  fun uldn_open(locale : PSTR, dialecthandling : UDialectHandling, perrorcode : UErrorCode*) : ULocaleDisplayNames*

  # Params # ldn : ULocaleDisplayNames* [In]
  fun uldn_close(ldn : ULocaleDisplayNames*)

  # Params # ldn : ULocaleDisplayNames* [In]
  fun uldn_getLocale(ldn : ULocaleDisplayNames*) : PSTR

  # Params # ldn : ULocaleDisplayNames* [In]
  fun uldn_getDialectHandling(ldn : ULocaleDisplayNames*) : UDialectHandling

  # Params # ldn : ULocaleDisplayNames* [In],locale : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_localeDisplayName(ldn : ULocaleDisplayNames*, locale : PSTR, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # ldn : ULocaleDisplayNames* [In],lang : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_languageDisplayName(ldn : ULocaleDisplayNames*, lang : PSTR, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # ldn : ULocaleDisplayNames* [In],script : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_scriptDisplayName(ldn : ULocaleDisplayNames*, script : PSTR, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # ldn : ULocaleDisplayNames* [In],scriptcode : UScriptCode [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_scriptCodeDisplayName(ldn : ULocaleDisplayNames*, scriptcode : UScriptCode, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # ldn : ULocaleDisplayNames* [In],region : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_regionDisplayName(ldn : ULocaleDisplayNames*, region : PSTR, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # ldn : ULocaleDisplayNames* [In],variant : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_variantDisplayName(ldn : ULocaleDisplayNames*, variant : PSTR, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # ldn : ULocaleDisplayNames* [In],key : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_keyDisplayName(ldn : ULocaleDisplayNames*, key : PSTR, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # ldn : ULocaleDisplayNames* [In],key : PSTR [In],value : PSTR [In],result : UInt16* [In],maxresultsize : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_keyValueDisplayName(ldn : ULocaleDisplayNames*, key : PSTR, value : PSTR, result : UInt16*, maxresultsize : Int32, perrorcode : UErrorCode*) : Int32

  # Params # locale : PSTR [In],contexts : UDisplayContext* [In],length : Int32 [In],perrorcode : UErrorCode* [In]
  fun uldn_openForContext(locale : PSTR, contexts : UDisplayContext*, length : Int32, perrorcode : UErrorCode*) : ULocaleDisplayNames*

  # Params # ldn : ULocaleDisplayNames* [In],type : UDisplayContextType [In],perrorcode : UErrorCode* [In]
  fun uldn_getContext(ldn : ULocaleDisplayNames*, type : UDisplayContextType, perrorcode : UErrorCode*) : UDisplayContext

  # Params # locale : PSTR [In],buff : UInt16* [In],buffcapacity : Int32 [In],ec : UErrorCode* [In]
  fun ucurr_forLocale(locale : PSTR, buff : UInt16*, buffcapacity : Int32, ec : UErrorCode*) : Int32

  # Params # isocode : UInt16* [In],locale : PSTR [In],status : UErrorCode* [In]
  fun ucurr_register(isocode : UInt16*, locale : PSTR, status : UErrorCode*) : Void*

  # Params # key : Void* [In],status : UErrorCode* [In]
  fun ucurr_unregister(key : Void*, status : UErrorCode*) : Int8

  # Params # currency : UInt16* [In],locale : PSTR [In],namestyle : UCurrNameStyle [In],ischoiceformat : Int8* [In],len : Int32* [In],ec : UErrorCode* [In]
  fun ucurr_getName(currency : UInt16*, locale : PSTR, namestyle : UCurrNameStyle, ischoiceformat : Int8*, len : Int32*, ec : UErrorCode*) : UInt16*

  # Params # currency : UInt16* [In],locale : PSTR [In],ischoiceformat : Int8* [In],pluralcount : PSTR [In],len : Int32* [In],ec : UErrorCode* [In]
  fun ucurr_getPluralName(currency : UInt16*, locale : PSTR, ischoiceformat : Int8*, pluralcount : PSTR, len : Int32*, ec : UErrorCode*) : UInt16*

  # Params # currency : UInt16* [In],ec : UErrorCode* [In]
  fun ucurr_getDefaultFractionDigits(currency : UInt16*, ec : UErrorCode*) : Int32

  # Params # currency : UInt16* [In],usage : UCurrencyUsage [In],ec : UErrorCode* [In]
  fun ucurr_getDefaultFractionDigitsForUsage(currency : UInt16*, usage : UCurrencyUsage, ec : UErrorCode*) : Int32

  # Params # currency : UInt16* [In],ec : UErrorCode* [In]
  fun ucurr_getRoundingIncrement(currency : UInt16*, ec : UErrorCode*) : Float64

  # Params # currency : UInt16* [In],usage : UCurrencyUsage [In],ec : UErrorCode* [In]
  fun ucurr_getRoundingIncrementForUsage(currency : UInt16*, usage : UCurrencyUsage, ec : UErrorCode*) : Float64

  # Params # currtype : UInt32 [In],perrorcode : UErrorCode* [In]
  fun ucurr_openISOCurrencies(currtype : UInt32, perrorcode : UErrorCode*) : UEnumeration*

  # Params # isocode : UInt16* [In],from : Float64 [In],to : Float64 [In],errorcode : UErrorCode* [In]
  fun ucurr_isAvailable(isocode : UInt16*, from : Float64, to : Float64, errorcode : UErrorCode*) : Int8

  # Params # locale : PSTR [In],date : Float64 [In],ec : UErrorCode* [In]
  fun ucurr_countCurrencies(locale : PSTR, date : Float64, ec : UErrorCode*) : Int32

  # Params # locale : PSTR [In],date : Float64 [In],index : Int32 [In],buff : UInt16* [In],buffcapacity : Int32 [In],ec : UErrorCode* [In]
  fun ucurr_forLocaleAndDate(locale : PSTR, date : Float64, index : Int32, buff : UInt16*, buffcapacity : Int32, ec : UErrorCode*) : Int32

  # Params # key : PSTR [In],locale : PSTR [In],commonlyused : Int8 [In],status : UErrorCode* [In]
  fun ucurr_getKeywordValuesForLocale(key : PSTR, locale : PSTR, commonlyused : Int8, status : UErrorCode*) : UEnumeration*

  # Params # currency : UInt16* [In]
  fun ucurr_getNumericCode(currency : UInt16*) : Int32

  # Params # map : UCPMap* [In],c : Int32 [In]
  fun ucpmap_get(map : UCPMap*, c : Int32) : UInt32

  # Params # map : UCPMap* [In],start : Int32 [In],option : UCPMapRangeOption [In],surrogatevalue : UInt32 [In],filter : UCPMapValueFilter* [In],context : Void* [In],pvalue : UInt32* [In]
  fun ucpmap_getRange(map : UCPMap*, start : Int32, option : UCPMapRangeOption, surrogatevalue : UInt32, filter : UCPMapValueFilter*, context : Void*, pvalue : UInt32*) : Int32

  # Params # type : UCPTrieType [In],valuewidth : UCPTrieValueWidth [In],data : Void* [In],length : Int32 [In],pactuallength : Int32* [In],perrorcode : UErrorCode* [In]
  fun ucptrie_openFromBinary(type : UCPTrieType, valuewidth : UCPTrieValueWidth, data : Void*, length : Int32, pactuallength : Int32*, perrorcode : UErrorCode*) : UCPTrie*

  # Params # trie : UCPTrie* [In]
  fun ucptrie_close(trie : UCPTrie*)

  # Params # trie : UCPTrie* [In]
  fun ucptrie_getType(trie : UCPTrie*) : UCPTrieType

  # Params # trie : UCPTrie* [In]
  fun ucptrie_getValueWidth(trie : UCPTrie*) : UCPTrieValueWidth

  # Params # trie : UCPTrie* [In],c : Int32 [In]
  fun ucptrie_get(trie : UCPTrie*, c : Int32) : UInt32

  # Params # trie : UCPTrie* [In],start : Int32 [In],option : UCPMapRangeOption [In],surrogatevalue : UInt32 [In],filter : UCPMapValueFilter* [In],context : Void* [In],pvalue : UInt32* [In]
  fun ucptrie_getRange(trie : UCPTrie*, start : Int32, option : UCPMapRangeOption, surrogatevalue : UInt32, filter : UCPMapValueFilter*, context : Void*, pvalue : UInt32*) : Int32

  # Params # trie : UCPTrie* [In],data : Void* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucptrie_toBinary(trie : UCPTrie*, data : Void*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # trie : UCPTrie* [In],c : Int32 [In]
  fun ucptrie_internalSmallIndex(trie : UCPTrie*, c : Int32) : Int32

  # Params # trie : UCPTrie* [In],lt1 : Int32 [In],t2 : UInt8 [In],t3 : UInt8 [In]
  fun ucptrie_internalSmallU8Index(trie : UCPTrie*, lt1 : Int32, t2 : UInt8, t3 : UInt8) : Int32

  # Params # trie : UCPTrie* [In],c : Int32 [In],start : UInt8* [In],src : UInt8* [In]
  fun ucptrie_internalU8PrevIndex(trie : UCPTrie*, c : Int32, start : UInt8*, src : UInt8*) : Int32

  # Params # initialvalue : UInt32 [In],errorvalue : UInt32 [In],perrorcode : UErrorCode* [In]
  fun umutablecptrie_open(initialvalue : UInt32, errorvalue : UInt32, perrorcode : UErrorCode*) : UMutableCPTrie*

  # Params # other : UMutableCPTrie* [In],perrorcode : UErrorCode* [In]
  fun umutablecptrie_clone(other : UMutableCPTrie*, perrorcode : UErrorCode*) : UMutableCPTrie*

  # Params # trie : UMutableCPTrie* [In]
  fun umutablecptrie_close(trie : UMutableCPTrie*)

  # Params # map : UCPMap* [In],perrorcode : UErrorCode* [In]
  fun umutablecptrie_fromUCPMap(map : UCPMap*, perrorcode : UErrorCode*) : UMutableCPTrie*

  # Params # trie : UCPTrie* [In],perrorcode : UErrorCode* [In]
  fun umutablecptrie_fromUCPTrie(trie : UCPTrie*, perrorcode : UErrorCode*) : UMutableCPTrie*

  # Params # trie : UMutableCPTrie* [In],c : Int32 [In]
  fun umutablecptrie_get(trie : UMutableCPTrie*, c : Int32) : UInt32

  # Params # trie : UMutableCPTrie* [In],start : Int32 [In],option : UCPMapRangeOption [In],surrogatevalue : UInt32 [In],filter : UCPMapValueFilter* [In],context : Void* [In],pvalue : UInt32* [In]
  fun umutablecptrie_getRange(trie : UMutableCPTrie*, start : Int32, option : UCPMapRangeOption, surrogatevalue : UInt32, filter : UCPMapValueFilter*, context : Void*, pvalue : UInt32*) : Int32

  # Params # trie : UMutableCPTrie* [In],c : Int32 [In],value : UInt32 [In],perrorcode : UErrorCode* [In]
  fun umutablecptrie_set(trie : UMutableCPTrie*, c : Int32, value : UInt32, perrorcode : UErrorCode*)

  # Params # trie : UMutableCPTrie* [In],start : Int32 [In],end : Int32 [In],value : UInt32 [In],perrorcode : UErrorCode* [In]
  fun umutablecptrie_setRange(trie : UMutableCPTrie*, start : Int32, end : Int32, value : UInt32, perrorcode : UErrorCode*)

  # Params # trie : UMutableCPTrie* [In],type : UCPTrieType [In],valuewidth : UCPTrieValueWidth [In],perrorcode : UErrorCode* [In]
  fun umutablecptrie_buildImmutable(trie : UMutableCPTrie*, type : UCPTrieType, valuewidth : UCPTrieValueWidth, perrorcode : UErrorCode*) : UCPTrie*

  # Params # context : Void* [In],fromuargs : UConverterFromUnicodeArgs* [In],codeunits : UInt16* [In],length : Int32 [In],codepoint : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_FROM_U_CALLBACK_STOP(context : Void*, fromuargs : UConverterFromUnicodeArgs*, codeunits : UInt16*, length : Int32, codepoint : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # context : Void* [In],touargs : UConverterToUnicodeArgs* [In],codeunits : PSTR [In],length : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_TO_U_CALLBACK_STOP(context : Void*, touargs : UConverterToUnicodeArgs*, codeunits : PSTR, length : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # context : Void* [In],fromuargs : UConverterFromUnicodeArgs* [In],codeunits : UInt16* [In],length : Int32 [In],codepoint : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_FROM_U_CALLBACK_SKIP(context : Void*, fromuargs : UConverterFromUnicodeArgs*, codeunits : UInt16*, length : Int32, codepoint : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # context : Void* [In],fromuargs : UConverterFromUnicodeArgs* [In],codeunits : UInt16* [In],length : Int32 [In],codepoint : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_FROM_U_CALLBACK_SUBSTITUTE(context : Void*, fromuargs : UConverterFromUnicodeArgs*, codeunits : UInt16*, length : Int32, codepoint : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # context : Void* [In],fromuargs : UConverterFromUnicodeArgs* [In],codeunits : UInt16* [In],length : Int32 [In],codepoint : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_FROM_U_CALLBACK_ESCAPE(context : Void*, fromuargs : UConverterFromUnicodeArgs*, codeunits : UInt16*, length : Int32, codepoint : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # context : Void* [In],touargs : UConverterToUnicodeArgs* [In],codeunits : PSTR [In],length : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_TO_U_CALLBACK_SKIP(context : Void*, touargs : UConverterToUnicodeArgs*, codeunits : PSTR, length : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # context : Void* [In],touargs : UConverterToUnicodeArgs* [In],codeunits : PSTR [In],length : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_TO_U_CALLBACK_SUBSTITUTE(context : Void*, touargs : UConverterToUnicodeArgs*, codeunits : PSTR, length : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # context : Void* [In],touargs : UConverterToUnicodeArgs* [In],codeunits : PSTR [In],length : Int32 [In],reason : UConverterCallbackReason [In],err : UErrorCode* [In]
  fun UCNV_TO_U_CALLBACK_ESCAPE(context : Void*, touargs : UConverterToUnicodeArgs*, codeunits : PSTR, length : Int32, reason : UConverterCallbackReason, err : UErrorCode*)

  # Params # name1 : PSTR [In],name2 : PSTR [In]
  fun ucnv_compareNames(name1 : PSTR, name2 : PSTR) : Int32

  # Params # convertername : PSTR [In],err : UErrorCode* [In]
  fun ucnv_open(convertername : PSTR, err : UErrorCode*) : UConverter*

  # Params # name : UInt16* [In],err : UErrorCode* [In]
  fun ucnv_openU(name : UInt16*, err : UErrorCode*) : UConverter*

  # Params # codepage : Int32 [In],platform : UConverterPlatform [In],err : UErrorCode* [In]
  fun ucnv_openCCSID(codepage : Int32, platform : UConverterPlatform, err : UErrorCode*) : UConverter*

  # Params # packagename : PSTR [In],convertername : PSTR [In],err : UErrorCode* [In]
  fun ucnv_openPackage(packagename : PSTR, convertername : PSTR, err : UErrorCode*) : UConverter*

  # Params # cnv : UConverter* [In],stackbuffer : Void* [In],pbuffersize : Int32* [In],status : UErrorCode* [In]
  fun ucnv_safeClone(cnv : UConverter*, stackbuffer : Void*, pbuffersize : Int32*, status : UErrorCode*) : UConverter*

  # Params # converter : UConverter* [In]
  fun ucnv_close(converter : UConverter*)

  # Params # converter : UConverter* [In],subchars : PSTR [In],len : Int8* [In],err : UErrorCode* [In]
  fun ucnv_getSubstChars(converter : UConverter*, subchars : PSTR, len : Int8*, err : UErrorCode*)

  # Params # converter : UConverter* [In],subchars : PSTR [In],len : Int8 [In],err : UErrorCode* [In]
  fun ucnv_setSubstChars(converter : UConverter*, subchars : PSTR, len : Int8, err : UErrorCode*)

  # Params # cnv : UConverter* [In],s : UInt16* [In],length : Int32 [In],err : UErrorCode* [In]
  fun ucnv_setSubstString(cnv : UConverter*, s : UInt16*, length : Int32, err : UErrorCode*)

  # Params # converter : UConverter* [In],errbytes : PSTR [In],len : Int8* [In],err : UErrorCode* [In]
  fun ucnv_getInvalidChars(converter : UConverter*, errbytes : PSTR, len : Int8*, err : UErrorCode*)

  # Params # converter : UConverter* [In],erruchars : UInt16* [In],len : Int8* [In],err : UErrorCode* [In]
  fun ucnv_getInvalidUChars(converter : UConverter*, erruchars : UInt16*, len : Int8*, err : UErrorCode*)

  # Params # converter : UConverter* [In]
  fun ucnv_reset(converter : UConverter*)

  # Params # converter : UConverter* [In]
  fun ucnv_resetToUnicode(converter : UConverter*)

  # Params # converter : UConverter* [In]
  fun ucnv_resetFromUnicode(converter : UConverter*)

  # Params # converter : UConverter* [In]
  fun ucnv_getMaxCharSize(converter : UConverter*) : Int8

  # Params # converter : UConverter* [In]
  fun ucnv_getMinCharSize(converter : UConverter*) : Int8

  # Params # converter : UConverter* [In],displaylocale : PSTR [In],displayname : UInt16* [In],displaynamecapacity : Int32 [In],err : UErrorCode* [In]
  fun ucnv_getDisplayName(converter : UConverter*, displaylocale : PSTR, displayname : UInt16*, displaynamecapacity : Int32, err : UErrorCode*) : Int32

  # Params # converter : UConverter* [In],err : UErrorCode* [In]
  fun ucnv_getName(converter : UConverter*, err : UErrorCode*) : PSTR

  # Params # converter : UConverter* [In],err : UErrorCode* [In]
  fun ucnv_getCCSID(converter : UConverter*, err : UErrorCode*) : Int32

  # Params # converter : UConverter* [In],err : UErrorCode* [In]
  fun ucnv_getPlatform(converter : UConverter*, err : UErrorCode*) : UConverterPlatform

  # Params # converter : UConverter* [In]
  fun ucnv_getType(converter : UConverter*) : UConverterType

  # Params # converter : UConverter* [In],starters : Int8* [In],err : UErrorCode* [In]
  fun ucnv_getStarters(converter : UConverter*, starters : Int8*, err : UErrorCode*)

  # Params # cnv : UConverter* [In],setfillin : USet* [In],whichset : UConverterUnicodeSet [In],perrorcode : UErrorCode* [In]
  fun ucnv_getUnicodeSet(cnv : UConverter*, setfillin : USet*, whichset : UConverterUnicodeSet, perrorcode : UErrorCode*)

  # Params # converter : UConverter* [In],action : UConverterToUCallback* [In],context : Void** [In]
  fun ucnv_getToUCallBack(converter : UConverter*, action : UConverterToUCallback*, context : Void**)

  # Params # converter : UConverter* [In],action : UConverterFromUCallback* [In],context : Void** [In]
  fun ucnv_getFromUCallBack(converter : UConverter*, action : UConverterFromUCallback*, context : Void**)

  # Params # converter : UConverter* [In],newaction : UConverterToUCallback [In],newcontext : Void* [In],oldaction : UConverterToUCallback* [In],oldcontext : Void** [In],err : UErrorCode* [In]
  fun ucnv_setToUCallBack(converter : UConverter*, newaction : UConverterToUCallback, newcontext : Void*, oldaction : UConverterToUCallback*, oldcontext : Void**, err : UErrorCode*)

  # Params # converter : UConverter* [In],newaction : UConverterFromUCallback [In],newcontext : Void* [In],oldaction : UConverterFromUCallback* [In],oldcontext : Void** [In],err : UErrorCode* [In]
  fun ucnv_setFromUCallBack(converter : UConverter*, newaction : UConverterFromUCallback, newcontext : Void*, oldaction : UConverterFromUCallback*, oldcontext : Void**, err : UErrorCode*)

  # Params # converter : UConverter* [In],target : Int8** [In],targetlimit : PSTR [In],source : UInt16** [In],sourcelimit : UInt16* [In],offsets : Int32* [In],flush : Int8 [In],err : UErrorCode* [In]
  fun ucnv_fromUnicode(converter : UConverter*, target : Int8**, targetlimit : PSTR, source : UInt16**, sourcelimit : UInt16*, offsets : Int32*, flush : Int8, err : UErrorCode*)

  # Params # converter : UConverter* [In],target : UInt16** [In],targetlimit : UInt16* [In],source : Int8** [In],sourcelimit : PSTR [In],offsets : Int32* [In],flush : Int8 [In],err : UErrorCode* [In]
  fun ucnv_toUnicode(converter : UConverter*, target : UInt16**, targetlimit : UInt16*, source : Int8**, sourcelimit : PSTR, offsets : Int32*, flush : Int8, err : UErrorCode*)

  # Params # cnv : UConverter* [In],dest : PSTR [In],destcapacity : Int32 [In],src : UInt16* [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucnv_fromUChars(cnv : UConverter*, dest : PSTR, destcapacity : Int32, src : UInt16*, srclength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # cnv : UConverter* [In],dest : UInt16* [In],destcapacity : Int32 [In],src : PSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucnv_toUChars(cnv : UConverter*, dest : UInt16*, destcapacity : Int32, src : PSTR, srclength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # converter : UConverter* [In],source : Int8** [In],sourcelimit : PSTR [In],err : UErrorCode* [In]
  fun ucnv_getNextUChar(converter : UConverter*, source : Int8**, sourcelimit : PSTR, err : UErrorCode*) : Int32

  # Params # targetcnv : UConverter* [In],sourcecnv : UConverter* [In],target : Int8** [In],targetlimit : PSTR [In],source : Int8** [In],sourcelimit : PSTR [In],pivotstart : UInt16* [In],pivotsource : UInt16** [In],pivottarget : UInt16** [In],pivotlimit : UInt16* [In],reset : Int8 [In],flush : Int8 [In],perrorcode : UErrorCode* [In]
  fun ucnv_convertEx(targetcnv : UConverter*, sourcecnv : UConverter*, target : Int8**, targetlimit : PSTR, source : Int8**, sourcelimit : PSTR, pivotstart : UInt16*, pivotsource : UInt16**, pivottarget : UInt16**, pivotlimit : UInt16*, reset : Int8, flush : Int8, perrorcode : UErrorCode*)

  # Params # toconvertername : PSTR [In],fromconvertername : PSTR [In],target : PSTR [In],targetcapacity : Int32 [In],source : PSTR [In],sourcelength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucnv_convert(toconvertername : PSTR, fromconvertername : PSTR, target : PSTR, targetcapacity : Int32, source : PSTR, sourcelength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # algorithmictype : UConverterType [In],cnv : UConverter* [In],target : PSTR [In],targetcapacity : Int32 [In],source : PSTR [In],sourcelength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucnv_toAlgorithmic(algorithmictype : UConverterType, cnv : UConverter*, target : PSTR, targetcapacity : Int32, source : PSTR, sourcelength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # cnv : UConverter* [In],algorithmictype : UConverterType [In],target : PSTR [In],targetcapacity : Int32 [In],source : PSTR [In],sourcelength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucnv_fromAlgorithmic(cnv : UConverter*, algorithmictype : UConverterType, target : PSTR, targetcapacity : Int32, source : PSTR, sourcelength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # 
  fun ucnv_flushCache : Int32

  # Params # 
  fun ucnv_countAvailable : Int32

  # Params # n : Int32 [In]
  fun ucnv_getAvailableName(n : Int32) : PSTR

  # Params # perrorcode : UErrorCode* [In]
  fun ucnv_openAllNames(perrorcode : UErrorCode*) : UEnumeration*

  # Params # alias : PSTR [In],perrorcode : UErrorCode* [In]
  fun ucnv_countAliases(alias : PSTR, perrorcode : UErrorCode*) : UInt16

  # Params # alias : PSTR [In],n : UInt16 [In],perrorcode : UErrorCode* [In]
  fun ucnv_getAlias(alias : PSTR, n : UInt16, perrorcode : UErrorCode*) : PSTR

  # Params # alias : PSTR [In],aliases : Int8** [In],perrorcode : UErrorCode* [In]
  fun ucnv_getAliases(alias : PSTR, aliases : Int8**, perrorcode : UErrorCode*)

  # Params # convname : PSTR [In],standard : PSTR [In],perrorcode : UErrorCode* [In]
  fun ucnv_openStandardNames(convname : PSTR, standard : PSTR, perrorcode : UErrorCode*) : UEnumeration*

  # Params # 
  fun ucnv_countStandards : UInt16

  # Params # n : UInt16 [In],perrorcode : UErrorCode* [In]
  fun ucnv_getStandard(n : UInt16, perrorcode : UErrorCode*) : PSTR

  # Params # name : PSTR [In],standard : PSTR [In],perrorcode : UErrorCode* [In]
  fun ucnv_getStandardName(name : PSTR, standard : PSTR, perrorcode : UErrorCode*) : PSTR

  # Params # alias : PSTR [In],standard : PSTR [In],perrorcode : UErrorCode* [In]
  fun ucnv_getCanonicalName(alias : PSTR, standard : PSTR, perrorcode : UErrorCode*) : PSTR

  # Params # 
  fun ucnv_getDefaultName : PSTR

  # Params # name : PSTR [In]
  fun ucnv_setDefaultName(name : PSTR)

  # Params # cnv : UConverter* [In],source : UInt16* [In],sourcelen : Int32 [In]
  fun ucnv_fixFileSeparator(cnv : UConverter*, source : UInt16*, sourcelen : Int32)

  # Params # cnv : UConverter* [In]
  fun ucnv_isAmbiguous(cnv : UConverter*) : Int8

  # Params # cnv : UConverter* [In],usesfallback : Int8 [In]
  fun ucnv_setFallback(cnv : UConverter*, usesfallback : Int8)

  # Params # cnv : UConverter* [In]
  fun ucnv_usesFallback(cnv : UConverter*) : Int8

  # Params # source : PSTR [In],sourcelength : Int32 [In],signaturelength : Int32* [In],perrorcode : UErrorCode* [In]
  fun ucnv_detectUnicodeSignature(source : PSTR, sourcelength : Int32, signaturelength : Int32*, perrorcode : UErrorCode*) : PSTR

  # Params # cnv : UConverter* [In],status : UErrorCode* [In]
  fun ucnv_fromUCountPending(cnv : UConverter*, status : UErrorCode*) : Int32

  # Params # cnv : UConverter* [In],status : UErrorCode* [In]
  fun ucnv_toUCountPending(cnv : UConverter*, status : UErrorCode*) : Int32

  # Params # cnv : UConverter* [In],status : UErrorCode* [In]
  fun ucnv_isFixedWidth(cnv : UConverter*, status : UErrorCode*) : Int8

  # Params # args : UConverterFromUnicodeArgs* [In],source : PSTR [In],length : Int32 [In],offsetindex : Int32 [In],err : UErrorCode* [In]
  fun ucnv_cbFromUWriteBytes(args : UConverterFromUnicodeArgs*, source : PSTR, length : Int32, offsetindex : Int32, err : UErrorCode*)

  # Params # args : UConverterFromUnicodeArgs* [In],offsetindex : Int32 [In],err : UErrorCode* [In]
  fun ucnv_cbFromUWriteSub(args : UConverterFromUnicodeArgs*, offsetindex : Int32, err : UErrorCode*)

  # Params # args : UConverterFromUnicodeArgs* [In],source : UInt16** [In],sourcelimit : UInt16* [In],offsetindex : Int32 [In],err : UErrorCode* [In]
  fun ucnv_cbFromUWriteUChars(args : UConverterFromUnicodeArgs*, source : UInt16**, sourcelimit : UInt16*, offsetindex : Int32, err : UErrorCode*)

  # Params # args : UConverterToUnicodeArgs* [In],source : UInt16* [In],length : Int32 [In],offsetindex : Int32 [In],err : UErrorCode* [In]
  fun ucnv_cbToUWriteUChars(args : UConverterToUnicodeArgs*, source : UInt16*, length : Int32, offsetindex : Int32, err : UErrorCode*)

  # Params # args : UConverterToUnicodeArgs* [In],offsetindex : Int32 [In],err : UErrorCode* [In]
  fun ucnv_cbToUWriteSub(args : UConverterToUnicodeArgs*, offsetindex : Int32, err : UErrorCode*)

  # Params # status : UErrorCode* [In]
  fun u_init(status : UErrorCode*)

  # Params # 
  fun u_cleanup

  # Params # context : Void* [In],a : UMemAllocFn* [In],r : UMemReallocFn* [In],f : UMemFreeFn* [In],status : UErrorCode* [In]
  fun u_setMemoryFunctions(context : Void*, a : UMemAllocFn*, r : UMemReallocFn*, f : UMemFreeFn*, status : UErrorCode*)

  # Params # name : PSTR [In],locale : PSTR [In],ec : UErrorCode* [In]
  fun u_catopen(name : PSTR, locale : PSTR, ec : UErrorCode*) : UResourceBundle*

  # Params # catd : UResourceBundle* [In]
  fun u_catclose(catd : UResourceBundle*)

  # Params # catd : UResourceBundle* [In],set_num : Int32 [In],msg_num : Int32 [In],s : UInt16* [In],len : Int32* [In],ec : UErrorCode* [In]
  fun u_catgets(catd : UResourceBundle*, set_num : Int32, msg_num : Int32, s : UInt16*, len : Int32*, ec : UErrorCode*) : UInt16*

  # Params # c : Int32 [In],which : UProperty [In]
  fun u_hasBinaryProperty(c : Int32, which : UProperty) : Int8

  # Params # property : UProperty [In],perrorcode : UErrorCode* [In]
  fun u_getBinaryPropertySet(property : UProperty, perrorcode : UErrorCode*) : USet*

  # Params # c : Int32 [In]
  fun u_isUAlphabetic(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isULowercase(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isUUppercase(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isUWhiteSpace(c : Int32) : Int8

  # Params # c : Int32 [In],which : UProperty [In]
  fun u_getIntPropertyValue(c : Int32, which : UProperty) : Int32

  # Params # which : UProperty [In]
  fun u_getIntPropertyMinValue(which : UProperty) : Int32

  # Params # which : UProperty [In]
  fun u_getIntPropertyMaxValue(which : UProperty) : Int32

  # Params # property : UProperty [In],perrorcode : UErrorCode* [In]
  fun u_getIntPropertyMap(property : UProperty, perrorcode : UErrorCode*) : UCPMap*

  # Params # c : Int32 [In]
  fun u_getNumericValue(c : Int32) : Float64

  # Params # c : Int32 [In]
  fun u_islower(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isupper(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_istitle(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isdigit(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isalpha(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isalnum(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isxdigit(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_ispunct(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isgraph(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isblank(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isdefined(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isspace(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isJavaSpaceChar(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isWhitespace(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_iscntrl(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isISOControl(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isprint(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isbase(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_charDirection(c : Int32) : UCharDirection

  # Params # c : Int32 [In]
  fun u_isMirrored(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_charMirror(c : Int32) : Int32

  # Params # c : Int32 [In]
  fun u_getBidiPairedBracket(c : Int32) : Int32

  # Params # c : Int32 [In]
  fun u_charType(c : Int32) : Int8

  # Params # enumrange : UCharEnumTypeRange* [In],context : Void* [In]
  fun u_enumCharTypes(enumrange : UCharEnumTypeRange*, context : Void*)

  # Params # c : Int32 [In]
  fun u_getCombiningClass(c : Int32) : UInt8

  # Params # c : Int32 [In]
  fun u_charDigitValue(c : Int32) : Int32

  # Params # c : Int32 [In]
  fun ublock_getCode(c : Int32) : UBlockCode

  # Params # code : Int32 [In],namechoice : UCharNameChoice [In],buffer : PSTR [In],bufferlength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_charName(code : Int32, namechoice : UCharNameChoice, buffer : PSTR, bufferlength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # namechoice : UCharNameChoice [In],name : PSTR [In],perrorcode : UErrorCode* [In]
  fun u_charFromName(namechoice : UCharNameChoice, name : PSTR, perrorcode : UErrorCode*) : Int32

  # Params # start : Int32 [In],limit : Int32 [In],fn : UEnumCharNamesFn* [In],context : Void* [In],namechoice : UCharNameChoice [In],perrorcode : UErrorCode* [In]
  fun u_enumCharNames(start : Int32, limit : Int32, fn : UEnumCharNamesFn*, context : Void*, namechoice : UCharNameChoice, perrorcode : UErrorCode*)

  # Params # property : UProperty [In],namechoice : UPropertyNameChoice [In]
  fun u_getPropertyName(property : UProperty, namechoice : UPropertyNameChoice) : PSTR

  # Params # alias : PSTR [In]
  fun u_getPropertyEnum(alias : PSTR) : UProperty

  # Params # property : UProperty [In],value : Int32 [In],namechoice : UPropertyNameChoice [In]
  fun u_getPropertyValueName(property : UProperty, value : Int32, namechoice : UPropertyNameChoice) : PSTR

  # Params # property : UProperty [In],alias : PSTR [In]
  fun u_getPropertyValueEnum(property : UProperty, alias : PSTR) : Int32

  # Params # c : Int32 [In]
  fun u_isIDStart(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isIDPart(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isIDIgnorable(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isJavaIDStart(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_isJavaIDPart(c : Int32) : Int8

  # Params # c : Int32 [In]
  fun u_tolower(c : Int32) : Int32

  # Params # c : Int32 [In]
  fun u_toupper(c : Int32) : Int32

  # Params # c : Int32 [In]
  fun u_totitle(c : Int32) : Int32

  # Params # c : Int32 [In],options : UInt32 [In]
  fun u_foldCase(c : Int32, options : UInt32) : Int32

  # Params # ch : Int32 [In],radix : Int8 [In]
  fun u_digit(ch : Int32, radix : Int8) : Int32

  # Params # digit : Int32 [In],radix : Int8 [In]
  fun u_forDigit(digit : Int32, radix : Int8) : Int32

  # Params # c : Int32 [In],versionarray : UInt8* [In]
  fun u_charAge(c : Int32, versionarray : UInt8*)

  # Params # versionarray : UInt8* [In]
  fun u_getUnicodeVersion(versionarray : UInt8*)

  # Params # c : Int32 [In],dest : UInt16* [In],destcapacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_getFC_NFKC_Closure(c : Int32, dest : UInt16*, destcapacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # 
  fun ubidi_open : UBiDi*

  # Params # maxlength : Int32 [In],maxruncount : Int32 [In],perrorcode : UErrorCode* [In]
  fun ubidi_openSized(maxlength : Int32, maxruncount : Int32, perrorcode : UErrorCode*) : UBiDi*

  # Params # pbidi : UBiDi* [In]
  fun ubidi_close(pbidi : UBiDi*)

  # Params # pbidi : UBiDi* [In],isinverse : Int8 [In]
  fun ubidi_setInverse(pbidi : UBiDi*, isinverse : Int8)

  # Params # pbidi : UBiDi* [In]
  fun ubidi_isInverse(pbidi : UBiDi*) : Int8

  # Params # pbidi : UBiDi* [In],orderparagraphsltr : Int8 [In]
  fun ubidi_orderParagraphsLTR(pbidi : UBiDi*, orderparagraphsltr : Int8)

  # Params # pbidi : UBiDi* [In]
  fun ubidi_isOrderParagraphsLTR(pbidi : UBiDi*) : Int8

  # Params # pbidi : UBiDi* [In],reorderingmode : UBiDiReorderingMode [In]
  fun ubidi_setReorderingMode(pbidi : UBiDi*, reorderingmode : UBiDiReorderingMode)

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getReorderingMode(pbidi : UBiDi*) : UBiDiReorderingMode

  # Params # pbidi : UBiDi* [In],reorderingoptions : UInt32 [In]
  fun ubidi_setReorderingOptions(pbidi : UBiDi*, reorderingoptions : UInt32)

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getReorderingOptions(pbidi : UBiDi*) : UInt32

  # Params # pbidi : UBiDi* [In],prologue : UInt16* [In],prolength : Int32 [In],epilogue : UInt16* [In],epilength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ubidi_setContext(pbidi : UBiDi*, prologue : UInt16*, prolength : Int32, epilogue : UInt16*, epilength : Int32, perrorcode : UErrorCode*)

  # Params # pbidi : UBiDi* [In],text : UInt16* [In],length : Int32 [In],paralevel : UInt8 [In],embeddinglevels : UInt8* [In],perrorcode : UErrorCode* [In]
  fun ubidi_setPara(pbidi : UBiDi*, text : UInt16*, length : Int32, paralevel : UInt8, embeddinglevels : UInt8*, perrorcode : UErrorCode*)

  # Params # pparabidi : UBiDi* [In],start : Int32 [In],limit : Int32 [In],plinebidi : UBiDi* [In],perrorcode : UErrorCode* [In]
  fun ubidi_setLine(pparabidi : UBiDi*, start : Int32, limit : Int32, plinebidi : UBiDi*, perrorcode : UErrorCode*)

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getDirection(pbidi : UBiDi*) : UBiDiDirection

  # Params # text : UInt16* [In],length : Int32 [In]
  fun ubidi_getBaseDirection(text : UInt16*, length : Int32) : UBiDiDirection

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getText(pbidi : UBiDi*) : UInt16*

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getLength(pbidi : UBiDi*) : Int32

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getParaLevel(pbidi : UBiDi*) : UInt8

  # Params # pbidi : UBiDi* [In]
  fun ubidi_countParagraphs(pbidi : UBiDi*) : Int32

  # Params # pbidi : UBiDi* [In],charindex : Int32 [In],pparastart : Int32* [In],pparalimit : Int32* [In],pparalevel : UInt8* [In],perrorcode : UErrorCode* [In]
  fun ubidi_getParagraph(pbidi : UBiDi*, charindex : Int32, pparastart : Int32*, pparalimit : Int32*, pparalevel : UInt8*, perrorcode : UErrorCode*) : Int32

  # Params # pbidi : UBiDi* [In],paraindex : Int32 [In],pparastart : Int32* [In],pparalimit : Int32* [In],pparalevel : UInt8* [In],perrorcode : UErrorCode* [In]
  fun ubidi_getParagraphByIndex(pbidi : UBiDi*, paraindex : Int32, pparastart : Int32*, pparalimit : Int32*, pparalevel : UInt8*, perrorcode : UErrorCode*)

  # Params # pbidi : UBiDi* [In],charindex : Int32 [In]
  fun ubidi_getLevelAt(pbidi : UBiDi*, charindex : Int32) : UInt8

  # Params # pbidi : UBiDi* [In],perrorcode : UErrorCode* [In]
  fun ubidi_getLevels(pbidi : UBiDi*, perrorcode : UErrorCode*) : UInt8*

  # Params # pbidi : UBiDi* [In],logicalposition : Int32 [In],plogicallimit : Int32* [In],plevel : UInt8* [In]
  fun ubidi_getLogicalRun(pbidi : UBiDi*, logicalposition : Int32, plogicallimit : Int32*, plevel : UInt8*)

  # Params # pbidi : UBiDi* [In],perrorcode : UErrorCode* [In]
  fun ubidi_countRuns(pbidi : UBiDi*, perrorcode : UErrorCode*) : Int32

  # Params # pbidi : UBiDi* [In],runindex : Int32 [In],plogicalstart : Int32* [In],plength : Int32* [In]
  fun ubidi_getVisualRun(pbidi : UBiDi*, runindex : Int32, plogicalstart : Int32*, plength : Int32*) : UBiDiDirection

  # Params # pbidi : UBiDi* [In],logicalindex : Int32 [In],perrorcode : UErrorCode* [In]
  fun ubidi_getVisualIndex(pbidi : UBiDi*, logicalindex : Int32, perrorcode : UErrorCode*) : Int32

  # Params # pbidi : UBiDi* [In],visualindex : Int32 [In],perrorcode : UErrorCode* [In]
  fun ubidi_getLogicalIndex(pbidi : UBiDi*, visualindex : Int32, perrorcode : UErrorCode*) : Int32

  # Params # pbidi : UBiDi* [In],indexmap : Int32* [In],perrorcode : UErrorCode* [In]
  fun ubidi_getLogicalMap(pbidi : UBiDi*, indexmap : Int32*, perrorcode : UErrorCode*)

  # Params # pbidi : UBiDi* [In],indexmap : Int32* [In],perrorcode : UErrorCode* [In]
  fun ubidi_getVisualMap(pbidi : UBiDi*, indexmap : Int32*, perrorcode : UErrorCode*)

  # Params # levels : UInt8* [In],length : Int32 [In],indexmap : Int32* [In]
  fun ubidi_reorderLogical(levels : UInt8*, length : Int32, indexmap : Int32*)

  # Params # levels : UInt8* [In],length : Int32 [In],indexmap : Int32* [In]
  fun ubidi_reorderVisual(levels : UInt8*, length : Int32, indexmap : Int32*)

  # Params # srcmap : Int32* [In],destmap : Int32* [In],length : Int32 [In]
  fun ubidi_invertMap(srcmap : Int32*, destmap : Int32*, length : Int32)

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getProcessedLength(pbidi : UBiDi*) : Int32

  # Params # pbidi : UBiDi* [In]
  fun ubidi_getResultLength(pbidi : UBiDi*) : Int32

  # Params # pbidi : UBiDi* [In],c : Int32 [In]
  fun ubidi_getCustomizedClass(pbidi : UBiDi*, c : Int32) : UCharDirection

  # Params # pbidi : UBiDi* [In],newfn : UBiDiClassCallback [In],newcontext : Void* [In],oldfn : UBiDiClassCallback* [In],oldcontext : Void** [In],perrorcode : UErrorCode* [In]
  fun ubidi_setClassCallback(pbidi : UBiDi*, newfn : UBiDiClassCallback, newcontext : Void*, oldfn : UBiDiClassCallback*, oldcontext : Void**, perrorcode : UErrorCode*)

  # Params # pbidi : UBiDi* [In],fn : UBiDiClassCallback* [In],context : Void** [In]
  fun ubidi_getClassCallback(pbidi : UBiDi*, fn : UBiDiClassCallback*, context : Void**)

  # Params # pbidi : UBiDi* [In],dest : UInt16* [In],destsize : Int32 [In],options : UInt16 [In],perrorcode : UErrorCode* [In]
  fun ubidi_writeReordered(pbidi : UBiDi*, dest : UInt16*, destsize : Int32, options : UInt16, perrorcode : UErrorCode*) : Int32

  # Params # src : UInt16* [In],srclength : Int32 [In],dest : UInt16* [In],destsize : Int32 [In],options : UInt16 [In],perrorcode : UErrorCode* [In]
  fun ubidi_writeReverse(src : UInt16*, srclength : Int32, dest : UInt16*, destsize : Int32, options : UInt16, perrorcode : UErrorCode*) : Int32

  # Params # pbiditransform : UBiDiTransform* [In],src : UInt16* [In],srclength : Int32 [In],dest : UInt16* [In],destsize : Int32 [In],inparalevel : UInt8 [In],inorder : UBiDiOrder [In],outparalevel : UInt8 [In],outorder : UBiDiOrder [In],domirroring : UBiDiMirroring [In],shapingoptions : UInt32 [In],perrorcode : UErrorCode* [In]
  fun ubiditransform_transform(pbiditransform : UBiDiTransform*, src : UInt16*, srclength : Int32, dest : UInt16*, destsize : Int32, inparalevel : UInt8, inorder : UBiDiOrder, outparalevel : UInt8, outorder : UBiDiOrder, domirroring : UBiDiMirroring, shapingoptions : UInt32, perrorcode : UErrorCode*) : UInt32

  # Params # perrorcode : UErrorCode* [In]
  fun ubiditransform_open(perrorcode : UErrorCode*) : UBiDiTransform*

  # Params # pbiditransform : UBiDiTransform* [In]
  fun ubiditransform_close(pbiditransform : UBiDiTransform*)

  # Params # ut : UText* [In]
  fun utext_close(ut : UText*) : UText*

  # Params # ut : UText* [In],s : PSTR [In],length : Int64 [In],status : UErrorCode* [In]
  fun utext_openUTF8(ut : UText*, s : PSTR, length : Int64, status : UErrorCode*) : UText*

  # Params # ut : UText* [In],s : UInt16* [In],length : Int64 [In],status : UErrorCode* [In]
  fun utext_openUChars(ut : UText*, s : UInt16*, length : Int64, status : UErrorCode*) : UText*

  # Params # dest : UText* [In],src : UText* [In],deep : Int8 [In],readonly : Int8 [In],status : UErrorCode* [In]
  fun utext_clone(dest : UText*, src : UText*, deep : Int8, readonly : Int8, status : UErrorCode*) : UText*

  # Params # a : UText* [In],b : UText* [In]
  fun utext_equals(a : UText*, b : UText*) : Int8

  # Params # ut : UText* [In]
  fun utext_nativeLength(ut : UText*) : Int64

  # Params # ut : UText* [In]
  fun utext_isLengthExpensive(ut : UText*) : Int8

  # Params # ut : UText* [In],nativeindex : Int64 [In]
  fun utext_char32At(ut : UText*, nativeindex : Int64) : Int32

  # Params # ut : UText* [In]
  fun utext_current32(ut : UText*) : Int32

  # Params # ut : UText* [In]
  fun utext_next32(ut : UText*) : Int32

  # Params # ut : UText* [In]
  fun utext_previous32(ut : UText*) : Int32

  # Params # ut : UText* [In],nativeindex : Int64 [In]
  fun utext_next32From(ut : UText*, nativeindex : Int64) : Int32

  # Params # ut : UText* [In],nativeindex : Int64 [In]
  fun utext_previous32From(ut : UText*, nativeindex : Int64) : Int32

  # Params # ut : UText* [In]
  fun utext_getNativeIndex(ut : UText*) : Int64

  # Params # ut : UText* [In],nativeindex : Int64 [In]
  fun utext_setNativeIndex(ut : UText*, nativeindex : Int64)

  # Params # ut : UText* [In],delta : Int32 [In]
  fun utext_moveIndex32(ut : UText*, delta : Int32) : Int8

  # Params # ut : UText* [In]
  fun utext_getPreviousNativeIndex(ut : UText*) : Int64

  # Params # ut : UText* [In],nativestart : Int64 [In],nativelimit : Int64 [In],dest : UInt16* [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun utext_extract(ut : UText*, nativestart : Int64, nativelimit : Int64, dest : UInt16*, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # ut : UText* [In]
  fun utext_isWritable(ut : UText*) : Int8

  # Params # ut : UText* [In]
  fun utext_hasMetaData(ut : UText*) : Int8

  # Params # ut : UText* [In],nativestart : Int64 [In],nativelimit : Int64 [In],replacementtext : UInt16* [In],replacementlength : Int32 [In],status : UErrorCode* [In]
  fun utext_replace(ut : UText*, nativestart : Int64, nativelimit : Int64, replacementtext : UInt16*, replacementlength : Int32, status : UErrorCode*) : Int32

  # Params # ut : UText* [In],nativestart : Int64 [In],nativelimit : Int64 [In],destindex : Int64 [In],move : Int8 [In],status : UErrorCode* [In]
  fun utext_copy(ut : UText*, nativestart : Int64, nativelimit : Int64, destindex : Int64, move : Int8, status : UErrorCode*)

  # Params # ut : UText* [In]
  fun utext_freeze(ut : UText*)

  # Params # ut : UText* [In],extraspace : Int32 [In],status : UErrorCode* [In]
  fun utext_setup(ut : UText*, extraspace : Int32, status : UErrorCode*) : UText*

  # Params # 
  fun uset_openEmpty : USet*

  # Params # start : Int32 [In],end : Int32 [In]
  fun uset_open(start : Int32, end : Int32) : USet*

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],ec : UErrorCode* [In]
  fun uset_openPattern(pattern : UInt16*, patternlength : Int32, ec : UErrorCode*) : USet*

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],options : UInt32 [In],ec : UErrorCode* [In]
  fun uset_openPatternOptions(pattern : UInt16*, patternlength : Int32, options : UInt32, ec : UErrorCode*) : USet*

  # Params # set : USet* [In]
  fun uset_close(set : USet*)

  # Params # set : USet* [In]
  fun uset_clone(set : USet*) : USet*

  # Params # set : USet* [In]
  fun uset_isFrozen(set : USet*) : Int8

  # Params # set : USet* [In]
  fun uset_freeze(set : USet*)

  # Params # set : USet* [In]
  fun uset_cloneAsThawed(set : USet*) : USet*

  # Params # set : USet* [In],start : Int32 [In],end : Int32 [In]
  fun uset_set(set : USet*, start : Int32, end : Int32)

  # Params # set : USet* [In],pattern : UInt16* [In],patternlength : Int32 [In],options : UInt32 [In],status : UErrorCode* [In]
  fun uset_applyPattern(set : USet*, pattern : UInt16*, patternlength : Int32, options : UInt32, status : UErrorCode*) : Int32

  # Params # set : USet* [In],prop : UProperty [In],value : Int32 [In],ec : UErrorCode* [In]
  fun uset_applyIntPropertyValue(set : USet*, prop : UProperty, value : Int32, ec : UErrorCode*)

  # Params # set : USet* [In],prop : UInt16* [In],proplength : Int32 [In],value : UInt16* [In],valuelength : Int32 [In],ec : UErrorCode* [In]
  fun uset_applyPropertyAlias(set : USet*, prop : UInt16*, proplength : Int32, value : UInt16*, valuelength : Int32, ec : UErrorCode*)

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],pos : Int32 [In]
  fun uset_resemblesPattern(pattern : UInt16*, patternlength : Int32, pos : Int32) : Int8

  # Params # set : USet* [In],result : UInt16* [In],resultcapacity : Int32 [In],escapeunprintable : Int8 [In],ec : UErrorCode* [In]
  fun uset_toPattern(set : USet*, result : UInt16*, resultcapacity : Int32, escapeunprintable : Int8, ec : UErrorCode*) : Int32

  # Params # set : USet* [In],c : Int32 [In]
  fun uset_add(set : USet*, c : Int32)

  # Params # set : USet* [In],additionalset : USet* [In]
  fun uset_addAll(set : USet*, additionalset : USet*)

  # Params # set : USet* [In],start : Int32 [In],end : Int32 [In]
  fun uset_addRange(set : USet*, start : Int32, end : Int32)

  # Params # set : USet* [In],str : UInt16* [In],strlen : Int32 [In]
  fun uset_addString(set : USet*, str : UInt16*, strlen : Int32)

  # Params # set : USet* [In],str : UInt16* [In],strlen : Int32 [In]
  fun uset_addAllCodePoints(set : USet*, str : UInt16*, strlen : Int32)

  # Params # set : USet* [In],c : Int32 [In]
  fun uset_remove(set : USet*, c : Int32)

  # Params # set : USet* [In],start : Int32 [In],end : Int32 [In]
  fun uset_removeRange(set : USet*, start : Int32, end : Int32)

  # Params # set : USet* [In],str : UInt16* [In],strlen : Int32 [In]
  fun uset_removeString(set : USet*, str : UInt16*, strlen : Int32)

  # Params # set : USet* [In],removeset : USet* [In]
  fun uset_removeAll(set : USet*, removeset : USet*)

  # Params # set : USet* [In],start : Int32 [In],end : Int32 [In]
  fun uset_retain(set : USet*, start : Int32, end : Int32)

  # Params # set : USet* [In],retain : USet* [In]
  fun uset_retainAll(set : USet*, retain : USet*)

  # Params # set : USet* [In]
  fun uset_compact(set : USet*)

  # Params # set : USet* [In]
  fun uset_complement(set : USet*)

  # Params # set : USet* [In],complement : USet* [In]
  fun uset_complementAll(set : USet*, complement : USet*)

  # Params # set : USet* [In]
  fun uset_clear(set : USet*)

  # Params # set : USet* [In],attributes : Int32 [In]
  fun uset_closeOver(set : USet*, attributes : Int32)

  # Params # set : USet* [In]
  fun uset_removeAllStrings(set : USet*)

  # Params # set : USet* [In]
  fun uset_isEmpty(set : USet*) : Int8

  # Params # set : USet* [In],c : Int32 [In]
  fun uset_contains(set : USet*, c : Int32) : Int8

  # Params # set : USet* [In],start : Int32 [In],end : Int32 [In]
  fun uset_containsRange(set : USet*, start : Int32, end : Int32) : Int8

  # Params # set : USet* [In],str : UInt16* [In],strlen : Int32 [In]
  fun uset_containsString(set : USet*, str : UInt16*, strlen : Int32) : Int8

  # Params # set : USet* [In],c : Int32 [In]
  fun uset_indexOf(set : USet*, c : Int32) : Int32

  # Params # set : USet* [In],charindex : Int32 [In]
  fun uset_charAt(set : USet*, charindex : Int32) : Int32

  # Params # set : USet* [In]
  fun uset_size(set : USet*) : Int32

  # Params # set : USet* [In]
  fun uset_getItemCount(set : USet*) : Int32

  # Params # set : USet* [In],itemindex : Int32 [In],start : Int32* [In],end : Int32* [In],str : UInt16* [In],strcapacity : Int32 [In],ec : UErrorCode* [In]
  fun uset_getItem(set : USet*, itemindex : Int32, start : Int32*, end : Int32*, str : UInt16*, strcapacity : Int32, ec : UErrorCode*) : Int32

  # Params # set1 : USet* [In],set2 : USet* [In]
  fun uset_containsAll(set1 : USet*, set2 : USet*) : Int8

  # Params # set : USet* [In],str : UInt16* [In],strlen : Int32 [In]
  fun uset_containsAllCodePoints(set : USet*, str : UInt16*, strlen : Int32) : Int8

  # Params # set1 : USet* [In],set2 : USet* [In]
  fun uset_containsNone(set1 : USet*, set2 : USet*) : Int8

  # Params # set1 : USet* [In],set2 : USet* [In]
  fun uset_containsSome(set1 : USet*, set2 : USet*) : Int8

  # Params # set : USet* [In],s : UInt16* [In],length : Int32 [In],spancondition : USetSpanCondition [In]
  fun uset_span(set : USet*, s : UInt16*, length : Int32, spancondition : USetSpanCondition) : Int32

  # Params # set : USet* [In],s : UInt16* [In],length : Int32 [In],spancondition : USetSpanCondition [In]
  fun uset_spanBack(set : USet*, s : UInt16*, length : Int32, spancondition : USetSpanCondition) : Int32

  # Params # set : USet* [In],s : PSTR [In],length : Int32 [In],spancondition : USetSpanCondition [In]
  fun uset_spanUTF8(set : USet*, s : PSTR, length : Int32, spancondition : USetSpanCondition) : Int32

  # Params # set : USet* [In],s : PSTR [In],length : Int32 [In],spancondition : USetSpanCondition [In]
  fun uset_spanBackUTF8(set : USet*, s : PSTR, length : Int32, spancondition : USetSpanCondition) : Int32

  # Params # set1 : USet* [In],set2 : USet* [In]
  fun uset_equals(set1 : USet*, set2 : USet*) : Int8

  # Params # set : USet* [In],dest : UInt16* [In],destcapacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun uset_serialize(set : USet*, dest : UInt16*, destcapacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # fillset : USerializedSet* [In],src : UInt16* [In],srclength : Int32 [In]
  fun uset_getSerializedSet(fillset : USerializedSet*, src : UInt16*, srclength : Int32) : Int8

  # Params # fillset : USerializedSet* [In],c : Int32 [In]
  fun uset_setSerializedToOne(fillset : USerializedSet*, c : Int32)

  # Params # set : USerializedSet* [In],c : Int32 [In]
  fun uset_serializedContains(set : USerializedSet*, c : Int32) : Int8

  # Params # set : USerializedSet* [In]
  fun uset_getSerializedRangeCount(set : USerializedSet*) : Int32

  # Params # set : USerializedSet* [In],rangeindex : Int32 [In],pstart : Int32* [In],pend : Int32* [In]
  fun uset_getSerializedRange(set : USerializedSet*, rangeindex : Int32, pstart : Int32*, pend : Int32*) : Int8

  # Params # perrorcode : UErrorCode* [In]
  fun unorm2_getNFCInstance(perrorcode : UErrorCode*) : UNormalizer2*

  # Params # perrorcode : UErrorCode* [In]
  fun unorm2_getNFDInstance(perrorcode : UErrorCode*) : UNormalizer2*

  # Params # perrorcode : UErrorCode* [In]
  fun unorm2_getNFKCInstance(perrorcode : UErrorCode*) : UNormalizer2*

  # Params # perrorcode : UErrorCode* [In]
  fun unorm2_getNFKDInstance(perrorcode : UErrorCode*) : UNormalizer2*

  # Params # perrorcode : UErrorCode* [In]
  fun unorm2_getNFKCCasefoldInstance(perrorcode : UErrorCode*) : UNormalizer2*

  # Params # packagename : PSTR [In],name : PSTR [In],mode : UNormalization2Mode [In],perrorcode : UErrorCode* [In]
  fun unorm2_getInstance(packagename : PSTR, name : PSTR, mode : UNormalization2Mode, perrorcode : UErrorCode*) : UNormalizer2*

  # Params # norm2 : UNormalizer2* [In],filterset : USet* [In],perrorcode : UErrorCode* [In]
  fun unorm2_openFiltered(norm2 : UNormalizer2*, filterset : USet*, perrorcode : UErrorCode*) : UNormalizer2*

  # Params # norm2 : UNormalizer2* [In]
  fun unorm2_close(norm2 : UNormalizer2*)

  # Params # norm2 : UNormalizer2* [In],src : UInt16* [In],length : Int32 [In],dest : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_normalize(norm2 : UNormalizer2*, src : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # norm2 : UNormalizer2* [In],first : UInt16* [In],firstlength : Int32 [In],firstcapacity : Int32 [In],second : UInt16* [In],secondlength : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_normalizeSecondAndAppend(norm2 : UNormalizer2*, first : UInt16*, firstlength : Int32, firstcapacity : Int32, second : UInt16*, secondlength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # norm2 : UNormalizer2* [In],first : UInt16* [In],firstlength : Int32 [In],firstcapacity : Int32 [In],second : UInt16* [In],secondlength : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_append(norm2 : UNormalizer2*, first : UInt16*, firstlength : Int32, firstcapacity : Int32, second : UInt16*, secondlength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # norm2 : UNormalizer2* [In],c : Int32 [In],decomposition : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_getDecomposition(norm2 : UNormalizer2*, c : Int32, decomposition : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # norm2 : UNormalizer2* [In],c : Int32 [In],decomposition : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_getRawDecomposition(norm2 : UNormalizer2*, c : Int32, decomposition : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # norm2 : UNormalizer2* [In],a : Int32 [In],b : Int32 [In]
  fun unorm2_composePair(norm2 : UNormalizer2*, a : Int32, b : Int32) : Int32

  # Params # norm2 : UNormalizer2* [In],c : Int32 [In]
  fun unorm2_getCombiningClass(norm2 : UNormalizer2*, c : Int32) : UInt8

  # Params # norm2 : UNormalizer2* [In],s : UInt16* [In],length : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_isNormalized(norm2 : UNormalizer2*, s : UInt16*, length : Int32, perrorcode : UErrorCode*) : Int8

  # Params # norm2 : UNormalizer2* [In],s : UInt16* [In],length : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_quickCheck(norm2 : UNormalizer2*, s : UInt16*, length : Int32, perrorcode : UErrorCode*) : UNormalizationCheckResult

  # Params # norm2 : UNormalizer2* [In],s : UInt16* [In],length : Int32 [In],perrorcode : UErrorCode* [In]
  fun unorm2_spanQuickCheckYes(norm2 : UNormalizer2*, s : UInt16*, length : Int32, perrorcode : UErrorCode*) : Int32

  # Params # norm2 : UNormalizer2* [In],c : Int32 [In]
  fun unorm2_hasBoundaryBefore(norm2 : UNormalizer2*, c : Int32) : Int8

  # Params # norm2 : UNormalizer2* [In],c : Int32 [In]
  fun unorm2_hasBoundaryAfter(norm2 : UNormalizer2*, c : Int32) : Int8

  # Params # norm2 : UNormalizer2* [In],c : Int32 [In]
  fun unorm2_isInert(norm2 : UNormalizer2*, c : Int32) : Int8

  # Params # s1 : UInt16* [In],length1 : Int32 [In],s2 : UInt16* [In],length2 : Int32 [In],options : UInt32 [In],perrorcode : UErrorCode* [In]
  fun unorm_compare(s1 : UInt16*, length1 : Int32, s2 : UInt16*, length2 : Int32, options : UInt32, perrorcode : UErrorCode*) : Int32

  # Params # converterlist : Int8** [In],converterlistsize : Int32 [In],excludedcodepoints : USet* [In],whichset : UConverterUnicodeSet [In],status : UErrorCode* [In]
  fun ucnvsel_open(converterlist : Int8**, converterlistsize : Int32, excludedcodepoints : USet*, whichset : UConverterUnicodeSet, status : UErrorCode*) : UConverterSelector*

  # Params # sel : UConverterSelector* [In]
  fun ucnvsel_close(sel : UConverterSelector*)

  # Params # buffer : Void* [In],length : Int32 [In],status : UErrorCode* [In]
  fun ucnvsel_openFromSerialized(buffer : Void*, length : Int32, status : UErrorCode*) : UConverterSelector*

  # Params # sel : UConverterSelector* [In],buffer : Void* [In],buffercapacity : Int32 [In],status : UErrorCode* [In]
  fun ucnvsel_serialize(sel : UConverterSelector*, buffer : Void*, buffercapacity : Int32, status : UErrorCode*) : Int32

  # Params # sel : UConverterSelector* [In],s : UInt16* [In],length : Int32 [In],status : UErrorCode* [In]
  fun ucnvsel_selectForString(sel : UConverterSelector*, s : UInt16*, length : Int32, status : UErrorCode*) : UEnumeration*

  # Params # sel : UConverterSelector* [In],s : PSTR [In],length : Int32 [In],status : UErrorCode* [In]
  fun ucnvsel_selectForUTF8(sel : UConverterSelector*, s : PSTR, length : Int32, status : UErrorCode*) : UEnumeration*

  # Params # cs : PSTR [In],us : UInt16* [In],length : Int32 [In]
  fun u_charsToUChars(cs : PSTR, us : UInt16*, length : Int32)

  # Params # us : UInt16* [In],cs : PSTR [In],length : Int32 [In]
  fun u_UCharsToChars(us : UInt16*, cs : PSTR, length : Int32)

  # Params # s : UInt16* [In]
  fun u_strlen(s : UInt16*) : Int32

  # Params # s : UInt16* [In],length : Int32 [In]
  fun u_countChar32(s : UInt16*, length : Int32) : Int32

  # Params # s : UInt16* [In],length : Int32 [In],number : Int32 [In]
  fun u_strHasMoreChar32Than(s : UInt16*, length : Int32, number : Int32) : Int8

  # Params # dst : UInt16* [In],src : UInt16* [In]
  fun u_strcat(dst : UInt16*, src : UInt16*) : UInt16*

  # Params # dst : UInt16* [In],src : UInt16* [In],n : Int32 [In]
  fun u_strncat(dst : UInt16*, src : UInt16*, n : Int32) : UInt16*

  # Params # s : UInt16* [In],substring : UInt16* [In]
  fun u_strstr(s : UInt16*, substring : UInt16*) : UInt16*

  # Params # s : UInt16* [In],length : Int32 [In],substring : UInt16* [In],sublength : Int32 [In]
  fun u_strFindFirst(s : UInt16*, length : Int32, substring : UInt16*, sublength : Int32) : UInt16*

  # Params # s : UInt16* [In],c : UInt16 [In]
  fun u_strchr(s : UInt16*, c : UInt16) : UInt16*

  # Params # s : UInt16* [In],c : Int32 [In]
  fun u_strchr32(s : UInt16*, c : Int32) : UInt16*

  # Params # s : UInt16* [In],substring : UInt16* [In]
  fun u_strrstr(s : UInt16*, substring : UInt16*) : UInt16*

  # Params # s : UInt16* [In],length : Int32 [In],substring : UInt16* [In],sublength : Int32 [In]
  fun u_strFindLast(s : UInt16*, length : Int32, substring : UInt16*, sublength : Int32) : UInt16*

  # Params # s : UInt16* [In],c : UInt16 [In]
  fun u_strrchr(s : UInt16*, c : UInt16) : UInt16*

  # Params # s : UInt16* [In],c : Int32 [In]
  fun u_strrchr32(s : UInt16*, c : Int32) : UInt16*

  # Params # string : UInt16* [In],matchset : UInt16* [In]
  fun u_strpbrk(string : UInt16*, matchset : UInt16*) : UInt16*

  # Params # string : UInt16* [In],matchset : UInt16* [In]
  fun u_strcspn(string : UInt16*, matchset : UInt16*) : Int32

  # Params # string : UInt16* [In],matchset : UInt16* [In]
  fun u_strspn(string : UInt16*, matchset : UInt16*) : Int32

  # Params # src : UInt16* [In],delim : UInt16* [In],savestate : UInt16** [In]
  fun u_strtok_r(src : UInt16*, delim : UInt16*, savestate : UInt16**) : UInt16*

  # Params # s1 : UInt16* [In],s2 : UInt16* [In]
  fun u_strcmp(s1 : UInt16*, s2 : UInt16*) : Int32

  # Params # s1 : UInt16* [In],s2 : UInt16* [In]
  fun u_strcmpCodePointOrder(s1 : UInt16*, s2 : UInt16*) : Int32

  # Params # s1 : UInt16* [In],length1 : Int32 [In],s2 : UInt16* [In],length2 : Int32 [In],codepointorder : Int8 [In]
  fun u_strCompare(s1 : UInt16*, length1 : Int32, s2 : UInt16*, length2 : Int32, codepointorder : Int8) : Int32

  # Params # iter1 : UCharIterator* [In],iter2 : UCharIterator* [In],codepointorder : Int8 [In]
  fun u_strCompareIter(iter1 : UCharIterator*, iter2 : UCharIterator*, codepointorder : Int8) : Int32

  # Params # s1 : UInt16* [In],length1 : Int32 [In],s2 : UInt16* [In],length2 : Int32 [In],options : UInt32 [In],perrorcode : UErrorCode* [In]
  fun u_strCaseCompare(s1 : UInt16*, length1 : Int32, s2 : UInt16*, length2 : Int32, options : UInt32, perrorcode : UErrorCode*) : Int32

  # Params # ucs1 : UInt16* [In],ucs2 : UInt16* [In],n : Int32 [In]
  fun u_strncmp(ucs1 : UInt16*, ucs2 : UInt16*, n : Int32) : Int32

  # Params # s1 : UInt16* [In],s2 : UInt16* [In],n : Int32 [In]
  fun u_strncmpCodePointOrder(s1 : UInt16*, s2 : UInt16*, n : Int32) : Int32

  # Params # s1 : UInt16* [In],s2 : UInt16* [In],options : UInt32 [In]
  fun u_strcasecmp(s1 : UInt16*, s2 : UInt16*, options : UInt32) : Int32

  # Params # s1 : UInt16* [In],s2 : UInt16* [In],n : Int32 [In],options : UInt32 [In]
  fun u_strncasecmp(s1 : UInt16*, s2 : UInt16*, n : Int32, options : UInt32) : Int32

  # Params # s1 : UInt16* [In],s2 : UInt16* [In],length : Int32 [In],options : UInt32 [In]
  fun u_memcasecmp(s1 : UInt16*, s2 : UInt16*, length : Int32, options : UInt32) : Int32

  # Params # dst : UInt16* [In],src : UInt16* [In]
  fun u_strcpy(dst : UInt16*, src : UInt16*) : UInt16*

  # Params # dst : UInt16* [In],src : UInt16* [In],n : Int32 [In]
  fun u_strncpy(dst : UInt16*, src : UInt16*, n : Int32) : UInt16*

  # Params # dst : UInt16* [In],src : PSTR [In]
  fun u_uastrcpy(dst : UInt16*, src : PSTR) : UInt16*

  # Params # dst : UInt16* [In],src : PSTR [In],n : Int32 [In]
  fun u_uastrncpy(dst : UInt16*, src : PSTR, n : Int32) : UInt16*

  # Params # dst : PSTR [In],src : UInt16* [In]
  fun u_austrcpy(dst : PSTR, src : UInt16*) : PSTR

  # Params # dst : PSTR [In],src : UInt16* [In],n : Int32 [In]
  fun u_austrncpy(dst : PSTR, src : UInt16*, n : Int32) : PSTR

  # Params # dest : UInt16* [In],src : UInt16* [In],count : Int32 [In]
  fun u_memcpy(dest : UInt16*, src : UInt16*, count : Int32) : UInt16*

  # Params # dest : UInt16* [In],src : UInt16* [In],count : Int32 [In]
  fun u_memmove(dest : UInt16*, src : UInt16*, count : Int32) : UInt16*

  # Params # dest : UInt16* [In],c : UInt16 [In],count : Int32 [In]
  fun u_memset(dest : UInt16*, c : UInt16, count : Int32) : UInt16*

  # Params # buf1 : UInt16* [In],buf2 : UInt16* [In],count : Int32 [In]
  fun u_memcmp(buf1 : UInt16*, buf2 : UInt16*, count : Int32) : Int32

  # Params # s1 : UInt16* [In],s2 : UInt16* [In],count : Int32 [In]
  fun u_memcmpCodePointOrder(s1 : UInt16*, s2 : UInt16*, count : Int32) : Int32

  # Params # s : UInt16* [In],c : UInt16 [In],count : Int32 [In]
  fun u_memchr(s : UInt16*, c : UInt16, count : Int32) : UInt16*

  # Params # s : UInt16* [In],c : Int32 [In],count : Int32 [In]
  fun u_memchr32(s : UInt16*, c : Int32, count : Int32) : UInt16*

  # Params # s : UInt16* [In],c : UInt16 [In],count : Int32 [In]
  fun u_memrchr(s : UInt16*, c : UInt16, count : Int32) : UInt16*

  # Params # s : UInt16* [In],c : Int32 [In],count : Int32 [In]
  fun u_memrchr32(s : UInt16*, c : Int32, count : Int32) : UInt16*

  # Params # src : PSTR [In],dest : UInt16* [In],destcapacity : Int32 [In]
  fun u_unescape(src : PSTR, dest : UInt16*, destcapacity : Int32) : Int32

  # Params # charat : UNESCAPE_CHAR_AT [In],offset : Int32* [In],length : Int32 [In],context : Void* [In]
  fun u_unescapeAt(charat : UNESCAPE_CHAR_AT, offset : Int32*, length : Int32, context : Void*) : Int32

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],src : UInt16* [In],srclength : Int32 [In],locale : PSTR [In],perrorcode : UErrorCode* [In]
  fun u_strToUpper(dest : UInt16*, destcapacity : Int32, src : UInt16*, srclength : Int32, locale : PSTR, perrorcode : UErrorCode*) : Int32

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],src : UInt16* [In],srclength : Int32 [In],locale : PSTR [In],perrorcode : UErrorCode* [In]
  fun u_strToLower(dest : UInt16*, destcapacity : Int32, src : UInt16*, srclength : Int32, locale : PSTR, perrorcode : UErrorCode*) : Int32

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],src : UInt16* [In],srclength : Int32 [In],titleiter : UBreakIterator* [In],locale : PSTR [In],perrorcode : UErrorCode* [In]
  fun u_strToTitle(dest : UInt16*, destcapacity : Int32, src : UInt16*, srclength : Int32, titleiter : UBreakIterator*, locale : PSTR, perrorcode : UErrorCode*) : Int32

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],src : UInt16* [In],srclength : Int32 [In],options : UInt32 [In],perrorcode : UErrorCode* [In]
  fun u_strFoldCase(dest : UInt16*, destcapacity : Int32, src : UInt16*, srclength : Int32, options : UInt32, perrorcode : UErrorCode*) : Int32

  # Params # dest : LibC::LPWSTR [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : UInt16* [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strToWCS(dest : LibC::LPWSTR, destcapacity : Int32, pdestlength : Int32*, src : UInt16*, srclength : Int32, perrorcode : UErrorCode*) : LibC::LPWSTR

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : LibC::LPWSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strFromWCS(dest : UInt16*, destcapacity : Int32, pdestlength : Int32*, src : LibC::LPWSTR, srclength : Int32, perrorcode : UErrorCode*) : UInt16*

  # Params # dest : PSTR [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : UInt16* [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strToUTF8(dest : PSTR, destcapacity : Int32, pdestlength : Int32*, src : UInt16*, srclength : Int32, perrorcode : UErrorCode*) : PSTR

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : PSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strFromUTF8(dest : UInt16*, destcapacity : Int32, pdestlength : Int32*, src : PSTR, srclength : Int32, perrorcode : UErrorCode*) : UInt16*

  # Params # dest : PSTR [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : UInt16* [In],srclength : Int32 [In],subchar : Int32 [In],pnumsubstitutions : Int32* [In],perrorcode : UErrorCode* [In]
  fun u_strToUTF8WithSub(dest : PSTR, destcapacity : Int32, pdestlength : Int32*, src : UInt16*, srclength : Int32, subchar : Int32, pnumsubstitutions : Int32*, perrorcode : UErrorCode*) : PSTR

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : PSTR [In],srclength : Int32 [In],subchar : Int32 [In],pnumsubstitutions : Int32* [In],perrorcode : UErrorCode* [In]
  fun u_strFromUTF8WithSub(dest : UInt16*, destcapacity : Int32, pdestlength : Int32*, src : PSTR, srclength : Int32, subchar : Int32, pnumsubstitutions : Int32*, perrorcode : UErrorCode*) : UInt16*

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : PSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strFromUTF8Lenient(dest : UInt16*, destcapacity : Int32, pdestlength : Int32*, src : PSTR, srclength : Int32, perrorcode : UErrorCode*) : UInt16*

  # Params # dest : Int32* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : UInt16* [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strToUTF32(dest : Int32*, destcapacity : Int32, pdestlength : Int32*, src : UInt16*, srclength : Int32, perrorcode : UErrorCode*) : Int32*

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : Int32* [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strFromUTF32(dest : UInt16*, destcapacity : Int32, pdestlength : Int32*, src : Int32*, srclength : Int32, perrorcode : UErrorCode*) : UInt16*

  # Params # dest : Int32* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : UInt16* [In],srclength : Int32 [In],subchar : Int32 [In],pnumsubstitutions : Int32* [In],perrorcode : UErrorCode* [In]
  fun u_strToUTF32WithSub(dest : Int32*, destcapacity : Int32, pdestlength : Int32*, src : UInt16*, srclength : Int32, subchar : Int32, pnumsubstitutions : Int32*, perrorcode : UErrorCode*) : Int32*

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : Int32* [In],srclength : Int32 [In],subchar : Int32 [In],pnumsubstitutions : Int32* [In],perrorcode : UErrorCode* [In]
  fun u_strFromUTF32WithSub(dest : UInt16*, destcapacity : Int32, pdestlength : Int32*, src : Int32*, srclength : Int32, subchar : Int32, pnumsubstitutions : Int32*, perrorcode : UErrorCode*) : UInt16*

  # Params # dest : PSTR [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : UInt16* [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun u_strToJavaModifiedUTF8(dest : PSTR, destcapacity : Int32, pdestlength : Int32*, src : UInt16*, srclength : Int32, perrorcode : UErrorCode*) : PSTR

  # Params # dest : UInt16* [In],destcapacity : Int32 [In],pdestlength : Int32* [In],src : PSTR [In],srclength : Int32 [In],subchar : Int32 [In],pnumsubstitutions : Int32* [In],perrorcode : UErrorCode* [In]
  fun u_strFromJavaModifiedUTF8WithSub(dest : UInt16*, destcapacity : Int32, pdestlength : Int32*, src : PSTR, srclength : Int32, subchar : Int32, pnumsubstitutions : Int32*, perrorcode : UErrorCode*) : UInt16*

  # Params # locale : PSTR [In],options : UInt32 [In],perrorcode : UErrorCode* [In]
  fun ucasemap_open(locale : PSTR, options : UInt32, perrorcode : UErrorCode*) : UCaseMap*

  # Params # csm : UCaseMap* [In]
  fun ucasemap_close(csm : UCaseMap*)

  # Params # csm : UCaseMap* [In]
  fun ucasemap_getLocale(csm : UCaseMap*) : PSTR

  # Params # csm : UCaseMap* [In]
  fun ucasemap_getOptions(csm : UCaseMap*) : UInt32

  # Params # csm : UCaseMap* [In],locale : PSTR [In],perrorcode : UErrorCode* [In]
  fun ucasemap_setLocale(csm : UCaseMap*, locale : PSTR, perrorcode : UErrorCode*)

  # Params # csm : UCaseMap* [In],options : UInt32 [In],perrorcode : UErrorCode* [In]
  fun ucasemap_setOptions(csm : UCaseMap*, options : UInt32, perrorcode : UErrorCode*)

  # Params # csm : UCaseMap* [In]
  fun ucasemap_getBreakIterator(csm : UCaseMap*) : UBreakIterator*

  # Params # csm : UCaseMap* [In],itertoadopt : UBreakIterator* [In],perrorcode : UErrorCode* [In]
  fun ucasemap_setBreakIterator(csm : UCaseMap*, itertoadopt : UBreakIterator*, perrorcode : UErrorCode*)

  # Params # csm : UCaseMap* [In],dest : UInt16* [In],destcapacity : Int32 [In],src : UInt16* [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucasemap_toTitle(csm : UCaseMap*, dest : UInt16*, destcapacity : Int32, src : UInt16*, srclength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # csm : UCaseMap* [In],dest : PSTR [In],destcapacity : Int32 [In],src : PSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucasemap_utf8ToLower(csm : UCaseMap*, dest : PSTR, destcapacity : Int32, src : PSTR, srclength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # csm : UCaseMap* [In],dest : PSTR [In],destcapacity : Int32 [In],src : PSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucasemap_utf8ToUpper(csm : UCaseMap*, dest : PSTR, destcapacity : Int32, src : PSTR, srclength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # csm : UCaseMap* [In],dest : PSTR [In],destcapacity : Int32 [In],src : PSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucasemap_utf8ToTitle(csm : UCaseMap*, dest : PSTR, destcapacity : Int32, src : PSTR, srclength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # csm : UCaseMap* [In],dest : PSTR [In],destcapacity : Int32 [In],src : PSTR [In],srclength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucasemap_utf8FoldCase(csm : UCaseMap*, dest : PSTR, destcapacity : Int32, src : PSTR, srclength : Int32, perrorcode : UErrorCode*) : Int32

  # Params # path : PSTR [In],filename : PSTR [In],status : UErrorCode* [In]
  fun usprep_open(path : PSTR, filename : PSTR, status : UErrorCode*) : UStringPrepProfile*

  # Params # type : UStringPrepProfileType [In],status : UErrorCode* [In]
  fun usprep_openByType(type : UStringPrepProfileType, status : UErrorCode*) : UStringPrepProfile*

  # Params # profile : UStringPrepProfile* [In]
  fun usprep_close(profile : UStringPrepProfile*)

  # Params # prep : UStringPrepProfile* [In],src : UInt16* [In],srclength : Int32 [In],dest : UInt16* [In],destcapacity : Int32 [In],options : Int32 [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun usprep_prepare(prep : UStringPrepProfile*, src : UInt16*, srclength : Int32, dest : UInt16*, destcapacity : Int32, options : Int32, parseerror : UParseError*, status : UErrorCode*) : Int32

  # Params # options : UInt32 [In],perrorcode : UErrorCode* [In]
  fun uidna_openUTS46(options : UInt32, perrorcode : UErrorCode*) : UIDNA*

  # Params # idna : UIDNA* [In]
  fun uidna_close(idna : UIDNA*)

  # Params # idna : UIDNA* [In],label : UInt16* [In],length : Int32 [In],dest : UInt16* [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_labelToASCII(idna : UIDNA*, label : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # idna : UIDNA* [In],label : UInt16* [In],length : Int32 [In],dest : UInt16* [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_labelToUnicode(idna : UIDNA*, label : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # idna : UIDNA* [In],name : UInt16* [In],length : Int32 [In],dest : UInt16* [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_nameToASCII(idna : UIDNA*, name : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # idna : UIDNA* [In],name : UInt16* [In],length : Int32 [In],dest : UInt16* [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_nameToUnicode(idna : UIDNA*, name : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # idna : UIDNA* [In],label : PSTR [In],length : Int32 [In],dest : PSTR [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_labelToASCII_UTF8(idna : UIDNA*, label : PSTR, length : Int32, dest : PSTR, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # idna : UIDNA* [In],label : PSTR [In],length : Int32 [In],dest : PSTR [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_labelToUnicodeUTF8(idna : UIDNA*, label : PSTR, length : Int32, dest : PSTR, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # idna : UIDNA* [In],name : PSTR [In],length : Int32 [In],dest : PSTR [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_nameToASCII_UTF8(idna : UIDNA*, name : PSTR, length : Int32, dest : PSTR, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # idna : UIDNA* [In],name : PSTR [In],length : Int32 [In],dest : PSTR [In],capacity : Int32 [In],pinfo : UIDNAInfo* [In],perrorcode : UErrorCode* [In]
  fun uidna_nameToUnicodeUTF8(idna : UIDNA*, name : PSTR, length : Int32, dest : PSTR, capacity : Int32, pinfo : UIDNAInfo*, perrorcode : UErrorCode*) : Int32

  # Params # type : UBreakIteratorType [In],locale : PSTR [In],text : UInt16* [In],textlength : Int32 [In],status : UErrorCode* [In]
  fun ubrk_open(type : UBreakIteratorType, locale : PSTR, text : UInt16*, textlength : Int32, status : UErrorCode*) : UBreakIterator*

  # Params # rules : UInt16* [In],ruleslength : Int32 [In],text : UInt16* [In],textlength : Int32 [In],parseerr : UParseError* [In],status : UErrorCode* [In]
  fun ubrk_openRules(rules : UInt16*, ruleslength : Int32, text : UInt16*, textlength : Int32, parseerr : UParseError*, status : UErrorCode*) : UBreakIterator*

  # Params # binaryrules : UInt8* [In],ruleslength : Int32 [In],text : UInt16* [In],textlength : Int32 [In],status : UErrorCode* [In]
  fun ubrk_openBinaryRules(binaryrules : UInt8*, ruleslength : Int32, text : UInt16*, textlength : Int32, status : UErrorCode*) : UBreakIterator*

  # Params # bi : UBreakIterator* [In],stackbuffer : Void* [In],pbuffersize : Int32* [In],status : UErrorCode* [In]
  fun ubrk_safeClone(bi : UBreakIterator*, stackbuffer : Void*, pbuffersize : Int32*, status : UErrorCode*) : UBreakIterator*

  # Params # bi : UBreakIterator* [In]
  fun ubrk_close(bi : UBreakIterator*)

  # Params # bi : UBreakIterator* [In],text : UInt16* [In],textlength : Int32 [In],status : UErrorCode* [In]
  fun ubrk_setText(bi : UBreakIterator*, text : UInt16*, textlength : Int32, status : UErrorCode*)

  # Params # bi : UBreakIterator* [In],text : UText* [In],status : UErrorCode* [In]
  fun ubrk_setUText(bi : UBreakIterator*, text : UText*, status : UErrorCode*)

  # Params # bi : UBreakIterator* [In]
  fun ubrk_current(bi : UBreakIterator*) : Int32

  # Params # bi : UBreakIterator* [In]
  fun ubrk_next(bi : UBreakIterator*) : Int32

  # Params # bi : UBreakIterator* [In]
  fun ubrk_previous(bi : UBreakIterator*) : Int32

  # Params # bi : UBreakIterator* [In]
  fun ubrk_first(bi : UBreakIterator*) : Int32

  # Params # bi : UBreakIterator* [In]
  fun ubrk_last(bi : UBreakIterator*) : Int32

  # Params # bi : UBreakIterator* [In],offset : Int32 [In]
  fun ubrk_preceding(bi : UBreakIterator*, offset : Int32) : Int32

  # Params # bi : UBreakIterator* [In],offset : Int32 [In]
  fun ubrk_following(bi : UBreakIterator*, offset : Int32) : Int32

  # Params # index : Int32 [In]
  fun ubrk_getAvailable(index : Int32) : PSTR

  # Params # 
  fun ubrk_countAvailable : Int32

  # Params # bi : UBreakIterator* [In],offset : Int32 [In]
  fun ubrk_isBoundary(bi : UBreakIterator*, offset : Int32) : Int8

  # Params # bi : UBreakIterator* [In]
  fun ubrk_getRuleStatus(bi : UBreakIterator*) : Int32

  # Params # bi : UBreakIterator* [In],fillinvec : Int32* [In],capacity : Int32 [In],status : UErrorCode* [In]
  fun ubrk_getRuleStatusVec(bi : UBreakIterator*, fillinvec : Int32*, capacity : Int32, status : UErrorCode*) : Int32

  # Params # bi : UBreakIterator* [In],type : ULocDataLocaleType [In],status : UErrorCode* [In]
  fun ubrk_getLocaleByType(bi : UBreakIterator*, type : ULocDataLocaleType, status : UErrorCode*) : PSTR

  # Params # bi : UBreakIterator* [In],text : UText* [In],status : UErrorCode* [In]
  fun ubrk_refreshUText(bi : UBreakIterator*, text : UText*, status : UErrorCode*)

  # Params # bi : UBreakIterator* [In],binaryrules : UInt8* [In],rulescapacity : Int32 [In],status : UErrorCode* [In]
  fun ubrk_getBinaryRules(bi : UBreakIterator*, binaryrules : UInt8*, rulescapacity : Int32, status : UErrorCode*) : Int32

  # Params # dataversionfillin : UInt8* [In],status : UErrorCode* [In]
  fun u_getDataVersion(dataversionfillin : UInt8*, status : UErrorCode*)

  # Params # zonetype : USystemTimeZoneType [In],region : PSTR [In],rawoffset : Int32* [In],ec : UErrorCode* [In]
  fun ucal_openTimeZoneIDEnumeration(zonetype : USystemTimeZoneType, region : PSTR, rawoffset : Int32*, ec : UErrorCode*) : UEnumeration*

  # Params # ec : UErrorCode* [In]
  fun ucal_openTimeZones(ec : UErrorCode*) : UEnumeration*

  # Params # country : PSTR [In],ec : UErrorCode* [In]
  fun ucal_openCountryTimeZones(country : PSTR, ec : UErrorCode*) : UEnumeration*

  # Params # result : UInt16* [In],resultcapacity : Int32 [In],ec : UErrorCode* [In]
  fun ucal_getDefaultTimeZone(result : UInt16*, resultcapacity : Int32, ec : UErrorCode*) : Int32

  # Params # zoneid : UInt16* [In],ec : UErrorCode* [In]
  fun ucal_setDefaultTimeZone(zoneid : UInt16*, ec : UErrorCode*)

  # Params # result : UInt16* [In],resultcapacity : Int32 [In],ec : UErrorCode* [In]
  fun ucal_getHostTimeZone(result : UInt16*, resultcapacity : Int32, ec : UErrorCode*) : Int32

  # Params # zoneid : UInt16* [In],ec : UErrorCode* [In]
  fun ucal_getDSTSavings(zoneid : UInt16*, ec : UErrorCode*) : Int32

  # Params # 
  fun ucal_getNow : Float64

  # Params # zoneid : UInt16* [In],len : Int32 [In],locale : PSTR [In],type : UCalendarType [In],status : UErrorCode* [In]
  fun ucal_open(zoneid : UInt16*, len : Int32, locale : PSTR, type : UCalendarType, status : UErrorCode*) : Void**

  # Params # cal : Void** [In]
  fun ucal_close(cal : Void**)

  # Params # cal : Void** [In],status : UErrorCode* [In]
  fun ucal_clone(cal : Void**, status : UErrorCode*) : Void**

  # Params # cal : Void** [In],zoneid : UInt16* [In],len : Int32 [In],status : UErrorCode* [In]
  fun ucal_setTimeZone(cal : Void**, zoneid : UInt16*, len : Int32, status : UErrorCode*)

  # Params # cal : Void** [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun ucal_getTimeZoneID(cal : Void**, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # cal : Void** [In],type : UCalendarDisplayNameType [In],locale : PSTR [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun ucal_getTimeZoneDisplayName(cal : Void**, type : UCalendarDisplayNameType, locale : PSTR, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # cal : Void** [In],status : UErrorCode* [In]
  fun ucal_inDaylightTime(cal : Void**, status : UErrorCode*) : Int8

  # Params # cal : Void** [In],date : Float64 [In],perrorcode : UErrorCode* [In]
  fun ucal_setGregorianChange(cal : Void**, date : Float64, perrorcode : UErrorCode*)

  # Params # cal : Void** [In],perrorcode : UErrorCode* [In]
  fun ucal_getGregorianChange(cal : Void**, perrorcode : UErrorCode*) : Float64

  # Params # cal : Void** [In],attr : UCalendarAttribute [In]
  fun ucal_getAttribute(cal : Void**, attr : UCalendarAttribute) : Int32

  # Params # cal : Void** [In],attr : UCalendarAttribute [In],newvalue : Int32 [In]
  fun ucal_setAttribute(cal : Void**, attr : UCalendarAttribute, newvalue : Int32)

  # Params # localeindex : Int32 [In]
  fun ucal_getAvailable(localeindex : Int32) : PSTR

  # Params # 
  fun ucal_countAvailable : Int32

  # Params # cal : Void** [In],status : UErrorCode* [In]
  fun ucal_getMillis(cal : Void**, status : UErrorCode*) : Float64

  # Params # cal : Void** [In],datetime : Float64 [In],status : UErrorCode* [In]
  fun ucal_setMillis(cal : Void**, datetime : Float64, status : UErrorCode*)

  # Params # cal : Void** [In],year : Int32 [In],month : Int32 [In],date : Int32 [In],status : UErrorCode* [In]
  fun ucal_setDate(cal : Void**, year : Int32, month : Int32, date : Int32, status : UErrorCode*)

  # Params # cal : Void** [In],year : Int32 [In],month : Int32 [In],date : Int32 [In],hour : Int32 [In],minute : Int32 [In],second : Int32 [In],status : UErrorCode* [In]
  fun ucal_setDateTime(cal : Void**, year : Int32, month : Int32, date : Int32, hour : Int32, minute : Int32, second : Int32, status : UErrorCode*)

  # Params # cal1 : Void** [In],cal2 : Void** [In]
  fun ucal_equivalentTo(cal1 : Void**, cal2 : Void**) : Int8

  # Params # cal : Void** [In],field : UCalendarDateFields [In],amount : Int32 [In],status : UErrorCode* [In]
  fun ucal_add(cal : Void**, field : UCalendarDateFields, amount : Int32, status : UErrorCode*)

  # Params # cal : Void** [In],field : UCalendarDateFields [In],amount : Int32 [In],status : UErrorCode* [In]
  fun ucal_roll(cal : Void**, field : UCalendarDateFields, amount : Int32, status : UErrorCode*)

  # Params # cal : Void** [In],field : UCalendarDateFields [In],status : UErrorCode* [In]
  fun ucal_get(cal : Void**, field : UCalendarDateFields, status : UErrorCode*) : Int32

  # Params # cal : Void** [In],field : UCalendarDateFields [In],value : Int32 [In]
  fun ucal_set(cal : Void**, field : UCalendarDateFields, value : Int32)

  # Params # cal : Void** [In],field : UCalendarDateFields [In]
  fun ucal_isSet(cal : Void**, field : UCalendarDateFields) : Int8

  # Params # cal : Void** [In],field : UCalendarDateFields [In]
  fun ucal_clearField(cal : Void**, field : UCalendarDateFields)

  # Params # calendar : Void** [In]
  fun ucal_clear(calendar : Void**)

  # Params # cal : Void** [In],field : UCalendarDateFields [In],type : UCalendarLimitType [In],status : UErrorCode* [In]
  fun ucal_getLimit(cal : Void**, field : UCalendarDateFields, type : UCalendarLimitType, status : UErrorCode*) : Int32

  # Params # cal : Void** [In],type : ULocDataLocaleType [In],status : UErrorCode* [In]
  fun ucal_getLocaleByType(cal : Void**, type : ULocDataLocaleType, status : UErrorCode*) : PSTR

  # Params # status : UErrorCode* [In]
  fun ucal_getTZDataVersion(status : UErrorCode*) : PSTR

  # Params # id : UInt16* [In],len : Int32 [In],result : UInt16* [In],resultcapacity : Int32 [In],issystemid : Int8* [In],status : UErrorCode* [In]
  fun ucal_getCanonicalTimeZoneID(id : UInt16*, len : Int32, result : UInt16*, resultcapacity : Int32, issystemid : Int8*, status : UErrorCode*) : Int32

  # Params # cal : Void** [In],status : UErrorCode* [In]
  fun ucal_getType(cal : Void**, status : UErrorCode*) : PSTR

  # Params # key : PSTR [In],locale : PSTR [In],commonlyused : Int8 [In],status : UErrorCode* [In]
  fun ucal_getKeywordValuesForLocale(key : PSTR, locale : PSTR, commonlyused : Int8, status : UErrorCode*) : UEnumeration*

  # Params # cal : Void** [In],dayofweek : UCalendarDaysOfWeek [In],status : UErrorCode* [In]
  fun ucal_getDayOfWeekType(cal : Void**, dayofweek : UCalendarDaysOfWeek, status : UErrorCode*) : UCalendarWeekdayType

  # Params # cal : Void** [In],dayofweek : UCalendarDaysOfWeek [In],status : UErrorCode* [In]
  fun ucal_getWeekendTransition(cal : Void**, dayofweek : UCalendarDaysOfWeek, status : UErrorCode*) : Int32

  # Params # cal : Void** [In],date : Float64 [In],status : UErrorCode* [In]
  fun ucal_isWeekend(cal : Void**, date : Float64, status : UErrorCode*) : Int8

  # Params # cal : Void** [In],target : Float64 [In],field : UCalendarDateFields [In],status : UErrorCode* [In]
  fun ucal_getFieldDifference(cal : Void**, target : Float64, field : UCalendarDateFields, status : UErrorCode*) : Int32

  # Params # cal : Void** [In],type : UTimeZoneTransitionType [In],transition : Float64* [In],status : UErrorCode* [In]
  fun ucal_getTimeZoneTransitionDate(cal : Void**, type : UTimeZoneTransitionType, transition : Float64*, status : UErrorCode*) : Int8

  # Params # id : UInt16* [In],len : Int32 [In],winid : UInt16* [In],winidcapacity : Int32 [In],status : UErrorCode* [In]
  fun ucal_getWindowsTimeZoneID(id : UInt16*, len : Int32, winid : UInt16*, winidcapacity : Int32, status : UErrorCode*) : Int32

  # Params # winid : UInt16* [In],len : Int32 [In],region : PSTR [In],id : UInt16* [In],idcapacity : Int32 [In],status : UErrorCode* [In]
  fun ucal_getTimeZoneIDForWindowsID(winid : UInt16*, len : Int32, region : PSTR, id : UInt16*, idcapacity : Int32, status : UErrorCode*) : Int32

  # Params # loc : PSTR [In],status : UErrorCode* [In]
  fun ucol_open(loc : PSTR, status : UErrorCode*) : UCollator*

  # Params # rules : UInt16* [In],ruleslength : Int32 [In],normalizationmode : UColAttributeValue [In],strength : UColAttributeValue [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun ucol_openRules(rules : UInt16*, ruleslength : Int32, normalizationmode : UColAttributeValue, strength : UColAttributeValue, parseerror : UParseError*, status : UErrorCode*) : UCollator*

  # Params # coll : UCollator* [In],contractions : USet* [In],expansions : USet* [In],addprefixes : Int8 [In],status : UErrorCode* [In]
  fun ucol_getContractionsAndExpansions(coll : UCollator*, contractions : USet*, expansions : USet*, addprefixes : Int8, status : UErrorCode*)

  # Params # coll : UCollator* [In]
  fun ucol_close(coll : UCollator*)

  # Params # coll : UCollator* [In],source : UInt16* [In],sourcelength : Int32 [In],target : UInt16* [In],targetlength : Int32 [In]
  fun ucol_strcoll(coll : UCollator*, source : UInt16*, sourcelength : Int32, target : UInt16*, targetlength : Int32) : UCollationResult

  # Params # coll : UCollator* [In],source : PSTR [In],sourcelength : Int32 [In],target : PSTR [In],targetlength : Int32 [In],status : UErrorCode* [In]
  fun ucol_strcollUTF8(coll : UCollator*, source : PSTR, sourcelength : Int32, target : PSTR, targetlength : Int32, status : UErrorCode*) : UCollationResult

  # Params # coll : UCollator* [In],source : UInt16* [In],sourcelength : Int32 [In],target : UInt16* [In],targetlength : Int32 [In]
  fun ucol_greater(coll : UCollator*, source : UInt16*, sourcelength : Int32, target : UInt16*, targetlength : Int32) : Int8

  # Params # coll : UCollator* [In],source : UInt16* [In],sourcelength : Int32 [In],target : UInt16* [In],targetlength : Int32 [In]
  fun ucol_greaterOrEqual(coll : UCollator*, source : UInt16*, sourcelength : Int32, target : UInt16*, targetlength : Int32) : Int8

  # Params # coll : UCollator* [In],source : UInt16* [In],sourcelength : Int32 [In],target : UInt16* [In],targetlength : Int32 [In]
  fun ucol_equal(coll : UCollator*, source : UInt16*, sourcelength : Int32, target : UInt16*, targetlength : Int32) : Int8

  # Params # coll : UCollator* [In],siter : UCharIterator* [In],titer : UCharIterator* [In],status : UErrorCode* [In]
  fun ucol_strcollIter(coll : UCollator*, siter : UCharIterator*, titer : UCharIterator*, status : UErrorCode*) : UCollationResult

  # Params # coll : UCollator* [In]
  fun ucol_getStrength(coll : UCollator*) : UColAttributeValue

  # Params # coll : UCollator* [In],strength : UColAttributeValue [In]
  fun ucol_setStrength(coll : UCollator*, strength : UColAttributeValue)

  # Params # coll : UCollator* [In],dest : Int32* [In],destcapacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucol_getReorderCodes(coll : UCollator*, dest : Int32*, destcapacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # coll : UCollator* [In],reordercodes : Int32* [In],reordercodeslength : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucol_setReorderCodes(coll : UCollator*, reordercodes : Int32*, reordercodeslength : Int32, perrorcode : UErrorCode*)

  # Params # reordercode : Int32 [In],dest : Int32* [In],destcapacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun ucol_getEquivalentReorderCodes(reordercode : Int32, dest : Int32*, destcapacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # objloc : PSTR [In],disploc : PSTR [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun ucol_getDisplayName(objloc : PSTR, disploc : PSTR, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # localeindex : Int32 [In]
  fun ucol_getAvailable(localeindex : Int32) : PSTR

  # Params # 
  fun ucol_countAvailable : Int32

  # Params # status : UErrorCode* [In]
  fun ucol_openAvailableLocales(status : UErrorCode*) : UEnumeration*

  # Params # status : UErrorCode* [In]
  fun ucol_getKeywords(status : UErrorCode*) : UEnumeration*

  # Params # keyword : PSTR [In],status : UErrorCode* [In]
  fun ucol_getKeywordValues(keyword : PSTR, status : UErrorCode*) : UEnumeration*

  # Params # key : PSTR [In],locale : PSTR [In],commonlyused : Int8 [In],status : UErrorCode* [In]
  fun ucol_getKeywordValuesForLocale(key : PSTR, locale : PSTR, commonlyused : Int8, status : UErrorCode*) : UEnumeration*

  # Params # result : PSTR [In],resultcapacity : Int32 [In],keyword : PSTR [In],locale : PSTR [In],isavailable : Int8* [In],status : UErrorCode* [In]
  fun ucol_getFunctionalEquivalent(result : PSTR, resultcapacity : Int32, keyword : PSTR, locale : PSTR, isavailable : Int8*, status : UErrorCode*) : Int32

  # Params # coll : UCollator* [In],length : Int32* [In]
  fun ucol_getRules(coll : UCollator*, length : Int32*) : UInt16*

  # Params # coll : UCollator* [In],source : UInt16* [In],sourcelength : Int32 [In],result : UInt8* [In],resultlength : Int32 [In]
  fun ucol_getSortKey(coll : UCollator*, source : UInt16*, sourcelength : Int32, result : UInt8*, resultlength : Int32) : Int32

  # Params # coll : UCollator* [In],iter : UCharIterator* [In],state : UInt32* [In],dest : UInt8* [In],count : Int32 [In],status : UErrorCode* [In]
  fun ucol_nextSortKeyPart(coll : UCollator*, iter : UCharIterator*, state : UInt32*, dest : UInt8*, count : Int32, status : UErrorCode*) : Int32

  # Params # source : UInt8* [In],sourcelength : Int32 [In],boundtype : UColBoundMode [In],nooflevels : UInt32 [In],result : UInt8* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun ucol_getBound(source : UInt8*, sourcelength : Int32, boundtype : UColBoundMode, nooflevels : UInt32, result : UInt8*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # coll : UCollator* [In],info : UInt8* [In]
  fun ucol_getVersion(coll : UCollator*, info : UInt8*)

  # Params # coll : UCollator* [In],info : UInt8* [In]
  fun ucol_getUCAVersion(coll : UCollator*, info : UInt8*)

  # Params # src1 : UInt8* [In],src1length : Int32 [In],src2 : UInt8* [In],src2length : Int32 [In],dest : UInt8* [In],destcapacity : Int32 [In]
  fun ucol_mergeSortkeys(src1 : UInt8*, src1length : Int32, src2 : UInt8*, src2length : Int32, dest : UInt8*, destcapacity : Int32) : Int32

  # Params # coll : UCollator* [In],attr : UColAttribute [In],value : UColAttributeValue [In],status : UErrorCode* [In]
  fun ucol_setAttribute(coll : UCollator*, attr : UColAttribute, value : UColAttributeValue, status : UErrorCode*)

  # Params # coll : UCollator* [In],attr : UColAttribute [In],status : UErrorCode* [In]
  fun ucol_getAttribute(coll : UCollator*, attr : UColAttribute, status : UErrorCode*) : UColAttributeValue

  # Params # coll : UCollator* [In],group : UColReorderCode [In],perrorcode : UErrorCode* [In]
  fun ucol_setMaxVariable(coll : UCollator*, group : UColReorderCode, perrorcode : UErrorCode*)

  # Params # coll : UCollator* [In]
  fun ucol_getMaxVariable(coll : UCollator*) : UColReorderCode

  # Params # coll : UCollator* [In],status : UErrorCode* [In]
  fun ucol_getVariableTop(coll : UCollator*, status : UErrorCode*) : UInt32

  # Params # coll : UCollator* [In],stackbuffer : Void* [In],pbuffersize : Int32* [In],status : UErrorCode* [In]
  fun ucol_safeClone(coll : UCollator*, stackbuffer : Void*, pbuffersize : Int32*, status : UErrorCode*) : UCollator*

  # Params # coll : UCollator* [In],delta : UColRuleOption [In],buffer : UInt16* [In],bufferlen : Int32 [In]
  fun ucol_getRulesEx(coll : UCollator*, delta : UColRuleOption, buffer : UInt16*, bufferlen : Int32) : Int32

  # Params # coll : UCollator* [In],type : ULocDataLocaleType [In],status : UErrorCode* [In]
  fun ucol_getLocaleByType(coll : UCollator*, type : ULocDataLocaleType, status : UErrorCode*) : PSTR

  # Params # coll : UCollator* [In],status : UErrorCode* [In]
  fun ucol_getTailoredSet(coll : UCollator*, status : UErrorCode*) : USet*

  # Params # coll : UCollator* [In],buffer : UInt8* [In],capacity : Int32 [In],status : UErrorCode* [In]
  fun ucol_cloneBinary(coll : UCollator*, buffer : UInt8*, capacity : Int32, status : UErrorCode*) : Int32

  # Params # bin : UInt8* [In],length : Int32 [In],base : UCollator* [In],status : UErrorCode* [In]
  fun ucol_openBinary(bin : UInt8*, length : Int32, base : UCollator*, status : UErrorCode*) : UCollator*

  # Params # coll : UCollator* [In],text : UInt16* [In],textlength : Int32 [In],status : UErrorCode* [In]
  fun ucol_openElements(coll : UCollator*, text : UInt16*, textlength : Int32, status : UErrorCode*) : UCollationElements*

  # Params # key : UInt8* [In],length : Int32 [In]
  fun ucol_keyHashCode(key : UInt8*, length : Int32) : Int32

  # Params # elems : UCollationElements* [In]
  fun ucol_closeElements(elems : UCollationElements*)

  # Params # elems : UCollationElements* [In]
  fun ucol_reset(elems : UCollationElements*)

  # Params # elems : UCollationElements* [In],status : UErrorCode* [In]
  fun ucol_next(elems : UCollationElements*, status : UErrorCode*) : Int32

  # Params # elems : UCollationElements* [In],status : UErrorCode* [In]
  fun ucol_previous(elems : UCollationElements*, status : UErrorCode*) : Int32

  # Params # elems : UCollationElements* [In],order : Int32 [In]
  fun ucol_getMaxExpansion(elems : UCollationElements*, order : Int32) : Int32

  # Params # elems : UCollationElements* [In],text : UInt16* [In],textlength : Int32 [In],status : UErrorCode* [In]
  fun ucol_setText(elems : UCollationElements*, text : UInt16*, textlength : Int32, status : UErrorCode*)

  # Params # elems : UCollationElements* [In]
  fun ucol_getOffset(elems : UCollationElements*) : Int32

  # Params # elems : UCollationElements* [In],offset : Int32 [In],status : UErrorCode* [In]
  fun ucol_setOffset(elems : UCollationElements*, offset : Int32, status : UErrorCode*)

  # Params # order : Int32 [In]
  fun ucol_primaryOrder(order : Int32) : Int32

  # Params # order : Int32 [In]
  fun ucol_secondaryOrder(order : Int32) : Int32

  # Params # order : Int32 [In]
  fun ucol_tertiaryOrder(order : Int32) : Int32

  # Params # status : UErrorCode* [In]
  fun ucsdet_open(status : UErrorCode*) : UCharsetDetector*

  # Params # ucsd : UCharsetDetector* [In]
  fun ucsdet_close(ucsd : UCharsetDetector*)

  # Params # ucsd : UCharsetDetector* [In],textin : PSTR [In],len : Int32 [In],status : UErrorCode* [In]
  fun ucsdet_setText(ucsd : UCharsetDetector*, textin : PSTR, len : Int32, status : UErrorCode*)

  # Params # ucsd : UCharsetDetector* [In],encoding : PSTR [In],length : Int32 [In],status : UErrorCode* [In]
  fun ucsdet_setDeclaredEncoding(ucsd : UCharsetDetector*, encoding : PSTR, length : Int32, status : UErrorCode*)

  # Params # ucsd : UCharsetDetector* [In],status : UErrorCode* [In]
  fun ucsdet_detect(ucsd : UCharsetDetector*, status : UErrorCode*) : UCharsetMatch*

  # Params # ucsd : UCharsetDetector* [In],matchesfound : Int32* [In],status : UErrorCode* [In]
  fun ucsdet_detectAll(ucsd : UCharsetDetector*, matchesfound : Int32*, status : UErrorCode*) : UCharsetMatch**

  # Params # ucsm : UCharsetMatch* [In],status : UErrorCode* [In]
  fun ucsdet_getName(ucsm : UCharsetMatch*, status : UErrorCode*) : PSTR

  # Params # ucsm : UCharsetMatch* [In],status : UErrorCode* [In]
  fun ucsdet_getConfidence(ucsm : UCharsetMatch*, status : UErrorCode*) : Int32

  # Params # ucsm : UCharsetMatch* [In],status : UErrorCode* [In]
  fun ucsdet_getLanguage(ucsm : UCharsetMatch*, status : UErrorCode*) : PSTR

  # Params # ucsm : UCharsetMatch* [In],buf : UInt16* [In],cap : Int32 [In],status : UErrorCode* [In]
  fun ucsdet_getUChars(ucsm : UCharsetMatch*, buf : UInt16*, cap : Int32, status : UErrorCode*) : Int32

  # Params # ucsd : UCharsetDetector* [In],status : UErrorCode* [In]
  fun ucsdet_getAllDetectableCharsets(ucsd : UCharsetDetector*, status : UErrorCode*) : UEnumeration*

  # Params # ucsd : UCharsetDetector* [In]
  fun ucsdet_isInputFilterEnabled(ucsd : UCharsetDetector*) : Int8

  # Params # ucsd : UCharsetDetector* [In],filter : Int8 [In]
  fun ucsdet_enableInputFilter(ucsd : UCharsetDetector*, filter : Int8) : Int8

  # Params # status : UErrorCode* [In]
  fun ufieldpositer_open(status : UErrorCode*) : UFieldPositionIterator*

  # Params # fpositer : UFieldPositionIterator* [In]
  fun ufieldpositer_close(fpositer : UFieldPositionIterator*)

  # Params # fpositer : UFieldPositionIterator* [In],beginindex : Int32* [In],endindex : Int32* [In]
  fun ufieldpositer_next(fpositer : UFieldPositionIterator*, beginindex : Int32*, endindex : Int32*) : Int32

  # Params # status : UErrorCode* [In]
  fun ufmt_open(status : UErrorCode*) : Void**

  # Params # fmt : Void** [In]
  fun ufmt_close(fmt : Void**)

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun ufmt_getType(fmt : Void**, status : UErrorCode*) : UFormattableType

  # Params # fmt : Void** [In]
  fun ufmt_isNumeric(fmt : Void**) : Int8

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun ufmt_getDate(fmt : Void**, status : UErrorCode*) : Float64

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun ufmt_getDouble(fmt : Void**, status : UErrorCode*) : Float64

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun ufmt_getLong(fmt : Void**, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun ufmt_getInt64(fmt : Void**, status : UErrorCode*) : Int64

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun ufmt_getObject(fmt : Void**, status : UErrorCode*) : Void*

  # Params # fmt : Void** [In],len : Int32* [In],status : UErrorCode* [In]
  fun ufmt_getUChars(fmt : Void**, len : Int32*, status : UErrorCode*) : UInt16*

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun ufmt_getArrayLength(fmt : Void**, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],n : Int32 [In],status : UErrorCode* [In]
  fun ufmt_getArrayItemByIndex(fmt : Void**, n : Int32, status : UErrorCode*) : Void**

  # Params # fmt : Void** [In],len : Int32* [In],status : UErrorCode* [In]
  fun ufmt_getDecNumChars(fmt : Void**, len : Int32*, status : UErrorCode*) : PSTR

  # Params # ec : UErrorCode* [In]
  fun ucfpos_open(ec : UErrorCode*) : UConstrainedFieldPosition*

  # Params # ucfpos : UConstrainedFieldPosition* [In],ec : UErrorCode* [In]
  fun ucfpos_reset(ucfpos : UConstrainedFieldPosition*, ec : UErrorCode*)

  # Params # ucfpos : UConstrainedFieldPosition* [In]
  fun ucfpos_close(ucfpos : UConstrainedFieldPosition*)

  # Params # ucfpos : UConstrainedFieldPosition* [In],category : Int32 [In],ec : UErrorCode* [In]
  fun ucfpos_constrainCategory(ucfpos : UConstrainedFieldPosition*, category : Int32, ec : UErrorCode*)

  # Params # ucfpos : UConstrainedFieldPosition* [In],category : Int32 [In],field : Int32 [In],ec : UErrorCode* [In]
  fun ucfpos_constrainField(ucfpos : UConstrainedFieldPosition*, category : Int32, field : Int32, ec : UErrorCode*)

  # Params # ucfpos : UConstrainedFieldPosition* [In],ec : UErrorCode* [In]
  fun ucfpos_getCategory(ucfpos : UConstrainedFieldPosition*, ec : UErrorCode*) : Int32

  # Params # ucfpos : UConstrainedFieldPosition* [In],ec : UErrorCode* [In]
  fun ucfpos_getField(ucfpos : UConstrainedFieldPosition*, ec : UErrorCode*) : Int32

  # Params # ucfpos : UConstrainedFieldPosition* [In],pstart : Int32* [In],plimit : Int32* [In],ec : UErrorCode* [In]
  fun ucfpos_getIndexes(ucfpos : UConstrainedFieldPosition*, pstart : Int32*, plimit : Int32*, ec : UErrorCode*)

  # Params # ucfpos : UConstrainedFieldPosition* [In],ec : UErrorCode* [In]
  fun ucfpos_getInt64IterationContext(ucfpos : UConstrainedFieldPosition*, ec : UErrorCode*) : Int64

  # Params # ucfpos : UConstrainedFieldPosition* [In],context : Int64 [In],ec : UErrorCode* [In]
  fun ucfpos_setInt64IterationContext(ucfpos : UConstrainedFieldPosition*, context : Int64, ec : UErrorCode*)

  # Params # ucfpos : UConstrainedFieldPosition* [In],category : Int32 [In],field : Int32 [In],ec : UErrorCode* [In]
  fun ucfpos_matchesField(ucfpos : UConstrainedFieldPosition*, category : Int32, field : Int32, ec : UErrorCode*) : Int8

  # Params # ucfpos : UConstrainedFieldPosition* [In],category : Int32 [In],field : Int32 [In],start : Int32 [In],limit : Int32 [In],ec : UErrorCode* [In]
  fun ucfpos_setState(ucfpos : UConstrainedFieldPosition*, category : Int32, field : Int32, start : Int32, limit : Int32, ec : UErrorCode*)

  # Params # ufmtval : UFormattedValue* [In],plength : Int32* [In],ec : UErrorCode* [In]
  fun ufmtval_getString(ufmtval : UFormattedValue*, plength : Int32*, ec : UErrorCode*) : UInt16*

  # Params # ufmtval : UFormattedValue* [In],ucfpos : UConstrainedFieldPosition* [In],ec : UErrorCode* [In]
  fun ufmtval_nextPosition(ufmtval : UFormattedValue*, ucfpos : UConstrainedFieldPosition*, ec : UErrorCode*) : Int8

  # Params # locale : PSTR [In],skeleton : UInt16* [In],skeletonlength : Int32 [In],tzid : UInt16* [In],tzidlength : Int32 [In],status : UErrorCode* [In]
  fun udtitvfmt_open(locale : PSTR, skeleton : UInt16*, skeletonlength : Int32, tzid : UInt16*, tzidlength : Int32, status : UErrorCode*) : UDateIntervalFormat*

  # Params # formatter : UDateIntervalFormat* [In]
  fun udtitvfmt_close(formatter : UDateIntervalFormat*)

  # Params # ec : UErrorCode* [In]
  fun udtitvfmt_openResult(ec : UErrorCode*) : UFormattedDateInterval*

  # Params # uresult : UFormattedDateInterval* [In],ec : UErrorCode* [In]
  fun udtitvfmt_resultAsValue(uresult : UFormattedDateInterval*, ec : UErrorCode*) : UFormattedValue*

  # Params # uresult : UFormattedDateInterval* [In]
  fun udtitvfmt_closeResult(uresult : UFormattedDateInterval*)

  # Params # formatter : UDateIntervalFormat* [In],fromdate : Float64 [In],todate : Float64 [In],result : UInt16* [In],resultcapacity : Int32 [In],position : UFieldPosition* [In],status : UErrorCode* [In]
  fun udtitvfmt_format(formatter : UDateIntervalFormat*, fromdate : Float64, todate : Float64, result : UInt16*, resultcapacity : Int32, position : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],status : UErrorCode* [In]
  fun ugender_getInstance(locale : PSTR, status : UErrorCode*) : UGenderInfo*

  # Params # genderinfo : UGenderInfo* [In],genders : UGender* [In],size : Int32 [In],status : UErrorCode* [In]
  fun ugender_getListGender(genderinfo : UGenderInfo*, genders : UGender*, size : Int32, status : UErrorCode*) : UGender

  # Params # locale : PSTR [In],status : UErrorCode* [In]
  fun ulistfmt_open(locale : PSTR, status : UErrorCode*) : UListFormatter*

  # Params # locale : PSTR [In],type : UListFormatterType [In],width : UListFormatterWidth [In],status : UErrorCode* [In]
  fun ulistfmt_openForType(locale : PSTR, type : UListFormatterType, width : UListFormatterWidth, status : UErrorCode*) : UListFormatter*

  # Params # listfmt : UListFormatter* [In]
  fun ulistfmt_close(listfmt : UListFormatter*)

  # Params # ec : UErrorCode* [In]
  fun ulistfmt_openResult(ec : UErrorCode*) : UFormattedList*

  # Params # uresult : UFormattedList* [In],ec : UErrorCode* [In]
  fun ulistfmt_resultAsValue(uresult : UFormattedList*, ec : UErrorCode*) : UFormattedValue*

  # Params # uresult : UFormattedList* [In]
  fun ulistfmt_closeResult(uresult : UFormattedList*)

  # Params # listfmt : UListFormatter* [In],strings : UInt16** [In],stringlengths : Int32* [In],stringcount : Int32 [In],result : UInt16* [In],resultcapacity : Int32 [In],status : UErrorCode* [In]
  fun ulistfmt_format(listfmt : UListFormatter*, strings : UInt16**, stringlengths : Int32*, stringcount : Int32, result : UInt16*, resultcapacity : Int32, status : UErrorCode*) : Int32

  # Params # listfmt : UListFormatter* [In],strings : UInt16** [In],stringlengths : Int32* [In],stringcount : Int32 [In],uresult : UFormattedList* [In],status : UErrorCode* [In]
  fun ulistfmt_formatStringsToResult(listfmt : UListFormatter*, strings : UInt16**, stringlengths : Int32*, stringcount : Int32, uresult : UFormattedList*, status : UErrorCode*)

  # Params # localeid : PSTR [In],status : UErrorCode* [In]
  fun ulocdata_open(localeid : PSTR, status : UErrorCode*) : ULocaleData*

  # Params # uld : ULocaleData* [In]
  fun ulocdata_close(uld : ULocaleData*)

  # Params # uld : ULocaleData* [In],setting : Int8 [In]
  fun ulocdata_setNoSubstitute(uld : ULocaleData*, setting : Int8)

  # Params # uld : ULocaleData* [In]
  fun ulocdata_getNoSubstitute(uld : ULocaleData*) : Int8

  # Params # uld : ULocaleData* [In],fillin : USet* [In],options : UInt32 [In],extype : ULocaleDataExemplarSetType [In],status : UErrorCode* [In]
  fun ulocdata_getExemplarSet(uld : ULocaleData*, fillin : USet*, options : UInt32, extype : ULocaleDataExemplarSetType, status : UErrorCode*) : USet*

  # Params # uld : ULocaleData* [In],type : ULocaleDataDelimiterType [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun ulocdata_getDelimiter(uld : ULocaleData*, type : ULocaleDataDelimiterType, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # localeid : PSTR [In],status : UErrorCode* [In]
  fun ulocdata_getMeasurementSystem(localeid : PSTR, status : UErrorCode*) : UMeasurementSystem

  # Params # localeid : PSTR [In],height : Int32* [In],width : Int32* [In],status : UErrorCode* [In]
  fun ulocdata_getPaperSize(localeid : PSTR, height : Int32*, width : Int32*, status : UErrorCode*)

  # Params # versionarray : UInt8* [In],status : UErrorCode* [In]
  fun ulocdata_getCLDRVersion(versionarray : UInt8*, status : UErrorCode*)

  # Params # uld : ULocaleData* [In],pattern : UInt16* [In],patterncapacity : Int32 [In],status : UErrorCode* [In]
  fun ulocdata_getLocaleDisplayPattern(uld : ULocaleData*, pattern : UInt16*, patterncapacity : Int32, status : UErrorCode*) : Int32

  # Params # uld : ULocaleData* [In],separator : UInt16* [In],separatorcapacity : Int32 [In],status : UErrorCode* [In]
  fun ulocdata_getLocaleSeparator(uld : ULocaleData*, separator : UInt16*, separatorcapacity : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun u_formatMessage(locale : PSTR, pattern : UInt16*, patternlength : Int32, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],result : UInt16* [In],resultlength : Int32 [In],ap : Int8* [In],status : UErrorCode* [In]
  fun u_vformatMessage(locale : PSTR, pattern : UInt16*, patternlength : Int32, result : UInt16*, resultlength : Int32, ap : Int8*, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],source : UInt16* [In],sourcelength : Int32 [In],status : UErrorCode* [In]
  fun u_parseMessage(locale : PSTR, pattern : UInt16*, patternlength : Int32, source : UInt16*, sourcelength : Int32, status : UErrorCode*)

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],source : UInt16* [In],sourcelength : Int32 [In],ap : Int8* [In],status : UErrorCode* [In]
  fun u_vparseMessage(locale : PSTR, pattern : UInt16*, patternlength : Int32, source : UInt16*, sourcelength : Int32, ap : Int8*, status : UErrorCode*)

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],result : UInt16* [In],resultlength : Int32 [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun u_formatMessageWithError(locale : PSTR, pattern : UInt16*, patternlength : Int32, result : UInt16*, resultlength : Int32, parseerror : UParseError*, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],result : UInt16* [In],resultlength : Int32 [In],parseerror : UParseError* [In],ap : Int8* [In],status : UErrorCode* [In]
  fun u_vformatMessageWithError(locale : PSTR, pattern : UInt16*, patternlength : Int32, result : UInt16*, resultlength : Int32, parseerror : UParseError*, ap : Int8*, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],source : UInt16* [In],sourcelength : Int32 [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun u_parseMessageWithError(locale : PSTR, pattern : UInt16*, patternlength : Int32, source : UInt16*, sourcelength : Int32, parseerror : UParseError*, status : UErrorCode*)

  # Params # locale : PSTR [In],pattern : UInt16* [In],patternlength : Int32 [In],source : UInt16* [In],sourcelength : Int32 [In],ap : Int8* [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun u_vparseMessageWithError(locale : PSTR, pattern : UInt16*, patternlength : Int32, source : UInt16*, sourcelength : Int32, ap : Int8*, parseerror : UParseError*, status : UErrorCode*)

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],locale : PSTR [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun umsg_open(pattern : UInt16*, patternlength : Int32, locale : PSTR, parseerror : UParseError*, status : UErrorCode*) : Void**

  # Params # format : Void** [In]
  fun umsg_close(format : Void**)

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun umsg_clone(fmt : Void**, status : UErrorCode*) : Void*

  # Params # fmt : Void** [In],locale : PSTR [In]
  fun umsg_setLocale(fmt : Void**, locale : PSTR)

  # Params # fmt : Void** [In]
  fun umsg_getLocale(fmt : Void**) : PSTR

  # Params # fmt : Void** [In],pattern : UInt16* [In],patternlength : Int32 [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun umsg_applyPattern(fmt : Void**, pattern : UInt16*, patternlength : Int32, parseerror : UParseError*, status : UErrorCode*)

  # Params # fmt : Void** [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun umsg_toPattern(fmt : Void**, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun umsg_format(fmt : Void**, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],result : UInt16* [In],resultlength : Int32 [In],ap : Int8* [In],status : UErrorCode* [In]
  fun umsg_vformat(fmt : Void**, result : UInt16*, resultlength : Int32, ap : Int8*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],source : UInt16* [In],sourcelength : Int32 [In],count : Int32* [In],status : UErrorCode* [In]
  fun umsg_parse(fmt : Void**, source : UInt16*, sourcelength : Int32, count : Int32*, status : UErrorCode*)

  # Params # fmt : Void** [In],source : UInt16* [In],sourcelength : Int32 [In],count : Int32* [In],ap : Int8* [In],status : UErrorCode* [In]
  fun umsg_vparse(fmt : Void**, source : UInt16*, sourcelength : Int32, count : Int32*, ap : Int8*, status : UErrorCode*)

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],dest : UInt16* [In],destcapacity : Int32 [In],ec : UErrorCode* [In]
  fun umsg_autoQuoteApostrophe(pattern : UInt16*, patternlength : Int32, dest : UInt16*, destcapacity : Int32, ec : UErrorCode*) : Int32

  # Params # style : UNumberFormatStyle [In],pattern : UInt16* [In],patternlength : Int32 [In],locale : PSTR [In],parseerr : UParseError* [In],status : UErrorCode* [In]
  fun unum_open(style : UNumberFormatStyle, pattern : UInt16*, patternlength : Int32, locale : PSTR, parseerr : UParseError*, status : UErrorCode*) : Void**

  # Params # fmt : Void** [In]
  fun unum_close(fmt : Void**)

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun unum_clone(fmt : Void**, status : UErrorCode*) : Void**

  # Params # fmt : Void** [In],number : Int32 [In],result : UInt16* [In],resultlength : Int32 [In],pos : UFieldPosition* [In],status : UErrorCode* [In]
  fun unum_format(fmt : Void**, number : Int32, result : UInt16*, resultlength : Int32, pos : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],number : Int64 [In],result : UInt16* [In],resultlength : Int32 [In],pos : UFieldPosition* [In],status : UErrorCode* [In]
  fun unum_formatInt64(fmt : Void**, number : Int64, result : UInt16*, resultlength : Int32, pos : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],number : Float64 [In],result : UInt16* [In],resultlength : Int32 [In],pos : UFieldPosition* [In],status : UErrorCode* [In]
  fun unum_formatDouble(fmt : Void**, number : Float64, result : UInt16*, resultlength : Int32, pos : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # format : Void** [In],number : Float64 [In],result : UInt16* [In],resultlength : Int32 [In],fpositer : UFieldPositionIterator* [In],status : UErrorCode* [In]
  fun unum_formatDoubleForFields(format : Void**, number : Float64, result : UInt16*, resultlength : Int32, fpositer : UFieldPositionIterator*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],number : PSTR [In],length : Int32 [In],result : UInt16* [In],resultlength : Int32 [In],pos : UFieldPosition* [In],status : UErrorCode* [In]
  fun unum_formatDecimal(fmt : Void**, number : PSTR, length : Int32, result : UInt16*, resultlength : Int32, pos : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],number : Float64 [In],currency : UInt16* [In],result : UInt16* [In],resultlength : Int32 [In],pos : UFieldPosition* [In],status : UErrorCode* [In]
  fun unum_formatDoubleCurrency(fmt : Void**, number : Float64, currency : UInt16*, result : UInt16*, resultlength : Int32, pos : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],number : Void** [In],result : UInt16* [In],resultlength : Int32 [In],pos : UFieldPosition* [In],status : UErrorCode* [In]
  fun unum_formatUFormattable(fmt : Void**, number : Void**, result : UInt16*, resultlength : Int32, pos : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],status : UErrorCode* [In]
  fun unum_parse(fmt : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],status : UErrorCode* [In]
  fun unum_parseInt64(fmt : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, status : UErrorCode*) : Int64

  # Params # fmt : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],status : UErrorCode* [In]
  fun unum_parseDouble(fmt : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, status : UErrorCode*) : Float64

  # Params # fmt : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],outbuf : PSTR [In],outbuflength : Int32 [In],status : UErrorCode* [In]
  fun unum_parseDecimal(fmt : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, outbuf : PSTR, outbuflength : Int32, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],currency : UInt16* [In],status : UErrorCode* [In]
  fun unum_parseDoubleCurrency(fmt : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, currency : UInt16*, status : UErrorCode*) : Float64

  # Params # fmt : Void** [In],result : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],status : UErrorCode* [In]
  fun unum_parseToUFormattable(fmt : Void**, result : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, status : UErrorCode*) : Void**

  # Params # format : Void** [In],localized : Int8 [In],pattern : UInt16* [In],patternlength : Int32 [In],parseerror : UParseError* [In],status : UErrorCode* [In]
  fun unum_applyPattern(format : Void**, localized : Int8, pattern : UInt16*, patternlength : Int32, parseerror : UParseError*, status : UErrorCode*)

  # Params # localeindex : Int32 [In]
  fun unum_getAvailable(localeindex : Int32) : PSTR

  # Params # 
  fun unum_countAvailable : Int32

  # Params # fmt : Void** [In],attr : UNumberFormatAttribute [In]
  fun unum_getAttribute(fmt : Void**, attr : UNumberFormatAttribute) : Int32

  # Params # fmt : Void** [In],attr : UNumberFormatAttribute [In],newvalue : Int32 [In]
  fun unum_setAttribute(fmt : Void**, attr : UNumberFormatAttribute, newvalue : Int32)

  # Params # fmt : Void** [In],attr : UNumberFormatAttribute [In]
  fun unum_getDoubleAttribute(fmt : Void**, attr : UNumberFormatAttribute) : Float64

  # Params # fmt : Void** [In],attr : UNumberFormatAttribute [In],newvalue : Float64 [In]
  fun unum_setDoubleAttribute(fmt : Void**, attr : UNumberFormatAttribute, newvalue : Float64)

  # Params # fmt : Void** [In],tag : UNumberFormatTextAttribute [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun unum_getTextAttribute(fmt : Void**, tag : UNumberFormatTextAttribute, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],tag : UNumberFormatTextAttribute [In],newvalue : UInt16* [In],newvaluelength : Int32 [In],status : UErrorCode* [In]
  fun unum_setTextAttribute(fmt : Void**, tag : UNumberFormatTextAttribute, newvalue : UInt16*, newvaluelength : Int32, status : UErrorCode*)

  # Params # fmt : Void** [In],ispatternlocalized : Int8 [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun unum_toPattern(fmt : Void**, ispatternlocalized : Int8, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],symbol : UNumberFormatSymbol [In],buffer : UInt16* [In],size : Int32 [In],status : UErrorCode* [In]
  fun unum_getSymbol(fmt : Void**, symbol : UNumberFormatSymbol, buffer : UInt16*, size : Int32, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],symbol : UNumberFormatSymbol [In],value : UInt16* [In],length : Int32 [In],status : UErrorCode* [In]
  fun unum_setSymbol(fmt : Void**, symbol : UNumberFormatSymbol, value : UInt16*, length : Int32, status : UErrorCode*)

  # Params # fmt : Void** [In],type : ULocDataLocaleType [In],status : UErrorCode* [In]
  fun unum_getLocaleByType(fmt : Void**, type : ULocDataLocaleType, status : UErrorCode*) : PSTR

  # Params # fmt : Void** [In],value : UDisplayContext [In],status : UErrorCode* [In]
  fun unum_setContext(fmt : Void**, value : UDisplayContext, status : UErrorCode*)

  # Params # fmt : Void** [In],type : UDisplayContextType [In],status : UErrorCode* [In]
  fun unum_getContext(fmt : Void**, type : UDisplayContextType, status : UErrorCode*) : UDisplayContext

  # Params # field : UDateFormatField [In]
  fun udat_toCalendarDateField(field : UDateFormatField) : UCalendarDateFields

  # Params # timestyle : UDateFormatStyle [In],datestyle : UDateFormatStyle [In],locale : PSTR [In],tzid : UInt16* [In],tzidlength : Int32 [In],pattern : UInt16* [In],patternlength : Int32 [In],status : UErrorCode* [In]
  fun udat_open(timestyle : UDateFormatStyle, datestyle : UDateFormatStyle, locale : PSTR, tzid : UInt16*, tzidlength : Int32, pattern : UInt16*, patternlength : Int32, status : UErrorCode*) : Void**

  # Params # format : Void** [In]
  fun udat_close(format : Void**)

  # Params # fmt : Void** [In],attr : UDateFormatBooleanAttribute [In],status : UErrorCode* [In]
  fun udat_getBooleanAttribute(fmt : Void**, attr : UDateFormatBooleanAttribute, status : UErrorCode*) : Int8

  # Params # fmt : Void** [In],attr : UDateFormatBooleanAttribute [In],newvalue : Int8 [In],status : UErrorCode* [In]
  fun udat_setBooleanAttribute(fmt : Void**, attr : UDateFormatBooleanAttribute, newvalue : Int8, status : UErrorCode*)

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun udat_clone(fmt : Void**, status : UErrorCode*) : Void**

  # Params # format : Void** [In],datetoformat : Float64 [In],result : UInt16* [In],resultlength : Int32 [In],position : UFieldPosition* [In],status : UErrorCode* [In]
  fun udat_format(format : Void**, datetoformat : Float64, result : UInt16*, resultlength : Int32, position : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # format : Void** [In],calendar : Void** [In],result : UInt16* [In],capacity : Int32 [In],position : UFieldPosition* [In],status : UErrorCode* [In]
  fun udat_formatCalendar(format : Void**, calendar : Void**, result : UInt16*, capacity : Int32, position : UFieldPosition*, status : UErrorCode*) : Int32

  # Params # format : Void** [In],datetoformat : Float64 [In],result : UInt16* [In],resultlength : Int32 [In],fpositer : UFieldPositionIterator* [In],status : UErrorCode* [In]
  fun udat_formatForFields(format : Void**, datetoformat : Float64, result : UInt16*, resultlength : Int32, fpositer : UFieldPositionIterator*, status : UErrorCode*) : Int32

  # Params # format : Void** [In],calendar : Void** [In],result : UInt16* [In],capacity : Int32 [In],fpositer : UFieldPositionIterator* [In],status : UErrorCode* [In]
  fun udat_formatCalendarForFields(format : Void**, calendar : Void**, result : UInt16*, capacity : Int32, fpositer : UFieldPositionIterator*, status : UErrorCode*) : Int32

  # Params # format : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],status : UErrorCode* [In]
  fun udat_parse(format : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, status : UErrorCode*) : Float64

  # Params # format : Void** [In],calendar : Void** [In],text : UInt16* [In],textlength : Int32 [In],parsepos : Int32* [In],status : UErrorCode* [In]
  fun udat_parseCalendar(format : Void**, calendar : Void**, text : UInt16*, textlength : Int32, parsepos : Int32*, status : UErrorCode*)

  # Params # fmt : Void** [In]
  fun udat_isLenient(fmt : Void**) : Int8

  # Params # fmt : Void** [In],islenient : Int8 [In]
  fun udat_setLenient(fmt : Void**, islenient : Int8)

  # Params # fmt : Void** [In]
  fun udat_getCalendar(fmt : Void**) : Void**

  # Params # fmt : Void** [In],calendartoset : Void** [In]
  fun udat_setCalendar(fmt : Void**, calendartoset : Void**)

  # Params # fmt : Void** [In]
  fun udat_getNumberFormat(fmt : Void**) : Void**

  # Params # fmt : Void** [In],field : UInt16 [In]
  fun udat_getNumberFormatForField(fmt : Void**, field : UInt16) : Void**

  # Params # fmt : Void** [In],fields : UInt16* [In],numberformattoset : Void** [In],status : UErrorCode* [In]
  fun udat_adoptNumberFormatForFields(fmt : Void**, fields : UInt16*, numberformattoset : Void**, status : UErrorCode*)

  # Params # fmt : Void** [In],numberformattoset : Void** [In]
  fun udat_setNumberFormat(fmt : Void**, numberformattoset : Void**)

  # Params # fmt : Void** [In],numberformattoadopt : Void** [In]
  fun udat_adoptNumberFormat(fmt : Void**, numberformattoadopt : Void**)

  # Params # localeindex : Int32 [In]
  fun udat_getAvailable(localeindex : Int32) : PSTR

  # Params # 
  fun udat_countAvailable : Int32

  # Params # fmt : Void** [In],status : UErrorCode* [In]
  fun udat_get2DigitYearStart(fmt : Void**, status : UErrorCode*) : Float64

  # Params # fmt : Void** [In],d : Float64 [In],status : UErrorCode* [In]
  fun udat_set2DigitYearStart(fmt : Void**, d : Float64, status : UErrorCode*)

  # Params # fmt : Void** [In],localized : Int8 [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun udat_toPattern(fmt : Void**, localized : Int8, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # format : Void** [In],localized : Int8 [In],pattern : UInt16* [In],patternlength : Int32 [In]
  fun udat_applyPattern(format : Void**, localized : Int8, pattern : UInt16*, patternlength : Int32)

  # Params # fmt : Void** [In],type : UDateFormatSymbolType [In],symbolindex : Int32 [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun udat_getSymbols(fmt : Void**, type : UDateFormatSymbolType, symbolindex : Int32, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # fmt : Void** [In],type : UDateFormatSymbolType [In]
  fun udat_countSymbols(fmt : Void**, type : UDateFormatSymbolType) : Int32

  # Params # format : Void** [In],type : UDateFormatSymbolType [In],symbolindex : Int32 [In],value : UInt16* [In],valuelength : Int32 [In],status : UErrorCode* [In]
  fun udat_setSymbols(format : Void**, type : UDateFormatSymbolType, symbolindex : Int32, value : UInt16*, valuelength : Int32, status : UErrorCode*)

  # Params # fmt : Void** [In],type : ULocDataLocaleType [In],status : UErrorCode* [In]
  fun udat_getLocaleByType(fmt : Void**, type : ULocDataLocaleType, status : UErrorCode*) : PSTR

  # Params # fmt : Void** [In],value : UDisplayContext [In],status : UErrorCode* [In]
  fun udat_setContext(fmt : Void**, value : UDisplayContext, status : UErrorCode*)

  # Params # fmt : Void** [In],type : UDisplayContextType [In],status : UErrorCode* [In]
  fun udat_getContext(fmt : Void**, type : UDisplayContextType, status : UErrorCode*) : UDisplayContext

  # Params # locale : PSTR [In],perrorcode : UErrorCode* [In]
  fun udatpg_open(locale : PSTR, perrorcode : UErrorCode*) : Void**

  # Params # perrorcode : UErrorCode* [In]
  fun udatpg_openEmpty(perrorcode : UErrorCode*) : Void**

  # Params # dtpg : Void** [In]
  fun udatpg_close(dtpg : Void**)

  # Params # dtpg : Void** [In],perrorcode : UErrorCode* [In]
  fun udatpg_clone(dtpg : Void**, perrorcode : UErrorCode*) : Void**

  # Params # dtpg : Void** [In],skeleton : UInt16* [In],length : Int32 [In],bestpattern : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun udatpg_getBestPattern(dtpg : Void**, skeleton : UInt16*, length : Int32, bestpattern : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # dtpg : Void** [In],skeleton : UInt16* [In],length : Int32 [In],options : UDateTimePatternMatchOptions [In],bestpattern : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun udatpg_getBestPatternWithOptions(dtpg : Void**, skeleton : UInt16*, length : Int32, options : UDateTimePatternMatchOptions, bestpattern : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # unuseddtpg : Void** [In],pattern : UInt16* [In],length : Int32 [In],skeleton : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun udatpg_getSkeleton(unuseddtpg : Void**, pattern : UInt16*, length : Int32, skeleton : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # unuseddtpg : Void** [In],pattern : UInt16* [In],length : Int32 [In],baseskeleton : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun udatpg_getBaseSkeleton(unuseddtpg : Void**, pattern : UInt16*, length : Int32, baseskeleton : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # dtpg : Void** [In],pattern : UInt16* [In],patternlength : Int32 [In],override : Int8 [In],conflictingpattern : UInt16* [In],capacity : Int32 [In],plength : Int32* [In],perrorcode : UErrorCode* [In]
  fun udatpg_addPattern(dtpg : Void**, pattern : UInt16*, patternlength : Int32, override : Int8, conflictingpattern : UInt16*, capacity : Int32, plength : Int32*, perrorcode : UErrorCode*) : UDateTimePatternConflict

  # Params # dtpg : Void** [In],field : UDateTimePatternField [In],value : UInt16* [In],length : Int32 [In]
  fun udatpg_setAppendItemFormat(dtpg : Void**, field : UDateTimePatternField, value : UInt16*, length : Int32)

  # Params # dtpg : Void** [In],field : UDateTimePatternField [In],plength : Int32* [In]
  fun udatpg_getAppendItemFormat(dtpg : Void**, field : UDateTimePatternField, plength : Int32*) : UInt16*

  # Params # dtpg : Void** [In],field : UDateTimePatternField [In],value : UInt16* [In],length : Int32 [In]
  fun udatpg_setAppendItemName(dtpg : Void**, field : UDateTimePatternField, value : UInt16*, length : Int32)

  # Params # dtpg : Void** [In],field : UDateTimePatternField [In],plength : Int32* [In]
  fun udatpg_getAppendItemName(dtpg : Void**, field : UDateTimePatternField, plength : Int32*) : UInt16*

  # Params # dtpg : Void** [In],field : UDateTimePatternField [In],width : UDateTimePGDisplayWidth [In],fieldname : UInt16* [In],capacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun udatpg_getFieldDisplayName(dtpg : Void**, field : UDateTimePatternField, width : UDateTimePGDisplayWidth, fieldname : UInt16*, capacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # dtpg : Void** [In],dtformat : UInt16* [In],length : Int32 [In]
  fun udatpg_setDateTimeFormat(dtpg : Void**, dtformat : UInt16*, length : Int32)

  # Params # dtpg : Void** [In],plength : Int32* [In]
  fun udatpg_getDateTimeFormat(dtpg : Void**, plength : Int32*) : UInt16*

  # Params # dtpg : Void** [In],decimal : UInt16* [In],length : Int32 [In]
  fun udatpg_setDecimal(dtpg : Void**, decimal : UInt16*, length : Int32)

  # Params # dtpg : Void** [In],plength : Int32* [In]
  fun udatpg_getDecimal(dtpg : Void**, plength : Int32*) : UInt16*

  # Params # dtpg : Void** [In],pattern : UInt16* [In],patternlength : Int32 [In],skeleton : UInt16* [In],skeletonlength : Int32 [In],dest : UInt16* [In],destcapacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun udatpg_replaceFieldTypes(dtpg : Void**, pattern : UInt16*, patternlength : Int32, skeleton : UInt16*, skeletonlength : Int32, dest : UInt16*, destcapacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # dtpg : Void** [In],pattern : UInt16* [In],patternlength : Int32 [In],skeleton : UInt16* [In],skeletonlength : Int32 [In],options : UDateTimePatternMatchOptions [In],dest : UInt16* [In],destcapacity : Int32 [In],perrorcode : UErrorCode* [In]
  fun udatpg_replaceFieldTypesWithOptions(dtpg : Void**, pattern : UInt16*, patternlength : Int32, skeleton : UInt16*, skeletonlength : Int32, options : UDateTimePatternMatchOptions, dest : UInt16*, destcapacity : Int32, perrorcode : UErrorCode*) : Int32

  # Params # dtpg : Void** [In],perrorcode : UErrorCode* [In]
  fun udatpg_openSkeletons(dtpg : Void**, perrorcode : UErrorCode*) : UEnumeration*

  # Params # dtpg : Void** [In],perrorcode : UErrorCode* [In]
  fun udatpg_openBaseSkeletons(dtpg : Void**, perrorcode : UErrorCode*) : UEnumeration*

  # Params # dtpg : Void** [In],skeleton : UInt16* [In],skeletonlength : Int32 [In],plength : Int32* [In]
  fun udatpg_getPatternForSkeleton(dtpg : Void**, skeleton : UInt16*, skeletonlength : Int32, plength : Int32*) : UInt16*

  # Params # skeleton : UInt16* [In],skeletonlen : Int32 [In],locale : PSTR [In],ec : UErrorCode* [In]
  fun unumf_openForSkeletonAndLocale(skeleton : UInt16*, skeletonlen : Int32, locale : PSTR, ec : UErrorCode*) : UNumberFormatter*

  # Params # skeleton : UInt16* [In],skeletonlen : Int32 [In],locale : PSTR [In],perror : UParseError* [In],ec : UErrorCode* [In]
  fun unumf_openForSkeletonAndLocaleWithError(skeleton : UInt16*, skeletonlen : Int32, locale : PSTR, perror : UParseError*, ec : UErrorCode*) : UNumberFormatter*

  # Params # ec : UErrorCode* [In]
  fun unumf_openResult(ec : UErrorCode*) : UFormattedNumber*

  # Params # uformatter : UNumberFormatter* [In],value : Int64 [In],uresult : UFormattedNumber* [In],ec : UErrorCode* [In]
  fun unumf_formatInt(uformatter : UNumberFormatter*, value : Int64, uresult : UFormattedNumber*, ec : UErrorCode*)

  # Params # uformatter : UNumberFormatter* [In],value : Float64 [In],uresult : UFormattedNumber* [In],ec : UErrorCode* [In]
  fun unumf_formatDouble(uformatter : UNumberFormatter*, value : Float64, uresult : UFormattedNumber*, ec : UErrorCode*)

  # Params # uformatter : UNumberFormatter* [In],value : PSTR [In],valuelen : Int32 [In],uresult : UFormattedNumber* [In],ec : UErrorCode* [In]
  fun unumf_formatDecimal(uformatter : UNumberFormatter*, value : PSTR, valuelen : Int32, uresult : UFormattedNumber*, ec : UErrorCode*)

  # Params # uresult : UFormattedNumber* [In],ec : UErrorCode* [In]
  fun unumf_resultAsValue(uresult : UFormattedNumber*, ec : UErrorCode*) : UFormattedValue*

  # Params # uresult : UFormattedNumber* [In],buffer : UInt16* [In],buffercapacity : Int32 [In],ec : UErrorCode* [In]
  fun unumf_resultToString(uresult : UFormattedNumber*, buffer : UInt16*, buffercapacity : Int32, ec : UErrorCode*) : Int32

  # Params # uresult : UFormattedNumber* [In],ufpos : UFieldPosition* [In],ec : UErrorCode* [In]
  fun unumf_resultNextFieldPosition(uresult : UFormattedNumber*, ufpos : UFieldPosition*, ec : UErrorCode*) : Int8

  # Params # uresult : UFormattedNumber* [In],ufpositer : UFieldPositionIterator* [In],ec : UErrorCode* [In]
  fun unumf_resultGetAllFieldPositions(uresult : UFormattedNumber*, ufpositer : UFieldPositionIterator*, ec : UErrorCode*)

  # Params # uformatter : UNumberFormatter* [In]
  fun unumf_close(uformatter : UNumberFormatter*)

  # Params # uresult : UFormattedNumber* [In]
  fun unumf_closeResult(uresult : UFormattedNumber*)

  # Params # locale : PSTR [In],status : UErrorCode* [In]
  fun unumsys_open(locale : PSTR, status : UErrorCode*) : UNumberingSystem*

  # Params # name : PSTR [In],status : UErrorCode* [In]
  fun unumsys_openByName(name : PSTR, status : UErrorCode*) : UNumberingSystem*

  # Params # unumsys : UNumberingSystem* [In]
  fun unumsys_close(unumsys : UNumberingSystem*)

  # Params # status : UErrorCode* [In]
  fun unumsys_openAvailableNames(status : UErrorCode*) : UEnumeration*

  # Params # unumsys : UNumberingSystem* [In]
  fun unumsys_getName(unumsys : UNumberingSystem*) : PSTR

  # Params # unumsys : UNumberingSystem* [In]
  fun unumsys_isAlgorithmic(unumsys : UNumberingSystem*) : Int8

  # Params # unumsys : UNumberingSystem* [In]
  fun unumsys_getRadix(unumsys : UNumberingSystem*) : Int32

  # Params # unumsys : UNumberingSystem* [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun unumsys_getDescription(unumsys : UNumberingSystem*, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # locale : PSTR [In],status : UErrorCode* [In]
  fun uplrules_open(locale : PSTR, status : UErrorCode*) : UPluralRules*

  # Params # locale : PSTR [In],type : UPluralType [In],status : UErrorCode* [In]
  fun uplrules_openForType(locale : PSTR, type : UPluralType, status : UErrorCode*) : UPluralRules*

  # Params # uplrules : UPluralRules* [In]
  fun uplrules_close(uplrules : UPluralRules*)

  # Params # uplrules : UPluralRules* [In],number : Float64 [In],keyword : UInt16* [In],capacity : Int32 [In],status : UErrorCode* [In]
  fun uplrules_select(uplrules : UPluralRules*, number : Float64, keyword : UInt16*, capacity : Int32, status : UErrorCode*) : Int32

  # Params # uplrules : UPluralRules* [In],number : UFormattedNumber* [In],keyword : UInt16* [In],capacity : Int32 [In],status : UErrorCode* [In]
  fun uplrules_selectFormatted(uplrules : UPluralRules*, number : UFormattedNumber*, keyword : UInt16*, capacity : Int32, status : UErrorCode*) : Int32

  # Params # uplrules : UPluralRules* [In],status : UErrorCode* [In]
  fun uplrules_getKeywords(uplrules : UPluralRules*, status : UErrorCode*) : UEnumeration*

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],flags : UInt32 [In],pe : UParseError* [In],status : UErrorCode* [In]
  fun uregex_open(pattern : UInt16*, patternlength : Int32, flags : UInt32, pe : UParseError*, status : UErrorCode*) : URegularExpression*

  # Params # pattern : UText* [In],flags : UInt32 [In],pe : UParseError* [In],status : UErrorCode* [In]
  fun uregex_openUText(pattern : UText*, flags : UInt32, pe : UParseError*, status : UErrorCode*) : URegularExpression*

  # Params # pattern : PSTR [In],flags : UInt32 [In],pe : UParseError* [In],status : UErrorCode* [In]
  fun uregex_openC(pattern : PSTR, flags : UInt32, pe : UParseError*, status : UErrorCode*) : URegularExpression*

  # Params # regexp : URegularExpression* [In]
  fun uregex_close(regexp : URegularExpression*)

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_clone(regexp : URegularExpression*, status : UErrorCode*) : URegularExpression*

  # Params # regexp : URegularExpression* [In],patlength : Int32* [In],status : UErrorCode* [In]
  fun uregex_pattern(regexp : URegularExpression*, patlength : Int32*, status : UErrorCode*) : UInt16*

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_patternUText(regexp : URegularExpression*, status : UErrorCode*) : UText*

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_flags(regexp : URegularExpression*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],text : UInt16* [In],textlength : Int32 [In],status : UErrorCode* [In]
  fun uregex_setText(regexp : URegularExpression*, text : UInt16*, textlength : Int32, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],text : UText* [In],status : UErrorCode* [In]
  fun uregex_setUText(regexp : URegularExpression*, text : UText*, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],textlength : Int32* [In],status : UErrorCode* [In]
  fun uregex_getText(regexp : URegularExpression*, textlength : Int32*, status : UErrorCode*) : UInt16*

  # Params # regexp : URegularExpression* [In],dest : UText* [In],status : UErrorCode* [In]
  fun uregex_getUText(regexp : URegularExpression*, dest : UText*, status : UErrorCode*) : UText*

  # Params # regexp : URegularExpression* [In],text : UText* [In],status : UErrorCode* [In]
  fun uregex_refreshUText(regexp : URegularExpression*, text : UText*, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],startindex : Int32 [In],status : UErrorCode* [In]
  fun uregex_matches(regexp : URegularExpression*, startindex : Int32, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],startindex : Int64 [In],status : UErrorCode* [In]
  fun uregex_matches64(regexp : URegularExpression*, startindex : Int64, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],startindex : Int32 [In],status : UErrorCode* [In]
  fun uregex_lookingAt(regexp : URegularExpression*, startindex : Int32, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],startindex : Int64 [In],status : UErrorCode* [In]
  fun uregex_lookingAt64(regexp : URegularExpression*, startindex : Int64, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],startindex : Int32 [In],status : UErrorCode* [In]
  fun uregex_find(regexp : URegularExpression*, startindex : Int32, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],startindex : Int64 [In],status : UErrorCode* [In]
  fun uregex_find64(regexp : URegularExpression*, startindex : Int64, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_findNext(regexp : URegularExpression*, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_groupCount(regexp : URegularExpression*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],groupname : UInt16* [In],namelength : Int32 [In],status : UErrorCode* [In]
  fun uregex_groupNumberFromName(regexp : URegularExpression*, groupname : UInt16*, namelength : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],groupname : PSTR [In],namelength : Int32 [In],status : UErrorCode* [In]
  fun uregex_groupNumberFromCName(regexp : URegularExpression*, groupname : PSTR, namelength : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],groupnum : Int32 [In],dest : UInt16* [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun uregex_group(regexp : URegularExpression*, groupnum : Int32, dest : UInt16*, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],groupnum : Int32 [In],dest : UText* [In],grouplength : Int64* [In],status : UErrorCode* [In]
  fun uregex_groupUText(regexp : URegularExpression*, groupnum : Int32, dest : UText*, grouplength : Int64*, status : UErrorCode*) : UText*

  # Params # regexp : URegularExpression* [In],groupnum : Int32 [In],status : UErrorCode* [In]
  fun uregex_start(regexp : URegularExpression*, groupnum : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],groupnum : Int32 [In],status : UErrorCode* [In]
  fun uregex_start64(regexp : URegularExpression*, groupnum : Int32, status : UErrorCode*) : Int64

  # Params # regexp : URegularExpression* [In],groupnum : Int32 [In],status : UErrorCode* [In]
  fun uregex_end(regexp : URegularExpression*, groupnum : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],groupnum : Int32 [In],status : UErrorCode* [In]
  fun uregex_end64(regexp : URegularExpression*, groupnum : Int32, status : UErrorCode*) : Int64

  # Params # regexp : URegularExpression* [In],index : Int32 [In],status : UErrorCode* [In]
  fun uregex_reset(regexp : URegularExpression*, index : Int32, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],index : Int64 [In],status : UErrorCode* [In]
  fun uregex_reset64(regexp : URegularExpression*, index : Int64, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],regionstart : Int32 [In],regionlimit : Int32 [In],status : UErrorCode* [In]
  fun uregex_setRegion(regexp : URegularExpression*, regionstart : Int32, regionlimit : Int32, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],regionstart : Int64 [In],regionlimit : Int64 [In],status : UErrorCode* [In]
  fun uregex_setRegion64(regexp : URegularExpression*, regionstart : Int64, regionlimit : Int64, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],regionstart : Int64 [In],regionlimit : Int64 [In],startindex : Int64 [In],status : UErrorCode* [In]
  fun uregex_setRegionAndStart(regexp : URegularExpression*, regionstart : Int64, regionlimit : Int64, startindex : Int64, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_regionStart(regexp : URegularExpression*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_regionStart64(regexp : URegularExpression*, status : UErrorCode*) : Int64

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_regionEnd(regexp : URegularExpression*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_regionEnd64(regexp : URegularExpression*, status : UErrorCode*) : Int64

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_hasTransparentBounds(regexp : URegularExpression*, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],b : Int8 [In],status : UErrorCode* [In]
  fun uregex_useTransparentBounds(regexp : URegularExpression*, b : Int8, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_hasAnchoringBounds(regexp : URegularExpression*, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],b : Int8 [In],status : UErrorCode* [In]
  fun uregex_useAnchoringBounds(regexp : URegularExpression*, b : Int8, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_hitEnd(regexp : URegularExpression*, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_requireEnd(regexp : URegularExpression*, status : UErrorCode*) : Int8

  # Params # regexp : URegularExpression* [In],replacementtext : UInt16* [In],replacementlength : Int32 [In],destbuf : UInt16* [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun uregex_replaceAll(regexp : URegularExpression*, replacementtext : UInt16*, replacementlength : Int32, destbuf : UInt16*, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],replacement : UText* [In],dest : UText* [In],status : UErrorCode* [In]
  fun uregex_replaceAllUText(regexp : URegularExpression*, replacement : UText*, dest : UText*, status : UErrorCode*) : UText*

  # Params # regexp : URegularExpression* [In],replacementtext : UInt16* [In],replacementlength : Int32 [In],destbuf : UInt16* [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun uregex_replaceFirst(regexp : URegularExpression*, replacementtext : UInt16*, replacementlength : Int32, destbuf : UInt16*, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],replacement : UText* [In],dest : UText* [In],status : UErrorCode* [In]
  fun uregex_replaceFirstUText(regexp : URegularExpression*, replacement : UText*, dest : UText*, status : UErrorCode*) : UText*

  # Params # regexp : URegularExpression* [In],replacementtext : UInt16* [In],replacementlength : Int32 [In],destbuf : UInt16** [In],destcapacity : Int32* [In],status : UErrorCode* [In]
  fun uregex_appendReplacement(regexp : URegularExpression*, replacementtext : UInt16*, replacementlength : Int32, destbuf : UInt16**, destcapacity : Int32*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],replacementtext : UText* [In],dest : UText* [In],status : UErrorCode* [In]
  fun uregex_appendReplacementUText(regexp : URegularExpression*, replacementtext : UText*, dest : UText*, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],destbuf : UInt16** [In],destcapacity : Int32* [In],status : UErrorCode* [In]
  fun uregex_appendTail(regexp : URegularExpression*, destbuf : UInt16**, destcapacity : Int32*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],dest : UText* [In],status : UErrorCode* [In]
  fun uregex_appendTailUText(regexp : URegularExpression*, dest : UText*, status : UErrorCode*) : UText*

  # Params # regexp : URegularExpression* [In],destbuf : UInt16* [In],destcapacity : Int32 [In],requiredcapacity : Int32* [In],destfields : UInt16** [In],destfieldscapacity : Int32 [In],status : UErrorCode* [In]
  fun uregex_split(regexp : URegularExpression*, destbuf : UInt16*, destcapacity : Int32, requiredcapacity : Int32*, destfields : UInt16**, destfieldscapacity : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],destfields : UText** [In],destfieldscapacity : Int32 [In],status : UErrorCode* [In]
  fun uregex_splitUText(regexp : URegularExpression*, destfields : UText**, destfieldscapacity : Int32, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],limit : Int32 [In],status : UErrorCode* [In]
  fun uregex_setTimeLimit(regexp : URegularExpression*, limit : Int32, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_getTimeLimit(regexp : URegularExpression*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],limit : Int32 [In],status : UErrorCode* [In]
  fun uregex_setStackLimit(regexp : URegularExpression*, limit : Int32, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],status : UErrorCode* [In]
  fun uregex_getStackLimit(regexp : URegularExpression*, status : UErrorCode*) : Int32

  # Params # regexp : URegularExpression* [In],callback : URegexMatchCallback [In],context : Void* [In],status : UErrorCode* [In]
  fun uregex_setMatchCallback(regexp : URegularExpression*, callback : URegexMatchCallback, context : Void*, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],callback : URegexMatchCallback* [In],context : Void** [In],status : UErrorCode* [In]
  fun uregex_getMatchCallback(regexp : URegularExpression*, callback : URegexMatchCallback*, context : Void**, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],callback : URegexFindProgressCallback [In],context : Void* [In],status : UErrorCode* [In]
  fun uregex_setFindProgressCallback(regexp : URegularExpression*, callback : URegexFindProgressCallback, context : Void*, status : UErrorCode*)

  # Params # regexp : URegularExpression* [In],callback : URegexFindProgressCallback* [In],context : Void** [In],status : UErrorCode* [In]
  fun uregex_getFindProgressCallback(regexp : URegularExpression*, callback : URegexFindProgressCallback*, context : Void**, status : UErrorCode*)

  # Params # regioncode : PSTR [In],status : UErrorCode* [In]
  fun uregion_getRegionFromCode(regioncode : PSTR, status : UErrorCode*) : URegion*

  # Params # code : Int32 [In],status : UErrorCode* [In]
  fun uregion_getRegionFromNumericCode(code : Int32, status : UErrorCode*) : URegion*

  # Params # type : URegionType [In],status : UErrorCode* [In]
  fun uregion_getAvailable(type : URegionType, status : UErrorCode*) : UEnumeration*

  # Params # uregion : URegion* [In],otherregion : URegion* [In]
  fun uregion_areEqual(uregion : URegion*, otherregion : URegion*) : Int8

  # Params # uregion : URegion* [In]
  fun uregion_getContainingRegion(uregion : URegion*) : URegion*

  # Params # uregion : URegion* [In],type : URegionType [In]
  fun uregion_getContainingRegionOfType(uregion : URegion*, type : URegionType) : URegion*

  # Params # uregion : URegion* [In],status : UErrorCode* [In]
  fun uregion_getContainedRegions(uregion : URegion*, status : UErrorCode*) : UEnumeration*

  # Params # uregion : URegion* [In],type : URegionType [In],status : UErrorCode* [In]
  fun uregion_getContainedRegionsOfType(uregion : URegion*, type : URegionType, status : UErrorCode*) : UEnumeration*

  # Params # uregion : URegion* [In],otherregion : URegion* [In]
  fun uregion_contains(uregion : URegion*, otherregion : URegion*) : Int8

  # Params # uregion : URegion* [In],status : UErrorCode* [In]
  fun uregion_getPreferredValues(uregion : URegion*, status : UErrorCode*) : UEnumeration*

  # Params # uregion : URegion* [In]
  fun uregion_getRegionCode(uregion : URegion*) : PSTR

  # Params # uregion : URegion* [In]
  fun uregion_getNumericCode(uregion : URegion*) : Int32

  # Params # uregion : URegion* [In]
  fun uregion_getType(uregion : URegion*) : URegionType

  # Params # locale : PSTR [In],nftoadopt : Void** [In],width : UDateRelativeDateTimeFormatterStyle [In],capitalizationcontext : UDisplayContext [In],status : UErrorCode* [In]
  fun ureldatefmt_open(locale : PSTR, nftoadopt : Void**, width : UDateRelativeDateTimeFormatterStyle, capitalizationcontext : UDisplayContext, status : UErrorCode*) : URelativeDateTimeFormatter*

  # Params # reldatefmt : URelativeDateTimeFormatter* [In]
  fun ureldatefmt_close(reldatefmt : URelativeDateTimeFormatter*)

  # Params # ec : UErrorCode* [In]
  fun ureldatefmt_openResult(ec : UErrorCode*) : UFormattedRelativeDateTime*

  # Params # ufrdt : UFormattedRelativeDateTime* [In],ec : UErrorCode* [In]
  fun ureldatefmt_resultAsValue(ufrdt : UFormattedRelativeDateTime*, ec : UErrorCode*) : UFormattedValue*

  # Params # ufrdt : UFormattedRelativeDateTime* [In]
  fun ureldatefmt_closeResult(ufrdt : UFormattedRelativeDateTime*)

  # Params # reldatefmt : URelativeDateTimeFormatter* [In],offset : Float64 [In],unit : URelativeDateTimeUnit [In],result : UInt16* [In],resultcapacity : Int32 [In],status : UErrorCode* [In]
  fun ureldatefmt_formatNumeric(reldatefmt : URelativeDateTimeFormatter*, offset : Float64, unit : URelativeDateTimeUnit, result : UInt16*, resultcapacity : Int32, status : UErrorCode*) : Int32

  # Params # reldatefmt : URelativeDateTimeFormatter* [In],offset : Float64 [In],unit : URelativeDateTimeUnit [In],result : UFormattedRelativeDateTime* [In],status : UErrorCode* [In]
  fun ureldatefmt_formatNumericToResult(reldatefmt : URelativeDateTimeFormatter*, offset : Float64, unit : URelativeDateTimeUnit, result : UFormattedRelativeDateTime*, status : UErrorCode*)

  # Params # reldatefmt : URelativeDateTimeFormatter* [In],offset : Float64 [In],unit : URelativeDateTimeUnit [In],result : UInt16* [In],resultcapacity : Int32 [In],status : UErrorCode* [In]
  fun ureldatefmt_format(reldatefmt : URelativeDateTimeFormatter*, offset : Float64, unit : URelativeDateTimeUnit, result : UInt16*, resultcapacity : Int32, status : UErrorCode*) : Int32

  # Params # reldatefmt : URelativeDateTimeFormatter* [In],offset : Float64 [In],unit : URelativeDateTimeUnit [In],result : UFormattedRelativeDateTime* [In],status : UErrorCode* [In]
  fun ureldatefmt_formatToResult(reldatefmt : URelativeDateTimeFormatter*, offset : Float64, unit : URelativeDateTimeUnit, result : UFormattedRelativeDateTime*, status : UErrorCode*)

  # Params # reldatefmt : URelativeDateTimeFormatter* [In],relativedatestring : UInt16* [In],relativedatestringlen : Int32 [In],timestring : UInt16* [In],timestringlen : Int32 [In],result : UInt16* [In],resultcapacity : Int32 [In],status : UErrorCode* [In]
  fun ureldatefmt_combineDateAndTime(reldatefmt : URelativeDateTimeFormatter*, relativedatestring : UInt16*, relativedatestringlen : Int32, timestring : UInt16*, timestringlen : Int32, result : UInt16*, resultcapacity : Int32, status : UErrorCode*) : Int32

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],text : UInt16* [In],textlength : Int32 [In],locale : PSTR [In],breakiter : UBreakIterator* [In],status : UErrorCode* [In]
  fun usearch_open(pattern : UInt16*, patternlength : Int32, text : UInt16*, textlength : Int32, locale : PSTR, breakiter : UBreakIterator*, status : UErrorCode*) : UStringSearch*

  # Params # pattern : UInt16* [In],patternlength : Int32 [In],text : UInt16* [In],textlength : Int32 [In],collator : UCollator* [In],breakiter : UBreakIterator* [In],status : UErrorCode* [In]
  fun usearch_openFromCollator(pattern : UInt16*, patternlength : Int32, text : UInt16*, textlength : Int32, collator : UCollator*, breakiter : UBreakIterator*, status : UErrorCode*) : UStringSearch*

  # Params # searchiter : UStringSearch* [In]
  fun usearch_close(searchiter : UStringSearch*)

  # Params # strsrch : UStringSearch* [In],position : Int32 [In],status : UErrorCode* [In]
  fun usearch_setOffset(strsrch : UStringSearch*, position : Int32, status : UErrorCode*)

  # Params # strsrch : UStringSearch* [In]
  fun usearch_getOffset(strsrch : UStringSearch*) : Int32

  # Params # strsrch : UStringSearch* [In],attribute : USearchAttribute [In],value : USearchAttributeValue [In],status : UErrorCode* [In]
  fun usearch_setAttribute(strsrch : UStringSearch*, attribute : USearchAttribute, value : USearchAttributeValue, status : UErrorCode*)

  # Params # strsrch : UStringSearch* [In],attribute : USearchAttribute [In]
  fun usearch_getAttribute(strsrch : UStringSearch*, attribute : USearchAttribute) : USearchAttributeValue

  # Params # strsrch : UStringSearch* [In]
  fun usearch_getMatchedStart(strsrch : UStringSearch*) : Int32

  # Params # strsrch : UStringSearch* [In]
  fun usearch_getMatchedLength(strsrch : UStringSearch*) : Int32

  # Params # strsrch : UStringSearch* [In],result : UInt16* [In],resultcapacity : Int32 [In],status : UErrorCode* [In]
  fun usearch_getMatchedText(strsrch : UStringSearch*, result : UInt16*, resultcapacity : Int32, status : UErrorCode*) : Int32

  # Params # strsrch : UStringSearch* [In],breakiter : UBreakIterator* [In],status : UErrorCode* [In]
  fun usearch_setBreakIterator(strsrch : UStringSearch*, breakiter : UBreakIterator*, status : UErrorCode*)

  # Params # strsrch : UStringSearch* [In]
  fun usearch_getBreakIterator(strsrch : UStringSearch*) : UBreakIterator*

  # Params # strsrch : UStringSearch* [In],text : UInt16* [In],textlength : Int32 [In],status : UErrorCode* [In]
  fun usearch_setText(strsrch : UStringSearch*, text : UInt16*, textlength : Int32, status : UErrorCode*)

  # Params # strsrch : UStringSearch* [In],length : Int32* [In]
  fun usearch_getText(strsrch : UStringSearch*, length : Int32*) : UInt16*

  # Params # strsrch : UStringSearch* [In]
  fun usearch_getCollator(strsrch : UStringSearch*) : UCollator*

  # Params # strsrch : UStringSearch* [In],collator : UCollator* [In],status : UErrorCode* [In]
  fun usearch_setCollator(strsrch : UStringSearch*, collator : UCollator*, status : UErrorCode*)

  # Params # strsrch : UStringSearch* [In],pattern : UInt16* [In],patternlength : Int32 [In],status : UErrorCode* [In]
  fun usearch_setPattern(strsrch : UStringSearch*, pattern : UInt16*, patternlength : Int32, status : UErrorCode*)

  # Params # strsrch : UStringSearch* [In],length : Int32* [In]
  fun usearch_getPattern(strsrch : UStringSearch*, length : Int32*) : UInt16*

  # Params # strsrch : UStringSearch* [In],status : UErrorCode* [In]
  fun usearch_first(strsrch : UStringSearch*, status : UErrorCode*) : Int32

  # Params # strsrch : UStringSearch* [In],position : Int32 [In],status : UErrorCode* [In]
  fun usearch_following(strsrch : UStringSearch*, position : Int32, status : UErrorCode*) : Int32

  # Params # strsrch : UStringSearch* [In],status : UErrorCode* [In]
  fun usearch_last(strsrch : UStringSearch*, status : UErrorCode*) : Int32

  # Params # strsrch : UStringSearch* [In],position : Int32 [In],status : UErrorCode* [In]
  fun usearch_preceding(strsrch : UStringSearch*, position : Int32, status : UErrorCode*) : Int32

  # Params # strsrch : UStringSearch* [In],status : UErrorCode* [In]
  fun usearch_next(strsrch : UStringSearch*, status : UErrorCode*) : Int32

  # Params # strsrch : UStringSearch* [In],status : UErrorCode* [In]
  fun usearch_previous(strsrch : UStringSearch*, status : UErrorCode*) : Int32

  # Params # strsrch : UStringSearch* [In]
  fun usearch_reset(strsrch : UStringSearch*)

  # Params # status : UErrorCode* [In]
  fun uspoof_open(status : UErrorCode*) : USpoofChecker*

  # Params # data : Void* [In],length : Int32 [In],pactuallength : Int32* [In],perrorcode : UErrorCode* [In]
  fun uspoof_openFromSerialized(data : Void*, length : Int32, pactuallength : Int32*, perrorcode : UErrorCode*) : USpoofChecker*

  # Params # confusables : PSTR [In],confusableslen : Int32 [In],confusableswholescript : PSTR [In],confusableswholescriptlen : Int32 [In],errtype : Int32* [In],pe : UParseError* [In],status : UErrorCode* [In]
  fun uspoof_openFromSource(confusables : PSTR, confusableslen : Int32, confusableswholescript : PSTR, confusableswholescriptlen : Int32, errtype : Int32*, pe : UParseError*, status : UErrorCode*) : USpoofChecker*

  # Params # sc : USpoofChecker* [In]
  fun uspoof_close(sc : USpoofChecker*)

  # Params # sc : USpoofChecker* [In],status : UErrorCode* [In]
  fun uspoof_clone(sc : USpoofChecker*, status : UErrorCode*) : USpoofChecker*

  # Params # sc : USpoofChecker* [In],checks : Int32 [In],status : UErrorCode* [In]
  fun uspoof_setChecks(sc : USpoofChecker*, checks : Int32, status : UErrorCode*)

  # Params # sc : USpoofChecker* [In],status : UErrorCode* [In]
  fun uspoof_getChecks(sc : USpoofChecker*, status : UErrorCode*) : Int32

  # Params # sc : USpoofChecker* [In],restrictionlevel : URestrictionLevel [In]
  fun uspoof_setRestrictionLevel(sc : USpoofChecker*, restrictionlevel : URestrictionLevel)

  # Params # sc : USpoofChecker* [In]
  fun uspoof_getRestrictionLevel(sc : USpoofChecker*) : URestrictionLevel

  # Params # sc : USpoofChecker* [In],localeslist : PSTR [In],status : UErrorCode* [In]
  fun uspoof_setAllowedLocales(sc : USpoofChecker*, localeslist : PSTR, status : UErrorCode*)

  # Params # sc : USpoofChecker* [In],status : UErrorCode* [In]
  fun uspoof_getAllowedLocales(sc : USpoofChecker*, status : UErrorCode*) : PSTR

  # Params # sc : USpoofChecker* [In],chars : USet* [In],status : UErrorCode* [In]
  fun uspoof_setAllowedChars(sc : USpoofChecker*, chars : USet*, status : UErrorCode*)

  # Params # sc : USpoofChecker* [In],status : UErrorCode* [In]
  fun uspoof_getAllowedChars(sc : USpoofChecker*, status : UErrorCode*) : USet*

  # Params # sc : USpoofChecker* [In],id : UInt16* [In],length : Int32 [In],position : Int32* [In],status : UErrorCode* [In]
  fun uspoof_check(sc : USpoofChecker*, id : UInt16*, length : Int32, position : Int32*, status : UErrorCode*) : Int32

  # Params # sc : USpoofChecker* [In],id : PSTR [In],length : Int32 [In],position : Int32* [In],status : UErrorCode* [In]
  fun uspoof_checkUTF8(sc : USpoofChecker*, id : PSTR, length : Int32, position : Int32*, status : UErrorCode*) : Int32

  # Params # sc : USpoofChecker* [In],id : UInt16* [In],length : Int32 [In],checkresult : USpoofCheckResult* [In],status : UErrorCode* [In]
  fun uspoof_check2(sc : USpoofChecker*, id : UInt16*, length : Int32, checkresult : USpoofCheckResult*, status : UErrorCode*) : Int32

  # Params # sc : USpoofChecker* [In],id : PSTR [In],length : Int32 [In],checkresult : USpoofCheckResult* [In],status : UErrorCode* [In]
  fun uspoof_check2UTF8(sc : USpoofChecker*, id : PSTR, length : Int32, checkresult : USpoofCheckResult*, status : UErrorCode*) : Int32

  # Params # status : UErrorCode* [In]
  fun uspoof_openCheckResult(status : UErrorCode*) : USpoofCheckResult*

  # Params # checkresult : USpoofCheckResult* [In]
  fun uspoof_closeCheckResult(checkresult : USpoofCheckResult*)

  # Params # checkresult : USpoofCheckResult* [In],status : UErrorCode* [In]
  fun uspoof_getCheckResultChecks(checkresult : USpoofCheckResult*, status : UErrorCode*) : Int32

  # Params # checkresult : USpoofCheckResult* [In],status : UErrorCode* [In]
  fun uspoof_getCheckResultRestrictionLevel(checkresult : USpoofCheckResult*, status : UErrorCode*) : URestrictionLevel

  # Params # checkresult : USpoofCheckResult* [In],status : UErrorCode* [In]
  fun uspoof_getCheckResultNumerics(checkresult : USpoofCheckResult*, status : UErrorCode*) : USet*

  # Params # sc : USpoofChecker* [In],id1 : UInt16* [In],length1 : Int32 [In],id2 : UInt16* [In],length2 : Int32 [In],status : UErrorCode* [In]
  fun uspoof_areConfusable(sc : USpoofChecker*, id1 : UInt16*, length1 : Int32, id2 : UInt16*, length2 : Int32, status : UErrorCode*) : Int32

  # Params # sc : USpoofChecker* [In],id1 : PSTR [In],length1 : Int32 [In],id2 : PSTR [In],length2 : Int32 [In],status : UErrorCode* [In]
  fun uspoof_areConfusableUTF8(sc : USpoofChecker*, id1 : PSTR, length1 : Int32, id2 : PSTR, length2 : Int32, status : UErrorCode*) : Int32

  # Params # sc : USpoofChecker* [In],type : UInt32 [In],id : UInt16* [In],length : Int32 [In],dest : UInt16* [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun uspoof_getSkeleton(sc : USpoofChecker*, type : UInt32, id : UInt16*, length : Int32, dest : UInt16*, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # sc : USpoofChecker* [In],type : UInt32 [In],id : PSTR [In],length : Int32 [In],dest : PSTR [In],destcapacity : Int32 [In],status : UErrorCode* [In]
  fun uspoof_getSkeletonUTF8(sc : USpoofChecker*, type : UInt32, id : PSTR, length : Int32, dest : PSTR, destcapacity : Int32, status : UErrorCode*) : Int32

  # Params # status : UErrorCode* [In]
  fun uspoof_getInclusionSet(status : UErrorCode*) : USet*

  # Params # status : UErrorCode* [In]
  fun uspoof_getRecommendedSet(status : UErrorCode*) : USet*

  # Params # sc : USpoofChecker* [In],data : Void* [In],capacity : Int32 [In],status : UErrorCode* [In]
  fun uspoof_serialize(sc : USpoofChecker*, data : Void*, capacity : Int32, status : UErrorCode*) : Int32

  # Params # timescale : UDateTimeScale [In],value : UTimeScaleValue [In],status : UErrorCode* [In]
  fun utmscale_getTimeScaleValue(timescale : UDateTimeScale, value : UTimeScaleValue, status : UErrorCode*) : Int64

  # Params # othertime : Int64 [In],timescale : UDateTimeScale [In],status : UErrorCode* [In]
  fun utmscale_fromInt64(othertime : Int64, timescale : UDateTimeScale, status : UErrorCode*) : Int64

  # Params # universaltime : Int64 [In],timescale : UDateTimeScale [In],status : UErrorCode* [In]
  fun utmscale_toInt64(universaltime : Int64, timescale : UDateTimeScale, status : UErrorCode*) : Int64

  # Params # id : UInt16* [In],idlength : Int32 [In],dir : UTransDirection [In],rules : UInt16* [In],ruleslength : Int32 [In],parseerror : UParseError* [In],perrorcode : UErrorCode* [In]
  fun utrans_openU(id : UInt16*, idlength : Int32, dir : UTransDirection, rules : UInt16*, ruleslength : Int32, parseerror : UParseError*, perrorcode : UErrorCode*) : Void**

  # Params # trans : Void** [In],status : UErrorCode* [In]
  fun utrans_openInverse(trans : Void**, status : UErrorCode*) : Void**

  # Params # trans : Void** [In],status : UErrorCode* [In]
  fun utrans_clone(trans : Void**, status : UErrorCode*) : Void**

  # Params # trans : Void** [In]
  fun utrans_close(trans : Void**)

  # Params # trans : Void** [In],resultlength : Int32* [In]
  fun utrans_getUnicodeID(trans : Void**, resultlength : Int32*) : UInt16*

  # Params # adoptedtrans : Void** [In],status : UErrorCode* [In]
  fun utrans_register(adoptedtrans : Void**, status : UErrorCode*)

  # Params # id : UInt16* [In],idlength : Int32 [In]
  fun utrans_unregisterID(id : UInt16*, idlength : Int32)

  # Params # trans : Void** [In],filterpattern : UInt16* [In],filterpatternlen : Int32 [In],status : UErrorCode* [In]
  fun utrans_setFilter(trans : Void**, filterpattern : UInt16*, filterpatternlen : Int32, status : UErrorCode*)

  # Params # 
  fun utrans_countAvailableIDs : Int32

  # Params # perrorcode : UErrorCode* [In]
  fun utrans_openIDs(perrorcode : UErrorCode*) : UEnumeration*

  # Params # trans : Void** [In],rep : Void** [In],repfunc : UReplaceableCallbacks* [In],start : Int32 [In],limit : Int32* [In],status : UErrorCode* [In]
  fun utrans_trans(trans : Void**, rep : Void**, repfunc : UReplaceableCallbacks*, start : Int32, limit : Int32*, status : UErrorCode*)

  # Params # trans : Void** [In],rep : Void** [In],repfunc : UReplaceableCallbacks* [In],pos : UTransPosition* [In],status : UErrorCode* [In]
  fun utrans_transIncremental(trans : Void**, rep : Void**, repfunc : UReplaceableCallbacks*, pos : UTransPosition*, status : UErrorCode*)

  # Params # trans : Void** [In],text : UInt16* [In],textlength : Int32* [In],textcapacity : Int32 [In],start : Int32 [In],limit : Int32* [In],status : UErrorCode* [In]
  fun utrans_transUChars(trans : Void**, text : UInt16*, textlength : Int32*, textcapacity : Int32, start : Int32, limit : Int32*, status : UErrorCode*)

  # Params # trans : Void** [In],text : UInt16* [In],textlength : Int32* [In],textcapacity : Int32 [In],pos : UTransPosition* [In],status : UErrorCode* [In]
  fun utrans_transIncrementalUChars(trans : Void**, text : UInt16*, textlength : Int32*, textcapacity : Int32, pos : UTransPosition*, status : UErrorCode*)

  # Params # trans : Void** [In],escapeunprintable : Int8 [In],result : UInt16* [In],resultlength : Int32 [In],status : UErrorCode* [In]
  fun utrans_toRules(trans : Void**, escapeunprintable : Int8, result : UInt16*, resultlength : Int32, status : UErrorCode*) : Int32

  # Params # trans : Void** [In],ignorefilter : Int8 [In],fillin : USet* [In],status : UErrorCode* [In]
  fun utrans_getSourceSet(trans : Void**, ignorefilter : Int8, fillin : USet*, status : UErrorCode*) : USet*

  # Params # pszlanguage : LibC::LPWSTR [In],pszlanguageslist : LibC::LPWSTR [In],wchlistdelimiter : Char [In],pclosestdistance : Float64* [In]
  fun GetDistanceOfClosestLanguageInList(pszlanguage : LibC::LPWSTR, pszlanguageslist : LibC::LPWSTR, wchlistdelimiter : Char, pclosestdistance : Float64*) : HRESULT

  # Params # psztag : LibC::LPWSTR [In]
  fun IsWellFormedTag(psztag : LibC::LPWSTR) : UInt8

  # Params # dwfindstringordinalflags : UInt32 [In],lpstringsource : Char* [In],cchsource : Int32 [In],lpstringvalue : Char* [In],cchvalue : Int32 [In],bignorecase : LibC::BOOL [In]
  fun FindStringOrdinal(dwfindstringordinalflags : UInt32, lpstringsource : Char*, cchsource : Int32, lpstringvalue : Char*, cchvalue : Int32, bignorecase : LibC::BOOL) : Int32

  # Params # lpstring1 : PSTR [In],lpstring2 : PSTR [In]
  fun lstrcmpA(lpstring1 : PSTR, lpstring2 : PSTR) : Int32

  # Params # lpstring1 : LibC::LPWSTR [In],lpstring2 : LibC::LPWSTR [In]
  fun lstrcmpW(lpstring1 : LibC::LPWSTR, lpstring2 : LibC::LPWSTR) : Int32

  # Params # lpstring1 : PSTR [In],lpstring2 : PSTR [In]
  fun lstrcmpiA(lpstring1 : PSTR, lpstring2 : PSTR) : Int32

  # Params # lpstring1 : LibC::LPWSTR [In],lpstring2 : LibC::LPWSTR [In]
  fun lstrcmpiW(lpstring1 : LibC::LPWSTR, lpstring2 : LibC::LPWSTR) : Int32

  # Params # lpstring1 : UInt8* [In],lpstring2 : PSTR [In],imaxlength : Int32 [In]
  fun lstrcpynA(lpstring1 : UInt8*, lpstring2 : PSTR, imaxlength : Int32) : PSTR

  # Params # lpstring1 : Char* [In],lpstring2 : LibC::LPWSTR [In],imaxlength : Int32 [In]
  fun lstrcpynW(lpstring1 : Char*, lpstring2 : LibC::LPWSTR, imaxlength : Int32) : LibC::LPWSTR

  # Params # lpstring1 : PSTR [In],lpstring2 : PSTR [In]
  fun lstrcpyA(lpstring1 : PSTR, lpstring2 : PSTR) : PSTR

  # Params # lpstring1 : LibC::LPWSTR [In],lpstring2 : LibC::LPWSTR [In]
  fun lstrcpyW(lpstring1 : LibC::LPWSTR, lpstring2 : LibC::LPWSTR) : LibC::LPWSTR

  # Params # lpstring1 : PSTR [In],lpstring2 : PSTR [In]
  fun lstrcatA(lpstring1 : PSTR, lpstring2 : PSTR) : PSTR

  # Params # lpstring1 : LibC::LPWSTR [In],lpstring2 : LibC::LPWSTR [In]
  fun lstrcatW(lpstring1 : LibC::LPWSTR, lpstring2 : LibC::LPWSTR) : LibC::LPWSTR

  # Params # lpstring : PSTR [In]
  fun lstrlenA(lpstring : PSTR) : Int32

  # Params # lpstring : LibC::LPWSTR [In]
  fun lstrlenW(lpstring : LibC::LPWSTR) : Int32

  # Params # lpv : Void* [In],isize : Int32 [In],lpiresult : IS_TEXT_UNICODE_RESULT* [In]
  fun IsTextUnicode(lpv : Void*, isize : Int32, lpiresult : IS_TEXT_UNICODE_RESULT*) : LibC::BOOL
end
