require "./graphics/gdi.cr"
require "./foundation.cr"
require "./system/com.cr"

module Win32cr::Globalization
  alias HIMC = LibC::IntPtrT
  alias HIMCC = LibC::IntPtrT
  alias HSAVEDUILANGUAGES = LibC::IntPtrT
  alias LOCALE_ENUMPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)*

  alias LOCALE_ENUMPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)*

  alias LANGUAGEGROUP_ENUMPROCA = Proc(UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::PSTR, UInt32, LibC::IntPtrT, Win32cr::Foundation::BOOL)*

  alias LANGGROUPLOCALE_ENUMPROCA = Proc(UInt32, UInt32, Win32cr::Foundation::PSTR, LibC::IntPtrT, Win32cr::Foundation::BOOL)*

  alias UILANGUAGE_ENUMPROCA = Proc(Win32cr::Foundation::PSTR, LibC::IntPtrT, Win32cr::Foundation::BOOL)*

  alias CODEPAGE_ENUMPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)*

  alias DATEFMT_ENUMPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)*

  alias DATEFMT_ENUMPROCEXA = Proc(Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::BOOL)*

  alias TIMEFMT_ENUMPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)*

  alias CALINFO_ENUMPROCA = Proc(Win32cr::Foundation::PSTR, Win32cr::Foundation::BOOL)*

  alias CALINFO_ENUMPROCEXA = Proc(Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::BOOL)*

  alias LANGUAGEGROUP_ENUMPROCW = Proc(UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, LibC::IntPtrT, Win32cr::Foundation::BOOL)*

  alias LANGGROUPLOCALE_ENUMPROCW = Proc(UInt32, UInt32, Win32cr::Foundation::PWSTR, LibC::IntPtrT, Win32cr::Foundation::BOOL)*

  alias UILANGUAGE_ENUMPROCW = Proc(Win32cr::Foundation::PWSTR, LibC::IntPtrT, Win32cr::Foundation::BOOL)*

  alias CODEPAGE_ENUMPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)*

  alias DATEFMT_ENUMPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)*

  alias DATEFMT_ENUMPROCEXW = Proc(Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::BOOL)*

  alias TIMEFMT_ENUMPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)*

  alias CALINFO_ENUMPROCW = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL)*

  alias CALINFO_ENUMPROCEXW = Proc(Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::BOOL)*

  alias GEO_ENUMPROC = Proc(Int32, Win32cr::Foundation::BOOL)*

  alias GEO_ENUMNAMEPROC = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::LPARAM, Win32cr::Foundation::BOOL)*

  alias CALINFO_ENUMPROCEXEX = Proc(Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::LPARAM, Win32cr::Foundation::BOOL)*

  alias DATEFMT_ENUMPROCEXEX = Proc(Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::LPARAM, Win32cr::Foundation::BOOL)*

  alias TIMEFMT_ENUMPROCEX = Proc(Win32cr::Foundation::PWSTR, Win32cr::Foundation::LPARAM, Win32cr::Foundation::BOOL)*

  alias LOCALE_ENUMPROCEX = Proc(Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::LPARAM, Win32cr::Foundation::BOOL)*

  alias PFN_MAPPINGCALLBACKPROC = Proc(Win32cr::Globalization::MAPPING_PROPERTY_BAG*, Void*, UInt32, Win32cr::Foundation::HRESULT, Void)*

  alias UTraceEntry = Proc(Void*, Int32, Void)*

  alias UTraceExit = Proc(Void*, Int32, Win32cr::Foundation::PSTR, Int8*, Void)*

  alias UTraceData = Proc(Void*, Int32, Int32, Win32cr::Foundation::PSTR, Int8*, Void)*

  alias UCharIteratorGetIndex = Proc(Win32cr::Globalization::UCharIterator*, Win32cr::Globalization::UCharIteratorOrigin, Int32)*

  alias UCharIteratorMove = Proc(Win32cr::Globalization::UCharIterator*, Int32, Win32cr::Globalization::UCharIteratorOrigin, Int32)*

  alias UCharIteratorHasNext = Proc(Win32cr::Globalization::UCharIterator*, Int8)*

  alias UCharIteratorHasPrevious = Proc(Win32cr::Globalization::UCharIterator*, Int8)*

  alias UCharIteratorCurrent = Proc(Win32cr::Globalization::UCharIterator*, Int32)*

  alias UCharIteratorNext = Proc(Win32cr::Globalization::UCharIterator*, Int32)*

  alias UCharIteratorPrevious = Proc(Win32cr::Globalization::UCharIterator*, Int32)*

  alias UCharIteratorReserved = Proc(Win32cr::Globalization::UCharIterator*, Int32, Int32)*

  alias UCharIteratorGetState = Proc(Win32cr::Globalization::UCharIterator*, UInt32)*

  alias UCharIteratorSetState = Proc(Win32cr::Globalization::UCharIterator*, UInt32, Win32cr::Globalization::UErrorCode*, Void)*

  alias UCPMapValueFilter = Proc(Void*, UInt32, UInt32)*

  alias UConverterToUCallback = Proc(Void*, Win32cr::Globalization::UConverterToUnicodeArgs*, Win32cr::Foundation::PSTR, Int32, Win32cr::Globalization::UConverterCallbackReason, Win32cr::Globalization::UErrorCode*, Void)*

  alias UConverterFromUCallback = Proc(Void*, Win32cr::Globalization::UConverterFromUnicodeArgs*, UInt16*, Int32, Int32, Win32cr::Globalization::UConverterCallbackReason, Win32cr::Globalization::UErrorCode*, Void)*

  alias UMemAllocFn = Proc(Void*, LibC::UIntPtrT, Void*)*

  alias UMemReallocFn = Proc(Void*, Void*, LibC::UIntPtrT, Void*)*

  alias UMemFreeFn = Proc(Void*, Void*, Void)*

  alias UCharEnumTypeRange = Proc(Void*, Int32, Int32, Win32cr::Globalization::UCharCategory, Int8)*

  alias UEnumCharNamesFn = Proc(Void*, Int32, Win32cr::Globalization::UCharNameChoice, Win32cr::Foundation::PSTR, Int32, Int8)*

  alias UBiDiClassCallback = Proc(Void*, Int32, Win32cr::Globalization::UCharDirection)*

  alias UTextClone = Proc(Win32cr::Globalization::UText*, Win32cr::Globalization::UText*, Int8, Win32cr::Globalization::UErrorCode*, Win32cr::Globalization::UText*)*

  alias UTextNativeLength = Proc(Win32cr::Globalization::UText*, Int64)*

  alias UTextAccess = Proc(Win32cr::Globalization::UText*, Int64, Int8, Int8)*

  alias UTextExtract = Proc(Win32cr::Globalization::UText*, Int64, Int64, UInt16*, Int32, Win32cr::Globalization::UErrorCode*, Int32)*

  alias UTextReplace = Proc(Win32cr::Globalization::UText*, Int64, Int64, UInt16*, Int32, Win32cr::Globalization::UErrorCode*, Int32)*

  alias UTextCopy = Proc(Win32cr::Globalization::UText*, Int64, Int64, Int64, Int8, Win32cr::Globalization::UErrorCode*, Void)*

  alias UTextMapOffsetToNative = Proc(Win32cr::Globalization::UText*, Int64)*

  alias UTextMapNativeIndexToUTF16 = Proc(Win32cr::Globalization::UText*, Int64, Int32)*

  alias UTextClose = Proc(Win32cr::Globalization::UText*, Void)*

  alias UNESCAPE_CHAR_AT = Proc(Int32, Void*, UInt16)*

  alias URegexMatchCallback = Proc(Void*, Int32, Int8)*

  alias URegexFindProgressCallback = Proc(Void*, Int64, Int8)*

  alias UStringCaseMapper = Proc(Win32cr::Globalization::UCaseMap*, UInt16*, Int32, UInt16*, Int32, Win32cr::Globalization::UErrorCode*, Int32)*

  ALL_SERVICE_TYPES = 0_u32
  HIGHLEVEL_SERVICE_TYPES = 1_u32
  LOWLEVEL_SERVICE_TYPES = 2_u32
  ALL_SERVICES = 0_u32
  ONLINE_SERVICES = 1_u32
  OFFLINE_SERVICES = 2_u32
  MAX_LEADBYTES = 12_u32
  MAX_DEFAULTCHAR = 2_u32
  HIGH_SURROGATE_START = 55296_u32
  HIGH_SURROGATE_END = 56319_u32
  LOW_SURROGATE_START = 56320_u32
  LOW_SURROGATE_END = 57343_u32
  WC_COMPOSITECHECK = 512_u32
  WC_DISCARDNS = 16_u32
  WC_SEPCHARS = 32_u32
  WC_DEFAULTCHAR = 64_u32
  WC_ERR_INVALID_CHARS = 128_u32
  WC_NO_BEST_FIT_CHARS = 1024_u32
  CT_CTYPE1 = 1_u32
  CT_CTYPE2 = 2_u32
  CT_CTYPE3 = 4_u32
  C1_UPPER = 1_u32
  C1_LOWER = 2_u32
  C1_DIGIT = 4_u32
  C1_SPACE = 8_u32
  C1_PUNCT = 16_u32
  C1_CNTRL = 32_u32
  C1_BLANK = 64_u32
  C1_XDIGIT = 128_u32
  C1_ALPHA = 256_u32
  C1_DEFINED = 512_u32
  C2_LEFTTORIGHT = 1_u32
  C2_RIGHTTOLEFT = 2_u32
  C2_EUROPENUMBER = 3_u32
  C2_EUROPESEPARATOR = 4_u32
  C2_EUROPETERMINATOR = 5_u32
  C2_ARABICNUMBER = 6_u32
  C2_COMMONSEPARATOR = 7_u32
  C2_BLOCKSEPARATOR = 8_u32
  C2_SEGMENTSEPARATOR = 9_u32
  C2_WHITESPACE = 10_u32
  C2_OTHERNEUTRAL = 11_u32
  C2_NOTAPPLICABLE = 0_u32
  C3_NONSPACING = 1_u32
  C3_DIACRITIC = 2_u32
  C3_VOWELMARK = 4_u32
  C3_SYMBOL = 8_u32
  C3_KATAKANA = 16_u32
  C3_HIRAGANA = 32_u32
  C3_HALFWIDTH = 64_u32
  C3_FULLWIDTH = 128_u32
  C3_IDEOGRAPH = 256_u32
  C3_KASHIDA = 512_u32
  C3_LEXICAL = 1024_u32
  C3_HIGHSURROGATE = 2048_u32
  C3_LOWSURROGATE = 4096_u32
  C3_ALPHA = 32768_u32
  C3_NOTAPPLICABLE = 0_u32
  LCMAP_LOWERCASE = 256_u32
  LCMAP_UPPERCASE = 512_u32
  LCMAP_TITLECASE = 768_u32
  LCMAP_SORTKEY = 1024_u32
  LCMAP_BYTEREV = 2048_u32
  LCMAP_HIRAGANA = 1048576_u32
  LCMAP_KATAKANA = 2097152_u32
  LCMAP_HALFWIDTH = 4194304_u32
  LCMAP_FULLWIDTH = 8388608_u32
  LCMAP_LINGUISTIC_CASING = 16777216_u32
  LCMAP_SIMPLIFIED_CHINESE = 33554432_u32
  LCMAP_TRADITIONAL_CHINESE = 67108864_u32
  LCMAP_SORTHANDLE = 536870912_u32
  LCMAP_HASH = 262144_u32
  FIND_STARTSWITH = 1048576_u32
  FIND_ENDSWITH = 2097152_u32
  FIND_FROMSTART = 4194304_u32
  FIND_FROMEND = 8388608_u32
  LCID_ALTERNATE_SORTS = 4_u32
  LOCALE_ALL = 0_u32
  LOCALE_WINDOWS = 1_u32
  LOCALE_SUPPLEMENTAL = 2_u32
  LOCALE_ALTERNATE_SORTS = 4_u32
  LOCALE_REPLACEMENT = 8_u32
  LOCALE_NEUTRALDATA = 16_u32
  LOCALE_SPECIFICDATA = 32_u32
  CSTR_LESS_THAN = 1_u32
  CSTR_EQUAL = 2_u32
  CSTR_GREATER_THAN = 3_u32
  CP_ACP = 0_u32
  CP_OEMCP = 1_u32
  CP_MACCP = 2_u32
  CP_THREAD_ACP = 3_u32
  CP_SYMBOL = 42_u32
  CP_UTF7 = 65000_u32
  CP_UTF8 = 65001_u32
  CTRY_DEFAULT = 0_u32
  CTRY_ALBANIA = 355_u32
  CTRY_ALGERIA = 213_u32
  CTRY_ARGENTINA = 54_u32
  CTRY_ARMENIA = 374_u32
  CTRY_AUSTRALIA = 61_u32
  CTRY_AUSTRIA = 43_u32
  CTRY_AZERBAIJAN = 994_u32
  CTRY_BAHRAIN = 973_u32
  CTRY_BELARUS = 375_u32
  CTRY_BELGIUM = 32_u32
  CTRY_BELIZE = 501_u32
  CTRY_BOLIVIA = 591_u32
  CTRY_BRAZIL = 55_u32
  CTRY_BRUNEI_DARUSSALAM = 673_u32
  CTRY_BULGARIA = 359_u32
  CTRY_CANADA = 2_u32
  CTRY_CARIBBEAN = 1_u32
  CTRY_CHILE = 56_u32
  CTRY_COLOMBIA = 57_u32
  CTRY_COSTA_RICA = 506_u32
  CTRY_CROATIA = 385_u32
  CTRY_CZECH = 420_u32
  CTRY_DENMARK = 45_u32
  CTRY_DOMINICAN_REPUBLIC = 1_u32
  CTRY_ECUADOR = 593_u32
  CTRY_EGYPT = 20_u32
  CTRY_EL_SALVADOR = 503_u32
  CTRY_ESTONIA = 372_u32
  CTRY_FAEROE_ISLANDS = 298_u32
  CTRY_FINLAND = 358_u32
  CTRY_FRANCE = 33_u32
  CTRY_GEORGIA = 995_u32
  CTRY_GERMANY = 49_u32
  CTRY_GREECE = 30_u32
  CTRY_GUATEMALA = 502_u32
  CTRY_HONDURAS = 504_u32
  CTRY_HONG_KONG = 852_u32
  CTRY_HUNGARY = 36_u32
  CTRY_ICELAND = 354_u32
  CTRY_INDIA = 91_u32
  CTRY_INDONESIA = 62_u32
  CTRY_IRAN = 981_u32
  CTRY_IRAQ = 964_u32
  CTRY_IRELAND = 353_u32
  CTRY_ISRAEL = 972_u32
  CTRY_ITALY = 39_u32
  CTRY_JAMAICA = 1_u32
  CTRY_JAPAN = 81_u32
  CTRY_JORDAN = 962_u32
  CTRY_KAZAKSTAN = 7_u32
  CTRY_KENYA = 254_u32
  CTRY_KUWAIT = 965_u32
  CTRY_KYRGYZSTAN = 996_u32
  CTRY_LATVIA = 371_u32
  CTRY_LEBANON = 961_u32
  CTRY_LIBYA = 218_u32
  CTRY_LIECHTENSTEIN = 41_u32
  CTRY_LITHUANIA = 370_u32
  CTRY_LUXEMBOURG = 352_u32
  CTRY_MACAU = 853_u32
  CTRY_MACEDONIA = 389_u32
  CTRY_MALAYSIA = 60_u32
  CTRY_MALDIVES = 960_u32
  CTRY_MEXICO = 52_u32
  CTRY_MONACO = 33_u32
  CTRY_MONGOLIA = 976_u32
  CTRY_MOROCCO = 212_u32
  CTRY_NETHERLANDS = 31_u32
  CTRY_NEW_ZEALAND = 64_u32
  CTRY_NICARAGUA = 505_u32
  CTRY_NORWAY = 47_u32
  CTRY_OMAN = 968_u32
  CTRY_PAKISTAN = 92_u32
  CTRY_PANAMA = 507_u32
  CTRY_PARAGUAY = 595_u32
  CTRY_PERU = 51_u32
  CTRY_PHILIPPINES = 63_u32
  CTRY_POLAND = 48_u32
  CTRY_PORTUGAL = 351_u32
  CTRY_PRCHINA = 86_u32
  CTRY_PUERTO_RICO = 1_u32
  CTRY_QATAR = 974_u32
  CTRY_ROMANIA = 40_u32
  CTRY_RUSSIA = 7_u32
  CTRY_SAUDI_ARABIA = 966_u32
  CTRY_SERBIA = 381_u32
  CTRY_SINGAPORE = 65_u32
  CTRY_SLOVAK = 421_u32
  CTRY_SLOVENIA = 386_u32
  CTRY_SOUTH_AFRICA = 27_u32
  CTRY_SOUTH_KOREA = 82_u32
  CTRY_SPAIN = 34_u32
  CTRY_SWEDEN = 46_u32
  CTRY_SWITZERLAND = 41_u32
  CTRY_SYRIA = 963_u32
  CTRY_TAIWAN = 886_u32
  CTRY_TATARSTAN = 7_u32
  CTRY_THAILAND = 66_u32
  CTRY_TRINIDAD_Y_TOBAGO = 1_u32
  CTRY_TUNISIA = 216_u32
  CTRY_TURKEY = 90_u32
  CTRY_UAE = 971_u32
  CTRY_UKRAINE = 380_u32
  CTRY_UNITED_KINGDOM = 44_u32
  CTRY_UNITED_STATES = 1_u32
  CTRY_URUGUAY = 598_u32
  CTRY_UZBEKISTAN = 7_u32
  CTRY_VENEZUELA = 58_u32
  CTRY_VIET_NAM = 84_u32
  CTRY_YEMEN = 967_u32
  CTRY_ZIMBABWE = 263_u32
  LOCALE_NOUSEROVERRIDE = 2147483648_u32
  LOCALE_USE_CP_ACP = 1073741824_u32
  LOCALE_RETURN_NUMBER = 536870912_u32
  LOCALE_RETURN_GENITIVE_NAMES = 268435456_u32
  LOCALE_ALLOW_NEUTRAL_NAMES = 134217728_u32
  LOCALE_SLOCALIZEDDISPLAYNAME = 2_u32
  LOCALE_SENGLISHDISPLAYNAME = 114_u32
  LOCALE_SNATIVEDISPLAYNAME = 115_u32
  LOCALE_SLOCALIZEDLANGUAGENAME = 111_u32
  LOCALE_SENGLISHLANGUAGENAME = 4097_u32
  LOCALE_SNATIVELANGUAGENAME = 4_u32
  LOCALE_SLOCALIZEDCOUNTRYNAME = 6_u32
  LOCALE_SENGLISHCOUNTRYNAME = 4098_u32
  LOCALE_SNATIVECOUNTRYNAME = 8_u32
  LOCALE_IDIALINGCODE = 5_u32
  LOCALE_SLIST = 12_u32
  LOCALE_IMEASURE = 13_u32
  LOCALE_SDECIMAL = 14_u32
  LOCALE_STHOUSAND = 15_u32
  LOCALE_SGROUPING = 16_u32
  LOCALE_IDIGITS = 17_u32
  LOCALE_ILZERO = 18_u32
  LOCALE_INEGNUMBER = 4112_u32
  LOCALE_SNATIVEDIGITS = 19_u32
  LOCALE_SCURRENCY = 20_u32
  LOCALE_SINTLSYMBOL = 21_u32
  LOCALE_SMONDECIMALSEP = 22_u32
  LOCALE_SMONTHOUSANDSEP = 23_u32
  LOCALE_SMONGROUPING = 24_u32
  LOCALE_ICURRDIGITS = 25_u32
  LOCALE_ICURRENCY = 27_u32
  LOCALE_INEGCURR = 28_u32
  LOCALE_SSHORTDATE = 31_u32
  LOCALE_SLONGDATE = 32_u32
  LOCALE_STIMEFORMAT = 4099_u32
  LOCALE_SAM = 40_u32
  LOCALE_SPM = 41_u32
  LOCALE_ICALENDARTYPE = 4105_u32
  LOCALE_IOPTIONALCALENDAR = 4107_u32
  LOCALE_IFIRSTDAYOFWEEK = 4108_u32
  LOCALE_IFIRSTWEEKOFYEAR = 4109_u32
  LOCALE_SDAYNAME1 = 42_u32
  LOCALE_SDAYNAME2 = 43_u32
  LOCALE_SDAYNAME3 = 44_u32
  LOCALE_SDAYNAME4 = 45_u32
  LOCALE_SDAYNAME5 = 46_u32
  LOCALE_SDAYNAME6 = 47_u32
  LOCALE_SDAYNAME7 = 48_u32
  LOCALE_SABBREVDAYNAME1 = 49_u32
  LOCALE_SABBREVDAYNAME2 = 50_u32
  LOCALE_SABBREVDAYNAME3 = 51_u32
  LOCALE_SABBREVDAYNAME4 = 52_u32
  LOCALE_SABBREVDAYNAME5 = 53_u32
  LOCALE_SABBREVDAYNAME6 = 54_u32
  LOCALE_SABBREVDAYNAME7 = 55_u32
  LOCALE_SMONTHNAME1 = 56_u32
  LOCALE_SMONTHNAME2 = 57_u32
  LOCALE_SMONTHNAME3 = 58_u32
  LOCALE_SMONTHNAME4 = 59_u32
  LOCALE_SMONTHNAME5 = 60_u32
  LOCALE_SMONTHNAME6 = 61_u32
  LOCALE_SMONTHNAME7 = 62_u32
  LOCALE_SMONTHNAME8 = 63_u32
  LOCALE_SMONTHNAME9 = 64_u32
  LOCALE_SMONTHNAME10 = 65_u32
  LOCALE_SMONTHNAME11 = 66_u32
  LOCALE_SMONTHNAME12 = 67_u32
  LOCALE_SMONTHNAME13 = 4110_u32
  LOCALE_SABBREVMONTHNAME1 = 68_u32
  LOCALE_SABBREVMONTHNAME2 = 69_u32
  LOCALE_SABBREVMONTHNAME3 = 70_u32
  LOCALE_SABBREVMONTHNAME4 = 71_u32
  LOCALE_SABBREVMONTHNAME5 = 72_u32
  LOCALE_SABBREVMONTHNAME6 = 73_u32
  LOCALE_SABBREVMONTHNAME7 = 74_u32
  LOCALE_SABBREVMONTHNAME8 = 75_u32
  LOCALE_SABBREVMONTHNAME9 = 76_u32
  LOCALE_SABBREVMONTHNAME10 = 77_u32
  LOCALE_SABBREVMONTHNAME11 = 78_u32
  LOCALE_SABBREVMONTHNAME12 = 79_u32
  LOCALE_SABBREVMONTHNAME13 = 4111_u32
  LOCALE_SPOSITIVESIGN = 80_u32
  LOCALE_SNEGATIVESIGN = 81_u32
  LOCALE_IPOSSIGNPOSN = 82_u32
  LOCALE_INEGSIGNPOSN = 83_u32
  LOCALE_IPOSSYMPRECEDES = 84_u32
  LOCALE_IPOSSEPBYSPACE = 85_u32
  LOCALE_INEGSYMPRECEDES = 86_u32
  LOCALE_INEGSEPBYSPACE = 87_u32
  LOCALE_FONTSIGNATURE = 88_u32
  LOCALE_SISO639LANGNAME = 89_u32
  LOCALE_SISO3166CTRYNAME = 90_u32
  LOCALE_IPAPERSIZE = 4106_u32
  LOCALE_SENGCURRNAME = 4103_u32
  LOCALE_SNATIVECURRNAME = 4104_u32
  LOCALE_SYEARMONTH = 4102_u32
  LOCALE_SSORTNAME = 4115_u32
  LOCALE_IDIGITSUBSTITUTION = 4116_u32
  LOCALE_SNAME = 92_u32
  LOCALE_SDURATION = 93_u32
  LOCALE_SSHORTESTDAYNAME1 = 96_u32
  LOCALE_SSHORTESTDAYNAME2 = 97_u32
  LOCALE_SSHORTESTDAYNAME3 = 98_u32
  LOCALE_SSHORTESTDAYNAME4 = 99_u32
  LOCALE_SSHORTESTDAYNAME5 = 100_u32
  LOCALE_SSHORTESTDAYNAME6 = 101_u32
  LOCALE_SSHORTESTDAYNAME7 = 102_u32
  LOCALE_SISO639LANGNAME2 = 103_u32
  LOCALE_SISO3166CTRYNAME2 = 104_u32
  LOCALE_SNAN = 105_u32
  LOCALE_SPOSINFINITY = 106_u32
  LOCALE_SNEGINFINITY = 107_u32
  LOCALE_SSCRIPTS = 108_u32
  LOCALE_SPARENT = 109_u32
  LOCALE_SCONSOLEFALLBACKNAME = 110_u32
  LOCALE_IREADINGLAYOUT = 112_u32
  LOCALE_INEUTRAL = 113_u32
  LOCALE_INEGATIVEPERCENT = 116_u32
  LOCALE_IPOSITIVEPERCENT = 117_u32
  LOCALE_SPERCENT = 118_u32
  LOCALE_SPERMILLE = 119_u32
  LOCALE_SMONTHDAY = 120_u32
  LOCALE_SSHORTTIME = 121_u32
  LOCALE_SOPENTYPELANGUAGETAG = 122_u32
  LOCALE_SSORTLOCALE = 123_u32
  LOCALE_SRELATIVELONGDATE = 124_u32
  LOCALE_ICONSTRUCTEDLOCALE = 125_u32
  LOCALE_SSHORTESTAM = 126_u32
  LOCALE_SSHORTESTPM = 127_u32
  LOCALE_IUSEUTF8LEGACYACP = 1638_u32
  LOCALE_IUSEUTF8LEGACYOEMCP = 2457_u32
  LOCALE_IDEFAULTCODEPAGE = 11_u32
  LOCALE_IDEFAULTANSICODEPAGE = 4100_u32
  LOCALE_IDEFAULTMACCODEPAGE = 4113_u32
  LOCALE_IDEFAULTEBCDICCODEPAGE = 4114_u32
  LOCALE_ILANGUAGE = 1_u32
  LOCALE_SABBREVLANGNAME = 3_u32
  LOCALE_SABBREVCTRYNAME = 7_u32
  LOCALE_IGEOID = 91_u32
  LOCALE_IDEFAULTLANGUAGE = 9_u32
  LOCALE_IDEFAULTCOUNTRY = 10_u32
  LOCALE_IINTLCURRDIGITS = 26_u32
  LOCALE_SDATE = 29_u32
  LOCALE_STIME = 30_u32
  LOCALE_IDATE = 33_u32
  LOCALE_ILDATE = 34_u32
  LOCALE_ITIME = 35_u32
  LOCALE_ITIMEMARKPOSN = 4101_u32
  LOCALE_ICENTURY = 36_u32
  LOCALE_ITLZERO = 37_u32
  LOCALE_IDAYLZERO = 38_u32
  LOCALE_IMONLZERO = 39_u32
  LOCALE_SKEYBOARDSTOINSTALL = 94_u32
  LOCALE_SLANGUAGE = 2_u32
  LOCALE_SLANGDISPLAYNAME = 111_u32
  LOCALE_SENGLANGUAGE = 4097_u32
  LOCALE_SNATIVELANGNAME = 4_u32
  LOCALE_SCOUNTRY = 6_u32
  LOCALE_SENGCOUNTRY = 4098_u32
  LOCALE_SNATIVECTRYNAME = 8_u32
  LOCALE_ICOUNTRY = 5_u32
  LOCALE_S1159 = 40_u32
  LOCALE_S2359 = 41_u32
  CAL_NOUSEROVERRIDE = 2147483648_u32
  CAL_USE_CP_ACP = 1073741824_u32
  CAL_RETURN_NUMBER = 536870912_u32
  CAL_RETURN_GENITIVE_NAMES = 268435456_u32
  CAL_ICALINTVALUE = 1_u32
  CAL_SCALNAME = 2_u32
  CAL_IYEAROFFSETRANGE = 3_u32
  CAL_SERASTRING = 4_u32
  CAL_SSHORTDATE = 5_u32
  CAL_SLONGDATE = 6_u32
  CAL_SDAYNAME1 = 7_u32
  CAL_SDAYNAME2 = 8_u32
  CAL_SDAYNAME3 = 9_u32
  CAL_SDAYNAME4 = 10_u32
  CAL_SDAYNAME5 = 11_u32
  CAL_SDAYNAME6 = 12_u32
  CAL_SDAYNAME7 = 13_u32
  CAL_SABBREVDAYNAME1 = 14_u32
  CAL_SABBREVDAYNAME2 = 15_u32
  CAL_SABBREVDAYNAME3 = 16_u32
  CAL_SABBREVDAYNAME4 = 17_u32
  CAL_SABBREVDAYNAME5 = 18_u32
  CAL_SABBREVDAYNAME6 = 19_u32
  CAL_SABBREVDAYNAME7 = 20_u32
  CAL_SMONTHNAME1 = 21_u32
  CAL_SMONTHNAME2 = 22_u32
  CAL_SMONTHNAME3 = 23_u32
  CAL_SMONTHNAME4 = 24_u32
  CAL_SMONTHNAME5 = 25_u32
  CAL_SMONTHNAME6 = 26_u32
  CAL_SMONTHNAME7 = 27_u32
  CAL_SMONTHNAME8 = 28_u32
  CAL_SMONTHNAME9 = 29_u32
  CAL_SMONTHNAME10 = 30_u32
  CAL_SMONTHNAME11 = 31_u32
  CAL_SMONTHNAME12 = 32_u32
  CAL_SMONTHNAME13 = 33_u32
  CAL_SABBREVMONTHNAME1 = 34_u32
  CAL_SABBREVMONTHNAME2 = 35_u32
  CAL_SABBREVMONTHNAME3 = 36_u32
  CAL_SABBREVMONTHNAME4 = 37_u32
  CAL_SABBREVMONTHNAME5 = 38_u32
  CAL_SABBREVMONTHNAME6 = 39_u32
  CAL_SABBREVMONTHNAME7 = 40_u32
  CAL_SABBREVMONTHNAME8 = 41_u32
  CAL_SABBREVMONTHNAME9 = 42_u32
  CAL_SABBREVMONTHNAME10 = 43_u32
  CAL_SABBREVMONTHNAME11 = 44_u32
  CAL_SABBREVMONTHNAME12 = 45_u32
  CAL_SABBREVMONTHNAME13 = 46_u32
  CAL_SYEARMONTH = 47_u32
  CAL_ITWODIGITYEARMAX = 48_u32
  CAL_SSHORTESTDAYNAME1 = 49_u32
  CAL_SSHORTESTDAYNAME2 = 50_u32
  CAL_SSHORTESTDAYNAME3 = 51_u32
  CAL_SSHORTESTDAYNAME4 = 52_u32
  CAL_SSHORTESTDAYNAME5 = 53_u32
  CAL_SSHORTESTDAYNAME6 = 54_u32
  CAL_SSHORTESTDAYNAME7 = 55_u32
  CAL_SMONTHDAY = 56_u32
  CAL_SABBREVERASTRING = 57_u32
  CAL_SRELATIVELONGDATE = 58_u32
  CAL_SENGLISHERANAME = 59_u32
  CAL_SENGLISHABBREVERANAME = 60_u32
  CAL_SJAPANESEERAFIRSTYEAR = 61_u32
  ENUM_ALL_CALENDARS = 4294967295_u32
  CAL_GREGORIAN = 1_u32
  CAL_GREGORIAN_US = 2_u32
  CAL_JAPAN = 3_u32
  CAL_TAIWAN = 4_u32
  CAL_KOREA = 5_u32
  CAL_HIJRI = 6_u32
  CAL_THAI = 7_u32
  CAL_HEBREW = 8_u32
  CAL_GREGORIAN_ME_FRENCH = 9_u32
  CAL_GREGORIAN_ARABIC = 10_u32
  CAL_GREGORIAN_XLIT_ENGLISH = 11_u32
  CAL_GREGORIAN_XLIT_FRENCH = 12_u32
  CAL_PERSIAN = 22_u32
  CAL_UMALQURA = 23_u32
  LGRPID_WESTERN_EUROPE = 1_u32
  LGRPID_CENTRAL_EUROPE = 2_u32
  LGRPID_BALTIC = 3_u32
  LGRPID_GREEK = 4_u32
  LGRPID_CYRILLIC = 5_u32
  LGRPID_TURKIC = 6_u32
  LGRPID_TURKISH = 6_u32
  LGRPID_JAPANESE = 7_u32
  LGRPID_KOREAN = 8_u32
  LGRPID_TRADITIONAL_CHINESE = 9_u32
  LGRPID_SIMPLIFIED_CHINESE = 10_u32
  LGRPID_THAI = 11_u32
  LGRPID_HEBREW = 12_u32
  LGRPID_ARABIC = 13_u32
  LGRPID_VIETNAMESE = 14_u32
  LGRPID_INDIC = 15_u32
  LGRPID_GEORGIAN = 16_u32
  LGRPID_ARMENIAN = 17_u32
  MUI_LANGUAGE_ID = 4_u32
  MUI_LANGUAGE_NAME = 8_u32
  MUI_MERGE_SYSTEM_FALLBACK = 16_u32
  MUI_MERGE_USER_FALLBACK = 32_u32
  MUI_THREAD_LANGUAGES = 64_u32
  MUI_CONSOLE_FILTER = 256_u32
  MUI_COMPLEX_SCRIPT_FILTER = 512_u32
  MUI_RESET_FILTERS = 1_u32
  MUI_USER_PREFERRED_UI_LANGUAGES = 16_u32
  MUI_USE_INSTALLED_LANGUAGES = 32_u32
  MUI_USE_SEARCH_ALL_LANGUAGES = 64_u32
  MUI_LANG_NEUTRAL_PE_FILE = 256_u32
  MUI_NON_LANG_NEUTRAL_FILE = 512_u32
  MUI_MACHINE_LANGUAGE_SETTINGS = 1024_u32
  MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1_u32
  MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2_u32
  MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4_u32
  MUI_QUERY_TYPE = 1_u32
  MUI_QUERY_CHECKSUM = 2_u32
  MUI_QUERY_LANGUAGE_NAME = 4_u32
  MUI_QUERY_RESOURCE_TYPES = 8_u32
  MUI_FILEINFO_VERSION = 1_u32
  MUI_FULL_LANGUAGE = 1_u32
  MUI_PARTIAL_LANGUAGE = 2_u32
  MUI_LIP_LANGUAGE = 4_u32
  MUI_LANGUAGE_INSTALLED = 32_u32
  MUI_LANGUAGE_LICENSED = 64_u32
  GEOID_NOT_AVAILABLE = -1_i32
  SORTING_PARADIGM_NLS = 0_u32
  SORTING_PARADIGM_ICU = 16777216_u32
  IDN_ALLOW_UNASSIGNED = 1_u32
  IDN_USE_STD3_ASCII_RULES = 2_u32
  IDN_EMAIL_ADDRESS = 4_u32
  IDN_RAW_PUNYCODE = 8_u32
  VS_ALLOW_LATIN = 1_u32
  GSS_ALLOW_INHERITED_COMMON = 1_u32
  MUI_FORMAT_REG_COMPAT = 1_u32
  MUI_FORMAT_INF_COMPAT = 2_u32
  MUI_VERIFY_FILE_EXISTS = 4_u32
  MUI_SKIP_STRING_CACHE = 8_u32
  MUI_IMMUTABLE_LOOKUP = 16_u32
  LOCALE_NAME_INVARIANT = null
  LOCALE_NAME_SYSTEM_DEFAULT = "!x-sys-default-locale"
  MIN_SPELLING_NTDDI = 100794368_u32
  SCRIPT_UNDEFINED = 0_u32
  USP_E_SCRIPT_NOT_IN_FONT = -2147220992_i32
  SGCM_RTL = 1_u32
  SSA_PASSWORD = 1_u32
  SSA_TAB = 2_u32
  SSA_CLIP = 4_u32
  SSA_FIT = 8_u32
  SSA_DZWG = 16_u32
  SSA_FALLBACK = 32_u32
  SSA_BREAK = 64_u32
  SSA_GLYPHS = 128_u32
  SSA_RTL = 256_u32
  SSA_GCP = 512_u32
  SSA_HOTKEY = 1024_u32
  SSA_METAFILE = 2048_u32
  SSA_LINK = 4096_u32
  SSA_HIDEHOTKEY = 8192_u32
  SSA_HOTKEYONLY = 9216_u32
  SSA_FULLMEASURE = 67108864_u32
  SSA_LPKANSIFALLBACK = 134217728_u32
  SSA_PIDX = 268435456_u32
  SSA_LAYOUTRTL = 536870912_u32
  SSA_DONTGLYPH = 1073741824_u32
  SSA_NOKASHIDA = 2147483648_u32
  SCRIPT_DIGITSUBSTITUTE_CONTEXT = 0_u32
  SCRIPT_DIGITSUBSTITUTE_NONE = 1_u32
  SCRIPT_DIGITSUBSTITUTE_NATIONAL = 2_u32
  SCRIPT_DIGITSUBSTITUTE_TRADITIONAL = 3_u32
  UNISCRIBE_OPENTYPE = 256_u32
  SCRIPT_TAG_UNKNOWN = 0_u32
  MUI_LANGUAGE_EXACT = 16_u32
  NLS_CP_CPINFO = 268435456_u32
  NLS_CP_MBTOWC = 1073741824_u32
  NLS_CP_WCTOMB = 2147483648_u32
  U_DISABLE_RENAMING = 1_u32
  U_SHOW_CPLUSPLUS_API = 0_u32
  U_DEFAULT_SHOW_DRAFT = 0_u32
  U_HIDE_DRAFT_API = 1_u32
  U_HIDE_DEPRECATED_API = 1_u32
  U_HIDE_OBSOLETE_API = 1_u32
  U_HIDE_INTERNAL_API = 1_u32
  U_NO_DEFAULT_INCLUDE_UTF_HEADERS = 1_u32
  U_DEBUG = 1_u32
  UCLN_NO_AUTO_CLEANUP = 1_u32
  U_OVERRIDE_CXX_ALLOCATION = 1_u32
  U_ENABLE_TRACING = 0_u32
  UCONFIG_ENABLE_PLUGINS = 0_u32
  U_ENABLE_DYLOAD = 1_u32
  U_CHECK_DYLOAD = 1_u32
  U_HAVE_LIB_SUFFIX = 1_u32
  U_LIB_SUFFIX_C_NAME_STRING = null
  UCONFIG_ONLY_COLLATION = 0_u32
  UCONFIG_NO_BREAK_ITERATION = 1_u32
  UCONFIG_NO_IDNA = 1_u32
  UCONFIG_NO_FORMATTING = 1_u32
  UCONFIG_NO_TRANSLITERATION = 1_u32
  UCONFIG_NO_REGULAR_EXPRESSIONS = 1_u32
  UCONFIG_NO_FILE_IO = 0_u32
  UCONFIG_NO_CONVERSION = 0_u32
  UCONFIG_NO_LEGACY_CONVERSION = 1_u32
  UCONFIG_ONLY_HTML_CONVERSION = 0_u32
  UCONFIG_NO_NORMALIZATION = 0_u32
  UCONFIG_NO_COLLATION = 1_u32
  UCONFIG_NO_SERVICE = 0_u32
  UCONFIG_HAVE_PARSEALLINPUT = 1_u32
  UCONFIG_NO_FILTERED_BREAK_ITERATION = 0_u32
  U_PF_UNKNOWN = 0_u32
  U_PF_WINDOWS = 1000_u32
  U_PF_MINGW = 1800_u32
  U_PF_CYGWIN = 1900_u32
  U_PF_HPUX = 2100_u32
  U_PF_SOLARIS = 2600_u32
  U_PF_BSD = 3000_u32
  U_PF_AIX = 3100_u32
  U_PF_IRIX = 3200_u32
  U_PF_DARWIN = 3500_u32
  U_PF_IPHONE = 3550_u32
  U_PF_QNX = 3700_u32
  U_PF_LINUX = 4000_u32
  U_PF_BROWSER_NATIVE_CLIENT = 4020_u32
  U_PF_ANDROID = 4050_u32
  U_PF_FUCHSIA = 4100_u32
  U_PF_EMSCRIPTEN = 5010_u32
  U_PF_OS390 = 9000_u32
  U_PF_OS400 = 9400_u32
  U_PLATFORM = 1800_u32
  U_PLATFORM_USES_ONLY_WIN32_API = 1_u32
  U_PLATFORM_HAS_WIN32_API = 1_u32
  U_PLATFORM_IMPLEMENTS_POSIX = 0_u32
  U_PLATFORM_IS_LINUX_BASED = 1_u32
  U_PLATFORM_IS_DARWIN_BASED = 1_u32
  U_HAVE_STDINT_H = 1_u32
  U_HAVE_INTTYPES_H = 1_u32
  U_GCC_MAJOR_MINOR = 0_u32
  U_IS_BIG_ENDIAN = 0_u32
  U_HAVE_PLACEMENT_NEW = 0_u32
  U_HAVE_DEBUG_LOCATION_NEW = 1_u32
  U_CPLUSPLUS_VERSION = 0_u32
  U_ASCII_FAMILY = 0_u32
  U_EBCDIC_FAMILY = 1_u32
  U_CHARSET_FAMILY = 1_u32
  U_CHARSET_IS_UTF8 = 1_u32
  U_HAVE_WCHAR_H = 0_u32
  U_SIZEOF_WCHAR_T = 1_u32
  U_HAVE_WCSCPY = 0_u32
  U_HAVE_CHAR16_T = 1_u32
  U_DEFINE_FALSE_AND_TRUE = 1_u32
  U_SIZEOF_UCHAR = 2_u32
  U_CHAR16_IS_TYPEDEF = 1_u32
  U_SENTINEL = -1_i32
  U8_LEAD3_T1_BITS = " 000000000000\u001000"
  U8_LEAD4_T1_BITS = "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u000f\u000f\u000f\u0000\u0000\u0000\u0000"
  U8_MAX_LENGTH = 4_u32
  U16_MAX_LENGTH = 2_u32
  U_HIDE_OBSOLETE_UTF_OLD_H = 0_u32
  UTF_SIZE = 16_u32
  UTF8_ERROR_VALUE_1 = 21_u32
  UTF8_ERROR_VALUE_2 = 159_u32
  UTF_ERROR_VALUE = 65535_u32
  UTF8_MAX_CHAR_LENGTH = 4_u32
  UTF16_MAX_CHAR_LENGTH = 2_u32
  UTF32_MAX_CHAR_LENGTH = 1_u32
  UTF_MAX_CHAR_LENGTH = 2_u32
  U_COPYRIGHT_STRING_LENGTH = 128_u32
  U_MAX_VERSION_LENGTH = 4_u32
  U_MAX_VERSION_STRING_LENGTH = 20_u32
  U_MILLIS_PER_SECOND = 1000_u32
  U_MILLIS_PER_MINUTE = 60000_u32
  U_MILLIS_PER_HOUR = 3600000_u32
  U_MILLIS_PER_DAY = 86400000_u32
  U_COMBINED_IMPLEMENTATION = 1_u32
  U_SHAPE_LENGTH_GROW_SHRINK = 0_u32
  U_SHAPE_LAMALEF_RESIZE = 0_u32
  U_SHAPE_LENGTH_FIXED_SPACES_NEAR = 1_u32
  U_SHAPE_LAMALEF_NEAR = 1_u32
  U_SHAPE_LENGTH_FIXED_SPACES_AT_END = 2_u32
  U_SHAPE_LAMALEF_END = 2_u32
  U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING = 3_u32
  U_SHAPE_LAMALEF_BEGIN = 3_u32
  U_SHAPE_LAMALEF_AUTO = 65536_u32
  U_SHAPE_LENGTH_MASK = 65539_u32
  U_SHAPE_LAMALEF_MASK = 65539_u32
  U_SHAPE_TEXT_DIRECTION_LOGICAL = 0_u32
  U_SHAPE_TEXT_DIRECTION_VISUAL_RTL = 0_u32
  U_SHAPE_TEXT_DIRECTION_VISUAL_LTR = 4_u32
  U_SHAPE_TEXT_DIRECTION_MASK = 4_u32
  U_SHAPE_LETTERS_NOOP = 0_u32
  U_SHAPE_LETTERS_SHAPE = 8_u32
  U_SHAPE_LETTERS_UNSHAPE = 16_u32
  U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED = 24_u32
  U_SHAPE_LETTERS_MASK = 24_u32
  U_SHAPE_DIGITS_NOOP = 0_u32
  U_SHAPE_DIGITS_EN2AN = 32_u32
  U_SHAPE_DIGITS_AN2EN = 64_u32
  U_SHAPE_DIGITS_ALEN2AN_INIT_LR = 96_u32
  U_SHAPE_DIGITS_ALEN2AN_INIT_AL = 128_u32
  U_SHAPE_DIGITS_RESERVED = 160_u32
  U_SHAPE_DIGITS_MASK = 224_u32
  U_SHAPE_DIGIT_TYPE_AN = 0_u32
  U_SHAPE_DIGIT_TYPE_AN_EXTENDED = 256_u32
  U_SHAPE_DIGIT_TYPE_RESERVED = 512_u32
  U_SHAPE_DIGIT_TYPE_MASK = 768_u32
  U_SHAPE_AGGREGATE_TASHKEEL = 16384_u32
  U_SHAPE_AGGREGATE_TASHKEEL_NOOP = 0_u32
  U_SHAPE_AGGREGATE_TASHKEEL_MASK = 16384_u32
  U_SHAPE_PRESERVE_PRESENTATION = 32768_u32
  U_SHAPE_PRESERVE_PRESENTATION_NOOP = 0_u32
  U_SHAPE_PRESERVE_PRESENTATION_MASK = 32768_u32
  U_SHAPE_SEEN_TWOCELL_NEAR = 2097152_u32
  U_SHAPE_SEEN_MASK = 7340032_u32
  U_SHAPE_YEHHAMZA_TWOCELL_NEAR = 16777216_u32
  U_SHAPE_YEHHAMZA_MASK = 58720256_u32
  U_SHAPE_TASHKEEL_BEGIN = 262144_u32
  U_SHAPE_TASHKEEL_END = 393216_u32
  U_SHAPE_TASHKEEL_RESIZE = 524288_u32
  U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL = 786432_u32
  U_SHAPE_TASHKEEL_MASK = 917504_u32
  U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END = 67108864_u32
  U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK = 67108864_u32
  U_SHAPE_TAIL_NEW_UNICODE = 134217728_u32
  U_SHAPE_TAIL_TYPE_MASK = 134217728_u32
  ULOC_CHINESE = "zh"
  ULOC_ENGLISH = "en"
  ULOC_FRENCH = "fr"
  ULOC_GERMAN = "de"
  ULOC_ITALIAN = "it"
  ULOC_JAPANESE = "ja"
  ULOC_KOREAN = "ko"
  ULOC_SIMPLIFIED_CHINESE = "zh_CN"
  ULOC_TRADITIONAL_CHINESE = "zh_TW"
  ULOC_CANADA = "en_CA"
  ULOC_CANADA_FRENCH = "fr_CA"
  ULOC_CHINA = "zh_CN"
  ULOC_PRC = "zh_CN"
  ULOC_FRANCE = "fr_FR"
  ULOC_GERMANY = "de_DE"
  ULOC_ITALY = "it_IT"
  ULOC_JAPAN = "ja_JP"
  ULOC_KOREA = "ko_KR"
  ULOC_TAIWAN = "zh_TW"
  ULOC_UK = "en_GB"
  ULOC_US = "en_US"
  ULOC_LANG_CAPACITY = 12_u32
  ULOC_COUNTRY_CAPACITY = 4_u32
  ULOC_FULLNAME_CAPACITY = 157_u32
  ULOC_SCRIPT_CAPACITY = 6_u32
  ULOC_KEYWORDS_CAPACITY = 96_u32
  ULOC_KEYWORD_AND_VALUES_CAPACITY = 100_u32
  ULOC_KEYWORD_SEPARATOR_UNICODE = 64_u32
  ULOC_KEYWORD_ASSIGN_UNICODE = 61_u32
  ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE = 59_u32
  UCNV_SUB_STOP_ON_ILLEGAL = "i"
  UCNV_SKIP_STOP_ON_ILLEGAL = "i"
  UCNV_ESCAPE_JAVA = "J"
  UCNV_ESCAPE_C = "C"
  UCNV_ESCAPE_XML_DEC = "D"
  UCNV_ESCAPE_XML_HEX = "X"
  UCNV_ESCAPE_UNICODE = "U"
  UCNV_ESCAPE_CSS2 = "S"
  UCNV_MAX_CONVERTER_NAME_LENGTH = 60_u32
  UCNV_SI = 15_u32
  UCNV_SO = 14_u32
  UCNV_OPTION_SEP_STRING = ","
  UCNV_VALUE_SEP_STRING = "="
  UCNV_LOCALE_OPTION_STRING = ",locale="
  UCNV_VERSION_OPTION_STRING = ",version="
  UCNV_SWAP_LFNL_OPTION_STRING = ",swaplfnl"
  U_FOLD_CASE_DEFAULT = 0_u32
  U_FOLD_CASE_EXCLUDE_SPECIAL_I = 1_u32
  U_TITLECASE_WHOLE_STRING = 32_u32
  U_TITLECASE_SENTENCES = 64_u32
  U_TITLECASE_NO_LOWERCASE = 256_u32
  U_TITLECASE_NO_BREAK_ADJUSTMENT = 512_u32
  U_TITLECASE_ADJUST_TO_CASED = 1024_u32
  U_EDITS_NO_RESET = 8192_u32
  U_OMIT_UNCHANGED_TEXT = 16384_u32
  U_COMPARE_CODE_POINT_ORDER = 32768_u32
  U_COMPARE_IGNORE_CASE = 65536_u32
  UNORM_INPUT_IS_FCD = 131072_u32
  UCHAR_MIN_VALUE = 0_u32
  UCHAR_MAX_VALUE = 1114111_u32
  UBIDI_DEFAULT_LTR = 254_u32
  UBIDI_DEFAULT_RTL = 255_u32
  UBIDI_MAX_EXPLICIT_LEVEL = 125_u32
  UBIDI_LEVEL_OVERRIDE = 128_u32
  UBIDI_MAP_NOWHERE = -1_i32
  UBIDI_KEEP_BASE_COMBINING = 1_u32
  UBIDI_DO_MIRRORING = 2_u32
  UBIDI_INSERT_LRM_FOR_NUMERIC = 4_u32
  UBIDI_REMOVE_BIDI_CONTROLS = 8_u32
  UBIDI_OUTPUT_REVERSE = 16_u32
  USPREP_DEFAULT = 0_u32
  USPREP_ALLOW_UNASSIGNED = 1_u32
  U_ICU_VERSION_BUNDLE = "icuver"
  U_ICU_DATA_KEY = "DataVersion"
  UCAL_UNKNOWN_ZONE_ID = "Etc/Unknown"
  UDAT_YEAR = "y"
  UDAT_QUARTER = "QQQQ"
  UDAT_ABBR_QUARTER = "QQQ"
  UDAT_YEAR_QUARTER = "yQQQQ"
  UDAT_YEAR_ABBR_QUARTER = "yQQQ"
  UDAT_MONTH = "MMMM"
  UDAT_ABBR_MONTH = "MMM"
  UDAT_NUM_MONTH = "M"
  UDAT_YEAR_MONTH = "yMMMM"
  UDAT_YEAR_ABBR_MONTH = "yMMM"
  UDAT_YEAR_NUM_MONTH = "yM"
  UDAT_DAY = "d"
  UDAT_YEAR_MONTH_DAY = "yMMMMd"
  UDAT_YEAR_ABBR_MONTH_DAY = "yMMMd"
  UDAT_YEAR_NUM_MONTH_DAY = "yMd"
  UDAT_WEEKDAY = "EEEE"
  UDAT_ABBR_WEEKDAY = "E"
  UDAT_YEAR_MONTH_WEEKDAY_DAY = "yMMMMEEEEd"
  UDAT_YEAR_ABBR_MONTH_WEEKDAY_DAY = "yMMMEd"
  UDAT_YEAR_NUM_MONTH_WEEKDAY_DAY = "yMEd"
  UDAT_MONTH_DAY = "MMMMd"
  UDAT_ABBR_MONTH_DAY = "MMMd"
  UDAT_NUM_MONTH_DAY = "Md"
  UDAT_MONTH_WEEKDAY_DAY = "MMMMEEEEd"
  UDAT_ABBR_MONTH_WEEKDAY_DAY = "MMMEd"
  UDAT_NUM_MONTH_WEEKDAY_DAY = "MEd"
  UDAT_HOUR = "j"
  UDAT_HOUR24 = "H"
  UDAT_MINUTE = "m"
  UDAT_HOUR_MINUTE = "jm"
  UDAT_HOUR24_MINUTE = "Hm"
  UDAT_SECOND = "s"
  UDAT_HOUR_MINUTE_SECOND = "jms"
  UDAT_HOUR24_MINUTE_SECOND = "Hms"
  UDAT_MINUTE_SECOND = "ms"
  UDAT_LOCATION_TZ = "VVVV"
  UDAT_GENERIC_TZ = "vvvv"
  UDAT_ABBR_GENERIC_TZ = "v"
  UDAT_SPECIFIC_TZ = "zzzz"
  UDAT_ABBR_SPECIFIC_TZ = "z"
  UDAT_ABBR_UTC_TZ = "ZZZZ"
  USEARCH_DONE = -1_i32
  U_HAVE_STD_STRING = 0_u32
  UCONFIG_FORMAT_FASTPATHS_49 = 1_u32
  U_PLATFORM_HAS_WINUWP_API = 0_u32
  U_IOSTREAM_SOURCE = 199711_u32
  U_HAVE_RVALUE_REFERENCES = 1_u32
  U_USING_ICU_NAMESPACE = 1_u32
  U_ICUDATA_TYPE_LETTER = "e"
  U_UNICODE_VERSION = "8.0"
  CANITER_SKIP_ZEROES = 1_u32
  NUMSYS_NAME_CAPACITY = 8_u32
  U_HAVE_RBNF = 0_u32
  IME_CMODE_ALPHANUMERIC = 0_u32
  IME_CMODE_NATIVE = 1_u32
  IME_CMODE_CHINESE = 1_u32
  IME_CMODE_HANGUL = 1_u32
  IME_CMODE_JAPANESE = 1_u32
  IME_CMODE_KATAKANA = 2_u32
  IME_CMODE_LANGUAGE = 3_u32
  IME_CMODE_FULLSHAPE = 8_u32
  IME_CMODE_ROMAN = 16_u32
  IME_CMODE_CHARCODE = 32_u32
  IME_CMODE_HANJACONVERT = 64_u32
  IME_CMODE_NATIVESYMBOL = 128_u32
  MAX_MIMECP_NAME = 64_u32
  MAX_MIMECSET_NAME = 50_u32
  MAX_MIMEFACE_NAME = 32_u32
  MAX_RFC1766_NAME = 6_u32
  MAX_LOCALE_NAME = 32_u32
  MAX_SCRIPT_NAME = 48_u32
  CPIOD_PEEK = 1073741824_i32
  CPIOD_FORCE_PROMPT = -2147483648_i32
  UITER_UNKNOWN_INDEX = -2_i32
  UCPTRIE_FAST_SHIFT = 6_i32
  UCPTRIE_FAST_DATA_BLOCK_LENGTH = 64_i32
  UCPTRIE_FAST_DATA_MASK = 63_i32
  UCPTRIE_SMALL_MAX = 4095_i32
  UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET = 1_i32
  UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET = 2_i32
  UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1_i32
  UTEXT_PROVIDER_STABLE_CHUNKS = 2_i32
  UTEXT_PROVIDER_WRITABLE = 3_i32
  UTEXT_PROVIDER_HAS_META_DATA = 4_i32
  UTEXT_PROVIDER_OWNS_TEXT = 5_i32
  UTEXT_MAGIC = 878368812_i32
  USET_IGNORE_SPACE = 1_i32
  USET_CASE_INSENSITIVE = 2_i32
  USET_ADD_CASE_MAPPINGS = 4_i32
  USET_SERIALIZED_STATIC_ARRAY_CAPACITY = 8_i32
  U_PARSE_CONTEXT_LEN = 16_i32
  UIDNA_DEFAULT = 0_i32
  UIDNA_USE_STD3_RULES = 2_i32
  UIDNA_CHECK_BIDI = 4_i32
  UIDNA_CHECK_CONTEXTJ = 8_i32
  UIDNA_NONTRANSITIONAL_TO_ASCII = 16_i32
  UIDNA_NONTRANSITIONAL_TO_UNICODE = 32_i32
  UIDNA_CHECK_CONTEXTO = 64_i32
  UIDNA_ERROR_EMPTY_LABEL = 1_i32
  UIDNA_ERROR_LABEL_TOO_LONG = 2_i32
  UIDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4_i32
  UIDNA_ERROR_LEADING_HYPHEN = 8_i32
  UIDNA_ERROR_TRAILING_HYPHEN = 16_i32
  UIDNA_ERROR_HYPHEN_3_4 = 32_i32
  UIDNA_ERROR_LEADING_COMBINING_MARK = 64_i32
  UIDNA_ERROR_DISALLOWED = 128_i32
  UIDNA_ERROR_PUNYCODE = 256_i32
  UIDNA_ERROR_LABEL_HAS_DOT = 512_i32
  UIDNA_ERROR_INVALID_ACE_LABEL = 1024_i32
  UIDNA_ERROR_BIDI = 2048_i32
  UIDNA_ERROR_CONTEXTJ = 4096_i32
  UIDNA_ERROR_CONTEXTO_PUNCTUATION = 8192_i32
  UIDNA_ERROR_CONTEXTO_DIGITS = 16384_i32
  ELS_GUID_LANGUAGE_DETECTION = "cf7e00b1-909b-4d95-a8f4-611f7c377702"
  ELS_GUID_SCRIPT_DETECTION = "2d64b439-6caf-4f6b-b688-e5d0f4faa7d7"
  ELS_GUID_TRANSLITERATION_HANT_TO_HANS = "a3a8333b-f4fc-42f6-a0c4-0462fe7317cb"
  ELS_GUID_TRANSLITERATION_HANS_TO_HANT = "3caccdc8-5590-42dc-9a7b-b5a6b5b3b63b"
  ELS_GUID_TRANSLITERATION_MALAYALAM_TO_LATIN = "d8b983b1-f8bf-4a2b-bcd5-5b5ea20613e1"
  ELS_GUID_TRANSLITERATION_DEVANAGARI_TO_LATIN = "c4a4dcfe-2661-4d02-9835-f48187109803"
  ELS_GUID_TRANSLITERATION_CYRILLIC_TO_LATIN = "3dd12a98-5afd-4903-a13f-e17e6c0bfe01"
  ELS_GUID_TRANSLITERATION_BENGALI_TO_LATIN = "f4dfd825-91a4-489f-855e-9ad9bee55727"
  ELS_GUID_TRANSLITERATION_HANGUL_DECOMPOSITION = "4ba2a721-e43d-41b7-b330-536ae1e48863"
  UMSGPAT_ARG_NAME_NOT_NUMBER = -1_i32
  UMSGPAT_ARG_NAME_NOT_VALID = -2_i32

  CLSID_SpellCheckerFactory = LibC::GUID.new(0x7ab36653_u32, 0x1796_u16, 0x484b_u16, StaticArray[0xbd_u8, 0xfa_u8, 0xe7_u8, 0x4f_u8, 0x1d_u8, 0xb7_u8, 0xc1_u8, 0xdc_u8])

  CLSID_CMLangString = LibC::GUID.new(0xc04d65cf_u32, 0xb70d_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])

  CLSID_CMLangConvertCharset = LibC::GUID.new(0xd66d6f99_u32, 0xcdaa_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0x22_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0xb3_u8, 0x1f_u8])

  CLSID_CMultiLanguage = LibC::GUID.new(0x275c23e2_u32, 0x3747_u16, 0x11d0_u16, StaticArray[0x9f_u8, 0xea_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3f_u8, 0x86_u8, 0x46_u8])

  @[Flags]
  enum FOLD_STRING_MAP_FLAGS : UInt32
    MAP_COMPOSITE = 64_u32
    MAP_EXPAND_LIGATURES = 8192_u32
    MAP_FOLDCZONE = 16_u32
    MAP_FOLDDIGITS = 128_u32
    MAP_PRECOMPOSED = 32_u32
  end
  enum ENUM_DATE_FORMATS_FLAGS : UInt32
    DATE_SHORTDATE = 1_u32
    DATE_LONGDATE = 2_u32
    DATE_YEARMONTH = 8_u32
    DATE_MONTHDAY = 128_u32
    DATE_AUTOLAYOUT = 64_u32
    DATE_LTRREADING = 16_u32
    DATE_RTLREADING = 32_u32
    DATE_USE_ALT_CALENDAR = 4_u32
  end
  enum TRANSLATE_CHARSET_INFO_FLAGS : UInt32
    TCI_SRCCHARSET = 1_u32
    TCI_SRCCODEPAGE = 2_u32
    TCI_SRCFONTSIG = 3_u32
    TCI_SRCLOCALE = 4096_u32
  end
  @[Flags]
  enum TIME_FORMAT_FLAGS : UInt32
    TIME_NOMINUTESORSECONDS = 1_u32
    TIME_NOSECONDS = 2_u32
    TIME_NOTIMEMARKER = 4_u32
    TIME_FORCE24HOURFORMAT = 8_u32
  end
  enum ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS : UInt32
    LGRPID_INSTALLED = 1_u32
    LGRPID_SUPPORTED = 2_u32
  end
  @[Flags]
  enum MULTI_BYTE_TO_WIDE_CHAR_FLAGS : UInt32
    MB_COMPOSITE = 2_u32
    MB_ERR_INVALID_CHARS = 8_u32
    MB_PRECOMPOSED = 1_u32
    MB_USEGLYPHCHARS = 4_u32
  end
  @[Flags]
  enum COMPARE_STRING_FLAGS : UInt32
    LINGUISTIC_IGNORECASE = 16_u32
    LINGUISTIC_IGNOREDIACRITIC = 32_u32
    NORM_IGNORECASE = 1_u32
    NORM_IGNOREKANATYPE = 65536_u32
    NORM_IGNORENONSPACE = 2_u32
    NORM_IGNORESYMBOLS = 4_u32
    NORM_IGNOREWIDTH = 131072_u32
    NORM_LINGUISTIC_CASING = 134217728_u32
    SORT_DIGITSASNUMBERS = 8_u32
    SORT_STRINGSORT = 4096_u32
  end
  enum IS_VALID_LOCALE_FLAGS : UInt32
    LCID_INSTALLED = 1_u32
    LCID_SUPPORTED = 2_u32
  end
  enum ENUM_SYSTEM_CODE_PAGES_FLAGS : UInt32
    CP_INSTALLED = 1_u32
    CP_SUPPORTED = 2_u32
  end
  enum SCRIPT_IS_COMPLEX_FLAGS : UInt32
    SIC_ASCIIDIGIT = 2_u32
    SIC_COMPLEX = 1_u32
    SIC_NEUTRAL = 4_u32
  end
  @[Flags]
  enum IS_TEXT_UNICODE_RESULT : UInt32
    IS_TEXT_UNICODE_ASCII16 = 1_u32
    IS_TEXT_UNICODE_REVERSE_ASCII16 = 16_u32
    IS_TEXT_UNICODE_STATISTICS = 2_u32
    IS_TEXT_UNICODE_REVERSE_STATISTICS = 32_u32
    IS_TEXT_UNICODE_CONTROLS = 4_u32
    IS_TEXT_UNICODE_REVERSE_CONTROLS = 64_u32
    IS_TEXT_UNICODE_SIGNATURE = 8_u32
    IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128_u32
    IS_TEXT_UNICODE_ILLEGAL_CHARS = 256_u32
    IS_TEXT_UNICODE_ODD_LENGTH = 512_u32
    IS_TEXT_UNICODE_NULL_BYTES = 4096_u32
    IS_TEXT_UNICODE_UNICODE_MASK = 15_u32
    IS_TEXT_UNICODE_REVERSE_MASK = 240_u32
    IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840_u32
    IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440_u32
  end
  enum SYSNLS_FUNCTION
    COMPARE_STRING = 1_i32
  end
  enum SYSGEOTYPE
    GEO_NATION = 1_i32
    GEO_LATITUDE = 2_i32
    GEO_LONGITUDE = 3_i32
    GEO_ISO2 = 4_i32
    GEO_ISO3 = 5_i32
    GEO_RFC1766 = 6_i32
    GEO_LCID = 7_i32
    GEO_FRIENDLYNAME = 8_i32
    GEO_OFFICIALNAME = 9_i32
    GEO_TIMEZONES = 10_i32
    GEO_OFFICIALLANGUAGES = 11_i32
    GEO_ISO_UN_NUMBER = 12_i32
    GEO_PARENT = 13_i32
    GEO_DIALINGCODE = 14_i32
    GEO_CURRENCYCODE = 15_i32
    GEO_CURRENCYSYMBOL = 16_i32
    GEO_NAME = 17_i32
    GEO_ID = 18_i32
  end
  enum SYSGEOCLASS
    GEOCLASS_NATION = 16_i32
    GEOCLASS_REGION = 14_i32
    GEOCLASS_ALL = 0_i32
  end
  enum NORM_FORM
    NormalizationOther = 0_i32
    NormalizationC = 1_i32
    NormalizationD = 2_i32
    NormalizationKC = 5_i32
    NormalizationKD = 6_i32
  end
  enum WORDLIST_TYPE
    WORDLIST_TYPE_IGNORE = 0_i32
    WORDLIST_TYPE_ADD = 1_i32
    WORDLIST_TYPE_EXCLUDE = 2_i32
    WORDLIST_TYPE_AUTOCORRECT = 3_i32
  end
  enum CORRECTIVE_ACTION
    CORRECTIVE_ACTION_NONE = 0_i32
    CORRECTIVE_ACTION_GET_SUGGESTIONS = 1_i32
    CORRECTIVE_ACTION_REPLACE = 2_i32
    CORRECTIVE_ACTION_DELETE = 3_i32
  end
  enum SCRIPT_JUSTIFY
    SCRIPT_JUSTIFY_NONE = 0_i32
    SCRIPT_JUSTIFY_ARABIC_BLANK = 1_i32
    SCRIPT_JUSTIFY_CHARACTER = 2_i32
    SCRIPT_JUSTIFY_RESERVED1 = 3_i32
    SCRIPT_JUSTIFY_BLANK = 4_i32
    SCRIPT_JUSTIFY_RESERVED2 = 5_i32
    SCRIPT_JUSTIFY_RESERVED3 = 6_i32
    SCRIPT_JUSTIFY_ARABIC_NORMAL = 7_i32
    SCRIPT_JUSTIFY_ARABIC_KASHIDA = 8_i32
    SCRIPT_JUSTIFY_ARABIC_ALEF = 9_i32
    SCRIPT_JUSTIFY_ARABIC_HA = 10_i32
    SCRIPT_JUSTIFY_ARABIC_RA = 11_i32
    SCRIPT_JUSTIFY_ARABIC_BA = 12_i32
    SCRIPT_JUSTIFY_ARABIC_BARA = 13_i32
    SCRIPT_JUSTIFY_ARABIC_SEEN = 14_i32
    SCRIPT_JUSTIFY_ARABIC_SEEN_M = 15_i32
  end
  enum UErrorCode
    U_USING_FALLBACK_WARNING = -128_i32
    U_ERROR_WARNING_START = -128_i32
    U_USING_DEFAULT_WARNING = -127_i32
    U_SAFECLONE_ALLOCATED_WARNING = -126_i32
    U_STATE_OLD_WARNING = -125_i32
    U_STRING_NOT_TERMINATED_WARNING = -124_i32
    U_SORT_KEY_TOO_SHORT_WARNING = -123_i32
    U_AMBIGUOUS_ALIAS_WARNING = -122_i32
    U_DIFFERENT_UCA_VERSION = -121_i32
    U_PLUGIN_CHANGED_LEVEL_WARNING = -120_i32
    U_ZERO_ERROR = 0_i32
    U_ILLEGAL_ARGUMENT_ERROR = 1_i32
    U_MISSING_RESOURCE_ERROR = 2_i32
    U_INVALID_FORMAT_ERROR = 3_i32
    U_FILE_ACCESS_ERROR = 4_i32
    U_INTERNAL_PROGRAM_ERROR = 5_i32
    U_MESSAGE_PARSE_ERROR = 6_i32
    U_MEMORY_ALLOCATION_ERROR = 7_i32
    U_INDEX_OUTOFBOUNDS_ERROR = 8_i32
    U_PARSE_ERROR = 9_i32
    U_INVALID_CHAR_FOUND = 10_i32
    U_TRUNCATED_CHAR_FOUND = 11_i32
    U_ILLEGAL_CHAR_FOUND = 12_i32
    U_INVALID_TABLE_FORMAT = 13_i32
    U_INVALID_TABLE_FILE = 14_i32
    U_BUFFER_OVERFLOW_ERROR = 15_i32
    U_UNSUPPORTED_ERROR = 16_i32
    U_RESOURCE_TYPE_MISMATCH = 17_i32
    U_ILLEGAL_ESCAPE_SEQUENCE = 18_i32
    U_UNSUPPORTED_ESCAPE_SEQUENCE = 19_i32
    U_NO_SPACE_AVAILABLE = 20_i32
    U_CE_NOT_FOUND_ERROR = 21_i32
    U_PRIMARY_TOO_LONG_ERROR = 22_i32
    U_STATE_TOO_OLD_ERROR = 23_i32
    U_TOO_MANY_ALIASES_ERROR = 24_i32
    U_ENUM_OUT_OF_SYNC_ERROR = 25_i32
    U_INVARIANT_CONVERSION_ERROR = 26_i32
    U_INVALID_STATE_ERROR = 27_i32
    U_COLLATOR_VERSION_MISMATCH = 28_i32
    U_USELESS_COLLATOR_ERROR = 29_i32
    U_NO_WRITE_PERMISSION = 30_i32
    U_BAD_VARIABLE_DEFINITION = 65536_i32
    U_PARSE_ERROR_START = 65536_i32
    U_MALFORMED_RULE = 65537_i32
    U_MALFORMED_SET = 65538_i32
    U_MALFORMED_SYMBOL_REFERENCE = 65539_i32
    U_MALFORMED_UNICODE_ESCAPE = 65540_i32
    U_MALFORMED_VARIABLE_DEFINITION = 65541_i32
    U_MALFORMED_VARIABLE_REFERENCE = 65542_i32
    U_MISMATCHED_SEGMENT_DELIMITERS = 65543_i32
    U_MISPLACED_ANCHOR_START = 65544_i32
    U_MISPLACED_CURSOR_OFFSET = 65545_i32
    U_MISPLACED_QUANTIFIER = 65546_i32
    U_MISSING_OPERATOR = 65547_i32
    U_MISSING_SEGMENT_CLOSE = 65548_i32
    U_MULTIPLE_ANTE_CONTEXTS = 65549_i32
    U_MULTIPLE_CURSORS = 65550_i32
    U_MULTIPLE_POST_CONTEXTS = 65551_i32
    U_TRAILING_BACKSLASH = 65552_i32
    U_UNDEFINED_SEGMENT_REFERENCE = 65553_i32
    U_UNDEFINED_VARIABLE = 65554_i32
    U_UNQUOTED_SPECIAL = 65555_i32
    U_UNTERMINATED_QUOTE = 65556_i32
    U_RULE_MASK_ERROR = 65557_i32
    U_MISPLACED_COMPOUND_FILTER = 65558_i32
    U_MULTIPLE_COMPOUND_FILTERS = 65559_i32
    U_INVALID_RBT_SYNTAX = 65560_i32
    U_INVALID_PROPERTY_PATTERN = 65561_i32
    U_MALFORMED_PRAGMA = 65562_i32
    U_UNCLOSED_SEGMENT = 65563_i32
    U_ILLEGAL_CHAR_IN_SEGMENT = 65564_i32
    U_VARIABLE_RANGE_EXHAUSTED = 65565_i32
    U_VARIABLE_RANGE_OVERLAP = 65566_i32
    U_ILLEGAL_CHARACTER = 65567_i32
    U_INTERNAL_TRANSLITERATOR_ERROR = 65568_i32
    U_INVALID_ID = 65569_i32
    U_INVALID_FUNCTION = 65570_i32
    U_UNEXPECTED_TOKEN = 65792_i32
    U_FMT_PARSE_ERROR_START = 65792_i32
    U_MULTIPLE_DECIMAL_SEPARATORS = 65793_i32
    U_MULTIPLE_DECIMAL_SEPERATORS = 65793_i32
    U_MULTIPLE_EXPONENTIAL_SYMBOLS = 65794_i32
    U_MALFORMED_EXPONENTIAL_PATTERN = 65795_i32
    U_MULTIPLE_PERCENT_SYMBOLS = 65796_i32
    U_MULTIPLE_PERMILL_SYMBOLS = 65797_i32
    U_MULTIPLE_PAD_SPECIFIERS = 65798_i32
    U_PATTERN_SYNTAX_ERROR = 65799_i32
    U_ILLEGAL_PAD_POSITION = 65800_i32
    U_UNMATCHED_BRACES = 65801_i32
    U_UNSUPPORTED_PROPERTY = 65802_i32
    U_UNSUPPORTED_ATTRIBUTE = 65803_i32
    U_ARGUMENT_TYPE_MISMATCH = 65804_i32
    U_DUPLICATE_KEYWORD = 65805_i32
    U_UNDEFINED_KEYWORD = 65806_i32
    U_DEFAULT_KEYWORD_MISSING = 65807_i32
    U_DECIMAL_NUMBER_SYNTAX_ERROR = 65808_i32
    U_FORMAT_INEXACT_ERROR = 65809_i32
    U_NUMBER_ARG_OUTOFBOUNDS_ERROR = 65810_i32
    U_NUMBER_SKELETON_SYNTAX_ERROR = 65811_i32
    U_BRK_INTERNAL_ERROR = 66048_i32
    U_BRK_ERROR_START = 66048_i32
    U_BRK_HEX_DIGITS_EXPECTED = 66049_i32
    U_BRK_SEMICOLON_EXPECTED = 66050_i32
    U_BRK_RULE_SYNTAX = 66051_i32
    U_BRK_UNCLOSED_SET = 66052_i32
    U_BRK_ASSIGN_ERROR = 66053_i32
    U_BRK_VARIABLE_REDFINITION = 66054_i32
    U_BRK_MISMATCHED_PAREN = 66055_i32
    U_BRK_NEW_LINE_IN_QUOTED_STRING = 66056_i32
    U_BRK_UNDEFINED_VARIABLE = 66057_i32
    U_BRK_INIT_ERROR = 66058_i32
    U_BRK_RULE_EMPTY_SET = 66059_i32
    U_BRK_UNRECOGNIZED_OPTION = 66060_i32
    U_BRK_MALFORMED_RULE_TAG = 66061_i32
    U_REGEX_INTERNAL_ERROR = 66304_i32
    U_REGEX_ERROR_START = 66304_i32
    U_REGEX_RULE_SYNTAX = 66305_i32
    U_REGEX_INVALID_STATE = 66306_i32
    U_REGEX_BAD_ESCAPE_SEQUENCE = 66307_i32
    U_REGEX_PROPERTY_SYNTAX = 66308_i32
    U_REGEX_UNIMPLEMENTED = 66309_i32
    U_REGEX_MISMATCHED_PAREN = 66310_i32
    U_REGEX_NUMBER_TOO_BIG = 66311_i32
    U_REGEX_BAD_INTERVAL = 66312_i32
    U_REGEX_MAX_LT_MIN = 66313_i32
    U_REGEX_INVALID_BACK_REF = 66314_i32
    U_REGEX_INVALID_FLAG = 66315_i32
    U_REGEX_LOOK_BEHIND_LIMIT = 66316_i32
    U_REGEX_SET_CONTAINS_STRING = 66317_i32
    U_REGEX_MISSING_CLOSE_BRACKET = 66319_i32
    U_REGEX_INVALID_RANGE = 66320_i32
    U_REGEX_STACK_OVERFLOW = 66321_i32
    U_REGEX_TIME_OUT = 66322_i32
    U_REGEX_STOPPED_BY_CALLER = 66323_i32
    U_REGEX_PATTERN_TOO_BIG = 66324_i32
    U_REGEX_INVALID_CAPTURE_GROUP_NAME = 66325_i32
    U_IDNA_PROHIBITED_ERROR = 66560_i32
    U_IDNA_ERROR_START = 66560_i32
    U_IDNA_UNASSIGNED_ERROR = 66561_i32
    U_IDNA_CHECK_BIDI_ERROR = 66562_i32
    U_IDNA_STD3_ASCII_RULES_ERROR = 66563_i32
    U_IDNA_ACE_PREFIX_ERROR = 66564_i32
    U_IDNA_VERIFICATION_ERROR = 66565_i32
    U_IDNA_LABEL_TOO_LONG_ERROR = 66566_i32
    U_IDNA_ZERO_LENGTH_LABEL_ERROR = 66567_i32
    U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR = 66568_i32
    U_STRINGPREP_PROHIBITED_ERROR = 66560_i32
    U_STRINGPREP_UNASSIGNED_ERROR = 66561_i32
    U_STRINGPREP_CHECK_BIDI_ERROR = 66562_i32
    U_PLUGIN_ERROR_START = 66816_i32
    U_PLUGIN_TOO_HIGH = 66816_i32
    U_PLUGIN_DIDNT_SET_LEVEL = 66817_i32
  end
  enum UTraceLevel
    UTRACE_OFF = -1_i32
    UTRACE_ERROR = 0_i32
    UTRACE_WARNING = 3_i32
    UTRACE_OPEN_CLOSE = 5_i32
    UTRACE_INFO = 7_i32
    UTRACE_VERBOSE = 9_i32
  end
  enum UTraceFunctionNumber
    UTRACE_FUNCTION_START = 0_i32
    UTRACE_U_INIT = 0_i32
    UTRACE_U_CLEANUP = 1_i32
    UTRACE_CONVERSION_START = 4096_i32
    UTRACE_UCNV_OPEN = 4096_i32
    UTRACE_UCNV_OPEN_PACKAGE = 4097_i32
    UTRACE_UCNV_OPEN_ALGORITHMIC = 4098_i32
    UTRACE_UCNV_CLONE = 4099_i32
    UTRACE_UCNV_CLOSE = 4100_i32
    UTRACE_UCNV_FLUSH_CACHE = 4101_i32
    UTRACE_UCNV_LOAD = 4102_i32
    UTRACE_UCNV_UNLOAD = 4103_i32
    UTRACE_COLLATION_START = 8192_i32
    UTRACE_UCOL_OPEN = 8192_i32
    UTRACE_UCOL_CLOSE = 8193_i32
    UTRACE_UCOL_STRCOLL = 8194_i32
    UTRACE_UCOL_GET_SORTKEY = 8195_i32
    UTRACE_UCOL_GETLOCALE = 8196_i32
    UTRACE_UCOL_NEXTSORTKEYPART = 8197_i32
    UTRACE_UCOL_STRCOLLITER = 8198_i32
    UTRACE_UCOL_OPEN_FROM_SHORT_STRING = 8199_i32
    UTRACE_UCOL_STRCOLLUTF8 = 8200_i32
    UTRACE_UDATA_START = 12288_i32
    UTRACE_UDATA_RESOURCE = 12288_i32
    UTRACE_UDATA_BUNDLE = 12289_i32
    UTRACE_UDATA_DATA_FILE = 12290_i32
    UTRACE_UDATA_RES_FILE = 12291_i32
  end
  enum UStringTrieResult
    USTRINGTRIE_NO_MATCH = 0_i32
    USTRINGTRIE_NO_VALUE = 1_i32
    USTRINGTRIE_FINAL_VALUE = 2_i32
    USTRINGTRIE_INTERMEDIATE_VALUE = 3_i32
  end
  enum UScriptCode
    USCRIPT_INVALID_CODE = -1_i32
    USCRIPT_COMMON = 0_i32
    USCRIPT_INHERITED = 1_i32
    USCRIPT_ARABIC = 2_i32
    USCRIPT_ARMENIAN = 3_i32
    USCRIPT_BENGALI = 4_i32
    USCRIPT_BOPOMOFO = 5_i32
    USCRIPT_CHEROKEE = 6_i32
    USCRIPT_COPTIC = 7_i32
    USCRIPT_CYRILLIC = 8_i32
    USCRIPT_DESERET = 9_i32
    USCRIPT_DEVANAGARI = 10_i32
    USCRIPT_ETHIOPIC = 11_i32
    USCRIPT_GEORGIAN = 12_i32
    USCRIPT_GOTHIC = 13_i32
    USCRIPT_GREEK = 14_i32
    USCRIPT_GUJARATI = 15_i32
    USCRIPT_GURMUKHI = 16_i32
    USCRIPT_HAN = 17_i32
    USCRIPT_HANGUL = 18_i32
    USCRIPT_HEBREW = 19_i32
    USCRIPT_HIRAGANA = 20_i32
    USCRIPT_KANNADA = 21_i32
    USCRIPT_KATAKANA = 22_i32
    USCRIPT_KHMER = 23_i32
    USCRIPT_LAO = 24_i32
    USCRIPT_LATIN = 25_i32
    USCRIPT_MALAYALAM = 26_i32
    USCRIPT_MONGOLIAN = 27_i32
    USCRIPT_MYANMAR = 28_i32
    USCRIPT_OGHAM = 29_i32
    USCRIPT_OLD_ITALIC = 30_i32
    USCRIPT_ORIYA = 31_i32
    USCRIPT_RUNIC = 32_i32
    USCRIPT_SINHALA = 33_i32
    USCRIPT_SYRIAC = 34_i32
    USCRIPT_TAMIL = 35_i32
    USCRIPT_TELUGU = 36_i32
    USCRIPT_THAANA = 37_i32
    USCRIPT_THAI = 38_i32
    USCRIPT_TIBETAN = 39_i32
    USCRIPT_CANADIAN_ABORIGINAL = 40_i32
    USCRIPT_UCAS = 40_i32
    USCRIPT_YI = 41_i32
    USCRIPT_TAGALOG = 42_i32
    USCRIPT_HANUNOO = 43_i32
    USCRIPT_BUHID = 44_i32
    USCRIPT_TAGBANWA = 45_i32
    USCRIPT_BRAILLE = 46_i32
    USCRIPT_CYPRIOT = 47_i32
    USCRIPT_LIMBU = 48_i32
    USCRIPT_LINEAR_B = 49_i32
    USCRIPT_OSMANYA = 50_i32
    USCRIPT_SHAVIAN = 51_i32
    USCRIPT_TAI_LE = 52_i32
    USCRIPT_UGARITIC = 53_i32
    USCRIPT_KATAKANA_OR_HIRAGANA = 54_i32
    USCRIPT_BUGINESE = 55_i32
    USCRIPT_GLAGOLITIC = 56_i32
    USCRIPT_KHAROSHTHI = 57_i32
    USCRIPT_SYLOTI_NAGRI = 58_i32
    USCRIPT_NEW_TAI_LUE = 59_i32
    USCRIPT_TIFINAGH = 60_i32
    USCRIPT_OLD_PERSIAN = 61_i32
    USCRIPT_BALINESE = 62_i32
    USCRIPT_BATAK = 63_i32
    USCRIPT_BLISSYMBOLS = 64_i32
    USCRIPT_BRAHMI = 65_i32
    USCRIPT_CHAM = 66_i32
    USCRIPT_CIRTH = 67_i32
    USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC = 68_i32
    USCRIPT_DEMOTIC_EGYPTIAN = 69_i32
    USCRIPT_HIERATIC_EGYPTIAN = 70_i32
    USCRIPT_EGYPTIAN_HIEROGLYPHS = 71_i32
    USCRIPT_KHUTSURI = 72_i32
    USCRIPT_SIMPLIFIED_HAN = 73_i32
    USCRIPT_TRADITIONAL_HAN = 74_i32
    USCRIPT_PAHAWH_HMONG = 75_i32
    USCRIPT_OLD_HUNGARIAN = 76_i32
    USCRIPT_HARAPPAN_INDUS = 77_i32
    USCRIPT_JAVANESE = 78_i32
    USCRIPT_KAYAH_LI = 79_i32
    USCRIPT_LATIN_FRAKTUR = 80_i32
    USCRIPT_LATIN_GAELIC = 81_i32
    USCRIPT_LEPCHA = 82_i32
    USCRIPT_LINEAR_A = 83_i32
    USCRIPT_MANDAIC = 84_i32
    USCRIPT_MANDAEAN = 84_i32
    USCRIPT_MAYAN_HIEROGLYPHS = 85_i32
    USCRIPT_MEROITIC_HIEROGLYPHS = 86_i32
    USCRIPT_MEROITIC = 86_i32
    USCRIPT_NKO = 87_i32
    USCRIPT_ORKHON = 88_i32
    USCRIPT_OLD_PERMIC = 89_i32
    USCRIPT_PHAGS_PA = 90_i32
    USCRIPT_PHOENICIAN = 91_i32
    USCRIPT_MIAO = 92_i32
    USCRIPT_PHONETIC_POLLARD = 92_i32
    USCRIPT_RONGORONGO = 93_i32
    USCRIPT_SARATI = 94_i32
    USCRIPT_ESTRANGELO_SYRIAC = 95_i32
    USCRIPT_WESTERN_SYRIAC = 96_i32
    USCRIPT_EASTERN_SYRIAC = 97_i32
    USCRIPT_TENGWAR = 98_i32
    USCRIPT_VAI = 99_i32
    USCRIPT_VISIBLE_SPEECH = 100_i32
    USCRIPT_CUNEIFORM = 101_i32
    USCRIPT_UNWRITTEN_LANGUAGES = 102_i32
    USCRIPT_UNKNOWN = 103_i32
    USCRIPT_CARIAN = 104_i32
    USCRIPT_JAPANESE = 105_i32
    USCRIPT_LANNA = 106_i32
    USCRIPT_LYCIAN = 107_i32
    USCRIPT_LYDIAN = 108_i32
    USCRIPT_OL_CHIKI = 109_i32
    USCRIPT_REJANG = 110_i32
    USCRIPT_SAURASHTRA = 111_i32
    USCRIPT_SIGN_WRITING = 112_i32
    USCRIPT_SUNDANESE = 113_i32
    USCRIPT_MOON = 114_i32
    USCRIPT_MEITEI_MAYEK = 115_i32
    USCRIPT_IMPERIAL_ARAMAIC = 116_i32
    USCRIPT_AVESTAN = 117_i32
    USCRIPT_CHAKMA = 118_i32
    USCRIPT_KOREAN = 119_i32
    USCRIPT_KAITHI = 120_i32
    USCRIPT_MANICHAEAN = 121_i32
    USCRIPT_INSCRIPTIONAL_PAHLAVI = 122_i32
    USCRIPT_PSALTER_PAHLAVI = 123_i32
    USCRIPT_BOOK_PAHLAVI = 124_i32
    USCRIPT_INSCRIPTIONAL_PARTHIAN = 125_i32
    USCRIPT_SAMARITAN = 126_i32
    USCRIPT_TAI_VIET = 127_i32
    USCRIPT_MATHEMATICAL_NOTATION = 128_i32
    USCRIPT_SYMBOLS = 129_i32
    USCRIPT_BAMUM = 130_i32
    USCRIPT_LISU = 131_i32
    USCRIPT_NAKHI_GEBA = 132_i32
    USCRIPT_OLD_SOUTH_ARABIAN = 133_i32
    USCRIPT_BASSA_VAH = 134_i32
    USCRIPT_DUPLOYAN = 135_i32
    USCRIPT_ELBASAN = 136_i32
    USCRIPT_GRANTHA = 137_i32
    USCRIPT_KPELLE = 138_i32
    USCRIPT_LOMA = 139_i32
    USCRIPT_MENDE = 140_i32
    USCRIPT_MEROITIC_CURSIVE = 141_i32
    USCRIPT_OLD_NORTH_ARABIAN = 142_i32
    USCRIPT_NABATAEAN = 143_i32
    USCRIPT_PALMYRENE = 144_i32
    USCRIPT_KHUDAWADI = 145_i32
    USCRIPT_SINDHI = 145_i32
    USCRIPT_WARANG_CITI = 146_i32
    USCRIPT_AFAKA = 147_i32
    USCRIPT_JURCHEN = 148_i32
    USCRIPT_MRO = 149_i32
    USCRIPT_NUSHU = 150_i32
    USCRIPT_SHARADA = 151_i32
    USCRIPT_SORA_SOMPENG = 152_i32
    USCRIPT_TAKRI = 153_i32
    USCRIPT_TANGUT = 154_i32
    USCRIPT_WOLEAI = 155_i32
    USCRIPT_ANATOLIAN_HIEROGLYPHS = 156_i32
    USCRIPT_KHOJKI = 157_i32
    USCRIPT_TIRHUTA = 158_i32
    USCRIPT_CAUCASIAN_ALBANIAN = 159_i32
    USCRIPT_MAHAJANI = 160_i32
    USCRIPT_AHOM = 161_i32
    USCRIPT_HATRAN = 162_i32
    USCRIPT_MODI = 163_i32
    USCRIPT_MULTANI = 164_i32
    USCRIPT_PAU_CIN_HAU = 165_i32
    USCRIPT_SIDDHAM = 166_i32
    USCRIPT_ADLAM = 167_i32
    USCRIPT_BHAIKSUKI = 168_i32
    USCRIPT_MARCHEN = 169_i32
    USCRIPT_NEWA = 170_i32
    USCRIPT_OSAGE = 171_i32
    USCRIPT_HAN_WITH_BOPOMOFO = 172_i32
    USCRIPT_JAMO = 173_i32
    USCRIPT_SYMBOLS_EMOJI = 174_i32
    USCRIPT_MASARAM_GONDI = 175_i32
    USCRIPT_SOYOMBO = 176_i32
    USCRIPT_ZANABAZAR_SQUARE = 177_i32
    USCRIPT_DOGRA = 178_i32
    USCRIPT_GUNJALA_GONDI = 179_i32
    USCRIPT_MAKASAR = 180_i32
    USCRIPT_MEDEFAIDRIN = 181_i32
    USCRIPT_HANIFI_ROHINGYA = 182_i32
    USCRIPT_SOGDIAN = 183_i32
    USCRIPT_OLD_SOGDIAN = 184_i32
    USCRIPT_ELYMAIC = 185_i32
    USCRIPT_NYIAKENG_PUACHUE_HMONG = 186_i32
    USCRIPT_NANDINAGARI = 187_i32
    USCRIPT_WANCHO = 188_i32
    USCRIPT_CHORASMIAN = 189_i32
    USCRIPT_DIVES_AKURU = 190_i32
    USCRIPT_KHITAN_SMALL_SCRIPT = 191_i32
    USCRIPT_YEZIDI = 192_i32
  end
  enum UScriptUsage
    USCRIPT_USAGE_NOT_ENCODED = 0_i32
    USCRIPT_USAGE_UNKNOWN = 1_i32
    USCRIPT_USAGE_EXCLUDED = 2_i32
    USCRIPT_USAGE_LIMITED_USE = 3_i32
    USCRIPT_USAGE_ASPIRATIONAL = 4_i32
    USCRIPT_USAGE_RECOMMENDED = 5_i32
  end
  enum UCharIteratorOrigin
    UITER_START = 0_i32
    UITER_CURRENT = 1_i32
    UITER_LIMIT = 2_i32
    UITER_ZERO = 3_i32
    UITER_LENGTH = 4_i32
  end
  enum ULocDataLocaleType
    ULOC_ACTUAL_LOCALE = 0_i32
    ULOC_VALID_LOCALE = 1_i32
  end
  enum ULocAvailableType
    ULOC_AVAILABLE_DEFAULT = 0_i32
    ULOC_AVAILABLE_ONLY_LEGACY_ALIASES = 1_i32
    ULOC_AVAILABLE_WITH_LEGACY_ALIASES = 2_i32
  end
  enum ULayoutType
    ULOC_LAYOUT_LTR = 0_i32
    ULOC_LAYOUT_RTL = 1_i32
    ULOC_LAYOUT_TTB = 2_i32
    ULOC_LAYOUT_BTT = 3_i32
    ULOC_LAYOUT_UNKNOWN = 4_i32
  end
  enum UAcceptResult
    ULOC_ACCEPT_FAILED = 0_i32
    ULOC_ACCEPT_VALID = 1_i32
    ULOC_ACCEPT_FALLBACK = 2_i32
  end
  enum UResType
    URES_NONE = -1_i32
    URES_STRING = 0_i32
    URES_BINARY = 1_i32
    URES_TABLE = 2_i32
    URES_ALIAS = 3_i32
    URES_INT = 7_i32
    URES_ARRAY = 8_i32
    URES_INT_VECTOR = 14_i32
  end
  enum UDisplayContextType
    UDISPCTX_TYPE_DIALECT_HANDLING = 0_i32
    UDISPCTX_TYPE_CAPITALIZATION = 1_i32
    UDISPCTX_TYPE_DISPLAY_LENGTH = 2_i32
    UDISPCTX_TYPE_SUBSTITUTE_HANDLING = 3_i32
  end
  enum UDisplayContext
    UDISPCTX_STANDARD_NAMES = 0_i32
    UDISPCTX_DIALECT_NAMES = 1_i32
    UDISPCTX_CAPITALIZATION_NONE = 256_i32
    UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE = 257_i32
    UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE = 258_i32
    UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU = 259_i32
    UDISPCTX_CAPITALIZATION_FOR_STANDALONE = 260_i32
    UDISPCTX_LENGTH_FULL = 512_i32
    UDISPCTX_LENGTH_SHORT = 513_i32
    UDISPCTX_SUBSTITUTE = 768_i32
    UDISPCTX_NO_SUBSTITUTE = 769_i32
  end
  enum UDialectHandling
    ULDN_STANDARD_NAMES = 0_i32
    ULDN_DIALECT_NAMES = 1_i32
  end
  enum UCurrencyUsage
    UCURR_USAGE_STANDARD = 0_i32
    UCURR_USAGE_CASH = 1_i32
  end
  enum UCurrNameStyle
    UCURR_SYMBOL_NAME = 0_i32
    UCURR_LONG_NAME = 1_i32
    UCURR_NARROW_SYMBOL_NAME = 2_i32
  end
  enum UCurrCurrencyType
    UCURR_ALL = 2147483647_i32
    UCURR_COMMON = 1_i32
    UCURR_UNCOMMON = 2_i32
    UCURR_DEPRECATED = 4_i32
    UCURR_NON_DEPRECATED = 8_i32
  end
  enum UCPMapRangeOption
    UCPMAP_RANGE_NORMAL = 0_i32
    UCPMAP_RANGE_FIXED_LEAD_SURROGATES = 1_i32
    UCPMAP_RANGE_FIXED_ALL_SURROGATES = 2_i32
  end
  enum UCPTrieType
    UCPTRIE_TYPE_ANY = -1_i32
    UCPTRIE_TYPE_FAST = 0_i32
    UCPTRIE_TYPE_SMALL = 1_i32
  end
  enum UCPTrieValueWidth
    UCPTRIE_VALUE_BITS_ANY = -1_i32
    UCPTRIE_VALUE_BITS_16 = 0_i32
    UCPTRIE_VALUE_BITS_32 = 1_i32
    UCPTRIE_VALUE_BITS_8 = 2_i32
  end
  enum UConverterCallbackReason
    UCNV_UNASSIGNED = 0_i32
    UCNV_ILLEGAL = 1_i32
    UCNV_IRREGULAR = 2_i32
    UCNV_RESET = 3_i32
    UCNV_CLOSE = 4_i32
    UCNV_CLONE = 5_i32
  end
  enum UConverterType
    UCNV_UNSUPPORTED_CONVERTER = -1_i32
    UCNV_SBCS = 0_i32
    UCNV_DBCS = 1_i32
    UCNV_MBCS = 2_i32
    UCNV_LATIN_1 = 3_i32
    UCNV_UTF8 = 4_i32
    UCNV_UTF16_BigEndian = 5_i32
    UCNV_UTF16_LittleEndian = 6_i32
    UCNV_UTF32_BigEndian = 7_i32
    UCNV_UTF32_LittleEndian = 8_i32
    UCNV_EBCDIC_STATEFUL = 9_i32
    UCNV_ISO_2022 = 10_i32
    UCNV_LMBCS_1 = 11_i32
    UCNV_LMBCS_2 = 12_i32
    UCNV_LMBCS_3 = 13_i32
    UCNV_LMBCS_4 = 14_i32
    UCNV_LMBCS_5 = 15_i32
    UCNV_LMBCS_6 = 16_i32
    UCNV_LMBCS_8 = 17_i32
    UCNV_LMBCS_11 = 18_i32
    UCNV_LMBCS_16 = 19_i32
    UCNV_LMBCS_17 = 20_i32
    UCNV_LMBCS_18 = 21_i32
    UCNV_LMBCS_19 = 22_i32
    UCNV_LMBCS_LAST = 22_i32
    UCNV_HZ = 23_i32
    UCNV_SCSU = 24_i32
    UCNV_ISCII = 25_i32
    UCNV_US_ASCII = 26_i32
    UCNV_UTF7 = 27_i32
    UCNV_BOCU1 = 28_i32
    UCNV_UTF16 = 29_i32
    UCNV_UTF32 = 30_i32
    UCNV_CESU8 = 31_i32
    UCNV_IMAP_MAILBOX = 32_i32
    UCNV_COMPOUND_TEXT = 33_i32
    UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES = 34_i32
  end
  enum UConverterPlatform
    UCNV_UNKNOWN = -1_i32
    UCNV_IBM = 0_i32
  end
  enum UConverterUnicodeSet
    UCNV_ROUNDTRIP_SET = 0_i32
    UCNV_ROUNDTRIP_AND_FALLBACK_SET = 1_i32
  end
  enum UProperty
    UCHAR_ALPHABETIC = 0_i32
    UCHAR_BINARY_START = 0_i32
    UCHAR_ASCII_HEX_DIGIT = 1_i32
    UCHAR_BIDI_CONTROL = 2_i32
    UCHAR_BIDI_MIRRORED = 3_i32
    UCHAR_DASH = 4_i32
    UCHAR_DEFAULT_IGNORABLE_CODE_POINT = 5_i32
    UCHAR_DEPRECATED = 6_i32
    UCHAR_DIACRITIC = 7_i32
    UCHAR_EXTENDER = 8_i32
    UCHAR_FULL_COMPOSITION_EXCLUSION = 9_i32
    UCHAR_GRAPHEME_BASE = 10_i32
    UCHAR_GRAPHEME_EXTEND = 11_i32
    UCHAR_GRAPHEME_LINK = 12_i32
    UCHAR_HEX_DIGIT = 13_i32
    UCHAR_HYPHEN = 14_i32
    UCHAR_ID_CONTINUE = 15_i32
    UCHAR_ID_START = 16_i32
    UCHAR_IDEOGRAPHIC = 17_i32
    UCHAR_IDS_BINARY_OPERATOR = 18_i32
    UCHAR_IDS_TRINARY_OPERATOR = 19_i32
    UCHAR_JOIN_CONTROL = 20_i32
    UCHAR_LOGICAL_ORDER_EXCEPTION = 21_i32
    UCHAR_LOWERCASE = 22_i32
    UCHAR_MATH = 23_i32
    UCHAR_NONCHARACTER_CODE_POINT = 24_i32
    UCHAR_QUOTATION_MARK = 25_i32
    UCHAR_RADICAL = 26_i32
    UCHAR_SOFT_DOTTED = 27_i32
    UCHAR_TERMINAL_PUNCTUATION = 28_i32
    UCHAR_UNIFIED_IDEOGRAPH = 29_i32
    UCHAR_UPPERCASE = 30_i32
    UCHAR_WHITE_SPACE = 31_i32
    UCHAR_XID_CONTINUE = 32_i32
    UCHAR_XID_START = 33_i32
    UCHAR_CASE_SENSITIVE = 34_i32
    UCHAR_S_TERM = 35_i32
    UCHAR_VARIATION_SELECTOR = 36_i32
    UCHAR_NFD_INERT = 37_i32
    UCHAR_NFKD_INERT = 38_i32
    UCHAR_NFC_INERT = 39_i32
    UCHAR_NFKC_INERT = 40_i32
    UCHAR_SEGMENT_STARTER = 41_i32
    UCHAR_PATTERN_SYNTAX = 42_i32
    UCHAR_PATTERN_WHITE_SPACE = 43_i32
    UCHAR_POSIX_ALNUM = 44_i32
    UCHAR_POSIX_BLANK = 45_i32
    UCHAR_POSIX_GRAPH = 46_i32
    UCHAR_POSIX_PRINT = 47_i32
    UCHAR_POSIX_XDIGIT = 48_i32
    UCHAR_CASED = 49_i32
    UCHAR_CASE_IGNORABLE = 50_i32
    UCHAR_CHANGES_WHEN_LOWERCASED = 51_i32
    UCHAR_CHANGES_WHEN_UPPERCASED = 52_i32
    UCHAR_CHANGES_WHEN_TITLECASED = 53_i32
    UCHAR_CHANGES_WHEN_CASEFOLDED = 54_i32
    UCHAR_CHANGES_WHEN_CASEMAPPED = 55_i32
    UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED = 56_i32
    UCHAR_EMOJI = 57_i32
    UCHAR_EMOJI_PRESENTATION = 58_i32
    UCHAR_EMOJI_MODIFIER = 59_i32
    UCHAR_EMOJI_MODIFIER_BASE = 60_i32
    UCHAR_EMOJI_COMPONENT = 61_i32
    UCHAR_REGIONAL_INDICATOR = 62_i32
    UCHAR_PREPENDED_CONCATENATION_MARK = 63_i32
    UCHAR_EXTENDED_PICTOGRAPHIC = 64_i32
    UCHAR_BIDI_CLASS = 4096_i32
    UCHAR_INT_START = 4096_i32
    UCHAR_BLOCK = 4097_i32
    UCHAR_CANONICAL_COMBINING_CLASS = 4098_i32
    UCHAR_DECOMPOSITION_TYPE = 4099_i32
    UCHAR_EAST_ASIAN_WIDTH = 4100_i32
    UCHAR_GENERAL_CATEGORY = 4101_i32
    UCHAR_JOINING_GROUP = 4102_i32
    UCHAR_JOINING_TYPE = 4103_i32
    UCHAR_LINE_BREAK = 4104_i32
    UCHAR_NUMERIC_TYPE = 4105_i32
    UCHAR_SCRIPT = 4106_i32
    UCHAR_HANGUL_SYLLABLE_TYPE = 4107_i32
    UCHAR_NFD_QUICK_CHECK = 4108_i32
    UCHAR_NFKD_QUICK_CHECK = 4109_i32
    UCHAR_NFC_QUICK_CHECK = 4110_i32
    UCHAR_NFKC_QUICK_CHECK = 4111_i32
    UCHAR_LEAD_CANONICAL_COMBINING_CLASS = 4112_i32
    UCHAR_TRAIL_CANONICAL_COMBINING_CLASS = 4113_i32
    UCHAR_GRAPHEME_CLUSTER_BREAK = 4114_i32
    UCHAR_SENTENCE_BREAK = 4115_i32
    UCHAR_WORD_BREAK = 4116_i32
    UCHAR_BIDI_PAIRED_BRACKET_TYPE = 4117_i32
    UCHAR_INDIC_POSITIONAL_CATEGORY = 4118_i32
    UCHAR_INDIC_SYLLABIC_CATEGORY = 4119_i32
    UCHAR_VERTICAL_ORIENTATION = 4120_i32
    UCHAR_GENERAL_CATEGORY_MASK = 8192_i32
    UCHAR_MASK_START = 8192_i32
    UCHAR_NUMERIC_VALUE = 12288_i32
    UCHAR_DOUBLE_START = 12288_i32
    UCHAR_AGE = 16384_i32
    UCHAR_STRING_START = 16384_i32
    UCHAR_BIDI_MIRRORING_GLYPH = 16385_i32
    UCHAR_CASE_FOLDING = 16386_i32
    UCHAR_LOWERCASE_MAPPING = 16388_i32
    UCHAR_NAME = 16389_i32
    UCHAR_SIMPLE_CASE_FOLDING = 16390_i32
    UCHAR_SIMPLE_LOWERCASE_MAPPING = 16391_i32
    UCHAR_SIMPLE_TITLECASE_MAPPING = 16392_i32
    UCHAR_SIMPLE_UPPERCASE_MAPPING = 16393_i32
    UCHAR_TITLECASE_MAPPING = 16394_i32
    UCHAR_UPPERCASE_MAPPING = 16396_i32
    UCHAR_BIDI_PAIRED_BRACKET = 16397_i32
    UCHAR_SCRIPT_EXTENSIONS = 28672_i32
    UCHAR_OTHER_PROPERTY_START = 28672_i32
    UCHAR_INVALID_CODE = -1_i32
  end
  enum UCharCategory
    U_UNASSIGNED = 0_i32
    U_GENERAL_OTHER_TYPES = 0_i32
    U_UPPERCASE_LETTER = 1_i32
    U_LOWERCASE_LETTER = 2_i32
    U_TITLECASE_LETTER = 3_i32
    U_MODIFIER_LETTER = 4_i32
    U_OTHER_LETTER = 5_i32
    U_NON_SPACING_MARK = 6_i32
    U_ENCLOSING_MARK = 7_i32
    U_COMBINING_SPACING_MARK = 8_i32
    U_DECIMAL_DIGIT_NUMBER = 9_i32
    U_LETTER_NUMBER = 10_i32
    U_OTHER_NUMBER = 11_i32
    U_SPACE_SEPARATOR = 12_i32
    U_LINE_SEPARATOR = 13_i32
    U_PARAGRAPH_SEPARATOR = 14_i32
    U_CONTROL_CHAR = 15_i32
    U_FORMAT_CHAR = 16_i32
    U_PRIVATE_USE_CHAR = 17_i32
    U_SURROGATE = 18_i32
    U_DASH_PUNCTUATION = 19_i32
    U_START_PUNCTUATION = 20_i32
    U_END_PUNCTUATION = 21_i32
    U_CONNECTOR_PUNCTUATION = 22_i32
    U_OTHER_PUNCTUATION = 23_i32
    U_MATH_SYMBOL = 24_i32
    U_CURRENCY_SYMBOL = 25_i32
    U_MODIFIER_SYMBOL = 26_i32
    U_OTHER_SYMBOL = 27_i32
    U_INITIAL_PUNCTUATION = 28_i32
    U_FINAL_PUNCTUATION = 29_i32
    U_CHAR_CATEGORY_COUNT = 30_i32
  end
  enum UCharDirection
    U_LEFT_TO_RIGHT = 0_i32
    U_RIGHT_TO_LEFT = 1_i32
    U_EUROPEAN_NUMBER = 2_i32
    U_EUROPEAN_NUMBER_SEPARATOR = 3_i32
    U_EUROPEAN_NUMBER_TERMINATOR = 4_i32
    U_ARABIC_NUMBER = 5_i32
    U_COMMON_NUMBER_SEPARATOR = 6_i32
    U_BLOCK_SEPARATOR = 7_i32
    U_SEGMENT_SEPARATOR = 8_i32
    U_WHITE_SPACE_NEUTRAL = 9_i32
    U_OTHER_NEUTRAL = 10_i32
    U_LEFT_TO_RIGHT_EMBEDDING = 11_i32
    U_LEFT_TO_RIGHT_OVERRIDE = 12_i32
    U_RIGHT_TO_LEFT_ARABIC = 13_i32
    U_RIGHT_TO_LEFT_EMBEDDING = 14_i32
    U_RIGHT_TO_LEFT_OVERRIDE = 15_i32
    U_POP_DIRECTIONAL_FORMAT = 16_i32
    U_DIR_NON_SPACING_MARK = 17_i32
    U_BOUNDARY_NEUTRAL = 18_i32
    U_FIRST_STRONG_ISOLATE = 19_i32
    U_LEFT_TO_RIGHT_ISOLATE = 20_i32
    U_RIGHT_TO_LEFT_ISOLATE = 21_i32
    U_POP_DIRECTIONAL_ISOLATE = 22_i32
  end
  enum UBidiPairedBracketType
    U_BPT_NONE = 0_i32
    U_BPT_OPEN = 1_i32
    U_BPT_CLOSE = 2_i32
  end
  enum UBlockCode
    UBLOCK_NO_BLOCK = 0_i32
    UBLOCK_BASIC_LATIN = 1_i32
    UBLOCK_LATIN_1_SUPPLEMENT = 2_i32
    UBLOCK_LATIN_EXTENDED_A = 3_i32
    UBLOCK_LATIN_EXTENDED_B = 4_i32
    UBLOCK_IPA_EXTENSIONS = 5_i32
    UBLOCK_SPACING_MODIFIER_LETTERS = 6_i32
    UBLOCK_COMBINING_DIACRITICAL_MARKS = 7_i32
    UBLOCK_GREEK = 8_i32
    UBLOCK_CYRILLIC = 9_i32
    UBLOCK_ARMENIAN = 10_i32
    UBLOCK_HEBREW = 11_i32
    UBLOCK_ARABIC = 12_i32
    UBLOCK_SYRIAC = 13_i32
    UBLOCK_THAANA = 14_i32
    UBLOCK_DEVANAGARI = 15_i32
    UBLOCK_BENGALI = 16_i32
    UBLOCK_GURMUKHI = 17_i32
    UBLOCK_GUJARATI = 18_i32
    UBLOCK_ORIYA = 19_i32
    UBLOCK_TAMIL = 20_i32
    UBLOCK_TELUGU = 21_i32
    UBLOCK_KANNADA = 22_i32
    UBLOCK_MALAYALAM = 23_i32
    UBLOCK_SINHALA = 24_i32
    UBLOCK_THAI = 25_i32
    UBLOCK_LAO = 26_i32
    UBLOCK_TIBETAN = 27_i32
    UBLOCK_MYANMAR = 28_i32
    UBLOCK_GEORGIAN = 29_i32
    UBLOCK_HANGUL_JAMO = 30_i32
    UBLOCK_ETHIOPIC = 31_i32
    UBLOCK_CHEROKEE = 32_i32
    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 33_i32
    UBLOCK_OGHAM = 34_i32
    UBLOCK_RUNIC = 35_i32
    UBLOCK_KHMER = 36_i32
    UBLOCK_MONGOLIAN = 37_i32
    UBLOCK_LATIN_EXTENDED_ADDITIONAL = 38_i32
    UBLOCK_GREEK_EXTENDED = 39_i32
    UBLOCK_GENERAL_PUNCTUATION = 40_i32
    UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS = 41_i32
    UBLOCK_CURRENCY_SYMBOLS = 42_i32
    UBLOCK_COMBINING_MARKS_FOR_SYMBOLS = 43_i32
    UBLOCK_LETTERLIKE_SYMBOLS = 44_i32
    UBLOCK_NUMBER_FORMS = 45_i32
    UBLOCK_ARROWS = 46_i32
    UBLOCK_MATHEMATICAL_OPERATORS = 47_i32
    UBLOCK_MISCELLANEOUS_TECHNICAL = 48_i32
    UBLOCK_CONTROL_PICTURES = 49_i32
    UBLOCK_OPTICAL_CHARACTER_RECOGNITION = 50_i32
    UBLOCK_ENCLOSED_ALPHANUMERICS = 51_i32
    UBLOCK_BOX_DRAWING = 52_i32
    UBLOCK_BLOCK_ELEMENTS = 53_i32
    UBLOCK_GEOMETRIC_SHAPES = 54_i32
    UBLOCK_MISCELLANEOUS_SYMBOLS = 55_i32
    UBLOCK_DINGBATS = 56_i32
    UBLOCK_BRAILLE_PATTERNS = 57_i32
    UBLOCK_CJK_RADICALS_SUPPLEMENT = 58_i32
    UBLOCK_KANGXI_RADICALS = 59_i32
    UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS = 60_i32
    UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION = 61_i32
    UBLOCK_HIRAGANA = 62_i32
    UBLOCK_KATAKANA = 63_i32
    UBLOCK_BOPOMOFO = 64_i32
    UBLOCK_HANGUL_COMPATIBILITY_JAMO = 65_i32
    UBLOCK_KANBUN = 66_i32
    UBLOCK_BOPOMOFO_EXTENDED = 67_i32
    UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS = 68_i32
    UBLOCK_CJK_COMPATIBILITY = 69_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = 70_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS = 71_i32
    UBLOCK_YI_SYLLABLES = 72_i32
    UBLOCK_YI_RADICALS = 73_i32
    UBLOCK_HANGUL_SYLLABLES = 74_i32
    UBLOCK_HIGH_SURROGATES = 75_i32
    UBLOCK_HIGH_PRIVATE_USE_SURROGATES = 76_i32
    UBLOCK_LOW_SURROGATES = 77_i32
    UBLOCK_PRIVATE_USE_AREA = 78_i32
    UBLOCK_PRIVATE_USE = 78_i32
    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS = 79_i32
    UBLOCK_ALPHABETIC_PRESENTATION_FORMS = 80_i32
    UBLOCK_ARABIC_PRESENTATION_FORMS_A = 81_i32
    UBLOCK_COMBINING_HALF_MARKS = 82_i32
    UBLOCK_CJK_COMPATIBILITY_FORMS = 83_i32
    UBLOCK_SMALL_FORM_VARIANTS = 84_i32
    UBLOCK_ARABIC_PRESENTATION_FORMS_B = 85_i32
    UBLOCK_SPECIALS = 86_i32
    UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS = 87_i32
    UBLOCK_OLD_ITALIC = 88_i32
    UBLOCK_GOTHIC = 89_i32
    UBLOCK_DESERET = 90_i32
    UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = 91_i32
    UBLOCK_MUSICAL_SYMBOLS = 92_i32
    UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 93_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = 94_i32
    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = 95_i32
    UBLOCK_TAGS = 96_i32
    UBLOCK_CYRILLIC_SUPPLEMENT = 97_i32
    UBLOCK_CYRILLIC_SUPPLEMENTARY = 97_i32
    UBLOCK_TAGALOG = 98_i32
    UBLOCK_HANUNOO = 99_i32
    UBLOCK_BUHID = 100_i32
    UBLOCK_TAGBANWA = 101_i32
    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = 102_i32
    UBLOCK_SUPPLEMENTAL_ARROWS_A = 103_i32
    UBLOCK_SUPPLEMENTAL_ARROWS_B = 104_i32
    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = 105_i32
    UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = 106_i32
    UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = 107_i32
    UBLOCK_VARIATION_SELECTORS = 108_i32
    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = 109_i32
    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = 110_i32
    UBLOCK_LIMBU = 111_i32
    UBLOCK_TAI_LE = 112_i32
    UBLOCK_KHMER_SYMBOLS = 113_i32
    UBLOCK_PHONETIC_EXTENSIONS = 114_i32
    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = 115_i32
    UBLOCK_YIJING_HEXAGRAM_SYMBOLS = 116_i32
    UBLOCK_LINEAR_B_SYLLABARY = 117_i32
    UBLOCK_LINEAR_B_IDEOGRAMS = 118_i32
    UBLOCK_AEGEAN_NUMBERS = 119_i32
    UBLOCK_UGARITIC = 120_i32
    UBLOCK_SHAVIAN = 121_i32
    UBLOCK_OSMANYA = 122_i32
    UBLOCK_CYPRIOT_SYLLABARY = 123_i32
    UBLOCK_TAI_XUAN_JING_SYMBOLS = 124_i32
    UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = 125_i32
    UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = 126_i32
    UBLOCK_ANCIENT_GREEK_NUMBERS = 127_i32
    UBLOCK_ARABIC_SUPPLEMENT = 128_i32
    UBLOCK_BUGINESE = 129_i32
    UBLOCK_CJK_STROKES = 130_i32
    UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = 131_i32
    UBLOCK_COPTIC = 132_i32
    UBLOCK_ETHIOPIC_EXTENDED = 133_i32
    UBLOCK_ETHIOPIC_SUPPLEMENT = 134_i32
    UBLOCK_GEORGIAN_SUPPLEMENT = 135_i32
    UBLOCK_GLAGOLITIC = 136_i32
    UBLOCK_KHAROSHTHI = 137_i32
    UBLOCK_MODIFIER_TONE_LETTERS = 138_i32
    UBLOCK_NEW_TAI_LUE = 139_i32
    UBLOCK_OLD_PERSIAN = 140_i32
    UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = 141_i32
    UBLOCK_SUPPLEMENTAL_PUNCTUATION = 142_i32
    UBLOCK_SYLOTI_NAGRI = 143_i32
    UBLOCK_TIFINAGH = 144_i32
    UBLOCK_VERTICAL_FORMS = 145_i32
    UBLOCK_NKO = 146_i32
    UBLOCK_BALINESE = 147_i32
    UBLOCK_LATIN_EXTENDED_C = 148_i32
    UBLOCK_LATIN_EXTENDED_D = 149_i32
    UBLOCK_PHAGS_PA = 150_i32
    UBLOCK_PHOENICIAN = 151_i32
    UBLOCK_CUNEIFORM = 152_i32
    UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = 153_i32
    UBLOCK_COUNTING_ROD_NUMERALS = 154_i32
    UBLOCK_SUNDANESE = 155_i32
    UBLOCK_LEPCHA = 156_i32
    UBLOCK_OL_CHIKI = 157_i32
    UBLOCK_CYRILLIC_EXTENDED_A = 158_i32
    UBLOCK_VAI = 159_i32
    UBLOCK_CYRILLIC_EXTENDED_B = 160_i32
    UBLOCK_SAURASHTRA = 161_i32
    UBLOCK_KAYAH_LI = 162_i32
    UBLOCK_REJANG = 163_i32
    UBLOCK_CHAM = 164_i32
    UBLOCK_ANCIENT_SYMBOLS = 165_i32
    UBLOCK_PHAISTOS_DISC = 166_i32
    UBLOCK_LYCIAN = 167_i32
    UBLOCK_CARIAN = 168_i32
    UBLOCK_LYDIAN = 169_i32
    UBLOCK_MAHJONG_TILES = 170_i32
    UBLOCK_DOMINO_TILES = 171_i32
    UBLOCK_SAMARITAN = 172_i32
    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = 173_i32
    UBLOCK_TAI_THAM = 174_i32
    UBLOCK_VEDIC_EXTENSIONS = 175_i32
    UBLOCK_LISU = 176_i32
    UBLOCK_BAMUM = 177_i32
    UBLOCK_COMMON_INDIC_NUMBER_FORMS = 178_i32
    UBLOCK_DEVANAGARI_EXTENDED = 179_i32
    UBLOCK_HANGUL_JAMO_EXTENDED_A = 180_i32
    UBLOCK_JAVANESE = 181_i32
    UBLOCK_MYANMAR_EXTENDED_A = 182_i32
    UBLOCK_TAI_VIET = 183_i32
    UBLOCK_MEETEI_MAYEK = 184_i32
    UBLOCK_HANGUL_JAMO_EXTENDED_B = 185_i32
    UBLOCK_IMPERIAL_ARAMAIC = 186_i32
    UBLOCK_OLD_SOUTH_ARABIAN = 187_i32
    UBLOCK_AVESTAN = 188_i32
    UBLOCK_INSCRIPTIONAL_PARTHIAN = 189_i32
    UBLOCK_INSCRIPTIONAL_PAHLAVI = 190_i32
    UBLOCK_OLD_TURKIC = 191_i32
    UBLOCK_RUMI_NUMERAL_SYMBOLS = 192_i32
    UBLOCK_KAITHI = 193_i32
    UBLOCK_EGYPTIAN_HIEROGLYPHS = 194_i32
    UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = 195_i32
    UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = 196_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = 197_i32
    UBLOCK_MANDAIC = 198_i32
    UBLOCK_BATAK = 199_i32
    UBLOCK_ETHIOPIC_EXTENDED_A = 200_i32
    UBLOCK_BRAHMI = 201_i32
    UBLOCK_BAMUM_SUPPLEMENT = 202_i32
    UBLOCK_KANA_SUPPLEMENT = 203_i32
    UBLOCK_PLAYING_CARDS = 204_i32
    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = 205_i32
    UBLOCK_EMOTICONS = 206_i32
    UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = 207_i32
    UBLOCK_ALCHEMICAL_SYMBOLS = 208_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = 209_i32
    UBLOCK_ARABIC_EXTENDED_A = 210_i32
    UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = 211_i32
    UBLOCK_CHAKMA = 212_i32
    UBLOCK_MEETEI_MAYEK_EXTENSIONS = 213_i32
    UBLOCK_MEROITIC_CURSIVE = 214_i32
    UBLOCK_MEROITIC_HIEROGLYPHS = 215_i32
    UBLOCK_MIAO = 216_i32
    UBLOCK_SHARADA = 217_i32
    UBLOCK_SORA_SOMPENG = 218_i32
    UBLOCK_SUNDANESE_SUPPLEMENT = 219_i32
    UBLOCK_TAKRI = 220_i32
    UBLOCK_BASSA_VAH = 221_i32
    UBLOCK_CAUCASIAN_ALBANIAN = 222_i32
    UBLOCK_COPTIC_EPACT_NUMBERS = 223_i32
    UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED = 224_i32
    UBLOCK_DUPLOYAN = 225_i32
    UBLOCK_ELBASAN = 226_i32
    UBLOCK_GEOMETRIC_SHAPES_EXTENDED = 227_i32
    UBLOCK_GRANTHA = 228_i32
    UBLOCK_KHOJKI = 229_i32
    UBLOCK_KHUDAWADI = 230_i32
    UBLOCK_LATIN_EXTENDED_E = 231_i32
    UBLOCK_LINEAR_A = 232_i32
    UBLOCK_MAHAJANI = 233_i32
    UBLOCK_MANICHAEAN = 234_i32
    UBLOCK_MENDE_KIKAKUI = 235_i32
    UBLOCK_MODI = 236_i32
    UBLOCK_MRO = 237_i32
    UBLOCK_MYANMAR_EXTENDED_B = 238_i32
    UBLOCK_NABATAEAN = 239_i32
    UBLOCK_OLD_NORTH_ARABIAN = 240_i32
    UBLOCK_OLD_PERMIC = 241_i32
    UBLOCK_ORNAMENTAL_DINGBATS = 242_i32
    UBLOCK_PAHAWH_HMONG = 243_i32
    UBLOCK_PALMYRENE = 244_i32
    UBLOCK_PAU_CIN_HAU = 245_i32
    UBLOCK_PSALTER_PAHLAVI = 246_i32
    UBLOCK_SHORTHAND_FORMAT_CONTROLS = 247_i32
    UBLOCK_SIDDHAM = 248_i32
    UBLOCK_SINHALA_ARCHAIC_NUMBERS = 249_i32
    UBLOCK_SUPPLEMENTAL_ARROWS_C = 250_i32
    UBLOCK_TIRHUTA = 251_i32
    UBLOCK_WARANG_CITI = 252_i32
    UBLOCK_AHOM = 253_i32
    UBLOCK_ANATOLIAN_HIEROGLYPHS = 254_i32
    UBLOCK_CHEROKEE_SUPPLEMENT = 255_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E = 256_i32
    UBLOCK_EARLY_DYNASTIC_CUNEIFORM = 257_i32
    UBLOCK_HATRAN = 258_i32
    UBLOCK_MULTANI = 259_i32
    UBLOCK_OLD_HUNGARIAN = 260_i32
    UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS = 261_i32
    UBLOCK_SUTTON_SIGNWRITING = 262_i32
    UBLOCK_ADLAM = 263_i32
    UBLOCK_BHAIKSUKI = 264_i32
    UBLOCK_CYRILLIC_EXTENDED_C = 265_i32
    UBLOCK_GLAGOLITIC_SUPPLEMENT = 266_i32
    UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION = 267_i32
    UBLOCK_MARCHEN = 268_i32
    UBLOCK_MONGOLIAN_SUPPLEMENT = 269_i32
    UBLOCK_NEWA = 270_i32
    UBLOCK_OSAGE = 271_i32
    UBLOCK_TANGUT = 272_i32
    UBLOCK_TANGUT_COMPONENTS = 273_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F = 274_i32
    UBLOCK_KANA_EXTENDED_A = 275_i32
    UBLOCK_MASARAM_GONDI = 276_i32
    UBLOCK_NUSHU = 277_i32
    UBLOCK_SOYOMBO = 278_i32
    UBLOCK_SYRIAC_SUPPLEMENT = 279_i32
    UBLOCK_ZANABAZAR_SQUARE = 280_i32
    UBLOCK_CHESS_SYMBOLS = 281_i32
    UBLOCK_DOGRA = 282_i32
    UBLOCK_GEORGIAN_EXTENDED = 283_i32
    UBLOCK_GUNJALA_GONDI = 284_i32
    UBLOCK_HANIFI_ROHINGYA = 285_i32
    UBLOCK_INDIC_SIYAQ_NUMBERS = 286_i32
    UBLOCK_MAKASAR = 287_i32
    UBLOCK_MAYAN_NUMERALS = 288_i32
    UBLOCK_MEDEFAIDRIN = 289_i32
    UBLOCK_OLD_SOGDIAN = 290_i32
    UBLOCK_SOGDIAN = 291_i32
    UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS = 292_i32
    UBLOCK_ELYMAIC = 293_i32
    UBLOCK_NANDINAGARI = 294_i32
    UBLOCK_NYIAKENG_PUACHUE_HMONG = 295_i32
    UBLOCK_OTTOMAN_SIYAQ_NUMBERS = 296_i32
    UBLOCK_SMALL_KANA_EXTENSION = 297_i32
    UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A = 298_i32
    UBLOCK_TAMIL_SUPPLEMENT = 299_i32
    UBLOCK_WANCHO = 300_i32
    UBLOCK_CHORASMIAN = 301_i32
    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G = 302_i32
    UBLOCK_DIVES_AKURU = 303_i32
    UBLOCK_KHITAN_SMALL_SCRIPT = 304_i32
    UBLOCK_LISU_SUPPLEMENT = 305_i32
    UBLOCK_SYMBOLS_FOR_LEGACY_COMPUTING = 306_i32
    UBLOCK_TANGUT_SUPPLEMENT = 307_i32
    UBLOCK_YEZIDI = 308_i32
    UBLOCK_INVALID_CODE = -1_i32
  end
  enum UEastAsianWidth
    U_EA_NEUTRAL = 0_i32
    U_EA_AMBIGUOUS = 1_i32
    U_EA_HALFWIDTH = 2_i32
    U_EA_FULLWIDTH = 3_i32
    U_EA_NARROW = 4_i32
    U_EA_WIDE = 5_i32
  end
  enum UCharNameChoice
    U_UNICODE_CHAR_NAME = 0_i32
    U_EXTENDED_CHAR_NAME = 2_i32
    U_CHAR_NAME_ALIAS = 3_i32
  end
  enum UPropertyNameChoice
    U_SHORT_PROPERTY_NAME = 0_i32
    U_LONG_PROPERTY_NAME = 1_i32
  end
  enum UDecompositionType
    U_DT_NONE = 0_i32
    U_DT_CANONICAL = 1_i32
    U_DT_COMPAT = 2_i32
    U_DT_CIRCLE = 3_i32
    U_DT_FINAL = 4_i32
    U_DT_FONT = 5_i32
    U_DT_FRACTION = 6_i32
    U_DT_INITIAL = 7_i32
    U_DT_ISOLATED = 8_i32
    U_DT_MEDIAL = 9_i32
    U_DT_NARROW = 10_i32
    U_DT_NOBREAK = 11_i32
    U_DT_SMALL = 12_i32
    U_DT_SQUARE = 13_i32
    U_DT_SUB = 14_i32
    U_DT_SUPER = 15_i32
    U_DT_VERTICAL = 16_i32
    U_DT_WIDE = 17_i32
  end
  enum UJoiningType
    U_JT_NON_JOINING = 0_i32
    U_JT_JOIN_CAUSING = 1_i32
    U_JT_DUAL_JOINING = 2_i32
    U_JT_LEFT_JOINING = 3_i32
    U_JT_RIGHT_JOINING = 4_i32
    U_JT_TRANSPARENT = 5_i32
  end
  enum UJoiningGroup
    U_JG_NO_JOINING_GROUP = 0_i32
    U_JG_AIN = 1_i32
    U_JG_ALAPH = 2_i32
    U_JG_ALEF = 3_i32
    U_JG_BEH = 4_i32
    U_JG_BETH = 5_i32
    U_JG_DAL = 6_i32
    U_JG_DALATH_RISH = 7_i32
    U_JG_E = 8_i32
    U_JG_FEH = 9_i32
    U_JG_FINAL_SEMKATH = 10_i32
    U_JG_GAF = 11_i32
    U_JG_GAMAL = 12_i32
    U_JG_HAH = 13_i32
    U_JG_TEH_MARBUTA_GOAL = 14_i32
    U_JG_HAMZA_ON_HEH_GOAL = 14_i32
    U_JG_HE = 15_i32
    U_JG_HEH = 16_i32
    U_JG_HEH_GOAL = 17_i32
    U_JG_HETH = 18_i32
    U_JG_KAF = 19_i32
    U_JG_KAPH = 20_i32
    U_JG_KNOTTED_HEH = 21_i32
    U_JG_LAM = 22_i32
    U_JG_LAMADH = 23_i32
    U_JG_MEEM = 24_i32
    U_JG_MIM = 25_i32
    U_JG_NOON = 26_i32
    U_JG_NUN = 27_i32
    U_JG_PE = 28_i32
    U_JG_QAF = 29_i32
    U_JG_QAPH = 30_i32
    U_JG_REH = 31_i32
    U_JG_REVERSED_PE = 32_i32
    U_JG_SAD = 33_i32
    U_JG_SADHE = 34_i32
    U_JG_SEEN = 35_i32
    U_JG_SEMKATH = 36_i32
    U_JG_SHIN = 37_i32
    U_JG_SWASH_KAF = 38_i32
    U_JG_SYRIAC_WAW = 39_i32
    U_JG_TAH = 40_i32
    U_JG_TAW = 41_i32
    U_JG_TEH_MARBUTA = 42_i32
    U_JG_TETH = 43_i32
    U_JG_WAW = 44_i32
    U_JG_YEH = 45_i32
    U_JG_YEH_BARREE = 46_i32
    U_JG_YEH_WITH_TAIL = 47_i32
    U_JG_YUDH = 48_i32
    U_JG_YUDH_HE = 49_i32
    U_JG_ZAIN = 50_i32
    U_JG_FE = 51_i32
    U_JG_KHAPH = 52_i32
    U_JG_ZHAIN = 53_i32
    U_JG_BURUSHASKI_YEH_BARREE = 54_i32
    U_JG_FARSI_YEH = 55_i32
    U_JG_NYA = 56_i32
    U_JG_ROHINGYA_YEH = 57_i32
    U_JG_MANICHAEAN_ALEPH = 58_i32
    U_JG_MANICHAEAN_AYIN = 59_i32
    U_JG_MANICHAEAN_BETH = 60_i32
    U_JG_MANICHAEAN_DALETH = 61_i32
    U_JG_MANICHAEAN_DHAMEDH = 62_i32
    U_JG_MANICHAEAN_FIVE = 63_i32
    U_JG_MANICHAEAN_GIMEL = 64_i32
    U_JG_MANICHAEAN_HETH = 65_i32
    U_JG_MANICHAEAN_HUNDRED = 66_i32
    U_JG_MANICHAEAN_KAPH = 67_i32
    U_JG_MANICHAEAN_LAMEDH = 68_i32
    U_JG_MANICHAEAN_MEM = 69_i32
    U_JG_MANICHAEAN_NUN = 70_i32
    U_JG_MANICHAEAN_ONE = 71_i32
    U_JG_MANICHAEAN_PE = 72_i32
    U_JG_MANICHAEAN_QOPH = 73_i32
    U_JG_MANICHAEAN_RESH = 74_i32
    U_JG_MANICHAEAN_SADHE = 75_i32
    U_JG_MANICHAEAN_SAMEKH = 76_i32
    U_JG_MANICHAEAN_TAW = 77_i32
    U_JG_MANICHAEAN_TEN = 78_i32
    U_JG_MANICHAEAN_TETH = 79_i32
    U_JG_MANICHAEAN_THAMEDH = 80_i32
    U_JG_MANICHAEAN_TWENTY = 81_i32
    U_JG_MANICHAEAN_WAW = 82_i32
    U_JG_MANICHAEAN_YODH = 83_i32
    U_JG_MANICHAEAN_ZAYIN = 84_i32
    U_JG_STRAIGHT_WAW = 85_i32
    U_JG_AFRICAN_FEH = 86_i32
    U_JG_AFRICAN_NOON = 87_i32
    U_JG_AFRICAN_QAF = 88_i32
    U_JG_MALAYALAM_BHA = 89_i32
    U_JG_MALAYALAM_JA = 90_i32
    U_JG_MALAYALAM_LLA = 91_i32
    U_JG_MALAYALAM_LLLA = 92_i32
    U_JG_MALAYALAM_NGA = 93_i32
    U_JG_MALAYALAM_NNA = 94_i32
    U_JG_MALAYALAM_NNNA = 95_i32
    U_JG_MALAYALAM_NYA = 96_i32
    U_JG_MALAYALAM_RA = 97_i32
    U_JG_MALAYALAM_SSA = 98_i32
    U_JG_MALAYALAM_TTA = 99_i32
    U_JG_HANIFI_ROHINGYA_KINNA_YA = 100_i32
    U_JG_HANIFI_ROHINGYA_PA = 101_i32
  end
  enum UGraphemeClusterBreak
    U_GCB_OTHER = 0_i32
    U_GCB_CONTROL = 1_i32
    U_GCB_CR = 2_i32
    U_GCB_EXTEND = 3_i32
    U_GCB_L = 4_i32
    U_GCB_LF = 5_i32
    U_GCB_LV = 6_i32
    U_GCB_LVT = 7_i32
    U_GCB_T = 8_i32
    U_GCB_V = 9_i32
    U_GCB_SPACING_MARK = 10_i32
    U_GCB_PREPEND = 11_i32
    U_GCB_REGIONAL_INDICATOR = 12_i32
    U_GCB_E_BASE = 13_i32
    U_GCB_E_BASE_GAZ = 14_i32
    U_GCB_E_MODIFIER = 15_i32
    U_GCB_GLUE_AFTER_ZWJ = 16_i32
    U_GCB_ZWJ = 17_i32
  end
  enum UWordBreakValues
    U_WB_OTHER = 0_i32
    U_WB_ALETTER = 1_i32
    U_WB_FORMAT = 2_i32
    U_WB_KATAKANA = 3_i32
    U_WB_MIDLETTER = 4_i32
    U_WB_MIDNUM = 5_i32
    U_WB_NUMERIC = 6_i32
    U_WB_EXTENDNUMLET = 7_i32
    U_WB_CR = 8_i32
    U_WB_EXTEND = 9_i32
    U_WB_LF = 10_i32
    U_WB_MIDNUMLET = 11_i32
    U_WB_NEWLINE = 12_i32
    U_WB_REGIONAL_INDICATOR = 13_i32
    U_WB_HEBREW_LETTER = 14_i32
    U_WB_SINGLE_QUOTE = 15_i32
    U_WB_DOUBLE_QUOTE = 16_i32
    U_WB_E_BASE = 17_i32
    U_WB_E_BASE_GAZ = 18_i32
    U_WB_E_MODIFIER = 19_i32
    U_WB_GLUE_AFTER_ZWJ = 20_i32
    U_WB_ZWJ = 21_i32
    U_WB_WSEGSPACE = 22_i32
  end
  enum USentenceBreak
    U_SB_OTHER = 0_i32
    U_SB_ATERM = 1_i32
    U_SB_CLOSE = 2_i32
    U_SB_FORMAT = 3_i32
    U_SB_LOWER = 4_i32
    U_SB_NUMERIC = 5_i32
    U_SB_OLETTER = 6_i32
    U_SB_SEP = 7_i32
    U_SB_SP = 8_i32
    U_SB_STERM = 9_i32
    U_SB_UPPER = 10_i32
    U_SB_CR = 11_i32
    U_SB_EXTEND = 12_i32
    U_SB_LF = 13_i32
    U_SB_SCONTINUE = 14_i32
  end
  enum ULineBreak
    U_LB_UNKNOWN = 0_i32
    U_LB_AMBIGUOUS = 1_i32
    U_LB_ALPHABETIC = 2_i32
    U_LB_BREAK_BOTH = 3_i32
    U_LB_BREAK_AFTER = 4_i32
    U_LB_BREAK_BEFORE = 5_i32
    U_LB_MANDATORY_BREAK = 6_i32
    U_LB_CONTINGENT_BREAK = 7_i32
    U_LB_CLOSE_PUNCTUATION = 8_i32
    U_LB_COMBINING_MARK = 9_i32
    U_LB_CARRIAGE_RETURN = 10_i32
    U_LB_EXCLAMATION = 11_i32
    U_LB_GLUE = 12_i32
    U_LB_HYPHEN = 13_i32
    U_LB_IDEOGRAPHIC = 14_i32
    U_LB_INSEPARABLE = 15_i32
    U_LB_INSEPERABLE = 15_i32
    U_LB_INFIX_NUMERIC = 16_i32
    U_LB_LINE_FEED = 17_i32
    U_LB_NONSTARTER = 18_i32
    U_LB_NUMERIC = 19_i32
    U_LB_OPEN_PUNCTUATION = 20_i32
    U_LB_POSTFIX_NUMERIC = 21_i32
    U_LB_PREFIX_NUMERIC = 22_i32
    U_LB_QUOTATION = 23_i32
    U_LB_COMPLEX_CONTEXT = 24_i32
    U_LB_SURROGATE = 25_i32
    U_LB_SPACE = 26_i32
    U_LB_BREAK_SYMBOLS = 27_i32
    U_LB_ZWSPACE = 28_i32
    U_LB_NEXT_LINE = 29_i32
    U_LB_WORD_JOINER = 30_i32
    U_LB_H2 = 31_i32
    U_LB_H3 = 32_i32
    U_LB_JL = 33_i32
    U_LB_JT = 34_i32
    U_LB_JV = 35_i32
    U_LB_CLOSE_PARENTHESIS = 36_i32
    U_LB_CONDITIONAL_JAPANESE_STARTER = 37_i32
    U_LB_HEBREW_LETTER = 38_i32
    U_LB_REGIONAL_INDICATOR = 39_i32
    U_LB_E_BASE = 40_i32
    U_LB_E_MODIFIER = 41_i32
    U_LB_ZWJ = 42_i32
  end
  enum UNumericType
    U_NT_NONE = 0_i32
    U_NT_DECIMAL = 1_i32
    U_NT_DIGIT = 2_i32
    U_NT_NUMERIC = 3_i32
  end
  enum UHangulSyllableType
    U_HST_NOT_APPLICABLE = 0_i32
    U_HST_LEADING_JAMO = 1_i32
    U_HST_VOWEL_JAMO = 2_i32
    U_HST_TRAILING_JAMO = 3_i32
    U_HST_LV_SYLLABLE = 4_i32
    U_HST_LVT_SYLLABLE = 5_i32
  end
  enum UIndicPositionalCategory
    U_INPC_NA = 0_i32
    U_INPC_BOTTOM = 1_i32
    U_INPC_BOTTOM_AND_LEFT = 2_i32
    U_INPC_BOTTOM_AND_RIGHT = 3_i32
    U_INPC_LEFT = 4_i32
    U_INPC_LEFT_AND_RIGHT = 5_i32
    U_INPC_OVERSTRUCK = 6_i32
    U_INPC_RIGHT = 7_i32
    U_INPC_TOP = 8_i32
    U_INPC_TOP_AND_BOTTOM = 9_i32
    U_INPC_TOP_AND_BOTTOM_AND_RIGHT = 10_i32
    U_INPC_TOP_AND_LEFT = 11_i32
    U_INPC_TOP_AND_LEFT_AND_RIGHT = 12_i32
    U_INPC_TOP_AND_RIGHT = 13_i32
    U_INPC_VISUAL_ORDER_LEFT = 14_i32
    U_INPC_TOP_AND_BOTTOM_AND_LEFT = 15_i32
  end
  enum UIndicSyllabicCategory
    U_INSC_OTHER = 0_i32
    U_INSC_AVAGRAHA = 1_i32
    U_INSC_BINDU = 2_i32
    U_INSC_BRAHMI_JOINING_NUMBER = 3_i32
    U_INSC_CANTILLATION_MARK = 4_i32
    U_INSC_CONSONANT = 5_i32
    U_INSC_CONSONANT_DEAD = 6_i32
    U_INSC_CONSONANT_FINAL = 7_i32
    U_INSC_CONSONANT_HEAD_LETTER = 8_i32
    U_INSC_CONSONANT_INITIAL_POSTFIXED = 9_i32
    U_INSC_CONSONANT_KILLER = 10_i32
    U_INSC_CONSONANT_MEDIAL = 11_i32
    U_INSC_CONSONANT_PLACEHOLDER = 12_i32
    U_INSC_CONSONANT_PRECEDING_REPHA = 13_i32
    U_INSC_CONSONANT_PREFIXED = 14_i32
    U_INSC_CONSONANT_SUBJOINED = 15_i32
    U_INSC_CONSONANT_SUCCEEDING_REPHA = 16_i32
    U_INSC_CONSONANT_WITH_STACKER = 17_i32
    U_INSC_GEMINATION_MARK = 18_i32
    U_INSC_INVISIBLE_STACKER = 19_i32
    U_INSC_JOINER = 20_i32
    U_INSC_MODIFYING_LETTER = 21_i32
    U_INSC_NON_JOINER = 22_i32
    U_INSC_NUKTA = 23_i32
    U_INSC_NUMBER = 24_i32
    U_INSC_NUMBER_JOINER = 25_i32
    U_INSC_PURE_KILLER = 26_i32
    U_INSC_REGISTER_SHIFTER = 27_i32
    U_INSC_SYLLABLE_MODIFIER = 28_i32
    U_INSC_TONE_LETTER = 29_i32
    U_INSC_TONE_MARK = 30_i32
    U_INSC_VIRAMA = 31_i32
    U_INSC_VISARGA = 32_i32
    U_INSC_VOWEL = 33_i32
    U_INSC_VOWEL_DEPENDENT = 34_i32
    U_INSC_VOWEL_INDEPENDENT = 35_i32
  end
  enum UVerticalOrientation
    U_VO_ROTATED = 0_i32
    U_VO_TRANSFORMED_ROTATED = 1_i32
    U_VO_TRANSFORMED_UPRIGHT = 2_i32
    U_VO_UPRIGHT = 3_i32
  end
  enum UBiDiDirection
    UBIDI_LTR = 0_i32
    UBIDI_RTL = 1_i32
    UBIDI_MIXED = 2_i32
    UBIDI_NEUTRAL = 3_i32
  end
  enum UBiDiReorderingMode
    UBIDI_REORDER_DEFAULT = 0_i32
    UBIDI_REORDER_NUMBERS_SPECIAL = 1_i32
    UBIDI_REORDER_GROUP_NUMBERS_WITH_R = 2_i32
    UBIDI_REORDER_RUNS_ONLY = 3_i32
    UBIDI_REORDER_INVERSE_NUMBERS_AS_L = 4_i32
    UBIDI_REORDER_INVERSE_LIKE_DIRECT = 5_i32
    UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL = 6_i32
  end
  enum UBiDiReorderingOption
    UBIDI_OPTION_DEFAULT = 0_i32
    UBIDI_OPTION_INSERT_MARKS = 1_i32
    UBIDI_OPTION_REMOVE_CONTROLS = 2_i32
    UBIDI_OPTION_STREAMING = 4_i32
  end
  enum UBiDiOrder
    UBIDI_LOGICAL = 0_i32
    UBIDI_VISUAL = 1_i32
  end
  enum UBiDiMirroring
    UBIDI_MIRRORING_OFF = 0_i32
    UBIDI_MIRRORING_ON = 1_i32
  end
  enum USetSpanCondition
    USET_SPAN_NOT_CONTAINED = 0_i32
    USET_SPAN_CONTAINED = 1_i32
    USET_SPAN_SIMPLE = 2_i32
  end
  enum UNormalization2Mode
    UNORM2_COMPOSE = 0_i32
    UNORM2_DECOMPOSE = 1_i32
    UNORM2_FCD = 2_i32
    UNORM2_COMPOSE_CONTIGUOUS = 3_i32
  end
  enum UNormalizationCheckResult
    UNORM_NO = 0_i32
    UNORM_YES = 1_i32
    UNORM_MAYBE = 2_i32
  end
  enum UNormalizationMode
    UNORM_NONE = 1_i32
    UNORM_NFD = 2_i32
    UNORM_NFKD = 3_i32
    UNORM_NFC = 4_i32
    UNORM_DEFAULT = 4_i32
    UNORM_NFKC = 5_i32
    UNORM_FCD = 6_i32
    UNORM_MODE_COUNT = 7_i32
  end
  enum UStringPrepProfileType
    USPREP_RFC3491_NAMEPREP = 0_i32
    USPREP_RFC3530_NFS4_CS_PREP = 1_i32
    USPREP_RFC3530_NFS4_CS_PREP_CI = 2_i32
    USPREP_RFC3530_NFS4_CIS_PREP = 3_i32
    USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX = 4_i32
    USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX = 5_i32
    USPREP_RFC3722_ISCSI = 6_i32
    USPREP_RFC3920_NODEPREP = 7_i32
    USPREP_RFC3920_RESOURCEPREP = 8_i32
    USPREP_RFC4011_MIB = 9_i32
    USPREP_RFC4013_SASLPREP = 10_i32
    USPREP_RFC4505_TRACE = 11_i32
    USPREP_RFC4518_LDAP = 12_i32
    USPREP_RFC4518_LDAP_CI = 13_i32
  end
  enum UBreakIteratorType
    UBRK_CHARACTER = 0_i32
    UBRK_WORD = 1_i32
    UBRK_LINE = 2_i32
    UBRK_SENTENCE = 3_i32
  end
  enum UWordBreak
    UBRK_WORD_NONE = 0_i32
    UBRK_WORD_NONE_LIMIT = 100_i32
    UBRK_WORD_NUMBER = 100_i32
    UBRK_WORD_NUMBER_LIMIT = 200_i32
    UBRK_WORD_LETTER = 200_i32
    UBRK_WORD_LETTER_LIMIT = 300_i32
    UBRK_WORD_KANA = 300_i32
    UBRK_WORD_KANA_LIMIT = 400_i32
    UBRK_WORD_IDEO = 400_i32
    UBRK_WORD_IDEO_LIMIT = 500_i32
  end
  enum ULineBreakTag
    UBRK_LINE_SOFT = 0_i32
    UBRK_LINE_SOFT_LIMIT = 100_i32
    UBRK_LINE_HARD = 100_i32
    UBRK_LINE_HARD_LIMIT = 200_i32
  end
  enum USentenceBreakTag
    UBRK_SENTENCE_TERM = 0_i32
    UBRK_SENTENCE_TERM_LIMIT = 100_i32
    UBRK_SENTENCE_SEP = 100_i32
    UBRK_SENTENCE_SEP_LIMIT = 200_i32
  end
  enum UCalendarType
    UCAL_TRADITIONAL = 0_i32
    UCAL_DEFAULT = 0_i32
    UCAL_GREGORIAN = 1_i32
  end
  enum UCalendarDateFields
    UCAL_ERA = 0_i32
    UCAL_YEAR = 1_i32
    UCAL_MONTH = 2_i32
    UCAL_WEEK_OF_YEAR = 3_i32
    UCAL_WEEK_OF_MONTH = 4_i32
    UCAL_DATE = 5_i32
    UCAL_DAY_OF_YEAR = 6_i32
    UCAL_DAY_OF_WEEK = 7_i32
    UCAL_DAY_OF_WEEK_IN_MONTH = 8_i32
    UCAL_AM_PM = 9_i32
    UCAL_HOUR = 10_i32
    UCAL_HOUR_OF_DAY = 11_i32
    UCAL_MINUTE = 12_i32
    UCAL_SECOND = 13_i32
    UCAL_MILLISECOND = 14_i32
    UCAL_ZONE_OFFSET = 15_i32
    UCAL_DST_OFFSET = 16_i32
    UCAL_YEAR_WOY = 17_i32
    UCAL_DOW_LOCAL = 18_i32
    UCAL_EXTENDED_YEAR = 19_i32
    UCAL_JULIAN_DAY = 20_i32
    UCAL_MILLISECONDS_IN_DAY = 21_i32
    UCAL_IS_LEAP_MONTH = 22_i32
    UCAL_FIELD_COUNT = 23_i32
    UCAL_DAY_OF_MONTH = 5_i32
  end
  enum UCalendarDaysOfWeek
    UCAL_SUNDAY = 1_i32
    UCAL_MONDAY = 2_i32
    UCAL_TUESDAY = 3_i32
    UCAL_WEDNESDAY = 4_i32
    UCAL_THURSDAY = 5_i32
    UCAL_FRIDAY = 6_i32
    UCAL_SATURDAY = 7_i32
  end
  enum UCalendarMonths
    UCAL_JANUARY = 0_i32
    UCAL_FEBRUARY = 1_i32
    UCAL_MARCH = 2_i32
    UCAL_APRIL = 3_i32
    UCAL_MAY = 4_i32
    UCAL_JUNE = 5_i32
    UCAL_JULY = 6_i32
    UCAL_AUGUST = 7_i32
    UCAL_SEPTEMBER = 8_i32
    UCAL_OCTOBER = 9_i32
    UCAL_NOVEMBER = 10_i32
    UCAL_DECEMBER = 11_i32
    UCAL_UNDECIMBER = 12_i32
  end
  enum UCalendarAMPMs
    UCAL_AM = 0_i32
    UCAL_PM = 1_i32
  end
  enum USystemTimeZoneType
    UCAL_ZONE_TYPE_ANY = 0_i32
    UCAL_ZONE_TYPE_CANONICAL = 1_i32
    UCAL_ZONE_TYPE_CANONICAL_LOCATION = 2_i32
  end
  enum UCalendarDisplayNameType
    UCAL_STANDARD = 0_i32
    UCAL_SHORT_STANDARD = 1_i32
    UCAL_DST = 2_i32
    UCAL_SHORT_DST = 3_i32
  end
  enum UCalendarAttribute
    UCAL_LENIENT = 0_i32
    UCAL_FIRST_DAY_OF_WEEK = 1_i32
    UCAL_MINIMAL_DAYS_IN_FIRST_WEEK = 2_i32
    UCAL_REPEATED_WALL_TIME = 3_i32
    UCAL_SKIPPED_WALL_TIME = 4_i32
  end
  enum UCalendarWallTimeOption
    UCAL_WALLTIME_LAST = 0_i32
    UCAL_WALLTIME_FIRST = 1_i32
    UCAL_WALLTIME_NEXT_VALID = 2_i32
  end
  enum UCalendarLimitType
    UCAL_MINIMUM = 0_i32
    UCAL_MAXIMUM = 1_i32
    UCAL_GREATEST_MINIMUM = 2_i32
    UCAL_LEAST_MAXIMUM = 3_i32
    UCAL_ACTUAL_MINIMUM = 4_i32
    UCAL_ACTUAL_MAXIMUM = 5_i32
  end
  enum UCalendarWeekdayType
    UCAL_WEEKDAY = 0_i32
    UCAL_WEEKEND = 1_i32
    UCAL_WEEKEND_ONSET = 2_i32
    UCAL_WEEKEND_CEASE = 3_i32
  end
  enum UTimeZoneTransitionType
    UCAL_TZ_TRANSITION_NEXT = 0_i32
    UCAL_TZ_TRANSITION_NEXT_INCLUSIVE = 1_i32
    UCAL_TZ_TRANSITION_PREVIOUS = 2_i32
    UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE = 3_i32
  end
  enum UCollationResult
    UCOL_EQUAL = 0_i32
    UCOL_GREATER = 1_i32
    UCOL_LESS = -1_i32
  end
  enum UColAttributeValue
    UCOL_DEFAULT = -1_i32
    UCOL_PRIMARY = 0_i32
    UCOL_SECONDARY = 1_i32
    UCOL_TERTIARY = 2_i32
    UCOL_DEFAULT_STRENGTH = 2_i32
    UCOL_CE_STRENGTH_LIMIT = 3_i32
    UCOL_QUATERNARY = 3_i32
    UCOL_IDENTICAL = 15_i32
    UCOL_STRENGTH_LIMIT = 16_i32
    UCOL_OFF = 16_i32
    UCOL_ON = 17_i32
    UCOL_SHIFTED = 20_i32
    UCOL_NON_IGNORABLE = 21_i32
    UCOL_LOWER_FIRST = 24_i32
    UCOL_UPPER_FIRST = 25_i32
  end
  enum UColReorderCode
    UCOL_REORDER_CODE_DEFAULT = -1_i32
    UCOL_REORDER_CODE_NONE = 103_i32
    UCOL_REORDER_CODE_OTHERS = 103_i32
    UCOL_REORDER_CODE_SPACE = 4096_i32
    UCOL_REORDER_CODE_FIRST = 4096_i32
    UCOL_REORDER_CODE_PUNCTUATION = 4097_i32
    UCOL_REORDER_CODE_SYMBOL = 4098_i32
    UCOL_REORDER_CODE_CURRENCY = 4099_i32
    UCOL_REORDER_CODE_DIGIT = 4100_i32
  end
  enum UColAttribute
    UCOL_FRENCH_COLLATION = 0_i32
    UCOL_ALTERNATE_HANDLING = 1_i32
    UCOL_CASE_FIRST = 2_i32
    UCOL_CASE_LEVEL = 3_i32
    UCOL_NORMALIZATION_MODE = 4_i32
    UCOL_DECOMPOSITION_MODE = 4_i32
    UCOL_STRENGTH = 5_i32
    UCOL_NUMERIC_COLLATION = 7_i32
    UCOL_ATTRIBUTE_COUNT = 8_i32
  end
  enum UColRuleOption
    UCOL_TAILORING_ONLY = 0_i32
    UCOL_FULL_RULES = 1_i32
  end
  enum UColBoundMode
    UCOL_BOUND_LOWER = 0_i32
    UCOL_BOUND_UPPER = 1_i32
    UCOL_BOUND_UPPER_LONG = 2_i32
  end
  enum UFormattableType
    UFMT_DATE = 0_i32
    UFMT_DOUBLE = 1_i32
    UFMT_LONG = 2_i32
    UFMT_STRING = 3_i32
    UFMT_ARRAY = 4_i32
    UFMT_INT64 = 5_i32
    UFMT_OBJECT = 6_i32
  end
  enum UFieldCategory
    UFIELD_CATEGORY_UNDEFINED = 0_i32
    UFIELD_CATEGORY_DATE = 1_i32
    UFIELD_CATEGORY_NUMBER = 2_i32
    UFIELD_CATEGORY_LIST = 3_i32
    UFIELD_CATEGORY_RELATIVE_DATETIME = 4_i32
    UFIELD_CATEGORY_DATE_INTERVAL = 5_i32
    UFIELD_CATEGORY_LIST_SPAN = 4099_i32
    UFIELD_CATEGORY_DATE_INTERVAL_SPAN = 4101_i32
  end
  enum UGender
    UGENDER_MALE = 0_i32
    UGENDER_FEMALE = 1_i32
    UGENDER_OTHER = 2_i32
  end
  enum UListFormatterField
    ULISTFMT_LITERAL_FIELD = 0_i32
    ULISTFMT_ELEMENT_FIELD = 1_i32
  end
  enum UListFormatterType
    ULISTFMT_TYPE_AND = 0_i32
    ULISTFMT_TYPE_OR = 1_i32
    ULISTFMT_TYPE_UNITS = 2_i32
  end
  enum UListFormatterWidth
    ULISTFMT_WIDTH_WIDE = 0_i32
    ULISTFMT_WIDTH_SHORT = 1_i32
    ULISTFMT_WIDTH_NARROW = 2_i32
  end
  enum ULocaleDataExemplarSetType
    ULOCDATA_ES_STANDARD = 0_i32
    ULOCDATA_ES_AUXILIARY = 1_i32
    ULOCDATA_ES_INDEX = 2_i32
    ULOCDATA_ES_PUNCTUATION = 3_i32
  end
  enum ULocaleDataDelimiterType
    ULOCDATA_QUOTATION_START = 0_i32
    ULOCDATA_QUOTATION_END = 1_i32
    ULOCDATA_ALT_QUOTATION_START = 2_i32
    ULOCDATA_ALT_QUOTATION_END = 3_i32
  end
  enum UMeasurementSystem
    UMS_SI = 0_i32
    UMS_US = 1_i32
    UMS_UK = 2_i32
  end
  enum UNumberFormatStyle
    UNUM_PATTERN_DECIMAL = 0_i32
    UNUM_DECIMAL = 1_i32
    UNUM_CURRENCY = 2_i32
    UNUM_PERCENT = 3_i32
    UNUM_SCIENTIFIC = 4_i32
    UNUM_SPELLOUT = 5_i32
    UNUM_ORDINAL = 6_i32
    UNUM_DURATION = 7_i32
    UNUM_NUMBERING_SYSTEM = 8_i32
    UNUM_PATTERN_RULEBASED = 9_i32
    UNUM_CURRENCY_ISO = 10_i32
    UNUM_CURRENCY_PLURAL = 11_i32
    UNUM_CURRENCY_ACCOUNTING = 12_i32
    UNUM_CASH_CURRENCY = 13_i32
    UNUM_DECIMAL_COMPACT_SHORT = 14_i32
    UNUM_DECIMAL_COMPACT_LONG = 15_i32
    UNUM_CURRENCY_STANDARD = 16_i32
    UNUM_DEFAULT = 1_i32
    UNUM_IGNORE = 0_i32
  end
  enum UNumberFormatRoundingMode
    UNUM_ROUND_CEILING = 0_i32
    UNUM_ROUND_FLOOR = 1_i32
    UNUM_ROUND_DOWN = 2_i32
    UNUM_ROUND_UP = 3_i32
    UNUM_ROUND_HALFEVEN = 4_i32
    UNUM_ROUND_HALFDOWN = 5_i32
    UNUM_ROUND_HALFUP = 6_i32
    UNUM_ROUND_UNNECESSARY = 7_i32
  end
  enum UNumberFormatPadPosition
    UNUM_PAD_BEFORE_PREFIX = 0_i32
    UNUM_PAD_AFTER_PREFIX = 1_i32
    UNUM_PAD_BEFORE_SUFFIX = 2_i32
    UNUM_PAD_AFTER_SUFFIX = 3_i32
  end
  enum UNumberCompactStyle
    UNUM_SHORT = 0_i32
    UNUM_LONG = 1_i32
  end
  enum UCurrencySpacing
    UNUM_CURRENCY_MATCH = 0_i32
    UNUM_CURRENCY_SURROUNDING_MATCH = 1_i32
    UNUM_CURRENCY_INSERT = 2_i32
    UNUM_CURRENCY_SPACING_COUNT = 3_i32
  end
  enum UNumberFormatFields
    UNUM_INTEGER_FIELD = 0_i32
    UNUM_FRACTION_FIELD = 1_i32
    UNUM_DECIMAL_SEPARATOR_FIELD = 2_i32
    UNUM_EXPONENT_SYMBOL_FIELD = 3_i32
    UNUM_EXPONENT_SIGN_FIELD = 4_i32
    UNUM_EXPONENT_FIELD = 5_i32
    UNUM_GROUPING_SEPARATOR_FIELD = 6_i32
    UNUM_CURRENCY_FIELD = 7_i32
    UNUM_PERCENT_FIELD = 8_i32
    UNUM_PERMILL_FIELD = 9_i32
    UNUM_SIGN_FIELD = 10_i32
    UNUM_MEASURE_UNIT_FIELD = 11_i32
    UNUM_COMPACT_FIELD = 12_i32
  end
  enum UNumberFormatAttributeValue
    UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN = 0_i32
  end
  enum UNumberFormatAttribute
    UNUM_PARSE_INT_ONLY = 0_i32
    UNUM_GROUPING_USED = 1_i32
    UNUM_DECIMAL_ALWAYS_SHOWN = 2_i32
    UNUM_MAX_INTEGER_DIGITS = 3_i32
    UNUM_MIN_INTEGER_DIGITS = 4_i32
    UNUM_INTEGER_DIGITS = 5_i32
    UNUM_MAX_FRACTION_DIGITS = 6_i32
    UNUM_MIN_FRACTION_DIGITS = 7_i32
    UNUM_FRACTION_DIGITS = 8_i32
    UNUM_MULTIPLIER = 9_i32
    UNUM_GROUPING_SIZE = 10_i32
    UNUM_ROUNDING_MODE = 11_i32
    UNUM_ROUNDING_INCREMENT = 12_i32
    UNUM_FORMAT_WIDTH = 13_i32
    UNUM_PADDING_POSITION = 14_i32
    UNUM_SECONDARY_GROUPING_SIZE = 15_i32
    UNUM_SIGNIFICANT_DIGITS_USED = 16_i32
    UNUM_MIN_SIGNIFICANT_DIGITS = 17_i32
    UNUM_MAX_SIGNIFICANT_DIGITS = 18_i32
    UNUM_LENIENT_PARSE = 19_i32
    UNUM_PARSE_ALL_INPUT = 20_i32
    UNUM_SCALE = 21_i32
    UNUM_MINIMUM_GROUPING_DIGITS = 22_i32
    UNUM_CURRENCY_USAGE = 23_i32
    UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS = 4096_i32
    UNUM_PARSE_NO_EXPONENT = 4097_i32
    UNUM_PARSE_DECIMAL_MARK_REQUIRED = 4098_i32
    UNUM_PARSE_CASE_SENSITIVE = 4099_i32
    UNUM_SIGN_ALWAYS_SHOWN = 4100_i32
  end
  enum UNumberFormatTextAttribute
    UNUM_POSITIVE_PREFIX = 0_i32
    UNUM_POSITIVE_SUFFIX = 1_i32
    UNUM_NEGATIVE_PREFIX = 2_i32
    UNUM_NEGATIVE_SUFFIX = 3_i32
    UNUM_PADDING_CHARACTER = 4_i32
    UNUM_CURRENCY_CODE = 5_i32
    UNUM_DEFAULT_RULESET = 6_i32
    UNUM_PUBLIC_RULESETS = 7_i32
  end
  enum UNumberFormatSymbol
    UNUM_DECIMAL_SEPARATOR_SYMBOL = 0_i32
    UNUM_GROUPING_SEPARATOR_SYMBOL = 1_i32
    UNUM_PATTERN_SEPARATOR_SYMBOL = 2_i32
    UNUM_PERCENT_SYMBOL = 3_i32
    UNUM_ZERO_DIGIT_SYMBOL = 4_i32
    UNUM_DIGIT_SYMBOL = 5_i32
    UNUM_MINUS_SIGN_SYMBOL = 6_i32
    UNUM_PLUS_SIGN_SYMBOL = 7_i32
    UNUM_CURRENCY_SYMBOL = 8_i32
    UNUM_INTL_CURRENCY_SYMBOL = 9_i32
    UNUM_MONETARY_SEPARATOR_SYMBOL = 10_i32
    UNUM_EXPONENTIAL_SYMBOL = 11_i32
    UNUM_PERMILL_SYMBOL = 12_i32
    UNUM_PAD_ESCAPE_SYMBOL = 13_i32
    UNUM_INFINITY_SYMBOL = 14_i32
    UNUM_NAN_SYMBOL = 15_i32
    UNUM_SIGNIFICANT_DIGIT_SYMBOL = 16_i32
    UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL = 17_i32
    UNUM_ONE_DIGIT_SYMBOL = 18_i32
    UNUM_TWO_DIGIT_SYMBOL = 19_i32
    UNUM_THREE_DIGIT_SYMBOL = 20_i32
    UNUM_FOUR_DIGIT_SYMBOL = 21_i32
    UNUM_FIVE_DIGIT_SYMBOL = 22_i32
    UNUM_SIX_DIGIT_SYMBOL = 23_i32
    UNUM_SEVEN_DIGIT_SYMBOL = 24_i32
    UNUM_EIGHT_DIGIT_SYMBOL = 25_i32
    UNUM_NINE_DIGIT_SYMBOL = 26_i32
    UNUM_EXPONENT_MULTIPLICATION_SYMBOL = 27_i32
  end
  enum UDateFormatStyle
    UDAT_FULL = 0_i32
    UDAT_LONG = 1_i32
    UDAT_MEDIUM = 2_i32
    UDAT_SHORT = 3_i32
    UDAT_DEFAULT = 2_i32
    UDAT_RELATIVE = 128_i32
    UDAT_FULL_RELATIVE = 128_i32
    UDAT_LONG_RELATIVE = 129_i32
    UDAT_MEDIUM_RELATIVE = 130_i32
    UDAT_SHORT_RELATIVE = 131_i32
    UDAT_NONE = -1_i32
    UDAT_PATTERN = -2_i32
  end
  enum UDateFormatField
    UDAT_ERA_FIELD = 0_i32
    UDAT_YEAR_FIELD = 1_i32
    UDAT_MONTH_FIELD = 2_i32
    UDAT_DATE_FIELD = 3_i32
    UDAT_HOUR_OF_DAY1_FIELD = 4_i32
    UDAT_HOUR_OF_DAY0_FIELD = 5_i32
    UDAT_MINUTE_FIELD = 6_i32
    UDAT_SECOND_FIELD = 7_i32
    UDAT_FRACTIONAL_SECOND_FIELD = 8_i32
    UDAT_DAY_OF_WEEK_FIELD = 9_i32
    UDAT_DAY_OF_YEAR_FIELD = 10_i32
    UDAT_DAY_OF_WEEK_IN_MONTH_FIELD = 11_i32
    UDAT_WEEK_OF_YEAR_FIELD = 12_i32
    UDAT_WEEK_OF_MONTH_FIELD = 13_i32
    UDAT_AM_PM_FIELD = 14_i32
    UDAT_HOUR1_FIELD = 15_i32
    UDAT_HOUR0_FIELD = 16_i32
    UDAT_TIMEZONE_FIELD = 17_i32
    UDAT_YEAR_WOY_FIELD = 18_i32
    UDAT_DOW_LOCAL_FIELD = 19_i32
    UDAT_EXTENDED_YEAR_FIELD = 20_i32
    UDAT_JULIAN_DAY_FIELD = 21_i32
    UDAT_MILLISECONDS_IN_DAY_FIELD = 22_i32
    UDAT_TIMEZONE_RFC_FIELD = 23_i32
    UDAT_TIMEZONE_GENERIC_FIELD = 24_i32
    UDAT_STANDALONE_DAY_FIELD = 25_i32
    UDAT_STANDALONE_MONTH_FIELD = 26_i32
    UDAT_QUARTER_FIELD = 27_i32
    UDAT_STANDALONE_QUARTER_FIELD = 28_i32
    UDAT_TIMEZONE_SPECIAL_FIELD = 29_i32
    UDAT_YEAR_NAME_FIELD = 30_i32
    UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = 31_i32
    UDAT_TIMEZONE_ISO_FIELD = 32_i32
    UDAT_TIMEZONE_ISO_LOCAL_FIELD = 33_i32
    UDAT_AM_PM_MIDNIGHT_NOON_FIELD = 35_i32
    UDAT_FLEXIBLE_DAY_PERIOD_FIELD = 36_i32
  end
  enum UDateFormatBooleanAttribute
    UDAT_PARSE_ALLOW_WHITESPACE = 0_i32
    UDAT_PARSE_ALLOW_NUMERIC = 1_i32
    UDAT_PARSE_PARTIAL_LITERAL_MATCH = 2_i32
    UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = 3_i32
    UDAT_BOOLEAN_ATTRIBUTE_COUNT = 4_i32
  end
  enum UDateFormatSymbolType
    UDAT_ERAS = 0_i32
    UDAT_MONTHS = 1_i32
    UDAT_SHORT_MONTHS = 2_i32
    UDAT_WEEKDAYS = 3_i32
    UDAT_SHORT_WEEKDAYS = 4_i32
    UDAT_AM_PMS = 5_i32
    UDAT_LOCALIZED_CHARS = 6_i32
    UDAT_ERA_NAMES = 7_i32
    UDAT_NARROW_MONTHS = 8_i32
    UDAT_NARROW_WEEKDAYS = 9_i32
    UDAT_STANDALONE_MONTHS = 10_i32
    UDAT_STANDALONE_SHORT_MONTHS = 11_i32
    UDAT_STANDALONE_NARROW_MONTHS = 12_i32
    UDAT_STANDALONE_WEEKDAYS = 13_i32
    UDAT_STANDALONE_SHORT_WEEKDAYS = 14_i32
    UDAT_STANDALONE_NARROW_WEEKDAYS = 15_i32
    UDAT_QUARTERS = 16_i32
    UDAT_SHORT_QUARTERS = 17_i32
    UDAT_STANDALONE_QUARTERS = 18_i32
    UDAT_STANDALONE_SHORT_QUARTERS = 19_i32
    UDAT_SHORTER_WEEKDAYS = 20_i32
    UDAT_STANDALONE_SHORTER_WEEKDAYS = 21_i32
    UDAT_CYCLIC_YEARS_WIDE = 22_i32
    UDAT_CYCLIC_YEARS_ABBREVIATED = 23_i32
    UDAT_CYCLIC_YEARS_NARROW = 24_i32
    UDAT_ZODIAC_NAMES_WIDE = 25_i32
    UDAT_ZODIAC_NAMES_ABBREVIATED = 26_i32
    UDAT_ZODIAC_NAMES_NARROW = 27_i32
  end
  enum UDateTimePatternField
    UDATPG_ERA_FIELD = 0_i32
    UDATPG_YEAR_FIELD = 1_i32
    UDATPG_QUARTER_FIELD = 2_i32
    UDATPG_MONTH_FIELD = 3_i32
    UDATPG_WEEK_OF_YEAR_FIELD = 4_i32
    UDATPG_WEEK_OF_MONTH_FIELD = 5_i32
    UDATPG_WEEKDAY_FIELD = 6_i32
    UDATPG_DAY_OF_YEAR_FIELD = 7_i32
    UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD = 8_i32
    UDATPG_DAY_FIELD = 9_i32
    UDATPG_DAYPERIOD_FIELD = 10_i32
    UDATPG_HOUR_FIELD = 11_i32
    UDATPG_MINUTE_FIELD = 12_i32
    UDATPG_SECOND_FIELD = 13_i32
    UDATPG_FRACTIONAL_SECOND_FIELD = 14_i32
    UDATPG_ZONE_FIELD = 15_i32
    UDATPG_FIELD_COUNT = 16_i32
  end
  enum UDateTimePGDisplayWidth
    UDATPG_WIDE = 0_i32
    UDATPG_ABBREVIATED = 1_i32
    UDATPG_NARROW = 2_i32
  end
  enum UDateTimePatternMatchOptions
    UDATPG_MATCH_NO_OPTIONS = 0_i32
    UDATPG_MATCH_HOUR_FIELD_LENGTH = 2048_i32
    UDATPG_MATCH_ALL_FIELDS_LENGTH = 65535_i32
  end
  enum UDateTimePatternConflict
    UDATPG_NO_CONFLICT = 0_i32
    UDATPG_BASE_CONFLICT = 1_i32
    UDATPG_CONFLICT = 2_i32
  end
  enum UNumberUnitWidth
    UNUM_UNIT_WIDTH_NARROW = 0_i32
    UNUM_UNIT_WIDTH_SHORT = 1_i32
    UNUM_UNIT_WIDTH_FULL_NAME = 2_i32
    UNUM_UNIT_WIDTH_ISO_CODE = 3_i32
    UNUM_UNIT_WIDTH_HIDDEN = 4_i32
    UNUM_UNIT_WIDTH_COUNT = 5_i32
  end
  enum UNumberGroupingStrategy
    UNUM_GROUPING_OFF = 0_i32
    UNUM_GROUPING_MIN2 = 1_i32
    UNUM_GROUPING_AUTO = 2_i32
    UNUM_GROUPING_ON_ALIGNED = 3_i32
    UNUM_GROUPING_THOUSANDS = 4_i32
  end
  enum UNumberSignDisplay
    UNUM_SIGN_AUTO = 0_i32
    UNUM_SIGN_ALWAYS = 1_i32
    UNUM_SIGN_NEVER = 2_i32
    UNUM_SIGN_ACCOUNTING = 3_i32
    UNUM_SIGN_ACCOUNTING_ALWAYS = 4_i32
    UNUM_SIGN_EXCEPT_ZERO = 5_i32
    UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO = 6_i32
    UNUM_SIGN_COUNT = 7_i32
  end
  enum UNumberDecimalSeparatorDisplay
    UNUM_DECIMAL_SEPARATOR_AUTO = 0_i32
    UNUM_DECIMAL_SEPARATOR_ALWAYS = 1_i32
    UNUM_DECIMAL_SEPARATOR_COUNT = 2_i32
  end
  enum UNumberRangeCollapse
    UNUM_RANGE_COLLAPSE_AUTO = 0_i32
    UNUM_RANGE_COLLAPSE_NONE = 1_i32
    UNUM_RANGE_COLLAPSE_UNIT = 2_i32
    UNUM_RANGE_COLLAPSE_ALL = 3_i32
  end
  enum UNumberRangeIdentityFallback
    UNUM_IDENTITY_FALLBACK_SINGLE_VALUE = 0_i32
    UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE = 1_i32
    UNUM_IDENTITY_FALLBACK_APPROXIMATELY = 2_i32
    UNUM_IDENTITY_FALLBACK_RANGE = 3_i32
  end
  enum UNumberRangeIdentityResult
    UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING = 0_i32
    UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING = 1_i32
    UNUM_IDENTITY_RESULT_NOT_EQUAL = 2_i32
  end
  enum UPluralType
    UPLURAL_TYPE_CARDINAL = 0_i32
    UPLURAL_TYPE_ORDINAL = 1_i32
  end
  enum URegexpFlag
    UREGEX_CASE_INSENSITIVE = 2_i32
    UREGEX_COMMENTS = 4_i32
    UREGEX_DOTALL = 32_i32
    UREGEX_LITERAL = 16_i32
    UREGEX_MULTILINE = 8_i32
    UREGEX_UNIX_LINES = 1_i32
    UREGEX_UWORD = 256_i32
    UREGEX_ERROR_ON_UNKNOWN_ESCAPES = 512_i32
  end
  enum URegionType
    URGN_UNKNOWN = 0_i32
    URGN_TERRITORY = 1_i32
    URGN_WORLD = 2_i32
    URGN_CONTINENT = 3_i32
    URGN_SUBCONTINENT = 4_i32
    URGN_GROUPING = 5_i32
    URGN_DEPRECATED = 6_i32
  end
  enum UDateRelativeDateTimeFormatterStyle
    UDAT_STYLE_LONG = 0_i32
    UDAT_STYLE_SHORT = 1_i32
    UDAT_STYLE_NARROW = 2_i32
  end
  enum URelativeDateTimeUnit
    UDAT_REL_UNIT_YEAR = 0_i32
    UDAT_REL_UNIT_QUARTER = 1_i32
    UDAT_REL_UNIT_MONTH = 2_i32
    UDAT_REL_UNIT_WEEK = 3_i32
    UDAT_REL_UNIT_DAY = 4_i32
    UDAT_REL_UNIT_HOUR = 5_i32
    UDAT_REL_UNIT_MINUTE = 6_i32
    UDAT_REL_UNIT_SECOND = 7_i32
    UDAT_REL_UNIT_SUNDAY = 8_i32
    UDAT_REL_UNIT_MONDAY = 9_i32
    UDAT_REL_UNIT_TUESDAY = 10_i32
    UDAT_REL_UNIT_WEDNESDAY = 11_i32
    UDAT_REL_UNIT_THURSDAY = 12_i32
    UDAT_REL_UNIT_FRIDAY = 13_i32
    UDAT_REL_UNIT_SATURDAY = 14_i32
  end
  enum URelativeDateTimeFormatterField
    UDAT_REL_LITERAL_FIELD = 0_i32
    UDAT_REL_NUMERIC_FIELD = 1_i32
  end
  enum USearchAttribute
    USEARCH_OVERLAP = 0_i32
    USEARCH_ELEMENT_COMPARISON = 2_i32
  end
  enum USearchAttributeValue
    USEARCH_DEFAULT = -1_i32
    USEARCH_OFF = 0_i32
    USEARCH_ON = 1_i32
    USEARCH_STANDARD_ELEMENT_COMPARISON = 2_i32
    USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD = 3_i32
    USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD = 4_i32
  end
  enum USpoofChecks
    USPOOF_SINGLE_SCRIPT_CONFUSABLE = 1_i32
    USPOOF_MIXED_SCRIPT_CONFUSABLE = 2_i32
    USPOOF_WHOLE_SCRIPT_CONFUSABLE = 4_i32
    USPOOF_CONFUSABLE = 7_i32
    USPOOF_RESTRICTION_LEVEL = 16_i32
    USPOOF_INVISIBLE = 32_i32
    USPOOF_CHAR_LIMIT = 64_i32
    USPOOF_MIXED_NUMBERS = 128_i32
    USPOOF_HIDDEN_OVERLAY = 256_i32
    USPOOF_ALL_CHECKS = 65535_i32
    USPOOF_AUX_INFO = 1073741824_i32
  end
  enum URestrictionLevel
    USPOOF_ASCII = 268435456_i32
    USPOOF_SINGLE_SCRIPT_RESTRICTIVE = 536870912_i32
    USPOOF_HIGHLY_RESTRICTIVE = 805306368_i32
    USPOOF_MODERATELY_RESTRICTIVE = 1073741824_i32
    USPOOF_MINIMALLY_RESTRICTIVE = 1342177280_i32
    USPOOF_UNRESTRICTIVE = 1610612736_i32
    USPOOF_RESTRICTION_LEVEL_MASK = 2130706432_i32
  end
  enum UDateTimeScale
    UDTS_JAVA_TIME = 0_i32
    UDTS_UNIX_TIME = 1_i32
    UDTS_ICU4C_TIME = 2_i32
    UDTS_WINDOWS_FILE_TIME = 3_i32
    UDTS_DOTNET_DATE_TIME = 4_i32
    UDTS_MAC_OLD_TIME = 5_i32
    UDTS_MAC_TIME = 6_i32
    UDTS_EXCEL_TIME = 7_i32
    UDTS_DB2_TIME = 8_i32
    UDTS_UNIX_MICROSECONDS_TIME = 9_i32
  end
  enum UTimeScaleValue
    UTSV_UNITS_VALUE = 0_i32
    UTSV_EPOCH_OFFSET_VALUE = 1_i32
    UTSV_FROM_MIN_VALUE = 2_i32
    UTSV_FROM_MAX_VALUE = 3_i32
    UTSV_TO_MIN_VALUE = 4_i32
    UTSV_TO_MAX_VALUE = 5_i32
  end
  enum UTransDirection
    UTRANS_FORWARD = 0_i32
    UTRANS_REVERSE = 1_i32
  end
  enum UStringTrieBuildOption
    USTRINGTRIE_BUILD_FAST = 0_i32
    USTRINGTRIE_BUILD_SMALL = 1_i32
  end
  enum UMessagePatternApostropheMode
    UMSGPAT_APOS_DOUBLE_OPTIONAL = 0_i32
    UMSGPAT_APOS_DOUBLE_REQUIRED = 1_i32
  end
  enum UMessagePatternPartType
    UMSGPAT_PART_TYPE_MSG_START = 0_i32
    UMSGPAT_PART_TYPE_MSG_LIMIT = 1_i32
    UMSGPAT_PART_TYPE_SKIP_SYNTAX = 2_i32
    UMSGPAT_PART_TYPE_INSERT_CHAR = 3_i32
    UMSGPAT_PART_TYPE_REPLACE_NUMBER = 4_i32
    UMSGPAT_PART_TYPE_ARG_START = 5_i32
    UMSGPAT_PART_TYPE_ARG_LIMIT = 6_i32
    UMSGPAT_PART_TYPE_ARG_NUMBER = 7_i32
    UMSGPAT_PART_TYPE_ARG_NAME = 8_i32
    UMSGPAT_PART_TYPE_ARG_TYPE = 9_i32
    UMSGPAT_PART_TYPE_ARG_STYLE = 10_i32
    UMSGPAT_PART_TYPE_ARG_SELECTOR = 11_i32
    UMSGPAT_PART_TYPE_ARG_INT = 12_i32
    UMSGPAT_PART_TYPE_ARG_DOUBLE = 13_i32
  end
  enum UMessagePatternArgType
    UMSGPAT_ARG_TYPE_NONE = 0_i32
    UMSGPAT_ARG_TYPE_SIMPLE = 1_i32
    UMSGPAT_ARG_TYPE_CHOICE = 2_i32
    UMSGPAT_ARG_TYPE_PLURAL = 3_i32
    UMSGPAT_ARG_TYPE_SELECT = 4_i32
    UMSGPAT_ARG_TYPE_SELECTORDINAL = 5_i32
  end
  enum UAlphabeticIndexLabelType
    U_ALPHAINDEX_NORMAL = 0_i32
    U_ALPHAINDEX_UNDERFLOW = 1_i32
    U_ALPHAINDEX_INFLOW = 2_i32
    U_ALPHAINDEX_OVERFLOW = 3_i32
  end
  enum UTimeZoneNameType
    UTZNM_UNKNOWN = 0_i32
    UTZNM_LONG_GENERIC = 1_i32
    UTZNM_LONG_STANDARD = 2_i32
    UTZNM_LONG_DAYLIGHT = 4_i32
    UTZNM_SHORT_GENERIC = 8_i32
    UTZNM_SHORT_STANDARD = 16_i32
    UTZNM_SHORT_DAYLIGHT = 32_i32
    UTZNM_EXEMPLAR_LOCATION = 64_i32
  end
  enum UTimeZoneFormatStyle
    UTZFMT_STYLE_GENERIC_LOCATION = 0_i32
    UTZFMT_STYLE_GENERIC_LONG = 1_i32
    UTZFMT_STYLE_GENERIC_SHORT = 2_i32
    UTZFMT_STYLE_SPECIFIC_LONG = 3_i32
    UTZFMT_STYLE_SPECIFIC_SHORT = 4_i32
    UTZFMT_STYLE_LOCALIZED_GMT = 5_i32
    UTZFMT_STYLE_LOCALIZED_GMT_SHORT = 6_i32
    UTZFMT_STYLE_ISO_BASIC_SHORT = 7_i32
    UTZFMT_STYLE_ISO_BASIC_LOCAL_SHORT = 8_i32
    UTZFMT_STYLE_ISO_BASIC_FIXED = 9_i32
    UTZFMT_STYLE_ISO_BASIC_LOCAL_FIXED = 10_i32
    UTZFMT_STYLE_ISO_BASIC_FULL = 11_i32
    UTZFMT_STYLE_ISO_BASIC_LOCAL_FULL = 12_i32
    UTZFMT_STYLE_ISO_EXTENDED_FIXED = 13_i32
    UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FIXED = 14_i32
    UTZFMT_STYLE_ISO_EXTENDED_FULL = 15_i32
    UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FULL = 16_i32
    UTZFMT_STYLE_ZONE_ID = 17_i32
    UTZFMT_STYLE_ZONE_ID_SHORT = 18_i32
    UTZFMT_STYLE_EXEMPLAR_LOCATION = 19_i32
  end
  enum UTimeZoneFormatGMTOffsetPatternType
    UTZFMT_PAT_POSITIVE_HM = 0_i32
    UTZFMT_PAT_POSITIVE_HMS = 1_i32
    UTZFMT_PAT_NEGATIVE_HM = 2_i32
    UTZFMT_PAT_NEGATIVE_HMS = 3_i32
    UTZFMT_PAT_POSITIVE_H = 4_i32
    UTZFMT_PAT_NEGATIVE_H = 5_i32
    UTZFMT_PAT_COUNT = 6_i32
  end
  enum UTimeZoneFormatTimeType
    UTZFMT_TIME_TYPE_UNKNOWN = 0_i32
    UTZFMT_TIME_TYPE_STANDARD = 1_i32
    UTZFMT_TIME_TYPE_DAYLIGHT = 2_i32
  end
  enum UTimeZoneFormatParseOption
    UTZFMT_PARSE_OPTION_NONE = 0_i32
    UTZFMT_PARSE_OPTION_ALL_STYLES = 1_i32
    UTZFMT_PARSE_OPTION_TZ_DATABASE_ABBREVIATIONS = 2_i32
  end
  enum UMeasureFormatWidth
    UMEASFMT_WIDTH_WIDE = 0_i32
    UMEASFMT_WIDTH_SHORT = 1_i32
    UMEASFMT_WIDTH_NARROW = 2_i32
    UMEASFMT_WIDTH_NUMERIC = 3_i32
    UMEASFMT_WIDTH_COUNT = 4_i32
  end
  enum UDateRelativeUnit
    UDAT_RELATIVE_SECONDS = 0_i32
    UDAT_RELATIVE_MINUTES = 1_i32
    UDAT_RELATIVE_HOURS = 2_i32
    UDAT_RELATIVE_DAYS = 3_i32
    UDAT_RELATIVE_WEEKS = 4_i32
    UDAT_RELATIVE_MONTHS = 5_i32
    UDAT_RELATIVE_YEARS = 6_i32
    UDAT_RELATIVE_UNIT_COUNT = 7_i32
  end
  enum UDateAbsoluteUnit
    UDAT_ABSOLUTE_SUNDAY = 0_i32
    UDAT_ABSOLUTE_MONDAY = 1_i32
    UDAT_ABSOLUTE_TUESDAY = 2_i32
    UDAT_ABSOLUTE_WEDNESDAY = 3_i32
    UDAT_ABSOLUTE_THURSDAY = 4_i32
    UDAT_ABSOLUTE_FRIDAY = 5_i32
    UDAT_ABSOLUTE_SATURDAY = 6_i32
    UDAT_ABSOLUTE_DAY = 7_i32
    UDAT_ABSOLUTE_WEEK = 8_i32
    UDAT_ABSOLUTE_MONTH = 9_i32
    UDAT_ABSOLUTE_YEAR = 10_i32
    UDAT_ABSOLUTE_NOW = 11_i32
    UDAT_ABSOLUTE_UNIT_COUNT = 12_i32
  end
  enum UDateDirection
    UDAT_DIRECTION_LAST_2 = 0_i32
    UDAT_DIRECTION_LAST = 1_i32
    UDAT_DIRECTION_THIS = 2_i32
    UDAT_DIRECTION_NEXT = 3_i32
    UDAT_DIRECTION_NEXT_2 = 4_i32
    UDAT_DIRECTION_PLAIN = 5_i32
    UDAT_DIRECTION_COUNT = 6_i32
  end
  enum MIMECONTF
    MIMECONTF_MAILNEWS = 1_i32
    MIMECONTF_BROWSER = 2_i32
    MIMECONTF_MINIMAL = 4_i32
    MIMECONTF_IMPORT = 8_i32
    MIMECONTF_SAVABLE_MAILNEWS = 256_i32
    MIMECONTF_SAVABLE_BROWSER = 512_i32
    MIMECONTF_EXPORT = 1024_i32
    MIMECONTF_PRIVCONVERTER = 65536_i32
    MIMECONTF_VALID = 131072_i32
    MIMECONTF_VALID_NLS = 262144_i32
    MIMECONTF_MIME_IE4 = 268435456_i32
    MIMECONTF_MIME_LATEST = 536870912_i32
    MIMECONTF_MIME_REGISTRY = 1073741824_i32
  end
  enum SCRIPTCONTF
    Siddefault = 0_i32
    Sidmerge = 1_i32
    Sidasciisym = 2_i32
    Sidasciilatin = 3_i32
    Sidlatin = 4_i32
    Sidgreek = 5_i32
    Sidcyrillic = 6_i32
    Sidarmenian = 7_i32
    Sidhebrew = 8_i32
    Sidarabic = 9_i32
    Siddevanagari = 10_i32
    Sidbengali = 11_i32
    Sidgurmukhi = 12_i32
    Sidgujarati = 13_i32
    Sidoriya = 14_i32
    Sidtamil = 15_i32
    Sidtelugu = 16_i32
    Sidkannada = 17_i32
    Sidmalayalam = 18_i32
    Sidthai = 19_i32
    Sidlao = 20_i32
    Sidtibetan = 21_i32
    Sidgeorgian = 22_i32
    Sidhangul = 23_i32
    Sidkana = 24_i32
    Sidbopomofo = 25_i32
    Sidhan = 26_i32
    Sidethiopic = 27_i32
    Sidcansyllabic = 28_i32
    Sidcherokee = 29_i32
    Sidyi = 30_i32
    Sidbraille = 31_i32
    Sidrunic = 32_i32
    Sidogham = 33_i32
    Sidsinhala = 34_i32
    Sidsyriac = 35_i32
    Sidburmese = 36_i32
    Sidkhmer = 37_i32
    Sidthaana = 38_i32
    Sidmongolian = 39_i32
    Siduserdefined = 40_i32
    Sidlim = 41_i32
    Sidfefirst = 23_i32
    Sidfelast = 26_i32
  end
  enum MLCONVCHARF
    MLCONVCHARF_AUTODETECT = 1_i32
    MLCONVCHARF_ENTITIZE = 2_i32
    MLCONVCHARF_NCR_ENTITIZE = 2_i32
    MLCONVCHARF_NAME_ENTITIZE = 4_i32
    MLCONVCHARF_USEDEFCHAR = 8_i32
    MLCONVCHARF_NOBESTFITCHARS = 16_i32
    MLCONVCHARF_DETECTJPN = 32_i32
  end
  enum MLCPF
    MLDETECTF_MAILNEWS = 1_i32
    MLDETECTF_BROWSER = 2_i32
    MLDETECTF_VALID = 4_i32
    MLDETECTF_VALID_NLS = 8_i32
    MLDETECTF_PRESERVE_ORDER = 16_i32
    MLDETECTF_PREFERRED_ONLY = 32_i32
    MLDETECTF_FILTER_SPECIALCHAR = 64_i32
    MLDETECTF_EURO_UTF8 = 128_i32
  end
  enum MLDETECTCP
    MLDETECTCP_NONE = 0_i32
    MLDETECTCP_7BIT = 1_i32
    MLDETECTCP_8BIT = 2_i32
    MLDETECTCP_DBCS = 4_i32
    MLDETECTCP_HTML = 8_i32
    MLDETECTCP_NUMBER = 16_i32
  end
  enum SCRIPTFONTCONTF
    SCRIPTCONTF_FIXED_FONT = 1_i32
    SCRIPTCONTF_PROPORTIONAL_FONT = 2_i32
    SCRIPTCONTF_SCRIPT_USER = 65536_i32
    SCRIPTCONTF_SCRIPT_HIDE = 131072_i32
    SCRIPTCONTF_SCRIPT_SYSTEM = 262144_i32
  end
  enum MLSTR_FLAGS
    MLSTR_READ = 1_i32
    MLSTR_WRITE = 2_i32
  end

  @[Extern]
  record FONTSIGNATURE,
    fsUsb : UInt32[4],
    fsCsb : UInt32[2]

  @[Extern]
  record CHARSETINFO,
    ciCharset : UInt32,
    ciACP : UInt32,
    fs : Win32cr::Globalization::FONTSIGNATURE

  @[Extern]
  record LOCALESIGNATURE,
    lsUsb : UInt32[4],
    lsCsbDefault : UInt32[2],
    lsCsbSupported : UInt32[2]

  @[Extern]
  record NEWTEXTMETRICEXA,
    ntmTm : Win32cr::Graphics::Gdi::NEWTEXTMETRICA,
    ntmFontSig : Win32cr::Globalization::FONTSIGNATURE

  @[Extern]
  record NEWTEXTMETRICEXW,
    ntmTm : Win32cr::Graphics::Gdi::NEWTEXTMETRICW,
    ntmFontSig : Win32cr::Globalization::FONTSIGNATURE

  @[Extern]
  record ENUMTEXTMETRICA,
    etmNewTextMetricEx : Win32cr::Globalization::NEWTEXTMETRICEXA,
    etmAxesList : Win32cr::Graphics::Gdi::AXESLISTA

  @[Extern]
  record ENUMTEXTMETRICW,
    etmNewTextMetricEx : Win32cr::Globalization::NEWTEXTMETRICEXW,
    etmAxesList : Win32cr::Graphics::Gdi::AXESLISTW

  @[Extern]
  record CPINFO,
    max_char_size : UInt32,
    default_char : UInt8[2],
    lead_byte : UInt8[12]

  @[Extern]
  record CPINFOEXA,
    max_char_size : UInt32,
    default_char : UInt8[2],
    lead_byte : UInt8[12],
    unicode_default_char : UInt16,
    code_page : UInt32,
    code_page_name : Win32cr::Foundation::CHAR[260]

  @[Extern]
  record CPINFOEXW,
    max_char_size : UInt32,
    default_char : UInt8[2],
    lead_byte : UInt8[12],
    unicode_default_char : UInt16,
    code_page : UInt32,
    code_page_name : UInt16[260]

  @[Extern]
  record NUMBERFMTA,
    num_digits : UInt32,
    leading_zero : UInt32,
    grouping : UInt32,
    lpDecimalSep : Win32cr::Foundation::PSTR,
    lpThousandSep : Win32cr::Foundation::PSTR,
    negative_order : UInt32

  @[Extern]
  record NUMBERFMTW,
    num_digits : UInt32,
    leading_zero : UInt32,
    grouping : UInt32,
    lpDecimalSep : Win32cr::Foundation::PWSTR,
    lpThousandSep : Win32cr::Foundation::PWSTR,
    negative_order : UInt32

  @[Extern]
  record CURRENCYFMTA,
    num_digits : UInt32,
    leading_zero : UInt32,
    grouping : UInt32,
    lpDecimalSep : Win32cr::Foundation::PSTR,
    lpThousandSep : Win32cr::Foundation::PSTR,
    negative_order : UInt32,
    positive_order : UInt32,
    lpCurrencySymbol : Win32cr::Foundation::PSTR

  @[Extern]
  record CURRENCYFMTW,
    num_digits : UInt32,
    leading_zero : UInt32,
    grouping : UInt32,
    lpDecimalSep : Win32cr::Foundation::PWSTR,
    lpThousandSep : Win32cr::Foundation::PWSTR,
    negative_order : UInt32,
    positive_order : UInt32,
    lpCurrencySymbol : Win32cr::Foundation::PWSTR

  @[Extern]
  record NLSVERSIONINFO,
    dwNLSVersionInfoSize : UInt32,
    dwNLSVersion : UInt32,
    dwDefinedVersion : UInt32,
    dwEffectiveId : UInt32,
    guidCustomVersion : LibC::GUID

  @[Extern]
  record NLSVERSIONINFOEX,
    dwNLSVersionInfoSize : UInt32,
    dwNLSVersion : UInt32,
    dwDefinedVersion : UInt32,
    dwEffectiveId : UInt32,
    guidCustomVersion : LibC::GUID

  @[Extern]
  record FILEMUIINFO,
    dwSize : UInt32,
    dwVersion : UInt32,
    dwFileType : UInt32,
    pChecksum : UInt8[16],
    pServiceChecksum : UInt8[16],
    dwLanguageNameOffset : UInt32,
    dwTypeIDMainSize : UInt32,
    dwTypeIDMainOffset : UInt32,
    dwTypeNameMainOffset : UInt32,
    dwTypeIDMUISize : UInt32,
    dwTypeIDMUIOffset : UInt32,
    dwTypeNameMUIOffset : UInt32,
    abBuffer : UInt8[8]

  @[Extern]
  record MAPPING_SERVICE_INFO,
    size : LibC::UIntPtrT,
    pszCopyright : Win32cr::Foundation::PWSTR,
    wMajorVersion : UInt16,
    wMinorVersion : UInt16,
    wBuildVersion : UInt16,
    wStepVersion : UInt16,
    dwInputContentTypesCount : UInt32,
    prgInputContentTypes : Win32cr::Foundation::PWSTR*,
    dwOutputContentTypesCount : UInt32,
    prgOutputContentTypes : Win32cr::Foundation::PWSTR*,
    dwInputLanguagesCount : UInt32,
    prgInputLanguages : Win32cr::Foundation::PWSTR*,
    dwOutputLanguagesCount : UInt32,
    prgOutputLanguages : Win32cr::Foundation::PWSTR*,
    dwInputScriptsCount : UInt32,
    prgInputScripts : Win32cr::Foundation::PWSTR*,
    dwOutputScriptsCount : UInt32,
    prgOutputScripts : Win32cr::Foundation::PWSTR*,
    guid : LibC::GUID,
    pszCategory : Win32cr::Foundation::PWSTR,
    pszDescription : Win32cr::Foundation::PWSTR,
    dwPrivateDataSize : UInt32,
    pPrivateData : Void*,
    pContext : Void*,
    _bitfield : UInt32

  @[Extern]
  record MAPPING_ENUM_OPTIONS,
    size : LibC::UIntPtrT,
    pszCategory : Win32cr::Foundation::PWSTR,
    pszInputLanguage : Win32cr::Foundation::PWSTR,
    pszOutputLanguage : Win32cr::Foundation::PWSTR,
    pszInputScript : Win32cr::Foundation::PWSTR,
    pszOutputScript : Win32cr::Foundation::PWSTR,
    pszInputContentType : Win32cr::Foundation::PWSTR,
    pszOutputContentType : Win32cr::Foundation::PWSTR,
    pGuid : LibC::GUID*,
    _bitfield : UInt32

  @[Extern]
  record MAPPING_OPTIONS,
    size : LibC::UIntPtrT,
    pszInputLanguage : Win32cr::Foundation::PWSTR,
    pszOutputLanguage : Win32cr::Foundation::PWSTR,
    pszInputScript : Win32cr::Foundation::PWSTR,
    pszOutputScript : Win32cr::Foundation::PWSTR,
    pszInputContentType : Win32cr::Foundation::PWSTR,
    pszOutputContentType : Win32cr::Foundation::PWSTR,
    pszUILanguage : Win32cr::Foundation::PWSTR,
    pfnRecognizeCallback : Win32cr::Globalization::PFN_MAPPINGCALLBACKPROC,
    pRecognizeCallerData : Void*,
    dwRecognizeCallerDataSize : UInt32,
    pfnActionCallback : Win32cr::Globalization::PFN_MAPPINGCALLBACKPROC,
    pActionCallerData : Void*,
    dwActionCallerDataSize : UInt32,
    dwServiceFlag : UInt32,
    _bitfield : UInt32

  @[Extern]
  record MAPPING_DATA_RANGE,
    dwStartIndex : UInt32,
    dwEndIndex : UInt32,
    pszDescription : Win32cr::Foundation::PWSTR,
    dwDescriptionLength : UInt32,
    pData : Void*,
    dwDataSize : UInt32,
    pszContentType : Win32cr::Foundation::PWSTR,
    prgActionIds : Win32cr::Foundation::PWSTR*,
    dwActionsCount : UInt32,
    prgActionDisplayNames : Win32cr::Foundation::PWSTR*

  @[Extern]
  record MAPPING_PROPERTY_BAG,
    size : LibC::UIntPtrT,
    prgResultRanges : Win32cr::Globalization::MAPPING_DATA_RANGE*,
    dwRangesCount : UInt32,
    pServiceData : Void*,
    dwServiceDataSize : UInt32,
    pCallerData : Void*,
    dwCallerDataSize : UInt32,
    pContext : Void*

  @[Extern]
  record SCRIPT_CONTROL,
    _bitfield : UInt32

  @[Extern]
  record SCRIPT_STATE,
    _bitfield : UInt16

  @[Extern]
  record SCRIPT_ANALYSIS,
    _bitfield : UInt16,
    s : Win32cr::Globalization::SCRIPT_STATE

  @[Extern]
  record SCRIPT_ITEM,
    iCharPos : Int32,
    a : Win32cr::Globalization::SCRIPT_ANALYSIS

  @[Extern]
  record SCRIPT_VISATTR,
    _bitfield : UInt16

  @[Extern]
  record GOFFSET,
    du : Int32,
    dv : Int32

  @[Extern]
  record SCRIPT_LOGATTR,
    _bitfield : UInt8

  @[Extern]
  record SCRIPT_PROPERTIES,
    _bitfield1 : UInt32,
    _bitfield2 : UInt32

  @[Extern]
  record SCRIPT_FONTPROPERTIES,
    cBytes : Int32,
    wgBlank : UInt16,
    wgDefault : UInt16,
    wgInvalid : UInt16,
    wgKashida : UInt16,
    iKashidaWidth : Int32

  @[Extern]
  record SCRIPT_TABDEF,
    cTabStops : Int32,
    iScale : Int32,
    pTabStops : Int32*,
    iTabOrigin : Int32

  @[Extern]
  record SCRIPT_DIGITSUBSTITUTE,
    _bitfield1 : UInt32,
    _bitfield2 : UInt32,
    dwReserved : UInt32

  @[Extern]
  record Opentype_feature_record,
    tagFeature : UInt32,
    lParameter : Int32

  @[Extern]
  record Textrange_properties,
    potfRecords : Win32cr::Globalization::Opentype_feature_record*,
    cotfRecords : Int32

  @[Extern]
  record Script_charprop,
    _bitfield : UInt16

  @[Extern]
  record Script_glyphprop,
    sva : Win32cr::Globalization::SCRIPT_VISATTR,
    reserved : UInt16

  @[Extern]
  record UReplaceableCallbacks,
    length : LibC::IntPtrT,
    charAt : LibC::IntPtrT,
    char32At : LibC::IntPtrT,
    replace : LibC::IntPtrT,
    extract : LibC::IntPtrT,
    copy : LibC::IntPtrT

  @[Extern]
  record UFieldPosition,
    field : Int32,
    beginIndex : Int32,
    endIndex : Int32

  @[Extern]
  record UCharIterator,
    context : Void*,
    length : Int32,
    start : Int32,
    index : Int32,
    limit : Int32,
    reservedField : Int32,
    getIndex : Win32cr::Globalization::UCharIteratorGetIndex,
    move : Win32cr::Globalization::UCharIteratorMove,
    hasNext : Win32cr::Globalization::UCharIteratorHasNext,
    hasPrevious : Win32cr::Globalization::UCharIteratorHasPrevious,
    current : Win32cr::Globalization::UCharIteratorCurrent,
    next__ : Win32cr::Globalization::UCharIteratorNext,
    previous : Win32cr::Globalization::UCharIteratorPrevious,
    reservedFn : Win32cr::Globalization::UCharIteratorReserved,
    getState : Win32cr::Globalization::UCharIteratorGetState,
    setState : Win32cr::Globalization::UCharIteratorSetState

  @[Extern]
  record UEnumeration
  @[Extern]
  record UResourceBundle
  @[Extern]
  record ULocaleDisplayNames
  @[Extern]
  record UCPMap
  @[Extern(union: true)]
  record UCPTrieData,
    ptr0 : Void*,
    ptr16 : UInt16*,
    ptr32 : UInt32*,
    ptr8 : UInt8*

  @[Extern]
  record UCPTrie,
    index : UInt16*,
    data : Win32cr::Globalization::UCPTrieData,
    indexLength : Int32,
    dataLength : Int32,
    highStart : Int32,
    shifted12HighStart : UInt16,
    type__ : Int8,
    valueWidth : Int8,
    reserved32 : UInt32,
    reserved16 : UInt16,
    index3NullOffset : UInt16,
    dataNullOffset : Int32,
    nullValue : UInt32

  @[Extern]
  record UMutableCPTrie
  @[Extern]
  record UConverter
  @[Extern]
  record UConverterFromUnicodeArgs,
    size : UInt16,
    flush : Int8,
    converter : Win32cr::Globalization::UConverter*,
    source : UInt16*,
    sourceLimit : UInt16*,
    target : Win32cr::Foundation::PSTR,
    targetLimit : Win32cr::Foundation::PSTR,
    offsets : Int32*

  @[Extern]
  record UConverterToUnicodeArgs,
    size : UInt16,
    flush : Int8,
    converter : Win32cr::Globalization::UConverter*,
    source : Win32cr::Foundation::PSTR,
    sourceLimit : Win32cr::Foundation::PSTR,
    target : UInt16*,
    targetLimit : UInt16*,
    offsets : Int32*

  @[Extern]
  record USet
  @[Extern]
  record UBiDi
  @[Extern]
  record UBiDiTransform
  @[Extern]
  record UTextFuncs,
    tableSize : Int32,
    reserved1 : Int32,
    reserved2 : Int32,
    reserved3 : Int32,
    clone : Win32cr::Globalization::UTextClone,
    nativeLength : Win32cr::Globalization::UTextNativeLength,
    access : Win32cr::Globalization::UTextAccess,
    extract : Win32cr::Globalization::UTextExtract,
    replace : Win32cr::Globalization::UTextReplace,
    copy : Win32cr::Globalization::UTextCopy,
    mapOffsetToNative : Win32cr::Globalization::UTextMapOffsetToNative,
    mapNativeIndexToUTF16 : Win32cr::Globalization::UTextMapNativeIndexToUTF16,
    close : Win32cr::Globalization::UTextClose,
    spare1 : Win32cr::Globalization::UTextClose,
    spare2 : Win32cr::Globalization::UTextClose,
    spare3 : Win32cr::Globalization::UTextClose

  @[Extern]
  record UText,
    magic : UInt32,
    flags : Int32,
    providerProperties : Int32,
    sizeOfStruct : Int32,
    chunkNativeLimit : Int64,
    extraSize : Int32,
    nativeIndexingLimit : Int32,
    chunkNativeStart : Int64,
    chunkOffset : Int32,
    chunkLength : Int32,
    chunkContents : UInt16*,
    pFuncs : Win32cr::Globalization::UTextFuncs*,
    pExtra : Void*,
    context : Void*,
    p : Void*,
    q : Void*,
    r : Void*,
    privP : Void*,
    a : Int64,
    b : Int32,
    c : Int32,
    privA : Int64,
    privB : Int32,
    privC : Int32

  @[Extern]
  record USerializedSet,
    array : UInt16*,
    bmpLength : Int32,
    length : Int32,
    staticArray : UInt16[8]

  @[Extern]
  record UNormalizer2
  @[Extern]
  record UConverterSelector
  @[Extern]
  record UBreakIterator
  @[Extern]
  record UCaseMap
  @[Extern]
  record UParseError,
    line : Int32,
    offset : Int32,
    preContext : UInt16[16],
    postContext : UInt16[16]

  @[Extern]
  record UStringPrepProfile
  @[Extern]
  record UIDNA
  @[Extern]
  record UIDNAInfo,
    size : Int16,
    isTransitionalDifferent : Int8,
    reservedB3 : Int8,
    errors : UInt32,
    reservedI2 : Int32,
    reservedI3 : Int32

  @[Extern]
  record UCollator
  @[Extern]
  record UCollationElements
  @[Extern]
  record UCharsetDetector
  @[Extern]
  record UCharsetMatch
  @[Extern]
  record UFieldPositionIterator
  @[Extern]
  record UConstrainedFieldPosition
  @[Extern]
  record UFormattedValue
  @[Extern]
  record UDateIntervalFormat
  @[Extern]
  record UFormattedDateInterval
  @[Extern]
  record UGenderInfo
  @[Extern]
  record UListFormatter
  @[Extern]
  record UFormattedList
  @[Extern]
  record ULocaleData
  @[Extern]
  record UDateFormatSymbols
  @[Extern]
  record UNumberFormatter
  @[Extern]
  record UFormattedNumber
  @[Extern]
  record UNumberingSystem
  @[Extern]
  record UFormattedNumberRange
  @[Extern]
  record UPluralRules
  @[Extern]
  record URegularExpression
  @[Extern]
  record URegion
  @[Extern]
  record URelativeDateTimeFormatter
  @[Extern]
  record UFormattedRelativeDateTime
  @[Extern]
  record UStringSearch
  @[Extern]
  record USpoofChecker
  @[Extern]
  record USpoofCheckResult
  @[Extern]
  record UTransPosition,
    contextStart : Int32,
    contextLimit : Int32,
    start : Int32,
    limit : Int32

  @[Extern]
  record UHashtable
  @[Extern]
  record USearch
  @[Extern]
  record MIMECPINFO,
    dwFlags : UInt32,
    uiCodePage : UInt32,
    uiFamilyCodePage : UInt32,
    wszDescription : UInt16[64],
    wszWebCharset : UInt16[50],
    wszHeaderCharset : UInt16[50],
    wszBodyCharset : UInt16[50],
    wszFixedWidthFont : UInt16[32],
    wszProportionalFont : UInt16[32],
    bGDICharset : UInt8

  @[Extern]
  record MIMECSETINFO,
    uiCodePage : UInt32,
    uiInternetEncoding : UInt32,
    wszCharset : UInt16[50]

  @[Extern]
  record RFC1766INFO,
    lcid : UInt32,
    wszRfc1766 : UInt16[6],
    wszLocaleName : UInt16[32]

  @[Extern]
  record SCRIPTINFO,
    script_id : UInt8,
    uiCodePage : UInt32,
    wszDescription : UInt16[48],
    wszFixedWidthFont : UInt16[32],
    wszProportionalFont : UInt16[32]

  @[Extern]
  record DetectEncodingInfo,
    nLangID : UInt32,
    nCodePage : UInt32,
    nDocPercent : Int32,
    nConfidence : Int32

  @[Extern]
  record SCRIPFONTINFO,
    scripts : Int64,
    wszFont : UInt16[32]

  @[Extern]
  record UNICODERANGE,
    wcFrom : UInt16,
    wcTo : UInt16

  @[Extern]
  record ISpellingErrorVtbl,
    query_interface : Proc(ISpellingError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpellingError*, UInt32),
    release : Proc(ISpellingError*, UInt32),
    get_StartIndex : Proc(ISpellingError*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(ISpellingError*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CorrectiveAction : Proc(ISpellingError*, Win32cr::Globalization::CORRECTIVE_ACTION*, Win32cr::Foundation::HRESULT),
    get_Replacement : Proc(ISpellingError*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b7c82d61-fbe8-4b47-9b27-6c0d2e0de0a3")]
  record ISpellingError, lpVtbl : ISpellingErrorVtbl* do
    GUID = LibC::GUID.new(0xb7c82d61_u32, 0xfbe8_u16, 0x4b47_u16, StaticArray[0x9b_u8, 0x27_u8, 0x6c_u8, 0xd_u8, 0x2e_u8, 0xd_u8, 0xe0_u8, 0xa3_u8])
    def query_interface(this : ISpellingError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpellingError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpellingError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_StartIndex(this : ISpellingError*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartIndex.call(this, value)
    end
    def get_Length(this : ISpellingError*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, value)
    end
    def get_CorrectiveAction(this : ISpellingError*, value : Win32cr::Globalization::CORRECTIVE_ACTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CorrectiveAction.call(this, value)
    end
    def get_Replacement(this : ISpellingError*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Replacement.call(this, value)
    end

  end

  @[Extern]
  record IEnumSpellingErrorVtbl,
    query_interface : Proc(IEnumSpellingError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumSpellingError*, UInt32),
    release : Proc(IEnumSpellingError*, UInt32),
    next__ : Proc(IEnumSpellingError*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("803e3bd4-2828-4410-8290-418d1d73c762")]
  record IEnumSpellingError, lpVtbl : IEnumSpellingErrorVtbl* do
    GUID = LibC::GUID.new(0x803e3bd4_u32, 0x2828_u16, 0x4410_u16, StaticArray[0x82_u8, 0x90_u8, 0x41_u8, 0x8d_u8, 0x1d_u8, 0x73_u8, 0xc7_u8, 0x62_u8])
    def query_interface(this : IEnumSpellingError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumSpellingError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumSpellingError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumSpellingError*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, value)
    end

  end

  @[Extern]
  record IOptionDescriptionVtbl,
    query_interface : Proc(IOptionDescription*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOptionDescription*, UInt32),
    release : Proc(IOptionDescription*, UInt32),
    get_Id : Proc(IOptionDescription*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_Heading : Proc(IOptionDescription*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IOptionDescription*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_Labels : Proc(IOptionDescription*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("432e5f85-35cf-4606-a801-6f70277e1d7a")]
  record IOptionDescription, lpVtbl : IOptionDescriptionVtbl* do
    GUID = LibC::GUID.new(0x432e5f85_u32, 0x35cf_u16, 0x4606_u16, StaticArray[0xa8_u8, 0x1_u8, 0x6f_u8, 0x70_u8, 0x27_u8, 0x7e_u8, 0x1d_u8, 0x7a_u8])
    def query_interface(this : IOptionDescription*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOptionDescription*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOptionDescription*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Id(this : IOptionDescription*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Id.call(this, value)
    end
    def get_Heading(this : IOptionDescription*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Heading.call(this, value)
    end
    def get_Description(this : IOptionDescription*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, value)
    end
    def get_Labels(this : IOptionDescription*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Labels.call(this, value)
    end

  end

  @[Extern]
  record ISpellCheckerChangedEventHandlerVtbl,
    query_interface : Proc(ISpellCheckerChangedEventHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpellCheckerChangedEventHandler*, UInt32),
    release : Proc(ISpellCheckerChangedEventHandler*, UInt32),
    invoke : Proc(ISpellCheckerChangedEventHandler*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0b83a5b0-792f-4eab-9799-acf52c5ed08a")]
  record ISpellCheckerChangedEventHandler, lpVtbl : ISpellCheckerChangedEventHandlerVtbl* do
    GUID = LibC::GUID.new(0xb83a5b0_u32, 0x792f_u16, 0x4eab_u16, StaticArray[0x97_u8, 0x99_u8, 0xac_u8, 0xf5_u8, 0x2c_u8, 0x5e_u8, 0xd0_u8, 0x8a_u8])
    def query_interface(this : ISpellCheckerChangedEventHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpellCheckerChangedEventHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpellCheckerChangedEventHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def invoke(this : ISpellCheckerChangedEventHandler*, sender : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke.call(this, sender)
    end

  end

  @[Extern]
  record ISpellCheckerVtbl,
    query_interface : Proc(ISpellChecker*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpellChecker*, UInt32),
    release : Proc(ISpellChecker*, UInt32),
    get_LanguageTag : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    check : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    suggest : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    ignore : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    auto_correct : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_option_value : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, UInt8*, Win32cr::Foundation::HRESULT),
    get_OptionIds : Proc(ISpellChecker*, Void**, Win32cr::Foundation::HRESULT),
    get_Id : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_LocalizedName : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    add_SpellCheckerChanged : Proc(ISpellChecker*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_SpellCheckerChanged : Proc(ISpellChecker*, UInt32, Win32cr::Foundation::HRESULT),
    get_option_description : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    comprehensive_check : Proc(ISpellChecker*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b6fd0b71-e2bc-4653-8d05-f197e412770b")]
  record ISpellChecker, lpVtbl : ISpellCheckerVtbl* do
    GUID = LibC::GUID.new(0xb6fd0b71_u32, 0xe2bc_u16, 0x4653_u16, StaticArray[0x8d_u8, 0x5_u8, 0xf1_u8, 0x97_u8, 0xe4_u8, 0x12_u8, 0x77_u8, 0xb_u8])
    def query_interface(this : ISpellChecker*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpellChecker*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpellChecker*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_LanguageTag(this : ISpellChecker*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LanguageTag.call(this, value)
    end
    def check(this : ISpellChecker*, text : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check.call(this, text, value)
    end
    def suggest(this : ISpellChecker*, word : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suggest.call(this, word, value)
    end
    def add(this : ISpellChecker*, word : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, word)
    end
    def ignore(this : ISpellChecker*, word : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ignore.call(this, word)
    end
    def auto_correct(this : ISpellChecker*, from : Win32cr::Foundation::PWSTR, to : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.auto_correct.call(this, from, to)
    end
    def get_option_value(this : ISpellChecker*, optionId : Win32cr::Foundation::PWSTR, value : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option_value.call(this, optionId, value)
    end
    def get_OptionIds(this : ISpellChecker*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OptionIds.call(this, value)
    end
    def get_Id(this : ISpellChecker*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Id.call(this, value)
    end
    def get_LocalizedName(this : ISpellChecker*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalizedName.call(this, value)
    end
    def add_SpellCheckerChanged(this : ISpellChecker*, handler : Void*, eventCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_SpellCheckerChanged.call(this, handler, eventCookie)
    end
    def remove_SpellCheckerChanged(this : ISpellChecker*, eventCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_SpellCheckerChanged.call(this, eventCookie)
    end
    def get_option_description(this : ISpellChecker*, optionId : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option_description.call(this, optionId, value)
    end
    def comprehensive_check(this : ISpellChecker*, text : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.comprehensive_check.call(this, text, value)
    end

  end

  @[Extern]
  record ISpellChecker2Vtbl,
    query_interface : Proc(ISpellChecker2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpellChecker2*, UInt32),
    release : Proc(ISpellChecker2*, UInt32),
    get_LanguageTag : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    check : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    suggest : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    ignore : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    auto_correct : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_option_value : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, UInt8*, Win32cr::Foundation::HRESULT),
    get_OptionIds : Proc(ISpellChecker2*, Void**, Win32cr::Foundation::HRESULT),
    get_Id : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_LocalizedName : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    add_SpellCheckerChanged : Proc(ISpellChecker2*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_SpellCheckerChanged : Proc(ISpellChecker2*, UInt32, Win32cr::Foundation::HRESULT),
    get_option_description : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    comprehensive_check : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    remove : Proc(ISpellChecker2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e7ed1c71-87f7-4378-a840-c9200dacee47")]
  record ISpellChecker2, lpVtbl : ISpellChecker2Vtbl* do
    GUID = LibC::GUID.new(0xe7ed1c71_u32, 0x87f7_u16, 0x4378_u16, StaticArray[0xa8_u8, 0x40_u8, 0xc9_u8, 0x20_u8, 0xd_u8, 0xac_u8, 0xee_u8, 0x47_u8])
    def query_interface(this : ISpellChecker2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpellChecker2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpellChecker2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_LanguageTag(this : ISpellChecker2*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LanguageTag.call(this, value)
    end
    def check(this : ISpellChecker2*, text : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check.call(this, text, value)
    end
    def suggest(this : ISpellChecker2*, word : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suggest.call(this, word, value)
    end
    def add(this : ISpellChecker2*, word : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, word)
    end
    def ignore(this : ISpellChecker2*, word : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ignore.call(this, word)
    end
    def auto_correct(this : ISpellChecker2*, from : Win32cr::Foundation::PWSTR, to : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.auto_correct.call(this, from, to)
    end
    def get_option_value(this : ISpellChecker2*, optionId : Win32cr::Foundation::PWSTR, value : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option_value.call(this, optionId, value)
    end
    def get_OptionIds(this : ISpellChecker2*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OptionIds.call(this, value)
    end
    def get_Id(this : ISpellChecker2*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Id.call(this, value)
    end
    def get_LocalizedName(this : ISpellChecker2*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalizedName.call(this, value)
    end
    def add_SpellCheckerChanged(this : ISpellChecker2*, handler : Void*, eventCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_SpellCheckerChanged.call(this, handler, eventCookie)
    end
    def remove_SpellCheckerChanged(this : ISpellChecker2*, eventCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_SpellCheckerChanged.call(this, eventCookie)
    end
    def get_option_description(this : ISpellChecker2*, optionId : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option_description.call(this, optionId, value)
    end
    def comprehensive_check(this : ISpellChecker2*, text : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.comprehensive_check.call(this, text, value)
    end
    def remove(this : ISpellChecker2*, word : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, word)
    end

  end

  @[Extern]
  record ISpellCheckerFactoryVtbl,
    query_interface : Proc(ISpellCheckerFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpellCheckerFactory*, UInt32),
    release : Proc(ISpellCheckerFactory*, UInt32),
    get_SupportedLanguages : Proc(ISpellCheckerFactory*, Void**, Win32cr::Foundation::HRESULT),
    is_supported : Proc(ISpellCheckerFactory*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    create_spell_checker : Proc(ISpellCheckerFactory*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8e018a9d-2415-4677-bf08-794ea61f94bb")]
  record ISpellCheckerFactory, lpVtbl : ISpellCheckerFactoryVtbl* do
    GUID = LibC::GUID.new(0x8e018a9d_u32, 0x2415_u16, 0x4677_u16, StaticArray[0xbf_u8, 0x8_u8, 0x79_u8, 0x4e_u8, 0xa6_u8, 0x1f_u8, 0x94_u8, 0xbb_u8])
    def query_interface(this : ISpellCheckerFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpellCheckerFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpellCheckerFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_SupportedLanguages(this : ISpellCheckerFactory*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedLanguages.call(this, value)
    end
    def is_supported(this : ISpellCheckerFactory*, languageTag : Win32cr::Foundation::PWSTR, value : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_supported.call(this, languageTag, value)
    end
    def create_spell_checker(this : ISpellCheckerFactory*, languageTag : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_spell_checker.call(this, languageTag, value)
    end

  end

  @[Extern]
  record IUserDictionariesRegistrarVtbl,
    query_interface : Proc(IUserDictionariesRegistrar*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IUserDictionariesRegistrar*, UInt32),
    release : Proc(IUserDictionariesRegistrar*, UInt32),
    register_user_dictionary : Proc(IUserDictionariesRegistrar*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    unregister_user_dictionary : Proc(IUserDictionariesRegistrar*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aa176b85-0e12-4844-8e1a-eef1da77f586")]
  record IUserDictionariesRegistrar, lpVtbl : IUserDictionariesRegistrarVtbl* do
    GUID = LibC::GUID.new(0xaa176b85_u32, 0xe12_u16, 0x4844_u16, StaticArray[0x8e_u8, 0x1a_u8, 0xee_u8, 0xf1_u8, 0xda_u8, 0x77_u8, 0xf5_u8, 0x86_u8])
    def query_interface(this : IUserDictionariesRegistrar*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IUserDictionariesRegistrar*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IUserDictionariesRegistrar*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_user_dictionary(this : IUserDictionariesRegistrar*, dictionaryPath : Win32cr::Foundation::PWSTR, languageTag : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_user_dictionary.call(this, dictionaryPath, languageTag)
    end
    def unregister_user_dictionary(this : IUserDictionariesRegistrar*, dictionaryPath : Win32cr::Foundation::PWSTR, languageTag : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_user_dictionary.call(this, dictionaryPath, languageTag)
    end

  end

  @[Extern]
  record ISpellCheckProviderVtbl,
    query_interface : Proc(ISpellCheckProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpellCheckProvider*, UInt32),
    release : Proc(ISpellCheckProvider*, UInt32),
    get_LanguageTag : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    check : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    suggest : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    get_option_value : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR, UInt8*, Win32cr::Foundation::HRESULT),
    set_option_value : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR, UInt8, Win32cr::Foundation::HRESULT),
    get_OptionIds : Proc(ISpellCheckProvider*, Void**, Win32cr::Foundation::HRESULT),
    get_Id : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_LocalizedName : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_option_description : Proc(ISpellCheckProvider*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    initialize_wordlist : Proc(ISpellCheckProvider*, Win32cr::Globalization::WORDLIST_TYPE, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("73e976e0-8ed4-4eb1-80d7-1be0a16b0c38")]
  record ISpellCheckProvider, lpVtbl : ISpellCheckProviderVtbl* do
    GUID = LibC::GUID.new(0x73e976e0_u32, 0x8ed4_u16, 0x4eb1_u16, StaticArray[0x80_u8, 0xd7_u8, 0x1b_u8, 0xe0_u8, 0xa1_u8, 0x6b_u8, 0xc_u8, 0x38_u8])
    def query_interface(this : ISpellCheckProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpellCheckProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpellCheckProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_LanguageTag(this : ISpellCheckProvider*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LanguageTag.call(this, value)
    end
    def check(this : ISpellCheckProvider*, text : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check.call(this, text, value)
    end
    def suggest(this : ISpellCheckProvider*, word : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suggest.call(this, word, value)
    end
    def get_option_value(this : ISpellCheckProvider*, optionId : Win32cr::Foundation::PWSTR, value : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option_value.call(this, optionId, value)
    end
    def set_option_value(this : ISpellCheckProvider*, optionId : Win32cr::Foundation::PWSTR, value : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_option_value.call(this, optionId, value)
    end
    def get_OptionIds(this : ISpellCheckProvider*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OptionIds.call(this, value)
    end
    def get_Id(this : ISpellCheckProvider*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Id.call(this, value)
    end
    def get_LocalizedName(this : ISpellCheckProvider*, value : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalizedName.call(this, value)
    end
    def get_option_description(this : ISpellCheckProvider*, optionId : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_option_description.call(this, optionId, value)
    end
    def initialize_wordlist(this : ISpellCheckProvider*, wordlistType : Win32cr::Globalization::WORDLIST_TYPE, words : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_wordlist.call(this, wordlistType, words)
    end

  end

  @[Extern]
  record IComprehensiveSpellCheckProviderVtbl,
    query_interface : Proc(IComprehensiveSpellCheckProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IComprehensiveSpellCheckProvider*, UInt32),
    release : Proc(IComprehensiveSpellCheckProvider*, UInt32),
    comprehensive_check : Proc(IComprehensiveSpellCheckProvider*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c58f8de-8e94-479e-9717-70c42c4ad2c3")]
  record IComprehensiveSpellCheckProvider, lpVtbl : IComprehensiveSpellCheckProviderVtbl* do
    GUID = LibC::GUID.new(0xc58f8de_u32, 0x8e94_u16, 0x479e_u16, StaticArray[0x97_u8, 0x17_u8, 0x70_u8, 0xc4_u8, 0x2c_u8, 0x4a_u8, 0xd2_u8, 0xc3_u8])
    def query_interface(this : IComprehensiveSpellCheckProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IComprehensiveSpellCheckProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IComprehensiveSpellCheckProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def comprehensive_check(this : IComprehensiveSpellCheckProvider*, text : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.comprehensive_check.call(this, text, value)
    end

  end

  @[Extern]
  record ISpellCheckProviderFactoryVtbl,
    query_interface : Proc(ISpellCheckProviderFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpellCheckProviderFactory*, UInt32),
    release : Proc(ISpellCheckProviderFactory*, UInt32),
    get_SupportedLanguages : Proc(ISpellCheckProviderFactory*, Void**, Win32cr::Foundation::HRESULT),
    is_supported : Proc(ISpellCheckProviderFactory*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    create_spell_check_provider : Proc(ISpellCheckProviderFactory*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9f671e11-77d6-4c92-aefb-615215e3a4be")]
  record ISpellCheckProviderFactory, lpVtbl : ISpellCheckProviderFactoryVtbl* do
    GUID = LibC::GUID.new(0x9f671e11_u32, 0x77d6_u16, 0x4c92_u16, StaticArray[0xae_u8, 0xfb_u8, 0x61_u8, 0x52_u8, 0x15_u8, 0xe3_u8, 0xa4_u8, 0xbe_u8])
    def query_interface(this : ISpellCheckProviderFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpellCheckProviderFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpellCheckProviderFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_SupportedLanguages(this : ISpellCheckProviderFactory*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedLanguages.call(this, value)
    end
    def is_supported(this : ISpellCheckProviderFactory*, languageTag : Win32cr::Foundation::PWSTR, value : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_supported.call(this, languageTag, value)
    end
    def create_spell_check_provider(this : ISpellCheckProviderFactory*, languageTag : Win32cr::Foundation::PWSTR, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_spell_check_provider.call(this, languageTag, value)
    end

  end

  @[Extern]
  record IMLangStringBufWVtbl,
    query_interface : Proc(IMLangStringBufW*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangStringBufW*, UInt32),
    release : Proc(IMLangStringBufW*, UInt32),
    get_status : Proc(IMLangStringBufW*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    lock_buf : Proc(IMLangStringBufW*, Int32, Int32, UInt16**, Int32*, Win32cr::Foundation::HRESULT),
    unlock_buf : Proc(IMLangStringBufW*, Win32cr::Foundation::PWSTR, Int32, Int32, Win32cr::Foundation::HRESULT),
    insert : Proc(IMLangStringBufW*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    delete : Proc(IMLangStringBufW*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d24acd21-ba72-11d0-b188-00aa0038c969")]
  record IMLangStringBufW, lpVtbl : IMLangStringBufWVtbl* do
    GUID = LibC::GUID.new(0xd24acd21_u32, 0xba72_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangStringBufW*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangStringBufW*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangStringBufW*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_status(this : IMLangStringBufW*, plFlags : Int32*, pcchBuf : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, plFlags, pcchBuf)
    end
    def lock_buf(this : IMLangStringBufW*, cchOffset : Int32, cchMaxLock : Int32, ppszBuf : UInt16**, pcchBuf : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_buf.call(this, cchOffset, cchMaxLock, ppszBuf, pcchBuf)
    end
    def unlock_buf(this : IMLangStringBufW*, pszBuf : Win32cr::Foundation::PWSTR, cchOffset : Int32, cchWrite : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_buf.call(this, pszBuf, cchOffset, cchWrite)
    end
    def insert(this : IMLangStringBufW*, cchOffset : Int32, cchMaxInsert : Int32, pcchActual : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert.call(this, cchOffset, cchMaxInsert, pcchActual)
    end
    def delete(this : IMLangStringBufW*, cchOffset : Int32, cchDelete : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this, cchOffset, cchDelete)
    end

  end

  @[Extern]
  record IMLangStringBufAVtbl,
    query_interface : Proc(IMLangStringBufA*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangStringBufA*, UInt32),
    release : Proc(IMLangStringBufA*, UInt32),
    get_status : Proc(IMLangStringBufA*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    lock_buf : Proc(IMLangStringBufA*, Int32, Int32, Win32cr::Foundation::CHAR**, Int32*, Win32cr::Foundation::HRESULT),
    unlock_buf : Proc(IMLangStringBufA*, Win32cr::Foundation::PSTR, Int32, Int32, Win32cr::Foundation::HRESULT),
    insert : Proc(IMLangStringBufA*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    delete : Proc(IMLangStringBufA*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d24acd23-ba72-11d0-b188-00aa0038c969")]
  record IMLangStringBufA, lpVtbl : IMLangStringBufAVtbl* do
    GUID = LibC::GUID.new(0xd24acd23_u32, 0xba72_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangStringBufA*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangStringBufA*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangStringBufA*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_status(this : IMLangStringBufA*, plFlags : Int32*, pcchBuf : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, plFlags, pcchBuf)
    end
    def lock_buf(this : IMLangStringBufA*, cchOffset : Int32, cchMaxLock : Int32, ppszBuf : Win32cr::Foundation::CHAR**, pcchBuf : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_buf.call(this, cchOffset, cchMaxLock, ppszBuf, pcchBuf)
    end
    def unlock_buf(this : IMLangStringBufA*, pszBuf : Win32cr::Foundation::PSTR, cchOffset : Int32, cchWrite : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_buf.call(this, pszBuf, cchOffset, cchWrite)
    end
    def insert(this : IMLangStringBufA*, cchOffset : Int32, cchMaxInsert : Int32, pcchActual : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert.call(this, cchOffset, cchMaxInsert, pcchActual)
    end
    def delete(this : IMLangStringBufA*, cchOffset : Int32, cchDelete : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this, cchOffset, cchDelete)
    end

  end

  @[Extern]
  record IMLangStringVtbl,
    query_interface : Proc(IMLangString*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangString*, UInt32),
    release : Proc(IMLangString*, UInt32),
    sync : Proc(IMLangString*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_length : Proc(IMLangString*, Int32*, Win32cr::Foundation::HRESULT),
    set_ml_str : Proc(IMLangString*, Int32, Int32, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_ml_str : Proc(IMLangString*, Int32, Int32, Void*, UInt32, LibC::GUID*, Void**, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c04d65ce-b70d-11d0-b188-00aa0038c969")]
  record IMLangString, lpVtbl : IMLangStringVtbl* do
    GUID = LibC::GUID.new(0xc04d65ce_u32, 0xb70d_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangString*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangString*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangString*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def sync(this : IMLangString*, fNoAccess : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync.call(this, fNoAccess)
    end
    def get_length(this : IMLangString*, plLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, plLen)
    end
    def set_ml_str(this : IMLangString*, lDestPos : Int32, lDestLen : Int32, pSrcMLStr : Void*, lSrcPos : Int32, lSrcLen : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ml_str.call(this, lDestPos, lDestLen, pSrcMLStr, lSrcPos, lSrcLen)
    end
    def get_ml_str(this : IMLangString*, lSrcPos : Int32, lSrcLen : Int32, pUnkOuter : Void*, dwClsContext : UInt32, piid : LibC::GUID*, ppDestMLStr : Void**, plDestPos : Int32*, plDestLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ml_str.call(this, lSrcPos, lSrcLen, pUnkOuter, dwClsContext, piid, ppDestMLStr, plDestPos, plDestLen)
    end

  end

  @[Extern]
  record IMLangStringWStrVtbl,
    query_interface : Proc(IMLangStringWStr*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangStringWStr*, UInt32),
    release : Proc(IMLangStringWStr*, UInt32),
    sync : Proc(IMLangStringWStr*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_length : Proc(IMLangStringWStr*, Int32*, Win32cr::Foundation::HRESULT),
    set_ml_str : Proc(IMLangStringWStr*, Int32, Int32, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_ml_str : Proc(IMLangStringWStr*, Int32, Int32, Void*, UInt32, LibC::GUID*, Void**, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_w_str : Proc(IMLangStringWStr*, Int32, Int32, UInt16*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_str_buf_w : Proc(IMLangStringWStr*, Int32, Int32, Void*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_w_str : Proc(IMLangStringWStr*, Int32, Int32, UInt16*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_str_buf_w : Proc(IMLangStringWStr*, Int32, Int32, Void**, Int32*, Win32cr::Foundation::HRESULT),
    lock_w_str : Proc(IMLangStringWStr*, Int32, Int32, Int32, Int32, Win32cr::Foundation::PWSTR*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    unlock_w_str : Proc(IMLangStringWStr*, UInt16*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_locale : Proc(IMLangStringWStr*, Int32, Int32, UInt32, Win32cr::Foundation::HRESULT),
    get_locale : Proc(IMLangStringWStr*, Int32, Int32, UInt32*, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c04d65d0-b70d-11d0-b188-00aa0038c969")]
  record IMLangStringWStr, lpVtbl : IMLangStringWStrVtbl* do
    GUID = LibC::GUID.new(0xc04d65d0_u32, 0xb70d_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangStringWStr*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangStringWStr*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangStringWStr*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def sync(this : IMLangStringWStr*, fNoAccess : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync.call(this, fNoAccess)
    end
    def get_length(this : IMLangStringWStr*, plLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, plLen)
    end
    def set_ml_str(this : IMLangStringWStr*, lDestPos : Int32, lDestLen : Int32, pSrcMLStr : Void*, lSrcPos : Int32, lSrcLen : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ml_str.call(this, lDestPos, lDestLen, pSrcMLStr, lSrcPos, lSrcLen)
    end
    def get_ml_str(this : IMLangStringWStr*, lSrcPos : Int32, lSrcLen : Int32, pUnkOuter : Void*, dwClsContext : UInt32, piid : LibC::GUID*, ppDestMLStr : Void**, plDestPos : Int32*, plDestLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ml_str.call(this, lSrcPos, lSrcLen, pUnkOuter, dwClsContext, piid, ppDestMLStr, plDestPos, plDestLen)
    end
    def set_w_str(this : IMLangStringWStr*, lDestPos : Int32, lDestLen : Int32, pszSrc : UInt16*, cchSrc : Int32, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_w_str.call(this, lDestPos, lDestLen, pszSrc, cchSrc, pcchActual, plActualLen)
    end
    def set_str_buf_w(this : IMLangStringWStr*, lDestPos : Int32, lDestLen : Int32, pSrcBuf : Void*, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_str_buf_w.call(this, lDestPos, lDestLen, pSrcBuf, pcchActual, plActualLen)
    end
    def get_w_str(this : IMLangStringWStr*, lSrcPos : Int32, lSrcLen : Int32, pszDest : UInt16*, cchDest : Int32, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_w_str.call(this, lSrcPos, lSrcLen, pszDest, cchDest, pcchActual, plActualLen)
    end
    def get_str_buf_w(this : IMLangStringWStr*, lSrcPos : Int32, lSrcMaxLen : Int32, ppDestBuf : Void**, plDestLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_str_buf_w.call(this, lSrcPos, lSrcMaxLen, ppDestBuf, plDestLen)
    end
    def lock_w_str(this : IMLangStringWStr*, lSrcPos : Int32, lSrcLen : Int32, lFlags : Int32, cchRequest : Int32, ppszDest : Win32cr::Foundation::PWSTR*, pcchDest : Int32*, plDestLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_w_str.call(this, lSrcPos, lSrcLen, lFlags, cchRequest, ppszDest, pcchDest, plDestLen)
    end
    def unlock_w_str(this : IMLangStringWStr*, pszSrc : UInt16*, cchSrc : Int32, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_w_str.call(this, pszSrc, cchSrc, pcchActual, plActualLen)
    end
    def set_locale(this : IMLangStringWStr*, lDestPos : Int32, lDestLen : Int32, locale : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_locale.call(this, lDestPos, lDestLen, locale)
    end
    def get_locale(this : IMLangStringWStr*, lSrcPos : Int32, lSrcMaxLen : Int32, plocale : UInt32*, plLocalePos : Int32*, plLocaleLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_locale.call(this, lSrcPos, lSrcMaxLen, plocale, plLocalePos, plLocaleLen)
    end

  end

  @[Extern]
  record IMLangStringAStrVtbl,
    query_interface : Proc(IMLangStringAStr*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangStringAStr*, UInt32),
    release : Proc(IMLangStringAStr*, UInt32),
    sync : Proc(IMLangStringAStr*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_length : Proc(IMLangStringAStr*, Int32*, Win32cr::Foundation::HRESULT),
    set_ml_str : Proc(IMLangStringAStr*, Int32, Int32, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_ml_str : Proc(IMLangStringAStr*, Int32, Int32, Void*, UInt32, LibC::GUID*, Void**, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_a_str : Proc(IMLangStringAStr*, Int32, Int32, UInt32, UInt8*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_str_buf_a : Proc(IMLangStringAStr*, Int32, Int32, UInt32, Void*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_a_str : Proc(IMLangStringAStr*, Int32, Int32, UInt32, UInt32*, UInt8*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_str_buf_a : Proc(IMLangStringAStr*, Int32, Int32, UInt32*, Void**, Int32*, Win32cr::Foundation::HRESULT),
    lock_a_str : Proc(IMLangStringAStr*, Int32, Int32, Int32, UInt32, Int32, UInt32*, Win32cr::Foundation::PSTR*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    unlock_a_str : Proc(IMLangStringAStr*, UInt8*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_locale : Proc(IMLangStringAStr*, Int32, Int32, UInt32, Win32cr::Foundation::HRESULT),
    get_locale : Proc(IMLangStringAStr*, Int32, Int32, UInt32*, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c04d65d2-b70d-11d0-b188-00aa0038c969")]
  record IMLangStringAStr, lpVtbl : IMLangStringAStrVtbl* do
    GUID = LibC::GUID.new(0xc04d65d2_u32, 0xb70d_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangStringAStr*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangStringAStr*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangStringAStr*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def sync(this : IMLangStringAStr*, fNoAccess : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync.call(this, fNoAccess)
    end
    def get_length(this : IMLangStringAStr*, plLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, plLen)
    end
    def set_ml_str(this : IMLangStringAStr*, lDestPos : Int32, lDestLen : Int32, pSrcMLStr : Void*, lSrcPos : Int32, lSrcLen : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ml_str.call(this, lDestPos, lDestLen, pSrcMLStr, lSrcPos, lSrcLen)
    end
    def get_ml_str(this : IMLangStringAStr*, lSrcPos : Int32, lSrcLen : Int32, pUnkOuter : Void*, dwClsContext : UInt32, piid : LibC::GUID*, ppDestMLStr : Void**, plDestPos : Int32*, plDestLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ml_str.call(this, lSrcPos, lSrcLen, pUnkOuter, dwClsContext, piid, ppDestMLStr, plDestPos, plDestLen)
    end
    def set_a_str(this : IMLangStringAStr*, lDestPos : Int32, lDestLen : Int32, uCodePage : UInt32, pszSrc : UInt8*, cchSrc : Int32, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_a_str.call(this, lDestPos, lDestLen, uCodePage, pszSrc, cchSrc, pcchActual, plActualLen)
    end
    def set_str_buf_a(this : IMLangStringAStr*, lDestPos : Int32, lDestLen : Int32, uCodePage : UInt32, pSrcBuf : Void*, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_str_buf_a.call(this, lDestPos, lDestLen, uCodePage, pSrcBuf, pcchActual, plActualLen)
    end
    def get_a_str(this : IMLangStringAStr*, lSrcPos : Int32, lSrcLen : Int32, uCodePageIn : UInt32, puCodePageOut : UInt32*, pszDest : UInt8*, cchDest : Int32, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_a_str.call(this, lSrcPos, lSrcLen, uCodePageIn, puCodePageOut, pszDest, cchDest, pcchActual, plActualLen)
    end
    def get_str_buf_a(this : IMLangStringAStr*, lSrcPos : Int32, lSrcMaxLen : Int32, puDestCodePage : UInt32*, ppDestBuf : Void**, plDestLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_str_buf_a.call(this, lSrcPos, lSrcMaxLen, puDestCodePage, ppDestBuf, plDestLen)
    end
    def lock_a_str(this : IMLangStringAStr*, lSrcPos : Int32, lSrcLen : Int32, lFlags : Int32, uCodePageIn : UInt32, cchRequest : Int32, puCodePageOut : UInt32*, ppszDest : Win32cr::Foundation::PSTR*, pcchDest : Int32*, plDestLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_a_str.call(this, lSrcPos, lSrcLen, lFlags, uCodePageIn, cchRequest, puCodePageOut, ppszDest, pcchDest, plDestLen)
    end
    def unlock_a_str(this : IMLangStringAStr*, pszSrc : UInt8*, cchSrc : Int32, pcchActual : Int32*, plActualLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_a_str.call(this, pszSrc, cchSrc, pcchActual, plActualLen)
    end
    def set_locale(this : IMLangStringAStr*, lDestPos : Int32, lDestLen : Int32, locale : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_locale.call(this, lDestPos, lDestLen, locale)
    end
    def get_locale(this : IMLangStringAStr*, lSrcPos : Int32, lSrcMaxLen : Int32, plocale : UInt32*, plLocalePos : Int32*, plLocaleLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_locale.call(this, lSrcPos, lSrcMaxLen, plocale, plLocalePos, plLocaleLen)
    end

  end

  @[Extern]
  record IMLangLineBreakConsoleVtbl,
    query_interface : Proc(IMLangLineBreakConsole*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangLineBreakConsole*, UInt32),
    release : Proc(IMLangLineBreakConsole*, UInt32),
    break_line_ml : Proc(IMLangLineBreakConsole*, Void*, Int32, Int32, Int32, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    break_line_w : Proc(IMLangLineBreakConsole*, UInt32, UInt16*, Int32, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    break_line_a : Proc(IMLangLineBreakConsole*, UInt32, UInt32, UInt8*, Int32, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f5be2ee1-bfd7-11d0-b188-00aa0038c969")]
  record IMLangLineBreakConsole, lpVtbl : IMLangLineBreakConsoleVtbl* do
    GUID = LibC::GUID.new(0xf5be2ee1_u32, 0xbfd7_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangLineBreakConsole*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangLineBreakConsole*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangLineBreakConsole*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def break_line_ml(this : IMLangLineBreakConsole*, pSrcMLStr : Void*, lSrcPos : Int32, lSrcLen : Int32, cMinColumns : Int32, cMaxColumns : Int32, plLineLen : Int32*, plSkipLen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.break_line_ml.call(this, pSrcMLStr, lSrcPos, lSrcLen, cMinColumns, cMaxColumns, plLineLen, plSkipLen)
    end
    def break_line_w(this : IMLangLineBreakConsole*, locale : UInt32, pszSrc : UInt16*, cchSrc : Int32, cMaxColumns : Int32, pcchLine : Int32*, pcchSkip : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.break_line_w.call(this, locale, pszSrc, cchSrc, cMaxColumns, pcchLine, pcchSkip)
    end
    def break_line_a(this : IMLangLineBreakConsole*, locale : UInt32, uCodePage : UInt32, pszSrc : UInt8*, cchSrc : Int32, cMaxColumns : Int32, pcchLine : Int32*, pcchSkip : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.break_line_a.call(this, locale, uCodePage, pszSrc, cchSrc, cMaxColumns, pcchLine, pcchSkip)
    end

  end

  @[Extern]
  record IEnumCodePageVtbl,
    query_interface : Proc(IEnumCodePage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCodePage*, UInt32),
    release : Proc(IEnumCodePage*, UInt32),
    clone : Proc(IEnumCodePage*, Void**, Win32cr::Foundation::HRESULT),
    next__ : Proc(IEnumCodePage*, UInt32, Win32cr::Globalization::MIMECPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCodePage*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCodePage*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("275c23e3-3747-11d0-9fea-00aa003f8646")]
  record IEnumCodePage, lpVtbl : IEnumCodePageVtbl* do
    GUID = LibC::GUID.new(0x275c23e3_u32, 0x3747_u16, 0x11d0_u16, StaticArray[0x9f_u8, 0xea_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3f_u8, 0x86_u8, 0x46_u8])
    def query_interface(this : IEnumCodePage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCodePage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCodePage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def clone(this : IEnumCodePage*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end
    def next__(this : IEnumCodePage*, celt : UInt32, rgelt : Win32cr::Globalization::MIMECPINFO*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def reset(this : IEnumCodePage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumCodePage*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end

  end

  @[Extern]
  record IEnumRfc1766Vtbl,
    query_interface : Proc(IEnumRfc1766*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumRfc1766*, UInt32),
    release : Proc(IEnumRfc1766*, UInt32),
    clone : Proc(IEnumRfc1766*, Void**, Win32cr::Foundation::HRESULT),
    next__ : Proc(IEnumRfc1766*, UInt32, Win32cr::Globalization::RFC1766INFO*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumRfc1766*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumRfc1766*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3dc39d1d-c030-11d0-b81b-00c04fc9b31f")]
  record IEnumRfc1766, lpVtbl : IEnumRfc1766Vtbl* do
    GUID = LibC::GUID.new(0x3dc39d1d_u32, 0xc030_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0x1b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0xb3_u8, 0x1f_u8])
    def query_interface(this : IEnumRfc1766*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumRfc1766*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumRfc1766*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def clone(this : IEnumRfc1766*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end
    def next__(this : IEnumRfc1766*, celt : UInt32, rgelt : Win32cr::Globalization::RFC1766INFO*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def reset(this : IEnumRfc1766*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumRfc1766*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end

  end

  @[Extern]
  record IEnumScriptVtbl,
    query_interface : Proc(IEnumScript*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumScript*, UInt32),
    release : Proc(IEnumScript*, UInt32),
    clone : Proc(IEnumScript*, Void**, Win32cr::Foundation::HRESULT),
    next__ : Proc(IEnumScript*, UInt32, Win32cr::Globalization::SCRIPTINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumScript*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumScript*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ae5f1430-388b-11d2-8380-00c04f8f5da1")]
  record IEnumScript, lpVtbl : IEnumScriptVtbl* do
    GUID = LibC::GUID.new(0xae5f1430_u32, 0x388b_u16, 0x11d2_u16, StaticArray[0x83_u8, 0x80_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8f_u8, 0x5d_u8, 0xa1_u8])
    def query_interface(this : IEnumScript*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumScript*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumScript*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def clone(this : IEnumScript*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end
    def next__(this : IEnumScript*, celt : UInt32, rgelt : Win32cr::Globalization::SCRIPTINFO*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def reset(this : IEnumScript*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumScript*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end

  end

  @[Extern]
  record IMLangConvertCharsetVtbl,
    query_interface : Proc(IMLangConvertCharset*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangConvertCharset*, UInt32),
    release : Proc(IMLangConvertCharset*, UInt32),
    initialize__ : Proc(IMLangConvertCharset*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_source_code_page : Proc(IMLangConvertCharset*, UInt32*, Win32cr::Foundation::HRESULT),
    get_destination_code_page : Proc(IMLangConvertCharset*, UInt32*, Win32cr::Foundation::HRESULT),
    get_property : Proc(IMLangConvertCharset*, UInt32*, Win32cr::Foundation::HRESULT),
    do_conversion : Proc(IMLangConvertCharset*, UInt8*, UInt32*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    do_conversion_to_unicode : Proc(IMLangConvertCharset*, Win32cr::Foundation::PSTR, UInt32*, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    do_conversion_from_unicode : Proc(IMLangConvertCharset*, UInt16*, UInt32*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d66d6f98-cdaa-11d0-b822-00c04fc9b31f")]
  record IMLangConvertCharset, lpVtbl : IMLangConvertCharsetVtbl* do
    GUID = LibC::GUID.new(0xd66d6f98_u32, 0xcdaa_u16, 0x11d0_u16, StaticArray[0xb8_u8, 0x22_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc9_u8, 0xb3_u8, 0x1f_u8])
    def query_interface(this : IMLangConvertCharset*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangConvertCharset*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangConvertCharset*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IMLangConvertCharset*, uiSrcCodePage : UInt32, uiDstCodePage : UInt32, dwProperty : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, uiSrcCodePage, uiDstCodePage, dwProperty)
    end
    def get_source_code_page(this : IMLangConvertCharset*, puiSrcCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_code_page.call(this, puiSrcCodePage)
    end
    def get_destination_code_page(this : IMLangConvertCharset*, puiDstCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_destination_code_page.call(this, puiDstCodePage)
    end
    def get_property(this : IMLangConvertCharset*, pdwProperty : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, pdwProperty)
    end
    def do_conversion(this : IMLangConvertCharset*, pSrcStr : UInt8*, pcSrcSize : UInt32*, pDstStr : UInt8*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.do_conversion.call(this, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def do_conversion_to_unicode(this : IMLangConvertCharset*, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : UInt32*, pDstStr : UInt16*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.do_conversion_to_unicode.call(this, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def do_conversion_from_unicode(this : IMLangConvertCharset*, pSrcStr : UInt16*, pcSrcSize : UInt32*, pDstStr : Win32cr::Foundation::PSTR, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.do_conversion_from_unicode.call(this, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end

  end

  @[Extern]
  record IMultiLanguageVtbl,
    query_interface : Proc(IMultiLanguage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultiLanguage*, UInt32),
    release : Proc(IMultiLanguage*, UInt32),
    get_number_of_code_page_info : Proc(IMultiLanguage*, UInt32*, Win32cr::Foundation::HRESULT),
    get_code_page_info : Proc(IMultiLanguage*, UInt32, Win32cr::Globalization::MIMECPINFO*, Win32cr::Foundation::HRESULT),
    get_family_code_page : Proc(IMultiLanguage*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    enum_code_pages : Proc(IMultiLanguage*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_charset_info : Proc(IMultiLanguage*, Win32cr::Foundation::BSTR, Win32cr::Globalization::MIMECSETINFO*, Win32cr::Foundation::HRESULT),
    is_convertible : Proc(IMultiLanguage*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    convert_string : Proc(IMultiLanguage*, UInt32*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_to_unicode : Proc(IMultiLanguage*, UInt32*, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_from_unicode : Proc(IMultiLanguage*, UInt32*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_reset : Proc(IMultiLanguage*, Win32cr::Foundation::HRESULT),
    get_rfc1766_from_lcid : Proc(IMultiLanguage*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_lcid_from_rfc1766 : Proc(IMultiLanguage*, UInt32*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enum_rfc1766 : Proc(IMultiLanguage*, Void**, Win32cr::Foundation::HRESULT),
    get_rfc1766_info : Proc(IMultiLanguage*, UInt32, Win32cr::Globalization::RFC1766INFO*, Win32cr::Foundation::HRESULT),
    create_convert_charset : Proc(IMultiLanguage*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("275c23e1-3747-11d0-9fea-00aa003f8646")]
  record IMultiLanguage, lpVtbl : IMultiLanguageVtbl* do
    GUID = LibC::GUID.new(0x275c23e1_u32, 0x3747_u16, 0x11d0_u16, StaticArray[0x9f_u8, 0xea_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3f_u8, 0x86_u8, 0x46_u8])
    def query_interface(this : IMultiLanguage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultiLanguage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultiLanguage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_of_code_page_info(this : IMultiLanguage*, pcCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_code_page_info.call(this, pcCodePage)
    end
    def get_code_page_info(this : IMultiLanguage*, uiCodePage : UInt32, pCodePageInfo : Win32cr::Globalization::MIMECPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page_info.call(this, uiCodePage, pCodePageInfo)
    end
    def get_family_code_page(this : IMultiLanguage*, uiCodePage : UInt32, puiFamilyCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_family_code_page.call(this, uiCodePage, puiFamilyCodePage)
    end
    def enum_code_pages(this : IMultiLanguage*, grfFlags : UInt32, ppEnumCodePage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_code_pages.call(this, grfFlags, ppEnumCodePage)
    end
    def get_charset_info(this : IMultiLanguage*, charset : Win32cr::Foundation::BSTR, pCharsetInfo : Win32cr::Globalization::MIMECSETINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_charset_info.call(this, charset, pCharsetInfo)
    end
    def is_convertible(this : IMultiLanguage*, dwSrcEncoding : UInt32, dwDstEncoding : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_convertible.call(this, dwSrcEncoding, dwDstEncoding)
    end
    def convert_string(this : IMultiLanguage*, pdwMode : UInt32*, dwSrcEncoding : UInt32, dwDstEncoding : UInt32, pSrcStr : UInt8*, pcSrcSize : UInt32*, pDstStr : UInt8*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string.call(this, pdwMode, dwSrcEncoding, dwDstEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_to_unicode(this : IMultiLanguage*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : UInt32*, pDstStr : UInt16*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_to_unicode.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_from_unicode(this : IMultiLanguage*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : UInt16*, pcSrcSize : UInt32*, pDstStr : Win32cr::Foundation::PSTR, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_from_unicode.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_reset(this : IMultiLanguage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_reset.call(this)
    end
    def get_rfc1766_from_lcid(this : IMultiLanguage*, locale : UInt32, pbstrRfc1766 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rfc1766_from_lcid.call(this, locale, pbstrRfc1766)
    end
    def get_lcid_from_rfc1766(this : IMultiLanguage*, pLocale : UInt32*, bstrRfc1766 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lcid_from_rfc1766.call(this, pLocale, bstrRfc1766)
    end
    def enum_rfc1766(this : IMultiLanguage*, ppEnumRfc1766 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_rfc1766.call(this, ppEnumRfc1766)
    end
    def get_rfc1766_info(this : IMultiLanguage*, locale : UInt32, pRfc1766Info : Win32cr::Globalization::RFC1766INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rfc1766_info.call(this, locale, pRfc1766Info)
    end
    def create_convert_charset(this : IMultiLanguage*, uiSrcCodePage : UInt32, uiDstCodePage : UInt32, dwProperty : UInt32, ppMLangConvertCharset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_convert_charset.call(this, uiSrcCodePage, uiDstCodePage, dwProperty, ppMLangConvertCharset)
    end

  end

  @[Extern]
  record IMultiLanguage2Vtbl,
    query_interface : Proc(IMultiLanguage2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultiLanguage2*, UInt32),
    release : Proc(IMultiLanguage2*, UInt32),
    get_number_of_code_page_info : Proc(IMultiLanguage2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_code_page_info : Proc(IMultiLanguage2*, UInt32, UInt16, Win32cr::Globalization::MIMECPINFO*, Win32cr::Foundation::HRESULT),
    get_family_code_page : Proc(IMultiLanguage2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    enum_code_pages : Proc(IMultiLanguage2*, UInt32, UInt16, Void**, Win32cr::Foundation::HRESULT),
    get_charset_info : Proc(IMultiLanguage2*, Win32cr::Foundation::BSTR, Win32cr::Globalization::MIMECSETINFO*, Win32cr::Foundation::HRESULT),
    is_convertible : Proc(IMultiLanguage2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    convert_string : Proc(IMultiLanguage2*, UInt32*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_to_unicode : Proc(IMultiLanguage2*, UInt32*, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_from_unicode : Proc(IMultiLanguage2*, UInt32*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_reset : Proc(IMultiLanguage2*, Win32cr::Foundation::HRESULT),
    get_rfc1766_from_lcid : Proc(IMultiLanguage2*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_lcid_from_rfc1766 : Proc(IMultiLanguage2*, UInt32*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enum_rfc1766 : Proc(IMultiLanguage2*, UInt16, Void**, Win32cr::Foundation::HRESULT),
    get_rfc1766_info : Proc(IMultiLanguage2*, UInt32, UInt16, Win32cr::Globalization::RFC1766INFO*, Win32cr::Foundation::HRESULT),
    create_convert_charset : Proc(IMultiLanguage2*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    convert_string_in_i_stream : Proc(IMultiLanguage2*, UInt32*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    convert_string_to_unicode_ex : Proc(IMultiLanguage2*, UInt32*, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt16*, UInt32*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    convert_string_from_unicode_ex : Proc(IMultiLanguage2*, UInt32*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::PSTR, UInt32*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    detect_codepage_in_i_stream : Proc(IMultiLanguage2*, UInt32, UInt32, Void*, Win32cr::Globalization::DetectEncodingInfo*, Int32*, Win32cr::Foundation::HRESULT),
    detect_input_codepage : Proc(IMultiLanguage2*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int32*, Win32cr::Globalization::DetectEncodingInfo*, Int32*, Win32cr::Foundation::HRESULT),
    validate_code_page : Proc(IMultiLanguage2*, UInt32, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_code_page_description : Proc(IMultiLanguage2*, UInt32, UInt32, UInt16*, Int32, Win32cr::Foundation::HRESULT),
    is_code_page_installable : Proc(IMultiLanguage2*, UInt32, Win32cr::Foundation::HRESULT),
    set_mime_db_source : Proc(IMultiLanguage2*, Win32cr::Globalization::MIMECONTF, Win32cr::Foundation::HRESULT),
    get_number_of_scripts : Proc(IMultiLanguage2*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_scripts : Proc(IMultiLanguage2*, UInt32, UInt16, Void**, Win32cr::Foundation::HRESULT),
    validate_code_page_ex : Proc(IMultiLanguage2*, UInt32, Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dccfc164-2b38-11d2-b7ec-00c04f8f5d9a")]
  record IMultiLanguage2, lpVtbl : IMultiLanguage2Vtbl* do
    GUID = LibC::GUID.new(0xdccfc164_u32, 0x2b38_u16, 0x11d2_u16, StaticArray[0xb7_u8, 0xec_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8f_u8, 0x5d_u8, 0x9a_u8])
    def query_interface(this : IMultiLanguage2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultiLanguage2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultiLanguage2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_of_code_page_info(this : IMultiLanguage2*, pcCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_code_page_info.call(this, pcCodePage)
    end
    def get_code_page_info(this : IMultiLanguage2*, uiCodePage : UInt32, lang_id : UInt16, pCodePageInfo : Win32cr::Globalization::MIMECPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page_info.call(this, uiCodePage, lang_id, pCodePageInfo)
    end
    def get_family_code_page(this : IMultiLanguage2*, uiCodePage : UInt32, puiFamilyCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_family_code_page.call(this, uiCodePage, puiFamilyCodePage)
    end
    def enum_code_pages(this : IMultiLanguage2*, grfFlags : UInt32, lang_id : UInt16, ppEnumCodePage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_code_pages.call(this, grfFlags, lang_id, ppEnumCodePage)
    end
    def get_charset_info(this : IMultiLanguage2*, charset : Win32cr::Foundation::BSTR, pCharsetInfo : Win32cr::Globalization::MIMECSETINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_charset_info.call(this, charset, pCharsetInfo)
    end
    def is_convertible(this : IMultiLanguage2*, dwSrcEncoding : UInt32, dwDstEncoding : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_convertible.call(this, dwSrcEncoding, dwDstEncoding)
    end
    def convert_string(this : IMultiLanguage2*, pdwMode : UInt32*, dwSrcEncoding : UInt32, dwDstEncoding : UInt32, pSrcStr : UInt8*, pcSrcSize : UInt32*, pDstStr : UInt8*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string.call(this, pdwMode, dwSrcEncoding, dwDstEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_to_unicode(this : IMultiLanguage2*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : UInt32*, pDstStr : UInt16*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_to_unicode.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_from_unicode(this : IMultiLanguage2*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : UInt16*, pcSrcSize : UInt32*, pDstStr : Win32cr::Foundation::PSTR, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_from_unicode.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_reset(this : IMultiLanguage2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_reset.call(this)
    end
    def get_rfc1766_from_lcid(this : IMultiLanguage2*, locale : UInt32, pbstrRfc1766 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rfc1766_from_lcid.call(this, locale, pbstrRfc1766)
    end
    def get_lcid_from_rfc1766(this : IMultiLanguage2*, pLocale : UInt32*, bstrRfc1766 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lcid_from_rfc1766.call(this, pLocale, bstrRfc1766)
    end
    def enum_rfc1766(this : IMultiLanguage2*, lang_id : UInt16, ppEnumRfc1766 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_rfc1766.call(this, lang_id, ppEnumRfc1766)
    end
    def get_rfc1766_info(this : IMultiLanguage2*, locale : UInt32, lang_id : UInt16, pRfc1766Info : Win32cr::Globalization::RFC1766INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rfc1766_info.call(this, locale, lang_id, pRfc1766Info)
    end
    def create_convert_charset(this : IMultiLanguage2*, uiSrcCodePage : UInt32, uiDstCodePage : UInt32, dwProperty : UInt32, ppMLangConvertCharset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_convert_charset.call(this, uiSrcCodePage, uiDstCodePage, dwProperty, ppMLangConvertCharset)
    end
    def convert_string_in_i_stream(this : IMultiLanguage2*, pdwMode : UInt32*, dwFlag : UInt32, lpFallBack : Win32cr::Foundation::PWSTR, dwSrcEncoding : UInt32, dwDstEncoding : UInt32, pstmIn : Void*, pstmOut : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_in_i_stream.call(this, pdwMode, dwFlag, lpFallBack, dwSrcEncoding, dwDstEncoding, pstmIn, pstmOut)
    end
    def convert_string_to_unicode_ex(this : IMultiLanguage2*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : UInt32*, pDstStr : UInt16*, pcDstSize : UInt32*, dwFlag : UInt32, lpFallBack : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_to_unicode_ex.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize, dwFlag, lpFallBack)
    end
    def convert_string_from_unicode_ex(this : IMultiLanguage2*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : UInt16*, pcSrcSize : UInt32*, pDstStr : Win32cr::Foundation::PSTR, pcDstSize : UInt32*, dwFlag : UInt32, lpFallBack : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_from_unicode_ex.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize, dwFlag, lpFallBack)
    end
    def detect_codepage_in_i_stream(this : IMultiLanguage2*, dwFlag : UInt32, dwPrefWinCodePage : UInt32, pstmIn : Void*, lpEncoding : Win32cr::Globalization::DetectEncodingInfo*, pnScores : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_codepage_in_i_stream.call(this, dwFlag, dwPrefWinCodePage, pstmIn, lpEncoding, pnScores)
    end
    def detect_input_codepage(this : IMultiLanguage2*, dwFlag : UInt32, dwPrefWinCodePage : UInt32, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : Int32*, lpEncoding : Win32cr::Globalization::DetectEncodingInfo*, pnScores : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_input_codepage.call(this, dwFlag, dwPrefWinCodePage, pSrcStr, pcSrcSize, lpEncoding, pnScores)
    end
    def validate_code_page(this : IMultiLanguage2*, uiCodePage : UInt32, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_code_page.call(this, uiCodePage, hwnd)
    end
    def get_code_page_description(this : IMultiLanguage2*, uiCodePage : UInt32, lcid : UInt32, lpWideCharStr : UInt16*, cchWideChar : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page_description.call(this, uiCodePage, lcid, lpWideCharStr, cchWideChar)
    end
    def is_code_page_installable(this : IMultiLanguage2*, uiCodePage : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_code_page_installable.call(this, uiCodePage)
    end
    def set_mime_db_source(this : IMultiLanguage2*, dwSource : Win32cr::Globalization::MIMECONTF) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mime_db_source.call(this, dwSource)
    end
    def get_number_of_scripts(this : IMultiLanguage2*, pnScripts : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_scripts.call(this, pnScripts)
    end
    def enum_scripts(this : IMultiLanguage2*, dwFlags : UInt32, lang_id : UInt16, ppEnumScript : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_scripts.call(this, dwFlags, lang_id, ppEnumScript)
    end
    def validate_code_page_ex(this : IMultiLanguage2*, uiCodePage : UInt32, hwnd : Win32cr::Foundation::HWND, dwfIODControl : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_code_page_ex.call(this, uiCodePage, hwnd, dwfIODControl)
    end

  end

  @[Extern]
  record IMLangCodePagesVtbl,
    query_interface : Proc(IMLangCodePages*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangCodePages*, UInt32),
    release : Proc(IMLangCodePages*, UInt32),
    get_char_code_pages : Proc(IMLangCodePages*, UInt16, UInt32*, Win32cr::Foundation::HRESULT),
    get_str_code_pages : Proc(IMLangCodePages*, UInt16*, Int32, UInt32, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    code_page_to_code_pages : Proc(IMLangCodePages*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    code_pages_to_code_page : Proc(IMLangCodePages*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("359f3443-bd4a-11d0-b188-00aa0038c969")]
  record IMLangCodePages, lpVtbl : IMLangCodePagesVtbl* do
    GUID = LibC::GUID.new(0x359f3443_u32, 0xbd4a_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangCodePages*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangCodePages*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangCodePages*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_char_code_pages(this : IMLangCodePages*, chSrc : UInt16, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_char_code_pages.call(this, chSrc, pdwCodePages)
    end
    def get_str_code_pages(this : IMLangCodePages*, pszSrc : UInt16*, cchSrc : Int32, dwPriorityCodePages : UInt32, pdwCodePages : UInt32*, pcchCodePages : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_str_code_pages.call(this, pszSrc, cchSrc, dwPriorityCodePages, pdwCodePages, pcchCodePages)
    end
    def code_page_to_code_pages(this : IMLangCodePages*, uCodePage : UInt32, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.code_page_to_code_pages.call(this, uCodePage, pdwCodePages)
    end
    def code_pages_to_code_page(this : IMLangCodePages*, dwCodePages : UInt32, uDefaultCodePage : UInt32, puCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.code_pages_to_code_page.call(this, dwCodePages, uDefaultCodePage, puCodePage)
    end

  end

  @[Extern]
  record IMLangFontLinkVtbl,
    query_interface : Proc(IMLangFontLink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangFontLink*, UInt32),
    release : Proc(IMLangFontLink*, UInt32),
    get_char_code_pages : Proc(IMLangFontLink*, UInt16, UInt32*, Win32cr::Foundation::HRESULT),
    get_str_code_pages : Proc(IMLangFontLink*, UInt16*, Int32, UInt32, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    code_page_to_code_pages : Proc(IMLangFontLink*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    code_pages_to_code_page : Proc(IMLangFontLink*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_font_code_pages : Proc(IMLangFontLink*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::HFONT, UInt32*, Win32cr::Foundation::HRESULT),
    map_font : Proc(IMLangFontLink*, Win32cr::Graphics::Gdi::HDC, UInt32, Win32cr::Graphics::Gdi::HFONT, Win32cr::Graphics::Gdi::HFONT*, Win32cr::Foundation::HRESULT),
    release_font : Proc(IMLangFontLink*, Win32cr::Graphics::Gdi::HFONT, Win32cr::Foundation::HRESULT),
    reset_font_mapping : Proc(IMLangFontLink*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("359f3441-bd4a-11d0-b188-00aa0038c969")]
  record IMLangFontLink, lpVtbl : IMLangFontLinkVtbl* do
    GUID = LibC::GUID.new(0x359f3441_u32, 0xbd4a_u16, 0x11d0_u16, StaticArray[0xb1_u8, 0x88_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x38_u8, 0xc9_u8, 0x69_u8])
    def query_interface(this : IMLangFontLink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangFontLink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangFontLink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_char_code_pages(this : IMLangFontLink*, chSrc : UInt16, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_char_code_pages.call(this, chSrc, pdwCodePages)
    end
    def get_str_code_pages(this : IMLangFontLink*, pszSrc : UInt16*, cchSrc : Int32, dwPriorityCodePages : UInt32, pdwCodePages : UInt32*, pcchCodePages : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_str_code_pages.call(this, pszSrc, cchSrc, dwPriorityCodePages, pdwCodePages, pcchCodePages)
    end
    def code_page_to_code_pages(this : IMLangFontLink*, uCodePage : UInt32, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.code_page_to_code_pages.call(this, uCodePage, pdwCodePages)
    end
    def code_pages_to_code_page(this : IMLangFontLink*, dwCodePages : UInt32, uDefaultCodePage : UInt32, puCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.code_pages_to_code_page.call(this, dwCodePages, uDefaultCodePage, puCodePage)
    end
    def get_font_code_pages(this : IMLangFontLink*, hDC : Win32cr::Graphics::Gdi::HDC, hFont : Win32cr::Graphics::Gdi::HFONT, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_font_code_pages.call(this, hDC, hFont, pdwCodePages)
    end
    def map_font(this : IMLangFontLink*, hDC : Win32cr::Graphics::Gdi::HDC, dwCodePages : UInt32, hSrcFont : Win32cr::Graphics::Gdi::HFONT, phDestFont : Win32cr::Graphics::Gdi::HFONT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_font.call(this, hDC, dwCodePages, hSrcFont, phDestFont)
    end
    def release_font(this : IMLangFontLink*, hFont : Win32cr::Graphics::Gdi::HFONT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_font.call(this, hFont)
    end
    def reset_font_mapping(this : IMLangFontLink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_font_mapping.call(this)
    end

  end

  @[Extern]
  record IMLangFontLink2Vtbl,
    query_interface : Proc(IMLangFontLink2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMLangFontLink2*, UInt32),
    release : Proc(IMLangFontLink2*, UInt32),
    get_char_code_pages : Proc(IMLangFontLink2*, UInt16, UInt32*, Win32cr::Foundation::HRESULT),
    get_str_code_pages : Proc(IMLangFontLink2*, UInt16*, Int32, UInt32, UInt32*, Int32*, Win32cr::Foundation::HRESULT),
    code_page_to_code_pages : Proc(IMLangFontLink2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    code_pages_to_code_page : Proc(IMLangFontLink2*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_font_code_pages : Proc(IMLangFontLink2*, Win32cr::Graphics::Gdi::HDC, Win32cr::Graphics::Gdi::HFONT, UInt32*, Win32cr::Foundation::HRESULT),
    release_font : Proc(IMLangFontLink2*, Win32cr::Graphics::Gdi::HFONT, Win32cr::Foundation::HRESULT),
    reset_font_mapping : Proc(IMLangFontLink2*, Win32cr::Foundation::HRESULT),
    map_font : Proc(IMLangFontLink2*, Win32cr::Graphics::Gdi::HDC, UInt32, UInt16, Win32cr::Graphics::Gdi::HFONT*, Win32cr::Foundation::HRESULT),
    get_font_unicode_ranges : Proc(IMLangFontLink2*, Win32cr::Graphics::Gdi::HDC, UInt32*, Win32cr::Globalization::UNICODERANGE*, Win32cr::Foundation::HRESULT),
    get_script_font_info : Proc(IMLangFontLink2*, UInt8, UInt32, UInt32*, Win32cr::Globalization::SCRIPFONTINFO*, Win32cr::Foundation::HRESULT),
    code_page_to_script_id : Proc(IMLangFontLink2*, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dccfc162-2b38-11d2-b7ec-00c04f8f5d9a")]
  record IMLangFontLink2, lpVtbl : IMLangFontLink2Vtbl* do
    GUID = LibC::GUID.new(0xdccfc162_u32, 0x2b38_u16, 0x11d2_u16, StaticArray[0xb7_u8, 0xec_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8f_u8, 0x5d_u8, 0x9a_u8])
    def query_interface(this : IMLangFontLink2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMLangFontLink2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMLangFontLink2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_char_code_pages(this : IMLangFontLink2*, chSrc : UInt16, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_char_code_pages.call(this, chSrc, pdwCodePages)
    end
    def get_str_code_pages(this : IMLangFontLink2*, pszSrc : UInt16*, cchSrc : Int32, dwPriorityCodePages : UInt32, pdwCodePages : UInt32*, pcchCodePages : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_str_code_pages.call(this, pszSrc, cchSrc, dwPriorityCodePages, pdwCodePages, pcchCodePages)
    end
    def code_page_to_code_pages(this : IMLangFontLink2*, uCodePage : UInt32, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.code_page_to_code_pages.call(this, uCodePage, pdwCodePages)
    end
    def code_pages_to_code_page(this : IMLangFontLink2*, dwCodePages : UInt32, uDefaultCodePage : UInt32, puCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.code_pages_to_code_page.call(this, dwCodePages, uDefaultCodePage, puCodePage)
    end
    def get_font_code_pages(this : IMLangFontLink2*, hDC : Win32cr::Graphics::Gdi::HDC, hFont : Win32cr::Graphics::Gdi::HFONT, pdwCodePages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_font_code_pages.call(this, hDC, hFont, pdwCodePages)
    end
    def release_font(this : IMLangFontLink2*, hFont : Win32cr::Graphics::Gdi::HFONT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_font.call(this, hFont)
    end
    def reset_font_mapping(this : IMLangFontLink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_font_mapping.call(this)
    end
    def map_font(this : IMLangFontLink2*, hDC : Win32cr::Graphics::Gdi::HDC, dwCodePages : UInt32, chSrc : UInt16, pFont : Win32cr::Graphics::Gdi::HFONT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_font.call(this, hDC, dwCodePages, chSrc, pFont)
    end
    def get_font_unicode_ranges(this : IMLangFontLink2*, hDC : Win32cr::Graphics::Gdi::HDC, puiRanges : UInt32*, pUranges : Win32cr::Globalization::UNICODERANGE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_font_unicode_ranges.call(this, hDC, puiRanges, pUranges)
    end
    def get_script_font_info(this : IMLangFontLink2*, sid : UInt8, dwFlags : UInt32, puiFonts : UInt32*, pScriptFont : Win32cr::Globalization::SCRIPFONTINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_script_font_info.call(this, sid, dwFlags, puiFonts, pScriptFont)
    end
    def code_page_to_script_id(this : IMLangFontLink2*, uiCodePage : UInt32, pSid : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.code_page_to_script_id.call(this, uiCodePage, pSid)
    end

  end

  @[Extern]
  record IMultiLanguage3Vtbl,
    query_interface : Proc(IMultiLanguage3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultiLanguage3*, UInt32),
    release : Proc(IMultiLanguage3*, UInt32),
    get_number_of_code_page_info : Proc(IMultiLanguage3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_code_page_info : Proc(IMultiLanguage3*, UInt32, UInt16, Win32cr::Globalization::MIMECPINFO*, Win32cr::Foundation::HRESULT),
    get_family_code_page : Proc(IMultiLanguage3*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    enum_code_pages : Proc(IMultiLanguage3*, UInt32, UInt16, Void**, Win32cr::Foundation::HRESULT),
    get_charset_info : Proc(IMultiLanguage3*, Win32cr::Foundation::BSTR, Win32cr::Globalization::MIMECSETINFO*, Win32cr::Foundation::HRESULT),
    is_convertible : Proc(IMultiLanguage3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    convert_string : Proc(IMultiLanguage3*, UInt32*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_to_unicode : Proc(IMultiLanguage3*, UInt32*, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_from_unicode : Proc(IMultiLanguage3*, UInt32*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::PSTR, UInt32*, Win32cr::Foundation::HRESULT),
    convert_string_reset : Proc(IMultiLanguage3*, Win32cr::Foundation::HRESULT),
    get_rfc1766_from_lcid : Proc(IMultiLanguage3*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_lcid_from_rfc1766 : Proc(IMultiLanguage3*, UInt32*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enum_rfc1766 : Proc(IMultiLanguage3*, UInt16, Void**, Win32cr::Foundation::HRESULT),
    get_rfc1766_info : Proc(IMultiLanguage3*, UInt32, UInt16, Win32cr::Globalization::RFC1766INFO*, Win32cr::Foundation::HRESULT),
    create_convert_charset : Proc(IMultiLanguage3*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    convert_string_in_i_stream : Proc(IMultiLanguage3*, UInt32*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    convert_string_to_unicode_ex : Proc(IMultiLanguage3*, UInt32*, UInt32, Win32cr::Foundation::PSTR, UInt32*, UInt16*, UInt32*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    convert_string_from_unicode_ex : Proc(IMultiLanguage3*, UInt32*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::PSTR, UInt32*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    detect_codepage_in_i_stream : Proc(IMultiLanguage3*, UInt32, UInt32, Void*, Win32cr::Globalization::DetectEncodingInfo*, Int32*, Win32cr::Foundation::HRESULT),
    detect_input_codepage : Proc(IMultiLanguage3*, UInt32, UInt32, Win32cr::Foundation::PSTR, Int32*, Win32cr::Globalization::DetectEncodingInfo*, Int32*, Win32cr::Foundation::HRESULT),
    validate_code_page : Proc(IMultiLanguage3*, UInt32, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_code_page_description : Proc(IMultiLanguage3*, UInt32, UInt32, UInt16*, Int32, Win32cr::Foundation::HRESULT),
    is_code_page_installable : Proc(IMultiLanguage3*, UInt32, Win32cr::Foundation::HRESULT),
    set_mime_db_source : Proc(IMultiLanguage3*, Win32cr::Globalization::MIMECONTF, Win32cr::Foundation::HRESULT),
    get_number_of_scripts : Proc(IMultiLanguage3*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_scripts : Proc(IMultiLanguage3*, UInt32, UInt16, Void**, Win32cr::Foundation::HRESULT),
    validate_code_page_ex : Proc(IMultiLanguage3*, UInt32, Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::HRESULT),
    detect_outbound_code_page : Proc(IMultiLanguage3*, UInt32, UInt16*, UInt32, UInt32*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    detect_outbound_code_page_in_i_stream : Proc(IMultiLanguage3*, UInt32, Void*, UInt32*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4e5868ab-b157-4623-9acc-6a1d9caebe04")]
  record IMultiLanguage3, lpVtbl : IMultiLanguage3Vtbl* do
    GUID = LibC::GUID.new(0x4e5868ab_u32, 0xb157_u16, 0x4623_u16, StaticArray[0x9a_u8, 0xcc_u8, 0x6a_u8, 0x1d_u8, 0x9c_u8, 0xae_u8, 0xbe_u8, 0x4_u8])
    def query_interface(this : IMultiLanguage3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultiLanguage3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultiLanguage3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_of_code_page_info(this : IMultiLanguage3*, pcCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_code_page_info.call(this, pcCodePage)
    end
    def get_code_page_info(this : IMultiLanguage3*, uiCodePage : UInt32, lang_id : UInt16, pCodePageInfo : Win32cr::Globalization::MIMECPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page_info.call(this, uiCodePage, lang_id, pCodePageInfo)
    end
    def get_family_code_page(this : IMultiLanguage3*, uiCodePage : UInt32, puiFamilyCodePage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_family_code_page.call(this, uiCodePage, puiFamilyCodePage)
    end
    def enum_code_pages(this : IMultiLanguage3*, grfFlags : UInt32, lang_id : UInt16, ppEnumCodePage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_code_pages.call(this, grfFlags, lang_id, ppEnumCodePage)
    end
    def get_charset_info(this : IMultiLanguage3*, charset : Win32cr::Foundation::BSTR, pCharsetInfo : Win32cr::Globalization::MIMECSETINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_charset_info.call(this, charset, pCharsetInfo)
    end
    def is_convertible(this : IMultiLanguage3*, dwSrcEncoding : UInt32, dwDstEncoding : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_convertible.call(this, dwSrcEncoding, dwDstEncoding)
    end
    def convert_string(this : IMultiLanguage3*, pdwMode : UInt32*, dwSrcEncoding : UInt32, dwDstEncoding : UInt32, pSrcStr : UInt8*, pcSrcSize : UInt32*, pDstStr : UInt8*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string.call(this, pdwMode, dwSrcEncoding, dwDstEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_to_unicode(this : IMultiLanguage3*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : UInt32*, pDstStr : UInt16*, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_to_unicode.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_from_unicode(this : IMultiLanguage3*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : UInt16*, pcSrcSize : UInt32*, pDstStr : Win32cr::Foundation::PSTR, pcDstSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_from_unicode.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize)
    end
    def convert_string_reset(this : IMultiLanguage3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_reset.call(this)
    end
    def get_rfc1766_from_lcid(this : IMultiLanguage3*, locale : UInt32, pbstrRfc1766 : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rfc1766_from_lcid.call(this, locale, pbstrRfc1766)
    end
    def get_lcid_from_rfc1766(this : IMultiLanguage3*, pLocale : UInt32*, bstrRfc1766 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lcid_from_rfc1766.call(this, pLocale, bstrRfc1766)
    end
    def enum_rfc1766(this : IMultiLanguage3*, lang_id : UInt16, ppEnumRfc1766 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_rfc1766.call(this, lang_id, ppEnumRfc1766)
    end
    def get_rfc1766_info(this : IMultiLanguage3*, locale : UInt32, lang_id : UInt16, pRfc1766Info : Win32cr::Globalization::RFC1766INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rfc1766_info.call(this, locale, lang_id, pRfc1766Info)
    end
    def create_convert_charset(this : IMultiLanguage3*, uiSrcCodePage : UInt32, uiDstCodePage : UInt32, dwProperty : UInt32, ppMLangConvertCharset : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_convert_charset.call(this, uiSrcCodePage, uiDstCodePage, dwProperty, ppMLangConvertCharset)
    end
    def convert_string_in_i_stream(this : IMultiLanguage3*, pdwMode : UInt32*, dwFlag : UInt32, lpFallBack : Win32cr::Foundation::PWSTR, dwSrcEncoding : UInt32, dwDstEncoding : UInt32, pstmIn : Void*, pstmOut : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_in_i_stream.call(this, pdwMode, dwFlag, lpFallBack, dwSrcEncoding, dwDstEncoding, pstmIn, pstmOut)
    end
    def convert_string_to_unicode_ex(this : IMultiLanguage3*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : UInt32*, pDstStr : UInt16*, pcDstSize : UInt32*, dwFlag : UInt32, lpFallBack : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_to_unicode_ex.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize, dwFlag, lpFallBack)
    end
    def convert_string_from_unicode_ex(this : IMultiLanguage3*, pdwMode : UInt32*, dwEncoding : UInt32, pSrcStr : UInt16*, pcSrcSize : UInt32*, pDstStr : Win32cr::Foundation::PSTR, pcDstSize : UInt32*, dwFlag : UInt32, lpFallBack : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_string_from_unicode_ex.call(this, pdwMode, dwEncoding, pSrcStr, pcSrcSize, pDstStr, pcDstSize, dwFlag, lpFallBack)
    end
    def detect_codepage_in_i_stream(this : IMultiLanguage3*, dwFlag : UInt32, dwPrefWinCodePage : UInt32, pstmIn : Void*, lpEncoding : Win32cr::Globalization::DetectEncodingInfo*, pnScores : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_codepage_in_i_stream.call(this, dwFlag, dwPrefWinCodePage, pstmIn, lpEncoding, pnScores)
    end
    def detect_input_codepage(this : IMultiLanguage3*, dwFlag : UInt32, dwPrefWinCodePage : UInt32, pSrcStr : Win32cr::Foundation::PSTR, pcSrcSize : Int32*, lpEncoding : Win32cr::Globalization::DetectEncodingInfo*, pnScores : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_input_codepage.call(this, dwFlag, dwPrefWinCodePage, pSrcStr, pcSrcSize, lpEncoding, pnScores)
    end
    def validate_code_page(this : IMultiLanguage3*, uiCodePage : UInt32, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_code_page.call(this, uiCodePage, hwnd)
    end
    def get_code_page_description(this : IMultiLanguage3*, uiCodePage : UInt32, lcid : UInt32, lpWideCharStr : UInt16*, cchWideChar : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_page_description.call(this, uiCodePage, lcid, lpWideCharStr, cchWideChar)
    end
    def is_code_page_installable(this : IMultiLanguage3*, uiCodePage : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_code_page_installable.call(this, uiCodePage)
    end
    def set_mime_db_source(this : IMultiLanguage3*, dwSource : Win32cr::Globalization::MIMECONTF) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mime_db_source.call(this, dwSource)
    end
    def get_number_of_scripts(this : IMultiLanguage3*, pnScripts : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_scripts.call(this, pnScripts)
    end
    def enum_scripts(this : IMultiLanguage3*, dwFlags : UInt32, lang_id : UInt16, ppEnumScript : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_scripts.call(this, dwFlags, lang_id, ppEnumScript)
    end
    def validate_code_page_ex(this : IMultiLanguage3*, uiCodePage : UInt32, hwnd : Win32cr::Foundation::HWND, dwfIODControl : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate_code_page_ex.call(this, uiCodePage, hwnd, dwfIODControl)
    end
    def detect_outbound_code_page(this : IMultiLanguage3*, dwFlags : UInt32, lpWideCharStr : UInt16*, cchWideChar : UInt32, puiPreferredCodePages : UInt32*, nPreferredCodePages : UInt32, puiDetectedCodePages : UInt32*, pnDetectedCodePages : UInt32*, lpSpecialChar : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_outbound_code_page.call(this, dwFlags, lpWideCharStr, cchWideChar, puiPreferredCodePages, nPreferredCodePages, puiDetectedCodePages, pnDetectedCodePages, lpSpecialChar)
    end
    def detect_outbound_code_page_in_i_stream(this : IMultiLanguage3*, dwFlags : UInt32, pStrIn : Void*, puiPreferredCodePages : UInt32*, nPreferredCodePages : UInt32, puiDetectedCodePages : UInt32*, pnDetectedCodePages : UInt32*, lpSpecialChar : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_outbound_code_page_in_i_stream.call(this, dwFlags, pStrIn, puiPreferredCodePages, nPreferredCodePages, puiDetectedCodePages, pnDetectedCodePages, lpSpecialChar)
    end

  end

  @[Link("gdi32")]
  @[Link("kernel32")]
  @[Link("normaliz")]
  @[Link("elscore")]
  @[Link("usp10")]
  @[Link("icu")]
  @[Link("bcp47mrm")]
  @[Link("advapi32")]
  lib C
    fun GetTextCharset(hdc : Win32cr::Graphics::Gdi::HDC) : Int32

    fun GetTextCharsetInfo(hdc : Win32cr::Graphics::Gdi::HDC, lpSig : Win32cr::Globalization::FONTSIGNATURE*, dwFlags : UInt32) : Int32

    fun TranslateCharsetInfo(lpSrc : UInt32*, lpCs : Win32cr::Globalization::CHARSETINFO*, dwFlags : Win32cr::Globalization::TRANSLATE_CHARSET_INFO_FLAGS) : Win32cr::Foundation::BOOL

    fun GetDateFormatA(locale : UInt32, dwFlags : UInt32, lpDate : Win32cr::Foundation::SYSTEMTIME*, lpFormat : Win32cr::Foundation::PSTR, lpDateStr : UInt8*, cchDate : Int32) : Int32

    fun GetDateFormatW(locale : UInt32, dwFlags : UInt32, lpDate : Win32cr::Foundation::SYSTEMTIME*, lpFormat : Win32cr::Foundation::PWSTR, lpDateStr : UInt16*, cchDate : Int32) : Int32

    fun GetTimeFormatA(locale : UInt32, dwFlags : UInt32, lpTime : Win32cr::Foundation::SYSTEMTIME*, lpFormat : Win32cr::Foundation::PSTR, lpTimeStr : UInt8*, cchTime : Int32) : Int32

    fun GetTimeFormatW(locale : UInt32, dwFlags : UInt32, lpTime : Win32cr::Foundation::SYSTEMTIME*, lpFormat : Win32cr::Foundation::PWSTR, lpTimeStr : UInt16*, cchTime : Int32) : Int32

    fun GetTimeFormatEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwFlags : Win32cr::Globalization::TIME_FORMAT_FLAGS, lpTime : Win32cr::Foundation::SYSTEMTIME*, lpFormat : Win32cr::Foundation::PWSTR, lpTimeStr : UInt16*, cchTime : Int32) : Int32

    fun GetDateFormatEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwFlags : Win32cr::Globalization::ENUM_DATE_FORMATS_FLAGS, lpDate : Win32cr::Foundation::SYSTEMTIME*, lpFormat : Win32cr::Foundation::PWSTR, lpDateStr : UInt16*, cchDate : Int32, lpCalendar : Win32cr::Foundation::PWSTR) : Int32

    fun GetDurationFormatEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, lpDuration : Win32cr::Foundation::SYSTEMTIME*, ullDuration : UInt64, lpFormat : Win32cr::Foundation::PWSTR, lpDurationStr : UInt16*, cchDuration : Int32) : Int32

    fun CompareStringEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwCmpFlags : Win32cr::Globalization::COMPARE_STRING_FLAGS, lpString1 : UInt16*, cchCount1 : Int32, lpString2 : UInt16*, cchCount2 : Int32, lpVersionInformation : Win32cr::Globalization::NLSVERSIONINFO*, lpReserved : Void*, lParam : Win32cr::Foundation::LPARAM) : Int32

    fun CompareStringOrdinal(lpString1 : UInt16*, cchCount1 : Int32, lpString2 : UInt16*, cchCount2 : Int32, bIgnoreCase : Win32cr::Foundation::BOOL) : Int32

    fun CompareStringW(locale : UInt32, dwCmpFlags : UInt32, lpString1 : UInt16*, cchCount1 : Int32, lpString2 : UInt16*, cchCount2 : Int32) : Int32

    fun FoldStringW(dwMapFlags : Win32cr::Globalization::FOLD_STRING_MAP_FLAGS, lpSrcStr : UInt16*, cchSrc : Int32, lpDestStr : UInt16*, cchDest : Int32) : Int32

    fun GetStringTypeExW(locale : UInt32, dwInfoType : UInt32, lpSrcStr : UInt16*, cchSrc : Int32, lpCharType : UInt16*) : Win32cr::Foundation::BOOL

    fun GetStringTypeW(dwInfoType : UInt32, lpSrcStr : UInt16*, cchSrc : Int32, lpCharType : UInt16*) : Win32cr::Foundation::BOOL

    # Commented out due to being part of LibC
    #fun MultiByteToWideChar(code_page : UInt32, dwFlags : Win32cr::Globalization::MULTI_BYTE_TO_WIDE_CHAR_FLAGS, lpMultiByteStr : UInt8*, cbMultiByte : Int32, lpWideCharStr : UInt16*, cchWideChar : Int32) : Int32

    # Commented out due to being part of LibC
    #fun WideCharToMultiByte(code_page : UInt32, dwFlags : UInt32, lpWideCharStr : UInt16*, cchWideChar : Int32, lpMultiByteStr : Win32cr::Foundation::PSTR, cbMultiByte : Int32, lpDefaultChar : Win32cr::Foundation::PSTR, lpUsedDefaultChar : Int32*) : Int32

    # Commented out due to being part of LibC
    #fun IsValidCodePage(code_page : UInt32) : Win32cr::Foundation::BOOL

    fun GetACP : UInt32

    fun GetOEMCP : UInt32

    fun GetCPInfo(code_page : UInt32, lpCPInfo : Win32cr::Globalization::CPINFO*) : Win32cr::Foundation::BOOL

    fun GetCPInfoExA(code_page : UInt32, dwFlags : UInt32, lpCPInfoEx : Win32cr::Globalization::CPINFOEXA*) : Win32cr::Foundation::BOOL

    fun GetCPInfoExW(code_page : UInt32, dwFlags : UInt32, lpCPInfoEx : Win32cr::Globalization::CPINFOEXW*) : Win32cr::Foundation::BOOL

    fun CompareStringA(locale : UInt32, dwCmpFlags : UInt32, lpString1 : Int8*, cchCount1 : Int32, lpString2 : Int8*, cchCount2 : Int32) : Int32

    fun FindNLSString(locale : UInt32, dwFindNLSStringFlags : UInt32, lpStringSource : UInt16*, cchSource : Int32, lpStringValue : UInt16*, cchValue : Int32, pcchFound : Int32*) : Int32

    fun LCMapStringW(locale : UInt32, dwMapFlags : UInt32, lpSrcStr : UInt16*, cchSrc : Int32, lpDestStr : Win32cr::Foundation::PWSTR, cchDest : Int32) : Int32

    fun LCMapStringA(locale : UInt32, dwMapFlags : UInt32, lpSrcStr : UInt8*, cchSrc : Int32, lpDestStr : Win32cr::Foundation::PSTR, cchDest : Int32) : Int32

    fun GetLocaleInfoW(locale : UInt32, lc_type : UInt32, lpLCData : UInt16*, cchData : Int32) : Int32

    fun GetLocaleInfoA(locale : UInt32, lc_type : UInt32, lpLCData : UInt8*, cchData : Int32) : Int32

    fun SetLocaleInfoA(locale : UInt32, lc_type : UInt32, lpLCData : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun SetLocaleInfoW(locale : UInt32, lc_type : UInt32, lpLCData : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun GetCalendarInfoA(locale : UInt32, calendar : UInt32, cal_type : UInt32, lpCalData : UInt8*, cchData : Int32, lpValue : UInt32*) : Int32

    fun GetCalendarInfoW(locale : UInt32, calendar : UInt32, cal_type : UInt32, lpCalData : UInt16*, cchData : Int32, lpValue : UInt32*) : Int32

    fun SetCalendarInfoA(locale : UInt32, calendar : UInt32, cal_type : UInt32, lpCalData : Win32cr::Foundation::PSTR) : Win32cr::Foundation::BOOL

    fun SetCalendarInfoW(locale : UInt32, calendar : UInt32, cal_type : UInt32, lpCalData : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun IsDBCSLeadByte(test_char : UInt8) : Win32cr::Foundation::BOOL

    fun IsDBCSLeadByteEx(code_page : UInt32, test_char : UInt8) : Win32cr::Foundation::BOOL

    fun LocaleNameToLCID(lpName : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : UInt32

    fun LCIDToLocaleName(locale : UInt32, lpName : UInt16*, cchName : Int32, dwFlags : UInt32) : Int32

    fun GetDurationFormat(locale : UInt32, dwFlags : UInt32, lpDuration : Win32cr::Foundation::SYSTEMTIME*, ullDuration : UInt64, lpFormat : Win32cr::Foundation::PWSTR, lpDurationStr : UInt16*, cchDuration : Int32) : Int32

    fun GetNumberFormatA(locale : UInt32, dwFlags : UInt32, lpValue : Win32cr::Foundation::PSTR, lpFormat : Win32cr::Globalization::NUMBERFMTA*, lpNumberStr : UInt8*, cchNumber : Int32) : Int32

    fun GetNumberFormatW(locale : UInt32, dwFlags : UInt32, lpValue : Win32cr::Foundation::PWSTR, lpFormat : Win32cr::Globalization::NUMBERFMTW*, lpNumberStr : UInt16*, cchNumber : Int32) : Int32

    fun GetCurrencyFormatA(locale : UInt32, dwFlags : UInt32, lpValue : Win32cr::Foundation::PSTR, lpFormat : Win32cr::Globalization::CURRENCYFMTA*, lpCurrencyStr : UInt8*, cchCurrency : Int32) : Int32

    fun GetCurrencyFormatW(locale : UInt32, dwFlags : UInt32, lpValue : Win32cr::Foundation::PWSTR, lpFormat : Win32cr::Globalization::CURRENCYFMTW*, lpCurrencyStr : UInt16*, cchCurrency : Int32) : Int32

    fun EnumCalendarInfoA(lpCalInfoEnumProc : Win32cr::Globalization::CALINFO_ENUMPROCA, locale : UInt32, calendar : UInt32, cal_type : UInt32) : Win32cr::Foundation::BOOL

    fun EnumCalendarInfoW(lpCalInfoEnumProc : Win32cr::Globalization::CALINFO_ENUMPROCW, locale : UInt32, calendar : UInt32, cal_type : UInt32) : Win32cr::Foundation::BOOL

    fun EnumCalendarInfoExA(lpCalInfoEnumProcEx : Win32cr::Globalization::CALINFO_ENUMPROCEXA, locale : UInt32, calendar : UInt32, cal_type : UInt32) : Win32cr::Foundation::BOOL

    fun EnumCalendarInfoExW(lpCalInfoEnumProcEx : Win32cr::Globalization::CALINFO_ENUMPROCEXW, locale : UInt32, calendar : UInt32, cal_type : UInt32) : Win32cr::Foundation::BOOL

    fun EnumTimeFormatsA(lpTimeFmtEnumProc : Win32cr::Globalization::TIMEFMT_ENUMPROCA, locale : UInt32, dwFlags : Win32cr::Globalization::TIME_FORMAT_FLAGS) : Win32cr::Foundation::BOOL

    fun EnumTimeFormatsW(lpTimeFmtEnumProc : Win32cr::Globalization::TIMEFMT_ENUMPROCW, locale : UInt32, dwFlags : Win32cr::Globalization::TIME_FORMAT_FLAGS) : Win32cr::Foundation::BOOL

    fun EnumDateFormatsA(lpDateFmtEnumProc : Win32cr::Globalization::DATEFMT_ENUMPROCA, locale : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun EnumDateFormatsW(lpDateFmtEnumProc : Win32cr::Globalization::DATEFMT_ENUMPROCW, locale : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun EnumDateFormatsExA(lpDateFmtEnumProcEx : Win32cr::Globalization::DATEFMT_ENUMPROCEXA, locale : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun EnumDateFormatsExW(lpDateFmtEnumProcEx : Win32cr::Globalization::DATEFMT_ENUMPROCEXW, locale : UInt32, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun IsValidLanguageGroup(language_group : UInt32, dwFlags : Win32cr::Globalization::ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS) : Win32cr::Foundation::BOOL

    fun GetNLSVersion(function : UInt32, locale : UInt32, lpVersionInformation : Win32cr::Globalization::NLSVERSIONINFO*) : Win32cr::Foundation::BOOL

    fun IsValidLocale(locale : UInt32, dwFlags : Win32cr::Globalization::IS_VALID_LOCALE_FLAGS) : Win32cr::Foundation::BOOL

    fun GetGeoInfoA(location : Int32, geo_type : UInt32, lpGeoData : UInt8*, cchData : Int32, lang_id : UInt16) : Int32

    fun GetGeoInfoW(location : Int32, geo_type : UInt32, lpGeoData : UInt16*, cchData : Int32, lang_id : UInt16) : Int32

    fun GetGeoInfoEx(location : Win32cr::Foundation::PWSTR, geoType : UInt32, geoData : UInt16*, geoDataCount : Int32) : Int32

    fun EnumSystemGeoID(geo_class : UInt32, parent_geo_id : Int32, lpGeoEnumProc : Win32cr::Globalization::GEO_ENUMPROC) : Win32cr::Foundation::BOOL

    fun EnumSystemGeoNames(geoClass : UInt32, geoEnumProc : Win32cr::Globalization::GEO_ENUMNAMEPROC, data : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::BOOL

    fun GetUserGeoID(geo_class : UInt32) : Int32

    fun GetUserDefaultGeoName(geoName : UInt16*, geoNameCount : Int32) : Int32

    fun SetUserGeoID(geo_id : Int32) : Win32cr::Foundation::BOOL

    fun SetUserGeoName(geoName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun ConvertDefaultLocale(locale : UInt32) : UInt32

    fun GetSystemDefaultUILanguage : UInt16

    fun GetThreadLocale : UInt32

    fun SetThreadLocale(locale : UInt32) : Win32cr::Foundation::BOOL

    fun GetUserDefaultUILanguage : UInt16

    fun GetUserDefaultLangID : UInt16

    fun GetSystemDefaultLangID : UInt16

    fun GetSystemDefaultLCID : UInt32

    fun GetUserDefaultLCID : UInt32

    fun SetThreadUILanguage(lang_id : UInt16) : UInt16

    fun GetThreadUILanguage : UInt16

    fun GetProcessPreferredUILanguages(dwFlags : UInt32, pulNumLanguages : UInt32*, pwszLanguagesBuffer : UInt16*, pcchLanguagesBuffer : UInt32*) : Win32cr::Foundation::BOOL

    fun SetProcessPreferredUILanguages(dwFlags : UInt32, pwszLanguagesBuffer : Win32cr::Foundation::PWSTR, pulNumLanguages : UInt32*) : Win32cr::Foundation::BOOL

    fun GetUserPreferredUILanguages(dwFlags : UInt32, pulNumLanguages : UInt32*, pwszLanguagesBuffer : UInt16*, pcchLanguagesBuffer : UInt32*) : Win32cr::Foundation::BOOL

    fun GetSystemPreferredUILanguages(dwFlags : UInt32, pulNumLanguages : UInt32*, pwszLanguagesBuffer : UInt16*, pcchLanguagesBuffer : UInt32*) : Win32cr::Foundation::BOOL

    fun GetThreadPreferredUILanguages(dwFlags : UInt32, pulNumLanguages : UInt32*, pwszLanguagesBuffer : UInt16*, pcchLanguagesBuffer : UInt32*) : Win32cr::Foundation::BOOL

    fun SetThreadPreferredUILanguages(dwFlags : UInt32, pwszLanguagesBuffer : Win32cr::Foundation::PWSTR, pulNumLanguages : UInt32*) : Win32cr::Foundation::BOOL

    fun GetFileMUIInfo(dwFlags : UInt32, pcwszFilePath : Win32cr::Foundation::PWSTR, pFileMUIInfo : Win32cr::Globalization::FILEMUIINFO*, pcbFileMUIInfo : UInt32*) : Win32cr::Foundation::BOOL

    fun GetFileMUIPath(dwFlags : UInt32, pcwszFilePath : Win32cr::Foundation::PWSTR, pwszLanguage : UInt16*, pcchLanguage : UInt32*, pwszFileMUIPath : UInt16*, pcchFileMUIPath : UInt32*, pululEnumerator : UInt64*) : Win32cr::Foundation::BOOL

    fun GetUILanguageInfo(dwFlags : UInt32, pwmszLanguage : Win32cr::Foundation::PWSTR, pwszFallbackLanguages : UInt16*, pcchFallbackLanguages : UInt32*, pAttributes : UInt32*) : Win32cr::Foundation::BOOL

    fun SetThreadPreferredUILanguages2(flags : UInt32, languages : Win32cr::Foundation::PWSTR, numLanguagesSet : UInt32*, snapshot : Win32cr::Globalization::HSAVEDUILANGUAGES*) : Win32cr::Foundation::BOOL

    fun RestoreThreadPreferredUILanguages(snapshot : Win32cr::Globalization::HSAVEDUILANGUAGES) : Void

    fun NotifyUILanguageChange(dwFlags : UInt32, pcwstrNewLanguage : Win32cr::Foundation::PWSTR, pcwstrPreviousLanguage : Win32cr::Foundation::PWSTR, dwReserved : UInt32, pdwStatusRtrn : UInt32*) : Win32cr::Foundation::BOOL

    fun GetStringTypeExA(locale : UInt32, dwInfoType : UInt32, lpSrcStr : UInt8*, cchSrc : Int32, lpCharType : UInt16*) : Win32cr::Foundation::BOOL

    fun GetStringTypeA(locale : UInt32, dwInfoType : UInt32, lpSrcStr : UInt8*, cchSrc : Int32, lpCharType : UInt16*) : Win32cr::Foundation::BOOL

    fun FoldStringA(dwMapFlags : Win32cr::Globalization::FOLD_STRING_MAP_FLAGS, lpSrcStr : UInt8*, cchSrc : Int32, lpDestStr : UInt8*, cchDest : Int32) : Int32

    fun EnumSystemLocalesA(lpLocaleEnumProc : Win32cr::Globalization::LOCALE_ENUMPROCA, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun EnumSystemLocalesW(lpLocaleEnumProc : Win32cr::Globalization::LOCALE_ENUMPROCW, dwFlags : UInt32) : Win32cr::Foundation::BOOL

    fun EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc : Win32cr::Globalization::LANGUAGEGROUP_ENUMPROCA, dwFlags : Win32cr::Globalization::ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS, lParam : LibC::IntPtrT) : Win32cr::Foundation::BOOL

    fun EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc : Win32cr::Globalization::LANGUAGEGROUP_ENUMPROCW, dwFlags : Win32cr::Globalization::ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS, lParam : LibC::IntPtrT) : Win32cr::Foundation::BOOL

    fun EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc : Win32cr::Globalization::LANGGROUPLOCALE_ENUMPROCA, language_group : UInt32, dwFlags : UInt32, lParam : LibC::IntPtrT) : Win32cr::Foundation::BOOL

    fun EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc : Win32cr::Globalization::LANGGROUPLOCALE_ENUMPROCW, language_group : UInt32, dwFlags : UInt32, lParam : LibC::IntPtrT) : Win32cr::Foundation::BOOL

    fun EnumUILanguagesA(lpUILanguageEnumProc : Win32cr::Globalization::UILANGUAGE_ENUMPROCA, dwFlags : UInt32, lParam : LibC::IntPtrT) : Win32cr::Foundation::BOOL

    fun EnumUILanguagesW(lpUILanguageEnumProc : Win32cr::Globalization::UILANGUAGE_ENUMPROCW, dwFlags : UInt32, lParam : LibC::IntPtrT) : Win32cr::Foundation::BOOL

    fun EnumSystemCodePagesA(lpCodePageEnumProc : Win32cr::Globalization::CODEPAGE_ENUMPROCA, dwFlags : Win32cr::Globalization::ENUM_SYSTEM_CODE_PAGES_FLAGS) : Win32cr::Foundation::BOOL

    fun EnumSystemCodePagesW(lpCodePageEnumProc : Win32cr::Globalization::CODEPAGE_ENUMPROCW, dwFlags : Win32cr::Globalization::ENUM_SYSTEM_CODE_PAGES_FLAGS) : Win32cr::Foundation::BOOL

    fun IdnToAscii(dwFlags : UInt32, lpUnicodeCharStr : UInt16*, cchUnicodeChar : Int32, lpASCIICharStr : UInt16*, cchASCIIChar : Int32) : Int32

    fun IdnToUnicode(dwFlags : UInt32, lpASCIICharStr : UInt16*, cchASCIIChar : Int32, lpUnicodeCharStr : UInt16*, cchUnicodeChar : Int32) : Int32

    fun IdnToNameprepUnicode(dwFlags : UInt32, lpUnicodeCharStr : UInt16*, cchUnicodeChar : Int32, lpNameprepCharStr : UInt16*, cchNameprepChar : Int32) : Int32

    fun NormalizeString(norm_form : Win32cr::Globalization::NORM_FORM, lpSrcString : UInt16*, cwSrcLength : Int32, lpDstString : UInt16*, cwDstLength : Int32) : Int32

    fun IsNormalizedString(norm_form : Win32cr::Globalization::NORM_FORM, lpString : UInt16*, cwLength : Int32) : Win32cr::Foundation::BOOL

    fun VerifyScripts(dwFlags : UInt32, lpLocaleScripts : Win32cr::Foundation::PWSTR, cchLocaleScripts : Int32, lpTestScripts : Win32cr::Foundation::PWSTR, cchTestScripts : Int32) : Win32cr::Foundation::BOOL

    fun GetStringScripts(dwFlags : UInt32, lpString : Win32cr::Foundation::PWSTR, cchString : Int32, lpScripts : UInt16*, cchScripts : Int32) : Int32

    fun GetLocaleInfoEx(lpLocaleName : Win32cr::Foundation::PWSTR, lc_type : UInt32, lpLCData : UInt16*, cchData : Int32) : Int32

    fun GetCalendarInfoEx(lpLocaleName : Win32cr::Foundation::PWSTR, calendar : UInt32, lpReserved : Win32cr::Foundation::PWSTR, cal_type : UInt32, lpCalData : UInt16*, cchData : Int32, lpValue : UInt32*) : Int32

    fun GetNumberFormatEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, lpValue : Win32cr::Foundation::PWSTR, lpFormat : Win32cr::Globalization::NUMBERFMTW*, lpNumberStr : UInt16*, cchNumber : Int32) : Int32

    fun GetCurrencyFormatEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, lpValue : Win32cr::Foundation::PWSTR, lpFormat : Win32cr::Globalization::CURRENCYFMTW*, lpCurrencyStr : UInt16*, cchCurrency : Int32) : Int32

    fun GetUserDefaultLocaleName(lpLocaleName : UInt16*, cchLocaleName : Int32) : Int32

    fun GetSystemDefaultLocaleName(lpLocaleName : UInt16*, cchLocaleName : Int32) : Int32

    fun IsNLSDefinedString(function : UInt32, dwFlags : UInt32, lpVersionInformation : Win32cr::Globalization::NLSVERSIONINFO*, lpString : UInt16*, cchStr : Int32) : Win32cr::Foundation::BOOL

    fun GetNLSVersionEx(function : UInt32, lpLocaleName : Win32cr::Foundation::PWSTR, lpVersionInformation : Win32cr::Globalization::NLSVERSIONINFOEX*) : Win32cr::Foundation::BOOL

    fun IsValidNLSVersion(function : UInt32, lpLocaleName : Win32cr::Foundation::PWSTR, lpVersionInformation : Win32cr::Globalization::NLSVERSIONINFOEX*) : UInt32

    fun FindNLSStringEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwFindNLSStringFlags : UInt32, lpStringSource : UInt16*, cchSource : Int32, lpStringValue : UInt16*, cchValue : Int32, pcchFound : Int32*, lpVersionInformation : Win32cr::Globalization::NLSVERSIONINFO*, lpReserved : Void*, sortHandle : Win32cr::Foundation::LPARAM) : Int32

    fun LCMapStringEx(lpLocaleName : Win32cr::Foundation::PWSTR, dwMapFlags : UInt32, lpSrcStr : UInt16*, cchSrc : Int32, lpDestStr : UInt16*, cchDest : Int32, lpVersionInformation : Win32cr::Globalization::NLSVERSIONINFO*, lpReserved : Void*, sortHandle : Win32cr::Foundation::LPARAM) : Int32

    fun IsValidLocaleName(lpLocaleName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL

    fun EnumCalendarInfoExEx(pCalInfoEnumProcExEx : Win32cr::Globalization::CALINFO_ENUMPROCEXEX, lpLocaleName : Win32cr::Foundation::PWSTR, calendar : UInt32, lpReserved : Win32cr::Foundation::PWSTR, cal_type : UInt32, lParam : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::BOOL

    fun EnumDateFormatsExEx(lpDateFmtEnumProcExEx : Win32cr::Globalization::DATEFMT_ENUMPROCEXEX, lpLocaleName : Win32cr::Foundation::PWSTR, dwFlags : Win32cr::Globalization::ENUM_DATE_FORMATS_FLAGS, lParam : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::BOOL

    fun EnumTimeFormatsEx(lpTimeFmtEnumProcEx : Win32cr::Globalization::TIMEFMT_ENUMPROCEX, lpLocaleName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, lParam : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::BOOL

    fun EnumSystemLocalesEx(lpLocaleEnumProcEx : Win32cr::Globalization::LOCALE_ENUMPROCEX, dwFlags : UInt32, lParam : Win32cr::Foundation::LPARAM, lpReserved : Void*) : Win32cr::Foundation::BOOL

    fun ResolveLocaleName(lpNameToResolve : Win32cr::Foundation::PWSTR, lpLocaleName : UInt16*, cchLocaleName : Int32) : Int32

    fun MappingGetServices(pOptions : Win32cr::Globalization::MAPPING_ENUM_OPTIONS*, prgServices : Win32cr::Globalization::MAPPING_SERVICE_INFO**, pdwServicesCount : UInt32*) : Win32cr::Foundation::HRESULT

    fun MappingFreeServices(pServiceInfo : Win32cr::Globalization::MAPPING_SERVICE_INFO*) : Win32cr::Foundation::HRESULT

    fun MappingRecognizeText(pServiceInfo : Win32cr::Globalization::MAPPING_SERVICE_INFO*, pszText : UInt16*, dwLength : UInt32, dwIndex : UInt32, pOptions : Win32cr::Globalization::MAPPING_OPTIONS*, pbag : Win32cr::Globalization::MAPPING_PROPERTY_BAG*) : Win32cr::Foundation::HRESULT

    fun MappingDoAction(pBag : Win32cr::Globalization::MAPPING_PROPERTY_BAG*, dwRangeIndex : UInt32, pszActionId : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT

    fun MappingFreePropertyBag(pBag : Win32cr::Globalization::MAPPING_PROPERTY_BAG*) : Win32cr::Foundation::HRESULT

    fun ScriptFreeCache(psc : Void**) : Win32cr::Foundation::HRESULT

    fun ScriptItemize(pwcInChars : UInt16*, cInChars : Int32, cMaxItems : Int32, psControl : Win32cr::Globalization::SCRIPT_CONTROL*, psState : Win32cr::Globalization::SCRIPT_STATE*, pItems : Win32cr::Globalization::SCRIPT_ITEM*, pcItems : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptLayout(cRuns : Int32, pbLevel : UInt8*, piVisualToLogical : Int32*, piLogicalToVisual : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptShape(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, pwcChars : UInt16*, cChars : Int32, cMaxGlyphs : Int32, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, pwOutGlyphs : UInt16*, pwLogClust : UInt16*, psva : Win32cr::Globalization::SCRIPT_VISATTR*, pcGlyphs : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptPlace(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, pwGlyphs : UInt16*, cGlyphs : Int32, psva : Win32cr::Globalization::SCRIPT_VISATTR*, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, piAdvance : Int32*, pGoffset : Win32cr::Globalization::GOFFSET*, pABC : Win32cr::Graphics::Gdi::ABC*) : Win32cr::Foundation::HRESULT

    fun ScriptTextOut(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, x : Int32, y : Int32, fuOptions : UInt32, lprc : Win32cr::Foundation::RECT*, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, pwcReserved : Win32cr::Foundation::PWSTR, iReserved : Int32, pwGlyphs : UInt16*, cGlyphs : Int32, piAdvance : Int32*, piJustify : Int32*, pGoffset : Win32cr::Globalization::GOFFSET*) : Win32cr::Foundation::HRESULT

    fun ScriptJustify(psva : Win32cr::Globalization::SCRIPT_VISATTR*, piAdvance : Int32*, cGlyphs : Int32, iDx : Int32, iMinKashida : Int32, piJustify : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptBreak(pwcChars : UInt16*, cChars : Int32, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, psla : Win32cr::Globalization::SCRIPT_LOGATTR*) : Win32cr::Foundation::HRESULT

    fun ScriptCPtoX(iCP : Int32, fTrailing : Win32cr::Foundation::BOOL, cChars : Int32, cGlyphs : Int32, pwLogClust : UInt16*, psva : Win32cr::Globalization::SCRIPT_VISATTR*, piAdvance : Int32*, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, piX : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptXtoCP(iX : Int32, cChars : Int32, cGlyphs : Int32, pwLogClust : UInt16*, psva : Win32cr::Globalization::SCRIPT_VISATTR*, piAdvance : Int32*, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, piCP : Int32*, piTrailing : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptGetLogicalWidths(psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, cChars : Int32, cGlyphs : Int32, piGlyphWidth : Int32*, pwLogClust : UInt16*, psva : Win32cr::Globalization::SCRIPT_VISATTR*, piDx : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptApplyLogicalWidth(piDx : Int32*, cChars : Int32, cGlyphs : Int32, pwLogClust : UInt16*, psva : Win32cr::Globalization::SCRIPT_VISATTR*, piAdvance : Int32*, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, pABC : Win32cr::Graphics::Gdi::ABC*, piJustify : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptGetCMap(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, pwcInChars : UInt16*, cChars : Int32, dwFlags : UInt32, pwOutGlyphs : UInt16*) : Win32cr::Foundation::HRESULT

    fun ScriptGetGlyphABCWidth(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, wGlyph : UInt16, pABC : Win32cr::Graphics::Gdi::ABC*) : Win32cr::Foundation::HRESULT

    fun ScriptGetProperties(ppSp : Win32cr::Globalization::SCRIPT_PROPERTIES***, piNumScripts : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptGetFontProperties(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, sfp : Win32cr::Globalization::SCRIPT_FONTPROPERTIES*) : Win32cr::Foundation::HRESULT

    fun ScriptCacheGetHeight(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, tmHeight : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptStringAnalyse(hdc : Win32cr::Graphics::Gdi::HDC, pString : Void*, cString : Int32, cGlyphs : Int32, iCharset : Int32, dwFlags : UInt32, iReqWidth : Int32, psControl : Win32cr::Globalization::SCRIPT_CONTROL*, psState : Win32cr::Globalization::SCRIPT_STATE*, piDx : Int32*, pTabdef : Win32cr::Globalization::SCRIPT_TABDEF*, pbInClass : UInt8*, pssa : Void**) : Win32cr::Foundation::HRESULT

    fun ScriptStringFree(pssa : Void**) : Win32cr::Foundation::HRESULT

    fun ScriptString_pSize(ssa : Void*) : Win32cr::Foundation::SIZE*

    fun ScriptString_pcOutChars(ssa : Void*) : Int32*

    fun ScriptString_pLogAttr(ssa : Void*) : Win32cr::Globalization::SCRIPT_LOGATTR*

    fun ScriptStringGetOrder(ssa : Void*, puOrder : UInt32*) : Win32cr::Foundation::HRESULT

    fun ScriptStringCPtoX(ssa : Void*, icp : Int32, fTrailing : Win32cr::Foundation::BOOL, pX : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptStringXtoCP(ssa : Void*, iX : Int32, piCh : Int32*, piTrailing : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptStringGetLogicalWidths(ssa : Void*, piDx : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptStringValidate(ssa : Void*) : Win32cr::Foundation::HRESULT

    fun ScriptStringOut(ssa : Void*, iX : Int32, iY : Int32, uOptions : Win32cr::Graphics::Gdi::ETO_OPTIONS, prc : Win32cr::Foundation::RECT*, iMinSel : Int32, iMaxSel : Int32, fDisabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT

    fun ScriptIsComplex(pwcInChars : UInt16*, cInChars : Int32, dwFlags : Win32cr::Globalization::SCRIPT_IS_COMPLEX_FLAGS) : Win32cr::Foundation::HRESULT

    fun ScriptRecordDigitSubstitution(locale : UInt32, psds : Win32cr::Globalization::SCRIPT_DIGITSUBSTITUTE*) : Win32cr::Foundation::HRESULT

    fun ScriptApplyDigitSubstitution(psds : Win32cr::Globalization::SCRIPT_DIGITSUBSTITUTE*, psc : Win32cr::Globalization::SCRIPT_CONTROL*, pss : Win32cr::Globalization::SCRIPT_STATE*) : Win32cr::Foundation::HRESULT

    fun ScriptShapeOpenType(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, tagScript : UInt32, tagLangSys : UInt32, rcRangeChars : Int32*, rpRangeProperties : Win32cr::Globalization::Textrange_properties**, cRanges : Int32, pwcChars : UInt16*, cChars : Int32, cMaxGlyphs : Int32, pwLogClust : UInt16*, pCharProps : Win32cr::Globalization::Script_charprop*, pwOutGlyphs : UInt16*, pOutGlyphProps : Win32cr::Globalization::Script_glyphprop*, pcGlyphs : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptPlaceOpenType(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, tagScript : UInt32, tagLangSys : UInt32, rcRangeChars : Int32*, rpRangeProperties : Win32cr::Globalization::Textrange_properties**, cRanges : Int32, pwcChars : UInt16*, pwLogClust : UInt16*, pCharProps : Win32cr::Globalization::Script_charprop*, cChars : Int32, pwGlyphs : UInt16*, pGlyphProps : Win32cr::Globalization::Script_glyphprop*, cGlyphs : Int32, piAdvance : Int32*, pGoffset : Win32cr::Globalization::GOFFSET*, pABC : Win32cr::Graphics::Gdi::ABC*) : Win32cr::Foundation::HRESULT

    fun ScriptItemizeOpenType(pwcInChars : UInt16*, cInChars : Int32, cMaxItems : Int32, psControl : Win32cr::Globalization::SCRIPT_CONTROL*, psState : Win32cr::Globalization::SCRIPT_STATE*, pItems : Win32cr::Globalization::SCRIPT_ITEM*, pScriptTags : UInt32*, pcItems : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptGetFontScriptTags(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, cMaxTags : Int32, pScriptTags : UInt32*, pcTags : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptGetFontLanguageTags(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, tagScript : UInt32, cMaxTags : Int32, pLangsysTags : UInt32*, pcTags : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptGetFontFeatureTags(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, tagScript : UInt32, tagLangSys : UInt32, cMaxTags : Int32, pFeatureTags : UInt32*, pcTags : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptGetFontAlternateGlyphs(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, tagScript : UInt32, tagLangSys : UInt32, tagFeature : UInt32, wGlyphId : UInt16, cMaxAlternates : Int32, pAlternateGlyphs : UInt16*, pcAlternates : Int32*) : Win32cr::Foundation::HRESULT

    fun ScriptSubstituteSingleGlyph(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, tagScript : UInt32, tagLangSys : UInt32, tagFeature : UInt32, lParameter : Int32, wGlyphId : UInt16, pwOutGlyphId : UInt16*) : Win32cr::Foundation::HRESULT

    fun ScriptPositionSingleGlyph(hdc : Win32cr::Graphics::Gdi::HDC, psc : Void**, psa : Win32cr::Globalization::SCRIPT_ANALYSIS*, tagScript : UInt32, tagLangSys : UInt32, tagFeature : UInt32, lParameter : Int32, wGlyphId : UInt16, iAdvance : Int32, g_offset : Win32cr::Globalization::GOFFSET, piOutAdvance : Int32*, pOutGoffset : Win32cr::Globalization::GOFFSET*) : Win32cr::Foundation::HRESULT

    fun utf8_nextCharSafeBody(s : UInt8*, pi : Int32*, length : Int32, c : Int32, strict : Int8) : Int32

    fun utf8_appendCharSafeBody(s : UInt8*, i : Int32, length : Int32, c : Int32, pIsError : Int8*) : Int32

    fun utf8_prevCharSafeBody(s : UInt8*, start : Int32, pi : Int32*, c : Int32, strict : Int8) : Int32

    fun utf8_back1SafeBody(s : UInt8*, start : Int32, i : Int32) : Int32

    fun u_versionFromString(versionArray : UInt8*, versionString : Win32cr::Foundation::PSTR) : Void

    fun u_versionFromUString(versionArray : UInt8*, versionString : UInt16*) : Void

    fun u_versionToString(versionArray : UInt8*, versionString : Win32cr::Foundation::PSTR) : Void

    fun u_getVersion(versionArray : UInt8*) : Void

    fun u_errorName(code : Win32cr::Globalization::UErrorCode) : Win32cr::Foundation::PSTR

    fun utrace_setLevel(traceLevel : Int32) : Void

    fun utrace_getLevel : Int32

    fun utrace_setFunctions(context : Void*, e : Win32cr::Globalization::UTraceEntry, x : Win32cr::Globalization::UTraceExit, d : Win32cr::Globalization::UTraceData) : Void

    fun utrace_getFunctions(context : Void**, e : Win32cr::Globalization::UTraceEntry*, x : Win32cr::Globalization::UTraceExit*, d : Win32cr::Globalization::UTraceData*) : Void

    fun utrace_vformat(outBuf : Win32cr::Foundation::PSTR, capacity : Int32, indent : Int32, fmt : Win32cr::Foundation::PSTR, args : Int8*) : Int32

    fun utrace_format(outBuf : Win32cr::Foundation::PSTR, capacity : Int32, indent : Int32, fmt : Win32cr::Foundation::PSTR) : Int32

    fun utrace_functionName(fnNumber : Int32) : Win32cr::Foundation::PSTR

    fun u_shapeArabic(source : UInt16*, sourceLength : Int32, dest : UInt16*, destSize : Int32, options : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uscript_getCode(nameOrAbbrOrLocale : Win32cr::Foundation::PSTR, fillIn : Win32cr::Globalization::UScriptCode*, capacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uscript_getName(scriptCode : Win32cr::Globalization::UScriptCode) : Win32cr::Foundation::PSTR

    fun uscript_getShortName(scriptCode : Win32cr::Globalization::UScriptCode) : Win32cr::Foundation::PSTR

    fun uscript_getScript(codepoint : Int32, err : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UScriptCode

    fun uscript_hasScript(c : Int32, sc : Win32cr::Globalization::UScriptCode) : Int8

    fun uscript_getScriptExtensions(c : Int32, scripts : Win32cr::Globalization::UScriptCode*, capacity : Int32, errorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uscript_getSampleString(script : Win32cr::Globalization::UScriptCode, dest : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uscript_getUsage(script : Win32cr::Globalization::UScriptCode) : Win32cr::Globalization::UScriptUsage

    fun uscript_isRightToLeft(script : Win32cr::Globalization::UScriptCode) : Int8

    fun uscript_breaksBetweenLetters(script : Win32cr::Globalization::UScriptCode) : Int8

    fun uscript_isCased(script : Win32cr::Globalization::UScriptCode) : Int8

    fun uiter_current32(iter : Win32cr::Globalization::UCharIterator*) : Int32

    fun uiter_next32(iter : Win32cr::Globalization::UCharIterator*) : Int32

    fun uiter_previous32(iter : Win32cr::Globalization::UCharIterator*) : Int32

    fun uiter_getState(iter : Win32cr::Globalization::UCharIterator*) : UInt32

    fun uiter_setState(iter : Win32cr::Globalization::UCharIterator*, state : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun uiter_setString(iter : Win32cr::Globalization::UCharIterator*, s : UInt16*, length : Int32) : Void

    fun uiter_setUTF16BE(iter : Win32cr::Globalization::UCharIterator*, s : Win32cr::Foundation::PSTR, length : Int32) : Void

    fun uiter_setUTF8(iter : Win32cr::Globalization::UCharIterator*, s : Win32cr::Foundation::PSTR, length : Int32) : Void

    fun uenum_close(en : Win32cr::Globalization::UEnumeration*) : Void

    fun uenum_count(en : Win32cr::Globalization::UEnumeration*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uenum_unext(en : Win32cr::Globalization::UEnumeration*, resultLength : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun uenum_next(en : Win32cr::Globalization::UEnumeration*, resultLength : Int32*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun uenum_reset(en : Win32cr::Globalization::UEnumeration*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uenum_openUCharStringsEnumeration(strings : UInt16**, count : Int32, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uenum_openCharStringsEnumeration(strings : Int8**, count : Int32, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uloc_getDefault : Win32cr::Foundation::PSTR

    fun uloc_setDefault(localeID : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uloc_getLanguage(localeID : Win32cr::Foundation::PSTR, language : Win32cr::Foundation::PSTR, languageCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getScript(localeID : Win32cr::Foundation::PSTR, script : Win32cr::Foundation::PSTR, scriptCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getCountry(localeID : Win32cr::Foundation::PSTR, country : Win32cr::Foundation::PSTR, countryCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getVariant(localeID : Win32cr::Foundation::PSTR, variant : Win32cr::Foundation::PSTR, variantCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getName(localeID : Win32cr::Foundation::PSTR, name : Win32cr::Foundation::PSTR, nameCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_canonicalize(localeID : Win32cr::Foundation::PSTR, name : Win32cr::Foundation::PSTR, nameCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getISO3Language(localeID : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun uloc_getISO3Country(localeID : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun uloc_getLCID(localeID : Win32cr::Foundation::PSTR) : UInt32

    fun uloc_getDisplayLanguage(locale : Win32cr::Foundation::PSTR, displayLocale : Win32cr::Foundation::PSTR, language : UInt16*, languageCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getDisplayScript(locale : Win32cr::Foundation::PSTR, displayLocale : Win32cr::Foundation::PSTR, script : UInt16*, scriptCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getDisplayCountry(locale : Win32cr::Foundation::PSTR, displayLocale : Win32cr::Foundation::PSTR, country : UInt16*, countryCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getDisplayVariant(locale : Win32cr::Foundation::PSTR, displayLocale : Win32cr::Foundation::PSTR, variant : UInt16*, variantCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getDisplayKeyword(keyword : Win32cr::Foundation::PSTR, displayLocale : Win32cr::Foundation::PSTR, dest : UInt16*, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getDisplayKeywordValue(locale : Win32cr::Foundation::PSTR, keyword : Win32cr::Foundation::PSTR, displayLocale : Win32cr::Foundation::PSTR, dest : UInt16*, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getDisplayName(localeID : Win32cr::Foundation::PSTR, inLocaleID : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getAvailable(n : Int32) : Win32cr::Foundation::PSTR

    fun uloc_countAvailable : Int32

    fun uloc_openAvailableByType(type__ : Win32cr::Globalization::ULocAvailableType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uloc_getISOLanguages : Int8**

    fun uloc_getISOCountries : Int8**

    fun uloc_getParent(localeID : Win32cr::Foundation::PSTR, parent : Win32cr::Foundation::PSTR, parentCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getBaseName(localeID : Win32cr::Foundation::PSTR, name : Win32cr::Foundation::PSTR, nameCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_openKeywords(localeID : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uloc_getKeywordValue(localeID : Win32cr::Foundation::PSTR, keywordName : Win32cr::Foundation::PSTR, buffer : Win32cr::Foundation::PSTR, bufferCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_setKeywordValue(keywordName : Win32cr::Foundation::PSTR, keywordValue : Win32cr::Foundation::PSTR, buffer : Win32cr::Foundation::PSTR, bufferCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_isRightToLeft(locale : Win32cr::Foundation::PSTR) : Int8

    fun uloc_getCharacterOrientation(localeId : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::ULayoutType

    fun uloc_getLineOrientation(localeId : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::ULayoutType

    fun uloc_acceptLanguageFromHTTP(result : Win32cr::Foundation::PSTR, resultAvailable : Int32, outResult : Win32cr::Globalization::UAcceptResult*, httpAcceptLanguage : Win32cr::Foundation::PSTR, availableLocales : Win32cr::Globalization::UEnumeration*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_acceptLanguage(result : Win32cr::Foundation::PSTR, resultAvailable : Int32, outResult : Win32cr::Globalization::UAcceptResult*, acceptList : Int8**, acceptListCount : Int32, availableLocales : Win32cr::Globalization::UEnumeration*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_getLocaleForLCID(hostID : UInt32, locale : Win32cr::Foundation::PSTR, localeCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_addLikelySubtags(localeID : Win32cr::Foundation::PSTR, maximizedLocaleID : Win32cr::Foundation::PSTR, maximizedLocaleIDCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_minimizeSubtags(localeID : Win32cr::Foundation::PSTR, minimizedLocaleID : Win32cr::Foundation::PSTR, minimizedLocaleIDCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_forLanguageTag(langtag : Win32cr::Foundation::PSTR, localeID : Win32cr::Foundation::PSTR, localeIDCapacity : Int32, parsedLength : Int32*, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_toLanguageTag(localeID : Win32cr::Foundation::PSTR, langtag : Win32cr::Foundation::PSTR, langtagCapacity : Int32, strict : Int8, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun uloc_toUnicodeLocaleKey(keyword : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun uloc_toUnicodeLocaleType(keyword : Win32cr::Foundation::PSTR, value : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun uloc_toLegacyKey(keyword : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun uloc_toLegacyType(keyword : Win32cr::Foundation::PSTR, value : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun ures_open(packageName : Win32cr::Foundation::PSTR, locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UResourceBundle*

    fun ures_openDirect(packageName : Win32cr::Foundation::PSTR, locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UResourceBundle*

    fun ures_openU(packageName : UInt16*, locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UResourceBundle*

    fun ures_close(resourceBundle : Win32cr::Globalization::UResourceBundle*) : Void

    fun ures_getVersion(resB : Win32cr::Globalization::UResourceBundle*, versionInfo : UInt8*) : Void

    fun ures_getLocaleByType(resourceBundle : Win32cr::Globalization::UResourceBundle*, type__ : Win32cr::Globalization::ULocDataLocaleType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ures_getString(resourceBundle : Win32cr::Globalization::UResourceBundle*, len : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ures_getUTF8String(resB : Win32cr::Globalization::UResourceBundle*, dest : Win32cr::Foundation::PSTR, length : Int32*, forceCopy : Int8, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ures_getBinary(resourceBundle : Win32cr::Globalization::UResourceBundle*, len : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt8*

    fun ures_getIntVector(resourceBundle : Win32cr::Globalization::UResourceBundle*, len : Int32*, status : Win32cr::Globalization::UErrorCode*) : Int32*

    fun ures_getUInt(resourceBundle : Win32cr::Globalization::UResourceBundle*, status : Win32cr::Globalization::UErrorCode*) : UInt32

    fun ures_getInt(resourceBundle : Win32cr::Globalization::UResourceBundle*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ures_getSize(resourceBundle : Win32cr::Globalization::UResourceBundle*) : Int32

    fun ures_getType(resourceBundle : Win32cr::Globalization::UResourceBundle*) : Win32cr::Globalization::UResType

    fun ures_getKey(resourceBundle : Win32cr::Globalization::UResourceBundle*) : Win32cr::Foundation::PSTR

    fun ures_resetIterator(resourceBundle : Win32cr::Globalization::UResourceBundle*) : Void

    fun ures_hasNext(resourceBundle : Win32cr::Globalization::UResourceBundle*) : Int8

    fun ures_getNextResource(resourceBundle : Win32cr::Globalization::UResourceBundle*, fillIn : Win32cr::Globalization::UResourceBundle*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UResourceBundle*

    fun ures_getNextString(resourceBundle : Win32cr::Globalization::UResourceBundle*, len : Int32*, key : Int8**, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ures_getByIndex(resourceBundle : Win32cr::Globalization::UResourceBundle*, indexR : Int32, fillIn : Win32cr::Globalization::UResourceBundle*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UResourceBundle*

    fun ures_getStringByIndex(resourceBundle : Win32cr::Globalization::UResourceBundle*, indexS : Int32, len : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ures_getUTF8StringByIndex(resB : Win32cr::Globalization::UResourceBundle*, stringIndex : Int32, dest : Win32cr::Foundation::PSTR, pLength : Int32*, forceCopy : Int8, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ures_getByKey(resourceBundle : Win32cr::Globalization::UResourceBundle*, key : Win32cr::Foundation::PSTR, fillIn : Win32cr::Globalization::UResourceBundle*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UResourceBundle*

    fun ures_getStringByKey(resB : Win32cr::Globalization::UResourceBundle*, key : Win32cr::Foundation::PSTR, len : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ures_getUTF8StringByKey(resB : Win32cr::Globalization::UResourceBundle*, key : Win32cr::Foundation::PSTR, dest : Win32cr::Foundation::PSTR, pLength : Int32*, forceCopy : Int8, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ures_openAvailableLocales(packageName : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uldn_open(locale : Win32cr::Foundation::PSTR, dialectHandling : Win32cr::Globalization::UDialectHandling, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::ULocaleDisplayNames*

    fun uldn_close(ldn : Win32cr::Globalization::ULocaleDisplayNames*) : Void

    fun uldn_getLocale(ldn : Win32cr::Globalization::ULocaleDisplayNames*) : Win32cr::Foundation::PSTR

    fun uldn_getDialectHandling(ldn : Win32cr::Globalization::ULocaleDisplayNames*) : Win32cr::Globalization::UDialectHandling

    fun uldn_localeDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, locale : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_languageDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, lang : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_scriptDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, script : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_scriptCodeDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, scriptCode : Win32cr::Globalization::UScriptCode, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_regionDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, region : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_variantDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, variant : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_keyDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, key : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_keyValueDisplayName(ldn : Win32cr::Globalization::ULocaleDisplayNames*, key : Win32cr::Foundation::PSTR, value : Win32cr::Foundation::PSTR, result : UInt16*, maxResultSize : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uldn_openForContext(locale : Win32cr::Foundation::PSTR, contexts : Win32cr::Globalization::UDisplayContext*, length : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::ULocaleDisplayNames*

    fun uldn_getContext(ldn : Win32cr::Globalization::ULocaleDisplayNames*, type__ : Win32cr::Globalization::UDisplayContextType, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UDisplayContext

    fun ucurr_forLocale(locale : Win32cr::Foundation::PSTR, buff : UInt16*, buffCapacity : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucurr_register(isoCode : UInt16*, locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Void*

    fun ucurr_unregister(key : Void*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun ucurr_getName(currency : UInt16*, locale : Win32cr::Foundation::PSTR, nameStyle : Win32cr::Globalization::UCurrNameStyle, isChoiceFormat : Int8*, len : Int32*, ec : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ucurr_getPluralName(currency : UInt16*, locale : Win32cr::Foundation::PSTR, isChoiceFormat : Int8*, pluralCount : Win32cr::Foundation::PSTR, len : Int32*, ec : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ucurr_getDefaultFractionDigits(currency : UInt16*, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucurr_getDefaultFractionDigitsForUsage(currency : UInt16*, usage : Win32cr::Globalization::UCurrencyUsage, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucurr_getRoundingIncrement(currency : UInt16*, ec : Win32cr::Globalization::UErrorCode*) : Float64

    fun ucurr_getRoundingIncrementForUsage(currency : UInt16*, usage : Win32cr::Globalization::UCurrencyUsage, ec : Win32cr::Globalization::UErrorCode*) : Float64

    fun ucurr_openISOCurrencies(currType : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucurr_isAvailable(isoCode : UInt16*, from : Float64, to : Float64, errorCode : Win32cr::Globalization::UErrorCode*) : Int8

    fun ucurr_countCurrencies(locale : Win32cr::Foundation::PSTR, date : Float64, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucurr_forLocaleAndDate(locale : Win32cr::Foundation::PSTR, date : Float64, index : Int32, buff : UInt16*, buffCapacity : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucurr_getKeywordValuesForLocale(key : Win32cr::Foundation::PSTR, locale : Win32cr::Foundation::PSTR, commonlyUsed : Int8, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucurr_getNumericCode(currency : UInt16*) : Int32

    fun ucpmap_get(map : Win32cr::Globalization::UCPMap*, c : Int32) : UInt32

    fun ucpmap_getRange(map : Win32cr::Globalization::UCPMap*, start : Int32, option : Win32cr::Globalization::UCPMapRangeOption, surrogateValue : UInt32, filter : Win32cr::Globalization::UCPMapValueFilter*, context : Void*, pValue : UInt32*) : Int32

    fun ucptrie_openFromBinary(type__ : Win32cr::Globalization::UCPTrieType, valueWidth : Win32cr::Globalization::UCPTrieValueWidth, data : Void*, length : Int32, pActualLength : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCPTrie*

    fun ucptrie_close(trie : Win32cr::Globalization::UCPTrie*) : Void

    fun ucptrie_getType(trie : Win32cr::Globalization::UCPTrie*) : Win32cr::Globalization::UCPTrieType

    fun ucptrie_getValueWidth(trie : Win32cr::Globalization::UCPTrie*) : Win32cr::Globalization::UCPTrieValueWidth

    fun ucptrie_get(trie : Win32cr::Globalization::UCPTrie*, c : Int32) : UInt32

    fun ucptrie_getRange(trie : Win32cr::Globalization::UCPTrie*, start : Int32, option : Win32cr::Globalization::UCPMapRangeOption, surrogateValue : UInt32, filter : Win32cr::Globalization::UCPMapValueFilter*, context : Void*, pValue : UInt32*) : Int32

    fun ucptrie_toBinary(trie : Win32cr::Globalization::UCPTrie*, data : Void*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucptrie_internalSmallIndex(trie : Win32cr::Globalization::UCPTrie*, c : Int32) : Int32

    fun ucptrie_internalSmallU8Index(trie : Win32cr::Globalization::UCPTrie*, lt1 : Int32, t2 : UInt8, t3 : UInt8) : Int32

    fun ucptrie_internalU8PrevIndex(trie : Win32cr::Globalization::UCPTrie*, c : Int32, start : UInt8*, src : UInt8*) : Int32

    fun umutablecptrie_open(initialValue : UInt32, errorValue : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UMutableCPTrie*

    fun umutablecptrie_clone(other : Win32cr::Globalization::UMutableCPTrie*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UMutableCPTrie*

    fun umutablecptrie_close(trie : Win32cr::Globalization::UMutableCPTrie*) : Void

    fun umutablecptrie_fromUCPMap(map : Win32cr::Globalization::UCPMap*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UMutableCPTrie*

    fun umutablecptrie_fromUCPTrie(trie : Win32cr::Globalization::UCPTrie*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UMutableCPTrie*

    fun umutablecptrie_get(trie : Win32cr::Globalization::UMutableCPTrie*, c : Int32) : UInt32

    fun umutablecptrie_getRange(trie : Win32cr::Globalization::UMutableCPTrie*, start : Int32, option : Win32cr::Globalization::UCPMapRangeOption, surrogateValue : UInt32, filter : Win32cr::Globalization::UCPMapValueFilter*, context : Void*, pValue : UInt32*) : Int32

    fun umutablecptrie_set(trie : Win32cr::Globalization::UMutableCPTrie*, c : Int32, value : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun umutablecptrie_setRange(trie : Win32cr::Globalization::UMutableCPTrie*, start : Int32, end__ : Int32, value : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun umutablecptrie_buildImmutable(trie : Win32cr::Globalization::UMutableCPTrie*, type__ : Win32cr::Globalization::UCPTrieType, valueWidth : Win32cr::Globalization::UCPTrieValueWidth, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCPTrie*

    fun UCNV_FROM_U_CALLBACK_STOP(context : Void*, fromUArgs : Win32cr::Globalization::UConverterFromUnicodeArgs*, codeUnits : UInt16*, length : Int32, codePoint : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun UCNV_TO_U_CALLBACK_STOP(context : Void*, toUArgs : Win32cr::Globalization::UConverterToUnicodeArgs*, codeUnits : Win32cr::Foundation::PSTR, length : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun UCNV_FROM_U_CALLBACK_SKIP(context : Void*, fromUArgs : Win32cr::Globalization::UConverterFromUnicodeArgs*, codeUnits : UInt16*, length : Int32, codePoint : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun UCNV_FROM_U_CALLBACK_SUBSTITUTE(context : Void*, fromUArgs : Win32cr::Globalization::UConverterFromUnicodeArgs*, codeUnits : UInt16*, length : Int32, codePoint : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun UCNV_FROM_U_CALLBACK_ESCAPE(context : Void*, fromUArgs : Win32cr::Globalization::UConverterFromUnicodeArgs*, codeUnits : UInt16*, length : Int32, codePoint : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun UCNV_TO_U_CALLBACK_SKIP(context : Void*, toUArgs : Win32cr::Globalization::UConverterToUnicodeArgs*, codeUnits : Win32cr::Foundation::PSTR, length : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun UCNV_TO_U_CALLBACK_SUBSTITUTE(context : Void*, toUArgs : Win32cr::Globalization::UConverterToUnicodeArgs*, codeUnits : Win32cr::Foundation::PSTR, length : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun UCNV_TO_U_CALLBACK_ESCAPE(context : Void*, toUArgs : Win32cr::Globalization::UConverterToUnicodeArgs*, codeUnits : Win32cr::Foundation::PSTR, length : Int32, reason : Win32cr::Globalization::UConverterCallbackReason, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_compareNames(name1 : Win32cr::Foundation::PSTR, name2 : Win32cr::Foundation::PSTR) : Int32

    fun ucnv_open(converterName : Win32cr::Foundation::PSTR, err : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverter*

    fun ucnv_openU(name : UInt16*, err : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverter*

    fun ucnv_openCCSID(codepage : Int32, platform : Win32cr::Globalization::UConverterPlatform, err : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverter*

    fun ucnv_openPackage(packageName : Win32cr::Foundation::PSTR, converterName : Win32cr::Foundation::PSTR, err : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverter*

    fun ucnv_safeClone(cnv : Win32cr::Globalization::UConverter*, stackBuffer : Void*, pBufferSize : Int32*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverter*

    fun ucnv_close(converter : Win32cr::Globalization::UConverter*) : Void

    fun ucnv_getSubstChars(converter : Win32cr::Globalization::UConverter*, subChars : Win32cr::Foundation::PSTR, len : Int8*, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_setSubstChars(converter : Win32cr::Globalization::UConverter*, subChars : Win32cr::Foundation::PSTR, len : Int8, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_setSubstString(cnv : Win32cr::Globalization::UConverter*, s : UInt16*, length : Int32, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_getInvalidChars(converter : Win32cr::Globalization::UConverter*, errBytes : Win32cr::Foundation::PSTR, len : Int8*, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_getInvalidUChars(converter : Win32cr::Globalization::UConverter*, errUChars : UInt16*, len : Int8*, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_reset(converter : Win32cr::Globalization::UConverter*) : Void

    fun ucnv_resetToUnicode(converter : Win32cr::Globalization::UConverter*) : Void

    fun ucnv_resetFromUnicode(converter : Win32cr::Globalization::UConverter*) : Void

    fun ucnv_getMaxCharSize(converter : Win32cr::Globalization::UConverter*) : Int8

    fun ucnv_getMinCharSize(converter : Win32cr::Globalization::UConverter*) : Int8

    fun ucnv_getDisplayName(converter : Win32cr::Globalization::UConverter*, displayLocale : Win32cr::Foundation::PSTR, displayName : UInt16*, displayNameCapacity : Int32, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_getName(converter : Win32cr::Globalization::UConverter*, err : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucnv_getCCSID(converter : Win32cr::Globalization::UConverter*, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_getPlatform(converter : Win32cr::Globalization::UConverter*, err : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverterPlatform

    fun ucnv_getType(converter : Win32cr::Globalization::UConverter*) : Win32cr::Globalization::UConverterType

    fun ucnv_getStarters(converter : Win32cr::Globalization::UConverter*, starters : Int8*, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_getUnicodeSet(cnv : Win32cr::Globalization::UConverter*, setFillIn : Win32cr::Globalization::USet*, whichSet : Win32cr::Globalization::UConverterUnicodeSet, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_getToUCallBack(converter : Win32cr::Globalization::UConverter*, action : Win32cr::Globalization::UConverterToUCallback*, context : Void**) : Void

    fun ucnv_getFromUCallBack(converter : Win32cr::Globalization::UConverter*, action : Win32cr::Globalization::UConverterFromUCallback*, context : Void**) : Void

    fun ucnv_setToUCallBack(converter : Win32cr::Globalization::UConverter*, newAction : Win32cr::Globalization::UConverterToUCallback, newContext : Void*, oldAction : Win32cr::Globalization::UConverterToUCallback*, oldContext : Void**, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_setFromUCallBack(converter : Win32cr::Globalization::UConverter*, newAction : Win32cr::Globalization::UConverterFromUCallback, newContext : Void*, oldAction : Win32cr::Globalization::UConverterFromUCallback*, oldContext : Void**, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_fromUnicode(converter : Win32cr::Globalization::UConverter*, target : Int8**, targetLimit : Win32cr::Foundation::PSTR, source : UInt16**, sourceLimit : UInt16*, offsets : Int32*, flush : Int8, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_toUnicode(converter : Win32cr::Globalization::UConverter*, target : UInt16**, targetLimit : UInt16*, source : Int8**, sourceLimit : Win32cr::Foundation::PSTR, offsets : Int32*, flush : Int8, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_fromUChars(cnv : Win32cr::Globalization::UConverter*, dest : Win32cr::Foundation::PSTR, destCapacity : Int32, src : UInt16*, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_toUChars(cnv : Win32cr::Globalization::UConverter*, dest : UInt16*, destCapacity : Int32, src : Win32cr::Foundation::PSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_getNextUChar(converter : Win32cr::Globalization::UConverter*, source : Int8**, sourceLimit : Win32cr::Foundation::PSTR, err : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_convertEx(targetCnv : Win32cr::Globalization::UConverter*, sourceCnv : Win32cr::Globalization::UConverter*, target : Int8**, targetLimit : Win32cr::Foundation::PSTR, source : Int8**, sourceLimit : Win32cr::Foundation::PSTR, pivotStart : UInt16*, pivotSource : UInt16**, pivotTarget : UInt16**, pivotLimit : UInt16*, reset : Int8, flush : Int8, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_convert(toConverterName : Win32cr::Foundation::PSTR, fromConverterName : Win32cr::Foundation::PSTR, target : Win32cr::Foundation::PSTR, targetCapacity : Int32, source : Win32cr::Foundation::PSTR, sourceLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_toAlgorithmic(algorithmicType : Win32cr::Globalization::UConverterType, cnv : Win32cr::Globalization::UConverter*, target : Win32cr::Foundation::PSTR, targetCapacity : Int32, source : Win32cr::Foundation::PSTR, sourceLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_fromAlgorithmic(cnv : Win32cr::Globalization::UConverter*, algorithmicType : Win32cr::Globalization::UConverterType, target : Win32cr::Foundation::PSTR, targetCapacity : Int32, source : Win32cr::Foundation::PSTR, sourceLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_flushCache : Int32

    fun ucnv_countAvailable : Int32

    fun ucnv_getAvailableName(n : Int32) : Win32cr::Foundation::PSTR

    fun ucnv_openAllNames(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucnv_countAliases(alias__ : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16

    fun ucnv_getAlias(alias__ : Win32cr::Foundation::PSTR, n : UInt16, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucnv_getAliases(alias__ : Win32cr::Foundation::PSTR, aliases : Int8**, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_openStandardNames(convName : Win32cr::Foundation::PSTR, standard : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucnv_countStandards : UInt16

    fun ucnv_getStandard(n : UInt16, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucnv_getStandardName(name : Win32cr::Foundation::PSTR, standard : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucnv_getCanonicalName(alias__ : Win32cr::Foundation::PSTR, standard : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucnv_getDefaultName : Win32cr::Foundation::PSTR

    fun ucnv_setDefaultName(name : Win32cr::Foundation::PSTR) : Void

    fun ucnv_fixFileSeparator(cnv : Win32cr::Globalization::UConverter*, source : UInt16*, sourceLen : Int32) : Void

    fun ucnv_isAmbiguous(cnv : Win32cr::Globalization::UConverter*) : Int8

    fun ucnv_setFallback(cnv : Win32cr::Globalization::UConverter*, usesFallback : Int8) : Void

    fun ucnv_usesFallback(cnv : Win32cr::Globalization::UConverter*) : Int8

    fun ucnv_detectUnicodeSignature(source : Win32cr::Foundation::PSTR, sourceLength : Int32, signatureLength : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucnv_fromUCountPending(cnv : Win32cr::Globalization::UConverter*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_toUCountPending(cnv : Win32cr::Globalization::UConverter*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnv_isFixedWidth(cnv : Win32cr::Globalization::UConverter*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun ucnv_cbFromUWriteBytes(args : Win32cr::Globalization::UConverterFromUnicodeArgs*, source : Win32cr::Foundation::PSTR, length : Int32, offsetIndex : Int32, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_cbFromUWriteSub(args : Win32cr::Globalization::UConverterFromUnicodeArgs*, offsetIndex : Int32, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_cbFromUWriteUChars(args : Win32cr::Globalization::UConverterFromUnicodeArgs*, source : UInt16**, sourceLimit : UInt16*, offsetIndex : Int32, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_cbToUWriteUChars(args : Win32cr::Globalization::UConverterToUnicodeArgs*, source : UInt16*, length : Int32, offsetIndex : Int32, err : Win32cr::Globalization::UErrorCode*) : Void

    fun ucnv_cbToUWriteSub(args : Win32cr::Globalization::UConverterToUnicodeArgs*, offsetIndex : Int32, err : Win32cr::Globalization::UErrorCode*) : Void

    fun u_init(status : Win32cr::Globalization::UErrorCode*) : Void

    fun u_cleanup : Void

    fun u_setMemoryFunctions(context : Void*, a : Win32cr::Globalization::UMemAllocFn*, r : Win32cr::Globalization::UMemReallocFn*, f : Win32cr::Globalization::UMemFreeFn*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun u_catopen(name : Win32cr::Foundation::PSTR, locale : Win32cr::Foundation::PSTR, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UResourceBundle*

    fun u_catclose(catd : Win32cr::Globalization::UResourceBundle*) : Void

    fun u_catgets(catd : Win32cr::Globalization::UResourceBundle*, set_num : Int32, msg_num : Int32, s : UInt16*, len : Int32*, ec : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun u_hasBinaryProperty(c : Int32, which : Win32cr::Globalization::UProperty) : Int8

    fun u_getBinaryPropertySet(property : Win32cr::Globalization::UProperty, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun u_isUAlphabetic(c : Int32) : Int8

    fun u_isULowercase(c : Int32) : Int8

    fun u_isUUppercase(c : Int32) : Int8

    fun u_isUWhiteSpace(c : Int32) : Int8

    fun u_getIntPropertyValue(c : Int32, which : Win32cr::Globalization::UProperty) : Int32

    fun u_getIntPropertyMinValue(which : Win32cr::Globalization::UProperty) : Int32

    fun u_getIntPropertyMaxValue(which : Win32cr::Globalization::UProperty) : Int32

    fun u_getIntPropertyMap(property : Win32cr::Globalization::UProperty, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCPMap*

    fun u_getNumericValue(c : Int32) : Float64

    fun u_islower(c : Int32) : Int8

    fun u_isupper(c : Int32) : Int8

    fun u_istitle(c : Int32) : Int8

    fun u_isdigit(c : Int32) : Int8

    fun u_isalpha(c : Int32) : Int8

    fun u_isalnum(c : Int32) : Int8

    fun u_isxdigit(c : Int32) : Int8

    fun u_ispunct(c : Int32) : Int8

    fun u_isgraph(c : Int32) : Int8

    fun u_isblank(c : Int32) : Int8

    fun u_isdefined(c : Int32) : Int8

    fun u_isspace(c : Int32) : Int8

    fun u_isJavaSpaceChar(c : Int32) : Int8

    fun u_isWhitespace(c : Int32) : Int8

    fun u_iscntrl(c : Int32) : Int8

    fun u_isISOControl(c : Int32) : Int8

    fun u_isprint(c : Int32) : Int8

    fun u_isbase(c : Int32) : Int8

    fun u_charDirection(c : Int32) : Win32cr::Globalization::UCharDirection

    fun u_isMirrored(c : Int32) : Int8

    fun u_charMirror(c : Int32) : Int32

    fun u_getBidiPairedBracket(c : Int32) : Int32

    fun u_charType(c : Int32) : Int8

    fun u_enumCharTypes(enumRange : Win32cr::Globalization::UCharEnumTypeRange*, context : Void*) : Void

    fun u_getCombiningClass(c : Int32) : UInt8

    fun u_charDigitValue(c : Int32) : Int32

    fun ublock_getCode(c : Int32) : Win32cr::Globalization::UBlockCode

    fun u_charName(code : Int32, nameChoice : Win32cr::Globalization::UCharNameChoice, buffer : Win32cr::Foundation::PSTR, bufferLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_charFromName(nameChoice : Win32cr::Globalization::UCharNameChoice, name : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_enumCharNames(start : Int32, limit : Int32, fn : Win32cr::Globalization::UEnumCharNamesFn*, context : Void*, nameChoice : Win32cr::Globalization::UCharNameChoice, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun u_getPropertyName(property : Win32cr::Globalization::UProperty, nameChoice : Win32cr::Globalization::UPropertyNameChoice) : Win32cr::Foundation::PSTR

    fun u_getPropertyEnum(alias__ : Win32cr::Foundation::PSTR) : Win32cr::Globalization::UProperty

    fun u_getPropertyValueName(property : Win32cr::Globalization::UProperty, value : Int32, nameChoice : Win32cr::Globalization::UPropertyNameChoice) : Win32cr::Foundation::PSTR

    fun u_getPropertyValueEnum(property : Win32cr::Globalization::UProperty, alias__ : Win32cr::Foundation::PSTR) : Int32

    fun u_isIDStart(c : Int32) : Int8

    fun u_isIDPart(c : Int32) : Int8

    fun u_isIDIgnorable(c : Int32) : Int8

    fun u_isJavaIDStart(c : Int32) : Int8

    fun u_isJavaIDPart(c : Int32) : Int8

    fun u_tolower(c : Int32) : Int32

    fun u_toupper(c : Int32) : Int32

    fun u_totitle(c : Int32) : Int32

    fun u_foldCase(c : Int32, options : UInt32) : Int32

    fun u_digit(ch : Int32, radix : Int8) : Int32

    fun u_forDigit(digit : Int32, radix : Int8) : Int32

    fun u_charAge(c : Int32, versionArray : UInt8*) : Void

    fun u_getUnicodeVersion(versionArray : UInt8*) : Void

    fun u_getFC_NFKC_Closure(c : Int32, dest : UInt16*, destCapacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubidi_open : Win32cr::Globalization::UBiDi*

    fun ubidi_openSized(maxLength : Int32, maxRunCount : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UBiDi*

    fun ubidi_close(pBiDi : Win32cr::Globalization::UBiDi*) : Void

    fun ubidi_setInverse(pBiDi : Win32cr::Globalization::UBiDi*, isInverse : Int8) : Void

    fun ubidi_isInverse(pBiDi : Win32cr::Globalization::UBiDi*) : Int8

    fun ubidi_orderParagraphsLTR(pBiDi : Win32cr::Globalization::UBiDi*, orderParagraphsLTR : Int8) : Void

    fun ubidi_isOrderParagraphsLTR(pBiDi : Win32cr::Globalization::UBiDi*) : Int8

    fun ubidi_setReorderingMode(pBiDi : Win32cr::Globalization::UBiDi*, reorderingMode : Win32cr::Globalization::UBiDiReorderingMode) : Void

    fun ubidi_getReorderingMode(pBiDi : Win32cr::Globalization::UBiDi*) : Win32cr::Globalization::UBiDiReorderingMode

    fun ubidi_setReorderingOptions(pBiDi : Win32cr::Globalization::UBiDi*, reorderingOptions : UInt32) : Void

    fun ubidi_getReorderingOptions(pBiDi : Win32cr::Globalization::UBiDi*) : UInt32

    fun ubidi_setContext(pBiDi : Win32cr::Globalization::UBiDi*, prologue : UInt16*, proLength : Int32, epilogue : UInt16*, epiLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ubidi_setPara(pBiDi : Win32cr::Globalization::UBiDi*, text : UInt16*, length : Int32, paraLevel : UInt8, embeddingLevels : UInt8*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ubidi_setLine(pParaBiDi : Win32cr::Globalization::UBiDi*, start : Int32, limit : Int32, pLineBiDi : Win32cr::Globalization::UBiDi*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ubidi_getDirection(pBiDi : Win32cr::Globalization::UBiDi*) : Win32cr::Globalization::UBiDiDirection

    fun ubidi_getBaseDirection(text : UInt16*, length : Int32) : Win32cr::Globalization::UBiDiDirection

    fun ubidi_getText(pBiDi : Win32cr::Globalization::UBiDi*) : UInt16*

    fun ubidi_getLength(pBiDi : Win32cr::Globalization::UBiDi*) : Int32

    fun ubidi_getParaLevel(pBiDi : Win32cr::Globalization::UBiDi*) : UInt8

    fun ubidi_countParagraphs(pBiDi : Win32cr::Globalization::UBiDi*) : Int32

    fun ubidi_getParagraph(pBiDi : Win32cr::Globalization::UBiDi*, charIndex : Int32, pParaStart : Int32*, pParaLimit : Int32*, pParaLevel : UInt8*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubidi_getParagraphByIndex(pBiDi : Win32cr::Globalization::UBiDi*, paraIndex : Int32, pParaStart : Int32*, pParaLimit : Int32*, pParaLevel : UInt8*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ubidi_getLevelAt(pBiDi : Win32cr::Globalization::UBiDi*, charIndex : Int32) : UInt8

    fun ubidi_getLevels(pBiDi : Win32cr::Globalization::UBiDi*, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt8*

    fun ubidi_getLogicalRun(pBiDi : Win32cr::Globalization::UBiDi*, logicalPosition : Int32, pLogicalLimit : Int32*, pLevel : UInt8*) : Void

    fun ubidi_countRuns(pBiDi : Win32cr::Globalization::UBiDi*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubidi_getVisualRun(pBiDi : Win32cr::Globalization::UBiDi*, runIndex : Int32, pLogicalStart : Int32*, pLength : Int32*) : Win32cr::Globalization::UBiDiDirection

    fun ubidi_getVisualIndex(pBiDi : Win32cr::Globalization::UBiDi*, logicalIndex : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubidi_getLogicalIndex(pBiDi : Win32cr::Globalization::UBiDi*, visualIndex : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubidi_getLogicalMap(pBiDi : Win32cr::Globalization::UBiDi*, indexMap : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ubidi_getVisualMap(pBiDi : Win32cr::Globalization::UBiDi*, indexMap : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ubidi_reorderLogical(levels : UInt8*, length : Int32, indexMap : Int32*) : Void

    fun ubidi_reorderVisual(levels : UInt8*, length : Int32, indexMap : Int32*) : Void

    fun ubidi_invertMap(srcMap : Int32*, destMap : Int32*, length : Int32) : Void

    fun ubidi_getProcessedLength(pBiDi : Win32cr::Globalization::UBiDi*) : Int32

    fun ubidi_getResultLength(pBiDi : Win32cr::Globalization::UBiDi*) : Int32

    fun ubidi_getCustomizedClass(pBiDi : Win32cr::Globalization::UBiDi*, c : Int32) : Win32cr::Globalization::UCharDirection

    fun ubidi_setClassCallback(pBiDi : Win32cr::Globalization::UBiDi*, newFn : Win32cr::Globalization::UBiDiClassCallback, newContext : Void*, oldFn : Win32cr::Globalization::UBiDiClassCallback*, oldContext : Void**, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ubidi_getClassCallback(pBiDi : Win32cr::Globalization::UBiDi*, fn : Win32cr::Globalization::UBiDiClassCallback*, context : Void**) : Void

    fun ubidi_writeReordered(pBiDi : Win32cr::Globalization::UBiDi*, dest : UInt16*, destSize : Int32, options : UInt16, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubidi_writeReverse(src : UInt16*, srcLength : Int32, dest : UInt16*, destSize : Int32, options : UInt16, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubiditransform_transform(pBiDiTransform : Win32cr::Globalization::UBiDiTransform*, src : UInt16*, srcLength : Int32, dest : UInt16*, destSize : Int32, inParaLevel : UInt8, inOrder : Win32cr::Globalization::UBiDiOrder, outParaLevel : UInt8, outOrder : Win32cr::Globalization::UBiDiOrder, doMirroring : Win32cr::Globalization::UBiDiMirroring, shapingOptions : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt32

    fun ubiditransform_open(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UBiDiTransform*

    fun ubiditransform_close(pBidiTransform : Win32cr::Globalization::UBiDiTransform*) : Void

    fun utext_close(ut : Win32cr::Globalization::UText*) : Win32cr::Globalization::UText*

    fun utext_openUTF8(ut : Win32cr::Globalization::UText*, s : Win32cr::Foundation::PSTR, length : Int64, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun utext_openUChars(ut : Win32cr::Globalization::UText*, s : UInt16*, length : Int64, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun utext_clone(dest : Win32cr::Globalization::UText*, src : Win32cr::Globalization::UText*, deep : Int8, readOnly : Int8, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun utext_equals(a : Win32cr::Globalization::UText*, b : Win32cr::Globalization::UText*) : Int8

    fun utext_nativeLength(ut : Win32cr::Globalization::UText*) : Int64

    fun utext_isLengthExpensive(ut : Win32cr::Globalization::UText*) : Int8

    fun utext_char32At(ut : Win32cr::Globalization::UText*, nativeIndex : Int64) : Int32

    fun utext_current32(ut : Win32cr::Globalization::UText*) : Int32

    fun utext_next32(ut : Win32cr::Globalization::UText*) : Int32

    fun utext_previous32(ut : Win32cr::Globalization::UText*) : Int32

    fun utext_next32From(ut : Win32cr::Globalization::UText*, nativeIndex : Int64) : Int32

    fun utext_previous32From(ut : Win32cr::Globalization::UText*, nativeIndex : Int64) : Int32

    fun utext_getNativeIndex(ut : Win32cr::Globalization::UText*) : Int64

    fun utext_setNativeIndex(ut : Win32cr::Globalization::UText*, nativeIndex : Int64) : Void

    fun utext_moveIndex32(ut : Win32cr::Globalization::UText*, delta : Int32) : Int8

    fun utext_getPreviousNativeIndex(ut : Win32cr::Globalization::UText*) : Int64

    fun utext_extract(ut : Win32cr::Globalization::UText*, nativeStart : Int64, nativeLimit : Int64, dest : UInt16*, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun utext_isWritable(ut : Win32cr::Globalization::UText*) : Int8

    fun utext_hasMetaData(ut : Win32cr::Globalization::UText*) : Int8

    fun utext_replace(ut : Win32cr::Globalization::UText*, nativeStart : Int64, nativeLimit : Int64, replacementText : UInt16*, replacementLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun utext_copy(ut : Win32cr::Globalization::UText*, nativeStart : Int64, nativeLimit : Int64, destIndex : Int64, move : Int8, status : Win32cr::Globalization::UErrorCode*) : Void

    fun utext_freeze(ut : Win32cr::Globalization::UText*) : Void

    fun utext_setup(ut : Win32cr::Globalization::UText*, extraSpace : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun uset_openEmpty : Win32cr::Globalization::USet*

    fun uset_open(start : Int32, end__ : Int32) : Win32cr::Globalization::USet*

    fun uset_openPattern(pattern : UInt16*, patternLength : Int32, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun uset_openPatternOptions(pattern : UInt16*, patternLength : Int32, options : UInt32, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun uset_close(set : Win32cr::Globalization::USet*) : Void

    fun uset_clone(set : Win32cr::Globalization::USet*) : Win32cr::Globalization::USet*

    fun uset_isFrozen(set : Win32cr::Globalization::USet*) : Int8

    fun uset_freeze(set : Win32cr::Globalization::USet*) : Void

    fun uset_cloneAsThawed(set : Win32cr::Globalization::USet*) : Win32cr::Globalization::USet*

    fun uset_set(set : Win32cr::Globalization::USet*, start : Int32, end__ : Int32) : Void

    fun uset_applyPattern(set : Win32cr::Globalization::USet*, pattern : UInt16*, patternLength : Int32, options : UInt32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uset_applyIntPropertyValue(set : Win32cr::Globalization::USet*, prop : Win32cr::Globalization::UProperty, value : Int32, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun uset_applyPropertyAlias(set : Win32cr::Globalization::USet*, prop : UInt16*, propLength : Int32, value : UInt16*, valueLength : Int32, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun uset_resemblesPattern(pattern : UInt16*, patternLength : Int32, pos : Int32) : Int8

    fun uset_toPattern(set : Win32cr::Globalization::USet*, result : UInt16*, resultCapacity : Int32, escapeUnprintable : Int8, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun uset_add(set : Win32cr::Globalization::USet*, c : Int32) : Void

    fun uset_addAll(set : Win32cr::Globalization::USet*, additionalSet : Win32cr::Globalization::USet*) : Void

    fun uset_addRange(set : Win32cr::Globalization::USet*, start : Int32, end__ : Int32) : Void

    fun uset_addString(set : Win32cr::Globalization::USet*, str : UInt16*, strLen : Int32) : Void

    fun uset_addAllCodePoints(set : Win32cr::Globalization::USet*, str : UInt16*, strLen : Int32) : Void

    fun uset_remove(set : Win32cr::Globalization::USet*, c : Int32) : Void

    fun uset_removeRange(set : Win32cr::Globalization::USet*, start : Int32, end__ : Int32) : Void

    fun uset_removeString(set : Win32cr::Globalization::USet*, str : UInt16*, strLen : Int32) : Void

    fun uset_removeAll(set : Win32cr::Globalization::USet*, removeSet : Win32cr::Globalization::USet*) : Void

    fun uset_retain(set : Win32cr::Globalization::USet*, start : Int32, end__ : Int32) : Void

    fun uset_retainAll(set : Win32cr::Globalization::USet*, retain : Win32cr::Globalization::USet*) : Void

    fun uset_compact(set : Win32cr::Globalization::USet*) : Void

    fun uset_complement(set : Win32cr::Globalization::USet*) : Void

    fun uset_complementAll(set : Win32cr::Globalization::USet*, complement : Win32cr::Globalization::USet*) : Void

    fun uset_clear(set : Win32cr::Globalization::USet*) : Void

    fun uset_closeOver(set : Win32cr::Globalization::USet*, attributes : Int32) : Void

    fun uset_removeAllStrings(set : Win32cr::Globalization::USet*) : Void

    fun uset_isEmpty(set : Win32cr::Globalization::USet*) : Int8

    fun uset_contains(set : Win32cr::Globalization::USet*, c : Int32) : Int8

    fun uset_containsRange(set : Win32cr::Globalization::USet*, start : Int32, end__ : Int32) : Int8

    fun uset_containsString(set : Win32cr::Globalization::USet*, str : UInt16*, strLen : Int32) : Int8

    fun uset_indexOf(set : Win32cr::Globalization::USet*, c : Int32) : Int32

    fun uset_charAt(set : Win32cr::Globalization::USet*, charIndex : Int32) : Int32

    fun uset_size(set : Win32cr::Globalization::USet*) : Int32

    fun uset_getItemCount(set : Win32cr::Globalization::USet*) : Int32

    fun uset_getItem(set : Win32cr::Globalization::USet*, itemIndex : Int32, start : Int32*, end__ : Int32*, str : UInt16*, strCapacity : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun uset_containsAll(set1 : Win32cr::Globalization::USet*, set2 : Win32cr::Globalization::USet*) : Int8

    fun uset_containsAllCodePoints(set : Win32cr::Globalization::USet*, str : UInt16*, strLen : Int32) : Int8

    fun uset_containsNone(set1 : Win32cr::Globalization::USet*, set2 : Win32cr::Globalization::USet*) : Int8

    fun uset_containsSome(set1 : Win32cr::Globalization::USet*, set2 : Win32cr::Globalization::USet*) : Int8

    fun uset_span(set : Win32cr::Globalization::USet*, s : UInt16*, length : Int32, spanCondition : Win32cr::Globalization::USetSpanCondition) : Int32

    fun uset_spanBack(set : Win32cr::Globalization::USet*, s : UInt16*, length : Int32, spanCondition : Win32cr::Globalization::USetSpanCondition) : Int32

    fun uset_spanUTF8(set : Win32cr::Globalization::USet*, s : Win32cr::Foundation::PSTR, length : Int32, spanCondition : Win32cr::Globalization::USetSpanCondition) : Int32

    fun uset_spanBackUTF8(set : Win32cr::Globalization::USet*, s : Win32cr::Foundation::PSTR, length : Int32, spanCondition : Win32cr::Globalization::USetSpanCondition) : Int32

    fun uset_equals(set1 : Win32cr::Globalization::USet*, set2 : Win32cr::Globalization::USet*) : Int8

    fun uset_serialize(set : Win32cr::Globalization::USet*, dest : UInt16*, destCapacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uset_getSerializedSet(fillSet : Win32cr::Globalization::USerializedSet*, src : UInt16*, srcLength : Int32) : Int8

    fun uset_setSerializedToOne(fillSet : Win32cr::Globalization::USerializedSet*, c : Int32) : Void

    fun uset_serializedContains(set : Win32cr::Globalization::USerializedSet*, c : Int32) : Int8

    fun uset_getSerializedRangeCount(set : Win32cr::Globalization::USerializedSet*) : Int32

    fun uset_getSerializedRange(set : Win32cr::Globalization::USerializedSet*, rangeIndex : Int32, pStart : Int32*, pEnd : Int32*) : Int8

    fun unorm2_getNFCInstance(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizer2*

    fun unorm2_getNFDInstance(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizer2*

    fun unorm2_getNFKCInstance(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizer2*

    fun unorm2_getNFKDInstance(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizer2*

    fun unorm2_getNFKCCasefoldInstance(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizer2*

    fun unorm2_getInstance(packageName : Win32cr::Foundation::PSTR, name : Win32cr::Foundation::PSTR, mode : Win32cr::Globalization::UNormalization2Mode, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizer2*

    fun unorm2_openFiltered(norm2 : Win32cr::Globalization::UNormalizer2*, filterSet : Win32cr::Globalization::USet*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizer2*

    fun unorm2_close(norm2 : Win32cr::Globalization::UNormalizer2*) : Void

    fun unorm2_normalize(norm2 : Win32cr::Globalization::UNormalizer2*, src : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun unorm2_normalizeSecondAndAppend(norm2 : Win32cr::Globalization::UNormalizer2*, first : UInt16*, firstLength : Int32, firstCapacity : Int32, second : UInt16*, secondLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun unorm2_append(norm2 : Win32cr::Globalization::UNormalizer2*, first : UInt16*, firstLength : Int32, firstCapacity : Int32, second : UInt16*, secondLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun unorm2_getDecomposition(norm2 : Win32cr::Globalization::UNormalizer2*, c : Int32, decomposition : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun unorm2_getRawDecomposition(norm2 : Win32cr::Globalization::UNormalizer2*, c : Int32, decomposition : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun unorm2_composePair(norm2 : Win32cr::Globalization::UNormalizer2*, a : Int32, b : Int32) : Int32

    fun unorm2_getCombiningClass(norm2 : Win32cr::Globalization::UNormalizer2*, c : Int32) : UInt8

    fun unorm2_isNormalized(norm2 : Win32cr::Globalization::UNormalizer2*, s : UInt16*, length : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int8

    fun unorm2_quickCheck(norm2 : Win32cr::Globalization::UNormalizer2*, s : UInt16*, length : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNormalizationCheckResult

    fun unorm2_spanQuickCheckYes(norm2 : Win32cr::Globalization::UNormalizer2*, s : UInt16*, length : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun unorm2_hasBoundaryBefore(norm2 : Win32cr::Globalization::UNormalizer2*, c : Int32) : Int8

    fun unorm2_hasBoundaryAfter(norm2 : Win32cr::Globalization::UNormalizer2*, c : Int32) : Int8

    fun unorm2_isInert(norm2 : Win32cr::Globalization::UNormalizer2*, c : Int32) : Int8

    fun unorm_compare(s1 : UInt16*, length1 : Int32, s2 : UInt16*, length2 : Int32, options : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnvsel_open(converterList : Int8**, converterListSize : Int32, excludedCodePoints : Win32cr::Globalization::USet*, whichSet : Win32cr::Globalization::UConverterUnicodeSet, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverterSelector*

    fun ucnvsel_close(sel : Win32cr::Globalization::UConverterSelector*) : Void

    fun ucnvsel_openFromSerialized(buffer : Void*, length : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConverterSelector*

    fun ucnvsel_serialize(sel : Win32cr::Globalization::UConverterSelector*, buffer : Void*, bufferCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucnvsel_selectForString(sel : Win32cr::Globalization::UConverterSelector*, s : UInt16*, length : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucnvsel_selectForUTF8(sel : Win32cr::Globalization::UConverterSelector*, s : Win32cr::Foundation::PSTR, length : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun u_charsToUChars(cs : Win32cr::Foundation::PSTR, us : UInt16*, length : Int32) : Void

    fun u_UCharsToChars(us : UInt16*, cs : Win32cr::Foundation::PSTR, length : Int32) : Void

    fun u_strlen(s : UInt16*) : Int32

    fun u_countChar32(s : UInt16*, length : Int32) : Int32

    fun u_strHasMoreChar32Than(s : UInt16*, length : Int32, number : Int32) : Int8

    fun u_strcat(dst : UInt16*, src : UInt16*) : UInt16*

    fun u_strncat(dst : UInt16*, src : UInt16*, n : Int32) : UInt16*

    fun u_strstr(s : UInt16*, substring : UInt16*) : UInt16*

    fun u_strFindFirst(s : UInt16*, length : Int32, substring : UInt16*, subLength : Int32) : UInt16*

    fun u_strchr(s : UInt16*, c : UInt16) : UInt16*

    fun u_strchr32(s : UInt16*, c : Int32) : UInt16*

    fun u_strrstr(s : UInt16*, substring : UInt16*) : UInt16*

    fun u_strFindLast(s : UInt16*, length : Int32, substring : UInt16*, subLength : Int32) : UInt16*

    fun u_strrchr(s : UInt16*, c : UInt16) : UInt16*

    fun u_strrchr32(s : UInt16*, c : Int32) : UInt16*

    fun u_strpbrk(string : UInt16*, matchSet : UInt16*) : UInt16*

    fun u_strcspn(string : UInt16*, matchSet : UInt16*) : Int32

    fun u_strspn(string : UInt16*, matchSet : UInt16*) : Int32

    fun u_strtok_r(src : UInt16*, delim : UInt16*, saveState : UInt16**) : UInt16*

    fun u_strcmp(s1 : UInt16*, s2 : UInt16*) : Int32

    fun u_strcmpCodePointOrder(s1 : UInt16*, s2 : UInt16*) : Int32

    fun u_strCompare(s1 : UInt16*, length1 : Int32, s2 : UInt16*, length2 : Int32, codePointOrder : Int8) : Int32

    fun u_strCompareIter(iter1 : Win32cr::Globalization::UCharIterator*, iter2 : Win32cr::Globalization::UCharIterator*, codePointOrder : Int8) : Int32

    fun u_strCaseCompare(s1 : UInt16*, length1 : Int32, s2 : UInt16*, length2 : Int32, options : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_strncmp(ucs1 : UInt16*, ucs2 : UInt16*, n : Int32) : Int32

    fun u_strncmpCodePointOrder(s1 : UInt16*, s2 : UInt16*, n : Int32) : Int32

    fun u_strcasecmp(s1 : UInt16*, s2 : UInt16*, options : UInt32) : Int32

    fun u_strncasecmp(s1 : UInt16*, s2 : UInt16*, n : Int32, options : UInt32) : Int32

    fun u_memcasecmp(s1 : UInt16*, s2 : UInt16*, length : Int32, options : UInt32) : Int32

    fun u_strcpy(dst : UInt16*, src : UInt16*) : UInt16*

    fun u_strncpy(dst : UInt16*, src : UInt16*, n : Int32) : UInt16*

    fun u_uastrcpy(dst : UInt16*, src : Win32cr::Foundation::PSTR) : UInt16*

    fun u_uastrncpy(dst : UInt16*, src : Win32cr::Foundation::PSTR, n : Int32) : UInt16*

    fun u_austrcpy(dst : Win32cr::Foundation::PSTR, src : UInt16*) : Win32cr::Foundation::PSTR

    fun u_austrncpy(dst : Win32cr::Foundation::PSTR, src : UInt16*, n : Int32) : Win32cr::Foundation::PSTR

    fun u_memcpy(dest : UInt16*, src : UInt16*, count : Int32) : UInt16*

    fun u_memmove(dest : UInt16*, src : UInt16*, count : Int32) : UInt16*

    fun u_memset(dest : UInt16*, c : UInt16, count : Int32) : UInt16*

    fun u_memcmp(buf1 : UInt16*, buf2 : UInt16*, count : Int32) : Int32

    fun u_memcmpCodePointOrder(s1 : UInt16*, s2 : UInt16*, count : Int32) : Int32

    fun u_memchr(s : UInt16*, c : UInt16, count : Int32) : UInt16*

    fun u_memchr32(s : UInt16*, c : Int32, count : Int32) : UInt16*

    fun u_memrchr(s : UInt16*, c : UInt16, count : Int32) : UInt16*

    fun u_memrchr32(s : UInt16*, c : Int32, count : Int32) : UInt16*

    fun u_unescape(src : Win32cr::Foundation::PSTR, dest : UInt16*, destCapacity : Int32) : Int32

    fun u_unescapeAt(charAt : Win32cr::Globalization::UNESCAPE_CHAR_AT, offset : Int32*, length : Int32, context : Void*) : Int32

    fun u_strToUpper(dest : UInt16*, destCapacity : Int32, src : UInt16*, srcLength : Int32, locale : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_strToLower(dest : UInt16*, destCapacity : Int32, src : UInt16*, srcLength : Int32, locale : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_strToTitle(dest : UInt16*, destCapacity : Int32, src : UInt16*, srcLength : Int32, titleIter : Win32cr::Globalization::UBreakIterator*, locale : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_strFoldCase(dest : UInt16*, destCapacity : Int32, src : UInt16*, srcLength : Int32, options : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_strToWCS(dest : Win32cr::Foundation::PWSTR, destCapacity : Int32, pDestLength : Int32*, src : UInt16*, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PWSTR

    fun u_strFromWCS(dest : UInt16*, destCapacity : Int32, pDestLength : Int32*, src : Win32cr::Foundation::PWSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun u_strToUTF8(dest : Win32cr::Foundation::PSTR, destCapacity : Int32, pDestLength : Int32*, src : UInt16*, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun u_strFromUTF8(dest : UInt16*, destCapacity : Int32, pDestLength : Int32*, src : Win32cr::Foundation::PSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun u_strToUTF8WithSub(dest : Win32cr::Foundation::PSTR, destCapacity : Int32, pDestLength : Int32*, src : UInt16*, srcLength : Int32, subchar : Int32, pNumSubstitutions : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun u_strFromUTF8WithSub(dest : UInt16*, destCapacity : Int32, pDestLength : Int32*, src : Win32cr::Foundation::PSTR, srcLength : Int32, subchar : Int32, pNumSubstitutions : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun u_strFromUTF8Lenient(dest : UInt16*, destCapacity : Int32, pDestLength : Int32*, src : Win32cr::Foundation::PSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun u_strToUTF32(dest : Int32*, destCapacity : Int32, pDestLength : Int32*, src : UInt16*, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32*

    fun u_strFromUTF32(dest : UInt16*, destCapacity : Int32, pDestLength : Int32*, src : Int32*, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun u_strToUTF32WithSub(dest : Int32*, destCapacity : Int32, pDestLength : Int32*, src : UInt16*, srcLength : Int32, subchar : Int32, pNumSubstitutions : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32*

    fun u_strFromUTF32WithSub(dest : UInt16*, destCapacity : Int32, pDestLength : Int32*, src : Int32*, srcLength : Int32, subchar : Int32, pNumSubstitutions : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun u_strToJavaModifiedUTF8(dest : Win32cr::Foundation::PSTR, destCapacity : Int32, pDestLength : Int32*, src : UInt16*, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun u_strFromJavaModifiedUTF8WithSub(dest : UInt16*, destCapacity : Int32, pDestLength : Int32*, src : Win32cr::Foundation::PSTR, srcLength : Int32, subchar : Int32, pNumSubstitutions : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ucasemap_open(locale : Win32cr::Foundation::PSTR, options : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCaseMap*

    fun ucasemap_close(csm : Win32cr::Globalization::UCaseMap*) : Void

    fun ucasemap_getLocale(csm : Win32cr::Globalization::UCaseMap*) : Win32cr::Foundation::PSTR

    fun ucasemap_getOptions(csm : Win32cr::Globalization::UCaseMap*) : UInt32

    fun ucasemap_setLocale(csm : Win32cr::Globalization::UCaseMap*, locale : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucasemap_setOptions(csm : Win32cr::Globalization::UCaseMap*, options : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucasemap_getBreakIterator(csm : Win32cr::Globalization::UCaseMap*) : Win32cr::Globalization::UBreakIterator*

    fun ucasemap_setBreakIterator(csm : Win32cr::Globalization::UCaseMap*, iterToAdopt : Win32cr::Globalization::UBreakIterator*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucasemap_toTitle(csm : Win32cr::Globalization::UCaseMap*, dest : UInt16*, destCapacity : Int32, src : UInt16*, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucasemap_utf8ToLower(csm : Win32cr::Globalization::UCaseMap*, dest : Win32cr::Foundation::PSTR, destCapacity : Int32, src : Win32cr::Foundation::PSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucasemap_utf8ToUpper(csm : Win32cr::Globalization::UCaseMap*, dest : Win32cr::Foundation::PSTR, destCapacity : Int32, src : Win32cr::Foundation::PSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucasemap_utf8ToTitle(csm : Win32cr::Globalization::UCaseMap*, dest : Win32cr::Foundation::PSTR, destCapacity : Int32, src : Win32cr::Foundation::PSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucasemap_utf8FoldCase(csm : Win32cr::Globalization::UCaseMap*, dest : Win32cr::Foundation::PSTR, destCapacity : Int32, src : Win32cr::Foundation::PSTR, srcLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun usprep_open(path : Win32cr::Foundation::PSTR, fileName : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UStringPrepProfile*

    fun usprep_openByType(type__ : Win32cr::Globalization::UStringPrepProfileType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UStringPrepProfile*

    fun usprep_close(profile : Win32cr::Globalization::UStringPrepProfile*) : Void

    fun usprep_prepare(prep : Win32cr::Globalization::UStringPrepProfile*, src : UInt16*, srcLength : Int32, dest : UInt16*, destCapacity : Int32, options : Int32, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_openUTS46(options : UInt32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UIDNA*

    fun uidna_close(idna : Win32cr::Globalization::UIDNA*) : Void

    fun uidna_labelToASCII(idna : Win32cr::Globalization::UIDNA*, label : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_labelToUnicode(idna : Win32cr::Globalization::UIDNA*, label : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_nameToASCII(idna : Win32cr::Globalization::UIDNA*, name : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_nameToUnicode(idna : Win32cr::Globalization::UIDNA*, name : UInt16*, length : Int32, dest : UInt16*, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_labelToASCII_UTF8(idna : Win32cr::Globalization::UIDNA*, label : Win32cr::Foundation::PSTR, length : Int32, dest : Win32cr::Foundation::PSTR, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_labelToUnicodeUTF8(idna : Win32cr::Globalization::UIDNA*, label : Win32cr::Foundation::PSTR, length : Int32, dest : Win32cr::Foundation::PSTR, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_nameToASCII_UTF8(idna : Win32cr::Globalization::UIDNA*, name : Win32cr::Foundation::PSTR, length : Int32, dest : Win32cr::Foundation::PSTR, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun uidna_nameToUnicodeUTF8(idna : Win32cr::Globalization::UIDNA*, name : Win32cr::Foundation::PSTR, length : Int32, dest : Win32cr::Foundation::PSTR, capacity : Int32, pInfo : Win32cr::Globalization::UIDNAInfo*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubrk_open(type__ : Win32cr::Globalization::UBreakIteratorType, locale : Win32cr::Foundation::PSTR, text : UInt16*, textLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UBreakIterator*

    fun ubrk_openRules(rules : UInt16*, rulesLength : Int32, text : UInt16*, textLength : Int32, parseErr : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UBreakIterator*

    fun ubrk_openBinaryRules(binaryRules : UInt8*, rulesLength : Int32, text : UInt16*, textLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UBreakIterator*

    fun ubrk_safeClone(bi : Win32cr::Globalization::UBreakIterator*, stackBuffer : Void*, pBufferSize : Int32*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UBreakIterator*

    fun ubrk_close(bi : Win32cr::Globalization::UBreakIterator*) : Void

    fun ubrk_setText(bi : Win32cr::Globalization::UBreakIterator*, text : UInt16*, textLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ubrk_setUText(bi : Win32cr::Globalization::UBreakIterator*, text : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ubrk_current(bi : Win32cr::Globalization::UBreakIterator*) : Int32

    fun ubrk_next(bi : Win32cr::Globalization::UBreakIterator*) : Int32

    fun ubrk_previous(bi : Win32cr::Globalization::UBreakIterator*) : Int32

    fun ubrk_first(bi : Win32cr::Globalization::UBreakIterator*) : Int32

    fun ubrk_last(bi : Win32cr::Globalization::UBreakIterator*) : Int32

    fun ubrk_preceding(bi : Win32cr::Globalization::UBreakIterator*, offset : Int32) : Int32

    fun ubrk_following(bi : Win32cr::Globalization::UBreakIterator*, offset : Int32) : Int32

    fun ubrk_getAvailable(index : Int32) : Win32cr::Foundation::PSTR

    fun ubrk_countAvailable : Int32

    fun ubrk_isBoundary(bi : Win32cr::Globalization::UBreakIterator*, offset : Int32) : Int8

    fun ubrk_getRuleStatus(bi : Win32cr::Globalization::UBreakIterator*) : Int32

    fun ubrk_getRuleStatusVec(bi : Win32cr::Globalization::UBreakIterator*, fillInVec : Int32*, capacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ubrk_getLocaleByType(bi : Win32cr::Globalization::UBreakIterator*, type__ : Win32cr::Globalization::ULocDataLocaleType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ubrk_refreshUText(bi : Win32cr::Globalization::UBreakIterator*, text : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ubrk_getBinaryRules(bi : Win32cr::Globalization::UBreakIterator*, binaryRules : UInt8*, rulesCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_getDataVersion(dataVersionFillin : UInt8*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_openTimeZoneIDEnumeration(zoneType : Win32cr::Globalization::USystemTimeZoneType, region : Win32cr::Foundation::PSTR, rawOffset : Int32*, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucal_openTimeZones(ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucal_openCountryTimeZones(country : Win32cr::Foundation::PSTR, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucal_getDefaultTimeZone(result : UInt16*, resultCapacity : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_setDefaultTimeZone(zoneID : UInt16*, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_getHostTimeZone(result : UInt16*, resultCapacity : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_getDSTSavings(zoneID : UInt16*, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_getNow : Float64

    fun ucal_open(zoneID : UInt16*, len : Int32, locale : Win32cr::Foundation::PSTR, type__ : Win32cr::Globalization::UCalendarType, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun ucal_close(cal : Void**) : Void

    fun ucal_clone(cal : Void**, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun ucal_setTimeZone(cal : Void**, zoneID : UInt16*, len : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_getTimeZoneID(cal : Void**, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_getTimeZoneDisplayName(cal : Void**, type__ : Win32cr::Globalization::UCalendarDisplayNameType, locale : Win32cr::Foundation::PSTR, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_inDaylightTime(cal : Void**, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun ucal_setGregorianChange(cal : Void**, date : Float64, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_getGregorianChange(cal : Void**, pErrorCode : Win32cr::Globalization::UErrorCode*) : Float64

    fun ucal_getAttribute(cal : Void**, attr : Win32cr::Globalization::UCalendarAttribute) : Int32

    fun ucal_setAttribute(cal : Void**, attr : Win32cr::Globalization::UCalendarAttribute, newValue : Int32) : Void

    fun ucal_getAvailable(localeIndex : Int32) : Win32cr::Foundation::PSTR

    fun ucal_countAvailable : Int32

    fun ucal_getMillis(cal : Void**, status : Win32cr::Globalization::UErrorCode*) : Float64

    fun ucal_setMillis(cal : Void**, dateTime : Float64, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_setDate(cal : Void**, year : Int32, month : Int32, date : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_setDateTime(cal : Void**, year : Int32, month : Int32, date : Int32, hour : Int32, minute : Int32, second : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_equivalentTo(cal1 : Void**, cal2 : Void**) : Int8

    fun ucal_add(cal : Void**, field : Win32cr::Globalization::UCalendarDateFields, amount : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_roll(cal : Void**, field : Win32cr::Globalization::UCalendarDateFields, amount : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucal_get(cal : Void**, field : Win32cr::Globalization::UCalendarDateFields, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_set(cal : Void**, field : Win32cr::Globalization::UCalendarDateFields, value : Int32) : Void

    fun ucal_isSet(cal : Void**, field : Win32cr::Globalization::UCalendarDateFields) : Int8

    fun ucal_clearField(cal : Void**, field : Win32cr::Globalization::UCalendarDateFields) : Void

    fun ucal_clear(calendar : Void**) : Void

    fun ucal_getLimit(cal : Void**, field : Win32cr::Globalization::UCalendarDateFields, type__ : Win32cr::Globalization::UCalendarLimitType, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_getLocaleByType(cal : Void**, type__ : Win32cr::Globalization::ULocDataLocaleType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucal_getTZDataVersion(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucal_getCanonicalTimeZoneID(id : UInt16*, len : Int32, result : UInt16*, resultCapacity : Int32, isSystemID : Int8*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_getType(cal : Void**, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucal_getKeywordValuesForLocale(key : Win32cr::Foundation::PSTR, locale : Win32cr::Foundation::PSTR, commonlyUsed : Int8, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucal_getDayOfWeekType(cal : Void**, dayOfWeek : Win32cr::Globalization::UCalendarDaysOfWeek, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCalendarWeekdayType

    fun ucal_getWeekendTransition(cal : Void**, dayOfWeek : Win32cr::Globalization::UCalendarDaysOfWeek, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_isWeekend(cal : Void**, date : Float64, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun ucal_getFieldDifference(cal : Void**, target : Float64, field : Win32cr::Globalization::UCalendarDateFields, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_getTimeZoneTransitionDate(cal : Void**, type__ : Win32cr::Globalization::UTimeZoneTransitionType, transition : Float64*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun ucal_getWindowsTimeZoneID(id : UInt16*, len : Int32, winid : UInt16*, winidCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucal_getTimeZoneIDForWindowsID(winid : UInt16*, len : Int32, region : Win32cr::Foundation::PSTR, id : UInt16*, idCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_open(loc : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCollator*

    fun ucol_openRules(rules : UInt16*, rulesLength : Int32, normalizationMode : Win32cr::Globalization::UColAttributeValue, strength : Win32cr::Globalization::UColAttributeValue, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCollator*

    fun ucol_getContractionsAndExpansions(coll : Win32cr::Globalization::UCollator*, contractions : Win32cr::Globalization::USet*, expansions : Win32cr::Globalization::USet*, addPrefixes : Int8, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucol_close(coll : Win32cr::Globalization::UCollator*) : Void

    fun ucol_strcoll(coll : Win32cr::Globalization::UCollator*, source : UInt16*, sourceLength : Int32, target : UInt16*, targetLength : Int32) : Win32cr::Globalization::UCollationResult

    fun ucol_strcollUTF8(coll : Win32cr::Globalization::UCollator*, source : Win32cr::Foundation::PSTR, sourceLength : Int32, target : Win32cr::Foundation::PSTR, targetLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCollationResult

    fun ucol_greater(coll : Win32cr::Globalization::UCollator*, source : UInt16*, sourceLength : Int32, target : UInt16*, targetLength : Int32) : Int8

    fun ucol_greaterOrEqual(coll : Win32cr::Globalization::UCollator*, source : UInt16*, sourceLength : Int32, target : UInt16*, targetLength : Int32) : Int8

    fun ucol_equal(coll : Win32cr::Globalization::UCollator*, source : UInt16*, sourceLength : Int32, target : UInt16*, targetLength : Int32) : Int8

    fun ucol_strcollIter(coll : Win32cr::Globalization::UCollator*, sIter : Win32cr::Globalization::UCharIterator*, tIter : Win32cr::Globalization::UCharIterator*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCollationResult

    fun ucol_getStrength(coll : Win32cr::Globalization::UCollator*) : Win32cr::Globalization::UColAttributeValue

    fun ucol_setStrength(coll : Win32cr::Globalization::UCollator*, strength : Win32cr::Globalization::UColAttributeValue) : Void

    fun ucol_getReorderCodes(coll : Win32cr::Globalization::UCollator*, dest : Int32*, destCapacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_setReorderCodes(coll : Win32cr::Globalization::UCollator*, reorderCodes : Int32*, reorderCodesLength : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucol_getEquivalentReorderCodes(reorderCode : Int32, dest : Int32*, destCapacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_getDisplayName(objLoc : Win32cr::Foundation::PSTR, dispLoc : Win32cr::Foundation::PSTR, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_getAvailable(localeIndex : Int32) : Win32cr::Foundation::PSTR

    fun ucol_countAvailable : Int32

    fun ucol_openAvailableLocales(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucol_getKeywords(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucol_getKeywordValues(keyword : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucol_getKeywordValuesForLocale(key : Win32cr::Foundation::PSTR, locale : Win32cr::Foundation::PSTR, commonlyUsed : Int8, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucol_getFunctionalEquivalent(result : Win32cr::Foundation::PSTR, resultCapacity : Int32, keyword : Win32cr::Foundation::PSTR, locale : Win32cr::Foundation::PSTR, isAvailable : Int8*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_getRules(coll : Win32cr::Globalization::UCollator*, length : Int32*) : UInt16*

    fun ucol_getSortKey(coll : Win32cr::Globalization::UCollator*, source : UInt16*, sourceLength : Int32, result : UInt8*, resultLength : Int32) : Int32

    fun ucol_nextSortKeyPart(coll : Win32cr::Globalization::UCollator*, iter : Win32cr::Globalization::UCharIterator*, state : UInt32*, dest : UInt8*, count : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_getBound(source : UInt8*, sourceLength : Int32, boundType : Win32cr::Globalization::UColBoundMode, noOfLevels : UInt32, result : UInt8*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_getVersion(coll : Win32cr::Globalization::UCollator*, info : UInt8*) : Void

    fun ucol_getUCAVersion(coll : Win32cr::Globalization::UCollator*, info : UInt8*) : Void

    fun ucol_mergeSortkeys(src1 : UInt8*, src1Length : Int32, src2 : UInt8*, src2Length : Int32, dest : UInt8*, destCapacity : Int32) : Int32

    fun ucol_setAttribute(coll : Win32cr::Globalization::UCollator*, attr : Win32cr::Globalization::UColAttribute, value : Win32cr::Globalization::UColAttributeValue, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucol_getAttribute(coll : Win32cr::Globalization::UCollator*, attr : Win32cr::Globalization::UColAttribute, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UColAttributeValue

    fun ucol_setMaxVariable(coll : Win32cr::Globalization::UCollator*, group : Win32cr::Globalization::UColReorderCode, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void

    fun ucol_getMaxVariable(coll : Win32cr::Globalization::UCollator*) : Win32cr::Globalization::UColReorderCode

    fun ucol_getVariableTop(coll : Win32cr::Globalization::UCollator*, status : Win32cr::Globalization::UErrorCode*) : UInt32

    fun ucol_safeClone(coll : Win32cr::Globalization::UCollator*, stackBuffer : Void*, pBufferSize : Int32*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCollator*

    fun ucol_getRulesEx(coll : Win32cr::Globalization::UCollator*, delta : Win32cr::Globalization::UColRuleOption, buffer : UInt16*, bufferLen : Int32) : Int32

    fun ucol_getLocaleByType(coll : Win32cr::Globalization::UCollator*, type__ : Win32cr::Globalization::ULocDataLocaleType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucol_getTailoredSet(coll : Win32cr::Globalization::UCollator*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun ucol_cloneBinary(coll : Win32cr::Globalization::UCollator*, buffer : UInt8*, capacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_openBinary(bin : UInt8*, length : Int32, base : Win32cr::Globalization::UCollator*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCollator*

    fun ucol_openElements(coll : Win32cr::Globalization::UCollator*, text : UInt16*, textLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCollationElements*

    fun ucol_keyHashCode(key : UInt8*, length : Int32) : Int32

    fun ucol_closeElements(elems : Win32cr::Globalization::UCollationElements*) : Void

    fun ucol_reset(elems : Win32cr::Globalization::UCollationElements*) : Void

    fun ucol_next(elems : Win32cr::Globalization::UCollationElements*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_previous(elems : Win32cr::Globalization::UCollationElements*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucol_getMaxExpansion(elems : Win32cr::Globalization::UCollationElements*, order : Int32) : Int32

    fun ucol_setText(elems : Win32cr::Globalization::UCollationElements*, text : UInt16*, textLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucol_getOffset(elems : Win32cr::Globalization::UCollationElements*) : Int32

    fun ucol_setOffset(elems : Win32cr::Globalization::UCollationElements*, offset : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucol_primaryOrder(order : Int32) : Int32

    fun ucol_secondaryOrder(order : Int32) : Int32

    fun ucol_tertiaryOrder(order : Int32) : Int32

    fun ucsdet_open(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCharsetDetector*

    fun ucsdet_close(ucsd : Win32cr::Globalization::UCharsetDetector*) : Void

    fun ucsdet_setText(ucsd : Win32cr::Globalization::UCharsetDetector*, textIn : Win32cr::Foundation::PSTR, len : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucsdet_setDeclaredEncoding(ucsd : Win32cr::Globalization::UCharsetDetector*, encoding : Win32cr::Foundation::PSTR, length : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ucsdet_detect(ucsd : Win32cr::Globalization::UCharsetDetector*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCharsetMatch*

    fun ucsdet_detectAll(ucsd : Win32cr::Globalization::UCharsetDetector*, matchesFound : Int32*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UCharsetMatch**

    fun ucsdet_getName(ucsm : Win32cr::Globalization::UCharsetMatch*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucsdet_getConfidence(ucsm : Win32cr::Globalization::UCharsetMatch*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucsdet_getLanguage(ucsm : Win32cr::Globalization::UCharsetMatch*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucsdet_getUChars(ucsm : Win32cr::Globalization::UCharsetMatch*, buf : UInt16*, cap : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucsdet_getAllDetectableCharsets(ucsd : Win32cr::Globalization::UCharsetDetector*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun ucsdet_isInputFilterEnabled(ucsd : Win32cr::Globalization::UCharsetDetector*) : Int8

    fun ucsdet_enableInputFilter(ucsd : Win32cr::Globalization::UCharsetDetector*, filter : Int8) : Int8

    fun ufieldpositer_open(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFieldPositionIterator*

    fun ufieldpositer_close(fpositer : Win32cr::Globalization::UFieldPositionIterator*) : Void

    fun ufieldpositer_next(fpositer : Win32cr::Globalization::UFieldPositionIterator*, beginIndex : Int32*, endIndex : Int32*) : Int32

    fun ufmt_open(status : Win32cr::Globalization::UErrorCode*) : Void**

    fun ufmt_close(fmt : Void**) : Void

    fun ufmt_getType(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattableType

    fun ufmt_isNumeric(fmt : Void**) : Int8

    fun ufmt_getDate(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Float64

    fun ufmt_getDouble(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Float64

    fun ufmt_getLong(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ufmt_getInt64(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun ufmt_getObject(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Void*

    fun ufmt_getUChars(fmt : Void**, len : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ufmt_getArrayLength(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ufmt_getArrayItemByIndex(fmt : Void**, n : Int32, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun ufmt_getDecNumChars(fmt : Void**, len : Int32*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun ucfpos_open(ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UConstrainedFieldPosition*

    fun ucfpos_reset(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun ucfpos_close(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*) : Void

    fun ucfpos_constrainCategory(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, category : Int32, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun ucfpos_constrainField(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, category : Int32, field : Int32, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun ucfpos_getCategory(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucfpos_getField(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun ucfpos_getIndexes(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, pStart : Int32*, pLimit : Int32*, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun ucfpos_getInt64IterationContext(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, ec : Win32cr::Globalization::UErrorCode*) : Int64

    fun ucfpos_setInt64IterationContext(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, context : Int64, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun ucfpos_matchesField(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, category : Int32, field : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int8

    fun ucfpos_setState(ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, category : Int32, field : Int32, start : Int32, limit : Int32, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun ufmtval_getString(ufmtval : Win32cr::Globalization::UFormattedValue*, pLength : Int32*, ec : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun ufmtval_nextPosition(ufmtval : Win32cr::Globalization::UFormattedValue*, ucfpos : Win32cr::Globalization::UConstrainedFieldPosition*, ec : Win32cr::Globalization::UErrorCode*) : Int8

    fun udtitvfmt_open(locale : Win32cr::Foundation::PSTR, skeleton : UInt16*, skeletonLength : Int32, tzID : UInt16*, tzIDLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UDateIntervalFormat*

    fun udtitvfmt_close(formatter : Win32cr::Globalization::UDateIntervalFormat*) : Void

    fun udtitvfmt_openResult(ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedDateInterval*

    fun udtitvfmt_resultAsValue(uresult : Win32cr::Globalization::UFormattedDateInterval*, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedValue*

    fun udtitvfmt_closeResult(uresult : Win32cr::Globalization::UFormattedDateInterval*) : Void

    fun udtitvfmt_format(formatter : Win32cr::Globalization::UDateIntervalFormat*, fromDate : Float64, toDate : Float64, result : UInt16*, resultCapacity : Int32, position : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ugender_getInstance(locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UGenderInfo*

    fun ugender_getListGender(genderInfo : Win32cr::Globalization::UGenderInfo*, genders : Win32cr::Globalization::UGender*, size : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UGender

    fun ulistfmt_open(locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UListFormatter*

    fun ulistfmt_openForType(locale : Win32cr::Foundation::PSTR, type__ : Win32cr::Globalization::UListFormatterType, width : Win32cr::Globalization::UListFormatterWidth, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UListFormatter*

    fun ulistfmt_close(listfmt : Win32cr::Globalization::UListFormatter*) : Void

    fun ulistfmt_openResult(ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedList*

    fun ulistfmt_resultAsValue(uresult : Win32cr::Globalization::UFormattedList*, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedValue*

    fun ulistfmt_closeResult(uresult : Win32cr::Globalization::UFormattedList*) : Void

    fun ulistfmt_format(listfmt : Win32cr::Globalization::UListFormatter*, strings : UInt16**, stringLengths : Int32*, stringCount : Int32, result : UInt16*, resultCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ulistfmt_formatStringsToResult(listfmt : Win32cr::Globalization::UListFormatter*, strings : UInt16**, stringLengths : Int32*, stringCount : Int32, uresult : Win32cr::Globalization::UFormattedList*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ulocdata_open(localeID : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::ULocaleData*

    fun ulocdata_close(uld : Win32cr::Globalization::ULocaleData*) : Void

    fun ulocdata_setNoSubstitute(uld : Win32cr::Globalization::ULocaleData*, setting : Int8) : Void

    fun ulocdata_getNoSubstitute(uld : Win32cr::Globalization::ULocaleData*) : Int8

    fun ulocdata_getExemplarSet(uld : Win32cr::Globalization::ULocaleData*, fillIn : Win32cr::Globalization::USet*, options : UInt32, extype : Win32cr::Globalization::ULocaleDataExemplarSetType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun ulocdata_getDelimiter(uld : Win32cr::Globalization::ULocaleData*, type__ : Win32cr::Globalization::ULocaleDataDelimiterType, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ulocdata_getMeasurementSystem(localeID : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UMeasurementSystem

    fun ulocdata_getPaperSize(localeID : Win32cr::Foundation::PSTR, height : Int32*, width : Int32*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ulocdata_getCLDRVersion(versionArray : UInt8*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ulocdata_getLocaleDisplayPattern(uld : Win32cr::Globalization::ULocaleData*, pattern : UInt16*, patternCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ulocdata_getLocaleSeparator(uld : Win32cr::Globalization::ULocaleData*, separator : UInt16*, separatorCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_formatMessage(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_vformatMessage(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, result : UInt16*, resultLength : Int32, ap : Int8*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_parseMessage(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, source : UInt16*, sourceLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun u_vparseMessage(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, source : UInt16*, sourceLength : Int32, ap : Int8*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun u_formatMessageWithError(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, result : UInt16*, resultLength : Int32, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_vformatMessageWithError(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, result : UInt16*, resultLength : Int32, parseError : Win32cr::Globalization::UParseError*, ap : Int8*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun u_parseMessageWithError(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, source : UInt16*, sourceLength : Int32, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun u_vparseMessageWithError(locale : Win32cr::Foundation::PSTR, pattern : UInt16*, patternLength : Int32, source : UInt16*, sourceLength : Int32, ap : Int8*, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun umsg_open(pattern : UInt16*, patternLength : Int32, locale : Win32cr::Foundation::PSTR, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun umsg_close(format : Void**) : Void

    fun umsg_clone(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Void*

    fun umsg_setLocale(fmt : Void**, locale : Win32cr::Foundation::PSTR) : Void

    fun umsg_getLocale(fmt : Void**) : Win32cr::Foundation::PSTR

    fun umsg_applyPattern(fmt : Void**, pattern : UInt16*, patternLength : Int32, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun umsg_toPattern(fmt : Void**, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun umsg_format(fmt : Void**, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun umsg_vformat(fmt : Void**, result : UInt16*, resultLength : Int32, ap : Int8*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun umsg_parse(fmt : Void**, source : UInt16*, sourceLength : Int32, count : Int32*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun umsg_vparse(fmt : Void**, source : UInt16*, sourceLength : Int32, count : Int32*, ap : Int8*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun umsg_autoQuoteApostrophe(pattern : UInt16*, patternLength : Int32, dest : UInt16*, destCapacity : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_open(style : Win32cr::Globalization::UNumberFormatStyle, pattern : UInt16*, patternLength : Int32, locale : Win32cr::Foundation::PSTR, parseErr : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun unum_close(fmt : Void**) : Void

    fun unum_clone(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun unum_format(fmt : Void**, number : Int32, result : UInt16*, resultLength : Int32, pos : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_formatInt64(fmt : Void**, number : Int64, result : UInt16*, resultLength : Int32, pos : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_formatDouble(fmt : Void**, number : Float64, result : UInt16*, resultLength : Int32, pos : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_formatDoubleForFields(format : Void**, number : Float64, result : UInt16*, resultLength : Int32, fpositer : Win32cr::Globalization::UFieldPositionIterator*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_formatDecimal(fmt : Void**, number : Win32cr::Foundation::PSTR, length : Int32, result : UInt16*, resultLength : Int32, pos : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_formatDoubleCurrency(fmt : Void**, number : Float64, currency : UInt16*, result : UInt16*, resultLength : Int32, pos : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_formatUFormattable(fmt : Void**, number : Void**, result : UInt16*, resultLength : Int32, pos : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_parse(fmt : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_parseInt64(fmt : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun unum_parseDouble(fmt : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, status : Win32cr::Globalization::UErrorCode*) : Float64

    fun unum_parseDecimal(fmt : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, outBuf : Win32cr::Foundation::PSTR, outBufLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_parseDoubleCurrency(fmt : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, currency : UInt16*, status : Win32cr::Globalization::UErrorCode*) : Float64

    fun unum_parseToUFormattable(fmt : Void**, result : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun unum_applyPattern(format : Void**, localized : Int8, pattern : UInt16*, patternLength : Int32, parseError : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun unum_getAvailable(localeIndex : Int32) : Win32cr::Foundation::PSTR

    fun unum_countAvailable : Int32

    fun unum_getAttribute(fmt : Void**, attr : Win32cr::Globalization::UNumberFormatAttribute) : Int32

    fun unum_setAttribute(fmt : Void**, attr : Win32cr::Globalization::UNumberFormatAttribute, newValue : Int32) : Void

    fun unum_getDoubleAttribute(fmt : Void**, attr : Win32cr::Globalization::UNumberFormatAttribute) : Float64

    fun unum_setDoubleAttribute(fmt : Void**, attr : Win32cr::Globalization::UNumberFormatAttribute, newValue : Float64) : Void

    fun unum_getTextAttribute(fmt : Void**, tag : Win32cr::Globalization::UNumberFormatTextAttribute, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_setTextAttribute(fmt : Void**, tag : Win32cr::Globalization::UNumberFormatTextAttribute, newValue : UInt16*, newValueLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun unum_toPattern(fmt : Void**, isPatternLocalized : Int8, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_getSymbol(fmt : Void**, symbol : Win32cr::Globalization::UNumberFormatSymbol, buffer : UInt16*, size : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun unum_setSymbol(fmt : Void**, symbol : Win32cr::Globalization::UNumberFormatSymbol, value : UInt16*, length : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun unum_getLocaleByType(fmt : Void**, type__ : Win32cr::Globalization::ULocDataLocaleType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun unum_setContext(fmt : Void**, value : Win32cr::Globalization::UDisplayContext, status : Win32cr::Globalization::UErrorCode*) : Void

    fun unum_getContext(fmt : Void**, type__ : Win32cr::Globalization::UDisplayContextType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UDisplayContext

    fun udat_toCalendarDateField(field : Win32cr::Globalization::UDateFormatField) : Win32cr::Globalization::UCalendarDateFields

    fun udat_open(timeStyle : Win32cr::Globalization::UDateFormatStyle, dateStyle : Win32cr::Globalization::UDateFormatStyle, locale : Win32cr::Foundation::PSTR, tzID : UInt16*, tzIDLength : Int32, pattern : UInt16*, patternLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun udat_close(format : Void**) : Void

    fun udat_getBooleanAttribute(fmt : Void**, attr : Win32cr::Globalization::UDateFormatBooleanAttribute, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun udat_setBooleanAttribute(fmt : Void**, attr : Win32cr::Globalization::UDateFormatBooleanAttribute, newValue : Int8, status : Win32cr::Globalization::UErrorCode*) : Void

    fun udat_clone(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun udat_format(format : Void**, dateToFormat : Float64, result : UInt16*, resultLength : Int32, position : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun udat_formatCalendar(format : Void**, calendar : Void**, result : UInt16*, capacity : Int32, position : Win32cr::Globalization::UFieldPosition*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun udat_formatForFields(format : Void**, dateToFormat : Float64, result : UInt16*, resultLength : Int32, fpositer : Win32cr::Globalization::UFieldPositionIterator*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun udat_formatCalendarForFields(format : Void**, calendar : Void**, result : UInt16*, capacity : Int32, fpositer : Win32cr::Globalization::UFieldPositionIterator*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun udat_parse(format : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, status : Win32cr::Globalization::UErrorCode*) : Float64

    fun udat_parseCalendar(format : Void**, calendar : Void**, text : UInt16*, textLength : Int32, parsePos : Int32*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun udat_isLenient(fmt : Void**) : Int8

    fun udat_setLenient(fmt : Void**, isLenient : Int8) : Void

    fun udat_getCalendar(fmt : Void**) : Void**

    fun udat_setCalendar(fmt : Void**, calendarToSet : Void**) : Void

    fun udat_getNumberFormat(fmt : Void**) : Void**

    fun udat_getNumberFormatForField(fmt : Void**, field : UInt16) : Void**

    fun udat_adoptNumberFormatForFields(fmt : Void**, fields : UInt16*, numberFormatToSet : Void**, status : Win32cr::Globalization::UErrorCode*) : Void

    fun udat_setNumberFormat(fmt : Void**, numberFormatToSet : Void**) : Void

    fun udat_adoptNumberFormat(fmt : Void**, numberFormatToAdopt : Void**) : Void

    fun udat_getAvailable(localeIndex : Int32) : Win32cr::Foundation::PSTR

    fun udat_countAvailable : Int32

    fun udat_get2DigitYearStart(fmt : Void**, status : Win32cr::Globalization::UErrorCode*) : Float64

    fun udat_set2DigitYearStart(fmt : Void**, d : Float64, status : Win32cr::Globalization::UErrorCode*) : Void

    fun udat_toPattern(fmt : Void**, localized : Int8, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun udat_applyPattern(format : Void**, localized : Int8, pattern : UInt16*, patternLength : Int32) : Void

    fun udat_getSymbols(fmt : Void**, type__ : Win32cr::Globalization::UDateFormatSymbolType, symbolIndex : Int32, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun udat_countSymbols(fmt : Void**, type__ : Win32cr::Globalization::UDateFormatSymbolType) : Int32

    fun udat_setSymbols(format : Void**, type__ : Win32cr::Globalization::UDateFormatSymbolType, symbolIndex : Int32, value : UInt16*, valueLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun udat_getLocaleByType(fmt : Void**, type__ : Win32cr::Globalization::ULocDataLocaleType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun udat_setContext(fmt : Void**, value : Win32cr::Globalization::UDisplayContext, status : Win32cr::Globalization::UErrorCode*) : Void

    fun udat_getContext(fmt : Void**, type__ : Win32cr::Globalization::UDisplayContextType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UDisplayContext

    fun udatpg_open(locale : Win32cr::Foundation::PSTR, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void**

    fun udatpg_openEmpty(pErrorCode : Win32cr::Globalization::UErrorCode*) : Void**

    fun udatpg_close(dtpg : Void**) : Void

    fun udatpg_clone(dtpg : Void**, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void**

    fun udatpg_getBestPattern(dtpg : Void**, skeleton : UInt16*, length : Int32, bestPattern : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun udatpg_getBestPatternWithOptions(dtpg : Void**, skeleton : UInt16*, length : Int32, options : Win32cr::Globalization::UDateTimePatternMatchOptions, bestPattern : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun udatpg_getSkeleton(unusedDtpg : Void**, pattern : UInt16*, length : Int32, skeleton : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun udatpg_getBaseSkeleton(unusedDtpg : Void**, pattern : UInt16*, length : Int32, baseSkeleton : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun udatpg_addPattern(dtpg : Void**, pattern : UInt16*, patternLength : Int32, override : Int8, conflictingPattern : UInt16*, capacity : Int32, pLength : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UDateTimePatternConflict

    fun udatpg_setAppendItemFormat(dtpg : Void**, field : Win32cr::Globalization::UDateTimePatternField, value : UInt16*, length : Int32) : Void

    fun udatpg_getAppendItemFormat(dtpg : Void**, field : Win32cr::Globalization::UDateTimePatternField, pLength : Int32*) : UInt16*

    fun udatpg_setAppendItemName(dtpg : Void**, field : Win32cr::Globalization::UDateTimePatternField, value : UInt16*, length : Int32) : Void

    fun udatpg_getAppendItemName(dtpg : Void**, field : Win32cr::Globalization::UDateTimePatternField, pLength : Int32*) : UInt16*

    fun udatpg_getFieldDisplayName(dtpg : Void**, field : Win32cr::Globalization::UDateTimePatternField, width : Win32cr::Globalization::UDateTimePGDisplayWidth, fieldName : UInt16*, capacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun udatpg_setDateTimeFormat(dtpg : Void**, dtFormat : UInt16*, length : Int32) : Void

    fun udatpg_getDateTimeFormat(dtpg : Void**, pLength : Int32*) : UInt16*

    fun udatpg_setDecimal(dtpg : Void**, decimal : UInt16*, length : Int32) : Void

    fun udatpg_getDecimal(dtpg : Void**, pLength : Int32*) : UInt16*

    fun udatpg_replaceFieldTypes(dtpg : Void**, pattern : UInt16*, patternLength : Int32, skeleton : UInt16*, skeletonLength : Int32, dest : UInt16*, destCapacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun udatpg_replaceFieldTypesWithOptions(dtpg : Void**, pattern : UInt16*, patternLength : Int32, skeleton : UInt16*, skeletonLength : Int32, options : Win32cr::Globalization::UDateTimePatternMatchOptions, dest : UInt16*, destCapacity : Int32, pErrorCode : Win32cr::Globalization::UErrorCode*) : Int32

    fun udatpg_openSkeletons(dtpg : Void**, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun udatpg_openBaseSkeletons(dtpg : Void**, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun udatpg_getPatternForSkeleton(dtpg : Void**, skeleton : UInt16*, skeletonLength : Int32, pLength : Int32*) : UInt16*

    fun unumf_openForSkeletonAndLocale(skeleton : UInt16*, skeletonLen : Int32, locale : Win32cr::Foundation::PSTR, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNumberFormatter*

    fun unumf_openForSkeletonAndLocaleWithError(skeleton : UInt16*, skeletonLen : Int32, locale : Win32cr::Foundation::PSTR, perror : Win32cr::Globalization::UParseError*, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNumberFormatter*

    fun unumf_openResult(ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedNumber*

    fun unumf_formatInt(uformatter : Win32cr::Globalization::UNumberFormatter*, value : Int64, uresult : Win32cr::Globalization::UFormattedNumber*, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun unumf_formatDouble(uformatter : Win32cr::Globalization::UNumberFormatter*, value : Float64, uresult : Win32cr::Globalization::UFormattedNumber*, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun unumf_formatDecimal(uformatter : Win32cr::Globalization::UNumberFormatter*, value : Win32cr::Foundation::PSTR, valueLen : Int32, uresult : Win32cr::Globalization::UFormattedNumber*, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun unumf_resultAsValue(uresult : Win32cr::Globalization::UFormattedNumber*, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedValue*

    fun unumf_resultToString(uresult : Win32cr::Globalization::UFormattedNumber*, buffer : UInt16*, bufferCapacity : Int32, ec : Win32cr::Globalization::UErrorCode*) : Int32

    fun unumf_resultNextFieldPosition(uresult : Win32cr::Globalization::UFormattedNumber*, ufpos : Win32cr::Globalization::UFieldPosition*, ec : Win32cr::Globalization::UErrorCode*) : Int8

    fun unumf_resultGetAllFieldPositions(uresult : Win32cr::Globalization::UFormattedNumber*, ufpositer : Win32cr::Globalization::UFieldPositionIterator*, ec : Win32cr::Globalization::UErrorCode*) : Void

    fun unumf_close(uformatter : Win32cr::Globalization::UNumberFormatter*) : Void

    fun unumf_closeResult(uresult : Win32cr::Globalization::UFormattedNumber*) : Void

    fun unumsys_open(locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNumberingSystem*

    fun unumsys_openByName(name : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UNumberingSystem*

    fun unumsys_close(unumsys : Win32cr::Globalization::UNumberingSystem*) : Void

    fun unumsys_openAvailableNames(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun unumsys_getName(unumsys : Win32cr::Globalization::UNumberingSystem*) : Win32cr::Foundation::PSTR

    fun unumsys_isAlgorithmic(unumsys : Win32cr::Globalization::UNumberingSystem*) : Int8

    fun unumsys_getRadix(unumsys : Win32cr::Globalization::UNumberingSystem*) : Int32

    fun unumsys_getDescription(unumsys : Win32cr::Globalization::UNumberingSystem*, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uplrules_open(locale : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UPluralRules*

    fun uplrules_openForType(locale : Win32cr::Foundation::PSTR, type__ : Win32cr::Globalization::UPluralType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UPluralRules*

    fun uplrules_close(uplrules : Win32cr::Globalization::UPluralRules*) : Void

    fun uplrules_select(uplrules : Win32cr::Globalization::UPluralRules*, number : Float64, keyword : UInt16*, capacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uplrules_selectFormatted(uplrules : Win32cr::Globalization::UPluralRules*, number : Win32cr::Globalization::UFormattedNumber*, keyword : UInt16*, capacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uplrules_getKeywords(uplrules : Win32cr::Globalization::UPluralRules*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uregex_open(pattern : UInt16*, patternLength : Int32, flags : UInt32, pe : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URegularExpression*

    fun uregex_openUText(pattern : Win32cr::Globalization::UText*, flags : UInt32, pe : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URegularExpression*

    fun uregex_openC(pattern : Win32cr::Foundation::PSTR, flags : UInt32, pe : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URegularExpression*

    fun uregex_close(regexp : Win32cr::Globalization::URegularExpression*) : Void

    fun uregex_clone(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URegularExpression*

    fun uregex_pattern(regexp : Win32cr::Globalization::URegularExpression*, patLength : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun uregex_patternUText(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun uregex_flags(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_setText(regexp : Win32cr::Globalization::URegularExpression*, text : UInt16*, textLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_setUText(regexp : Win32cr::Globalization::URegularExpression*, text : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_getText(regexp : Win32cr::Globalization::URegularExpression*, textLength : Int32*, status : Win32cr::Globalization::UErrorCode*) : UInt16*

    fun uregex_getUText(regexp : Win32cr::Globalization::URegularExpression*, dest : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun uregex_refreshUText(regexp : Win32cr::Globalization::URegularExpression*, text : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_matches(regexp : Win32cr::Globalization::URegularExpression*, startIndex : Int32, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_matches64(regexp : Win32cr::Globalization::URegularExpression*, startIndex : Int64, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_lookingAt(regexp : Win32cr::Globalization::URegularExpression*, startIndex : Int32, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_lookingAt64(regexp : Win32cr::Globalization::URegularExpression*, startIndex : Int64, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_find(regexp : Win32cr::Globalization::URegularExpression*, startIndex : Int32, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_find64(regexp : Win32cr::Globalization::URegularExpression*, startIndex : Int64, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_findNext(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_groupCount(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_groupNumberFromName(regexp : Win32cr::Globalization::URegularExpression*, groupName : UInt16*, nameLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_groupNumberFromCName(regexp : Win32cr::Globalization::URegularExpression*, groupName : Win32cr::Foundation::PSTR, nameLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_group(regexp : Win32cr::Globalization::URegularExpression*, groupNum : Int32, dest : UInt16*, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_groupUText(regexp : Win32cr::Globalization::URegularExpression*, groupNum : Int32, dest : Win32cr::Globalization::UText*, groupLength : Int64*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun uregex_start(regexp : Win32cr::Globalization::URegularExpression*, groupNum : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_start64(regexp : Win32cr::Globalization::URegularExpression*, groupNum : Int32, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun uregex_end(regexp : Win32cr::Globalization::URegularExpression*, groupNum : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_end64(regexp : Win32cr::Globalization::URegularExpression*, groupNum : Int32, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun uregex_reset(regexp : Win32cr::Globalization::URegularExpression*, index : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_reset64(regexp : Win32cr::Globalization::URegularExpression*, index : Int64, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_setRegion(regexp : Win32cr::Globalization::URegularExpression*, regionStart : Int32, regionLimit : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_setRegion64(regexp : Win32cr::Globalization::URegularExpression*, regionStart : Int64, regionLimit : Int64, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_setRegionAndStart(regexp : Win32cr::Globalization::URegularExpression*, regionStart : Int64, regionLimit : Int64, startIndex : Int64, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_regionStart(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_regionStart64(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun uregex_regionEnd(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_regionEnd64(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun uregex_hasTransparentBounds(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_useTransparentBounds(regexp : Win32cr::Globalization::URegularExpression*, b : Int8, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_hasAnchoringBounds(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_useAnchoringBounds(regexp : Win32cr::Globalization::URegularExpression*, b : Int8, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_hitEnd(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_requireEnd(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int8

    fun uregex_replaceAll(regexp : Win32cr::Globalization::URegularExpression*, replacementText : UInt16*, replacementLength : Int32, destBuf : UInt16*, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_replaceAllUText(regexp : Win32cr::Globalization::URegularExpression*, replacement : Win32cr::Globalization::UText*, dest : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun uregex_replaceFirst(regexp : Win32cr::Globalization::URegularExpression*, replacementText : UInt16*, replacementLength : Int32, destBuf : UInt16*, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_replaceFirstUText(regexp : Win32cr::Globalization::URegularExpression*, replacement : Win32cr::Globalization::UText*, dest : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun uregex_appendReplacement(regexp : Win32cr::Globalization::URegularExpression*, replacementText : UInt16*, replacementLength : Int32, destBuf : UInt16**, destCapacity : Int32*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_appendReplacementUText(regexp : Win32cr::Globalization::URegularExpression*, replacementText : Win32cr::Globalization::UText*, dest : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_appendTail(regexp : Win32cr::Globalization::URegularExpression*, destBuf : UInt16**, destCapacity : Int32*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_appendTailUText(regexp : Win32cr::Globalization::URegularExpression*, dest : Win32cr::Globalization::UText*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UText*

    fun uregex_split(regexp : Win32cr::Globalization::URegularExpression*, destBuf : UInt16*, destCapacity : Int32, requiredCapacity : Int32*, destFields : UInt16**, destFieldsCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_splitUText(regexp : Win32cr::Globalization::URegularExpression*, destFields : Win32cr::Globalization::UText**, destFieldsCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_setTimeLimit(regexp : Win32cr::Globalization::URegularExpression*, limit : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_getTimeLimit(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_setStackLimit(regexp : Win32cr::Globalization::URegularExpression*, limit : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_getStackLimit(regexp : Win32cr::Globalization::URegularExpression*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uregex_setMatchCallback(regexp : Win32cr::Globalization::URegularExpression*, callback : Win32cr::Globalization::URegexMatchCallback, context : Void*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_getMatchCallback(regexp : Win32cr::Globalization::URegularExpression*, callback : Win32cr::Globalization::URegexMatchCallback*, context : Void**, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_setFindProgressCallback(regexp : Win32cr::Globalization::URegularExpression*, callback : Win32cr::Globalization::URegexFindProgressCallback, context : Void*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregex_getFindProgressCallback(regexp : Win32cr::Globalization::URegularExpression*, callback : Win32cr::Globalization::URegexFindProgressCallback*, context : Void**, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uregion_getRegionFromCode(regionCode : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URegion*

    fun uregion_getRegionFromNumericCode(code : Int32, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URegion*

    fun uregion_getAvailable(type__ : Win32cr::Globalization::URegionType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uregion_areEqual(uregion : Win32cr::Globalization::URegion*, otherRegion : Win32cr::Globalization::URegion*) : Int8

    fun uregion_getContainingRegion(uregion : Win32cr::Globalization::URegion*) : Win32cr::Globalization::URegion*

    fun uregion_getContainingRegionOfType(uregion : Win32cr::Globalization::URegion*, type__ : Win32cr::Globalization::URegionType) : Win32cr::Globalization::URegion*

    fun uregion_getContainedRegions(uregion : Win32cr::Globalization::URegion*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uregion_getContainedRegionsOfType(uregion : Win32cr::Globalization::URegion*, type__ : Win32cr::Globalization::URegionType, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uregion_contains(uregion : Win32cr::Globalization::URegion*, otherRegion : Win32cr::Globalization::URegion*) : Int8

    fun uregion_getPreferredValues(uregion : Win32cr::Globalization::URegion*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun uregion_getRegionCode(uregion : Win32cr::Globalization::URegion*) : Win32cr::Foundation::PSTR

    fun uregion_getNumericCode(uregion : Win32cr::Globalization::URegion*) : Int32

    fun uregion_getType(uregion : Win32cr::Globalization::URegion*) : Win32cr::Globalization::URegionType

    fun ureldatefmt_open(locale : Win32cr::Foundation::PSTR, nfToAdopt : Void**, width : Win32cr::Globalization::UDateRelativeDateTimeFormatterStyle, capitalizationContext : Win32cr::Globalization::UDisplayContext, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URelativeDateTimeFormatter*

    fun ureldatefmt_close(reldatefmt : Win32cr::Globalization::URelativeDateTimeFormatter*) : Void

    fun ureldatefmt_openResult(ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedRelativeDateTime*

    fun ureldatefmt_resultAsValue(ufrdt : Win32cr::Globalization::UFormattedRelativeDateTime*, ec : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UFormattedValue*

    fun ureldatefmt_closeResult(ufrdt : Win32cr::Globalization::UFormattedRelativeDateTime*) : Void

    fun ureldatefmt_formatNumeric(reldatefmt : Win32cr::Globalization::URelativeDateTimeFormatter*, offset : Float64, unit : Win32cr::Globalization::URelativeDateTimeUnit, result : UInt16*, resultCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ureldatefmt_formatNumericToResult(reldatefmt : Win32cr::Globalization::URelativeDateTimeFormatter*, offset : Float64, unit : Win32cr::Globalization::URelativeDateTimeUnit, result : Win32cr::Globalization::UFormattedRelativeDateTime*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ureldatefmt_format(reldatefmt : Win32cr::Globalization::URelativeDateTimeFormatter*, offset : Float64, unit : Win32cr::Globalization::URelativeDateTimeUnit, result : UInt16*, resultCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun ureldatefmt_formatToResult(reldatefmt : Win32cr::Globalization::URelativeDateTimeFormatter*, offset : Float64, unit : Win32cr::Globalization::URelativeDateTimeUnit, result : Win32cr::Globalization::UFormattedRelativeDateTime*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun ureldatefmt_combineDateAndTime(reldatefmt : Win32cr::Globalization::URelativeDateTimeFormatter*, relativeDateString : UInt16*, relativeDateStringLen : Int32, timeString : UInt16*, timeStringLen : Int32, result : UInt16*, resultCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_open(pattern : UInt16*, patternlength : Int32, text : UInt16*, textlength : Int32, locale : Win32cr::Foundation::PSTR, breakiter : Win32cr::Globalization::UBreakIterator*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UStringSearch*

    fun usearch_openFromCollator(pattern : UInt16*, patternlength : Int32, text : UInt16*, textlength : Int32, collator : Win32cr::Globalization::UCollator*, breakiter : Win32cr::Globalization::UBreakIterator*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UStringSearch*

    fun usearch_close(searchiter : Win32cr::Globalization::UStringSearch*) : Void

    fun usearch_setOffset(strsrch : Win32cr::Globalization::UStringSearch*, position : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun usearch_getOffset(strsrch : Win32cr::Globalization::UStringSearch*) : Int32

    fun usearch_setAttribute(strsrch : Win32cr::Globalization::UStringSearch*, attribute : Win32cr::Globalization::USearchAttribute, value : Win32cr::Globalization::USearchAttributeValue, status : Win32cr::Globalization::UErrorCode*) : Void

    fun usearch_getAttribute(strsrch : Win32cr::Globalization::UStringSearch*, attribute : Win32cr::Globalization::USearchAttribute) : Win32cr::Globalization::USearchAttributeValue

    fun usearch_getMatchedStart(strsrch : Win32cr::Globalization::UStringSearch*) : Int32

    fun usearch_getMatchedLength(strsrch : Win32cr::Globalization::UStringSearch*) : Int32

    fun usearch_getMatchedText(strsrch : Win32cr::Globalization::UStringSearch*, result : UInt16*, resultCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_setBreakIterator(strsrch : Win32cr::Globalization::UStringSearch*, breakiter : Win32cr::Globalization::UBreakIterator*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun usearch_getBreakIterator(strsrch : Win32cr::Globalization::UStringSearch*) : Win32cr::Globalization::UBreakIterator*

    fun usearch_setText(strsrch : Win32cr::Globalization::UStringSearch*, text : UInt16*, textlength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun usearch_getText(strsrch : Win32cr::Globalization::UStringSearch*, length : Int32*) : UInt16*

    fun usearch_getCollator(strsrch : Win32cr::Globalization::UStringSearch*) : Win32cr::Globalization::UCollator*

    fun usearch_setCollator(strsrch : Win32cr::Globalization::UStringSearch*, collator : Win32cr::Globalization::UCollator*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun usearch_setPattern(strsrch : Win32cr::Globalization::UStringSearch*, pattern : UInt16*, patternlength : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun usearch_getPattern(strsrch : Win32cr::Globalization::UStringSearch*, length : Int32*) : UInt16*

    fun usearch_first(strsrch : Win32cr::Globalization::UStringSearch*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_following(strsrch : Win32cr::Globalization::UStringSearch*, position : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_last(strsrch : Win32cr::Globalization::UStringSearch*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_preceding(strsrch : Win32cr::Globalization::UStringSearch*, position : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_next(strsrch : Win32cr::Globalization::UStringSearch*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_previous(strsrch : Win32cr::Globalization::UStringSearch*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun usearch_reset(strsrch : Win32cr::Globalization::UStringSearch*) : Void

    fun uspoof_open(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USpoofChecker*

    fun uspoof_openFromSerialized(data : Void*, length : Int32, pActualLength : Int32*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USpoofChecker*

    fun uspoof_openFromSource(confusables : Win32cr::Foundation::PSTR, confusablesLen : Int32, confusablesWholeScript : Win32cr::Foundation::PSTR, confusablesWholeScriptLen : Int32, errType : Int32*, pe : Win32cr::Globalization::UParseError*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USpoofChecker*

    fun uspoof_close(sc : Win32cr::Globalization::USpoofChecker*) : Void

    fun uspoof_clone(sc : Win32cr::Globalization::USpoofChecker*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USpoofChecker*

    fun uspoof_setChecks(sc : Win32cr::Globalization::USpoofChecker*, checks : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uspoof_getChecks(sc : Win32cr::Globalization::USpoofChecker*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_setRestrictionLevel(sc : Win32cr::Globalization::USpoofChecker*, restrictionLevel : Win32cr::Globalization::URestrictionLevel) : Void

    fun uspoof_getRestrictionLevel(sc : Win32cr::Globalization::USpoofChecker*) : Win32cr::Globalization::URestrictionLevel

    fun uspoof_setAllowedLocales(sc : Win32cr::Globalization::USpoofChecker*, localesList : Win32cr::Foundation::PSTR, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uspoof_getAllowedLocales(sc : Win32cr::Globalization::USpoofChecker*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Foundation::PSTR

    fun uspoof_setAllowedChars(sc : Win32cr::Globalization::USpoofChecker*, chars : Win32cr::Globalization::USet*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun uspoof_getAllowedChars(sc : Win32cr::Globalization::USpoofChecker*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun uspoof_check(sc : Win32cr::Globalization::USpoofChecker*, id : UInt16*, length : Int32, position : Int32*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_checkUTF8(sc : Win32cr::Globalization::USpoofChecker*, id : Win32cr::Foundation::PSTR, length : Int32, position : Int32*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_check2(sc : Win32cr::Globalization::USpoofChecker*, id : UInt16*, length : Int32, checkResult : Win32cr::Globalization::USpoofCheckResult*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_check2UTF8(sc : Win32cr::Globalization::USpoofChecker*, id : Win32cr::Foundation::PSTR, length : Int32, checkResult : Win32cr::Globalization::USpoofCheckResult*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_openCheckResult(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USpoofCheckResult*

    fun uspoof_closeCheckResult(checkResult : Win32cr::Globalization::USpoofCheckResult*) : Void

    fun uspoof_getCheckResultChecks(checkResult : Win32cr::Globalization::USpoofCheckResult*, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_getCheckResultRestrictionLevel(checkResult : Win32cr::Globalization::USpoofCheckResult*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::URestrictionLevel

    fun uspoof_getCheckResultNumerics(checkResult : Win32cr::Globalization::USpoofCheckResult*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun uspoof_areConfusable(sc : Win32cr::Globalization::USpoofChecker*, id1 : UInt16*, length1 : Int32, id2 : UInt16*, length2 : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_areConfusableUTF8(sc : Win32cr::Globalization::USpoofChecker*, id1 : Win32cr::Foundation::PSTR, length1 : Int32, id2 : Win32cr::Foundation::PSTR, length2 : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_getSkeleton(sc : Win32cr::Globalization::USpoofChecker*, type__ : UInt32, id : UInt16*, length : Int32, dest : UInt16*, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_getSkeletonUTF8(sc : Win32cr::Globalization::USpoofChecker*, type__ : UInt32, id : Win32cr::Foundation::PSTR, length : Int32, dest : Win32cr::Foundation::PSTR, destCapacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun uspoof_getInclusionSet(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun uspoof_getRecommendedSet(status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun uspoof_serialize(sc : Win32cr::Globalization::USpoofChecker*, data : Void*, capacity : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun utmscale_getTimeScaleValue(timeScale : Win32cr::Globalization::UDateTimeScale, value : Win32cr::Globalization::UTimeScaleValue, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun utmscale_fromInt64(otherTime : Int64, timeScale : Win32cr::Globalization::UDateTimeScale, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun utmscale_toInt64(universalTime : Int64, timeScale : Win32cr::Globalization::UDateTimeScale, status : Win32cr::Globalization::UErrorCode*) : Int64

    fun utrans_openU(id : UInt16*, idLength : Int32, dir : Win32cr::Globalization::UTransDirection, rules : UInt16*, rulesLength : Int32, parseError : Win32cr::Globalization::UParseError*, pErrorCode : Win32cr::Globalization::UErrorCode*) : Void**

    fun utrans_openInverse(trans : Void**, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun utrans_clone(trans : Void**, status : Win32cr::Globalization::UErrorCode*) : Void**

    fun utrans_close(trans : Void**) : Void

    fun utrans_getUnicodeID(trans : Void**, resultLength : Int32*) : UInt16*

    fun utrans_register(adoptedTrans : Void**, status : Win32cr::Globalization::UErrorCode*) : Void

    fun utrans_unregisterID(id : UInt16*, idLength : Int32) : Void

    fun utrans_setFilter(trans : Void**, filterPattern : UInt16*, filterPatternLen : Int32, status : Win32cr::Globalization::UErrorCode*) : Void

    fun utrans_countAvailableIDs : Int32

    fun utrans_openIDs(pErrorCode : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::UEnumeration*

    fun utrans_trans(trans : Void**, rep : Void**, repFunc : Win32cr::Globalization::UReplaceableCallbacks*, start : Int32, limit : Int32*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun utrans_transIncremental(trans : Void**, rep : Void**, repFunc : Win32cr::Globalization::UReplaceableCallbacks*, pos : Win32cr::Globalization::UTransPosition*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun utrans_transUChars(trans : Void**, text : UInt16*, textLength : Int32*, textCapacity : Int32, start : Int32, limit : Int32*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun utrans_transIncrementalUChars(trans : Void**, text : UInt16*, textLength : Int32*, textCapacity : Int32, pos : Win32cr::Globalization::UTransPosition*, status : Win32cr::Globalization::UErrorCode*) : Void

    fun utrans_toRules(trans : Void**, escapeUnprintable : Int8, result : UInt16*, resultLength : Int32, status : Win32cr::Globalization::UErrorCode*) : Int32

    fun utrans_getSourceSet(trans : Void**, ignoreFilter : Int8, fillIn : Win32cr::Globalization::USet*, status : Win32cr::Globalization::UErrorCode*) : Win32cr::Globalization::USet*

    fun GetDistanceOfClosestLanguageInList(pszLanguage : Win32cr::Foundation::PWSTR, pszLanguagesList : Win32cr::Foundation::PWSTR, wchListDelimiter : UInt16, pClosestDistance : Float64*) : Win32cr::Foundation::HRESULT

    fun IsWellFormedTag(pszTag : Win32cr::Foundation::PWSTR) : UInt8

    fun FindStringOrdinal(dwFindStringOrdinalFlags : UInt32, lpStringSource : UInt16*, cchSource : Int32, lpStringValue : UInt16*, cchValue : Int32, bIgnoreCase : Win32cr::Foundation::BOOL) : Int32

    fun lstrcmpA(lpString1 : Win32cr::Foundation::PSTR, lpString2 : Win32cr::Foundation::PSTR) : Int32

    fun lstrcmpW(lpString1 : Win32cr::Foundation::PWSTR, lpString2 : Win32cr::Foundation::PWSTR) : Int32

    fun lstrcmpiA(lpString1 : Win32cr::Foundation::PSTR, lpString2 : Win32cr::Foundation::PSTR) : Int32

    fun lstrcmpiW(lpString1 : Win32cr::Foundation::PWSTR, lpString2 : Win32cr::Foundation::PWSTR) : Int32

    fun lstrcpynA(lpString1 : UInt8*, lpString2 : Win32cr::Foundation::PSTR, iMaxLength : Int32) : Win32cr::Foundation::PSTR

    fun lstrcpynW(lpString1 : UInt16*, lpString2 : Win32cr::Foundation::PWSTR, iMaxLength : Int32) : Win32cr::Foundation::PWSTR

    fun lstrcpyA(lpString1 : Win32cr::Foundation::PSTR, lpString2 : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun lstrcpyW(lpString1 : Win32cr::Foundation::PWSTR, lpString2 : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::PWSTR

    fun lstrcatA(lpString1 : Win32cr::Foundation::PSTR, lpString2 : Win32cr::Foundation::PSTR) : Win32cr::Foundation::PSTR

    fun lstrcatW(lpString1 : Win32cr::Foundation::PWSTR, lpString2 : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::PWSTR

    fun lstrlenA(lpString : Win32cr::Foundation::PSTR) : Int32

    fun lstrlenW(lpString : Win32cr::Foundation::PWSTR) : Int32

    fun IsTextUnicode(lpv : Void*, iSize : Int32, lpiResult : Win32cr::Globalization::IS_TEXT_UNICODE_RESULT*) : Win32cr::Foundation::BOOL

  end
end