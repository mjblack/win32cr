require "../system/com.cr"
require "../foundation.cr"
require "../media/directshow.cr"
require "../system/addressbook.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:tapi32.dll")]
@[Link(ldflags: "/DELAYLOAD:mapi32.dll")]
{% else %}
@[Link("tapi32")]
@[Link("mapi32")]
{% end %}
lib LibWin32
  TAPI_CURRENT_VERSION = 131074_u32
  LINE_ADDRESSSTATE = 0_i32
  LINE_CALLINFO = 1_i32
  LINE_CALLSTATE = 2_i32
  LINE_CLOSE = 3_i32
  LINE_DEVSPECIFIC = 4_i32
  LINE_DEVSPECIFICFEATURE = 5_i32
  LINE_GATHERDIGITS = 6_i32
  LINE_GENERATE = 7_i32
  LINE_LINEDEVSTATE = 8_i32
  LINE_MONITORDIGITS = 9_i32
  LINE_MONITORMEDIA = 10_i32
  LINE_MONITORTONE = 11_i32
  LINE_REPLY = 12_i32
  LINE_REQUEST = 13_i32
  PHONE_BUTTON = 14_i32
  PHONE_CLOSE = 15_i32
  PHONE_DEVSPECIFIC = 16_i32
  PHONE_REPLY = 17_i32
  PHONE_STATE = 18_i32
  LINE_CREATE = 19_i32
  PHONE_CREATE = 20_i32
  LINE_AGENTSPECIFIC = 21_i32
  LINE_AGENTSTATUS = 22_i32
  LINE_APPNEWCALL = 23_i32
  LINE_PROXYREQUEST = 24_i32
  LINE_REMOVE = 25_i32
  PHONE_REMOVE = 26_i32
  LINE_AGENTSESSIONSTATUS = 27_i32
  LINE_QUEUESTATUS = 28_i32
  LINE_AGENTSTATUSEX = 29_i32
  LINE_GROUPSTATUS = 30_i32
  LINE_PROXYSTATUS = 31_i32
  LINE_APPNEWCALLHUB = 32_i32
  LINE_CALLHUBCLOSE = 33_i32
  LINE_DEVSPECIFICEX = 34_i32
  INITIALIZE_NEGOTIATION = 4294967295_u32
  LINEADDRCAPFLAGS_FWDNUMRINGS = 1_u32
  LINEADDRCAPFLAGS_PICKUPGROUPID = 2_u32
  LINEADDRCAPFLAGS_SECURE = 4_u32
  LINEADDRCAPFLAGS_BLOCKIDDEFAULT = 8_u32
  LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = 16_u32
  LINEADDRCAPFLAGS_DIALED = 32_u32
  LINEADDRCAPFLAGS_ORIGOFFHOOK = 64_u32
  LINEADDRCAPFLAGS_DESTOFFHOOK = 128_u32
  LINEADDRCAPFLAGS_FWDCONSULT = 256_u32
  LINEADDRCAPFLAGS_SETUPCONFNULL = 512_u32
  LINEADDRCAPFLAGS_AUTORECONNECT = 1024_u32
  LINEADDRCAPFLAGS_COMPLETIONID = 2048_u32
  LINEADDRCAPFLAGS_TRANSFERHELD = 4096_u32
  LINEADDRCAPFLAGS_TRANSFERMAKE = 8192_u32
  LINEADDRCAPFLAGS_CONFERENCEHELD = 16384_u32
  LINEADDRCAPFLAGS_CONFERENCEMAKE = 32768_u32
  LINEADDRCAPFLAGS_PARTIALDIAL = 65536_u32
  LINEADDRCAPFLAGS_FWDSTATUSVALID = 131072_u32
  LINEADDRCAPFLAGS_FWDINTEXTADDR = 262144_u32
  LINEADDRCAPFLAGS_FWDBUSYNAADDR = 524288_u32
  LINEADDRCAPFLAGS_ACCEPTTOALERT = 1048576_u32
  LINEADDRCAPFLAGS_CONFDROP = 2097152_u32
  LINEADDRCAPFLAGS_PICKUPCALLWAIT = 4194304_u32
  LINEADDRCAPFLAGS_PREDICTIVEDIALER = 8388608_u32
  LINEADDRCAPFLAGS_QUEUE = 16777216_u32
  LINEADDRCAPFLAGS_ROUTEPOINT = 33554432_u32
  LINEADDRCAPFLAGS_HOLDMAKESNEW = 67108864_u32
  LINEADDRCAPFLAGS_NOINTERNALCALLS = 134217728_u32
  LINEADDRCAPFLAGS_NOEXTERNALCALLS = 268435456_u32
  LINEADDRCAPFLAGS_SETCALLINGID = 536870912_u32
  LINEADDRCAPFLAGS_ACDGROUP = 1073741824_u32
  LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = 2147483648_u32
  LINEADDRESSMODE_ADDRESSID = 1_u32
  LINEADDRESSMODE_DIALABLEADDR = 2_u32
  LINEADDRESSSHARING_PRIVATE = 1_u32
  LINEADDRESSSHARING_BRIDGEDEXCL = 2_u32
  LINEADDRESSSHARING_BRIDGEDNEW = 4_u32
  LINEADDRESSSHARING_BRIDGEDSHARED = 8_u32
  LINEADDRESSSHARING_MONITORED = 16_u32
  LINEADDRESSSTATE_OTHER = 1_u32
  LINEADDRESSSTATE_DEVSPECIFIC = 2_u32
  LINEADDRESSSTATE_INUSEZERO = 4_u32
  LINEADDRESSSTATE_INUSEONE = 8_u32
  LINEADDRESSSTATE_INUSEMANY = 16_u32
  LINEADDRESSSTATE_NUMCALLS = 32_u32
  LINEADDRESSSTATE_FORWARD = 64_u32
  LINEADDRESSSTATE_TERMINALS = 128_u32
  LINEADDRESSSTATE_CAPSCHANGE = 256_u32
  LINEADDRESSTYPE_PHONENUMBER = 1_u32
  LINEADDRESSTYPE_SDP = 2_u32
  LINEADDRESSTYPE_EMAILNAME = 4_u32
  LINEADDRESSTYPE_DOMAINNAME = 8_u32
  LINEADDRESSTYPE_IPADDRESS = 16_u32
  LINEADDRFEATURE_FORWARD = 1_u32
  LINEADDRFEATURE_MAKECALL = 2_u32
  LINEADDRFEATURE_PICKUP = 4_u32
  LINEADDRFEATURE_SETMEDIACONTROL = 8_u32
  LINEADDRFEATURE_SETTERMINAL = 16_u32
  LINEADDRFEATURE_SETUPCONF = 32_u32
  LINEADDRFEATURE_UNCOMPLETECALL = 64_u32
  LINEADDRFEATURE_UNPARK = 128_u32
  LINEADDRFEATURE_PICKUPHELD = 256_u32
  LINEADDRFEATURE_PICKUPGROUP = 512_u32
  LINEADDRFEATURE_PICKUPDIRECT = 1024_u32
  LINEADDRFEATURE_PICKUPWAITING = 2048_u32
  LINEADDRFEATURE_FORWARDFWD = 4096_u32
  LINEADDRFEATURE_FORWARDDND = 8192_u32
  LINEAGENTFEATURE_SETAGENTGROUP = 1_u32
  LINEAGENTFEATURE_SETAGENTSTATE = 2_u32
  LINEAGENTFEATURE_SETAGENTACTIVITY = 4_u32
  LINEAGENTFEATURE_AGENTSPECIFIC = 8_u32
  LINEAGENTFEATURE_GETAGENTACTIVITYLIST = 16_u32
  LINEAGENTFEATURE_GETAGENTGROUP = 32_u32
  LINEAGENTSTATE_LOGGEDOFF = 1_u32
  LINEAGENTSTATE_NOTREADY = 2_u32
  LINEAGENTSTATE_READY = 4_u32
  LINEAGENTSTATE_BUSYACD = 8_u32
  LINEAGENTSTATE_BUSYINCOMING = 16_u32
  LINEAGENTSTATE_BUSYOUTBOUND = 32_u32
  LINEAGENTSTATE_BUSYOTHER = 64_u32
  LINEAGENTSTATE_WORKINGAFTERCALL = 128_u32
  LINEAGENTSTATE_UNKNOWN = 256_u32
  LINEAGENTSTATE_UNAVAIL = 512_u32
  LINEAGENTSTATUS_GROUP = 1_u32
  LINEAGENTSTATUS_STATE = 2_u32
  LINEAGENTSTATUS_NEXTSTATE = 4_u32
  LINEAGENTSTATUS_ACTIVITY = 8_u32
  LINEAGENTSTATUS_ACTIVITYLIST = 16_u32
  LINEAGENTSTATUS_GROUPLIST = 32_u32
  LINEAGENTSTATUS_CAPSCHANGE = 64_u32
  LINEAGENTSTATUS_VALIDSTATES = 128_u32
  LINEAGENTSTATUS_VALIDNEXTSTATES = 256_u32
  LINEAGENTSTATEEX_NOTREADY = 1_u32
  LINEAGENTSTATEEX_READY = 2_u32
  LINEAGENTSTATEEX_BUSYACD = 4_u32
  LINEAGENTSTATEEX_BUSYINCOMING = 8_u32
  LINEAGENTSTATEEX_BUSYOUTGOING = 16_u32
  LINEAGENTSTATEEX_UNKNOWN = 32_u32
  LINEAGENTSTATEEX_RELEASED = 64_u32
  LINEAGENTSTATUSEX_NEWAGENT = 1_u32
  LINEAGENTSTATUSEX_STATE = 2_u32
  LINEAGENTSTATUSEX_UPDATEINFO = 4_u32
  LINEAGENTSESSIONSTATE_NOTREADY = 1_u32
  LINEAGENTSESSIONSTATE_READY = 2_u32
  LINEAGENTSESSIONSTATE_BUSYONCALL = 4_u32
  LINEAGENTSESSIONSTATE_BUSYWRAPUP = 8_u32
  LINEAGENTSESSIONSTATE_ENDED = 16_u32
  LINEAGENTSESSIONSTATE_RELEASED = 32_u32
  LINEAGENTSESSIONSTATUS_NEWSESSION = 1_u32
  LINEAGENTSESSIONSTATUS_STATE = 2_u32
  LINEAGENTSESSIONSTATUS_UPDATEINFO = 4_u32
  LINEQUEUESTATUS_UPDATEINFO = 1_u32
  LINEQUEUESTATUS_NEWQUEUE = 2_u32
  LINEQUEUESTATUS_QUEUEREMOVED = 4_u32
  LINEGROUPSTATUS_NEWGROUP = 1_u32
  LINEGROUPSTATUS_GROUPREMOVED = 2_u32
  LINEPROXYSTATUS_OPEN = 1_u32
  LINEPROXYSTATUS_CLOSE = 2_u32
  LINEPROXYSTATUS_ALLOPENFORACD = 4_u32
  LINEANSWERMODE_NONE = 1_u32
  LINEANSWERMODE_DROP = 2_u32
  LINEANSWERMODE_HOLD = 4_u32
  LINEBEARERMODE_VOICE = 1_u32
  LINEBEARERMODE_SPEECH = 2_u32
  LINEBEARERMODE_MULTIUSE = 4_u32
  LINEBEARERMODE_DATA = 8_u32
  LINEBEARERMODE_ALTSPEECHDATA = 16_u32
  LINEBEARERMODE_NONCALLSIGNALING = 32_u32
  LINEBEARERMODE_PASSTHROUGH = 64_u32
  LINEBEARERMODE_RESTRICTEDDATA = 128_u32
  LINEBUSYMODE_STATION = 1_u32
  LINEBUSYMODE_TRUNK = 2_u32
  LINEBUSYMODE_UNKNOWN = 4_u32
  LINEBUSYMODE_UNAVAIL = 8_u32
  LINECALLCOMPLCOND_BUSY = 1_u32
  LINECALLCOMPLCOND_NOANSWER = 2_u32
  LINECALLCOMPLMODE_CAMPON = 1_u32
  LINECALLCOMPLMODE_CALLBACK = 2_u32
  LINECALLCOMPLMODE_INTRUDE = 4_u32
  LINECALLCOMPLMODE_MESSAGE = 8_u32
  LINECALLFEATURE_ACCEPT = 1_u32
  LINECALLFEATURE_ADDTOCONF = 2_u32
  LINECALLFEATURE_ANSWER = 4_u32
  LINECALLFEATURE_BLINDTRANSFER = 8_u32
  LINECALLFEATURE_COMPLETECALL = 16_u32
  LINECALLFEATURE_COMPLETETRANSF = 32_u32
  LINECALLFEATURE_DIAL = 64_u32
  LINECALLFEATURE_DROP = 128_u32
  LINECALLFEATURE_GATHERDIGITS = 256_u32
  LINECALLFEATURE_GENERATEDIGITS = 512_u32
  LINECALLFEATURE_GENERATETONE = 1024_u32
  LINECALLFEATURE_HOLD = 2048_u32
  LINECALLFEATURE_MONITORDIGITS = 4096_u32
  LINECALLFEATURE_MONITORMEDIA = 8192_u32
  LINECALLFEATURE_MONITORTONES = 16384_u32
  LINECALLFEATURE_PARK = 32768_u32
  LINECALLFEATURE_PREPAREADDCONF = 65536_u32
  LINECALLFEATURE_REDIRECT = 131072_u32
  LINECALLFEATURE_REMOVEFROMCONF = 262144_u32
  LINECALLFEATURE_SECURECALL = 524288_u32
  LINECALLFEATURE_SENDUSERUSER = 1048576_u32
  LINECALLFEATURE_SETCALLPARAMS = 2097152_u32
  LINECALLFEATURE_SETMEDIACONTROL = 4194304_u32
  LINECALLFEATURE_SETTERMINAL = 8388608_u32
  LINECALLFEATURE_SETUPCONF = 16777216_u32
  LINECALLFEATURE_SETUPTRANSFER = 33554432_u32
  LINECALLFEATURE_SWAPHOLD = 67108864_u32
  LINECALLFEATURE_UNHOLD = 134217728_u32
  LINECALLFEATURE_RELEASEUSERUSERINFO = 268435456_u32
  LINECALLFEATURE_SETTREATMENT = 536870912_u32
  LINECALLFEATURE_SETQOS = 1073741824_u32
  LINECALLFEATURE_SETCALLDATA = 2147483648_u32
  LINECALLFEATURE2_NOHOLDCONFERENCE = 1_u32
  LINECALLFEATURE2_ONESTEPTRANSFER = 2_u32
  LINECALLFEATURE2_COMPLCAMPON = 4_u32
  LINECALLFEATURE2_COMPLCALLBACK = 8_u32
  LINECALLFEATURE2_COMPLINTRUDE = 16_u32
  LINECALLFEATURE2_COMPLMESSAGE = 32_u32
  LINECALLFEATURE2_TRANSFERNORM = 64_u32
  LINECALLFEATURE2_TRANSFERCONF = 128_u32
  LINECALLFEATURE2_PARKDIRECT = 256_u32
  LINECALLFEATURE2_PARKNONDIRECT = 512_u32
  LINECALLHUBTRACKING_NONE = 0_u32
  LINECALLHUBTRACKING_PROVIDERLEVEL = 1_u32
  LINECALLHUBTRACKING_ALLCALLS = 2_u32
  LINECALLINFOSTATE_OTHER = 1_u32
  LINECALLINFOSTATE_DEVSPECIFIC = 2_u32
  LINECALLINFOSTATE_BEARERMODE = 4_u32
  LINECALLINFOSTATE_RATE = 8_u32
  LINECALLINFOSTATE_MEDIAMODE = 16_u32
  LINECALLINFOSTATE_APPSPECIFIC = 32_u32
  LINECALLINFOSTATE_CALLID = 64_u32
  LINECALLINFOSTATE_RELATEDCALLID = 128_u32
  LINECALLINFOSTATE_ORIGIN = 256_u32
  LINECALLINFOSTATE_REASON = 512_u32
  LINECALLINFOSTATE_COMPLETIONID = 1024_u32
  LINECALLINFOSTATE_NUMOWNERINCR = 2048_u32
  LINECALLINFOSTATE_NUMOWNERDECR = 4096_u32
  LINECALLINFOSTATE_NUMMONITORS = 8192_u32
  LINECALLINFOSTATE_TRUNK = 16384_u32
  LINECALLINFOSTATE_CALLERID = 32768_u32
  LINECALLINFOSTATE_CALLEDID = 65536_u32
  LINECALLINFOSTATE_CONNECTEDID = 131072_u32
  LINECALLINFOSTATE_REDIRECTIONID = 262144_u32
  LINECALLINFOSTATE_REDIRECTINGID = 524288_u32
  LINECALLINFOSTATE_DISPLAY = 1048576_u32
  LINECALLINFOSTATE_USERUSERINFO = 2097152_u32
  LINECALLINFOSTATE_HIGHLEVELCOMP = 4194304_u32
  LINECALLINFOSTATE_LOWLEVELCOMP = 8388608_u32
  LINECALLINFOSTATE_CHARGINGINFO = 16777216_u32
  LINECALLINFOSTATE_TERMINAL = 33554432_u32
  LINECALLINFOSTATE_DIALPARAMS = 67108864_u32
  LINECALLINFOSTATE_MONITORMODES = 134217728_u32
  LINECALLINFOSTATE_TREATMENT = 268435456_u32
  LINECALLINFOSTATE_QOS = 536870912_u32
  LINECALLINFOSTATE_CALLDATA = 1073741824_u32
  LINECALLORIGIN_OUTBOUND = 1_u32
  LINECALLORIGIN_INTERNAL = 2_u32
  LINECALLORIGIN_EXTERNAL = 4_u32
  LINECALLORIGIN_UNKNOWN = 16_u32
  LINECALLORIGIN_UNAVAIL = 32_u32
  LINECALLORIGIN_CONFERENCE = 64_u32
  LINECALLORIGIN_INBOUND = 128_u32
  LINECALLPARAMFLAGS_SECURE = 1_u32
  LINECALLPARAMFLAGS_IDLE = 2_u32
  LINECALLPARAMFLAGS_BLOCKID = 4_u32
  LINECALLPARAMFLAGS_ORIGOFFHOOK = 8_u32
  LINECALLPARAMFLAGS_DESTOFFHOOK = 16_u32
  LINECALLPARAMFLAGS_NOHOLDCONFERENCE = 32_u32
  LINECALLPARAMFLAGS_PREDICTIVEDIAL = 64_u32
  LINECALLPARAMFLAGS_ONESTEPTRANSFER = 128_u32
  LINECALLPARTYID_BLOCKED = 1_u32
  LINECALLPARTYID_OUTOFAREA = 2_u32
  LINECALLPARTYID_NAME = 4_u32
  LINECALLPARTYID_ADDRESS = 8_u32
  LINECALLPARTYID_PARTIAL = 16_u32
  LINECALLPARTYID_UNKNOWN = 32_u32
  LINECALLPARTYID_UNAVAIL = 64_u32
  LINECALLPRIVILEGE_NONE = 1_u32
  LINECALLPRIVILEGE_MONITOR = 2_u32
  LINECALLPRIVILEGE_OWNER = 4_u32
  LINECALLREASON_DIRECT = 1_u32
  LINECALLREASON_FWDBUSY = 2_u32
  LINECALLREASON_FWDNOANSWER = 4_u32
  LINECALLREASON_FWDUNCOND = 8_u32
  LINECALLREASON_PICKUP = 16_u32
  LINECALLREASON_UNPARK = 32_u32
  LINECALLREASON_REDIRECT = 64_u32
  LINECALLREASON_CALLCOMPLETION = 128_u32
  LINECALLREASON_TRANSFER = 256_u32
  LINECALLREASON_REMINDER = 512_u32
  LINECALLREASON_UNKNOWN = 1024_u32
  LINECALLREASON_UNAVAIL = 2048_u32
  LINECALLREASON_INTRUDE = 4096_u32
  LINECALLREASON_PARKED = 8192_u32
  LINECALLREASON_CAMPEDON = 16384_u32
  LINECALLREASON_ROUTEREQUEST = 32768_u32
  LINECALLSELECT_LINE = 1_u32
  LINECALLSELECT_ADDRESS = 2_u32
  LINECALLSELECT_CALL = 4_u32
  LINECALLSELECT_DEVICEID = 8_u32
  LINECALLSELECT_CALLID = 16_u32
  LINECALLSTATE_IDLE = 1_u32
  LINECALLSTATE_OFFERING = 2_u32
  LINECALLSTATE_ACCEPTED = 4_u32
  LINECALLSTATE_DIALTONE = 8_u32
  LINECALLSTATE_DIALING = 16_u32
  LINECALLSTATE_RINGBACK = 32_u32
  LINECALLSTATE_BUSY = 64_u32
  LINECALLSTATE_SPECIALINFO = 128_u32
  LINECALLSTATE_CONNECTED = 256_u32
  LINECALLSTATE_PROCEEDING = 512_u32
  LINECALLSTATE_ONHOLD = 1024_u32
  LINECALLSTATE_CONFERENCED = 2048_u32
  LINECALLSTATE_ONHOLDPENDCONF = 4096_u32
  LINECALLSTATE_ONHOLDPENDTRANSFER = 8192_u32
  LINECALLSTATE_DISCONNECTED = 16384_u32
  LINECALLSTATE_UNKNOWN = 32768_u32
  LINECALLTREATMENT_SILENCE = 1_u32
  LINECALLTREATMENT_RINGBACK = 2_u32
  LINECALLTREATMENT_BUSY = 3_u32
  LINECALLTREATMENT_MUSIC = 4_u32
  LINECARDOPTION_PREDEFINED = 1_u32
  LINECARDOPTION_HIDDEN = 2_u32
  LINECONNECTEDMODE_ACTIVE = 1_u32
  LINECONNECTEDMODE_INACTIVE = 2_u32
  LINECONNECTEDMODE_ACTIVEHELD = 4_u32
  LINECONNECTEDMODE_INACTIVEHELD = 8_u32
  LINECONNECTEDMODE_CONFIRMED = 16_u32
  LINEDEVCAPFLAGS_CROSSADDRCONF = 1_u32
  LINEDEVCAPFLAGS_HIGHLEVCOMP = 2_u32
  LINEDEVCAPFLAGS_LOWLEVCOMP = 4_u32
  LINEDEVCAPFLAGS_MEDIACONTROL = 8_u32
  LINEDEVCAPFLAGS_MULTIPLEADDR = 16_u32
  LINEDEVCAPFLAGS_CLOSEDROP = 32_u32
  LINEDEVCAPFLAGS_DIALBILLING = 64_u32
  LINEDEVCAPFLAGS_DIALQUIET = 128_u32
  LINEDEVCAPFLAGS_DIALDIALTONE = 256_u32
  LINEDEVCAPFLAGS_MSP = 512_u32
  LINEDEVCAPFLAGS_CALLHUB = 1024_u32
  LINEDEVCAPFLAGS_CALLHUBTRACKING = 2048_u32
  LINEDEVCAPFLAGS_PRIVATEOBJECTS = 4096_u32
  LINEDEVCAPFLAGS_LOCAL = 8192_u32
  LINEDEVSTATE_OTHER = 1_u32
  LINEDEVSTATE_RINGING = 2_u32
  LINEDEVSTATE_CONNECTED = 4_u32
  LINEDEVSTATE_DISCONNECTED = 8_u32
  LINEDEVSTATE_MSGWAITON = 16_u32
  LINEDEVSTATE_MSGWAITOFF = 32_u32
  LINEDEVSTATE_INSERVICE = 64_u32
  LINEDEVSTATE_OUTOFSERVICE = 128_u32
  LINEDEVSTATE_MAINTENANCE = 256_u32
  LINEDEVSTATE_OPEN = 512_u32
  LINEDEVSTATE_CLOSE = 1024_u32
  LINEDEVSTATE_NUMCALLS = 2048_u32
  LINEDEVSTATE_NUMCOMPLETIONS = 4096_u32
  LINEDEVSTATE_TERMINALS = 8192_u32
  LINEDEVSTATE_ROAMMODE = 16384_u32
  LINEDEVSTATE_BATTERY = 32768_u32
  LINEDEVSTATE_SIGNAL = 65536_u32
  LINEDEVSTATE_DEVSPECIFIC = 131072_u32
  LINEDEVSTATE_REINIT = 262144_u32
  LINEDEVSTATE_LOCK = 524288_u32
  LINEDEVSTATE_CAPSCHANGE = 1048576_u32
  LINEDEVSTATE_CONFIGCHANGE = 2097152_u32
  LINEDEVSTATE_TRANSLATECHANGE = 4194304_u32
  LINEDEVSTATE_COMPLCANCEL = 8388608_u32
  LINEDEVSTATE_REMOVED = 16777216_u32
  LINEDEVSTATUSFLAGS_CONNECTED = 1_u32
  LINEDEVSTATUSFLAGS_MSGWAIT = 2_u32
  LINEDEVSTATUSFLAGS_INSERVICE = 4_u32
  LINEDEVSTATUSFLAGS_LOCKED = 8_u32
  LINEDIALTONEMODE_NORMAL = 1_u32
  LINEDIALTONEMODE_SPECIAL = 2_u32
  LINEDIALTONEMODE_INTERNAL = 4_u32
  LINEDIALTONEMODE_EXTERNAL = 8_u32
  LINEDIALTONEMODE_UNKNOWN = 16_u32
  LINEDIALTONEMODE_UNAVAIL = 32_u32
  LINEDIGITMODE_PULSE = 1_u32
  LINEDIGITMODE_DTMF = 2_u32
  LINEDIGITMODE_DTMFEND = 4_u32
  LINEDISCONNECTMODE_NORMAL = 1_u32
  LINEDISCONNECTMODE_UNKNOWN = 2_u32
  LINEDISCONNECTMODE_REJECT = 4_u32
  LINEDISCONNECTMODE_PICKUP = 8_u32
  LINEDISCONNECTMODE_FORWARDED = 16_u32
  LINEDISCONNECTMODE_BUSY = 32_u32
  LINEDISCONNECTMODE_NOANSWER = 64_u32
  LINEDISCONNECTMODE_BADADDRESS = 128_u32
  LINEDISCONNECTMODE_UNREACHABLE = 256_u32
  LINEDISCONNECTMODE_CONGESTION = 512_u32
  LINEDISCONNECTMODE_INCOMPATIBLE = 1024_u32
  LINEDISCONNECTMODE_UNAVAIL = 2048_u32
  LINEDISCONNECTMODE_NODIALTONE = 4096_u32
  LINEDISCONNECTMODE_NUMBERCHANGED = 8192_u32
  LINEDISCONNECTMODE_OUTOFORDER = 16384_u32
  LINEDISCONNECTMODE_TEMPFAILURE = 32768_u32
  LINEDISCONNECTMODE_QOSUNAVAIL = 65536_u32
  LINEDISCONNECTMODE_BLOCKED = 131072_u32
  LINEDISCONNECTMODE_DONOTDISTURB = 262144_u32
  LINEDISCONNECTMODE_CANCELLED = 524288_u32
  LINEDISCONNECTMODE_DESTINATIONBARRED = 1048576_u32
  LINEDISCONNECTMODE_FDNRESTRICT = 2097152_u32
  LINEERR_ALLOCATED = 2147483649_u32
  LINEERR_BADDEVICEID = 2147483650_u32
  LINEERR_BEARERMODEUNAVAIL = 2147483651_u32
  LINEERR_CALLUNAVAIL = 2147483653_u32
  LINEERR_COMPLETIONOVERRUN = 2147483654_u32
  LINEERR_CONFERENCEFULL = 2147483655_u32
  LINEERR_DIALBILLING = 2147483656_u32
  LINEERR_DIALDIALTONE = 2147483657_u32
  LINEERR_DIALPROMPT = 2147483658_u32
  LINEERR_DIALQUIET = 2147483659_u32
  LINEERR_INCOMPATIBLEAPIVERSION = 2147483660_u32
  LINEERR_INCOMPATIBLEEXTVERSION = 2147483661_u32
  LINEERR_INIFILECORRUPT = 2147483662_u32
  LINEERR_INUSE = 2147483663_u32
  LINEERR_INVALADDRESS = 2147483664_u32
  LINEERR_INVALADDRESSID = 2147483665_u32
  LINEERR_INVALADDRESSMODE = 2147483666_u32
  LINEERR_INVALADDRESSSTATE = 2147483667_u32
  LINEERR_INVALAPPHANDLE = 2147483668_u32
  LINEERR_INVALAPPNAME = 2147483669_u32
  LINEERR_INVALBEARERMODE = 2147483670_u32
  LINEERR_INVALCALLCOMPLMODE = 2147483671_u32
  LINEERR_INVALCALLHANDLE = 2147483672_u32
  LINEERR_INVALCALLPARAMS = 2147483673_u32
  LINEERR_INVALCALLPRIVILEGE = 2147483674_u32
  LINEERR_INVALCALLSELECT = 2147483675_u32
  LINEERR_INVALCALLSTATE = 2147483676_u32
  LINEERR_INVALCALLSTATELIST = 2147483677_u32
  LINEERR_INVALCARD = 2147483678_u32
  LINEERR_INVALCOMPLETIONID = 2147483679_u32
  LINEERR_INVALCONFCALLHANDLE = 2147483680_u32
  LINEERR_INVALCONSULTCALLHANDLE = 2147483681_u32
  LINEERR_INVALCOUNTRYCODE = 2147483682_u32
  LINEERR_INVALDEVICECLASS = 2147483683_u32
  LINEERR_INVALDEVICEHANDLE = 2147483684_u32
  LINEERR_INVALDIALPARAMS = 2147483685_u32
  LINEERR_INVALDIGITLIST = 2147483686_u32
  LINEERR_INVALDIGITMODE = 2147483687_u32
  LINEERR_INVALDIGITS = 2147483688_u32
  LINEERR_INVALEXTVERSION = 2147483689_u32
  LINEERR_INVALGROUPID = 2147483690_u32
  LINEERR_INVALLINEHANDLE = 2147483691_u32
  LINEERR_INVALLINESTATE = 2147483692_u32
  LINEERR_INVALLOCATION = 2147483693_u32
  LINEERR_INVALMEDIALIST = 2147483694_u32
  LINEERR_INVALMEDIAMODE = 2147483695_u32
  LINEERR_INVALMESSAGEID = 2147483696_u32
  LINEERR_INVALPARAM = 2147483698_u32
  LINEERR_INVALPARKID = 2147483699_u32
  LINEERR_INVALPARKMODE = 2147483700_u32
  LINEERR_INVALPOINTER = 2147483701_u32
  LINEERR_INVALPRIVSELECT = 2147483702_u32
  LINEERR_INVALRATE = 2147483703_u32
  LINEERR_INVALREQUESTMODE = 2147483704_u32
  LINEERR_INVALTERMINALID = 2147483705_u32
  LINEERR_INVALTERMINALMODE = 2147483706_u32
  LINEERR_INVALTIMEOUT = 2147483707_u32
  LINEERR_INVALTONE = 2147483708_u32
  LINEERR_INVALTONELIST = 2147483709_u32
  LINEERR_INVALTONEMODE = 2147483710_u32
  LINEERR_INVALTRANSFERMODE = 2147483711_u32
  LINEERR_LINEMAPPERFAILED = 2147483712_u32
  LINEERR_NOCONFERENCE = 2147483713_u32
  LINEERR_NODEVICE = 2147483714_u32
  LINEERR_NODRIVER = 2147483715_u32
  LINEERR_NOMEM = 2147483716_u32
  LINEERR_NOREQUEST = 2147483717_u32
  LINEERR_NOTOWNER = 2147483718_u32
  LINEERR_NOTREGISTERED = 2147483719_u32
  LINEERR_OPERATIONFAILED = 2147483720_u32
  LINEERR_OPERATIONUNAVAIL = 2147483721_u32
  LINEERR_RATEUNAVAIL = 2147483722_u32
  LINEERR_RESOURCEUNAVAIL = 2147483723_u32
  LINEERR_REQUESTOVERRUN = 2147483724_u32
  LINEERR_STRUCTURETOOSMALL = 2147483725_u32
  LINEERR_TARGETNOTFOUND = 2147483726_u32
  LINEERR_TARGETSELF = 2147483727_u32
  LINEERR_UNINITIALIZED = 2147483728_u32
  LINEERR_USERUSERINFOTOOBIG = 2147483729_u32
  LINEERR_REINIT = 2147483730_u32
  LINEERR_ADDRESSBLOCKED = 2147483731_u32
  LINEERR_BILLINGREJECTED = 2147483732_u32
  LINEERR_INVALFEATURE = 2147483733_u32
  LINEERR_NOMULTIPLEINSTANCE = 2147483734_u32
  LINEERR_INVALAGENTID = 2147483735_u32
  LINEERR_INVALAGENTGROUP = 2147483736_u32
  LINEERR_INVALPASSWORD = 2147483737_u32
  LINEERR_INVALAGENTSTATE = 2147483738_u32
  LINEERR_INVALAGENTACTIVITY = 2147483739_u32
  LINEERR_DIALVOICEDETECT = 2147483740_u32
  LINEERR_USERCANCELLED = 2147483741_u32
  LINEERR_INVALADDRESSTYPE = 2147483742_u32
  LINEERR_INVALAGENTSESSIONSTATE = 2147483743_u32
  LINEERR_DISCONNECTED = 2147483744_u32
  LINEERR_SERVICE_NOT_RUNNING = 2147483745_u32
  LINEFEATURE_DEVSPECIFIC = 1_u32
  LINEFEATURE_DEVSPECIFICFEAT = 2_u32
  LINEFEATURE_FORWARD = 4_u32
  LINEFEATURE_MAKECALL = 8_u32
  LINEFEATURE_SETMEDIACONTROL = 16_u32
  LINEFEATURE_SETTERMINAL = 32_u32
  LINEFEATURE_SETDEVSTATUS = 64_u32
  LINEFEATURE_FORWARDFWD = 128_u32
  LINEFEATURE_FORWARDDND = 256_u32
  LINEFORWARDMODE_UNCOND = 1_u32
  LINEFORWARDMODE_UNCONDINTERNAL = 2_u32
  LINEFORWARDMODE_UNCONDEXTERNAL = 4_u32
  LINEFORWARDMODE_UNCONDSPECIFIC = 8_u32
  LINEFORWARDMODE_BUSY = 16_u32
  LINEFORWARDMODE_BUSYINTERNAL = 32_u32
  LINEFORWARDMODE_BUSYEXTERNAL = 64_u32
  LINEFORWARDMODE_BUSYSPECIFIC = 128_u32
  LINEFORWARDMODE_NOANSW = 256_u32
  LINEFORWARDMODE_NOANSWINTERNAL = 512_u32
  LINEFORWARDMODE_NOANSWEXTERNAL = 1024_u32
  LINEFORWARDMODE_NOANSWSPECIFIC = 2048_u32
  LINEFORWARDMODE_BUSYNA = 4096_u32
  LINEFORWARDMODE_BUSYNAINTERNAL = 8192_u32
  LINEFORWARDMODE_BUSYNAEXTERNAL = 16384_u32
  LINEFORWARDMODE_BUSYNASPECIFIC = 32768_u32
  LINEFORWARDMODE_UNKNOWN = 65536_u32
  LINEFORWARDMODE_UNAVAIL = 131072_u32
  LINEGATHERTERM_BUFFERFULL = 1_u32
  LINEGATHERTERM_TERMDIGIT = 2_u32
  LINEGATHERTERM_FIRSTTIMEOUT = 4_u32
  LINEGATHERTERM_INTERTIMEOUT = 8_u32
  LINEGATHERTERM_CANCEL = 16_u32
  LINEGENERATETERM_DONE = 1_u32
  LINEGENERATETERM_CANCEL = 2_u32
  LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1_u32
  LINEINITIALIZEEXOPTION_USEEVENT = 2_u32
  LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3_u32
  LINEINITIALIZEEXOPTION_CALLHUBTRACKING = 2147483648_u32
  LINELOCATIONOPTION_PULSEDIAL = 1_u32
  LINEMAPPER = 4294967295_u32
  LINEMEDIACONTROL_NONE = 1_u32
  LINEMEDIACONTROL_START = 2_u32
  LINEMEDIACONTROL_RESET = 4_u32
  LINEMEDIACONTROL_PAUSE = 8_u32
  LINEMEDIACONTROL_RESUME = 16_u32
  LINEMEDIACONTROL_RATEUP = 32_u32
  LINEMEDIACONTROL_RATEDOWN = 64_u32
  LINEMEDIACONTROL_RATENORMAL = 128_u32
  LINEMEDIACONTROL_VOLUMEUP = 256_u32
  LINEMEDIACONTROL_VOLUMEDOWN = 512_u32
  LINEMEDIACONTROL_VOLUMENORMAL = 1024_u32
  LINEMEDIAMODE_UNKNOWN = 2_u32
  LINEMEDIAMODE_INTERACTIVEVOICE = 4_u32
  LINEMEDIAMODE_AUTOMATEDVOICE = 8_u32
  LINEMEDIAMODE_DATAMODEM = 16_u32
  LINEMEDIAMODE_G3FAX = 32_u32
  LINEMEDIAMODE_TDD = 64_u32
  LINEMEDIAMODE_G4FAX = 128_u32
  LINEMEDIAMODE_DIGITALDATA = 256_u32
  LINEMEDIAMODE_TELETEX = 512_u32
  LINEMEDIAMODE_VIDEOTEX = 1024_u32
  LINEMEDIAMODE_TELEX = 2048_u32
  LINEMEDIAMODE_MIXED = 4096_u32
  LINEMEDIAMODE_ADSI = 8192_u32
  LINEMEDIAMODE_VOICEVIEW = 16384_u32
  LINEMEDIAMODE_VIDEO = 32768_u32
  LAST_LINEMEDIAMODE = 32768_u32
  LINEOFFERINGMODE_ACTIVE = 1_u32
  LINEOFFERINGMODE_INACTIVE = 2_u32
  LINEOPENOPTION_SINGLEADDRESS = 2147483648_u32
  LINEOPENOPTION_PROXY = 1073741824_u32
  LINEPARKMODE_DIRECTED = 1_u32
  LINEPARKMODE_NONDIRECTED = 2_u32
  LINEPROXYREQUEST_SETAGENTGROUP = 1_u32
  LINEPROXYREQUEST_SETAGENTSTATE = 2_u32
  LINEPROXYREQUEST_SETAGENTACTIVITY = 3_u32
  LINEPROXYREQUEST_GETAGENTCAPS = 4_u32
  LINEPROXYREQUEST_GETAGENTSTATUS = 5_u32
  LINEPROXYREQUEST_AGENTSPECIFIC = 6_u32
  LINEPROXYREQUEST_GETAGENTACTIVITYLIST = 7_u32
  LINEPROXYREQUEST_GETAGENTGROUPLIST = 8_u32
  LINEPROXYREQUEST_CREATEAGENT = 9_u32
  LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD = 10_u32
  LINEPROXYREQUEST_GETAGENTINFO = 11_u32
  LINEPROXYREQUEST_CREATEAGENTSESSION = 12_u32
  LINEPROXYREQUEST_GETAGENTSESSIONLIST = 13_u32
  LINEPROXYREQUEST_SETAGENTSESSIONSTATE = 14_u32
  LINEPROXYREQUEST_GETAGENTSESSIONINFO = 15_u32
  LINEPROXYREQUEST_GETQUEUELIST = 16_u32
  LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD = 17_u32
  LINEPROXYREQUEST_GETQUEUEINFO = 18_u32
  LINEPROXYREQUEST_GETGROUPLIST = 19_u32
  LINEPROXYREQUEST_SETAGENTSTATEEX = 20_u32
  LINEREMOVEFROMCONF_NONE = 1_u32
  LINEREMOVEFROMCONF_LAST = 2_u32
  LINEREMOVEFROMCONF_ANY = 3_u32
  LINEREQUESTMODE_MAKECALL = 1_u32
  LINEREQUESTMODE_MEDIACALL = 2_u32
  LINEREQUESTMODE_DROP = 4_u32
  LAST_LINEREQUESTMODE = 2_u32
  LINEROAMMODE_UNKNOWN = 1_u32
  LINEROAMMODE_UNAVAIL = 2_u32
  LINEROAMMODE_HOME = 4_u32
  LINEROAMMODE_ROAMA = 8_u32
  LINEROAMMODE_ROAMB = 16_u32
  LINESPECIALINFO_NOCIRCUIT = 1_u32
  LINESPECIALINFO_CUSTIRREG = 2_u32
  LINESPECIALINFO_REORDER = 4_u32
  LINESPECIALINFO_UNKNOWN = 8_u32
  LINESPECIALINFO_UNAVAIL = 16_u32
  LINETERMDEV_PHONE = 1_u32
  LINETERMDEV_HEADSET = 2_u32
  LINETERMDEV_SPEAKER = 4_u32
  LINETERMMODE_BUTTONS = 1_u32
  LINETERMMODE_LAMPS = 2_u32
  LINETERMMODE_DISPLAY = 4_u32
  LINETERMMODE_RINGER = 8_u32
  LINETERMMODE_HOOKSWITCH = 16_u32
  LINETERMMODE_MEDIATOLINE = 32_u32
  LINETERMMODE_MEDIAFROMLINE = 64_u32
  LINETERMMODE_MEDIABIDIRECT = 128_u32
  LINETERMSHARING_PRIVATE = 1_u32
  LINETERMSHARING_SHAREDEXCL = 2_u32
  LINETERMSHARING_SHAREDCONF = 4_u32
  LINETOLLLISTOPTION_ADD = 1_u32
  LINETOLLLISTOPTION_REMOVE = 2_u32
  LINETONEMODE_CUSTOM = 1_u32
  LINETONEMODE_RINGBACK = 2_u32
  LINETONEMODE_BUSY = 4_u32
  LINETONEMODE_BEEP = 8_u32
  LINETONEMODE_BILLING = 16_u32
  LINETRANSFERMODE_TRANSFER = 1_u32
  LINETRANSFERMODE_CONFERENCE = 2_u32
  LINETRANSLATEOPTION_CARDOVERRIDE = 1_u32
  LINETRANSLATEOPTION_CANCELCALLWAITING = 2_u32
  LINETRANSLATEOPTION_FORCELOCAL = 4_u32
  LINETRANSLATEOPTION_FORCELD = 8_u32
  LINETRANSLATERESULT_CANONICAL = 1_u32
  LINETRANSLATERESULT_INTERNATIONAL = 2_u32
  LINETRANSLATERESULT_LONGDISTANCE = 4_u32
  LINETRANSLATERESULT_LOCAL = 8_u32
  LINETRANSLATERESULT_INTOLLLIST = 16_u32
  LINETRANSLATERESULT_NOTINTOLLLIST = 32_u32
  LINETRANSLATERESULT_DIALBILLING = 64_u32
  LINETRANSLATERESULT_DIALQUIET = 128_u32
  LINETRANSLATERESULT_DIALDIALTONE = 256_u32
  LINETRANSLATERESULT_DIALPROMPT = 512_u32
  LINETRANSLATERESULT_VOICEDETECT = 1024_u32
  LINETRANSLATERESULT_NOTRANSLATION = 2048_u32
  PHONEBUTTONFUNCTION_UNKNOWN = 0_u32
  PHONEBUTTONFUNCTION_CONFERENCE = 1_u32
  PHONEBUTTONFUNCTION_TRANSFER = 2_u32
  PHONEBUTTONFUNCTION_DROP = 3_u32
  PHONEBUTTONFUNCTION_HOLD = 4_u32
  PHONEBUTTONFUNCTION_RECALL = 5_u32
  PHONEBUTTONFUNCTION_DISCONNECT = 6_u32
  PHONEBUTTONFUNCTION_CONNECT = 7_u32
  PHONEBUTTONFUNCTION_MSGWAITON = 8_u32
  PHONEBUTTONFUNCTION_MSGWAITOFF = 9_u32
  PHONEBUTTONFUNCTION_SELECTRING = 10_u32
  PHONEBUTTONFUNCTION_ABBREVDIAL = 11_u32
  PHONEBUTTONFUNCTION_FORWARD = 12_u32
  PHONEBUTTONFUNCTION_PICKUP = 13_u32
  PHONEBUTTONFUNCTION_RINGAGAIN = 14_u32
  PHONEBUTTONFUNCTION_PARK = 15_u32
  PHONEBUTTONFUNCTION_REJECT = 16_u32
  PHONEBUTTONFUNCTION_REDIRECT = 17_u32
  PHONEBUTTONFUNCTION_MUTE = 18_u32
  PHONEBUTTONFUNCTION_VOLUMEUP = 19_u32
  PHONEBUTTONFUNCTION_VOLUMEDOWN = 20_u32
  PHONEBUTTONFUNCTION_SPEAKERON = 21_u32
  PHONEBUTTONFUNCTION_SPEAKEROFF = 22_u32
  PHONEBUTTONFUNCTION_FLASH = 23_u32
  PHONEBUTTONFUNCTION_DATAON = 24_u32
  PHONEBUTTONFUNCTION_DATAOFF = 25_u32
  PHONEBUTTONFUNCTION_DONOTDISTURB = 26_u32
  PHONEBUTTONFUNCTION_INTERCOM = 27_u32
  PHONEBUTTONFUNCTION_BRIDGEDAPP = 28_u32
  PHONEBUTTONFUNCTION_BUSY = 29_u32
  PHONEBUTTONFUNCTION_CALLAPP = 30_u32
  PHONEBUTTONFUNCTION_DATETIME = 31_u32
  PHONEBUTTONFUNCTION_DIRECTORY = 32_u32
  PHONEBUTTONFUNCTION_COVER = 33_u32
  PHONEBUTTONFUNCTION_CALLID = 34_u32
  PHONEBUTTONFUNCTION_LASTNUM = 35_u32
  PHONEBUTTONFUNCTION_NIGHTSRV = 36_u32
  PHONEBUTTONFUNCTION_SENDCALLS = 37_u32
  PHONEBUTTONFUNCTION_MSGINDICATOR = 38_u32
  PHONEBUTTONFUNCTION_REPDIAL = 39_u32
  PHONEBUTTONFUNCTION_SETREPDIAL = 40_u32
  PHONEBUTTONFUNCTION_SYSTEMSPEED = 41_u32
  PHONEBUTTONFUNCTION_STATIONSPEED = 42_u32
  PHONEBUTTONFUNCTION_CAMPON = 43_u32
  PHONEBUTTONFUNCTION_SAVEREPEAT = 44_u32
  PHONEBUTTONFUNCTION_QUEUECALL = 45_u32
  PHONEBUTTONFUNCTION_NONE = 46_u32
  PHONEBUTTONFUNCTION_SEND = 47_u32
  PHONEBUTTONMODE_DUMMY = 1_u32
  PHONEBUTTONMODE_CALL = 2_u32
  PHONEBUTTONMODE_FEATURE = 4_u32
  PHONEBUTTONMODE_KEYPAD = 8_u32
  PHONEBUTTONMODE_LOCAL = 16_u32
  PHONEBUTTONMODE_DISPLAY = 32_u32
  PHONEBUTTONSTATE_UP = 1_u32
  PHONEBUTTONSTATE_DOWN = 2_u32
  PHONEBUTTONSTATE_UNKNOWN = 4_u32
  PHONEBUTTONSTATE_UNAVAIL = 8_u32
  PHONEERR_ALLOCATED = 2415919105_u32
  PHONEERR_BADDEVICEID = 2415919106_u32
  PHONEERR_INCOMPATIBLEAPIVERSION = 2415919107_u32
  PHONEERR_INCOMPATIBLEEXTVERSION = 2415919108_u32
  PHONEERR_INIFILECORRUPT = 2415919109_u32
  PHONEERR_INUSE = 2415919110_u32
  PHONEERR_INVALAPPHANDLE = 2415919111_u32
  PHONEERR_INVALAPPNAME = 2415919112_u32
  PHONEERR_INVALBUTTONLAMPID = 2415919113_u32
  PHONEERR_INVALBUTTONMODE = 2415919114_u32
  PHONEERR_INVALBUTTONSTATE = 2415919115_u32
  PHONEERR_INVALDATAID = 2415919116_u32
  PHONEERR_INVALDEVICECLASS = 2415919117_u32
  PHONEERR_INVALEXTVERSION = 2415919118_u32
  PHONEERR_INVALHOOKSWITCHDEV = 2415919119_u32
  PHONEERR_INVALHOOKSWITCHMODE = 2415919120_u32
  PHONEERR_INVALLAMPMODE = 2415919121_u32
  PHONEERR_INVALPARAM = 2415919122_u32
  PHONEERR_INVALPHONEHANDLE = 2415919123_u32
  PHONEERR_INVALPHONESTATE = 2415919124_u32
  PHONEERR_INVALPOINTER = 2415919125_u32
  PHONEERR_INVALPRIVILEGE = 2415919126_u32
  PHONEERR_INVALRINGMODE = 2415919127_u32
  PHONEERR_NODEVICE = 2415919128_u32
  PHONEERR_NODRIVER = 2415919129_u32
  PHONEERR_NOMEM = 2415919130_u32
  PHONEERR_NOTOWNER = 2415919131_u32
  PHONEERR_OPERATIONFAILED = 2415919132_u32
  PHONEERR_OPERATIONUNAVAIL = 2415919133_u32
  PHONEERR_RESOURCEUNAVAIL = 2415919135_u32
  PHONEERR_REQUESTOVERRUN = 2415919136_u32
  PHONEERR_STRUCTURETOOSMALL = 2415919137_u32
  PHONEERR_UNINITIALIZED = 2415919138_u32
  PHONEERR_REINIT = 2415919139_u32
  PHONEERR_DISCONNECTED = 2415919140_u32
  PHONEERR_SERVICE_NOT_RUNNING = 2415919141_u32
  PHONEFEATURE_GETBUTTONINFO = 1_u32
  PHONEFEATURE_GETDATA = 2_u32
  PHONEFEATURE_GETDISPLAY = 4_u32
  PHONEFEATURE_GETGAINHANDSET = 8_u32
  PHONEFEATURE_GETGAINSPEAKER = 16_u32
  PHONEFEATURE_GETGAINHEADSET = 32_u32
  PHONEFEATURE_GETHOOKSWITCHHANDSET = 64_u32
  PHONEFEATURE_GETHOOKSWITCHSPEAKER = 128_u32
  PHONEFEATURE_GETHOOKSWITCHHEADSET = 256_u32
  PHONEFEATURE_GETLAMP = 512_u32
  PHONEFEATURE_GETRING = 1024_u32
  PHONEFEATURE_GETVOLUMEHANDSET = 2048_u32
  PHONEFEATURE_GETVOLUMESPEAKER = 4096_u32
  PHONEFEATURE_GETVOLUMEHEADSET = 8192_u32
  PHONEFEATURE_SETBUTTONINFO = 16384_u32
  PHONEFEATURE_SETDATA = 32768_u32
  PHONEFEATURE_SETDISPLAY = 65536_u32
  PHONEFEATURE_SETGAINHANDSET = 131072_u32
  PHONEFEATURE_SETGAINSPEAKER = 262144_u32
  PHONEFEATURE_SETGAINHEADSET = 524288_u32
  PHONEFEATURE_SETHOOKSWITCHHANDSET = 1048576_u32
  PHONEFEATURE_SETHOOKSWITCHSPEAKER = 2097152_u32
  PHONEFEATURE_SETHOOKSWITCHHEADSET = 4194304_u32
  PHONEFEATURE_SETLAMP = 8388608_u32
  PHONEFEATURE_SETRING = 16777216_u32
  PHONEFEATURE_SETVOLUMEHANDSET = 33554432_u32
  PHONEFEATURE_SETVOLUMESPEAKER = 67108864_u32
  PHONEFEATURE_SETVOLUMEHEADSET = 134217728_u32
  PHONEFEATURE_GENERICPHONE = 268435456_u32
  PHONEHOOKSWITCHDEV_HANDSET = 1_u32
  PHONEHOOKSWITCHDEV_SPEAKER = 2_u32
  PHONEHOOKSWITCHDEV_HEADSET = 4_u32
  PHONEHOOKSWITCHMODE_ONHOOK = 1_u32
  PHONEHOOKSWITCHMODE_MIC = 2_u32
  PHONEHOOKSWITCHMODE_SPEAKER = 4_u32
  PHONEHOOKSWITCHMODE_MICSPEAKER = 8_u32
  PHONEHOOKSWITCHMODE_UNKNOWN = 16_u32
  PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1_u32
  PHONEINITIALIZEEXOPTION_USEEVENT = 2_u32
  PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3_u32
  PHONELAMPMODE_DUMMY = 1_u32
  PHONELAMPMODE_OFF = 2_u32
  PHONELAMPMODE_STEADY = 4_u32
  PHONELAMPMODE_WINK = 8_u32
  PHONELAMPMODE_FLASH = 16_u32
  PHONELAMPMODE_FLUTTER = 32_u32
  PHONELAMPMODE_BROKENFLUTTER = 64_u32
  PHONELAMPMODE_UNKNOWN = 128_u32
  PHONEPRIVILEGE_MONITOR = 1_u32
  PHONEPRIVILEGE_OWNER = 2_u32
  PHONESTATE_OTHER = 1_u32
  PHONESTATE_CONNECTED = 2_u32
  PHONESTATE_DISCONNECTED = 4_u32
  PHONESTATE_OWNER = 8_u32
  PHONESTATE_MONITORS = 16_u32
  PHONESTATE_DISPLAY = 32_u32
  PHONESTATE_LAMP = 64_u32
  PHONESTATE_RINGMODE = 128_u32
  PHONESTATE_RINGVOLUME = 256_u32
  PHONESTATE_HANDSETHOOKSWITCH = 512_u32
  PHONESTATE_HANDSETVOLUME = 1024_u32
  PHONESTATE_HANDSETGAIN = 2048_u32
  PHONESTATE_SPEAKERHOOKSWITCH = 4096_u32
  PHONESTATE_SPEAKERVOLUME = 8192_u32
  PHONESTATE_SPEAKERGAIN = 16384_u32
  PHONESTATE_HEADSETHOOKSWITCH = 32768_u32
  PHONESTATE_HEADSETVOLUME = 65536_u32
  PHONESTATE_HEADSETGAIN = 131072_u32
  PHONESTATE_SUSPEND = 262144_u32
  PHONESTATE_RESUME = 524288_u32
  PHONESTATE_DEVSPECIFIC = 1048576_u32
  PHONESTATE_REINIT = 2097152_u32
  PHONESTATE_CAPSCHANGE = 4194304_u32
  PHONESTATE_REMOVED = 8388608_u32
  PHONESTATUSFLAGS_CONNECTED = 1_u32
  PHONESTATUSFLAGS_SUSPENDED = 2_u32
  STRINGFORMAT_ASCII = 1_u32
  STRINGFORMAT_DBCS = 2_u32
  STRINGFORMAT_UNICODE = 3_u32
  STRINGFORMAT_BINARY = 4_u32
  TAPI_REPLY = 1123_u32
  TAPIERR_CONNECTED = 0_i32
  TAPIERR_DROPPED = -1_i32
  TAPIERR_NOREQUESTRECIPIENT = -2_i32
  TAPIERR_REQUESTQUEUEFULL = -3_i32
  TAPIERR_INVALDESTADDRESS = -4_i32
  TAPIERR_INVALWINDOWHANDLE = -5_i32
  TAPIERR_INVALDEVICECLASS = -6_i32
  TAPIERR_INVALDEVICEID = -7_i32
  TAPIERR_DEVICECLASSUNAVAIL = -8_i32
  TAPIERR_DEVICEIDUNAVAIL = -9_i32
  TAPIERR_DEVICEINUSE = -10_i32
  TAPIERR_DESTBUSY = -11_i32
  TAPIERR_DESTNOANSWER = -12_i32
  TAPIERR_DESTUNAVAIL = -13_i32
  TAPIERR_UNKNOWNWINHANDLE = -14_i32
  TAPIERR_UNKNOWNREQUESTID = -15_i32
  TAPIERR_REQUESTFAILED = -16_i32
  TAPIERR_REQUESTCANCELLED = -17_i32
  TAPIERR_INVALPOINTER = -18_i32
  TAPIERR_NOTADMIN = -19_i32
  TAPIERR_MMCWRITELOCKED = -20_i32
  TAPIERR_PROVIDERALREADYINSTALLED = -21_i32
  TAPIERR_SCP_ALREADY_EXISTS = -22_i32
  TAPIERR_SCP_DOES_NOT_EXIST = -23_i32
  TAPIMAXDESTADDRESSSIZE = 80_i32
  TAPIMAXAPPNAMESIZE = 40_i32
  TAPIMAXCALLEDPARTYSIZE = 40_i32
  TAPIMAXCOMMENTSIZE = 80_i32
  TAPIMAXDEVICECLASSSIZE = 40_i32
  TAPIMAXDEVICEIDSIZE = 40_i32
  INTERFACEMASK = 16711680_u32
  DISPIDMASK = 65535_u32
  IDISPTAPI = 65536_u32
  IDISPTAPICALLCENTER = 131072_u32
  IDISPCALLINFO = 65536_u32
  IDISPBASICCALLCONTROL = 131072_u32
  IDISPLEGACYCALLMEDIACONTROL = 196608_u32
  IDISPAGGREGATEDMSPCALLOBJ = 262144_u32
  IDISPADDRESS = 65536_u32
  IDISPADDRESSCAPABILITIES = 131072_u32
  IDISPMEDIASUPPORT = 196608_u32
  IDISPADDRESSTRANSLATION = 262144_u32
  IDISPLEGACYADDRESSMEDIACONTROL = 327680_u32
  IDISPAGGREGATEDMSPADDRESSOBJ = 393216_u32
  IDISPPHONE = 65536_u32
  IDISPAPC = 131072_u32
  IDISPMULTITRACK = 65536_u32
  IDISPMEDIACONTROL = 131072_u32
  IDISPMEDIARECORD = 196608_u32
  IDISPMEDIAPLAYBACK = 262144_u32
  IDISPFILETRACK = 65536_u32
  TAPIMEDIATYPE_AUDIO = 8_u32
  TAPIMEDIATYPE_VIDEO = 32768_u32
  TAPIMEDIATYPE_DATAMODEM = 16_u32
  TAPIMEDIATYPE_G3FAX = 32_u32
  TAPIMEDIATYPE_MULTITRACK = 65536_u32
  TSPI_MESSAGE_BASE = 500_u32
  LINETSPIOPTION_NONREENTRANT = 1_u32
  TUISPIDLL_OBJECT_LINEID = 1_i32
  TUISPIDLL_OBJECT_PHONEID = 2_i32
  TUISPIDLL_OBJECT_PROVIDERID = 3_i32
  TUISPIDLL_OBJECT_DIALOGINSTANCE = 4_i32
  PRIVATEOBJECT_NONE = 1_u32
  PRIVATEOBJECT_CALLID = 2_u32
  PRIVATEOBJECT_LINE = 3_u32
  PRIVATEOBJECT_CALL = 4_u32
  PRIVATEOBJECT_PHONE = 5_u32
  PRIVATEOBJECT_ADDRESS = 6_u32
  LINEQOSREQUESTTYPE_SERVICELEVEL = 1_u32
  LINEQOSSERVICELEVEL_NEEDED = 1_u32
  LINEQOSSERVICELEVEL_IFAVAILABLE = 2_u32
  LINEQOSSERVICELEVEL_BESTEFFORT = 3_u32
  LINEEQOSINFO_NOQOS = 1_u32
  LINEEQOSINFO_ADMISSIONFAILURE = 2_u32
  LINEEQOSINFO_POLICYFAILURE = 3_u32
  LINEEQOSINFO_GENERICERROR = 4_u32
  TSPI_PROC_BASE = 500_u32
  TSPI_LINEACCEPT = 500_u32
  TSPI_LINEADDTOCONFERENCE = 501_u32
  TSPI_LINEANSWER = 502_u32
  TSPI_LINEBLINDTRANSFER = 503_u32
  TSPI_LINECLOSE = 504_u32
  TSPI_LINECLOSECALL = 505_u32
  TSPI_LINECOMPLETECALL = 506_u32
  TSPI_LINECOMPLETETRANSFER = 507_u32
  TSPI_LINECONDITIONALMEDIADETECTION = 508_u32
  TSPI_LINECONFIGDIALOG = 509_u32
  TSPI_LINEDEVSPECIFIC = 510_u32
  TSPI_LINEDEVSPECIFICFEATURE = 511_u32
  TSPI_LINEDIAL = 512_u32
  TSPI_LINEDROP = 513_u32
  TSPI_LINEFORWARD = 514_u32
  TSPI_LINEGATHERDIGITS = 515_u32
  TSPI_LINEGENERATEDIGITS = 516_u32
  TSPI_LINEGENERATETONE = 517_u32
  TSPI_LINEGETADDRESSCAPS = 518_u32
  TSPI_LINEGETADDRESSID = 519_u32
  TSPI_LINEGETADDRESSSTATUS = 520_u32
  TSPI_LINEGETCALLADDRESSID = 521_u32
  TSPI_LINEGETCALLINFO = 522_u32
  TSPI_LINEGETCALLSTATUS = 523_u32
  TSPI_LINEGETDEVCAPS = 524_u32
  TSPI_LINEGETDEVCONFIG = 525_u32
  TSPI_LINEGETEXTENSIONID = 526_u32
  TSPI_LINEGETICON = 527_u32
  TSPI_LINEGETID = 528_u32
  TSPI_LINEGETLINEDEVSTATUS = 529_u32
  TSPI_LINEGETNUMADDRESSIDS = 530_u32
  TSPI_LINEHOLD = 531_u32
  TSPI_LINEMAKECALL = 532_u32
  TSPI_LINEMONITORDIGITS = 533_u32
  TSPI_LINEMONITORMEDIA = 534_u32
  TSPI_LINEMONITORTONES = 535_u32
  TSPI_LINENEGOTIATEEXTVERSION = 536_u32
  TSPI_LINENEGOTIATETSPIVERSION = 537_u32
  TSPI_LINEOPEN = 538_u32
  TSPI_LINEPARK = 539_u32
  TSPI_LINEPICKUP = 540_u32
  TSPI_LINEPREPAREADDTOCONFERENCE = 541_u32
  TSPI_LINEREDIRECT = 542_u32
  TSPI_LINEREMOVEFROMCONFERENCE = 543_u32
  TSPI_LINESECURECALL = 544_u32
  TSPI_LINESELECTEXTVERSION = 545_u32
  TSPI_LINESENDUSERUSERINFO = 546_u32
  TSPI_LINESETAPPSPECIFIC = 547_u32
  TSPI_LINESETCALLPARAMS = 548_u32
  TSPI_LINESETDEFAULTMEDIADETECTION = 549_u32
  TSPI_LINESETDEVCONFIG = 550_u32
  TSPI_LINESETMEDIACONTROL = 551_u32
  TSPI_LINESETMEDIAMODE = 552_u32
  TSPI_LINESETSTATUSMESSAGES = 553_u32
  TSPI_LINESETTERMINAL = 554_u32
  TSPI_LINESETUPCONFERENCE = 555_u32
  TSPI_LINESETUPTRANSFER = 556_u32
  TSPI_LINESWAPHOLD = 557_u32
  TSPI_LINEUNCOMPLETECALL = 558_u32
  TSPI_LINEUNHOLD = 559_u32
  TSPI_LINEUNPARK = 560_u32
  TSPI_PHONECLOSE = 561_u32
  TSPI_PHONECONFIGDIALOG = 562_u32
  TSPI_PHONEDEVSPECIFIC = 563_u32
  TSPI_PHONEGETBUTTONINFO = 564_u32
  TSPI_PHONEGETDATA = 565_u32
  TSPI_PHONEGETDEVCAPS = 566_u32
  TSPI_PHONEGETDISPLAY = 567_u32
  TSPI_PHONEGETEXTENSIONID = 568_u32
  TSPI_PHONEGETGAIN = 569_u32
  TSPI_PHONEGETHOOKSWITCH = 570_u32
  TSPI_PHONEGETICON = 571_u32
  TSPI_PHONEGETID = 572_u32
  TSPI_PHONEGETLAMP = 573_u32
  TSPI_PHONEGETRING = 574_u32
  TSPI_PHONEGETSTATUS = 575_u32
  TSPI_PHONEGETVOLUME = 576_u32
  TSPI_PHONENEGOTIATEEXTVERSION = 577_u32
  TSPI_PHONENEGOTIATETSPIVERSION = 578_u32
  TSPI_PHONEOPEN = 579_u32
  TSPI_PHONESELECTEXTVERSION = 580_u32
  TSPI_PHONESETBUTTONINFO = 581_u32
  TSPI_PHONESETDATA = 582_u32
  TSPI_PHONESETDISPLAY = 583_u32
  TSPI_PHONESETGAIN = 584_u32
  TSPI_PHONESETHOOKSWITCH = 585_u32
  TSPI_PHONESETLAMP = 586_u32
  TSPI_PHONESETRING = 587_u32
  TSPI_PHONESETSTATUSMESSAGES = 588_u32
  TSPI_PHONESETVOLUME = 589_u32
  TSPI_PROVIDERCONFIG = 590_u32
  TSPI_PROVIDERINIT = 591_u32
  TSPI_PROVIDERINSTALL = 592_u32
  TSPI_PROVIDERREMOVE = 593_u32
  TSPI_PROVIDERSHUTDOWN = 594_u32
  TSPI_PROVIDERENUMDEVICES = 595_u32
  TSPI_LINEDROPONCLOSE = 596_u32
  TSPI_LINEDROPNOOWNER = 597_u32
  TSPI_PROVIDERCREATELINEDEVICE = 598_u32
  TSPI_PROVIDERCREATEPHONEDEVICE = 599_u32
  TSPI_LINESETCURRENTLOCATION = 600_u32
  TSPI_LINECONFIGDIALOGEDIT = 601_u32
  TSPI_LINERELEASEUSERUSERINFO = 602_u32
  TSPI_LINEGETCALLID = 603_u32
  TSPI_LINEGETCALLHUBTRACKING = 604_u32
  TSPI_LINESETCALLHUBTRACKING = 605_u32
  TSPI_LINERECEIVEMSPDATA = 606_u32
  TSPI_LINEMSPIDENTIFY = 607_u32
  TSPI_LINECREATEMSPINSTANCE = 608_u32
  TSPI_LINECLOSEMSPINSTANCE = 609_u32
  IDISPDIROBJECT = 65536_u32
  IDISPDIROBJCONFERENCE = 131072_u32
  IDISPDIROBJUSER = 196608_u32
  IDISPDIRECTORY = 65536_u32
  IDISPILSCONFIG = 131072_u32
  RENDBIND_AUTHENTICATE = 1_u32
  RENDBIND_DEFAULTDOMAINNAME = 2_u32
  RENDBIND_DEFAULTUSERNAME = 4_u32
  RENDBIND_DEFAULTPASSWORD = 8_u32
  RENDBIND_DEFAULTCREDENTIALS = 14_u32
  STRM_INITIAL = 0_u32
  STRM_TERMINALSELECTED = 1_u32
  STRM_CONFIGURED = 2_u32
  STRM_RUNNING = 4_u32
  STRM_PAUSED = 8_u32
  STRM_STOPPED = 16_u32
  TAPI_E_NOTENOUGHMEMORY = -2147221503_i32
  TAPI_E_NOITEMS = -2147221502_i32
  TAPI_E_NOTSUPPORTED = -2147221501_i32
  TAPI_E_INVALIDMEDIATYPE = -2147221500_i32
  TAPI_E_OPERATIONFAILED = -2147221499_i32
  TAPI_E_ALLOCATED = -2147221498_i32
  TAPI_E_CALLUNAVAIL = -2147221497_i32
  TAPI_E_COMPLETIONOVERRUN = -2147221496_i32
  TAPI_E_CONFERENCEFULL = -2147221495_i32
  TAPI_E_DIALMODIFIERNOTSUPPORTED = -2147221494_i32
  TAPI_E_INUSE = -2147221493_i32
  TAPI_E_INVALADDRESS = -2147221492_i32
  TAPI_E_INVALADDRESSSTATE = -2147221491_i32
  TAPI_E_INVALCALLPARAMS = -2147221490_i32
  TAPI_E_INVALCALLPRIVILEGE = -2147221489_i32
  TAPI_E_INVALCALLSTATE = -2147221488_i32
  TAPI_E_INVALCARD = -2147221487_i32
  TAPI_E_INVALCOMPLETIONID = -2147221486_i32
  TAPI_E_INVALCOUNTRYCODE = -2147221485_i32
  TAPI_E_INVALDEVICECLASS = -2147221484_i32
  TAPI_E_INVALDIALPARAMS = -2147221483_i32
  TAPI_E_INVALDIGITS = -2147221482_i32
  TAPI_E_INVALGROUPID = -2147221481_i32
  TAPI_E_INVALLOCATION = -2147221480_i32
  TAPI_E_INVALMESSAGEID = -2147221479_i32
  TAPI_E_INVALPARKID = -2147221478_i32
  TAPI_E_INVALRATE = -2147221477_i32
  TAPI_E_INVALTIMEOUT = -2147221476_i32
  TAPI_E_INVALTONE = -2147221475_i32
  TAPI_E_INVALLIST = -2147221474_i32
  TAPI_E_INVALMODE = -2147221473_i32
  TAPI_E_NOCONFERENCE = -2147221472_i32
  TAPI_E_NODEVICE = -2147221471_i32
  TAPI_E_NOREQUEST = -2147221470_i32
  TAPI_E_NOTOWNER = -2147221469_i32
  TAPI_E_NOTREGISTERED = -2147221468_i32
  TAPI_E_REQUESTOVERRUN = -2147221467_i32
  TAPI_E_TARGETNOTFOUND = -2147221466_i32
  TAPI_E_TARGETSELF = -2147221465_i32
  TAPI_E_USERUSERINFOTOOBIG = -2147221464_i32
  TAPI_E_REINIT = -2147221463_i32
  TAPI_E_ADDRESSBLOCKED = -2147221462_i32
  TAPI_E_BILLINGREJECTED = -2147221461_i32
  TAPI_E_INVALFEATURE = -2147221460_i32
  TAPI_E_INVALBUTTONLAMPID = -2147221459_i32
  TAPI_E_INVALBUTTONSTATE = -2147221458_i32
  TAPI_E_INVALDATAID = -2147221457_i32
  TAPI_E_INVALHOOKSWITCHDEV = -2147221456_i32
  TAPI_E_DROPPED = -2147221455_i32
  TAPI_E_NOREQUESTRECIPIENT = -2147221454_i32
  TAPI_E_REQUESTQUEUEFULL = -2147221453_i32
  TAPI_E_DESTBUSY = -2147221452_i32
  TAPI_E_DESTNOANSWER = -2147221451_i32
  TAPI_E_DESTUNAVAIL = -2147221450_i32
  TAPI_E_REQUESTFAILED = -2147221449_i32
  TAPI_E_REQUESTCANCELLED = -2147221448_i32
  TAPI_E_INVALPRIVILEGE = -2147221447_i32
  TAPI_E_INVALIDDIRECTION = -2147221446_i32
  TAPI_E_INVALIDTERMINAL = -2147221445_i32
  TAPI_E_INVALIDTERMINALCLASS = -2147221444_i32
  TAPI_E_NODRIVER = -2147221443_i32
  TAPI_E_MAXSTREAMS = -2147221442_i32
  TAPI_E_NOTERMINALSELECTED = -2147221441_i32
  TAPI_E_TERMINALINUSE = -2147221440_i32
  TAPI_E_NOTSTOPPED = -2147221439_i32
  TAPI_E_MAXTERMINALS = -2147221438_i32
  TAPI_E_INVALIDSTREAM = -2147221437_i32
  TAPI_E_TIMEOUT = -2147221436_i32
  TAPI_E_CALLCENTER_GROUP_REMOVED = -2147221435_i32
  TAPI_E_CALLCENTER_QUEUE_REMOVED = -2147221434_i32
  TAPI_E_CALLCENTER_NO_AGENT_ID = -2147221433_i32
  TAPI_E_CALLCENTER_INVALAGENTID = -2147221432_i32
  TAPI_E_CALLCENTER_INVALAGENTGROUP = -2147221431_i32
  TAPI_E_CALLCENTER_INVALPASSWORD = -2147221430_i32
  TAPI_E_CALLCENTER_INVALAGENTSTATE = -2147221429_i32
  TAPI_E_CALLCENTER_INVALAGENTACTIVITY = -2147221428_i32
  TAPI_E_REGISTRY_SETTING_CORRUPT = -2147221427_i32
  TAPI_E_TERMINAL_PEER = -2147221426_i32
  TAPI_E_PEER_NOT_SET = -2147221425_i32
  TAPI_E_NOEVENT = -2147221424_i32
  TAPI_E_INVALADDRESSTYPE = -2147221423_i32
  TAPI_E_RESOURCEUNAVAIL = -2147221422_i32
  TAPI_E_PHONENOTOPEN = -2147221421_i32
  TAPI_E_CALLNOTSELECTED = -2147221420_i32
  TAPI_E_WRONGEVENT = -2147221419_i32
  TAPI_E_NOFORMAT = -2147221418_i32
  TAPI_E_INVALIDSTREAMSTATE = -2147221417_i32
  TAPI_E_WRONG_STATE = -2147221416_i32
  TAPI_E_NOT_INITIALIZED = -2147221415_i32
  TAPI_E_SERVICE_NOT_RUNNING = -2147221414_i32
  Atypnull = 0_i32
  Atypfile = 1_i32
  Atypole = 2_i32
  Atyppicture = 3_i32
  Atypmax = 4_i32
  TAPI = LibC::GUID.new(0x21d6d48e_u32, 0xa88b_u16, 0x11d0_u16, StaticArray[0x83_u8, 0xdd_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
  DispatchMapper = LibC::GUID.new(0xe9225296_u32, 0xc759_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x2b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
  RequestMakeCall = LibC::GUID.new(0xac48ffe0_u32, 0xf8c4_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x30_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
  Rendezvous = LibC::GUID.new(0xf1029e5b_u32, 0xcb5b_u16, 0x11d0_u16, StaticArray[0x8d_u8, 0x59_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1a_u8, 0xc0_u8])
  McastAddressAllocation = LibC::GUID.new(0xdf0daef2_u32, 0xa289_u16, 0x11d1_u16, StaticArray[0x86_u8, 0x97_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xb0_u8, 0xe5_u8, 0xd2_u8])

  alias LINECALLBACK = Proc(UInt32, UInt32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, Void)
  alias PHONECALLBACK = Proc(UInt32, UInt32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, Void)
  alias ASYNC_COMPLETION = Proc(UInt32, Int32, Void)
  alias LINEEVENT = Proc(HTAPILINE__*, HTAPICALL__*, UInt32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, Void)
  alias PHONEEVENT = Proc(HTAPIPHONE__*, UInt32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, Void)
  alias TUISPIDLLCALLBACK = Proc(LibC::UINT_PTR, UInt32, Void*, UInt32, Int32)
  alias LPOPENTNEFSTREAM = Proc(Void*, IStream, Int8*, UInt32, IMessage, UInt16, ITnef*, HRESULT)
  alias LPOPENTNEFSTREAMEX = Proc(Void*, IStream, Int8*, UInt32, IMessage, UInt16, IAddrBook, ITnef*, HRESULT)
  alias LPGETTNEFSTREAMCODEPAGE = Proc(IStream, UInt32*, UInt32*, HRESULT)


  enum TAPI_TONEMODE : Int32
    TTM_RINGBACK = 2
    TTM_BUSY = 4
    TTM_BEEP = 8
    TTM_BILLING = 16
  end

  enum TAPI_GATHERTERM : Int32
    TGT_BUFFERFULL = 1
    TGT_TERMDIGIT = 2
    TGT_FIRSTTIMEOUT = 4
    TGT_INTERTIMEOUT = 8
    TGT_CANCEL = 16
  end

  enum ADDRESS_EVENT : Int32
    AE_STATE = 0
    AE_CAPSCHANGE = 1
    AE_RINGING = 2
    AE_CONFIGCHANGE = 3
    AE_FORWARD = 4
    AE_NEWTERMINAL = 5
    AE_REMOVETERMINAL = 6
    AE_MSGWAITON = 7
    AE_MSGWAITOFF = 8
    AE_LASTITEM = 8
  end

  enum ADDRESS_STATE : Int32
    AS_INSERVICE = 0
    AS_OUTOFSERVICE = 1
  end

  enum CALL_STATE : Int32
    CS_IDLE = 0
    CS_INPROGRESS = 1
    CS_CONNECTED = 2
    CS_DISCONNECTED = 3
    CS_OFFERING = 4
    CS_HOLD = 5
    CS_QUEUED = 6
    CS_LASTITEM = 6
  end

  enum CALL_STATE_EVENT_CAUSE : Int32
    CEC_NONE = 0
    CEC_DISCONNECT_NORMAL = 1
    CEC_DISCONNECT_BUSY = 2
    CEC_DISCONNECT_BADADDRESS = 3
    CEC_DISCONNECT_NOANSWER = 4
    CEC_DISCONNECT_CANCELLED = 5
    CEC_DISCONNECT_REJECTED = 6
    CEC_DISCONNECT_FAILED = 7
    CEC_DISCONNECT_BLOCKED = 8
  end

  enum CALL_MEDIA_EVENT : Int32
    CME_NEW_STREAM = 0
    CME_STREAM_FAIL = 1
    CME_TERMINAL_FAIL = 2
    CME_STREAM_NOT_USED = 3
    CME_STREAM_ACTIVE = 4
    CME_STREAM_INACTIVE = 5
    CME_LASTITEM = 5
  end

  enum CALL_MEDIA_EVENT_CAUSE : Int32
    CMC_UNKNOWN = 0
    CMC_BAD_DEVICE = 1
    CMC_CONNECT_FAIL = 2
    CMC_LOCAL_REQUEST = 3
    CMC_REMOTE_REQUEST = 4
    CMC_MEDIA_TIMEOUT = 5
    CMC_MEDIA_RECOVERED = 6
    CMC_QUALITY_OF_SERVICE = 7
  end

  enum DISCONNECT_CODE : Int32
    DC_NORMAL = 0
    DC_NOANSWER = 1
    DC_REJECTED = 2
  end

  enum TERMINAL_STATE : Int32
    TS_INUSE = 0
    TS_NOTINUSE = 1
  end

  enum TERMINAL_DIRECTION : Int32
    TD_CAPTURE = 0
    TD_RENDER = 1
    TD_BIDIRECTIONAL = 2
    TD_MULTITRACK_MIXED = 3
    TD_NONE = 4
  end

  enum TERMINAL_TYPE : Int32
    TT_STATIC = 0
    TT_DYNAMIC = 1
  end

  enum CALL_PRIVILEGE : Int32
    CP_OWNER = 0
    CP_MONITOR = 1
  end

  enum TAPI_EVENT : Int32
    TE_TAPIOBJECT = 1
    TE_ADDRESS = 2
    TE_CALLNOTIFICATION = 4
    TE_CALLSTATE = 8
    TE_CALLMEDIA = 16
    TE_CALLHUB = 32
    TE_CALLINFOCHANGE = 64
    TE_PRIVATE = 128
    TE_REQUEST = 256
    TE_AGENT = 512
    TE_AGENTSESSION = 1024
    TE_QOSEVENT = 2048
    TE_AGENTHANDLER = 4096
    TE_ACDGROUP = 8192
    TE_QUEUE = 16384
    TE_DIGITEVENT = 32768
    TE_GENERATEEVENT = 65536
    TE_ASRTERMINAL = 131072
    TE_TTSTERMINAL = 262144
    TE_FILETERMINAL = 524288
    TE_TONETERMINAL = 1048576
    TE_PHONEEVENT = 2097152
    TE_TONEEVENT = 4194304
    TE_GATHERDIGITS = 8388608
    TE_ADDRESSDEVSPECIFIC = 16777216
    TE_PHONEDEVSPECIFIC = 33554432
  end

  enum CALL_NOTIFICATION_EVENT : Int32
    CNE_OWNER = 0
    CNE_MONITOR = 1
    CNE_LASTITEM = 1
  end

  enum CALLHUB_EVENT : Int32
    CHE_CALLJOIN = 0
    CHE_CALLLEAVE = 1
    CHE_CALLHUBNEW = 2
    CHE_CALLHUBIDLE = 3
    CHE_LASTITEM = 3
  end

  enum CALLHUB_STATE : Int32
    CHS_ACTIVE = 0
    CHS_IDLE = 1
  end

  enum TAPIOBJECT_EVENT : Int32
    TE_ADDRESSCREATE = 0
    TE_ADDRESSREMOVE = 1
    TE_REINIT = 2
    TE_TRANSLATECHANGE = 3
    TE_ADDRESSCLOSE = 4
    TE_PHONECREATE = 5
    TE_PHONEREMOVE = 6
  end

  enum TAPI_OBJECT_TYPE : Int32
    TOT_NONE = 0
    TOT_TAPI = 1
    TOT_ADDRESS = 2
    TOT_TERMINAL = 3
    TOT_CALL = 4
    TOT_CALLHUB = 5
    TOT_PHONE = 6
  end

  enum QOS_SERVICE_LEVEL : Int32
    QSL_NEEDED = 1
    QSL_IF_AVAILABLE = 2
    QSL_BEST_EFFORT = 3
  end

  enum QOS_EVENT : Int32
    QE_NOQOS = 1
    QE_ADMISSIONFAILURE = 2
    QE_POLICYFAILURE = 3
    QE_GENERICERROR = 4
    QE_LASTITEM = 4
  end

  enum CALLINFOCHANGE_CAUSE : Int32
    CIC_OTHER = 0
    CIC_DEVSPECIFIC = 1
    CIC_BEARERMODE = 2
    CIC_RATE = 3
    CIC_APPSPECIFIC = 4
    CIC_CALLID = 5
    CIC_RELATEDCALLID = 6
    CIC_ORIGIN = 7
    CIC_REASON = 8
    CIC_COMPLETIONID = 9
    CIC_NUMOWNERINCR = 10
    CIC_NUMOWNERDECR = 11
    CIC_NUMMONITORS = 12
    CIC_TRUNK = 13
    CIC_CALLERID = 14
    CIC_CALLEDID = 15
    CIC_CONNECTEDID = 16
    CIC_REDIRECTIONID = 17
    CIC_REDIRECTINGID = 18
    CIC_USERUSERINFO = 19
    CIC_HIGHLEVELCOMP = 20
    CIC_LOWLEVELCOMP = 21
    CIC_CHARGINGINFO = 22
    CIC_TREATMENT = 23
    CIC_CALLDATA = 24
    CIC_PRIVILEGE = 25
    CIC_MEDIATYPE = 26
    CIC_LASTITEM = 26
  end

  enum CALLINFO_LONG : Int32
    CIL_MEDIATYPESAVAILABLE = 0
    CIL_BEARERMODE = 1
    CIL_CALLERIDADDRESSTYPE = 2
    CIL_CALLEDIDADDRESSTYPE = 3
    CIL_CONNECTEDIDADDRESSTYPE = 4
    CIL_REDIRECTIONIDADDRESSTYPE = 5
    CIL_REDIRECTINGIDADDRESSTYPE = 6
    CIL_ORIGIN = 7
    CIL_REASON = 8
    CIL_APPSPECIFIC = 9
    CIL_CALLPARAMSFLAGS = 10
    CIL_CALLTREATMENT = 11
    CIL_MINRATE = 12
    CIL_MAXRATE = 13
    CIL_COUNTRYCODE = 14
    CIL_CALLID = 15
    CIL_RELATEDCALLID = 16
    CIL_COMPLETIONID = 17
    CIL_NUMBEROFOWNERS = 18
    CIL_NUMBEROFMONITORS = 19
    CIL_TRUNK = 20
    CIL_RATE = 21
    CIL_GENERATEDIGITDURATION = 22
    CIL_MONITORDIGITMODES = 23
    CIL_MONITORMEDIAMODES = 24
  end

  enum CALLINFO_STRING : Int32
    CIS_CALLERIDNAME = 0
    CIS_CALLERIDNUMBER = 1
    CIS_CALLEDIDNAME = 2
    CIS_CALLEDIDNUMBER = 3
    CIS_CONNECTEDIDNAME = 4
    CIS_CONNECTEDIDNUMBER = 5
    CIS_REDIRECTIONIDNAME = 6
    CIS_REDIRECTIONIDNUMBER = 7
    CIS_REDIRECTINGIDNAME = 8
    CIS_REDIRECTINGIDNUMBER = 9
    CIS_CALLEDPARTYFRIENDLYNAME = 10
    CIS_COMMENT = 11
    CIS_DISPLAYABLEADDRESS = 12
    CIS_CALLINGPARTYID = 13
  end

  enum CALLINFO_BUFFER : Int32
    CIB_USERUSERINFO = 0
    CIB_DEVSPECIFICBUFFER = 1
    CIB_CALLDATABUFFER = 2
    CIB_CHARGINGINFOBUFFER = 3
    CIB_HIGHLEVELCOMPATIBILITYBUFFER = 4
    CIB_LOWLEVELCOMPATIBILITYBUFFER = 5
  end

  enum ADDRESS_CAPABILITY : Int32
    AC_ADDRESSTYPES = 0
    AC_BEARERMODES = 1
    AC_MAXACTIVECALLS = 2
    AC_MAXONHOLDCALLS = 3
    AC_MAXONHOLDPENDINGCALLS = 4
    AC_MAXNUMCONFERENCE = 5
    AC_MAXNUMTRANSCONF = 6
    AC_MONITORDIGITSUPPORT = 7
    AC_GENERATEDIGITSUPPORT = 8
    AC_GENERATETONEMODES = 9
    AC_GENERATETONEMAXNUMFREQ = 10
    AC_MONITORTONEMAXNUMFREQ = 11
    AC_MONITORTONEMAXNUMENTRIES = 12
    AC_DEVCAPFLAGS = 13
    AC_ANSWERMODES = 14
    AC_LINEFEATURES = 15
    AC_SETTABLEDEVSTATUS = 16
    AC_PARKSUPPORT = 17
    AC_CALLERIDSUPPORT = 18
    AC_CALLEDIDSUPPORT = 19
    AC_CONNECTEDIDSUPPORT = 20
    AC_REDIRECTIONIDSUPPORT = 21
    AC_REDIRECTINGIDSUPPORT = 22
    AC_ADDRESSCAPFLAGS = 23
    AC_CALLFEATURES1 = 24
    AC_CALLFEATURES2 = 25
    AC_REMOVEFROMCONFCAPS = 26
    AC_REMOVEFROMCONFSTATE = 27
    AC_TRANSFERMODES = 28
    AC_ADDRESSFEATURES = 29
    AC_PREDICTIVEAUTOTRANSFERSTATES = 30
    AC_MAXCALLDATASIZE = 31
    AC_LINEID = 32
    AC_ADDRESSID = 33
    AC_FORWARDMODES = 34
    AC_MAXFORWARDENTRIES = 35
    AC_MAXSPECIFICENTRIES = 36
    AC_MINFWDNUMRINGS = 37
    AC_MAXFWDNUMRINGS = 38
    AC_MAXCALLCOMPLETIONS = 39
    AC_CALLCOMPLETIONCONDITIONS = 40
    AC_CALLCOMPLETIONMODES = 41
    AC_PERMANENTDEVICEID = 42
    AC_GATHERDIGITSMINTIMEOUT = 43
    AC_GATHERDIGITSMAXTIMEOUT = 44
    AC_GENERATEDIGITMINDURATION = 45
    AC_GENERATEDIGITMAXDURATION = 46
    AC_GENERATEDIGITDEFAULTDURATION = 47
  end

  enum ADDRESS_CAPABILITY_STRING : Int32
    ACS_PROTOCOL = 0
    ACS_ADDRESSDEVICESPECIFIC = 1
    ACS_LINEDEVICESPECIFIC = 2
    ACS_PROVIDERSPECIFIC = 3
    ACS_SWITCHSPECIFIC = 4
    ACS_PERMANENTDEVICEGUID = 5
  end

  enum FULLDUPLEX_SUPPORT : Int32
    FDS_SUPPORTED = 0
    FDS_NOTSUPPORTED = 1
    FDS_UNKNOWN = 2
  end

  enum FINISH_MODE : Int32
    FM_ASTRANSFER = 0
    FM_ASCONFERENCE = 1
  end

  enum PHONE_PRIVILEGE : Int32
    PP_OWNER = 0
    PP_MONITOR = 1
  end

  enum PHONE_HOOK_SWITCH_DEVICE : Int32
    PHSD_HANDSET = 1
    PHSD_SPEAKERPHONE = 2
    PHSD_HEADSET = 4
  end

  enum PHONE_HOOK_SWITCH_STATE : Int32
    PHSS_ONHOOK = 1
    PHSS_OFFHOOK_MIC_ONLY = 2
    PHSS_OFFHOOK_SPEAKER_ONLY = 4
    PHSS_OFFHOOK = 8
  end

  enum PHONE_LAMP_MODE : Int32
    LM_DUMMY = 1
    LM_OFF = 2
    LM_STEADY = 4
    LM_WINK = 8
    LM_FLASH = 16
    LM_FLUTTER = 32
    LM_BROKENFLUTTER = 64
    LM_UNKNOWN = 128
  end

  enum PHONECAPS_LONG : Int32
    PCL_HOOKSWITCHES = 0
    PCL_HANDSETHOOKSWITCHMODES = 1
    PCL_HEADSETHOOKSWITCHMODES = 2
    PCL_SPEAKERPHONEHOOKSWITCHMODES = 3
    PCL_DISPLAYNUMROWS = 4
    PCL_DISPLAYNUMCOLUMNS = 5
    PCL_NUMRINGMODES = 6
    PCL_NUMBUTTONLAMPS = 7
    PCL_GENERICPHONE = 8
  end

  enum PHONECAPS_STRING : Int32
    PCS_PHONENAME = 0
    PCS_PHONEINFO = 1
    PCS_PROVIDERINFO = 2
  end

  enum PHONECAPS_BUFFER : Int32
    PCB_DEVSPECIFICBUFFER = 0
  end

  enum PHONE_BUTTON_STATE : Int32
    PBS_UP = 1
    PBS_DOWN = 2
    PBS_UNKNOWN = 4
    PBS_UNAVAIL = 8
  end

  enum PHONE_BUTTON_MODE : Int32
    PBM_DUMMY = 0
    PBM_CALL = 1
    PBM_FEATURE = 2
    PBM_KEYPAD = 3
    PBM_LOCAL = 4
    PBM_DISPLAY = 5
  end

  enum PHONE_BUTTON_FUNCTION : Int32
    PBF_UNKNOWN = 0
    PBF_CONFERENCE = 1
    PBF_TRANSFER = 2
    PBF_DROP = 3
    PBF_HOLD = 4
    PBF_RECALL = 5
    PBF_DISCONNECT = 6
    PBF_CONNECT = 7
    PBF_MSGWAITON = 8
    PBF_MSGWAITOFF = 9
    PBF_SELECTRING = 10
    PBF_ABBREVDIAL = 11
    PBF_FORWARD = 12
    PBF_PICKUP = 13
    PBF_RINGAGAIN = 14
    PBF_PARK = 15
    PBF_REJECT = 16
    PBF_REDIRECT = 17
    PBF_MUTE = 18
    PBF_VOLUMEUP = 19
    PBF_VOLUMEDOWN = 20
    PBF_SPEAKERON = 21
    PBF_SPEAKEROFF = 22
    PBF_FLASH = 23
    PBF_DATAON = 24
    PBF_DATAOFF = 25
    PBF_DONOTDISTURB = 26
    PBF_INTERCOM = 27
    PBF_BRIDGEDAPP = 28
    PBF_BUSY = 29
    PBF_CALLAPP = 30
    PBF_DATETIME = 31
    PBF_DIRECTORY = 32
    PBF_COVER = 33
    PBF_CALLID = 34
    PBF_LASTNUM = 35
    PBF_NIGHTSRV = 36
    PBF_SENDCALLS = 37
    PBF_MSGINDICATOR = 38
    PBF_REPDIAL = 39
    PBF_SETREPDIAL = 40
    PBF_SYSTEMSPEED = 41
    PBF_STATIONSPEED = 42
    PBF_CAMPON = 43
    PBF_SAVEREPEAT = 44
    PBF_QUEUECALL = 45
    PBF_NONE = 46
    PBF_SEND = 47
  end

  enum PHONE_TONE : Int32
    PT_KEYPADZERO = 0
    PT_KEYPADONE = 1
    PT_KEYPADTWO = 2
    PT_KEYPADTHREE = 3
    PT_KEYPADFOUR = 4
    PT_KEYPADFIVE = 5
    PT_KEYPADSIX = 6
    PT_KEYPADSEVEN = 7
    PT_KEYPADEIGHT = 8
    PT_KEYPADNINE = 9
    PT_KEYPADSTAR = 10
    PT_KEYPADPOUND = 11
    PT_KEYPADA = 12
    PT_KEYPADB = 13
    PT_KEYPADC = 14
    PT_KEYPADD = 15
    PT_NORMALDIALTONE = 16
    PT_EXTERNALDIALTONE = 17
    PT_BUSY = 18
    PT_RINGBACK = 19
    PT_ERRORTONE = 20
    PT_SILENCE = 21
  end

  enum PHONE_EVENT : Int32
    PE_DISPLAY = 0
    PE_LAMPMODE = 1
    PE_RINGMODE = 2
    PE_RINGVOLUME = 3
    PE_HOOKSWITCH = 4
    PE_CAPSCHANGE = 5
    PE_BUTTON = 6
    PE_CLOSE = 7
    PE_NUMBERGATHERED = 8
    PE_DIALING = 9
    PE_ANSWER = 10
    PE_DISCONNECT = 11
    PE_LASTITEM = 11
  end

  enum TERMINAL_MEDIA_STATE : Int32
    TMS_IDLE = 0
    TMS_ACTIVE = 1
    TMS_PAUSED = 2
    TMS_LASTITEM = 2
  end

  enum FT_STATE_EVENT_CAUSE : Int32
    FTEC_NORMAL = 0
    FTEC_END_OF_FILE = 1
    FTEC_READ_ERROR = 2
    FTEC_WRITE_ERROR = 3
  end

  enum AGENT_EVENT : Int32
    AE_NOT_READY = 0
    AE_READY = 1
    AE_BUSY_ACD = 2
    AE_BUSY_INCOMING = 3
    AE_BUSY_OUTGOING = 4
    AE_UNKNOWN = 5
  end

  enum AGENT_STATE : Int32
    AS_NOT_READY = 0
    AS_READY = 1
    AS_BUSY_ACD = 2
    AS_BUSY_INCOMING = 3
    AS_BUSY_OUTGOING = 4
    AS_UNKNOWN = 5
  end

  enum AGENT_SESSION_EVENT : Int32
    ASE_NEW_SESSION = 0
    ASE_NOT_READY = 1
    ASE_READY = 2
    ASE_BUSY = 3
    ASE_WRAPUP = 4
    ASE_END = 5
  end

  enum AGENT_SESSION_STATE : Int32
    ASST_NOT_READY = 0
    ASST_READY = 1
    ASST_BUSY_ON_CALL = 2
    ASST_BUSY_WRAPUP = 3
    ASST_SESSION_ENDED = 4
  end

  enum AGENTHANDLER_EVENT : Int32
    AHE_NEW_AGENTHANDLER = 0
    AHE_AGENTHANDLER_REMOVED = 1
  end

  enum ACDGROUP_EVENT : Int32
    ACDGE_NEW_GROUP = 0
    ACDGE_GROUP_REMOVED = 1
  end

  enum ACDQUEUE_EVENT : Int32
    ACDQE_NEW_QUEUE = 0
    ACDQE_QUEUE_REMOVED = 1
  end

  enum MSP_ADDRESS_EVENT : Int32
    ADDRESS_TERMINAL_AVAILABLE = 0
    ADDRESS_TERMINAL_UNAVAILABLE = 1
  end

  enum MSP_CALL_EVENT : Int32
    CALL_NEW_STREAM = 0
    CALL_STREAM_FAIL = 1
    CALL_TERMINAL_FAIL = 2
    CALL_STREAM_NOT_USED = 3
    CALL_STREAM_ACTIVE = 4
    CALL_STREAM_INACTIVE = 5
  end

  enum MSP_CALL_EVENT_CAUSE : Int32
    CALL_CAUSE_UNKNOWN = 0
    CALL_CAUSE_BAD_DEVICE = 1
    CALL_CAUSE_CONNECT_FAIL = 2
    CALL_CAUSE_LOCAL_REQUEST = 3
    CALL_CAUSE_REMOTE_REQUEST = 4
    CALL_CAUSE_MEDIA_TIMEOUT = 5
    CALL_CAUSE_MEDIA_RECOVERED = 6
    CALL_CAUSE_QUALITY_OF_SERVICE = 7
  end

  enum MSP_EVENT : Int32
    ME_ADDRESS_EVENT = 0
    ME_CALL_EVENT = 1
    ME_TSP_DATA = 2
    ME_PRIVATE_EVENT = 3
    ME_ASR_TERMINAL_EVENT = 4
    ME_TTS_TERMINAL_EVENT = 5
    ME_FILE_TERMINAL_EVENT = 6
    ME_TONE_TERMINAL_EVENT = 7
  end

  enum DIRECTORY_TYPE : Int32
    DT_NTDS = 1
    DT_ILS = 2
  end

  enum DIRECTORY_OBJECT_TYPE : Int32
    OT_CONFERENCE = 1
    OT_USER = 2
  end

  enum RND_ADVERTISING_SCOPE : Int32
    RAS_LOCAL = 1
    RAS_SITE = 2
    RAS_REGION = 3
    RAS_WORLD = 4
  end

  union LINEINITIALIZEEXPARAMS_Handles_e__Union
    h_event : LibC::HANDLE
    h_completion_port : LibC::HANDLE
  end
  union LINEPROXYREQUEST_Anonymous_e__Union
    set_agent_group : LINEPROXYREQUEST_Anonymous_e__Union_SetAgentGroup_e__Struct
    set_agent_state : LINEPROXYREQUEST_Anonymous_e__Union_SetAgentState_e__Struct
    set_agent_activity : LINEPROXYREQUEST_Anonymous_e__Union_SetAgentActivity_e__Struct
    get_agent_caps : LINEPROXYREQUEST_Anonymous_e__Union_GetAgentCaps_e__Struct
    get_agent_status : LINEPROXYREQUEST_Anonymous_e__Union_GetAgentStatus_e__Struct
    agent_specific : LINEPROXYREQUEST_Anonymous_e__Union_AgentSpecific_e__Struct
    get_agent_activity_list : LINEPROXYREQUEST_Anonymous_e__Union_GetAgentActivityList_e__Struct
    get_agent_group_list : LINEPROXYREQUEST_Anonymous_e__Union_GetAgentGroupList_e__Struct
    create_agent : LINEPROXYREQUEST_Anonymous_e__Union_CreateAgent_e__Struct
    set_agent_state_ex : LINEPROXYREQUEST_Anonymous_e__Union_SetAgentStateEx_e__Struct
    set_agent_measurement_period : LINEPROXYREQUEST_Anonymous_e__Union_SetAgentMeasurementPeriod_e__Struct
    get_agent_info : LINEPROXYREQUEST_Anonymous_e__Union_GetAgentInfo_e__Struct
    create_agent_session : LINEPROXYREQUEST_Anonymous_e__Union_CreateAgentSession_e__Struct
    get_agent_session_list : LINEPROXYREQUEST_Anonymous_e__Union_GetAgentSessionList_e__Struct
    get_agent_session_info : LINEPROXYREQUEST_Anonymous_e__Union_GetAgentSessionInfo_e__Struct
    set_agent_session_state : LINEPROXYREQUEST_Anonymous_e__Union_SetAgentSessionState_e__Struct
    get_queue_list : LINEPROXYREQUEST_Anonymous_e__Union_GetQueueList_e__Struct
    set_queue_measurement_period : LINEPROXYREQUEST_Anonymous_e__Union_SetQueueMeasurementPeriod_e__Struct
    get_queue_info : LINEPROXYREQUEST_Anonymous_e__Union_GetQueueInfo_e__Struct
    get_group_list : LINEPROXYREQUEST_Anonymous_e__Union_GetGroupList_e__Struct
  end
  union PHONEINITIALIZEEXPARAMS_Handles_e__Union
    h_event : LibC::HANDLE
    h_completion_port : LibC::HANDLE
  end
  union MSP_EVENT_INFO_Anonymous_e__Union
    msp_address_event_info : MSP_EVENT_INFO_Anonymous_e__Union_MSP_ADDRESS_EVENT_INFO_e__Struct
    msp_call_event_info : MSP_EVENT_INFO_Anonymous_e__Union_MSP_CALL_EVENT_INFO_e__Struct
    msp_tsp_data : MSP_EVENT_INFO_Anonymous_e__Union_MSP_TSP_DATA_e__Struct
    msp_private_event_info : MSP_EVENT_INFO_Anonymous_e__Union_MSP_PRIVATE_EVENT_INFO_e__Struct
    msp_file_terminal_event_info : MSP_EVENT_INFO_Anonymous_e__Union_MSP_FILE_TERMINAL_EVENT_INFO_e__Struct
    msp_asr_terminal_event_info : MSP_EVENT_INFO_Anonymous_e__Union_MSP_ASR_TERMINAL_EVENT_INFO_e__Struct
    msp_tts_terminal_event_info : MSP_EVENT_INFO_Anonymous_e__Union_MSP_TTS_TERMINAL_EVENT_INFO_e__Struct
    msp_tone_terminal_event_info : MSP_EVENT_INFO_Anonymous_e__Union_MSP_TONE_TERMINAL_EVENT_INFO_e__Struct
  end
  union NSID_address_e__Union
    alias : ADDR_ALIAS
    rgch_inter_net : CHAR[0]*
  end

  struct LINEADDRESSCAPS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_line_device_id : UInt32
    dw_address_size : UInt32
    dw_address_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_address_sharing : UInt32
    dw_address_states : UInt32
    dw_call_info_states : UInt32
    dw_caller_id_flags : UInt32
    dw_called_id_flags : UInt32
    dw_connected_id_flags : UInt32
    dw_redirection_id_flags : UInt32
    dw_redirecting_id_flags : UInt32
    dw_call_states : UInt32
    dw_dial_tone_modes : UInt32
    dw_busy_modes : UInt32
    dw_special_info : UInt32
    dw_disconnect_modes : UInt32
    dw_max_num_active_calls : UInt32
    dw_max_num_on_hold_calls : UInt32
    dw_max_num_on_hold_pending_calls : UInt32
    dw_max_num_conference : UInt32
    dw_max_num_trans_conf : UInt32
    dw_addr_cap_flags : UInt32
    dw_call_features : UInt32
    dw_remove_from_conf_caps : UInt32
    dw_remove_from_conf_state : UInt32
    dw_transfer_modes : UInt32
    dw_park_modes : UInt32
    dw_forward_modes : UInt32
    dw_max_forward_entries : UInt32
    dw_max_specific_entries : UInt32
    dw_min_fwd_num_rings : UInt32
    dw_max_fwd_num_rings : UInt32
    dw_max_call_completions : UInt32
    dw_call_completion_conds : UInt32
    dw_call_completion_modes : UInt32
    dw_num_completion_messages : UInt32
    dw_completion_msg_text_entry_size : UInt32
    dw_completion_msg_text_size : UInt32
    dw_completion_msg_text_offset : UInt32
    dw_address_features : UInt32
    dw_predictive_auto_transfer_states : UInt32
    dw_num_call_treatments : UInt32
    dw_call_treatment_list_size : UInt32
    dw_call_treatment_list_offset : UInt32
    dw_device_classes_size : UInt32
    dw_device_classes_offset : UInt32
    dw_max_call_data_size : UInt32
    dw_call_features2 : UInt32
    dw_max_no_answer_timeout : UInt32
    dw_connected_modes : UInt32
    dw_offering_modes : UInt32
    dw_available_media_modes : UInt32
  end
  struct LINEADDRESSSTATUS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_in_use : UInt32
    dw_num_active_calls : UInt32
    dw_num_on_hold_calls : UInt32
    dw_num_on_hold_pend_calls : UInt32
    dw_address_features : UInt32
    dw_num_rings_no_answer : UInt32
    dw_forward_num_entries : UInt32
    dw_forward_size : UInt32
    dw_forward_offset : UInt32
    dw_terminal_modes_size : UInt32
    dw_terminal_modes_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
  end
  struct LINEAGENTACTIVITYENTRY
    dw_id : UInt32
    dw_name_size : UInt32
    dw_name_offset : UInt32
  end
  struct LINEAGENTACTIVITYLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_entries : UInt32
    dw_list_size : UInt32
    dw_list_offset : UInt32
  end
  struct LINEAGENTCAPS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_agent_handler_info_size : UInt32
    dw_agent_handler_info_offset : UInt32
    dw_caps_version : UInt32
    dw_features : UInt32
    dw_states : UInt32
    dw_next_states : UInt32
    dw_max_num_group_entries : UInt32
    dw_agent_status_messages : UInt32
    dw_num_agent_extension_i_ds : UInt32
    dw_agent_extension_id_list_size : UInt32
    dw_agent_extension_id_list_offset : UInt32
    proxy_guid : Guid
  end
  struct LINEAGENTGROUPENTRY
    group_id : LINEAGENTGROUPENTRY_GroupID_e__Struct
    dw_name_size : UInt32
    dw_name_offset : UInt32
  end
  struct LINEAGENTGROUPENTRY_GroupID_e__Struct
    dw_group_id1 : UInt32
    dw_group_id2 : UInt32
    dw_group_id3 : UInt32
    dw_group_id4 : UInt32
  end
  struct LINEAGENTGROUPLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_entries : UInt32
    dw_list_size : UInt32
    dw_list_offset : UInt32
  end
  struct LINEAGENTSTATUS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_entries : UInt32
    dw_group_list_size : UInt32
    dw_group_list_offset : UInt32
    dw_state : UInt32
    dw_next_state : UInt32
    dw_activity_id : UInt32
    dw_activity_size : UInt32
    dw_activity_offset : UInt32
    dw_agent_features : UInt32
    dw_valid_states : UInt32
    dw_valid_next_states : UInt32
  end
  struct LINEAPPINFO
    dw_machine_name_size : UInt32
    dw_machine_name_offset : UInt32
    dw_user_name_size : UInt32
    dw_user_name_offset : UInt32
    dw_module_filename_size : UInt32
    dw_module_filename_offset : UInt32
    dw_friendly_name_size : UInt32
    dw_friendly_name_offset : UInt32
    dw_media_modes : UInt32
    dw_address_id : UInt32
  end
  struct LINEAGENTENTRY
    h_agent : UInt32
    dw_name_size : UInt32
    dw_name_offset : UInt32
    dw_id_size : UInt32
    dw_id_offset : UInt32
    dw_pin_size : UInt32
    dw_pin_offset : UInt32
  end
  struct LINEAGENTLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_entries : UInt32
    dw_list_size : UInt32
    dw_list_offset : UInt32
  end
  struct LINEAGENTINFO
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_agent_state : UInt32
    dw_next_agent_state : UInt32
    dw_measurement_period : UInt32
    cy_overall_call_rate : CY
    dw_number_of_acd_calls : UInt32
    dw_number_of_incoming_calls : UInt32
    dw_number_of_outgoing_calls : UInt32
    dw_total_acd_talk_time : UInt32
    dw_total_acd_call_time : UInt32
    dw_total_acd_wrap_up_time : UInt32
  end
  struct LINEAGENTSESSIONENTRY
    h_agent_session : UInt32
    h_agent : UInt32
    group_id : Guid
    dw_working_address_id : UInt32
  end
  struct LINEAGENTSESSIONLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_entries : UInt32
    dw_list_size : UInt32
    dw_list_offset : UInt32
  end
  struct LINEAGENTSESSIONINFO
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_agent_session_state : UInt32
    dw_next_agent_session_state : UInt32
    date_session_start_time : Float64
    dw_session_duration : UInt32
    dw_number_of_calls : UInt32
    dw_total_talk_time : UInt32
    dw_average_talk_time : UInt32
    dw_total_call_time : UInt32
    dw_average_call_time : UInt32
    dw_total_wrap_up_time : UInt32
    dw_average_wrap_up_time : UInt32
    cy_acd_call_rate : CY
    dw_longest_time_to_answer : UInt32
    dw_average_time_to_answer : UInt32
  end
  struct LINEQUEUEENTRY
    dw_queue_id : UInt32
    dw_name_size : UInt32
    dw_name_offset : UInt32
  end
  struct LINEQUEUELIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_entries : UInt32
    dw_list_size : UInt32
    dw_list_offset : UInt32
  end
  struct LINEQUEUEINFO
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_measurement_period : UInt32
    dw_total_calls_queued : UInt32
    dw_current_calls_queued : UInt32
    dw_total_calls_abandoned : UInt32
    dw_total_calls_flowed_in : UInt32
    dw_total_calls_flowed_out : UInt32
    dw_longest_ever_wait_time : UInt32
    dw_current_longest_wait_time : UInt32
    dw_average_wait_time : UInt32
    dw_final_disposition : UInt32
  end
  struct LINEPROXYREQUESTLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_entries : UInt32
    dw_list_size : UInt32
    dw_list_offset : UInt32
  end
  struct LINEDIALPARAMS
    dw_dial_pause : UInt32
    dw_dial_speed : UInt32
    dw_digit_duration : UInt32
    dw_wait_for_dialtone : UInt32
  end
  struct LINECALLINFO
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    h_line : UInt32
    dw_line_device_id : UInt32
    dw_address_id : UInt32
    dw_bearer_mode : UInt32
    dw_rate : UInt32
    dw_media_mode : UInt32
    dw_app_specific : UInt32
    dw_call_id : UInt32
    dw_related_call_id : UInt32
    dw_call_param_flags : UInt32
    dw_call_states : UInt32
    dw_monitor_digit_modes : UInt32
    dw_monitor_media_modes : UInt32
    dial_params : LINEDIALPARAMS
    dw_origin : UInt32
    dw_reason : UInt32
    dw_completion_id : UInt32
    dw_num_owners : UInt32
    dw_num_monitors : UInt32
    dw_country_code : UInt32
    dw_trunk : UInt32
    dw_caller_id_flags : UInt32
    dw_caller_id_size : UInt32
    dw_caller_id_offset : UInt32
    dw_caller_id_name_size : UInt32
    dw_caller_id_name_offset : UInt32
    dw_called_id_flags : UInt32
    dw_called_id_size : UInt32
    dw_called_id_offset : UInt32
    dw_called_id_name_size : UInt32
    dw_called_id_name_offset : UInt32
    dw_connected_id_flags : UInt32
    dw_connected_id_size : UInt32
    dw_connected_id_offset : UInt32
    dw_connected_id_name_size : UInt32
    dw_connected_id_name_offset : UInt32
    dw_redirection_id_flags : UInt32
    dw_redirection_id_size : UInt32
    dw_redirection_id_offset : UInt32
    dw_redirection_id_name_size : UInt32
    dw_redirection_id_name_offset : UInt32
    dw_redirecting_id_flags : UInt32
    dw_redirecting_id_size : UInt32
    dw_redirecting_id_offset : UInt32
    dw_redirecting_id_name_size : UInt32
    dw_redirecting_id_name_offset : UInt32
    dw_app_name_size : UInt32
    dw_app_name_offset : UInt32
    dw_displayable_address_size : UInt32
    dw_displayable_address_offset : UInt32
    dw_called_party_size : UInt32
    dw_called_party_offset : UInt32
    dw_comment_size : UInt32
    dw_comment_offset : UInt32
    dw_display_size : UInt32
    dw_display_offset : UInt32
    dw_user_user_info_size : UInt32
    dw_user_user_info_offset : UInt32
    dw_high_level_comp_size : UInt32
    dw_high_level_comp_offset : UInt32
    dw_low_level_comp_size : UInt32
    dw_low_level_comp_offset : UInt32
    dw_charging_info_size : UInt32
    dw_charging_info_offset : UInt32
    dw_terminal_modes_size : UInt32
    dw_terminal_modes_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_call_treatment : UInt32
    dw_call_data_size : UInt32
    dw_call_data_offset : UInt32
    dw_sending_flowspec_size : UInt32
    dw_sending_flowspec_offset : UInt32
    dw_receiving_flowspec_size : UInt32
    dw_receiving_flowspec_offset : UInt32
  end
  struct LINECALLLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_calls_num_entries : UInt32
    dw_calls_size : UInt32
    dw_calls_offset : UInt32
  end
  struct LINECALLPARAMS
    dw_total_size : UInt32
    dw_bearer_mode : UInt32
    dw_min_rate : UInt32
    dw_max_rate : UInt32
    dw_media_mode : UInt32
    dw_call_param_flags : UInt32
    dw_address_mode : UInt32
    dw_address_id : UInt32
    dial_params : LINEDIALPARAMS
    dw_orig_address_size : UInt32
    dw_orig_address_offset : UInt32
    dw_displayable_address_size : UInt32
    dw_displayable_address_offset : UInt32
    dw_called_party_size : UInt32
    dw_called_party_offset : UInt32
    dw_comment_size : UInt32
    dw_comment_offset : UInt32
    dw_user_user_info_size : UInt32
    dw_user_user_info_offset : UInt32
    dw_high_level_comp_size : UInt32
    dw_high_level_comp_offset : UInt32
    dw_low_level_comp_size : UInt32
    dw_low_level_comp_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_predictive_auto_transfer_states : UInt32
    dw_target_address_size : UInt32
    dw_target_address_offset : UInt32
    dw_sending_flowspec_size : UInt32
    dw_sending_flowspec_offset : UInt32
    dw_receiving_flowspec_size : UInt32
    dw_receiving_flowspec_offset : UInt32
    dw_device_class_size : UInt32
    dw_device_class_offset : UInt32
    dw_device_config_size : UInt32
    dw_device_config_offset : UInt32
    dw_call_data_size : UInt32
    dw_call_data_offset : UInt32
    dw_no_answer_timeout : UInt32
    dw_calling_party_id_size : UInt32
    dw_calling_party_id_offset : UInt32
  end
  struct LINECALLSTATUS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_call_state : UInt32
    dw_call_state_mode : UInt32
    dw_call_privilege : UInt32
    dw_call_features : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_call_features2 : UInt32
    t_state_entry_time : SYSTEMTIME
  end
  struct LINECALLTREATMENTENTRY
    dw_call_treatment_id : UInt32
    dw_call_treatment_name_size : UInt32
    dw_call_treatment_name_offset : UInt32
  end
  struct LINECARDENTRY
    dw_permanent_card_id : UInt32
    dw_card_name_size : UInt32
    dw_card_name_offset : UInt32
    dw_card_number_digits : UInt32
    dw_same_area_rule_size : UInt32
    dw_same_area_rule_offset : UInt32
    dw_long_distance_rule_size : UInt32
    dw_long_distance_rule_offset : UInt32
    dw_international_rule_size : UInt32
    dw_international_rule_offset : UInt32
    dw_options : UInt32
  end
  struct LINECOUNTRYENTRY
    dw_country_id : UInt32
    dw_country_code : UInt32
    dw_next_country_id : UInt32
    dw_country_name_size : UInt32
    dw_country_name_offset : UInt32
    dw_same_area_rule_size : UInt32
    dw_same_area_rule_offset : UInt32
    dw_long_distance_rule_size : UInt32
    dw_long_distance_rule_offset : UInt32
    dw_international_rule_size : UInt32
    dw_international_rule_offset : UInt32
  end
  struct LINECOUNTRYLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_countries : UInt32
    dw_country_list_size : UInt32
    dw_country_list_offset : UInt32
  end
  struct LINEDEVCAPS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_provider_info_size : UInt32
    dw_provider_info_offset : UInt32
    dw_switch_info_size : UInt32
    dw_switch_info_offset : UInt32
    dw_permanent_line_id : UInt32
    dw_line_name_size : UInt32
    dw_line_name_offset : UInt32
    dw_string_format : UInt32
    dw_address_modes : UInt32
    dw_num_addresses : UInt32
    dw_bearer_modes : UInt32
    dw_max_rate : UInt32
    dw_media_modes : UInt32
    dw_generate_tone_modes : UInt32
    dw_generate_tone_max_num_freq : UInt32
    dw_generate_digit_modes : UInt32
    dw_monitor_tone_max_num_freq : UInt32
    dw_monitor_tone_max_num_entries : UInt32
    dw_monitor_digit_modes : UInt32
    dw_gather_digits_min_timeout : UInt32
    dw_gather_digits_max_timeout : UInt32
    dw_med_ctl_digit_max_list_size : UInt32
    dw_med_ctl_media_max_list_size : UInt32
    dw_med_ctl_tone_max_list_size : UInt32
    dw_med_ctl_call_state_max_list_size : UInt32
    dw_dev_cap_flags : UInt32
    dw_max_num_active_calls : UInt32
    dw_answer_mode : UInt32
    dw_ring_modes : UInt32
    dw_line_states : UInt32
    dw_uui_accept_size : UInt32
    dw_uui_answer_size : UInt32
    dw_uui_make_call_size : UInt32
    dw_uui_drop_size : UInt32
    dw_uui_send_user_user_info_size : UInt32
    dw_uui_call_info_size : UInt32
    min_dial_params : LINEDIALPARAMS
    max_dial_params : LINEDIALPARAMS
    default_dial_params : LINEDIALPARAMS
    dw_num_terminals : UInt32
    dw_terminal_caps_size : UInt32
    dw_terminal_caps_offset : UInt32
    dw_terminal_text_entry_size : UInt32
    dw_terminal_text_size : UInt32
    dw_terminal_text_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_line_features : UInt32
    dw_settable_dev_status : UInt32
    dw_device_classes_size : UInt32
    dw_device_classes_offset : UInt32
    permanent_line_guid : Guid
  end
  struct LINEDEVSTATUS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_opens : UInt32
    dw_open_media_modes : UInt32
    dw_num_active_calls : UInt32
    dw_num_on_hold_calls : UInt32
    dw_num_on_hold_pend_calls : UInt32
    dw_line_features : UInt32
    dw_num_call_completions : UInt32
    dw_ring_mode : UInt32
    dw_signal_level : UInt32
    dw_battery_level : UInt32
    dw_roam_mode : UInt32
    dw_dev_status_flags : UInt32
    dw_terminal_modes_size : UInt32
    dw_terminal_modes_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_available_media_modes : UInt32
    dw_app_info_size : UInt32
    dw_app_info_offset : UInt32
  end
  struct LINEEXTENSIONID
    dw_extension_id0 : UInt32
    dw_extension_id1 : UInt32
    dw_extension_id2 : UInt32
    dw_extension_id3 : UInt32
  end
  struct LINEFORWARD
    dw_forward_mode : UInt32
    dw_caller_address_size : UInt32
    dw_caller_address_offset : UInt32
    dw_dest_country_code : UInt32
    dw_dest_address_size : UInt32
    dw_dest_address_offset : UInt32
  end
  struct LINEFORWARDLIST
    dw_total_size : UInt32
    dw_num_entries : UInt32
    forward_list : LINEFORWARD[0]*
  end
  struct LINEGENERATETONE
    dw_frequency : UInt32
    dw_cadence_on : UInt32
    dw_cadence_off : UInt32
    dw_volume : UInt32
  end
  struct LINEINITIALIZEEXPARAMS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_options : UInt32
    handles : LINEINITIALIZEEXPARAMS_Handles_e__Union
    dw_completion_key : UInt32
  end
  struct LINELOCATIONENTRY
    dw_permanent_location_id : UInt32
    dw_location_name_size : UInt32
    dw_location_name_offset : UInt32
    dw_country_code : UInt32
    dw_city_code_size : UInt32
    dw_city_code_offset : UInt32
    dw_preferred_card_id : UInt32
    dw_local_access_code_size : UInt32
    dw_local_access_code_offset : UInt32
    dw_long_distance_access_code_size : UInt32
    dw_long_distance_access_code_offset : UInt32
    dw_toll_prefix_list_size : UInt32
    dw_toll_prefix_list_offset : UInt32
    dw_country_id : UInt32
    dw_options : UInt32
    dw_cancel_call_waiting_size : UInt32
    dw_cancel_call_waiting_offset : UInt32
  end
  struct LINEMEDIACONTROLCALLSTATE
    dw_call_states : UInt32
    dw_media_control : UInt32
  end
  struct LINEMEDIACONTROLDIGIT
    dw_digit : UInt32
    dw_digit_modes : UInt32
    dw_media_control : UInt32
  end
  struct LINEMEDIACONTROLMEDIA
    dw_media_modes : UInt32
    dw_duration : UInt32
    dw_media_control : UInt32
  end
  struct LINEMEDIACONTROLTONE
    dw_app_specific : UInt32
    dw_duration : UInt32
    dw_frequency1 : UInt32
    dw_frequency2 : UInt32
    dw_frequency3 : UInt32
    dw_media_control : UInt32
  end
  struct LINEMESSAGE
    h_device : UInt32
    dw_message_id : UInt32
    dw_callback_instance : LibC::UINT_PTR
    dw_param1 : LibC::UINT_PTR
    dw_param2 : LibC::UINT_PTR
    dw_param3 : LibC::UINT_PTR
  end
  struct LINEMONITORTONE
    dw_app_specific : UInt32
    dw_duration : UInt32
    dw_frequency1 : UInt32
    dw_frequency2 : UInt32
    dw_frequency3 : UInt32
  end
  struct LINEPROVIDERENTRY
    dw_permanent_provider_id : UInt32
    dw_provider_filename_size : UInt32
    dw_provider_filename_offset : UInt32
  end
  struct LINEPROVIDERLIST
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_providers : UInt32
    dw_provider_list_size : UInt32
    dw_provider_list_offset : UInt32
  end
  struct LINEPROXYREQUEST
    dw_size : UInt32
    dw_client_machine_name_size : UInt32
    dw_client_machine_name_offset : UInt32
    dw_client_user_name_size : UInt32
    dw_client_user_name_offset : UInt32
    dw_client_app_api_version : UInt32
    dw_request_type : UInt32
    anonymous : LINEPROXYREQUEST_Anonymous_e__Union
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetQueueInfo_e__Struct
    dw_queue_id : UInt32
    queue_info : LINEQUEUEINFO
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetQueueList_e__Struct
    group_id : Guid
    queue_list : LINEQUEUELIST
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetAgentSessionInfo_e__Struct
    h_agent_session : UInt32
    session_info : LINEAGENTSESSIONINFO
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_CreateAgentSession_e__Struct
    h_agent_session : UInt32
    dw_agent_pin_size : UInt32
    dw_agent_pin_offset : UInt32
    h_agent : UInt32
    group_id : Guid
    dw_working_address_id : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_SetAgentMeasurementPeriod_e__Struct
    h_agent : UInt32
    dw_measurement_period : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_CreateAgent_e__Struct
    h_agent : UInt32
    dw_agent_id_size : UInt32
    dw_agent_id_offset : UInt32
    dw_agent_pin_size : UInt32
    dw_agent_pin_offset : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetAgentActivityList_e__Struct
    dw_address_id : UInt32
    activity_list : LINEAGENTACTIVITYLIST
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetAgentStatus_e__Struct
    dw_address_id : UInt32
    agent_status : LINEAGENTSTATUS
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_SetAgentActivity_e__Struct
    dw_address_id : UInt32
    dw_activity_id : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_SetAgentGroup_e__Struct
    dw_address_id : UInt32
    group_list : LINEAGENTGROUPLIST
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_SetQueueMeasurementPeriod_e__Struct
    dw_queue_id : UInt32
    dw_measurement_period : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetAgentSessionList_e__Struct
    h_agent : UInt32
    session_list : LINEAGENTSESSIONLIST
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_SetAgentStateEx_e__Struct
    h_agent : UInt32
    dw_agent_state : UInt32
    dw_next_agent_state : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_AgentSpecific_e__Struct
    dw_address_id : UInt32
    dw_agent_extension_id_index : UInt32
    dw_size : UInt32
    params : UInt8[0]*
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_SetAgentState_e__Struct
    dw_address_id : UInt32
    dw_agent_state : UInt32
    dw_next_agent_state : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_SetAgentSessionState_e__Struct
    h_agent_session : UInt32
    dw_agent_session_state : UInt32
    dw_next_agent_session_state : UInt32
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetAgentGroupList_e__Struct
    dw_address_id : UInt32
    group_list : LINEAGENTGROUPLIST
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetGroupList_e__Struct
    group_list : LINEAGENTGROUPLIST
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetAgentCaps_e__Struct
    dw_address_id : UInt32
    agent_caps : LINEAGENTCAPS
  end
  struct LINEPROXYREQUEST_Anonymous_e__Union_GetAgentInfo_e__Struct
    h_agent : UInt32
    agent_info : LINEAGENTINFO
  end
  struct LINEREQMAKECALL
    sz_dest_address : CHAR[80]*
    sz_app_name : CHAR[40]*
    sz_called_party : CHAR[40]*
    sz_comment : CHAR[80]*
  end
  struct Linereqmakecallw_tag
    sz_dest_address : Char[80]*
    sz_app_name : Char[40]*
    sz_called_party : Char[40]*
    sz_comment : Char[80]*
  end
  struct LINEREQMEDIACALL
    h_wnd : HANDLE
    w_request_id : LibC::UINT_PTR
    sz_device_class : CHAR[40]*
    uc_device_id : UInt8[40]*
    dw_size : UInt32
    dw_secure : UInt32
    sz_dest_address : CHAR[80]*
    sz_app_name : CHAR[40]*
    sz_called_party : CHAR[40]*
    sz_comment : CHAR[80]*
  end
  struct Linereqmediacallw_tag
    h_wnd : HANDLE
    w_request_id : LibC::UINT_PTR
    sz_device_class : Char[40]*
    uc_device_id : UInt8[40]*
    dw_size : UInt32
    dw_secure : UInt32
    sz_dest_address : Char[80]*
    sz_app_name : Char[40]*
    sz_called_party : Char[40]*
    sz_comment : Char[80]*
  end
  struct LINETERMCAPS
    dw_term_dev : UInt32
    dw_term_modes : UInt32
    dw_term_sharing : UInt32
  end
  struct LINETRANSLATECAPS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_num_locations : UInt32
    dw_location_list_size : UInt32
    dw_location_list_offset : UInt32
    dw_current_location_id : UInt32
    dw_num_cards : UInt32
    dw_card_list_size : UInt32
    dw_card_list_offset : UInt32
    dw_current_preferred_card_id : UInt32
  end
  struct LINETRANSLATEOUTPUT
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_dialable_string_size : UInt32
    dw_dialable_string_offset : UInt32
    dw_displayable_string_size : UInt32
    dw_displayable_string_offset : UInt32
    dw_current_country : UInt32
    dw_dest_country : UInt32
    dw_translate_results : UInt32
  end
  struct PHONEBUTTONINFO
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_button_mode : UInt32
    dw_button_function : UInt32
    dw_button_text_size : UInt32
    dw_button_text_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_button_state : UInt32
  end
  struct PHONECAPS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_provider_info_size : UInt32
    dw_provider_info_offset : UInt32
    dw_phone_info_size : UInt32
    dw_phone_info_offset : UInt32
    dw_permanent_phone_id : UInt32
    dw_phone_name_size : UInt32
    dw_phone_name_offset : UInt32
    dw_string_format : UInt32
    dw_phone_states : UInt32
    dw_hook_switch_devs : UInt32
    dw_handset_hook_switch_modes : UInt32
    dw_speaker_hook_switch_modes : UInt32
    dw_headset_hook_switch_modes : UInt32
    dw_volume_flags : UInt32
    dw_gain_flags : UInt32
    dw_display_num_rows : UInt32
    dw_display_num_columns : UInt32
    dw_num_ring_modes : UInt32
    dw_num_button_lamps : UInt32
    dw_button_modes_size : UInt32
    dw_button_modes_offset : UInt32
    dw_button_functions_size : UInt32
    dw_button_functions_offset : UInt32
    dw_lamp_modes_size : UInt32
    dw_lamp_modes_offset : UInt32
    dw_num_set_data : UInt32
    dw_set_data_size : UInt32
    dw_set_data_offset : UInt32
    dw_num_get_data : UInt32
    dw_get_data_size : UInt32
    dw_get_data_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_device_classes_size : UInt32
    dw_device_classes_offset : UInt32
    dw_phone_features : UInt32
    dw_settable_handset_hook_switch_modes : UInt32
    dw_settable_speaker_hook_switch_modes : UInt32
    dw_settable_headset_hook_switch_modes : UInt32
    dw_monitored_handset_hook_switch_modes : UInt32
    dw_monitored_speaker_hook_switch_modes : UInt32
    dw_monitored_headset_hook_switch_modes : UInt32
    permanent_phone_guid : Guid
  end
  struct PHONEEXTENSIONID
    dw_extension_id0 : UInt32
    dw_extension_id1 : UInt32
    dw_extension_id2 : UInt32
    dw_extension_id3 : UInt32
  end
  struct PHONEINITIALIZEEXPARAMS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_options : UInt32
    handles : PHONEINITIALIZEEXPARAMS_Handles_e__Union
    dw_completion_key : UInt32
  end
  struct PHONEMESSAGE
    h_device : UInt32
    dw_message_id : UInt32
    dw_callback_instance : LibC::UINT_PTR
    dw_param1 : LibC::UINT_PTR
    dw_param2 : LibC::UINT_PTR
    dw_param3 : LibC::UINT_PTR
  end
  struct PHONESTATUS
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_status_flags : UInt32
    dw_num_owners : UInt32
    dw_num_monitors : UInt32
    dw_ring_mode : UInt32
    dw_ring_volume : UInt32
    dw_handset_hook_switch_mode : UInt32
    dw_handset_volume : UInt32
    dw_handset_gain : UInt32
    dw_speaker_hook_switch_mode : UInt32
    dw_speaker_volume : UInt32
    dw_speaker_gain : UInt32
    dw_headset_hook_switch_mode : UInt32
    dw_headset_volume : UInt32
    dw_headset_gain : UInt32
    dw_display_size : UInt32
    dw_display_offset : UInt32
    dw_lamp_modes_size : UInt32
    dw_lamp_modes_offset : UInt32
    dw_owner_name_size : UInt32
    dw_owner_name_offset : UInt32
    dw_dev_specific_size : UInt32
    dw_dev_specific_offset : UInt32
    dw_phone_features : UInt32
  end
  struct VARSTRING
    dw_total_size : UInt32
    dw_needed_size : UInt32
    dw_used_size : UInt32
    dw_string_format : UInt32
    dw_string_size : UInt32
    dw_string_offset : UInt32
  end
  struct HDRVCALL__
    unused : Int32
  end
  struct HDRVLINE__
    unused : Int32
  end
  struct HDRVPHONE__
    unused : Int32
  end
  struct HDRVMSPLINE__
    unused : Int32
  end
  struct HDRVDIALOGINSTANCE__
    unused : Int32
  end
  struct HTAPICALL__
    unused : Int32
  end
  struct HTAPILINE__
    unused : Int32
  end
  struct HTAPIPHONE__
    unused : Int32
  end
  struct HPROVIDER__
    unused : Int32
  end
  struct TUISPICREATEDIALOGINSTANCEPARAMS
    dw_request_id : UInt32
    hd_dlg_inst : HDRVDIALOGINSTANCE__*
    ht_dlg_inst : UInt32
    lpsz_uidll_name : LibC::LPWSTR
    lp_params : Void*
    dw_size : UInt32
  end
  struct TAPI_CUSTOMTONE
    dw_frequency : UInt32
    dw_cadence_on : UInt32
    dw_cadence_off : UInt32
    dw_volume : UInt32
  end
  struct TAPI_DETECTTONE
    dw_app_specific : UInt32
    dw_duration : UInt32
    dw_frequency1 : UInt32
    dw_frequency2 : UInt32
    dw_frequency3 : UInt32
  end
  struct MSP_EVENT_INFO
    dw_size : UInt32
    event : MSP_EVENT
    h_call : Int32*
    anonymous : MSP_EVENT_INFO_Anonymous_e__Union
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_TONE_TERMINAL_EVENT_INFO_e__Struct
    p_tone_terminal : ITTerminal
    hr_error_code : HRESULT
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_ASR_TERMINAL_EVENT_INFO_e__Struct
    p_asr_terminal : ITTerminal
    hr_error_code : HRESULT
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_PRIVATE_EVENT_INFO_e__Struct
    p_event : IDispatch
    l_event_code : Int32
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_CALL_EVENT_INFO_e__Struct
    type : MSP_CALL_EVENT
    cause : MSP_CALL_EVENT_CAUSE
    p_stream : ITStream
    p_terminal : ITTerminal
    hr_error : HRESULT
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_FILE_TERMINAL_EVENT_INFO_e__Struct
    p_parent_file_terminal : ITTerminal
    p_file_track : ITFileTrack
    terminal_media_state : TERMINAL_MEDIA_STATE
    ftec_event_cause : FT_STATE_EVENT_CAUSE
    hr_error_code : HRESULT
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_ADDRESS_EVENT_INFO_e__Struct
    type : MSP_ADDRESS_EVENT
    p_terminal : ITTerminal
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_TSP_DATA_e__Struct
    dw_buffer_size : UInt32
    p_buffer : UInt8[0]*
  end
  struct MSP_EVENT_INFO_Anonymous_e__Union_MSP_TTS_TERMINAL_EVENT_INFO_e__Struct
    p_tts_terminal : ITTerminal
    hr_error_code : HRESULT
  end
  struct STnefProblem
    ul_component : UInt32
    ul_attribute : UInt32
    ul_prop_tag : UInt32
    scode : Int32
  end
  struct STnefProblemArray
    c_problem : UInt32
    a_problem : STnefProblem[0]*
  end
  struct Renddata
    atyp : UInt16
    ul_position : UInt32
    dx_width : UInt16
    dy_height : UInt16
    dw_flags : UInt32
  end
  struct Dtr
    w_year : UInt16
    w_month : UInt16
    w_day : UInt16
    w_hour : UInt16
    w_minute : UInt16
    w_second : UInt16
    w_day_of_week : UInt16
  end
  struct Trp
    trpid : UInt16
    cbgrtrp : UInt16
    cch : UInt16
    cb_rgb : UInt16
  end
  struct ADDR_ALIAS
    rgch_name : CHAR[41]*
    rgch_e_name : CHAR[11]*
    rgch_srvr : CHAR[12]*
    dib_detail : UInt32
    type : UInt16
  end
  struct NSID
    dw_size : UInt32
    uch_type : UInt8[16]*
    xtype : UInt32
    l_time : Int32
    address : NSID_address_e__Union
  end


  struct ITTAPIVTbl
    query_interface : Proc(ITTAPI*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTAPI*, UInt32)
    release : Proc(ITTAPI*, UInt32)
    get_type_info_count : Proc(ITTAPI*, UInt32*, HRESULT)
    get_type_info : Proc(ITTAPI*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTAPI*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTAPI*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    initialize : Proc(ITTAPI*, HRESULT)
    shutdown : Proc(ITTAPI*, HRESULT)
    get_addresses : Proc(ITTAPI*, VARIANT*, HRESULT)
    enumerate_addresses : Proc(ITTAPI*, IEnumAddress*, HRESULT)
    register_call_notifications : Proc(ITTAPI*, ITAddress, Int16, Int16, Int32, Int32, Int32*, HRESULT)
    unregister_notifications : Proc(ITTAPI*, Int32, HRESULT)
    get_call_hubs : Proc(ITTAPI*, VARIANT*, HRESULT)
    enumerate_call_hubs : Proc(ITTAPI*, IEnumCallHub*, HRESULT)
    set_call_hub_tracking : Proc(ITTAPI*, VARIANT, Int16, HRESULT)
    enumerate_private_tapi_objects : Proc(ITTAPI*, IEnumUnknown*, HRESULT)
    get_private_tapi_objects : Proc(ITTAPI*, VARIANT*, HRESULT)
    register_request_recipient : Proc(ITTAPI*, Int32, Int32, Int16, HRESULT)
    set_assisted_telephony_priority : Proc(ITTAPI*, UInt8*, Int16, HRESULT)
    set_application_priority : Proc(ITTAPI*, UInt8*, Int32, Int16, HRESULT)
    put_event_filter : Proc(ITTAPI*, Int32, HRESULT)
    get_event_filter : Proc(ITTAPI*, Int32*, HRESULT)
  end

  ITTAPI_GUID = LibC::GUID.new("b1efc382-9355-11d0-835c-00aa003ccabd")
  CLSID_ITTAPI = "b1efc382-9355-11d0-835c-00aa003ccabd"
  struct ITTAPI
    lpVtbl : ITTAPIVTbl*
  end

  struct ITTAPI2VTbl
    query_interface : Proc(ITTAPI2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTAPI2*, UInt32)
    release : Proc(ITTAPI2*, UInt32)
    get_type_info_count : Proc(ITTAPI2*, UInt32*, HRESULT)
    get_type_info : Proc(ITTAPI2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTAPI2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTAPI2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    initialize : Proc(ITTAPI2*, HRESULT)
    shutdown : Proc(ITTAPI2*, HRESULT)
    get_addresses : Proc(ITTAPI2*, VARIANT*, HRESULT)
    enumerate_addresses : Proc(ITTAPI2*, IEnumAddress*, HRESULT)
    register_call_notifications : Proc(ITTAPI2*, ITAddress, Int16, Int16, Int32, Int32, Int32*, HRESULT)
    unregister_notifications : Proc(ITTAPI2*, Int32, HRESULT)
    get_call_hubs : Proc(ITTAPI2*, VARIANT*, HRESULT)
    enumerate_call_hubs : Proc(ITTAPI2*, IEnumCallHub*, HRESULT)
    set_call_hub_tracking : Proc(ITTAPI2*, VARIANT, Int16, HRESULT)
    enumerate_private_tapi_objects : Proc(ITTAPI2*, IEnumUnknown*, HRESULT)
    get_private_tapi_objects : Proc(ITTAPI2*, VARIANT*, HRESULT)
    register_request_recipient : Proc(ITTAPI2*, Int32, Int32, Int16, HRESULT)
    set_assisted_telephony_priority : Proc(ITTAPI2*, UInt8*, Int16, HRESULT)
    set_application_priority : Proc(ITTAPI2*, UInt8*, Int32, Int16, HRESULT)
    put_event_filter : Proc(ITTAPI2*, Int32, HRESULT)
    get_event_filter : Proc(ITTAPI2*, Int32*, HRESULT)
    get_phones : Proc(ITTAPI2*, VARIANT*, HRESULT)
    enumerate_phones : Proc(ITTAPI2*, IEnumPhone*, HRESULT)
    create_empty_collection_object : Proc(ITTAPI2*, ITCollection2*, HRESULT)
  end

  ITTAPI2_GUID = LibC::GUID.new("54fbdc8c-d90f-4dad-9695-b373097f094b")
  CLSID_ITTAPI2 = "54fbdc8c-d90f-4dad-9695-b373097f094b"
  struct ITTAPI2
    lpVtbl : ITTAPI2VTbl*
  end

  struct ITMediaSupportVTbl
    query_interface : Proc(ITMediaSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITMediaSupport*, UInt32)
    release : Proc(ITMediaSupport*, UInt32)
    get_type_info_count : Proc(ITMediaSupport*, UInt32*, HRESULT)
    get_type_info : Proc(ITMediaSupport*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITMediaSupport*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITMediaSupport*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_media_types : Proc(ITMediaSupport*, Int32*, HRESULT)
    query_media_type : Proc(ITMediaSupport*, Int32, Int16*, HRESULT)
  end

  ITMediaSupport_GUID = LibC::GUID.new("b1efc384-9355-11d0-835c-00aa003ccabd")
  CLSID_ITMediaSupport = "b1efc384-9355-11d0-835c-00aa003ccabd"
  struct ITMediaSupport
    lpVtbl : ITMediaSupportVTbl*
  end

  struct ITPluggableTerminalClassInfoVTbl
    query_interface : Proc(ITPluggableTerminalClassInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPluggableTerminalClassInfo*, UInt32)
    release : Proc(ITPluggableTerminalClassInfo*, UInt32)
    get_type_info_count : Proc(ITPluggableTerminalClassInfo*, UInt32*, HRESULT)
    get_type_info : Proc(ITPluggableTerminalClassInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITPluggableTerminalClassInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITPluggableTerminalClassInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(ITPluggableTerminalClassInfo*, UInt8**, HRESULT)
    get_company : Proc(ITPluggableTerminalClassInfo*, UInt8**, HRESULT)
    get_version : Proc(ITPluggableTerminalClassInfo*, UInt8**, HRESULT)
    get_terminal_class : Proc(ITPluggableTerminalClassInfo*, UInt8**, HRESULT)
    get_clsid : Proc(ITPluggableTerminalClassInfo*, UInt8**, HRESULT)
    get_direction : Proc(ITPluggableTerminalClassInfo*, TERMINAL_DIRECTION*, HRESULT)
    get_media_types : Proc(ITPluggableTerminalClassInfo*, Int32*, HRESULT)
  end

  ITPluggableTerminalClassInfo_GUID = LibC::GUID.new("41757f4a-cf09-4b34-bc96-0a79d2390076")
  CLSID_ITPluggableTerminalClassInfo = "41757f4a-cf09-4b34-bc96-0a79d2390076"
  struct ITPluggableTerminalClassInfo
    lpVtbl : ITPluggableTerminalClassInfoVTbl*
  end

  struct ITPluggableTerminalSuperclassInfoVTbl
    query_interface : Proc(ITPluggableTerminalSuperclassInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPluggableTerminalSuperclassInfo*, UInt32)
    release : Proc(ITPluggableTerminalSuperclassInfo*, UInt32)
    get_type_info_count : Proc(ITPluggableTerminalSuperclassInfo*, UInt32*, HRESULT)
    get_type_info : Proc(ITPluggableTerminalSuperclassInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITPluggableTerminalSuperclassInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITPluggableTerminalSuperclassInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(ITPluggableTerminalSuperclassInfo*, UInt8**, HRESULT)
    get_clsid : Proc(ITPluggableTerminalSuperclassInfo*, UInt8**, HRESULT)
  end

  ITPluggableTerminalSuperclassInfo_GUID = LibC::GUID.new("6d54e42c-4625-4359-a6f7-631999107e05")
  CLSID_ITPluggableTerminalSuperclassInfo = "6d54e42c-4625-4359-a6f7-631999107e05"
  struct ITPluggableTerminalSuperclassInfo
    lpVtbl : ITPluggableTerminalSuperclassInfoVTbl*
  end

  struct ITTerminalSupportVTbl
    query_interface : Proc(ITTerminalSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTerminalSupport*, UInt32)
    release : Proc(ITTerminalSupport*, UInt32)
    get_type_info_count : Proc(ITTerminalSupport*, UInt32*, HRESULT)
    get_type_info : Proc(ITTerminalSupport*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTerminalSupport*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTerminalSupport*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_static_terminals : Proc(ITTerminalSupport*, VARIANT*, HRESULT)
    enumerate_static_terminals : Proc(ITTerminalSupport*, IEnumTerminal*, HRESULT)
    get_dynamic_terminal_classes : Proc(ITTerminalSupport*, VARIANT*, HRESULT)
    enumerate_dynamic_terminal_classes : Proc(ITTerminalSupport*, IEnumTerminalClass*, HRESULT)
    create_terminal : Proc(ITTerminalSupport*, UInt8*, Int32, TERMINAL_DIRECTION, ITTerminal*, HRESULT)
    get_default_static_terminal : Proc(ITTerminalSupport*, Int32, TERMINAL_DIRECTION, ITTerminal*, HRESULT)
  end

  ITTerminalSupport_GUID = LibC::GUID.new("b1efc385-9355-11d0-835c-00aa003ccabd")
  CLSID_ITTerminalSupport = "b1efc385-9355-11d0-835c-00aa003ccabd"
  struct ITTerminalSupport
    lpVtbl : ITTerminalSupportVTbl*
  end

  struct ITTerminalSupport2VTbl
    query_interface : Proc(ITTerminalSupport2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTerminalSupport2*, UInt32)
    release : Proc(ITTerminalSupport2*, UInt32)
    get_type_info_count : Proc(ITTerminalSupport2*, UInt32*, HRESULT)
    get_type_info : Proc(ITTerminalSupport2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTerminalSupport2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTerminalSupport2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_static_terminals : Proc(ITTerminalSupport2*, VARIANT*, HRESULT)
    enumerate_static_terminals : Proc(ITTerminalSupport2*, IEnumTerminal*, HRESULT)
    get_dynamic_terminal_classes : Proc(ITTerminalSupport2*, VARIANT*, HRESULT)
    enumerate_dynamic_terminal_classes : Proc(ITTerminalSupport2*, IEnumTerminalClass*, HRESULT)
    create_terminal : Proc(ITTerminalSupport2*, UInt8*, Int32, TERMINAL_DIRECTION, ITTerminal*, HRESULT)
    get_default_static_terminal : Proc(ITTerminalSupport2*, Int32, TERMINAL_DIRECTION, ITTerminal*, HRESULT)
    get_pluggable_superclasses : Proc(ITTerminalSupport2*, VARIANT*, HRESULT)
    enumerate_pluggable_superclasses : Proc(ITTerminalSupport2*, IEnumPluggableSuperclassInfo*, HRESULT)
    get_pluggable_terminal_classes : Proc(ITTerminalSupport2*, UInt8*, Int32, VARIANT*, HRESULT)
    enumerate_pluggable_terminal_classes : Proc(ITTerminalSupport2*, Guid, Int32, IEnumPluggableTerminalClassInfo*, HRESULT)
  end

  ITTerminalSupport2_GUID = LibC::GUID.new("f3eb39bc-1b1f-4e99-a0c0-56305c4dd591")
  CLSID_ITTerminalSupport2 = "f3eb39bc-1b1f-4e99-a0c0-56305c4dd591"
  struct ITTerminalSupport2
    lpVtbl : ITTerminalSupport2VTbl*
  end

  struct ITAddressVTbl
    query_interface : Proc(ITAddress*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAddress*, UInt32)
    release : Proc(ITAddress*, UInt32)
    get_type_info_count : Proc(ITAddress*, UInt32*, HRESULT)
    get_type_info : Proc(ITAddress*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAddress*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAddress*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_state : Proc(ITAddress*, ADDRESS_STATE*, HRESULT)
    get_address_name : Proc(ITAddress*, UInt8**, HRESULT)
    get_service_provider_name : Proc(ITAddress*, UInt8**, HRESULT)
    get_tapi_object : Proc(ITAddress*, ITTAPI*, HRESULT)
    create_call : Proc(ITAddress*, UInt8*, Int32, Int32, ITBasicCallControl*, HRESULT)
    get_calls : Proc(ITAddress*, VARIANT*, HRESULT)
    enumerate_calls : Proc(ITAddress*, IEnumCall*, HRESULT)
    get_dialable_address : Proc(ITAddress*, UInt8**, HRESULT)
    create_forward_info_object : Proc(ITAddress*, ITForwardInformation*, HRESULT)
    forward : Proc(ITAddress*, ITForwardInformation, ITBasicCallControl, HRESULT)
    get_current_forward_info : Proc(ITAddress*, ITForwardInformation*, HRESULT)
    put_message_waiting : Proc(ITAddress*, Int16, HRESULT)
    get_message_waiting : Proc(ITAddress*, Int16*, HRESULT)
    put_do_not_disturb : Proc(ITAddress*, Int16, HRESULT)
    get_do_not_disturb : Proc(ITAddress*, Int16*, HRESULT)
  end

  ITAddress_GUID = LibC::GUID.new("b1efc386-9355-11d0-835c-00aa003ccabd")
  CLSID_ITAddress = "b1efc386-9355-11d0-835c-00aa003ccabd"
  struct ITAddress
    lpVtbl : ITAddressVTbl*
  end

  struct ITAddress2VTbl
    query_interface : Proc(ITAddress2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAddress2*, UInt32)
    release : Proc(ITAddress2*, UInt32)
    get_type_info_count : Proc(ITAddress2*, UInt32*, HRESULT)
    get_type_info : Proc(ITAddress2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAddress2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAddress2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_state : Proc(ITAddress2*, ADDRESS_STATE*, HRESULT)
    get_address_name : Proc(ITAddress2*, UInt8**, HRESULT)
    get_service_provider_name : Proc(ITAddress2*, UInt8**, HRESULT)
    get_tapi_object : Proc(ITAddress2*, ITTAPI*, HRESULT)
    create_call : Proc(ITAddress2*, UInt8*, Int32, Int32, ITBasicCallControl*, HRESULT)
    get_calls : Proc(ITAddress2*, VARIANT*, HRESULT)
    enumerate_calls : Proc(ITAddress2*, IEnumCall*, HRESULT)
    get_dialable_address : Proc(ITAddress2*, UInt8**, HRESULT)
    create_forward_info_object : Proc(ITAddress2*, ITForwardInformation*, HRESULT)
    forward : Proc(ITAddress2*, ITForwardInformation, ITBasicCallControl, HRESULT)
    get_current_forward_info : Proc(ITAddress2*, ITForwardInformation*, HRESULT)
    put_message_waiting : Proc(ITAddress2*, Int16, HRESULT)
    get_message_waiting : Proc(ITAddress2*, Int16*, HRESULT)
    put_do_not_disturb : Proc(ITAddress2*, Int16, HRESULT)
    get_do_not_disturb : Proc(ITAddress2*, Int16*, HRESULT)
    get_phones : Proc(ITAddress2*, VARIANT*, HRESULT)
    enumerate_phones : Proc(ITAddress2*, IEnumPhone*, HRESULT)
    get_phone_from_terminal : Proc(ITAddress2*, ITTerminal, ITPhone*, HRESULT)
    get_preferred_phones : Proc(ITAddress2*, VARIANT*, HRESULT)
    enumerate_preferred_phones : Proc(ITAddress2*, IEnumPhone*, HRESULT)
    get_event_filter : Proc(ITAddress2*, TAPI_EVENT, Int32, Int16*, HRESULT)
    put_event_filter : Proc(ITAddress2*, TAPI_EVENT, Int32, Int16, HRESULT)
    device_specific : Proc(ITAddress2*, ITCallInfo, UInt8*, UInt32, HRESULT)
    device_specific_variant : Proc(ITAddress2*, ITCallInfo, VARIANT, HRESULT)
    negotiate_ext_version : Proc(ITAddress2*, Int32, Int32, Int32*, HRESULT)
  end

  ITAddress2_GUID = LibC::GUID.new("b0ae5d9b-be51-46c9-b0f7-dfa8a22a8bc4")
  CLSID_ITAddress2 = "b0ae5d9b-be51-46c9-b0f7-dfa8a22a8bc4"
  struct ITAddress2
    lpVtbl : ITAddress2VTbl*
  end

  struct ITAddressCapabilitiesVTbl
    query_interface : Proc(ITAddressCapabilities*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAddressCapabilities*, UInt32)
    release : Proc(ITAddressCapabilities*, UInt32)
    get_type_info_count : Proc(ITAddressCapabilities*, UInt32*, HRESULT)
    get_type_info : Proc(ITAddressCapabilities*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAddressCapabilities*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAddressCapabilities*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_address_capability : Proc(ITAddressCapabilities*, ADDRESS_CAPABILITY, Int32*, HRESULT)
    get_address_capability_string : Proc(ITAddressCapabilities*, ADDRESS_CAPABILITY_STRING, UInt8**, HRESULT)
    get_call_treatments : Proc(ITAddressCapabilities*, VARIANT*, HRESULT)
    enumerate_call_treatments : Proc(ITAddressCapabilities*, IEnumBstr*, HRESULT)
    get_completion_messages : Proc(ITAddressCapabilities*, VARIANT*, HRESULT)
    enumerate_completion_messages : Proc(ITAddressCapabilities*, IEnumBstr*, HRESULT)
    get_device_classes : Proc(ITAddressCapabilities*, VARIANT*, HRESULT)
    enumerate_device_classes : Proc(ITAddressCapabilities*, IEnumBstr*, HRESULT)
  end

  ITAddressCapabilities_GUID = LibC::GUID.new("8df232f5-821b-11d1-bb5c-00c04fb6809f")
  CLSID_ITAddressCapabilities = "8df232f5-821b-11d1-bb5c-00c04fb6809f"
  struct ITAddressCapabilities
    lpVtbl : ITAddressCapabilitiesVTbl*
  end

  struct ITPhoneVTbl
    query_interface : Proc(ITPhone*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPhone*, UInt32)
    release : Proc(ITPhone*, UInt32)
    get_type_info_count : Proc(ITPhone*, UInt32*, HRESULT)
    get_type_info : Proc(ITPhone*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITPhone*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITPhone*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    open : Proc(ITPhone*, PHONE_PRIVILEGE, HRESULT)
    close : Proc(ITPhone*, HRESULT)
    get_addresses : Proc(ITPhone*, VARIANT*, HRESULT)
    enumerate_addresses : Proc(ITPhone*, IEnumAddress*, HRESULT)
    get_phone_caps_long : Proc(ITPhone*, PHONECAPS_LONG, Int32*, HRESULT)
    get_phone_caps_string : Proc(ITPhone*, PHONECAPS_STRING, UInt8**, HRESULT)
    get_terminals : Proc(ITPhone*, ITAddress, VARIANT*, HRESULT)
    enumerate_terminals : Proc(ITPhone*, ITAddress, IEnumTerminal*, HRESULT)
    get_button_mode : Proc(ITPhone*, Int32, PHONE_BUTTON_MODE*, HRESULT)
    put_button_mode : Proc(ITPhone*, Int32, PHONE_BUTTON_MODE, HRESULT)
    get_button_function : Proc(ITPhone*, Int32, PHONE_BUTTON_FUNCTION*, HRESULT)
    put_button_function : Proc(ITPhone*, Int32, PHONE_BUTTON_FUNCTION, HRESULT)
    get_button_text : Proc(ITPhone*, Int32, UInt8**, HRESULT)
    put_button_text : Proc(ITPhone*, Int32, UInt8*, HRESULT)
    get_button_state : Proc(ITPhone*, Int32, PHONE_BUTTON_STATE*, HRESULT)
    get_hook_switch_state : Proc(ITPhone*, PHONE_HOOK_SWITCH_DEVICE, PHONE_HOOK_SWITCH_STATE*, HRESULT)
    put_hook_switch_state : Proc(ITPhone*, PHONE_HOOK_SWITCH_DEVICE, PHONE_HOOK_SWITCH_STATE, HRESULT)
    put_ring_mode : Proc(ITPhone*, Int32, HRESULT)
    get_ring_mode : Proc(ITPhone*, Int32*, HRESULT)
    put_ring_volume : Proc(ITPhone*, Int32, HRESULT)
    get_ring_volume : Proc(ITPhone*, Int32*, HRESULT)
    get_privilege : Proc(ITPhone*, PHONE_PRIVILEGE*, HRESULT)
    get_phone_caps_buffer : Proc(ITPhone*, PHONECAPS_BUFFER, UInt32*, UInt8**, HRESULT)
    get_phone_caps_buffer2 : Proc(ITPhone*, PHONECAPS_BUFFER, VARIANT*, HRESULT)
    get_lamp_mode : Proc(ITPhone*, Int32, PHONE_LAMP_MODE*, HRESULT)
    put_lamp_mode : Proc(ITPhone*, Int32, PHONE_LAMP_MODE, HRESULT)
    get_display : Proc(ITPhone*, UInt8**, HRESULT)
    set_display : Proc(ITPhone*, Int32, Int32, UInt8*, HRESULT)
    get_preferred_addresses : Proc(ITPhone*, VARIANT*, HRESULT)
    enumerate_preferred_addresses : Proc(ITPhone*, IEnumAddress*, HRESULT)
    device_specific : Proc(ITPhone*, UInt8*, UInt32, HRESULT)
    device_specific_variant : Proc(ITPhone*, VARIANT, HRESULT)
    negotiate_ext_version : Proc(ITPhone*, Int32, Int32, Int32*, HRESULT)
  end

  ITPhone_GUID = LibC::GUID.new("09d48db4-10cc-4388-9de7-a8465618975a")
  CLSID_ITPhone = "09d48db4-10cc-4388-9de7-a8465618975a"
  struct ITPhone
    lpVtbl : ITPhoneVTbl*
  end

  struct ITAutomatedPhoneControlVTbl
    query_interface : Proc(ITAutomatedPhoneControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAutomatedPhoneControl*, UInt32)
    release : Proc(ITAutomatedPhoneControl*, UInt32)
    get_type_info_count : Proc(ITAutomatedPhoneControl*, UInt32*, HRESULT)
    get_type_info : Proc(ITAutomatedPhoneControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAutomatedPhoneControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAutomatedPhoneControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_tone : Proc(ITAutomatedPhoneControl*, PHONE_TONE, Int32, HRESULT)
    stop_tone : Proc(ITAutomatedPhoneControl*, HRESULT)
    get_tone : Proc(ITAutomatedPhoneControl*, PHONE_TONE*, HRESULT)
    start_ringer : Proc(ITAutomatedPhoneControl*, Int32, Int32, HRESULT)
    stop_ringer : Proc(ITAutomatedPhoneControl*, HRESULT)
    get_ringer : Proc(ITAutomatedPhoneControl*, Int16*, HRESULT)
    put_phone_handling_enabled : Proc(ITAutomatedPhoneControl*, Int16, HRESULT)
    get_phone_handling_enabled : Proc(ITAutomatedPhoneControl*, Int16*, HRESULT)
    put_auto_end_of_number_timeout : Proc(ITAutomatedPhoneControl*, Int32, HRESULT)
    get_auto_end_of_number_timeout : Proc(ITAutomatedPhoneControl*, Int32*, HRESULT)
    put_auto_dialtone : Proc(ITAutomatedPhoneControl*, Int16, HRESULT)
    get_auto_dialtone : Proc(ITAutomatedPhoneControl*, Int16*, HRESULT)
    put_auto_stop_tones_on_on_hook : Proc(ITAutomatedPhoneControl*, Int16, HRESULT)
    get_auto_stop_tones_on_on_hook : Proc(ITAutomatedPhoneControl*, Int16*, HRESULT)
    put_auto_stop_ring_on_off_hook : Proc(ITAutomatedPhoneControl*, Int16, HRESULT)
    get_auto_stop_ring_on_off_hook : Proc(ITAutomatedPhoneControl*, Int16*, HRESULT)
    put_auto_keypad_tones : Proc(ITAutomatedPhoneControl*, Int16, HRESULT)
    get_auto_keypad_tones : Proc(ITAutomatedPhoneControl*, Int16*, HRESULT)
    put_auto_keypad_tones_minimum_duration : Proc(ITAutomatedPhoneControl*, Int32, HRESULT)
    get_auto_keypad_tones_minimum_duration : Proc(ITAutomatedPhoneControl*, Int32*, HRESULT)
    put_auto_volume_control : Proc(ITAutomatedPhoneControl*, Int16, HRESULT)
    get_auto_volume_control : Proc(ITAutomatedPhoneControl*, Int16*, HRESULT)
    put_auto_volume_control_step : Proc(ITAutomatedPhoneControl*, Int32, HRESULT)
    get_auto_volume_control_step : Proc(ITAutomatedPhoneControl*, Int32*, HRESULT)
    put_auto_volume_control_repeat_delay : Proc(ITAutomatedPhoneControl*, Int32, HRESULT)
    get_auto_volume_control_repeat_delay : Proc(ITAutomatedPhoneControl*, Int32*, HRESULT)
    put_auto_volume_control_repeat_period : Proc(ITAutomatedPhoneControl*, Int32, HRESULT)
    get_auto_volume_control_repeat_period : Proc(ITAutomatedPhoneControl*, Int32*, HRESULT)
    select_call : Proc(ITAutomatedPhoneControl*, ITCallInfo, Int16, HRESULT)
    unselect_call : Proc(ITAutomatedPhoneControl*, ITCallInfo, HRESULT)
    enumerate_selected_calls : Proc(ITAutomatedPhoneControl*, IEnumCall*, HRESULT)
    get_selected_calls : Proc(ITAutomatedPhoneControl*, VARIANT*, HRESULT)
  end

  ITAutomatedPhoneControl_GUID = LibC::GUID.new("1ee1af0e-6159-4a61-b79b-6a4ba3fc9dfc")
  CLSID_ITAutomatedPhoneControl = "1ee1af0e-6159-4a61-b79b-6a4ba3fc9dfc"
  struct ITAutomatedPhoneControl
    lpVtbl : ITAutomatedPhoneControlVTbl*
  end

  struct ITBasicCallControlVTbl
    query_interface : Proc(ITBasicCallControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITBasicCallControl*, UInt32)
    release : Proc(ITBasicCallControl*, UInt32)
    get_type_info_count : Proc(ITBasicCallControl*, UInt32*, HRESULT)
    get_type_info : Proc(ITBasicCallControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITBasicCallControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITBasicCallControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    connect : Proc(ITBasicCallControl*, Int16, HRESULT)
    answer : Proc(ITBasicCallControl*, HRESULT)
    disconnect : Proc(ITBasicCallControl*, DISCONNECT_CODE, HRESULT)
    hold : Proc(ITBasicCallControl*, Int16, HRESULT)
    handoff_direct : Proc(ITBasicCallControl*, UInt8*, HRESULT)
    handoff_indirect : Proc(ITBasicCallControl*, Int32, HRESULT)
    conference : Proc(ITBasicCallControl*, ITBasicCallControl, Int16, HRESULT)
    transfer : Proc(ITBasicCallControl*, ITBasicCallControl, Int16, HRESULT)
    blind_transfer : Proc(ITBasicCallControl*, UInt8*, HRESULT)
    swap_hold : Proc(ITBasicCallControl*, ITBasicCallControl, HRESULT)
    park_direct : Proc(ITBasicCallControl*, UInt8*, HRESULT)
    park_indirect : Proc(ITBasicCallControl*, UInt8**, HRESULT)
    unpark : Proc(ITBasicCallControl*, HRESULT)
    set_qos : Proc(ITBasicCallControl*, Int32, QOS_SERVICE_LEVEL, HRESULT)
    pickup : Proc(ITBasicCallControl*, UInt8*, HRESULT)
    dial : Proc(ITBasicCallControl*, UInt8*, HRESULT)
    finish : Proc(ITBasicCallControl*, FINISH_MODE, HRESULT)
    remove_from_conference : Proc(ITBasicCallControl*, HRESULT)
  end

  ITBasicCallControl_GUID = LibC::GUID.new("b1efc389-9355-11d0-835c-00aa003ccabd")
  CLSID_ITBasicCallControl = "b1efc389-9355-11d0-835c-00aa003ccabd"
  struct ITBasicCallControl
    lpVtbl : ITBasicCallControlVTbl*
  end

  struct ITCallInfoVTbl
    query_interface : Proc(ITCallInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallInfo*, UInt32)
    release : Proc(ITCallInfo*, UInt32)
    get_type_info_count : Proc(ITCallInfo*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_address : Proc(ITCallInfo*, ITAddress*, HRESULT)
    get_call_state : Proc(ITCallInfo*, CALL_STATE*, HRESULT)
    get_privilege : Proc(ITCallInfo*, CALL_PRIVILEGE*, HRESULT)
    get_call_hub : Proc(ITCallInfo*, ITCallHub*, HRESULT)
    get_call_info_long : Proc(ITCallInfo*, CALLINFO_LONG, Int32*, HRESULT)
    put_call_info_long : Proc(ITCallInfo*, CALLINFO_LONG, Int32, HRESULT)
    get_call_info_string : Proc(ITCallInfo*, CALLINFO_STRING, UInt8**, HRESULT)
    put_call_info_string : Proc(ITCallInfo*, CALLINFO_STRING, UInt8*, HRESULT)
    get_call_info_buffer : Proc(ITCallInfo*, CALLINFO_BUFFER, VARIANT*, HRESULT)
    put_call_info_buffer : Proc(ITCallInfo*, CALLINFO_BUFFER, VARIANT, HRESULT)
    get_call_info_buffer2 : Proc(ITCallInfo*, CALLINFO_BUFFER, UInt32*, UInt8**, HRESULT)
    set_call_info_buffer : Proc(ITCallInfo*, CALLINFO_BUFFER, UInt32, UInt8*, HRESULT)
    release_user_user_info : Proc(ITCallInfo*, HRESULT)
  end

  ITCallInfo_GUID = LibC::GUID.new("350f85d1-1227-11d3-83d4-00c04fb6809f")
  CLSID_ITCallInfo = "350f85d1-1227-11d3-83d4-00c04fb6809f"
  struct ITCallInfo
    lpVtbl : ITCallInfoVTbl*
  end

  struct ITCallInfo2VTbl
    query_interface : Proc(ITCallInfo2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallInfo2*, UInt32)
    release : Proc(ITCallInfo2*, UInt32)
    get_type_info_count : Proc(ITCallInfo2*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallInfo2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallInfo2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallInfo2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_address : Proc(ITCallInfo2*, ITAddress*, HRESULT)
    get_call_state : Proc(ITCallInfo2*, CALL_STATE*, HRESULT)
    get_privilege : Proc(ITCallInfo2*, CALL_PRIVILEGE*, HRESULT)
    get_call_hub : Proc(ITCallInfo2*, ITCallHub*, HRESULT)
    get_call_info_long : Proc(ITCallInfo2*, CALLINFO_LONG, Int32*, HRESULT)
    put_call_info_long : Proc(ITCallInfo2*, CALLINFO_LONG, Int32, HRESULT)
    get_call_info_string : Proc(ITCallInfo2*, CALLINFO_STRING, UInt8**, HRESULT)
    put_call_info_string : Proc(ITCallInfo2*, CALLINFO_STRING, UInt8*, HRESULT)
    get_call_info_buffer : Proc(ITCallInfo2*, CALLINFO_BUFFER, VARIANT*, HRESULT)
    put_call_info_buffer : Proc(ITCallInfo2*, CALLINFO_BUFFER, VARIANT, HRESULT)
    get_call_info_buffer2 : Proc(ITCallInfo2*, CALLINFO_BUFFER, UInt32*, UInt8**, HRESULT)
    set_call_info_buffer : Proc(ITCallInfo2*, CALLINFO_BUFFER, UInt32, UInt8*, HRESULT)
    release_user_user_info : Proc(ITCallInfo2*, HRESULT)
    get_event_filter : Proc(ITCallInfo2*, TAPI_EVENT, Int32, Int16*, HRESULT)
    put_event_filter : Proc(ITCallInfo2*, TAPI_EVENT, Int32, Int16, HRESULT)
  end

  ITCallInfo2_GUID = LibC::GUID.new("94d70ca6-7ab0-4daa-81ca-b8f8643faec1")
  CLSID_ITCallInfo2 = "94d70ca6-7ab0-4daa-81ca-b8f8643faec1"
  struct ITCallInfo2
    lpVtbl : ITCallInfo2VTbl*
  end

  struct ITTerminalVTbl
    query_interface : Proc(ITTerminal*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTerminal*, UInt32)
    release : Proc(ITTerminal*, UInt32)
    get_type_info_count : Proc(ITTerminal*, UInt32*, HRESULT)
    get_type_info : Proc(ITTerminal*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTerminal*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTerminal*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(ITTerminal*, UInt8**, HRESULT)
    get_state : Proc(ITTerminal*, TERMINAL_STATE*, HRESULT)
    get_terminal_type : Proc(ITTerminal*, TERMINAL_TYPE*, HRESULT)
    get_terminal_class : Proc(ITTerminal*, UInt8**, HRESULT)
    get_media_type : Proc(ITTerminal*, Int32*, HRESULT)
    get_direction : Proc(ITTerminal*, TERMINAL_DIRECTION*, HRESULT)
  end

  ITTerminal_GUID = LibC::GUID.new("b1efc38a-9355-11d0-835c-00aa003ccabd")
  CLSID_ITTerminal = "b1efc38a-9355-11d0-835c-00aa003ccabd"
  struct ITTerminal
    lpVtbl : ITTerminalVTbl*
  end

  struct ITMultiTrackTerminalVTbl
    query_interface : Proc(ITMultiTrackTerminal*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITMultiTrackTerminal*, UInt32)
    release : Proc(ITMultiTrackTerminal*, UInt32)
    get_type_info_count : Proc(ITMultiTrackTerminal*, UInt32*, HRESULT)
    get_type_info : Proc(ITMultiTrackTerminal*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITMultiTrackTerminal*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITMultiTrackTerminal*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_track_terminals : Proc(ITMultiTrackTerminal*, VARIANT*, HRESULT)
    enumerate_track_terminals : Proc(ITMultiTrackTerminal*, IEnumTerminal*, HRESULT)
    create_track_terminal : Proc(ITMultiTrackTerminal*, Int32, TERMINAL_DIRECTION, ITTerminal*, HRESULT)
    get_media_types_in_use : Proc(ITMultiTrackTerminal*, Int32*, HRESULT)
    get_directions_in_use : Proc(ITMultiTrackTerminal*, TERMINAL_DIRECTION*, HRESULT)
    remove_track_terminal : Proc(ITMultiTrackTerminal*, ITTerminal, HRESULT)
  end

  ITMultiTrackTerminal_GUID = LibC::GUID.new("fe040091-ade8-4072-95c9-bf7de8c54b44")
  CLSID_ITMultiTrackTerminal = "fe040091-ade8-4072-95c9-bf7de8c54b44"
  struct ITMultiTrackTerminal
    lpVtbl : ITMultiTrackTerminalVTbl*
  end

  struct ITFileTrackVTbl
    query_interface : Proc(ITFileTrack*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITFileTrack*, UInt32)
    release : Proc(ITFileTrack*, UInt32)
    get_type_info_count : Proc(ITFileTrack*, UInt32*, HRESULT)
    get_type_info : Proc(ITFileTrack*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITFileTrack*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITFileTrack*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_format : Proc(ITFileTrack*, AM_MEDIA_TYPE**, HRESULT)
    put_format : Proc(ITFileTrack*, AM_MEDIA_TYPE*, HRESULT)
    get_controlling_terminal : Proc(ITFileTrack*, ITTerminal*, HRESULT)
    get_audio_format_for_scripting : Proc(ITFileTrack*, ITScriptableAudioFormat*, HRESULT)
    put_audio_format_for_scripting : Proc(ITFileTrack*, ITScriptableAudioFormat, HRESULT)
    get_empty_audio_format_for_scripting : Proc(ITFileTrack*, ITScriptableAudioFormat*, HRESULT)
  end

  ITFileTrack_GUID = LibC::GUID.new("31ca6ea9-c08a-4bea-8811-8e9c1ba3ea3a")
  CLSID_ITFileTrack = "31ca6ea9-c08a-4bea-8811-8e9c1ba3ea3a"
  struct ITFileTrack
    lpVtbl : ITFileTrackVTbl*
  end

  struct ITMediaPlaybackVTbl
    query_interface : Proc(ITMediaPlayback*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITMediaPlayback*, UInt32)
    release : Proc(ITMediaPlayback*, UInt32)
    get_type_info_count : Proc(ITMediaPlayback*, UInt32*, HRESULT)
    get_type_info : Proc(ITMediaPlayback*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITMediaPlayback*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITMediaPlayback*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_play_list : Proc(ITMediaPlayback*, VARIANT, HRESULT)
    get_play_list : Proc(ITMediaPlayback*, VARIANT*, HRESULT)
  end

  ITMediaPlayback_GUID = LibC::GUID.new("627e8ae6-ae4c-4a69-bb63-2ad625404b77")
  CLSID_ITMediaPlayback = "627e8ae6-ae4c-4a69-bb63-2ad625404b77"
  struct ITMediaPlayback
    lpVtbl : ITMediaPlaybackVTbl*
  end

  struct ITMediaRecordVTbl
    query_interface : Proc(ITMediaRecord*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITMediaRecord*, UInt32)
    release : Proc(ITMediaRecord*, UInt32)
    get_type_info_count : Proc(ITMediaRecord*, UInt32*, HRESULT)
    get_type_info : Proc(ITMediaRecord*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITMediaRecord*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITMediaRecord*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_file_name : Proc(ITMediaRecord*, UInt8*, HRESULT)
    get_file_name : Proc(ITMediaRecord*, UInt8**, HRESULT)
  end

  ITMediaRecord_GUID = LibC::GUID.new("f5dd4592-5476-4cc1-9d4d-fad3eefe7db2")
  CLSID_ITMediaRecord = "f5dd4592-5476-4cc1-9d4d-fad3eefe7db2"
  struct ITMediaRecord
    lpVtbl : ITMediaRecordVTbl*
  end

  struct ITMediaControlVTbl
    query_interface : Proc(ITMediaControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITMediaControl*, UInt32)
    release : Proc(ITMediaControl*, UInt32)
    get_type_info_count : Proc(ITMediaControl*, UInt32*, HRESULT)
    get_type_info : Proc(ITMediaControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITMediaControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITMediaControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start : Proc(ITMediaControl*, HRESULT)
    stop : Proc(ITMediaControl*, HRESULT)
    pause : Proc(ITMediaControl*, HRESULT)
    get_media_state : Proc(ITMediaControl*, TERMINAL_MEDIA_STATE*, HRESULT)
  end

  ITMediaControl_GUID = LibC::GUID.new("c445dde8-5199-4bc7-9807-5ffb92e42e09")
  CLSID_ITMediaControl = "c445dde8-5199-4bc7-9807-5ffb92e42e09"
  struct ITMediaControl
    lpVtbl : ITMediaControlVTbl*
  end

  struct ITBasicAudioTerminalVTbl
    query_interface : Proc(ITBasicAudioTerminal*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITBasicAudioTerminal*, UInt32)
    release : Proc(ITBasicAudioTerminal*, UInt32)
    get_type_info_count : Proc(ITBasicAudioTerminal*, UInt32*, HRESULT)
    get_type_info : Proc(ITBasicAudioTerminal*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITBasicAudioTerminal*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITBasicAudioTerminal*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_volume : Proc(ITBasicAudioTerminal*, Int32, HRESULT)
    get_volume : Proc(ITBasicAudioTerminal*, Int32*, HRESULT)
    put_balance : Proc(ITBasicAudioTerminal*, Int32, HRESULT)
    get_balance : Proc(ITBasicAudioTerminal*, Int32*, HRESULT)
  end

  ITBasicAudioTerminal_GUID = LibC::GUID.new("b1efc38d-9355-11d0-835c-00aa003ccabd")
  CLSID_ITBasicAudioTerminal = "b1efc38d-9355-11d0-835c-00aa003ccabd"
  struct ITBasicAudioTerminal
    lpVtbl : ITBasicAudioTerminalVTbl*
  end

  struct ITStaticAudioTerminalVTbl
    query_interface : Proc(ITStaticAudioTerminal*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITStaticAudioTerminal*, UInt32)
    release : Proc(ITStaticAudioTerminal*, UInt32)
    get_type_info_count : Proc(ITStaticAudioTerminal*, UInt32*, HRESULT)
    get_type_info : Proc(ITStaticAudioTerminal*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITStaticAudioTerminal*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITStaticAudioTerminal*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_wave_id : Proc(ITStaticAudioTerminal*, Int32*, HRESULT)
  end

  ITStaticAudioTerminal_GUID = LibC::GUID.new("a86b7871-d14c-48e6-922e-a8d15f984800")
  CLSID_ITStaticAudioTerminal = "a86b7871-d14c-48e6-922e-a8d15f984800"
  struct ITStaticAudioTerminal
    lpVtbl : ITStaticAudioTerminalVTbl*
  end

  struct ITCallHubVTbl
    query_interface : Proc(ITCallHub*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallHub*, UInt32)
    release : Proc(ITCallHub*, UInt32)
    get_type_info_count : Proc(ITCallHub*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallHub*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallHub*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallHub*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    clear : Proc(ITCallHub*, HRESULT)
    enumerate_calls : Proc(ITCallHub*, IEnumCall*, HRESULT)
    get_calls : Proc(ITCallHub*, VARIANT*, HRESULT)
    get_num_calls : Proc(ITCallHub*, Int32*, HRESULT)
    get_state : Proc(ITCallHub*, CALLHUB_STATE*, HRESULT)
  end

  ITCallHub_GUID = LibC::GUID.new("a3c1544e-5b92-11d1-8f4e-00c04fb6809f")
  CLSID_ITCallHub = "a3c1544e-5b92-11d1-8f4e-00c04fb6809f"
  struct ITCallHub
    lpVtbl : ITCallHubVTbl*
  end

  struct ITLegacyAddressMediaControlVTbl
    query_interface : Proc(ITLegacyAddressMediaControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITLegacyAddressMediaControl*, UInt32)
    release : Proc(ITLegacyAddressMediaControl*, UInt32)
    get_id : Proc(ITLegacyAddressMediaControl*, UInt8*, UInt32*, UInt8**, HRESULT)
    get_dev_config : Proc(ITLegacyAddressMediaControl*, UInt8*, UInt32*, UInt8**, HRESULT)
    set_dev_config : Proc(ITLegacyAddressMediaControl*, UInt8*, UInt32, UInt8*, HRESULT)
  end

  ITLegacyAddressMediaControl_GUID = LibC::GUID.new("ab493640-4c0b-11d2-a046-00c04fb6809f")
  CLSID_ITLegacyAddressMediaControl = "ab493640-4c0b-11d2-a046-00c04fb6809f"
  struct ITLegacyAddressMediaControl
    lpVtbl : ITLegacyAddressMediaControlVTbl*
  end

  struct ITPrivateEventVTbl
    query_interface : Proc(ITPrivateEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPrivateEvent*, UInt32)
    release : Proc(ITPrivateEvent*, UInt32)
    get_type_info_count : Proc(ITPrivateEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITPrivateEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITPrivateEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITPrivateEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_address : Proc(ITPrivateEvent*, ITAddress*, HRESULT)
    get_call : Proc(ITPrivateEvent*, ITCallInfo*, HRESULT)
    get_call_hub : Proc(ITPrivateEvent*, ITCallHub*, HRESULT)
    get_event_code : Proc(ITPrivateEvent*, Int32*, HRESULT)
    get_event_interface : Proc(ITPrivateEvent*, IDispatch*, HRESULT)
  end

  ITPrivateEvent_GUID = LibC::GUID.new("0e269cd0-10d4-4121-9c22-9c85d625650d")
  CLSID_ITPrivateEvent = "0e269cd0-10d4-4121-9c22-9c85d625650d"
  struct ITPrivateEvent
    lpVtbl : ITPrivateEventVTbl*
  end

  struct ITLegacyAddressMediaControl2VTbl
    query_interface : Proc(ITLegacyAddressMediaControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITLegacyAddressMediaControl2*, UInt32)
    release : Proc(ITLegacyAddressMediaControl2*, UInt32)
    get_id : Proc(ITLegacyAddressMediaControl2*, UInt8*, UInt32*, UInt8**, HRESULT)
    get_dev_config : Proc(ITLegacyAddressMediaControl2*, UInt8*, UInt32*, UInt8**, HRESULT)
    set_dev_config : Proc(ITLegacyAddressMediaControl2*, UInt8*, UInt32, UInt8*, HRESULT)
    config_dialog : Proc(ITLegacyAddressMediaControl2*, LibC::HANDLE, UInt8*, HRESULT)
    config_dialog_edit : Proc(ITLegacyAddressMediaControl2*, LibC::HANDLE, UInt8*, UInt32, UInt8*, UInt32*, UInt8**, HRESULT)
  end

  ITLegacyAddressMediaControl2_GUID = LibC::GUID.new("b0ee512b-a531-409e-9dd9-4099fe86c738")
  CLSID_ITLegacyAddressMediaControl2 = "b0ee512b-a531-409e-9dd9-4099fe86c738"
  struct ITLegacyAddressMediaControl2
    lpVtbl : ITLegacyAddressMediaControl2VTbl*
  end

  struct ITLegacyCallMediaControlVTbl
    query_interface : Proc(ITLegacyCallMediaControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITLegacyCallMediaControl*, UInt32)
    release : Proc(ITLegacyCallMediaControl*, UInt32)
    get_type_info_count : Proc(ITLegacyCallMediaControl*, UInt32*, HRESULT)
    get_type_info : Proc(ITLegacyCallMediaControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITLegacyCallMediaControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITLegacyCallMediaControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    detect_digits : Proc(ITLegacyCallMediaControl*, Int32, HRESULT)
    generate_digits : Proc(ITLegacyCallMediaControl*, UInt8*, Int32, HRESULT)
    get_id : Proc(ITLegacyCallMediaControl*, UInt8*, UInt32*, UInt8**, HRESULT)
    set_media_type : Proc(ITLegacyCallMediaControl*, Int32, HRESULT)
    monitor_media : Proc(ITLegacyCallMediaControl*, Int32, HRESULT)
  end

  ITLegacyCallMediaControl_GUID = LibC::GUID.new("d624582f-cc23-4436-b8a5-47c625c8045d")
  CLSID_ITLegacyCallMediaControl = "d624582f-cc23-4436-b8a5-47c625c8045d"
  struct ITLegacyCallMediaControl
    lpVtbl : ITLegacyCallMediaControlVTbl*
  end

  struct ITLegacyCallMediaControl2VTbl
    query_interface : Proc(ITLegacyCallMediaControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITLegacyCallMediaControl2*, UInt32)
    release : Proc(ITLegacyCallMediaControl2*, UInt32)
    get_type_info_count : Proc(ITLegacyCallMediaControl2*, UInt32*, HRESULT)
    get_type_info : Proc(ITLegacyCallMediaControl2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITLegacyCallMediaControl2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITLegacyCallMediaControl2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    detect_digits : Proc(ITLegacyCallMediaControl2*, Int32, HRESULT)
    generate_digits : Proc(ITLegacyCallMediaControl2*, UInt8*, Int32, HRESULT)
    get_id : Proc(ITLegacyCallMediaControl2*, UInt8*, UInt32*, UInt8**, HRESULT)
    set_media_type : Proc(ITLegacyCallMediaControl2*, Int32, HRESULT)
    monitor_media : Proc(ITLegacyCallMediaControl2*, Int32, HRESULT)
    generate_digits2 : Proc(ITLegacyCallMediaControl2*, UInt8*, Int32, Int32, HRESULT)
    gather_digits : Proc(ITLegacyCallMediaControl2*, Int32, Int32, UInt8*, Int32, Int32, HRESULT)
    detect_tones : Proc(ITLegacyCallMediaControl2*, TAPI_DETECTTONE*, Int32, HRESULT)
    detect_tones_by_collection : Proc(ITLegacyCallMediaControl2*, ITCollection2, HRESULT)
    generate_tone : Proc(ITLegacyCallMediaControl2*, TAPI_TONEMODE, Int32, HRESULT)
    generate_custom_tones : Proc(ITLegacyCallMediaControl2*, TAPI_CUSTOMTONE*, Int32, Int32, HRESULT)
    generate_custom_tones_by_collection : Proc(ITLegacyCallMediaControl2*, ITCollection2, Int32, HRESULT)
    create_detect_tone_object : Proc(ITLegacyCallMediaControl2*, ITDetectTone*, HRESULT)
    create_custom_tone_object : Proc(ITLegacyCallMediaControl2*, ITCustomTone*, HRESULT)
    get_id_as_variant : Proc(ITLegacyCallMediaControl2*, UInt8*, VARIANT*, HRESULT)
  end

  ITLegacyCallMediaControl2_GUID = LibC::GUID.new("57ca332d-7bc2-44f1-a60c-936fe8d7ce73")
  CLSID_ITLegacyCallMediaControl2 = "57ca332d-7bc2-44f1-a60c-936fe8d7ce73"
  struct ITLegacyCallMediaControl2
    lpVtbl : ITLegacyCallMediaControl2VTbl*
  end

  struct ITDetectToneVTbl
    query_interface : Proc(ITDetectTone*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDetectTone*, UInt32)
    release : Proc(ITDetectTone*, UInt32)
    get_type_info_count : Proc(ITDetectTone*, UInt32*, HRESULT)
    get_type_info : Proc(ITDetectTone*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDetectTone*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDetectTone*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_app_specific : Proc(ITDetectTone*, Int32*, HRESULT)
    put_app_specific : Proc(ITDetectTone*, Int32, HRESULT)
    get_duration : Proc(ITDetectTone*, Int32*, HRESULT)
    put_duration : Proc(ITDetectTone*, Int32, HRESULT)
    get_frequency : Proc(ITDetectTone*, Int32, Int32*, HRESULT)
    put_frequency : Proc(ITDetectTone*, Int32, Int32, HRESULT)
  end

  ITDetectTone_GUID = LibC::GUID.new("961f79bd-3097-49df-a1d6-909b77e89ca0")
  CLSID_ITDetectTone = "961f79bd-3097-49df-a1d6-909b77e89ca0"
  struct ITDetectTone
    lpVtbl : ITDetectToneVTbl*
  end

  struct ITCustomToneVTbl
    query_interface : Proc(ITCustomTone*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCustomTone*, UInt32)
    release : Proc(ITCustomTone*, UInt32)
    get_type_info_count : Proc(ITCustomTone*, UInt32*, HRESULT)
    get_type_info : Proc(ITCustomTone*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCustomTone*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCustomTone*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_frequency : Proc(ITCustomTone*, Int32*, HRESULT)
    put_frequency : Proc(ITCustomTone*, Int32, HRESULT)
    get_cadence_on : Proc(ITCustomTone*, Int32*, HRESULT)
    put_cadence_on : Proc(ITCustomTone*, Int32, HRESULT)
    get_cadence_off : Proc(ITCustomTone*, Int32*, HRESULT)
    put_cadence_off : Proc(ITCustomTone*, Int32, HRESULT)
    get_volume : Proc(ITCustomTone*, Int32*, HRESULT)
    put_volume : Proc(ITCustomTone*, Int32, HRESULT)
  end

  ITCustomTone_GUID = LibC::GUID.new("357ad764-b3c6-4b2a-8fa5-0722827a9254")
  CLSID_ITCustomTone = "357ad764-b3c6-4b2a-8fa5-0722827a9254"
  struct ITCustomTone
    lpVtbl : ITCustomToneVTbl*
  end

  struct IEnumPhoneVTbl
    query_interface : Proc(IEnumPhone*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumPhone*, UInt32)
    release : Proc(IEnumPhone*, UInt32)
    next : Proc(IEnumPhone*, UInt32, ITPhone*, UInt32*, HRESULT)
    reset : Proc(IEnumPhone*, HRESULT)
    skip : Proc(IEnumPhone*, UInt32, HRESULT)
    clone : Proc(IEnumPhone*, IEnumPhone*, HRESULT)
  end

  IEnumPhone_GUID = LibC::GUID.new("f15b7669-4780-4595-8c89-fb369c8cf7aa")
  CLSID_IEnumPhone = "f15b7669-4780-4595-8c89-fb369c8cf7aa"
  struct IEnumPhone
    lpVtbl : IEnumPhoneVTbl*
  end

  struct IEnumTerminalVTbl
    query_interface : Proc(IEnumTerminal*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumTerminal*, UInt32)
    release : Proc(IEnumTerminal*, UInt32)
    next : Proc(IEnumTerminal*, UInt32, ITTerminal*, UInt32*, HRESULT)
    reset : Proc(IEnumTerminal*, HRESULT)
    skip : Proc(IEnumTerminal*, UInt32, HRESULT)
    clone : Proc(IEnumTerminal*, IEnumTerminal*, HRESULT)
  end

  IEnumTerminal_GUID = LibC::GUID.new("ae269cf4-935e-11d0-835c-00aa003ccabd")
  CLSID_IEnumTerminal = "ae269cf4-935e-11d0-835c-00aa003ccabd"
  struct IEnumTerminal
    lpVtbl : IEnumTerminalVTbl*
  end

  struct IEnumTerminalClassVTbl
    query_interface : Proc(IEnumTerminalClass*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumTerminalClass*, UInt32)
    release : Proc(IEnumTerminalClass*, UInt32)
    next : Proc(IEnumTerminalClass*, UInt32, Guid*, UInt32*, HRESULT)
    reset : Proc(IEnumTerminalClass*, HRESULT)
    skip : Proc(IEnumTerminalClass*, UInt32, HRESULT)
    clone : Proc(IEnumTerminalClass*, IEnumTerminalClass*, HRESULT)
  end

  IEnumTerminalClass_GUID = LibC::GUID.new("ae269cf5-935e-11d0-835c-00aa003ccabd")
  CLSID_IEnumTerminalClass = "ae269cf5-935e-11d0-835c-00aa003ccabd"
  struct IEnumTerminalClass
    lpVtbl : IEnumTerminalClassVTbl*
  end

  struct IEnumCallVTbl
    query_interface : Proc(IEnumCall*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumCall*, UInt32)
    release : Proc(IEnumCall*, UInt32)
    next : Proc(IEnumCall*, UInt32, ITCallInfo*, UInt32*, HRESULT)
    reset : Proc(IEnumCall*, HRESULT)
    skip : Proc(IEnumCall*, UInt32, HRESULT)
    clone : Proc(IEnumCall*, IEnumCall*, HRESULT)
  end

  IEnumCall_GUID = LibC::GUID.new("ae269cf6-935e-11d0-835c-00aa003ccabd")
  CLSID_IEnumCall = "ae269cf6-935e-11d0-835c-00aa003ccabd"
  struct IEnumCall
    lpVtbl : IEnumCallVTbl*
  end

  struct IEnumAddressVTbl
    query_interface : Proc(IEnumAddress*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumAddress*, UInt32)
    release : Proc(IEnumAddress*, UInt32)
    next : Proc(IEnumAddress*, UInt32, ITAddress*, UInt32*, HRESULT)
    reset : Proc(IEnumAddress*, HRESULT)
    skip : Proc(IEnumAddress*, UInt32, HRESULT)
    clone : Proc(IEnumAddress*, IEnumAddress*, HRESULT)
  end

  IEnumAddress_GUID = LibC::GUID.new("1666fca1-9363-11d0-835c-00aa003ccabd")
  CLSID_IEnumAddress = "1666fca1-9363-11d0-835c-00aa003ccabd"
  struct IEnumAddress
    lpVtbl : IEnumAddressVTbl*
  end

  struct IEnumCallHubVTbl
    query_interface : Proc(IEnumCallHub*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumCallHub*, UInt32)
    release : Proc(IEnumCallHub*, UInt32)
    next : Proc(IEnumCallHub*, UInt32, ITCallHub*, UInt32*, HRESULT)
    reset : Proc(IEnumCallHub*, HRESULT)
    skip : Proc(IEnumCallHub*, UInt32, HRESULT)
    clone : Proc(IEnumCallHub*, IEnumCallHub*, HRESULT)
  end

  IEnumCallHub_GUID = LibC::GUID.new("a3c15450-5b92-11d1-8f4e-00c04fb6809f")
  CLSID_IEnumCallHub = "a3c15450-5b92-11d1-8f4e-00c04fb6809f"
  struct IEnumCallHub
    lpVtbl : IEnumCallHubVTbl*
  end

  struct IEnumBstrVTbl
    query_interface : Proc(IEnumBstr*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumBstr*, UInt32)
    release : Proc(IEnumBstr*, UInt32)
    next : Proc(IEnumBstr*, UInt32, UInt8**, UInt32*, HRESULT)
    reset : Proc(IEnumBstr*, HRESULT)
    skip : Proc(IEnumBstr*, UInt32, HRESULT)
    clone : Proc(IEnumBstr*, IEnumBstr*, HRESULT)
  end

  IEnumBstr_GUID = LibC::GUID.new("35372049-0bc6-11d2-a033-00c04fb6809f")
  CLSID_IEnumBstr = "35372049-0bc6-11d2-a033-00c04fb6809f"
  struct IEnumBstr
    lpVtbl : IEnumBstrVTbl*
  end

  struct IEnumPluggableTerminalClassInfoVTbl
    query_interface : Proc(IEnumPluggableTerminalClassInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumPluggableTerminalClassInfo*, UInt32)
    release : Proc(IEnumPluggableTerminalClassInfo*, UInt32)
    next : Proc(IEnumPluggableTerminalClassInfo*, UInt32, ITPluggableTerminalClassInfo*, UInt32*, HRESULT)
    reset : Proc(IEnumPluggableTerminalClassInfo*, HRESULT)
    skip : Proc(IEnumPluggableTerminalClassInfo*, UInt32, HRESULT)
    clone : Proc(IEnumPluggableTerminalClassInfo*, IEnumPluggableTerminalClassInfo*, HRESULT)
  end

  IEnumPluggableTerminalClassInfo_GUID = LibC::GUID.new("4567450c-dbee-4e3f-aaf5-37bf9ebf5e29")
  CLSID_IEnumPluggableTerminalClassInfo = "4567450c-dbee-4e3f-aaf5-37bf9ebf5e29"
  struct IEnumPluggableTerminalClassInfo
    lpVtbl : IEnumPluggableTerminalClassInfoVTbl*
  end

  struct IEnumPluggableSuperclassInfoVTbl
    query_interface : Proc(IEnumPluggableSuperclassInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumPluggableSuperclassInfo*, UInt32)
    release : Proc(IEnumPluggableSuperclassInfo*, UInt32)
    next : Proc(IEnumPluggableSuperclassInfo*, UInt32, ITPluggableTerminalSuperclassInfo*, UInt32*, HRESULT)
    reset : Proc(IEnumPluggableSuperclassInfo*, HRESULT)
    skip : Proc(IEnumPluggableSuperclassInfo*, UInt32, HRESULT)
    clone : Proc(IEnumPluggableSuperclassInfo*, IEnumPluggableSuperclassInfo*, HRESULT)
  end

  IEnumPluggableSuperclassInfo_GUID = LibC::GUID.new("e9586a80-89e6-4cff-931d-478d5751f4c0")
  CLSID_IEnumPluggableSuperclassInfo = "e9586a80-89e6-4cff-931d-478d5751f4c0"
  struct IEnumPluggableSuperclassInfo
    lpVtbl : IEnumPluggableSuperclassInfoVTbl*
  end

  struct ITPhoneEventVTbl
    query_interface : Proc(ITPhoneEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPhoneEvent*, UInt32)
    release : Proc(ITPhoneEvent*, UInt32)
    get_type_info_count : Proc(ITPhoneEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITPhoneEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITPhoneEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITPhoneEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_phone : Proc(ITPhoneEvent*, ITPhone*, HRESULT)
    get_event : Proc(ITPhoneEvent*, PHONE_EVENT*, HRESULT)
    get_button_state : Proc(ITPhoneEvent*, PHONE_BUTTON_STATE*, HRESULT)
    get_hook_switch_state : Proc(ITPhoneEvent*, PHONE_HOOK_SWITCH_STATE*, HRESULT)
    get_hook_switch_device : Proc(ITPhoneEvent*, PHONE_HOOK_SWITCH_DEVICE*, HRESULT)
    get_ring_mode : Proc(ITPhoneEvent*, Int32*, HRESULT)
    get_button_lamp_id : Proc(ITPhoneEvent*, Int32*, HRESULT)
    get_number_gathered : Proc(ITPhoneEvent*, UInt8**, HRESULT)
    get_call : Proc(ITPhoneEvent*, ITCallInfo*, HRESULT)
  end

  ITPhoneEvent_GUID = LibC::GUID.new("8f942dd8-64ed-4aaf-a77d-b23db0837ead")
  CLSID_ITPhoneEvent = "8f942dd8-64ed-4aaf-a77d-b23db0837ead"
  struct ITPhoneEvent
    lpVtbl : ITPhoneEventVTbl*
  end

  struct ITCallStateEventVTbl
    query_interface : Proc(ITCallStateEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallStateEvent*, UInt32)
    release : Proc(ITCallStateEvent*, UInt32)
    get_type_info_count : Proc(ITCallStateEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallStateEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallStateEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallStateEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITCallStateEvent*, ITCallInfo*, HRESULT)
    get_state : Proc(ITCallStateEvent*, CALL_STATE*, HRESULT)
    get_cause : Proc(ITCallStateEvent*, CALL_STATE_EVENT_CAUSE*, HRESULT)
    get_callback_instance : Proc(ITCallStateEvent*, Int32*, HRESULT)
  end

  ITCallStateEvent_GUID = LibC::GUID.new("62f47097-95c9-11d0-835d-00aa003ccabd")
  CLSID_ITCallStateEvent = "62f47097-95c9-11d0-835d-00aa003ccabd"
  struct ITCallStateEvent
    lpVtbl : ITCallStateEventVTbl*
  end

  struct ITPhoneDeviceSpecificEventVTbl
    query_interface : Proc(ITPhoneDeviceSpecificEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPhoneDeviceSpecificEvent*, UInt32)
    release : Proc(ITPhoneDeviceSpecificEvent*, UInt32)
    get_type_info_count : Proc(ITPhoneDeviceSpecificEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITPhoneDeviceSpecificEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITPhoneDeviceSpecificEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITPhoneDeviceSpecificEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_phone : Proc(ITPhoneDeviceSpecificEvent*, ITPhone*, HRESULT)
    get_l_param1 : Proc(ITPhoneDeviceSpecificEvent*, Int32*, HRESULT)
    get_l_param2 : Proc(ITPhoneDeviceSpecificEvent*, Int32*, HRESULT)
    get_l_param3 : Proc(ITPhoneDeviceSpecificEvent*, Int32*, HRESULT)
  end

  ITPhoneDeviceSpecificEvent_GUID = LibC::GUID.new("63ffb2a6-872b-4cd3-a501-326e8fb40af7")
  CLSID_ITPhoneDeviceSpecificEvent = "63ffb2a6-872b-4cd3-a501-326e8fb40af7"
  struct ITPhoneDeviceSpecificEvent
    lpVtbl : ITPhoneDeviceSpecificEventVTbl*
  end

  struct ITCallMediaEventVTbl
    query_interface : Proc(ITCallMediaEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallMediaEvent*, UInt32)
    release : Proc(ITCallMediaEvent*, UInt32)
    get_type_info_count : Proc(ITCallMediaEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallMediaEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallMediaEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallMediaEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITCallMediaEvent*, ITCallInfo*, HRESULT)
    get_event : Proc(ITCallMediaEvent*, CALL_MEDIA_EVENT*, HRESULT)
    get_error : Proc(ITCallMediaEvent*, HRESULT*, HRESULT)
    get_terminal : Proc(ITCallMediaEvent*, ITTerminal*, HRESULT)
    get_stream : Proc(ITCallMediaEvent*, ITStream*, HRESULT)
    get_cause : Proc(ITCallMediaEvent*, CALL_MEDIA_EVENT_CAUSE*, HRESULT)
  end

  ITCallMediaEvent_GUID = LibC::GUID.new("ff36b87f-ec3a-11d0-8ee4-00c04fb6809f")
  CLSID_ITCallMediaEvent = "ff36b87f-ec3a-11d0-8ee4-00c04fb6809f"
  struct ITCallMediaEvent
    lpVtbl : ITCallMediaEventVTbl*
  end

  struct ITDigitDetectionEventVTbl
    query_interface : Proc(ITDigitDetectionEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDigitDetectionEvent*, UInt32)
    release : Proc(ITDigitDetectionEvent*, UInt32)
    get_type_info_count : Proc(ITDigitDetectionEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITDigitDetectionEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDigitDetectionEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDigitDetectionEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITDigitDetectionEvent*, ITCallInfo*, HRESULT)
    get_digit : Proc(ITDigitDetectionEvent*, UInt8*, HRESULT)
    get_digit_mode : Proc(ITDigitDetectionEvent*, Int32*, HRESULT)
    get_tick_count : Proc(ITDigitDetectionEvent*, Int32*, HRESULT)
    get_callback_instance : Proc(ITDigitDetectionEvent*, Int32*, HRESULT)
  end

  ITDigitDetectionEvent_GUID = LibC::GUID.new("80d3bfac-57d9-11d2-a04a-00c04fb6809f")
  CLSID_ITDigitDetectionEvent = "80d3bfac-57d9-11d2-a04a-00c04fb6809f"
  struct ITDigitDetectionEvent
    lpVtbl : ITDigitDetectionEventVTbl*
  end

  struct ITDigitGenerationEventVTbl
    query_interface : Proc(ITDigitGenerationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDigitGenerationEvent*, UInt32)
    release : Proc(ITDigitGenerationEvent*, UInt32)
    get_type_info_count : Proc(ITDigitGenerationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITDigitGenerationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDigitGenerationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDigitGenerationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITDigitGenerationEvent*, ITCallInfo*, HRESULT)
    get_generation_termination : Proc(ITDigitGenerationEvent*, Int32*, HRESULT)
    get_tick_count : Proc(ITDigitGenerationEvent*, Int32*, HRESULT)
    get_callback_instance : Proc(ITDigitGenerationEvent*, Int32*, HRESULT)
  end

  ITDigitGenerationEvent_GUID = LibC::GUID.new("80d3bfad-57d9-11d2-a04a-00c04fb6809f")
  CLSID_ITDigitGenerationEvent = "80d3bfad-57d9-11d2-a04a-00c04fb6809f"
  struct ITDigitGenerationEvent
    lpVtbl : ITDigitGenerationEventVTbl*
  end

  struct ITDigitsGatheredEventVTbl
    query_interface : Proc(ITDigitsGatheredEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDigitsGatheredEvent*, UInt32)
    release : Proc(ITDigitsGatheredEvent*, UInt32)
    get_type_info_count : Proc(ITDigitsGatheredEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITDigitsGatheredEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDigitsGatheredEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDigitsGatheredEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITDigitsGatheredEvent*, ITCallInfo*, HRESULT)
    get_digits : Proc(ITDigitsGatheredEvent*, UInt8**, HRESULT)
    get_gather_termination : Proc(ITDigitsGatheredEvent*, TAPI_GATHERTERM*, HRESULT)
    get_tick_count : Proc(ITDigitsGatheredEvent*, Int32*, HRESULT)
    get_callback_instance : Proc(ITDigitsGatheredEvent*, Int32*, HRESULT)
  end

  ITDigitsGatheredEvent_GUID = LibC::GUID.new("e52ec4c1-cba3-441a-9e6a-93cb909e9724")
  CLSID_ITDigitsGatheredEvent = "e52ec4c1-cba3-441a-9e6a-93cb909e9724"
  struct ITDigitsGatheredEvent
    lpVtbl : ITDigitsGatheredEventVTbl*
  end

  struct ITToneDetectionEventVTbl
    query_interface : Proc(ITToneDetectionEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITToneDetectionEvent*, UInt32)
    release : Proc(ITToneDetectionEvent*, UInt32)
    get_type_info_count : Proc(ITToneDetectionEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITToneDetectionEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITToneDetectionEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITToneDetectionEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITToneDetectionEvent*, ITCallInfo*, HRESULT)
    get_app_specific : Proc(ITToneDetectionEvent*, Int32*, HRESULT)
    get_tick_count : Proc(ITToneDetectionEvent*, Int32*, HRESULT)
    get_callback_instance : Proc(ITToneDetectionEvent*, Int32*, HRESULT)
  end

  ITToneDetectionEvent_GUID = LibC::GUID.new("407e0faf-d047-4753-b0c6-8e060373fecd")
  CLSID_ITToneDetectionEvent = "407e0faf-d047-4753-b0c6-8e060373fecd"
  struct ITToneDetectionEvent
    lpVtbl : ITToneDetectionEventVTbl*
  end

  struct ITTAPIObjectEventVTbl
    query_interface : Proc(ITTAPIObjectEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTAPIObjectEvent*, UInt32)
    release : Proc(ITTAPIObjectEvent*, UInt32)
    get_type_info_count : Proc(ITTAPIObjectEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITTAPIObjectEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTAPIObjectEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTAPIObjectEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tapi_object : Proc(ITTAPIObjectEvent*, ITTAPI*, HRESULT)
    get_event : Proc(ITTAPIObjectEvent*, TAPIOBJECT_EVENT*, HRESULT)
    get_address : Proc(ITTAPIObjectEvent*, ITAddress*, HRESULT)
    get_callback_instance : Proc(ITTAPIObjectEvent*, Int32*, HRESULT)
  end

  ITTAPIObjectEvent_GUID = LibC::GUID.new("f4854d48-937a-11d1-bb58-00c04fb6809f")
  CLSID_ITTAPIObjectEvent = "f4854d48-937a-11d1-bb58-00c04fb6809f"
  struct ITTAPIObjectEvent
    lpVtbl : ITTAPIObjectEventVTbl*
  end

  struct ITTAPIObjectEvent2VTbl
    query_interface : Proc(ITTAPIObjectEvent2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTAPIObjectEvent2*, UInt32)
    release : Proc(ITTAPIObjectEvent2*, UInt32)
    get_type_info_count : Proc(ITTAPIObjectEvent2*, UInt32*, HRESULT)
    get_type_info : Proc(ITTAPIObjectEvent2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTAPIObjectEvent2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTAPIObjectEvent2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tapi_object : Proc(ITTAPIObjectEvent2*, ITTAPI*, HRESULT)
    get_event : Proc(ITTAPIObjectEvent2*, TAPIOBJECT_EVENT*, HRESULT)
    get_address : Proc(ITTAPIObjectEvent2*, ITAddress*, HRESULT)
    get_callback_instance : Proc(ITTAPIObjectEvent2*, Int32*, HRESULT)
    get_phone : Proc(ITTAPIObjectEvent2*, ITPhone*, HRESULT)
  end

  ITTAPIObjectEvent2_GUID = LibC::GUID.new("359dda6e-68ce-4383-bf0b-169133c41b46")
  CLSID_ITTAPIObjectEvent2 = "359dda6e-68ce-4383-bf0b-169133c41b46"
  struct ITTAPIObjectEvent2
    lpVtbl : ITTAPIObjectEvent2VTbl*
  end

  struct ITTAPIEventNotificationVTbl
    query_interface : Proc(ITTAPIEventNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTAPIEventNotification*, UInt32)
    release : Proc(ITTAPIEventNotification*, UInt32)
    event : Proc(ITTAPIEventNotification*, TAPI_EVENT, IDispatch, HRESULT)
  end

  ITTAPIEventNotification_GUID = LibC::GUID.new("eddb9426-3b91-11d1-8f30-00c04fb6809f")
  CLSID_ITTAPIEventNotification = "eddb9426-3b91-11d1-8f30-00c04fb6809f"
  struct ITTAPIEventNotification
    lpVtbl : ITTAPIEventNotificationVTbl*
  end

  struct ITCallHubEventVTbl
    query_interface : Proc(ITCallHubEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallHubEvent*, UInt32)
    release : Proc(ITCallHubEvent*, UInt32)
    get_type_info_count : Proc(ITCallHubEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallHubEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallHubEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallHubEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_event : Proc(ITCallHubEvent*, CALLHUB_EVENT*, HRESULT)
    get_call_hub : Proc(ITCallHubEvent*, ITCallHub*, HRESULT)
    get_call : Proc(ITCallHubEvent*, ITCallInfo*, HRESULT)
  end

  ITCallHubEvent_GUID = LibC::GUID.new("a3c15451-5b92-11d1-8f4e-00c04fb6809f")
  CLSID_ITCallHubEvent = "a3c15451-5b92-11d1-8f4e-00c04fb6809f"
  struct ITCallHubEvent
    lpVtbl : ITCallHubEventVTbl*
  end

  struct ITAddressEventVTbl
    query_interface : Proc(ITAddressEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAddressEvent*, UInt32)
    release : Proc(ITAddressEvent*, UInt32)
    get_type_info_count : Proc(ITAddressEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITAddressEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAddressEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAddressEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_address : Proc(ITAddressEvent*, ITAddress*, HRESULT)
    get_event : Proc(ITAddressEvent*, ADDRESS_EVENT*, HRESULT)
    get_terminal : Proc(ITAddressEvent*, ITTerminal*, HRESULT)
  end

  ITAddressEvent_GUID = LibC::GUID.new("831ce2d1-83b5-11d1-bb5c-00c04fb6809f")
  CLSID_ITAddressEvent = "831ce2d1-83b5-11d1-bb5c-00c04fb6809f"
  struct ITAddressEvent
    lpVtbl : ITAddressEventVTbl*
  end

  struct ITAddressDeviceSpecificEventVTbl
    query_interface : Proc(ITAddressDeviceSpecificEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAddressDeviceSpecificEvent*, UInt32)
    release : Proc(ITAddressDeviceSpecificEvent*, UInt32)
    get_type_info_count : Proc(ITAddressDeviceSpecificEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITAddressDeviceSpecificEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAddressDeviceSpecificEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAddressDeviceSpecificEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_address : Proc(ITAddressDeviceSpecificEvent*, ITAddress*, HRESULT)
    get_call : Proc(ITAddressDeviceSpecificEvent*, ITCallInfo*, HRESULT)
    get_l_param1 : Proc(ITAddressDeviceSpecificEvent*, Int32*, HRESULT)
    get_l_param2 : Proc(ITAddressDeviceSpecificEvent*, Int32*, HRESULT)
    get_l_param3 : Proc(ITAddressDeviceSpecificEvent*, Int32*, HRESULT)
  end

  ITAddressDeviceSpecificEvent_GUID = LibC::GUID.new("3acb216b-40bd-487a-8672-5ce77bd7e3a3")
  CLSID_ITAddressDeviceSpecificEvent = "3acb216b-40bd-487a-8672-5ce77bd7e3a3"
  struct ITAddressDeviceSpecificEvent
    lpVtbl : ITAddressDeviceSpecificEventVTbl*
  end

  struct ITFileTerminalEventVTbl
    query_interface : Proc(ITFileTerminalEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITFileTerminalEvent*, UInt32)
    release : Proc(ITFileTerminalEvent*, UInt32)
    get_type_info_count : Proc(ITFileTerminalEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITFileTerminalEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITFileTerminalEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITFileTerminalEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_terminal : Proc(ITFileTerminalEvent*, ITTerminal*, HRESULT)
    get_track : Proc(ITFileTerminalEvent*, ITFileTrack*, HRESULT)
    get_call : Proc(ITFileTerminalEvent*, ITCallInfo*, HRESULT)
    get_state : Proc(ITFileTerminalEvent*, TERMINAL_MEDIA_STATE*, HRESULT)
    get_cause : Proc(ITFileTerminalEvent*, FT_STATE_EVENT_CAUSE*, HRESULT)
    get_error : Proc(ITFileTerminalEvent*, HRESULT*, HRESULT)
  end

  ITFileTerminalEvent_GUID = LibC::GUID.new("e4a7fbac-8c17-4427-9f55-9f589ac8af00")
  CLSID_ITFileTerminalEvent = "e4a7fbac-8c17-4427-9f55-9f589ac8af00"
  struct ITFileTerminalEvent
    lpVtbl : ITFileTerminalEventVTbl*
  end

  struct ITTTSTerminalEventVTbl
    query_interface : Proc(ITTTSTerminalEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTTSTerminalEvent*, UInt32)
    release : Proc(ITTTSTerminalEvent*, UInt32)
    get_type_info_count : Proc(ITTTSTerminalEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITTTSTerminalEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTTSTerminalEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTTSTerminalEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_terminal : Proc(ITTTSTerminalEvent*, ITTerminal*, HRESULT)
    get_call : Proc(ITTTSTerminalEvent*, ITCallInfo*, HRESULT)
    get_error : Proc(ITTTSTerminalEvent*, HRESULT*, HRESULT)
  end

  ITTTSTerminalEvent_GUID = LibC::GUID.new("d964788f-95a5-461d-ab0c-b9900a6c2713")
  CLSID_ITTTSTerminalEvent = "d964788f-95a5-461d-ab0c-b9900a6c2713"
  struct ITTTSTerminalEvent
    lpVtbl : ITTTSTerminalEventVTbl*
  end

  struct ITASRTerminalEventVTbl
    query_interface : Proc(ITASRTerminalEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITASRTerminalEvent*, UInt32)
    release : Proc(ITASRTerminalEvent*, UInt32)
    get_type_info_count : Proc(ITASRTerminalEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITASRTerminalEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITASRTerminalEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITASRTerminalEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_terminal : Proc(ITASRTerminalEvent*, ITTerminal*, HRESULT)
    get_call : Proc(ITASRTerminalEvent*, ITCallInfo*, HRESULT)
    get_error : Proc(ITASRTerminalEvent*, HRESULT*, HRESULT)
  end

  ITASRTerminalEvent_GUID = LibC::GUID.new("ee016a02-4fa9-467c-933f-5a15b12377d7")
  CLSID_ITASRTerminalEvent = "ee016a02-4fa9-467c-933f-5a15b12377d7"
  struct ITASRTerminalEvent
    lpVtbl : ITASRTerminalEventVTbl*
  end

  struct ITToneTerminalEventVTbl
    query_interface : Proc(ITToneTerminalEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITToneTerminalEvent*, UInt32)
    release : Proc(ITToneTerminalEvent*, UInt32)
    get_type_info_count : Proc(ITToneTerminalEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITToneTerminalEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITToneTerminalEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITToneTerminalEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_terminal : Proc(ITToneTerminalEvent*, ITTerminal*, HRESULT)
    get_call : Proc(ITToneTerminalEvent*, ITCallInfo*, HRESULT)
    get_error : Proc(ITToneTerminalEvent*, HRESULT*, HRESULT)
  end

  ITToneTerminalEvent_GUID = LibC::GUID.new("e6f56009-611f-4945-bbd2-2d0ce5612056")
  CLSID_ITToneTerminalEvent = "e6f56009-611f-4945-bbd2-2d0ce5612056"
  struct ITToneTerminalEvent
    lpVtbl : ITToneTerminalEventVTbl*
  end

  struct ITQOSEventVTbl
    query_interface : Proc(ITQOSEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITQOSEvent*, UInt32)
    release : Proc(ITQOSEvent*, UInt32)
    get_type_info_count : Proc(ITQOSEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITQOSEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITQOSEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITQOSEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITQOSEvent*, ITCallInfo*, HRESULT)
    get_event : Proc(ITQOSEvent*, QOS_EVENT*, HRESULT)
    get_media_type : Proc(ITQOSEvent*, Int32*, HRESULT)
  end

  ITQOSEvent_GUID = LibC::GUID.new("cfa3357c-ad77-11d1-bb68-00c04fb6809f")
  CLSID_ITQOSEvent = "cfa3357c-ad77-11d1-bb68-00c04fb6809f"
  struct ITQOSEvent
    lpVtbl : ITQOSEventVTbl*
  end

  struct ITCallInfoChangeEventVTbl
    query_interface : Proc(ITCallInfoChangeEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallInfoChangeEvent*, UInt32)
    release : Proc(ITCallInfoChangeEvent*, UInt32)
    get_type_info_count : Proc(ITCallInfoChangeEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallInfoChangeEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallInfoChangeEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallInfoChangeEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITCallInfoChangeEvent*, ITCallInfo*, HRESULT)
    get_cause : Proc(ITCallInfoChangeEvent*, CALLINFOCHANGE_CAUSE*, HRESULT)
    get_callback_instance : Proc(ITCallInfoChangeEvent*, Int32*, HRESULT)
  end

  ITCallInfoChangeEvent_GUID = LibC::GUID.new("5d4b65f9-e51c-11d1-a02f-00c04fb6809f")
  CLSID_ITCallInfoChangeEvent = "5d4b65f9-e51c-11d1-a02f-00c04fb6809f"
  struct ITCallInfoChangeEvent
    lpVtbl : ITCallInfoChangeEventVTbl*
  end

  struct ITRequestVTbl
    query_interface : Proc(ITRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITRequest*, UInt32)
    release : Proc(ITRequest*, UInt32)
    get_type_info_count : Proc(ITRequest*, UInt32*, HRESULT)
    get_type_info : Proc(ITRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    make_call : Proc(ITRequest*, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)
  end

  ITRequest_GUID = LibC::GUID.new("ac48ffdf-f8c4-11d1-a030-00c04fb6809f")
  CLSID_ITRequest = "ac48ffdf-f8c4-11d1-a030-00c04fb6809f"
  struct ITRequest
    lpVtbl : ITRequestVTbl*
  end

  struct ITRequestEventVTbl
    query_interface : Proc(ITRequestEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITRequestEvent*, UInt32)
    release : Proc(ITRequestEvent*, UInt32)
    get_type_info_count : Proc(ITRequestEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITRequestEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITRequestEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITRequestEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_registration_instance : Proc(ITRequestEvent*, Int32*, HRESULT)
    get_request_mode : Proc(ITRequestEvent*, Int32*, HRESULT)
    get_dest_address : Proc(ITRequestEvent*, UInt8**, HRESULT)
    get_app_name : Proc(ITRequestEvent*, UInt8**, HRESULT)
    get_called_party : Proc(ITRequestEvent*, UInt8**, HRESULT)
    get_comment : Proc(ITRequestEvent*, UInt8**, HRESULT)
  end

  ITRequestEvent_GUID = LibC::GUID.new("ac48ffde-f8c4-11d1-a030-00c04fb6809f")
  CLSID_ITRequestEvent = "ac48ffde-f8c4-11d1-a030-00c04fb6809f"
  struct ITRequestEvent
    lpVtbl : ITRequestEventVTbl*
  end

  struct ITCollectionVTbl
    query_interface : Proc(ITCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCollection*, UInt32)
    release : Proc(ITCollection*, UInt32)
    get_type_info_count : Proc(ITCollection*, UInt32*, HRESULT)
    get_type_info : Proc(ITCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ITCollection*, Int32*, HRESULT)
    get_item : Proc(ITCollection*, Int32, VARIANT*, HRESULT)
    get__new_enum : Proc(ITCollection*, IUnknown*, HRESULT)
  end

  ITCollection_GUID = LibC::GUID.new("5ec5acf2-9c02-11d0-8362-00aa003ccabd")
  CLSID_ITCollection = "5ec5acf2-9c02-11d0-8362-00aa003ccabd"
  struct ITCollection
    lpVtbl : ITCollectionVTbl*
  end

  struct ITCollection2VTbl
    query_interface : Proc(ITCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCollection2*, UInt32)
    release : Proc(ITCollection2*, UInt32)
    get_type_info_count : Proc(ITCollection2*, UInt32*, HRESULT)
    get_type_info : Proc(ITCollection2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCollection2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCollection2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ITCollection2*, Int32*, HRESULT)
    get_item : Proc(ITCollection2*, Int32, VARIANT*, HRESULT)
    get__new_enum : Proc(ITCollection2*, IUnknown*, HRESULT)
    add : Proc(ITCollection2*, Int32, VARIANT*, HRESULT)
    remove : Proc(ITCollection2*, Int32, HRESULT)
  end

  ITCollection2_GUID = LibC::GUID.new("e6dddda5-a6d3-48ff-8737-d32fc4d95477")
  CLSID_ITCollection2 = "e6dddda5-a6d3-48ff-8737-d32fc4d95477"
  struct ITCollection2
    lpVtbl : ITCollection2VTbl*
  end

  struct ITForwardInformationVTbl
    query_interface : Proc(ITForwardInformation*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITForwardInformation*, UInt32)
    release : Proc(ITForwardInformation*, UInt32)
    get_type_info_count : Proc(ITForwardInformation*, UInt32*, HRESULT)
    get_type_info : Proc(ITForwardInformation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITForwardInformation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITForwardInformation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_num_rings_no_answer : Proc(ITForwardInformation*, Int32, HRESULT)
    get_num_rings_no_answer : Proc(ITForwardInformation*, Int32*, HRESULT)
    set_forward_type : Proc(ITForwardInformation*, Int32, UInt8*, UInt8*, HRESULT)
    get_forward_type_destination : Proc(ITForwardInformation*, Int32, UInt8**, HRESULT)
    get_forward_type_caller : Proc(ITForwardInformation*, Int32, UInt8**, HRESULT)
    get_forward_type : Proc(ITForwardInformation*, Int32, UInt8**, UInt8**, HRESULT)
    clear : Proc(ITForwardInformation*, HRESULT)
  end

  ITForwardInformation_GUID = LibC::GUID.new("449f659e-88a3-11d1-bb5d-00c04fb6809f")
  CLSID_ITForwardInformation = "449f659e-88a3-11d1-bb5d-00c04fb6809f"
  struct ITForwardInformation
    lpVtbl : ITForwardInformationVTbl*
  end

  struct ITForwardInformation2VTbl
    query_interface : Proc(ITForwardInformation2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITForwardInformation2*, UInt32)
    release : Proc(ITForwardInformation2*, UInt32)
    get_type_info_count : Proc(ITForwardInformation2*, UInt32*, HRESULT)
    get_type_info : Proc(ITForwardInformation2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITForwardInformation2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITForwardInformation2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_num_rings_no_answer : Proc(ITForwardInformation2*, Int32, HRESULT)
    get_num_rings_no_answer : Proc(ITForwardInformation2*, Int32*, HRESULT)
    set_forward_type : Proc(ITForwardInformation2*, Int32, UInt8*, UInt8*, HRESULT)
    get_forward_type_destination : Proc(ITForwardInformation2*, Int32, UInt8**, HRESULT)
    get_forward_type_caller : Proc(ITForwardInformation2*, Int32, UInt8**, HRESULT)
    get_forward_type : Proc(ITForwardInformation2*, Int32, UInt8**, UInt8**, HRESULT)
    clear : Proc(ITForwardInformation2*, HRESULT)
    set_forward_type2 : Proc(ITForwardInformation2*, Int32, UInt8*, Int32, UInt8*, Int32, HRESULT)
    get_forward_type2 : Proc(ITForwardInformation2*, Int32, UInt8**, Int32*, UInt8**, Int32*, HRESULT)
    get_forward_type_destination_address_type : Proc(ITForwardInformation2*, Int32, Int32*, HRESULT)
    get_forward_type_caller_address_type : Proc(ITForwardInformation2*, Int32, Int32*, HRESULT)
  end

  ITForwardInformation2_GUID = LibC::GUID.new("5229b4ed-b260-4382-8e1a-5df3a8a4ccc0")
  CLSID_ITForwardInformation2 = "5229b4ed-b260-4382-8e1a-5df3a8a4ccc0"
  struct ITForwardInformation2
    lpVtbl : ITForwardInformation2VTbl*
  end

  struct ITAddressTranslationVTbl
    query_interface : Proc(ITAddressTranslation*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAddressTranslation*, UInt32)
    release : Proc(ITAddressTranslation*, UInt32)
    get_type_info_count : Proc(ITAddressTranslation*, UInt32*, HRESULT)
    get_type_info : Proc(ITAddressTranslation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAddressTranslation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAddressTranslation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    translate_address : Proc(ITAddressTranslation*, UInt8*, Int32, Int32, ITAddressTranslationInfo*, HRESULT)
    translate_dialog : Proc(ITAddressTranslation*, LibC::IntPtrT, UInt8*, HRESULT)
    enumerate_locations : Proc(ITAddressTranslation*, IEnumLocation*, HRESULT)
    get_locations : Proc(ITAddressTranslation*, VARIANT*, HRESULT)
    enumerate_calling_cards : Proc(ITAddressTranslation*, IEnumCallingCard*, HRESULT)
    get_calling_cards : Proc(ITAddressTranslation*, VARIANT*, HRESULT)
  end

  ITAddressTranslation_GUID = LibC::GUID.new("0c4d8f03-8ddb-11d1-a09e-00805fc147d3")
  CLSID_ITAddressTranslation = "0c4d8f03-8ddb-11d1-a09e-00805fc147d3"
  struct ITAddressTranslation
    lpVtbl : ITAddressTranslationVTbl*
  end

  struct ITAddressTranslationInfoVTbl
    query_interface : Proc(ITAddressTranslationInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAddressTranslationInfo*, UInt32)
    release : Proc(ITAddressTranslationInfo*, UInt32)
    get_type_info_count : Proc(ITAddressTranslationInfo*, UInt32*, HRESULT)
    get_type_info : Proc(ITAddressTranslationInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAddressTranslationInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAddressTranslationInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_dialable_string : Proc(ITAddressTranslationInfo*, UInt8**, HRESULT)
    get_displayable_string : Proc(ITAddressTranslationInfo*, UInt8**, HRESULT)
    get_current_country_code : Proc(ITAddressTranslationInfo*, Int32*, HRESULT)
    get_destination_country_code : Proc(ITAddressTranslationInfo*, Int32*, HRESULT)
    get_translation_results : Proc(ITAddressTranslationInfo*, Int32*, HRESULT)
  end

  ITAddressTranslationInfo_GUID = LibC::GUID.new("afc15945-8d40-11d1-a09e-00805fc147d3")
  CLSID_ITAddressTranslationInfo = "afc15945-8d40-11d1-a09e-00805fc147d3"
  struct ITAddressTranslationInfo
    lpVtbl : ITAddressTranslationInfoVTbl*
  end

  struct ITLocationInfoVTbl
    query_interface : Proc(ITLocationInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITLocationInfo*, UInt32)
    release : Proc(ITLocationInfo*, UInt32)
    get_type_info_count : Proc(ITLocationInfo*, UInt32*, HRESULT)
    get_type_info : Proc(ITLocationInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITLocationInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITLocationInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_permanent_location_id : Proc(ITLocationInfo*, Int32*, HRESULT)
    get_country_code : Proc(ITLocationInfo*, Int32*, HRESULT)
    get_country_id : Proc(ITLocationInfo*, Int32*, HRESULT)
    get_options : Proc(ITLocationInfo*, Int32*, HRESULT)
    get_preferred_card_id : Proc(ITLocationInfo*, Int32*, HRESULT)
    get_location_name : Proc(ITLocationInfo*, UInt8**, HRESULT)
    get_city_code : Proc(ITLocationInfo*, UInt8**, HRESULT)
    get_local_access_code : Proc(ITLocationInfo*, UInt8**, HRESULT)
    get_long_distance_access_code : Proc(ITLocationInfo*, UInt8**, HRESULT)
    get_toll_prefix_list : Proc(ITLocationInfo*, UInt8**, HRESULT)
    get_cancel_call_waiting_code : Proc(ITLocationInfo*, UInt8**, HRESULT)
  end

  ITLocationInfo_GUID = LibC::GUID.new("0c4d8eff-8ddb-11d1-a09e-00805fc147d3")
  CLSID_ITLocationInfo = "0c4d8eff-8ddb-11d1-a09e-00805fc147d3"
  struct ITLocationInfo
    lpVtbl : ITLocationInfoVTbl*
  end

  struct IEnumLocationVTbl
    query_interface : Proc(IEnumLocation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumLocation*, UInt32)
    release : Proc(IEnumLocation*, UInt32)
    next : Proc(IEnumLocation*, UInt32, ITLocationInfo*, UInt32*, HRESULT)
    reset : Proc(IEnumLocation*, HRESULT)
    skip : Proc(IEnumLocation*, UInt32, HRESULT)
    clone : Proc(IEnumLocation*, IEnumLocation*, HRESULT)
  end

  IEnumLocation_GUID = LibC::GUID.new("0c4d8f01-8ddb-11d1-a09e-00805fc147d3")
  CLSID_IEnumLocation = "0c4d8f01-8ddb-11d1-a09e-00805fc147d3"
  struct IEnumLocation
    lpVtbl : IEnumLocationVTbl*
  end

  struct ITCallingCardVTbl
    query_interface : Proc(ITCallingCard*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallingCard*, UInt32)
    release : Proc(ITCallingCard*, UInt32)
    get_type_info_count : Proc(ITCallingCard*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallingCard*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallingCard*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallingCard*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_permanent_card_id : Proc(ITCallingCard*, Int32*, HRESULT)
    get_number_of_digits : Proc(ITCallingCard*, Int32*, HRESULT)
    get_options : Proc(ITCallingCard*, Int32*, HRESULT)
    get_card_name : Proc(ITCallingCard*, UInt8**, HRESULT)
    get_same_area_dialing_rule : Proc(ITCallingCard*, UInt8**, HRESULT)
    get_long_distance_dialing_rule : Proc(ITCallingCard*, UInt8**, HRESULT)
    get_international_dialing_rule : Proc(ITCallingCard*, UInt8**, HRESULT)
  end

  ITCallingCard_GUID = LibC::GUID.new("0c4d8f00-8ddb-11d1-a09e-00805fc147d3")
  CLSID_ITCallingCard = "0c4d8f00-8ddb-11d1-a09e-00805fc147d3"
  struct ITCallingCard
    lpVtbl : ITCallingCardVTbl*
  end

  struct IEnumCallingCardVTbl
    query_interface : Proc(IEnumCallingCard*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumCallingCard*, UInt32)
    release : Proc(IEnumCallingCard*, UInt32)
    next : Proc(IEnumCallingCard*, UInt32, ITCallingCard*, UInt32*, HRESULT)
    reset : Proc(IEnumCallingCard*, HRESULT)
    skip : Proc(IEnumCallingCard*, UInt32, HRESULT)
    clone : Proc(IEnumCallingCard*, IEnumCallingCard*, HRESULT)
  end

  IEnumCallingCard_GUID = LibC::GUID.new("0c4d8f02-8ddb-11d1-a09e-00805fc147d3")
  CLSID_IEnumCallingCard = "0c4d8f02-8ddb-11d1-a09e-00805fc147d3"
  struct IEnumCallingCard
    lpVtbl : IEnumCallingCardVTbl*
  end

  struct ITCallNotificationEventVTbl
    query_interface : Proc(ITCallNotificationEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITCallNotificationEvent*, UInt32)
    release : Proc(ITCallNotificationEvent*, UInt32)
    get_type_info_count : Proc(ITCallNotificationEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITCallNotificationEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITCallNotificationEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITCallNotificationEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_call : Proc(ITCallNotificationEvent*, ITCallInfo*, HRESULT)
    get_event : Proc(ITCallNotificationEvent*, CALL_NOTIFICATION_EVENT*, HRESULT)
    get_callback_instance : Proc(ITCallNotificationEvent*, Int32*, HRESULT)
  end

  ITCallNotificationEvent_GUID = LibC::GUID.new("895801df-3dd6-11d1-8f30-00c04fb6809f")
  CLSID_ITCallNotificationEvent = "895801df-3dd6-11d1-8f30-00c04fb6809f"
  struct ITCallNotificationEvent
    lpVtbl : ITCallNotificationEventVTbl*
  end

  struct ITDispatchMapperVTbl
    query_interface : Proc(ITDispatchMapper*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDispatchMapper*, UInt32)
    release : Proc(ITDispatchMapper*, UInt32)
    get_type_info_count : Proc(ITDispatchMapper*, UInt32*, HRESULT)
    get_type_info : Proc(ITDispatchMapper*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDispatchMapper*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDispatchMapper*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    query_dispatch_interface : Proc(ITDispatchMapper*, UInt8*, IDispatch, IDispatch*, HRESULT)
  end

  ITDispatchMapper_GUID = LibC::GUID.new("e9225295-c759-11d1-a02b-00c04fb6809f")
  CLSID_ITDispatchMapper = "e9225295-c759-11d1-a02b-00c04fb6809f"
  struct ITDispatchMapper
    lpVtbl : ITDispatchMapperVTbl*
  end

  struct ITStreamControlVTbl
    query_interface : Proc(ITStreamControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITStreamControl*, UInt32)
    release : Proc(ITStreamControl*, UInt32)
    get_type_info_count : Proc(ITStreamControl*, UInt32*, HRESULT)
    get_type_info : Proc(ITStreamControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITStreamControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITStreamControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_stream : Proc(ITStreamControl*, Int32, TERMINAL_DIRECTION, ITStream*, HRESULT)
    remove_stream : Proc(ITStreamControl*, ITStream, HRESULT)
    enumerate_streams : Proc(ITStreamControl*, IEnumStream*, HRESULT)
    get_streams : Proc(ITStreamControl*, VARIANT*, HRESULT)
  end

  ITStreamControl_GUID = LibC::GUID.new("ee3bd604-3868-11d2-a045-00c04fb6809f")
  CLSID_ITStreamControl = "ee3bd604-3868-11d2-a045-00c04fb6809f"
  struct ITStreamControl
    lpVtbl : ITStreamControlVTbl*
  end

  struct ITStreamVTbl
    query_interface : Proc(ITStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITStream*, UInt32)
    release : Proc(ITStream*, UInt32)
    get_type_info_count : Proc(ITStream*, UInt32*, HRESULT)
    get_type_info : Proc(ITStream*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITStream*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITStream*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_media_type : Proc(ITStream*, Int32*, HRESULT)
    get_direction : Proc(ITStream*, TERMINAL_DIRECTION*, HRESULT)
    get_name : Proc(ITStream*, UInt8**, HRESULT)
    start_stream : Proc(ITStream*, HRESULT)
    pause_stream : Proc(ITStream*, HRESULT)
    stop_stream : Proc(ITStream*, HRESULT)
    select_terminal : Proc(ITStream*, ITTerminal, HRESULT)
    unselect_terminal : Proc(ITStream*, ITTerminal, HRESULT)
    enumerate_terminals : Proc(ITStream*, IEnumTerminal*, HRESULT)
    get_terminals : Proc(ITStream*, VARIANT*, HRESULT)
  end

  ITStream_GUID = LibC::GUID.new("ee3bd605-3868-11d2-a045-00c04fb6809f")
  CLSID_ITStream = "ee3bd605-3868-11d2-a045-00c04fb6809f"
  struct ITStream
    lpVtbl : ITStreamVTbl*
  end

  struct IEnumStreamVTbl
    query_interface : Proc(IEnumStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumStream*, UInt32)
    release : Proc(IEnumStream*, UInt32)
    next : Proc(IEnumStream*, UInt32, ITStream*, UInt32*, HRESULT)
    reset : Proc(IEnumStream*, HRESULT)
    skip : Proc(IEnumStream*, UInt32, HRESULT)
    clone : Proc(IEnumStream*, IEnumStream*, HRESULT)
  end

  IEnumStream_GUID = LibC::GUID.new("ee3bd606-3868-11d2-a045-00c04fb6809f")
  CLSID_IEnumStream = "ee3bd606-3868-11d2-a045-00c04fb6809f"
  struct IEnumStream
    lpVtbl : IEnumStreamVTbl*
  end

  struct ITSubStreamControlVTbl
    query_interface : Proc(ITSubStreamControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITSubStreamControl*, UInt32)
    release : Proc(ITSubStreamControl*, UInt32)
    get_type_info_count : Proc(ITSubStreamControl*, UInt32*, HRESULT)
    get_type_info : Proc(ITSubStreamControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITSubStreamControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITSubStreamControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_sub_stream : Proc(ITSubStreamControl*, ITSubStream*, HRESULT)
    remove_sub_stream : Proc(ITSubStreamControl*, ITSubStream, HRESULT)
    enumerate_sub_streams : Proc(ITSubStreamControl*, IEnumSubStream*, HRESULT)
    get_sub_streams : Proc(ITSubStreamControl*, VARIANT*, HRESULT)
  end

  ITSubStreamControl_GUID = LibC::GUID.new("ee3bd607-3868-11d2-a045-00c04fb6809f")
  CLSID_ITSubStreamControl = "ee3bd607-3868-11d2-a045-00c04fb6809f"
  struct ITSubStreamControl
    lpVtbl : ITSubStreamControlVTbl*
  end

  struct ITSubStreamVTbl
    query_interface : Proc(ITSubStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITSubStream*, UInt32)
    release : Proc(ITSubStream*, UInt32)
    get_type_info_count : Proc(ITSubStream*, UInt32*, HRESULT)
    get_type_info : Proc(ITSubStream*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITSubStream*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITSubStream*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    start_sub_stream : Proc(ITSubStream*, HRESULT)
    pause_sub_stream : Proc(ITSubStream*, HRESULT)
    stop_sub_stream : Proc(ITSubStream*, HRESULT)
    select_terminal : Proc(ITSubStream*, ITTerminal, HRESULT)
    unselect_terminal : Proc(ITSubStream*, ITTerminal, HRESULT)
    enumerate_terminals : Proc(ITSubStream*, IEnumTerminal*, HRESULT)
    get_terminals : Proc(ITSubStream*, VARIANT*, HRESULT)
    get_stream : Proc(ITSubStream*, ITStream*, HRESULT)
  end

  ITSubStream_GUID = LibC::GUID.new("ee3bd608-3868-11d2-a045-00c04fb6809f")
  CLSID_ITSubStream = "ee3bd608-3868-11d2-a045-00c04fb6809f"
  struct ITSubStream
    lpVtbl : ITSubStreamVTbl*
  end

  struct IEnumSubStreamVTbl
    query_interface : Proc(IEnumSubStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumSubStream*, UInt32)
    release : Proc(IEnumSubStream*, UInt32)
    next : Proc(IEnumSubStream*, UInt32, ITSubStream*, UInt32*, HRESULT)
    reset : Proc(IEnumSubStream*, HRESULT)
    skip : Proc(IEnumSubStream*, UInt32, HRESULT)
    clone : Proc(IEnumSubStream*, IEnumSubStream*, HRESULT)
  end

  IEnumSubStream_GUID = LibC::GUID.new("ee3bd609-3868-11d2-a045-00c04fb6809f")
  CLSID_IEnumSubStream = "ee3bd609-3868-11d2-a045-00c04fb6809f"
  struct IEnumSubStream
    lpVtbl : IEnumSubStreamVTbl*
  end

  struct ITLegacyWaveSupportVTbl
    query_interface : Proc(ITLegacyWaveSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITLegacyWaveSupport*, UInt32)
    release : Proc(ITLegacyWaveSupport*, UInt32)
    get_type_info_count : Proc(ITLegacyWaveSupport*, UInt32*, HRESULT)
    get_type_info : Proc(ITLegacyWaveSupport*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITLegacyWaveSupport*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITLegacyWaveSupport*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    is_full_duplex : Proc(ITLegacyWaveSupport*, FULLDUPLEX_SUPPORT*, HRESULT)
  end

  ITLegacyWaveSupport_GUID = LibC::GUID.new("207823ea-e252-11d2-b77e-0080c7135381")
  CLSID_ITLegacyWaveSupport = "207823ea-e252-11d2-b77e-0080c7135381"
  struct ITLegacyWaveSupport
    lpVtbl : ITLegacyWaveSupportVTbl*
  end

  struct ITBasicCallControl2VTbl
    query_interface : Proc(ITBasicCallControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITBasicCallControl2*, UInt32)
    release : Proc(ITBasicCallControl2*, UInt32)
    get_type_info_count : Proc(ITBasicCallControl2*, UInt32*, HRESULT)
    get_type_info : Proc(ITBasicCallControl2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITBasicCallControl2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITBasicCallControl2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    connect : Proc(ITBasicCallControl2*, Int16, HRESULT)
    answer : Proc(ITBasicCallControl2*, HRESULT)
    disconnect : Proc(ITBasicCallControl2*, DISCONNECT_CODE, HRESULT)
    hold : Proc(ITBasicCallControl2*, Int16, HRESULT)
    handoff_direct : Proc(ITBasicCallControl2*, UInt8*, HRESULT)
    handoff_indirect : Proc(ITBasicCallControl2*, Int32, HRESULT)
    conference : Proc(ITBasicCallControl2*, ITBasicCallControl, Int16, HRESULT)
    transfer : Proc(ITBasicCallControl2*, ITBasicCallControl, Int16, HRESULT)
    blind_transfer : Proc(ITBasicCallControl2*, UInt8*, HRESULT)
    swap_hold : Proc(ITBasicCallControl2*, ITBasicCallControl, HRESULT)
    park_direct : Proc(ITBasicCallControl2*, UInt8*, HRESULT)
    park_indirect : Proc(ITBasicCallControl2*, UInt8**, HRESULT)
    unpark : Proc(ITBasicCallControl2*, HRESULT)
    set_qos : Proc(ITBasicCallControl2*, Int32, QOS_SERVICE_LEVEL, HRESULT)
    pickup : Proc(ITBasicCallControl2*, UInt8*, HRESULT)
    dial : Proc(ITBasicCallControl2*, UInt8*, HRESULT)
    finish : Proc(ITBasicCallControl2*, FINISH_MODE, HRESULT)
    remove_from_conference : Proc(ITBasicCallControl2*, HRESULT)
    request_terminal : Proc(ITBasicCallControl2*, UInt8*, Int32, TERMINAL_DIRECTION, ITTerminal*, HRESULT)
    select_terminal_on_call : Proc(ITBasicCallControl2*, ITTerminal, HRESULT)
    unselect_terminal_on_call : Proc(ITBasicCallControl2*, ITTerminal, HRESULT)
  end

  ITBasicCallControl2_GUID = LibC::GUID.new("161a4a56-1e99-4b3f-a46a-168f38a5ee4c")
  CLSID_ITBasicCallControl2 = "161a4a56-1e99-4b3f-a46a-168f38a5ee4c"
  struct ITBasicCallControl2
    lpVtbl : ITBasicCallControl2VTbl*
  end

  struct ITScriptableAudioFormatVTbl
    query_interface : Proc(ITScriptableAudioFormat*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITScriptableAudioFormat*, UInt32)
    release : Proc(ITScriptableAudioFormat*, UInt32)
    get_type_info_count : Proc(ITScriptableAudioFormat*, UInt32*, HRESULT)
    get_type_info : Proc(ITScriptableAudioFormat*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITScriptableAudioFormat*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITScriptableAudioFormat*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_channels : Proc(ITScriptableAudioFormat*, Int32*, HRESULT)
    put_channels : Proc(ITScriptableAudioFormat*, Int32, HRESULT)
    get_samples_per_sec : Proc(ITScriptableAudioFormat*, Int32*, HRESULT)
    put_samples_per_sec : Proc(ITScriptableAudioFormat*, Int32, HRESULT)
    get_avg_bytes_per_sec : Proc(ITScriptableAudioFormat*, Int32*, HRESULT)
    put_avg_bytes_per_sec : Proc(ITScriptableAudioFormat*, Int32, HRESULT)
    get_block_align : Proc(ITScriptableAudioFormat*, Int32*, HRESULT)
    put_block_align : Proc(ITScriptableAudioFormat*, Int32, HRESULT)
    get_bits_per_sample : Proc(ITScriptableAudioFormat*, Int32*, HRESULT)
    put_bits_per_sample : Proc(ITScriptableAudioFormat*, Int32, HRESULT)
    get_format_tag : Proc(ITScriptableAudioFormat*, Int32*, HRESULT)
    put_format_tag : Proc(ITScriptableAudioFormat*, Int32, HRESULT)
  end

  ITScriptableAudioFormat_GUID = LibC::GUID.new("b87658bd-3c59-4f64-be74-aede3e86a81e")
  CLSID_ITScriptableAudioFormat = "b87658bd-3c59-4f64-be74-aede3e86a81e"
  struct ITScriptableAudioFormat
    lpVtbl : ITScriptableAudioFormatVTbl*
  end

  struct ITAgentVTbl
    query_interface : Proc(ITAgent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAgent*, UInt32)
    release : Proc(ITAgent*, UInt32)
    get_type_info_count : Proc(ITAgent*, UInt32*, HRESULT)
    get_type_info : Proc(ITAgent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAgent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAgent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    enumerate_agent_sessions : Proc(ITAgent*, IEnumAgentSession*, HRESULT)
    create_session : Proc(ITAgent*, ITACDGroup, ITAddress, ITAgentSession*, HRESULT)
    create_session_with_pin : Proc(ITAgent*, ITACDGroup, ITAddress, UInt8*, ITAgentSession*, HRESULT)
    get_id : Proc(ITAgent*, UInt8**, HRESULT)
    get_user : Proc(ITAgent*, UInt8**, HRESULT)
    put_state : Proc(ITAgent*, AGENT_STATE, HRESULT)
    get_state : Proc(ITAgent*, AGENT_STATE*, HRESULT)
    put_measurement_period : Proc(ITAgent*, Int32, HRESULT)
    get_measurement_period : Proc(ITAgent*, Int32*, HRESULT)
    get_overall_call_rate : Proc(ITAgent*, CY*, HRESULT)
    get_number_of_acd_calls : Proc(ITAgent*, Int32*, HRESULT)
    get_number_of_incoming_calls : Proc(ITAgent*, Int32*, HRESULT)
    get_number_of_outgoing_calls : Proc(ITAgent*, Int32*, HRESULT)
    get_total_acd_talk_time : Proc(ITAgent*, Int32*, HRESULT)
    get_total_acd_call_time : Proc(ITAgent*, Int32*, HRESULT)
    get_total_wrap_up_time : Proc(ITAgent*, Int32*, HRESULT)
    get_agent_sessions : Proc(ITAgent*, VARIANT*, HRESULT)
  end

  ITAgent_GUID = LibC::GUID.new("5770ece5-4b27-11d1-bf80-00805fc147d3")
  CLSID_ITAgent = "5770ece5-4b27-11d1-bf80-00805fc147d3"
  struct ITAgent
    lpVtbl : ITAgentVTbl*
  end

  struct ITAgentSessionVTbl
    query_interface : Proc(ITAgentSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAgentSession*, UInt32)
    release : Proc(ITAgentSession*, UInt32)
    get_type_info_count : Proc(ITAgentSession*, UInt32*, HRESULT)
    get_type_info : Proc(ITAgentSession*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAgentSession*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAgentSession*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_agent : Proc(ITAgentSession*, ITAgent*, HRESULT)
    get_address : Proc(ITAgentSession*, ITAddress*, HRESULT)
    get_acd_group : Proc(ITAgentSession*, ITACDGroup*, HRESULT)
    put_state : Proc(ITAgentSession*, AGENT_SESSION_STATE, HRESULT)
    get_state : Proc(ITAgentSession*, AGENT_SESSION_STATE*, HRESULT)
    get_session_start_time : Proc(ITAgentSession*, Float64*, HRESULT)
    get_session_duration : Proc(ITAgentSession*, Int32*, HRESULT)
    get_number_of_calls : Proc(ITAgentSession*, Int32*, HRESULT)
    get_total_talk_time : Proc(ITAgentSession*, Int32*, HRESULT)
    get_average_talk_time : Proc(ITAgentSession*, Int32*, HRESULT)
    get_total_call_time : Proc(ITAgentSession*, Int32*, HRESULT)
    get_average_call_time : Proc(ITAgentSession*, Int32*, HRESULT)
    get_total_wrap_up_time : Proc(ITAgentSession*, Int32*, HRESULT)
    get_average_wrap_up_time : Proc(ITAgentSession*, Int32*, HRESULT)
    get_acd_call_rate : Proc(ITAgentSession*, CY*, HRESULT)
    get_longest_time_to_answer : Proc(ITAgentSession*, Int32*, HRESULT)
    get_average_time_to_answer : Proc(ITAgentSession*, Int32*, HRESULT)
  end

  ITAgentSession_GUID = LibC::GUID.new("5afc3147-4bcc-11d1-bf80-00805fc147d3")
  CLSID_ITAgentSession = "5afc3147-4bcc-11d1-bf80-00805fc147d3"
  struct ITAgentSession
    lpVtbl : ITAgentSessionVTbl*
  end

  struct ITACDGroupVTbl
    query_interface : Proc(ITACDGroup*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITACDGroup*, UInt32)
    release : Proc(ITACDGroup*, UInt32)
    get_type_info_count : Proc(ITACDGroup*, UInt32*, HRESULT)
    get_type_info : Proc(ITACDGroup*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITACDGroup*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITACDGroup*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(ITACDGroup*, UInt8**, HRESULT)
    enumerate_queues : Proc(ITACDGroup*, IEnumQueue*, HRESULT)
    get_queues : Proc(ITACDGroup*, VARIANT*, HRESULT)
  end

  ITACDGroup_GUID = LibC::GUID.new("5afc3148-4bcc-11d1-bf80-00805fc147d3")
  CLSID_ITACDGroup = "5afc3148-4bcc-11d1-bf80-00805fc147d3"
  struct ITACDGroup
    lpVtbl : ITACDGroupVTbl*
  end

  struct ITQueueVTbl
    query_interface : Proc(ITQueue*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITQueue*, UInt32)
    release : Proc(ITQueue*, UInt32)
    get_type_info_count : Proc(ITQueue*, UInt32*, HRESULT)
    get_type_info : Proc(ITQueue*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITQueue*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITQueue*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_measurement_period : Proc(ITQueue*, Int32, HRESULT)
    get_measurement_period : Proc(ITQueue*, Int32*, HRESULT)
    get_total_calls_queued : Proc(ITQueue*, Int32*, HRESULT)
    get_current_calls_queued : Proc(ITQueue*, Int32*, HRESULT)
    get_total_calls_abandoned : Proc(ITQueue*, Int32*, HRESULT)
    get_total_calls_flowed_in : Proc(ITQueue*, Int32*, HRESULT)
    get_total_calls_flowed_out : Proc(ITQueue*, Int32*, HRESULT)
    get_longest_ever_wait_time : Proc(ITQueue*, Int32*, HRESULT)
    get_current_longest_wait_time : Proc(ITQueue*, Int32*, HRESULT)
    get_average_wait_time : Proc(ITQueue*, Int32*, HRESULT)
    get_final_disposition : Proc(ITQueue*, Int32*, HRESULT)
    get_name : Proc(ITQueue*, UInt8**, HRESULT)
  end

  ITQueue_GUID = LibC::GUID.new("5afc3149-4bcc-11d1-bf80-00805fc147d3")
  CLSID_ITQueue = "5afc3149-4bcc-11d1-bf80-00805fc147d3"
  struct ITQueue
    lpVtbl : ITQueueVTbl*
  end

  struct ITAgentEventVTbl
    query_interface : Proc(ITAgentEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAgentEvent*, UInt32)
    release : Proc(ITAgentEvent*, UInt32)
    get_type_info_count : Proc(ITAgentEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITAgentEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAgentEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAgentEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_agent : Proc(ITAgentEvent*, ITAgent*, HRESULT)
    get_event : Proc(ITAgentEvent*, AGENT_EVENT*, HRESULT)
  end

  ITAgentEvent_GUID = LibC::GUID.new("5afc314a-4bcc-11d1-bf80-00805fc147d3")
  CLSID_ITAgentEvent = "5afc314a-4bcc-11d1-bf80-00805fc147d3"
  struct ITAgentEvent
    lpVtbl : ITAgentEventVTbl*
  end

  struct ITAgentSessionEventVTbl
    query_interface : Proc(ITAgentSessionEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAgentSessionEvent*, UInt32)
    release : Proc(ITAgentSessionEvent*, UInt32)
    get_type_info_count : Proc(ITAgentSessionEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITAgentSessionEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAgentSessionEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAgentSessionEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_session : Proc(ITAgentSessionEvent*, ITAgentSession*, HRESULT)
    get_event : Proc(ITAgentSessionEvent*, AGENT_SESSION_EVENT*, HRESULT)
  end

  ITAgentSessionEvent_GUID = LibC::GUID.new("5afc314b-4bcc-11d1-bf80-00805fc147d3")
  CLSID_ITAgentSessionEvent = "5afc314b-4bcc-11d1-bf80-00805fc147d3"
  struct ITAgentSessionEvent
    lpVtbl : ITAgentSessionEventVTbl*
  end

  struct ITACDGroupEventVTbl
    query_interface : Proc(ITACDGroupEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITACDGroupEvent*, UInt32)
    release : Proc(ITACDGroupEvent*, UInt32)
    get_type_info_count : Proc(ITACDGroupEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITACDGroupEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITACDGroupEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITACDGroupEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_group : Proc(ITACDGroupEvent*, ITACDGroup*, HRESULT)
    get_event : Proc(ITACDGroupEvent*, ACDGROUP_EVENT*, HRESULT)
  end

  ITACDGroupEvent_GUID = LibC::GUID.new("297f3032-bd11-11d1-a0a7-00805fc147d3")
  CLSID_ITACDGroupEvent = "297f3032-bd11-11d1-a0a7-00805fc147d3"
  struct ITACDGroupEvent
    lpVtbl : ITACDGroupEventVTbl*
  end

  struct ITQueueEventVTbl
    query_interface : Proc(ITQueueEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITQueueEvent*, UInt32)
    release : Proc(ITQueueEvent*, UInt32)
    get_type_info_count : Proc(ITQueueEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITQueueEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITQueueEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITQueueEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_queue : Proc(ITQueueEvent*, ITQueue*, HRESULT)
    get_event : Proc(ITQueueEvent*, ACDQUEUE_EVENT*, HRESULT)
  end

  ITQueueEvent_GUID = LibC::GUID.new("297f3033-bd11-11d1-a0a7-00805fc147d3")
  CLSID_ITQueueEvent = "297f3033-bd11-11d1-a0a7-00805fc147d3"
  struct ITQueueEvent
    lpVtbl : ITQueueEventVTbl*
  end

  struct ITAgentHandlerEventVTbl
    query_interface : Proc(ITAgentHandlerEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAgentHandlerEvent*, UInt32)
    release : Proc(ITAgentHandlerEvent*, UInt32)
    get_type_info_count : Proc(ITAgentHandlerEvent*, UInt32*, HRESULT)
    get_type_info : Proc(ITAgentHandlerEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAgentHandlerEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAgentHandlerEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_agent_handler : Proc(ITAgentHandlerEvent*, ITAgentHandler*, HRESULT)
    get_event : Proc(ITAgentHandlerEvent*, AGENTHANDLER_EVENT*, HRESULT)
  end

  ITAgentHandlerEvent_GUID = LibC::GUID.new("297f3034-bd11-11d1-a0a7-00805fc147d3")
  CLSID_ITAgentHandlerEvent = "297f3034-bd11-11d1-a0a7-00805fc147d3"
  struct ITAgentHandlerEvent
    lpVtbl : ITAgentHandlerEventVTbl*
  end

  struct ITTAPICallCenterVTbl
    query_interface : Proc(ITTAPICallCenter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTAPICallCenter*, UInt32)
    release : Proc(ITTAPICallCenter*, UInt32)
    get_type_info_count : Proc(ITTAPICallCenter*, UInt32*, HRESULT)
    get_type_info : Proc(ITTAPICallCenter*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTAPICallCenter*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTAPICallCenter*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    enumerate_agent_handlers : Proc(ITTAPICallCenter*, IEnumAgentHandler*, HRESULT)
    get_agent_handlers : Proc(ITTAPICallCenter*, VARIANT*, HRESULT)
  end

  ITTAPICallCenter_GUID = LibC::GUID.new("5afc3154-4bcc-11d1-bf80-00805fc147d3")
  CLSID_ITTAPICallCenter = "5afc3154-4bcc-11d1-bf80-00805fc147d3"
  struct ITTAPICallCenter
    lpVtbl : ITTAPICallCenterVTbl*
  end

  struct ITAgentHandlerVTbl
    query_interface : Proc(ITAgentHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAgentHandler*, UInt32)
    release : Proc(ITAgentHandler*, UInt32)
    get_type_info_count : Proc(ITAgentHandler*, UInt32*, HRESULT)
    get_type_info : Proc(ITAgentHandler*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITAgentHandler*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITAgentHandler*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(ITAgentHandler*, UInt8**, HRESULT)
    create_agent : Proc(ITAgentHandler*, ITAgent*, HRESULT)
    create_agent_with_id : Proc(ITAgentHandler*, UInt8*, UInt8*, ITAgent*, HRESULT)
    enumerate_acd_groups : Proc(ITAgentHandler*, IEnumACDGroup*, HRESULT)
    enumerate_usable_addresses : Proc(ITAgentHandler*, IEnumAddress*, HRESULT)
    get_acd_groups : Proc(ITAgentHandler*, VARIANT*, HRESULT)
    get_usable_addresses : Proc(ITAgentHandler*, VARIANT*, HRESULT)
  end

  ITAgentHandler_GUID = LibC::GUID.new("587e8c22-9802-11d1-a0a4-00805fc147d3")
  CLSID_ITAgentHandler = "587e8c22-9802-11d1-a0a4-00805fc147d3"
  struct ITAgentHandler
    lpVtbl : ITAgentHandlerVTbl*
  end

  struct IEnumAgentVTbl
    query_interface : Proc(IEnumAgent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumAgent*, UInt32)
    release : Proc(IEnumAgent*, UInt32)
    next : Proc(IEnumAgent*, UInt32, ITAgent*, UInt32*, HRESULT)
    reset : Proc(IEnumAgent*, HRESULT)
    skip : Proc(IEnumAgent*, UInt32, HRESULT)
    clone : Proc(IEnumAgent*, IEnumAgent*, HRESULT)
  end

  IEnumAgent_GUID = LibC::GUID.new("5afc314d-4bcc-11d1-bf80-00805fc147d3")
  CLSID_IEnumAgent = "5afc314d-4bcc-11d1-bf80-00805fc147d3"
  struct IEnumAgent
    lpVtbl : IEnumAgentVTbl*
  end

  struct IEnumAgentSessionVTbl
    query_interface : Proc(IEnumAgentSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumAgentSession*, UInt32)
    release : Proc(IEnumAgentSession*, UInt32)
    next : Proc(IEnumAgentSession*, UInt32, ITAgentSession*, UInt32*, HRESULT)
    reset : Proc(IEnumAgentSession*, HRESULT)
    skip : Proc(IEnumAgentSession*, UInt32, HRESULT)
    clone : Proc(IEnumAgentSession*, IEnumAgentSession*, HRESULT)
  end

  IEnumAgentSession_GUID = LibC::GUID.new("5afc314e-4bcc-11d1-bf80-00805fc147d3")
  CLSID_IEnumAgentSession = "5afc314e-4bcc-11d1-bf80-00805fc147d3"
  struct IEnumAgentSession
    lpVtbl : IEnumAgentSessionVTbl*
  end

  struct IEnumQueueVTbl
    query_interface : Proc(IEnumQueue*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumQueue*, UInt32)
    release : Proc(IEnumQueue*, UInt32)
    next : Proc(IEnumQueue*, UInt32, ITQueue*, UInt32*, HRESULT)
    reset : Proc(IEnumQueue*, HRESULT)
    skip : Proc(IEnumQueue*, UInt32, HRESULT)
    clone : Proc(IEnumQueue*, IEnumQueue*, HRESULT)
  end

  IEnumQueue_GUID = LibC::GUID.new("5afc3158-4bcc-11d1-bf80-00805fc147d3")
  CLSID_IEnumQueue = "5afc3158-4bcc-11d1-bf80-00805fc147d3"
  struct IEnumQueue
    lpVtbl : IEnumQueueVTbl*
  end

  struct IEnumACDGroupVTbl
    query_interface : Proc(IEnumACDGroup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumACDGroup*, UInt32)
    release : Proc(IEnumACDGroup*, UInt32)
    next : Proc(IEnumACDGroup*, UInt32, ITACDGroup*, UInt32*, HRESULT)
    reset : Proc(IEnumACDGroup*, HRESULT)
    skip : Proc(IEnumACDGroup*, UInt32, HRESULT)
    clone : Proc(IEnumACDGroup*, IEnumACDGroup*, HRESULT)
  end

  IEnumACDGroup_GUID = LibC::GUID.new("5afc3157-4bcc-11d1-bf80-00805fc147d3")
  CLSID_IEnumACDGroup = "5afc3157-4bcc-11d1-bf80-00805fc147d3"
  struct IEnumACDGroup
    lpVtbl : IEnumACDGroupVTbl*
  end

  struct IEnumAgentHandlerVTbl
    query_interface : Proc(IEnumAgentHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumAgentHandler*, UInt32)
    release : Proc(IEnumAgentHandler*, UInt32)
    next : Proc(IEnumAgentHandler*, UInt32, ITAgentHandler*, UInt32*, HRESULT)
    reset : Proc(IEnumAgentHandler*, HRESULT)
    skip : Proc(IEnumAgentHandler*, UInt32, HRESULT)
    clone : Proc(IEnumAgentHandler*, IEnumAgentHandler*, HRESULT)
  end

  IEnumAgentHandler_GUID = LibC::GUID.new("587e8c28-9802-11d1-a0a4-00805fc147d3")
  CLSID_IEnumAgentHandler = "587e8c28-9802-11d1-a0a4-00805fc147d3"
  struct IEnumAgentHandler
    lpVtbl : IEnumAgentHandlerVTbl*
  end

  struct ITAMMediaFormatVTbl
    query_interface : Proc(ITAMMediaFormat*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAMMediaFormat*, UInt32)
    release : Proc(ITAMMediaFormat*, UInt32)
    get_media_format : Proc(ITAMMediaFormat*, AM_MEDIA_TYPE**, HRESULT)
    put_media_format : Proc(ITAMMediaFormat*, AM_MEDIA_TYPE*, HRESULT)
  end

  ITAMMediaFormat_GUID = LibC::GUID.new("0364eb00-4a77-11d1-a671-006097c9a2e8")
  CLSID_ITAMMediaFormat = "0364eb00-4a77-11d1-a671-006097c9a2e8"
  struct ITAMMediaFormat
    lpVtbl : ITAMMediaFormatVTbl*
  end

  struct ITAllocatorPropertiesVTbl
    query_interface : Proc(ITAllocatorProperties*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITAllocatorProperties*, UInt32)
    release : Proc(ITAllocatorProperties*, UInt32)
    set_allocator_properties : Proc(ITAllocatorProperties*, ALLOCATOR_PROPERTIES*, HRESULT)
    get_allocator_properties : Proc(ITAllocatorProperties*, ALLOCATOR_PROPERTIES*, HRESULT)
    set_allocate_buffers : Proc(ITAllocatorProperties*, LibC::BOOL, HRESULT)
    get_allocate_buffers : Proc(ITAllocatorProperties*, LibC::BOOL*, HRESULT)
    set_buffer_size : Proc(ITAllocatorProperties*, UInt32, HRESULT)
    get_buffer_size : Proc(ITAllocatorProperties*, UInt32*, HRESULT)
  end

  ITAllocatorProperties_GUID = LibC::GUID.new("c1bc3c90-bcfe-11d1-9745-00c04fd91ac0")
  CLSID_ITAllocatorProperties = "c1bc3c90-bcfe-11d1-9745-00c04fd91ac0"
  struct ITAllocatorProperties
    lpVtbl : ITAllocatorPropertiesVTbl*
  end

  struct ITPluggableTerminalEventSinkVTbl
    query_interface : Proc(ITPluggableTerminalEventSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPluggableTerminalEventSink*, UInt32)
    release : Proc(ITPluggableTerminalEventSink*, UInt32)
    fire_event : Proc(ITPluggableTerminalEventSink*, MSP_EVENT_INFO*, HRESULT)
  end

  ITPluggableTerminalEventSink_GUID = LibC::GUID.new("6e0887be-ba1a-492e-bd10-4020ec5e33e0")
  CLSID_ITPluggableTerminalEventSink = "6e0887be-ba1a-492e-bd10-4020ec5e33e0"
  struct ITPluggableTerminalEventSink
    lpVtbl : ITPluggableTerminalEventSinkVTbl*
  end

  struct ITPluggableTerminalEventSinkRegistrationVTbl
    query_interface : Proc(ITPluggableTerminalEventSinkRegistration*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITPluggableTerminalEventSinkRegistration*, UInt32)
    release : Proc(ITPluggableTerminalEventSinkRegistration*, UInt32)
    register_sink : Proc(ITPluggableTerminalEventSinkRegistration*, ITPluggableTerminalEventSink, HRESULT)
    unregister_sink : Proc(ITPluggableTerminalEventSinkRegistration*, HRESULT)
  end

  ITPluggableTerminalEventSinkRegistration_GUID = LibC::GUID.new("f7115709-a216-4957-a759-060ab32a90d1")
  CLSID_ITPluggableTerminalEventSinkRegistration = "f7115709-a216-4957-a759-060ab32a90d1"
  struct ITPluggableTerminalEventSinkRegistration
    lpVtbl : ITPluggableTerminalEventSinkRegistrationVTbl*
  end

  struct ITMSPAddressVTbl
    query_interface : Proc(ITMSPAddress*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITMSPAddress*, UInt32)
    release : Proc(ITMSPAddress*, UInt32)
    initialize : Proc(ITMSPAddress*, Int32*, HRESULT)
    shutdown : Proc(ITMSPAddress*, HRESULT)
    create_msp_call : Proc(ITMSPAddress*, Int32*, UInt32, UInt32, IUnknown, IUnknown*, HRESULT)
    shutdown_msp_call : Proc(ITMSPAddress*, IUnknown, HRESULT)
    receive_tsp_data : Proc(ITMSPAddress*, IUnknown, UInt8*, UInt32, HRESULT)
    get_event : Proc(ITMSPAddress*, UInt32*, UInt8*, HRESULT)
  end

  ITMSPAddress_GUID = LibC::GUID.new("ee3bd600-3868-11d2-a045-00c04fb6809f")
  CLSID_ITMSPAddress = "ee3bd600-3868-11d2-a045-00c04fb6809f"
  struct ITMSPAddress
    lpVtbl : ITMSPAddressVTbl*
  end

  struct ITTAPIDispatchEventNotificationVTbl
    query_interface : Proc(ITTAPIDispatchEventNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITTAPIDispatchEventNotification*, UInt32)
    release : Proc(ITTAPIDispatchEventNotification*, UInt32)
    get_type_info_count : Proc(ITTAPIDispatchEventNotification*, UInt32*, HRESULT)
    get_type_info : Proc(ITTAPIDispatchEventNotification*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITTAPIDispatchEventNotification*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITTAPIDispatchEventNotification*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  ITTAPIDispatchEventNotification_GUID = LibC::GUID.new("9f34325b-7e62-11d2-9457-00c04f8ec888")
  CLSID_ITTAPIDispatchEventNotification = "9f34325b-7e62-11d2-9457-00c04f8ec888"
  struct ITTAPIDispatchEventNotification
    lpVtbl : ITTAPIDispatchEventNotificationVTbl*
  end

  struct ITDirectoryObjectConferenceVTbl
    query_interface : Proc(ITDirectoryObjectConference*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDirectoryObjectConference*, UInt32)
    release : Proc(ITDirectoryObjectConference*, UInt32)
    get_type_info_count : Proc(ITDirectoryObjectConference*, UInt32*, HRESULT)
    get_type_info : Proc(ITDirectoryObjectConference*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDirectoryObjectConference*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDirectoryObjectConference*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_protocol : Proc(ITDirectoryObjectConference*, UInt8**, HRESULT)
    get_originator : Proc(ITDirectoryObjectConference*, UInt8**, HRESULT)
    put_originator : Proc(ITDirectoryObjectConference*, UInt8*, HRESULT)
    get_advertising_scope : Proc(ITDirectoryObjectConference*, RND_ADVERTISING_SCOPE*, HRESULT)
    put_advertising_scope : Proc(ITDirectoryObjectConference*, RND_ADVERTISING_SCOPE, HRESULT)
    get_url : Proc(ITDirectoryObjectConference*, UInt8**, HRESULT)
    put_url : Proc(ITDirectoryObjectConference*, UInt8*, HRESULT)
    get_description : Proc(ITDirectoryObjectConference*, UInt8**, HRESULT)
    put_description : Proc(ITDirectoryObjectConference*, UInt8*, HRESULT)
    get_is_encrypted : Proc(ITDirectoryObjectConference*, Int16*, HRESULT)
    put_is_encrypted : Proc(ITDirectoryObjectConference*, Int16, HRESULT)
    get_start_time : Proc(ITDirectoryObjectConference*, Float64*, HRESULT)
    put_start_time : Proc(ITDirectoryObjectConference*, Float64, HRESULT)
    get_stop_time : Proc(ITDirectoryObjectConference*, Float64*, HRESULT)
    put_stop_time : Proc(ITDirectoryObjectConference*, Float64, HRESULT)
  end

  ITDirectoryObjectConference_GUID = LibC::GUID.new("f1029e5d-cb5b-11d0-8d59-00c04fd91ac0")
  CLSID_ITDirectoryObjectConference = "f1029e5d-cb5b-11d0-8d59-00c04fd91ac0"
  struct ITDirectoryObjectConference
    lpVtbl : ITDirectoryObjectConferenceVTbl*
  end

  struct ITDirectoryObjectUserVTbl
    query_interface : Proc(ITDirectoryObjectUser*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDirectoryObjectUser*, UInt32)
    release : Proc(ITDirectoryObjectUser*, UInt32)
    get_type_info_count : Proc(ITDirectoryObjectUser*, UInt32*, HRESULT)
    get_type_info : Proc(ITDirectoryObjectUser*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDirectoryObjectUser*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDirectoryObjectUser*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_ip_phone_primary : Proc(ITDirectoryObjectUser*, UInt8**, HRESULT)
    put_ip_phone_primary : Proc(ITDirectoryObjectUser*, UInt8*, HRESULT)
  end

  ITDirectoryObjectUser_GUID = LibC::GUID.new("34621d6f-6cff-11d1-aff7-00c04fc31fee")
  CLSID_ITDirectoryObjectUser = "34621d6f-6cff-11d1-aff7-00c04fc31fee"
  struct ITDirectoryObjectUser
    lpVtbl : ITDirectoryObjectUserVTbl*
  end

  struct IEnumDialableAddrsVTbl
    query_interface : Proc(IEnumDialableAddrs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDialableAddrs*, UInt32)
    release : Proc(IEnumDialableAddrs*, UInt32)
    next : Proc(IEnumDialableAddrs*, UInt32, UInt8**, UInt32*, HRESULT)
    reset : Proc(IEnumDialableAddrs*, HRESULT)
    skip : Proc(IEnumDialableAddrs*, UInt32, HRESULT)
    clone : Proc(IEnumDialableAddrs*, IEnumDialableAddrs*, HRESULT)
  end

  IEnumDialableAddrs_GUID = LibC::GUID.new("34621d70-6cff-11d1-aff7-00c04fc31fee")
  CLSID_IEnumDialableAddrs = "34621d70-6cff-11d1-aff7-00c04fc31fee"
  struct IEnumDialableAddrs
    lpVtbl : IEnumDialableAddrsVTbl*
  end

  struct ITDirectoryObjectVTbl
    query_interface : Proc(ITDirectoryObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDirectoryObject*, UInt32)
    release : Proc(ITDirectoryObject*, UInt32)
    get_type_info_count : Proc(ITDirectoryObject*, UInt32*, HRESULT)
    get_type_info : Proc(ITDirectoryObject*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDirectoryObject*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDirectoryObject*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_object_type : Proc(ITDirectoryObject*, DIRECTORY_OBJECT_TYPE*, HRESULT)
    get_name : Proc(ITDirectoryObject*, UInt8**, HRESULT)
    put_name : Proc(ITDirectoryObject*, UInt8*, HRESULT)
    get_dialable_addrs : Proc(ITDirectoryObject*, Int32, VARIANT*, HRESULT)
    enumerate_dialable_addrs : Proc(ITDirectoryObject*, UInt32, IEnumDialableAddrs*, HRESULT)
    get_security_descriptor : Proc(ITDirectoryObject*, IDispatch*, HRESULT)
    put_security_descriptor : Proc(ITDirectoryObject*, IDispatch, HRESULT)
  end

  ITDirectoryObject_GUID = LibC::GUID.new("34621d6e-6cff-11d1-aff7-00c04fc31fee")
  CLSID_ITDirectoryObject = "34621d6e-6cff-11d1-aff7-00c04fc31fee"
  struct ITDirectoryObject
    lpVtbl : ITDirectoryObjectVTbl*
  end

  struct IEnumDirectoryObjectVTbl
    query_interface : Proc(IEnumDirectoryObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDirectoryObject*, UInt32)
    release : Proc(IEnumDirectoryObject*, UInt32)
    next : Proc(IEnumDirectoryObject*, UInt32, ITDirectoryObject*, UInt32*, HRESULT)
    reset : Proc(IEnumDirectoryObject*, HRESULT)
    skip : Proc(IEnumDirectoryObject*, UInt32, HRESULT)
    clone : Proc(IEnumDirectoryObject*, IEnumDirectoryObject*, HRESULT)
  end

  IEnumDirectoryObject_GUID = LibC::GUID.new("06c9b64a-306d-11d1-9774-00c04fd91ac0")
  CLSID_IEnumDirectoryObject = "06c9b64a-306d-11d1-9774-00c04fd91ac0"
  struct IEnumDirectoryObject
    lpVtbl : IEnumDirectoryObjectVTbl*
  end

  struct ITILSConfigVTbl
    query_interface : Proc(ITILSConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITILSConfig*, UInt32)
    release : Proc(ITILSConfig*, UInt32)
    get_type_info_count : Proc(ITILSConfig*, UInt32*, HRESULT)
    get_type_info : Proc(ITILSConfig*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITILSConfig*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITILSConfig*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_port : Proc(ITILSConfig*, Int32*, HRESULT)
    put_port : Proc(ITILSConfig*, Int32, HRESULT)
  end

  ITILSConfig_GUID = LibC::GUID.new("34621d72-6cff-11d1-aff7-00c04fc31fee")
  CLSID_ITILSConfig = "34621d72-6cff-11d1-aff7-00c04fc31fee"
  struct ITILSConfig
    lpVtbl : ITILSConfigVTbl*
  end

  struct ITDirectoryVTbl
    query_interface : Proc(ITDirectory*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITDirectory*, UInt32)
    release : Proc(ITDirectory*, UInt32)
    get_type_info_count : Proc(ITDirectory*, UInt32*, HRESULT)
    get_type_info : Proc(ITDirectory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITDirectory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITDirectory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_directory_type : Proc(ITDirectory*, DIRECTORY_TYPE*, HRESULT)
    get_display_name : Proc(ITDirectory*, UInt8**, HRESULT)
    get_is_dynamic : Proc(ITDirectory*, Int16*, HRESULT)
    get_default_object_ttl : Proc(ITDirectory*, Int32*, HRESULT)
    put_default_object_ttl : Proc(ITDirectory*, Int32, HRESULT)
    enable_auto_refresh : Proc(ITDirectory*, Int16, HRESULT)
    connect : Proc(ITDirectory*, Int16, HRESULT)
    bind : Proc(ITDirectory*, UInt8*, UInt8*, UInt8*, Int32, HRESULT)
    add_directory_object : Proc(ITDirectory*, ITDirectoryObject, HRESULT)
    modify_directory_object : Proc(ITDirectory*, ITDirectoryObject, HRESULT)
    refresh_directory_object : Proc(ITDirectory*, ITDirectoryObject, HRESULT)
    delete_directory_object : Proc(ITDirectory*, ITDirectoryObject, HRESULT)
    get_directory_objects : Proc(ITDirectory*, DIRECTORY_OBJECT_TYPE, UInt8*, VARIANT*, HRESULT)
    enumerate_directory_objects : Proc(ITDirectory*, DIRECTORY_OBJECT_TYPE, UInt8*, IEnumDirectoryObject*, HRESULT)
  end

  ITDirectory_GUID = LibC::GUID.new("34621d6c-6cff-11d1-aff7-00c04fc31fee")
  CLSID_ITDirectory = "34621d6c-6cff-11d1-aff7-00c04fc31fee"
  struct ITDirectory
    lpVtbl : ITDirectoryVTbl*
  end

  struct IEnumDirectoryVTbl
    query_interface : Proc(IEnumDirectory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumDirectory*, UInt32)
    release : Proc(IEnumDirectory*, UInt32)
    next : Proc(IEnumDirectory*, UInt32, ITDirectory*, UInt32*, HRESULT)
    reset : Proc(IEnumDirectory*, HRESULT)
    skip : Proc(IEnumDirectory*, UInt32, HRESULT)
    clone : Proc(IEnumDirectory*, IEnumDirectory*, HRESULT)
  end

  IEnumDirectory_GUID = LibC::GUID.new("34621d6d-6cff-11d1-aff7-00c04fc31fee")
  CLSID_IEnumDirectory = "34621d6d-6cff-11d1-aff7-00c04fc31fee"
  struct IEnumDirectory
    lpVtbl : IEnumDirectoryVTbl*
  end

  struct ITRendezvousVTbl
    query_interface : Proc(ITRendezvous*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITRendezvous*, UInt32)
    release : Proc(ITRendezvous*, UInt32)
    get_type_info_count : Proc(ITRendezvous*, UInt32*, HRESULT)
    get_type_info : Proc(ITRendezvous*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITRendezvous*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITRendezvous*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_default_directories : Proc(ITRendezvous*, VARIANT*, HRESULT)
    enumerate_default_directories : Proc(ITRendezvous*, IEnumDirectory*, HRESULT)
    create_directory : Proc(ITRendezvous*, DIRECTORY_TYPE, UInt8*, ITDirectory*, HRESULT)
    create_directory_object : Proc(ITRendezvous*, DIRECTORY_OBJECT_TYPE, UInt8*, ITDirectoryObject*, HRESULT)
  end

  ITRendezvous_GUID = LibC::GUID.new("34621d6b-6cff-11d1-aff7-00c04fc31fee")
  CLSID_ITRendezvous = "34621d6b-6cff-11d1-aff7-00c04fc31fee"
  struct ITRendezvous
    lpVtbl : ITRendezvousVTbl*
  end

  struct IMcastScopeVTbl
    query_interface : Proc(IMcastScope*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMcastScope*, UInt32)
    release : Proc(IMcastScope*, UInt32)
    get_type_info_count : Proc(IMcastScope*, UInt32*, HRESULT)
    get_type_info : Proc(IMcastScope*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMcastScope*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMcastScope*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_scope_id : Proc(IMcastScope*, Int32*, HRESULT)
    get_server_id : Proc(IMcastScope*, Int32*, HRESULT)
    get_interface_id : Proc(IMcastScope*, Int32*, HRESULT)
    get_scope_description : Proc(IMcastScope*, UInt8**, HRESULT)
    get_ttl : Proc(IMcastScope*, Int32*, HRESULT)
  end

  IMcastScope_GUID = LibC::GUID.new("df0daef4-a289-11d1-8697-006008b0e5d2")
  CLSID_IMcastScope = "df0daef4-a289-11d1-8697-006008b0e5d2"
  struct IMcastScope
    lpVtbl : IMcastScopeVTbl*
  end

  struct IMcastLeaseInfoVTbl
    query_interface : Proc(IMcastLeaseInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMcastLeaseInfo*, UInt32)
    release : Proc(IMcastLeaseInfo*, UInt32)
    get_type_info_count : Proc(IMcastLeaseInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IMcastLeaseInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMcastLeaseInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMcastLeaseInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_request_id : Proc(IMcastLeaseInfo*, UInt8**, HRESULT)
    get_lease_start_time : Proc(IMcastLeaseInfo*, Float64*, HRESULT)
    put_lease_start_time : Proc(IMcastLeaseInfo*, Float64, HRESULT)
    get_lease_stop_time : Proc(IMcastLeaseInfo*, Float64*, HRESULT)
    put_lease_stop_time : Proc(IMcastLeaseInfo*, Float64, HRESULT)
    get_address_count : Proc(IMcastLeaseInfo*, Int32*, HRESULT)
    get_server_address : Proc(IMcastLeaseInfo*, UInt8**, HRESULT)
    get_ttl : Proc(IMcastLeaseInfo*, Int32*, HRESULT)
    get_addresses : Proc(IMcastLeaseInfo*, VARIANT*, HRESULT)
    enumerate_addresses : Proc(IMcastLeaseInfo*, IEnumBstr*, HRESULT)
  end

  IMcastLeaseInfo_GUID = LibC::GUID.new("df0daefd-a289-11d1-8697-006008b0e5d2")
  CLSID_IMcastLeaseInfo = "df0daefd-a289-11d1-8697-006008b0e5d2"
  struct IMcastLeaseInfo
    lpVtbl : IMcastLeaseInfoVTbl*
  end

  struct IEnumMcastScopeVTbl
    query_interface : Proc(IEnumMcastScope*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumMcastScope*, UInt32)
    release : Proc(IEnumMcastScope*, UInt32)
    next : Proc(IEnumMcastScope*, UInt32, IMcastScope*, UInt32*, HRESULT)
    reset : Proc(IEnumMcastScope*, HRESULT)
    skip : Proc(IEnumMcastScope*, UInt32, HRESULT)
    clone : Proc(IEnumMcastScope*, IEnumMcastScope*, HRESULT)
  end

  IEnumMcastScope_GUID = LibC::GUID.new("df0daf09-a289-11d1-8697-006008b0e5d2")
  CLSID_IEnumMcastScope = "df0daf09-a289-11d1-8697-006008b0e5d2"
  struct IEnumMcastScope
    lpVtbl : IEnumMcastScopeVTbl*
  end

  struct IMcastAddressAllocationVTbl
    query_interface : Proc(IMcastAddressAllocation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMcastAddressAllocation*, UInt32)
    release : Proc(IMcastAddressAllocation*, UInt32)
    get_type_info_count : Proc(IMcastAddressAllocation*, UInt32*, HRESULT)
    get_type_info : Proc(IMcastAddressAllocation*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMcastAddressAllocation*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMcastAddressAllocation*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_scopes : Proc(IMcastAddressAllocation*, VARIANT*, HRESULT)
    enumerate_scopes : Proc(IMcastAddressAllocation*, IEnumMcastScope*, HRESULT)
    request_address : Proc(IMcastAddressAllocation*, IMcastScope, Float64, Float64, Int32, IMcastLeaseInfo*, HRESULT)
    renew_address : Proc(IMcastAddressAllocation*, Int32, IMcastLeaseInfo, IMcastLeaseInfo*, HRESULT)
    release_address : Proc(IMcastAddressAllocation*, IMcastLeaseInfo, HRESULT)
    create_lease_info : Proc(IMcastAddressAllocation*, Float64, Float64, UInt32, LibC::LPWSTR*, LibC::LPWSTR, LibC::LPWSTR, IMcastLeaseInfo*, HRESULT)
    create_lease_info_from_variant : Proc(IMcastAddressAllocation*, Float64, Float64, VARIANT, UInt8*, UInt8*, IMcastLeaseInfo*, HRESULT)
  end

  IMcastAddressAllocation_GUID = LibC::GUID.new("df0daef1-a289-11d1-8697-006008b0e5d2")
  CLSID_IMcastAddressAllocation = "df0daef1-a289-11d1-8697-006008b0e5d2"
  struct IMcastAddressAllocation
    lpVtbl : IMcastAddressAllocationVTbl*
  end

  struct ITnefVTbl
    query_interface : Proc(ITnef*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITnef*, UInt32)
    release : Proc(ITnef*, UInt32)
    add_props : Proc(ITnef*, UInt32, UInt32, Void*, SPropTagArray*, HRESULT)
    extract_props : Proc(ITnef*, UInt32, SPropTagArray*, STnefProblemArray**, HRESULT)
    finish : Proc(ITnef*, UInt32, UInt16*, STnefProblemArray**, HRESULT)
    open_tagged_body : Proc(ITnef*, IMessage, UInt32, IStream*, HRESULT)
    set_props : Proc(ITnef*, UInt32, UInt32, UInt32, SPropValue*, HRESULT)
    encode_recips : Proc(ITnef*, UInt32, IMAPITable, HRESULT)
    finish_component : Proc(ITnef*, UInt32, UInt32, SPropTagArray*, SPropValue*, SPropTagArray*, STnefProblemArray**, HRESULT)
  end

  struct ITnef
    lpVtbl : ITnefVTbl*
  end


  # Params # hcall : UInt32 [In],lpsuseruserinfo : PSTR [In],dwsize : UInt32 [In]
  fun lineAccept(hcall : UInt32, lpsuseruserinfo : PSTR, dwsize : UInt32) : Int32

  # Params # lpszproviderfilename : PSTR [In],hwndowner : LibC::HANDLE [In],lpdwpermanentproviderid : UInt32* [In]
  fun lineAddProvider(lpszproviderfilename : PSTR, hwndowner : LibC::HANDLE, lpdwpermanentproviderid : UInt32*) : Int32

  # Params # lpszproviderfilename : PSTR [In],hwndowner : LibC::HANDLE [In],lpdwpermanentproviderid : UInt32* [In]
  fun lineAddProviderA(lpszproviderfilename : PSTR, hwndowner : LibC::HANDLE, lpdwpermanentproviderid : UInt32*) : Int32

  # Params # lpszproviderfilename : LibC::LPWSTR [In],hwndowner : LibC::HANDLE [In],lpdwpermanentproviderid : UInt32* [In]
  fun lineAddProviderW(lpszproviderfilename : LibC::LPWSTR, hwndowner : LibC::HANDLE, lpdwpermanentproviderid : UInt32*) : Int32

  # Params # hconfcall : UInt32 [In],hconsultcall : UInt32 [In]
  fun lineAddToConference(hconfcall : UInt32, hconsultcall : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],dwagentextensionidindex : UInt32 [In],lpparams : Void* [In],dwsize : UInt32 [In]
  fun lineAgentSpecific(hline : UInt32, dwaddressid : UInt32, dwagentextensionidindex : UInt32, lpparams : Void*, dwsize : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpsuseruserinfo : PSTR [In],dwsize : UInt32 [In]
  fun lineAnswer(hcall : UInt32, lpsuseruserinfo : PSTR, dwsize : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In]
  fun lineBlindTransfer(hcall : UInt32, lpszdestaddress : PSTR, dwcountrycode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In]
  fun lineBlindTransferA(hcall : UInt32, lpszdestaddress : PSTR, dwcountrycode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddressw : LibC::LPWSTR [In],dwcountrycode : UInt32 [In]
  fun lineBlindTransferW(hcall : UInt32, lpszdestaddressw : LibC::LPWSTR, dwcountrycode : UInt32) : Int32

  # Params # hline : UInt32 [In]
  fun lineClose(hline : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpdwcompletionid : UInt32* [In],dwcompletionmode : UInt32 [In],dwmessageid : UInt32 [In]
  fun lineCompleteCall(hcall : UInt32, lpdwcompletionid : UInt32*, dwcompletionmode : UInt32, dwmessageid : UInt32) : Int32

  # Params # hcall : UInt32 [In],hconsultcall : UInt32 [In],lphconfcall : UInt32* [In],dwtransfermode : UInt32 [In]
  fun lineCompleteTransfer(hcall : UInt32, hconsultcall : UInt32, lphconfcall : UInt32*, dwtransfermode : UInt32) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : PSTR [In]
  fun lineConfigDialog(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : PSTR [In]
  fun lineConfigDialogA(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : LibC::LPWSTR [In]
  fun lineConfigDialogW(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : LibC::LPWSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : PSTR [In],lpdeviceconfigin : Void* [In],dwsize : UInt32 [In],lpdeviceconfigout : VARSTRING* [In]
  fun lineConfigDialogEdit(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : PSTR, lpdeviceconfigin : Void*, dwsize : UInt32, lpdeviceconfigout : VARSTRING*) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : PSTR [In],lpdeviceconfigin : Void* [In],dwsize : UInt32 [In],lpdeviceconfigout : VARSTRING* [In]
  fun lineConfigDialogEditA(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : PSTR, lpdeviceconfigin : Void*, dwsize : UInt32, lpdeviceconfigout : VARSTRING*) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : LibC::LPWSTR [In],lpdeviceconfigin : Void* [In],dwsize : UInt32 [In],lpdeviceconfigout : VARSTRING* [In]
  fun lineConfigDialogEditW(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : LibC::LPWSTR, lpdeviceconfigin : Void*, dwsize : UInt32, lpdeviceconfigout : VARSTRING*) : Int32

  # Params # hwndowner : LibC::HANDLE [In],dwpermanentproviderid : UInt32 [In]
  fun lineConfigProvider(hwndowner : LibC::HANDLE, dwpermanentproviderid : UInt32) : Int32

  # Params # hline : UInt32 [In],lpszagentid : LibC::LPWSTR [In],lpszagentpin : LibC::LPWSTR [In],lphagent : UInt32* [In]
  fun lineCreateAgentW(hline : UInt32, lpszagentid : LibC::LPWSTR, lpszagentpin : LibC::LPWSTR, lphagent : UInt32*) : Int32

  # Params # hline : UInt32 [In],lpszagentid : PSTR [In],lpszagentpin : PSTR [In],lphagent : UInt32* [In]
  fun lineCreateAgentA(hline : UInt32, lpszagentid : PSTR, lpszagentpin : PSTR, lphagent : UInt32*) : Int32

  # Params # hline : UInt32 [In],hagent : UInt32 [In],lpszagentpin : LibC::LPWSTR [In],dwworkingaddressid : UInt32 [In],lpgroupid : Guid* [In],lphagentsession : UInt32* [In]
  fun lineCreateAgentSessionW(hline : UInt32, hagent : UInt32, lpszagentpin : LibC::LPWSTR, dwworkingaddressid : UInt32, lpgroupid : Guid*, lphagentsession : UInt32*) : Int32

  # Params # hline : UInt32 [In],hagent : UInt32 [In],lpszagentpin : PSTR [In],dwworkingaddressid : UInt32 [In],lpgroupid : Guid* [In],lphagentsession : UInt32* [In]
  fun lineCreateAgentSessionA(hline : UInt32, hagent : UInt32, lpszagentpin : PSTR, dwworkingaddressid : UInt32, lpgroupid : Guid*, lphagentsession : UInt32*) : Int32

  # Params # hcall : UInt32 [In]
  fun lineDeallocateCall(hcall : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],hcall : UInt32 [In],lpparams : Void* [In],dwsize : UInt32 [In]
  fun lineDevSpecific(hline : UInt32, dwaddressid : UInt32, hcall : UInt32, lpparams : Void*, dwsize : UInt32) : Int32

  # Params # hline : UInt32 [In],dwfeature : UInt32 [In],lpparams : Void* [In],dwsize : UInt32 [In]
  fun lineDevSpecificFeature(hline : UInt32, dwfeature : UInt32, lpparams : Void*, dwsize : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In]
  fun lineDial(hcall : UInt32, lpszdestaddress : PSTR, dwcountrycode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In]
  fun lineDialA(hcall : UInt32, lpszdestaddress : PSTR, dwcountrycode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : LibC::LPWSTR [In],dwcountrycode : UInt32 [In]
  fun lineDialW(hcall : UInt32, lpszdestaddress : LibC::LPWSTR, dwcountrycode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpsuseruserinfo : PSTR [In],dwsize : UInt32 [In]
  fun lineDrop(hcall : UInt32, lpsuseruserinfo : PSTR, dwsize : UInt32) : Int32

  # Params # hline : UInt32 [In],balladdresses : UInt32 [In],dwaddressid : UInt32 [In],lpforwardlist : LINEFORWARDLIST* [In],dwnumringsnoanswer : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineForward(hline : UInt32, balladdresses : UInt32, dwaddressid : UInt32, lpforwardlist : LINEFORWARDLIST*, dwnumringsnoanswer : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hline : UInt32 [In],balladdresses : UInt32 [In],dwaddressid : UInt32 [In],lpforwardlist : LINEFORWARDLIST* [In],dwnumringsnoanswer : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineForwardA(hline : UInt32, balladdresses : UInt32, dwaddressid : UInt32, lpforwardlist : LINEFORWARDLIST*, dwnumringsnoanswer : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hline : UInt32 [In],balladdresses : UInt32 [In],dwaddressid : UInt32 [In],lpforwardlist : LINEFORWARDLIST* [In],dwnumringsnoanswer : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineForwardW(hline : UInt32, balladdresses : UInt32, dwaddressid : UInt32, lpforwardlist : LINEFORWARDLIST*, dwnumringsnoanswer : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],dwdigitmodes : UInt32 [In],lpsdigits : UInt8* [In],dwnumdigits : UInt32 [In],lpszterminationdigits : PSTR [In],dwfirstdigittimeout : UInt32 [In],dwinterdigittimeout : UInt32 [In]
  fun lineGatherDigits(hcall : UInt32, dwdigitmodes : UInt32, lpsdigits : UInt8*, dwnumdigits : UInt32, lpszterminationdigits : PSTR, dwfirstdigittimeout : UInt32, dwinterdigittimeout : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwdigitmodes : UInt32 [In],lpsdigits : UInt8* [In],dwnumdigits : UInt32 [In],lpszterminationdigits : PSTR [In],dwfirstdigittimeout : UInt32 [In],dwinterdigittimeout : UInt32 [In]
  fun lineGatherDigitsA(hcall : UInt32, dwdigitmodes : UInt32, lpsdigits : UInt8*, dwnumdigits : UInt32, lpszterminationdigits : PSTR, dwfirstdigittimeout : UInt32, dwinterdigittimeout : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwdigitmodes : UInt32 [In],lpsdigits : Char* [In],dwnumdigits : UInt32 [In],lpszterminationdigits : LibC::LPWSTR [In],dwfirstdigittimeout : UInt32 [In],dwinterdigittimeout : UInt32 [In]
  fun lineGatherDigitsW(hcall : UInt32, dwdigitmodes : UInt32, lpsdigits : Char*, dwnumdigits : UInt32, lpszterminationdigits : LibC::LPWSTR, dwfirstdigittimeout : UInt32, dwinterdigittimeout : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwdigitmode : UInt32 [In],lpszdigits : PSTR [In],dwduration : UInt32 [In]
  fun lineGenerateDigits(hcall : UInt32, dwdigitmode : UInt32, lpszdigits : PSTR, dwduration : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwdigitmode : UInt32 [In],lpszdigits : PSTR [In],dwduration : UInt32 [In]
  fun lineGenerateDigitsA(hcall : UInt32, dwdigitmode : UInt32, lpszdigits : PSTR, dwduration : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwdigitmode : UInt32 [In],lpszdigits : LibC::LPWSTR [In],dwduration : UInt32 [In]
  fun lineGenerateDigitsW(hcall : UInt32, dwdigitmode : UInt32, lpszdigits : LibC::LPWSTR, dwduration : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwtonemode : UInt32 [In],dwduration : UInt32 [In],dwnumtones : UInt32 [In],lptones : LINEGENERATETONE* [In]
  fun lineGenerateTone(hcall : UInt32, dwtonemode : UInt32, dwduration : UInt32, dwnumtones : UInt32, lptones : LINEGENERATETONE*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwaddressid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lpaddresscaps : LINEADDRESSCAPS* [In]
  fun lineGetAddressCaps(hlineapp : UInt32, dwdeviceid : UInt32, dwaddressid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lpaddresscaps : LINEADDRESSCAPS*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwaddressid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lpaddresscaps : LINEADDRESSCAPS* [In]
  fun lineGetAddressCapsA(hlineapp : UInt32, dwdeviceid : UInt32, dwaddressid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lpaddresscaps : LINEADDRESSCAPS*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwaddressid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lpaddresscaps : LINEADDRESSCAPS* [In]
  fun lineGetAddressCapsW(hlineapp : UInt32, dwdeviceid : UInt32, dwaddressid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lpaddresscaps : LINEADDRESSCAPS*) : Int32

  # Params # hline : UInt32 [In],lpdwaddressid : UInt32* [In],dwaddressmode : UInt32 [In],lpsaddress : PSTR [In],dwsize : UInt32 [In]
  fun lineGetAddressID(hline : UInt32, lpdwaddressid : UInt32*, dwaddressmode : UInt32, lpsaddress : PSTR, dwsize : UInt32) : Int32

  # Params # hline : UInt32 [In],lpdwaddressid : UInt32* [In],dwaddressmode : UInt32 [In],lpsaddress : PSTR [In],dwsize : UInt32 [In]
  fun lineGetAddressIDA(hline : UInt32, lpdwaddressid : UInt32*, dwaddressmode : UInt32, lpsaddress : PSTR, dwsize : UInt32) : Int32

  # Params # hline : UInt32 [In],lpdwaddressid : UInt32* [In],dwaddressmode : UInt32 [In],lpsaddress : LibC::LPWSTR [In],dwsize : UInt32 [In]
  fun lineGetAddressIDW(hline : UInt32, lpdwaddressid : UInt32*, dwaddressmode : UInt32, lpsaddress : LibC::LPWSTR, dwsize : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpaddressstatus : LINEADDRESSSTATUS* [In]
  fun lineGetAddressStatus(hline : UInt32, dwaddressid : UInt32, lpaddressstatus : LINEADDRESSSTATUS*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpaddressstatus : LINEADDRESSSTATUS* [In]
  fun lineGetAddressStatusA(hline : UInt32, dwaddressid : UInt32, lpaddressstatus : LINEADDRESSSTATUS*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpaddressstatus : LINEADDRESSSTATUS* [In]
  fun lineGetAddressStatusW(hline : UInt32, dwaddressid : UInt32, lpaddressstatus : LINEADDRESSSTATUS*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpagentactivitylist : LINEAGENTACTIVITYLIST* [In]
  fun lineGetAgentActivityListA(hline : UInt32, dwaddressid : UInt32, lpagentactivitylist : LINEAGENTACTIVITYLIST*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpagentactivitylist : LINEAGENTACTIVITYLIST* [In]
  fun lineGetAgentActivityListW(hline : UInt32, dwaddressid : UInt32, lpagentactivitylist : LINEAGENTACTIVITYLIST*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwaddressid : UInt32 [In],dwappapiversion : UInt32 [In],lpagentcaps : LINEAGENTCAPS* [In]
  fun lineGetAgentCapsA(hlineapp : UInt32, dwdeviceid : UInt32, dwaddressid : UInt32, dwappapiversion : UInt32, lpagentcaps : LINEAGENTCAPS*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwaddressid : UInt32 [In],dwappapiversion : UInt32 [In],lpagentcaps : LINEAGENTCAPS* [In]
  fun lineGetAgentCapsW(hlineapp : UInt32, dwdeviceid : UInt32, dwaddressid : UInt32, dwappapiversion : UInt32, lpagentcaps : LINEAGENTCAPS*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpagentgrouplist : LINEAGENTGROUPLIST* [In]
  fun lineGetAgentGroupListA(hline : UInt32, dwaddressid : UInt32, lpagentgrouplist : LINEAGENTGROUPLIST*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpagentgrouplist : LINEAGENTGROUPLIST* [In]
  fun lineGetAgentGroupListW(hline : UInt32, dwaddressid : UInt32, lpagentgrouplist : LINEAGENTGROUPLIST*) : Int32

  # Params # hline : UInt32 [In],hagent : UInt32 [In],lpagentinfo : LINEAGENTINFO* [In]
  fun lineGetAgentInfo(hline : UInt32, hagent : UInt32, lpagentinfo : LINEAGENTINFO*) : Int32

  # Params # hline : UInt32 [In],hagentsession : UInt32 [In],lpagentsessioninfo : LINEAGENTSESSIONINFO* [In]
  fun lineGetAgentSessionInfo(hline : UInt32, hagentsession : UInt32, lpagentsessioninfo : LINEAGENTSESSIONINFO*) : Int32

  # Params # hline : UInt32 [In],hagent : UInt32 [In],lpagentsessionlist : LINEAGENTSESSIONLIST* [In]
  fun lineGetAgentSessionList(hline : UInt32, hagent : UInt32, lpagentsessionlist : LINEAGENTSESSIONLIST*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpagentstatus : LINEAGENTSTATUS* [In]
  fun lineGetAgentStatusA(hline : UInt32, dwaddressid : UInt32, lpagentstatus : LINEAGENTSTATUS*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpagentstatus : LINEAGENTSTATUS* [In]
  fun lineGetAgentStatusW(hline : UInt32, dwaddressid : UInt32, lpagentstatus : LINEAGENTSTATUS*) : Int32

  # Params # lpszappfilename : PSTR [In],dwmediamode : UInt32 [In],lpextensionid : LINEEXTENSIONID* [In],dwrequestmode : UInt32 [In],lpextensionname : VARSTRING* [In],lpdwpriority : UInt32* [In]
  fun lineGetAppPriority(lpszappfilename : PSTR, dwmediamode : UInt32, lpextensionid : LINEEXTENSIONID*, dwrequestmode : UInt32, lpextensionname : VARSTRING*, lpdwpriority : UInt32*) : Int32

  # Params # lpszappfilename : PSTR [In],dwmediamode : UInt32 [In],lpextensionid : LINEEXTENSIONID* [In],dwrequestmode : UInt32 [In],lpextensionname : VARSTRING* [In],lpdwpriority : UInt32* [In]
  fun lineGetAppPriorityA(lpszappfilename : PSTR, dwmediamode : UInt32, lpextensionid : LINEEXTENSIONID*, dwrequestmode : UInt32, lpextensionname : VARSTRING*, lpdwpriority : UInt32*) : Int32

  # Params # lpszappfilename : LibC::LPWSTR [In],dwmediamode : UInt32 [In],lpextensionid : LINEEXTENSIONID* [In],dwrequestmode : UInt32 [In],lpextensionname : VARSTRING* [In],lpdwpriority : UInt32* [In]
  fun lineGetAppPriorityW(lpszappfilename : LibC::LPWSTR, dwmediamode : UInt32, lpextensionid : LINEEXTENSIONID*, dwrequestmode : UInt32, lpextensionname : VARSTRING*, lpdwpriority : UInt32*) : Int32

  # Params # hcall : UInt32 [In],lpcallinfo : LINECALLINFO* [In]
  fun lineGetCallInfo(hcall : UInt32, lpcallinfo : LINECALLINFO*) : Int32

  # Params # hcall : UInt32 [In],lpcallinfo : LINECALLINFO* [In]
  fun lineGetCallInfoA(hcall : UInt32, lpcallinfo : LINECALLINFO*) : Int32

  # Params # hcall : UInt32 [In],lpcallinfo : LINECALLINFO* [In]
  fun lineGetCallInfoW(hcall : UInt32, lpcallinfo : LINECALLINFO*) : Int32

  # Params # hcall : UInt32 [In],lpcallstatus : LINECALLSTATUS* [In]
  fun lineGetCallStatus(hcall : UInt32, lpcallstatus : LINECALLSTATUS*) : Int32

  # Params # hcall : UInt32 [In],lpcalllist : LINECALLLIST* [In]
  fun lineGetConfRelatedCalls(hcall : UInt32, lpcalllist : LINECALLLIST*) : Int32

  # Params # dwcountryid : UInt32 [In],dwapiversion : UInt32 [In],lplinecountrylist : LINECOUNTRYLIST* [In]
  fun lineGetCountry(dwcountryid : UInt32, dwapiversion : UInt32, lplinecountrylist : LINECOUNTRYLIST*) : Int32

  # Params # dwcountryid : UInt32 [In],dwapiversion : UInt32 [In],lplinecountrylist : LINECOUNTRYLIST* [In]
  fun lineGetCountryA(dwcountryid : UInt32, dwapiversion : UInt32, lplinecountrylist : LINECOUNTRYLIST*) : Int32

  # Params # dwcountryid : UInt32 [In],dwapiversion : UInt32 [In],lplinecountrylist : LINECOUNTRYLIST* [In]
  fun lineGetCountryW(dwcountryid : UInt32, dwapiversion : UInt32, lplinecountrylist : LINECOUNTRYLIST*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lplinedevcaps : LINEDEVCAPS* [In]
  fun lineGetDevCaps(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lplinedevcaps : LINEDEVCAPS*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lplinedevcaps : LINEDEVCAPS* [In]
  fun lineGetDevCapsA(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lplinedevcaps : LINEDEVCAPS*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lplinedevcaps : LINEDEVCAPS* [In]
  fun lineGetDevCapsW(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lplinedevcaps : LINEDEVCAPS*) : Int32

  # Params # dwdeviceid : UInt32 [In],lpdeviceconfig : VARSTRING* [In],lpszdeviceclass : PSTR [In]
  fun lineGetDevConfig(dwdeviceid : UInt32, lpdeviceconfig : VARSTRING*, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],lpdeviceconfig : VARSTRING* [In],lpszdeviceclass : PSTR [In]
  fun lineGetDevConfigA(dwdeviceid : UInt32, lpdeviceconfig : VARSTRING*, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],lpdeviceconfig : VARSTRING* [In],lpszdeviceclass : LibC::LPWSTR [In]
  fun lineGetDevConfigW(dwdeviceid : UInt32, lpdeviceconfig : VARSTRING*, lpszdeviceclass : LibC::LPWSTR) : Int32

  # Params # hline : UInt32 [In],lpgrouplist : LINEAGENTGROUPLIST* [In]
  fun lineGetGroupListA(hline : UInt32, lpgrouplist : LINEAGENTGROUPLIST*) : Int32

  # Params # hline : UInt32 [In],lpgrouplist : LINEAGENTGROUPLIST* [In]
  fun lineGetGroupListW(hline : UInt32, lpgrouplist : LINEAGENTGROUPLIST*) : Int32

  # Params # dwdeviceid : UInt32 [In],lpszdeviceclass : PSTR [In],lphicon : LibC::IntPtrT* [In]
  fun lineGetIcon(dwdeviceid : UInt32, lpszdeviceclass : PSTR, lphicon : LibC::IntPtrT*) : Int32

  # Params # dwdeviceid : UInt32 [In],lpszdeviceclass : PSTR [In],lphicon : LibC::IntPtrT* [In]
  fun lineGetIconA(dwdeviceid : UInt32, lpszdeviceclass : PSTR, lphicon : LibC::IntPtrT*) : Int32

  # Params # dwdeviceid : UInt32 [In],lpszdeviceclass : LibC::LPWSTR [In],lphicon : LibC::IntPtrT* [In]
  fun lineGetIconW(dwdeviceid : UInt32, lpszdeviceclass : LibC::LPWSTR, lphicon : LibC::IntPtrT*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],hcall : UInt32 [In],dwselect : UInt32 [In],lpdeviceid : VARSTRING* [In],lpszdeviceclass : PSTR [In]
  fun lineGetID(hline : UInt32, dwaddressid : UInt32, hcall : UInt32, dwselect : UInt32, lpdeviceid : VARSTRING*, lpszdeviceclass : PSTR) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],hcall : UInt32 [In],dwselect : UInt32 [In],lpdeviceid : VARSTRING* [In],lpszdeviceclass : PSTR [In]
  fun lineGetIDA(hline : UInt32, dwaddressid : UInt32, hcall : UInt32, dwselect : UInt32, lpdeviceid : VARSTRING*, lpszdeviceclass : PSTR) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],hcall : UInt32 [In],dwselect : UInt32 [In],lpdeviceid : VARSTRING* [In],lpszdeviceclass : LibC::LPWSTR [In]
  fun lineGetIDW(hline : UInt32, dwaddressid : UInt32, hcall : UInt32, dwselect : UInt32, lpdeviceid : VARSTRING*, lpszdeviceclass : LibC::LPWSTR) : Int32

  # Params # hline : UInt32 [In],lplinedevstatus : LINEDEVSTATUS* [In]
  fun lineGetLineDevStatus(hline : UInt32, lplinedevstatus : LINEDEVSTATUS*) : Int32

  # Params # hline : UInt32 [In],lplinedevstatus : LINEDEVSTATUS* [In]
  fun lineGetLineDevStatusA(hline : UInt32, lplinedevstatus : LINEDEVSTATUS*) : Int32

  # Params # hline : UInt32 [In],lplinedevstatus : LINEDEVSTATUS* [In]
  fun lineGetLineDevStatusW(hline : UInt32, lplinedevstatus : LINEDEVSTATUS*) : Int32

  # Params # hlineapp : UInt32 [In],lpmessage : LINEMESSAGE* [In],dwtimeout : UInt32 [In]
  fun lineGetMessage(hlineapp : UInt32, lpmessage : LINEMESSAGE*, dwtimeout : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],dwselect : UInt32 [In],lpcalllist : LINECALLLIST* [In]
  fun lineGetNewCalls(hline : UInt32, dwaddressid : UInt32, dwselect : UInt32, lpcalllist : LINECALLLIST*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpdwnumrings : UInt32* [In]
  fun lineGetNumRings(hline : UInt32, dwaddressid : UInt32, lpdwnumrings : UInt32*) : Int32

  # Params # dwapiversion : UInt32 [In],lpproviderlist : LINEPROVIDERLIST* [In]
  fun lineGetProviderList(dwapiversion : UInt32, lpproviderlist : LINEPROVIDERLIST*) : Int32

  # Params # dwapiversion : UInt32 [In],lpproviderlist : LINEPROVIDERLIST* [In]
  fun lineGetProviderListA(dwapiversion : UInt32, lpproviderlist : LINEPROVIDERLIST*) : Int32

  # Params # dwapiversion : UInt32 [In],lpproviderlist : LINEPROVIDERLIST* [In]
  fun lineGetProviderListW(dwapiversion : UInt32, lpproviderlist : LINEPROVIDERLIST*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwappapiversion : UInt32 [In],lplineproxyreqestlist : LINEPROXYREQUESTLIST* [In]
  fun lineGetProxyStatus(hlineapp : UInt32, dwdeviceid : UInt32, dwappapiversion : UInt32, lplineproxyreqestlist : LINEPROXYREQUESTLIST*) : Int32

  # Params # hline : UInt32 [In],dwqueueid : UInt32 [In],lplinequeueinfo : LINEQUEUEINFO* [In]
  fun lineGetQueueInfo(hline : UInt32, dwqueueid : UInt32, lplinequeueinfo : LINEQUEUEINFO*) : Int32

  # Params # hline : UInt32 [In],lpgroupid : Guid* [In],lpqueuelist : LINEQUEUELIST* [In]
  fun lineGetQueueListA(hline : UInt32, lpgroupid : Guid*, lpqueuelist : LINEQUEUELIST*) : Int32

  # Params # hline : UInt32 [In],lpgroupid : Guid* [In],lpqueuelist : LINEQUEUELIST* [In]
  fun lineGetQueueListW(hline : UInt32, lpgroupid : Guid*, lpqueuelist : LINEQUEUELIST*) : Int32

  # Params # hlineapp : UInt32 [In],dwrequestmode : UInt32 [In],lprequestbuffer : Void* [In]
  fun lineGetRequest(hlineapp : UInt32, dwrequestmode : UInt32, lprequestbuffer : Void*) : Int32

  # Params # hlineapp : UInt32 [In],dwrequestmode : UInt32 [In],lprequestbuffer : Void* [In]
  fun lineGetRequestA(hlineapp : UInt32, dwrequestmode : UInt32, lprequestbuffer : Void*) : Int32

  # Params # hlineapp : UInt32 [In],dwrequestmode : UInt32 [In],lprequestbuffer : Void* [In]
  fun lineGetRequestW(hlineapp : UInt32, dwrequestmode : UInt32, lprequestbuffer : Void*) : Int32

  # Params # hline : UInt32 [In],lpdwlinestates : UInt32* [In],lpdwaddressstates : UInt32* [In]
  fun lineGetStatusMessages(hline : UInt32, lpdwlinestates : UInt32*, lpdwaddressstates : UInt32*) : Int32

  # Params # hlineapp : UInt32 [In],dwapiversion : UInt32 [In],lptranslatecaps : LINETRANSLATECAPS* [In]
  fun lineGetTranslateCaps(hlineapp : UInt32, dwapiversion : UInt32, lptranslatecaps : LINETRANSLATECAPS*) : Int32

  # Params # hlineapp : UInt32 [In],dwapiversion : UInt32 [In],lptranslatecaps : LINETRANSLATECAPS* [In]
  fun lineGetTranslateCapsA(hlineapp : UInt32, dwapiversion : UInt32, lptranslatecaps : LINETRANSLATECAPS*) : Int32

  # Params # hlineapp : UInt32 [In],dwapiversion : UInt32 [In],lptranslatecaps : LINETRANSLATECAPS* [In]
  fun lineGetTranslateCapsW(hlineapp : UInt32, dwapiversion : UInt32, lptranslatecaps : LINETRANSLATECAPS*) : Int32

  # Params # hcall : UInt32 [In],lpszfilename : PSTR [In],dwmediamode : UInt32 [In]
  fun lineHandoff(hcall : UInt32, lpszfilename : PSTR, dwmediamode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszfilename : PSTR [In],dwmediamode : UInt32 [In]
  fun lineHandoffA(hcall : UInt32, lpszfilename : PSTR, dwmediamode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszfilename : LibC::LPWSTR [In],dwmediamode : UInt32 [In]
  fun lineHandoffW(hcall : UInt32, lpszfilename : LibC::LPWSTR, dwmediamode : UInt32) : Int32

  # Params # hcall : UInt32 [In]
  fun lineHold(hcall : UInt32) : Int32

  # Params # lphlineapp : UInt32* [In],hinstance : HINSTANCE [In],lpfncallback : LINECALLBACK [In],lpszappname : PSTR [In],lpdwnumdevs : UInt32* [In]
  fun lineInitialize(lphlineapp : UInt32*, hinstance : HINSTANCE, lpfncallback : LINECALLBACK, lpszappname : PSTR, lpdwnumdevs : UInt32*) : Int32

  # Params # lphlineapp : UInt32* [In],hinstance : HINSTANCE [In],lpfncallback : LINECALLBACK [In],lpszfriendlyappname : PSTR [In],lpdwnumdevs : UInt32* [In],lpdwapiversion : UInt32* [In],lplineinitializeexparams : LINEINITIALIZEEXPARAMS* [In]
  fun lineInitializeExA(lphlineapp : UInt32*, hinstance : HINSTANCE, lpfncallback : LINECALLBACK, lpszfriendlyappname : PSTR, lpdwnumdevs : UInt32*, lpdwapiversion : UInt32*, lplineinitializeexparams : LINEINITIALIZEEXPARAMS*) : Int32

  # Params # lphlineapp : UInt32* [In],hinstance : HINSTANCE [In],lpfncallback : LINECALLBACK [In],lpszfriendlyappname : LibC::LPWSTR [In],lpdwnumdevs : UInt32* [In],lpdwapiversion : UInt32* [In],lplineinitializeexparams : LINEINITIALIZEEXPARAMS* [In]
  fun lineInitializeExW(lphlineapp : UInt32*, hinstance : HINSTANCE, lpfncallback : LINECALLBACK, lpszfriendlyappname : LibC::LPWSTR, lpdwnumdevs : UInt32*, lpdwapiversion : UInt32*, lplineinitializeexparams : LINEINITIALIZEEXPARAMS*) : Int32

  # Params # hline : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineMakeCall(hline : UInt32, lphcall : UInt32*, lpszdestaddress : PSTR, dwcountrycode : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hline : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineMakeCallA(hline : UInt32, lphcall : UInt32*, lpszdestaddress : PSTR, dwcountrycode : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hline : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : LibC::LPWSTR [In],dwcountrycode : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineMakeCallW(hline : UInt32, lphcall : UInt32*, lpszdestaddress : LibC::LPWSTR, dwcountrycode : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],dwdigitmodes : UInt32 [In]
  fun lineMonitorDigits(hcall : UInt32, dwdigitmodes : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwmediamodes : UInt32 [In]
  fun lineMonitorMedia(hcall : UInt32, dwmediamodes : UInt32) : Int32

  # Params # hcall : UInt32 [In],lptonelist : LINEMONITORTONE* [In],dwnumentries : UInt32 [In]
  fun lineMonitorTones(hcall : UInt32, lptonelist : LINEMONITORTONE*, dwnumentries : UInt32) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapilowversion : UInt32 [In],dwapihighversion : UInt32 [In],lpdwapiversion : UInt32* [In],lpextensionid : LINEEXTENSIONID* [In]
  fun lineNegotiateAPIVersion(hlineapp : UInt32, dwdeviceid : UInt32, dwapilowversion : UInt32, dwapihighversion : UInt32, lpdwapiversion : UInt32*, lpextensionid : LINEEXTENSIONID*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextlowversion : UInt32 [In],dwexthighversion : UInt32 [In],lpdwextversion : UInt32* [In]
  fun lineNegotiateExtVersion(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextlowversion : UInt32, dwexthighversion : UInt32, lpdwextversion : UInt32*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],lphline : UInt32* [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],dwcallbackinstance : LibC::UINT_PTR [In],dwprivileges : UInt32 [In],dwmediamodes : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineOpen(hlineapp : UInt32, dwdeviceid : UInt32, lphline : UInt32*, dwapiversion : UInt32, dwextversion : UInt32, dwcallbackinstance : LibC::UINT_PTR, dwprivileges : UInt32, dwmediamodes : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],lphline : UInt32* [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],dwcallbackinstance : LibC::UINT_PTR [In],dwprivileges : UInt32 [In],dwmediamodes : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineOpenA(hlineapp : UInt32, dwdeviceid : UInt32, lphline : UInt32*, dwapiversion : UInt32, dwextversion : UInt32, dwcallbackinstance : LibC::UINT_PTR, dwprivileges : UInt32, dwmediamodes : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],lphline : UInt32* [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],dwcallbackinstance : LibC::UINT_PTR [In],dwprivileges : UInt32 [In],dwmediamodes : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineOpenW(hlineapp : UInt32, dwdeviceid : UInt32, lphline : UInt32*, dwapiversion : UInt32, dwextversion : UInt32, dwcallbackinstance : LibC::UINT_PTR, dwprivileges : UInt32, dwmediamodes : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],dwparkmode : UInt32 [In],lpszdiraddress : PSTR [In],lpnondiraddress : VARSTRING* [In]
  fun linePark(hcall : UInt32, dwparkmode : UInt32, lpszdiraddress : PSTR, lpnondiraddress : VARSTRING*) : Int32

  # Params # hcall : UInt32 [In],dwparkmode : UInt32 [In],lpszdiraddress : PSTR [In],lpnondiraddress : VARSTRING* [In]
  fun lineParkA(hcall : UInt32, dwparkmode : UInt32, lpszdiraddress : PSTR, lpnondiraddress : VARSTRING*) : Int32

  # Params # hcall : UInt32 [In],dwparkmode : UInt32 [In],lpszdiraddress : LibC::LPWSTR [In],lpnondiraddress : VARSTRING* [In]
  fun lineParkW(hcall : UInt32, dwparkmode : UInt32, lpszdiraddress : LibC::LPWSTR, lpnondiraddress : VARSTRING*) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : PSTR [In],lpszgroupid : PSTR [In]
  fun linePickup(hline : UInt32, dwaddressid : UInt32, lphcall : UInt32*, lpszdestaddress : PSTR, lpszgroupid : PSTR) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : PSTR [In],lpszgroupid : PSTR [In]
  fun linePickupA(hline : UInt32, dwaddressid : UInt32, lphcall : UInt32*, lpszdestaddress : PSTR, lpszgroupid : PSTR) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : LibC::LPWSTR [In],lpszgroupid : LibC::LPWSTR [In]
  fun linePickupW(hline : UInt32, dwaddressid : UInt32, lphcall : UInt32*, lpszdestaddress : LibC::LPWSTR, lpszgroupid : LibC::LPWSTR) : Int32

  # Params # hconfcall : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun linePrepareAddToConference(hconfcall : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hconfcall : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun linePrepareAddToConferenceA(hconfcall : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hconfcall : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun linePrepareAddToConferenceW(hconfcall : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hline : UInt32 [In],hcall : UInt32 [In],dwmsg : UInt32 [In],dwparam1 : UInt32 [In],dwparam2 : UInt32 [In],dwparam3 : UInt32 [In]
  fun lineProxyMessage(hline : UInt32, hcall : UInt32, dwmsg : UInt32, dwparam1 : UInt32, dwparam2 : UInt32, dwparam3 : UInt32) : Int32

  # Params # hline : UInt32 [In],lpproxyrequest : LINEPROXYREQUEST* [In],dwresult : UInt32 [In]
  fun lineProxyResponse(hline : UInt32, lpproxyrequest : LINEPROXYREQUEST*, dwresult : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In]
  fun lineRedirect(hcall : UInt32, lpszdestaddress : PSTR, dwcountrycode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : PSTR [In],dwcountrycode : UInt32 [In]
  fun lineRedirectA(hcall : UInt32, lpszdestaddress : PSTR, dwcountrycode : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpszdestaddress : LibC::LPWSTR [In],dwcountrycode : UInt32 [In]
  fun lineRedirectW(hcall : UInt32, lpszdestaddress : LibC::LPWSTR, dwcountrycode : UInt32) : Int32

  # Params # hlineapp : UInt32 [In],dwregistrationinstance : UInt32 [In],dwrequestmode : UInt32 [In],benable : UInt32 [In]
  fun lineRegisterRequestRecipient(hlineapp : UInt32, dwregistrationinstance : UInt32, dwrequestmode : UInt32, benable : UInt32) : Int32

  # Params # hcall : UInt32 [In]
  fun lineReleaseUserUserInfo(hcall : UInt32) : Int32

  # Params # hcall : UInt32 [In]
  fun lineRemoveFromConference(hcall : UInt32) : Int32

  # Params # dwpermanentproviderid : UInt32 [In],hwndowner : LibC::HANDLE [In]
  fun lineRemoveProvider(dwpermanentproviderid : UInt32, hwndowner : LibC::HANDLE) : Int32

  # Params # hcall : UInt32 [In]
  fun lineSecureCall(hcall : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpsuseruserinfo : PSTR [In],dwsize : UInt32 [In]
  fun lineSendUserUserInfo(hcall : UInt32, lpsuseruserinfo : PSTR, dwsize : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],dwactivityid : UInt32 [In]
  fun lineSetAgentActivity(hline : UInt32, dwaddressid : UInt32, dwactivityid : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lpagentgrouplist : LINEAGENTGROUPLIST* [In]
  fun lineSetAgentGroup(hline : UInt32, dwaddressid : UInt32, lpagentgrouplist : LINEAGENTGROUPLIST*) : Int32

  # Params # hline : UInt32 [In],hagent : UInt32 [In],dwmeasurementperiod : UInt32 [In]
  fun lineSetAgentMeasurementPeriod(hline : UInt32, hagent : UInt32, dwmeasurementperiod : UInt32) : Int32

  # Params # hline : UInt32 [In],hagentsession : UInt32 [In],dwagentsessionstate : UInt32 [In],dwnextagentsessionstate : UInt32 [In]
  fun lineSetAgentSessionState(hline : UInt32, hagentsession : UInt32, dwagentsessionstate : UInt32, dwnextagentsessionstate : UInt32) : Int32

  # Params # hline : UInt32 [In],hagent : UInt32 [In],dwagentstate : UInt32 [In],dwnextagentstate : UInt32 [In]
  fun lineSetAgentStateEx(hline : UInt32, hagent : UInt32, dwagentstate : UInt32, dwnextagentstate : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],dwagentstate : UInt32 [In],dwnextagentstate : UInt32 [In]
  fun lineSetAgentState(hline : UInt32, dwaddressid : UInt32, dwagentstate : UInt32, dwnextagentstate : UInt32) : Int32

  # Params # lpszappfilename : PSTR [In],dwmediamode : UInt32 [In],lpextensionid : LINEEXTENSIONID* [In],dwrequestmode : UInt32 [In],lpszextensionname : PSTR [In],dwpriority : UInt32 [In]
  fun lineSetAppPriority(lpszappfilename : PSTR, dwmediamode : UInt32, lpextensionid : LINEEXTENSIONID*, dwrequestmode : UInt32, lpszextensionname : PSTR, dwpriority : UInt32) : Int32

  # Params # lpszappfilename : PSTR [In],dwmediamode : UInt32 [In],lpextensionid : LINEEXTENSIONID* [In],dwrequestmode : UInt32 [In],lpszextensionname : PSTR [In],dwpriority : UInt32 [In]
  fun lineSetAppPriorityA(lpszappfilename : PSTR, dwmediamode : UInt32, lpextensionid : LINEEXTENSIONID*, dwrequestmode : UInt32, lpszextensionname : PSTR, dwpriority : UInt32) : Int32

  # Params # lpszappfilename : LibC::LPWSTR [In],dwmediamode : UInt32 [In],lpextensionid : LINEEXTENSIONID* [In],dwrequestmode : UInt32 [In],lpszextensionname : LibC::LPWSTR [In],dwpriority : UInt32 [In]
  fun lineSetAppPriorityW(lpszappfilename : LibC::LPWSTR, dwmediamode : UInt32, lpextensionid : LINEEXTENSIONID*, dwrequestmode : UInt32, lpszextensionname : LibC::LPWSTR, dwpriority : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwappspecific : UInt32 [In]
  fun lineSetAppSpecific(hcall : UInt32, dwappspecific : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpcalldata : Void* [In],dwsize : UInt32 [In]
  fun lineSetCallData(hcall : UInt32, lpcalldata : Void*, dwsize : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwbearermode : UInt32 [In],dwminrate : UInt32 [In],dwmaxrate : UInt32 [In],lpdialparams : LINEDIALPARAMS* [In]
  fun lineSetCallParams(hcall : UInt32, dwbearermode : UInt32, dwminrate : UInt32, dwmaxrate : UInt32, lpdialparams : LINEDIALPARAMS*) : Int32

  # Params # hcall : UInt32 [In],dwcallprivilege : UInt32 [In]
  fun lineSetCallPrivilege(hcall : UInt32, dwcallprivilege : UInt32) : Int32

  # Params # hcall : UInt32 [In],lpsendingflowspec : Void* [In],dwsendingflowspecsize : UInt32 [In],lpreceivingflowspec : Void* [In],dwreceivingflowspecsize : UInt32 [In]
  fun lineSetCallQualityOfService(hcall : UInt32, lpsendingflowspec : Void*, dwsendingflowspecsize : UInt32, lpreceivingflowspec : Void*, dwreceivingflowspecsize : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwtreatment : UInt32 [In]
  fun lineSetCallTreatment(hcall : UInt32, dwtreatment : UInt32) : Int32

  # Params # hlineapp : UInt32 [In],dwlocation : UInt32 [In]
  fun lineSetCurrentLocation(hlineapp : UInt32, dwlocation : UInt32) : Int32

  # Params # dwdeviceid : UInt32 [In],lpdeviceconfig : Void* [In],dwsize : UInt32 [In],lpszdeviceclass : PSTR [In]
  fun lineSetDevConfig(dwdeviceid : UInt32, lpdeviceconfig : Void*, dwsize : UInt32, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],lpdeviceconfig : Void* [In],dwsize : UInt32 [In],lpszdeviceclass : PSTR [In]
  fun lineSetDevConfigA(dwdeviceid : UInt32, lpdeviceconfig : Void*, dwsize : UInt32, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],lpdeviceconfig : Void* [In],dwsize : UInt32 [In],lpszdeviceclass : LibC::LPWSTR [In]
  fun lineSetDevConfigW(dwdeviceid : UInt32, lpdeviceconfig : Void*, dwsize : UInt32, lpszdeviceclass : LibC::LPWSTR) : Int32

  # Params # hline : UInt32 [In],dwstatustochange : UInt32 [In],fstatus : UInt32 [In]
  fun lineSetLineDevStatus(hline : UInt32, dwstatustochange : UInt32, fstatus : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],hcall : UInt32 [In],dwselect : UInt32 [In],lpdigitlist : LINEMEDIACONTROLDIGIT* [In],dwdigitnumentries : UInt32 [In],lpmedialist : LINEMEDIACONTROLMEDIA* [In],dwmedianumentries : UInt32 [In],lptonelist : LINEMEDIACONTROLTONE* [In],dwtonenumentries : UInt32 [In],lpcallstatelist : LINEMEDIACONTROLCALLSTATE* [In],dwcallstatenumentries : UInt32 [In]
  fun lineSetMediaControl(hline : UInt32, dwaddressid : UInt32, hcall : UInt32, dwselect : UInt32, lpdigitlist : LINEMEDIACONTROLDIGIT*, dwdigitnumentries : UInt32, lpmedialist : LINEMEDIACONTROLMEDIA*, dwmedianumentries : UInt32, lptonelist : LINEMEDIACONTROLTONE*, dwtonenumentries : UInt32, lpcallstatelist : LINEMEDIACONTROLCALLSTATE*, dwcallstatenumentries : UInt32) : Int32

  # Params # hcall : UInt32 [In],dwmediamodes : UInt32 [In]
  fun lineSetMediaMode(hcall : UInt32, dwmediamodes : UInt32) : Int32

  # Params # hline : UInt32 [In],dwqueueid : UInt32 [In],dwmeasurementperiod : UInt32 [In]
  fun lineSetQueueMeasurementPeriod(hline : UInt32, dwqueueid : UInt32, dwmeasurementperiod : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],dwnumrings : UInt32 [In]
  fun lineSetNumRings(hline : UInt32, dwaddressid : UInt32, dwnumrings : UInt32) : Int32

  # Params # hline : UInt32 [In],dwlinestates : UInt32 [In],dwaddressstates : UInt32 [In]
  fun lineSetStatusMessages(hline : UInt32, dwlinestates : UInt32, dwaddressstates : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],hcall : UInt32 [In],dwselect : UInt32 [In],dwterminalmodes : UInt32 [In],dwterminalid : UInt32 [In],benable : UInt32 [In]
  fun lineSetTerminal(hline : UInt32, dwaddressid : UInt32, hcall : UInt32, dwselect : UInt32, dwterminalmodes : UInt32, dwterminalid : UInt32, benable : UInt32) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],lpszaddressin : PSTR [In],dwtolllistoption : UInt32 [In]
  fun lineSetTollList(hlineapp : UInt32, dwdeviceid : UInt32, lpszaddressin : PSTR, dwtolllistoption : UInt32) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],lpszaddressin : PSTR [In],dwtolllistoption : UInt32 [In]
  fun lineSetTollListA(hlineapp : UInt32, dwdeviceid : UInt32, lpszaddressin : PSTR, dwtolllistoption : UInt32) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],lpszaddressinw : LibC::LPWSTR [In],dwtolllistoption : UInt32 [In]
  fun lineSetTollListW(hlineapp : UInt32, dwdeviceid : UInt32, lpszaddressinw : LibC::LPWSTR, dwtolllistoption : UInt32) : Int32

  # Params # hcall : UInt32 [In],hline : UInt32 [In],lphconfcall : UInt32* [In],lphconsultcall : UInt32* [In],dwnumparties : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineSetupConference(hcall : UInt32, hline : UInt32, lphconfcall : UInt32*, lphconsultcall : UInt32*, dwnumparties : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],hline : UInt32 [In],lphconfcall : UInt32* [In],lphconsultcall : UInt32* [In],dwnumparties : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineSetupConferenceA(hcall : UInt32, hline : UInt32, lphconfcall : UInt32*, lphconsultcall : UInt32*, dwnumparties : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],hline : UInt32 [In],lphconfcall : UInt32* [In],lphconsultcall : UInt32* [In],dwnumparties : UInt32 [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineSetupConferenceW(hcall : UInt32, hline : UInt32, lphconfcall : UInt32*, lphconsultcall : UInt32*, dwnumparties : UInt32, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineSetupTransfer(hcall : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineSetupTransferA(hcall : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hcall : UInt32 [In],lphconsultcall : UInt32* [In],lpcallparams : LINECALLPARAMS* [In]
  fun lineSetupTransferW(hcall : UInt32, lphconsultcall : UInt32*, lpcallparams : LINECALLPARAMS*) : Int32

  # Params # hlineapp : UInt32 [In]
  fun lineShutdown(hlineapp : UInt32) : Int32

  # Params # hactivecall : UInt32 [In],hheldcall : UInt32 [In]
  fun lineSwapHold(hactivecall : UInt32, hheldcall : UInt32) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],lpszaddressin : PSTR [In],dwcard : UInt32 [In],dwtranslateoptions : UInt32 [In],lptranslateoutput : LINETRANSLATEOUTPUT* [In]
  fun lineTranslateAddress(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, lpszaddressin : PSTR, dwcard : UInt32, dwtranslateoptions : UInt32, lptranslateoutput : LINETRANSLATEOUTPUT*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],lpszaddressin : PSTR [In],dwcard : UInt32 [In],dwtranslateoptions : UInt32 [In],lptranslateoutput : LINETRANSLATEOUTPUT* [In]
  fun lineTranslateAddressA(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, lpszaddressin : PSTR, dwcard : UInt32, dwtranslateoptions : UInt32, lptranslateoutput : LINETRANSLATEOUTPUT*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],lpszaddressin : LibC::LPWSTR [In],dwcard : UInt32 [In],dwtranslateoptions : UInt32 [In],lptranslateoutput : LINETRANSLATEOUTPUT* [In]
  fun lineTranslateAddressW(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, lpszaddressin : LibC::LPWSTR, dwcard : UInt32, dwtranslateoptions : UInt32, lptranslateoutput : LINETRANSLATEOUTPUT*) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszaddressin : PSTR [In]
  fun lineTranslateDialog(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, hwndowner : LibC::HANDLE, lpszaddressin : PSTR) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszaddressin : PSTR [In]
  fun lineTranslateDialogA(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, hwndowner : LibC::HANDLE, lpszaddressin : PSTR) : Int32

  # Params # hlineapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszaddressin : LibC::LPWSTR [In]
  fun lineTranslateDialogW(hlineapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, hwndowner : LibC::HANDLE, lpszaddressin : LibC::LPWSTR) : Int32

  # Params # hline : UInt32 [In],dwcompletionid : UInt32 [In]
  fun lineUncompleteCall(hline : UInt32, dwcompletionid : UInt32) : Int32

  # Params # hcall : UInt32 [In]
  fun lineUnhold(hcall : UInt32) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : PSTR [In]
  fun lineUnpark(hline : UInt32, dwaddressid : UInt32, lphcall : UInt32*, lpszdestaddress : PSTR) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : PSTR [In]
  fun lineUnparkA(hline : UInt32, dwaddressid : UInt32, lphcall : UInt32*, lpszdestaddress : PSTR) : Int32

  # Params # hline : UInt32 [In],dwaddressid : UInt32 [In],lphcall : UInt32* [In],lpszdestaddress : LibC::LPWSTR [In]
  fun lineUnparkW(hline : UInt32, dwaddressid : UInt32, lphcall : UInt32*, lpszdestaddress : LibC::LPWSTR) : Int32

  # Params # hphone : UInt32 [In]
  fun phoneClose(hphone : UInt32) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : PSTR [In]
  fun phoneConfigDialog(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : PSTR [In]
  fun phoneConfigDialogA(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : PSTR) : Int32

  # Params # dwdeviceid : UInt32 [In],hwndowner : LibC::HANDLE [In],lpszdeviceclass : LibC::LPWSTR [In]
  fun phoneConfigDialogW(dwdeviceid : UInt32, hwndowner : LibC::HANDLE, lpszdeviceclass : LibC::LPWSTR) : Int32

  # Params # hphone : UInt32 [In],lpparams : Void* [In],dwsize : UInt32 [In]
  fun phoneDevSpecific(hphone : UInt32, lpparams : Void*, dwsize : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],lpbuttoninfo : PHONEBUTTONINFO* [In]
  fun phoneGetButtonInfo(hphone : UInt32, dwbuttonlampid : UInt32, lpbuttoninfo : PHONEBUTTONINFO*) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],lpbuttoninfo : PHONEBUTTONINFO* [In]
  fun phoneGetButtonInfoA(hphone : UInt32, dwbuttonlampid : UInt32, lpbuttoninfo : PHONEBUTTONINFO*) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],lpbuttoninfo : PHONEBUTTONINFO* [In]
  fun phoneGetButtonInfoW(hphone : UInt32, dwbuttonlampid : UInt32, lpbuttoninfo : PHONEBUTTONINFO*) : Int32

  # Params # hphone : UInt32 [In],dwdataid : UInt32 [In],lpdata : Void* [In],dwsize : UInt32 [In]
  fun phoneGetData(hphone : UInt32, dwdataid : UInt32, lpdata : Void*, dwsize : UInt32) : Int32

  # Params # hphoneapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lpphonecaps : PHONECAPS* [In]
  fun phoneGetDevCaps(hphoneapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lpphonecaps : PHONECAPS*) : Int32

  # Params # hphoneapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lpphonecaps : PHONECAPS* [In]
  fun phoneGetDevCapsA(hphoneapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lpphonecaps : PHONECAPS*) : Int32

  # Params # hphoneapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],lpphonecaps : PHONECAPS* [In]
  fun phoneGetDevCapsW(hphoneapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextversion : UInt32, lpphonecaps : PHONECAPS*) : Int32

  # Params # hphone : UInt32 [In],lpdisplay : VARSTRING* [In]
  fun phoneGetDisplay(hphone : UInt32, lpdisplay : VARSTRING*) : Int32

  # Params # hphone : UInt32 [In],dwhookswitchdev : UInt32 [In],lpdwgain : UInt32* [In]
  fun phoneGetGain(hphone : UInt32, dwhookswitchdev : UInt32, lpdwgain : UInt32*) : Int32

  # Params # hphone : UInt32 [In],lpdwhookswitchdevs : UInt32* [In]
  fun phoneGetHookSwitch(hphone : UInt32, lpdwhookswitchdevs : UInt32*) : Int32

  # Params # dwdeviceid : UInt32 [In],lpszdeviceclass : PSTR [In],lphicon : LibC::IntPtrT* [In]
  fun phoneGetIcon(dwdeviceid : UInt32, lpszdeviceclass : PSTR, lphicon : LibC::IntPtrT*) : Int32

  # Params # dwdeviceid : UInt32 [In],lpszdeviceclass : PSTR [In],lphicon : LibC::IntPtrT* [In]
  fun phoneGetIconA(dwdeviceid : UInt32, lpszdeviceclass : PSTR, lphicon : LibC::IntPtrT*) : Int32

  # Params # dwdeviceid : UInt32 [In],lpszdeviceclass : LibC::LPWSTR [In],lphicon : LibC::IntPtrT* [In]
  fun phoneGetIconW(dwdeviceid : UInt32, lpszdeviceclass : LibC::LPWSTR, lphicon : LibC::IntPtrT*) : Int32

  # Params # hphone : UInt32 [In],lpdeviceid : VARSTRING* [In],lpszdeviceclass : PSTR [In]
  fun phoneGetID(hphone : UInt32, lpdeviceid : VARSTRING*, lpszdeviceclass : PSTR) : Int32

  # Params # hphone : UInt32 [In],lpdeviceid : VARSTRING* [In],lpszdeviceclass : PSTR [In]
  fun phoneGetIDA(hphone : UInt32, lpdeviceid : VARSTRING*, lpszdeviceclass : PSTR) : Int32

  # Params # hphone : UInt32 [In],lpdeviceid : VARSTRING* [In],lpszdeviceclass : LibC::LPWSTR [In]
  fun phoneGetIDW(hphone : UInt32, lpdeviceid : VARSTRING*, lpszdeviceclass : LibC::LPWSTR) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],lpdwlampmode : UInt32* [In]
  fun phoneGetLamp(hphone : UInt32, dwbuttonlampid : UInt32, lpdwlampmode : UInt32*) : Int32

  # Params # hphoneapp : UInt32 [In],lpmessage : PHONEMESSAGE* [In],dwtimeout : UInt32 [In]
  fun phoneGetMessage(hphoneapp : UInt32, lpmessage : PHONEMESSAGE*, dwtimeout : UInt32) : Int32

  # Params # hphone : UInt32 [In],lpdwringmode : UInt32* [In],lpdwvolume : UInt32* [In]
  fun phoneGetRing(hphone : UInt32, lpdwringmode : UInt32*, lpdwvolume : UInt32*) : Int32

  # Params # hphone : UInt32 [In],lpphonestatus : PHONESTATUS* [In]
  fun phoneGetStatus(hphone : UInt32, lpphonestatus : PHONESTATUS*) : Int32

  # Params # hphone : UInt32 [In],lpphonestatus : PHONESTATUS* [In]
  fun phoneGetStatusA(hphone : UInt32, lpphonestatus : PHONESTATUS*) : Int32

  # Params # hphone : UInt32 [In],lpphonestatus : PHONESTATUS* [In]
  fun phoneGetStatusW(hphone : UInt32, lpphonestatus : PHONESTATUS*) : Int32

  # Params # hphone : UInt32 [In],lpdwphonestates : UInt32* [In],lpdwbuttonmodes : UInt32* [In],lpdwbuttonstates : UInt32* [In]
  fun phoneGetStatusMessages(hphone : UInt32, lpdwphonestates : UInt32*, lpdwbuttonmodes : UInt32*, lpdwbuttonstates : UInt32*) : Int32

  # Params # hphone : UInt32 [In],dwhookswitchdev : UInt32 [In],lpdwvolume : UInt32* [In]
  fun phoneGetVolume(hphone : UInt32, dwhookswitchdev : UInt32, lpdwvolume : UInt32*) : Int32

  # Params # lphphoneapp : UInt32* [In],hinstance : HINSTANCE [In],lpfncallback : PHONECALLBACK [In],lpszappname : PSTR [In],lpdwnumdevs : UInt32* [In]
  fun phoneInitialize(lphphoneapp : UInt32*, hinstance : HINSTANCE, lpfncallback : PHONECALLBACK, lpszappname : PSTR, lpdwnumdevs : UInt32*) : Int32

  # Params # lphphoneapp : UInt32* [In],hinstance : HINSTANCE [In],lpfncallback : PHONECALLBACK [In],lpszfriendlyappname : PSTR [In],lpdwnumdevs : UInt32* [In],lpdwapiversion : UInt32* [In],lpphoneinitializeexparams : PHONEINITIALIZEEXPARAMS* [In]
  fun phoneInitializeExA(lphphoneapp : UInt32*, hinstance : HINSTANCE, lpfncallback : PHONECALLBACK, lpszfriendlyappname : PSTR, lpdwnumdevs : UInt32*, lpdwapiversion : UInt32*, lpphoneinitializeexparams : PHONEINITIALIZEEXPARAMS*) : Int32

  # Params # lphphoneapp : UInt32* [In],hinstance : HINSTANCE [In],lpfncallback : PHONECALLBACK [In],lpszfriendlyappname : LibC::LPWSTR [In],lpdwnumdevs : UInt32* [In],lpdwapiversion : UInt32* [In],lpphoneinitializeexparams : PHONEINITIALIZEEXPARAMS* [In]
  fun phoneInitializeExW(lphphoneapp : UInt32*, hinstance : HINSTANCE, lpfncallback : PHONECALLBACK, lpszfriendlyappname : LibC::LPWSTR, lpdwnumdevs : UInt32*, lpdwapiversion : UInt32*, lpphoneinitializeexparams : PHONEINITIALIZEEXPARAMS*) : Int32

  # Params # hphoneapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapilowversion : UInt32 [In],dwapihighversion : UInt32 [In],lpdwapiversion : UInt32* [In],lpextensionid : PHONEEXTENSIONID* [In]
  fun phoneNegotiateAPIVersion(hphoneapp : UInt32, dwdeviceid : UInt32, dwapilowversion : UInt32, dwapihighversion : UInt32, lpdwapiversion : UInt32*, lpextensionid : PHONEEXTENSIONID*) : Int32

  # Params # hphoneapp : UInt32 [In],dwdeviceid : UInt32 [In],dwapiversion : UInt32 [In],dwextlowversion : UInt32 [In],dwexthighversion : UInt32 [In],lpdwextversion : UInt32* [In]
  fun phoneNegotiateExtVersion(hphoneapp : UInt32, dwdeviceid : UInt32, dwapiversion : UInt32, dwextlowversion : UInt32, dwexthighversion : UInt32, lpdwextversion : UInt32*) : Int32

  # Params # hphoneapp : UInt32 [In],dwdeviceid : UInt32 [In],lphphone : UInt32* [In],dwapiversion : UInt32 [In],dwextversion : UInt32 [In],dwcallbackinstance : LibC::UINT_PTR [In],dwprivilege : UInt32 [In]
  fun phoneOpen(hphoneapp : UInt32, dwdeviceid : UInt32, lphphone : UInt32*, dwapiversion : UInt32, dwextversion : UInt32, dwcallbackinstance : LibC::UINT_PTR, dwprivilege : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],lpbuttoninfo : PHONEBUTTONINFO* [In]
  fun phoneSetButtonInfo(hphone : UInt32, dwbuttonlampid : UInt32, lpbuttoninfo : PHONEBUTTONINFO*) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],lpbuttoninfo : PHONEBUTTONINFO* [In]
  fun phoneSetButtonInfoA(hphone : UInt32, dwbuttonlampid : UInt32, lpbuttoninfo : PHONEBUTTONINFO*) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],lpbuttoninfo : PHONEBUTTONINFO* [In]
  fun phoneSetButtonInfoW(hphone : UInt32, dwbuttonlampid : UInt32, lpbuttoninfo : PHONEBUTTONINFO*) : Int32

  # Params # hphone : UInt32 [In],dwdataid : UInt32 [In],lpdata : Void* [In],dwsize : UInt32 [In]
  fun phoneSetData(hphone : UInt32, dwdataid : UInt32, lpdata : Void*, dwsize : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwrow : UInt32 [In],dwcolumn : UInt32 [In],lpsdisplay : PSTR [In],dwsize : UInt32 [In]
  fun phoneSetDisplay(hphone : UInt32, dwrow : UInt32, dwcolumn : UInt32, lpsdisplay : PSTR, dwsize : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwhookswitchdev : UInt32 [In],dwgain : UInt32 [In]
  fun phoneSetGain(hphone : UInt32, dwhookswitchdev : UInt32, dwgain : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwhookswitchdevs : UInt32 [In],dwhookswitchmode : UInt32 [In]
  fun phoneSetHookSwitch(hphone : UInt32, dwhookswitchdevs : UInt32, dwhookswitchmode : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwbuttonlampid : UInt32 [In],dwlampmode : UInt32 [In]
  fun phoneSetLamp(hphone : UInt32, dwbuttonlampid : UInt32, dwlampmode : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwringmode : UInt32 [In],dwvolume : UInt32 [In]
  fun phoneSetRing(hphone : UInt32, dwringmode : UInt32, dwvolume : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwphonestates : UInt32 [In],dwbuttonmodes : UInt32 [In],dwbuttonstates : UInt32 [In]
  fun phoneSetStatusMessages(hphone : UInt32, dwphonestates : UInt32, dwbuttonmodes : UInt32, dwbuttonstates : UInt32) : Int32

  # Params # hphone : UInt32 [In],dwhookswitchdev : UInt32 [In],dwvolume : UInt32 [In]
  fun phoneSetVolume(hphone : UInt32, dwhookswitchdev : UInt32, dwvolume : UInt32) : Int32

  # Params # hphoneapp : UInt32 [In]
  fun phoneShutdown(hphoneapp : UInt32) : Int32

  # Params # lpszcountrycode : UInt8* [In],lpszcitycode : UInt8* [In]
  fun tapiGetLocationInfo(lpszcountrycode : UInt8*, lpszcitycode : UInt8*) : Int32

  # Params # lpszcountrycode : UInt8* [In],lpszcitycode : UInt8* [In]
  fun tapiGetLocationInfoA(lpszcountrycode : UInt8*, lpszcitycode : UInt8*) : Int32

  # Params # lpszcountrycodew : Char* [In],lpszcitycodew : Char* [In]
  fun tapiGetLocationInfoW(lpszcountrycodew : Char*, lpszcitycodew : Char*) : Int32

  # Params # hwnd : LibC::HANDLE [In],wrequestid : LibC::UINT_PTR [In]
  fun tapiRequestDrop(hwnd : LibC::HANDLE, wrequestid : LibC::UINT_PTR) : Int32

  # Params # lpszdestaddress : PSTR [In],lpszappname : PSTR [In],lpszcalledparty : PSTR [In],lpszcomment : PSTR [In]
  fun tapiRequestMakeCall(lpszdestaddress : PSTR, lpszappname : PSTR, lpszcalledparty : PSTR, lpszcomment : PSTR) : Int32

  # Params # lpszdestaddress : PSTR [In],lpszappname : PSTR [In],lpszcalledparty : PSTR [In],lpszcomment : PSTR [In]
  fun tapiRequestMakeCallA(lpszdestaddress : PSTR, lpszappname : PSTR, lpszcalledparty : PSTR, lpszcomment : PSTR) : Int32

  # Params # lpszdestaddress : LibC::LPWSTR [In],lpszappname : LibC::LPWSTR [In],lpszcalledparty : LibC::LPWSTR [In],lpszcomment : LibC::LPWSTR [In]
  fun tapiRequestMakeCallW(lpszdestaddress : LibC::LPWSTR, lpszappname : LibC::LPWSTR, lpszcalledparty : LibC::LPWSTR, lpszcomment : LibC::LPWSTR) : Int32

  # Params # hwnd : LibC::HANDLE [In],wrequestid : LibC::UINT_PTR [In],lpszdeviceclass : PSTR [In],lpdeviceid : PSTR [In],dwsize : UInt32 [In],dwsecure : UInt32 [In],lpszdestaddress : PSTR [In],lpszappname : PSTR [In],lpszcalledparty : PSTR [In],lpszcomment : PSTR [In]
  fun tapiRequestMediaCall(hwnd : LibC::HANDLE, wrequestid : LibC::UINT_PTR, lpszdeviceclass : PSTR, lpdeviceid : PSTR, dwsize : UInt32, dwsecure : UInt32, lpszdestaddress : PSTR, lpszappname : PSTR, lpszcalledparty : PSTR, lpszcomment : PSTR) : Int32

  # Params # hwnd : LibC::HANDLE [In],wrequestid : LibC::UINT_PTR [In],lpszdeviceclass : PSTR [In],lpdeviceid : PSTR [In],dwsize : UInt32 [In],dwsecure : UInt32 [In],lpszdestaddress : PSTR [In],lpszappname : PSTR [In],lpszcalledparty : PSTR [In],lpszcomment : PSTR [In]
  fun tapiRequestMediaCallA(hwnd : LibC::HANDLE, wrequestid : LibC::UINT_PTR, lpszdeviceclass : PSTR, lpdeviceid : PSTR, dwsize : UInt32, dwsecure : UInt32, lpszdestaddress : PSTR, lpszappname : PSTR, lpszcalledparty : PSTR, lpszcomment : PSTR) : Int32

  # Params # hwnd : LibC::HANDLE [In],wrequestid : LibC::UINT_PTR [In],lpszdeviceclass : LibC::LPWSTR [In],lpdeviceid : LibC::LPWSTR [In],dwsize : UInt32 [In],dwsecure : UInt32 [In],lpszdestaddress : LibC::LPWSTR [In],lpszappname : LibC::LPWSTR [In],lpszcalledparty : LibC::LPWSTR [In],lpszcomment : LibC::LPWSTR [In]
  fun tapiRequestMediaCallW(hwnd : LibC::HANDLE, wrequestid : LibC::UINT_PTR, lpszdeviceclass : LibC::LPWSTR, lpdeviceid : LibC::LPWSTR, dwsize : UInt32, dwsecure : UInt32, lpszdestaddress : LibC::LPWSTR, lpszappname : LibC::LPWSTR, lpszcalledparty : LibC::LPWSTR, lpszcomment : LibC::LPWSTR) : Int32

  # Params # lpvsupport : Void* [In],lpstream : IStream [In],lpszstreamname : Int8* [In],ulflags : UInt32 [In],lpmessage : IMessage [In],wkeyval : UInt16 [In],lpptnef : ITnef* [In]
  fun OpenTnefStream(lpvsupport : Void*, lpstream : IStream, lpszstreamname : Int8*, ulflags : UInt32, lpmessage : IMessage, wkeyval : UInt16, lpptnef : ITnef*) : HRESULT

  # Params # lpvsupport : Void* [In],lpstream : IStream [In],lpszstreamname : Int8* [In],ulflags : UInt32 [In],lpmessage : IMessage [In],wkeyval : UInt16 [In],lpadressbook : IAddrBook [In],lpptnef : ITnef* [In]
  fun OpenTnefStreamEx(lpvsupport : Void*, lpstream : IStream, lpszstreamname : Int8*, ulflags : UInt32, lpmessage : IMessage, wkeyval : UInt16, lpadressbook : IAddrBook, lpptnef : ITnef*) : HRESULT

  # Params # lpstream : IStream [In],lpulcodepage : UInt32* [In],lpulsubcodepage : UInt32* [In]
  fun GetTnefStreamCodepage(lpstream : IStream, lpulcodepage : UInt32*, lpulsubcodepage : UInt32*) : HRESULT
end
