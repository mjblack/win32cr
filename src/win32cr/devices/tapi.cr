require "./../system/com.cr"
require "./../foundation.cr"
require "./../media/media_foundation.cr"
require "./../media/direct_show.cr"
require "./../system/address_book.cr"

module Win32cr::Devices::Tapi
  alias LINECALLBACK = Proc(UInt32, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Void)*

  alias PHONECALLBACK = Proc(UInt32, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Void)*

  alias ASYNC_COMPLETION = Proc(UInt32, Int32, Void)*

  alias LINEEVENT = Proc(Win32cr::Devices::Tapi::HTAPILINE__*, Win32cr::Devices::Tapi::HTAPICALL__*, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Void)*

  alias PHONEEVENT = Proc(Win32cr::Devices::Tapi::HTAPIPHONE__*, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Void)*

  alias TUISPIDLLCALLBACK = Proc(LibC::UIntPtrT, UInt32, Void*, UInt32, Int32)*

  alias LPOPENTNEFSTREAM = Proc(Void*, Void*, Int8*, UInt32, Void*, UInt16, Void**, Win32cr::Foundation::HRESULT)*

  alias LPOPENTNEFSTREAMEX = Proc(Void*, Void*, Int8*, UInt32, Void*, UInt16, Void*, Void**, Win32cr::Foundation::HRESULT)*

  alias LPGETTNEFSTREAMCODEPAGE = Proc(Void*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)*

  TAPI_CURRENT_VERSION = 131074_u32
  LINE_ADDRESSSTATE = 0_i32
  LINE_CALLINFO = 1_i32
  LINE_CALLSTATE = 2_i32
  LINE_CLOSE = 3_i32
  LINE_DEVSPECIFIC = 4_i32
  LINE_DEVSPECIFICFEATURE = 5_i32
  LINE_GATHERDIGITS = 6_i32
  LINE_GENERATE = 7_i32
  LINE_LINEDEVSTATE = 8_i32
  LINE_MONITORDIGITS = 9_i32
  LINE_MONITORMEDIA = 10_i32
  LINE_MONITORTONE = 11_i32
  LINE_REPLY = 12_i32
  LINE_REQUEST = 13_i32
  PHONE_BUTTON = 14_i32
  PHONE_CLOSE = 15_i32
  PHONE_DEVSPECIFIC = 16_i32
  PHONE_REPLY = 17_i32
  PHONE_STATE = 18_i32
  LINE_CREATE = 19_i32
  PHONE_CREATE = 20_i32
  LINE_AGENTSPECIFIC = 21_i32
  LINE_AGENTSTATUS = 22_i32
  LINE_APPNEWCALL = 23_i32
  LINE_PROXYREQUEST = 24_i32
  LINE_REMOVE = 25_i32
  PHONE_REMOVE = 26_i32
  LINE_AGENTSESSIONSTATUS = 27_i32
  LINE_QUEUESTATUS = 28_i32
  LINE_AGENTSTATUSEX = 29_i32
  LINE_GROUPSTATUS = 30_i32
  LINE_PROXYSTATUS = 31_i32
  LINE_APPNEWCALLHUB = 32_i32
  LINE_CALLHUBCLOSE = 33_i32
  LINE_DEVSPECIFICEX = 34_i32
  INITIALIZE_NEGOTIATION = 4294967295_u32
  LINEADDRCAPFLAGS_FWDNUMRINGS = 1_u32
  LINEADDRCAPFLAGS_PICKUPGROUPID = 2_u32
  LINEADDRCAPFLAGS_SECURE = 4_u32
  LINEADDRCAPFLAGS_BLOCKIDDEFAULT = 8_u32
  LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = 16_u32
  LINEADDRCAPFLAGS_DIALED = 32_u32
  LINEADDRCAPFLAGS_ORIGOFFHOOK = 64_u32
  LINEADDRCAPFLAGS_DESTOFFHOOK = 128_u32
  LINEADDRCAPFLAGS_FWDCONSULT = 256_u32
  LINEADDRCAPFLAGS_SETUPCONFNULL = 512_u32
  LINEADDRCAPFLAGS_AUTORECONNECT = 1024_u32
  LINEADDRCAPFLAGS_COMPLETIONID = 2048_u32
  LINEADDRCAPFLAGS_TRANSFERHELD = 4096_u32
  LINEADDRCAPFLAGS_TRANSFERMAKE = 8192_u32
  LINEADDRCAPFLAGS_CONFERENCEHELD = 16384_u32
  LINEADDRCAPFLAGS_CONFERENCEMAKE = 32768_u32
  LINEADDRCAPFLAGS_PARTIALDIAL = 65536_u32
  LINEADDRCAPFLAGS_FWDSTATUSVALID = 131072_u32
  LINEADDRCAPFLAGS_FWDINTEXTADDR = 262144_u32
  LINEADDRCAPFLAGS_FWDBUSYNAADDR = 524288_u32
  LINEADDRCAPFLAGS_ACCEPTTOALERT = 1048576_u32
  LINEADDRCAPFLAGS_CONFDROP = 2097152_u32
  LINEADDRCAPFLAGS_PICKUPCALLWAIT = 4194304_u32
  LINEADDRCAPFLAGS_PREDICTIVEDIALER = 8388608_u32
  LINEADDRCAPFLAGS_QUEUE = 16777216_u32
  LINEADDRCAPFLAGS_ROUTEPOINT = 33554432_u32
  LINEADDRCAPFLAGS_HOLDMAKESNEW = 67108864_u32
  LINEADDRCAPFLAGS_NOINTERNALCALLS = 134217728_u32
  LINEADDRCAPFLAGS_NOEXTERNALCALLS = 268435456_u32
  LINEADDRCAPFLAGS_SETCALLINGID = 536870912_u32
  LINEADDRCAPFLAGS_ACDGROUP = 1073741824_u32
  LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = 2147483648_u32
  LINEADDRESSMODE_ADDRESSID = 1_u32
  LINEADDRESSMODE_DIALABLEADDR = 2_u32
  LINEADDRESSSHARING_PRIVATE = 1_u32
  LINEADDRESSSHARING_BRIDGEDEXCL = 2_u32
  LINEADDRESSSHARING_BRIDGEDNEW = 4_u32
  LINEADDRESSSHARING_BRIDGEDSHARED = 8_u32
  LINEADDRESSSHARING_MONITORED = 16_u32
  LINEADDRESSSTATE_OTHER = 1_u32
  LINEADDRESSSTATE_DEVSPECIFIC = 2_u32
  LINEADDRESSSTATE_INUSEZERO = 4_u32
  LINEADDRESSSTATE_INUSEONE = 8_u32
  LINEADDRESSSTATE_INUSEMANY = 16_u32
  LINEADDRESSSTATE_NUMCALLS = 32_u32
  LINEADDRESSSTATE_FORWARD = 64_u32
  LINEADDRESSSTATE_TERMINALS = 128_u32
  LINEADDRESSSTATE_CAPSCHANGE = 256_u32
  LINEADDRESSTYPE_PHONENUMBER = 1_u32
  LINEADDRESSTYPE_SDP = 2_u32
  LINEADDRESSTYPE_EMAILNAME = 4_u32
  LINEADDRESSTYPE_DOMAINNAME = 8_u32
  LINEADDRESSTYPE_IPADDRESS = 16_u32
  LINEADDRFEATURE_FORWARD = 1_u32
  LINEADDRFEATURE_MAKECALL = 2_u32
  LINEADDRFEATURE_PICKUP = 4_u32
  LINEADDRFEATURE_SETMEDIACONTROL = 8_u32
  LINEADDRFEATURE_SETTERMINAL = 16_u32
  LINEADDRFEATURE_SETUPCONF = 32_u32
  LINEADDRFEATURE_UNCOMPLETECALL = 64_u32
  LINEADDRFEATURE_UNPARK = 128_u32
  LINEADDRFEATURE_PICKUPHELD = 256_u32
  LINEADDRFEATURE_PICKUPGROUP = 512_u32
  LINEADDRFEATURE_PICKUPDIRECT = 1024_u32
  LINEADDRFEATURE_PICKUPWAITING = 2048_u32
  LINEADDRFEATURE_FORWARDFWD = 4096_u32
  LINEADDRFEATURE_FORWARDDND = 8192_u32
  LINEAGENTFEATURE_SETAGENTGROUP = 1_u32
  LINEAGENTFEATURE_SETAGENTSTATE = 2_u32
  LINEAGENTFEATURE_SETAGENTACTIVITY = 4_u32
  LINEAGENTFEATURE_AGENTSPECIFIC = 8_u32
  LINEAGENTFEATURE_GETAGENTACTIVITYLIST = 16_u32
  LINEAGENTFEATURE_GETAGENTGROUP = 32_u32
  LINEAGENTSTATE_LOGGEDOFF = 1_u32
  LINEAGENTSTATE_NOTREADY = 2_u32
  LINEAGENTSTATE_READY = 4_u32
  LINEAGENTSTATE_BUSYACD = 8_u32
  LINEAGENTSTATE_BUSYINCOMING = 16_u32
  LINEAGENTSTATE_BUSYOUTBOUND = 32_u32
  LINEAGENTSTATE_BUSYOTHER = 64_u32
  LINEAGENTSTATE_WORKINGAFTERCALL = 128_u32
  LINEAGENTSTATE_UNKNOWN = 256_u32
  LINEAGENTSTATE_UNAVAIL = 512_u32
  LINEAGENTSTATUS_GROUP = 1_u32
  LINEAGENTSTATUS_STATE = 2_u32
  LINEAGENTSTATUS_NEXTSTATE = 4_u32
  LINEAGENTSTATUS_ACTIVITY = 8_u32
  LINEAGENTSTATUS_ACTIVITYLIST = 16_u32
  LINEAGENTSTATUS_GROUPLIST = 32_u32
  LINEAGENTSTATUS_CAPSCHANGE = 64_u32
  LINEAGENTSTATUS_VALIDSTATES = 128_u32
  LINEAGENTSTATUS_VALIDNEXTSTATES = 256_u32
  LINEAGENTSTATEEX_NOTREADY = 1_u32
  LINEAGENTSTATEEX_READY = 2_u32
  LINEAGENTSTATEEX_BUSYACD = 4_u32
  LINEAGENTSTATEEX_BUSYINCOMING = 8_u32
  LINEAGENTSTATEEX_BUSYOUTGOING = 16_u32
  LINEAGENTSTATEEX_UNKNOWN = 32_u32
  LINEAGENTSTATEEX_RELEASED = 64_u32
  LINEAGENTSTATUSEX_NEWAGENT = 1_u32
  LINEAGENTSTATUSEX_STATE = 2_u32
  LINEAGENTSTATUSEX_UPDATEINFO = 4_u32
  LINEAGENTSESSIONSTATE_NOTREADY = 1_u32
  LINEAGENTSESSIONSTATE_READY = 2_u32
  LINEAGENTSESSIONSTATE_BUSYONCALL = 4_u32
  LINEAGENTSESSIONSTATE_BUSYWRAPUP = 8_u32
  LINEAGENTSESSIONSTATE_ENDED = 16_u32
  LINEAGENTSESSIONSTATE_RELEASED = 32_u32
  LINEAGENTSESSIONSTATUS_NEWSESSION = 1_u32
  LINEAGENTSESSIONSTATUS_STATE = 2_u32
  LINEAGENTSESSIONSTATUS_UPDATEINFO = 4_u32
  LINEQUEUESTATUS_UPDATEINFO = 1_u32
  LINEQUEUESTATUS_NEWQUEUE = 2_u32
  LINEQUEUESTATUS_QUEUEREMOVED = 4_u32
  LINEGROUPSTATUS_NEWGROUP = 1_u32
  LINEGROUPSTATUS_GROUPREMOVED = 2_u32
  LINEPROXYSTATUS_OPEN = 1_u32
  LINEPROXYSTATUS_CLOSE = 2_u32
  LINEPROXYSTATUS_ALLOPENFORACD = 4_u32
  LINEANSWERMODE_NONE = 1_u32
  LINEANSWERMODE_DROP = 2_u32
  LINEANSWERMODE_HOLD = 4_u32
  LINEBEARERMODE_VOICE = 1_u32
  LINEBEARERMODE_SPEECH = 2_u32
  LINEBEARERMODE_MULTIUSE = 4_u32
  LINEBEARERMODE_DATA = 8_u32
  LINEBEARERMODE_ALTSPEECHDATA = 16_u32
  LINEBEARERMODE_NONCALLSIGNALING = 32_u32
  LINEBEARERMODE_PASSTHROUGH = 64_u32
  LINEBEARERMODE_RESTRICTEDDATA = 128_u32
  LINEBUSYMODE_STATION = 1_u32
  LINEBUSYMODE_TRUNK = 2_u32
  LINEBUSYMODE_UNKNOWN = 4_u32
  LINEBUSYMODE_UNAVAIL = 8_u32
  LINECALLCOMPLCOND_BUSY = 1_u32
  LINECALLCOMPLCOND_NOANSWER = 2_u32
  LINECALLCOMPLMODE_CAMPON = 1_u32
  LINECALLCOMPLMODE_CALLBACK = 2_u32
  LINECALLCOMPLMODE_INTRUDE = 4_u32
  LINECALLCOMPLMODE_MESSAGE = 8_u32
  LINECALLFEATURE_ACCEPT = 1_u32
  LINECALLFEATURE_ADDTOCONF = 2_u32
  LINECALLFEATURE_ANSWER = 4_u32
  LINECALLFEATURE_BLINDTRANSFER = 8_u32
  LINECALLFEATURE_COMPLETECALL = 16_u32
  LINECALLFEATURE_COMPLETETRANSF = 32_u32
  LINECALLFEATURE_DIAL = 64_u32
  LINECALLFEATURE_DROP = 128_u32
  LINECALLFEATURE_GATHERDIGITS = 256_u32
  LINECALLFEATURE_GENERATEDIGITS = 512_u32
  LINECALLFEATURE_GENERATETONE = 1024_u32
  LINECALLFEATURE_HOLD = 2048_u32
  LINECALLFEATURE_MONITORDIGITS = 4096_u32
  LINECALLFEATURE_MONITORMEDIA = 8192_u32
  LINECALLFEATURE_MONITORTONES = 16384_u32
  LINECALLFEATURE_PARK = 32768_u32
  LINECALLFEATURE_PREPAREADDCONF = 65536_u32
  LINECALLFEATURE_REDIRECT = 131072_u32
  LINECALLFEATURE_REMOVEFROMCONF = 262144_u32
  LINECALLFEATURE_SECURECALL = 524288_u32
  LINECALLFEATURE_SENDUSERUSER = 1048576_u32
  LINECALLFEATURE_SETCALLPARAMS = 2097152_u32
  LINECALLFEATURE_SETMEDIACONTROL = 4194304_u32
  LINECALLFEATURE_SETTERMINAL = 8388608_u32
  LINECALLFEATURE_SETUPCONF = 16777216_u32
  LINECALLFEATURE_SETUPTRANSFER = 33554432_u32
  LINECALLFEATURE_SWAPHOLD = 67108864_u32
  LINECALLFEATURE_UNHOLD = 134217728_u32
  LINECALLFEATURE_RELEASEUSERUSERINFO = 268435456_u32
  LINECALLFEATURE_SETTREATMENT = 536870912_u32
  LINECALLFEATURE_SETQOS = 1073741824_u32
  LINECALLFEATURE_SETCALLDATA = 2147483648_u32
  LINECALLFEATURE2_NOHOLDCONFERENCE = 1_u32
  LINECALLFEATURE2_ONESTEPTRANSFER = 2_u32
  LINECALLFEATURE2_COMPLCAMPON = 4_u32
  LINECALLFEATURE2_COMPLCALLBACK = 8_u32
  LINECALLFEATURE2_COMPLINTRUDE = 16_u32
  LINECALLFEATURE2_COMPLMESSAGE = 32_u32
  LINECALLFEATURE2_TRANSFERNORM = 64_u32
  LINECALLFEATURE2_TRANSFERCONF = 128_u32
  LINECALLFEATURE2_PARKDIRECT = 256_u32
  LINECALLFEATURE2_PARKNONDIRECT = 512_u32
  LINECALLHUBTRACKING_NONE = 0_u32
  LINECALLHUBTRACKING_PROVIDERLEVEL = 1_u32
  LINECALLHUBTRACKING_ALLCALLS = 2_u32
  LINECALLINFOSTATE_OTHER = 1_u32
  LINECALLINFOSTATE_DEVSPECIFIC = 2_u32
  LINECALLINFOSTATE_BEARERMODE = 4_u32
  LINECALLINFOSTATE_RATE = 8_u32
  LINECALLINFOSTATE_MEDIAMODE = 16_u32
  LINECALLINFOSTATE_APPSPECIFIC = 32_u32
  LINECALLINFOSTATE_CALLID = 64_u32
  LINECALLINFOSTATE_RELATEDCALLID = 128_u32
  LINECALLINFOSTATE_ORIGIN = 256_u32
  LINECALLINFOSTATE_REASON = 512_u32
  LINECALLINFOSTATE_COMPLETIONID = 1024_u32
  LINECALLINFOSTATE_NUMOWNERINCR = 2048_u32
  LINECALLINFOSTATE_NUMOWNERDECR = 4096_u32
  LINECALLINFOSTATE_NUMMONITORS = 8192_u32
  LINECALLINFOSTATE_TRUNK = 16384_u32
  LINECALLINFOSTATE_CALLERID = 32768_u32
  LINECALLINFOSTATE_CALLEDID = 65536_u32
  LINECALLINFOSTATE_CONNECTEDID = 131072_u32
  LINECALLINFOSTATE_REDIRECTIONID = 262144_u32
  LINECALLINFOSTATE_REDIRECTINGID = 524288_u32
  LINECALLINFOSTATE_DISPLAY = 1048576_u32
  LINECALLINFOSTATE_USERUSERINFO = 2097152_u32
  LINECALLINFOSTATE_HIGHLEVELCOMP = 4194304_u32
  LINECALLINFOSTATE_LOWLEVELCOMP = 8388608_u32
  LINECALLINFOSTATE_CHARGINGINFO = 16777216_u32
  LINECALLINFOSTATE_TERMINAL = 33554432_u32
  LINECALLINFOSTATE_DIALPARAMS = 67108864_u32
  LINECALLINFOSTATE_MONITORMODES = 134217728_u32
  LINECALLINFOSTATE_TREATMENT = 268435456_u32
  LINECALLINFOSTATE_QOS = 536870912_u32
  LINECALLINFOSTATE_CALLDATA = 1073741824_u32
  LINECALLORIGIN_OUTBOUND = 1_u32
  LINECALLORIGIN_INTERNAL = 2_u32
  LINECALLORIGIN_EXTERNAL = 4_u32
  LINECALLORIGIN_UNKNOWN = 16_u32
  LINECALLORIGIN_UNAVAIL = 32_u32
  LINECALLORIGIN_CONFERENCE = 64_u32
  LINECALLORIGIN_INBOUND = 128_u32
  LINECALLPARAMFLAGS_SECURE = 1_u32
  LINECALLPARAMFLAGS_IDLE = 2_u32
  LINECALLPARAMFLAGS_BLOCKID = 4_u32
  LINECALLPARAMFLAGS_ORIGOFFHOOK = 8_u32
  LINECALLPARAMFLAGS_DESTOFFHOOK = 16_u32
  LINECALLPARAMFLAGS_NOHOLDCONFERENCE = 32_u32
  LINECALLPARAMFLAGS_PREDICTIVEDIAL = 64_u32
  LINECALLPARAMFLAGS_ONESTEPTRANSFER = 128_u32
  LINECALLPARTYID_BLOCKED = 1_u32
  LINECALLPARTYID_OUTOFAREA = 2_u32
  LINECALLPARTYID_NAME = 4_u32
  LINECALLPARTYID_ADDRESS = 8_u32
  LINECALLPARTYID_PARTIAL = 16_u32
  LINECALLPARTYID_UNKNOWN = 32_u32
  LINECALLPARTYID_UNAVAIL = 64_u32
  LINECALLPRIVILEGE_NONE = 1_u32
  LINECALLPRIVILEGE_MONITOR = 2_u32
  LINECALLPRIVILEGE_OWNER = 4_u32
  LINECALLREASON_DIRECT = 1_u32
  LINECALLREASON_FWDBUSY = 2_u32
  LINECALLREASON_FWDNOANSWER = 4_u32
  LINECALLREASON_FWDUNCOND = 8_u32
  LINECALLREASON_PICKUP = 16_u32
  LINECALLREASON_UNPARK = 32_u32
  LINECALLREASON_REDIRECT = 64_u32
  LINECALLREASON_CALLCOMPLETION = 128_u32
  LINECALLREASON_TRANSFER = 256_u32
  LINECALLREASON_REMINDER = 512_u32
  LINECALLREASON_UNKNOWN = 1024_u32
  LINECALLREASON_UNAVAIL = 2048_u32
  LINECALLREASON_INTRUDE = 4096_u32
  LINECALLREASON_PARKED = 8192_u32
  LINECALLREASON_CAMPEDON = 16384_u32
  LINECALLREASON_ROUTEREQUEST = 32768_u32
  LINECALLSELECT_LINE = 1_u32
  LINECALLSELECT_ADDRESS = 2_u32
  LINECALLSELECT_CALL = 4_u32
  LINECALLSELECT_DEVICEID = 8_u32
  LINECALLSELECT_CALLID = 16_u32
  LINECALLSTATE_IDLE = 1_u32
  LINECALLSTATE_OFFERING = 2_u32
  LINECALLSTATE_ACCEPTED = 4_u32
  LINECALLSTATE_DIALTONE = 8_u32
  LINECALLSTATE_DIALING = 16_u32
  LINECALLSTATE_RINGBACK = 32_u32
  LINECALLSTATE_BUSY = 64_u32
  LINECALLSTATE_SPECIALINFO = 128_u32
  LINECALLSTATE_CONNECTED = 256_u32
  LINECALLSTATE_PROCEEDING = 512_u32
  LINECALLSTATE_ONHOLD = 1024_u32
  LINECALLSTATE_CONFERENCED = 2048_u32
  LINECALLSTATE_ONHOLDPENDCONF = 4096_u32
  LINECALLSTATE_ONHOLDPENDTRANSFER = 8192_u32
  LINECALLSTATE_DISCONNECTED = 16384_u32
  LINECALLSTATE_UNKNOWN = 32768_u32
  LINECALLTREATMENT_SILENCE = 1_u32
  LINECALLTREATMENT_RINGBACK = 2_u32
  LINECALLTREATMENT_BUSY = 3_u32
  LINECALLTREATMENT_MUSIC = 4_u32
  LINECARDOPTION_PREDEFINED = 1_u32
  LINECARDOPTION_HIDDEN = 2_u32
  LINECONNECTEDMODE_ACTIVE = 1_u32
  LINECONNECTEDMODE_INACTIVE = 2_u32
  LINECONNECTEDMODE_ACTIVEHELD = 4_u32
  LINECONNECTEDMODE_INACTIVEHELD = 8_u32
  LINECONNECTEDMODE_CONFIRMED = 16_u32
  LINEDEVCAPFLAGS_CROSSADDRCONF = 1_u32
  LINEDEVCAPFLAGS_HIGHLEVCOMP = 2_u32
  LINEDEVCAPFLAGS_LOWLEVCOMP = 4_u32
  LINEDEVCAPFLAGS_MEDIACONTROL = 8_u32
  LINEDEVCAPFLAGS_MULTIPLEADDR = 16_u32
  LINEDEVCAPFLAGS_CLOSEDROP = 32_u32
  LINEDEVCAPFLAGS_DIALBILLING = 64_u32
  LINEDEVCAPFLAGS_DIALQUIET = 128_u32
  LINEDEVCAPFLAGS_DIALDIALTONE = 256_u32
  LINEDEVCAPFLAGS_MSP = 512_u32
  LINEDEVCAPFLAGS_CALLHUB = 1024_u32
  LINEDEVCAPFLAGS_CALLHUBTRACKING = 2048_u32
  LINEDEVCAPFLAGS_PRIVATEOBJECTS = 4096_u32
  LINEDEVCAPFLAGS_LOCAL = 8192_u32
  LINEDEVSTATE_OTHER = 1_u32
  LINEDEVSTATE_RINGING = 2_u32
  LINEDEVSTATE_CONNECTED = 4_u32
  LINEDEVSTATE_DISCONNECTED = 8_u32
  LINEDEVSTATE_MSGWAITON = 16_u32
  LINEDEVSTATE_MSGWAITOFF = 32_u32
  LINEDEVSTATE_INSERVICE = 64_u32
  LINEDEVSTATE_OUTOFSERVICE = 128_u32
  LINEDEVSTATE_MAINTENANCE = 256_u32
  LINEDEVSTATE_OPEN = 512_u32
  LINEDEVSTATE_CLOSE = 1024_u32
  LINEDEVSTATE_NUMCALLS = 2048_u32
  LINEDEVSTATE_NUMCOMPLETIONS = 4096_u32
  LINEDEVSTATE_TERMINALS = 8192_u32
  LINEDEVSTATE_ROAMMODE = 16384_u32
  LINEDEVSTATE_BATTERY = 32768_u32
  LINEDEVSTATE_SIGNAL = 65536_u32
  LINEDEVSTATE_DEVSPECIFIC = 131072_u32
  LINEDEVSTATE_REINIT = 262144_u32
  LINEDEVSTATE_LOCK = 524288_u32
  LINEDEVSTATE_CAPSCHANGE = 1048576_u32
  LINEDEVSTATE_CONFIGCHANGE = 2097152_u32
  LINEDEVSTATE_TRANSLATECHANGE = 4194304_u32
  LINEDEVSTATE_COMPLCANCEL = 8388608_u32
  LINEDEVSTATE_REMOVED = 16777216_u32
  LINEDEVSTATUSFLAGS_CONNECTED = 1_u32
  LINEDEVSTATUSFLAGS_MSGWAIT = 2_u32
  LINEDEVSTATUSFLAGS_INSERVICE = 4_u32
  LINEDEVSTATUSFLAGS_LOCKED = 8_u32
  LINEDIALTONEMODE_NORMAL = 1_u32
  LINEDIALTONEMODE_SPECIAL = 2_u32
  LINEDIALTONEMODE_INTERNAL = 4_u32
  LINEDIALTONEMODE_EXTERNAL = 8_u32
  LINEDIALTONEMODE_UNKNOWN = 16_u32
  LINEDIALTONEMODE_UNAVAIL = 32_u32
  LINEDIGITMODE_PULSE = 1_u32
  LINEDIGITMODE_DTMF = 2_u32
  LINEDIGITMODE_DTMFEND = 4_u32
  LINEDISCONNECTMODE_NORMAL = 1_u32
  LINEDISCONNECTMODE_UNKNOWN = 2_u32
  LINEDISCONNECTMODE_REJECT = 4_u32
  LINEDISCONNECTMODE_PICKUP = 8_u32
  LINEDISCONNECTMODE_FORWARDED = 16_u32
  LINEDISCONNECTMODE_BUSY = 32_u32
  LINEDISCONNECTMODE_NOANSWER = 64_u32
  LINEDISCONNECTMODE_BADADDRESS = 128_u32
  LINEDISCONNECTMODE_UNREACHABLE = 256_u32
  LINEDISCONNECTMODE_CONGESTION = 512_u32
  LINEDISCONNECTMODE_INCOMPATIBLE = 1024_u32
  LINEDISCONNECTMODE_UNAVAIL = 2048_u32
  LINEDISCONNECTMODE_NODIALTONE = 4096_u32
  LINEDISCONNECTMODE_NUMBERCHANGED = 8192_u32
  LINEDISCONNECTMODE_OUTOFORDER = 16384_u32
  LINEDISCONNECTMODE_TEMPFAILURE = 32768_u32
  LINEDISCONNECTMODE_QOSUNAVAIL = 65536_u32
  LINEDISCONNECTMODE_BLOCKED = 131072_u32
  LINEDISCONNECTMODE_DONOTDISTURB = 262144_u32
  LINEDISCONNECTMODE_CANCELLED = 524288_u32
  LINEDISCONNECTMODE_DESTINATIONBARRED = 1048576_u32
  LINEDISCONNECTMODE_FDNRESTRICT = 2097152_u32
  LINEERR_ALLOCATED = 2147483649_u32
  LINEERR_BADDEVICEID = 2147483650_u32
  LINEERR_BEARERMODEUNAVAIL = 2147483651_u32
  LINEERR_CALLUNAVAIL = 2147483653_u32
  LINEERR_COMPLETIONOVERRUN = 2147483654_u32
  LINEERR_CONFERENCEFULL = 2147483655_u32
  LINEERR_DIALBILLING = 2147483656_u32
  LINEERR_DIALDIALTONE = 2147483657_u32
  LINEERR_DIALPROMPT = 2147483658_u32
  LINEERR_DIALQUIET = 2147483659_u32
  LINEERR_INCOMPATIBLEAPIVERSION = 2147483660_u32
  LINEERR_INCOMPATIBLEEXTVERSION = 2147483661_u32
  LINEERR_INIFILECORRUPT = 2147483662_u32
  LINEERR_INUSE = 2147483663_u32
  LINEERR_INVALADDRESS = 2147483664_u32
  LINEERR_INVALADDRESSID = 2147483665_u32
  LINEERR_INVALADDRESSMODE = 2147483666_u32
  LINEERR_INVALADDRESSSTATE = 2147483667_u32
  LINEERR_INVALAPPHANDLE = 2147483668_u32
  LINEERR_INVALAPPNAME = 2147483669_u32
  LINEERR_INVALBEARERMODE = 2147483670_u32
  LINEERR_INVALCALLCOMPLMODE = 2147483671_u32
  LINEERR_INVALCALLHANDLE = 2147483672_u32
  LINEERR_INVALCALLPARAMS = 2147483673_u32
  LINEERR_INVALCALLPRIVILEGE = 2147483674_u32
  LINEERR_INVALCALLSELECT = 2147483675_u32
  LINEERR_INVALCALLSTATE = 2147483676_u32
  LINEERR_INVALCALLSTATELIST = 2147483677_u32
  LINEERR_INVALCARD = 2147483678_u32
  LINEERR_INVALCOMPLETIONID = 2147483679_u32
  LINEERR_INVALCONFCALLHANDLE = 2147483680_u32
  LINEERR_INVALCONSULTCALLHANDLE = 2147483681_u32
  LINEERR_INVALCOUNTRYCODE = 2147483682_u32
  LINEERR_INVALDEVICECLASS = 2147483683_u32
  LINEERR_INVALDEVICEHANDLE = 2147483684_u32
  LINEERR_INVALDIALPARAMS = 2147483685_u32
  LINEERR_INVALDIGITLIST = 2147483686_u32
  LINEERR_INVALDIGITMODE = 2147483687_u32
  LINEERR_INVALDIGITS = 2147483688_u32
  LINEERR_INVALEXTVERSION = 2147483689_u32
  LINEERR_INVALGROUPID = 2147483690_u32
  LINEERR_INVALLINEHANDLE = 2147483691_u32
  LINEERR_INVALLINESTATE = 2147483692_u32
  LINEERR_INVALLOCATION = 2147483693_u32
  LINEERR_INVALMEDIALIST = 2147483694_u32
  LINEERR_INVALMEDIAMODE = 2147483695_u32
  LINEERR_INVALMESSAGEID = 2147483696_u32
  LINEERR_INVALPARAM = 2147483698_u32
  LINEERR_INVALPARKID = 2147483699_u32
  LINEERR_INVALPARKMODE = 2147483700_u32
  LINEERR_INVALPOINTER = 2147483701_u32
  LINEERR_INVALPRIVSELECT = 2147483702_u32
  LINEERR_INVALRATE = 2147483703_u32
  LINEERR_INVALREQUESTMODE = 2147483704_u32
  LINEERR_INVALTERMINALID = 2147483705_u32
  LINEERR_INVALTERMINALMODE = 2147483706_u32
  LINEERR_INVALTIMEOUT = 2147483707_u32
  LINEERR_INVALTONE = 2147483708_u32
  LINEERR_INVALTONELIST = 2147483709_u32
  LINEERR_INVALTONEMODE = 2147483710_u32
  LINEERR_INVALTRANSFERMODE = 2147483711_u32
  LINEERR_LINEMAPPERFAILED = 2147483712_u32
  LINEERR_NOCONFERENCE = 2147483713_u32
  LINEERR_NODEVICE = 2147483714_u32
  LINEERR_NODRIVER = 2147483715_u32
  LINEERR_NOMEM = 2147483716_u32
  LINEERR_NOREQUEST = 2147483717_u32
  LINEERR_NOTOWNER = 2147483718_u32
  LINEERR_NOTREGISTERED = 2147483719_u32
  LINEERR_OPERATIONFAILED = 2147483720_u32
  LINEERR_OPERATIONUNAVAIL = 2147483721_u32
  LINEERR_RATEUNAVAIL = 2147483722_u32
  LINEERR_RESOURCEUNAVAIL = 2147483723_u32
  LINEERR_REQUESTOVERRUN = 2147483724_u32
  LINEERR_STRUCTURETOOSMALL = 2147483725_u32
  LINEERR_TARGETNOTFOUND = 2147483726_u32
  LINEERR_TARGETSELF = 2147483727_u32
  LINEERR_UNINITIALIZED = 2147483728_u32
  LINEERR_USERUSERINFOTOOBIG = 2147483729_u32
  LINEERR_REINIT = 2147483730_u32
  LINEERR_ADDRESSBLOCKED = 2147483731_u32
  LINEERR_BILLINGREJECTED = 2147483732_u32
  LINEERR_INVALFEATURE = 2147483733_u32
  LINEERR_NOMULTIPLEINSTANCE = 2147483734_u32
  LINEERR_INVALAGENTID = 2147483735_u32
  LINEERR_INVALAGENTGROUP = 2147483736_u32
  LINEERR_INVALPASSWORD = 2147483737_u32
  LINEERR_INVALAGENTSTATE = 2147483738_u32
  LINEERR_INVALAGENTACTIVITY = 2147483739_u32
  LINEERR_DIALVOICEDETECT = 2147483740_u32
  LINEERR_USERCANCELLED = 2147483741_u32
  LINEERR_INVALADDRESSTYPE = 2147483742_u32
  LINEERR_INVALAGENTSESSIONSTATE = 2147483743_u32
  LINEERR_DISCONNECTED = 2147483744_u32
  LINEERR_SERVICE_NOT_RUNNING = 2147483745_u32
  LINEFEATURE_DEVSPECIFIC = 1_u32
  LINEFEATURE_DEVSPECIFICFEAT = 2_u32
  LINEFEATURE_FORWARD = 4_u32
  LINEFEATURE_MAKECALL = 8_u32
  LINEFEATURE_SETMEDIACONTROL = 16_u32
  LINEFEATURE_SETTERMINAL = 32_u32
  LINEFEATURE_SETDEVSTATUS = 64_u32
  LINEFEATURE_FORWARDFWD = 128_u32
  LINEFEATURE_FORWARDDND = 256_u32
  LINEFORWARDMODE_UNCOND = 1_u32
  LINEFORWARDMODE_UNCONDINTERNAL = 2_u32
  LINEFORWARDMODE_UNCONDEXTERNAL = 4_u32
  LINEFORWARDMODE_UNCONDSPECIFIC = 8_u32
  LINEFORWARDMODE_BUSY = 16_u32
  LINEFORWARDMODE_BUSYINTERNAL = 32_u32
  LINEFORWARDMODE_BUSYEXTERNAL = 64_u32
  LINEFORWARDMODE_BUSYSPECIFIC = 128_u32
  LINEFORWARDMODE_NOANSW = 256_u32
  LINEFORWARDMODE_NOANSWINTERNAL = 512_u32
  LINEFORWARDMODE_NOANSWEXTERNAL = 1024_u32
  LINEFORWARDMODE_NOANSWSPECIFIC = 2048_u32
  LINEFORWARDMODE_BUSYNA = 4096_u32
  LINEFORWARDMODE_BUSYNAINTERNAL = 8192_u32
  LINEFORWARDMODE_BUSYNAEXTERNAL = 16384_u32
  LINEFORWARDMODE_BUSYNASPECIFIC = 32768_u32
  LINEFORWARDMODE_UNKNOWN = 65536_u32
  LINEFORWARDMODE_UNAVAIL = 131072_u32
  LINEGATHERTERM_BUFFERFULL = 1_u32
  LINEGATHERTERM_TERMDIGIT = 2_u32
  LINEGATHERTERM_FIRSTTIMEOUT = 4_u32
  LINEGATHERTERM_INTERTIMEOUT = 8_u32
  LINEGATHERTERM_CANCEL = 16_u32
  LINEGENERATETERM_DONE = 1_u32
  LINEGENERATETERM_CANCEL = 2_u32
  LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1_u32
  LINEINITIALIZEEXOPTION_USEEVENT = 2_u32
  LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3_u32
  LINEINITIALIZEEXOPTION_CALLHUBTRACKING = 2147483648_u32
  LINELOCATIONOPTION_PULSEDIAL = 1_u32
  LINEMAPPER = 4294967295_u32
  LINEMEDIACONTROL_NONE = 1_u32
  LINEMEDIACONTROL_START = 2_u32
  LINEMEDIACONTROL_RESET = 4_u32
  LINEMEDIACONTROL_PAUSE = 8_u32
  LINEMEDIACONTROL_RESUME = 16_u32
  LINEMEDIACONTROL_RATEUP = 32_u32
  LINEMEDIACONTROL_RATEDOWN = 64_u32
  LINEMEDIACONTROL_RATENORMAL = 128_u32
  LINEMEDIACONTROL_VOLUMEUP = 256_u32
  LINEMEDIACONTROL_VOLUMEDOWN = 512_u32
  LINEMEDIACONTROL_VOLUMENORMAL = 1024_u32
  LINEMEDIAMODE_UNKNOWN = 2_u32
  LINEMEDIAMODE_INTERACTIVEVOICE = 4_u32
  LINEMEDIAMODE_AUTOMATEDVOICE = 8_u32
  LINEMEDIAMODE_DATAMODEM = 16_u32
  LINEMEDIAMODE_G3FAX = 32_u32
  LINEMEDIAMODE_TDD = 64_u32
  LINEMEDIAMODE_G4FAX = 128_u32
  LINEMEDIAMODE_DIGITALDATA = 256_u32
  LINEMEDIAMODE_TELETEX = 512_u32
  LINEMEDIAMODE_VIDEOTEX = 1024_u32
  LINEMEDIAMODE_TELEX = 2048_u32
  LINEMEDIAMODE_MIXED = 4096_u32
  LINEMEDIAMODE_ADSI = 8192_u32
  LINEMEDIAMODE_VOICEVIEW = 16384_u32
  LINEMEDIAMODE_VIDEO = 32768_u32
  LAST_LINEMEDIAMODE = 32768_u32
  LINEOFFERINGMODE_ACTIVE = 1_u32
  LINEOFFERINGMODE_INACTIVE = 2_u32
  LINEOPENOPTION_SINGLEADDRESS = 2147483648_u32
  LINEOPENOPTION_PROXY = 1073741824_u32
  LINEPARKMODE_DIRECTED = 1_u32
  LINEPARKMODE_NONDIRECTED = 2_u32
  LINEPROXYREQUEST_SETAGENTGROUP = 1_u32
  LINEPROXYREQUEST_SETAGENTSTATE = 2_u32
  LINEPROXYREQUEST_SETAGENTACTIVITY = 3_u32
  LINEPROXYREQUEST_GETAGENTCAPS = 4_u32
  LINEPROXYREQUEST_GETAGENTSTATUS = 5_u32
  LINEPROXYREQUEST_AGENTSPECIFIC = 6_u32
  LINEPROXYREQUEST_GETAGENTACTIVITYLIST = 7_u32
  LINEPROXYREQUEST_GETAGENTGROUPLIST = 8_u32
  LINEPROXYREQUEST_CREATEAGENT = 9_u32
  LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD = 10_u32
  LINEPROXYREQUEST_GETAGENTINFO = 11_u32
  LINEPROXYREQUEST_CREATEAGENTSESSION = 12_u32
  LINEPROXYREQUEST_GETAGENTSESSIONLIST = 13_u32
  LINEPROXYREQUEST_SETAGENTSESSIONSTATE = 14_u32
  LINEPROXYREQUEST_GETAGENTSESSIONINFO = 15_u32
  LINEPROXYREQUEST_GETQUEUELIST = 16_u32
  LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD = 17_u32
  LINEPROXYREQUEST_GETQUEUEINFO = 18_u32
  LINEPROXYREQUEST_GETGROUPLIST = 19_u32
  LINEPROXYREQUEST_SETAGENTSTATEEX = 20_u32
  LINEREMOVEFROMCONF_NONE = 1_u32
  LINEREMOVEFROMCONF_LAST = 2_u32
  LINEREMOVEFROMCONF_ANY = 3_u32
  LINEREQUESTMODE_MAKECALL = 1_u32
  LINEREQUESTMODE_MEDIACALL = 2_u32
  LINEREQUESTMODE_DROP = 4_u32
  LAST_LINEREQUESTMODE = 2_u32
  LINEROAMMODE_UNKNOWN = 1_u32
  LINEROAMMODE_UNAVAIL = 2_u32
  LINEROAMMODE_HOME = 4_u32
  LINEROAMMODE_ROAMA = 8_u32
  LINEROAMMODE_ROAMB = 16_u32
  LINESPECIALINFO_NOCIRCUIT = 1_u32
  LINESPECIALINFO_CUSTIRREG = 2_u32
  LINESPECIALINFO_REORDER = 4_u32
  LINESPECIALINFO_UNKNOWN = 8_u32
  LINESPECIALINFO_UNAVAIL = 16_u32
  LINETERMDEV_PHONE = 1_u32
  LINETERMDEV_HEADSET = 2_u32
  LINETERMDEV_SPEAKER = 4_u32
  LINETERMMODE_BUTTONS = 1_u32
  LINETERMMODE_LAMPS = 2_u32
  LINETERMMODE_DISPLAY = 4_u32
  LINETERMMODE_RINGER = 8_u32
  LINETERMMODE_HOOKSWITCH = 16_u32
  LINETERMMODE_MEDIATOLINE = 32_u32
  LINETERMMODE_MEDIAFROMLINE = 64_u32
  LINETERMMODE_MEDIABIDIRECT = 128_u32
  LINETERMSHARING_PRIVATE = 1_u32
  LINETERMSHARING_SHAREDEXCL = 2_u32
  LINETERMSHARING_SHAREDCONF = 4_u32
  LINETOLLLISTOPTION_ADD = 1_u32
  LINETOLLLISTOPTION_REMOVE = 2_u32
  LINETONEMODE_CUSTOM = 1_u32
  LINETONEMODE_RINGBACK = 2_u32
  LINETONEMODE_BUSY = 4_u32
  LINETONEMODE_BEEP = 8_u32
  LINETONEMODE_BILLING = 16_u32
  LINETRANSFERMODE_TRANSFER = 1_u32
  LINETRANSFERMODE_CONFERENCE = 2_u32
  LINETRANSLATEOPTION_CARDOVERRIDE = 1_u32
  LINETRANSLATEOPTION_CANCELCALLWAITING = 2_u32
  LINETRANSLATEOPTION_FORCELOCAL = 4_u32
  LINETRANSLATEOPTION_FORCELD = 8_u32
  LINETRANSLATERESULT_CANONICAL = 1_u32
  LINETRANSLATERESULT_INTERNATIONAL = 2_u32
  LINETRANSLATERESULT_LONGDISTANCE = 4_u32
  LINETRANSLATERESULT_LOCAL = 8_u32
  LINETRANSLATERESULT_INTOLLLIST = 16_u32
  LINETRANSLATERESULT_NOTINTOLLLIST = 32_u32
  LINETRANSLATERESULT_DIALBILLING = 64_u32
  LINETRANSLATERESULT_DIALQUIET = 128_u32
  LINETRANSLATERESULT_DIALDIALTONE = 256_u32
  LINETRANSLATERESULT_DIALPROMPT = 512_u32
  LINETRANSLATERESULT_VOICEDETECT = 1024_u32
  LINETRANSLATERESULT_NOTRANSLATION = 2048_u32
  PHONEBUTTONFUNCTION_UNKNOWN = 0_u32
  PHONEBUTTONFUNCTION_CONFERENCE = 1_u32
  PHONEBUTTONFUNCTION_TRANSFER = 2_u32
  PHONEBUTTONFUNCTION_DROP = 3_u32
  PHONEBUTTONFUNCTION_HOLD = 4_u32
  PHONEBUTTONFUNCTION_RECALL = 5_u32
  PHONEBUTTONFUNCTION_DISCONNECT = 6_u32
  PHONEBUTTONFUNCTION_CONNECT = 7_u32
  PHONEBUTTONFUNCTION_MSGWAITON = 8_u32
  PHONEBUTTONFUNCTION_MSGWAITOFF = 9_u32
  PHONEBUTTONFUNCTION_SELECTRING = 10_u32
  PHONEBUTTONFUNCTION_ABBREVDIAL = 11_u32
  PHONEBUTTONFUNCTION_FORWARD = 12_u32
  PHONEBUTTONFUNCTION_PICKUP = 13_u32
  PHONEBUTTONFUNCTION_RINGAGAIN = 14_u32
  PHONEBUTTONFUNCTION_PARK = 15_u32
  PHONEBUTTONFUNCTION_REJECT = 16_u32
  PHONEBUTTONFUNCTION_REDIRECT = 17_u32
  PHONEBUTTONFUNCTION_MUTE = 18_u32
  PHONEBUTTONFUNCTION_VOLUMEUP = 19_u32
  PHONEBUTTONFUNCTION_VOLUMEDOWN = 20_u32
  PHONEBUTTONFUNCTION_SPEAKERON = 21_u32
  PHONEBUTTONFUNCTION_SPEAKEROFF = 22_u32
  PHONEBUTTONFUNCTION_FLASH = 23_u32
  PHONEBUTTONFUNCTION_DATAON = 24_u32
  PHONEBUTTONFUNCTION_DATAOFF = 25_u32
  PHONEBUTTONFUNCTION_DONOTDISTURB = 26_u32
  PHONEBUTTONFUNCTION_INTERCOM = 27_u32
  PHONEBUTTONFUNCTION_BRIDGEDAPP = 28_u32
  PHONEBUTTONFUNCTION_BUSY = 29_u32
  PHONEBUTTONFUNCTION_CALLAPP = 30_u32
  PHONEBUTTONFUNCTION_DATETIME = 31_u32
  PHONEBUTTONFUNCTION_DIRECTORY = 32_u32
  PHONEBUTTONFUNCTION_COVER = 33_u32
  PHONEBUTTONFUNCTION_CALLID = 34_u32
  PHONEBUTTONFUNCTION_LASTNUM = 35_u32
  PHONEBUTTONFUNCTION_NIGHTSRV = 36_u32
  PHONEBUTTONFUNCTION_SENDCALLS = 37_u32
  PHONEBUTTONFUNCTION_MSGINDICATOR = 38_u32
  PHONEBUTTONFUNCTION_REPDIAL = 39_u32
  PHONEBUTTONFUNCTION_SETREPDIAL = 40_u32
  PHONEBUTTONFUNCTION_SYSTEMSPEED = 41_u32
  PHONEBUTTONFUNCTION_STATIONSPEED = 42_u32
  PHONEBUTTONFUNCTION_CAMPON = 43_u32
  PHONEBUTTONFUNCTION_SAVEREPEAT = 44_u32
  PHONEBUTTONFUNCTION_QUEUECALL = 45_u32
  PHONEBUTTONFUNCTION_NONE = 46_u32
  PHONEBUTTONFUNCTION_SEND = 47_u32
  PHONEBUTTONMODE_DUMMY = 1_u32
  PHONEBUTTONMODE_CALL = 2_u32
  PHONEBUTTONMODE_FEATURE = 4_u32
  PHONEBUTTONMODE_KEYPAD = 8_u32
  PHONEBUTTONMODE_LOCAL = 16_u32
  PHONEBUTTONMODE_DISPLAY = 32_u32
  PHONEBUTTONSTATE_UP = 1_u32
  PHONEBUTTONSTATE_DOWN = 2_u32
  PHONEBUTTONSTATE_UNKNOWN = 4_u32
  PHONEBUTTONSTATE_UNAVAIL = 8_u32
  PHONEERR_ALLOCATED = 2415919105_u32
  PHONEERR_BADDEVICEID = 2415919106_u32
  PHONEERR_INCOMPATIBLEAPIVERSION = 2415919107_u32
  PHONEERR_INCOMPATIBLEEXTVERSION = 2415919108_u32
  PHONEERR_INIFILECORRUPT = 2415919109_u32
  PHONEERR_INUSE = 2415919110_u32
  PHONEERR_INVALAPPHANDLE = 2415919111_u32
  PHONEERR_INVALAPPNAME = 2415919112_u32
  PHONEERR_INVALBUTTONLAMPID = 2415919113_u32
  PHONEERR_INVALBUTTONMODE = 2415919114_u32
  PHONEERR_INVALBUTTONSTATE = 2415919115_u32
  PHONEERR_INVALDATAID = 2415919116_u32
  PHONEERR_INVALDEVICECLASS = 2415919117_u32
  PHONEERR_INVALEXTVERSION = 2415919118_u32
  PHONEERR_INVALHOOKSWITCHDEV = 2415919119_u32
  PHONEERR_INVALHOOKSWITCHMODE = 2415919120_u32
  PHONEERR_INVALLAMPMODE = 2415919121_u32
  PHONEERR_INVALPARAM = 2415919122_u32
  PHONEERR_INVALPHONEHANDLE = 2415919123_u32
  PHONEERR_INVALPHONESTATE = 2415919124_u32
  PHONEERR_INVALPOINTER = 2415919125_u32
  PHONEERR_INVALPRIVILEGE = 2415919126_u32
  PHONEERR_INVALRINGMODE = 2415919127_u32
  PHONEERR_NODEVICE = 2415919128_u32
  PHONEERR_NODRIVER = 2415919129_u32
  PHONEERR_NOMEM = 2415919130_u32
  PHONEERR_NOTOWNER = 2415919131_u32
  PHONEERR_OPERATIONFAILED = 2415919132_u32
  PHONEERR_OPERATIONUNAVAIL = 2415919133_u32
  PHONEERR_RESOURCEUNAVAIL = 2415919135_u32
  PHONEERR_REQUESTOVERRUN = 2415919136_u32
  PHONEERR_STRUCTURETOOSMALL = 2415919137_u32
  PHONEERR_UNINITIALIZED = 2415919138_u32
  PHONEERR_REINIT = 2415919139_u32
  PHONEERR_DISCONNECTED = 2415919140_u32
  PHONEERR_SERVICE_NOT_RUNNING = 2415919141_u32
  PHONEFEATURE_GETBUTTONINFO = 1_u32
  PHONEFEATURE_GETDATA = 2_u32
  PHONEFEATURE_GETDISPLAY = 4_u32
  PHONEFEATURE_GETGAINHANDSET = 8_u32
  PHONEFEATURE_GETGAINSPEAKER = 16_u32
  PHONEFEATURE_GETGAINHEADSET = 32_u32
  PHONEFEATURE_GETHOOKSWITCHHANDSET = 64_u32
  PHONEFEATURE_GETHOOKSWITCHSPEAKER = 128_u32
  PHONEFEATURE_GETHOOKSWITCHHEADSET = 256_u32
  PHONEFEATURE_GETLAMP = 512_u32
  PHONEFEATURE_GETRING = 1024_u32
  PHONEFEATURE_GETVOLUMEHANDSET = 2048_u32
  PHONEFEATURE_GETVOLUMESPEAKER = 4096_u32
  PHONEFEATURE_GETVOLUMEHEADSET = 8192_u32
  PHONEFEATURE_SETBUTTONINFO = 16384_u32
  PHONEFEATURE_SETDATA = 32768_u32
  PHONEFEATURE_SETDISPLAY = 65536_u32
  PHONEFEATURE_SETGAINHANDSET = 131072_u32
  PHONEFEATURE_SETGAINSPEAKER = 262144_u32
  PHONEFEATURE_SETGAINHEADSET = 524288_u32
  PHONEFEATURE_SETHOOKSWITCHHANDSET = 1048576_u32
  PHONEFEATURE_SETHOOKSWITCHSPEAKER = 2097152_u32
  PHONEFEATURE_SETHOOKSWITCHHEADSET = 4194304_u32
  PHONEFEATURE_SETLAMP = 8388608_u32
  PHONEFEATURE_SETRING = 16777216_u32
  PHONEFEATURE_SETVOLUMEHANDSET = 33554432_u32
  PHONEFEATURE_SETVOLUMESPEAKER = 67108864_u32
  PHONEFEATURE_SETVOLUMEHEADSET = 134217728_u32
  PHONEFEATURE_GENERICPHONE = 268435456_u32
  PHONEHOOKSWITCHDEV_HANDSET = 1_u32
  PHONEHOOKSWITCHDEV_SPEAKER = 2_u32
  PHONEHOOKSWITCHDEV_HEADSET = 4_u32
  PHONEHOOKSWITCHMODE_ONHOOK = 1_u32
  PHONEHOOKSWITCHMODE_MIC = 2_u32
  PHONEHOOKSWITCHMODE_SPEAKER = 4_u32
  PHONEHOOKSWITCHMODE_MICSPEAKER = 8_u32
  PHONEHOOKSWITCHMODE_UNKNOWN = 16_u32
  PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1_u32
  PHONEINITIALIZEEXOPTION_USEEVENT = 2_u32
  PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3_u32
  PHONELAMPMODE_DUMMY = 1_u32
  PHONELAMPMODE_OFF = 2_u32
  PHONELAMPMODE_STEADY = 4_u32
  PHONELAMPMODE_WINK = 8_u32
  PHONELAMPMODE_FLASH = 16_u32
  PHONELAMPMODE_FLUTTER = 32_u32
  PHONELAMPMODE_BROKENFLUTTER = 64_u32
  PHONELAMPMODE_UNKNOWN = 128_u32
  PHONEPRIVILEGE_MONITOR = 1_u32
  PHONEPRIVILEGE_OWNER = 2_u32
  PHONESTATE_OTHER = 1_u32
  PHONESTATE_CONNECTED = 2_u32
  PHONESTATE_DISCONNECTED = 4_u32
  PHONESTATE_OWNER = 8_u32
  PHONESTATE_MONITORS = 16_u32
  PHONESTATE_DISPLAY = 32_u32
  PHONESTATE_LAMP = 64_u32
  PHONESTATE_RINGMODE = 128_u32
  PHONESTATE_RINGVOLUME = 256_u32
  PHONESTATE_HANDSETHOOKSWITCH = 512_u32
  PHONESTATE_HANDSETVOLUME = 1024_u32
  PHONESTATE_HANDSETGAIN = 2048_u32
  PHONESTATE_SPEAKERHOOKSWITCH = 4096_u32
  PHONESTATE_SPEAKERVOLUME = 8192_u32
  PHONESTATE_SPEAKERGAIN = 16384_u32
  PHONESTATE_HEADSETHOOKSWITCH = 32768_u32
  PHONESTATE_HEADSETVOLUME = 65536_u32
  PHONESTATE_HEADSETGAIN = 131072_u32
  PHONESTATE_SUSPEND = 262144_u32
  PHONESTATE_RESUME = 524288_u32
  PHONESTATE_DEVSPECIFIC = 1048576_u32
  PHONESTATE_REINIT = 2097152_u32
  PHONESTATE_CAPSCHANGE = 4194304_u32
  PHONESTATE_REMOVED = 8388608_u32
  PHONESTATUSFLAGS_CONNECTED = 1_u32
  PHONESTATUSFLAGS_SUSPENDED = 2_u32
  STRINGFORMAT_ASCII = 1_u32
  STRINGFORMAT_DBCS = 2_u32
  STRINGFORMAT_UNICODE = 3_u32
  STRINGFORMAT_BINARY = 4_u32
  TAPI_REPLY = 1123_u32
  TAPIERR_CONNECTED = 0_i32
  TAPIERR_DROPPED = -1_i32
  TAPIERR_NOREQUESTRECIPIENT = -2_i32
  TAPIERR_REQUESTQUEUEFULL = -3_i32
  TAPIERR_INVALDESTADDRESS = -4_i32
  TAPIERR_INVALWINDOWHANDLE = -5_i32
  TAPIERR_INVALDEVICECLASS = -6_i32
  TAPIERR_INVALDEVICEID = -7_i32
  TAPIERR_DEVICECLASSUNAVAIL = -8_i32
  TAPIERR_DEVICEIDUNAVAIL = -9_i32
  TAPIERR_DEVICEINUSE = -10_i32
  TAPIERR_DESTBUSY = -11_i32
  TAPIERR_DESTNOANSWER = -12_i32
  TAPIERR_DESTUNAVAIL = -13_i32
  TAPIERR_UNKNOWNWINHANDLE = -14_i32
  TAPIERR_UNKNOWNREQUESTID = -15_i32
  TAPIERR_REQUESTFAILED = -16_i32
  TAPIERR_REQUESTCANCELLED = -17_i32
  TAPIERR_INVALPOINTER = -18_i32
  TAPIERR_NOTADMIN = -19_i32
  TAPIERR_MMCWRITELOCKED = -20_i32
  TAPIERR_PROVIDERALREADYINSTALLED = -21_i32
  TAPIERR_SCP_ALREADY_EXISTS = -22_i32
  TAPIERR_SCP_DOES_NOT_EXIST = -23_i32
  TAPIMAXDESTADDRESSSIZE = 80_i32
  TAPIMAXAPPNAMESIZE = 40_i32
  TAPIMAXCALLEDPARTYSIZE = 40_i32
  TAPIMAXCOMMENTSIZE = 80_i32
  TAPIMAXDEVICECLASSSIZE = 40_i32
  TAPIMAXDEVICEIDSIZE = 40_i32
  INTERFACEMASK = 16711680_u32
  DISPIDMASK = 65535_u32
  IDISPTAPI = 65536_u32
  IDISPTAPICALLCENTER = 131072_u32
  IDISPCALLINFO = 65536_u32
  IDISPBASICCALLCONTROL = 131072_u32
  IDISPLEGACYCALLMEDIACONTROL = 196608_u32
  IDISPAGGREGATEDMSPCALLOBJ = 262144_u32
  IDISPADDRESS = 65536_u32
  IDISPADDRESSCAPABILITIES = 131072_u32
  IDISPMEDIASUPPORT = 196608_u32
  IDISPADDRESSTRANSLATION = 262144_u32
  IDISPLEGACYADDRESSMEDIACONTROL = 327680_u32
  IDISPAGGREGATEDMSPADDRESSOBJ = 393216_u32
  IDISPPHONE = 65536_u32
  IDISPAPC = 131072_u32
  IDISPMULTITRACK = 65536_u32
  IDISPMEDIACONTROL = 131072_u32
  IDISPMEDIARECORD = 196608_u32
  IDISPMEDIAPLAYBACK = 262144_u32
  IDISPFILETRACK = 65536_u32
  TAPIMEDIATYPE_AUDIO = 8_u32
  TAPIMEDIATYPE_VIDEO = 32768_u32
  TAPIMEDIATYPE_DATAMODEM = 16_u32
  TAPIMEDIATYPE_G3FAX = 32_u32
  TAPIMEDIATYPE_MULTITRACK = 65536_u32
  TSPI_MESSAGE_BASE = 500_u32
  LINETSPIOPTION_NONREENTRANT = 1_u32
  TUISPIDLL_OBJECT_LINEID = 1_i32
  TUISPIDLL_OBJECT_PHONEID = 2_i32
  TUISPIDLL_OBJECT_PROVIDERID = 3_i32
  TUISPIDLL_OBJECT_DIALOGINSTANCE = 4_i32
  PRIVATEOBJECT_NONE = 1_u32
  PRIVATEOBJECT_CALLID = 2_u32
  PRIVATEOBJECT_LINE = 3_u32
  PRIVATEOBJECT_CALL = 4_u32
  PRIVATEOBJECT_PHONE = 5_u32
  PRIVATEOBJECT_ADDRESS = 6_u32
  LINEQOSREQUESTTYPE_SERVICELEVEL = 1_u32
  LINEQOSSERVICELEVEL_NEEDED = 1_u32
  LINEQOSSERVICELEVEL_IFAVAILABLE = 2_u32
  LINEQOSSERVICELEVEL_BESTEFFORT = 3_u32
  LINEEQOSINFO_NOQOS = 1_u32
  LINEEQOSINFO_ADMISSIONFAILURE = 2_u32
  LINEEQOSINFO_POLICYFAILURE = 3_u32
  LINEEQOSINFO_GENERICERROR = 4_u32
  TSPI_PROC_BASE = 500_u32
  TSPI_LINEACCEPT = 500_u32
  TSPI_LINEADDTOCONFERENCE = 501_u32
  TSPI_LINEANSWER = 502_u32
  TSPI_LINEBLINDTRANSFER = 503_u32
  TSPI_LINECLOSE = 504_u32
  TSPI_LINECLOSECALL = 505_u32
  TSPI_LINECOMPLETECALL = 506_u32
  TSPI_LINECOMPLETETRANSFER = 507_u32
  TSPI_LINECONDITIONALMEDIADETECTION = 508_u32
  TSPI_LINECONFIGDIALOG = 509_u32
  TSPI_LINEDEVSPECIFIC = 510_u32
  TSPI_LINEDEVSPECIFICFEATURE = 511_u32
  TSPI_LINEDIAL = 512_u32
  TSPI_LINEDROP = 513_u32
  TSPI_LINEFORWARD = 514_u32
  TSPI_LINEGATHERDIGITS = 515_u32
  TSPI_LINEGENERATEDIGITS = 516_u32
  TSPI_LINEGENERATETONE = 517_u32
  TSPI_LINEGETADDRESSCAPS = 518_u32
  TSPI_LINEGETADDRESSID = 519_u32
  TSPI_LINEGETADDRESSSTATUS = 520_u32
  TSPI_LINEGETCALLADDRESSID = 521_u32
  TSPI_LINEGETCALLINFO = 522_u32
  TSPI_LINEGETCALLSTATUS = 523_u32
  TSPI_LINEGETDEVCAPS = 524_u32
  TSPI_LINEGETDEVCONFIG = 525_u32
  TSPI_LINEGETEXTENSIONID = 526_u32
  TSPI_LINEGETICON = 527_u32
  TSPI_LINEGETID = 528_u32
  TSPI_LINEGETLINEDEVSTATUS = 529_u32
  TSPI_LINEGETNUMADDRESSIDS = 530_u32
  TSPI_LINEHOLD = 531_u32
  TSPI_LINEMAKECALL = 532_u32
  TSPI_LINEMONITORDIGITS = 533_u32
  TSPI_LINEMONITORMEDIA = 534_u32
  TSPI_LINEMONITORTONES = 535_u32
  TSPI_LINENEGOTIATEEXTVERSION = 536_u32
  TSPI_LINENEGOTIATETSPIVERSION = 537_u32
  TSPI_LINEOPEN = 538_u32
  TSPI_LINEPARK = 539_u32
  TSPI_LINEPICKUP = 540_u32
  TSPI_LINEPREPAREADDTOCONFERENCE = 541_u32
  TSPI_LINEREDIRECT = 542_u32
  TSPI_LINEREMOVEFROMCONFERENCE = 543_u32
  TSPI_LINESECURECALL = 544_u32
  TSPI_LINESELECTEXTVERSION = 545_u32
  TSPI_LINESENDUSERUSERINFO = 546_u32
  TSPI_LINESETAPPSPECIFIC = 547_u32
  TSPI_LINESETCALLPARAMS = 548_u32
  TSPI_LINESETDEFAULTMEDIADETECTION = 549_u32
  TSPI_LINESETDEVCONFIG = 550_u32
  TSPI_LINESETMEDIACONTROL = 551_u32
  TSPI_LINESETMEDIAMODE = 552_u32
  TSPI_LINESETSTATUSMESSAGES = 553_u32
  TSPI_LINESETTERMINAL = 554_u32
  TSPI_LINESETUPCONFERENCE = 555_u32
  TSPI_LINESETUPTRANSFER = 556_u32
  TSPI_LINESWAPHOLD = 557_u32
  TSPI_LINEUNCOMPLETECALL = 558_u32
  TSPI_LINEUNHOLD = 559_u32
  TSPI_LINEUNPARK = 560_u32
  TSPI_PHONECLOSE = 561_u32
  TSPI_PHONECONFIGDIALOG = 562_u32
  TSPI_PHONEDEVSPECIFIC = 563_u32
  TSPI_PHONEGETBUTTONINFO = 564_u32
  TSPI_PHONEGETDATA = 565_u32
  TSPI_PHONEGETDEVCAPS = 566_u32
  TSPI_PHONEGETDISPLAY = 567_u32
  TSPI_PHONEGETEXTENSIONID = 568_u32
  TSPI_PHONEGETGAIN = 569_u32
  TSPI_PHONEGETHOOKSWITCH = 570_u32
  TSPI_PHONEGETICON = 571_u32
  TSPI_PHONEGETID = 572_u32
  TSPI_PHONEGETLAMP = 573_u32
  TSPI_PHONEGETRING = 574_u32
  TSPI_PHONEGETSTATUS = 575_u32
  TSPI_PHONEGETVOLUME = 576_u32
  TSPI_PHONENEGOTIATEEXTVERSION = 577_u32
  TSPI_PHONENEGOTIATETSPIVERSION = 578_u32
  TSPI_PHONEOPEN = 579_u32
  TSPI_PHONESELECTEXTVERSION = 580_u32
  TSPI_PHONESETBUTTONINFO = 581_u32
  TSPI_PHONESETDATA = 582_u32
  TSPI_PHONESETDISPLAY = 583_u32
  TSPI_PHONESETGAIN = 584_u32
  TSPI_PHONESETHOOKSWITCH = 585_u32
  TSPI_PHONESETLAMP = 586_u32
  TSPI_PHONESETRING = 587_u32
  TSPI_PHONESETSTATUSMESSAGES = 588_u32
  TSPI_PHONESETVOLUME = 589_u32
  TSPI_PROVIDERCONFIG = 590_u32
  TSPI_PROVIDERINIT = 591_u32
  TSPI_PROVIDERINSTALL = 592_u32
  TSPI_PROVIDERREMOVE = 593_u32
  TSPI_PROVIDERSHUTDOWN = 594_u32
  TSPI_PROVIDERENUMDEVICES = 595_u32
  TSPI_LINEDROPONCLOSE = 596_u32
  TSPI_LINEDROPNOOWNER = 597_u32
  TSPI_PROVIDERCREATELINEDEVICE = 598_u32
  TSPI_PROVIDERCREATEPHONEDEVICE = 599_u32
  TSPI_LINESETCURRENTLOCATION = 600_u32
  TSPI_LINECONFIGDIALOGEDIT = 601_u32
  TSPI_LINERELEASEUSERUSERINFO = 602_u32
  TSPI_LINEGETCALLID = 603_u32
  TSPI_LINEGETCALLHUBTRACKING = 604_u32
  TSPI_LINESETCALLHUBTRACKING = 605_u32
  TSPI_LINERECEIVEMSPDATA = 606_u32
  TSPI_LINEMSPIDENTIFY = 607_u32
  TSPI_LINECREATEMSPINSTANCE = 608_u32
  TSPI_LINECLOSEMSPINSTANCE = 609_u32
  IDISPDIROBJECT = 65536_u32
  IDISPDIROBJCONFERENCE = 131072_u32
  IDISPDIROBJUSER = 196608_u32
  IDISPDIRECTORY = 65536_u32
  IDISPILSCONFIG = 131072_u32
  RENDBIND_AUTHENTICATE = 1_u32
  RENDBIND_DEFAULTDOMAINNAME = 2_u32
  RENDBIND_DEFAULTUSERNAME = 4_u32
  RENDBIND_DEFAULTPASSWORD = 8_u32
  RENDBIND_DEFAULTCREDENTIALS = 14_u32
  STRM_INITIAL = 0_u32
  STRM_TERMINALSELECTED = 1_u32
  STRM_CONFIGURED = 2_u32
  STRM_RUNNING = 4_u32
  STRM_PAUSED = 8_u32
  STRM_STOPPED = 16_u32
  TAPI_E_NOTENOUGHMEMORY = -2147221503_i32
  TAPI_E_NOITEMS = -2147221502_i32
  TAPI_E_NOTSUPPORTED = -2147221501_i32
  TAPI_E_INVALIDMEDIATYPE = -2147221500_i32
  TAPI_E_OPERATIONFAILED = -2147221499_i32
  TAPI_E_ALLOCATED = -2147221498_i32
  TAPI_E_CALLUNAVAIL = -2147221497_i32
  TAPI_E_COMPLETIONOVERRUN = -2147221496_i32
  TAPI_E_CONFERENCEFULL = -2147221495_i32
  TAPI_E_DIALMODIFIERNOTSUPPORTED = -2147221494_i32
  TAPI_E_INUSE = -2147221493_i32
  TAPI_E_INVALADDRESS = -2147221492_i32
  TAPI_E_INVALADDRESSSTATE = -2147221491_i32
  TAPI_E_INVALCALLPARAMS = -2147221490_i32
  TAPI_E_INVALCALLPRIVILEGE = -2147221489_i32
  TAPI_E_INVALCALLSTATE = -2147221488_i32
  TAPI_E_INVALCARD = -2147221487_i32
  TAPI_E_INVALCOMPLETIONID = -2147221486_i32
  TAPI_E_INVALCOUNTRYCODE = -2147221485_i32
  TAPI_E_INVALDEVICECLASS = -2147221484_i32
  TAPI_E_INVALDIALPARAMS = -2147221483_i32
  TAPI_E_INVALDIGITS = -2147221482_i32
  TAPI_E_INVALGROUPID = -2147221481_i32
  TAPI_E_INVALLOCATION = -2147221480_i32
  TAPI_E_INVALMESSAGEID = -2147221479_i32
  TAPI_E_INVALPARKID = -2147221478_i32
  TAPI_E_INVALRATE = -2147221477_i32
  TAPI_E_INVALTIMEOUT = -2147221476_i32
  TAPI_E_INVALTONE = -2147221475_i32
  TAPI_E_INVALLIST = -2147221474_i32
  TAPI_E_INVALMODE = -2147221473_i32
  TAPI_E_NOCONFERENCE = -2147221472_i32
  TAPI_E_NODEVICE = -2147221471_i32
  TAPI_E_NOREQUEST = -2147221470_i32
  TAPI_E_NOTOWNER = -2147221469_i32
  TAPI_E_NOTREGISTERED = -2147221468_i32
  TAPI_E_REQUESTOVERRUN = -2147221467_i32
  TAPI_E_TARGETNOTFOUND = -2147221466_i32
  TAPI_E_TARGETSELF = -2147221465_i32
  TAPI_E_USERUSERINFOTOOBIG = -2147221464_i32
  TAPI_E_REINIT = -2147221463_i32
  TAPI_E_ADDRESSBLOCKED = -2147221462_i32
  TAPI_E_BILLINGREJECTED = -2147221461_i32
  TAPI_E_INVALFEATURE = -2147221460_i32
  TAPI_E_INVALBUTTONLAMPID = -2147221459_i32
  TAPI_E_INVALBUTTONSTATE = -2147221458_i32
  TAPI_E_INVALDATAID = -2147221457_i32
  TAPI_E_INVALHOOKSWITCHDEV = -2147221456_i32
  TAPI_E_DROPPED = -2147221455_i32
  TAPI_E_NOREQUESTRECIPIENT = -2147221454_i32
  TAPI_E_REQUESTQUEUEFULL = -2147221453_i32
  TAPI_E_DESTBUSY = -2147221452_i32
  TAPI_E_DESTNOANSWER = -2147221451_i32
  TAPI_E_DESTUNAVAIL = -2147221450_i32
  TAPI_E_REQUESTFAILED = -2147221449_i32
  TAPI_E_REQUESTCANCELLED = -2147221448_i32
  TAPI_E_INVALPRIVILEGE = -2147221447_i32
  TAPI_E_INVALIDDIRECTION = -2147221446_i32
  TAPI_E_INVALIDTERMINAL = -2147221445_i32
  TAPI_E_INVALIDTERMINALCLASS = -2147221444_i32
  TAPI_E_NODRIVER = -2147221443_i32
  TAPI_E_MAXSTREAMS = -2147221442_i32
  TAPI_E_NOTERMINALSELECTED = -2147221441_i32
  TAPI_E_TERMINALINUSE = -2147221440_i32
  TAPI_E_NOTSTOPPED = -2147221439_i32
  TAPI_E_MAXTERMINALS = -2147221438_i32
  TAPI_E_INVALIDSTREAM = -2147221437_i32
  TAPI_E_TIMEOUT = -2147221436_i32
  TAPI_E_CALLCENTER_GROUP_REMOVED = -2147221435_i32
  TAPI_E_CALLCENTER_QUEUE_REMOVED = -2147221434_i32
  TAPI_E_CALLCENTER_NO_AGENT_ID = -2147221433_i32
  TAPI_E_CALLCENTER_INVALAGENTID = -2147221432_i32
  TAPI_E_CALLCENTER_INVALAGENTGROUP = -2147221431_i32
  TAPI_E_CALLCENTER_INVALPASSWORD = -2147221430_i32
  TAPI_E_CALLCENTER_INVALAGENTSTATE = -2147221429_i32
  TAPI_E_CALLCENTER_INVALAGENTACTIVITY = -2147221428_i32
  TAPI_E_REGISTRY_SETTING_CORRUPT = -2147221427_i32
  TAPI_E_TERMINAL_PEER = -2147221426_i32
  TAPI_E_PEER_NOT_SET = -2147221425_i32
  TAPI_E_NOEVENT = -2147221424_i32
  TAPI_E_INVALADDRESSTYPE = -2147221423_i32
  TAPI_E_RESOURCEUNAVAIL = -2147221422_i32
  TAPI_E_PHONENOTOPEN = -2147221421_i32
  TAPI_E_CALLNOTSELECTED = -2147221420_i32
  TAPI_E_WRONGEVENT = -2147221419_i32
  TAPI_E_NOFORMAT = -2147221418_i32
  TAPI_E_INVALIDSTREAMSTATE = -2147221417_i32
  TAPI_E_WRONG_STATE = -2147221416_i32
  TAPI_E_NOT_INITIALIZED = -2147221415_i32
  TAPI_E_SERVICE_NOT_RUNNING = -2147221414_i32
  OPENTNEFSTREAM = "OpenTnefStream"
  OPENTNEFSTREAMEX = "OpenTnefStreamEx"
  GETTNEFSTREAMCODEPAGE = "GetTnefStreamCodePage"
  Cbdisplayname = 41_u32
  Cbemailname = 11_u32
  Cbsevername = 12_u32
  Cbtype = 16_u32
  Cbmaxiddata = 200_u32
  Priolow = 3_u32
  Prionorm = 2_u32
  Priohigh = 1_u32
  Atypnull = 0_i32
  Atypfile = 1_i32
  Atypole = 2_i32
  Atyppicture = 3_i32
  Atypmax = 4_i32

  CLSID_TAPI = LibC::GUID.new(0x21d6d48e_u32, 0xa88b_u16, 0x11d0_u16, StaticArray[0x83_u8, 0xdd_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])

  CLSID_DispatchMapper = LibC::GUID.new(0xe9225296_u32, 0xc759_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x2b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])

  CLSID_RequestMakeCall = LibC::GUID.new(0xac48ffe0_u32, 0xf8c4_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x30_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])

  CLSID_Rendezvous = LibC::GUID.new(0xf1029e5b_u32, 0xcb5b_u16, 0x11d0_u16, StaticArray[0x8d_u8, 0x59_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1a_u8, 0xc0_u8])

  CLSID_McastAddressAllocation = LibC::GUID.new(0xdf0daef2_u32, 0xa289_u16, 0x11d1_u16, StaticArray[0x86_u8, 0x97_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xb0_u8, 0xe5_u8, 0xd2_u8])

  enum TAPI_TONEMODE
    TTM_RINGBACK = 2_i32
    TTM_BUSY = 4_i32
    TTM_BEEP = 8_i32
    TTM_BILLING = 16_i32
  end
  enum TAPI_GATHERTERM
    TGT_BUFFERFULL = 1_i32
    TGT_TERMDIGIT = 2_i32
    TGT_FIRSTTIMEOUT = 4_i32
    TGT_INTERTIMEOUT = 8_i32
    TGT_CANCEL = 16_i32
  end
  enum ADDRESS_EVENT
    AE_STATE = 0_i32
    AE_CAPSCHANGE = 1_i32
    AE_RINGING = 2_i32
    AE_CONFIGCHANGE = 3_i32
    AE_FORWARD = 4_i32
    AE_NEWTERMINAL = 5_i32
    AE_REMOVETERMINAL = 6_i32
    AE_MSGWAITON = 7_i32
    AE_MSGWAITOFF = 8_i32
    AE_LASTITEM = 8_i32
  end
  enum ADDRESS_STATE
    AS_INSERVICE = 0_i32
    AS_OUTOFSERVICE = 1_i32
  end
  enum CALL_STATE
    CS_IDLE = 0_i32
    CS_INPROGRESS = 1_i32
    CS_CONNECTED = 2_i32
    CS_DISCONNECTED = 3_i32
    CS_OFFERING = 4_i32
    CS_HOLD = 5_i32
    CS_QUEUED = 6_i32
    CS_LASTITEM = 6_i32
  end
  enum CALL_STATE_EVENT_CAUSE
    CEC_NONE = 0_i32
    CEC_DISCONNECT_NORMAL = 1_i32
    CEC_DISCONNECT_BUSY = 2_i32
    CEC_DISCONNECT_BADADDRESS = 3_i32
    CEC_DISCONNECT_NOANSWER = 4_i32
    CEC_DISCONNECT_CANCELLED = 5_i32
    CEC_DISCONNECT_REJECTED = 6_i32
    CEC_DISCONNECT_FAILED = 7_i32
    CEC_DISCONNECT_BLOCKED = 8_i32
  end
  enum CALL_MEDIA_EVENT
    CME_NEW_STREAM = 0_i32
    CME_STREAM_FAIL = 1_i32
    CME_TERMINAL_FAIL = 2_i32
    CME_STREAM_NOT_USED = 3_i32
    CME_STREAM_ACTIVE = 4_i32
    CME_STREAM_INACTIVE = 5_i32
    CME_LASTITEM = 5_i32
  end
  enum CALL_MEDIA_EVENT_CAUSE
    CMC_UNKNOWN = 0_i32
    CMC_BAD_DEVICE = 1_i32
    CMC_CONNECT_FAIL = 2_i32
    CMC_LOCAL_REQUEST = 3_i32
    CMC_REMOTE_REQUEST = 4_i32
    CMC_MEDIA_TIMEOUT = 5_i32
    CMC_MEDIA_RECOVERED = 6_i32
    CMC_QUALITY_OF_SERVICE = 7_i32
  end
  enum DISCONNECT_CODE
    DC_NORMAL = 0_i32
    DC_NOANSWER = 1_i32
    DC_REJECTED = 2_i32
  end
  enum TERMINAL_STATE
    TS_INUSE = 0_i32
    TS_NOTINUSE = 1_i32
  end
  enum TERMINAL_DIRECTION
    TD_CAPTURE = 0_i32
    TD_RENDER = 1_i32
    TD_BIDIRECTIONAL = 2_i32
    TD_MULTITRACK_MIXED = 3_i32
    TD_NONE = 4_i32
  end
  enum TERMINAL_TYPE
    TT_STATIC = 0_i32
    TT_DYNAMIC = 1_i32
  end
  enum CALL_PRIVILEGE
    CP_OWNER = 0_i32
    CP_MONITOR = 1_i32
  end
  enum TAPI_EVENT
    TE_TAPIOBJECT = 1_i32
    TE_ADDRESS = 2_i32
    TE_CALLNOTIFICATION = 4_i32
    TE_CALLSTATE = 8_i32
    TE_CALLMEDIA = 16_i32
    TE_CALLHUB = 32_i32
    TE_CALLINFOCHANGE = 64_i32
    TE_PRIVATE = 128_i32
    TE_REQUEST = 256_i32
    TE_AGENT = 512_i32
    TE_AGENTSESSION = 1024_i32
    TE_QOSEVENT = 2048_i32
    TE_AGENTHANDLER = 4096_i32
    TE_ACDGROUP = 8192_i32
    TE_QUEUE = 16384_i32
    TE_DIGITEVENT = 32768_i32
    TE_GENERATEEVENT = 65536_i32
    TE_ASRTERMINAL = 131072_i32
    TE_TTSTERMINAL = 262144_i32
    TE_FILETERMINAL = 524288_i32
    TE_TONETERMINAL = 1048576_i32
    TE_PHONEEVENT = 2097152_i32
    TE_TONEEVENT = 4194304_i32
    TE_GATHERDIGITS = 8388608_i32
    TE_ADDRESSDEVSPECIFIC = 16777216_i32
    TE_PHONEDEVSPECIFIC = 33554432_i32
  end
  enum CALL_NOTIFICATION_EVENT
    CNE_OWNER = 0_i32
    CNE_MONITOR = 1_i32
    CNE_LASTITEM = 1_i32
  end
  enum CALLHUB_EVENT
    CHE_CALLJOIN = 0_i32
    CHE_CALLLEAVE = 1_i32
    CHE_CALLHUBNEW = 2_i32
    CHE_CALLHUBIDLE = 3_i32
    CHE_LASTITEM = 3_i32
  end
  enum CALLHUB_STATE
    CHS_ACTIVE = 0_i32
    CHS_IDLE = 1_i32
  end
  enum TAPIOBJECT_EVENT
    TE_ADDRESSCREATE = 0_i32
    TE_ADDRESSREMOVE = 1_i32
    TE_REINIT = 2_i32
    TE_TRANSLATECHANGE = 3_i32
    TE_ADDRESSCLOSE = 4_i32
    TE_PHONECREATE = 5_i32
    TE_PHONEREMOVE = 6_i32
  end
  enum TAPI_OBJECT_TYPE
    TOT_NONE = 0_i32
    TOT_TAPI = 1_i32
    TOT_ADDRESS = 2_i32
    TOT_TERMINAL = 3_i32
    TOT_CALL = 4_i32
    TOT_CALLHUB = 5_i32
    TOT_PHONE = 6_i32
  end
  enum QOS_SERVICE_LEVEL
    QSL_NEEDED = 1_i32
    QSL_IF_AVAILABLE = 2_i32
    QSL_BEST_EFFORT = 3_i32
  end
  enum QOS_EVENT
    QE_NOQOS = 1_i32
    QE_ADMISSIONFAILURE = 2_i32
    QE_POLICYFAILURE = 3_i32
    QE_GENERICERROR = 4_i32
    QE_LASTITEM = 4_i32
  end
  enum CALLINFOCHANGE_CAUSE
    CIC_OTHER = 0_i32
    CIC_DEVSPECIFIC = 1_i32
    CIC_BEARERMODE = 2_i32
    CIC_RATE = 3_i32
    CIC_APPSPECIFIC = 4_i32
    CIC_CALLID = 5_i32
    CIC_RELATEDCALLID = 6_i32
    CIC_ORIGIN = 7_i32
    CIC_REASON = 8_i32
    CIC_COMPLETIONID = 9_i32
    CIC_NUMOWNERINCR = 10_i32
    CIC_NUMOWNERDECR = 11_i32
    CIC_NUMMONITORS = 12_i32
    CIC_TRUNK = 13_i32
    CIC_CALLERID = 14_i32
    CIC_CALLEDID = 15_i32
    CIC_CONNECTEDID = 16_i32
    CIC_REDIRECTIONID = 17_i32
    CIC_REDIRECTINGID = 18_i32
    CIC_USERUSERINFO = 19_i32
    CIC_HIGHLEVELCOMP = 20_i32
    CIC_LOWLEVELCOMP = 21_i32
    CIC_CHARGINGINFO = 22_i32
    CIC_TREATMENT = 23_i32
    CIC_CALLDATA = 24_i32
    CIC_PRIVILEGE = 25_i32
    CIC_MEDIATYPE = 26_i32
    CIC_LASTITEM = 26_i32
  end
  enum CALLINFO_LONG
    CIL_MEDIATYPESAVAILABLE = 0_i32
    CIL_BEARERMODE = 1_i32
    CIL_CALLERIDADDRESSTYPE = 2_i32
    CIL_CALLEDIDADDRESSTYPE = 3_i32
    CIL_CONNECTEDIDADDRESSTYPE = 4_i32
    CIL_REDIRECTIONIDADDRESSTYPE = 5_i32
    CIL_REDIRECTINGIDADDRESSTYPE = 6_i32
    CIL_ORIGIN = 7_i32
    CIL_REASON = 8_i32
    CIL_APPSPECIFIC = 9_i32
    CIL_CALLPARAMSFLAGS = 10_i32
    CIL_CALLTREATMENT = 11_i32
    CIL_MINRATE = 12_i32
    CIL_MAXRATE = 13_i32
    CIL_COUNTRYCODE = 14_i32
    CIL_CALLID = 15_i32
    CIL_RELATEDCALLID = 16_i32
    CIL_COMPLETIONID = 17_i32
    CIL_NUMBEROFOWNERS = 18_i32
    CIL_NUMBEROFMONITORS = 19_i32
    CIL_TRUNK = 20_i32
    CIL_RATE = 21_i32
    CIL_GENERATEDIGITDURATION = 22_i32
    CIL_MONITORDIGITMODES = 23_i32
    CIL_MONITORMEDIAMODES = 24_i32
  end
  enum CALLINFO_STRING
    CIS_CALLERIDNAME = 0_i32
    CIS_CALLERIDNUMBER = 1_i32
    CIS_CALLEDIDNAME = 2_i32
    CIS_CALLEDIDNUMBER = 3_i32
    CIS_CONNECTEDIDNAME = 4_i32
    CIS_CONNECTEDIDNUMBER = 5_i32
    CIS_REDIRECTIONIDNAME = 6_i32
    CIS_REDIRECTIONIDNUMBER = 7_i32
    CIS_REDIRECTINGIDNAME = 8_i32
    CIS_REDIRECTINGIDNUMBER = 9_i32
    CIS_CALLEDPARTYFRIENDLYNAME = 10_i32
    CIS_COMMENT = 11_i32
    CIS_DISPLAYABLEADDRESS = 12_i32
    CIS_CALLINGPARTYID = 13_i32
  end
  enum CALLINFO_BUFFER
    CIB_USERUSERINFO = 0_i32
    CIB_DEVSPECIFICBUFFER = 1_i32
    CIB_CALLDATABUFFER = 2_i32
    CIB_CHARGINGINFOBUFFER = 3_i32
    CIB_HIGHLEVELCOMPATIBILITYBUFFER = 4_i32
    CIB_LOWLEVELCOMPATIBILITYBUFFER = 5_i32
  end
  enum ADDRESS_CAPABILITY
    AC_ADDRESSTYPES = 0_i32
    AC_BEARERMODES = 1_i32
    AC_MAXACTIVECALLS = 2_i32
    AC_MAXONHOLDCALLS = 3_i32
    AC_MAXONHOLDPENDINGCALLS = 4_i32
    AC_MAXNUMCONFERENCE = 5_i32
    AC_MAXNUMTRANSCONF = 6_i32
    AC_MONITORDIGITSUPPORT = 7_i32
    AC_GENERATEDIGITSUPPORT = 8_i32
    AC_GENERATETONEMODES = 9_i32
    AC_GENERATETONEMAXNUMFREQ = 10_i32
    AC_MONITORTONEMAXNUMFREQ = 11_i32
    AC_MONITORTONEMAXNUMENTRIES = 12_i32
    AC_DEVCAPFLAGS = 13_i32
    AC_ANSWERMODES = 14_i32
    AC_LINEFEATURES = 15_i32
    AC_SETTABLEDEVSTATUS = 16_i32
    AC_PARKSUPPORT = 17_i32
    AC_CALLERIDSUPPORT = 18_i32
    AC_CALLEDIDSUPPORT = 19_i32
    AC_CONNECTEDIDSUPPORT = 20_i32
    AC_REDIRECTIONIDSUPPORT = 21_i32
    AC_REDIRECTINGIDSUPPORT = 22_i32
    AC_ADDRESSCAPFLAGS = 23_i32
    AC_CALLFEATURES1 = 24_i32
    AC_CALLFEATURES2 = 25_i32
    AC_REMOVEFROMCONFCAPS = 26_i32
    AC_REMOVEFROMCONFSTATE = 27_i32
    AC_TRANSFERMODES = 28_i32
    AC_ADDRESSFEATURES = 29_i32
    AC_PREDICTIVEAUTOTRANSFERSTATES = 30_i32
    AC_MAXCALLDATASIZE = 31_i32
    AC_LINEID = 32_i32
    AC_ADDRESSID = 33_i32
    AC_FORWARDMODES = 34_i32
    AC_MAXFORWARDENTRIES = 35_i32
    AC_MAXSPECIFICENTRIES = 36_i32
    AC_MINFWDNUMRINGS = 37_i32
    AC_MAXFWDNUMRINGS = 38_i32
    AC_MAXCALLCOMPLETIONS = 39_i32
    AC_CALLCOMPLETIONCONDITIONS = 40_i32
    AC_CALLCOMPLETIONMODES = 41_i32
    AC_PERMANENTDEVICEID = 42_i32
    AC_GATHERDIGITSMINTIMEOUT = 43_i32
    AC_GATHERDIGITSMAXTIMEOUT = 44_i32
    AC_GENERATEDIGITMINDURATION = 45_i32
    AC_GENERATEDIGITMAXDURATION = 46_i32
    AC_GENERATEDIGITDEFAULTDURATION = 47_i32
  end
  enum ADDRESS_CAPABILITY_STRING
    ACS_PROTOCOL = 0_i32
    ACS_ADDRESSDEVICESPECIFIC = 1_i32
    ACS_LINEDEVICESPECIFIC = 2_i32
    ACS_PROVIDERSPECIFIC = 3_i32
    ACS_SWITCHSPECIFIC = 4_i32
    ACS_PERMANENTDEVICEGUID = 5_i32
  end
  enum FULLDUPLEX_SUPPORT
    FDS_SUPPORTED = 0_i32
    FDS_NOTSUPPORTED = 1_i32
    FDS_UNKNOWN = 2_i32
  end
  enum FINISH_MODE
    FM_ASTRANSFER = 0_i32
    FM_ASCONFERENCE = 1_i32
  end
  enum PHONE_PRIVILEGE
    PP_OWNER = 0_i32
    PP_MONITOR = 1_i32
  end
  enum PHONE_HOOK_SWITCH_DEVICE
    PHSD_HANDSET = 1_i32
    PHSD_SPEAKERPHONE = 2_i32
    PHSD_HEADSET = 4_i32
  end
  enum PHONE_HOOK_SWITCH_STATE
    PHSS_ONHOOK = 1_i32
    PHSS_OFFHOOK_MIC_ONLY = 2_i32
    PHSS_OFFHOOK_SPEAKER_ONLY = 4_i32
    PHSS_OFFHOOK = 8_i32
  end
  enum PHONE_LAMP_MODE
    LM_DUMMY = 1_i32
    LM_OFF = 2_i32
    LM_STEADY = 4_i32
    LM_WINK = 8_i32
    LM_FLASH = 16_i32
    LM_FLUTTER = 32_i32
    LM_BROKENFLUTTER = 64_i32
    LM_UNKNOWN = 128_i32
  end
  enum PHONECAPS_LONG
    PCL_HOOKSWITCHES = 0_i32
    PCL_HANDSETHOOKSWITCHMODES = 1_i32
    PCL_HEADSETHOOKSWITCHMODES = 2_i32
    PCL_SPEAKERPHONEHOOKSWITCHMODES = 3_i32
    PCL_DISPLAYNUMROWS = 4_i32
    PCL_DISPLAYNUMCOLUMNS = 5_i32
    PCL_NUMRINGMODES = 6_i32
    PCL_NUMBUTTONLAMPS = 7_i32
    PCL_GENERICPHONE = 8_i32
  end
  enum PHONECAPS_STRING
    PCS_PHONENAME = 0_i32
    PCS_PHONEINFO = 1_i32
    PCS_PROVIDERINFO = 2_i32
  end
  enum PHONECAPS_BUFFER
    PCB_DEVSPECIFICBUFFER = 0_i32
  end
  enum PHONE_BUTTON_STATE
    PBS_UP = 1_i32
    PBS_DOWN = 2_i32
    PBS_UNKNOWN = 4_i32
    PBS_UNAVAIL = 8_i32
  end
  enum PHONE_BUTTON_MODE
    PBM_DUMMY = 0_i32
    PBM_CALL = 1_i32
    PBM_FEATURE = 2_i32
    PBM_KEYPAD = 3_i32
    PBM_LOCAL = 4_i32
    PBM_DISPLAY = 5_i32
  end
  enum PHONE_BUTTON_FUNCTION
    PBF_UNKNOWN = 0_i32
    PBF_CONFERENCE = 1_i32
    PBF_TRANSFER = 2_i32
    PBF_DROP = 3_i32
    PBF_HOLD = 4_i32
    PBF_RECALL = 5_i32
    PBF_DISCONNECT = 6_i32
    PBF_CONNECT = 7_i32
    PBF_MSGWAITON = 8_i32
    PBF_MSGWAITOFF = 9_i32
    PBF_SELECTRING = 10_i32
    PBF_ABBREVDIAL = 11_i32
    PBF_FORWARD = 12_i32
    PBF_PICKUP = 13_i32
    PBF_RINGAGAIN = 14_i32
    PBF_PARK = 15_i32
    PBF_REJECT = 16_i32
    PBF_REDIRECT = 17_i32
    PBF_MUTE = 18_i32
    PBF_VOLUMEUP = 19_i32
    PBF_VOLUMEDOWN = 20_i32
    PBF_SPEAKERON = 21_i32
    PBF_SPEAKEROFF = 22_i32
    PBF_FLASH = 23_i32
    PBF_DATAON = 24_i32
    PBF_DATAOFF = 25_i32
    PBF_DONOTDISTURB = 26_i32
    PBF_INTERCOM = 27_i32
    PBF_BRIDGEDAPP = 28_i32
    PBF_BUSY = 29_i32
    PBF_CALLAPP = 30_i32
    PBF_DATETIME = 31_i32
    PBF_DIRECTORY = 32_i32
    PBF_COVER = 33_i32
    PBF_CALLID = 34_i32
    PBF_LASTNUM = 35_i32
    PBF_NIGHTSRV = 36_i32
    PBF_SENDCALLS = 37_i32
    PBF_MSGINDICATOR = 38_i32
    PBF_REPDIAL = 39_i32
    PBF_SETREPDIAL = 40_i32
    PBF_SYSTEMSPEED = 41_i32
    PBF_STATIONSPEED = 42_i32
    PBF_CAMPON = 43_i32
    PBF_SAVEREPEAT = 44_i32
    PBF_QUEUECALL = 45_i32
    PBF_NONE = 46_i32
    PBF_SEND = 47_i32
  end
  enum PHONE_TONE
    PT_KEYPADZERO = 0_i32
    PT_KEYPADONE = 1_i32
    PT_KEYPADTWO = 2_i32
    PT_KEYPADTHREE = 3_i32
    PT_KEYPADFOUR = 4_i32
    PT_KEYPADFIVE = 5_i32
    PT_KEYPADSIX = 6_i32
    PT_KEYPADSEVEN = 7_i32
    PT_KEYPADEIGHT = 8_i32
    PT_KEYPADNINE = 9_i32
    PT_KEYPADSTAR = 10_i32
    PT_KEYPADPOUND = 11_i32
    PT_KEYPADA = 12_i32
    PT_KEYPADB = 13_i32
    PT_KEYPADC = 14_i32
    PT_KEYPADD = 15_i32
    PT_NORMALDIALTONE = 16_i32
    PT_EXTERNALDIALTONE = 17_i32
    PT_BUSY = 18_i32
    PT_RINGBACK = 19_i32
    PT_ERRORTONE = 20_i32
    PT_SILENCE = 21_i32
  end
  enum PHONE_EVENT
    PE_DISPLAY = 0_i32
    PE_LAMPMODE = 1_i32
    PE_RINGMODE = 2_i32
    PE_RINGVOLUME = 3_i32
    PE_HOOKSWITCH = 4_i32
    PE_CAPSCHANGE = 5_i32
    PE_BUTTON = 6_i32
    PE_CLOSE = 7_i32
    PE_NUMBERGATHERED = 8_i32
    PE_DIALING = 9_i32
    PE_ANSWER = 10_i32
    PE_DISCONNECT = 11_i32
    PE_LASTITEM = 11_i32
  end
  enum TERMINAL_MEDIA_STATE
    TMS_IDLE = 0_i32
    TMS_ACTIVE = 1_i32
    TMS_PAUSED = 2_i32
    TMS_LASTITEM = 2_i32
  end
  enum FT_STATE_EVENT_CAUSE
    FTEC_NORMAL = 0_i32
    FTEC_END_OF_FILE = 1_i32
    FTEC_READ_ERROR = 2_i32
    FTEC_WRITE_ERROR = 3_i32
  end
  enum AGENT_EVENT
    AE_NOT_READY = 0_i32
    AE_READY = 1_i32
    AE_BUSY_ACD = 2_i32
    AE_BUSY_INCOMING = 3_i32
    AE_BUSY_OUTGOING = 4_i32
    AE_UNKNOWN = 5_i32
  end
  enum AGENT_STATE
    AS_NOT_READY = 0_i32
    AS_READY = 1_i32
    AS_BUSY_ACD = 2_i32
    AS_BUSY_INCOMING = 3_i32
    AS_BUSY_OUTGOING = 4_i32
    AS_UNKNOWN = 5_i32
  end
  enum AGENT_SESSION_EVENT
    ASE_NEW_SESSION = 0_i32
    ASE_NOT_READY = 1_i32
    ASE_READY = 2_i32
    ASE_BUSY = 3_i32
    ASE_WRAPUP = 4_i32
    ASE_END = 5_i32
  end
  enum AGENT_SESSION_STATE
    ASST_NOT_READY = 0_i32
    ASST_READY = 1_i32
    ASST_BUSY_ON_CALL = 2_i32
    ASST_BUSY_WRAPUP = 3_i32
    ASST_SESSION_ENDED = 4_i32
  end
  enum AGENTHANDLER_EVENT
    AHE_NEW_AGENTHANDLER = 0_i32
    AHE_AGENTHANDLER_REMOVED = 1_i32
  end
  enum ACDGROUP_EVENT
    ACDGE_NEW_GROUP = 0_i32
    ACDGE_GROUP_REMOVED = 1_i32
  end
  enum ACDQUEUE_EVENT
    ACDQE_NEW_QUEUE = 0_i32
    ACDQE_QUEUE_REMOVED = 1_i32
  end
  enum MSP_ADDRESS_EVENT
    ADDRESS_TERMINAL_AVAILABLE = 0_i32
    ADDRESS_TERMINAL_UNAVAILABLE = 1_i32
  end
  enum MSP_CALL_EVENT
    CALL_NEW_STREAM = 0_i32
    CALL_STREAM_FAIL = 1_i32
    CALL_TERMINAL_FAIL = 2_i32
    CALL_STREAM_NOT_USED = 3_i32
    CALL_STREAM_ACTIVE = 4_i32
    CALL_STREAM_INACTIVE = 5_i32
  end
  enum MSP_CALL_EVENT_CAUSE
    CALL_CAUSE_UNKNOWN = 0_i32
    CALL_CAUSE_BAD_DEVICE = 1_i32
    CALL_CAUSE_CONNECT_FAIL = 2_i32
    CALL_CAUSE_LOCAL_REQUEST = 3_i32
    CALL_CAUSE_REMOTE_REQUEST = 4_i32
    CALL_CAUSE_MEDIA_TIMEOUT = 5_i32
    CALL_CAUSE_MEDIA_RECOVERED = 6_i32
    CALL_CAUSE_QUALITY_OF_SERVICE = 7_i32
  end
  enum MSP_EVENT
    ME_ADDRESS_EVENT = 0_i32
    ME_CALL_EVENT = 1_i32
    ME_TSP_DATA = 2_i32
    ME_PRIVATE_EVENT = 3_i32
    ME_ASR_TERMINAL_EVENT = 4_i32
    ME_TTS_TERMINAL_EVENT = 5_i32
    ME_FILE_TERMINAL_EVENT = 6_i32
    ME_TONE_TERMINAL_EVENT = 7_i32
  end
  enum DIRECTORY_TYPE
    DT_NTDS = 1_i32
    DT_ILS = 2_i32
  end
  enum DIRECTORY_OBJECT_TYPE
    OT_CONFERENCE = 1_i32
    OT_USER = 2_i32
  end
  enum RND_ADVERTISING_SCOPE
    RAS_LOCAL = 1_i32
    RAS_SITE = 2_i32
    RAS_REGION = 3_i32
    RAS_WORLD = 4_i32
  end

  @[Extern]
  record LINEADDRESSCAPS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwLineDeviceID : UInt32,
    dwAddressSize : UInt32,
    dwAddressOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwAddressSharing : UInt32,
    dwAddressStates : UInt32,
    dwCallInfoStates : UInt32,
    dwCallerIDFlags : UInt32,
    dwCalledIDFlags : UInt32,
    dwConnectedIDFlags : UInt32,
    dwRedirectionIDFlags : UInt32,
    dwRedirectingIDFlags : UInt32,
    dwCallStates : UInt32,
    dwDialToneModes : UInt32,
    dwBusyModes : UInt32,
    dwSpecialInfo : UInt32,
    dwDisconnectModes : UInt32,
    dwMaxNumActiveCalls : UInt32,
    dwMaxNumOnHoldCalls : UInt32,
    dwMaxNumOnHoldPendingCalls : UInt32,
    dwMaxNumConference : UInt32,
    dwMaxNumTransConf : UInt32,
    dwAddrCapFlags : UInt32,
    dwCallFeatures : UInt32,
    dwRemoveFromConfCaps : UInt32,
    dwRemoveFromConfState : UInt32,
    dwTransferModes : UInt32,
    dwParkModes : UInt32,
    dwForwardModes : UInt32,
    dwMaxForwardEntries : UInt32,
    dwMaxSpecificEntries : UInt32,
    dwMinFwdNumRings : UInt32,
    dwMaxFwdNumRings : UInt32,
    dwMaxCallCompletions : UInt32,
    dwCallCompletionConds : UInt32,
    dwCallCompletionModes : UInt32,
    dwNumCompletionMessages : UInt32,
    dwCompletionMsgTextEntrySize : UInt32,
    dwCompletionMsgTextSize : UInt32,
    dwCompletionMsgTextOffset : UInt32,
    dwAddressFeatures : UInt32,
    dwPredictiveAutoTransferStates : UInt32,
    dwNumCallTreatments : UInt32,
    dwCallTreatmentListSize : UInt32,
    dwCallTreatmentListOffset : UInt32,
    dwDeviceClassesSize : UInt32,
    dwDeviceClassesOffset : UInt32,
    dwMaxCallDataSize : UInt32,
    dwCallFeatures2 : UInt32,
    dwMaxNoAnswerTimeout : UInt32,
    dwConnectedModes : UInt32,
    dwOfferingModes : UInt32,
    dwAvailableMediaModes : UInt32

  @[Extern]
  record LINEADDRESSSTATUS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumInUse : UInt32,
    dwNumActiveCalls : UInt32,
    dwNumOnHoldCalls : UInt32,
    dwNumOnHoldPendCalls : UInt32,
    dwAddressFeatures : UInt32,
    dwNumRingsNoAnswer : UInt32,
    dwForwardNumEntries : UInt32,
    dwForwardSize : UInt32,
    dwForwardOffset : UInt32,
    dwTerminalModesSize : UInt32,
    dwTerminalModesOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32

  @[Extern]
  record LINEAGENTACTIVITYENTRY,
    dwID : UInt32,
    dwNameSize : UInt32,
    dwNameOffset : UInt32

  @[Extern]
  record LINEAGENTACTIVITYLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumEntries : UInt32,
    dwListSize : UInt32,
    dwListOffset : UInt32

  @[Extern]
  record LINEAGENTCAPS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwAgentHandlerInfoSize : UInt32,
    dwAgentHandlerInfoOffset : UInt32,
    dwCapsVersion : UInt32,
    dwFeatures : UInt32,
    dwStates : UInt32,
    dwNextStates : UInt32,
    dwMaxNumGroupEntries : UInt32,
    dwAgentStatusMessages : UInt32,
    dwNumAgentExtensionIDs : UInt32,
    dwAgentExtensionIDListSize : UInt32,
    dwAgentExtensionIDListOffset : UInt32,
    proxy_guid : LibC::GUID

  @[Extern]
  record LINEAGENTGROUPENTRY,
    group_id : GroupID_e__Struct,
    dwNameSize : UInt32,
    dwNameOffset : UInt32 do

    # Nested Type GroupID_e__Struct
    @[Extern]
    record GroupID_e__Struct,
      dwGroupID1 : UInt32,
      dwGroupID2 : UInt32,
      dwGroupID3 : UInt32,
      dwGroupID4 : UInt32

  end

  @[Extern]
  record LINEAGENTGROUPLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumEntries : UInt32,
    dwListSize : UInt32,
    dwListOffset : UInt32

  @[Extern]
  record LINEAGENTSTATUS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumEntries : UInt32,
    dwGroupListSize : UInt32,
    dwGroupListOffset : UInt32,
    dwState : UInt32,
    dwNextState : UInt32,
    dwActivityID : UInt32,
    dwActivitySize : UInt32,
    dwActivityOffset : UInt32,
    dwAgentFeatures : UInt32,
    dwValidStates : UInt32,
    dwValidNextStates : UInt32

  @[Extern]
  record LINEAPPINFO,
    dwMachineNameSize : UInt32,
    dwMachineNameOffset : UInt32,
    dwUserNameSize : UInt32,
    dwUserNameOffset : UInt32,
    dwModuleFilenameSize : UInt32,
    dwModuleFilenameOffset : UInt32,
    dwFriendlyNameSize : UInt32,
    dwFriendlyNameOffset : UInt32,
    dwMediaModes : UInt32,
    dwAddressID : UInt32

  @[Extern]
  record LINEAGENTENTRY,
    hAgent : UInt32,
    dwNameSize : UInt32,
    dwNameOffset : UInt32,
    dwIDSize : UInt32,
    dwIDOffset : UInt32,
    dwPINSize : UInt32,
    dwPINOffset : UInt32

  @[Extern]
  record LINEAGENTLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumEntries : UInt32,
    dwListSize : UInt32,
    dwListOffset : UInt32

  @[Extern]
  record LINEAGENTINFO,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwAgentState : UInt32,
    dwNextAgentState : UInt32,
    dwMeasurementPeriod : UInt32,
    cyOverallCallRate : Win32cr::System::Com::CY,
    dwNumberOfACDCalls : UInt32,
    dwNumberOfIncomingCalls : UInt32,
    dwNumberOfOutgoingCalls : UInt32,
    dwTotalACDTalkTime : UInt32,
    dwTotalACDCallTime : UInt32,
    dwTotalACDWrapUpTime : UInt32

  @[Extern]
  record LINEAGENTSESSIONENTRY,
    hAgentSession : UInt32,
    hAgent : UInt32,
    group_id : LibC::GUID,
    dwWorkingAddressID : UInt32

  @[Extern]
  record LINEAGENTSESSIONLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumEntries : UInt32,
    dwListSize : UInt32,
    dwListOffset : UInt32

  @[Extern]
  record LINEAGENTSESSIONINFO,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwAgentSessionState : UInt32,
    dwNextAgentSessionState : UInt32,
    dateSessionStartTime : Float64,
    dwSessionDuration : UInt32,
    dwNumberOfCalls : UInt32,
    dwTotalTalkTime : UInt32,
    dwAverageTalkTime : UInt32,
    dwTotalCallTime : UInt32,
    dwAverageCallTime : UInt32,
    dwTotalWrapUpTime : UInt32,
    dwAverageWrapUpTime : UInt32,
    cyACDCallRate : Win32cr::System::Com::CY,
    dwLongestTimeToAnswer : UInt32,
    dwAverageTimeToAnswer : UInt32

  @[Extern]
  record LINEQUEUEENTRY,
    dwQueueID : UInt32,
    dwNameSize : UInt32,
    dwNameOffset : UInt32

  @[Extern]
  record LINEQUEUELIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumEntries : UInt32,
    dwListSize : UInt32,
    dwListOffset : UInt32

  @[Extern]
  record LINEQUEUEINFO,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwMeasurementPeriod : UInt32,
    dwTotalCallsQueued : UInt32,
    dwCurrentCallsQueued : UInt32,
    dwTotalCallsAbandoned : UInt32,
    dwTotalCallsFlowedIn : UInt32,
    dwTotalCallsFlowedOut : UInt32,
    dwLongestEverWaitTime : UInt32,
    dwCurrentLongestWaitTime : UInt32,
    dwAverageWaitTime : UInt32,
    dwFinalDisposition : UInt32

  @[Extern]
  record LINEPROXYREQUESTLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumEntries : UInt32,
    dwListSize : UInt32,
    dwListOffset : UInt32

  @[Extern]
  record LINEDIALPARAMS,
    dwDialPause : UInt32,
    dwDialSpeed : UInt32,
    dwDigitDuration : UInt32,
    dwWaitForDialtone : UInt32

  @[Extern]
  record LINECALLINFO,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    hLine : UInt32,
    dwLineDeviceID : UInt32,
    dwAddressID : UInt32,
    dwBearerMode : UInt32,
    dwRate : UInt32,
    dwMediaMode : UInt32,
    dwAppSpecific : UInt32,
    dwCallID : UInt32,
    dwRelatedCallID : UInt32,
    dwCallParamFlags : UInt32,
    dwCallStates : UInt32,
    dwMonitorDigitModes : UInt32,
    dwMonitorMediaModes : UInt32,
    dial_params : Win32cr::Devices::Tapi::LINEDIALPARAMS,
    dwOrigin : UInt32,
    dwReason : UInt32,
    dwCompletionID : UInt32,
    dwNumOwners : UInt32,
    dwNumMonitors : UInt32,
    dwCountryCode : UInt32,
    dwTrunk : UInt32,
    dwCallerIDFlags : UInt32,
    dwCallerIDSize : UInt32,
    dwCallerIDOffset : UInt32,
    dwCallerIDNameSize : UInt32,
    dwCallerIDNameOffset : UInt32,
    dwCalledIDFlags : UInt32,
    dwCalledIDSize : UInt32,
    dwCalledIDOffset : UInt32,
    dwCalledIDNameSize : UInt32,
    dwCalledIDNameOffset : UInt32,
    dwConnectedIDFlags : UInt32,
    dwConnectedIDSize : UInt32,
    dwConnectedIDOffset : UInt32,
    dwConnectedIDNameSize : UInt32,
    dwConnectedIDNameOffset : UInt32,
    dwRedirectionIDFlags : UInt32,
    dwRedirectionIDSize : UInt32,
    dwRedirectionIDOffset : UInt32,
    dwRedirectionIDNameSize : UInt32,
    dwRedirectionIDNameOffset : UInt32,
    dwRedirectingIDFlags : UInt32,
    dwRedirectingIDSize : UInt32,
    dwRedirectingIDOffset : UInt32,
    dwRedirectingIDNameSize : UInt32,
    dwRedirectingIDNameOffset : UInt32,
    dwAppNameSize : UInt32,
    dwAppNameOffset : UInt32,
    dwDisplayableAddressSize : UInt32,
    dwDisplayableAddressOffset : UInt32,
    dwCalledPartySize : UInt32,
    dwCalledPartyOffset : UInt32,
    dwCommentSize : UInt32,
    dwCommentOffset : UInt32,
    dwDisplaySize : UInt32,
    dwDisplayOffset : UInt32,
    dwUserUserInfoSize : UInt32,
    dwUserUserInfoOffset : UInt32,
    dwHighLevelCompSize : UInt32,
    dwHighLevelCompOffset : UInt32,
    dwLowLevelCompSize : UInt32,
    dwLowLevelCompOffset : UInt32,
    dwChargingInfoSize : UInt32,
    dwChargingInfoOffset : UInt32,
    dwTerminalModesSize : UInt32,
    dwTerminalModesOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwCallTreatment : UInt32,
    dwCallDataSize : UInt32,
    dwCallDataOffset : UInt32,
    dwSendingFlowspecSize : UInt32,
    dwSendingFlowspecOffset : UInt32,
    dwReceivingFlowspecSize : UInt32,
    dwReceivingFlowspecOffset : UInt32

  @[Extern]
  record LINECALLLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwCallsNumEntries : UInt32,
    dwCallsSize : UInt32,
    dwCallsOffset : UInt32

  @[Extern]
  record LINECALLPARAMS,
    dwTotalSize : UInt32,
    dwBearerMode : UInt32,
    dwMinRate : UInt32,
    dwMaxRate : UInt32,
    dwMediaMode : UInt32,
    dwCallParamFlags : UInt32,
    dwAddressMode : UInt32,
    dwAddressID : UInt32,
    dial_params : Win32cr::Devices::Tapi::LINEDIALPARAMS,
    dwOrigAddressSize : UInt32,
    dwOrigAddressOffset : UInt32,
    dwDisplayableAddressSize : UInt32,
    dwDisplayableAddressOffset : UInt32,
    dwCalledPartySize : UInt32,
    dwCalledPartyOffset : UInt32,
    dwCommentSize : UInt32,
    dwCommentOffset : UInt32,
    dwUserUserInfoSize : UInt32,
    dwUserUserInfoOffset : UInt32,
    dwHighLevelCompSize : UInt32,
    dwHighLevelCompOffset : UInt32,
    dwLowLevelCompSize : UInt32,
    dwLowLevelCompOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwPredictiveAutoTransferStates : UInt32,
    dwTargetAddressSize : UInt32,
    dwTargetAddressOffset : UInt32,
    dwSendingFlowspecSize : UInt32,
    dwSendingFlowspecOffset : UInt32,
    dwReceivingFlowspecSize : UInt32,
    dwReceivingFlowspecOffset : UInt32,
    dwDeviceClassSize : UInt32,
    dwDeviceClassOffset : UInt32,
    dwDeviceConfigSize : UInt32,
    dwDeviceConfigOffset : UInt32,
    dwCallDataSize : UInt32,
    dwCallDataOffset : UInt32,
    dwNoAnswerTimeout : UInt32,
    dwCallingPartyIDSize : UInt32,
    dwCallingPartyIDOffset : UInt32

  @[Extern]
  record LINECALLSTATUS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwCallState : UInt32,
    dwCallStateMode : UInt32,
    dwCallPrivilege : UInt32,
    dwCallFeatures : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwCallFeatures2 : UInt32,
    tStateEntryTime : Win32cr::Foundation::SYSTEMTIME

  @[Extern]
  record LINECALLTREATMENTENTRY,
    dwCallTreatmentID : UInt32,
    dwCallTreatmentNameSize : UInt32,
    dwCallTreatmentNameOffset : UInt32

  @[Extern]
  record LINECARDENTRY,
    dwPermanentCardID : UInt32,
    dwCardNameSize : UInt32,
    dwCardNameOffset : UInt32,
    dwCardNumberDigits : UInt32,
    dwSameAreaRuleSize : UInt32,
    dwSameAreaRuleOffset : UInt32,
    dwLongDistanceRuleSize : UInt32,
    dwLongDistanceRuleOffset : UInt32,
    dwInternationalRuleSize : UInt32,
    dwInternationalRuleOffset : UInt32,
    dwOptions : UInt32

  @[Extern]
  record LINECOUNTRYENTRY,
    dwCountryID : UInt32,
    dwCountryCode : UInt32,
    dwNextCountryID : UInt32,
    dwCountryNameSize : UInt32,
    dwCountryNameOffset : UInt32,
    dwSameAreaRuleSize : UInt32,
    dwSameAreaRuleOffset : UInt32,
    dwLongDistanceRuleSize : UInt32,
    dwLongDistanceRuleOffset : UInt32,
    dwInternationalRuleSize : UInt32,
    dwInternationalRuleOffset : UInt32

  @[Extern]
  record LINECOUNTRYLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumCountries : UInt32,
    dwCountryListSize : UInt32,
    dwCountryListOffset : UInt32

  @[Extern]
  record LINEDEVCAPS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwProviderInfoSize : UInt32,
    dwProviderInfoOffset : UInt32,
    dwSwitchInfoSize : UInt32,
    dwSwitchInfoOffset : UInt32,
    dwPermanentLineID : UInt32,
    dwLineNameSize : UInt32,
    dwLineNameOffset : UInt32,
    dwStringFormat : UInt32,
    dwAddressModes : UInt32,
    dwNumAddresses : UInt32,
    dwBearerModes : UInt32,
    dwMaxRate : UInt32,
    dwMediaModes : UInt32,
    dwGenerateToneModes : UInt32,
    dwGenerateToneMaxNumFreq : UInt32,
    dwGenerateDigitModes : UInt32,
    dwMonitorToneMaxNumFreq : UInt32,
    dwMonitorToneMaxNumEntries : UInt32,
    dwMonitorDigitModes : UInt32,
    dwGatherDigitsMinTimeout : UInt32,
    dwGatherDigitsMaxTimeout : UInt32,
    dwMedCtlDigitMaxListSize : UInt32,
    dwMedCtlMediaMaxListSize : UInt32,
    dwMedCtlToneMaxListSize : UInt32,
    dwMedCtlCallStateMaxListSize : UInt32,
    dwDevCapFlags : UInt32,
    dwMaxNumActiveCalls : UInt32,
    dwAnswerMode : UInt32,
    dwRingModes : UInt32,
    dwLineStates : UInt32,
    dwUUIAcceptSize : UInt32,
    dwUUIAnswerSize : UInt32,
    dwUUIMakeCallSize : UInt32,
    dwUUIDropSize : UInt32,
    dwUUISendUserUserInfoSize : UInt32,
    dwUUICallInfoSize : UInt32,
    min_dial_params : Win32cr::Devices::Tapi::LINEDIALPARAMS,
    max_dial_params : Win32cr::Devices::Tapi::LINEDIALPARAMS,
    default_dial_params : Win32cr::Devices::Tapi::LINEDIALPARAMS,
    dwNumTerminals : UInt32,
    dwTerminalCapsSize : UInt32,
    dwTerminalCapsOffset : UInt32,
    dwTerminalTextEntrySize : UInt32,
    dwTerminalTextSize : UInt32,
    dwTerminalTextOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwLineFeatures : UInt32,
    dwSettableDevStatus : UInt32,
    dwDeviceClassesSize : UInt32,
    dwDeviceClassesOffset : UInt32,
    permanent_line_guid : LibC::GUID

  @[Extern]
  record LINEDEVSTATUS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumOpens : UInt32,
    dwOpenMediaModes : UInt32,
    dwNumActiveCalls : UInt32,
    dwNumOnHoldCalls : UInt32,
    dwNumOnHoldPendCalls : UInt32,
    dwLineFeatures : UInt32,
    dwNumCallCompletions : UInt32,
    dwRingMode : UInt32,
    dwSignalLevel : UInt32,
    dwBatteryLevel : UInt32,
    dwRoamMode : UInt32,
    dwDevStatusFlags : UInt32,
    dwTerminalModesSize : UInt32,
    dwTerminalModesOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwAvailableMediaModes : UInt32,
    dwAppInfoSize : UInt32,
    dwAppInfoOffset : UInt32

  @[Extern]
  record LINEEXTENSIONID,
    dwExtensionID0 : UInt32,
    dwExtensionID1 : UInt32,
    dwExtensionID2 : UInt32,
    dwExtensionID3 : UInt32

  @[Extern]
  record LINEFORWARD,
    dwForwardMode : UInt32,
    dwCallerAddressSize : UInt32,
    dwCallerAddressOffset : UInt32,
    dwDestCountryCode : UInt32,
    dwDestAddressSize : UInt32,
    dwDestAddressOffset : UInt32

  @[Extern]
  record LINEFORWARDLIST,
    dwTotalSize : UInt32,
    dwNumEntries : UInt32,
    forward_list : Win32cr::Devices::Tapi::LINEFORWARD*

  @[Extern]
  record LINEGENERATETONE,
    dwFrequency : UInt32,
    dwCadenceOn : UInt32,
    dwCadenceOff : UInt32,
    dwVolume : UInt32

  @[Extern]
  record LINEINITIALIZEEXPARAMS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwOptions : UInt32,
    handles : Handles_e__Union,
    dwCompletionKey : UInt32 do

    # Nested Type Handles_e__Union
    @[Extern(union: true)]
    record Handles_e__Union,
      hEvent : Win32cr::Foundation::HANDLE,
      hCompletionPort : Win32cr::Foundation::HANDLE

  end

  @[Extern]
  record LINELOCATIONENTRY,
    dwPermanentLocationID : UInt32,
    dwLocationNameSize : UInt32,
    dwLocationNameOffset : UInt32,
    dwCountryCode : UInt32,
    dwCityCodeSize : UInt32,
    dwCityCodeOffset : UInt32,
    dwPreferredCardID : UInt32,
    dwLocalAccessCodeSize : UInt32,
    dwLocalAccessCodeOffset : UInt32,
    dwLongDistanceAccessCodeSize : UInt32,
    dwLongDistanceAccessCodeOffset : UInt32,
    dwTollPrefixListSize : UInt32,
    dwTollPrefixListOffset : UInt32,
    dwCountryID : UInt32,
    dwOptions : UInt32,
    dwCancelCallWaitingSize : UInt32,
    dwCancelCallWaitingOffset : UInt32

  @[Extern]
  record LINEMEDIACONTROLCALLSTATE,
    dwCallStates : UInt32,
    dwMediaControl : UInt32

  @[Extern]
  record LINEMEDIACONTROLDIGIT,
    dwDigit : UInt32,
    dwDigitModes : UInt32,
    dwMediaControl : UInt32

  @[Extern]
  record LINEMEDIACONTROLMEDIA,
    dwMediaModes : UInt32,
    dwDuration : UInt32,
    dwMediaControl : UInt32

  @[Extern]
  record LINEMEDIACONTROLTONE,
    dwAppSpecific : UInt32,
    dwDuration : UInt32,
    dwFrequency1 : UInt32,
    dwFrequency2 : UInt32,
    dwFrequency3 : UInt32,
    dwMediaControl : UInt32

  @[Extern]
  record LINEMESSAGE,
    hDevice : UInt32,
    dwMessageID : UInt32,
    dwCallbackInstance : LibC::UIntPtrT,
    dwParam1 : LibC::UIntPtrT,
    dwParam2 : LibC::UIntPtrT,
    dwParam3 : LibC::UIntPtrT

  @[Extern]
  record LINEMONITORTONE,
    dwAppSpecific : UInt32,
    dwDuration : UInt32,
    dwFrequency1 : UInt32,
    dwFrequency2 : UInt32,
    dwFrequency3 : UInt32

  @[Extern]
  record LINEPROVIDERENTRY,
    dwPermanentProviderID : UInt32,
    dwProviderFilenameSize : UInt32,
    dwProviderFilenameOffset : UInt32

  @[Extern]
  record LINEPROVIDERLIST,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumProviders : UInt32,
    dwProviderListSize : UInt32,
    dwProviderListOffset : UInt32

  @[Extern]
  record LINEPROXYREQUEST,
    dwSize : UInt32,
    dwClientMachineNameSize : UInt32,
    dwClientMachineNameOffset : UInt32,
    dwClientUserNameSize : UInt32,
    dwClientUserNameOffset : UInt32,
    dwClientAppAPIVersion : UInt32,
    dwRequestType : UInt32,
    anonymous : Anonymous_e__Union do

    # Nested Type Anonymous_e__Union
    @[Extern(union: true)]
    record Anonymous_e__Union,
      set_agent_group : SetAgentGroup_e__Struct,
      set_agent_state : SetAgentState_e__Struct,
      set_agent_activity : SetAgentActivity_e__Struct,
      get_agent_caps : GetAgentCaps_e__Struct,
      get_agent_status : GetAgentStatus_e__Struct,
      agent_specific : AgentSpecific_e__Struct,
      get_agent_activity_list : GetAgentActivityList_e__Struct,
      get_agent_group_list : GetAgentGroupList_e__Struct,
      create_agent : CreateAgent_e__Struct,
      set_agent_state_ex : SetAgentStateEx_e__Struct,
      set_agent_measurement_period : SetAgentMeasurementPeriod_e__Struct,
      get_agent_info : GetAgentInfo_e__Struct,
      create_agent_session : CreateAgentSession_e__Struct,
      get_agent_session_list : GetAgentSessionList_e__Struct,
      get_agent_session_info : GetAgentSessionInfo_e__Struct,
      set_agent_session_state : SetAgentSessionState_e__Struct,
      get_queue_list : GetQueueList_e__Struct,
      set_queue_measurement_period : SetQueueMeasurementPeriod_e__Struct,
      get_queue_info : GetQueueInfo_e__Struct,
      get_group_list : GetGroupList_e__Struct do

      # Nested Type GetQueueInfo_e__Struct
      @[Extern]
      record GetQueueInfo_e__Struct,
        dwQueueID : UInt32,
        queue_info : Win32cr::Devices::Tapi::LINEQUEUEINFO


      # Nested Type GetQueueList_e__Struct
      @[Extern]
      record GetQueueList_e__Struct,
        group_id : LibC::GUID,
        queue_list : Win32cr::Devices::Tapi::LINEQUEUELIST


      # Nested Type GetAgentSessionInfo_e__Struct
      @[Extern]
      record GetAgentSessionInfo_e__Struct,
        hAgentSession : UInt32,
        session_info : Win32cr::Devices::Tapi::LINEAGENTSESSIONINFO


      # Nested Type CreateAgentSession_e__Struct
      @[Extern]
      record CreateAgentSession_e__Struct,
        hAgentSession : UInt32,
        dwAgentPINSize : UInt32,
        dwAgentPINOffset : UInt32,
        hAgent : UInt32,
        group_id : LibC::GUID,
        dwWorkingAddressID : UInt32


      # Nested Type SetAgentMeasurementPeriod_e__Struct
      @[Extern]
      record SetAgentMeasurementPeriod_e__Struct,
        hAgent : UInt32,
        dwMeasurementPeriod : UInt32


      # Nested Type CreateAgent_e__Struct
      @[Extern]
      record CreateAgent_e__Struct,
        hAgent : UInt32,
        dwAgentIDSize : UInt32,
        dwAgentIDOffset : UInt32,
        dwAgentPINSize : UInt32,
        dwAgentPINOffset : UInt32


      # Nested Type GetAgentActivityList_e__Struct
      @[Extern]
      record GetAgentActivityList_e__Struct,
        dwAddressID : UInt32,
        activity_list : Win32cr::Devices::Tapi::LINEAGENTACTIVITYLIST


      # Nested Type GetAgentStatus_e__Struct
      @[Extern]
      record GetAgentStatus_e__Struct,
        dwAddressID : UInt32,
        agent_status : Win32cr::Devices::Tapi::LINEAGENTSTATUS


      # Nested Type SetAgentActivity_e__Struct
      @[Extern]
      record SetAgentActivity_e__Struct,
        dwAddressID : UInt32,
        dwActivityID : UInt32


      # Nested Type SetAgentGroup_e__Struct
      @[Extern]
      record SetAgentGroup_e__Struct,
        dwAddressID : UInt32,
        group_list : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST


      # Nested Type SetQueueMeasurementPeriod_e__Struct
      @[Extern]
      record SetQueueMeasurementPeriod_e__Struct,
        dwQueueID : UInt32,
        dwMeasurementPeriod : UInt32


      # Nested Type GetAgentSessionList_e__Struct
      @[Extern]
      record GetAgentSessionList_e__Struct,
        hAgent : UInt32,
        session_list : Win32cr::Devices::Tapi::LINEAGENTSESSIONLIST


      # Nested Type SetAgentStateEx_e__Struct
      @[Extern]
      record SetAgentStateEx_e__Struct,
        hAgent : UInt32,
        dwAgentState : UInt32,
        dwNextAgentState : UInt32


      # Nested Type AgentSpecific_e__Struct
      @[Extern]
      record AgentSpecific_e__Struct,
        dwAddressID : UInt32,
        dwAgentExtensionIDIndex : UInt32,
        dwSize : UInt32,
        params : UInt8*


      # Nested Type SetAgentState_e__Struct
      @[Extern]
      record SetAgentState_e__Struct,
        dwAddressID : UInt32,
        dwAgentState : UInt32,
        dwNextAgentState : UInt32


      # Nested Type SetAgentSessionState_e__Struct
      @[Extern]
      record SetAgentSessionState_e__Struct,
        hAgentSession : UInt32,
        dwAgentSessionState : UInt32,
        dwNextAgentSessionState : UInt32


      # Nested Type GetAgentGroupList_e__Struct
      @[Extern]
      record GetAgentGroupList_e__Struct,
        dwAddressID : UInt32,
        group_list : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST


      # Nested Type GetGroupList_e__Struct
      @[Extern]
      record GetGroupList_e__Struct,
        group_list : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST


      # Nested Type GetAgentCaps_e__Struct
      @[Extern]
      record GetAgentCaps_e__Struct,
        dwAddressID : UInt32,
        agent_caps : Win32cr::Devices::Tapi::LINEAGENTCAPS


      # Nested Type GetAgentInfo_e__Struct
      @[Extern]
      record GetAgentInfo_e__Struct,
        hAgent : UInt32,
        agent_info : Win32cr::Devices::Tapi::LINEAGENTINFO

    end

  end

  @[Extern]
  record LINEREQMAKECALL,
    szDestAddress : Win32cr::Foundation::CHAR[80],
    szAppName : Win32cr::Foundation::CHAR[40],
    szCalledParty : Win32cr::Foundation::CHAR[40],
    szComment : Win32cr::Foundation::CHAR[80]

  @[Extern]
  record Linereqmakecallw_tag,
    szDestAddress : UInt16[80],
    szAppName : UInt16[40],
    szCalledParty : UInt16[40],
    szComment : UInt16[80]

  @[Extern]
  record LINEREQMEDIACALL,
    hWnd : Win32cr::Foundation::HWND,
    wRequestID : Win32cr::Foundation::WPARAM,
    szDeviceClass : Win32cr::Foundation::CHAR[40],
    ucDeviceID : UInt8[40],
    dwSize : UInt32,
    dwSecure : UInt32,
    szDestAddress : Win32cr::Foundation::CHAR[80],
    szAppName : Win32cr::Foundation::CHAR[40],
    szCalledParty : Win32cr::Foundation::CHAR[40],
    szComment : Win32cr::Foundation::CHAR[80]

  @[Extern]
  record Linereqmediacallw_tag,
    hWnd : Win32cr::Foundation::HWND,
    wRequestID : Win32cr::Foundation::WPARAM,
    szDeviceClass : UInt16[40],
    ucDeviceID : UInt8[40],
    dwSize : UInt32,
    dwSecure : UInt32,
    szDestAddress : UInt16[80],
    szAppName : UInt16[40],
    szCalledParty : UInt16[40],
    szComment : UInt16[80]

  @[Extern]
  record LINETERMCAPS,
    dwTermDev : UInt32,
    dwTermModes : UInt32,
    dwTermSharing : UInt32

  @[Extern]
  record LINETRANSLATECAPS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwNumLocations : UInt32,
    dwLocationListSize : UInt32,
    dwLocationListOffset : UInt32,
    dwCurrentLocationID : UInt32,
    dwNumCards : UInt32,
    dwCardListSize : UInt32,
    dwCardListOffset : UInt32,
    dwCurrentPreferredCardID : UInt32

  @[Extern]
  record LINETRANSLATEOUTPUT,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwDialableStringSize : UInt32,
    dwDialableStringOffset : UInt32,
    dwDisplayableStringSize : UInt32,
    dwDisplayableStringOffset : UInt32,
    dwCurrentCountry : UInt32,
    dwDestCountry : UInt32,
    dwTranslateResults : UInt32

  @[Extern]
  record PHONEBUTTONINFO,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwButtonMode : UInt32,
    dwButtonFunction : UInt32,
    dwButtonTextSize : UInt32,
    dwButtonTextOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwButtonState : UInt32

  @[Extern]
  record PHONECAPS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwProviderInfoSize : UInt32,
    dwProviderInfoOffset : UInt32,
    dwPhoneInfoSize : UInt32,
    dwPhoneInfoOffset : UInt32,
    dwPermanentPhoneID : UInt32,
    dwPhoneNameSize : UInt32,
    dwPhoneNameOffset : UInt32,
    dwStringFormat : UInt32,
    dwPhoneStates : UInt32,
    dwHookSwitchDevs : UInt32,
    dwHandsetHookSwitchModes : UInt32,
    dwSpeakerHookSwitchModes : UInt32,
    dwHeadsetHookSwitchModes : UInt32,
    dwVolumeFlags : UInt32,
    dwGainFlags : UInt32,
    dwDisplayNumRows : UInt32,
    dwDisplayNumColumns : UInt32,
    dwNumRingModes : UInt32,
    dwNumButtonLamps : UInt32,
    dwButtonModesSize : UInt32,
    dwButtonModesOffset : UInt32,
    dwButtonFunctionsSize : UInt32,
    dwButtonFunctionsOffset : UInt32,
    dwLampModesSize : UInt32,
    dwLampModesOffset : UInt32,
    dwNumSetData : UInt32,
    dwSetDataSize : UInt32,
    dwSetDataOffset : UInt32,
    dwNumGetData : UInt32,
    dwGetDataSize : UInt32,
    dwGetDataOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwDeviceClassesSize : UInt32,
    dwDeviceClassesOffset : UInt32,
    dwPhoneFeatures : UInt32,
    dwSettableHandsetHookSwitchModes : UInt32,
    dwSettableSpeakerHookSwitchModes : UInt32,
    dwSettableHeadsetHookSwitchModes : UInt32,
    dwMonitoredHandsetHookSwitchModes : UInt32,
    dwMonitoredSpeakerHookSwitchModes : UInt32,
    dwMonitoredHeadsetHookSwitchModes : UInt32,
    permanent_phone_guid : LibC::GUID

  @[Extern]
  record PHONEEXTENSIONID,
    dwExtensionID0 : UInt32,
    dwExtensionID1 : UInt32,
    dwExtensionID2 : UInt32,
    dwExtensionID3 : UInt32

  @[Extern]
  record PHONEINITIALIZEEXPARAMS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwOptions : UInt32,
    handles : Handles_e__Union,
    dwCompletionKey : UInt32 do

    # Nested Type Handles_e__Union
    @[Extern(union: true)]
    record Handles_e__Union,
      hEvent : Win32cr::Foundation::HANDLE,
      hCompletionPort : Win32cr::Foundation::HANDLE

  end

  @[Extern]
  record PHONEMESSAGE,
    hDevice : UInt32,
    dwMessageID : UInt32,
    dwCallbackInstance : LibC::UIntPtrT,
    dwParam1 : LibC::UIntPtrT,
    dwParam2 : LibC::UIntPtrT,
    dwParam3 : LibC::UIntPtrT

  @[Extern]
  record PHONESTATUS,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwStatusFlags : UInt32,
    dwNumOwners : UInt32,
    dwNumMonitors : UInt32,
    dwRingMode : UInt32,
    dwRingVolume : UInt32,
    dwHandsetHookSwitchMode : UInt32,
    dwHandsetVolume : UInt32,
    dwHandsetGain : UInt32,
    dwSpeakerHookSwitchMode : UInt32,
    dwSpeakerVolume : UInt32,
    dwSpeakerGain : UInt32,
    dwHeadsetHookSwitchMode : UInt32,
    dwHeadsetVolume : UInt32,
    dwHeadsetGain : UInt32,
    dwDisplaySize : UInt32,
    dwDisplayOffset : UInt32,
    dwLampModesSize : UInt32,
    dwLampModesOffset : UInt32,
    dwOwnerNameSize : UInt32,
    dwOwnerNameOffset : UInt32,
    dwDevSpecificSize : UInt32,
    dwDevSpecificOffset : UInt32,
    dwPhoneFeatures : UInt32

  @[Extern]
  record VARSTRING,
    dwTotalSize : UInt32,
    dwNeededSize : UInt32,
    dwUsedSize : UInt32,
    dwStringFormat : UInt32,
    dwStringSize : UInt32,
    dwStringOffset : UInt32

  @[Extern]
  record HDRVCALL__,
    unused : Int32

  @[Extern]
  record HDRVLINE__,
    unused : Int32

  @[Extern]
  record HDRVPHONE__,
    unused : Int32

  @[Extern]
  record HDRVMSPLINE__,
    unused : Int32

  @[Extern]
  record HDRVDIALOGINSTANCE__,
    unused : Int32

  @[Extern]
  record HTAPICALL__,
    unused : Int32

  @[Extern]
  record HTAPILINE__,
    unused : Int32

  @[Extern]
  record HTAPIPHONE__,
    unused : Int32

  @[Extern]
  record HPROVIDER__,
    unused : Int32

  @[Extern]
  record TUISPICREATEDIALOGINSTANCEPARAMS,
    dwRequestID : UInt32,
    hdDlgInst : Win32cr::Devices::Tapi::HDRVDIALOGINSTANCE__*,
    htDlgInst : UInt32,
    lpszUIDLLName : Win32cr::Foundation::PWSTR,
    lpParams : Void*,
    dwSize : UInt32

  @[Extern]
  record TAPI_CUSTOMTONE,
    dwFrequency : UInt32,
    dwCadenceOn : UInt32,
    dwCadenceOff : UInt32,
    dwVolume : UInt32

  @[Extern]
  record TAPI_DETECTTONE,
    dwAppSpecific : UInt32,
    dwDuration : UInt32,
    dwFrequency1 : UInt32,
    dwFrequency2 : UInt32,
    dwFrequency3 : UInt32

  @[Extern]
  record MSP_EVENT_INFO,
    dwSize : UInt32,
    event : Win32cr::Devices::Tapi::MSP_EVENT,
    hCall : Int32*,
    anonymous : Anonymous_e__Union do

    # Nested Type Anonymous_e__Union
    @[Extern(union: true)]
    record Anonymous_e__Union,
      msp_address_event_info : MSP_ADDRESS_EVENT_INFO_e__Struct,
      msp_call_event_info : MSP_CALL_EVENT_INFO_e__Struct,
      msp_tsp_data : MSP_TSP_DATA_e__Struct,
      msp_private_event_info : MSP_PRIVATE_EVENT_INFO_e__Struct,
      msp_file_terminal_event_info : MSP_FILE_TERMINAL_EVENT_INFO_e__Struct,
      msp_asr_terminal_event_info : MSP_ASR_TERMINAL_EVENT_INFO_e__Struct,
      msp_tts_terminal_event_info : MSP_TTS_TERMINAL_EVENT_INFO_e__Struct,
      msp_tone_terminal_event_info : MSP_TONE_TERMINAL_EVENT_INFO_e__Struct do

      # Nested Type MSP_TONE_TERMINAL_EVENT_INFO_e__Struct
      @[Extern]
      record MSP_TONE_TERMINAL_EVENT_INFO_e__Struct,
        pToneTerminal : Void*,
        hrErrorCode : Win32cr::Foundation::HRESULT


      # Nested Type MSP_ASR_TERMINAL_EVENT_INFO_e__Struct
      @[Extern]
      record MSP_ASR_TERMINAL_EVENT_INFO_e__Struct,
        pASRTerminal : Void*,
        hrErrorCode : Win32cr::Foundation::HRESULT


      # Nested Type MSP_PRIVATE_EVENT_INFO_e__Struct
      @[Extern]
      record MSP_PRIVATE_EVENT_INFO_e__Struct,
        pEvent : Void*,
        lEventCode : Int32


      # Nested Type MSP_CALL_EVENT_INFO_e__Struct
      @[Extern]
      record MSP_CALL_EVENT_INFO_e__Struct,
        type__ : Win32cr::Devices::Tapi::MSP_CALL_EVENT,
        cause : Win32cr::Devices::Tapi::MSP_CALL_EVENT_CAUSE,
        pStream : Void*,
        pTerminal : Void*,
        hrError : Win32cr::Foundation::HRESULT


      # Nested Type MSP_FILE_TERMINAL_EVENT_INFO_e__Struct
      @[Extern]
      record MSP_FILE_TERMINAL_EVENT_INFO_e__Struct,
        pParentFileTerminal : Void*,
        pFileTrack : Void*,
        terminal_media_state : Win32cr::Devices::Tapi::TERMINAL_MEDIA_STATE,
        ftecEventCause : Win32cr::Devices::Tapi::FT_STATE_EVENT_CAUSE,
        hrErrorCode : Win32cr::Foundation::HRESULT


      # Nested Type MSP_ADDRESS_EVENT_INFO_e__Struct
      @[Extern]
      record MSP_ADDRESS_EVENT_INFO_e__Struct,
        type__ : Win32cr::Devices::Tapi::MSP_ADDRESS_EVENT,
        pTerminal : Void*


      # Nested Type MSP_TSP_DATA_e__Struct
      @[Extern]
      record MSP_TSP_DATA_e__Struct,
        dwBufferSize : UInt32,
        pBuffer : UInt8*


      # Nested Type MSP_TTS_TERMINAL_EVENT_INFO_e__Struct
      @[Extern]
      record MSP_TTS_TERMINAL_EVENT_INFO_e__Struct,
        pTTSTerminal : Void*,
        hrErrorCode : Win32cr::Foundation::HRESULT

    end

  end

  @[Extern]
  record STnefProblem,
    ulComponent : UInt32,
    ulAttribute : UInt32,
    ulPropTag : UInt32,
    scode : Int32

  @[Extern]
  record STnefProblemArray,
    cProblem : UInt32,
    aProblem : Win32cr::Devices::Tapi::STnefProblem*

  @[Extern]
  record Renddata,
    atyp : UInt16,
    ulPosition : UInt32,
    dxWidth : UInt16,
    dyHeight : UInt16,
    dwFlags : UInt32

  @[Extern]
  record Dtr,
    wYear : UInt16,
    wMonth : UInt16,
    wDay : UInt16,
    wHour : UInt16,
    wMinute : UInt16,
    wSecond : UInt16,
    wDayOfWeek : UInt16

  @[Extern]
  record Trp,
    trpid : UInt16,
    cbgrtrp : UInt16,
    cch : UInt16,
    cbRgb : UInt16

  @[Extern]
  record ADDR_ALIAS,
    rgchName : Win32cr::Foundation::CHAR[41],
    rgchEName : Win32cr::Foundation::CHAR[11],
    rgchSrvr : Win32cr::Foundation::CHAR[12],
    dibDetail : UInt32,
    type__ : UInt16

  @[Extern]
  record NSID,
    dwSize : UInt32,
    uchType : UInt8[16],
    xtype : UInt32,
    lTime : Int32,
    address : Address_e__union do

    # Nested Type Address_e__union
    @[Extern(union: true)]
    record Address_e__union,
      alias__ : Win32cr::Devices::Tapi::ADDR_ALIAS,
      rgchInterNet : Win32cr::Foundation::CHAR*

  end

  @[Extern]
  record ITTAPIVtbl,
    query_interface : Proc(ITTAPI*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTAPI*, UInt32),
    release : Proc(ITTAPI*, UInt32),
    get_type_info_count : Proc(ITTAPI*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTAPI*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTAPI*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTAPI*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ITTAPI*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(ITTAPI*, Win32cr::Foundation::HRESULT),
    get_Addresses : Proc(ITTAPI*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_addresses : Proc(ITTAPI*, Void**, Win32cr::Foundation::HRESULT),
    register_call_notifications : Proc(ITTAPI*, Void*, Int16, Int16, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    unregister_notifications : Proc(ITTAPI*, Int32, Win32cr::Foundation::HRESULT),
    get_CallHubs : Proc(ITTAPI*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_call_hubs : Proc(ITTAPI*, Void**, Win32cr::Foundation::HRESULT),
    set_call_hub_tracking : Proc(ITTAPI*, Win32cr::System::Com::VARIANT, Int16, Win32cr::Foundation::HRESULT),
    enumerate_private_tapi_objects : Proc(ITTAPI*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateTAPIObjects : Proc(ITTAPI*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    register_request_recipient : Proc(ITTAPI*, Int32, Int32, Int16, Win32cr::Foundation::HRESULT),
    set_assisted_telephony_priority : Proc(ITTAPI*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    set_application_priority : Proc(ITTAPI*, Win32cr::Foundation::BSTR, Int32, Int16, Win32cr::Foundation::HRESULT),
    put_EventFilter : Proc(ITTAPI*, Int32, Win32cr::Foundation::HRESULT),
    get_EventFilter : Proc(ITTAPI*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1efc382-9355-11d0-835c-00aa003ccabd")]
  record ITTAPI, lpVtbl : ITTAPIVtbl* do
    GUID = LibC::GUID.new(0xb1efc382_u32, 0x9355_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITTAPI*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTAPI*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTAPI*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTAPI*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTAPI*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTAPI*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTAPI*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ITTAPI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this)
    end
    def shutdown(this : ITTAPI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_Addresses(this : ITTAPI*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Addresses.call(this, pVariant)
    end
    def enumerate_addresses(this : ITTAPI*, ppEnumAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_addresses.call(this, ppEnumAddress)
    end
    def register_call_notifications(this : ITTAPI*, pAddress : Void*, fMonitor : Int16, fOwner : Int16, lMediaTypes : Int32, lCallbackInstance : Int32, plRegister : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_call_notifications.call(this, pAddress, fMonitor, fOwner, lMediaTypes, lCallbackInstance, plRegister)
    end
    def unregister_notifications(this : ITTAPI*, lRegister : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_notifications.call(this, lRegister)
    end
    def get_CallHubs(this : ITTAPI*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallHubs.call(this, pVariant)
    end
    def enumerate_call_hubs(this : ITTAPI*, ppEnumCallHub : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_call_hubs.call(this, ppEnumCallHub)
    end
    def set_call_hub_tracking(this : ITTAPI*, pAddresses : Win32cr::System::Com::VARIANT, bTracking : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_call_hub_tracking.call(this, pAddresses, bTracking)
    end
    def enumerate_private_tapi_objects(this : ITTAPI*, ppEnumUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_private_tapi_objects.call(this, ppEnumUnknown)
    end
    def get_PrivateTAPIObjects(this : ITTAPI*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateTAPIObjects.call(this, pVariant)
    end
    def register_request_recipient(this : ITTAPI*, lRegistrationInstance : Int32, lRequestMode : Int32, fEnable : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_request_recipient.call(this, lRegistrationInstance, lRequestMode, fEnable)
    end
    def set_assisted_telephony_priority(this : ITTAPI*, pAppFilename : Win32cr::Foundation::BSTR, fPriority : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_assisted_telephony_priority.call(this, pAppFilename, fPriority)
    end
    def set_application_priority(this : ITTAPI*, pAppFilename : Win32cr::Foundation::BSTR, lMediaType : Int32, fPriority : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_application_priority.call(this, pAppFilename, lMediaType, fPriority)
    end
    def put_EventFilter(this : ITTAPI*, lFilterMask : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EventFilter.call(this, lFilterMask)
    end
    def get_EventFilter(this : ITTAPI*, plFilterMask : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EventFilter.call(this, plFilterMask)
    end

  end

  @[Extern]
  record ITTAPI2Vtbl,
    query_interface : Proc(ITTAPI2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTAPI2*, UInt32),
    release : Proc(ITTAPI2*, UInt32),
    get_type_info_count : Proc(ITTAPI2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTAPI2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTAPI2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTAPI2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(ITTAPI2*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(ITTAPI2*, Win32cr::Foundation::HRESULT),
    get_Addresses : Proc(ITTAPI2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_addresses : Proc(ITTAPI2*, Void**, Win32cr::Foundation::HRESULT),
    register_call_notifications : Proc(ITTAPI2*, Void*, Int16, Int16, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    unregister_notifications : Proc(ITTAPI2*, Int32, Win32cr::Foundation::HRESULT),
    get_CallHubs : Proc(ITTAPI2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_call_hubs : Proc(ITTAPI2*, Void**, Win32cr::Foundation::HRESULT),
    set_call_hub_tracking : Proc(ITTAPI2*, Win32cr::System::Com::VARIANT, Int16, Win32cr::Foundation::HRESULT),
    enumerate_private_tapi_objects : Proc(ITTAPI2*, Void**, Win32cr::Foundation::HRESULT),
    get_PrivateTAPIObjects : Proc(ITTAPI2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    register_request_recipient : Proc(ITTAPI2*, Int32, Int32, Int16, Win32cr::Foundation::HRESULT),
    set_assisted_telephony_priority : Proc(ITTAPI2*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    set_application_priority : Proc(ITTAPI2*, Win32cr::Foundation::BSTR, Int32, Int16, Win32cr::Foundation::HRESULT),
    put_EventFilter : Proc(ITTAPI2*, Int32, Win32cr::Foundation::HRESULT),
    get_EventFilter : Proc(ITTAPI2*, Int32*, Win32cr::Foundation::HRESULT),
    get_Phones : Proc(ITTAPI2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_phones : Proc(ITTAPI2*, Void**, Win32cr::Foundation::HRESULT),
    create_empty_collection_object : Proc(ITTAPI2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("54fbdc8c-d90f-4dad-9695-b373097f094b")]
  record ITTAPI2, lpVtbl : ITTAPI2Vtbl* do
    GUID = LibC::GUID.new(0x54fbdc8c_u32, 0xd90f_u16, 0x4dad_u16, StaticArray[0x96_u8, 0x95_u8, 0xb3_u8, 0x73_u8, 0x9_u8, 0x7f_u8, 0x9_u8, 0x4b_u8])
    def query_interface(this : ITTAPI2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTAPI2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTAPI2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTAPI2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTAPI2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTAPI2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTAPI2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def initialize__(this : ITTAPI2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this)
    end
    def shutdown(this : ITTAPI2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_Addresses(this : ITTAPI2*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Addresses.call(this, pVariant)
    end
    def enumerate_addresses(this : ITTAPI2*, ppEnumAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_addresses.call(this, ppEnumAddress)
    end
    def register_call_notifications(this : ITTAPI2*, pAddress : Void*, fMonitor : Int16, fOwner : Int16, lMediaTypes : Int32, lCallbackInstance : Int32, plRegister : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_call_notifications.call(this, pAddress, fMonitor, fOwner, lMediaTypes, lCallbackInstance, plRegister)
    end
    def unregister_notifications(this : ITTAPI2*, lRegister : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_notifications.call(this, lRegister)
    end
    def get_CallHubs(this : ITTAPI2*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallHubs.call(this, pVariant)
    end
    def enumerate_call_hubs(this : ITTAPI2*, ppEnumCallHub : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_call_hubs.call(this, ppEnumCallHub)
    end
    def set_call_hub_tracking(this : ITTAPI2*, pAddresses : Win32cr::System::Com::VARIANT, bTracking : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_call_hub_tracking.call(this, pAddresses, bTracking)
    end
    def enumerate_private_tapi_objects(this : ITTAPI2*, ppEnumUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_private_tapi_objects.call(this, ppEnumUnknown)
    end
    def get_PrivateTAPIObjects(this : ITTAPI2*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivateTAPIObjects.call(this, pVariant)
    end
    def register_request_recipient(this : ITTAPI2*, lRegistrationInstance : Int32, lRequestMode : Int32, fEnable : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_request_recipient.call(this, lRegistrationInstance, lRequestMode, fEnable)
    end
    def set_assisted_telephony_priority(this : ITTAPI2*, pAppFilename : Win32cr::Foundation::BSTR, fPriority : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_assisted_telephony_priority.call(this, pAppFilename, fPriority)
    end
    def set_application_priority(this : ITTAPI2*, pAppFilename : Win32cr::Foundation::BSTR, lMediaType : Int32, fPriority : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_application_priority.call(this, pAppFilename, lMediaType, fPriority)
    end
    def put_EventFilter(this : ITTAPI2*, lFilterMask : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EventFilter.call(this, lFilterMask)
    end
    def get_EventFilter(this : ITTAPI2*, plFilterMask : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EventFilter.call(this, plFilterMask)
    end
    def get_Phones(this : ITTAPI2*, pPhones : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Phones.call(this, pPhones)
    end
    def enumerate_phones(this : ITTAPI2*, ppEnumPhone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_phones.call(this, ppEnumPhone)
    end
    def create_empty_collection_object(this : ITTAPI2*, ppCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_empty_collection_object.call(this, ppCollection)
    end

  end

  @[Extern]
  record ITMediaSupportVtbl,
    query_interface : Proc(ITMediaSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITMediaSupport*, UInt32),
    release : Proc(ITMediaSupport*, UInt32),
    get_type_info_count : Proc(ITMediaSupport*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITMediaSupport*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITMediaSupport*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITMediaSupport*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_MediaTypes : Proc(ITMediaSupport*, Int32*, Win32cr::Foundation::HRESULT),
    query_media_type : Proc(ITMediaSupport*, Int32, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1efc384-9355-11d0-835c-00aa003ccabd")]
  record ITMediaSupport, lpVtbl : ITMediaSupportVtbl* do
    GUID = LibC::GUID.new(0xb1efc384_u32, 0x9355_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITMediaSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITMediaSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITMediaSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITMediaSupport*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITMediaSupport*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITMediaSupport*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITMediaSupport*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_MediaTypes(this : ITMediaSupport*, plMediaTypes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaTypes.call(this, plMediaTypes)
    end
    def query_media_type(this : ITMediaSupport*, lMediaType : Int32, pfSupport : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_media_type.call(this, lMediaType, pfSupport)
    end

  end

  @[Extern]
  record ITPluggableTerminalClassInfoVtbl,
    query_interface : Proc(ITPluggableTerminalClassInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPluggableTerminalClassInfo*, UInt32),
    release : Proc(ITPluggableTerminalClassInfo*, UInt32),
    get_type_info_count : Proc(ITPluggableTerminalClassInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITPluggableTerminalClassInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITPluggableTerminalClassInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITPluggableTerminalClassInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITPluggableTerminalClassInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Company : Proc(ITPluggableTerminalClassInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Version : Proc(ITPluggableTerminalClassInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TerminalClass : Proc(ITPluggableTerminalClassInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(ITPluggableTerminalClassInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Direction : Proc(ITPluggableTerminalClassInfo*, Win32cr::Devices::Tapi::TERMINAL_DIRECTION*, Win32cr::Foundation::HRESULT),
    get_MediaTypes : Proc(ITPluggableTerminalClassInfo*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("41757f4a-cf09-4b34-bc96-0a79d2390076")]
  record ITPluggableTerminalClassInfo, lpVtbl : ITPluggableTerminalClassInfoVtbl* do
    GUID = LibC::GUID.new(0x41757f4a_u32, 0xcf09_u16, 0x4b34_u16, StaticArray[0xbc_u8, 0x96_u8, 0xa_u8, 0x79_u8, 0xd2_u8, 0x39_u8, 0x0_u8, 0x76_u8])
    def query_interface(this : ITPluggableTerminalClassInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPluggableTerminalClassInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPluggableTerminalClassInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITPluggableTerminalClassInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITPluggableTerminalClassInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITPluggableTerminalClassInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITPluggableTerminalClassInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : ITPluggableTerminalClassInfo*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pName)
    end
    def get_Company(this : ITPluggableTerminalClassInfo*, pCompany : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Company.call(this, pCompany)
    end
    def get_Version(this : ITPluggableTerminalClassInfo*, pVersion : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Version.call(this, pVersion)
    end
    def get_TerminalClass(this : ITPluggableTerminalClassInfo*, pTerminalClass : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TerminalClass.call(this, pTerminalClass)
    end
    def get_CLSID(this : ITPluggableTerminalClassInfo*, pCLSID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, pCLSID)
    end
    def get_Direction(this : ITPluggableTerminalClassInfo*, pDirection : Win32cr::Devices::Tapi::TERMINAL_DIRECTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Direction.call(this, pDirection)
    end
    def get_MediaTypes(this : ITPluggableTerminalClassInfo*, pMediaTypes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaTypes.call(this, pMediaTypes)
    end

  end

  @[Extern]
  record ITPluggableTerminalSuperclassInfoVtbl,
    query_interface : Proc(ITPluggableTerminalSuperclassInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPluggableTerminalSuperclassInfo*, UInt32),
    release : Proc(ITPluggableTerminalSuperclassInfo*, UInt32),
    get_type_info_count : Proc(ITPluggableTerminalSuperclassInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITPluggableTerminalSuperclassInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITPluggableTerminalSuperclassInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITPluggableTerminalSuperclassInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITPluggableTerminalSuperclassInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(ITPluggableTerminalSuperclassInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d54e42c-4625-4359-a6f7-631999107e05")]
  record ITPluggableTerminalSuperclassInfo, lpVtbl : ITPluggableTerminalSuperclassInfoVtbl* do
    GUID = LibC::GUID.new(0x6d54e42c_u32, 0x4625_u16, 0x4359_u16, StaticArray[0xa6_u8, 0xf7_u8, 0x63_u8, 0x19_u8, 0x99_u8, 0x10_u8, 0x7e_u8, 0x5_u8])
    def query_interface(this : ITPluggableTerminalSuperclassInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPluggableTerminalSuperclassInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPluggableTerminalSuperclassInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITPluggableTerminalSuperclassInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITPluggableTerminalSuperclassInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITPluggableTerminalSuperclassInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITPluggableTerminalSuperclassInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : ITPluggableTerminalSuperclassInfo*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pName)
    end
    def get_CLSID(this : ITPluggableTerminalSuperclassInfo*, pCLSID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, pCLSID)
    end

  end

  @[Extern]
  record ITTerminalSupportVtbl,
    query_interface : Proc(ITTerminalSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTerminalSupport*, UInt32),
    release : Proc(ITTerminalSupport*, UInt32),
    get_type_info_count : Proc(ITTerminalSupport*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTerminalSupport*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTerminalSupport*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTerminalSupport*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StaticTerminals : Proc(ITTerminalSupport*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_static_terminals : Proc(ITTerminalSupport*, Void**, Win32cr::Foundation::HRESULT),
    get_DynamicTerminalClasses : Proc(ITTerminalSupport*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_dynamic_terminal_classes : Proc(ITTerminalSupport*, Void**, Win32cr::Foundation::HRESULT),
    create_terminal : Proc(ITTerminalSupport*, Win32cr::Foundation::BSTR, Int32, Win32cr::Devices::Tapi::TERMINAL_DIRECTION, Void**, Win32cr::Foundation::HRESULT),
    get_default_static_terminal : Proc(ITTerminalSupport*, Int32, Win32cr::Devices::Tapi::TERMINAL_DIRECTION, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1efc385-9355-11d0-835c-00aa003ccabd")]
  record ITTerminalSupport, lpVtbl : ITTerminalSupportVtbl* do
    GUID = LibC::GUID.new(0xb1efc385_u32, 0x9355_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITTerminalSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTerminalSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTerminalSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTerminalSupport*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTerminalSupport*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTerminalSupport*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTerminalSupport*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StaticTerminals(this : ITTerminalSupport*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StaticTerminals.call(this, pVariant)
    end
    def enumerate_static_terminals(this : ITTerminalSupport*, ppTerminalEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_static_terminals.call(this, ppTerminalEnumerator)
    end
    def get_DynamicTerminalClasses(this : ITTerminalSupport*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DynamicTerminalClasses.call(this, pVariant)
    end
    def enumerate_dynamic_terminal_classes(this : ITTerminalSupport*, ppTerminalClassEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_dynamic_terminal_classes.call(this, ppTerminalClassEnumerator)
    end
    def create_terminal(this : ITTerminalSupport*, pTerminalClass : Win32cr::Foundation::BSTR, lMediaType : Int32, direction : Win32cr::Devices::Tapi::TERMINAL_DIRECTION, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_terminal.call(this, pTerminalClass, lMediaType, direction, ppTerminal)
    end
    def get_default_static_terminal(this : ITTerminalSupport*, lMediaType : Int32, direction : Win32cr::Devices::Tapi::TERMINAL_DIRECTION, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_static_terminal.call(this, lMediaType, direction, ppTerminal)
    end

  end

  @[Extern]
  record ITTerminalSupport2Vtbl,
    query_interface : Proc(ITTerminalSupport2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTerminalSupport2*, UInt32),
    release : Proc(ITTerminalSupport2*, UInt32),
    get_type_info_count : Proc(ITTerminalSupport2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTerminalSupport2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTerminalSupport2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTerminalSupport2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StaticTerminals : Proc(ITTerminalSupport2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_static_terminals : Proc(ITTerminalSupport2*, Void**, Win32cr::Foundation::HRESULT),
    get_DynamicTerminalClasses : Proc(ITTerminalSupport2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_dynamic_terminal_classes : Proc(ITTerminalSupport2*, Void**, Win32cr::Foundation::HRESULT),
    create_terminal : Proc(ITTerminalSupport2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Devices::Tapi::TERMINAL_DIRECTION, Void**, Win32cr::Foundation::HRESULT),
    get_default_static_terminal : Proc(ITTerminalSupport2*, Int32, Win32cr::Devices::Tapi::TERMINAL_DIRECTION, Void**, Win32cr::Foundation::HRESULT),
    get_PluggableSuperclasses : Proc(ITTerminalSupport2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_pluggable_superclasses : Proc(ITTerminalSupport2*, Void**, Win32cr::Foundation::HRESULT),
    get_PluggableTerminalClasses : Proc(ITTerminalSupport2*, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_pluggable_terminal_classes : Proc(ITTerminalSupport2*, LibC::GUID, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f3eb39bc-1b1f-4e99-a0c0-56305c4dd591")]
  record ITTerminalSupport2, lpVtbl : ITTerminalSupport2Vtbl* do
    GUID = LibC::GUID.new(0xf3eb39bc_u32, 0x1b1f_u16, 0x4e99_u16, StaticArray[0xa0_u8, 0xc0_u8, 0x56_u8, 0x30_u8, 0x5c_u8, 0x4d_u8, 0xd5_u8, 0x91_u8])
    def query_interface(this : ITTerminalSupport2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTerminalSupport2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTerminalSupport2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTerminalSupport2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTerminalSupport2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTerminalSupport2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTerminalSupport2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StaticTerminals(this : ITTerminalSupport2*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StaticTerminals.call(this, pVariant)
    end
    def enumerate_static_terminals(this : ITTerminalSupport2*, ppTerminalEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_static_terminals.call(this, ppTerminalEnumerator)
    end
    def get_DynamicTerminalClasses(this : ITTerminalSupport2*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DynamicTerminalClasses.call(this, pVariant)
    end
    def enumerate_dynamic_terminal_classes(this : ITTerminalSupport2*, ppTerminalClassEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_dynamic_terminal_classes.call(this, ppTerminalClassEnumerator)
    end
    def create_terminal(this : ITTerminalSupport2*, pTerminalClass : Win32cr::Foundation::BSTR, lMediaType : Int32, direction : Win32cr::Devices::Tapi::TERMINAL_DIRECTION, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_terminal.call(this, pTerminalClass, lMediaType, direction, ppTerminal)
    end
    def get_default_static_terminal(this : ITTerminalSupport2*, lMediaType : Int32, direction : Win32cr::Devices::Tapi::TERMINAL_DIRECTION, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_static_terminal.call(this, lMediaType, direction, ppTerminal)
    end
    def get_PluggableSuperclasses(this : ITTerminalSupport2*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PluggableSuperclasses.call(this, pVariant)
    end
    def enumerate_pluggable_superclasses(this : ITTerminalSupport2*, ppSuperclassEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_pluggable_superclasses.call(this, ppSuperclassEnumerator)
    end
    def get_PluggableTerminalClasses(this : ITTerminalSupport2*, bstrTerminalSuperclass : Win32cr::Foundation::BSTR, lMediaType : Int32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PluggableTerminalClasses.call(this, bstrTerminalSuperclass, lMediaType, pVariant)
    end
    def enumerate_pluggable_terminal_classes(this : ITTerminalSupport2*, iidTerminalSuperclass : LibC::GUID, lMediaType : Int32, ppClassEnumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_pluggable_terminal_classes.call(this, iidTerminalSuperclass, lMediaType, ppClassEnumerator)
    end

  end

  @[Extern]
  record ITAddressVtbl,
    query_interface : Proc(ITAddress*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAddress*, UInt32),
    release : Proc(ITAddress*, UInt32),
    get_type_info_count : Proc(ITAddress*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAddress*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAddress*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAddress*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITAddress*, Win32cr::Devices::Tapi::ADDRESS_STATE*, Win32cr::Foundation::HRESULT),
    get_AddressName : Proc(ITAddress*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ServiceProviderName : Proc(ITAddress*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TAPIObject : Proc(ITAddress*, Void**, Win32cr::Foundation::HRESULT),
    create_call : Proc(ITAddress*, Win32cr::Foundation::BSTR, Int32, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Calls : Proc(ITAddress*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_calls : Proc(ITAddress*, Void**, Win32cr::Foundation::HRESULT),
    get_DialableAddress : Proc(ITAddress*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_forward_info_object : Proc(ITAddress*, Void**, Win32cr::Foundation::HRESULT),
    forward : Proc(ITAddress*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_CurrentForwardInfo : Proc(ITAddress*, Void**, Win32cr::Foundation::HRESULT),
    put_MessageWaiting : Proc(ITAddress*, Int16, Win32cr::Foundation::HRESULT),
    get_MessageWaiting : Proc(ITAddress*, Int16*, Win32cr::Foundation::HRESULT),
    put_DoNotDisturb : Proc(ITAddress*, Int16, Win32cr::Foundation::HRESULT),
    get_DoNotDisturb : Proc(ITAddress*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1efc386-9355-11d0-835c-00aa003ccabd")]
  record ITAddress, lpVtbl : ITAddressVtbl* do
    GUID = LibC::GUID.new(0xb1efc386_u32, 0x9355_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITAddress*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAddress*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAddress*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAddress*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAddress*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAddress*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAddress*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_State(this : ITAddress*, pAddressState : Win32cr::Devices::Tapi::ADDRESS_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pAddressState)
    end
    def get_AddressName(this : ITAddress*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AddressName.call(this, ppName)
    end
    def get_ServiceProviderName(this : ITAddress*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceProviderName.call(this, ppName)
    end
    def get_TAPIObject(this : ITAddress*, ppTapiObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TAPIObject.call(this, ppTapiObject)
    end
    def create_call(this : ITAddress*, pDestAddress : Win32cr::Foundation::BSTR, lAddressType : Int32, lMediaTypes : Int32, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_call.call(this, pDestAddress, lAddressType, lMediaTypes, ppCall)
    end
    def get_Calls(this : ITAddress*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Calls.call(this, pVariant)
    end
    def enumerate_calls(this : ITAddress*, ppCallEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_calls.call(this, ppCallEnum)
    end
    def get_DialableAddress(this : ITAddress*, pDialableAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DialableAddress.call(this, pDialableAddress)
    end
    def create_forward_info_object(this : ITAddress*, ppForwardInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_forward_info_object.call(this, ppForwardInfo)
    end
    def forward(this : ITAddress*, pForwardInfo : Void*, pCall : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.forward.call(this, pForwardInfo, pCall)
    end
    def get_CurrentForwardInfo(this : ITAddress*, ppForwardInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentForwardInfo.call(this, ppForwardInfo)
    end
    def put_MessageWaiting(this : ITAddress*, fMessageWaiting : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MessageWaiting.call(this, fMessageWaiting)
    end
    def get_MessageWaiting(this : ITAddress*, pfMessageWaiting : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MessageWaiting.call(this, pfMessageWaiting)
    end
    def put_DoNotDisturb(this : ITAddress*, fDoNotDisturb : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DoNotDisturb.call(this, fDoNotDisturb)
    end
    def get_DoNotDisturb(this : ITAddress*, pfDoNotDisturb : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DoNotDisturb.call(this, pfDoNotDisturb)
    end

  end

  @[Extern]
  record ITAddress2Vtbl,
    query_interface : Proc(ITAddress2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAddress2*, UInt32),
    release : Proc(ITAddress2*, UInt32),
    get_type_info_count : Proc(ITAddress2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAddress2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAddress2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAddress2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITAddress2*, Win32cr::Devices::Tapi::ADDRESS_STATE*, Win32cr::Foundation::HRESULT),
    get_AddressName : Proc(ITAddress2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ServiceProviderName : Proc(ITAddress2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TAPIObject : Proc(ITAddress2*, Void**, Win32cr::Foundation::HRESULT),
    create_call : Proc(ITAddress2*, Win32cr::Foundation::BSTR, Int32, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Calls : Proc(ITAddress2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_calls : Proc(ITAddress2*, Void**, Win32cr::Foundation::HRESULT),
    get_DialableAddress : Proc(ITAddress2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_forward_info_object : Proc(ITAddress2*, Void**, Win32cr::Foundation::HRESULT),
    forward : Proc(ITAddress2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_CurrentForwardInfo : Proc(ITAddress2*, Void**, Win32cr::Foundation::HRESULT),
    put_MessageWaiting : Proc(ITAddress2*, Int16, Win32cr::Foundation::HRESULT),
    get_MessageWaiting : Proc(ITAddress2*, Int16*, Win32cr::Foundation::HRESULT),
    put_DoNotDisturb : Proc(ITAddress2*, Int16, Win32cr::Foundation::HRESULT),
    get_DoNotDisturb : Proc(ITAddress2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Phones : Proc(ITAddress2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_phones : Proc(ITAddress2*, Void**, Win32cr::Foundation::HRESULT),
    get_phone_from_terminal : Proc(ITAddress2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_PreferredPhones : Proc(ITAddress2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_preferred_phones : Proc(ITAddress2*, Void**, Win32cr::Foundation::HRESULT),
    get_EventFilter : Proc(ITAddress2*, Win32cr::Devices::Tapi::TAPI_EVENT, Int32, Int16*, Win32cr::Foundation::HRESULT),
    put_EventFilter : Proc(ITAddress2*, Win32cr::Devices::Tapi::TAPI_EVENT, Int32, Int16, Win32cr::Foundation::HRESULT),
    device_specific : Proc(ITAddress2*, Void*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    device_specific_variant : Proc(ITAddress2*, Void*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    negotiate_ext_version : Proc(ITAddress2*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b0ae5d9b-be51-46c9-b0f7-dfa8a22a8bc4")]
  record ITAddress2, lpVtbl : ITAddress2Vtbl* do
    GUID = LibC::GUID.new(0xb0ae5d9b_u32, 0xbe51_u16, 0x46c9_u16, StaticArray[0xb0_u8, 0xf7_u8, 0xdf_u8, 0xa8_u8, 0xa2_u8, 0x2a_u8, 0x8b_u8, 0xc4_u8])
    def query_interface(this : ITAddress2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAddress2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAddress2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAddress2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAddress2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAddress2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAddress2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_State(this : ITAddress2*, pAddressState : Win32cr::Devices::Tapi::ADDRESS_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pAddressState)
    end
    def get_AddressName(this : ITAddress2*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AddressName.call(this, ppName)
    end
    def get_ServiceProviderName(this : ITAddress2*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServiceProviderName.call(this, ppName)
    end
    def get_TAPIObject(this : ITAddress2*, ppTapiObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TAPIObject.call(this, ppTapiObject)
    end
    def create_call(this : ITAddress2*, pDestAddress : Win32cr::Foundation::BSTR, lAddressType : Int32, lMediaTypes : Int32, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_call.call(this, pDestAddress, lAddressType, lMediaTypes, ppCall)
    end
    def get_Calls(this : ITAddress2*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Calls.call(this, pVariant)
    end
    def enumerate_calls(this : ITAddress2*, ppCallEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_calls.call(this, ppCallEnum)
    end
    def get_DialableAddress(this : ITAddress2*, pDialableAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DialableAddress.call(this, pDialableAddress)
    end
    def create_forward_info_object(this : ITAddress2*, ppForwardInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_forward_info_object.call(this, ppForwardInfo)
    end
    def forward(this : ITAddress2*, pForwardInfo : Void*, pCall : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.forward.call(this, pForwardInfo, pCall)
    end
    def get_CurrentForwardInfo(this : ITAddress2*, ppForwardInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentForwardInfo.call(this, ppForwardInfo)
    end
    def put_MessageWaiting(this : ITAddress2*, fMessageWaiting : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MessageWaiting.call(this, fMessageWaiting)
    end
    def get_MessageWaiting(this : ITAddress2*, pfMessageWaiting : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MessageWaiting.call(this, pfMessageWaiting)
    end
    def put_DoNotDisturb(this : ITAddress2*, fDoNotDisturb : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DoNotDisturb.call(this, fDoNotDisturb)
    end
    def get_DoNotDisturb(this : ITAddress2*, pfDoNotDisturb : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DoNotDisturb.call(this, pfDoNotDisturb)
    end
    def get_Phones(this : ITAddress2*, pPhones : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Phones.call(this, pPhones)
    end
    def enumerate_phones(this : ITAddress2*, ppEnumPhone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_phones.call(this, ppEnumPhone)
    end
    def get_phone_from_terminal(this : ITAddress2*, pTerminal : Void*, ppPhone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_phone_from_terminal.call(this, pTerminal, ppPhone)
    end
    def get_PreferredPhones(this : ITAddress2*, pPhones : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredPhones.call(this, pPhones)
    end
    def enumerate_preferred_phones(this : ITAddress2*, ppEnumPhone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_preferred_phones.call(this, ppEnumPhone)
    end
    def get_EventFilter(this : ITAddress2*, tapi_event : Win32cr::Devices::Tapi::TAPI_EVENT, lSubEvent : Int32, pEnable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EventFilter.call(this, tapi_event, lSubEvent, pEnable)
    end
    def put_EventFilter(this : ITAddress2*, tapi_event : Win32cr::Devices::Tapi::TAPI_EVENT, lSubEvent : Int32, bEnable : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EventFilter.call(this, tapi_event, lSubEvent, bEnable)
    end
    def device_specific(this : ITAddress2*, pCall : Void*, pParams : UInt8*, dwSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.device_specific.call(this, pCall, pParams, dwSize)
    end
    def device_specific_variant(this : ITAddress2*, pCall : Void*, varDevSpecificByteArray : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.device_specific_variant.call(this, pCall, varDevSpecificByteArray)
    end
    def negotiate_ext_version(this : ITAddress2*, lLowVersion : Int32, lHighVersion : Int32, plExtVersion : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.negotiate_ext_version.call(this, lLowVersion, lHighVersion, plExtVersion)
    end

  end

  @[Extern]
  record ITAddressCapabilitiesVtbl,
    query_interface : Proc(ITAddressCapabilities*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAddressCapabilities*, UInt32),
    release : Proc(ITAddressCapabilities*, UInt32),
    get_type_info_count : Proc(ITAddressCapabilities*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAddressCapabilities*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAddressCapabilities*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAddressCapabilities*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AddressCapability : Proc(ITAddressCapabilities*, Win32cr::Devices::Tapi::ADDRESS_CAPABILITY, Int32*, Win32cr::Foundation::HRESULT),
    get_AddressCapabilityString : Proc(ITAddressCapabilities*, Win32cr::Devices::Tapi::ADDRESS_CAPABILITY_STRING, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CallTreatments : Proc(ITAddressCapabilities*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_call_treatments : Proc(ITAddressCapabilities*, Void**, Win32cr::Foundation::HRESULT),
    get_CompletionMessages : Proc(ITAddressCapabilities*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_completion_messages : Proc(ITAddressCapabilities*, Void**, Win32cr::Foundation::HRESULT),
    get_DeviceClasses : Proc(ITAddressCapabilities*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_device_classes : Proc(ITAddressCapabilities*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8df232f5-821b-11d1-bb5c-00c04fb6809f")]
  record ITAddressCapabilities, lpVtbl : ITAddressCapabilitiesVtbl* do
    GUID = LibC::GUID.new(0x8df232f5_u32, 0x821b_u16, 0x11d1_u16, StaticArray[0xbb_u8, 0x5c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITAddressCapabilities*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAddressCapabilities*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAddressCapabilities*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAddressCapabilities*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAddressCapabilities*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAddressCapabilities*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAddressCapabilities*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AddressCapability(this : ITAddressCapabilities*, address_cap : Win32cr::Devices::Tapi::ADDRESS_CAPABILITY, plCapability : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AddressCapability.call(this, address_cap, plCapability)
    end
    def get_AddressCapabilityString(this : ITAddressCapabilities*, address_cap_string : Win32cr::Devices::Tapi::ADDRESS_CAPABILITY_STRING, ppCapabilityString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AddressCapabilityString.call(this, address_cap_string, ppCapabilityString)
    end
    def get_CallTreatments(this : ITAddressCapabilities*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallTreatments.call(this, pVariant)
    end
    def enumerate_call_treatments(this : ITAddressCapabilities*, ppEnumCallTreatment : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_call_treatments.call(this, ppEnumCallTreatment)
    end
    def get_CompletionMessages(this : ITAddressCapabilities*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CompletionMessages.call(this, pVariant)
    end
    def enumerate_completion_messages(this : ITAddressCapabilities*, ppEnumCompletionMessage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_completion_messages.call(this, ppEnumCompletionMessage)
    end
    def get_DeviceClasses(this : ITAddressCapabilities*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeviceClasses.call(this, pVariant)
    end
    def enumerate_device_classes(this : ITAddressCapabilities*, ppEnumDeviceClass : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_device_classes.call(this, ppEnumDeviceClass)
    end

  end

  @[Extern]
  record ITPhoneVtbl,
    query_interface : Proc(ITPhone*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPhone*, UInt32),
    release : Proc(ITPhone*, UInt32),
    get_type_info_count : Proc(ITPhone*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITPhone*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITPhone*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITPhone*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    open : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONE_PRIVILEGE, Win32cr::Foundation::HRESULT),
    close : Proc(ITPhone*, Win32cr::Foundation::HRESULT),
    get_Addresses : Proc(ITPhone*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_addresses : Proc(ITPhone*, Void**, Win32cr::Foundation::HRESULT),
    get_PhoneCapsLong : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONECAPS_LONG, Int32*, Win32cr::Foundation::HRESULT),
    get_PhoneCapsString : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONECAPS_STRING, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Terminals : Proc(ITPhone*, Void*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_terminals : Proc(ITPhone*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_ButtonMode : Proc(ITPhone*, Int32, Win32cr::Devices::Tapi::PHONE_BUTTON_MODE*, Win32cr::Foundation::HRESULT),
    put_ButtonMode : Proc(ITPhone*, Int32, Win32cr::Devices::Tapi::PHONE_BUTTON_MODE, Win32cr::Foundation::HRESULT),
    get_ButtonFunction : Proc(ITPhone*, Int32, Win32cr::Devices::Tapi::PHONE_BUTTON_FUNCTION*, Win32cr::Foundation::HRESULT),
    put_ButtonFunction : Proc(ITPhone*, Int32, Win32cr::Devices::Tapi::PHONE_BUTTON_FUNCTION, Win32cr::Foundation::HRESULT),
    get_ButtonText : Proc(ITPhone*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ButtonText : Proc(ITPhone*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ButtonState : Proc(ITPhone*, Int32, Win32cr::Devices::Tapi::PHONE_BUTTON_STATE*, Win32cr::Foundation::HRESULT),
    get_HookSwitchState : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_DEVICE, Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_STATE*, Win32cr::Foundation::HRESULT),
    put_HookSwitchState : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_DEVICE, Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_STATE, Win32cr::Foundation::HRESULT),
    put_RingMode : Proc(ITPhone*, Int32, Win32cr::Foundation::HRESULT),
    get_RingMode : Proc(ITPhone*, Int32*, Win32cr::Foundation::HRESULT),
    put_RingVolume : Proc(ITPhone*, Int32, Win32cr::Foundation::HRESULT),
    get_RingVolume : Proc(ITPhone*, Int32*, Win32cr::Foundation::HRESULT),
    get_Privilege : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONE_PRIVILEGE*, Win32cr::Foundation::HRESULT),
    get_phone_caps_buffer : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONECAPS_BUFFER, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    get_PhoneCapsBuffer : Proc(ITPhone*, Win32cr::Devices::Tapi::PHONECAPS_BUFFER, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_LampMode : Proc(ITPhone*, Int32, Win32cr::Devices::Tapi::PHONE_LAMP_MODE*, Win32cr::Foundation::HRESULT),
    put_LampMode : Proc(ITPhone*, Int32, Win32cr::Devices::Tapi::PHONE_LAMP_MODE, Win32cr::Foundation::HRESULT),
    get_Display : Proc(ITPhone*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_display : Proc(ITPhone*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PreferredAddresses : Proc(ITPhone*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_preferred_addresses : Proc(ITPhone*, Void**, Win32cr::Foundation::HRESULT),
    device_specific : Proc(ITPhone*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    device_specific_variant : Proc(ITPhone*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    negotiate_ext_version : Proc(ITPhone*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("09d48db4-10cc-4388-9de7-a8465618975a")]
  record ITPhone, lpVtbl : ITPhoneVtbl* do
    GUID = LibC::GUID.new(0x9d48db4_u32, 0x10cc_u16, 0x4388_u16, StaticArray[0x9d_u8, 0xe7_u8, 0xa8_u8, 0x46_u8, 0x56_u8, 0x18_u8, 0x97_u8, 0x5a_u8])
    def query_interface(this : ITPhone*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPhone*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPhone*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITPhone*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITPhone*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITPhone*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITPhone*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def open(this : ITPhone*, privilege : Win32cr::Devices::Tapi::PHONE_PRIVILEGE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, privilege)
    end
    def close(this : ITPhone*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_Addresses(this : ITPhone*, pAddresses : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Addresses.call(this, pAddresses)
    end
    def enumerate_addresses(this : ITPhone*, ppEnumAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_addresses.call(this, ppEnumAddress)
    end
    def get_PhoneCapsLong(this : ITPhone*, pclCap : Win32cr::Devices::Tapi::PHONECAPS_LONG, plCapability : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhoneCapsLong.call(this, pclCap, plCapability)
    end
    def get_PhoneCapsString(this : ITPhone*, pcsCap : Win32cr::Devices::Tapi::PHONECAPS_STRING, ppCapability : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhoneCapsString.call(this, pcsCap, ppCapability)
    end
    def get_Terminals(this : ITPhone*, pAddress : Void*, pTerminals : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminals.call(this, pAddress, pTerminals)
    end
    def enumerate_terminals(this : ITPhone*, pAddress : Void*, ppEnumTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_terminals.call(this, pAddress, ppEnumTerminal)
    end
    def get_ButtonMode(this : ITPhone*, lButtonID : Int32, pButtonMode : Win32cr::Devices::Tapi::PHONE_BUTTON_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonMode.call(this, lButtonID, pButtonMode)
    end
    def put_ButtonMode(this : ITPhone*, lButtonID : Int32, button_mode : Win32cr::Devices::Tapi::PHONE_BUTTON_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ButtonMode.call(this, lButtonID, button_mode)
    end
    def get_ButtonFunction(this : ITPhone*, lButtonID : Int32, pButtonFunction : Win32cr::Devices::Tapi::PHONE_BUTTON_FUNCTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonFunction.call(this, lButtonID, pButtonFunction)
    end
    def put_ButtonFunction(this : ITPhone*, lButtonID : Int32, button_function : Win32cr::Devices::Tapi::PHONE_BUTTON_FUNCTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ButtonFunction.call(this, lButtonID, button_function)
    end
    def get_ButtonText(this : ITPhone*, lButtonID : Int32, ppButtonText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonText.call(this, lButtonID, ppButtonText)
    end
    def put_ButtonText(this : ITPhone*, lButtonID : Int32, bstrButtonText : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ButtonText.call(this, lButtonID, bstrButtonText)
    end
    def get_ButtonState(this : ITPhone*, lButtonID : Int32, pButtonState : Win32cr::Devices::Tapi::PHONE_BUTTON_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonState.call(this, lButtonID, pButtonState)
    end
    def get_HookSwitchState(this : ITPhone*, hook_switch_device : Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_DEVICE, pHookSwitchState : Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HookSwitchState.call(this, hook_switch_device, pHookSwitchState)
    end
    def put_HookSwitchState(this : ITPhone*, hook_switch_device : Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_DEVICE, hook_switch_state : Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HookSwitchState.call(this, hook_switch_device, hook_switch_state)
    end
    def put_RingMode(this : ITPhone*, lRingMode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RingMode.call(this, lRingMode)
    end
    def get_RingMode(this : ITPhone*, plRingMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RingMode.call(this, plRingMode)
    end
    def put_RingVolume(this : ITPhone*, lRingVolume : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RingVolume.call(this, lRingVolume)
    end
    def get_RingVolume(this : ITPhone*, plRingVolume : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RingVolume.call(this, plRingVolume)
    end
    def get_Privilege(this : ITPhone*, pPrivilege : Win32cr::Devices::Tapi::PHONE_PRIVILEGE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Privilege.call(this, pPrivilege)
    end
    def get_phone_caps_buffer(this : ITPhone*, pcbCaps : Win32cr::Devices::Tapi::PHONECAPS_BUFFER, pdwSize : UInt32*, ppPhoneCapsBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_phone_caps_buffer.call(this, pcbCaps, pdwSize, ppPhoneCapsBuffer)
    end
    def get_PhoneCapsBuffer(this : ITPhone*, pcbCaps : Win32cr::Devices::Tapi::PHONECAPS_BUFFER, pVarBuffer : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhoneCapsBuffer.call(this, pcbCaps, pVarBuffer)
    end
    def get_LampMode(this : ITPhone*, lLampID : Int32, pLampMode : Win32cr::Devices::Tapi::PHONE_LAMP_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LampMode.call(this, lLampID, pLampMode)
    end
    def put_LampMode(this : ITPhone*, lLampID : Int32, lamp_mode : Win32cr::Devices::Tapi::PHONE_LAMP_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LampMode.call(this, lLampID, lamp_mode)
    end
    def get_Display(this : ITPhone*, pbstrDisplay : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Display.call(this, pbstrDisplay)
    end
    def set_display(this : ITPhone*, lRow : Int32, lColumn : Int32, bstrDisplay : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_display.call(this, lRow, lColumn, bstrDisplay)
    end
    def get_PreferredAddresses(this : ITPhone*, pAddresses : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredAddresses.call(this, pAddresses)
    end
    def enumerate_preferred_addresses(this : ITPhone*, ppEnumAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_preferred_addresses.call(this, ppEnumAddress)
    end
    def device_specific(this : ITPhone*, pParams : UInt8*, dwSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.device_specific.call(this, pParams, dwSize)
    end
    def device_specific_variant(this : ITPhone*, varDevSpecificByteArray : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.device_specific_variant.call(this, varDevSpecificByteArray)
    end
    def negotiate_ext_version(this : ITPhone*, lLowVersion : Int32, lHighVersion : Int32, plExtVersion : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.negotiate_ext_version.call(this, lLowVersion, lHighVersion, plExtVersion)
    end

  end

  @[Extern]
  record ITAutomatedPhoneControlVtbl,
    query_interface : Proc(ITAutomatedPhoneControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAutomatedPhoneControl*, UInt32),
    release : Proc(ITAutomatedPhoneControl*, UInt32),
    get_type_info_count : Proc(ITAutomatedPhoneControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAutomatedPhoneControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAutomatedPhoneControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAutomatedPhoneControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    start_tone : Proc(ITAutomatedPhoneControl*, Win32cr::Devices::Tapi::PHONE_TONE, Int32, Win32cr::Foundation::HRESULT),
    stop_tone : Proc(ITAutomatedPhoneControl*, Win32cr::Foundation::HRESULT),
    get_Tone : Proc(ITAutomatedPhoneControl*, Win32cr::Devices::Tapi::PHONE_TONE*, Win32cr::Foundation::HRESULT),
    start_ringer : Proc(ITAutomatedPhoneControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    stop_ringer : Proc(ITAutomatedPhoneControl*, Win32cr::Foundation::HRESULT),
    get_Ringer : Proc(ITAutomatedPhoneControl*, Int16*, Win32cr::Foundation::HRESULT),
    put_PhoneHandlingEnabled : Proc(ITAutomatedPhoneControl*, Int16, Win32cr::Foundation::HRESULT),
    get_PhoneHandlingEnabled : Proc(ITAutomatedPhoneControl*, Int16*, Win32cr::Foundation::HRESULT),
    put_AutoEndOfNumberTimeout : Proc(ITAutomatedPhoneControl*, Int32, Win32cr::Foundation::HRESULT),
    get_AutoEndOfNumberTimeout : Proc(ITAutomatedPhoneControl*, Int32*, Win32cr::Foundation::HRESULT),
    put_AutoDialtone : Proc(ITAutomatedPhoneControl*, Int16, Win32cr::Foundation::HRESULT),
    get_AutoDialtone : Proc(ITAutomatedPhoneControl*, Int16*, Win32cr::Foundation::HRESULT),
    put_AutoStopTonesOnOnHook : Proc(ITAutomatedPhoneControl*, Int16, Win32cr::Foundation::HRESULT),
    get_AutoStopTonesOnOnHook : Proc(ITAutomatedPhoneControl*, Int16*, Win32cr::Foundation::HRESULT),
    put_AutoStopRingOnOffHook : Proc(ITAutomatedPhoneControl*, Int16, Win32cr::Foundation::HRESULT),
    get_AutoStopRingOnOffHook : Proc(ITAutomatedPhoneControl*, Int16*, Win32cr::Foundation::HRESULT),
    put_AutoKeypadTones : Proc(ITAutomatedPhoneControl*, Int16, Win32cr::Foundation::HRESULT),
    get_AutoKeypadTones : Proc(ITAutomatedPhoneControl*, Int16*, Win32cr::Foundation::HRESULT),
    put_AutoKeypadTonesMinimumDuration : Proc(ITAutomatedPhoneControl*, Int32, Win32cr::Foundation::HRESULT),
    get_AutoKeypadTonesMinimumDuration : Proc(ITAutomatedPhoneControl*, Int32*, Win32cr::Foundation::HRESULT),
    put_AutoVolumeControl : Proc(ITAutomatedPhoneControl*, Int16, Win32cr::Foundation::HRESULT),
    get_AutoVolumeControl : Proc(ITAutomatedPhoneControl*, Int16*, Win32cr::Foundation::HRESULT),
    put_AutoVolumeControlStep : Proc(ITAutomatedPhoneControl*, Int32, Win32cr::Foundation::HRESULT),
    get_AutoVolumeControlStep : Proc(ITAutomatedPhoneControl*, Int32*, Win32cr::Foundation::HRESULT),
    put_AutoVolumeControlRepeatDelay : Proc(ITAutomatedPhoneControl*, Int32, Win32cr::Foundation::HRESULT),
    get_AutoVolumeControlRepeatDelay : Proc(ITAutomatedPhoneControl*, Int32*, Win32cr::Foundation::HRESULT),
    put_AutoVolumeControlRepeatPeriod : Proc(ITAutomatedPhoneControl*, Int32, Win32cr::Foundation::HRESULT),
    get_AutoVolumeControlRepeatPeriod : Proc(ITAutomatedPhoneControl*, Int32*, Win32cr::Foundation::HRESULT),
    select_call : Proc(ITAutomatedPhoneControl*, Void*, Int16, Win32cr::Foundation::HRESULT),
    unselect_call : Proc(ITAutomatedPhoneControl*, Void*, Win32cr::Foundation::HRESULT),
    enumerate_selected_calls : Proc(ITAutomatedPhoneControl*, Void**, Win32cr::Foundation::HRESULT),
    get_SelectedCalls : Proc(ITAutomatedPhoneControl*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1ee1af0e-6159-4a61-b79b-6a4ba3fc9dfc")]
  record ITAutomatedPhoneControl, lpVtbl : ITAutomatedPhoneControlVtbl* do
    GUID = LibC::GUID.new(0x1ee1af0e_u32, 0x6159_u16, 0x4a61_u16, StaticArray[0xb7_u8, 0x9b_u8, 0x6a_u8, 0x4b_u8, 0xa3_u8, 0xfc_u8, 0x9d_u8, 0xfc_u8])
    def query_interface(this : ITAutomatedPhoneControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAutomatedPhoneControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAutomatedPhoneControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAutomatedPhoneControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAutomatedPhoneControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAutomatedPhoneControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAutomatedPhoneControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def start_tone(this : ITAutomatedPhoneControl*, tone : Win32cr::Devices::Tapi::PHONE_TONE, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_tone.call(this, tone, lDuration)
    end
    def stop_tone(this : ITAutomatedPhoneControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_tone.call(this)
    end
    def get_Tone(this : ITAutomatedPhoneControl*, pTone : Win32cr::Devices::Tapi::PHONE_TONE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Tone.call(this, pTone)
    end
    def start_ringer(this : ITAutomatedPhoneControl*, lRingMode : Int32, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_ringer.call(this, lRingMode, lDuration)
    end
    def stop_ringer(this : ITAutomatedPhoneControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_ringer.call(this)
    end
    def get_Ringer(this : ITAutomatedPhoneControl*, pfRinging : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Ringer.call(this, pfRinging)
    end
    def put_PhoneHandlingEnabled(this : ITAutomatedPhoneControl*, fEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PhoneHandlingEnabled.call(this, fEnabled)
    end
    def get_PhoneHandlingEnabled(this : ITAutomatedPhoneControl*, pfEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhoneHandlingEnabled.call(this, pfEnabled)
    end
    def put_AutoEndOfNumberTimeout(this : ITAutomatedPhoneControl*, lTimeout : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoEndOfNumberTimeout.call(this, lTimeout)
    end
    def get_AutoEndOfNumberTimeout(this : ITAutomatedPhoneControl*, plTimeout : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoEndOfNumberTimeout.call(this, plTimeout)
    end
    def put_AutoDialtone(this : ITAutomatedPhoneControl*, fEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoDialtone.call(this, fEnabled)
    end
    def get_AutoDialtone(this : ITAutomatedPhoneControl*, pfEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoDialtone.call(this, pfEnabled)
    end
    def put_AutoStopTonesOnOnHook(this : ITAutomatedPhoneControl*, fEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoStopTonesOnOnHook.call(this, fEnabled)
    end
    def get_AutoStopTonesOnOnHook(this : ITAutomatedPhoneControl*, pfEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoStopTonesOnOnHook.call(this, pfEnabled)
    end
    def put_AutoStopRingOnOffHook(this : ITAutomatedPhoneControl*, fEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoStopRingOnOffHook.call(this, fEnabled)
    end
    def get_AutoStopRingOnOffHook(this : ITAutomatedPhoneControl*, pfEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoStopRingOnOffHook.call(this, pfEnabled)
    end
    def put_AutoKeypadTones(this : ITAutomatedPhoneControl*, fEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoKeypadTones.call(this, fEnabled)
    end
    def get_AutoKeypadTones(this : ITAutomatedPhoneControl*, pfEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoKeypadTones.call(this, pfEnabled)
    end
    def put_AutoKeypadTonesMinimumDuration(this : ITAutomatedPhoneControl*, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoKeypadTonesMinimumDuration.call(this, lDuration)
    end
    def get_AutoKeypadTonesMinimumDuration(this : ITAutomatedPhoneControl*, plDuration : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoKeypadTonesMinimumDuration.call(this, plDuration)
    end
    def put_AutoVolumeControl(this : ITAutomatedPhoneControl*, fEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoVolumeControl.call(this, fEnabled)
    end
    def get_AutoVolumeControl(this : ITAutomatedPhoneControl*, fEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoVolumeControl.call(this, fEnabled)
    end
    def put_AutoVolumeControlStep(this : ITAutomatedPhoneControl*, lStepSize : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoVolumeControlStep.call(this, lStepSize)
    end
    def get_AutoVolumeControlStep(this : ITAutomatedPhoneControl*, plStepSize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoVolumeControlStep.call(this, plStepSize)
    end
    def put_AutoVolumeControlRepeatDelay(this : ITAutomatedPhoneControl*, lDelay : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoVolumeControlRepeatDelay.call(this, lDelay)
    end
    def get_AutoVolumeControlRepeatDelay(this : ITAutomatedPhoneControl*, plDelay : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoVolumeControlRepeatDelay.call(this, plDelay)
    end
    def put_AutoVolumeControlRepeatPeriod(this : ITAutomatedPhoneControl*, lPeriod : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoVolumeControlRepeatPeriod.call(this, lPeriod)
    end
    def get_AutoVolumeControlRepeatPeriod(this : ITAutomatedPhoneControl*, plPeriod : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoVolumeControlRepeatPeriod.call(this, plPeriod)
    end
    def select_call(this : ITAutomatedPhoneControl*, pCall : Void*, fSelectDefaultTerminals : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_call.call(this, pCall, fSelectDefaultTerminals)
    end
    def unselect_call(this : ITAutomatedPhoneControl*, pCall : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unselect_call.call(this, pCall)
    end
    def enumerate_selected_calls(this : ITAutomatedPhoneControl*, ppCallEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_selected_calls.call(this, ppCallEnum)
    end
    def get_SelectedCalls(this : ITAutomatedPhoneControl*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SelectedCalls.call(this, pVariant)
    end

  end

  @[Extern]
  record ITBasicCallControlVtbl,
    query_interface : Proc(ITBasicCallControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITBasicCallControl*, UInt32),
    release : Proc(ITBasicCallControl*, UInt32),
    get_type_info_count : Proc(ITBasicCallControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITBasicCallControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITBasicCallControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITBasicCallControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    connect : Proc(ITBasicCallControl*, Int16, Win32cr::Foundation::HRESULT),
    answer : Proc(ITBasicCallControl*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(ITBasicCallControl*, Win32cr::Devices::Tapi::DISCONNECT_CODE, Win32cr::Foundation::HRESULT),
    hold : Proc(ITBasicCallControl*, Int16, Win32cr::Foundation::HRESULT),
    handoff_direct : Proc(ITBasicCallControl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    handoff_indirect : Proc(ITBasicCallControl*, Int32, Win32cr::Foundation::HRESULT),
    conference : Proc(ITBasicCallControl*, Void*, Int16, Win32cr::Foundation::HRESULT),
    transfer : Proc(ITBasicCallControl*, Void*, Int16, Win32cr::Foundation::HRESULT),
    blind_transfer : Proc(ITBasicCallControl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    swap_hold : Proc(ITBasicCallControl*, Void*, Win32cr::Foundation::HRESULT),
    park_direct : Proc(ITBasicCallControl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    park_indirect : Proc(ITBasicCallControl*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    unpark : Proc(ITBasicCallControl*, Win32cr::Foundation::HRESULT),
    set_qos : Proc(ITBasicCallControl*, Int32, Win32cr::Devices::Tapi::QOS_SERVICE_LEVEL, Win32cr::Foundation::HRESULT),
    pickup : Proc(ITBasicCallControl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    dial : Proc(ITBasicCallControl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    finish : Proc(ITBasicCallControl*, Win32cr::Devices::Tapi::FINISH_MODE, Win32cr::Foundation::HRESULT),
    remove_from_conference : Proc(ITBasicCallControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1efc389-9355-11d0-835c-00aa003ccabd")]
  record ITBasicCallControl, lpVtbl : ITBasicCallControlVtbl* do
    GUID = LibC::GUID.new(0xb1efc389_u32, 0x9355_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITBasicCallControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITBasicCallControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITBasicCallControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITBasicCallControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITBasicCallControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITBasicCallControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITBasicCallControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def connect(this : ITBasicCallControl*, fSync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, fSync)
    end
    def answer(this : ITBasicCallControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.answer.call(this)
    end
    def disconnect(this : ITBasicCallControl*, code : Win32cr::Devices::Tapi::DISCONNECT_CODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this, code)
    end
    def hold(this : ITBasicCallControl*, fHold : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hold.call(this, fHold)
    end
    def handoff_direct(this : ITBasicCallControl*, pApplicationName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handoff_direct.call(this, pApplicationName)
    end
    def handoff_indirect(this : ITBasicCallControl*, lMediaType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handoff_indirect.call(this, lMediaType)
    end
    def conference(this : ITBasicCallControl*, pCall : Void*, fSync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.conference.call(this, pCall, fSync)
    end
    def transfer(this : ITBasicCallControl*, pCall : Void*, fSync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transfer.call(this, pCall, fSync)
    end
    def blind_transfer(this : ITBasicCallControl*, pDestAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.blind_transfer.call(this, pDestAddress)
    end
    def swap_hold(this : ITBasicCallControl*, pCall : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.swap_hold.call(this, pCall)
    end
    def park_direct(this : ITBasicCallControl*, pParkAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.park_direct.call(this, pParkAddress)
    end
    def park_indirect(this : ITBasicCallControl*, ppNonDirAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.park_indirect.call(this, ppNonDirAddress)
    end
    def unpark(this : ITBasicCallControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unpark.call(this)
    end
    def set_qos(this : ITBasicCallControl*, lMediaType : Int32, service_level : Win32cr::Devices::Tapi::QOS_SERVICE_LEVEL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_qos.call(this, lMediaType, service_level)
    end
    def pickup(this : ITBasicCallControl*, pGroupID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pickup.call(this, pGroupID)
    end
    def dial(this : ITBasicCallControl*, pDestAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dial.call(this, pDestAddress)
    end
    def finish(this : ITBasicCallControl*, finishMode : Win32cr::Devices::Tapi::FINISH_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish.call(this, finishMode)
    end
    def remove_from_conference(this : ITBasicCallControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_conference.call(this)
    end

  end

  @[Extern]
  record ITCallInfoVtbl,
    query_interface : Proc(ITCallInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallInfo*, UInt32),
    release : Proc(ITCallInfo*, UInt32),
    get_type_info_count : Proc(ITCallInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITCallInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_CallState : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALL_STATE*, Win32cr::Foundation::HRESULT),
    get_Privilege : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALL_PRIVILEGE*, Win32cr::Foundation::HRESULT),
    get_CallHub : Proc(ITCallInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_CallInfoLong : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_LONG, Int32*, Win32cr::Foundation::HRESULT),
    put_CallInfoLong : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_LONG, Int32, Win32cr::Foundation::HRESULT),
    get_CallInfoString : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_STRING, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CallInfoString : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_STRING, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CallInfoBuffer : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_CallInfoBuffer : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_call_info_buffer : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    set_call_info_buffer : Proc(ITCallInfo*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    release_user_user_info : Proc(ITCallInfo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("350f85d1-1227-11d3-83d4-00c04fb6809f")]
  record ITCallInfo, lpVtbl : ITCallInfoVtbl* do
    GUID = LibC::GUID.new(0x350f85d1_u32, 0x1227_u16, 0x11d3_u16, StaticArray[0x83_u8, 0xd4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITCallInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Address(this : ITCallInfo*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_CallState(this : ITCallInfo*, pCallState : Win32cr::Devices::Tapi::CALL_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallState.call(this, pCallState)
    end
    def get_Privilege(this : ITCallInfo*, pPrivilege : Win32cr::Devices::Tapi::CALL_PRIVILEGE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Privilege.call(this, pPrivilege)
    end
    def get_CallHub(this : ITCallInfo*, ppCallHub : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallHub.call(this, ppCallHub)
    end
    def get_CallInfoLong(this : ITCallInfo*, call_info_long : Win32cr::Devices::Tapi::CALLINFO_LONG, plCallInfoLongVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallInfoLong.call(this, call_info_long, plCallInfoLongVal)
    end
    def put_CallInfoLong(this : ITCallInfo*, call_info_long : Win32cr::Devices::Tapi::CALLINFO_LONG, lCallInfoLongVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CallInfoLong.call(this, call_info_long, lCallInfoLongVal)
    end
    def get_CallInfoString(this : ITCallInfo*, call_info_string : Win32cr::Devices::Tapi::CALLINFO_STRING, ppCallInfoString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallInfoString.call(this, call_info_string, ppCallInfoString)
    end
    def put_CallInfoString(this : ITCallInfo*, call_info_string : Win32cr::Devices::Tapi::CALLINFO_STRING, pCallInfoString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CallInfoString.call(this, call_info_string, pCallInfoString)
    end
    def get_CallInfoBuffer(this : ITCallInfo*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, ppCallInfoBuffer : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallInfoBuffer.call(this, call_info_buffer, ppCallInfoBuffer)
    end
    def put_CallInfoBuffer(this : ITCallInfo*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, pCallInfoBuffer : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CallInfoBuffer.call(this, call_info_buffer, pCallInfoBuffer)
    end
    def get_call_info_buffer(this : ITCallInfo*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, pdwSize : UInt32*, ppCallInfoBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_call_info_buffer.call(this, call_info_buffer, pdwSize, ppCallInfoBuffer)
    end
    def set_call_info_buffer(this : ITCallInfo*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, dwSize : UInt32, pCallInfoBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_call_info_buffer.call(this, call_info_buffer, dwSize, pCallInfoBuffer)
    end
    def release_user_user_info(this : ITCallInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_user_user_info.call(this)
    end

  end

  @[Extern]
  record ITCallInfo2Vtbl,
    query_interface : Proc(ITCallInfo2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallInfo2*, UInt32),
    release : Proc(ITCallInfo2*, UInt32),
    get_type_info_count : Proc(ITCallInfo2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallInfo2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallInfo2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallInfo2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITCallInfo2*, Void**, Win32cr::Foundation::HRESULT),
    get_CallState : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALL_STATE*, Win32cr::Foundation::HRESULT),
    get_Privilege : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALL_PRIVILEGE*, Win32cr::Foundation::HRESULT),
    get_CallHub : Proc(ITCallInfo2*, Void**, Win32cr::Foundation::HRESULT),
    get_CallInfoLong : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_LONG, Int32*, Win32cr::Foundation::HRESULT),
    put_CallInfoLong : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_LONG, Int32, Win32cr::Foundation::HRESULT),
    get_CallInfoString : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_STRING, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CallInfoString : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_STRING, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CallInfoBuffer : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    put_CallInfoBuffer : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_call_info_buffer : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    set_call_info_buffer : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::CALLINFO_BUFFER, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    release_user_user_info : Proc(ITCallInfo2*, Win32cr::Foundation::HRESULT),
    get_EventFilter : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::TAPI_EVENT, Int32, Int16*, Win32cr::Foundation::HRESULT),
    put_EventFilter : Proc(ITCallInfo2*, Win32cr::Devices::Tapi::TAPI_EVENT, Int32, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("94d70ca6-7ab0-4daa-81ca-b8f8643faec1")]
  record ITCallInfo2, lpVtbl : ITCallInfo2Vtbl* do
    GUID = LibC::GUID.new(0x94d70ca6_u32, 0x7ab0_u16, 0x4daa_u16, StaticArray[0x81_u8, 0xca_u8, 0xb8_u8, 0xf8_u8, 0x64_u8, 0x3f_u8, 0xae_u8, 0xc1_u8])
    def query_interface(this : ITCallInfo2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallInfo2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallInfo2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallInfo2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallInfo2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallInfo2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallInfo2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Address(this : ITCallInfo2*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_CallState(this : ITCallInfo2*, pCallState : Win32cr::Devices::Tapi::CALL_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallState.call(this, pCallState)
    end
    def get_Privilege(this : ITCallInfo2*, pPrivilege : Win32cr::Devices::Tapi::CALL_PRIVILEGE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Privilege.call(this, pPrivilege)
    end
    def get_CallHub(this : ITCallInfo2*, ppCallHub : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallHub.call(this, ppCallHub)
    end
    def get_CallInfoLong(this : ITCallInfo2*, call_info_long : Win32cr::Devices::Tapi::CALLINFO_LONG, plCallInfoLongVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallInfoLong.call(this, call_info_long, plCallInfoLongVal)
    end
    def put_CallInfoLong(this : ITCallInfo2*, call_info_long : Win32cr::Devices::Tapi::CALLINFO_LONG, lCallInfoLongVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CallInfoLong.call(this, call_info_long, lCallInfoLongVal)
    end
    def get_CallInfoString(this : ITCallInfo2*, call_info_string : Win32cr::Devices::Tapi::CALLINFO_STRING, ppCallInfoString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallInfoString.call(this, call_info_string, ppCallInfoString)
    end
    def put_CallInfoString(this : ITCallInfo2*, call_info_string : Win32cr::Devices::Tapi::CALLINFO_STRING, pCallInfoString : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CallInfoString.call(this, call_info_string, pCallInfoString)
    end
    def get_CallInfoBuffer(this : ITCallInfo2*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, ppCallInfoBuffer : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallInfoBuffer.call(this, call_info_buffer, ppCallInfoBuffer)
    end
    def put_CallInfoBuffer(this : ITCallInfo2*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, pCallInfoBuffer : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CallInfoBuffer.call(this, call_info_buffer, pCallInfoBuffer)
    end
    def get_call_info_buffer(this : ITCallInfo2*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, pdwSize : UInt32*, ppCallInfoBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_call_info_buffer.call(this, call_info_buffer, pdwSize, ppCallInfoBuffer)
    end
    def set_call_info_buffer(this : ITCallInfo2*, call_info_buffer : Win32cr::Devices::Tapi::CALLINFO_BUFFER, dwSize : UInt32, pCallInfoBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_call_info_buffer.call(this, call_info_buffer, dwSize, pCallInfoBuffer)
    end
    def release_user_user_info(this : ITCallInfo2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_user_user_info.call(this)
    end
    def get_EventFilter(this : ITCallInfo2*, tapi_event : Win32cr::Devices::Tapi::TAPI_EVENT, lSubEvent : Int32, pEnable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EventFilter.call(this, tapi_event, lSubEvent, pEnable)
    end
    def put_EventFilter(this : ITCallInfo2*, tapi_event : Win32cr::Devices::Tapi::TAPI_EVENT, lSubEvent : Int32, bEnable : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EventFilter.call(this, tapi_event, lSubEvent, bEnable)
    end

  end

  @[Extern]
  record ITTerminalVtbl,
    query_interface : Proc(ITTerminal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTerminal*, UInt32),
    release : Proc(ITTerminal*, UInt32),
    get_type_info_count : Proc(ITTerminal*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTerminal*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTerminal*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTerminal*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITTerminal*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITTerminal*, Win32cr::Devices::Tapi::TERMINAL_STATE*, Win32cr::Foundation::HRESULT),
    get_TerminalType : Proc(ITTerminal*, Win32cr::Devices::Tapi::TERMINAL_TYPE*, Win32cr::Foundation::HRESULT),
    get_TerminalClass : Proc(ITTerminal*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(ITTerminal*, Int32*, Win32cr::Foundation::HRESULT),
    get_Direction : Proc(ITTerminal*, Win32cr::Devices::Tapi::TERMINAL_DIRECTION*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1efc38a-9355-11d0-835c-00aa003ccabd")]
  record ITTerminal, lpVtbl : ITTerminalVtbl* do
    GUID = LibC::GUID.new(0xb1efc38a_u32, 0x9355_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITTerminal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTerminal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTerminal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTerminal*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTerminal*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTerminal*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTerminal*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : ITTerminal*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, ppName)
    end
    def get_State(this : ITTerminal*, pTerminalState : Win32cr::Devices::Tapi::TERMINAL_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pTerminalState)
    end
    def get_TerminalType(this : ITTerminal*, pType : Win32cr::Devices::Tapi::TERMINAL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TerminalType.call(this, pType)
    end
    def get_TerminalClass(this : ITTerminal*, ppTerminalClass : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TerminalClass.call(this, ppTerminalClass)
    end
    def get_MediaType(this : ITTerminal*, plMediaType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, plMediaType)
    end
    def get_Direction(this : ITTerminal*, pDirection : Win32cr::Devices::Tapi::TERMINAL_DIRECTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Direction.call(this, pDirection)
    end

  end

  @[Extern]
  record ITMultiTrackTerminalVtbl,
    query_interface : Proc(ITMultiTrackTerminal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITMultiTrackTerminal*, UInt32),
    release : Proc(ITMultiTrackTerminal*, UInt32),
    get_type_info_count : Proc(ITMultiTrackTerminal*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITMultiTrackTerminal*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITMultiTrackTerminal*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITMultiTrackTerminal*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TrackTerminals : Proc(ITMultiTrackTerminal*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_track_terminals : Proc(ITMultiTrackTerminal*, Void**, Win32cr::Foundation::HRESULT),
    create_track_terminal : Proc(ITMultiTrackTerminal*, Int32, Win32cr::Devices::Tapi::TERMINAL_DIRECTION, Void**, Win32cr::Foundation::HRESULT),
    get_MediaTypesInUse : Proc(ITMultiTrackTerminal*, Int32*, Win32cr::Foundation::HRESULT),
    get_DirectionsInUse : Proc(ITMultiTrackTerminal*, Win32cr::Devices::Tapi::TERMINAL_DIRECTION*, Win32cr::Foundation::HRESULT),
    remove_track_terminal : Proc(ITMultiTrackTerminal*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fe040091-ade8-4072-95c9-bf7de8c54b44")]
  record ITMultiTrackTerminal, lpVtbl : ITMultiTrackTerminalVtbl* do
    GUID = LibC::GUID.new(0xfe040091_u32, 0xade8_u16, 0x4072_u16, StaticArray[0x95_u8, 0xc9_u8, 0xbf_u8, 0x7d_u8, 0xe8_u8, 0xc5_u8, 0x4b_u8, 0x44_u8])
    def query_interface(this : ITMultiTrackTerminal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITMultiTrackTerminal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITMultiTrackTerminal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITMultiTrackTerminal*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITMultiTrackTerminal*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITMultiTrackTerminal*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITMultiTrackTerminal*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TrackTerminals(this : ITMultiTrackTerminal*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TrackTerminals.call(this, pVariant)
    end
    def enumerate_track_terminals(this : ITMultiTrackTerminal*, ppEnumTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_track_terminals.call(this, ppEnumTerminal)
    end
    def create_track_terminal(this : ITMultiTrackTerminal*, media_type : Int32, terminal_direction : Win32cr::Devices::Tapi::TERMINAL_DIRECTION, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_track_terminal.call(this, media_type, terminal_direction, ppTerminal)
    end
    def get_MediaTypesInUse(this : ITMultiTrackTerminal*, plMediaTypesInUse : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaTypesInUse.call(this, plMediaTypesInUse)
    end
    def get_DirectionsInUse(this : ITMultiTrackTerminal*, plDirectionsInUsed : Win32cr::Devices::Tapi::TERMINAL_DIRECTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DirectionsInUse.call(this, plDirectionsInUsed)
    end
    def remove_track_terminal(this : ITMultiTrackTerminal*, pTrackTerminalToRemove : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_track_terminal.call(this, pTrackTerminalToRemove)
    end

  end

  @[Extern]
  record ITFileTrackVtbl,
    query_interface : Proc(ITFileTrack*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITFileTrack*, UInt32),
    release : Proc(ITFileTrack*, UInt32),
    get_type_info_count : Proc(ITFileTrack*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITFileTrack*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITFileTrack*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITFileTrack*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Format : Proc(ITFileTrack*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, Win32cr::Foundation::HRESULT),
    put_Format : Proc(ITFileTrack*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    get_ControllingTerminal : Proc(ITFileTrack*, Void**, Win32cr::Foundation::HRESULT),
    get_AudioFormatForScripting : Proc(ITFileTrack*, Void**, Win32cr::Foundation::HRESULT),
    put_AudioFormatForScripting : Proc(ITFileTrack*, Void*, Win32cr::Foundation::HRESULT),
    get_EmptyAudioFormatForScripting : Proc(ITFileTrack*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("31ca6ea9-c08a-4bea-8811-8e9c1ba3ea3a")]
  record ITFileTrack, lpVtbl : ITFileTrackVtbl* do
    GUID = LibC::GUID.new(0x31ca6ea9_u32, 0xc08a_u16, 0x4bea_u16, StaticArray[0x88_u8, 0x11_u8, 0x8e_u8, 0x9c_u8, 0x1b_u8, 0xa3_u8, 0xea_u8, 0x3a_u8])
    def query_interface(this : ITFileTrack*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITFileTrack*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITFileTrack*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITFileTrack*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITFileTrack*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITFileTrack*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITFileTrack*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Format(this : ITFileTrack*, ppmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Format.call(this, ppmt)
    end
    def put_Format(this : ITFileTrack*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Format.call(this, pmt)
    end
    def get_ControllingTerminal(this : ITFileTrack*, ppControllingTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ControllingTerminal.call(this, ppControllingTerminal)
    end
    def get_AudioFormatForScripting(this : ITFileTrack*, ppAudioFormat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioFormatForScripting.call(this, ppAudioFormat)
    end
    def put_AudioFormatForScripting(this : ITFileTrack*, pAudioFormat : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AudioFormatForScripting.call(this, pAudioFormat)
    end
    def get_EmptyAudioFormatForScripting(this : ITFileTrack*, ppAudioFormat : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EmptyAudioFormatForScripting.call(this, ppAudioFormat)
    end

  end

  @[Extern]
  record ITMediaPlaybackVtbl,
    query_interface : Proc(ITMediaPlayback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITMediaPlayback*, UInt32),
    release : Proc(ITMediaPlayback*, UInt32),
    get_type_info_count : Proc(ITMediaPlayback*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITMediaPlayback*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITMediaPlayback*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITMediaPlayback*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_PlayList : Proc(ITMediaPlayback*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_PlayList : Proc(ITMediaPlayback*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("627e8ae6-ae4c-4a69-bb63-2ad625404b77")]
  record ITMediaPlayback, lpVtbl : ITMediaPlaybackVtbl* do
    GUID = LibC::GUID.new(0x627e8ae6_u32, 0xae4c_u16, 0x4a69_u16, StaticArray[0xbb_u8, 0x63_u8, 0x2a_u8, 0xd6_u8, 0x25_u8, 0x40_u8, 0x4b_u8, 0x77_u8])
    def query_interface(this : ITMediaPlayback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITMediaPlayback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITMediaPlayback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITMediaPlayback*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITMediaPlayback*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITMediaPlayback*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITMediaPlayback*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_PlayList(this : ITMediaPlayback*, play_list_variant : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PlayList.call(this, play_list_variant)
    end
    def get_PlayList(this : ITMediaPlayback*, pPlayListVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlayList.call(this, pPlayListVariant)
    end

  end

  @[Extern]
  record ITMediaRecordVtbl,
    query_interface : Proc(ITMediaRecord*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITMediaRecord*, UInt32),
    release : Proc(ITMediaRecord*, UInt32),
    get_type_info_count : Proc(ITMediaRecord*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITMediaRecord*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITMediaRecord*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITMediaRecord*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_FileName : Proc(ITMediaRecord*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FileName : Proc(ITMediaRecord*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f5dd4592-5476-4cc1-9d4d-fad3eefe7db2")]
  record ITMediaRecord, lpVtbl : ITMediaRecordVtbl* do
    GUID = LibC::GUID.new(0xf5dd4592_u32, 0x5476_u16, 0x4cc1_u16, StaticArray[0x9d_u8, 0x4d_u8, 0xfa_u8, 0xd3_u8, 0xee_u8, 0xfe_u8, 0x7d_u8, 0xb2_u8])
    def query_interface(this : ITMediaRecord*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITMediaRecord*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITMediaRecord*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITMediaRecord*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITMediaRecord*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITMediaRecord*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITMediaRecord*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_FileName(this : ITMediaRecord*, bstrFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileName.call(this, bstrFileName)
    end
    def get_FileName(this : ITMediaRecord*, pbstrFileName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileName.call(this, pbstrFileName)
    end

  end

  @[Extern]
  record ITMediaControlVtbl,
    query_interface : Proc(ITMediaControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITMediaControl*, UInt32),
    release : Proc(ITMediaControl*, UInt32),
    get_type_info_count : Proc(ITMediaControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITMediaControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITMediaControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITMediaControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    start : Proc(ITMediaControl*, Win32cr::Foundation::HRESULT),
    stop : Proc(ITMediaControl*, Win32cr::Foundation::HRESULT),
    pause : Proc(ITMediaControl*, Win32cr::Foundation::HRESULT),
    get_MediaState : Proc(ITMediaControl*, Win32cr::Devices::Tapi::TERMINAL_MEDIA_STATE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c445dde8-5199-4bc7-9807-5ffb92e42e09")]
  record ITMediaControl, lpVtbl : ITMediaControlVtbl* do
    GUID = LibC::GUID.new(0xc445dde8_u32, 0x5199_u16, 0x4bc7_u16, StaticArray[0x98_u8, 0x7_u8, 0x5f_u8, 0xfb_u8, 0x92_u8, 0xe4_u8, 0x2e_u8, 0x9_u8])
    def query_interface(this : ITMediaControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITMediaControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITMediaControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITMediaControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITMediaControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITMediaControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITMediaControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def start(this : ITMediaControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : ITMediaControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : ITMediaControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def get_MediaState(this : ITMediaControl*, pTerminalMediaState : Win32cr::Devices::Tapi::TERMINAL_MEDIA_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaState.call(this, pTerminalMediaState)
    end

  end

  @[Extern]
  record ITBasicAudioTerminalVtbl,
    query_interface : Proc(ITBasicAudioTerminal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITBasicAudioTerminal*, UInt32),
    release : Proc(ITBasicAudioTerminal*, UInt32),
    get_type_info_count : Proc(ITBasicAudioTerminal*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITBasicAudioTerminal*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITBasicAudioTerminal*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITBasicAudioTerminal*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Volume : Proc(ITBasicAudioTerminal*, Int32, Win32cr::Foundation::HRESULT),
    get_Volume : Proc(ITBasicAudioTerminal*, Int32*, Win32cr::Foundation::HRESULT),
    put_Balance : Proc(ITBasicAudioTerminal*, Int32, Win32cr::Foundation::HRESULT),
    get_Balance : Proc(ITBasicAudioTerminal*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1efc38d-9355-11d0-835c-00aa003ccabd")]
  record ITBasicAudioTerminal, lpVtbl : ITBasicAudioTerminalVtbl* do
    GUID = LibC::GUID.new(0xb1efc38d_u32, 0x9355_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITBasicAudioTerminal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITBasicAudioTerminal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITBasicAudioTerminal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITBasicAudioTerminal*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITBasicAudioTerminal*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITBasicAudioTerminal*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITBasicAudioTerminal*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_Volume(this : ITBasicAudioTerminal*, lVolume : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Volume.call(this, lVolume)
    end
    def get_Volume(this : ITBasicAudioTerminal*, plVolume : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Volume.call(this, plVolume)
    end
    def put_Balance(this : ITBasicAudioTerminal*, lBalance : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Balance.call(this, lBalance)
    end
    def get_Balance(this : ITBasicAudioTerminal*, plBalance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Balance.call(this, plBalance)
    end

  end

  @[Extern]
  record ITStaticAudioTerminalVtbl,
    query_interface : Proc(ITStaticAudioTerminal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITStaticAudioTerminal*, UInt32),
    release : Proc(ITStaticAudioTerminal*, UInt32),
    get_type_info_count : Proc(ITStaticAudioTerminal*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITStaticAudioTerminal*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITStaticAudioTerminal*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITStaticAudioTerminal*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_WaveId : Proc(ITStaticAudioTerminal*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a86b7871-d14c-48e6-922e-a8d15f984800")]
  record ITStaticAudioTerminal, lpVtbl : ITStaticAudioTerminalVtbl* do
    GUID = LibC::GUID.new(0xa86b7871_u32, 0xd14c_u16, 0x48e6_u16, StaticArray[0x92_u8, 0x2e_u8, 0xa8_u8, 0xd1_u8, 0x5f_u8, 0x98_u8, 0x48_u8, 0x0_u8])
    def query_interface(this : ITStaticAudioTerminal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITStaticAudioTerminal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITStaticAudioTerminal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITStaticAudioTerminal*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITStaticAudioTerminal*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITStaticAudioTerminal*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITStaticAudioTerminal*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_WaveId(this : ITStaticAudioTerminal*, plWaveId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WaveId.call(this, plWaveId)
    end

  end

  @[Extern]
  record ITCallHubVtbl,
    query_interface : Proc(ITCallHub*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallHub*, UInt32),
    release : Proc(ITCallHub*, UInt32),
    get_type_info_count : Proc(ITCallHub*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallHub*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallHub*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallHub*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    clear : Proc(ITCallHub*, Win32cr::Foundation::HRESULT),
    enumerate_calls : Proc(ITCallHub*, Void**, Win32cr::Foundation::HRESULT),
    get_Calls : Proc(ITCallHub*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_NumCalls : Proc(ITCallHub*, Int32*, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITCallHub*, Win32cr::Devices::Tapi::CALLHUB_STATE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a3c1544e-5b92-11d1-8f4e-00c04fb6809f")]
  record ITCallHub, lpVtbl : ITCallHubVtbl* do
    GUID = LibC::GUID.new(0xa3c1544e_u32, 0x5b92_u16, 0x11d1_u16, StaticArray[0x8f_u8, 0x4e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITCallHub*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallHub*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallHub*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallHub*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallHub*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallHub*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallHub*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def clear(this : ITCallHub*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def enumerate_calls(this : ITCallHub*, ppEnumCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_calls.call(this, ppEnumCall)
    end
    def get_Calls(this : ITCallHub*, pCalls : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Calls.call(this, pCalls)
    end
    def get_NumCalls(this : ITCallHub*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumCalls.call(this, plCalls)
    end
    def get_State(this : ITCallHub*, pState : Win32cr::Devices::Tapi::CALLHUB_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pState)
    end

  end

  @[Extern]
  record ITLegacyAddressMediaControlVtbl,
    query_interface : Proc(ITLegacyAddressMediaControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITLegacyAddressMediaControl*, UInt32),
    release : Proc(ITLegacyAddressMediaControl*, UInt32),
    get_id : Proc(ITLegacyAddressMediaControl*, Win32cr::Foundation::BSTR, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    get_dev_config : Proc(ITLegacyAddressMediaControl*, Win32cr::Foundation::BSTR, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    set_dev_config : Proc(ITLegacyAddressMediaControl*, Win32cr::Foundation::BSTR, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab493640-4c0b-11d2-a046-00c04fb6809f")]
  record ITLegacyAddressMediaControl, lpVtbl : ITLegacyAddressMediaControlVtbl* do
    GUID = LibC::GUID.new(0xab493640_u32, 0x4c0b_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x46_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITLegacyAddressMediaControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITLegacyAddressMediaControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITLegacyAddressMediaControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : ITLegacyAddressMediaControl*, pDeviceClass : Win32cr::Foundation::BSTR, pdwSize : UInt32*, ppDeviceID : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, pDeviceClass, pdwSize, ppDeviceID)
    end
    def get_dev_config(this : ITLegacyAddressMediaControl*, pDeviceClass : Win32cr::Foundation::BSTR, pdwSize : UInt32*, ppDeviceConfig : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dev_config.call(this, pDeviceClass, pdwSize, ppDeviceConfig)
    end
    def set_dev_config(this : ITLegacyAddressMediaControl*, pDeviceClass : Win32cr::Foundation::BSTR, dwSize : UInt32, pDeviceConfig : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dev_config.call(this, pDeviceClass, dwSize, pDeviceConfig)
    end

  end

  @[Extern]
  record ITPrivateEventVtbl,
    query_interface : Proc(ITPrivateEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPrivateEvent*, UInt32),
    release : Proc(ITPrivateEvent*, UInt32),
    get_type_info_count : Proc(ITPrivateEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITPrivateEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITPrivateEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITPrivateEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITPrivateEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITPrivateEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_CallHub : Proc(ITPrivateEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_EventCode : Proc(ITPrivateEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_EventInterface : Proc(ITPrivateEvent*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0e269cd0-10d4-4121-9c22-9c85d625650d")]
  record ITPrivateEvent, lpVtbl : ITPrivateEventVtbl* do
    GUID = LibC::GUID.new(0xe269cd0_u32, 0x10d4_u16, 0x4121_u16, StaticArray[0x9c_u8, 0x22_u8, 0x9c_u8, 0x85_u8, 0xd6_u8, 0x25_u8, 0x65_u8, 0xd_u8])
    def query_interface(this : ITPrivateEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPrivateEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPrivateEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITPrivateEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITPrivateEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITPrivateEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITPrivateEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Address(this : ITPrivateEvent*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_Call(this : ITPrivateEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end
    def get_CallHub(this : ITPrivateEvent*, ppCallHub : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallHub.call(this, ppCallHub)
    end
    def get_EventCode(this : ITPrivateEvent*, plEventCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EventCode.call(this, plEventCode)
    end
    def get_EventInterface(this : ITPrivateEvent*, pEventInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EventInterface.call(this, pEventInterface)
    end

  end

  @[Extern]
  record ITLegacyAddressMediaControl2Vtbl,
    query_interface : Proc(ITLegacyAddressMediaControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITLegacyAddressMediaControl2*, UInt32),
    release : Proc(ITLegacyAddressMediaControl2*, UInt32),
    get_id : Proc(ITLegacyAddressMediaControl2*, Win32cr::Foundation::BSTR, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    get_dev_config : Proc(ITLegacyAddressMediaControl2*, Win32cr::Foundation::BSTR, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    set_dev_config : Proc(ITLegacyAddressMediaControl2*, Win32cr::Foundation::BSTR, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    config_dialog : Proc(ITLegacyAddressMediaControl2*, Win32cr::Foundation::HWND, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    config_dialog_edit : Proc(ITLegacyAddressMediaControl2*, Win32cr::Foundation::HWND, Win32cr::Foundation::BSTR, UInt32, UInt8*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b0ee512b-a531-409e-9dd9-4099fe86c738")]
  record ITLegacyAddressMediaControl2, lpVtbl : ITLegacyAddressMediaControl2Vtbl* do
    GUID = LibC::GUID.new(0xb0ee512b_u32, 0xa531_u16, 0x409e_u16, StaticArray[0x9d_u8, 0xd9_u8, 0x40_u8, 0x99_u8, 0xfe_u8, 0x86_u8, 0xc7_u8, 0x38_u8])
    def query_interface(this : ITLegacyAddressMediaControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITLegacyAddressMediaControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITLegacyAddressMediaControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : ITLegacyAddressMediaControl2*, pDeviceClass : Win32cr::Foundation::BSTR, pdwSize : UInt32*, ppDeviceID : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, pDeviceClass, pdwSize, ppDeviceID)
    end
    def get_dev_config(this : ITLegacyAddressMediaControl2*, pDeviceClass : Win32cr::Foundation::BSTR, pdwSize : UInt32*, ppDeviceConfig : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dev_config.call(this, pDeviceClass, pdwSize, ppDeviceConfig)
    end
    def set_dev_config(this : ITLegacyAddressMediaControl2*, pDeviceClass : Win32cr::Foundation::BSTR, dwSize : UInt32, pDeviceConfig : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dev_config.call(this, pDeviceClass, dwSize, pDeviceConfig)
    end
    def config_dialog(this : ITLegacyAddressMediaControl2*, hwndOwner : Win32cr::Foundation::HWND, pDeviceClass : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.config_dialog.call(this, hwndOwner, pDeviceClass)
    end
    def config_dialog_edit(this : ITLegacyAddressMediaControl2*, hwndOwner : Win32cr::Foundation::HWND, pDeviceClass : Win32cr::Foundation::BSTR, dwSizeIn : UInt32, pDeviceConfigIn : UInt8*, pdwSizeOut : UInt32*, ppDeviceConfigOut : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.config_dialog_edit.call(this, hwndOwner, pDeviceClass, dwSizeIn, pDeviceConfigIn, pdwSizeOut, ppDeviceConfigOut)
    end

  end

  @[Extern]
  record ITLegacyCallMediaControlVtbl,
    query_interface : Proc(ITLegacyCallMediaControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITLegacyCallMediaControl*, UInt32),
    release : Proc(ITLegacyCallMediaControl*, UInt32),
    get_type_info_count : Proc(ITLegacyCallMediaControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITLegacyCallMediaControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITLegacyCallMediaControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITLegacyCallMediaControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    detect_digits : Proc(ITLegacyCallMediaControl*, Int32, Win32cr::Foundation::HRESULT),
    generate_digits : Proc(ITLegacyCallMediaControl*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    get_id : Proc(ITLegacyCallMediaControl*, Win32cr::Foundation::BSTR, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(ITLegacyCallMediaControl*, Int32, Win32cr::Foundation::HRESULT),
    monitor_media : Proc(ITLegacyCallMediaControl*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d624582f-cc23-4436-b8a5-47c625c8045d")]
  record ITLegacyCallMediaControl, lpVtbl : ITLegacyCallMediaControlVtbl* do
    GUID = LibC::GUID.new(0xd624582f_u32, 0xcc23_u16, 0x4436_u16, StaticArray[0xb8_u8, 0xa5_u8, 0x47_u8, 0xc6_u8, 0x25_u8, 0xc8_u8, 0x4_u8, 0x5d_u8])
    def query_interface(this : ITLegacyCallMediaControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITLegacyCallMediaControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITLegacyCallMediaControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITLegacyCallMediaControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITLegacyCallMediaControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITLegacyCallMediaControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITLegacyCallMediaControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def detect_digits(this : ITLegacyCallMediaControl*, digit_mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_digits.call(this, digit_mode)
    end
    def generate_digits(this : ITLegacyCallMediaControl*, pDigits : Win32cr::Foundation::BSTR, digit_mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_digits.call(this, pDigits, digit_mode)
    end
    def get_id(this : ITLegacyCallMediaControl*, pDeviceClass : Win32cr::Foundation::BSTR, pdwSize : UInt32*, ppDeviceID : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, pDeviceClass, pdwSize, ppDeviceID)
    end
    def set_media_type(this : ITLegacyCallMediaControl*, lMediaType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, lMediaType)
    end
    def monitor_media(this : ITLegacyCallMediaControl*, lMediaType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.monitor_media.call(this, lMediaType)
    end

  end

  @[Extern]
  record ITLegacyCallMediaControl2Vtbl,
    query_interface : Proc(ITLegacyCallMediaControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITLegacyCallMediaControl2*, UInt32),
    release : Proc(ITLegacyCallMediaControl2*, UInt32),
    get_type_info_count : Proc(ITLegacyCallMediaControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITLegacyCallMediaControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITLegacyCallMediaControl2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITLegacyCallMediaControl2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    detect_digits : Proc(ITLegacyCallMediaControl2*, Int32, Win32cr::Foundation::HRESULT),
    generate_digits : Proc(ITLegacyCallMediaControl2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    get_id : Proc(ITLegacyCallMediaControl2*, Win32cr::Foundation::BSTR, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(ITLegacyCallMediaControl2*, Int32, Win32cr::Foundation::HRESULT),
    monitor_media : Proc(ITLegacyCallMediaControl2*, Int32, Win32cr::Foundation::HRESULT),
    generate_digits2 : Proc(ITLegacyCallMediaControl2*, Win32cr::Foundation::BSTR, Int32, Int32, Win32cr::Foundation::HRESULT),
    gather_digits : Proc(ITLegacyCallMediaControl2*, Int32, Int32, Win32cr::Foundation::BSTR, Int32, Int32, Win32cr::Foundation::HRESULT),
    detect_tones : Proc(ITLegacyCallMediaControl2*, Win32cr::Devices::Tapi::TAPI_DETECTTONE*, Int32, Win32cr::Foundation::HRESULT),
    detect_tones_by_collection : Proc(ITLegacyCallMediaControl2*, Void*, Win32cr::Foundation::HRESULT),
    generate_tone : Proc(ITLegacyCallMediaControl2*, Win32cr::Devices::Tapi::TAPI_TONEMODE, Int32, Win32cr::Foundation::HRESULT),
    generate_custom_tones : Proc(ITLegacyCallMediaControl2*, Win32cr::Devices::Tapi::TAPI_CUSTOMTONE*, Int32, Int32, Win32cr::Foundation::HRESULT),
    generate_custom_tones_by_collection : Proc(ITLegacyCallMediaControl2*, Void*, Int32, Win32cr::Foundation::HRESULT),
    create_detect_tone_object : Proc(ITLegacyCallMediaControl2*, Void**, Win32cr::Foundation::HRESULT),
    create_custom_tone_object : Proc(ITLegacyCallMediaControl2*, Void**, Win32cr::Foundation::HRESULT),
    get_id_as_variant : Proc(ITLegacyCallMediaControl2*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("57ca332d-7bc2-44f1-a60c-936fe8d7ce73")]
  record ITLegacyCallMediaControl2, lpVtbl : ITLegacyCallMediaControl2Vtbl* do
    GUID = LibC::GUID.new(0x57ca332d_u32, 0x7bc2_u16, 0x44f1_u16, StaticArray[0xa6_u8, 0xc_u8, 0x93_u8, 0x6f_u8, 0xe8_u8, 0xd7_u8, 0xce_u8, 0x73_u8])
    def query_interface(this : ITLegacyCallMediaControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITLegacyCallMediaControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITLegacyCallMediaControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITLegacyCallMediaControl2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITLegacyCallMediaControl2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITLegacyCallMediaControl2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITLegacyCallMediaControl2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def detect_digits(this : ITLegacyCallMediaControl2*, digit_mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_digits.call(this, digit_mode)
    end
    def generate_digits(this : ITLegacyCallMediaControl2*, pDigits : Win32cr::Foundation::BSTR, digit_mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_digits.call(this, pDigits, digit_mode)
    end
    def get_id(this : ITLegacyCallMediaControl2*, pDeviceClass : Win32cr::Foundation::BSTR, pdwSize : UInt32*, ppDeviceID : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, pDeviceClass, pdwSize, ppDeviceID)
    end
    def set_media_type(this : ITLegacyCallMediaControl2*, lMediaType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, lMediaType)
    end
    def monitor_media(this : ITLegacyCallMediaControl2*, lMediaType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.monitor_media.call(this, lMediaType)
    end
    def generate_digits2(this : ITLegacyCallMediaControl2*, pDigits : Win32cr::Foundation::BSTR, digit_mode : Int32, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_digits2.call(this, pDigits, digit_mode, lDuration)
    end
    def gather_digits(this : ITLegacyCallMediaControl2*, digit_mode : Int32, lNumDigits : Int32, pTerminationDigits : Win32cr::Foundation::BSTR, lFirstDigitTimeout : Int32, lInterDigitTimeout : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.gather_digits.call(this, digit_mode, lNumDigits, pTerminationDigits, lFirstDigitTimeout, lInterDigitTimeout)
    end
    def detect_tones(this : ITLegacyCallMediaControl2*, pToneList : Win32cr::Devices::Tapi::TAPI_DETECTTONE*, lNumTones : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_tones.call(this, pToneList, lNumTones)
    end
    def detect_tones_by_collection(this : ITLegacyCallMediaControl2*, pDetectToneCollection : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect_tones_by_collection.call(this, pDetectToneCollection)
    end
    def generate_tone(this : ITLegacyCallMediaControl2*, tone_mode : Win32cr::Devices::Tapi::TAPI_TONEMODE, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_tone.call(this, tone_mode, lDuration)
    end
    def generate_custom_tones(this : ITLegacyCallMediaControl2*, pToneList : Win32cr::Devices::Tapi::TAPI_CUSTOMTONE*, lNumTones : Int32, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_custom_tones.call(this, pToneList, lNumTones, lDuration)
    end
    def generate_custom_tones_by_collection(this : ITLegacyCallMediaControl2*, pCustomToneCollection : Void*, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_custom_tones_by_collection.call(this, pCustomToneCollection, lDuration)
    end
    def create_detect_tone_object(this : ITLegacyCallMediaControl2*, ppDetectTone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_detect_tone_object.call(this, ppDetectTone)
    end
    def create_custom_tone_object(this : ITLegacyCallMediaControl2*, ppCustomTone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_custom_tone_object.call(this, ppCustomTone)
    end
    def get_id_as_variant(this : ITLegacyCallMediaControl2*, bstrDeviceClass : Win32cr::Foundation::BSTR, pVarDeviceID : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id_as_variant.call(this, bstrDeviceClass, pVarDeviceID)
    end

  end

  @[Extern]
  record ITDetectToneVtbl,
    query_interface : Proc(ITDetectTone*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDetectTone*, UInt32),
    release : Proc(ITDetectTone*, UInt32),
    get_type_info_count : Proc(ITDetectTone*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDetectTone*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDetectTone*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDetectTone*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AppSpecific : Proc(ITDetectTone*, Int32*, Win32cr::Foundation::HRESULT),
    put_AppSpecific : Proc(ITDetectTone*, Int32, Win32cr::Foundation::HRESULT),
    get_Duration : Proc(ITDetectTone*, Int32*, Win32cr::Foundation::HRESULT),
    put_Duration : Proc(ITDetectTone*, Int32, Win32cr::Foundation::HRESULT),
    get_Frequency : Proc(ITDetectTone*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    put_Frequency : Proc(ITDetectTone*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("961f79bd-3097-49df-a1d6-909b77e89ca0")]
  record ITDetectTone, lpVtbl : ITDetectToneVtbl* do
    GUID = LibC::GUID.new(0x961f79bd_u32, 0x3097_u16, 0x49df_u16, StaticArray[0xa1_u8, 0xd6_u8, 0x90_u8, 0x9b_u8, 0x77_u8, 0xe8_u8, 0x9c_u8, 0xa0_u8])
    def query_interface(this : ITDetectTone*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDetectTone*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDetectTone*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDetectTone*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDetectTone*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDetectTone*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDetectTone*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AppSpecific(this : ITDetectTone*, plAppSpecific : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppSpecific.call(this, plAppSpecific)
    end
    def put_AppSpecific(this : ITDetectTone*, lAppSpecific : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AppSpecific.call(this, lAppSpecific)
    end
    def get_Duration(this : ITDetectTone*, plDuration : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Duration.call(this, plDuration)
    end
    def put_Duration(this : ITDetectTone*, lDuration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Duration.call(this, lDuration)
    end
    def get_Frequency(this : ITDetectTone*, index : Int32, plFrequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Frequency.call(this, index, plFrequency)
    end
    def put_Frequency(this : ITDetectTone*, index : Int32, lFrequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Frequency.call(this, index, lFrequency)
    end

  end

  @[Extern]
  record ITCustomToneVtbl,
    query_interface : Proc(ITCustomTone*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCustomTone*, UInt32),
    release : Proc(ITCustomTone*, UInt32),
    get_type_info_count : Proc(ITCustomTone*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCustomTone*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCustomTone*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCustomTone*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Frequency : Proc(ITCustomTone*, Int32*, Win32cr::Foundation::HRESULT),
    put_Frequency : Proc(ITCustomTone*, Int32, Win32cr::Foundation::HRESULT),
    get_CadenceOn : Proc(ITCustomTone*, Int32*, Win32cr::Foundation::HRESULT),
    put_CadenceOn : Proc(ITCustomTone*, Int32, Win32cr::Foundation::HRESULT),
    get_CadenceOff : Proc(ITCustomTone*, Int32*, Win32cr::Foundation::HRESULT),
    put_CadenceOff : Proc(ITCustomTone*, Int32, Win32cr::Foundation::HRESULT),
    get_Volume : Proc(ITCustomTone*, Int32*, Win32cr::Foundation::HRESULT),
    put_Volume : Proc(ITCustomTone*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("357ad764-b3c6-4b2a-8fa5-0722827a9254")]
  record ITCustomTone, lpVtbl : ITCustomToneVtbl* do
    GUID = LibC::GUID.new(0x357ad764_u32, 0xb3c6_u16, 0x4b2a_u16, StaticArray[0x8f_u8, 0xa5_u8, 0x7_u8, 0x22_u8, 0x82_u8, 0x7a_u8, 0x92_u8, 0x54_u8])
    def query_interface(this : ITCustomTone*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCustomTone*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCustomTone*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCustomTone*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCustomTone*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCustomTone*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCustomTone*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Frequency(this : ITCustomTone*, plFrequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Frequency.call(this, plFrequency)
    end
    def put_Frequency(this : ITCustomTone*, lFrequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Frequency.call(this, lFrequency)
    end
    def get_CadenceOn(this : ITCustomTone*, plCadenceOn : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CadenceOn.call(this, plCadenceOn)
    end
    def put_CadenceOn(this : ITCustomTone*, cadence_on : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CadenceOn.call(this, cadence_on)
    end
    def get_CadenceOff(this : ITCustomTone*, plCadenceOff : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CadenceOff.call(this, plCadenceOff)
    end
    def put_CadenceOff(this : ITCustomTone*, lCadenceOff : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CadenceOff.call(this, lCadenceOff)
    end
    def get_Volume(this : ITCustomTone*, plVolume : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Volume.call(this, plVolume)
    end
    def put_Volume(this : ITCustomTone*, lVolume : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Volume.call(this, lVolume)
    end

  end

  @[Extern]
  record IEnumPhoneVtbl,
    query_interface : Proc(IEnumPhone*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumPhone*, UInt32),
    release : Proc(IEnumPhone*, UInt32),
    next__ : Proc(IEnumPhone*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumPhone*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumPhone*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumPhone*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f15b7669-4780-4595-8c89-fb369c8cf7aa")]
  record IEnumPhone, lpVtbl : IEnumPhoneVtbl* do
    GUID = LibC::GUID.new(0xf15b7669_u32, 0x4780_u16, 0x4595_u16, StaticArray[0x8c_u8, 0x89_u8, 0xfb_u8, 0x36_u8, 0x9c_u8, 0x8c_u8, 0xf7_u8, 0xaa_u8])
    def query_interface(this : IEnumPhone*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumPhone*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumPhone*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumPhone*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumPhone*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumPhone*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumPhone*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumTerminalVtbl,
    query_interface : Proc(IEnumTerminal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumTerminal*, UInt32),
    release : Proc(IEnumTerminal*, UInt32),
    next__ : Proc(IEnumTerminal*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumTerminal*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumTerminal*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumTerminal*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ae269cf4-935e-11d0-835c-00aa003ccabd")]
  record IEnumTerminal, lpVtbl : IEnumTerminalVtbl* do
    GUID = LibC::GUID.new(0xae269cf4_u32, 0x935e_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : IEnumTerminal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumTerminal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumTerminal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumTerminal*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumTerminal*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumTerminal*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumTerminal*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumTerminalClassVtbl,
    query_interface : Proc(IEnumTerminalClass*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumTerminalClass*, UInt32),
    release : Proc(IEnumTerminalClass*, UInt32),
    next__ : Proc(IEnumTerminalClass*, UInt32, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumTerminalClass*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumTerminalClass*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumTerminalClass*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ae269cf5-935e-11d0-835c-00aa003ccabd")]
  record IEnumTerminalClass, lpVtbl : IEnumTerminalClassVtbl* do
    GUID = LibC::GUID.new(0xae269cf5_u32, 0x935e_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : IEnumTerminalClass*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumTerminalClass*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumTerminalClass*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumTerminalClass*, celt : UInt32, pElements : LibC::GUID*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, pElements, pceltFetched)
    end
    def reset(this : IEnumTerminalClass*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumTerminalClass*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumTerminalClass*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumCallVtbl,
    query_interface : Proc(IEnumCall*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCall*, UInt32),
    release : Proc(IEnumCall*, UInt32),
    next__ : Proc(IEnumCall*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCall*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCall*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumCall*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ae269cf6-935e-11d0-835c-00aa003ccabd")]
  record IEnumCall, lpVtbl : IEnumCallVtbl* do
    GUID = LibC::GUID.new(0xae269cf6_u32, 0x935e_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : IEnumCall*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCall*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCall*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumCall*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumCall*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumCall*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumCall*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumAddressVtbl,
    query_interface : Proc(IEnumAddress*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumAddress*, UInt32),
    release : Proc(IEnumAddress*, UInt32),
    next__ : Proc(IEnumAddress*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumAddress*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumAddress*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumAddress*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1666fca1-9363-11d0-835c-00aa003ccabd")]
  record IEnumAddress, lpVtbl : IEnumAddressVtbl* do
    GUID = LibC::GUID.new(0x1666fca1_u32, 0x9363_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5c_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : IEnumAddress*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumAddress*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumAddress*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumAddress*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumAddress*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumAddress*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumAddress*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumCallHubVtbl,
    query_interface : Proc(IEnumCallHub*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCallHub*, UInt32),
    release : Proc(IEnumCallHub*, UInt32),
    next__ : Proc(IEnumCallHub*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCallHub*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCallHub*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumCallHub*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a3c15450-5b92-11d1-8f4e-00c04fb6809f")]
  record IEnumCallHub, lpVtbl : IEnumCallHubVtbl* do
    GUID = LibC::GUID.new(0xa3c15450_u32, 0x5b92_u16, 0x11d1_u16, StaticArray[0x8f_u8, 0x4e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : IEnumCallHub*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCallHub*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCallHub*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumCallHub*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumCallHub*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumCallHub*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumCallHub*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumBstrVtbl,
    query_interface : Proc(IEnumBstr*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumBstr*, UInt32),
    release : Proc(IEnumBstr*, UInt32),
    next__ : Proc(IEnumBstr*, UInt32, Win32cr::Foundation::BSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumBstr*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumBstr*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumBstr*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("35372049-0bc6-11d2-a033-00c04fb6809f")]
  record IEnumBstr, lpVtbl : IEnumBstrVtbl* do
    GUID = LibC::GUID.new(0x35372049_u32, 0xbc6_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x33_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : IEnumBstr*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumBstr*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumBstr*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumBstr*, celt : UInt32, ppStrings : Win32cr::Foundation::BSTR*, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppStrings, pceltFetched)
    end
    def reset(this : IEnumBstr*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumBstr*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumBstr*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumPluggableTerminalClassInfoVtbl,
    query_interface : Proc(IEnumPluggableTerminalClassInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumPluggableTerminalClassInfo*, UInt32),
    release : Proc(IEnumPluggableTerminalClassInfo*, UInt32),
    next__ : Proc(IEnumPluggableTerminalClassInfo*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumPluggableTerminalClassInfo*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumPluggableTerminalClassInfo*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumPluggableTerminalClassInfo*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4567450c-dbee-4e3f-aaf5-37bf9ebf5e29")]
  record IEnumPluggableTerminalClassInfo, lpVtbl : IEnumPluggableTerminalClassInfoVtbl* do
    GUID = LibC::GUID.new(0x4567450c_u32, 0xdbee_u16, 0x4e3f_u16, StaticArray[0xaa_u8, 0xf5_u8, 0x37_u8, 0xbf_u8, 0x9e_u8, 0xbf_u8, 0x5e_u8, 0x29_u8])
    def query_interface(this : IEnumPluggableTerminalClassInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumPluggableTerminalClassInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumPluggableTerminalClassInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumPluggableTerminalClassInfo*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumPluggableTerminalClassInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumPluggableTerminalClassInfo*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumPluggableTerminalClassInfo*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumPluggableSuperclassInfoVtbl,
    query_interface : Proc(IEnumPluggableSuperclassInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumPluggableSuperclassInfo*, UInt32),
    release : Proc(IEnumPluggableSuperclassInfo*, UInt32),
    next__ : Proc(IEnumPluggableSuperclassInfo*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumPluggableSuperclassInfo*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumPluggableSuperclassInfo*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumPluggableSuperclassInfo*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e9586a80-89e6-4cff-931d-478d5751f4c0")]
  record IEnumPluggableSuperclassInfo, lpVtbl : IEnumPluggableSuperclassInfoVtbl* do
    GUID = LibC::GUID.new(0xe9586a80_u32, 0x89e6_u16, 0x4cff_u16, StaticArray[0x93_u8, 0x1d_u8, 0x47_u8, 0x8d_u8, 0x57_u8, 0x51_u8, 0xf4_u8, 0xc0_u8])
    def query_interface(this : IEnumPluggableSuperclassInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumPluggableSuperclassInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumPluggableSuperclassInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumPluggableSuperclassInfo*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumPluggableSuperclassInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumPluggableSuperclassInfo*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumPluggableSuperclassInfo*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITPhoneEventVtbl,
    query_interface : Proc(ITPhoneEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPhoneEvent*, UInt32),
    release : Proc(ITPhoneEvent*, UInt32),
    get_type_info_count : Proc(ITPhoneEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITPhoneEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITPhoneEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITPhoneEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Phone : Proc(ITPhoneEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITPhoneEvent*, Win32cr::Devices::Tapi::PHONE_EVENT*, Win32cr::Foundation::HRESULT),
    get_ButtonState : Proc(ITPhoneEvent*, Win32cr::Devices::Tapi::PHONE_BUTTON_STATE*, Win32cr::Foundation::HRESULT),
    get_HookSwitchState : Proc(ITPhoneEvent*, Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_STATE*, Win32cr::Foundation::HRESULT),
    get_HookSwitchDevice : Proc(ITPhoneEvent*, Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_DEVICE*, Win32cr::Foundation::HRESULT),
    get_RingMode : Proc(ITPhoneEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_ButtonLampId : Proc(ITPhoneEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberGathered : Proc(ITPhoneEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITPhoneEvent*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8f942dd8-64ed-4aaf-a77d-b23db0837ead")]
  record ITPhoneEvent, lpVtbl : ITPhoneEventVtbl* do
    GUID = LibC::GUID.new(0x8f942dd8_u32, 0x64ed_u16, 0x4aaf_u16, StaticArray[0xa7_u8, 0x7d_u8, 0xb2_u8, 0x3d_u8, 0xb0_u8, 0x83_u8, 0x7e_u8, 0xad_u8])
    def query_interface(this : ITPhoneEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPhoneEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPhoneEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITPhoneEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITPhoneEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITPhoneEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITPhoneEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Phone(this : ITPhoneEvent*, ppPhone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Phone.call(this, ppPhone)
    end
    def get_Event(this : ITPhoneEvent*, pEvent : Win32cr::Devices::Tapi::PHONE_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end
    def get_ButtonState(this : ITPhoneEvent*, pState : Win32cr::Devices::Tapi::PHONE_BUTTON_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonState.call(this, pState)
    end
    def get_HookSwitchState(this : ITPhoneEvent*, pState : Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HookSwitchState.call(this, pState)
    end
    def get_HookSwitchDevice(this : ITPhoneEvent*, pDevice : Win32cr::Devices::Tapi::PHONE_HOOK_SWITCH_DEVICE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HookSwitchDevice.call(this, pDevice)
    end
    def get_RingMode(this : ITPhoneEvent*, plRingMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RingMode.call(this, plRingMode)
    end
    def get_ButtonLampId(this : ITPhoneEvent*, plButtonLampId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonLampId.call(this, plButtonLampId)
    end
    def get_NumberGathered(this : ITPhoneEvent*, ppNumber : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberGathered.call(this, ppNumber)
    end
    def get_Call(this : ITPhoneEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end

  end

  @[Extern]
  record ITCallStateEventVtbl,
    query_interface : Proc(ITCallStateEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallStateEvent*, UInt32),
    release : Proc(ITCallStateEvent*, UInt32),
    get_type_info_count : Proc(ITCallStateEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallStateEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallStateEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallStateEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITCallStateEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITCallStateEvent*, Win32cr::Devices::Tapi::CALL_STATE*, Win32cr::Foundation::HRESULT),
    get_Cause : Proc(ITCallStateEvent*, Win32cr::Devices::Tapi::CALL_STATE_EVENT_CAUSE*, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITCallStateEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("62f47097-95c9-11d0-835d-00aa003ccabd")]
  record ITCallStateEvent, lpVtbl : ITCallStateEventVtbl* do
    GUID = LibC::GUID.new(0x62f47097_u32, 0x95c9_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x5d_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITCallStateEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallStateEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallStateEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallStateEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallStateEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallStateEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallStateEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITCallStateEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end
    def get_State(this : ITCallStateEvent*, pCallState : Win32cr::Devices::Tapi::CALL_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pCallState)
    end
    def get_Cause(this : ITCallStateEvent*, pCEC : Win32cr::Devices::Tapi::CALL_STATE_EVENT_CAUSE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Cause.call(this, pCEC)
    end
    def get_CallbackInstance(this : ITCallStateEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITPhoneDeviceSpecificEventVtbl,
    query_interface : Proc(ITPhoneDeviceSpecificEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPhoneDeviceSpecificEvent*, UInt32),
    release : Proc(ITPhoneDeviceSpecificEvent*, UInt32),
    get_type_info_count : Proc(ITPhoneDeviceSpecificEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITPhoneDeviceSpecificEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITPhoneDeviceSpecificEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITPhoneDeviceSpecificEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Phone : Proc(ITPhoneDeviceSpecificEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_lParam1 : Proc(ITPhoneDeviceSpecificEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_lParam2 : Proc(ITPhoneDeviceSpecificEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_lParam3 : Proc(ITPhoneDeviceSpecificEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("63ffb2a6-872b-4cd3-a501-326e8fb40af7")]
  record ITPhoneDeviceSpecificEvent, lpVtbl : ITPhoneDeviceSpecificEventVtbl* do
    GUID = LibC::GUID.new(0x63ffb2a6_u32, 0x872b_u16, 0x4cd3_u16, StaticArray[0xa5_u8, 0x1_u8, 0x32_u8, 0x6e_u8, 0x8f_u8, 0xb4_u8, 0xa_u8, 0xf7_u8])
    def query_interface(this : ITPhoneDeviceSpecificEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPhoneDeviceSpecificEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPhoneDeviceSpecificEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITPhoneDeviceSpecificEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITPhoneDeviceSpecificEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITPhoneDeviceSpecificEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITPhoneDeviceSpecificEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Phone(this : ITPhoneDeviceSpecificEvent*, ppPhone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Phone.call(this, ppPhone)
    end
    def get_lParam1(this : ITPhoneDeviceSpecificEvent*, pParam1 : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lParam1.call(this, pParam1)
    end
    def get_lParam2(this : ITPhoneDeviceSpecificEvent*, pParam2 : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lParam2.call(this, pParam2)
    end
    def get_lParam3(this : ITPhoneDeviceSpecificEvent*, pParam3 : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lParam3.call(this, pParam3)
    end

  end

  @[Extern]
  record ITCallMediaEventVtbl,
    query_interface : Proc(ITCallMediaEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallMediaEvent*, UInt32),
    release : Proc(ITCallMediaEvent*, UInt32),
    get_type_info_count : Proc(ITCallMediaEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallMediaEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallMediaEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallMediaEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITCallMediaEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITCallMediaEvent*, Win32cr::Devices::Tapi::CALL_MEDIA_EVENT*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(ITCallMediaEvent*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_Terminal : Proc(ITCallMediaEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Stream : Proc(ITCallMediaEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Cause : Proc(ITCallMediaEvent*, Win32cr::Devices::Tapi::CALL_MEDIA_EVENT_CAUSE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ff36b87f-ec3a-11d0-8ee4-00c04fb6809f")]
  record ITCallMediaEvent, lpVtbl : ITCallMediaEventVtbl* do
    GUID = LibC::GUID.new(0xff36b87f_u32, 0xec3a_u16, 0x11d0_u16, StaticArray[0x8e_u8, 0xe4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITCallMediaEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallMediaEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallMediaEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallMediaEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallMediaEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallMediaEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallMediaEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITCallMediaEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end
    def get_Event(this : ITCallMediaEvent*, pCallMediaEvent : Win32cr::Devices::Tapi::CALL_MEDIA_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pCallMediaEvent)
    end
    def get_Error(this : ITCallMediaEvent*, phrError : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, phrError)
    end
    def get_Terminal(this : ITCallMediaEvent*, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminal.call(this, ppTerminal)
    end
    def get_Stream(this : ITCallMediaEvent*, ppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Stream.call(this, ppStream)
    end
    def get_Cause(this : ITCallMediaEvent*, pCause : Win32cr::Devices::Tapi::CALL_MEDIA_EVENT_CAUSE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Cause.call(this, pCause)
    end

  end

  @[Extern]
  record ITDigitDetectionEventVtbl,
    query_interface : Proc(ITDigitDetectionEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDigitDetectionEvent*, UInt32),
    release : Proc(ITDigitDetectionEvent*, UInt32),
    get_type_info_count : Proc(ITDigitDetectionEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDigitDetectionEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDigitDetectionEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDigitDetectionEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITDigitDetectionEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Digit : Proc(ITDigitDetectionEvent*, UInt8*, Win32cr::Foundation::HRESULT),
    get_DigitMode : Proc(ITDigitDetectionEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_TickCount : Proc(ITDigitDetectionEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITDigitDetectionEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("80d3bfac-57d9-11d2-a04a-00c04fb6809f")]
  record ITDigitDetectionEvent, lpVtbl : ITDigitDetectionEventVtbl* do
    GUID = LibC::GUID.new(0x80d3bfac_u32, 0x57d9_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x4a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITDigitDetectionEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDigitDetectionEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDigitDetectionEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDigitDetectionEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDigitDetectionEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDigitDetectionEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDigitDetectionEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITDigitDetectionEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end
    def get_Digit(this : ITDigitDetectionEvent*, pucDigit : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Digit.call(this, pucDigit)
    end
    def get_DigitMode(this : ITDigitDetectionEvent*, pDigitMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DigitMode.call(this, pDigitMode)
    end
    def get_TickCount(this : ITDigitDetectionEvent*, plTickCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TickCount.call(this, plTickCount)
    end
    def get_CallbackInstance(this : ITDigitDetectionEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITDigitGenerationEventVtbl,
    query_interface : Proc(ITDigitGenerationEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDigitGenerationEvent*, UInt32),
    release : Proc(ITDigitGenerationEvent*, UInt32),
    get_type_info_count : Proc(ITDigitGenerationEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDigitGenerationEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDigitGenerationEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDigitGenerationEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITDigitGenerationEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_GenerationTermination : Proc(ITDigitGenerationEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_TickCount : Proc(ITDigitGenerationEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITDigitGenerationEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("80d3bfad-57d9-11d2-a04a-00c04fb6809f")]
  record ITDigitGenerationEvent, lpVtbl : ITDigitGenerationEventVtbl* do
    GUID = LibC::GUID.new(0x80d3bfad_u32, 0x57d9_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x4a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITDigitGenerationEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDigitGenerationEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDigitGenerationEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDigitGenerationEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDigitGenerationEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDigitGenerationEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDigitGenerationEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITDigitGenerationEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end
    def get_GenerationTermination(this : ITDigitGenerationEvent*, plGenerationTermination : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GenerationTermination.call(this, plGenerationTermination)
    end
    def get_TickCount(this : ITDigitGenerationEvent*, plTickCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TickCount.call(this, plTickCount)
    end
    def get_CallbackInstance(this : ITDigitGenerationEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITDigitsGatheredEventVtbl,
    query_interface : Proc(ITDigitsGatheredEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDigitsGatheredEvent*, UInt32),
    release : Proc(ITDigitsGatheredEvent*, UInt32),
    get_type_info_count : Proc(ITDigitsGatheredEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDigitsGatheredEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDigitsGatheredEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDigitsGatheredEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITDigitsGatheredEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Digits : Proc(ITDigitsGatheredEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_GatherTermination : Proc(ITDigitsGatheredEvent*, Win32cr::Devices::Tapi::TAPI_GATHERTERM*, Win32cr::Foundation::HRESULT),
    get_TickCount : Proc(ITDigitsGatheredEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITDigitsGatheredEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e52ec4c1-cba3-441a-9e6a-93cb909e9724")]
  record ITDigitsGatheredEvent, lpVtbl : ITDigitsGatheredEventVtbl* do
    GUID = LibC::GUID.new(0xe52ec4c1_u32, 0xcba3_u16, 0x441a_u16, StaticArray[0x9e_u8, 0x6a_u8, 0x93_u8, 0xcb_u8, 0x90_u8, 0x9e_u8, 0x97_u8, 0x24_u8])
    def query_interface(this : ITDigitsGatheredEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDigitsGatheredEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDigitsGatheredEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDigitsGatheredEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDigitsGatheredEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDigitsGatheredEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDigitsGatheredEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITDigitsGatheredEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end
    def get_Digits(this : ITDigitsGatheredEvent*, ppDigits : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Digits.call(this, ppDigits)
    end
    def get_GatherTermination(this : ITDigitsGatheredEvent*, pGatherTermination : Win32cr::Devices::Tapi::TAPI_GATHERTERM*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GatherTermination.call(this, pGatherTermination)
    end
    def get_TickCount(this : ITDigitsGatheredEvent*, plTickCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TickCount.call(this, plTickCount)
    end
    def get_CallbackInstance(this : ITDigitsGatheredEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITToneDetectionEventVtbl,
    query_interface : Proc(ITToneDetectionEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITToneDetectionEvent*, UInt32),
    release : Proc(ITToneDetectionEvent*, UInt32),
    get_type_info_count : Proc(ITToneDetectionEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITToneDetectionEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITToneDetectionEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITToneDetectionEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITToneDetectionEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_AppSpecific : Proc(ITToneDetectionEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_TickCount : Proc(ITToneDetectionEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITToneDetectionEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("407e0faf-d047-4753-b0c6-8e060373fecd")]
  record ITToneDetectionEvent, lpVtbl : ITToneDetectionEventVtbl* do
    GUID = LibC::GUID.new(0x407e0faf_u32, 0xd047_u16, 0x4753_u16, StaticArray[0xb0_u8, 0xc6_u8, 0x8e_u8, 0x6_u8, 0x3_u8, 0x73_u8, 0xfe_u8, 0xcd_u8])
    def query_interface(this : ITToneDetectionEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITToneDetectionEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITToneDetectionEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITToneDetectionEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITToneDetectionEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITToneDetectionEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITToneDetectionEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITToneDetectionEvent*, ppCallInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCallInfo)
    end
    def get_AppSpecific(this : ITToneDetectionEvent*, plAppSpecific : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppSpecific.call(this, plAppSpecific)
    end
    def get_TickCount(this : ITToneDetectionEvent*, plTickCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TickCount.call(this, plTickCount)
    end
    def get_CallbackInstance(this : ITToneDetectionEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITTAPIObjectEventVtbl,
    query_interface : Proc(ITTAPIObjectEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTAPIObjectEvent*, UInt32),
    release : Proc(ITTAPIObjectEvent*, UInt32),
    get_type_info_count : Proc(ITTAPIObjectEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTAPIObjectEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTAPIObjectEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTAPIObjectEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TAPIObject : Proc(ITTAPIObjectEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITTAPIObjectEvent*, Win32cr::Devices::Tapi::TAPIOBJECT_EVENT*, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITTAPIObjectEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITTAPIObjectEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f4854d48-937a-11d1-bb58-00c04fb6809f")]
  record ITTAPIObjectEvent, lpVtbl : ITTAPIObjectEventVtbl* do
    GUID = LibC::GUID.new(0xf4854d48_u32, 0x937a_u16, 0x11d1_u16, StaticArray[0xbb_u8, 0x58_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITTAPIObjectEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTAPIObjectEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTAPIObjectEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTAPIObjectEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTAPIObjectEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTAPIObjectEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTAPIObjectEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TAPIObject(this : ITTAPIObjectEvent*, ppTAPIObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TAPIObject.call(this, ppTAPIObject)
    end
    def get_Event(this : ITTAPIObjectEvent*, pEvent : Win32cr::Devices::Tapi::TAPIOBJECT_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end
    def get_Address(this : ITTAPIObjectEvent*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_CallbackInstance(this : ITTAPIObjectEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITTAPIObjectEvent2Vtbl,
    query_interface : Proc(ITTAPIObjectEvent2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTAPIObjectEvent2*, UInt32),
    release : Proc(ITTAPIObjectEvent2*, UInt32),
    get_type_info_count : Proc(ITTAPIObjectEvent2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTAPIObjectEvent2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTAPIObjectEvent2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTAPIObjectEvent2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TAPIObject : Proc(ITTAPIObjectEvent2*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITTAPIObjectEvent2*, Win32cr::Devices::Tapi::TAPIOBJECT_EVENT*, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITTAPIObjectEvent2*, Void**, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITTAPIObjectEvent2*, Int32*, Win32cr::Foundation::HRESULT),
    get_Phone : Proc(ITTAPIObjectEvent2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("359dda6e-68ce-4383-bf0b-169133c41b46")]
  record ITTAPIObjectEvent2, lpVtbl : ITTAPIObjectEvent2Vtbl* do
    GUID = LibC::GUID.new(0x359dda6e_u32, 0x68ce_u16, 0x4383_u16, StaticArray[0xbf_u8, 0xb_u8, 0x16_u8, 0x91_u8, 0x33_u8, 0xc4_u8, 0x1b_u8, 0x46_u8])
    def query_interface(this : ITTAPIObjectEvent2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTAPIObjectEvent2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTAPIObjectEvent2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTAPIObjectEvent2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTAPIObjectEvent2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTAPIObjectEvent2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTAPIObjectEvent2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TAPIObject(this : ITTAPIObjectEvent2*, ppTAPIObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TAPIObject.call(this, ppTAPIObject)
    end
    def get_Event(this : ITTAPIObjectEvent2*, pEvent : Win32cr::Devices::Tapi::TAPIOBJECT_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end
    def get_Address(this : ITTAPIObjectEvent2*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_CallbackInstance(this : ITTAPIObjectEvent2*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end
    def get_Phone(this : ITTAPIObjectEvent2*, ppPhone : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Phone.call(this, ppPhone)
    end

  end

  @[Extern]
  record ITTAPIEventNotificationVtbl,
    query_interface : Proc(ITTAPIEventNotification*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTAPIEventNotification*, UInt32),
    release : Proc(ITTAPIEventNotification*, UInt32),
    event : Proc(ITTAPIEventNotification*, Win32cr::Devices::Tapi::TAPI_EVENT, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("eddb9426-3b91-11d1-8f30-00c04fb6809f")]
  record ITTAPIEventNotification, lpVtbl : ITTAPIEventNotificationVtbl* do
    GUID = LibC::GUID.new(0xeddb9426_u32, 0x3b91_u16, 0x11d1_u16, StaticArray[0x8f_u8, 0x30_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITTAPIEventNotification*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTAPIEventNotification*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTAPIEventNotification*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def event(this : ITTAPIEventNotification*, tapi_event : Win32cr::Devices::Tapi::TAPI_EVENT, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.event.call(this, tapi_event, pEvent)
    end

  end

  @[Extern]
  record ITCallHubEventVtbl,
    query_interface : Proc(ITCallHubEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallHubEvent*, UInt32),
    release : Proc(ITCallHubEvent*, UInt32),
    get_type_info_count : Proc(ITCallHubEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallHubEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallHubEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallHubEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITCallHubEvent*, Win32cr::Devices::Tapi::CALLHUB_EVENT*, Win32cr::Foundation::HRESULT),
    get_CallHub : Proc(ITCallHubEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITCallHubEvent*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a3c15451-5b92-11d1-8f4e-00c04fb6809f")]
  record ITCallHubEvent, lpVtbl : ITCallHubEventVtbl* do
    GUID = LibC::GUID.new(0xa3c15451_u32, 0x5b92_u16, 0x11d1_u16, StaticArray[0x8f_u8, 0x4e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITCallHubEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallHubEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallHubEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallHubEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallHubEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallHubEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallHubEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Event(this : ITCallHubEvent*, pEvent : Win32cr::Devices::Tapi::CALLHUB_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end
    def get_CallHub(this : ITCallHubEvent*, ppCallHub : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallHub.call(this, ppCallHub)
    end
    def get_Call(this : ITCallHubEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end

  end

  @[Extern]
  record ITAddressEventVtbl,
    query_interface : Proc(ITAddressEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAddressEvent*, UInt32),
    release : Proc(ITAddressEvent*, UInt32),
    get_type_info_count : Proc(ITAddressEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAddressEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAddressEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAddressEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITAddressEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITAddressEvent*, Win32cr::Devices::Tapi::ADDRESS_EVENT*, Win32cr::Foundation::HRESULT),
    get_Terminal : Proc(ITAddressEvent*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("831ce2d1-83b5-11d1-bb5c-00c04fb6809f")]
  record ITAddressEvent, lpVtbl : ITAddressEventVtbl* do
    GUID = LibC::GUID.new(0x831ce2d1_u32, 0x83b5_u16, 0x11d1_u16, StaticArray[0xbb_u8, 0x5c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITAddressEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAddressEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAddressEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAddressEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAddressEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAddressEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAddressEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Address(this : ITAddressEvent*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_Event(this : ITAddressEvent*, pEvent : Win32cr::Devices::Tapi::ADDRESS_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end
    def get_Terminal(this : ITAddressEvent*, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminal.call(this, ppTerminal)
    end

  end

  @[Extern]
  record ITAddressDeviceSpecificEventVtbl,
    query_interface : Proc(ITAddressDeviceSpecificEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAddressDeviceSpecificEvent*, UInt32),
    release : Proc(ITAddressDeviceSpecificEvent*, UInt32),
    get_type_info_count : Proc(ITAddressDeviceSpecificEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAddressDeviceSpecificEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAddressDeviceSpecificEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAddressDeviceSpecificEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITAddressDeviceSpecificEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITAddressDeviceSpecificEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_lParam1 : Proc(ITAddressDeviceSpecificEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_lParam2 : Proc(ITAddressDeviceSpecificEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_lParam3 : Proc(ITAddressDeviceSpecificEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3acb216b-40bd-487a-8672-5ce77bd7e3a3")]
  record ITAddressDeviceSpecificEvent, lpVtbl : ITAddressDeviceSpecificEventVtbl* do
    GUID = LibC::GUID.new(0x3acb216b_u32, 0x40bd_u16, 0x487a_u16, StaticArray[0x86_u8, 0x72_u8, 0x5c_u8, 0xe7_u8, 0x7b_u8, 0xd7_u8, 0xe3_u8, 0xa3_u8])
    def query_interface(this : ITAddressDeviceSpecificEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAddressDeviceSpecificEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAddressDeviceSpecificEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAddressDeviceSpecificEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAddressDeviceSpecificEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAddressDeviceSpecificEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAddressDeviceSpecificEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Address(this : ITAddressDeviceSpecificEvent*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_Call(this : ITAddressDeviceSpecificEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_lParam1(this : ITAddressDeviceSpecificEvent*, pParam1 : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lParam1.call(this, pParam1)
    end
    def get_lParam2(this : ITAddressDeviceSpecificEvent*, pParam2 : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lParam2.call(this, pParam2)
    end
    def get_lParam3(this : ITAddressDeviceSpecificEvent*, pParam3 : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lParam3.call(this, pParam3)
    end

  end

  @[Extern]
  record ITFileTerminalEventVtbl,
    query_interface : Proc(ITFileTerminalEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITFileTerminalEvent*, UInt32),
    release : Proc(ITFileTerminalEvent*, UInt32),
    get_type_info_count : Proc(ITFileTerminalEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITFileTerminalEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITFileTerminalEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITFileTerminalEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Terminal : Proc(ITFileTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Track : Proc(ITFileTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITFileTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITFileTerminalEvent*, Win32cr::Devices::Tapi::TERMINAL_MEDIA_STATE*, Win32cr::Foundation::HRESULT),
    get_Cause : Proc(ITFileTerminalEvent*, Win32cr::Devices::Tapi::FT_STATE_EVENT_CAUSE*, Win32cr::Foundation::HRESULT),
    get_Error : Proc(ITFileTerminalEvent*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e4a7fbac-8c17-4427-9f55-9f589ac8af00")]
  record ITFileTerminalEvent, lpVtbl : ITFileTerminalEventVtbl* do
    GUID = LibC::GUID.new(0xe4a7fbac_u32, 0x8c17_u16, 0x4427_u16, StaticArray[0x9f_u8, 0x55_u8, 0x9f_u8, 0x58_u8, 0x9a_u8, 0xc8_u8, 0xaf_u8, 0x0_u8])
    def query_interface(this : ITFileTerminalEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITFileTerminalEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITFileTerminalEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITFileTerminalEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITFileTerminalEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITFileTerminalEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITFileTerminalEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Terminal(this : ITFileTerminalEvent*, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminal.call(this, ppTerminal)
    end
    def get_Track(this : ITFileTerminalEvent*, ppTrackTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Track.call(this, ppTrackTerminal)
    end
    def get_Call(this : ITFileTerminalEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_State(this : ITFileTerminalEvent*, pState : Win32cr::Devices::Tapi::TERMINAL_MEDIA_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pState)
    end
    def get_Cause(this : ITFileTerminalEvent*, pCause : Win32cr::Devices::Tapi::FT_STATE_EVENT_CAUSE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Cause.call(this, pCause)
    end
    def get_Error(this : ITFileTerminalEvent*, phrErrorCode : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, phrErrorCode)
    end

  end

  @[Extern]
  record ITTTSTerminalEventVtbl,
    query_interface : Proc(ITTTSTerminalEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTTSTerminalEvent*, UInt32),
    release : Proc(ITTTSTerminalEvent*, UInt32),
    get_type_info_count : Proc(ITTTSTerminalEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTTSTerminalEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTTSTerminalEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTTSTerminalEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Terminal : Proc(ITTTSTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITTTSTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Error : Proc(ITTTSTerminalEvent*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d964788f-95a5-461d-ab0c-b9900a6c2713")]
  record ITTTSTerminalEvent, lpVtbl : ITTTSTerminalEventVtbl* do
    GUID = LibC::GUID.new(0xd964788f_u32, 0x95a5_u16, 0x461d_u16, StaticArray[0xab_u8, 0xc_u8, 0xb9_u8, 0x90_u8, 0xa_u8, 0x6c_u8, 0x27_u8, 0x13_u8])
    def query_interface(this : ITTTSTerminalEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTTSTerminalEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTTSTerminalEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTTSTerminalEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTTSTerminalEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTTSTerminalEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTTSTerminalEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Terminal(this : ITTTSTerminalEvent*, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminal.call(this, ppTerminal)
    end
    def get_Call(this : ITTTSTerminalEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_Error(this : ITTTSTerminalEvent*, phrErrorCode : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, phrErrorCode)
    end

  end

  @[Extern]
  record ITASRTerminalEventVtbl,
    query_interface : Proc(ITASRTerminalEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITASRTerminalEvent*, UInt32),
    release : Proc(ITASRTerminalEvent*, UInt32),
    get_type_info_count : Proc(ITASRTerminalEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITASRTerminalEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITASRTerminalEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITASRTerminalEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Terminal : Proc(ITASRTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITASRTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Error : Proc(ITASRTerminalEvent*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee016a02-4fa9-467c-933f-5a15b12377d7")]
  record ITASRTerminalEvent, lpVtbl : ITASRTerminalEventVtbl* do
    GUID = LibC::GUID.new(0xee016a02_u32, 0x4fa9_u16, 0x467c_u16, StaticArray[0x93_u8, 0x3f_u8, 0x5a_u8, 0x15_u8, 0xb1_u8, 0x23_u8, 0x77_u8, 0xd7_u8])
    def query_interface(this : ITASRTerminalEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITASRTerminalEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITASRTerminalEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITASRTerminalEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITASRTerminalEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITASRTerminalEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITASRTerminalEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Terminal(this : ITASRTerminalEvent*, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminal.call(this, ppTerminal)
    end
    def get_Call(this : ITASRTerminalEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_Error(this : ITASRTerminalEvent*, phrErrorCode : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, phrErrorCode)
    end

  end

  @[Extern]
  record ITToneTerminalEventVtbl,
    query_interface : Proc(ITToneTerminalEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITToneTerminalEvent*, UInt32),
    release : Proc(ITToneTerminalEvent*, UInt32),
    get_type_info_count : Proc(ITToneTerminalEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITToneTerminalEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITToneTerminalEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITToneTerminalEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Terminal : Proc(ITToneTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITToneTerminalEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Error : Proc(ITToneTerminalEvent*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e6f56009-611f-4945-bbd2-2d0ce5612056")]
  record ITToneTerminalEvent, lpVtbl : ITToneTerminalEventVtbl* do
    GUID = LibC::GUID.new(0xe6f56009_u32, 0x611f_u16, 0x4945_u16, StaticArray[0xbb_u8, 0xd2_u8, 0x2d_u8, 0xc_u8, 0xe5_u8, 0x61_u8, 0x20_u8, 0x56_u8])
    def query_interface(this : ITToneTerminalEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITToneTerminalEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITToneTerminalEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITToneTerminalEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITToneTerminalEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITToneTerminalEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITToneTerminalEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Terminal(this : ITToneTerminalEvent*, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminal.call(this, ppTerminal)
    end
    def get_Call(this : ITToneTerminalEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_Error(this : ITToneTerminalEvent*, phrErrorCode : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Error.call(this, phrErrorCode)
    end

  end

  @[Extern]
  record ITQOSEventVtbl,
    query_interface : Proc(ITQOSEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITQOSEvent*, UInt32),
    release : Proc(ITQOSEvent*, UInt32),
    get_type_info_count : Proc(ITQOSEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITQOSEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITQOSEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITQOSEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITQOSEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITQOSEvent*, Win32cr::Devices::Tapi::QOS_EVENT*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(ITQOSEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cfa3357c-ad77-11d1-bb68-00c04fb6809f")]
  record ITQOSEvent, lpVtbl : ITQOSEventVtbl* do
    GUID = LibC::GUID.new(0xcfa3357c_u32, 0xad77_u16, 0x11d1_u16, StaticArray[0xbb_u8, 0x68_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITQOSEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITQOSEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITQOSEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITQOSEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITQOSEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITQOSEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITQOSEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITQOSEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_Event(this : ITQOSEvent*, pQosEvent : Win32cr::Devices::Tapi::QOS_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pQosEvent)
    end
    def get_MediaType(this : ITQOSEvent*, plMediaType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, plMediaType)
    end

  end

  @[Extern]
  record ITCallInfoChangeEventVtbl,
    query_interface : Proc(ITCallInfoChangeEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallInfoChangeEvent*, UInt32),
    release : Proc(ITCallInfoChangeEvent*, UInt32),
    get_type_info_count : Proc(ITCallInfoChangeEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallInfoChangeEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallInfoChangeEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallInfoChangeEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITCallInfoChangeEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Cause : Proc(ITCallInfoChangeEvent*, Win32cr::Devices::Tapi::CALLINFOCHANGE_CAUSE*, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITCallInfoChangeEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5d4b65f9-e51c-11d1-a02f-00c04fb6809f")]
  record ITCallInfoChangeEvent, lpVtbl : ITCallInfoChangeEventVtbl* do
    GUID = LibC::GUID.new(0x5d4b65f9_u32, 0xe51c_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x2f_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITCallInfoChangeEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallInfoChangeEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallInfoChangeEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallInfoChangeEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallInfoChangeEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallInfoChangeEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallInfoChangeEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITCallInfoChangeEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_Cause(this : ITCallInfoChangeEvent*, pCIC : Win32cr::Devices::Tapi::CALLINFOCHANGE_CAUSE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Cause.call(this, pCIC)
    end
    def get_CallbackInstance(this : ITCallInfoChangeEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITRequestVtbl,
    query_interface : Proc(ITRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITRequest*, UInt32),
    release : Proc(ITRequest*, UInt32),
    get_type_info_count : Proc(ITRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    make_call : Proc(ITRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ac48ffdf-f8c4-11d1-a030-00c04fb6809f")]
  record ITRequest, lpVtbl : ITRequestVtbl* do
    GUID = LibC::GUID.new(0xac48ffdf_u32, 0xf8c4_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x30_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def make_call(this : ITRequest*, pDestAddress : Win32cr::Foundation::BSTR, pAppName : Win32cr::Foundation::BSTR, pCalledParty : Win32cr::Foundation::BSTR, pComment : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_call.call(this, pDestAddress, pAppName, pCalledParty, pComment)
    end

  end

  @[Extern]
  record ITRequestEventVtbl,
    query_interface : Proc(ITRequestEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITRequestEvent*, UInt32),
    release : Proc(ITRequestEvent*, UInt32),
    get_type_info_count : Proc(ITRequestEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITRequestEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITRequestEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITRequestEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_RegistrationInstance : Proc(ITRequestEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_RequestMode : Proc(ITRequestEvent*, Int32*, Win32cr::Foundation::HRESULT),
    get_DestAddress : Proc(ITRequestEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_AppName : Proc(ITRequestEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CalledParty : Proc(ITRequestEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Comment : Proc(ITRequestEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ac48ffde-f8c4-11d1-a030-00c04fb6809f")]
  record ITRequestEvent, lpVtbl : ITRequestEventVtbl* do
    GUID = LibC::GUID.new(0xac48ffde_u32, 0xf8c4_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x30_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITRequestEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITRequestEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITRequestEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITRequestEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITRequestEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITRequestEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITRequestEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_RegistrationInstance(this : ITRequestEvent*, plRegistrationInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RegistrationInstance.call(this, plRegistrationInstance)
    end
    def get_RequestMode(this : ITRequestEvent*, plRequestMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestMode.call(this, plRequestMode)
    end
    def get_DestAddress(this : ITRequestEvent*, ppDestAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestAddress.call(this, ppDestAddress)
    end
    def get_AppName(this : ITRequestEvent*, ppAppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AppName.call(this, ppAppName)
    end
    def get_CalledParty(this : ITRequestEvent*, ppCalledParty : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CalledParty.call(this, ppCalledParty)
    end
    def get_Comment(this : ITRequestEvent*, ppComment : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Comment.call(this, ppComment)
    end

  end

  @[Extern]
  record ITCollectionVtbl,
    query_interface : Proc(ITCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCollection*, UInt32),
    release : Proc(ITCollection*, UInt32),
    get_type_info_count : Proc(ITCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ITCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get_Item : Proc(ITCollection*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ITCollection*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5ec5acf2-9c02-11d0-8362-00aa003ccabd")]
  record ITCollection, lpVtbl : ITCollectionVtbl* do
    GUID = LibC::GUID.new(0x5ec5acf2_u32, 0x9c02_u16, 0x11d0_u16, StaticArray[0x83_u8, 0x62_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x3c_u8, 0xca_u8, 0xbd_u8])
    def query_interface(this : ITCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : ITCollection*, lCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, lCount)
    end
    def get_Item(this : ITCollection*, index : Int32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, pVariant)
    end
    def get__NewEnum(this : ITCollection*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppNewEnum)
    end

  end

  @[Extern]
  record ITCollection2Vtbl,
    query_interface : Proc(ITCollection2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCollection2*, UInt32),
    release : Proc(ITCollection2*, UInt32),
    get_type_info_count : Proc(ITCollection2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCollection2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCollection2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCollection2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ITCollection2*, Int32*, Win32cr::Foundation::HRESULT),
    get_Item : Proc(ITCollection2*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ITCollection2*, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(ITCollection2*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    remove : Proc(ITCollection2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e6dddda5-a6d3-48ff-8737-d32fc4d95477")]
  record ITCollection2, lpVtbl : ITCollection2Vtbl* do
    GUID = LibC::GUID.new(0xe6dddda5_u32, 0xa6d3_u16, 0x48ff_u16, StaticArray[0x87_u8, 0x37_u8, 0xd3_u8, 0x2f_u8, 0xc4_u8, 0xd9_u8, 0x54_u8, 0x77_u8])
    def query_interface(this : ITCollection2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCollection2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCollection2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCollection2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCollection2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCollection2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCollection2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : ITCollection2*, lCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, lCount)
    end
    def get_Item(this : ITCollection2*, index : Int32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, pVariant)
    end
    def get__NewEnum(this : ITCollection2*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppNewEnum)
    end
    def add(this : ITCollection2*, index : Int32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, index, pVariant)
    end
    def remove(this : ITCollection2*, index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end

  end

  @[Extern]
  record ITForwardInformationVtbl,
    query_interface : Proc(ITForwardInformation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITForwardInformation*, UInt32),
    release : Proc(ITForwardInformation*, UInt32),
    get_type_info_count : Proc(ITForwardInformation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITForwardInformation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITForwardInformation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITForwardInformation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_NumRingsNoAnswer : Proc(ITForwardInformation*, Int32, Win32cr::Foundation::HRESULT),
    get_NumRingsNoAnswer : Proc(ITForwardInformation*, Int32*, Win32cr::Foundation::HRESULT),
    set_forward_type : Proc(ITForwardInformation*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ForwardTypeDestination : Proc(ITForwardInformation*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ForwardTypeCaller : Proc(ITForwardInformation*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_forward_type : Proc(ITForwardInformation*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    clear : Proc(ITForwardInformation*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("449f659e-88a3-11d1-bb5d-00c04fb6809f")]
  record ITForwardInformation, lpVtbl : ITForwardInformationVtbl* do
    GUID = LibC::GUID.new(0x449f659e_u32, 0x88a3_u16, 0x11d1_u16, StaticArray[0xbb_u8, 0x5d_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITForwardInformation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITForwardInformation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITForwardInformation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITForwardInformation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITForwardInformation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITForwardInformation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITForwardInformation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_NumRingsNoAnswer(this : ITForwardInformation*, lNumRings : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NumRingsNoAnswer.call(this, lNumRings)
    end
    def get_NumRingsNoAnswer(this : ITForwardInformation*, plNumRings : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumRingsNoAnswer.call(this, plNumRings)
    end
    def set_forward_type(this : ITForwardInformation*, forward_type : Int32, pDestAddress : Win32cr::Foundation::BSTR, pCallerAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_forward_type.call(this, forward_type, pDestAddress, pCallerAddress)
    end
    def get_ForwardTypeDestination(this : ITForwardInformation*, forward_type : Int32, ppDestAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForwardTypeDestination.call(this, forward_type, ppDestAddress)
    end
    def get_ForwardTypeCaller(this : ITForwardInformation*, forwardtype : Int32, ppCallerAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForwardTypeCaller.call(this, forwardtype, ppCallerAddress)
    end
    def get_forward_type(this : ITForwardInformation*, forward_type : Int32, ppDestinationAddress : Win32cr::Foundation::BSTR*, ppCallerAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_forward_type.call(this, forward_type, ppDestinationAddress, ppCallerAddress)
    end
    def clear(this : ITForwardInformation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record ITForwardInformation2Vtbl,
    query_interface : Proc(ITForwardInformation2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITForwardInformation2*, UInt32),
    release : Proc(ITForwardInformation2*, UInt32),
    get_type_info_count : Proc(ITForwardInformation2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITForwardInformation2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITForwardInformation2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITForwardInformation2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_NumRingsNoAnswer : Proc(ITForwardInformation2*, Int32, Win32cr::Foundation::HRESULT),
    get_NumRingsNoAnswer : Proc(ITForwardInformation2*, Int32*, Win32cr::Foundation::HRESULT),
    set_forward_type : Proc(ITForwardInformation2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ForwardTypeDestination : Proc(ITForwardInformation2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ForwardTypeCaller : Proc(ITForwardInformation2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_forward_type : Proc(ITForwardInformation2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    clear : Proc(ITForwardInformation2*, Win32cr::Foundation::HRESULT),
    set_forward_type2 : Proc(ITForwardInformation2*, Int32, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    get_forward_type2 : Proc(ITForwardInformation2*, Int32, Win32cr::Foundation::BSTR*, Int32*, Win32cr::Foundation::BSTR*, Int32*, Win32cr::Foundation::HRESULT),
    get_ForwardTypeDestinationAddressType : Proc(ITForwardInformation2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_ForwardTypeCallerAddressType : Proc(ITForwardInformation2*, Int32, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5229b4ed-b260-4382-8e1a-5df3a8a4ccc0")]
  record ITForwardInformation2, lpVtbl : ITForwardInformation2Vtbl* do
    GUID = LibC::GUID.new(0x5229b4ed_u32, 0xb260_u16, 0x4382_u16, StaticArray[0x8e_u8, 0x1a_u8, 0x5d_u8, 0xf3_u8, 0xa8_u8, 0xa4_u8, 0xcc_u8, 0xc0_u8])
    def query_interface(this : ITForwardInformation2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITForwardInformation2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITForwardInformation2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITForwardInformation2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITForwardInformation2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITForwardInformation2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITForwardInformation2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_NumRingsNoAnswer(this : ITForwardInformation2*, lNumRings : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NumRingsNoAnswer.call(this, lNumRings)
    end
    def get_NumRingsNoAnswer(this : ITForwardInformation2*, plNumRings : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumRingsNoAnswer.call(this, plNumRings)
    end
    def set_forward_type(this : ITForwardInformation2*, forward_type : Int32, pDestAddress : Win32cr::Foundation::BSTR, pCallerAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_forward_type.call(this, forward_type, pDestAddress, pCallerAddress)
    end
    def get_ForwardTypeDestination(this : ITForwardInformation2*, forward_type : Int32, ppDestAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForwardTypeDestination.call(this, forward_type, ppDestAddress)
    end
    def get_ForwardTypeCaller(this : ITForwardInformation2*, forwardtype : Int32, ppCallerAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForwardTypeCaller.call(this, forwardtype, ppCallerAddress)
    end
    def get_forward_type(this : ITForwardInformation2*, forward_type : Int32, ppDestinationAddress : Win32cr::Foundation::BSTR*, ppCallerAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_forward_type.call(this, forward_type, ppDestinationAddress, ppCallerAddress)
    end
    def clear(this : ITForwardInformation2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def set_forward_type2(this : ITForwardInformation2*, forward_type : Int32, pDestAddress : Win32cr::Foundation::BSTR, dest_address_type : Int32, pCallerAddress : Win32cr::Foundation::BSTR, caller_address_type : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_forward_type2.call(this, forward_type, pDestAddress, dest_address_type, pCallerAddress, caller_address_type)
    end
    def get_forward_type2(this : ITForwardInformation2*, forward_type : Int32, ppDestinationAddress : Win32cr::Foundation::BSTR*, pDestAddressType : Int32*, ppCallerAddress : Win32cr::Foundation::BSTR*, pCallerAddressType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_forward_type2.call(this, forward_type, ppDestinationAddress, pDestAddressType, ppCallerAddress, pCallerAddressType)
    end
    def get_ForwardTypeDestinationAddressType(this : ITForwardInformation2*, forward_type : Int32, pDestAddressType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForwardTypeDestinationAddressType.call(this, forward_type, pDestAddressType)
    end
    def get_ForwardTypeCallerAddressType(this : ITForwardInformation2*, forwardtype : Int32, pCallerAddressType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForwardTypeCallerAddressType.call(this, forwardtype, pCallerAddressType)
    end

  end

  @[Extern]
  record ITAddressTranslationVtbl,
    query_interface : Proc(ITAddressTranslation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAddressTranslation*, UInt32),
    release : Proc(ITAddressTranslation*, UInt32),
    get_type_info_count : Proc(ITAddressTranslation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAddressTranslation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAddressTranslation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAddressTranslation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    translate_address : Proc(ITAddressTranslation*, Win32cr::Foundation::BSTR, Int32, Int32, Void**, Win32cr::Foundation::HRESULT),
    translate_dialog : Proc(ITAddressTranslation*, LibC::IntPtrT, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    enumerate_locations : Proc(ITAddressTranslation*, Void**, Win32cr::Foundation::HRESULT),
    get_Locations : Proc(ITAddressTranslation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_calling_cards : Proc(ITAddressTranslation*, Void**, Win32cr::Foundation::HRESULT),
    get_CallingCards : Proc(ITAddressTranslation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c4d8f03-8ddb-11d1-a09e-00805fc147d3")]
  record ITAddressTranslation, lpVtbl : ITAddressTranslationVtbl* do
    GUID = LibC::GUID.new(0xc4d8f03_u32, 0x8ddb_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x9e_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAddressTranslation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAddressTranslation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAddressTranslation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAddressTranslation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAddressTranslation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAddressTranslation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAddressTranslation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def translate_address(this : ITAddressTranslation*, pAddressToTranslate : Win32cr::Foundation::BSTR, lCard : Int32, lTranslateOptions : Int32, ppTranslated : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_address.call(this, pAddressToTranslate, lCard, lTranslateOptions, ppTranslated)
    end
    def translate_dialog(this : ITAddressTranslation*, hwndOwner : LibC::IntPtrT, pAddressIn : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_dialog.call(this, hwndOwner, pAddressIn)
    end
    def enumerate_locations(this : ITAddressTranslation*, ppEnumLocation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_locations.call(this, ppEnumLocation)
    end
    def get_Locations(this : ITAddressTranslation*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locations.call(this, pVariant)
    end
    def enumerate_calling_cards(this : ITAddressTranslation*, ppEnumCallingCard : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_calling_cards.call(this, ppEnumCallingCard)
    end
    def get_CallingCards(this : ITAddressTranslation*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallingCards.call(this, pVariant)
    end

  end

  @[Extern]
  record ITAddressTranslationInfoVtbl,
    query_interface : Proc(ITAddressTranslationInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAddressTranslationInfo*, UInt32),
    release : Proc(ITAddressTranslationInfo*, UInt32),
    get_type_info_count : Proc(ITAddressTranslationInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAddressTranslationInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAddressTranslationInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAddressTranslationInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_DialableString : Proc(ITAddressTranslationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DisplayableString : Proc(ITAddressTranslationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CurrentCountryCode : Proc(ITAddressTranslationInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_DestinationCountryCode : Proc(ITAddressTranslationInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_TranslationResults : Proc(ITAddressTranslationInfo*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("afc15945-8d40-11d1-a09e-00805fc147d3")]
  record ITAddressTranslationInfo, lpVtbl : ITAddressTranslationInfoVtbl* do
    GUID = LibC::GUID.new(0xafc15945_u32, 0x8d40_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x9e_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAddressTranslationInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAddressTranslationInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAddressTranslationInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAddressTranslationInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAddressTranslationInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAddressTranslationInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAddressTranslationInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_DialableString(this : ITAddressTranslationInfo*, ppDialableString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DialableString.call(this, ppDialableString)
    end
    def get_DisplayableString(this : ITAddressTranslationInfo*, ppDisplayableString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisplayableString.call(this, ppDisplayableString)
    end
    def get_CurrentCountryCode(this : ITAddressTranslationInfo*, country_code : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentCountryCode.call(this, country_code)
    end
    def get_DestinationCountryCode(this : ITAddressTranslationInfo*, country_code : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationCountryCode.call(this, country_code)
    end
    def get_TranslationResults(this : ITAddressTranslationInfo*, plResults : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TranslationResults.call(this, plResults)
    end

  end

  @[Extern]
  record ITLocationInfoVtbl,
    query_interface : Proc(ITLocationInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITLocationInfo*, UInt32),
    release : Proc(ITLocationInfo*, UInt32),
    get_type_info_count : Proc(ITLocationInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITLocationInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITLocationInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITLocationInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_PermanentLocationID : Proc(ITLocationInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(ITLocationInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_CountryID : Proc(ITLocationInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_Options : Proc(ITLocationInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_PreferredCardID : Proc(ITLocationInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_LocationName : Proc(ITLocationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CityCode : Proc(ITLocationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LocalAccessCode : Proc(ITLocationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LongDistanceAccessCode : Proc(ITLocationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TollPrefixList : Proc(ITLocationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CancelCallWaitingCode : Proc(ITLocationInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c4d8eff-8ddb-11d1-a09e-00805fc147d3")]
  record ITLocationInfo, lpVtbl : ITLocationInfoVtbl* do
    GUID = LibC::GUID.new(0xc4d8eff_u32, 0x8ddb_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x9e_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITLocationInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITLocationInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITLocationInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITLocationInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITLocationInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITLocationInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITLocationInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_PermanentLocationID(this : ITLocationInfo*, plLocationID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PermanentLocationID.call(this, plLocationID)
    end
    def get_CountryCode(this : ITLocationInfo*, plCountryCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, plCountryCode)
    end
    def get_CountryID(this : ITLocationInfo*, plCountryID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryID.call(this, plCountryID)
    end
    def get_Options(this : ITLocationInfo*, plOptions : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Options.call(this, plOptions)
    end
    def get_PreferredCardID(this : ITLocationInfo*, plCardID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredCardID.call(this, plCardID)
    end
    def get_LocationName(this : ITLocationInfo*, ppLocationName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocationName.call(this, ppLocationName)
    end
    def get_CityCode(this : ITLocationInfo*, ppCode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CityCode.call(this, ppCode)
    end
    def get_LocalAccessCode(this : ITLocationInfo*, ppCode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalAccessCode.call(this, ppCode)
    end
    def get_LongDistanceAccessCode(this : ITLocationInfo*, ppCode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LongDistanceAccessCode.call(this, ppCode)
    end
    def get_TollPrefixList(this : ITLocationInfo*, ppTollList : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TollPrefixList.call(this, ppTollList)
    end
    def get_CancelCallWaitingCode(this : ITLocationInfo*, ppCode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CancelCallWaitingCode.call(this, ppCode)
    end

  end

  @[Extern]
  record IEnumLocationVtbl,
    query_interface : Proc(IEnumLocation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumLocation*, UInt32),
    release : Proc(IEnumLocation*, UInt32),
    next__ : Proc(IEnumLocation*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumLocation*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumLocation*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumLocation*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c4d8f01-8ddb-11d1-a09e-00805fc147d3")]
  record IEnumLocation, lpVtbl : IEnumLocationVtbl* do
    GUID = LibC::GUID.new(0xc4d8f01_u32, 0x8ddb_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x9e_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : IEnumLocation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumLocation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumLocation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumLocation*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumLocation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumLocation*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumLocation*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITCallingCardVtbl,
    query_interface : Proc(ITCallingCard*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallingCard*, UInt32),
    release : Proc(ITCallingCard*, UInt32),
    get_type_info_count : Proc(ITCallingCard*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallingCard*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallingCard*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallingCard*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_PermanentCardID : Proc(ITCallingCard*, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberOfDigits : Proc(ITCallingCard*, Int32*, Win32cr::Foundation::HRESULT),
    get_Options : Proc(ITCallingCard*, Int32*, Win32cr::Foundation::HRESULT),
    get_CardName : Proc(ITCallingCard*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_SameAreaDialingRule : Proc(ITCallingCard*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LongDistanceDialingRule : Proc(ITCallingCard*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_InternationalDialingRule : Proc(ITCallingCard*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c4d8f00-8ddb-11d1-a09e-00805fc147d3")]
  record ITCallingCard, lpVtbl : ITCallingCardVtbl* do
    GUID = LibC::GUID.new(0xc4d8f00_u32, 0x8ddb_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x9e_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITCallingCard*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallingCard*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallingCard*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallingCard*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallingCard*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallingCard*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallingCard*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_PermanentCardID(this : ITCallingCard*, plCardID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PermanentCardID.call(this, plCardID)
    end
    def get_NumberOfDigits(this : ITCallingCard*, plDigits : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfDigits.call(this, plDigits)
    end
    def get_Options(this : ITCallingCard*, plOptions : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Options.call(this, plOptions)
    end
    def get_CardName(this : ITCallingCard*, ppCardName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CardName.call(this, ppCardName)
    end
    def get_SameAreaDialingRule(this : ITCallingCard*, ppRule : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SameAreaDialingRule.call(this, ppRule)
    end
    def get_LongDistanceDialingRule(this : ITCallingCard*, ppRule : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LongDistanceDialingRule.call(this, ppRule)
    end
    def get_InternationalDialingRule(this : ITCallingCard*, ppRule : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InternationalDialingRule.call(this, ppRule)
    end

  end

  @[Extern]
  record IEnumCallingCardVtbl,
    query_interface : Proc(IEnumCallingCard*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumCallingCard*, UInt32),
    release : Proc(IEnumCallingCard*, UInt32),
    next__ : Proc(IEnumCallingCard*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumCallingCard*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumCallingCard*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumCallingCard*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c4d8f02-8ddb-11d1-a09e-00805fc147d3")]
  record IEnumCallingCard, lpVtbl : IEnumCallingCardVtbl* do
    GUID = LibC::GUID.new(0xc4d8f02_u32, 0x8ddb_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x9e_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : IEnumCallingCard*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumCallingCard*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumCallingCard*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumCallingCard*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumCallingCard*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumCallingCard*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumCallingCard*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITCallNotificationEventVtbl,
    query_interface : Proc(ITCallNotificationEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITCallNotificationEvent*, UInt32),
    release : Proc(ITCallNotificationEvent*, UInt32),
    get_type_info_count : Proc(ITCallNotificationEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITCallNotificationEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITCallNotificationEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITCallNotificationEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Call : Proc(ITCallNotificationEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITCallNotificationEvent*, Win32cr::Devices::Tapi::CALL_NOTIFICATION_EVENT*, Win32cr::Foundation::HRESULT),
    get_CallbackInstance : Proc(ITCallNotificationEvent*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("895801df-3dd6-11d1-8f30-00c04fb6809f")]
  record ITCallNotificationEvent, lpVtbl : ITCallNotificationEventVtbl* do
    GUID = LibC::GUID.new(0x895801df_u32, 0x3dd6_u16, 0x11d1_u16, StaticArray[0x8f_u8, 0x30_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITCallNotificationEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITCallNotificationEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITCallNotificationEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITCallNotificationEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITCallNotificationEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITCallNotificationEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITCallNotificationEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Call(this : ITCallNotificationEvent*, ppCall : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Call.call(this, ppCall)
    end
    def get_Event(this : ITCallNotificationEvent*, pCallNotificationEvent : Win32cr::Devices::Tapi::CALL_NOTIFICATION_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pCallNotificationEvent)
    end
    def get_CallbackInstance(this : ITCallNotificationEvent*, plCallbackInstance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CallbackInstance.call(this, plCallbackInstance)
    end

  end

  @[Extern]
  record ITDispatchMapperVtbl,
    query_interface : Proc(ITDispatchMapper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDispatchMapper*, UInt32),
    release : Proc(ITDispatchMapper*, UInt32),
    get_type_info_count : Proc(ITDispatchMapper*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDispatchMapper*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDispatchMapper*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDispatchMapper*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    query_dispatch_interface : Proc(ITDispatchMapper*, Win32cr::Foundation::BSTR, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e9225295-c759-11d1-a02b-00c04fb6809f")]
  record ITDispatchMapper, lpVtbl : ITDispatchMapperVtbl* do
    GUID = LibC::GUID.new(0xe9225295_u32, 0xc759_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0x2b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITDispatchMapper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDispatchMapper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDispatchMapper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDispatchMapper*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDispatchMapper*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDispatchMapper*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDispatchMapper*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def query_dispatch_interface(this : ITDispatchMapper*, pIID : Win32cr::Foundation::BSTR, pInterfaceToMap : Void*, ppReturnedInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_dispatch_interface.call(this, pIID, pInterfaceToMap, ppReturnedInterface)
    end

  end

  @[Extern]
  record ITStreamControlVtbl,
    query_interface : Proc(ITStreamControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITStreamControl*, UInt32),
    release : Proc(ITStreamControl*, UInt32),
    get_type_info_count : Proc(ITStreamControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITStreamControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITStreamControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITStreamControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_stream : Proc(ITStreamControl*, Int32, Win32cr::Devices::Tapi::TERMINAL_DIRECTION, Void**, Win32cr::Foundation::HRESULT),
    remove_stream : Proc(ITStreamControl*, Void*, Win32cr::Foundation::HRESULT),
    enumerate_streams : Proc(ITStreamControl*, Void**, Win32cr::Foundation::HRESULT),
    get_Streams : Proc(ITStreamControl*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee3bd604-3868-11d2-a045-00c04fb6809f")]
  record ITStreamControl, lpVtbl : ITStreamControlVtbl* do
    GUID = LibC::GUID.new(0xee3bd604_u32, 0x3868_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITStreamControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITStreamControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITStreamControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITStreamControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITStreamControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITStreamControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITStreamControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_stream(this : ITStreamControl*, lMediaType : Int32, td : Win32cr::Devices::Tapi::TERMINAL_DIRECTION, ppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stream.call(this, lMediaType, td, ppStream)
    end
    def remove_stream(this : ITStreamControl*, pStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream.call(this, pStream)
    end
    def enumerate_streams(this : ITStreamControl*, ppEnumStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_streams.call(this, ppEnumStream)
    end
    def get_Streams(this : ITStreamControl*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Streams.call(this, pVariant)
    end

  end

  @[Extern]
  record ITStreamVtbl,
    query_interface : Proc(ITStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITStream*, UInt32),
    release : Proc(ITStream*, UInt32),
    get_type_info_count : Proc(ITStream*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITStream*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITStream*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITStream*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(ITStream*, Int32*, Win32cr::Foundation::HRESULT),
    get_Direction : Proc(ITStream*, Win32cr::Devices::Tapi::TERMINAL_DIRECTION*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITStream*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    start_stream : Proc(ITStream*, Win32cr::Foundation::HRESULT),
    pause_stream : Proc(ITStream*, Win32cr::Foundation::HRESULT),
    stop_stream : Proc(ITStream*, Win32cr::Foundation::HRESULT),
    select_terminal : Proc(ITStream*, Void*, Win32cr::Foundation::HRESULT),
    unselect_terminal : Proc(ITStream*, Void*, Win32cr::Foundation::HRESULT),
    enumerate_terminals : Proc(ITStream*, Void**, Win32cr::Foundation::HRESULT),
    get_Terminals : Proc(ITStream*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee3bd605-3868-11d2-a045-00c04fb6809f")]
  record ITStream, lpVtbl : ITStreamVtbl* do
    GUID = LibC::GUID.new(0xee3bd605_u32, 0x3868_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITStream*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITStream*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITStream*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITStream*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_MediaType(this : ITStream*, plMediaType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, plMediaType)
    end
    def get_Direction(this : ITStream*, pTD : Win32cr::Devices::Tapi::TERMINAL_DIRECTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Direction.call(this, pTD)
    end
    def get_Name(this : ITStream*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, ppName)
    end
    def start_stream(this : ITStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_stream.call(this)
    end
    def pause_stream(this : ITStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause_stream.call(this)
    end
    def stop_stream(this : ITStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_stream.call(this)
    end
    def select_terminal(this : ITStream*, pTerminal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_terminal.call(this, pTerminal)
    end
    def unselect_terminal(this : ITStream*, pTerminal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unselect_terminal.call(this, pTerminal)
    end
    def enumerate_terminals(this : ITStream*, ppEnumTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_terminals.call(this, ppEnumTerminal)
    end
    def get_Terminals(this : ITStream*, pTerminals : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminals.call(this, pTerminals)
    end

  end

  @[Extern]
  record IEnumStreamVtbl,
    query_interface : Proc(IEnumStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumStream*, UInt32),
    release : Proc(IEnumStream*, UInt32),
    next__ : Proc(IEnumStream*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumStream*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumStream*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumStream*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee3bd606-3868-11d2-a045-00c04fb6809f")]
  record IEnumStream, lpVtbl : IEnumStreamVtbl* do
    GUID = LibC::GUID.new(0xee3bd606_u32, 0x3868_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : IEnumStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumStream*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumStream*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumStream*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITSubStreamControlVtbl,
    query_interface : Proc(ITSubStreamControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITSubStreamControl*, UInt32),
    release : Proc(ITSubStreamControl*, UInt32),
    get_type_info_count : Proc(ITSubStreamControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITSubStreamControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITSubStreamControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITSubStreamControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_sub_stream : Proc(ITSubStreamControl*, Void**, Win32cr::Foundation::HRESULT),
    remove_sub_stream : Proc(ITSubStreamControl*, Void*, Win32cr::Foundation::HRESULT),
    enumerate_sub_streams : Proc(ITSubStreamControl*, Void**, Win32cr::Foundation::HRESULT),
    get_SubStreams : Proc(ITSubStreamControl*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee3bd607-3868-11d2-a045-00c04fb6809f")]
  record ITSubStreamControl, lpVtbl : ITSubStreamControlVtbl* do
    GUID = LibC::GUID.new(0xee3bd607_u32, 0x3868_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITSubStreamControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITSubStreamControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITSubStreamControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITSubStreamControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITSubStreamControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITSubStreamControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITSubStreamControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_sub_stream(this : ITSubStreamControl*, ppSubStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sub_stream.call(this, ppSubStream)
    end
    def remove_sub_stream(this : ITSubStreamControl*, pSubStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_sub_stream.call(this, pSubStream)
    end
    def enumerate_sub_streams(this : ITSubStreamControl*, ppEnumSubStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_sub_streams.call(this, ppEnumSubStream)
    end
    def get_SubStreams(this : ITSubStreamControl*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubStreams.call(this, pVariant)
    end

  end

  @[Extern]
  record ITSubStreamVtbl,
    query_interface : Proc(ITSubStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITSubStream*, UInt32),
    release : Proc(ITSubStream*, UInt32),
    get_type_info_count : Proc(ITSubStream*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITSubStream*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITSubStream*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITSubStream*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    start_sub_stream : Proc(ITSubStream*, Win32cr::Foundation::HRESULT),
    pause_sub_stream : Proc(ITSubStream*, Win32cr::Foundation::HRESULT),
    stop_sub_stream : Proc(ITSubStream*, Win32cr::Foundation::HRESULT),
    select_terminal : Proc(ITSubStream*, Void*, Win32cr::Foundation::HRESULT),
    unselect_terminal : Proc(ITSubStream*, Void*, Win32cr::Foundation::HRESULT),
    enumerate_terminals : Proc(ITSubStream*, Void**, Win32cr::Foundation::HRESULT),
    get_Terminals : Proc(ITSubStream*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Stream : Proc(ITSubStream*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee3bd608-3868-11d2-a045-00c04fb6809f")]
  record ITSubStream, lpVtbl : ITSubStreamVtbl* do
    GUID = LibC::GUID.new(0xee3bd608_u32, 0x3868_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITSubStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITSubStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITSubStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITSubStream*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITSubStream*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITSubStream*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITSubStream*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def start_sub_stream(this : ITSubStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_sub_stream.call(this)
    end
    def pause_sub_stream(this : ITSubStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause_sub_stream.call(this)
    end
    def stop_sub_stream(this : ITSubStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_sub_stream.call(this)
    end
    def select_terminal(this : ITSubStream*, pTerminal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_terminal.call(this, pTerminal)
    end
    def unselect_terminal(this : ITSubStream*, pTerminal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unselect_terminal.call(this, pTerminal)
    end
    def enumerate_terminals(this : ITSubStream*, ppEnumTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_terminals.call(this, ppEnumTerminal)
    end
    def get_Terminals(this : ITSubStream*, pTerminals : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Terminals.call(this, pTerminals)
    end
    def get_Stream(this : ITSubStream*, ppITStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Stream.call(this, ppITStream)
    end

  end

  @[Extern]
  record IEnumSubStreamVtbl,
    query_interface : Proc(IEnumSubStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumSubStream*, UInt32),
    release : Proc(IEnumSubStream*, UInt32),
    next__ : Proc(IEnumSubStream*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumSubStream*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumSubStream*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumSubStream*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee3bd609-3868-11d2-a045-00c04fb6809f")]
  record IEnumSubStream, lpVtbl : IEnumSubStreamVtbl* do
    GUID = LibC::GUID.new(0xee3bd609_u32, 0x3868_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : IEnumSubStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumSubStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumSubStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumSubStream*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumSubStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumSubStream*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumSubStream*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITLegacyWaveSupportVtbl,
    query_interface : Proc(ITLegacyWaveSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITLegacyWaveSupport*, UInt32),
    release : Proc(ITLegacyWaveSupport*, UInt32),
    get_type_info_count : Proc(ITLegacyWaveSupport*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITLegacyWaveSupport*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITLegacyWaveSupport*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITLegacyWaveSupport*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_full_duplex : Proc(ITLegacyWaveSupport*, Win32cr::Devices::Tapi::FULLDUPLEX_SUPPORT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("207823ea-e252-11d2-b77e-0080c7135381")]
  record ITLegacyWaveSupport, lpVtbl : ITLegacyWaveSupportVtbl* do
    GUID = LibC::GUID.new(0x207823ea_u32, 0xe252_u16, 0x11d2_u16, StaticArray[0xb7_u8, 0x7e_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x13_u8, 0x53_u8, 0x81_u8])
    def query_interface(this : ITLegacyWaveSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITLegacyWaveSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITLegacyWaveSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITLegacyWaveSupport*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITLegacyWaveSupport*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITLegacyWaveSupport*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITLegacyWaveSupport*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_full_duplex(this : ITLegacyWaveSupport*, pSupport : Win32cr::Devices::Tapi::FULLDUPLEX_SUPPORT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_full_duplex.call(this, pSupport)
    end

  end

  @[Extern]
  record ITBasicCallControl2Vtbl,
    query_interface : Proc(ITBasicCallControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITBasicCallControl2*, UInt32),
    release : Proc(ITBasicCallControl2*, UInt32),
    get_type_info_count : Proc(ITBasicCallControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITBasicCallControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITBasicCallControl2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITBasicCallControl2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    connect : Proc(ITBasicCallControl2*, Int16, Win32cr::Foundation::HRESULT),
    answer : Proc(ITBasicCallControl2*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(ITBasicCallControl2*, Win32cr::Devices::Tapi::DISCONNECT_CODE, Win32cr::Foundation::HRESULT),
    hold : Proc(ITBasicCallControl2*, Int16, Win32cr::Foundation::HRESULT),
    handoff_direct : Proc(ITBasicCallControl2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    handoff_indirect : Proc(ITBasicCallControl2*, Int32, Win32cr::Foundation::HRESULT),
    conference : Proc(ITBasicCallControl2*, Void*, Int16, Win32cr::Foundation::HRESULT),
    transfer : Proc(ITBasicCallControl2*, Void*, Int16, Win32cr::Foundation::HRESULT),
    blind_transfer : Proc(ITBasicCallControl2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    swap_hold : Proc(ITBasicCallControl2*, Void*, Win32cr::Foundation::HRESULT),
    park_direct : Proc(ITBasicCallControl2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    park_indirect : Proc(ITBasicCallControl2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    unpark : Proc(ITBasicCallControl2*, Win32cr::Foundation::HRESULT),
    set_qos : Proc(ITBasicCallControl2*, Int32, Win32cr::Devices::Tapi::QOS_SERVICE_LEVEL, Win32cr::Foundation::HRESULT),
    pickup : Proc(ITBasicCallControl2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    dial : Proc(ITBasicCallControl2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    finish : Proc(ITBasicCallControl2*, Win32cr::Devices::Tapi::FINISH_MODE, Win32cr::Foundation::HRESULT),
    remove_from_conference : Proc(ITBasicCallControl2*, Win32cr::Foundation::HRESULT),
    request_terminal : Proc(ITBasicCallControl2*, Win32cr::Foundation::BSTR, Int32, Win32cr::Devices::Tapi::TERMINAL_DIRECTION, Void**, Win32cr::Foundation::HRESULT),
    select_terminal_on_call : Proc(ITBasicCallControl2*, Void*, Win32cr::Foundation::HRESULT),
    unselect_terminal_on_call : Proc(ITBasicCallControl2*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("161a4a56-1e99-4b3f-a46a-168f38a5ee4c")]
  record ITBasicCallControl2, lpVtbl : ITBasicCallControl2Vtbl* do
    GUID = LibC::GUID.new(0x161a4a56_u32, 0x1e99_u16, 0x4b3f_u16, StaticArray[0xa4_u8, 0x6a_u8, 0x16_u8, 0x8f_u8, 0x38_u8, 0xa5_u8, 0xee_u8, 0x4c_u8])
    def query_interface(this : ITBasicCallControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITBasicCallControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITBasicCallControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITBasicCallControl2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITBasicCallControl2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITBasicCallControl2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITBasicCallControl2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def connect(this : ITBasicCallControl2*, fSync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, fSync)
    end
    def answer(this : ITBasicCallControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.answer.call(this)
    end
    def disconnect(this : ITBasicCallControl2*, code : Win32cr::Devices::Tapi::DISCONNECT_CODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this, code)
    end
    def hold(this : ITBasicCallControl2*, fHold : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hold.call(this, fHold)
    end
    def handoff_direct(this : ITBasicCallControl2*, pApplicationName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handoff_direct.call(this, pApplicationName)
    end
    def handoff_indirect(this : ITBasicCallControl2*, lMediaType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.handoff_indirect.call(this, lMediaType)
    end
    def conference(this : ITBasicCallControl2*, pCall : Void*, fSync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.conference.call(this, pCall, fSync)
    end
    def transfer(this : ITBasicCallControl2*, pCall : Void*, fSync : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transfer.call(this, pCall, fSync)
    end
    def blind_transfer(this : ITBasicCallControl2*, pDestAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.blind_transfer.call(this, pDestAddress)
    end
    def swap_hold(this : ITBasicCallControl2*, pCall : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.swap_hold.call(this, pCall)
    end
    def park_direct(this : ITBasicCallControl2*, pParkAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.park_direct.call(this, pParkAddress)
    end
    def park_indirect(this : ITBasicCallControl2*, ppNonDirAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.park_indirect.call(this, ppNonDirAddress)
    end
    def unpark(this : ITBasicCallControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unpark.call(this)
    end
    def set_qos(this : ITBasicCallControl2*, lMediaType : Int32, service_level : Win32cr::Devices::Tapi::QOS_SERVICE_LEVEL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_qos.call(this, lMediaType, service_level)
    end
    def pickup(this : ITBasicCallControl2*, pGroupID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pickup.call(this, pGroupID)
    end
    def dial(this : ITBasicCallControl2*, pDestAddress : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dial.call(this, pDestAddress)
    end
    def finish(this : ITBasicCallControl2*, finishMode : Win32cr::Devices::Tapi::FINISH_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish.call(this, finishMode)
    end
    def remove_from_conference(this : ITBasicCallControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_from_conference.call(this)
    end
    def request_terminal(this : ITBasicCallControl2*, bstrTerminalClassGUID : Win32cr::Foundation::BSTR, lMediaType : Int32, direction : Win32cr::Devices::Tapi::TERMINAL_DIRECTION, ppTerminal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_terminal.call(this, bstrTerminalClassGUID, lMediaType, direction, ppTerminal)
    end
    def select_terminal_on_call(this : ITBasicCallControl2*, pTerminal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_terminal_on_call.call(this, pTerminal)
    end
    def unselect_terminal_on_call(this : ITBasicCallControl2*, pTerminal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unselect_terminal_on_call.call(this, pTerminal)
    end

  end

  @[Extern]
  record ITScriptableAudioFormatVtbl,
    query_interface : Proc(ITScriptableAudioFormat*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITScriptableAudioFormat*, UInt32),
    release : Proc(ITScriptableAudioFormat*, UInt32),
    get_type_info_count : Proc(ITScriptableAudioFormat*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITScriptableAudioFormat*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITScriptableAudioFormat*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITScriptableAudioFormat*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Channels : Proc(ITScriptableAudioFormat*, Int32*, Win32cr::Foundation::HRESULT),
    put_Channels : Proc(ITScriptableAudioFormat*, Int32, Win32cr::Foundation::HRESULT),
    get_SamplesPerSec : Proc(ITScriptableAudioFormat*, Int32*, Win32cr::Foundation::HRESULT),
    put_SamplesPerSec : Proc(ITScriptableAudioFormat*, Int32, Win32cr::Foundation::HRESULT),
    get_AvgBytesPerSec : Proc(ITScriptableAudioFormat*, Int32*, Win32cr::Foundation::HRESULT),
    put_AvgBytesPerSec : Proc(ITScriptableAudioFormat*, Int32, Win32cr::Foundation::HRESULT),
    get_BlockAlign : Proc(ITScriptableAudioFormat*, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockAlign : Proc(ITScriptableAudioFormat*, Int32, Win32cr::Foundation::HRESULT),
    get_BitsPerSample : Proc(ITScriptableAudioFormat*, Int32*, Win32cr::Foundation::HRESULT),
    put_BitsPerSample : Proc(ITScriptableAudioFormat*, Int32, Win32cr::Foundation::HRESULT),
    get_FormatTag : Proc(ITScriptableAudioFormat*, Int32*, Win32cr::Foundation::HRESULT),
    put_FormatTag : Proc(ITScriptableAudioFormat*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b87658bd-3c59-4f64-be74-aede3e86a81e")]
  record ITScriptableAudioFormat, lpVtbl : ITScriptableAudioFormatVtbl* do
    GUID = LibC::GUID.new(0xb87658bd_u32, 0x3c59_u16, 0x4f64_u16, StaticArray[0xbe_u8, 0x74_u8, 0xae_u8, 0xde_u8, 0x3e_u8, 0x86_u8, 0xa8_u8, 0x1e_u8])
    def query_interface(this : ITScriptableAudioFormat*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITScriptableAudioFormat*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITScriptableAudioFormat*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITScriptableAudioFormat*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITScriptableAudioFormat*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITScriptableAudioFormat*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITScriptableAudioFormat*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Channels(this : ITScriptableAudioFormat*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channels.call(this, pVal)
    end
    def put_Channels(this : ITScriptableAudioFormat*, nNewVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channels.call(this, nNewVal)
    end
    def get_SamplesPerSec(this : ITScriptableAudioFormat*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SamplesPerSec.call(this, pVal)
    end
    def put_SamplesPerSec(this : ITScriptableAudioFormat*, nNewVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SamplesPerSec.call(this, nNewVal)
    end
    def get_AvgBytesPerSec(this : ITScriptableAudioFormat*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvgBytesPerSec.call(this, pVal)
    end
    def put_AvgBytesPerSec(this : ITScriptableAudioFormat*, nNewVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AvgBytesPerSec.call(this, nNewVal)
    end
    def get_BlockAlign(this : ITScriptableAudioFormat*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockAlign.call(this, pVal)
    end
    def put_BlockAlign(this : ITScriptableAudioFormat*, nNewVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockAlign.call(this, nNewVal)
    end
    def get_BitsPerSample(this : ITScriptableAudioFormat*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BitsPerSample.call(this, pVal)
    end
    def put_BitsPerSample(this : ITScriptableAudioFormat*, nNewVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BitsPerSample.call(this, nNewVal)
    end
    def get_FormatTag(this : ITScriptableAudioFormat*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FormatTag.call(this, pVal)
    end
    def put_FormatTag(this : ITScriptableAudioFormat*, nNewVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FormatTag.call(this, nNewVal)
    end

  end

  @[Extern]
  record ITAgentVtbl,
    query_interface : Proc(ITAgent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAgent*, UInt32),
    release : Proc(ITAgent*, UInt32),
    get_type_info_count : Proc(ITAgent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAgent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAgent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAgent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    enumerate_agent_sessions : Proc(ITAgent*, Void**, Win32cr::Foundation::HRESULT),
    create_session : Proc(ITAgent*, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_session_with_pin : Proc(ITAgent*, Void*, Void*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_ID : Proc(ITAgent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_User : Proc(ITAgent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_State : Proc(ITAgent*, Win32cr::Devices::Tapi::AGENT_STATE, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITAgent*, Win32cr::Devices::Tapi::AGENT_STATE*, Win32cr::Foundation::HRESULT),
    put_MeasurementPeriod : Proc(ITAgent*, Int32, Win32cr::Foundation::HRESULT),
    get_MeasurementPeriod : Proc(ITAgent*, Int32*, Win32cr::Foundation::HRESULT),
    get_OverallCallRate : Proc(ITAgent*, Win32cr::System::Com::CY*, Win32cr::Foundation::HRESULT),
    get_NumberOfACDCalls : Proc(ITAgent*, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberOfIncomingCalls : Proc(ITAgent*, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberOfOutgoingCalls : Proc(ITAgent*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalACDTalkTime : Proc(ITAgent*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalACDCallTime : Proc(ITAgent*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalWrapUpTime : Proc(ITAgent*, Int32*, Win32cr::Foundation::HRESULT),
    get_AgentSessions : Proc(ITAgent*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5770ece5-4b27-11d1-bf80-00805fc147d3")]
  record ITAgent, lpVtbl : ITAgentVtbl* do
    GUID = LibC::GUID.new(0x5770ece5_u32, 0x4b27_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAgent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAgent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAgent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAgent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAgent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAgent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAgent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def enumerate_agent_sessions(this : ITAgent*, ppEnumAgentSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_agent_sessions.call(this, ppEnumAgentSession)
    end
    def create_session(this : ITAgent*, pACDGroup : Void*, pAddress : Void*, ppAgentSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, pACDGroup, pAddress, ppAgentSession)
    end
    def create_session_with_pin(this : ITAgent*, pACDGroup : Void*, pAddress : Void*, pPIN : Win32cr::Foundation::BSTR, ppAgentSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session_with_pin.call(this, pACDGroup, pAddress, pPIN, ppAgentSession)
    end
    def get_ID(this : ITAgent*, ppID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ID.call(this, ppID)
    end
    def get_User(this : ITAgent*, ppUser : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_User.call(this, ppUser)
    end
    def put_State(this : ITAgent*, agent_state : Win32cr::Devices::Tapi::AGENT_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_State.call(this, agent_state)
    end
    def get_State(this : ITAgent*, pAgentState : Win32cr::Devices::Tapi::AGENT_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pAgentState)
    end
    def put_MeasurementPeriod(this : ITAgent*, lPeriod : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MeasurementPeriod.call(this, lPeriod)
    end
    def get_MeasurementPeriod(this : ITAgent*, plPeriod : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MeasurementPeriod.call(this, plPeriod)
    end
    def get_OverallCallRate(this : ITAgent*, pcyCallrate : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OverallCallRate.call(this, pcyCallrate)
    end
    def get_NumberOfACDCalls(this : ITAgent*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfACDCalls.call(this, plCalls)
    end
    def get_NumberOfIncomingCalls(this : ITAgent*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfIncomingCalls.call(this, plCalls)
    end
    def get_NumberOfOutgoingCalls(this : ITAgent*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfOutgoingCalls.call(this, plCalls)
    end
    def get_TotalACDTalkTime(this : ITAgent*, plTalkTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalACDTalkTime.call(this, plTalkTime)
    end
    def get_TotalACDCallTime(this : ITAgent*, plCallTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalACDCallTime.call(this, plCallTime)
    end
    def get_TotalWrapUpTime(this : ITAgent*, plWrapUpTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalWrapUpTime.call(this, plWrapUpTime)
    end
    def get_AgentSessions(this : ITAgent*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AgentSessions.call(this, pVariant)
    end

  end

  @[Extern]
  record ITAgentSessionVtbl,
    query_interface : Proc(ITAgentSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAgentSession*, UInt32),
    release : Proc(ITAgentSession*, UInt32),
    get_type_info_count : Proc(ITAgentSession*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAgentSession*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAgentSession*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAgentSession*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Agent : Proc(ITAgentSession*, Void**, Win32cr::Foundation::HRESULT),
    get_Address : Proc(ITAgentSession*, Void**, Win32cr::Foundation::HRESULT),
    get_ACDGroup : Proc(ITAgentSession*, Void**, Win32cr::Foundation::HRESULT),
    put_State : Proc(ITAgentSession*, Win32cr::Devices::Tapi::AGENT_SESSION_STATE, Win32cr::Foundation::HRESULT),
    get_State : Proc(ITAgentSession*, Win32cr::Devices::Tapi::AGENT_SESSION_STATE*, Win32cr::Foundation::HRESULT),
    get_SessionStartTime : Proc(ITAgentSession*, Float64*, Win32cr::Foundation::HRESULT),
    get_SessionDuration : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberOfCalls : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalTalkTime : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_AverageTalkTime : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalCallTime : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_AverageCallTime : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalWrapUpTime : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_AverageWrapUpTime : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_ACDCallRate : Proc(ITAgentSession*, Win32cr::System::Com::CY*, Win32cr::Foundation::HRESULT),
    get_LongestTimeToAnswer : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT),
    get_AverageTimeToAnswer : Proc(ITAgentSession*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc3147-4bcc-11d1-bf80-00805fc147d3")]
  record ITAgentSession, lpVtbl : ITAgentSessionVtbl* do
    GUID = LibC::GUID.new(0x5afc3147_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAgentSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAgentSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAgentSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAgentSession*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAgentSession*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAgentSession*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAgentSession*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Agent(this : ITAgentSession*, ppAgent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Agent.call(this, ppAgent)
    end
    def get_Address(this : ITAgentSession*, ppAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Address.call(this, ppAddress)
    end
    def get_ACDGroup(this : ITAgentSession*, ppACDGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ACDGroup.call(this, ppACDGroup)
    end
    def put_State(this : ITAgentSession*, session_state : Win32cr::Devices::Tapi::AGENT_SESSION_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_State.call(this, session_state)
    end
    def get_State(this : ITAgentSession*, pSessionState : Win32cr::Devices::Tapi::AGENT_SESSION_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, pSessionState)
    end
    def get_SessionStartTime(this : ITAgentSession*, pdateSessionStart : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SessionStartTime.call(this, pdateSessionStart)
    end
    def get_SessionDuration(this : ITAgentSession*, plDuration : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SessionDuration.call(this, plDuration)
    end
    def get_NumberOfCalls(this : ITAgentSession*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfCalls.call(this, plCalls)
    end
    def get_TotalTalkTime(this : ITAgentSession*, plTalkTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalTalkTime.call(this, plTalkTime)
    end
    def get_AverageTalkTime(this : ITAgentSession*, plTalkTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AverageTalkTime.call(this, plTalkTime)
    end
    def get_TotalCallTime(this : ITAgentSession*, plCallTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalCallTime.call(this, plCallTime)
    end
    def get_AverageCallTime(this : ITAgentSession*, plCallTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AverageCallTime.call(this, plCallTime)
    end
    def get_TotalWrapUpTime(this : ITAgentSession*, plWrapUpTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalWrapUpTime.call(this, plWrapUpTime)
    end
    def get_AverageWrapUpTime(this : ITAgentSession*, plWrapUpTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AverageWrapUpTime.call(this, plWrapUpTime)
    end
    def get_ACDCallRate(this : ITAgentSession*, pcyCallrate : Win32cr::System::Com::CY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ACDCallRate.call(this, pcyCallrate)
    end
    def get_LongestTimeToAnswer(this : ITAgentSession*, plAnswerTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LongestTimeToAnswer.call(this, plAnswerTime)
    end
    def get_AverageTimeToAnswer(this : ITAgentSession*, plAnswerTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AverageTimeToAnswer.call(this, plAnswerTime)
    end

  end

  @[Extern]
  record ITACDGroupVtbl,
    query_interface : Proc(ITACDGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITACDGroup*, UInt32),
    release : Proc(ITACDGroup*, UInt32),
    get_type_info_count : Proc(ITACDGroup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITACDGroup*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITACDGroup*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITACDGroup*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITACDGroup*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    enumerate_queues : Proc(ITACDGroup*, Void**, Win32cr::Foundation::HRESULT),
    get_Queues : Proc(ITACDGroup*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc3148-4bcc-11d1-bf80-00805fc147d3")]
  record ITACDGroup, lpVtbl : ITACDGroupVtbl* do
    GUID = LibC::GUID.new(0x5afc3148_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITACDGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITACDGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITACDGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITACDGroup*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITACDGroup*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITACDGroup*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITACDGroup*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : ITACDGroup*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, ppName)
    end
    def enumerate_queues(this : ITACDGroup*, ppEnumQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_queues.call(this, ppEnumQueue)
    end
    def get_Queues(this : ITACDGroup*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Queues.call(this, pVariant)
    end

  end

  @[Extern]
  record ITQueueVtbl,
    query_interface : Proc(ITQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITQueue*, UInt32),
    release : Proc(ITQueue*, UInt32),
    get_type_info_count : Proc(ITQueue*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITQueue*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITQueue*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITQueue*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_MeasurementPeriod : Proc(ITQueue*, Int32, Win32cr::Foundation::HRESULT),
    get_MeasurementPeriod : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalCallsQueued : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentCallsQueued : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalCallsAbandoned : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalCallsFlowedIn : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalCallsFlowedOut : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_LongestEverWaitTime : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentLongestWaitTime : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_AverageWaitTime : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_FinalDisposition : Proc(ITQueue*, Int32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITQueue*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc3149-4bcc-11d1-bf80-00805fc147d3")]
  record ITQueue, lpVtbl : ITQueueVtbl* do
    GUID = LibC::GUID.new(0x5afc3149_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITQueue*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITQueue*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITQueue*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITQueue*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_MeasurementPeriod(this : ITQueue*, lPeriod : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MeasurementPeriod.call(this, lPeriod)
    end
    def get_MeasurementPeriod(this : ITQueue*, plPeriod : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MeasurementPeriod.call(this, plPeriod)
    end
    def get_TotalCallsQueued(this : ITQueue*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalCallsQueued.call(this, plCalls)
    end
    def get_CurrentCallsQueued(this : ITQueue*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentCallsQueued.call(this, plCalls)
    end
    def get_TotalCallsAbandoned(this : ITQueue*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalCallsAbandoned.call(this, plCalls)
    end
    def get_TotalCallsFlowedIn(this : ITQueue*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalCallsFlowedIn.call(this, plCalls)
    end
    def get_TotalCallsFlowedOut(this : ITQueue*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalCallsFlowedOut.call(this, plCalls)
    end
    def get_LongestEverWaitTime(this : ITQueue*, plWaitTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LongestEverWaitTime.call(this, plWaitTime)
    end
    def get_CurrentLongestWaitTime(this : ITQueue*, plWaitTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentLongestWaitTime.call(this, plWaitTime)
    end
    def get_AverageWaitTime(this : ITQueue*, plWaitTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AverageWaitTime.call(this, plWaitTime)
    end
    def get_FinalDisposition(this : ITQueue*, plCalls : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FinalDisposition.call(this, plCalls)
    end
    def get_Name(this : ITQueue*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, ppName)
    end

  end

  @[Extern]
  record ITAgentEventVtbl,
    query_interface : Proc(ITAgentEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAgentEvent*, UInt32),
    release : Proc(ITAgentEvent*, UInt32),
    get_type_info_count : Proc(ITAgentEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAgentEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAgentEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAgentEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Agent : Proc(ITAgentEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITAgentEvent*, Win32cr::Devices::Tapi::AGENT_EVENT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc314a-4bcc-11d1-bf80-00805fc147d3")]
  record ITAgentEvent, lpVtbl : ITAgentEventVtbl* do
    GUID = LibC::GUID.new(0x5afc314a_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAgentEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAgentEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAgentEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAgentEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAgentEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAgentEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAgentEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Agent(this : ITAgentEvent*, ppAgent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Agent.call(this, ppAgent)
    end
    def get_Event(this : ITAgentEvent*, pEvent : Win32cr::Devices::Tapi::AGENT_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end

  end

  @[Extern]
  record ITAgentSessionEventVtbl,
    query_interface : Proc(ITAgentSessionEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAgentSessionEvent*, UInt32),
    release : Proc(ITAgentSessionEvent*, UInt32),
    get_type_info_count : Proc(ITAgentSessionEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAgentSessionEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAgentSessionEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAgentSessionEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Session : Proc(ITAgentSessionEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITAgentSessionEvent*, Win32cr::Devices::Tapi::AGENT_SESSION_EVENT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc314b-4bcc-11d1-bf80-00805fc147d3")]
  record ITAgentSessionEvent, lpVtbl : ITAgentSessionEventVtbl* do
    GUID = LibC::GUID.new(0x5afc314b_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAgentSessionEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAgentSessionEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAgentSessionEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAgentSessionEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAgentSessionEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAgentSessionEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAgentSessionEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Session(this : ITAgentSessionEvent*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Session.call(this, ppSession)
    end
    def get_Event(this : ITAgentSessionEvent*, pEvent : Win32cr::Devices::Tapi::AGENT_SESSION_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end

  end

  @[Extern]
  record ITACDGroupEventVtbl,
    query_interface : Proc(ITACDGroupEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITACDGroupEvent*, UInt32),
    release : Proc(ITACDGroupEvent*, UInt32),
    get_type_info_count : Proc(ITACDGroupEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITACDGroupEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITACDGroupEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITACDGroupEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Group : Proc(ITACDGroupEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITACDGroupEvent*, Win32cr::Devices::Tapi::ACDGROUP_EVENT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("297f3032-bd11-11d1-a0a7-00805fc147d3")]
  record ITACDGroupEvent, lpVtbl : ITACDGroupEventVtbl* do
    GUID = LibC::GUID.new(0x297f3032_u32, 0xbd11_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0xa7_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITACDGroupEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITACDGroupEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITACDGroupEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITACDGroupEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITACDGroupEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITACDGroupEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITACDGroupEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Group(this : ITACDGroupEvent*, ppGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Group.call(this, ppGroup)
    end
    def get_Event(this : ITACDGroupEvent*, pEvent : Win32cr::Devices::Tapi::ACDGROUP_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end

  end

  @[Extern]
  record ITQueueEventVtbl,
    query_interface : Proc(ITQueueEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITQueueEvent*, UInt32),
    release : Proc(ITQueueEvent*, UInt32),
    get_type_info_count : Proc(ITQueueEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITQueueEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITQueueEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITQueueEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Queue : Proc(ITQueueEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITQueueEvent*, Win32cr::Devices::Tapi::ACDQUEUE_EVENT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("297f3033-bd11-11d1-a0a7-00805fc147d3")]
  record ITQueueEvent, lpVtbl : ITQueueEventVtbl* do
    GUID = LibC::GUID.new(0x297f3033_u32, 0xbd11_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0xa7_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITQueueEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITQueueEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITQueueEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITQueueEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITQueueEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITQueueEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITQueueEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Queue(this : ITQueueEvent*, ppQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Queue.call(this, ppQueue)
    end
    def get_Event(this : ITQueueEvent*, pEvent : Win32cr::Devices::Tapi::ACDQUEUE_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end

  end

  @[Extern]
  record ITAgentHandlerEventVtbl,
    query_interface : Proc(ITAgentHandlerEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAgentHandlerEvent*, UInt32),
    release : Proc(ITAgentHandlerEvent*, UInt32),
    get_type_info_count : Proc(ITAgentHandlerEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAgentHandlerEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAgentHandlerEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAgentHandlerEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AgentHandler : Proc(ITAgentHandlerEvent*, Void**, Win32cr::Foundation::HRESULT),
    get_Event : Proc(ITAgentHandlerEvent*, Win32cr::Devices::Tapi::AGENTHANDLER_EVENT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("297f3034-bd11-11d1-a0a7-00805fc147d3")]
  record ITAgentHandlerEvent, lpVtbl : ITAgentHandlerEventVtbl* do
    GUID = LibC::GUID.new(0x297f3034_u32, 0xbd11_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0xa7_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAgentHandlerEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAgentHandlerEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAgentHandlerEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAgentHandlerEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAgentHandlerEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAgentHandlerEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAgentHandlerEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AgentHandler(this : ITAgentHandlerEvent*, ppAgentHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AgentHandler.call(this, ppAgentHandler)
    end
    def get_Event(this : ITAgentHandlerEvent*, pEvent : Win32cr::Devices::Tapi::AGENTHANDLER_EVENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Event.call(this, pEvent)
    end

  end

  @[Extern]
  record ITTAPICallCenterVtbl,
    query_interface : Proc(ITTAPICallCenter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTAPICallCenter*, UInt32),
    release : Proc(ITTAPICallCenter*, UInt32),
    get_type_info_count : Proc(ITTAPICallCenter*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTAPICallCenter*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTAPICallCenter*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTAPICallCenter*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    enumerate_agent_handlers : Proc(ITTAPICallCenter*, Void**, Win32cr::Foundation::HRESULT),
    get_AgentHandlers : Proc(ITTAPICallCenter*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc3154-4bcc-11d1-bf80-00805fc147d3")]
  record ITTAPICallCenter, lpVtbl : ITTAPICallCenterVtbl* do
    GUID = LibC::GUID.new(0x5afc3154_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITTAPICallCenter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTAPICallCenter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTAPICallCenter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTAPICallCenter*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTAPICallCenter*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTAPICallCenter*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTAPICallCenter*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def enumerate_agent_handlers(this : ITTAPICallCenter*, ppEnumHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_agent_handlers.call(this, ppEnumHandler)
    end
    def get_AgentHandlers(this : ITTAPICallCenter*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AgentHandlers.call(this, pVariant)
    end

  end

  @[Extern]
  record ITAgentHandlerVtbl,
    query_interface : Proc(ITAgentHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAgentHandler*, UInt32),
    release : Proc(ITAgentHandler*, UInt32),
    get_type_info_count : Proc(ITAgentHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITAgentHandler*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITAgentHandler*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITAgentHandler*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITAgentHandler*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    create_agent : Proc(ITAgentHandler*, Void**, Win32cr::Foundation::HRESULT),
    create_agent_with_id : Proc(ITAgentHandler*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    enumerate_acd_groups : Proc(ITAgentHandler*, Void**, Win32cr::Foundation::HRESULT),
    enumerate_usable_addresses : Proc(ITAgentHandler*, Void**, Win32cr::Foundation::HRESULT),
    get_ACDGroups : Proc(ITAgentHandler*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_UsableAddresses : Proc(ITAgentHandler*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("587e8c22-9802-11d1-a0a4-00805fc147d3")]
  record ITAgentHandler, lpVtbl : ITAgentHandlerVtbl* do
    GUID = LibC::GUID.new(0x587e8c22_u32, 0x9802_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0xa4_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : ITAgentHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAgentHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAgentHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITAgentHandler*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITAgentHandler*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITAgentHandler*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITAgentHandler*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : ITAgentHandler*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, ppName)
    end
    def create_agent(this : ITAgentHandler*, ppAgent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_agent.call(this, ppAgent)
    end
    def create_agent_with_id(this : ITAgentHandler*, pID : Win32cr::Foundation::BSTR, pPIN : Win32cr::Foundation::BSTR, ppAgent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_agent_with_id.call(this, pID, pPIN, ppAgent)
    end
    def enumerate_acd_groups(this : ITAgentHandler*, ppEnumACDGroup : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_acd_groups.call(this, ppEnumACDGroup)
    end
    def enumerate_usable_addresses(this : ITAgentHandler*, ppEnumAddress : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_usable_addresses.call(this, ppEnumAddress)
    end
    def get_ACDGroups(this : ITAgentHandler*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ACDGroups.call(this, pVariant)
    end
    def get_UsableAddresses(this : ITAgentHandler*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsableAddresses.call(this, pVariant)
    end

  end

  @[Extern]
  record IEnumAgentVtbl,
    query_interface : Proc(IEnumAgent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumAgent*, UInt32),
    release : Proc(IEnumAgent*, UInt32),
    next__ : Proc(IEnumAgent*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumAgent*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumAgent*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumAgent*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc314d-4bcc-11d1-bf80-00805fc147d3")]
  record IEnumAgent, lpVtbl : IEnumAgentVtbl* do
    GUID = LibC::GUID.new(0x5afc314d_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : IEnumAgent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumAgent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumAgent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumAgent*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumAgent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumAgent*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumAgent*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumAgentSessionVtbl,
    query_interface : Proc(IEnumAgentSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumAgentSession*, UInt32),
    release : Proc(IEnumAgentSession*, UInt32),
    next__ : Proc(IEnumAgentSession*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumAgentSession*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumAgentSession*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumAgentSession*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc314e-4bcc-11d1-bf80-00805fc147d3")]
  record IEnumAgentSession, lpVtbl : IEnumAgentSessionVtbl* do
    GUID = LibC::GUID.new(0x5afc314e_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : IEnumAgentSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumAgentSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumAgentSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumAgentSession*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumAgentSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumAgentSession*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumAgentSession*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumQueueVtbl,
    query_interface : Proc(IEnumQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumQueue*, UInt32),
    release : Proc(IEnumQueue*, UInt32),
    next__ : Proc(IEnumQueue*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumQueue*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumQueue*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumQueue*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc3158-4bcc-11d1-bf80-00805fc147d3")]
  record IEnumQueue, lpVtbl : IEnumQueueVtbl* do
    GUID = LibC::GUID.new(0x5afc3158_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : IEnumQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumQueue*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumQueue*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumQueue*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumACDGroupVtbl,
    query_interface : Proc(IEnumACDGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumACDGroup*, UInt32),
    release : Proc(IEnumACDGroup*, UInt32),
    next__ : Proc(IEnumACDGroup*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumACDGroup*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumACDGroup*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumACDGroup*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5afc3157-4bcc-11d1-bf80-00805fc147d3")]
  record IEnumACDGroup, lpVtbl : IEnumACDGroupVtbl* do
    GUID = LibC::GUID.new(0x5afc3157_u32, 0x4bcc_u16, 0x11d1_u16, StaticArray[0xbf_u8, 0x80_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : IEnumACDGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumACDGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumACDGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumACDGroup*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumACDGroup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumACDGroup*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumACDGroup*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumAgentHandlerVtbl,
    query_interface : Proc(IEnumAgentHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumAgentHandler*, UInt32),
    release : Proc(IEnumAgentHandler*, UInt32),
    next__ : Proc(IEnumAgentHandler*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumAgentHandler*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumAgentHandler*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumAgentHandler*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("587e8c28-9802-11d1-a0a4-00805fc147d3")]
  record IEnumAgentHandler, lpVtbl : IEnumAgentHandlerVtbl* do
    GUID = LibC::GUID.new(0x587e8c28_u32, 0x9802_u16, 0x11d1_u16, StaticArray[0xa0_u8, 0xa4_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0xc1_u8, 0x47_u8, 0xd3_u8])
    def query_interface(this : IEnumAgentHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumAgentHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumAgentHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumAgentHandler*, celt : UInt32, ppElements : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pceltFetched)
    end
    def reset(this : IEnumAgentHandler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumAgentHandler*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumAgentHandler*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITAMMediaFormatVtbl,
    query_interface : Proc(ITAMMediaFormat*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAMMediaFormat*, UInt32),
    release : Proc(ITAMMediaFormat*, UInt32),
    get_MediaFormat : Proc(ITAMMediaFormat*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, Win32cr::Foundation::HRESULT),
    put_MediaFormat : Proc(ITAMMediaFormat*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0364eb00-4a77-11d1-a671-006097c9a2e8")]
  record ITAMMediaFormat, lpVtbl : ITAMMediaFormatVtbl* do
    GUID = LibC::GUID.new(0x364eb00_u32, 0x4a77_u16, 0x11d1_u16, StaticArray[0xa6_u8, 0x71_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xa2_u8, 0xe8_u8])
    def query_interface(this : ITAMMediaFormat*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAMMediaFormat*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAMMediaFormat*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_MediaFormat(this : ITAMMediaFormat*, ppmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaFormat.call(this, ppmt)
    end
    def put_MediaFormat(this : ITAMMediaFormat*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaFormat.call(this, pmt)
    end

  end

  @[Extern]
  record ITAllocatorPropertiesVtbl,
    query_interface : Proc(ITAllocatorProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITAllocatorProperties*, UInt32),
    release : Proc(ITAllocatorProperties*, UInt32),
    set_allocator_properties : Proc(ITAllocatorProperties*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    get_allocator_properties : Proc(ITAllocatorProperties*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    set_allocate_buffers : Proc(ITAllocatorProperties*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_allocate_buffers : Proc(ITAllocatorProperties*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_buffer_size : Proc(ITAllocatorProperties*, UInt32, Win32cr::Foundation::HRESULT),
    get_buffer_size : Proc(ITAllocatorProperties*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c1bc3c90-bcfe-11d1-9745-00c04fd91ac0")]
  record ITAllocatorProperties, lpVtbl : ITAllocatorPropertiesVtbl* do
    GUID = LibC::GUID.new(0xc1bc3c90_u32, 0xbcfe_u16, 0x11d1_u16, StaticArray[0x97_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1a_u8, 0xc0_u8])
    def query_interface(this : ITAllocatorProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITAllocatorProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITAllocatorProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_allocator_properties(this : ITAllocatorProperties*, pAllocProperties : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_allocator_properties.call(this, pAllocProperties)
    end
    def get_allocator_properties(this : ITAllocatorProperties*, pAllocProperties : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocator_properties.call(this, pAllocProperties)
    end
    def set_allocate_buffers(this : ITAllocatorProperties*, bAllocBuffers : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_allocate_buffers.call(this, bAllocBuffers)
    end
    def get_allocate_buffers(this : ITAllocatorProperties*, pbAllocBuffers : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocate_buffers.call(this, pbAllocBuffers)
    end
    def set_buffer_size(this : ITAllocatorProperties*, buffer_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buffer_size.call(this, buffer_size)
    end
    def get_buffer_size(this : ITAllocatorProperties*, pBufferSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size.call(this, pBufferSize)
    end

  end

  @[Extern]
  record ITPluggableTerminalEventSinkVtbl,
    query_interface : Proc(ITPluggableTerminalEventSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPluggableTerminalEventSink*, UInt32),
    release : Proc(ITPluggableTerminalEventSink*, UInt32),
    fire_event : Proc(ITPluggableTerminalEventSink*, Win32cr::Devices::Tapi::MSP_EVENT_INFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6e0887be-ba1a-492e-bd10-4020ec5e33e0")]
  record ITPluggableTerminalEventSink, lpVtbl : ITPluggableTerminalEventSinkVtbl* do
    GUID = LibC::GUID.new(0x6e0887be_u32, 0xba1a_u16, 0x492e_u16, StaticArray[0xbd_u8, 0x10_u8, 0x40_u8, 0x20_u8, 0xec_u8, 0x5e_u8, 0x33_u8, 0xe0_u8])
    def query_interface(this : ITPluggableTerminalEventSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPluggableTerminalEventSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPluggableTerminalEventSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def fire_event(this : ITPluggableTerminalEventSink*, pMspEventInfo : Win32cr::Devices::Tapi::MSP_EVENT_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire_event.call(this, pMspEventInfo)
    end

  end

  @[Extern]
  record ITPluggableTerminalEventSinkRegistrationVtbl,
    query_interface : Proc(ITPluggableTerminalEventSinkRegistration*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITPluggableTerminalEventSinkRegistration*, UInt32),
    release : Proc(ITPluggableTerminalEventSinkRegistration*, UInt32),
    register_sink : Proc(ITPluggableTerminalEventSinkRegistration*, Void*, Win32cr::Foundation::HRESULT),
    unregister_sink : Proc(ITPluggableTerminalEventSinkRegistration*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f7115709-a216-4957-a759-060ab32a90d1")]
  record ITPluggableTerminalEventSinkRegistration, lpVtbl : ITPluggableTerminalEventSinkRegistrationVtbl* do
    GUID = LibC::GUID.new(0xf7115709_u32, 0xa216_u16, 0x4957_u16, StaticArray[0xa7_u8, 0x59_u8, 0x6_u8, 0xa_u8, 0xb3_u8, 0x2a_u8, 0x90_u8, 0xd1_u8])
    def query_interface(this : ITPluggableTerminalEventSinkRegistration*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITPluggableTerminalEventSinkRegistration*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITPluggableTerminalEventSinkRegistration*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_sink(this : ITPluggableTerminalEventSinkRegistration*, pEventSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_sink.call(this, pEventSink)
    end
    def unregister_sink(this : ITPluggableTerminalEventSinkRegistration*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_sink.call(this)
    end

  end

  @[Extern]
  record ITMSPAddressVtbl,
    query_interface : Proc(ITMSPAddress*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITMSPAddress*, UInt32),
    release : Proc(ITMSPAddress*, UInt32),
    initialize__ : Proc(ITMSPAddress*, Int32*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(ITMSPAddress*, Win32cr::Foundation::HRESULT),
    create_msp_call : Proc(ITMSPAddress*, Int32*, UInt32, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    shutdown_msp_call : Proc(ITMSPAddress*, Void*, Win32cr::Foundation::HRESULT),
    receive_tsp_data : Proc(ITMSPAddress*, Void*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_event : Proc(ITMSPAddress*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee3bd600-3868-11d2-a045-00c04fb6809f")]
  record ITMSPAddress, lpVtbl : ITMSPAddressVtbl* do
    GUID = LibC::GUID.new(0xee3bd600_u32, 0x3868_u16, 0x11d2_u16, StaticArray[0xa0_u8, 0x45_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0x80_u8, 0x9f_u8])
    def query_interface(this : ITMSPAddress*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITMSPAddress*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITMSPAddress*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : ITMSPAddress*, hEvent : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, hEvent)
    end
    def shutdown(this : ITMSPAddress*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def create_msp_call(this : ITMSPAddress*, hCall : Int32*, dwReserved : UInt32, dwMediaType : UInt32, pOuterUnknown : Void*, ppStreamControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_msp_call.call(this, hCall, dwReserved, dwMediaType, pOuterUnknown, ppStreamControl)
    end
    def shutdown_msp_call(this : ITMSPAddress*, pStreamControl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown_msp_call.call(this, pStreamControl)
    end
    def receive_tsp_data(this : ITMSPAddress*, pMSPCall : Void*, pBuffer : UInt8*, dwSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.receive_tsp_data.call(this, pMSPCall, pBuffer, dwSize)
    end
    def get_event(this : ITMSPAddress*, pdwSize : UInt32*, pEventBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, pdwSize, pEventBuffer)
    end

  end

  @[Extern]
  record ITTAPIDispatchEventNotificationVtbl,
    query_interface : Proc(ITTAPIDispatchEventNotification*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITTAPIDispatchEventNotification*, UInt32),
    release : Proc(ITTAPIDispatchEventNotification*, UInt32),
    get_type_info_count : Proc(ITTAPIDispatchEventNotification*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITTAPIDispatchEventNotification*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITTAPIDispatchEventNotification*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITTAPIDispatchEventNotification*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9f34325b-7e62-11d2-9457-00c04f8ec888")]
  record ITTAPIDispatchEventNotification, lpVtbl : ITTAPIDispatchEventNotificationVtbl* do
    GUID = LibC::GUID.new(0x9f34325b_u32, 0x7e62_u16, 0x11d2_u16, StaticArray[0x94_u8, 0x57_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x8e_u8, 0xc8_u8, 0x88_u8])
    def query_interface(this : ITTAPIDispatchEventNotification*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITTAPIDispatchEventNotification*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITTAPIDispatchEventNotification*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITTAPIDispatchEventNotification*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITTAPIDispatchEventNotification*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITTAPIDispatchEventNotification*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITTAPIDispatchEventNotification*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record ITDirectoryObjectConferenceVtbl,
    query_interface : Proc(ITDirectoryObjectConference*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDirectoryObjectConference*, UInt32),
    release : Proc(ITDirectoryObjectConference*, UInt32),
    get_type_info_count : Proc(ITDirectoryObjectConference*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDirectoryObjectConference*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDirectoryObjectConference*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDirectoryObjectConference*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Protocol : Proc(ITDirectoryObjectConference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Originator : Proc(ITDirectoryObjectConference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Originator : Proc(ITDirectoryObjectConference*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_AdvertisingScope : Proc(ITDirectoryObjectConference*, Win32cr::Devices::Tapi::RND_ADVERTISING_SCOPE*, Win32cr::Foundation::HRESULT),
    put_AdvertisingScope : Proc(ITDirectoryObjectConference*, Win32cr::Devices::Tapi::RND_ADVERTISING_SCOPE, Win32cr::Foundation::HRESULT),
    get_Url : Proc(ITDirectoryObjectConference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Url : Proc(ITDirectoryObjectConference*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Description : Proc(ITDirectoryObjectConference*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(ITDirectoryObjectConference*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_IsEncrypted : Proc(ITDirectoryObjectConference*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsEncrypted : Proc(ITDirectoryObjectConference*, Int16, Win32cr::Foundation::HRESULT),
    get_StartTime : Proc(ITDirectoryObjectConference*, Float64*, Win32cr::Foundation::HRESULT),
    put_StartTime : Proc(ITDirectoryObjectConference*, Float64, Win32cr::Foundation::HRESULT),
    get_StopTime : Proc(ITDirectoryObjectConference*, Float64*, Win32cr::Foundation::HRESULT),
    put_StopTime : Proc(ITDirectoryObjectConference*, Float64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f1029e5d-cb5b-11d0-8d59-00c04fd91ac0")]
  record ITDirectoryObjectConference, lpVtbl : ITDirectoryObjectConferenceVtbl* do
    GUID = LibC::GUID.new(0xf1029e5d_u32, 0xcb5b_u16, 0x11d0_u16, StaticArray[0x8d_u8, 0x59_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1a_u8, 0xc0_u8])
    def query_interface(this : ITDirectoryObjectConference*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDirectoryObjectConference*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDirectoryObjectConference*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDirectoryObjectConference*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDirectoryObjectConference*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDirectoryObjectConference*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDirectoryObjectConference*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Protocol(this : ITDirectoryObjectConference*, ppProtocol : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Protocol.call(this, ppProtocol)
    end
    def get_Originator(this : ITDirectoryObjectConference*, ppOriginator : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Originator.call(this, ppOriginator)
    end
    def put_Originator(this : ITDirectoryObjectConference*, pOriginator : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Originator.call(this, pOriginator)
    end
    def get_AdvertisingScope(this : ITDirectoryObjectConference*, pAdvertisingScope : Win32cr::Devices::Tapi::RND_ADVERTISING_SCOPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AdvertisingScope.call(this, pAdvertisingScope)
    end
    def put_AdvertisingScope(this : ITDirectoryObjectConference*, advertising_scope : Win32cr::Devices::Tapi::RND_ADVERTISING_SCOPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AdvertisingScope.call(this, advertising_scope)
    end
    def get_Url(this : ITDirectoryObjectConference*, ppUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Url.call(this, ppUrl)
    end
    def put_Url(this : ITDirectoryObjectConference*, pUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Url.call(this, pUrl)
    end
    def get_Description(this : ITDirectoryObjectConference*, ppDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, ppDescription)
    end
    def put_Description(this : ITDirectoryObjectConference*, pDescription : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, pDescription)
    end
    def get_IsEncrypted(this : ITDirectoryObjectConference*, pfEncrypted : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsEncrypted.call(this, pfEncrypted)
    end
    def put_IsEncrypted(this : ITDirectoryObjectConference*, fEncrypted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsEncrypted.call(this, fEncrypted)
    end
    def get_StartTime(this : ITDirectoryObjectConference*, pDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartTime.call(this, pDate)
    end
    def put_StartTime(this : ITDirectoryObjectConference*, date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartTime.call(this, date)
    end
    def get_StopTime(this : ITDirectoryObjectConference*, pDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StopTime.call(this, pDate)
    end
    def put_StopTime(this : ITDirectoryObjectConference*, date : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StopTime.call(this, date)
    end

  end

  @[Extern]
  record ITDirectoryObjectUserVtbl,
    query_interface : Proc(ITDirectoryObjectUser*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDirectoryObjectUser*, UInt32),
    release : Proc(ITDirectoryObjectUser*, UInt32),
    get_type_info_count : Proc(ITDirectoryObjectUser*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDirectoryObjectUser*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDirectoryObjectUser*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDirectoryObjectUser*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_IPPhonePrimary : Proc(ITDirectoryObjectUser*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_IPPhonePrimary : Proc(ITDirectoryObjectUser*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34621d6f-6cff-11d1-aff7-00c04fc31fee")]
  record ITDirectoryObjectUser, lpVtbl : ITDirectoryObjectUserVtbl* do
    GUID = LibC::GUID.new(0x34621d6f_u32, 0x6cff_u16, 0x11d1_u16, StaticArray[0xaf_u8, 0xf7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1f_u8, 0xee_u8])
    def query_interface(this : ITDirectoryObjectUser*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDirectoryObjectUser*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDirectoryObjectUser*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDirectoryObjectUser*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDirectoryObjectUser*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDirectoryObjectUser*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDirectoryObjectUser*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_IPPhonePrimary(this : ITDirectoryObjectUser*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IPPhonePrimary.call(this, ppName)
    end
    def put_IPPhonePrimary(this : ITDirectoryObjectUser*, pName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IPPhonePrimary.call(this, pName)
    end

  end

  @[Extern]
  record IEnumDialableAddrsVtbl,
    query_interface : Proc(IEnumDialableAddrs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDialableAddrs*, UInt32),
    release : Proc(IEnumDialableAddrs*, UInt32),
    next__ : Proc(IEnumDialableAddrs*, UInt32, Win32cr::Foundation::BSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDialableAddrs*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDialableAddrs*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDialableAddrs*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34621d70-6cff-11d1-aff7-00c04fc31fee")]
  record IEnumDialableAddrs, lpVtbl : IEnumDialableAddrsVtbl* do
    GUID = LibC::GUID.new(0x34621d70_u32, 0x6cff_u16, 0x11d1_u16, StaticArray[0xaf_u8, 0xf7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1f_u8, 0xee_u8])
    def query_interface(this : IEnumDialableAddrs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDialableAddrs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDialableAddrs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDialableAddrs*, celt : UInt32, ppElements : Win32cr::Foundation::BSTR*, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pcFetched)
    end
    def reset(this : IEnumDialableAddrs*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumDialableAddrs*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumDialableAddrs*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITDirectoryObjectVtbl,
    query_interface : Proc(ITDirectoryObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDirectoryObject*, UInt32),
    release : Proc(ITDirectoryObject*, UInt32),
    get_type_info_count : Proc(ITDirectoryObject*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDirectoryObject*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDirectoryObject*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDirectoryObject*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ObjectType : Proc(ITDirectoryObject*, Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(ITDirectoryObject*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Name : Proc(ITDirectoryObject*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DialableAddrs : Proc(ITDirectoryObject*, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_dialable_addrs : Proc(ITDirectoryObject*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_SecurityDescriptor : Proc(ITDirectoryObject*, Void**, Win32cr::Foundation::HRESULT),
    put_SecurityDescriptor : Proc(ITDirectoryObject*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34621d6e-6cff-11d1-aff7-00c04fc31fee")]
  record ITDirectoryObject, lpVtbl : ITDirectoryObjectVtbl* do
    GUID = LibC::GUID.new(0x34621d6e_u32, 0x6cff_u16, 0x11d1_u16, StaticArray[0xaf_u8, 0xf7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1f_u8, 0xee_u8])
    def query_interface(this : ITDirectoryObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDirectoryObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDirectoryObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDirectoryObject*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDirectoryObject*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDirectoryObject*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDirectoryObject*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ObjectType(this : ITDirectoryObject*, pObjectType : Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ObjectType.call(this, pObjectType)
    end
    def get_Name(this : ITDirectoryObject*, ppName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, ppName)
    end
    def put_Name(this : ITDirectoryObject*, pName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Name.call(this, pName)
    end
    def get_DialableAddrs(this : ITDirectoryObject*, dwAddressType : Int32, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DialableAddrs.call(this, dwAddressType, pVariant)
    end
    def enumerate_dialable_addrs(this : ITDirectoryObject*, dwAddressType : UInt32, ppEnumDialableAddrs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_dialable_addrs.call(this, dwAddressType, ppEnumDialableAddrs)
    end
    def get_SecurityDescriptor(this : ITDirectoryObject*, ppSecDes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SecurityDescriptor.call(this, ppSecDes)
    end
    def put_SecurityDescriptor(this : ITDirectoryObject*, pSecDes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SecurityDescriptor.call(this, pSecDes)
    end

  end

  @[Extern]
  record IEnumDirectoryObjectVtbl,
    query_interface : Proc(IEnumDirectoryObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDirectoryObject*, UInt32),
    release : Proc(IEnumDirectoryObject*, UInt32),
    next__ : Proc(IEnumDirectoryObject*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDirectoryObject*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDirectoryObject*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDirectoryObject*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("06c9b64a-306d-11d1-9774-00c04fd91ac0")]
  record IEnumDirectoryObject, lpVtbl : IEnumDirectoryObjectVtbl* do
    GUID = LibC::GUID.new(0x6c9b64a_u32, 0x306d_u16, 0x11d1_u16, StaticArray[0x97_u8, 0x74_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x1a_u8, 0xc0_u8])
    def query_interface(this : IEnumDirectoryObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDirectoryObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDirectoryObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDirectoryObject*, celt : UInt32, pVal : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, pVal, pcFetched)
    end
    def reset(this : IEnumDirectoryObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumDirectoryObject*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumDirectoryObject*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITILSConfigVtbl,
    query_interface : Proc(ITILSConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITILSConfig*, UInt32),
    release : Proc(ITILSConfig*, UInt32),
    get_type_info_count : Proc(ITILSConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITILSConfig*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITILSConfig*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITILSConfig*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Port : Proc(ITILSConfig*, Int32*, Win32cr::Foundation::HRESULT),
    put_Port : Proc(ITILSConfig*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34621d72-6cff-11d1-aff7-00c04fc31fee")]
  record ITILSConfig, lpVtbl : ITILSConfigVtbl* do
    GUID = LibC::GUID.new(0x34621d72_u32, 0x6cff_u16, 0x11d1_u16, StaticArray[0xaf_u8, 0xf7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1f_u8, 0xee_u8])
    def query_interface(this : ITILSConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITILSConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITILSConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITILSConfig*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITILSConfig*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITILSConfig*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITILSConfig*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Port(this : ITILSConfig*, pPort : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Port.call(this, pPort)
    end
    def put_Port(this : ITILSConfig*, port : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Port.call(this, port)
    end

  end

  @[Extern]
  record ITDirectoryVtbl,
    query_interface : Proc(ITDirectory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITDirectory*, UInt32),
    release : Proc(ITDirectory*, UInt32),
    get_type_info_count : Proc(ITDirectory*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITDirectory*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITDirectory*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITDirectory*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_DirectoryType : Proc(ITDirectory*, Win32cr::Devices::Tapi::DIRECTORY_TYPE*, Win32cr::Foundation::HRESULT),
    get_DisplayName : Proc(ITDirectory*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsDynamic : Proc(ITDirectory*, Int16*, Win32cr::Foundation::HRESULT),
    get_DefaultObjectTTL : Proc(ITDirectory*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultObjectTTL : Proc(ITDirectory*, Int32, Win32cr::Foundation::HRESULT),
    enable_auto_refresh : Proc(ITDirectory*, Int16, Win32cr::Foundation::HRESULT),
    connect : Proc(ITDirectory*, Int16, Win32cr::Foundation::HRESULT),
    bind : Proc(ITDirectory*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    add_directory_object : Proc(ITDirectory*, Void*, Win32cr::Foundation::HRESULT),
    modify_directory_object : Proc(ITDirectory*, Void*, Win32cr::Foundation::HRESULT),
    refresh_directory_object : Proc(ITDirectory*, Void*, Win32cr::Foundation::HRESULT),
    delete_directory_object : Proc(ITDirectory*, Void*, Win32cr::Foundation::HRESULT),
    get_DirectoryObjects : Proc(ITDirectory*, Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_directory_objects : Proc(ITDirectory*, Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34621d6c-6cff-11d1-aff7-00c04fc31fee")]
  record ITDirectory, lpVtbl : ITDirectoryVtbl* do
    GUID = LibC::GUID.new(0x34621d6c_u32, 0x6cff_u16, 0x11d1_u16, StaticArray[0xaf_u8, 0xf7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1f_u8, 0xee_u8])
    def query_interface(this : ITDirectory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITDirectory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITDirectory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITDirectory*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITDirectory*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITDirectory*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITDirectory*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_DirectoryType(this : ITDirectory*, pDirectoryType : Win32cr::Devices::Tapi::DIRECTORY_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DirectoryType.call(this, pDirectoryType)
    end
    def get_DisplayName(this : ITDirectory*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisplayName.call(this, pName)
    end
    def get_IsDynamic(this : ITDirectory*, pfDynamic : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsDynamic.call(this, pfDynamic)
    end
    def get_DefaultObjectTTL(this : ITDirectory*, pTTL : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultObjectTTL.call(this, pTTL)
    end
    def put_DefaultObjectTTL(this : ITDirectory*, ttl : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultObjectTTL.call(this, ttl)
    end
    def enable_auto_refresh(this : ITDirectory*, fEnable : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_auto_refresh.call(this, fEnable)
    end
    def connect(this : ITDirectory*, fSecure : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, fSecure)
    end
    def bind(this : ITDirectory*, pDomainName : Win32cr::Foundation::BSTR, pUserName : Win32cr::Foundation::BSTR, pPassword : Win32cr::Foundation::BSTR, lFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind.call(this, pDomainName, pUserName, pPassword, lFlags)
    end
    def add_directory_object(this : ITDirectory*, pDirectoryObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_directory_object.call(this, pDirectoryObject)
    end
    def modify_directory_object(this : ITDirectory*, pDirectoryObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.modify_directory_object.call(this, pDirectoryObject)
    end
    def refresh_directory_object(this : ITDirectory*, pDirectoryObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh_directory_object.call(this, pDirectoryObject)
    end
    def delete_directory_object(this : ITDirectory*, pDirectoryObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_directory_object.call(this, pDirectoryObject)
    end
    def get_DirectoryObjects(this : ITDirectory*, directory_object_type : Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE, pName : Win32cr::Foundation::BSTR, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DirectoryObjects.call(this, directory_object_type, pName, pVariant)
    end
    def enumerate_directory_objects(this : ITDirectory*, directory_object_type : Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE, pName : Win32cr::Foundation::BSTR, ppEnumObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_directory_objects.call(this, directory_object_type, pName, ppEnumObject)
    end

  end

  @[Extern]
  record IEnumDirectoryVtbl,
    query_interface : Proc(IEnumDirectory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDirectory*, UInt32),
    release : Proc(IEnumDirectory*, UInt32),
    next__ : Proc(IEnumDirectory*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDirectory*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDirectory*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDirectory*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34621d6d-6cff-11d1-aff7-00c04fc31fee")]
  record IEnumDirectory, lpVtbl : IEnumDirectoryVtbl* do
    GUID = LibC::GUID.new(0x34621d6d_u32, 0x6cff_u16, 0x11d1_u16, StaticArray[0xaf_u8, 0xf7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1f_u8, 0xee_u8])
    def query_interface(this : IEnumDirectory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDirectory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDirectory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDirectory*, celt : UInt32, ppElements : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppElements, pcFetched)
    end
    def reset(this : IEnumDirectory*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumDirectory*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumDirectory*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record ITRendezvousVtbl,
    query_interface : Proc(ITRendezvous*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITRendezvous*, UInt32),
    release : Proc(ITRendezvous*, UInt32),
    get_type_info_count : Proc(ITRendezvous*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITRendezvous*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITRendezvous*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITRendezvous*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_DefaultDirectories : Proc(ITRendezvous*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_default_directories : Proc(ITRendezvous*, Void**, Win32cr::Foundation::HRESULT),
    create_directory : Proc(ITRendezvous*, Win32cr::Devices::Tapi::DIRECTORY_TYPE, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    create_directory_object : Proc(ITRendezvous*, Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34621d6b-6cff-11d1-aff7-00c04fc31fee")]
  record ITRendezvous, lpVtbl : ITRendezvousVtbl* do
    GUID = LibC::GUID.new(0x34621d6b_u32, 0x6cff_u16, 0x11d1_u16, StaticArray[0xaf_u8, 0xf7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x1f_u8, 0xee_u8])
    def query_interface(this : ITRendezvous*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITRendezvous*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITRendezvous*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITRendezvous*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITRendezvous*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITRendezvous*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITRendezvous*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_DefaultDirectories(this : ITRendezvous*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultDirectories.call(this, pVariant)
    end
    def enumerate_default_directories(this : ITRendezvous*, ppEnumDirectory : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_default_directories.call(this, ppEnumDirectory)
    end
    def create_directory(this : ITRendezvous*, directory_type : Win32cr::Devices::Tapi::DIRECTORY_TYPE, pName : Win32cr::Foundation::BSTR, ppDir : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_directory.call(this, directory_type, pName, ppDir)
    end
    def create_directory_object(this : ITRendezvous*, directory_object_type : Win32cr::Devices::Tapi::DIRECTORY_OBJECT_TYPE, pName : Win32cr::Foundation::BSTR, ppDirectoryObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_directory_object.call(this, directory_object_type, pName, ppDirectoryObject)
    end

  end

  @[Extern]
  record IMcastScopeVtbl,
    query_interface : Proc(IMcastScope*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMcastScope*, UInt32),
    release : Proc(IMcastScope*, UInt32),
    get_type_info_count : Proc(IMcastScope*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMcastScope*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMcastScope*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMcastScope*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ScopeID : Proc(IMcastScope*, Int32*, Win32cr::Foundation::HRESULT),
    get_ServerID : Proc(IMcastScope*, Int32*, Win32cr::Foundation::HRESULT),
    get_InterfaceID : Proc(IMcastScope*, Int32*, Win32cr::Foundation::HRESULT),
    get_ScopeDescription : Proc(IMcastScope*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TTL : Proc(IMcastScope*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("df0daef4-a289-11d1-8697-006008b0e5d2")]
  record IMcastScope, lpVtbl : IMcastScopeVtbl* do
    GUID = LibC::GUID.new(0xdf0daef4_u32, 0xa289_u16, 0x11d1_u16, StaticArray[0x86_u8, 0x97_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xb0_u8, 0xe5_u8, 0xd2_u8])
    def query_interface(this : IMcastScope*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMcastScope*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMcastScope*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMcastScope*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMcastScope*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMcastScope*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMcastScope*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ScopeID(this : IMcastScope*, pID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ScopeID.call(this, pID)
    end
    def get_ServerID(this : IMcastScope*, pID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServerID.call(this, pID)
    end
    def get_InterfaceID(this : IMcastScope*, pID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InterfaceID.call(this, pID)
    end
    def get_ScopeDescription(this : IMcastScope*, ppDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ScopeDescription.call(this, ppDescription)
    end
    def get_TTL(this : IMcastScope*, pTTL : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TTL.call(this, pTTL)
    end

  end

  @[Extern]
  record IMcastLeaseInfoVtbl,
    query_interface : Proc(IMcastLeaseInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMcastLeaseInfo*, UInt32),
    release : Proc(IMcastLeaseInfo*, UInt32),
    get_type_info_count : Proc(IMcastLeaseInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMcastLeaseInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMcastLeaseInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMcastLeaseInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_RequestID : Proc(IMcastLeaseInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LeaseStartTime : Proc(IMcastLeaseInfo*, Float64*, Win32cr::Foundation::HRESULT),
    put_LeaseStartTime : Proc(IMcastLeaseInfo*, Float64, Win32cr::Foundation::HRESULT),
    get_LeaseStopTime : Proc(IMcastLeaseInfo*, Float64*, Win32cr::Foundation::HRESULT),
    put_LeaseStopTime : Proc(IMcastLeaseInfo*, Float64, Win32cr::Foundation::HRESULT),
    get_AddressCount : Proc(IMcastLeaseInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_ServerAddress : Proc(IMcastLeaseInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TTL : Proc(IMcastLeaseInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_Addresses : Proc(IMcastLeaseInfo*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_addresses : Proc(IMcastLeaseInfo*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("df0daefd-a289-11d1-8697-006008b0e5d2")]
  record IMcastLeaseInfo, lpVtbl : IMcastLeaseInfoVtbl* do
    GUID = LibC::GUID.new(0xdf0daefd_u32, 0xa289_u16, 0x11d1_u16, StaticArray[0x86_u8, 0x97_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xb0_u8, 0xe5_u8, 0xd2_u8])
    def query_interface(this : IMcastLeaseInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMcastLeaseInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMcastLeaseInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMcastLeaseInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMcastLeaseInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMcastLeaseInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMcastLeaseInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_RequestID(this : IMcastLeaseInfo*, ppRequestID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestID.call(this, ppRequestID)
    end
    def get_LeaseStartTime(this : IMcastLeaseInfo*, pTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LeaseStartTime.call(this, pTime)
    end
    def put_LeaseStartTime(this : IMcastLeaseInfo*, time : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LeaseStartTime.call(this, time)
    end
    def get_LeaseStopTime(this : IMcastLeaseInfo*, pTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LeaseStopTime.call(this, pTime)
    end
    def put_LeaseStopTime(this : IMcastLeaseInfo*, time : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LeaseStopTime.call(this, time)
    end
    def get_AddressCount(this : IMcastLeaseInfo*, pCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AddressCount.call(this, pCount)
    end
    def get_ServerAddress(this : IMcastLeaseInfo*, ppAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ServerAddress.call(this, ppAddress)
    end
    def get_TTL(this : IMcastLeaseInfo*, pTTL : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TTL.call(this, pTTL)
    end
    def get_Addresses(this : IMcastLeaseInfo*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Addresses.call(this, pVariant)
    end
    def enumerate_addresses(this : IMcastLeaseInfo*, ppEnumAddresses : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_addresses.call(this, ppEnumAddresses)
    end

  end

  @[Extern]
  record IEnumMcastScopeVtbl,
    query_interface : Proc(IEnumMcastScope*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumMcastScope*, UInt32),
    release : Proc(IEnumMcastScope*, UInt32),
    next__ : Proc(IEnumMcastScope*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumMcastScope*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumMcastScope*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumMcastScope*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("df0daf09-a289-11d1-8697-006008b0e5d2")]
  record IEnumMcastScope, lpVtbl : IEnumMcastScopeVtbl* do
    GUID = LibC::GUID.new(0xdf0daf09_u32, 0xa289_u16, 0x11d1_u16, StaticArray[0x86_u8, 0x97_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xb0_u8, 0xe5_u8, 0xd2_u8])
    def query_interface(this : IEnumMcastScope*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumMcastScope*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumMcastScope*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumMcastScope*, celt : UInt32, ppScopes : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppScopes, pceltFetched)
    end
    def reset(this : IEnumMcastScope*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def skip(this : IEnumMcastScope*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def clone(this : IEnumMcastScope*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IMcastAddressAllocationVtbl,
    query_interface : Proc(IMcastAddressAllocation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMcastAddressAllocation*, UInt32),
    release : Proc(IMcastAddressAllocation*, UInt32),
    get_type_info_count : Proc(IMcastAddressAllocation*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMcastAddressAllocation*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMcastAddressAllocation*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMcastAddressAllocation*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Scopes : Proc(IMcastAddressAllocation*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enumerate_scopes : Proc(IMcastAddressAllocation*, Void**, Win32cr::Foundation::HRESULT),
    request_address : Proc(IMcastAddressAllocation*, Void*, Float64, Float64, Int32, Void**, Win32cr::Foundation::HRESULT),
    renew_address : Proc(IMcastAddressAllocation*, Int32, Void*, Void**, Win32cr::Foundation::HRESULT),
    release_address : Proc(IMcastAddressAllocation*, Void*, Win32cr::Foundation::HRESULT),
    create_lease_info : Proc(IMcastAddressAllocation*, Float64, Float64, UInt32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    create_lease_info_from_variant : Proc(IMcastAddressAllocation*, Float64, Float64, Win32cr::System::Com::VARIANT, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("df0daef1-a289-11d1-8697-006008b0e5d2")]
  record IMcastAddressAllocation, lpVtbl : IMcastAddressAllocationVtbl* do
    GUID = LibC::GUID.new(0xdf0daef1_u32, 0xa289_u16, 0x11d1_u16, StaticArray[0x86_u8, 0x97_u8, 0x0_u8, 0x60_u8, 0x8_u8, 0xb0_u8, 0xe5_u8, 0xd2_u8])
    def query_interface(this : IMcastAddressAllocation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMcastAddressAllocation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMcastAddressAllocation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMcastAddressAllocation*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMcastAddressAllocation*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMcastAddressAllocation*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMcastAddressAllocation*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Scopes(this : IMcastAddressAllocation*, pVariant : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Scopes.call(this, pVariant)
    end
    def enumerate_scopes(this : IMcastAddressAllocation*, ppEnumMcastScope : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_scopes.call(this, ppEnumMcastScope)
    end
    def request_address(this : IMcastAddressAllocation*, pScope : Void*, lease_start_time : Float64, lease_stop_time : Float64, num_addresses : Int32, ppLeaseResponse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_address.call(this, pScope, lease_start_time, lease_stop_time, num_addresses, ppLeaseResponse)
    end
    def renew_address(this : IMcastAddressAllocation*, lReserved : Int32, pRenewRequest : Void*, ppRenewResponse : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.renew_address.call(this, lReserved, pRenewRequest, ppRenewResponse)
    end
    def release_address(this : IMcastAddressAllocation*, pReleaseRequest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_address.call(this, pReleaseRequest)
    end
    def create_lease_info(this : IMcastAddressAllocation*, lease_start_time : Float64, lease_stop_time : Float64, dwNumAddresses : UInt32, ppAddresses : Win32cr::Foundation::PWSTR*, pRequestID : Win32cr::Foundation::PWSTR, pServerAddress : Win32cr::Foundation::PWSTR, ppReleaseRequest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lease_info.call(this, lease_start_time, lease_stop_time, dwNumAddresses, ppAddresses, pRequestID, pServerAddress, ppReleaseRequest)
    end
    def create_lease_info_from_variant(this : IMcastAddressAllocation*, lease_start_time : Float64, lease_stop_time : Float64, vAddresses : Win32cr::System::Com::VARIANT, pRequestID : Win32cr::Foundation::BSTR, pServerAddress : Win32cr::Foundation::BSTR, ppReleaseRequest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lease_info_from_variant.call(this, lease_start_time, lease_stop_time, vAddresses, pRequestID, pServerAddress, ppReleaseRequest)
    end

  end

  @[Extern]
  record ITnefVtbl,
    query_interface : Proc(ITnef*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITnef*, UInt32),
    release : Proc(ITnef*, UInt32),
    add_props : Proc(ITnef*, UInt32, UInt32, Void*, Win32cr::System::AddressBook::SPropTagArray*, Win32cr::Foundation::HRESULT),
    extract_props : Proc(ITnef*, UInt32, Win32cr::System::AddressBook::SPropTagArray*, Win32cr::Devices::Tapi::STnefProblemArray**, Win32cr::Foundation::HRESULT),
    finish : Proc(ITnef*, UInt32, UInt16*, Win32cr::Devices::Tapi::STnefProblemArray**, Win32cr::Foundation::HRESULT),
    open_tagged_body : Proc(ITnef*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_props : Proc(ITnef*, UInt32, UInt32, UInt32, Win32cr::System::AddressBook::SPropValue*, Win32cr::Foundation::HRESULT),
    encode_recips : Proc(ITnef*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    finish_component : Proc(ITnef*, UInt32, UInt32, Win32cr::System::AddressBook::SPropTagArray*, Win32cr::System::AddressBook::SPropValue*, Win32cr::System::AddressBook::SPropTagArray*, Win32cr::Devices::Tapi::STnefProblemArray**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ITnef, lpVtbl : ITnefVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : ITnef*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITnef*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITnef*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_props(this : ITnef*, ulFlags : UInt32, ulElemID : UInt32, lpvData : Void*, lpPropList : Win32cr::System::AddressBook::SPropTagArray*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_props.call(this, ulFlags, ulElemID, lpvData, lpPropList)
    end
    def extract_props(this : ITnef*, ulFlags : UInt32, lpPropList : Win32cr::System::AddressBook::SPropTagArray*, lpProblems : Win32cr::Devices::Tapi::STnefProblemArray**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.extract_props.call(this, ulFlags, lpPropList, lpProblems)
    end
    def finish(this : ITnef*, ulFlags : UInt32, lpKey : UInt16*, lpProblems : Win32cr::Devices::Tapi::STnefProblemArray**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish.call(this, ulFlags, lpKey, lpProblems)
    end
    def open_tagged_body(this : ITnef*, lpMessage : Void*, ulFlags : UInt32, lppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_tagged_body.call(this, lpMessage, ulFlags, lppStream)
    end
    def set_props(this : ITnef*, ulFlags : UInt32, ulElemID : UInt32, cValues : UInt32, lpProps : Win32cr::System::AddressBook::SPropValue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_props.call(this, ulFlags, ulElemID, cValues, lpProps)
    end
    def encode_recips(this : ITnef*, ulFlags : UInt32, lpRecipientTable : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encode_recips.call(this, ulFlags, lpRecipientTable)
    end
    def finish_component(this : ITnef*, ulFlags : UInt32, ulComponentID : UInt32, lpCustomPropList : Win32cr::System::AddressBook::SPropTagArray*, lpCustomProps : Win32cr::System::AddressBook::SPropValue*, lpPropList : Win32cr::System::AddressBook::SPropTagArray*, lpProblems : Win32cr::Devices::Tapi::STnefProblemArray**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish_component.call(this, ulFlags, ulComponentID, lpCustomPropList, lpCustomProps, lpPropList, lpProblems)
    end

  end

  @[Link("tapi32")]
  @[Link("mapi32")]
  lib C
    fun lineAccept(hCall : UInt32, lpsUserUserInfo : Win32cr::Foundation::PSTR, dwSize : UInt32) : Int32

    fun lineAddProvider(lpszProviderFilename : Win32cr::Foundation::PSTR, hwndOwner : Win32cr::Foundation::HWND, lpdwPermanentProviderID : UInt32*) : Int32

    fun lineAddProviderA(lpszProviderFilename : Win32cr::Foundation::PSTR, hwndOwner : Win32cr::Foundation::HWND, lpdwPermanentProviderID : UInt32*) : Int32

    fun lineAddProviderW(lpszProviderFilename : Win32cr::Foundation::PWSTR, hwndOwner : Win32cr::Foundation::HWND, lpdwPermanentProviderID : UInt32*) : Int32

    fun lineAddToConference(hConfCall : UInt32, hConsultCall : UInt32) : Int32

    fun lineAgentSpecific(hLine : UInt32, dwAddressID : UInt32, dwAgentExtensionIDIndex : UInt32, lpParams : Void*, dwSize : UInt32) : Int32

    fun lineAnswer(hCall : UInt32, lpsUserUserInfo : Win32cr::Foundation::PSTR, dwSize : UInt32) : Int32

    fun lineBlindTransfer(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32) : Int32

    fun lineBlindTransferA(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32) : Int32

    fun lineBlindTransferW(hCall : UInt32, lpszDestAddressW : Win32cr::Foundation::PWSTR, dwCountryCode : UInt32) : Int32

    fun lineClose(hLine : UInt32) : Int32

    fun lineCompleteCall(hCall : UInt32, lpdwCompletionID : UInt32*, dwCompletionMode : UInt32, dwMessageID : UInt32) : Int32

    fun lineCompleteTransfer(hCall : UInt32, hConsultCall : UInt32, lphConfCall : UInt32*, dwTransferMode : UInt32) : Int32

    fun lineConfigDialog(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineConfigDialogA(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineConfigDialogW(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PWSTR) : Int32

    fun lineConfigDialogEdit(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PSTR, lpDeviceConfigIn : Void*, dwSize : UInt32, lpDeviceConfigOut : Win32cr::Devices::Tapi::VARSTRING*) : Int32

    fun lineConfigDialogEditA(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PSTR, lpDeviceConfigIn : Void*, dwSize : UInt32, lpDeviceConfigOut : Win32cr::Devices::Tapi::VARSTRING*) : Int32

    fun lineConfigDialogEditW(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PWSTR, lpDeviceConfigIn : Void*, dwSize : UInt32, lpDeviceConfigOut : Win32cr::Devices::Tapi::VARSTRING*) : Int32

    fun lineConfigProvider(hwndOwner : Win32cr::Foundation::HWND, dwPermanentProviderID : UInt32) : Int32

    fun lineCreateAgentW(hLine : UInt32, lpszAgentID : Win32cr::Foundation::PWSTR, lpszAgentPIN : Win32cr::Foundation::PWSTR, lphAgent : UInt32*) : Int32

    fun lineCreateAgentA(hLine : UInt32, lpszAgentID : Win32cr::Foundation::PSTR, lpszAgentPIN : Win32cr::Foundation::PSTR, lphAgent : UInt32*) : Int32

    fun lineCreateAgentSessionW(hLine : UInt32, hAgent : UInt32, lpszAgentPIN : Win32cr::Foundation::PWSTR, dwWorkingAddressID : UInt32, lpGroupID : LibC::GUID*, lphAgentSession : UInt32*) : Int32

    fun lineCreateAgentSessionA(hLine : UInt32, hAgent : UInt32, lpszAgentPIN : Win32cr::Foundation::PSTR, dwWorkingAddressID : UInt32, lpGroupID : LibC::GUID*, lphAgentSession : UInt32*) : Int32

    fun lineDeallocateCall(hCall : UInt32) : Int32

    fun lineDevSpecific(hLine : UInt32, dwAddressID : UInt32, hCall : UInt32, lpParams : Void*, dwSize : UInt32) : Int32

    fun lineDevSpecificFeature(hLine : UInt32, dwFeature : UInt32, lpParams : Void*, dwSize : UInt32) : Int32

    fun lineDial(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32) : Int32

    fun lineDialA(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32) : Int32

    fun lineDialW(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PWSTR, dwCountryCode : UInt32) : Int32

    fun lineDrop(hCall : UInt32, lpsUserUserInfo : Win32cr::Foundation::PSTR, dwSize : UInt32) : Int32

    fun lineForward(hLine : UInt32, bAllAddresses : UInt32, dwAddressID : UInt32, lpForwardList : Win32cr::Devices::Tapi::LINEFORWARDLIST*, dwNumRingsNoAnswer : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineForwardA(hLine : UInt32, bAllAddresses : UInt32, dwAddressID : UInt32, lpForwardList : Win32cr::Devices::Tapi::LINEFORWARDLIST*, dwNumRingsNoAnswer : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineForwardW(hLine : UInt32, bAllAddresses : UInt32, dwAddressID : UInt32, lpForwardList : Win32cr::Devices::Tapi::LINEFORWARDLIST*, dwNumRingsNoAnswer : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineGatherDigits(hCall : UInt32, dwDigitModes : UInt32, lpsDigits : UInt8*, dwNumDigits : UInt32, lpszTerminationDigits : Win32cr::Foundation::PSTR, dwFirstDigitTimeout : UInt32, dwInterDigitTimeout : UInt32) : Int32

    fun lineGatherDigitsA(hCall : UInt32, dwDigitModes : UInt32, lpsDigits : UInt8*, dwNumDigits : UInt32, lpszTerminationDigits : Win32cr::Foundation::PSTR, dwFirstDigitTimeout : UInt32, dwInterDigitTimeout : UInt32) : Int32

    fun lineGatherDigitsW(hCall : UInt32, dwDigitModes : UInt32, lpsDigits : UInt16*, dwNumDigits : UInt32, lpszTerminationDigits : Win32cr::Foundation::PWSTR, dwFirstDigitTimeout : UInt32, dwInterDigitTimeout : UInt32) : Int32

    fun lineGenerateDigits(hCall : UInt32, dwDigitMode : UInt32, lpszDigits : Win32cr::Foundation::PSTR, dwDuration : UInt32) : Int32

    fun lineGenerateDigitsA(hCall : UInt32, dwDigitMode : UInt32, lpszDigits : Win32cr::Foundation::PSTR, dwDuration : UInt32) : Int32

    fun lineGenerateDigitsW(hCall : UInt32, dwDigitMode : UInt32, lpszDigits : Win32cr::Foundation::PWSTR, dwDuration : UInt32) : Int32

    fun lineGenerateTone(hCall : UInt32, dwToneMode : UInt32, dwDuration : UInt32, dwNumTones : UInt32, lpTones : Win32cr::Devices::Tapi::LINEGENERATETONE*) : Int32

    fun lineGetAddressCaps(hLineApp : UInt32, dwDeviceID : UInt32, dwAddressID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpAddressCaps : Win32cr::Devices::Tapi::LINEADDRESSCAPS*) : Int32

    fun lineGetAddressCapsA(hLineApp : UInt32, dwDeviceID : UInt32, dwAddressID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpAddressCaps : Win32cr::Devices::Tapi::LINEADDRESSCAPS*) : Int32

    fun lineGetAddressCapsW(hLineApp : UInt32, dwDeviceID : UInt32, dwAddressID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpAddressCaps : Win32cr::Devices::Tapi::LINEADDRESSCAPS*) : Int32

    fun lineGetAddressID(hLine : UInt32, lpdwAddressID : UInt32*, dwAddressMode : UInt32, lpsAddress : Win32cr::Foundation::PSTR, dwSize : UInt32) : Int32

    fun lineGetAddressIDA(hLine : UInt32, lpdwAddressID : UInt32*, dwAddressMode : UInt32, lpsAddress : Win32cr::Foundation::PSTR, dwSize : UInt32) : Int32

    fun lineGetAddressIDW(hLine : UInt32, lpdwAddressID : UInt32*, dwAddressMode : UInt32, lpsAddress : Win32cr::Foundation::PWSTR, dwSize : UInt32) : Int32

    fun lineGetAddressStatus(hLine : UInt32, dwAddressID : UInt32, lpAddressStatus : Win32cr::Devices::Tapi::LINEADDRESSSTATUS*) : Int32

    fun lineGetAddressStatusA(hLine : UInt32, dwAddressID : UInt32, lpAddressStatus : Win32cr::Devices::Tapi::LINEADDRESSSTATUS*) : Int32

    fun lineGetAddressStatusW(hLine : UInt32, dwAddressID : UInt32, lpAddressStatus : Win32cr::Devices::Tapi::LINEADDRESSSTATUS*) : Int32

    fun lineGetAgentActivityListA(hLine : UInt32, dwAddressID : UInt32, lpAgentActivityList : Win32cr::Devices::Tapi::LINEAGENTACTIVITYLIST*) : Int32

    fun lineGetAgentActivityListW(hLine : UInt32, dwAddressID : UInt32, lpAgentActivityList : Win32cr::Devices::Tapi::LINEAGENTACTIVITYLIST*) : Int32

    fun lineGetAgentCapsA(hLineApp : UInt32, dwDeviceID : UInt32, dwAddressID : UInt32, dwAppAPIVersion : UInt32, lpAgentCaps : Win32cr::Devices::Tapi::LINEAGENTCAPS*) : Int32

    fun lineGetAgentCapsW(hLineApp : UInt32, dwDeviceID : UInt32, dwAddressID : UInt32, dwAppAPIVersion : UInt32, lpAgentCaps : Win32cr::Devices::Tapi::LINEAGENTCAPS*) : Int32

    fun lineGetAgentGroupListA(hLine : UInt32, dwAddressID : UInt32, lpAgentGroupList : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST*) : Int32

    fun lineGetAgentGroupListW(hLine : UInt32, dwAddressID : UInt32, lpAgentGroupList : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST*) : Int32

    fun lineGetAgentInfo(hLine : UInt32, hAgent : UInt32, lpAgentInfo : Win32cr::Devices::Tapi::LINEAGENTINFO*) : Int32

    fun lineGetAgentSessionInfo(hLine : UInt32, hAgentSession : UInt32, lpAgentSessionInfo : Win32cr::Devices::Tapi::LINEAGENTSESSIONINFO*) : Int32

    fun lineGetAgentSessionList(hLine : UInt32, hAgent : UInt32, lpAgentSessionList : Win32cr::Devices::Tapi::LINEAGENTSESSIONLIST*) : Int32

    fun lineGetAgentStatusA(hLine : UInt32, dwAddressID : UInt32, lpAgentStatus : Win32cr::Devices::Tapi::LINEAGENTSTATUS*) : Int32

    fun lineGetAgentStatusW(hLine : UInt32, dwAddressID : UInt32, lpAgentStatus : Win32cr::Devices::Tapi::LINEAGENTSTATUS*) : Int32

    fun lineGetAppPriority(lpszAppFilename : Win32cr::Foundation::PSTR, dwMediaMode : UInt32, lpExtensionID : Win32cr::Devices::Tapi::LINEEXTENSIONID*, dwRequestMode : UInt32, lpExtensionName : Win32cr::Devices::Tapi::VARSTRING*, lpdwPriority : UInt32*) : Int32

    fun lineGetAppPriorityA(lpszAppFilename : Win32cr::Foundation::PSTR, dwMediaMode : UInt32, lpExtensionID : Win32cr::Devices::Tapi::LINEEXTENSIONID*, dwRequestMode : UInt32, lpExtensionName : Win32cr::Devices::Tapi::VARSTRING*, lpdwPriority : UInt32*) : Int32

    fun lineGetAppPriorityW(lpszAppFilename : Win32cr::Foundation::PWSTR, dwMediaMode : UInt32, lpExtensionID : Win32cr::Devices::Tapi::LINEEXTENSIONID*, dwRequestMode : UInt32, lpExtensionName : Win32cr::Devices::Tapi::VARSTRING*, lpdwPriority : UInt32*) : Int32

    fun lineGetCallInfo(hCall : UInt32, lpCallInfo : Win32cr::Devices::Tapi::LINECALLINFO*) : Int32

    fun lineGetCallInfoA(hCall : UInt32, lpCallInfo : Win32cr::Devices::Tapi::LINECALLINFO*) : Int32

    fun lineGetCallInfoW(hCall : UInt32, lpCallInfo : Win32cr::Devices::Tapi::LINECALLINFO*) : Int32

    fun lineGetCallStatus(hCall : UInt32, lpCallStatus : Win32cr::Devices::Tapi::LINECALLSTATUS*) : Int32

    fun lineGetConfRelatedCalls(hCall : UInt32, lpCallList : Win32cr::Devices::Tapi::LINECALLLIST*) : Int32

    fun lineGetCountry(dwCountryID : UInt32, dwAPIVersion : UInt32, lpLineCountryList : Win32cr::Devices::Tapi::LINECOUNTRYLIST*) : Int32

    fun lineGetCountryA(dwCountryID : UInt32, dwAPIVersion : UInt32, lpLineCountryList : Win32cr::Devices::Tapi::LINECOUNTRYLIST*) : Int32

    fun lineGetCountryW(dwCountryID : UInt32, dwAPIVersion : UInt32, lpLineCountryList : Win32cr::Devices::Tapi::LINECOUNTRYLIST*) : Int32

    fun lineGetDevCaps(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpLineDevCaps : Win32cr::Devices::Tapi::LINEDEVCAPS*) : Int32

    fun lineGetDevCapsA(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpLineDevCaps : Win32cr::Devices::Tapi::LINEDEVCAPS*) : Int32

    fun lineGetDevCapsW(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpLineDevCaps : Win32cr::Devices::Tapi::LINEDEVCAPS*) : Int32

    fun lineGetDevConfig(dwDeviceID : UInt32, lpDeviceConfig : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineGetDevConfigA(dwDeviceID : UInt32, lpDeviceConfig : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineGetDevConfigW(dwDeviceID : UInt32, lpDeviceConfig : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PWSTR) : Int32

    fun lineGetGroupListA(hLine : UInt32, lpGroupList : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST*) : Int32

    fun lineGetGroupListW(hLine : UInt32, lpGroupList : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST*) : Int32

    fun lineGetIcon(dwDeviceID : UInt32, lpszDeviceClass : Win32cr::Foundation::PSTR, lphIcon : LibC::IntPtrT*) : Int32

    fun lineGetIconA(dwDeviceID : UInt32, lpszDeviceClass : Win32cr::Foundation::PSTR, lphIcon : LibC::IntPtrT*) : Int32

    fun lineGetIconW(dwDeviceID : UInt32, lpszDeviceClass : Win32cr::Foundation::PWSTR, lphIcon : LibC::IntPtrT*) : Int32

    fun lineGetID(hLine : UInt32, dwAddressID : UInt32, hCall : UInt32, dwSelect : UInt32, lpDeviceID : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineGetIDA(hLine : UInt32, dwAddressID : UInt32, hCall : UInt32, dwSelect : UInt32, lpDeviceID : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineGetIDW(hLine : UInt32, dwAddressID : UInt32, hCall : UInt32, dwSelect : UInt32, lpDeviceID : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PWSTR) : Int32

    fun lineGetLineDevStatus(hLine : UInt32, lpLineDevStatus : Win32cr::Devices::Tapi::LINEDEVSTATUS*) : Int32

    fun lineGetLineDevStatusA(hLine : UInt32, lpLineDevStatus : Win32cr::Devices::Tapi::LINEDEVSTATUS*) : Int32

    fun lineGetLineDevStatusW(hLine : UInt32, lpLineDevStatus : Win32cr::Devices::Tapi::LINEDEVSTATUS*) : Int32

    fun lineGetMessage(hLineApp : UInt32, lpMessage : Win32cr::Devices::Tapi::LINEMESSAGE*, dwTimeout : UInt32) : Int32

    fun lineGetNewCalls(hLine : UInt32, dwAddressID : UInt32, dwSelect : UInt32, lpCallList : Win32cr::Devices::Tapi::LINECALLLIST*) : Int32

    fun lineGetNumRings(hLine : UInt32, dwAddressID : UInt32, lpdwNumRings : UInt32*) : Int32

    fun lineGetProviderList(dwAPIVersion : UInt32, lpProviderList : Win32cr::Devices::Tapi::LINEPROVIDERLIST*) : Int32

    fun lineGetProviderListA(dwAPIVersion : UInt32, lpProviderList : Win32cr::Devices::Tapi::LINEPROVIDERLIST*) : Int32

    fun lineGetProviderListW(dwAPIVersion : UInt32, lpProviderList : Win32cr::Devices::Tapi::LINEPROVIDERLIST*) : Int32

    fun lineGetProxyStatus(hLineApp : UInt32, dwDeviceID : UInt32, dwAppAPIVersion : UInt32, lpLineProxyReqestList : Win32cr::Devices::Tapi::LINEPROXYREQUESTLIST*) : Int32

    fun lineGetQueueInfo(hLine : UInt32, dwQueueID : UInt32, lpLineQueueInfo : Win32cr::Devices::Tapi::LINEQUEUEINFO*) : Int32

    fun lineGetQueueListA(hLine : UInt32, lpGroupID : LibC::GUID*, lpQueueList : Win32cr::Devices::Tapi::LINEQUEUELIST*) : Int32

    fun lineGetQueueListW(hLine : UInt32, lpGroupID : LibC::GUID*, lpQueueList : Win32cr::Devices::Tapi::LINEQUEUELIST*) : Int32

    fun lineGetRequest(hLineApp : UInt32, dwRequestMode : UInt32, lpRequestBuffer : Void*) : Int32

    fun lineGetRequestA(hLineApp : UInt32, dwRequestMode : UInt32, lpRequestBuffer : Void*) : Int32

    fun lineGetRequestW(hLineApp : UInt32, dwRequestMode : UInt32, lpRequestBuffer : Void*) : Int32

    fun lineGetStatusMessages(hLine : UInt32, lpdwLineStates : UInt32*, lpdwAddressStates : UInt32*) : Int32

    fun lineGetTranslateCaps(hLineApp : UInt32, dwAPIVersion : UInt32, lpTranslateCaps : Win32cr::Devices::Tapi::LINETRANSLATECAPS*) : Int32

    fun lineGetTranslateCapsA(hLineApp : UInt32, dwAPIVersion : UInt32, lpTranslateCaps : Win32cr::Devices::Tapi::LINETRANSLATECAPS*) : Int32

    fun lineGetTranslateCapsW(hLineApp : UInt32, dwAPIVersion : UInt32, lpTranslateCaps : Win32cr::Devices::Tapi::LINETRANSLATECAPS*) : Int32

    fun lineHandoff(hCall : UInt32, lpszFileName : Win32cr::Foundation::PSTR, dwMediaMode : UInt32) : Int32

    fun lineHandoffA(hCall : UInt32, lpszFileName : Win32cr::Foundation::PSTR, dwMediaMode : UInt32) : Int32

    fun lineHandoffW(hCall : UInt32, lpszFileName : Win32cr::Foundation::PWSTR, dwMediaMode : UInt32) : Int32

    fun lineHold(hCall : UInt32) : Int32

    fun lineInitialize(lphLineApp : UInt32*, hInstance : Win32cr::Foundation::HINSTANCE, lpfnCallback : Win32cr::Devices::Tapi::LINECALLBACK, lpszAppName : Win32cr::Foundation::PSTR, lpdwNumDevs : UInt32*) : Int32

    fun lineInitializeExA(lphLineApp : UInt32*, hInstance : Win32cr::Foundation::HINSTANCE, lpfnCallback : Win32cr::Devices::Tapi::LINECALLBACK, lpszFriendlyAppName : Win32cr::Foundation::PSTR, lpdwNumDevs : UInt32*, lpdwAPIVersion : UInt32*, lpLineInitializeExParams : Win32cr::Devices::Tapi::LINEINITIALIZEEXPARAMS*) : Int32

    fun lineInitializeExW(lphLineApp : UInt32*, hInstance : Win32cr::Foundation::HINSTANCE, lpfnCallback : Win32cr::Devices::Tapi::LINECALLBACK, lpszFriendlyAppName : Win32cr::Foundation::PWSTR, lpdwNumDevs : UInt32*, lpdwAPIVersion : UInt32*, lpLineInitializeExParams : Win32cr::Devices::Tapi::LINEINITIALIZEEXPARAMS*) : Int32

    fun lineMakeCall(hLine : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineMakeCallA(hLine : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineMakeCallW(hLine : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PWSTR, dwCountryCode : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineMonitorDigits(hCall : UInt32, dwDigitModes : UInt32) : Int32

    fun lineMonitorMedia(hCall : UInt32, dwMediaModes : UInt32) : Int32

    fun lineMonitorTones(hCall : UInt32, lpToneList : Win32cr::Devices::Tapi::LINEMONITORTONE*, dwNumEntries : UInt32) : Int32

    fun lineNegotiateAPIVersion(hLineApp : UInt32, dwDeviceID : UInt32, dwAPILowVersion : UInt32, dwAPIHighVersion : UInt32, lpdwAPIVersion : UInt32*, lpExtensionID : Win32cr::Devices::Tapi::LINEEXTENSIONID*) : Int32

    fun lineNegotiateExtVersion(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtLowVersion : UInt32, dwExtHighVersion : UInt32, lpdwExtVersion : UInt32*) : Int32

    fun lineOpen(hLineApp : UInt32, dwDeviceID : UInt32, lphLine : UInt32*, dwAPIVersion : UInt32, dwExtVersion : UInt32, dwCallbackInstance : LibC::UIntPtrT, dwPrivileges : UInt32, dwMediaModes : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineOpenA(hLineApp : UInt32, dwDeviceID : UInt32, lphLine : UInt32*, dwAPIVersion : UInt32, dwExtVersion : UInt32, dwCallbackInstance : LibC::UIntPtrT, dwPrivileges : UInt32, dwMediaModes : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineOpenW(hLineApp : UInt32, dwDeviceID : UInt32, lphLine : UInt32*, dwAPIVersion : UInt32, dwExtVersion : UInt32, dwCallbackInstance : LibC::UIntPtrT, dwPrivileges : UInt32, dwMediaModes : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun linePark(hCall : UInt32, dwParkMode : UInt32, lpszDirAddress : Win32cr::Foundation::PSTR, lpNonDirAddress : Win32cr::Devices::Tapi::VARSTRING*) : Int32

    fun lineParkA(hCall : UInt32, dwParkMode : UInt32, lpszDirAddress : Win32cr::Foundation::PSTR, lpNonDirAddress : Win32cr::Devices::Tapi::VARSTRING*) : Int32

    fun lineParkW(hCall : UInt32, dwParkMode : UInt32, lpszDirAddress : Win32cr::Foundation::PWSTR, lpNonDirAddress : Win32cr::Devices::Tapi::VARSTRING*) : Int32

    fun linePickup(hLine : UInt32, dwAddressID : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PSTR, lpszGroupID : Win32cr::Foundation::PSTR) : Int32

    fun linePickupA(hLine : UInt32, dwAddressID : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PSTR, lpszGroupID : Win32cr::Foundation::PSTR) : Int32

    fun linePickupW(hLine : UInt32, dwAddressID : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PWSTR, lpszGroupID : Win32cr::Foundation::PWSTR) : Int32

    fun linePrepareAddToConference(hConfCall : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun linePrepareAddToConferenceA(hConfCall : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun linePrepareAddToConferenceW(hConfCall : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineProxyMessage(hLine : UInt32, hCall : UInt32, dwMsg : UInt32, dwParam1 : UInt32, dwParam2 : UInt32, dwParam3 : UInt32) : Int32

    fun lineProxyResponse(hLine : UInt32, lpProxyRequest : Win32cr::Devices::Tapi::LINEPROXYREQUEST*, dwResult : UInt32) : Int32

    fun lineRedirect(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32) : Int32

    fun lineRedirectA(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, dwCountryCode : UInt32) : Int32

    fun lineRedirectW(hCall : UInt32, lpszDestAddress : Win32cr::Foundation::PWSTR, dwCountryCode : UInt32) : Int32

    fun lineRegisterRequestRecipient(hLineApp : UInt32, dwRegistrationInstance : UInt32, dwRequestMode : UInt32, bEnable : UInt32) : Int32

    fun lineReleaseUserUserInfo(hCall : UInt32) : Int32

    fun lineRemoveFromConference(hCall : UInt32) : Int32

    fun lineRemoveProvider(dwPermanentProviderID : UInt32, hwndOwner : Win32cr::Foundation::HWND) : Int32

    fun lineSecureCall(hCall : UInt32) : Int32

    fun lineSendUserUserInfo(hCall : UInt32, lpsUserUserInfo : Win32cr::Foundation::PSTR, dwSize : UInt32) : Int32

    fun lineSetAgentActivity(hLine : UInt32, dwAddressID : UInt32, dwActivityID : UInt32) : Int32

    fun lineSetAgentGroup(hLine : UInt32, dwAddressID : UInt32, lpAgentGroupList : Win32cr::Devices::Tapi::LINEAGENTGROUPLIST*) : Int32

    fun lineSetAgentMeasurementPeriod(hLine : UInt32, hAgent : UInt32, dwMeasurementPeriod : UInt32) : Int32

    fun lineSetAgentSessionState(hLine : UInt32, hAgentSession : UInt32, dwAgentSessionState : UInt32, dwNextAgentSessionState : UInt32) : Int32

    fun lineSetAgentStateEx(hLine : UInt32, hAgent : UInt32, dwAgentState : UInt32, dwNextAgentState : UInt32) : Int32

    fun lineSetAgentState(hLine : UInt32, dwAddressID : UInt32, dwAgentState : UInt32, dwNextAgentState : UInt32) : Int32

    fun lineSetAppPriority(lpszAppFilename : Win32cr::Foundation::PSTR, dwMediaMode : UInt32, lpExtensionID : Win32cr::Devices::Tapi::LINEEXTENSIONID*, dwRequestMode : UInt32, lpszExtensionName : Win32cr::Foundation::PSTR, dwPriority : UInt32) : Int32

    fun lineSetAppPriorityA(lpszAppFilename : Win32cr::Foundation::PSTR, dwMediaMode : UInt32, lpExtensionID : Win32cr::Devices::Tapi::LINEEXTENSIONID*, dwRequestMode : UInt32, lpszExtensionName : Win32cr::Foundation::PSTR, dwPriority : UInt32) : Int32

    fun lineSetAppPriorityW(lpszAppFilename : Win32cr::Foundation::PWSTR, dwMediaMode : UInt32, lpExtensionID : Win32cr::Devices::Tapi::LINEEXTENSIONID*, dwRequestMode : UInt32, lpszExtensionName : Win32cr::Foundation::PWSTR, dwPriority : UInt32) : Int32

    fun lineSetAppSpecific(hCall : UInt32, dwAppSpecific : UInt32) : Int32

    fun lineSetCallData(hCall : UInt32, lpCallData : Void*, dwSize : UInt32) : Int32

    fun lineSetCallParams(hCall : UInt32, dwBearerMode : UInt32, dwMinRate : UInt32, dwMaxRate : UInt32, lpDialParams : Win32cr::Devices::Tapi::LINEDIALPARAMS*) : Int32

    fun lineSetCallPrivilege(hCall : UInt32, dwCallPrivilege : UInt32) : Int32

    fun lineSetCallQualityOfService(hCall : UInt32, lpSendingFlowspec : Void*, dwSendingFlowspecSize : UInt32, lpReceivingFlowspec : Void*, dwReceivingFlowspecSize : UInt32) : Int32

    fun lineSetCallTreatment(hCall : UInt32, dwTreatment : UInt32) : Int32

    fun lineSetCurrentLocation(hLineApp : UInt32, dwLocation : UInt32) : Int32

    fun lineSetDevConfig(dwDeviceID : UInt32, lpDeviceConfig : Void*, dwSize : UInt32, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineSetDevConfigA(dwDeviceID : UInt32, lpDeviceConfig : Void*, dwSize : UInt32, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun lineSetDevConfigW(dwDeviceID : UInt32, lpDeviceConfig : Void*, dwSize : UInt32, lpszDeviceClass : Win32cr::Foundation::PWSTR) : Int32

    fun lineSetLineDevStatus(hLine : UInt32, dwStatusToChange : UInt32, fStatus : UInt32) : Int32

    fun lineSetMediaControl(hLine : UInt32, dwAddressID : UInt32, hCall : UInt32, dwSelect : UInt32, lpDigitList : Win32cr::Devices::Tapi::LINEMEDIACONTROLDIGIT*, dwDigitNumEntries : UInt32, lpMediaList : Win32cr::Devices::Tapi::LINEMEDIACONTROLMEDIA*, dwMediaNumEntries : UInt32, lpToneList : Win32cr::Devices::Tapi::LINEMEDIACONTROLTONE*, dwToneNumEntries : UInt32, lpCallStateList : Win32cr::Devices::Tapi::LINEMEDIACONTROLCALLSTATE*, dwCallStateNumEntries : UInt32) : Int32

    fun lineSetMediaMode(hCall : UInt32, dwMediaModes : UInt32) : Int32

    fun lineSetQueueMeasurementPeriod(hLine : UInt32, dwQueueID : UInt32, dwMeasurementPeriod : UInt32) : Int32

    fun lineSetNumRings(hLine : UInt32, dwAddressID : UInt32, dwNumRings : UInt32) : Int32

    fun lineSetStatusMessages(hLine : UInt32, dwLineStates : UInt32, dwAddressStates : UInt32) : Int32

    fun lineSetTerminal(hLine : UInt32, dwAddressID : UInt32, hCall : UInt32, dwSelect : UInt32, dwTerminalModes : UInt32, dwTerminalID : UInt32, bEnable : UInt32) : Int32

    fun lineSetTollList(hLineApp : UInt32, dwDeviceID : UInt32, lpszAddressIn : Win32cr::Foundation::PSTR, dwTollListOption : UInt32) : Int32

    fun lineSetTollListA(hLineApp : UInt32, dwDeviceID : UInt32, lpszAddressIn : Win32cr::Foundation::PSTR, dwTollListOption : UInt32) : Int32

    fun lineSetTollListW(hLineApp : UInt32, dwDeviceID : UInt32, lpszAddressInW : Win32cr::Foundation::PWSTR, dwTollListOption : UInt32) : Int32

    fun lineSetupConference(hCall : UInt32, hLine : UInt32, lphConfCall : UInt32*, lphConsultCall : UInt32*, dwNumParties : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineSetupConferenceA(hCall : UInt32, hLine : UInt32, lphConfCall : UInt32*, lphConsultCall : UInt32*, dwNumParties : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineSetupConferenceW(hCall : UInt32, hLine : UInt32, lphConfCall : UInt32*, lphConsultCall : UInt32*, dwNumParties : UInt32, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineSetupTransfer(hCall : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineSetupTransferA(hCall : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineSetupTransferW(hCall : UInt32, lphConsultCall : UInt32*, lpCallParams : Win32cr::Devices::Tapi::LINECALLPARAMS*) : Int32

    fun lineShutdown(hLineApp : UInt32) : Int32

    fun lineSwapHold(hActiveCall : UInt32, hHeldCall : UInt32) : Int32

    fun lineTranslateAddress(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, lpszAddressIn : Win32cr::Foundation::PSTR, dwCard : UInt32, dwTranslateOptions : UInt32, lpTranslateOutput : Win32cr::Devices::Tapi::LINETRANSLATEOUTPUT*) : Int32

    fun lineTranslateAddressA(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, lpszAddressIn : Win32cr::Foundation::PSTR, dwCard : UInt32, dwTranslateOptions : UInt32, lpTranslateOutput : Win32cr::Devices::Tapi::LINETRANSLATEOUTPUT*) : Int32

    fun lineTranslateAddressW(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, lpszAddressIn : Win32cr::Foundation::PWSTR, dwCard : UInt32, dwTranslateOptions : UInt32, lpTranslateOutput : Win32cr::Devices::Tapi::LINETRANSLATEOUTPUT*) : Int32

    fun lineTranslateDialog(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszAddressIn : Win32cr::Foundation::PSTR) : Int32

    fun lineTranslateDialogA(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszAddressIn : Win32cr::Foundation::PSTR) : Int32

    fun lineTranslateDialogW(hLineApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszAddressIn : Win32cr::Foundation::PWSTR) : Int32

    fun lineUncompleteCall(hLine : UInt32, dwCompletionID : UInt32) : Int32

    fun lineUnhold(hCall : UInt32) : Int32

    fun lineUnpark(hLine : UInt32, dwAddressID : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PSTR) : Int32

    fun lineUnparkA(hLine : UInt32, dwAddressID : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PSTR) : Int32

    fun lineUnparkW(hLine : UInt32, dwAddressID : UInt32, lphCall : UInt32*, lpszDestAddress : Win32cr::Foundation::PWSTR) : Int32

    fun phoneClose(hPhone : UInt32) : Int32

    fun phoneConfigDialog(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun phoneConfigDialogA(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun phoneConfigDialogW(dwDeviceID : UInt32, hwndOwner : Win32cr::Foundation::HWND, lpszDeviceClass : Win32cr::Foundation::PWSTR) : Int32

    fun phoneDevSpecific(hPhone : UInt32, lpParams : Void*, dwSize : UInt32) : Int32

    fun phoneGetButtonInfo(hPhone : UInt32, dwButtonLampID : UInt32, lpButtonInfo : Win32cr::Devices::Tapi::PHONEBUTTONINFO*) : Int32

    fun phoneGetButtonInfoA(hPhone : UInt32, dwButtonLampID : UInt32, lpButtonInfo : Win32cr::Devices::Tapi::PHONEBUTTONINFO*) : Int32

    fun phoneGetButtonInfoW(hPhone : UInt32, dwButtonLampID : UInt32, lpButtonInfo : Win32cr::Devices::Tapi::PHONEBUTTONINFO*) : Int32

    fun phoneGetData(hPhone : UInt32, dwDataID : UInt32, lpData : Void*, dwSize : UInt32) : Int32

    fun phoneGetDevCaps(hPhoneApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpPhoneCaps : Win32cr::Devices::Tapi::PHONECAPS*) : Int32

    fun phoneGetDevCapsA(hPhoneApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpPhoneCaps : Win32cr::Devices::Tapi::PHONECAPS*) : Int32

    fun phoneGetDevCapsW(hPhoneApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtVersion : UInt32, lpPhoneCaps : Win32cr::Devices::Tapi::PHONECAPS*) : Int32

    fun phoneGetDisplay(hPhone : UInt32, lpDisplay : Win32cr::Devices::Tapi::VARSTRING*) : Int32

    fun phoneGetGain(hPhone : UInt32, dwHookSwitchDev : UInt32, lpdwGain : UInt32*) : Int32

    fun phoneGetHookSwitch(hPhone : UInt32, lpdwHookSwitchDevs : UInt32*) : Int32

    fun phoneGetIcon(dwDeviceID : UInt32, lpszDeviceClass : Win32cr::Foundation::PSTR, lphIcon : LibC::IntPtrT*) : Int32

    fun phoneGetIconA(dwDeviceID : UInt32, lpszDeviceClass : Win32cr::Foundation::PSTR, lphIcon : LibC::IntPtrT*) : Int32

    fun phoneGetIconW(dwDeviceID : UInt32, lpszDeviceClass : Win32cr::Foundation::PWSTR, lphIcon : LibC::IntPtrT*) : Int32

    fun phoneGetID(hPhone : UInt32, lpDeviceID : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun phoneGetIDA(hPhone : UInt32, lpDeviceID : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PSTR) : Int32

    fun phoneGetIDW(hPhone : UInt32, lpDeviceID : Win32cr::Devices::Tapi::VARSTRING*, lpszDeviceClass : Win32cr::Foundation::PWSTR) : Int32

    fun phoneGetLamp(hPhone : UInt32, dwButtonLampID : UInt32, lpdwLampMode : UInt32*) : Int32

    fun phoneGetMessage(hPhoneApp : UInt32, lpMessage : Win32cr::Devices::Tapi::PHONEMESSAGE*, dwTimeout : UInt32) : Int32

    fun phoneGetRing(hPhone : UInt32, lpdwRingMode : UInt32*, lpdwVolume : UInt32*) : Int32

    fun phoneGetStatus(hPhone : UInt32, lpPhoneStatus : Win32cr::Devices::Tapi::PHONESTATUS*) : Int32

    fun phoneGetStatusA(hPhone : UInt32, lpPhoneStatus : Win32cr::Devices::Tapi::PHONESTATUS*) : Int32

    fun phoneGetStatusW(hPhone : UInt32, lpPhoneStatus : Win32cr::Devices::Tapi::PHONESTATUS*) : Int32

    fun phoneGetStatusMessages(hPhone : UInt32, lpdwPhoneStates : UInt32*, lpdwButtonModes : UInt32*, lpdwButtonStates : UInt32*) : Int32

    fun phoneGetVolume(hPhone : UInt32, dwHookSwitchDev : UInt32, lpdwVolume : UInt32*) : Int32

    fun phoneInitialize(lphPhoneApp : UInt32*, hInstance : Win32cr::Foundation::HINSTANCE, lpfnCallback : Win32cr::Devices::Tapi::PHONECALLBACK, lpszAppName : Win32cr::Foundation::PSTR, lpdwNumDevs : UInt32*) : Int32

    fun phoneInitializeExA(lphPhoneApp : UInt32*, hInstance : Win32cr::Foundation::HINSTANCE, lpfnCallback : Win32cr::Devices::Tapi::PHONECALLBACK, lpszFriendlyAppName : Win32cr::Foundation::PSTR, lpdwNumDevs : UInt32*, lpdwAPIVersion : UInt32*, lpPhoneInitializeExParams : Win32cr::Devices::Tapi::PHONEINITIALIZEEXPARAMS*) : Int32

    fun phoneInitializeExW(lphPhoneApp : UInt32*, hInstance : Win32cr::Foundation::HINSTANCE, lpfnCallback : Win32cr::Devices::Tapi::PHONECALLBACK, lpszFriendlyAppName : Win32cr::Foundation::PWSTR, lpdwNumDevs : UInt32*, lpdwAPIVersion : UInt32*, lpPhoneInitializeExParams : Win32cr::Devices::Tapi::PHONEINITIALIZEEXPARAMS*) : Int32

    fun phoneNegotiateAPIVersion(hPhoneApp : UInt32, dwDeviceID : UInt32, dwAPILowVersion : UInt32, dwAPIHighVersion : UInt32, lpdwAPIVersion : UInt32*, lpExtensionID : Win32cr::Devices::Tapi::PHONEEXTENSIONID*) : Int32

    fun phoneNegotiateExtVersion(hPhoneApp : UInt32, dwDeviceID : UInt32, dwAPIVersion : UInt32, dwExtLowVersion : UInt32, dwExtHighVersion : UInt32, lpdwExtVersion : UInt32*) : Int32

    fun phoneOpen(hPhoneApp : UInt32, dwDeviceID : UInt32, lphPhone : UInt32*, dwAPIVersion : UInt32, dwExtVersion : UInt32, dwCallbackInstance : LibC::UIntPtrT, dwPrivilege : UInt32) : Int32

    fun phoneSetButtonInfo(hPhone : UInt32, dwButtonLampID : UInt32, lpButtonInfo : Win32cr::Devices::Tapi::PHONEBUTTONINFO*) : Int32

    fun phoneSetButtonInfoA(hPhone : UInt32, dwButtonLampID : UInt32, lpButtonInfo : Win32cr::Devices::Tapi::PHONEBUTTONINFO*) : Int32

    fun phoneSetButtonInfoW(hPhone : UInt32, dwButtonLampID : UInt32, lpButtonInfo : Win32cr::Devices::Tapi::PHONEBUTTONINFO*) : Int32

    fun phoneSetData(hPhone : UInt32, dwDataID : UInt32, lpData : Void*, dwSize : UInt32) : Int32

    fun phoneSetDisplay(hPhone : UInt32, dwRow : UInt32, dwColumn : UInt32, lpsDisplay : Win32cr::Foundation::PSTR, dwSize : UInt32) : Int32

    fun phoneSetGain(hPhone : UInt32, dwHookSwitchDev : UInt32, dwGain : UInt32) : Int32

    fun phoneSetHookSwitch(hPhone : UInt32, dwHookSwitchDevs : UInt32, dwHookSwitchMode : UInt32) : Int32

    fun phoneSetLamp(hPhone : UInt32, dwButtonLampID : UInt32, dwLampMode : UInt32) : Int32

    fun phoneSetRing(hPhone : UInt32, dwRingMode : UInt32, dwVolume : UInt32) : Int32

    fun phoneSetStatusMessages(hPhone : UInt32, dwPhoneStates : UInt32, dwButtonModes : UInt32, dwButtonStates : UInt32) : Int32

    fun phoneSetVolume(hPhone : UInt32, dwHookSwitchDev : UInt32, dwVolume : UInt32) : Int32

    fun phoneShutdown(hPhoneApp : UInt32) : Int32

    fun tapiGetLocationInfo(lpszCountryCode : UInt8*, lpszCityCode : UInt8*) : Int32

    fun tapiGetLocationInfoA(lpszCountryCode : UInt8*, lpszCityCode : UInt8*) : Int32

    fun tapiGetLocationInfoW(lpszCountryCodeW : UInt16*, lpszCityCodeW : UInt16*) : Int32

    fun tapiRequestDrop(hwnd : Win32cr::Foundation::HWND, wRequestID : Win32cr::Foundation::WPARAM) : Int32

    fun tapiRequestMakeCall(lpszDestAddress : Win32cr::Foundation::PSTR, lpszAppName : Win32cr::Foundation::PSTR, lpszCalledParty : Win32cr::Foundation::PSTR, lpszComment : Win32cr::Foundation::PSTR) : Int32

    fun tapiRequestMakeCallA(lpszDestAddress : Win32cr::Foundation::PSTR, lpszAppName : Win32cr::Foundation::PSTR, lpszCalledParty : Win32cr::Foundation::PSTR, lpszComment : Win32cr::Foundation::PSTR) : Int32

    fun tapiRequestMakeCallW(lpszDestAddress : Win32cr::Foundation::PWSTR, lpszAppName : Win32cr::Foundation::PWSTR, lpszCalledParty : Win32cr::Foundation::PWSTR, lpszComment : Win32cr::Foundation::PWSTR) : Int32

    fun tapiRequestMediaCall(hwnd : Win32cr::Foundation::HWND, wRequestID : Win32cr::Foundation::WPARAM, lpszDeviceClass : Win32cr::Foundation::PSTR, lpDeviceID : Win32cr::Foundation::PSTR, dwSize : UInt32, dwSecure : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, lpszAppName : Win32cr::Foundation::PSTR, lpszCalledParty : Win32cr::Foundation::PSTR, lpszComment : Win32cr::Foundation::PSTR) : Int32

    fun tapiRequestMediaCallA(hwnd : Win32cr::Foundation::HWND, wRequestID : Win32cr::Foundation::WPARAM, lpszDeviceClass : Win32cr::Foundation::PSTR, lpDeviceID : Win32cr::Foundation::PSTR, dwSize : UInt32, dwSecure : UInt32, lpszDestAddress : Win32cr::Foundation::PSTR, lpszAppName : Win32cr::Foundation::PSTR, lpszCalledParty : Win32cr::Foundation::PSTR, lpszComment : Win32cr::Foundation::PSTR) : Int32

    fun tapiRequestMediaCallW(hwnd : Win32cr::Foundation::HWND, wRequestID : Win32cr::Foundation::WPARAM, lpszDeviceClass : Win32cr::Foundation::PWSTR, lpDeviceID : Win32cr::Foundation::PWSTR, dwSize : UInt32, dwSecure : UInt32, lpszDestAddress : Win32cr::Foundation::PWSTR, lpszAppName : Win32cr::Foundation::PWSTR, lpszCalledParty : Win32cr::Foundation::PWSTR, lpszComment : Win32cr::Foundation::PWSTR) : Int32

    fun OpenTnefStream(lpvSupport : Void*, lpStream : Void*, lpszStreamName : Int8*, ulFlags : UInt32, lpMessage : Void*, wKeyVal : UInt16, lppTNEF : Void**) : Win32cr::Foundation::HRESULT

    fun OpenTnefStreamEx(lpvSupport : Void*, lpStream : Void*, lpszStreamName : Int8*, ulFlags : UInt32, lpMessage : Void*, wKeyVal : UInt16, lpAdressBook : Void*, lppTNEF : Void**) : Win32cr::Foundation::HRESULT

    fun GetTnefStreamCodepage(lpStream : Void*, lpulCodepage : UInt32*, lpulSubCodepage : UInt32*) : Win32cr::Foundation::HRESULT

  end
end