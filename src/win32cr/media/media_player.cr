require "./../system/com.cr"
require "./../foundation.cr"
require "./media_foundation.cr"
require "./../system/ole.cr"
require "./../graphics/gdi.cr"
require "./../ui/windows_and_messaging.cr"

module Win32cr::Media::MediaPlayer
  CLSID_XFeedsManager = "fe6b11c3-c72e-4061-86c6-9d163121f229"
  WMPGC_FLAGS_ALLOW_PREROLL = 1_u32
  WMPGC_FLAGS_SUPPRESS_DIALOGS = 2_u32
  WMPGC_FLAGS_IGNORE_AV_SYNC = 4_u32
  WMPGC_FLAGS_DISABLE_PLUGINS = 8_u32
  WMPGC_FLAGS_USE_CUSTOM_GRAPH = 16_u32
  WMPUE_EC_USER = 33024_u32
  WMP_MDRT_FLAGS_UNREPORTED_DELETED_ITEMS = 1_u32
  WMP_MDRT_FLAGS_UNREPORTED_ADDED_ITEMS = 2_u32
  IOCTL_WMP_METADATA_ROUND_TRIP = 827346263_u32
  IOCTL_WMP_DEVICE_CAN_SYNC = 844123479_u32
  EFFECT_CANGOFULLSCREEN = 1_u32
  EFFECT_HASPROPERTYPAGE = 2_u32
  EFFECT_VARIABLEFREQSTEP = 4_u32
  EFFECT_WINDOWEDONLY = 8_u32
  EFFECT2_FULLSCREENEXCLUSIVE = 16_u32
  SA_BUFFER_SIZE = 1024_u32
  PLUGIN_INSTALLREGKEY = "Software\\Microsoft\\MediaPlayer\\UIPlugins"
  PLUGIN_INSTALLREGKEY_FRIENDLYNAME = "FriendlyName"
  PLUGIN_INSTALLREGKEY_DESCRIPTION = "Description"
  PLUGIN_INSTALLREGKEY_CAPABILITIES = "Capabilities"
  PLUGIN_INSTALLREGKEY_UNINSTALL = "UninstallPath"
  PLUGIN_TYPE_BACKGROUND = 1_u32
  PLUGIN_TYPE_SEPARATEWINDOW = 2_u32
  PLUGIN_TYPE_DISPLAYAREA = 3_u32
  PLUGIN_TYPE_SETTINGSAREA = 4_u32
  PLUGIN_TYPE_METADATAAREA = 5_u32
  PLUGIN_FLAGS_HASPROPERTYPAGE = 2147483648_u32
  PLUGIN_FLAGS_INSTALLAUTORUN = 1073741824_u32
  PLUGIN_FLAGS_LAUNCHPROPERTYPAGE = 536870912_u32
  PLUGIN_FLAGS_ACCEPTSMEDIA = 268435456_u32
  PLUGIN_FLAGS_ACCEPTSPLAYLISTS = 134217728_u32
  PLUGIN_FLAGS_HASPRESETS = 67108864_u32
  PLUGIN_FLAGS_HIDDEN = 33554432_u32
  PLUGIN_MISC_PRESETCOUNT = "PresetCount"
  PLUGIN_MISC_PRESETNAMES = "PresetNames"
  PLUGIN_MISC_CURRENTPRESET = "CurrentPreset"
  PLUGIN_SEPARATEWINDOW_RESIZABLE = "Resizable"
  PLUGIN_SEPARATEWINDOW_DEFAULTWIDTH = "DefaultWidth"
  PLUGIN_SEPARATEWINDOW_DEFAULTHEIGHT = "DefaultHeight"
  PLUGIN_SEPARATEWINDOW_MINWIDTH = "MinWidth"
  PLUGIN_SEPARATEWINDOW_MINHEIGHT = "MinHeight"
  PLUGIN_SEPARATEWINDOW_MAXWIDTH = "MaxWidth"
  PLUGIN_SEPARATEWINDOW_MAXHEIGHT = "MaxHeight"
  PLUGIN_MISC_QUERYDESTROY = "QueryDestroy"
  PLUGIN_ALL_MEDIASENDTO = "MediaSendTo"
  PLUGIN_ALL_PLAYLISTSENDTO = "PlaylistSendTo"
  SUBSCRIPTION_CAP_DEVICEAVAILABLE = 16_u32
  SUBSCRIPTION_CAP_BACKGROUNDPROCESSING = 8_u32
  SUBSCRIPTION_CAP_IS_CONTENTPARTNER = 64_u32
  SUBSCRIPTION_CAP_ALTLOGIN = 128_u32
  SUBSCRIPTION_CAP_ALLOWPLAY = 1_u32
  SUBSCRIPTION_CAP_ALLOWCDBURN = 2_u32
  SUBSCRIPTION_CAP_ALLOWPDATRANSFER = 4_u32
  SUBSCRIPTION_CAP_PREPAREFORSYNC = 32_u32
  SUBSCRIPTION_V1_CAPS = 15_u32
  SUBSCRIPTION_CAP_UILESSMODE_ALLOWPLAY = 256_u32
  WMP_SUBSCR_DL_TYPE_BACKGROUND = "background"
  WMP_SUBSCR_DL_TYPE_REALTIME = "real time"
  DISPID_FEEDS_RootFolder = 4096_u32
  DISPID_FEEDS_IsSubscribed = 4097_u32
  DISPID_FEEDS_ExistsFeed = 4098_u32
  DISPID_FEEDS_GetFeed = 4099_u32
  DISPID_FEEDS_ExistsFolder = 4100_u32
  DISPID_FEEDS_GetFolder = 4101_u32
  DISPID_FEEDS_DeleteFeed = 4102_u32
  DISPID_FEEDS_DeleteFolder = 4103_u32
  DISPID_FEEDS_GetFeedByUrl = 4104_u32
  DISPID_FEEDS_BackgroundSync = 4105_u32
  DISPID_FEEDS_BackgroundSyncStatus = 4106_u32
  DISPID_FEEDS_DefaultInterval = 4107_u32
  DISPID_FEEDS_AsyncSyncAll = 4108_u32
  DISPID_FEEDS_Normalize = 4109_u32
  DISPID_FEEDS_ItemCountLimit = 4110_u32
  DISPID_FEEDSENUM_Count = 8192_u32
  DISPID_FEEDSENUM_Item = 8193_u32
  DISPID_FEEDFOLDER_Feeds = 12288_u32
  DISPID_FEEDFOLDER_Subfolders = 12289_u32
  DISPID_FEEDFOLDER_CreateFeed = 12290_u32
  DISPID_FEEDFOLDER_CreateSubfolder = 12291_u32
  DISPID_FEEDFOLDER_ExistsFeed = 12292_u32
  DISPID_FEEDFOLDER_GetFeed = 12293_u32
  DISPID_FEEDFOLDER_ExistsSubfolder = 12294_u32
  DISPID_FEEDFOLDER_GetSubfolder = 12295_u32
  DISPID_FEEDFOLDER_Delete = 12296_u32
  DISPID_FEEDFOLDER_Name = 12297_u32
  DISPID_FEEDFOLDER_Rename = 12298_u32
  DISPID_FEEDFOLDER_Path = 12299_u32
  DISPID_FEEDFOLDER_Move = 12300_u32
  DISPID_FEEDFOLDER_Parent = 12301_u32
  DISPID_FEEDFOLDER_IsRoot = 12302_u32
  DISPID_FEEDFOLDER_TotalUnreadItemCount = 12303_u32
  DISPID_FEEDFOLDER_TotalItemCount = 12304_u32
  DISPID_FEEDFOLDER_GetWatcher = 12305_u32
  DISPID_FEED_Xml = 16384_u32
  DISPID_FEED_Name = 16385_u32
  DISPID_FEED_Rename = 16386_u32
  DISPID_FEED_Url = 16387_u32
  DISPID_FEED_LocalId = 16388_u32
  DISPID_FEED_Path = 16389_u32
  DISPID_FEED_Move = 16390_u32
  DISPID_FEED_Parent = 16391_u32
  DISPID_FEED_LastWriteTime = 16392_u32
  DISPID_FEED_Delete = 16393_u32
  DISPID_FEED_Download = 16394_u32
  DISPID_FEED_AsyncDownload = 16395_u32
  DISPID_FEED_CancelAsyncDownload = 16396_u32
  DISPID_FEED_Interval = 16397_u32
  DISPID_FEED_SyncSetting = 16398_u32
  DISPID_FEED_LastDownloadTime = 16399_u32
  DISPID_FEED_LocalEnclosurePath = 16400_u32
  DISPID_FEED_Items = 16401_u32
  DISPID_FEED_GetItem = 16402_u32
  DISPID_FEED_Title = 16403_u32
  DISPID_FEED_Description = 16404_u32
  DISPID_FEED_Link = 16405_u32
  DISPID_FEED_Image = 16406_u32
  DISPID_FEED_LastBuildDate = 16407_u32
  DISPID_FEED_PubDate = 16408_u32
  DISPID_FEED_Ttl = 16409_u32
  DISPID_FEED_Language = 16410_u32
  DISPID_FEED_Copyright = 16411_u32
  DISPID_FEED_DownloadEnclosuresAutomatically = 16412_u32
  DISPID_FEED_DownloadStatus = 16413_u32
  DISPID_FEED_LastDownloadError = 16414_u32
  DISPID_FEED_Merge = 16415_u32
  DISPID_FEED_DownloadUrl = 16416_u32
  DISPID_FEED_IsList = 16417_u32
  DISPID_FEED_MarkAllItemsRead = 16418_u32
  DISPID_FEED_GetWatcher = 16419_u32
  DISPID_FEED_UnreadItemCount = 16420_u32
  DISPID_FEED_ItemCount = 16421_u32
  DISPID_FEED_MaxItemCount = 16422_u32
  DISPID_FEED_GetItemByEffectiveId = 16423_u32
  DISPID_FEED_LastItemDownloadTime = 16424_u32
  DISPID_FEED_Username = 16425_u32
  DISPID_FEED_Password = 16426_u32
  DISPID_FEED_SetCredentials = 16427_u32
  DISPID_FEED_ClearCredentials = 16428_u32
  DISPID_FEEDITEM_Xml = 20480_u32
  DISPID_FEEDITEM_Title = 20481_u32
  DISPID_FEEDITEM_Link = 20482_u32
  DISPID_FEEDITEM_Guid = 20483_u32
  DISPID_FEEDITEM_Description = 20484_u32
  DISPID_FEEDITEM_PubDate = 20485_u32
  DISPID_FEEDITEM_Comments = 20486_u32
  DISPID_FEEDITEM_Author = 20487_u32
  DISPID_FEEDITEM_Enclosure = 20488_u32
  DISPID_FEEDITEM_IsRead = 20489_u32
  DISPID_FEEDITEM_LocalId = 20490_u32
  DISPID_FEEDITEM_Parent = 20491_u32
  DISPID_FEEDITEM_Delete = 20492_u32
  DISPID_FEEDITEM_DownloadUrl = 20493_u32
  DISPID_FEEDITEM_LastDownloadTime = 20494_u32
  DISPID_FEEDITEM_Modified = 20495_u32
  DISPID_FEEDITEM_EffectiveId = 20496_u32
  DISPID_FEEDENCLOSURE_Url = 24576_u32
  DISPID_FEEDENCLOSURE_Type = 24577_u32
  DISPID_FEEDENCLOSURE_Length = 24578_u32
  DISPID_FEEDENCLOSURE_AsyncDownload = 24579_u32
  DISPID_FEEDENCLOSURE_CancelAsyncDownload = 24580_u32
  DISPID_FEEDENCLOSURE_DownloadStatus = 24581_u32
  DISPID_FEEDENCLOSURE_LastDownloadError = 24582_u32
  DISPID_FEEDENCLOSURE_LocalPath = 24583_u32
  DISPID_FEEDENCLOSURE_Parent = 24584_u32
  DISPID_FEEDENCLOSURE_DownloadUrl = 24585_u32
  DISPID_FEEDENCLOSURE_DownloadMimeType = 24586_u32
  DISPID_FEEDENCLOSURE_RemoveFile = 24587_u32
  DISPID_FEEDENCLOSURE_SetFile = 24588_u32
  DISPID_FEEDFOLDEREVENTS_Error = 28672_u32
  DISPID_FEEDFOLDEREVENTS_FolderAdded = 28673_u32
  DISPID_FEEDFOLDEREVENTS_FolderDeleted = 28674_u32
  DISPID_FEEDFOLDEREVENTS_FolderRenamed = 28675_u32
  DISPID_FEEDFOLDEREVENTS_FolderMovedFrom = 28676_u32
  DISPID_FEEDFOLDEREVENTS_FolderMovedTo = 28677_u32
  DISPID_FEEDFOLDEREVENTS_FolderItemCountChanged = 28678_u32
  DISPID_FEEDFOLDEREVENTS_FeedAdded = 28679_u32
  DISPID_FEEDFOLDEREVENTS_FeedDeleted = 28680_u32
  DISPID_FEEDFOLDEREVENTS_FeedRenamed = 28681_u32
  DISPID_FEEDFOLDEREVENTS_FeedUrlChanged = 28682_u32
  DISPID_FEEDFOLDEREVENTS_FeedMovedFrom = 28683_u32
  DISPID_FEEDFOLDEREVENTS_FeedMovedTo = 28684_u32
  DISPID_FEEDFOLDEREVENTS_FeedDownloading = 28685_u32
  DISPID_FEEDFOLDEREVENTS_FeedDownloadCompleted = 28686_u32
  DISPID_FEEDFOLDEREVENTS_FeedItemCountChanged = 28687_u32
  DISPID_FEEDEVENTS_Error = 32768_u32
  DISPID_FEEDEVENTS_FeedDeleted = 32769_u32
  DISPID_FEEDEVENTS_FeedRenamed = 32770_u32
  DISPID_FEEDEVENTS_FeedUrlChanged = 32771_u32
  DISPID_FEEDEVENTS_FeedMoved = 32772_u32
  DISPID_FEEDEVENTS_FeedDownloading = 32773_u32
  DISPID_FEEDEVENTS_FeedDownloadCompleted = 32774_u32
  DISPID_FEEDEVENTS_FeedItemCountChanged = 32775_u32
  DISPID_DELTA = 50_u32
  DISPID_WMPCORE_BASE = 0_u32
  DISPID_WMPCORE_URL = 1_u32
  DISPID_WMPCORE_OPENSTATE = 2_u32
  DISPID_WMPCORE_CLOSE = 3_u32
  DISPID_WMPCORE_CONTROLS = 4_u32
  DISPID_WMPCORE_SETTINGS = 5_u32
  DISPID_WMPCORE_CURRENTMEDIA = 6_u32
  DISPID_WMPCORE_NETWORK = 7_u32
  DISPID_WMPCORE_MEDIACOLLECTION = 8_u32
  DISPID_WMPCORE_PLAYLISTCOLLECTION = 9_u32
  DISPID_WMPCORE_PLAYSTATE = 10_u32
  DISPID_WMPCORE_VERSIONINFO = 11_u32
  DISPID_WMPCORE_LAUNCHURL = 12_u32
  DISPID_WMPCORE_CURRENTPLAYLIST = 13_u32
  DISPID_WMPCORE_CDROMCOLLECTION = 14_u32
  DISPID_WMPCORE_CLOSEDCAPTION = 15_u32
  DISPID_WMPCORE_ISONLINE = 16_u32
  DISPID_WMPCORE_ERROR = 17_u32
  DISPID_WMPCORE_STATUS = 18_u32
  DISPID_WMPCORE_LAST = 18_u32
  DISPID_WMPOCX_BASE = 18_u32
  DISPID_WMPOCX_ENABLED = 19_u32
  DISPID_WMPOCX_TRANSPARENTATSTART = 20_u32
  DISPID_WMPOCX_FULLSCREEN = 21_u32
  DISPID_WMPOCX_ENABLECONTEXTMENU = 22_u32
  DISPID_WMPOCX_UIMODE = 23_u32
  DISPID_WMPOCX_LAST = 23_u32
  DISPID_WMPOCX2_BASE = 23_u32
  DISPID_WMPOCX2_STRETCHTOFIT = 24_u32
  DISPID_WMPOCX2_WINDOWLESSVIDEO = 25_u32
  DISPID_WMPOCX4_ISREMOTE = 26_u32
  DISPID_WMPOCX4_PLAYERAPPLICATION = 27_u32
  DISPID_WMPOCX4_OPENPLAYER = 28_u32
  DISPID_WMPCORE2_BASE = 39_u32
  DISPID_WMPCORE2_DVD = 40_u32
  DISPID_WMPCORE3_NEWPLAYLIST = 41_u32
  DISPID_WMPCORE3_NEWMEDIA = 42_u32
  DISPID_WMPCONTROLS_PLAY = 51_u32
  DISPID_WMPCONTROLS_STOP = 52_u32
  DISPID_WMPCONTROLS_PAUSE = 53_u32
  DISPID_WMPCONTROLS_FASTFORWARD = 54_u32
  DISPID_WMPCONTROLS_FASTREVERSE = 55_u32
  DISPID_WMPCONTROLS_CURRENTPOSITION = 56_u32
  DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING = 57_u32
  DISPID_WMPCONTROLS_NEXT = 58_u32
  DISPID_WMPCONTROLS_PREVIOUS = 59_u32
  DISPID_WMPCONTROLS_CURRENTITEM = 60_u32
  DISPID_WMPCONTROLS_CURRENTMARKER = 61_u32
  DISPID_WMPCONTROLS_ISAVAILABLE = 62_u32
  DISPID_WMPCONTROLS_PLAYITEM = 63_u32
  DISPID_WMPCONTROLS2_STEP = 64_u32
  DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT = 65_u32
  DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID = 66_u32
  DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC = 67_u32
  DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE = 68_u32
  DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX = 69_u32
  DISPID_WMPCONTROLS3_GETLANGUAGENAME = 70_u32
  DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE = 71_u32
  DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION = 72_u32
  DISPID_WMPSETTINGS_AUTOSTART = 101_u32
  DISPID_WMPSETTINGS_BALANCE = 102_u32
  DISPID_WMPSETTINGS_INVOKEURLS = 103_u32
  DISPID_WMPSETTINGS_MUTE = 104_u32
  DISPID_WMPSETTINGS_PLAYCOUNT = 105_u32
  DISPID_WMPSETTINGS_RATE = 106_u32
  DISPID_WMPSETTINGS_VOLUME = 107_u32
  DISPID_WMPSETTINGS_BASEURL = 108_u32
  DISPID_WMPSETTINGS_DEFAULTFRAME = 109_u32
  DISPID_WMPSETTINGS_GETMODE = 110_u32
  DISPID_WMPSETTINGS_SETMODE = 111_u32
  DISPID_WMPSETTINGS_ENABLEERRORDIALOGS = 112_u32
  DISPID_WMPSETTINGS_ISAVAILABLE = 113_u32
  DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE = 114_u32
  DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS = 115_u32
  DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS = 116_u32
  DISPID_WMPPLAYLIST_COUNT = 201_u32
  DISPID_WMPPLAYLIST_NAME = 202_u32
  DISPID_WMPPLAYLIST_GETITEMINFO = 203_u32
  DISPID_WMPPLAYLIST_SETITEMINFO = 204_u32
  DISPID_WMPPLAYLIST_CLEAR = 205_u32
  DISPID_WMPPLAYLIST_INSERTITEM = 206_u32
  DISPID_WMPPLAYLIST_APPENDITEM = 207_u32
  DISPID_WMPPLAYLIST_REMOVEITEM = 208_u32
  DISPID_WMPPLAYLIST_MOVEITEM = 209_u32
  DISPID_WMPPLAYLIST_ATTRIBUTECOUNT = 210_u32
  DISPID_WMPPLAYLIST_ATTRIBUTENAME = 211_u32
  DISPID_WMPPLAYLIST_ITEM = 212_u32
  DISPID_WMPPLAYLIST_ISIDENTICAL = 213_u32
  DISPID_WMPCDROM_DRIVESPECIFIER = 251_u32
  DISPID_WMPCDROM_PLAYLIST = 252_u32
  DISPID_WMPCDROM_EJECT = 253_u32
  DISPID_WMPCDROMCOLLECTION_COUNT = 301_u32
  DISPID_WMPCDROMCOLLECTION_ITEM = 302_u32
  DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER = 303_u32
  DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS = 304_u32
  DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS = 305_u32
  DISPID_WMPSTRINGCOLLECTION_COUNT = 401_u32
  DISPID_WMPSTRINGCOLLECTION_ITEM = 402_u32
  DISPID_WMPMEDIACOLLECTION_ADD = 452_u32
  DISPID_WMPMEDIACOLLECTION_GETALL = 453_u32
  DISPID_WMPMEDIACOLLECTION_GETBYNAME = 454_u32
  DISPID_WMPMEDIACOLLECTION_GETBYGENRE = 455_u32
  DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR = 456_u32
  DISPID_WMPMEDIACOLLECTION_GETBYALBUM = 457_u32
  DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE = 458_u32
  DISPID_WMPMEDIACOLLECTION_REMOVE = 459_u32
  DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION = 461_u32
  DISPID_WMPMEDIACOLLECTION_NEWQUERY = 462_u32
  DISPID_WMPMEDIACOLLECTION_STARTMONITORING = 463_u32
  DISPID_WMPMEDIACOLLECTION_STOPMONITORING = 464_u32
  DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN = 465_u32
  DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN = 466_u32
  DISPID_WMPMEDIACOLLECTION_STARTSEARCH = 467_u32
  DISPID_WMPMEDIACOLLECTION_STOPSEARCH = 468_u32
  DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA = 469_u32
  DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM = 470_u32
  DISPID_WMPMEDIACOLLECTION_SETDELETED = 471_u32
  DISPID_WMPMEDIACOLLECTION_ISDELETED = 472_u32
  DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION = 473_u32
  DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE = 474_u32
  DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE = 475_u32
  DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE = 476_u32
  DISPID_WMPPLAYLISTARRAY_COUNT = 501_u32
  DISPID_WMPPLAYLISTARRAY_ITEM = 502_u32
  DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST = 552_u32
  DISPID_WMPPLAYLISTCOLLECTION_GETALL = 553_u32
  DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME = 554_u32
  DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION = 555_u32
  DISPID_WMPPLAYLISTCOLLECTION_REMOVE = 556_u32
  DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY = 557_u32
  DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING = 558_u32
  DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING = 559_u32
  DISPID_WMPPLAYLISTCOLLECTION_SETDELETED = 560_u32
  DISPID_WMPPLAYLISTCOLLECTION_ISDELETED = 561_u32
  DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST = 562_u32
  DISPID_WMPMEDIA_SOURCEURL = 751_u32
  DISPID_WMPMEDIA_IMAGESOURCEWIDTH = 752_u32
  DISPID_WMPMEDIA_IMAGESOURCEHEIGHT = 753_u32
  DISPID_WMPMEDIA_MARKERCOUNT = 754_u32
  DISPID_WMPMEDIA_GETMARKERTIME = 755_u32
  DISPID_WMPMEDIA_GETMARKERNAME = 756_u32
  DISPID_WMPMEDIA_DURATION = 757_u32
  DISPID_WMPMEDIA_DURATIONSTRING = 758_u32
  DISPID_WMPMEDIA_ATTRIBUTECOUNT = 759_u32
  DISPID_WMPMEDIA_GETATTRIBUTENAME = 760_u32
  DISPID_WMPMEDIA_GETITEMINFO = 761_u32
  DISPID_WMPMEDIA_SETITEMINFO = 762_u32
  DISPID_WMPMEDIA_ISIDENTICAL = 763_u32
  DISPID_WMPMEDIA_NAME = 764_u32
  DISPID_WMPMEDIA_GETITEMINFOBYATOM = 765_u32
  DISPID_WMPMEDIA_ISMEMBEROF = 766_u32
  DISPID_WMPMEDIA_ISREADONLYITEM = 767_u32
  DISPID_WMPMEDIA2_ERROR = 768_u32
  DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE = 769_u32
  DISPID_WMPMEDIA3_GETITEMINFOBYTYPE = 770_u32
  DISPID_WMPNETWORK_BANDWIDTH = 801_u32
  DISPID_WMPNETWORK_RECOVEREDPACKETS = 802_u32
  DISPID_WMPNETWORK_SOURCEPROTOCOL = 803_u32
  DISPID_WMPNETWORK_RECEIVEDPACKETS = 804_u32
  DISPID_WMPNETWORK_LOSTPACKETS = 805_u32
  DISPID_WMPNETWORK_RECEPTIONQUALITY = 806_u32
  DISPID_WMPNETWORK_BUFFERINGCOUNT = 807_u32
  DISPID_WMPNETWORK_BUFFERINGPROGRESS = 808_u32
  DISPID_WMPNETWORK_BUFFERINGTIME = 809_u32
  DISPID_WMPNETWORK_FRAMERATE = 810_u32
  DISPID_WMPNETWORK_MAXBITRATE = 811_u32
  DISPID_WMPNETWORK_BITRATE = 812_u32
  DISPID_WMPNETWORK_GETPROXYSETTINGS = 813_u32
  DISPID_WMPNETWORK_SETPROXYSETTINGS = 814_u32
  DISPID_WMPNETWORK_GETPROXYNAME = 815_u32
  DISPID_WMPNETWORK_SETPROXYNAME = 816_u32
  DISPID_WMPNETWORK_GETPROXYPORT = 817_u32
  DISPID_WMPNETWORK_SETPROXYPORT = 818_u32
  DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST = 819_u32
  DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST = 820_u32
  DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL = 821_u32
  DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL = 822_u32
  DISPID_WMPNETWORK_MAXBANDWIDTH = 823_u32
  DISPID_WMPNETWORK_DOWNLOADPROGRESS = 824_u32
  DISPID_WMPNETWORK_ENCODEDFRAMERATE = 825_u32
  DISPID_WMPNETWORK_FRAMESSKIPPED = 826_u32
  DISPID_WMPERROR_CLEARERRORQUEUE = 851_u32
  DISPID_WMPERROR_ERRORCOUNT = 852_u32
  DISPID_WMPERROR_ITEM = 853_u32
  DISPID_WMPERROR_WEBHELP = 854_u32
  DISPID_WMPERRORITEM_ERRORCODE = 901_u32
  DISPID_WMPERRORITEM_ERRORDESCRIPTION = 902_u32
  DISPID_WMPERRORITEM_ERRORCONTEXT = 903_u32
  DISPID_WMPERRORITEM_REMEDY = 904_u32
  DISPID_WMPERRORITEM_CUSTOMURL = 905_u32
  DISPID_WMPERRORITEM2_CONDITION = 906_u32
  DISPID_WMPCLOSEDCAPTION_SAMISTYLE = 951_u32
  DISPID_WMPCLOSEDCAPTION_SAMILANG = 952_u32
  DISPID_WMPCLOSEDCAPTION_SAMIFILENAME = 953_u32
  DISPID_WMPCLOSEDCAPTION_CAPTIONINGID = 954_u32
  DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT = 955_u32
  DISPID_WMPCLOSEDCAPTION2_GETLANGNAME = 956_u32
  DISPID_WMPCLOSEDCAPTION2_GETLANGID = 957_u32
  DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT = 958_u32
  DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME = 959_u32
  DISPID_WMPDVD_ISAVAILABLE = 1001_u32
  DISPID_WMPDVD_DOMAIN = 1002_u32
  DISPID_WMPDVD_TOPMENU = 1003_u32
  DISPID_WMPDVD_TITLEMENU = 1004_u32
  DISPID_WMPDVD_BACK = 1005_u32
  DISPID_WMPDVD_RESUME = 1006_u32
  DISPID_WMPMETADATA_PICTURE_MIMETYPE = 1051_u32
  DISPID_WMPMETADATA_PICTURE_PICTURETYPE = 1052_u32
  DISPID_WMPMETADATA_PICTURE_DESCRIPTION = 1053_u32
  DISPID_WMPMETADATA_PICTURE_URL = 1054_u32
  DISPID_WMPMETADATA_TEXT_TEXT = 1055_u32
  DISPID_WMPMETADATA_TEXT_DESCRIPTION = 1056_u32
  DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION = 1101_u32
  DISPID_WMPPLAYERAPP_SWITCHTOCONTROL = 1102_u32
  DISPID_WMPPLAYERAPP_PLAYERDOCKED = 1103_u32
  DISPID_WMPPLAYERAPP_HASDISPLAY = 1104_u32
  DISPID_WMPPLAYERAPP_REMOTESTATUS = 1105_u32
  DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION = 1151_u32
  DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION = 1152_u32
  DISPID_WMPDOWNLOADCOLLECTION_ID = 1201_u32
  DISPID_WMPDOWNLOADCOLLECTION_COUNT = 1202_u32
  DISPID_WMPDOWNLOADCOLLECTION_ITEM = 1203_u32
  DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD = 1204_u32
  DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM = 1205_u32
  DISPID_WMPDOWNLOADCOLLECTION_CLEAR = 1206_u32
  DISPID_WMPDOWNLOADITEM_SOURCEURL = 1251_u32
  DISPID_WMPDOWNLOADITEM_SIZE = 1252_u32
  DISPID_WMPDOWNLOADITEM_TYPE = 1253_u32
  DISPID_WMPDOWNLOADITEM_PROGRESS = 1254_u32
  DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE = 1255_u32
  DISPID_WMPDOWNLOADITEM_PAUSE = 1256_u32
  DISPID_WMPDOWNLOADITEM_RESUME = 1257_u32
  DISPID_WMPDOWNLOADITEM_CANCEL = 1258_u32
  DISPID_WMPDOWNLOADITEM2_GETITEMINFO = 1301_u32
  DISPID_WMPQUERY_ADDCONDITION = 1351_u32
  DISPID_WMPQUERY_BEGINNEXTGROUP = 1352_u32
  DISPID_WMPMEDIACOLLECTION2_CREATEQUERY = 1401_u32
  DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY = 1402_u32
  DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY = 1403_u32
  DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE = 1404_u32
  DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL = 1451_u32
  DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO = 1452_u32
  DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE = 1453_u32
  DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE = 1454_u32
  DISPID_WMPCORE_MIN = 1_u32
  DISPID_WMPCORE_MAX = 1454_u32
  WMPCOREEVENT_BASE = 5000_u32
  DISPID_WMPCOREEVENT_OPENSTATECHANGE = 5001_u32
  DISPID_WMPCOREEVENT_STATUSCHANGE = 5002_u32
  WMPCOREEVENT_CONTROL_BASE = 5100_u32
  DISPID_WMPCOREEVENT_PLAYSTATECHANGE = 5101_u32
  DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE = 5102_u32
  WMPCOREEVENT_SEEK_BASE = 5200_u32
  DISPID_WMPCOREEVENT_ENDOFSTREAM = 5201_u32
  DISPID_WMPCOREEVENT_POSITIONCHANGE = 5202_u32
  DISPID_WMPCOREEVENT_MARKERHIT = 5203_u32
  DISPID_WMPCOREEVENT_DURATIONUNITCHANGE = 5204_u32
  WMPCOREEVENT_CONTENT_BASE = 5300_u32
  DISPID_WMPCOREEVENT_SCRIPTCOMMAND = 5301_u32
  WMPCOREEVENT_NETWORK_BASE = 5400_u32
  DISPID_WMPCOREEVENT_DISCONNECT = 5401_u32
  DISPID_WMPCOREEVENT_BUFFERING = 5402_u32
  DISPID_WMPCOREEVENT_NEWSTREAM = 5403_u32
  WMPCOREEVENT_ERROR_BASE = 5500_u32
  DISPID_WMPCOREEVENT_ERROR = 5501_u32
  WMPCOREEVENT_WARNING_BASE = 5600_u32
  DISPID_WMPCOREEVENT_WARNING = 5601_u32
  WMPCOREEVENT_CDROM_BASE = 5700_u32
  DISPID_WMPCOREEVENT_CDROMMEDIACHANGE = 5701_u32
  WMPCOREEVENT_PLAYLIST_BASE = 5800_u32
  DISPID_WMPCOREEVENT_PLAYLISTCHANGE = 5801_u32
  DISPID_WMPCOREEVENT_MEDIACHANGE = 5802_u32
  DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE = 5803_u32
  DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE = 5804_u32
  DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE = 5805_u32
  DISPID_WMPCOREEVENT_CURRENTITEMCHANGE = 5806_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE = 5807_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED = 5808_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED = 5809_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE = 5810_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED = 5811_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED = 5812_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM = 5813_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS = 5814_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM = 5815_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS = 5816_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE = 5817_u32
  DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED = 5818_u32
  DISPID_WMPCOREEVENT_MODECHANGE = 5819_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED = 5820_u32
  DISPID_WMPCOREEVENT_MEDIAERROR = 5821_u32
  DISPID_WMPCOREEVENT_DOMAINCHANGE = 5822_u32
  DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH = 5823_u32
  DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE = 5824_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED = 5825_u32
  DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED = 5826_u32
  WMPOCXEVENT_BASE = 6500_u32
  DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION = 6501_u32
  DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL = 6502_u32
  DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE = 6503_u32
  DISPID_WMPOCXEVENT_PLAYERRECONNECT = 6504_u32
  DISPID_WMPOCXEVENT_CLICK = 6505_u32
  DISPID_WMPOCXEVENT_DOUBLECLICK = 6506_u32
  DISPID_WMPOCXEVENT_KEYDOWN = 6507_u32
  DISPID_WMPOCXEVENT_KEYPRESS = 6508_u32
  DISPID_WMPOCXEVENT_KEYUP = 6509_u32
  DISPID_WMPOCXEVENT_MOUSEDOWN = 6510_u32
  DISPID_WMPOCXEVENT_MOUSEMOVE = 6511_u32
  DISPID_WMPOCXEVENT_MOUSEUP = 6512_u32
  DISPID_WMPOCXEVENT_DEVICECONNECT = 6513_u32
  DISPID_WMPOCXEVENT_DEVICEDISCONNECT = 6514_u32
  DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE = 6515_u32
  DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE = 6516_u32
  DISPID_WMPOCXEVENT_DEVICESYNCERROR = 6517_u32
  DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE = 6518_u32
  DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE = 6519_u32
  DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR = 6520_u32
  DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE = 6521_u32
  DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR = 6522_u32
  DISPID_WMPOCXEVENT_CDROMBURNERROR = 6523_u32
  DISPID_WMPOCXEVENT_LIBRARYCONNECT = 6524_u32
  DISPID_WMPOCXEVENT_LIBRARYDISCONNECT = 6525_u32
  DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE = 6526_u32
  DISPID_WMPOCXEVENT_DEVICEESTIMATION = 6527_u32
  DISPID_WMPCONTROLS_BASE = 50_u32
  DISPID_WMPSETTINGS_BASE = 100_u32
  DISPID_WMPPLAYLIST_BASE = 200_u32
  DISPID_WMPCDROM_BASE = 250_u32
  DISPID_WMPCDROMCOLLECTION_BASE = 300_u32
  DISPID_WMPSTRINGCOLLECTION_BASE = 400_u32
  DISPID_WMPMEDIACOLLECTION_BASE = 450_u32
  DISPID_WMPPLAYLISTARRAY_BASE = 500_u32
  DISPID_WMPPLAYLISTCOLLECTION_BASE = 550_u32
  DISPID_WMPMEDIA_BASE = 750_u32
  DISPID_WMPNETWORK_BASE = 800_u32
  DISPID_WMPERROR_BASE = 850_u32
  DISPID_WMPERRORITEM_BASE = 900_u32
  DISPID_WMPCLOSEDCAPTION_BASE = 950_u32
  DISPID_WMPDVD_BASE = 1000_u32
  DISPID_WMPMETADATA_BASE = 1050_u32
  DISPID_WMPPLAYERAPP_BASE = 1100_u32
  DISPID_WMPDOWNLOADMANAGER_BASE = 1150_u32
  DISPID_WMPDOWNLOADCOLLECTION_BASE = 1200_u32
  DISPID_WMPDOWNLOADITEM_BASE = 1250_u32
  DISPID_WMPDOWNLOADITEM2_BASE = 1300_u32
  DISPID_WMPQUERY_BASE = 1350_u32
  DISPID_WMPMEDIACOLLECTION2_BASE = 1400_u32
  DISPID_WMPSTRINGCOLLECTION2_BASE = 1450_u32
  CLSID_WMPSkinManager = "b2a7fd52-301f-4348-b93a-638c6de49229"
  CLSID_WMPMediaPluginRegistrar = "5569e7f5-424b-4b93-89ca-79d17924689a"
  WMP_PLUGINTYPE_DSP = "6434baea-4954-498d-abd5-2b07123e1f04"
  WMP_PLUGINTYPE_DSP_OUTOFPROC = "ef29b174-c347-44cc-9a4f-2399118ff38c"
  WMP_PLUGINTYPE_RENDERING = "a8554541-115d-406a-a4c7-51111c330183"
  Kflttimedlevelmaximumfrequency = 22050
  Kflttimedlevelminimumfrequency = 20
  G_szcontentpartnerinfo_loginstate = "LoginState"
  G_szcontentpartnerinfo_mediaplayeraccounttype = "MediaPlayerAccountType"
  G_szcontentpartnerinfo_accounttype = "AccountType"
  G_szcontentpartnerinfo_hascachedcredentials = "HasCachedCredentials"
  G_szcontentpartnerinfo_licenserefreshadvancewarning = "LicenseRefreshAdvanceWarning"
  G_szcontentpartnerinfo_purchasedtrackrequiresredownload = "PurchasedTrackRequiresReDownload"
  G_szcontentpartnerinfo_maximumtrackpurchaseperpurchase = "MaximumNumberOfTracksPerPurchase"
  G_szcontentpartnerinfo_accountbalance = "AccountBalance"
  G_szcontentpartnerinfo_username = "UserName"
  G_szmediaplayertask_burn = "Burn"
  G_szmediaplayertask_browse = "Browse"
  G_szmediaplayertask_sync = "Sync"
  G_sziteminfo_popupurl = "Popup"
  G_sziteminfo_authenticationsuccessurl = "AuthenticationSuccessURL"
  G_sziteminfo_loginfailureurl = "LoginFailureURL"
  G_sziteminfo_htmlviewurl = "HTMLViewURL"
  G_sziteminfo_popupcaption = "PopupCaption"
  G_sziteminfo_altloginurl = "ALTLoginURL"
  G_sziteminfo_altlogincaption = "ALTLoginCaption"
  G_sziteminfo_forgetpasswordurl = "ForgotPassword"
  G_sziteminfo_createaccounturl = "CreateAccount"
  G_sziteminfo_artistarturl = "ArtistArt"
  G_sziteminfo_albumarturl = "AlbumArt"
  G_sziteminfo_listarturl = "ListArt"
  G_sziteminfo_genrearturl = "GenreArt"
  G_sziteminfo_subgenrearturl = "SubGenreArt"
  G_sziteminfo_radioarturl = "RadioArt"
  G_sziteminfo_treelisticonurl = "CPListIDIcon"
  G_sziteminfo_errordescription = "CPErrorDescription"
  G_sziteminfo_errorurl = "CPErrorURL"
  G_sziteminfo_errorurllinktext = "CPErrorURLLinkText"
  G_szunknownlocation = "UnknownLocation"
  G_szrootlocation = "RootLocation"
  G_szflyoutmenu = "FlyoutMenu"
  G_szonlinestore = "OnlineStore"
  G_szvideorecent = "VideoRecent"
  G_szvideoroot = "VideoRoot"
  G_szcplistid = "CPListID"
  G_szallcplistids = "AllCPListIDs"
  G_szcptrackid = "CPTrackID"
  G_szallcptrackids = "AllCPTrackIDs"
  G_szcpartistid = "CPArtistID"
  G_szallcpartistids = "AllCPArtistIDs"
  G_szcpalbumid = "CPAlbumID"
  G_szallcpalbumids = "AllCPAlbumIDs"
  G_szcpgenreid = "CPGenreID"
  G_szallcpgenreids = "AllCPGenreIDs"
  G_szcpalbumsubgenreid = "CPAlbumSubGenreID"
  G_szallcpalbumsubgenreids = "AllCPAlbumSubGenreIDs"
  G_szreleasedateyear = "ReleaseDateYear"
  G_szallreleasedateyears = "AllReleaseDateYears"
  G_szcpradioid = "CPRadioID"
  G_szallcpradioids = "AllCPRadioIDs"
  G_szauthor = "Author"
  G_szallauthors = "AllAuthors"
  G_szwmparentalrating = "WMParentalRating"
  G_szallwmparentalratings = "AllWMParentalRatings"
  G_szallusereffectiveratingstarss = "AllUserEffectiveRatingStarss"
  G_szusereffectiveratingstars = "UserEffectiveRatingStars"
  G_szuserplaylist = "UserPlaylist"
  G_szviewmode_report = "ViewModeReport"
  G_szviewmode_details = "ViewModeDetails"
  G_szviewmode_icon = "ViewModeIcon"
  G_szviewmode_tile = "ViewModeTile"
  G_szviewmode_orderedlist = "ViewModeOrderedList"
  G_szcontentprice_unknown = "PriceUnknown"
  G_szcontentprice_cannotbuy = "PriceCannotBuy"
  G_szcontentprice_free = "PriceFree"
  G_szrefreshlicenseplay = "RefreshForPlay"
  G_szrefreshlicenseburn = "RefreshForBurn"
  G_szrefreshlicensesync = "RefreshForSync"
  G_szverifypermissionsync = "VerifyPermissionSync"
  G_szstationevent_started = "TrackStarted"
  G_szstationevent_complete = "TrackComplete"
  G_szstationevent_skipped = "TrackSkipped"
  WMProfile_V40_DialUpMBR = "fd7f47f1-72a6-45a4-80f0-3aecefc32c07"
  WMProfile_V40_IntranetMBR = "82cd3321-a94a-4ffc-9c2b-092c10ca16e7"
  WMProfile_V40_2856100MBR = "5a1c2206-dc5e-4186-beb2-4c5a994b132e"
  WMProfile_V40_6VoiceAudio = "d508978a-11a0-4d15-b0da-acdc99d4f890"
  WMProfile_V40_16AMRadio = "0f4be81f-d57d-41e1-b2e3-2fad986bfec2"
  WMProfile_V40_288FMRadioMono = "7fa57fc8-6ea4-4645-8abf-b6e5a8f814a1"
  WMProfile_V40_288FMRadioStereo = "22fcf466-aa40-431f-a289-06d0ea1a1e40"
  WMProfile_V40_56DialUpStereo = "e8026f87-e905-4594-a3c7-00d00041d1d9"
  WMProfile_V40_64Audio = "4820b3f7-cbec-41dc-9391-78598714c8e5"
  WMProfile_V40_96Audio = "0efa0ee3-9e64-41e2-837f-3c0038f327ba"
  WMProfile_V40_128Audio = "93ddbe12-13dc-4e32-a35e-40378e34279a"
  WMProfile_V40_288VideoVoice = "bb2bc274-0eb6-4da9-b550-ecf7f2b9948f"
  WMProfile_V40_288VideoAudio = "ac617f2d-6cbe-4e84-8e9a-ce151a12a354"
  WMProfile_V40_288VideoWebServer = "abf2f00d-d555-4815-94ce-8275f3a70bfe"
  WMProfile_V40_56DialUpVideo = "e21713bb-652f-4dab-99de-71e04400270f"
  WMProfile_V40_56DialUpVideoWebServer = "b756ff10-520f-4749-a399-b780e2fc9250"
  WMProfile_V40_100Video = "8f99ddd8-6684-456b-a0a3-33e1316895f0"
  WMProfile_V40_250Video = "541841c3-9339-4f7b-9a22-b11540894e42"
  WMProfile_V40_512Video = "70440e6d-c4ef-4f84-8cd0-d5c28686e784"
  WMProfile_V40_1MBVideo = "b4482a4c-cc17-4b07-a94e-9818d5e0f13f"
  WMProfile_V40_3MBVideo = "55374ac0-309b-4396-b88f-e6e292113f28"
  WMProfile_V70_DialUpMBR = "5b16e74b-4068-45b5-b80e-7bf8c80d2c2f"
  WMProfile_V70_IntranetMBR = "045880dc-34b6-4ca9-a326-73557ed143f3"
  WMProfile_V70_2856100MBR = "07df7a25-3fe2-4a5b-8b1e-348b0721ca70"
  WMProfile_V70_288VideoVoice = "b952f38e-7dbc-4533-a9ca-b00b1c6e9800"
  WMProfile_V70_288VideoAudio = "58bba0ee-896a-4948-9953-85b736f83947"
  WMProfile_V70_288VideoWebServer = "70a32e2b-e2df-4ebd-9105-d9ca194a2d50"
  WMProfile_V70_56VideoWebServer = "def99e40-57bc-4ab3-b2d1-b6e3caf64257"
  WMProfile_V70_64VideoISDN = "c2b7a7e9-7b8e-4992-a1a1-068217a3b311"
  WMProfile_V70_100Video = "d9f3c932-5ea9-4c6d-89b4-2686e515426e"
  WMProfile_V70_256Video = "afe69b3a-403f-4a1b-8007-0e21cfb3df84"
  WMProfile_V70_384Video = "f3d45fbb-8782-44df-97c6-8678e2f9b13d"
  WMProfile_V70_768Video = "0326ebb6-f76e-4964-b0db-e729978d35ee"
  WMProfile_V70_1500Video = "0b89164a-5490-4686-9e37-5a80884e5146"
  WMProfile_V70_2000Video = "aa980124-bf10-4e4f-9afd-4329a7395cff"
  WMProfile_V70_700FilmContentVideo = "7a747920-2449-4d76-99cb-fdb0c90484d4"
  WMProfile_V70_1500FilmContentVideo = "f6a5f6df-ee3f-434c-a433-523ce55f516b"
  WMProfile_V70_6VoiceAudio = "eaba9fbf-b64f-49b3-aa0c-73fbdd150ad0"
  WMProfile_V70_288FMRadioMono = "c012a833-a03b-44a5-96dc-ed95cc65582d"
  WMProfile_V70_288FMRadioStereo = "e96d67c9-1a39-4dc4-b900-b1184dc83620"
  WMProfile_V70_56DialUpStereo = "674ee767-0949-4fac-875e-f4c9c292013b"
  WMProfile_V70_64AudioISDN = "91dea458-9d60-4212-9c59-d40919c939e4"
  WMProfile_V70_64Audio = "b29cffc6-f131-41db-b5e8-99d8b0b945f4"
  WMProfile_V70_96Audio = "a9d4b819-16cc-4a59-9f37-693dbb0302d6"
  WMProfile_V70_128Audio = "c64cf5da-df45-40d3-8027-de698d68dc66"
  WMProfile_V70_225VideoPDA = "f55ea573-4c02-42b5-9026-a8260c438a9f"
  WMProfile_V70_150VideoPDA = "0f472967-e3c6-4797-9694-f0304c5e2f17"
  WMProfile_V80_255VideoPDA = "feedbcdf-3fac-4c93-ac0d-47941ec72c0b"
  WMProfile_V80_150VideoPDA = "aee16dfa-2c14-4a2f-ad3f-a3034031784f"
  WMProfile_V80_28856VideoMBR = "d66920c4-c21f-4ec8-a0b4-95cf2bd57fc4"
  WMProfile_V80_100768VideoMBR = "5bdb5a0e-979e-47d3-9596-73b386392a55"
  WMProfile_V80_288100VideoMBR = "d8722c69-2419-4b36-b4e0-6e17b60564e5"
  WMProfile_V80_288Video = "3df678d9-1352-4186-bbf8-74f0c19b6ae2"
  WMProfile_V80_56Video = "254e8a96-2612-405c-8039-f0bf725ced7d"
  WMProfile_V80_100Video = "a2e300b4-c2d4-4fc0-b5dd-ecbd948dc0df"
  WMProfile_V80_256Video = "bbc75500-33d2-4466-b86b-122b201cc9ae"
  WMProfile_V80_384Video = "29b00c2b-09a9-48bd-ad09-cdae117d1da7"
  WMProfile_V80_768Video = "74d01102-e71a-4820-8f0d-13d2ec1e4872"
  WMProfile_V80_700NTSCVideo = "c8c2985f-e5d9-4538-9e23-9b21bf78f745"
  WMProfile_V80_1400NTSCVideo = "931d1bee-617a-4bcd-9905-ccd0786683ee"
  WMProfile_V80_384PALVideo = "9227c692-ae62-4f72-a7ea-736062d0e21e"
  WMProfile_V80_700PALVideo = "ec298949-639b-45e2-96fd-4ab32d5919c2"
  WMProfile_V80_288MonoAudio = "7ea3126d-e1ba-4716-89af-f65cee0c0c67"
  WMProfile_V80_288StereoAudio = "7e4cab5c-35dc-45bb-a7c0-19b28070d0cc"
  WMProfile_V80_32StereoAudio = "60907f9f-b352-47e5-b210-0ef1f47e9f9d"
  WMProfile_V80_48StereoAudio = "5ee06be5-492b-480a-8a8f-12f373ecf9d4"
  WMProfile_V80_64StereoAudio = "09bb5bc4-3176-457f-8dd6-3cd919123e2d"
  WMProfile_V80_96StereoAudio = "1fc81930-61f2-436f-9d33-349f2a1c0f10"
  WMProfile_V80_128StereoAudio = "407b9450-8bdc-4ee5-88b8-6f527bd941f2"
  WMProfile_V80_288VideoOnly = "8c45b4c7-4aeb-4f78-a5ec-88420b9dadef"
  WMProfile_V80_56VideoOnly = "6e2a6955-81df-4943-ba50-68a986a708f6"
  WMProfile_V80_FAIRVBRVideo = "3510a862-5850-4886-835f-d78ec6a64042"
  WMProfile_V80_HIGHVBRVideo = "0f10d9d3-3b04-4fb0-a3d3-88d4ac854acc"
  WMProfile_V80_BESTVBRVideo = "048439ba-309c-440e-9cb4-3dcca3756423"

  CLSID_WindowsMediaPlayer = LibC::GUID.new(0x6bf52a52_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])

  CLSID_WMPLib = LibC::GUID.new(0x6bf52a50_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])

  CLSID_WMPRemoteMediaServices = LibC::GUID.new(0xdf333473_u32, 0x2cf7_u16, 0x4be2_u16, StaticArray[0x90_u8, 0x7f_u8, 0x9a_u8, 0xad_u8, 0x56_u8, 0x61_u8, 0x36_u8, 0x4f_u8])

  CLSID_FeedsManager = LibC::GUID.new(0xfaeb54c4_u32, 0xf66f_u16, 0x4806_u16, StaticArray[0x83_u8, 0xa0_u8, 0x80_u8, 0x52_u8, 0x99_u8, 0xf5_u8, 0xe3_u8, 0xad_u8])

  CLSID_FeedFolderWatcher = LibC::GUID.new(0x281001ed_u32, 0x7765_u16, 0x4cb0_u16, StaticArray[0x84_u8, 0xaf_u8, 0xe9_u8, 0xb3_u8, 0x87_u8, 0xaf_u8, 0x1_u8, 0xff_u8])

  CLSID_FeedWatcher = LibC::GUID.new(0x18a6737b_u32, 0xf433_u16, 0x4687_u16, StaticArray[0x89_u8, 0xbc_u8, 0xa1_u8, 0xb4_u8, 0xdf_u8, 0xb9_u8, 0xf1_u8, 0x23_u8])

  enum WMPOpenState
    Wmposundefined = 0_i32
    Wmposplaylistchanging = 1_i32
    Wmposplaylistlocating = 2_i32
    Wmposplaylistconnecting = 3_i32
    Wmposplaylistloading = 4_i32
    Wmposplaylistopening = 5_i32
    Wmposplaylistopennomedia = 6_i32
    Wmposplaylistchanged = 7_i32
    Wmposmediachanging = 8_i32
    Wmposmedialocating = 9_i32
    Wmposmediaconnecting = 10_i32
    Wmposmedialoading = 11_i32
    Wmposmediaopening = 12_i32
    Wmposmediaopen = 13_i32
    Wmposbegincodecacquisition = 14_i32
    Wmposendcodecacquisition = 15_i32
    Wmposbeginlicenseacquisition = 16_i32
    Wmposendlicenseacquisition = 17_i32
    Wmposbeginindividualization = 18_i32
    Wmposendindividualization = 19_i32
    Wmposmediawaiting = 20_i32
    Wmposopeningunknownurl = 21_i32
  end
  enum WMPPlayState
    Wmppsundefined = 0_i32
    Wmppsstopped = 1_i32
    Wmppspaused = 2_i32
    Wmppsplaying = 3_i32
    Wmppsscanforward = 4_i32
    Wmppsscanreverse = 5_i32
    Wmppsbuffering = 6_i32
    Wmppswaiting = 7_i32
    Wmppsmediaended = 8_i32
    Wmppstransitioning = 9_i32
    Wmppsready = 10_i32
    Wmppsreconnecting = 11_i32
    Wmppslast = 12_i32
  end
  enum WMPPlaylistChangeEventType
    Wmplcunknown = 0_i32
    Wmplcclear = 1_i32
    Wmplcinfochange = 2_i32
    Wmplcmove = 3_i32
    Wmplcdelete = 4_i32
    Wmplcinsert = 5_i32
    Wmplcappend = 6_i32
    Wmplcprivate = 7_i32
    Wmplcnamechange = 8_i32
    Wmplcmorph = 9_i32
    Wmplcsort = 10_i32
    Wmplclast = 11_i32
  end
  enum WMPSyncState
    Wmpssunknown = 0_i32
    Wmpsssynchronizing = 1_i32
    Wmpssstopped = 2_i32
    Wmpssestimating = 3_i32
    Wmpsslast = 4_i32
  end
  enum WMPDeviceStatus
    Wmpdsunknown = 0_i32
    Wmpdspartnershipexists = 1_i32
    Wmpdspartnershipdeclined = 2_i32
    Wmpdspartnershipanother = 3_i32
    Wmpdsmanualdevice = 4_i32
    Wmpdsnewdevice = 5_i32
    Wmpdslast = 6_i32
  end
  enum WMPRipState
    Wmprsunknown = 0_i32
    Wmprsripping = 1_i32
    Wmprsstopped = 2_i32
  end
  enum WMPBurnFormat
    Wmpbfaudiocd = 0_i32
    Wmpbfdatacd = 1_i32
  end
  enum WMPBurnState
    Wmpbsunknown = 0_i32
    Wmpbsbusy = 1_i32
    Wmpbsready = 2_i32
    Wmpbswaitingfordisc = 3_i32
    Wmpbsrefreshstatuspending = 4_i32
    Wmpbspreparingtoburn = 5_i32
    Wmpbsburning = 6_i32
    Wmpbsstopped = 7_i32
    Wmpbserasing = 8_i32
    Wmpbsdownloading = 9_i32
  end
  enum WMPStringCollectionChangeEventType
    Wmpsccetunknown = 0_i32
    Wmpsccetinsert = 1_i32
    Wmpsccetchange = 2_i32
    Wmpsccetdelete = 3_i32
    Wmpsccetclear = 4_i32
    Wmpsccetbeginupdates = 5_i32
    Wmpsccetendupdates = 6_i32
  end
  enum WMPLibraryType
    Wmpltunknown = 0_i32
    Wmpltall = 1_i32
    Wmpltlocal = 2_i32
    Wmpltremote = 3_i32
    Wmpltdisc = 4_i32
    Wmpltportabledevice = 5_i32
  end
  enum WMPFolderScanState
    Wmpfssunknown = 0_i32
    Wmpfssscanning = 1_i32
    Wmpfssupdating = 2_i32
    Wmpfssstopped = 3_i32
  end
  enum WMPServices_StreamState
    WMPServices_StreamState_Stop = 0_i32
    WMPServices_StreamState_Pause = 1_i32
    WMPServices_StreamState_Play = 2_i32
  end
  enum WMPPlugin_Caps
    WMPPlugin_Caps_CannotConvertFormats = 1_i32
  end
  enum FEEDS_BACKGROUNDSYNC_ACTION
    FBSA_DISABLE = 0_i32
    FBSA_ENABLE = 1_i32
    FBSA_RUNNOW = 2_i32
  end
  enum FEEDS_BACKGROUNDSYNC_STATUS
    FBSS_DISABLED = 0_i32
    FBSS_ENABLED = 1_i32
  end
  enum FEEDS_EVENTS_SCOPE
    FES_ALL = 0_i32
    FES_SELF_ONLY = 1_i32
    FES_SELF_AND_CHILDREN_ONLY = 2_i32
  end
  enum FEEDS_EVENTS_MASK
    FEM_FOLDEREVENTS = 1_i32
    FEM_FEEDEVENTS = 2_i32
  end
  enum FEEDS_XML_SORT_PROPERTY
    FXSP_NONE = 0_i32
    FXSP_PUBDATE = 1_i32
    FXSP_DOWNLOADTIME = 2_i32
  end
  enum FEEDS_XML_SORT_ORDER
    FXSO_NONE = 0_i32
    FXSO_ASCENDING = 1_i32
    FXSO_DESCENDING = 2_i32
  end
  enum FEEDS_XML_FILTER_FLAGS
    FXFF_ALL = 0_i32
    FXFF_UNREAD = 1_i32
    FXFF_READ = 2_i32
  end
  enum FEEDS_XML_INCLUDE_FLAGS
    FXIF_NONE = 0_i32
    FXIF_CF_EXTENSIONS = 1_i32
  end
  enum FEEDS_DOWNLOAD_STATUS
    FDS_NONE = 0_i32
    FDS_PENDING = 1_i32
    FDS_DOWNLOADING = 2_i32
    FDS_DOWNLOADED = 3_i32
    FDS_DOWNLOAD_FAILED = 4_i32
  end
  enum FEEDS_SYNC_SETTING
    FSS_DEFAULT = 0_i32
    FSS_INTERVAL = 1_i32
    FSS_MANUAL = 2_i32
    FSS_SUGGESTED = 3_i32
  end
  enum FEEDS_DOWNLOAD_ERROR
    FDE_NONE = 0_i32
    FDE_DOWNLOAD_FAILED = 1_i32
    FDE_INVALID_FEED_FORMAT = 2_i32
    FDE_NORMALIZATION_FAILED = 3_i32
    FDE_PERSISTENCE_FAILED = 4_i32
    FDE_DOWNLOAD_BLOCKED = 5_i32
    FDE_CANCELED = 6_i32
    FDE_UNSUPPORTED_AUTH = 7_i32
    FDE_BACKGROUND_DOWNLOAD_DISABLED = 8_i32
    FDE_NOT_EXIST = 9_i32
    FDE_UNSUPPORTED_MSXML = 10_i32
    FDE_UNSUPPORTED_DTD = 11_i32
    FDE_DOWNLOAD_SIZE_LIMIT_EXCEEDED = 12_i32
    FDE_ACCESS_DENIED = 13_i32
    FDE_AUTH_FAILED = 14_i32
    FDE_INVALID_AUTH = 15_i32
  end
  enum FEEDS_EVENTS_ITEM_COUNT_FLAGS
    FEICF_READ_ITEM_COUNT_CHANGED = 1_i32
    FEICF_UNREAD_ITEM_COUNT_CHANGED = 2_i32
  end
  enum FEEDS_ERROR_CODE
    FEC_E_ERRORBASE = -1073479168_i32
    FEC_E_INVALIDMSXMLPROPERTY = -1073479168_i32
    FEC_E_DOWNLOADSIZELIMITEXCEEDED = -1073479167_i32
  end
  enum PlayerState
    Stop_state = 0_i32
    Pause_state = 1_i32
    Play_state = 2_i32
  end
  enum WMPPartnerNotification
    Wmpsnbackgroundprocessingbegin = 1_i32
    Wmpsnbackgroundprocessingend = 2_i32
    Wmpsncatalogdownloadfailure = 3_i32
    Wmpsncatalogdownloadcomplete = 4_i32
  end
  enum WMPCallbackNotification
    Wmpcnloginstatechange = 1_i32
    Wmpcnauthresult = 2_i32
    Wmpcnlicenseupdated = 3_i32
    Wmpcnnewcatalogavailable = 4_i32
    Wmpcnnewpluginavailable = 5_i32
    Wmpcndisableradioskipping = 6_i32
  end
  enum WMPTaskType
    Wmpttbrowse = 1_i32
    Wmpttsync = 2_i32
    Wmpttburn = 3_i32
    Wmpttcurrent = 4_i32
  end
  enum WMPTransactionType
    Wmpttnotransaction = 0_i32
    Wmpttdownload = 1_i32
    Wmpttbuy = 2_i32
  end
  enum WMPTemplateSize
    Wmptssmall = 0_i32
    Wmptsmedium = 1_i32
    Wmptslarge = 2_i32
  end
  enum WMPStreamingType
    Wmpstunknown = 0_i32
    Wmpstmusic = 1_i32
    Wmpstvideo = 2_i32
    Wmpstradio = 3_i32
  end
  enum WMPAccountType
    Wmpatbuyonly = 1_i32
    Wmpatsubscription = 2_i32
    Wmpatjanus = 3_i32
  end
  enum WMPSubscriptionServiceEvent
    Wmpssecurrentbegin = 1_i32
    Wmpssecurrentend = 2_i32
    Wmpssefullbegin = 3_i32
    Wmpssefullend = 4_i32
  end
  enum WMPSubscriptionDownloadState
    Wmpsdlsdownloading = 0_i32
    Wmpsdlspaused = 1_i32
    Wmpsdlsprocessing = 2_i32
    Wmpsdlscompleted = 3_i32
    Wmpsdlscancelled = 4_i32
  end

  @[Extern]
  record TimedLevel,
    frequency : UInt8[2048],
    waveform : UInt8[2048],
    state : Int32,
    timeStamp : Int64

  @[Extern]
  record WMPContextMenuInfo,
    dwID : UInt32,
    bstrMenuText : Win32cr::Foundation::BSTR,
    bstrHelpText : Win32cr::Foundation::BSTR

  @[Extern]
  record WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE,
    dwChangesSinceTransactionID : UInt32,
    dwResultSetStartingIndex : UInt32

  @[Extern]
  record WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC,
    dwCurrentTransactionID : UInt32,
    dwReturnedObjectCount : UInt32,
    dwUnretrievedObjectCount : UInt32,
    dwDeletedObjectStartingOffset : UInt32,
    dwFlags : UInt32,
    wsObjectPathnameList : UInt16*

  @[Extern]
  record IWMPErrorItemVtbl,
    query_interface : Proc(IWMPErrorItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPErrorItem*, UInt32),
    release : Proc(IWMPErrorItem*, UInt32),
    get_type_info_count : Proc(IWMPErrorItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPErrorItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPErrorItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPErrorItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_errorCode : Proc(IWMPErrorItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_errorDescription : Proc(IWMPErrorItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_errorContext : Proc(IWMPErrorItem*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_remedy : Proc(IWMPErrorItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_customUrl : Proc(IWMPErrorItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3614c646-3b3b-4de7-a81e-930e3f2127b3")]
  record IWMPErrorItem, lpVtbl : IWMPErrorItemVtbl* do
    GUID = LibC::GUID.new(0x3614c646_u32, 0x3b3b_u16, 0x4de7_u16, StaticArray[0xa8_u8, 0x1e_u8, 0x93_u8, 0xe_u8, 0x3f_u8, 0x21_u8, 0x27_u8, 0xb3_u8])
    def query_interface(this : IWMPErrorItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPErrorItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPErrorItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPErrorItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPErrorItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPErrorItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPErrorItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_errorCode(this : IWMPErrorItem*, phr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorCode.call(this, phr)
    end
    def get_errorDescription(this : IWMPErrorItem*, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorDescription.call(this, pbstrDescription)
    end
    def get_errorContext(this : IWMPErrorItem*, pvarContext : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorContext.call(this, pvarContext)
    end
    def get_remedy(this : IWMPErrorItem*, plRemedy : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_remedy.call(this, plRemedy)
    end
    def get_customUrl(this : IWMPErrorItem*, pbstrCustomUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_customUrl.call(this, pbstrCustomUrl)
    end

  end

  @[Extern]
  record IWMPErrorVtbl,
    query_interface : Proc(IWMPError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPError*, UInt32),
    release : Proc(IWMPError*, UInt32),
    get_type_info_count : Proc(IWMPError*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPError*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPError*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPError*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    clearErrorQueue : Proc(IWMPError*, Win32cr::Foundation::HRESULT),
    get_errorCount : Proc(IWMPError*, Int32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(IWMPError*, Int32, Void**, Win32cr::Foundation::HRESULT),
    webHelp : Proc(IWMPError*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a12dcf7d-14ab-4c1b-a8cd-63909f06025b")]
  record IWMPError, lpVtbl : IWMPErrorVtbl* do
    GUID = LibC::GUID.new(0xa12dcf7d_u32, 0x14ab_u16, 0x4c1b_u16, StaticArray[0xa8_u8, 0xcd_u8, 0x63_u8, 0x90_u8, 0x9f_u8, 0x6_u8, 0x2_u8, 0x5b_u8])
    def query_interface(this : IWMPError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPError*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPError*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPError*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPError*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def clearErrorQueue(this : IWMPError*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clearErrorQueue.call(this)
    end
    def get_errorCount(this : IWMPError*, plNumErrors : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorCount.call(this, plNumErrors)
    end
    def get_item(this : IWMPError*, dwIndex : Int32, ppErrorItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, dwIndex, ppErrorItem)
    end
    def webHelp(this : IWMPError*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.webHelp.call(this)
    end

  end

  @[Extern]
  record IWMPMediaVtbl,
    query_interface : Proc(IWMPMedia*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMedia*, UInt32),
    release : Proc(IWMPMedia*, UInt32),
    get_type_info_count : Proc(IWMPMedia*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPMedia*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPMedia*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPMedia*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isIdentical : Proc(IWMPMedia*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_sourceURL : Proc(IWMPMedia*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IWMPMedia*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_name : Proc(IWMPMedia*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_imageSourceWidth : Proc(IWMPMedia*, Int32*, Win32cr::Foundation::HRESULT),
    get_imageSourceHeight : Proc(IWMPMedia*, Int32*, Win32cr::Foundation::HRESULT),
    get_markerCount : Proc(IWMPMedia*, Int32*, Win32cr::Foundation::HRESULT),
    getMarkerTime : Proc(IWMPMedia*, Int32, Float64*, Win32cr::Foundation::HRESULT),
    getMarkerName : Proc(IWMPMedia*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IWMPMedia*, Float64*, Win32cr::Foundation::HRESULT),
    get_durationString : Proc(IWMPMedia*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_attributeCount : Proc(IWMPMedia*, Int32*, Win32cr::Foundation::HRESULT),
    getAttributeName : Proc(IWMPMedia*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPMedia*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    setItemInfo : Proc(IWMPMedia*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getItemInfoByAtom : Proc(IWMPMedia*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    isMemberOf : Proc(IWMPMedia*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    isReadOnlyItem : Proc(IWMPMedia*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("94d55e95-3fac-11d3-b155-00c04f79faa6")]
  record IWMPMedia, lpVtbl : IWMPMediaVtbl* do
    GUID = LibC::GUID.new(0x94d55e95_u32, 0x3fac_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x55_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
    def query_interface(this : IWMPMedia*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMedia*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMedia*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPMedia*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPMedia*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPMedia*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPMedia*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isIdentical(this : IWMPMedia*, pIWMPMedia : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isIdentical.call(this, pIWMPMedia, pvbool)
    end
    def get_sourceURL(this : IWMPMedia*, pbstrSourceURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sourceURL.call(this, pbstrSourceURL)
    end
    def get_name(this : IWMPMedia*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def put_name(this : IWMPMedia*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_name.call(this, bstrName)
    end
    def get_imageSourceWidth(this : IWMPMedia*, pWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_imageSourceWidth.call(this, pWidth)
    end
    def get_imageSourceHeight(this : IWMPMedia*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_imageSourceHeight.call(this, pHeight)
    end
    def get_markerCount(this : IWMPMedia*, pMarkerCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_markerCount.call(this, pMarkerCount)
    end
    def getMarkerTime(this : IWMPMedia*, marker_num : Int32, pMarkerTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMarkerTime.call(this, marker_num, pMarkerTime)
    end
    def getMarkerName(this : IWMPMedia*, marker_num : Int32, pbstrMarkerName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMarkerName.call(this, marker_num, pbstrMarkerName)
    end
    def get_duration(this : IWMPMedia*, pDuration : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def get_durationString(this : IWMPMedia*, pbstrDuration : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_durationString.call(this, pbstrDuration)
    end
    def get_attributeCount(this : IWMPMedia*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributeCount.call(this, plCount)
    end
    def getAttributeName(this : IWMPMedia*, lIndex : Int32, pbstrItemName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeName.call(this, lIndex, pbstrItemName)
    end
    def getItemInfo(this : IWMPMedia*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end
    def setItemInfo(this : IWMPMedia*, bstrItemName : Win32cr::Foundation::BSTR, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setItemInfo.call(this, bstrItemName, bstrVal)
    end
    def getItemInfoByAtom(this : IWMPMedia*, lAtom : Int32, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfoByAtom.call(this, lAtom, pbstrVal)
    end
    def isMemberOf(this : IWMPMedia*, pPlaylist : Void*, pvarfIsMemberOf : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isMemberOf.call(this, pPlaylist, pvarfIsMemberOf)
    end
    def isReadOnlyItem(this : IWMPMedia*, bstrItemName : Win32cr::Foundation::BSTR, pvarfIsReadOnly : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isReadOnlyItem.call(this, bstrItemName, pvarfIsReadOnly)
    end

  end

  @[Extern]
  record IWMPControlsVtbl,
    query_interface : Proc(IWMPControls*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPControls*, UInt32),
    release : Proc(IWMPControls*, UInt32),
    get_type_info_count : Proc(IWMPControls*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPControls*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPControls*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPControls*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isAvailable : Proc(IWMPControls*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    play : Proc(IWMPControls*, Win32cr::Foundation::HRESULT),
    stop : Proc(IWMPControls*, Win32cr::Foundation::HRESULT),
    pause : Proc(IWMPControls*, Win32cr::Foundation::HRESULT),
    fastForward : Proc(IWMPControls*, Win32cr::Foundation::HRESULT),
    fastReverse : Proc(IWMPControls*, Win32cr::Foundation::HRESULT),
    get_currentPosition : Proc(IWMPControls*, Float64*, Win32cr::Foundation::HRESULT),
    put_currentPosition : Proc(IWMPControls*, Float64, Win32cr::Foundation::HRESULT),
    get_currentPositionString : Proc(IWMPControls*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IWMPControls*, Win32cr::Foundation::HRESULT),
    previous : Proc(IWMPControls*, Win32cr::Foundation::HRESULT),
    get_currentItem : Proc(IWMPControls*, Void**, Win32cr::Foundation::HRESULT),
    put_currentItem : Proc(IWMPControls*, Void*, Win32cr::Foundation::HRESULT),
    get_currentMarker : Proc(IWMPControls*, Int32*, Win32cr::Foundation::HRESULT),
    put_currentMarker : Proc(IWMPControls*, Int32, Win32cr::Foundation::HRESULT),
    playItem : Proc(IWMPControls*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("74c09e02-f828-11d2-a74b-00a0c905f36e")]
  record IWMPControls, lpVtbl : IWMPControlsVtbl* do
    GUID = LibC::GUID.new(0x74c09e02_u32, 0xf828_u16, 0x11d2_u16, StaticArray[0xa7_u8, 0x4b_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x6e_u8])
    def query_interface(this : IWMPControls*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPControls*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPControls*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPControls*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPControls*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPControls*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPControls*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isAvailable(this : IWMPControls*, bstrItem : Win32cr::Foundation::BSTR, pIsAvailable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAvailable.call(this, bstrItem, pIsAvailable)
    end
    def play(this : IWMPControls*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play.call(this)
    end
    def stop(this : IWMPControls*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IWMPControls*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def fastForward(this : IWMPControls*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fastForward.call(this)
    end
    def fastReverse(this : IWMPControls*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fastReverse.call(this)
    end
    def get_currentPosition(this : IWMPControls*, pdCurrentPosition : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPosition.call(this, pdCurrentPosition)
    end
    def put_currentPosition(this : IWMPControls*, dCurrentPosition : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPosition.call(this, dCurrentPosition)
    end
    def get_currentPositionString(this : IWMPControls*, pbstrCurrentPosition : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPositionString.call(this, pbstrCurrentPosition)
    end
    def next__(this : IWMPControls*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this)
    end
    def previous(this : IWMPControls*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.previous.call(this)
    end
    def get_currentItem(this : IWMPControls*, ppIWMPMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentItem.call(this, ppIWMPMedia)
    end
    def put_currentItem(this : IWMPControls*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentItem.call(this, pIWMPMedia)
    end
    def get_currentMarker(this : IWMPControls*, plMarker : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMarker.call(this, plMarker)
    end
    def put_currentMarker(this : IWMPControls*, lMarker : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMarker.call(this, lMarker)
    end
    def playItem(this : IWMPControls*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.playItem.call(this, pIWMPMedia)
    end

  end

  @[Extern]
  record IWMPSettingsVtbl,
    query_interface : Proc(IWMPSettings*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSettings*, UInt32),
    release : Proc(IWMPSettings*, UInt32),
    get_type_info_count : Proc(IWMPSettings*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPSettings*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPSettings*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPSettings*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isAvailable : Proc(IWMPSettings*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_autoStart : Proc(IWMPSettings*, Int16*, Win32cr::Foundation::HRESULT),
    put_autoStart : Proc(IWMPSettings*, Int16, Win32cr::Foundation::HRESULT),
    get_baseURL : Proc(IWMPSettings*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_baseURL : Proc(IWMPSettings*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_defaultFrame : Proc(IWMPSettings*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_defaultFrame : Proc(IWMPSettings*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_invokeURLs : Proc(IWMPSettings*, Int16*, Win32cr::Foundation::HRESULT),
    put_invokeURLs : Proc(IWMPSettings*, Int16, Win32cr::Foundation::HRESULT),
    get_mute : Proc(IWMPSettings*, Int16*, Win32cr::Foundation::HRESULT),
    put_mute : Proc(IWMPSettings*, Int16, Win32cr::Foundation::HRESULT),
    get_playCount : Proc(IWMPSettings*, Int32*, Win32cr::Foundation::HRESULT),
    put_playCount : Proc(IWMPSettings*, Int32, Win32cr::Foundation::HRESULT),
    get_rate : Proc(IWMPSettings*, Float64*, Win32cr::Foundation::HRESULT),
    put_rate : Proc(IWMPSettings*, Float64, Win32cr::Foundation::HRESULT),
    get_balance : Proc(IWMPSettings*, Int32*, Win32cr::Foundation::HRESULT),
    put_balance : Proc(IWMPSettings*, Int32, Win32cr::Foundation::HRESULT),
    get_volume : Proc(IWMPSettings*, Int32*, Win32cr::Foundation::HRESULT),
    put_volume : Proc(IWMPSettings*, Int32, Win32cr::Foundation::HRESULT),
    getMode : Proc(IWMPSettings*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    setMode : Proc(IWMPSettings*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    get_enableErrorDialogs : Proc(IWMPSettings*, Int16*, Win32cr::Foundation::HRESULT),
    put_enableErrorDialogs : Proc(IWMPSettings*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9104d1ab-80c9-4fed-abf0-2e6417a6df14")]
  record IWMPSettings, lpVtbl : IWMPSettingsVtbl* do
    GUID = LibC::GUID.new(0x9104d1ab_u32, 0x80c9_u16, 0x4fed_u16, StaticArray[0xab_u8, 0xf0_u8, 0x2e_u8, 0x64_u8, 0x17_u8, 0xa6_u8, 0xdf_u8, 0x14_u8])
    def query_interface(this : IWMPSettings*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSettings*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSettings*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPSettings*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPSettings*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPSettings*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPSettings*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isAvailable(this : IWMPSettings*, bstrItem : Win32cr::Foundation::BSTR, pIsAvailable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAvailable.call(this, bstrItem, pIsAvailable)
    end
    def get_autoStart(this : IWMPSettings*, pfAutoStart : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_autoStart.call(this, pfAutoStart)
    end
    def put_autoStart(this : IWMPSettings*, fAutoStart : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_autoStart.call(this, fAutoStart)
    end
    def get_baseURL(this : IWMPSettings*, pbstrBaseURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseURL.call(this, pbstrBaseURL)
    end
    def put_baseURL(this : IWMPSettings*, bstrBaseURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_baseURL.call(this, bstrBaseURL)
    end
    def get_defaultFrame(this : IWMPSettings*, pbstrDefaultFrame : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_defaultFrame.call(this, pbstrDefaultFrame)
    end
    def put_defaultFrame(this : IWMPSettings*, bstrDefaultFrame : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_defaultFrame.call(this, bstrDefaultFrame)
    end
    def get_invokeURLs(this : IWMPSettings*, pfInvokeURLs : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_invokeURLs.call(this, pfInvokeURLs)
    end
    def put_invokeURLs(this : IWMPSettings*, fInvokeURLs : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_invokeURLs.call(this, fInvokeURLs)
    end
    def get_mute(this : IWMPSettings*, pfMute : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mute.call(this, pfMute)
    end
    def put_mute(this : IWMPSettings*, fMute : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_mute.call(this, fMute)
    end
    def get_playCount(this : IWMPSettings*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playCount.call(this, plCount)
    end
    def put_playCount(this : IWMPSettings*, lCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_playCount.call(this, lCount)
    end
    def get_rate(this : IWMPSettings*, pdRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rate.call(this, pdRate)
    end
    def put_rate(this : IWMPSettings*, dRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_rate.call(this, dRate)
    end
    def get_balance(this : IWMPSettings*, plBalance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_balance.call(this, plBalance)
    end
    def put_balance(this : IWMPSettings*, lBalance : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_balance.call(this, lBalance)
    end
    def get_volume(this : IWMPSettings*, plVolume : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_volume.call(this, plVolume)
    end
    def put_volume(this : IWMPSettings*, lVolume : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_volume.call(this, lVolume)
    end
    def getMode(this : IWMPSettings*, bstrMode : Win32cr::Foundation::BSTR, pvarfMode : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMode.call(this, bstrMode, pvarfMode)
    end
    def setMode(this : IWMPSettings*, bstrMode : Win32cr::Foundation::BSTR, varfMode : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setMode.call(this, bstrMode, varfMode)
    end
    def get_enableErrorDialogs(this : IWMPSettings*, pfEnableErrorDialogs : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enableErrorDialogs.call(this, pfEnableErrorDialogs)
    end
    def put_enableErrorDialogs(this : IWMPSettings*, fEnableErrorDialogs : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enableErrorDialogs.call(this, fEnableErrorDialogs)
    end

  end

  @[Extern]
  record IWMPClosedCaptionVtbl,
    query_interface : Proc(IWMPClosedCaption*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPClosedCaption*, UInt32),
    release : Proc(IWMPClosedCaption*, UInt32),
    get_type_info_count : Proc(IWMPClosedCaption*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPClosedCaption*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPClosedCaption*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPClosedCaption*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_SAMIStyle : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SAMIStyle : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SAMILang : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SAMILang : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SAMIFileName : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SAMIFileName : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_captioningId : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_captioningId : Proc(IWMPClosedCaption*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4f2df574-c588-11d3-9ed0-00c04fb6e937")]
  record IWMPClosedCaption, lpVtbl : IWMPClosedCaptionVtbl* do
    GUID = LibC::GUID.new(0x4f2df574_u32, 0xc588_u16, 0x11d3_u16, StaticArray[0x9e_u8, 0xd0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xe9_u8, 0x37_u8])
    def query_interface(this : IWMPClosedCaption*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPClosedCaption*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPClosedCaption*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPClosedCaption*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPClosedCaption*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPClosedCaption*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPClosedCaption*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_SAMIStyle(this : IWMPClosedCaption*, pbstrSAMIStyle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMIStyle.call(this, pbstrSAMIStyle)
    end
    def put_SAMIStyle(this : IWMPClosedCaption*, bstrSAMIStyle : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAMIStyle.call(this, bstrSAMIStyle)
    end
    def get_SAMILang(this : IWMPClosedCaption*, pbstrSAMILang : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMILang.call(this, pbstrSAMILang)
    end
    def put_SAMILang(this : IWMPClosedCaption*, bstrSAMILang : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAMILang.call(this, bstrSAMILang)
    end
    def get_SAMIFileName(this : IWMPClosedCaption*, pbstrSAMIFileName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMIFileName.call(this, pbstrSAMIFileName)
    end
    def put_SAMIFileName(this : IWMPClosedCaption*, bstrSAMIFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAMIFileName.call(this, bstrSAMIFileName)
    end
    def get_captioningId(this : IWMPClosedCaption*, pbstrCaptioningID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_captioningId.call(this, pbstrCaptioningID)
    end
    def put_captioningId(this : IWMPClosedCaption*, bstrCaptioningID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_captioningId.call(this, bstrCaptioningID)
    end

  end

  @[Extern]
  record IWMPPlaylistVtbl,
    query_interface : Proc(IWMPPlaylist*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlaylist*, UInt32),
    release : Proc(IWMPPlaylist*, UInt32),
    get_type_info_count : Proc(IWMPPlaylist*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlaylist*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlaylist*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlaylist*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IWMPPlaylist*, Int32*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IWMPPlaylist*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_name : Proc(IWMPPlaylist*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_attributeCount : Proc(IWMPPlaylist*, Int32*, Win32cr::Foundation::HRESULT),
    get_attributeName : Proc(IWMPPlaylist*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_item : Proc(IWMPPlaylist*, Int32, Void**, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPPlaylist*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    setItemInfo : Proc(IWMPPlaylist*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_isIdentical : Proc(IWMPPlaylist*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    clear : Proc(IWMPPlaylist*, Win32cr::Foundation::HRESULT),
    insertItem : Proc(IWMPPlaylist*, Int32, Void*, Win32cr::Foundation::HRESULT),
    appendItem : Proc(IWMPPlaylist*, Void*, Win32cr::Foundation::HRESULT),
    removeItem : Proc(IWMPPlaylist*, Void*, Win32cr::Foundation::HRESULT),
    moveItem : Proc(IWMPPlaylist*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d5f0f4f1-130c-11d3-b14e-00c04f79faa6")]
  record IWMPPlaylist, lpVtbl : IWMPPlaylistVtbl* do
    GUID = LibC::GUID.new(0xd5f0f4f1_u32, 0x130c_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x4e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
    def query_interface(this : IWMPPlaylist*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlaylist*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlaylist*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlaylist*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlaylist*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlaylist*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlaylist*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_count(this : IWMPPlaylist*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def get_name(this : IWMPPlaylist*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def put_name(this : IWMPPlaylist*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_name.call(this, bstrName)
    end
    def get_attributeCount(this : IWMPPlaylist*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributeCount.call(this, plCount)
    end
    def get_attributeName(this : IWMPPlaylist*, lIndex : Int32, pbstrAttributeName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributeName.call(this, lIndex, pbstrAttributeName)
    end
    def get_item(this : IWMPPlaylist*, lIndex : Int32, ppIWMPMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, lIndex, ppIWMPMedia)
    end
    def getItemInfo(this : IWMPPlaylist*, bstrName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrName, pbstrVal)
    end
    def setItemInfo(this : IWMPPlaylist*, bstrName : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setItemInfo.call(this, bstrName, bstrValue)
    end
    def get_isIdentical(this : IWMPPlaylist*, pIWMPPlaylist : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isIdentical.call(this, pIWMPPlaylist, pvbool)
    end
    def clear(this : IWMPPlaylist*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def insertItem(this : IWMPPlaylist*, lIndex : Int32, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insertItem.call(this, lIndex, pIWMPMedia)
    end
    def appendItem(this : IWMPPlaylist*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.appendItem.call(this, pIWMPMedia)
    end
    def removeItem(this : IWMPPlaylist*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeItem.call(this, pIWMPMedia)
    end
    def moveItem(this : IWMPPlaylist*, lIndexOld : Int32, lIndexNew : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.moveItem.call(this, lIndexOld, lIndexNew)
    end

  end

  @[Extern]
  record IWMPCdromVtbl,
    query_interface : Proc(IWMPCdrom*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPCdrom*, UInt32),
    release : Proc(IWMPCdrom*, UInt32),
    get_type_info_count : Proc(IWMPCdrom*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPCdrom*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPCdrom*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPCdrom*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_driveSpecifier : Proc(IWMPCdrom*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_playlist : Proc(IWMPCdrom*, Void**, Win32cr::Foundation::HRESULT),
    eject : Proc(IWMPCdrom*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cfab6e98-8730-11d3-b388-00c04f68574b")]
  record IWMPCdrom, lpVtbl : IWMPCdromVtbl* do
    GUID = LibC::GUID.new(0xcfab6e98_u32, 0x8730_u16, 0x11d3_u16, StaticArray[0xb3_u8, 0x88_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x57_u8, 0x4b_u8])
    def query_interface(this : IWMPCdrom*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPCdrom*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPCdrom*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPCdrom*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPCdrom*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPCdrom*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPCdrom*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_driveSpecifier(this : IWMPCdrom*, pbstrDrive : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_driveSpecifier.call(this, pbstrDrive)
    end
    def get_playlist(this : IWMPCdrom*, ppPlaylist : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlist.call(this, ppPlaylist)
    end
    def eject(this : IWMPCdrom*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.eject.call(this)
    end

  end

  @[Extern]
  record IWMPCdromCollectionVtbl,
    query_interface : Proc(IWMPCdromCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPCdromCollection*, UInt32),
    release : Proc(IWMPCdromCollection*, UInt32),
    get_type_info_count : Proc(IWMPCdromCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPCdromCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPCdromCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPCdromCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IWMPCdromCollection*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IWMPCdromCollection*, Int32, Void**, Win32cr::Foundation::HRESULT),
    getByDriveSpecifier : Proc(IWMPCdromCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee4c8fe2-34b2-11d3-a3bf-006097c9b344")]
  record IWMPCdromCollection, lpVtbl : IWMPCdromCollectionVtbl* do
    GUID = LibC::GUID.new(0xee4c8fe2_u32, 0x34b2_u16, 0x11d3_u16, StaticArray[0xa3_u8, 0xbf_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xb3_u8, 0x44_u8])
    def query_interface(this : IWMPCdromCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPCdromCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPCdromCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPCdromCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPCdromCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPCdromCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPCdromCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_count(this : IWMPCdromCollection*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def item(this : IWMPCdromCollection*, lIndex : Int32, ppItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, lIndex, ppItem)
    end
    def getByDriveSpecifier(this : IWMPCdromCollection*, bstrDriveSpecifier : Win32cr::Foundation::BSTR, ppCdrom : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByDriveSpecifier.call(this, bstrDriveSpecifier, ppCdrom)
    end

  end

  @[Extern]
  record IWMPStringCollectionVtbl,
    query_interface : Proc(IWMPStringCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPStringCollection*, UInt32),
    release : Proc(IWMPStringCollection*, UInt32),
    get_type_info_count : Proc(IWMPStringCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPStringCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPStringCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPStringCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IWMPStringCollection*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IWMPStringCollection*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4a976298-8c0d-11d3-b389-00c04f68574b")]
  record IWMPStringCollection, lpVtbl : IWMPStringCollectionVtbl* do
    GUID = LibC::GUID.new(0x4a976298_u32, 0x8c0d_u16, 0x11d3_u16, StaticArray[0xb3_u8, 0x89_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x68_u8, 0x57_u8, 0x4b_u8])
    def query_interface(this : IWMPStringCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPStringCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPStringCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPStringCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPStringCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPStringCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPStringCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_count(this : IWMPStringCollection*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def item(this : IWMPStringCollection*, lIndex : Int32, pbstrString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, lIndex, pbstrString)
    end

  end

  @[Extern]
  record IWMPMediaCollectionVtbl,
    query_interface : Proc(IWMPMediaCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMediaCollection*, UInt32),
    release : Proc(IWMPMediaCollection*, UInt32),
    get_type_info_count : Proc(IWMPMediaCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPMediaCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPMediaCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPMediaCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    add : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getAll : Proc(IWMPMediaCollection*, Void**, Win32cr::Foundation::HRESULT),
    getByName : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByGenre : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByAuthor : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByAlbum : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByAttribute : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    remove : Proc(IWMPMediaCollection*, Void*, Int16, Win32cr::Foundation::HRESULT),
    getAttributeStringCollection : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getMediaAtom : Proc(IWMPMediaCollection*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    setDeleted : Proc(IWMPMediaCollection*, Void*, Int16, Win32cr::Foundation::HRESULT),
    isDeleted : Proc(IWMPMediaCollection*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8363bc22-b4b4-4b19-989d-1cd765749dd1")]
  record IWMPMediaCollection, lpVtbl : IWMPMediaCollectionVtbl* do
    GUID = LibC::GUID.new(0x8363bc22_u32, 0xb4b4_u16, 0x4b19_u16, StaticArray[0x98_u8, 0x9d_u8, 0x1c_u8, 0xd7_u8, 0x65_u8, 0x74_u8, 0x9d_u8, 0xd1_u8])
    def query_interface(this : IWMPMediaCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMediaCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMediaCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPMediaCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPMediaCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPMediaCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPMediaCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def add(this : IWMPMediaCollection*, bstrURL : Win32cr::Foundation::BSTR, ppItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, bstrURL, ppItem)
    end
    def getAll(this : IWMPMediaCollection*, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAll.call(this, ppMediaItems)
    end
    def getByName(this : IWMPMediaCollection*, bstrName : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByName.call(this, bstrName, ppMediaItems)
    end
    def getByGenre(this : IWMPMediaCollection*, bstrGenre : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByGenre.call(this, bstrGenre, ppMediaItems)
    end
    def getByAuthor(this : IWMPMediaCollection*, bstrAuthor : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByAuthor.call(this, bstrAuthor, ppMediaItems)
    end
    def getByAlbum(this : IWMPMediaCollection*, bstrAlbum : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByAlbum.call(this, bstrAlbum, ppMediaItems)
    end
    def getByAttribute(this : IWMPMediaCollection*, bstrAttribute : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByAttribute.call(this, bstrAttribute, bstrValue, ppMediaItems)
    end
    def remove(this : IWMPMediaCollection*, pItem : Void*, varfDeleteFile : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, pItem, varfDeleteFile)
    end
    def getAttributeStringCollection(this : IWMPMediaCollection*, bstrAttribute : Win32cr::Foundation::BSTR, bstrMediaType : Win32cr::Foundation::BSTR, ppStringCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeStringCollection.call(this, bstrAttribute, bstrMediaType, ppStringCollection)
    end
    def getMediaAtom(this : IWMPMediaCollection*, bstrItemName : Win32cr::Foundation::BSTR, plAtom : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMediaAtom.call(this, bstrItemName, plAtom)
    end
    def setDeleted(this : IWMPMediaCollection*, pItem : Void*, varfIsDeleted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setDeleted.call(this, pItem, varfIsDeleted)
    end
    def isDeleted(this : IWMPMediaCollection*, pItem : Void*, pvarfIsDeleted : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isDeleted.call(this, pItem, pvarfIsDeleted)
    end

  end

  @[Extern]
  record IWMPPlaylistArrayVtbl,
    query_interface : Proc(IWMPPlaylistArray*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlaylistArray*, UInt32),
    release : Proc(IWMPPlaylistArray*, UInt32),
    get_type_info_count : Proc(IWMPPlaylistArray*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlaylistArray*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlaylistArray*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlaylistArray*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IWMPPlaylistArray*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IWMPPlaylistArray*, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("679409c0-99f7-11d3-9fb7-00105aa620bb")]
  record IWMPPlaylistArray, lpVtbl : IWMPPlaylistArrayVtbl* do
    GUID = LibC::GUID.new(0x679409c0_u32, 0x99f7_u16, 0x11d3_u16, StaticArray[0x9f_u8, 0xb7_u8, 0x0_u8, 0x10_u8, 0x5a_u8, 0xa6_u8, 0x20_u8, 0xbb_u8])
    def query_interface(this : IWMPPlaylistArray*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlaylistArray*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlaylistArray*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlaylistArray*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlaylistArray*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlaylistArray*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlaylistArray*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_count(this : IWMPPlaylistArray*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def item(this : IWMPPlaylistArray*, lIndex : Int32, ppItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, lIndex, ppItem)
    end

  end

  @[Extern]
  record IWMPPlaylistCollectionVtbl,
    query_interface : Proc(IWMPPlaylistCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlaylistCollection*, UInt32),
    release : Proc(IWMPPlaylistCollection*, UInt32),
    get_type_info_count : Proc(IWMPPlaylistCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlaylistCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlaylistCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlaylistCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    newPlaylist : Proc(IWMPPlaylistCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getAll : Proc(IWMPPlaylistCollection*, Void**, Win32cr::Foundation::HRESULT),
    getByName : Proc(IWMPPlaylistCollection*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    remove : Proc(IWMPPlaylistCollection*, Void*, Win32cr::Foundation::HRESULT),
    setDeleted : Proc(IWMPPlaylistCollection*, Void*, Int16, Win32cr::Foundation::HRESULT),
    isDeleted : Proc(IWMPPlaylistCollection*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    importPlaylist : Proc(IWMPPlaylistCollection*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("10a13217-23a7-439b-b1c0-d847c79b7774")]
  record IWMPPlaylistCollection, lpVtbl : IWMPPlaylistCollectionVtbl* do
    GUID = LibC::GUID.new(0x10a13217_u32, 0x23a7_u16, 0x439b_u16, StaticArray[0xb1_u8, 0xc0_u8, 0xd8_u8, 0x47_u8, 0xc7_u8, 0x9b_u8, 0x77_u8, 0x74_u8])
    def query_interface(this : IWMPPlaylistCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlaylistCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlaylistCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlaylistCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlaylistCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlaylistCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlaylistCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def newPlaylist(this : IWMPPlaylistCollection*, bstrName : Win32cr::Foundation::BSTR, ppItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.newPlaylist.call(this, bstrName, ppItem)
    end
    def getAll(this : IWMPPlaylistCollection*, ppPlaylistArray : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAll.call(this, ppPlaylistArray)
    end
    def getByName(this : IWMPPlaylistCollection*, bstrName : Win32cr::Foundation::BSTR, ppPlaylistArray : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByName.call(this, bstrName, ppPlaylistArray)
    end
    def remove(this : IWMPPlaylistCollection*, pItem : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, pItem)
    end
    def setDeleted(this : IWMPPlaylistCollection*, pItem : Void*, varfIsDeleted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setDeleted.call(this, pItem, varfIsDeleted)
    end
    def isDeleted(this : IWMPPlaylistCollection*, pItem : Void*, pvarfIsDeleted : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isDeleted.call(this, pItem, pvarfIsDeleted)
    end
    def importPlaylist(this : IWMPPlaylistCollection*, pItem : Void*, ppImportedItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.importPlaylist.call(this, pItem, ppImportedItem)
    end

  end

  @[Extern]
  record IWMPNetworkVtbl,
    query_interface : Proc(IWMPNetwork*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPNetwork*, UInt32),
    release : Proc(IWMPNetwork*, UInt32),
    get_type_info_count : Proc(IWMPNetwork*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPNetwork*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPNetwork*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPNetwork*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_bandWidth : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_recoveredPackets : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_sourceProtocol : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_receivedPackets : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_lostPackets : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_receptionQuality : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_bufferingCount : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_bufferingProgress : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_bufferingTime : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    put_bufferingTime : Proc(IWMPNetwork*, Int32, Win32cr::Foundation::HRESULT),
    get_frameRate : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_maxBitRate : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_bitRate : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    getProxySettings : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    setProxySettings : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    getProxyName : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    setProxyName : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getProxyPort : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    setProxyPort : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    getProxyExceptionList : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    setProxyExceptionList : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getProxyBypassForLocal : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    setProxyBypassForLocal : Proc(IWMPNetwork*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    get_maxBandwidth : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    put_maxBandwidth : Proc(IWMPNetwork*, Int32, Win32cr::Foundation::HRESULT),
    get_downloadProgress : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_encodedFrameRate : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT),
    get_framesSkipped : Proc(IWMPNetwork*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ec21b779-edef-462d-bba4-ad9dde2b29a7")]
  record IWMPNetwork, lpVtbl : IWMPNetworkVtbl* do
    GUID = LibC::GUID.new(0xec21b779_u32, 0xedef_u16, 0x462d_u16, StaticArray[0xbb_u8, 0xa4_u8, 0xad_u8, 0x9d_u8, 0xde_u8, 0x2b_u8, 0x29_u8, 0xa7_u8])
    def query_interface(this : IWMPNetwork*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPNetwork*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPNetwork*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPNetwork*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPNetwork*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPNetwork*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPNetwork*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_bandWidth(this : IWMPNetwork*, plBandwidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bandWidth.call(this, plBandwidth)
    end
    def get_recoveredPackets(this : IWMPNetwork*, plRecoveredPackets : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_recoveredPackets.call(this, plRecoveredPackets)
    end
    def get_sourceProtocol(this : IWMPNetwork*, pbstrSourceProtocol : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sourceProtocol.call(this, pbstrSourceProtocol)
    end
    def get_receivedPackets(this : IWMPNetwork*, plReceivedPackets : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_receivedPackets.call(this, plReceivedPackets)
    end
    def get_lostPackets(this : IWMPNetwork*, plLostPackets : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lostPackets.call(this, plLostPackets)
    end
    def get_receptionQuality(this : IWMPNetwork*, plReceptionQuality : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_receptionQuality.call(this, plReceptionQuality)
    end
    def get_bufferingCount(this : IWMPNetwork*, plBufferingCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bufferingCount.call(this, plBufferingCount)
    end
    def get_bufferingProgress(this : IWMPNetwork*, plBufferingProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bufferingProgress.call(this, plBufferingProgress)
    end
    def get_bufferingTime(this : IWMPNetwork*, plBufferingTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bufferingTime.call(this, plBufferingTime)
    end
    def put_bufferingTime(this : IWMPNetwork*, lBufferingTime : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_bufferingTime.call(this, lBufferingTime)
    end
    def get_frameRate(this : IWMPNetwork*, plFrameRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frameRate.call(this, plFrameRate)
    end
    def get_maxBitRate(this : IWMPNetwork*, plBitRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxBitRate.call(this, plBitRate)
    end
    def get_bitRate(this : IWMPNetwork*, plBitRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bitRate.call(this, plBitRate)
    end
    def getProxySettings(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, plProxySetting : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProxySettings.call(this, bstrProtocol, plProxySetting)
    end
    def setProxySettings(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, lProxySetting : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProxySettings.call(this, bstrProtocol, lProxySetting)
    end
    def getProxyName(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, pbstrProxyName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProxyName.call(this, bstrProtocol, pbstrProxyName)
    end
    def setProxyName(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, bstrProxyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProxyName.call(this, bstrProtocol, bstrProxyName)
    end
    def getProxyPort(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, lProxyPort : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProxyPort.call(this, bstrProtocol, lProxyPort)
    end
    def setProxyPort(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, lProxyPort : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProxyPort.call(this, bstrProtocol, lProxyPort)
    end
    def getProxyExceptionList(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, pbstrExceptionList : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProxyExceptionList.call(this, bstrProtocol, pbstrExceptionList)
    end
    def setProxyExceptionList(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, pbstrExceptionList : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProxyExceptionList.call(this, bstrProtocol, pbstrExceptionList)
    end
    def getProxyBypassForLocal(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, pfBypassForLocal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getProxyBypassForLocal.call(this, bstrProtocol, pfBypassForLocal)
    end
    def setProxyBypassForLocal(this : IWMPNetwork*, bstrProtocol : Win32cr::Foundation::BSTR, fBypassForLocal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setProxyBypassForLocal.call(this, bstrProtocol, fBypassForLocal)
    end
    def get_maxBandwidth(this : IWMPNetwork*, lMaxBandwidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maxBandwidth.call(this, lMaxBandwidth)
    end
    def put_maxBandwidth(this : IWMPNetwork*, lMaxBandwidth : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_maxBandwidth.call(this, lMaxBandwidth)
    end
    def get_downloadProgress(this : IWMPNetwork*, plDownloadProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_downloadProgress.call(this, plDownloadProgress)
    end
    def get_encodedFrameRate(this : IWMPNetwork*, plFrameRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_encodedFrameRate.call(this, plFrameRate)
    end
    def get_framesSkipped(this : IWMPNetwork*, plFrames : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_framesSkipped.call(this, plFrames)
    end

  end

  @[Extern]
  record IWMPCoreVtbl,
    query_interface : Proc(IWMPCore*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPCore*, UInt32),
    release : Proc(IWMPCore*, UInt32),
    get_type_info_count : Proc(IWMPCore*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPCore*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPCore*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPCore*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IWMPCore*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPCore*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IWMPCore*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_openState : Proc(IWMPCore*, Win32cr::Media::MediaPlayer::WMPOpenState*, Win32cr::Foundation::HRESULT),
    get_playState : Proc(IWMPCore*, Win32cr::Media::MediaPlayer::WMPPlayState*, Win32cr::Foundation::HRESULT),
    get_controls : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_settings : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_currentMedia : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    put_currentMedia : Proc(IWMPCore*, Void*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_playlistCollection : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_versionInfo : Proc(IWMPCore*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    launchURL : Proc(IWMPCore*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_network : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_currentPlaylist : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    put_currentPlaylist : Proc(IWMPCore*, Void*, Win32cr::Foundation::HRESULT),
    get_cdromCollection : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_closedCaption : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_isOnline : Proc(IWMPCore*, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPCore*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPCore*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d84cca99-cce2-11d2-9ecc-0000f8085981")]
  record IWMPCore, lpVtbl : IWMPCoreVtbl* do
    GUID = LibC::GUID.new(0xd84cca99_u32, 0xcce2_u16, 0x11d2_u16, StaticArray[0x9e_u8, 0xcc_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x8_u8, 0x59_u8, 0x81_u8])
    def query_interface(this : IWMPCore*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPCore*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPCore*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPCore*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPCore*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPCore*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPCore*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def close(this : IWMPCore*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_URL(this : IWMPCore*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end
    def put_URL(this : IWMPCore*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, bstrURL)
    end
    def get_openState(this : IWMPCore*, pwmpos : Win32cr::Media::MediaPlayer::WMPOpenState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_openState.call(this, pwmpos)
    end
    def get_playState(this : IWMPCore*, pwmpps : Win32cr::Media::MediaPlayer::WMPPlayState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playState.call(this, pwmpps)
    end
    def get_controls(this : IWMPCore*, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controls.call(this, ppControl)
    end
    def get_settings(this : IWMPCore*, ppSettings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_settings.call(this, ppSettings)
    end
    def get_currentMedia(this : IWMPCore*, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMedia.call(this, ppMedia)
    end
    def put_currentMedia(this : IWMPCore*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMedia.call(this, pMedia)
    end
    def get_mediaCollection(this : IWMPCore*, ppMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppMediaCollection)
    end
    def get_playlistCollection(this : IWMPCore*, ppPlaylistCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlistCollection.call(this, ppPlaylistCollection)
    end
    def get_versionInfo(this : IWMPCore*, pbstrVersionInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_versionInfo.call(this, pbstrVersionInfo)
    end
    def launchURL(this : IWMPCore*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launchURL.call(this, bstrURL)
    end
    def get_network(this : IWMPCore*, ppQNI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network.call(this, ppQNI)
    end
    def get_currentPlaylist(this : IWMPCore*, ppPL : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPlaylist.call(this, ppPL)
    end
    def put_currentPlaylist(this : IWMPCore*, pPL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPlaylist.call(this, pPL)
    end
    def get_cdromCollection(this : IWMPCore*, ppCdromCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdromCollection.call(this, ppCdromCollection)
    end
    def get_closedCaption(this : IWMPCore*, ppClosedCaption : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_closedCaption.call(this, ppClosedCaption)
    end
    def get_isOnline(this : IWMPCore*, pfOnline : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isOnline.call(this, pfOnline)
    end
    def get_error(this : IWMPCore*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def get_status(this : IWMPCore*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pbstrStatus)
    end

  end

  @[Extern]
  record IWMPPlayerVtbl,
    query_interface : Proc(IWMPPlayer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlayer*, UInt32),
    release : Proc(IWMPPlayer*, UInt32),
    get_type_info_count : Proc(IWMPPlayer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlayer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlayer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlayer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IWMPPlayer*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPPlayer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IWMPPlayer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_openState : Proc(IWMPPlayer*, Win32cr::Media::MediaPlayer::WMPOpenState*, Win32cr::Foundation::HRESULT),
    get_playState : Proc(IWMPPlayer*, Win32cr::Media::MediaPlayer::WMPPlayState*, Win32cr::Foundation::HRESULT),
    get_controls : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_settings : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_currentMedia : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    put_currentMedia : Proc(IWMPPlayer*, Void*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_playlistCollection : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_versionInfo : Proc(IWMPPlayer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    launchURL : Proc(IWMPPlayer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_network : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_currentPlaylist : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    put_currentPlaylist : Proc(IWMPPlayer*, Void*, Win32cr::Foundation::HRESULT),
    get_cdromCollection : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_closedCaption : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_isOnline : Proc(IWMPPlayer*, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPPlayer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_enabled : Proc(IWMPPlayer*, Int16*, Win32cr::Foundation::HRESULT),
    put_enabled : Proc(IWMPPlayer*, Int16, Win32cr::Foundation::HRESULT),
    get_fullScreen : Proc(IWMPPlayer*, Int16*, Win32cr::Foundation::HRESULT),
    put_fullScreen : Proc(IWMPPlayer*, Int16, Win32cr::Foundation::HRESULT),
    get_enableContextMenu : Proc(IWMPPlayer*, Int16*, Win32cr::Foundation::HRESULT),
    put_enableContextMenu : Proc(IWMPPlayer*, Int16, Win32cr::Foundation::HRESULT),
    put_uiMode : Proc(IWMPPlayer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_uiMode : Proc(IWMPPlayer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6bf52a4f-394a-11d3-b153-00c04f79faa6")]
  record IWMPPlayer, lpVtbl : IWMPPlayerVtbl* do
    GUID = LibC::GUID.new(0x6bf52a4f_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
    def query_interface(this : IWMPPlayer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlayer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlayer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlayer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlayer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlayer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlayer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def close(this : IWMPPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_URL(this : IWMPPlayer*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end
    def put_URL(this : IWMPPlayer*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, bstrURL)
    end
    def get_openState(this : IWMPPlayer*, pwmpos : Win32cr::Media::MediaPlayer::WMPOpenState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_openState.call(this, pwmpos)
    end
    def get_playState(this : IWMPPlayer*, pwmpps : Win32cr::Media::MediaPlayer::WMPPlayState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playState.call(this, pwmpps)
    end
    def get_controls(this : IWMPPlayer*, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controls.call(this, ppControl)
    end
    def get_settings(this : IWMPPlayer*, ppSettings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_settings.call(this, ppSettings)
    end
    def get_currentMedia(this : IWMPPlayer*, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMedia.call(this, ppMedia)
    end
    def put_currentMedia(this : IWMPPlayer*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMedia.call(this, pMedia)
    end
    def get_mediaCollection(this : IWMPPlayer*, ppMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppMediaCollection)
    end
    def get_playlistCollection(this : IWMPPlayer*, ppPlaylistCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlistCollection.call(this, ppPlaylistCollection)
    end
    def get_versionInfo(this : IWMPPlayer*, pbstrVersionInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_versionInfo.call(this, pbstrVersionInfo)
    end
    def launchURL(this : IWMPPlayer*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launchURL.call(this, bstrURL)
    end
    def get_network(this : IWMPPlayer*, ppQNI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network.call(this, ppQNI)
    end
    def get_currentPlaylist(this : IWMPPlayer*, ppPL : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPlaylist.call(this, ppPL)
    end
    def put_currentPlaylist(this : IWMPPlayer*, pPL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPlaylist.call(this, pPL)
    end
    def get_cdromCollection(this : IWMPPlayer*, ppCdromCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdromCollection.call(this, ppCdromCollection)
    end
    def get_closedCaption(this : IWMPPlayer*, ppClosedCaption : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_closedCaption.call(this, ppClosedCaption)
    end
    def get_isOnline(this : IWMPPlayer*, pfOnline : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isOnline.call(this, pfOnline)
    end
    def get_error(this : IWMPPlayer*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def get_status(this : IWMPPlayer*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pbstrStatus)
    end
    def get_enabled(this : IWMPPlayer*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enabled.call(this, pbEnabled)
    end
    def put_enabled(this : IWMPPlayer*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enabled.call(this, bEnabled)
    end
    def get_fullScreen(this : IWMPPlayer*, pbFullScreen : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fullScreen.call(this, pbFullScreen)
    end
    def put_fullScreen(this : IWMPPlayer*, bFullScreen : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_fullScreen.call(this, bFullScreen)
    end
    def get_enableContextMenu(this : IWMPPlayer*, pbEnableContextMenu : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enableContextMenu.call(this, pbEnableContextMenu)
    end
    def put_enableContextMenu(this : IWMPPlayer*, bEnableContextMenu : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enableContextMenu.call(this, bEnableContextMenu)
    end
    def put_uiMode(this : IWMPPlayer*, bstrMode : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_uiMode.call(this, bstrMode)
    end
    def get_uiMode(this : IWMPPlayer*, pbstrMode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uiMode.call(this, pbstrMode)
    end

  end

  @[Extern]
  record IWMPPlayer2Vtbl,
    query_interface : Proc(IWMPPlayer2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlayer2*, UInt32),
    release : Proc(IWMPPlayer2*, UInt32),
    get_type_info_count : Proc(IWMPPlayer2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlayer2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlayer2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlayer2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IWMPPlayer2*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPPlayer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IWMPPlayer2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_openState : Proc(IWMPPlayer2*, Win32cr::Media::MediaPlayer::WMPOpenState*, Win32cr::Foundation::HRESULT),
    get_playState : Proc(IWMPPlayer2*, Win32cr::Media::MediaPlayer::WMPPlayState*, Win32cr::Foundation::HRESULT),
    get_controls : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_settings : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_currentMedia : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    put_currentMedia : Proc(IWMPPlayer2*, Void*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_playlistCollection : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_versionInfo : Proc(IWMPPlayer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    launchURL : Proc(IWMPPlayer2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_network : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_currentPlaylist : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    put_currentPlaylist : Proc(IWMPPlayer2*, Void*, Win32cr::Foundation::HRESULT),
    get_cdromCollection : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_closedCaption : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_isOnline : Proc(IWMPPlayer2*, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPPlayer2*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPPlayer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_enabled : Proc(IWMPPlayer2*, Int16*, Win32cr::Foundation::HRESULT),
    put_enabled : Proc(IWMPPlayer2*, Int16, Win32cr::Foundation::HRESULT),
    get_fullScreen : Proc(IWMPPlayer2*, Int16*, Win32cr::Foundation::HRESULT),
    put_fullScreen : Proc(IWMPPlayer2*, Int16, Win32cr::Foundation::HRESULT),
    get_enableContextMenu : Proc(IWMPPlayer2*, Int16*, Win32cr::Foundation::HRESULT),
    put_enableContextMenu : Proc(IWMPPlayer2*, Int16, Win32cr::Foundation::HRESULT),
    put_uiMode : Proc(IWMPPlayer2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_uiMode : Proc(IWMPPlayer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_stretchToFit : Proc(IWMPPlayer2*, Int16*, Win32cr::Foundation::HRESULT),
    put_stretchToFit : Proc(IWMPPlayer2*, Int16, Win32cr::Foundation::HRESULT),
    get_windowlessVideo : Proc(IWMPPlayer2*, Int16*, Win32cr::Foundation::HRESULT),
    put_windowlessVideo : Proc(IWMPPlayer2*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0e6b01d1-d407-4c85-bf5f-1c01f6150280")]
  record IWMPPlayer2, lpVtbl : IWMPPlayer2Vtbl* do
    GUID = LibC::GUID.new(0xe6b01d1_u32, 0xd407_u16, 0x4c85_u16, StaticArray[0xbf_u8, 0x5f_u8, 0x1c_u8, 0x1_u8, 0xf6_u8, 0x15_u8, 0x2_u8, 0x80_u8])
    def query_interface(this : IWMPPlayer2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlayer2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlayer2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlayer2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlayer2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlayer2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlayer2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def close(this : IWMPPlayer2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_URL(this : IWMPPlayer2*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end
    def put_URL(this : IWMPPlayer2*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, bstrURL)
    end
    def get_openState(this : IWMPPlayer2*, pwmpos : Win32cr::Media::MediaPlayer::WMPOpenState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_openState.call(this, pwmpos)
    end
    def get_playState(this : IWMPPlayer2*, pwmpps : Win32cr::Media::MediaPlayer::WMPPlayState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playState.call(this, pwmpps)
    end
    def get_controls(this : IWMPPlayer2*, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controls.call(this, ppControl)
    end
    def get_settings(this : IWMPPlayer2*, ppSettings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_settings.call(this, ppSettings)
    end
    def get_currentMedia(this : IWMPPlayer2*, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMedia.call(this, ppMedia)
    end
    def put_currentMedia(this : IWMPPlayer2*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMedia.call(this, pMedia)
    end
    def get_mediaCollection(this : IWMPPlayer2*, ppMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppMediaCollection)
    end
    def get_playlistCollection(this : IWMPPlayer2*, ppPlaylistCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlistCollection.call(this, ppPlaylistCollection)
    end
    def get_versionInfo(this : IWMPPlayer2*, pbstrVersionInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_versionInfo.call(this, pbstrVersionInfo)
    end
    def launchURL(this : IWMPPlayer2*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launchURL.call(this, bstrURL)
    end
    def get_network(this : IWMPPlayer2*, ppQNI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network.call(this, ppQNI)
    end
    def get_currentPlaylist(this : IWMPPlayer2*, ppPL : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPlaylist.call(this, ppPL)
    end
    def put_currentPlaylist(this : IWMPPlayer2*, pPL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPlaylist.call(this, pPL)
    end
    def get_cdromCollection(this : IWMPPlayer2*, ppCdromCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdromCollection.call(this, ppCdromCollection)
    end
    def get_closedCaption(this : IWMPPlayer2*, ppClosedCaption : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_closedCaption.call(this, ppClosedCaption)
    end
    def get_isOnline(this : IWMPPlayer2*, pfOnline : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isOnline.call(this, pfOnline)
    end
    def get_error(this : IWMPPlayer2*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def get_status(this : IWMPPlayer2*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pbstrStatus)
    end
    def get_enabled(this : IWMPPlayer2*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enabled.call(this, pbEnabled)
    end
    def put_enabled(this : IWMPPlayer2*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enabled.call(this, bEnabled)
    end
    def get_fullScreen(this : IWMPPlayer2*, pbFullScreen : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fullScreen.call(this, pbFullScreen)
    end
    def put_fullScreen(this : IWMPPlayer2*, bFullScreen : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_fullScreen.call(this, bFullScreen)
    end
    def get_enableContextMenu(this : IWMPPlayer2*, pbEnableContextMenu : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enableContextMenu.call(this, pbEnableContextMenu)
    end
    def put_enableContextMenu(this : IWMPPlayer2*, bEnableContextMenu : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enableContextMenu.call(this, bEnableContextMenu)
    end
    def put_uiMode(this : IWMPPlayer2*, bstrMode : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_uiMode.call(this, bstrMode)
    end
    def get_uiMode(this : IWMPPlayer2*, pbstrMode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uiMode.call(this, pbstrMode)
    end
    def get_stretchToFit(this : IWMPPlayer2*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stretchToFit.call(this, pbEnabled)
    end
    def put_stretchToFit(this : IWMPPlayer2*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_stretchToFit.call(this, bEnabled)
    end
    def get_windowlessVideo(this : IWMPPlayer2*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windowlessVideo.call(this, pbEnabled)
    end
    def put_windowlessVideo(this : IWMPPlayer2*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_windowlessVideo.call(this, bEnabled)
    end

  end

  @[Extern]
  record IWMPMedia2Vtbl,
    query_interface : Proc(IWMPMedia2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMedia2*, UInt32),
    release : Proc(IWMPMedia2*, UInt32),
    get_type_info_count : Proc(IWMPMedia2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPMedia2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPMedia2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPMedia2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isIdentical : Proc(IWMPMedia2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_sourceURL : Proc(IWMPMedia2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IWMPMedia2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_name : Proc(IWMPMedia2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_imageSourceWidth : Proc(IWMPMedia2*, Int32*, Win32cr::Foundation::HRESULT),
    get_imageSourceHeight : Proc(IWMPMedia2*, Int32*, Win32cr::Foundation::HRESULT),
    get_markerCount : Proc(IWMPMedia2*, Int32*, Win32cr::Foundation::HRESULT),
    getMarkerTime : Proc(IWMPMedia2*, Int32, Float64*, Win32cr::Foundation::HRESULT),
    getMarkerName : Proc(IWMPMedia2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IWMPMedia2*, Float64*, Win32cr::Foundation::HRESULT),
    get_durationString : Proc(IWMPMedia2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_attributeCount : Proc(IWMPMedia2*, Int32*, Win32cr::Foundation::HRESULT),
    getAttributeName : Proc(IWMPMedia2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPMedia2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    setItemInfo : Proc(IWMPMedia2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getItemInfoByAtom : Proc(IWMPMedia2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    isMemberOf : Proc(IWMPMedia2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    isReadOnlyItem : Proc(IWMPMedia2*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPMedia2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab7c88bb-143e-4ea4-acc3-e4350b2106c3")]
  record IWMPMedia2, lpVtbl : IWMPMedia2Vtbl* do
    GUID = LibC::GUID.new(0xab7c88bb_u32, 0x143e_u16, 0x4ea4_u16, StaticArray[0xac_u8, 0xc3_u8, 0xe4_u8, 0x35_u8, 0xb_u8, 0x21_u8, 0x6_u8, 0xc3_u8])
    def query_interface(this : IWMPMedia2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMedia2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMedia2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPMedia2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPMedia2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPMedia2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPMedia2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isIdentical(this : IWMPMedia2*, pIWMPMedia : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isIdentical.call(this, pIWMPMedia, pvbool)
    end
    def get_sourceURL(this : IWMPMedia2*, pbstrSourceURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sourceURL.call(this, pbstrSourceURL)
    end
    def get_name(this : IWMPMedia2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def put_name(this : IWMPMedia2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_name.call(this, bstrName)
    end
    def get_imageSourceWidth(this : IWMPMedia2*, pWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_imageSourceWidth.call(this, pWidth)
    end
    def get_imageSourceHeight(this : IWMPMedia2*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_imageSourceHeight.call(this, pHeight)
    end
    def get_markerCount(this : IWMPMedia2*, pMarkerCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_markerCount.call(this, pMarkerCount)
    end
    def getMarkerTime(this : IWMPMedia2*, marker_num : Int32, pMarkerTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMarkerTime.call(this, marker_num, pMarkerTime)
    end
    def getMarkerName(this : IWMPMedia2*, marker_num : Int32, pbstrMarkerName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMarkerName.call(this, marker_num, pbstrMarkerName)
    end
    def get_duration(this : IWMPMedia2*, pDuration : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def get_durationString(this : IWMPMedia2*, pbstrDuration : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_durationString.call(this, pbstrDuration)
    end
    def get_attributeCount(this : IWMPMedia2*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributeCount.call(this, plCount)
    end
    def getAttributeName(this : IWMPMedia2*, lIndex : Int32, pbstrItemName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeName.call(this, lIndex, pbstrItemName)
    end
    def getItemInfo(this : IWMPMedia2*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end
    def setItemInfo(this : IWMPMedia2*, bstrItemName : Win32cr::Foundation::BSTR, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setItemInfo.call(this, bstrItemName, bstrVal)
    end
    def getItemInfoByAtom(this : IWMPMedia2*, lAtom : Int32, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfoByAtom.call(this, lAtom, pbstrVal)
    end
    def isMemberOf(this : IWMPMedia2*, pPlaylist : Void*, pvarfIsMemberOf : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isMemberOf.call(this, pPlaylist, pvarfIsMemberOf)
    end
    def isReadOnlyItem(this : IWMPMedia2*, bstrItemName : Win32cr::Foundation::BSTR, pvarfIsReadOnly : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isReadOnlyItem.call(this, bstrItemName, pvarfIsReadOnly)
    end
    def get_error(this : IWMPMedia2*, ppIWMPErrorItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppIWMPErrorItem)
    end

  end

  @[Extern]
  record IWMPControls2Vtbl,
    query_interface : Proc(IWMPControls2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPControls2*, UInt32),
    release : Proc(IWMPControls2*, UInt32),
    get_type_info_count : Proc(IWMPControls2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPControls2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPControls2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPControls2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isAvailable : Proc(IWMPControls2*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    play : Proc(IWMPControls2*, Win32cr::Foundation::HRESULT),
    stop : Proc(IWMPControls2*, Win32cr::Foundation::HRESULT),
    pause : Proc(IWMPControls2*, Win32cr::Foundation::HRESULT),
    fastForward : Proc(IWMPControls2*, Win32cr::Foundation::HRESULT),
    fastReverse : Proc(IWMPControls2*, Win32cr::Foundation::HRESULT),
    get_currentPosition : Proc(IWMPControls2*, Float64*, Win32cr::Foundation::HRESULT),
    put_currentPosition : Proc(IWMPControls2*, Float64, Win32cr::Foundation::HRESULT),
    get_currentPositionString : Proc(IWMPControls2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IWMPControls2*, Win32cr::Foundation::HRESULT),
    previous : Proc(IWMPControls2*, Win32cr::Foundation::HRESULT),
    get_currentItem : Proc(IWMPControls2*, Void**, Win32cr::Foundation::HRESULT),
    put_currentItem : Proc(IWMPControls2*, Void*, Win32cr::Foundation::HRESULT),
    get_currentMarker : Proc(IWMPControls2*, Int32*, Win32cr::Foundation::HRESULT),
    put_currentMarker : Proc(IWMPControls2*, Int32, Win32cr::Foundation::HRESULT),
    playItem : Proc(IWMPControls2*, Void*, Win32cr::Foundation::HRESULT),
    step : Proc(IWMPControls2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6f030d25-0890-480f-9775-1f7e40ab5b8e")]
  record IWMPControls2, lpVtbl : IWMPControls2Vtbl* do
    GUID = LibC::GUID.new(0x6f030d25_u32, 0x890_u16, 0x480f_u16, StaticArray[0x97_u8, 0x75_u8, 0x1f_u8, 0x7e_u8, 0x40_u8, 0xab_u8, 0x5b_u8, 0x8e_u8])
    def query_interface(this : IWMPControls2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPControls2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPControls2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPControls2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPControls2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPControls2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPControls2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isAvailable(this : IWMPControls2*, bstrItem : Win32cr::Foundation::BSTR, pIsAvailable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAvailable.call(this, bstrItem, pIsAvailable)
    end
    def play(this : IWMPControls2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play.call(this)
    end
    def stop(this : IWMPControls2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IWMPControls2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def fastForward(this : IWMPControls2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fastForward.call(this)
    end
    def fastReverse(this : IWMPControls2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fastReverse.call(this)
    end
    def get_currentPosition(this : IWMPControls2*, pdCurrentPosition : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPosition.call(this, pdCurrentPosition)
    end
    def put_currentPosition(this : IWMPControls2*, dCurrentPosition : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPosition.call(this, dCurrentPosition)
    end
    def get_currentPositionString(this : IWMPControls2*, pbstrCurrentPosition : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPositionString.call(this, pbstrCurrentPosition)
    end
    def next__(this : IWMPControls2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this)
    end
    def previous(this : IWMPControls2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.previous.call(this)
    end
    def get_currentItem(this : IWMPControls2*, ppIWMPMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentItem.call(this, ppIWMPMedia)
    end
    def put_currentItem(this : IWMPControls2*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentItem.call(this, pIWMPMedia)
    end
    def get_currentMarker(this : IWMPControls2*, plMarker : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMarker.call(this, plMarker)
    end
    def put_currentMarker(this : IWMPControls2*, lMarker : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMarker.call(this, lMarker)
    end
    def playItem(this : IWMPControls2*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.playItem.call(this, pIWMPMedia)
    end
    def step(this : IWMPControls2*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end

  end

  @[Extern]
  record IWMPDVDVtbl,
    query_interface : Proc(IWMPDVD*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPDVD*, UInt32),
    release : Proc(IWMPDVD*, UInt32),
    get_type_info_count : Proc(IWMPDVD*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPDVD*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPDVD*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPDVD*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isAvailable : Proc(IWMPDVD*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_domain : Proc(IWMPDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    topMenu : Proc(IWMPDVD*, Win32cr::Foundation::HRESULT),
    titleMenu : Proc(IWMPDVD*, Win32cr::Foundation::HRESULT),
    back : Proc(IWMPDVD*, Win32cr::Foundation::HRESULT),
    resume : Proc(IWMPDVD*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8da61686-4668-4a5c-ae5d-803193293dbe")]
  record IWMPDVD, lpVtbl : IWMPDVDVtbl* do
    GUID = LibC::GUID.new(0x8da61686_u32, 0x4668_u16, 0x4a5c_u16, StaticArray[0xae_u8, 0x5d_u8, 0x80_u8, 0x31_u8, 0x93_u8, 0x29_u8, 0x3d_u8, 0xbe_u8])
    def query_interface(this : IWMPDVD*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPDVD*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPDVD*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPDVD*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPDVD*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPDVD*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPDVD*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isAvailable(this : IWMPDVD*, bstrItem : Win32cr::Foundation::BSTR, pIsAvailable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAvailable.call(this, bstrItem, pIsAvailable)
    end
    def get_domain(this : IWMPDVD*, strDomain : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_domain.call(this, strDomain)
    end
    def topMenu(this : IWMPDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.topMenu.call(this)
    end
    def titleMenu(this : IWMPDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.titleMenu.call(this)
    end
    def back(this : IWMPDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.back.call(this)
    end
    def resume(this : IWMPDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end

  end

  @[Extern]
  record IWMPCore2Vtbl,
    query_interface : Proc(IWMPCore2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPCore2*, UInt32),
    release : Proc(IWMPCore2*, UInt32),
    get_type_info_count : Proc(IWMPCore2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPCore2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPCore2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPCore2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IWMPCore2*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPCore2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IWMPCore2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_openState : Proc(IWMPCore2*, Win32cr::Media::MediaPlayer::WMPOpenState*, Win32cr::Foundation::HRESULT),
    get_playState : Proc(IWMPCore2*, Win32cr::Media::MediaPlayer::WMPPlayState*, Win32cr::Foundation::HRESULT),
    get_controls : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_settings : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_currentMedia : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    put_currentMedia : Proc(IWMPCore2*, Void*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_playlistCollection : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_versionInfo : Proc(IWMPCore2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    launchURL : Proc(IWMPCore2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_network : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_currentPlaylist : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    put_currentPlaylist : Proc(IWMPCore2*, Void*, Win32cr::Foundation::HRESULT),
    get_cdromCollection : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_closedCaption : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_isOnline : Proc(IWMPCore2*, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPCore2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dvd : Proc(IWMPCore2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bc17e5b7-7561-4c18-bb90-17d485775659")]
  record IWMPCore2, lpVtbl : IWMPCore2Vtbl* do
    GUID = LibC::GUID.new(0xbc17e5b7_u32, 0x7561_u16, 0x4c18_u16, StaticArray[0xbb_u8, 0x90_u8, 0x17_u8, 0xd4_u8, 0x85_u8, 0x77_u8, 0x56_u8, 0x59_u8])
    def query_interface(this : IWMPCore2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPCore2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPCore2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPCore2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPCore2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPCore2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPCore2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def close(this : IWMPCore2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_URL(this : IWMPCore2*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end
    def put_URL(this : IWMPCore2*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, bstrURL)
    end
    def get_openState(this : IWMPCore2*, pwmpos : Win32cr::Media::MediaPlayer::WMPOpenState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_openState.call(this, pwmpos)
    end
    def get_playState(this : IWMPCore2*, pwmpps : Win32cr::Media::MediaPlayer::WMPPlayState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playState.call(this, pwmpps)
    end
    def get_controls(this : IWMPCore2*, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controls.call(this, ppControl)
    end
    def get_settings(this : IWMPCore2*, ppSettings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_settings.call(this, ppSettings)
    end
    def get_currentMedia(this : IWMPCore2*, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMedia.call(this, ppMedia)
    end
    def put_currentMedia(this : IWMPCore2*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMedia.call(this, pMedia)
    end
    def get_mediaCollection(this : IWMPCore2*, ppMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppMediaCollection)
    end
    def get_playlistCollection(this : IWMPCore2*, ppPlaylistCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlistCollection.call(this, ppPlaylistCollection)
    end
    def get_versionInfo(this : IWMPCore2*, pbstrVersionInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_versionInfo.call(this, pbstrVersionInfo)
    end
    def launchURL(this : IWMPCore2*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launchURL.call(this, bstrURL)
    end
    def get_network(this : IWMPCore2*, ppQNI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network.call(this, ppQNI)
    end
    def get_currentPlaylist(this : IWMPCore2*, ppPL : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPlaylist.call(this, ppPL)
    end
    def put_currentPlaylist(this : IWMPCore2*, pPL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPlaylist.call(this, pPL)
    end
    def get_cdromCollection(this : IWMPCore2*, ppCdromCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdromCollection.call(this, ppCdromCollection)
    end
    def get_closedCaption(this : IWMPCore2*, ppClosedCaption : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_closedCaption.call(this, ppClosedCaption)
    end
    def get_isOnline(this : IWMPCore2*, pfOnline : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isOnline.call(this, pfOnline)
    end
    def get_error(this : IWMPCore2*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def get_status(this : IWMPCore2*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pbstrStatus)
    end
    def get_dvd(this : IWMPCore2*, ppDVD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd.call(this, ppDVD)
    end

  end

  @[Extern]
  record IWMPPlayer3Vtbl,
    query_interface : Proc(IWMPPlayer3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlayer3*, UInt32),
    release : Proc(IWMPPlayer3*, UInt32),
    get_type_info_count : Proc(IWMPPlayer3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlayer3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlayer3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlayer3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IWMPPlayer3*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPPlayer3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IWMPPlayer3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_openState : Proc(IWMPPlayer3*, Win32cr::Media::MediaPlayer::WMPOpenState*, Win32cr::Foundation::HRESULT),
    get_playState : Proc(IWMPPlayer3*, Win32cr::Media::MediaPlayer::WMPPlayState*, Win32cr::Foundation::HRESULT),
    get_controls : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_settings : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_currentMedia : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    put_currentMedia : Proc(IWMPPlayer3*, Void*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_playlistCollection : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_versionInfo : Proc(IWMPPlayer3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    launchURL : Proc(IWMPPlayer3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_network : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_currentPlaylist : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    put_currentPlaylist : Proc(IWMPPlayer3*, Void*, Win32cr::Foundation::HRESULT),
    get_cdromCollection : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_closedCaption : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_isOnline : Proc(IWMPPlayer3*, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPPlayer3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dvd : Proc(IWMPPlayer3*, Void**, Win32cr::Foundation::HRESULT),
    get_enabled : Proc(IWMPPlayer3*, Int16*, Win32cr::Foundation::HRESULT),
    put_enabled : Proc(IWMPPlayer3*, Int16, Win32cr::Foundation::HRESULT),
    get_fullScreen : Proc(IWMPPlayer3*, Int16*, Win32cr::Foundation::HRESULT),
    put_fullScreen : Proc(IWMPPlayer3*, Int16, Win32cr::Foundation::HRESULT),
    get_enableContextMenu : Proc(IWMPPlayer3*, Int16*, Win32cr::Foundation::HRESULT),
    put_enableContextMenu : Proc(IWMPPlayer3*, Int16, Win32cr::Foundation::HRESULT),
    put_uiMode : Proc(IWMPPlayer3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_uiMode : Proc(IWMPPlayer3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_stretchToFit : Proc(IWMPPlayer3*, Int16*, Win32cr::Foundation::HRESULT),
    put_stretchToFit : Proc(IWMPPlayer3*, Int16, Win32cr::Foundation::HRESULT),
    get_windowlessVideo : Proc(IWMPPlayer3*, Int16*, Win32cr::Foundation::HRESULT),
    put_windowlessVideo : Proc(IWMPPlayer3*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("54062b68-052a-4c25-a39f-8b63346511d4")]
  record IWMPPlayer3, lpVtbl : IWMPPlayer3Vtbl* do
    GUID = LibC::GUID.new(0x54062b68_u32, 0x52a_u16, 0x4c25_u16, StaticArray[0xa3_u8, 0x9f_u8, 0x8b_u8, 0x63_u8, 0x34_u8, 0x65_u8, 0x11_u8, 0xd4_u8])
    def query_interface(this : IWMPPlayer3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlayer3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlayer3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlayer3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlayer3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlayer3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlayer3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def close(this : IWMPPlayer3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_URL(this : IWMPPlayer3*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end
    def put_URL(this : IWMPPlayer3*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, bstrURL)
    end
    def get_openState(this : IWMPPlayer3*, pwmpos : Win32cr::Media::MediaPlayer::WMPOpenState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_openState.call(this, pwmpos)
    end
    def get_playState(this : IWMPPlayer3*, pwmpps : Win32cr::Media::MediaPlayer::WMPPlayState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playState.call(this, pwmpps)
    end
    def get_controls(this : IWMPPlayer3*, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controls.call(this, ppControl)
    end
    def get_settings(this : IWMPPlayer3*, ppSettings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_settings.call(this, ppSettings)
    end
    def get_currentMedia(this : IWMPPlayer3*, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMedia.call(this, ppMedia)
    end
    def put_currentMedia(this : IWMPPlayer3*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMedia.call(this, pMedia)
    end
    def get_mediaCollection(this : IWMPPlayer3*, ppMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppMediaCollection)
    end
    def get_playlistCollection(this : IWMPPlayer3*, ppPlaylistCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlistCollection.call(this, ppPlaylistCollection)
    end
    def get_versionInfo(this : IWMPPlayer3*, pbstrVersionInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_versionInfo.call(this, pbstrVersionInfo)
    end
    def launchURL(this : IWMPPlayer3*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launchURL.call(this, bstrURL)
    end
    def get_network(this : IWMPPlayer3*, ppQNI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network.call(this, ppQNI)
    end
    def get_currentPlaylist(this : IWMPPlayer3*, ppPL : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPlaylist.call(this, ppPL)
    end
    def put_currentPlaylist(this : IWMPPlayer3*, pPL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPlaylist.call(this, pPL)
    end
    def get_cdromCollection(this : IWMPPlayer3*, ppCdromCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdromCollection.call(this, ppCdromCollection)
    end
    def get_closedCaption(this : IWMPPlayer3*, ppClosedCaption : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_closedCaption.call(this, ppClosedCaption)
    end
    def get_isOnline(this : IWMPPlayer3*, pfOnline : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isOnline.call(this, pfOnline)
    end
    def get_error(this : IWMPPlayer3*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def get_status(this : IWMPPlayer3*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pbstrStatus)
    end
    def get_dvd(this : IWMPPlayer3*, ppDVD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd.call(this, ppDVD)
    end
    def get_enabled(this : IWMPPlayer3*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enabled.call(this, pbEnabled)
    end
    def put_enabled(this : IWMPPlayer3*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enabled.call(this, bEnabled)
    end
    def get_fullScreen(this : IWMPPlayer3*, pbFullScreen : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fullScreen.call(this, pbFullScreen)
    end
    def put_fullScreen(this : IWMPPlayer3*, bFullScreen : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_fullScreen.call(this, bFullScreen)
    end
    def get_enableContextMenu(this : IWMPPlayer3*, pbEnableContextMenu : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enableContextMenu.call(this, pbEnableContextMenu)
    end
    def put_enableContextMenu(this : IWMPPlayer3*, bEnableContextMenu : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enableContextMenu.call(this, bEnableContextMenu)
    end
    def put_uiMode(this : IWMPPlayer3*, bstrMode : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_uiMode.call(this, bstrMode)
    end
    def get_uiMode(this : IWMPPlayer3*, pbstrMode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uiMode.call(this, pbstrMode)
    end
    def get_stretchToFit(this : IWMPPlayer3*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stretchToFit.call(this, pbEnabled)
    end
    def put_stretchToFit(this : IWMPPlayer3*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_stretchToFit.call(this, bEnabled)
    end
    def get_windowlessVideo(this : IWMPPlayer3*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windowlessVideo.call(this, pbEnabled)
    end
    def put_windowlessVideo(this : IWMPPlayer3*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_windowlessVideo.call(this, bEnabled)
    end

  end

  @[Extern]
  record IWMPErrorItem2Vtbl,
    query_interface : Proc(IWMPErrorItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPErrorItem2*, UInt32),
    release : Proc(IWMPErrorItem2*, UInt32),
    get_type_info_count : Proc(IWMPErrorItem2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPErrorItem2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPErrorItem2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPErrorItem2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_errorCode : Proc(IWMPErrorItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_errorDescription : Proc(IWMPErrorItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_errorContext : Proc(IWMPErrorItem2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_remedy : Proc(IWMPErrorItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_customUrl : Proc(IWMPErrorItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_condition : Proc(IWMPErrorItem2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f75ccec0-c67c-475c-931e-8719870bee7d")]
  record IWMPErrorItem2, lpVtbl : IWMPErrorItem2Vtbl* do
    GUID = LibC::GUID.new(0xf75ccec0_u32, 0xc67c_u16, 0x475c_u16, StaticArray[0x93_u8, 0x1e_u8, 0x87_u8, 0x19_u8, 0x87_u8, 0xb_u8, 0xee_u8, 0x7d_u8])
    def query_interface(this : IWMPErrorItem2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPErrorItem2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPErrorItem2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPErrorItem2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPErrorItem2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPErrorItem2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPErrorItem2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_errorCode(this : IWMPErrorItem2*, phr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorCode.call(this, phr)
    end
    def get_errorDescription(this : IWMPErrorItem2*, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorDescription.call(this, pbstrDescription)
    end
    def get_errorContext(this : IWMPErrorItem2*, pvarContext : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_errorContext.call(this, pvarContext)
    end
    def get_remedy(this : IWMPErrorItem2*, plRemedy : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_remedy.call(this, plRemedy)
    end
    def get_customUrl(this : IWMPErrorItem2*, pbstrCustomUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_customUrl.call(this, pbstrCustomUrl)
    end
    def get_condition(this : IWMPErrorItem2*, plCondition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_condition.call(this, plCondition)
    end

  end

  @[Extern]
  record IWMPRemoteMediaServicesVtbl,
    query_interface : Proc(IWMPRemoteMediaServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPRemoteMediaServices*, UInt32),
    release : Proc(IWMPRemoteMediaServices*, UInt32),
    get_service_type : Proc(IWMPRemoteMediaServices*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_application_name : Proc(IWMPRemoteMediaServices*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_scriptable_object : Proc(IWMPRemoteMediaServices*, Win32cr::Foundation::BSTR*, Void**, Win32cr::Foundation::HRESULT),
    get_custom_ui_mode : Proc(IWMPRemoteMediaServices*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cbb92747-741f-44fe-ab5b-f1a48f3b2a59")]
  record IWMPRemoteMediaServices, lpVtbl : IWMPRemoteMediaServicesVtbl* do
    GUID = LibC::GUID.new(0xcbb92747_u32, 0x741f_u16, 0x44fe_u16, StaticArray[0xab_u8, 0x5b_u8, 0xf1_u8, 0xa4_u8, 0x8f_u8, 0x3b_u8, 0x2a_u8, 0x59_u8])
    def query_interface(this : IWMPRemoteMediaServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPRemoteMediaServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPRemoteMediaServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_service_type(this : IWMPRemoteMediaServices*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_type.call(this, pbstrType)
    end
    def get_application_name(this : IWMPRemoteMediaServices*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_application_name.call(this, pbstrName)
    end
    def get_scriptable_object(this : IWMPRemoteMediaServices*, pbstrName : Win32cr::Foundation::BSTR*, ppDispatch : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scriptable_object.call(this, pbstrName, ppDispatch)
    end
    def get_custom_ui_mode(this : IWMPRemoteMediaServices*, pbstrFile : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_custom_ui_mode.call(this, pbstrFile)
    end

  end

  @[Extern]
  record IWMPSkinManagerVtbl,
    query_interface : Proc(IWMPSkinManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSkinManager*, UInt32),
    release : Proc(IWMPSkinManager*, UInt32),
    set_visual_style : Proc(IWMPSkinManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("076f2fa6-ed30-448b-8cc5-3f3ef3529c7a")]
  record IWMPSkinManager, lpVtbl : IWMPSkinManagerVtbl* do
    GUID = LibC::GUID.new(0x76f2fa6_u32, 0xed30_u16, 0x448b_u16, StaticArray[0x8c_u8, 0xc5_u8, 0x3f_u8, 0x3e_u8, 0xf3_u8, 0x52_u8, 0x9c_u8, 0x7a_u8])
    def query_interface(this : IWMPSkinManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSkinManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSkinManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_visual_style(this : IWMPSkinManager*, bstrPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_visual_style.call(this, bstrPath)
    end

  end

  @[Extern]
  record IWMPMetadataPictureVtbl,
    query_interface : Proc(IWMPMetadataPicture*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMetadataPicture*, UInt32),
    release : Proc(IWMPMetadataPicture*, UInt32),
    get_type_info_count : Proc(IWMPMetadataPicture*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPMetadataPicture*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPMetadataPicture*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPMetadataPicture*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_mimeType : Proc(IWMPMetadataPicture*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_pictureType : Proc(IWMPMetadataPicture*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IWMPMetadataPicture*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPMetadataPicture*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5c29bbe0-f87d-4c45-aa28-a70f0230ffa9")]
  record IWMPMetadataPicture, lpVtbl : IWMPMetadataPictureVtbl* do
    GUID = LibC::GUID.new(0x5c29bbe0_u32, 0xf87d_u16, 0x4c45_u16, StaticArray[0xaa_u8, 0x28_u8, 0xa7_u8, 0xf_u8, 0x2_u8, 0x30_u8, 0xff_u8, 0xa9_u8])
    def query_interface(this : IWMPMetadataPicture*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMetadataPicture*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMetadataPicture*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPMetadataPicture*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPMetadataPicture*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPMetadataPicture*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPMetadataPicture*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_mimeType(this : IWMPMetadataPicture*, pbstrMimeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mimeType.call(this, pbstrMimeType)
    end
    def get_pictureType(this : IWMPMetadataPicture*, pbstrPictureType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pictureType.call(this, pbstrPictureType)
    end
    def get_description(this : IWMPMetadataPicture*, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pbstrDescription)
    end
    def get_URL(this : IWMPMetadataPicture*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end

  end

  @[Extern]
  record IWMPMetadataTextVtbl,
    query_interface : Proc(IWMPMetadataText*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMetadataText*, UInt32),
    release : Proc(IWMPMetadataText*, UInt32),
    get_type_info_count : Proc(IWMPMetadataText*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPMetadataText*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPMetadataText*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPMetadataText*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IWMPMetadataText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IWMPMetadataText*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("769a72db-13d2-45e2-9c48-53ca9d5b7450")]
  record IWMPMetadataText, lpVtbl : IWMPMetadataTextVtbl* do
    GUID = LibC::GUID.new(0x769a72db_u32, 0x13d2_u16, 0x45e2_u16, StaticArray[0x9c_u8, 0x48_u8, 0x53_u8, 0xca_u8, 0x9d_u8, 0x5b_u8, 0x74_u8, 0x50_u8])
    def query_interface(this : IWMPMetadataText*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMetadataText*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMetadataText*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPMetadataText*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPMetadataText*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPMetadataText*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPMetadataText*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_description(this : IWMPMetadataText*, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pbstrDescription)
    end
    def get_text(this : IWMPMetadataText*, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, pbstrText)
    end

  end

  @[Extern]
  record IWMPMedia3Vtbl,
    query_interface : Proc(IWMPMedia3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMedia3*, UInt32),
    release : Proc(IWMPMedia3*, UInt32),
    get_type_info_count : Proc(IWMPMedia3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPMedia3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPMedia3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPMedia3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isIdentical : Proc(IWMPMedia3*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_sourceURL : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_name : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_name : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_imageSourceWidth : Proc(IWMPMedia3*, Int32*, Win32cr::Foundation::HRESULT),
    get_imageSourceHeight : Proc(IWMPMedia3*, Int32*, Win32cr::Foundation::HRESULT),
    get_markerCount : Proc(IWMPMedia3*, Int32*, Win32cr::Foundation::HRESULT),
    getMarkerTime : Proc(IWMPMedia3*, Int32, Float64*, Win32cr::Foundation::HRESULT),
    getMarkerName : Proc(IWMPMedia3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IWMPMedia3*, Float64*, Win32cr::Foundation::HRESULT),
    get_durationString : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_attributeCount : Proc(IWMPMedia3*, Int32*, Win32cr::Foundation::HRESULT),
    getAttributeName : Proc(IWMPMedia3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    setItemInfo : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    getItemInfoByAtom : Proc(IWMPMedia3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    isMemberOf : Proc(IWMPMedia3*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    isReadOnlyItem : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPMedia3*, Void**, Win32cr::Foundation::HRESULT),
    getAttributeCountByType : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    getItemInfoByType : Proc(IWMPMedia3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f118efc7-f03a-4fb4-99c9-1c02a5c1065b")]
  record IWMPMedia3, lpVtbl : IWMPMedia3Vtbl* do
    GUID = LibC::GUID.new(0xf118efc7_u32, 0xf03a_u16, 0x4fb4_u16, StaticArray[0x99_u8, 0xc9_u8, 0x1c_u8, 0x2_u8, 0xa5_u8, 0xc1_u8, 0x6_u8, 0x5b_u8])
    def query_interface(this : IWMPMedia3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMedia3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMedia3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPMedia3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPMedia3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPMedia3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPMedia3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isIdentical(this : IWMPMedia3*, pIWMPMedia : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isIdentical.call(this, pIWMPMedia, pvbool)
    end
    def get_sourceURL(this : IWMPMedia3*, pbstrSourceURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sourceURL.call(this, pbstrSourceURL)
    end
    def get_name(this : IWMPMedia3*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def put_name(this : IWMPMedia3*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_name.call(this, bstrName)
    end
    def get_imageSourceWidth(this : IWMPMedia3*, pWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_imageSourceWidth.call(this, pWidth)
    end
    def get_imageSourceHeight(this : IWMPMedia3*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_imageSourceHeight.call(this, pHeight)
    end
    def get_markerCount(this : IWMPMedia3*, pMarkerCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_markerCount.call(this, pMarkerCount)
    end
    def getMarkerTime(this : IWMPMedia3*, marker_num : Int32, pMarkerTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMarkerTime.call(this, marker_num, pMarkerTime)
    end
    def getMarkerName(this : IWMPMedia3*, marker_num : Int32, pbstrMarkerName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMarkerName.call(this, marker_num, pbstrMarkerName)
    end
    def get_duration(this : IWMPMedia3*, pDuration : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def get_durationString(this : IWMPMedia3*, pbstrDuration : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_durationString.call(this, pbstrDuration)
    end
    def get_attributeCount(this : IWMPMedia3*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributeCount.call(this, plCount)
    end
    def getAttributeName(this : IWMPMedia3*, lIndex : Int32, pbstrItemName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeName.call(this, lIndex, pbstrItemName)
    end
    def getItemInfo(this : IWMPMedia3*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end
    def setItemInfo(this : IWMPMedia3*, bstrItemName : Win32cr::Foundation::BSTR, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setItemInfo.call(this, bstrItemName, bstrVal)
    end
    def getItemInfoByAtom(this : IWMPMedia3*, lAtom : Int32, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfoByAtom.call(this, lAtom, pbstrVal)
    end
    def isMemberOf(this : IWMPMedia3*, pPlaylist : Void*, pvarfIsMemberOf : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isMemberOf.call(this, pPlaylist, pvarfIsMemberOf)
    end
    def isReadOnlyItem(this : IWMPMedia3*, bstrItemName : Win32cr::Foundation::BSTR, pvarfIsReadOnly : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isReadOnlyItem.call(this, bstrItemName, pvarfIsReadOnly)
    end
    def get_error(this : IWMPMedia3*, ppIWMPErrorItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppIWMPErrorItem)
    end
    def getAttributeCountByType(this : IWMPMedia3*, bstrType : Win32cr::Foundation::BSTR, bstrLanguage : Win32cr::Foundation::BSTR, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeCountByType.call(this, bstrType, bstrLanguage, plCount)
    end
    def getItemInfoByType(this : IWMPMedia3*, bstrType : Win32cr::Foundation::BSTR, bstrLanguage : Win32cr::Foundation::BSTR, lIndex : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfoByType.call(this, bstrType, bstrLanguage, lIndex, pvarValue)
    end

  end

  @[Extern]
  record IWMPSettings2Vtbl,
    query_interface : Proc(IWMPSettings2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSettings2*, UInt32),
    release : Proc(IWMPSettings2*, UInt32),
    get_type_info_count : Proc(IWMPSettings2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPSettings2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPSettings2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPSettings2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isAvailable : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_autoStart : Proc(IWMPSettings2*, Int16*, Win32cr::Foundation::HRESULT),
    put_autoStart : Proc(IWMPSettings2*, Int16, Win32cr::Foundation::HRESULT),
    get_baseURL : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_baseURL : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_defaultFrame : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_defaultFrame : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_invokeURLs : Proc(IWMPSettings2*, Int16*, Win32cr::Foundation::HRESULT),
    put_invokeURLs : Proc(IWMPSettings2*, Int16, Win32cr::Foundation::HRESULT),
    get_mute : Proc(IWMPSettings2*, Int16*, Win32cr::Foundation::HRESULT),
    put_mute : Proc(IWMPSettings2*, Int16, Win32cr::Foundation::HRESULT),
    get_playCount : Proc(IWMPSettings2*, Int32*, Win32cr::Foundation::HRESULT),
    put_playCount : Proc(IWMPSettings2*, Int32, Win32cr::Foundation::HRESULT),
    get_rate : Proc(IWMPSettings2*, Float64*, Win32cr::Foundation::HRESULT),
    put_rate : Proc(IWMPSettings2*, Float64, Win32cr::Foundation::HRESULT),
    get_balance : Proc(IWMPSettings2*, Int32*, Win32cr::Foundation::HRESULT),
    put_balance : Proc(IWMPSettings2*, Int32, Win32cr::Foundation::HRESULT),
    get_volume : Proc(IWMPSettings2*, Int32*, Win32cr::Foundation::HRESULT),
    put_volume : Proc(IWMPSettings2*, Int32, Win32cr::Foundation::HRESULT),
    getMode : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    setMode : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    get_enableErrorDialogs : Proc(IWMPSettings2*, Int16*, Win32cr::Foundation::HRESULT),
    put_enableErrorDialogs : Proc(IWMPSettings2*, Int16, Win32cr::Foundation::HRESULT),
    get_defaultAudioLanguage : Proc(IWMPSettings2*, Int32*, Win32cr::Foundation::HRESULT),
    get_mediaAccessRights : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    requestMediaAccessRights : Proc(IWMPSettings2*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fda937a4-eece-4da5-a0b6-39bf89ade2c2")]
  record IWMPSettings2, lpVtbl : IWMPSettings2Vtbl* do
    GUID = LibC::GUID.new(0xfda937a4_u32, 0xeece_u16, 0x4da5_u16, StaticArray[0xa0_u8, 0xb6_u8, 0x39_u8, 0xbf_u8, 0x89_u8, 0xad_u8, 0xe2_u8, 0xc2_u8])
    def query_interface(this : IWMPSettings2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSettings2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSettings2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPSettings2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPSettings2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPSettings2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPSettings2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isAvailable(this : IWMPSettings2*, bstrItem : Win32cr::Foundation::BSTR, pIsAvailable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAvailable.call(this, bstrItem, pIsAvailable)
    end
    def get_autoStart(this : IWMPSettings2*, pfAutoStart : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_autoStart.call(this, pfAutoStart)
    end
    def put_autoStart(this : IWMPSettings2*, fAutoStart : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_autoStart.call(this, fAutoStart)
    end
    def get_baseURL(this : IWMPSettings2*, pbstrBaseURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_baseURL.call(this, pbstrBaseURL)
    end
    def put_baseURL(this : IWMPSettings2*, bstrBaseURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_baseURL.call(this, bstrBaseURL)
    end
    def get_defaultFrame(this : IWMPSettings2*, pbstrDefaultFrame : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_defaultFrame.call(this, pbstrDefaultFrame)
    end
    def put_defaultFrame(this : IWMPSettings2*, bstrDefaultFrame : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_defaultFrame.call(this, bstrDefaultFrame)
    end
    def get_invokeURLs(this : IWMPSettings2*, pfInvokeURLs : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_invokeURLs.call(this, pfInvokeURLs)
    end
    def put_invokeURLs(this : IWMPSettings2*, fInvokeURLs : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_invokeURLs.call(this, fInvokeURLs)
    end
    def get_mute(this : IWMPSettings2*, pfMute : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mute.call(this, pfMute)
    end
    def put_mute(this : IWMPSettings2*, fMute : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_mute.call(this, fMute)
    end
    def get_playCount(this : IWMPSettings2*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playCount.call(this, plCount)
    end
    def put_playCount(this : IWMPSettings2*, lCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_playCount.call(this, lCount)
    end
    def get_rate(this : IWMPSettings2*, pdRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rate.call(this, pdRate)
    end
    def put_rate(this : IWMPSettings2*, dRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_rate.call(this, dRate)
    end
    def get_balance(this : IWMPSettings2*, plBalance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_balance.call(this, plBalance)
    end
    def put_balance(this : IWMPSettings2*, lBalance : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_balance.call(this, lBalance)
    end
    def get_volume(this : IWMPSettings2*, plVolume : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_volume.call(this, plVolume)
    end
    def put_volume(this : IWMPSettings2*, lVolume : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_volume.call(this, lVolume)
    end
    def getMode(this : IWMPSettings2*, bstrMode : Win32cr::Foundation::BSTR, pvarfMode : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMode.call(this, bstrMode, pvarfMode)
    end
    def setMode(this : IWMPSettings2*, bstrMode : Win32cr::Foundation::BSTR, varfMode : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setMode.call(this, bstrMode, varfMode)
    end
    def get_enableErrorDialogs(this : IWMPSettings2*, pfEnableErrorDialogs : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enableErrorDialogs.call(this, pfEnableErrorDialogs)
    end
    def put_enableErrorDialogs(this : IWMPSettings2*, fEnableErrorDialogs : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enableErrorDialogs.call(this, fEnableErrorDialogs)
    end
    def get_defaultAudioLanguage(this : IWMPSettings2*, plLangID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_defaultAudioLanguage.call(this, plLangID)
    end
    def get_mediaAccessRights(this : IWMPSettings2*, pbstrRights : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaAccessRights.call(this, pbstrRights)
    end
    def requestMediaAccessRights(this : IWMPSettings2*, bstrDesiredAccess : Win32cr::Foundation::BSTR, pvbAccepted : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.requestMediaAccessRights.call(this, bstrDesiredAccess, pvbAccepted)
    end

  end

  @[Extern]
  record IWMPControls3Vtbl,
    query_interface : Proc(IWMPControls3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPControls3*, UInt32),
    release : Proc(IWMPControls3*, UInt32),
    get_type_info_count : Proc(IWMPControls3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPControls3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPControls3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPControls3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_isAvailable : Proc(IWMPControls3*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    play : Proc(IWMPControls3*, Win32cr::Foundation::HRESULT),
    stop : Proc(IWMPControls3*, Win32cr::Foundation::HRESULT),
    pause : Proc(IWMPControls3*, Win32cr::Foundation::HRESULT),
    fastForward : Proc(IWMPControls3*, Win32cr::Foundation::HRESULT),
    fastReverse : Proc(IWMPControls3*, Win32cr::Foundation::HRESULT),
    get_currentPosition : Proc(IWMPControls3*, Float64*, Win32cr::Foundation::HRESULT),
    put_currentPosition : Proc(IWMPControls3*, Float64, Win32cr::Foundation::HRESULT),
    get_currentPositionString : Proc(IWMPControls3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    next__ : Proc(IWMPControls3*, Win32cr::Foundation::HRESULT),
    previous : Proc(IWMPControls3*, Win32cr::Foundation::HRESULT),
    get_currentItem : Proc(IWMPControls3*, Void**, Win32cr::Foundation::HRESULT),
    put_currentItem : Proc(IWMPControls3*, Void*, Win32cr::Foundation::HRESULT),
    get_currentMarker : Proc(IWMPControls3*, Int32*, Win32cr::Foundation::HRESULT),
    put_currentMarker : Proc(IWMPControls3*, Int32, Win32cr::Foundation::HRESULT),
    playItem : Proc(IWMPControls3*, Void*, Win32cr::Foundation::HRESULT),
    step : Proc(IWMPControls3*, Int32, Win32cr::Foundation::HRESULT),
    get_audioLanguageCount : Proc(IWMPControls3*, Int32*, Win32cr::Foundation::HRESULT),
    getAudioLanguageID : Proc(IWMPControls3*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    getAudioLanguageDescription : Proc(IWMPControls3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_currentAudioLanguage : Proc(IWMPControls3*, Int32*, Win32cr::Foundation::HRESULT),
    put_currentAudioLanguage : Proc(IWMPControls3*, Int32, Win32cr::Foundation::HRESULT),
    get_currentAudioLanguageIndex : Proc(IWMPControls3*, Int32*, Win32cr::Foundation::HRESULT),
    put_currentAudioLanguageIndex : Proc(IWMPControls3*, Int32, Win32cr::Foundation::HRESULT),
    getLanguageName : Proc(IWMPControls3*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_currentPositionTimecode : Proc(IWMPControls3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_currentPositionTimecode : Proc(IWMPControls3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a1d1110e-d545-476a-9a78-ac3e4cb1e6bd")]
  record IWMPControls3, lpVtbl : IWMPControls3Vtbl* do
    GUID = LibC::GUID.new(0xa1d1110e_u32, 0xd545_u16, 0x476a_u16, StaticArray[0x9a_u8, 0x78_u8, 0xac_u8, 0x3e_u8, 0x4c_u8, 0xb1_u8, 0xe6_u8, 0xbd_u8])
    def query_interface(this : IWMPControls3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPControls3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPControls3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPControls3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPControls3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPControls3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPControls3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_isAvailable(this : IWMPControls3*, bstrItem : Win32cr::Foundation::BSTR, pIsAvailable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isAvailable.call(this, bstrItem, pIsAvailable)
    end
    def play(this : IWMPControls3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play.call(this)
    end
    def stop(this : IWMPControls3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IWMPControls3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def fastForward(this : IWMPControls3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fastForward.call(this)
    end
    def fastReverse(this : IWMPControls3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fastReverse.call(this)
    end
    def get_currentPosition(this : IWMPControls3*, pdCurrentPosition : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPosition.call(this, pdCurrentPosition)
    end
    def put_currentPosition(this : IWMPControls3*, dCurrentPosition : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPosition.call(this, dCurrentPosition)
    end
    def get_currentPositionString(this : IWMPControls3*, pbstrCurrentPosition : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPositionString.call(this, pbstrCurrentPosition)
    end
    def next__(this : IWMPControls3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this)
    end
    def previous(this : IWMPControls3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.previous.call(this)
    end
    def get_currentItem(this : IWMPControls3*, ppIWMPMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentItem.call(this, ppIWMPMedia)
    end
    def put_currentItem(this : IWMPControls3*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentItem.call(this, pIWMPMedia)
    end
    def get_currentMarker(this : IWMPControls3*, plMarker : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMarker.call(this, plMarker)
    end
    def put_currentMarker(this : IWMPControls3*, lMarker : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMarker.call(this, lMarker)
    end
    def playItem(this : IWMPControls3*, pIWMPMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.playItem.call(this, pIWMPMedia)
    end
    def step(this : IWMPControls3*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def get_audioLanguageCount(this : IWMPControls3*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audioLanguageCount.call(this, plCount)
    end
    def getAudioLanguageID(this : IWMPControls3*, lIndex : Int32, plLangID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAudioLanguageID.call(this, lIndex, plLangID)
    end
    def getAudioLanguageDescription(this : IWMPControls3*, lIndex : Int32, pbstrLangDesc : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAudioLanguageDescription.call(this, lIndex, pbstrLangDesc)
    end
    def get_currentAudioLanguage(this : IWMPControls3*, plLangID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentAudioLanguage.call(this, plLangID)
    end
    def put_currentAudioLanguage(this : IWMPControls3*, lLangID : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentAudioLanguage.call(this, lLangID)
    end
    def get_currentAudioLanguageIndex(this : IWMPControls3*, plIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentAudioLanguageIndex.call(this, plIndex)
    end
    def put_currentAudioLanguageIndex(this : IWMPControls3*, lIndex : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentAudioLanguageIndex.call(this, lIndex)
    end
    def getLanguageName(this : IWMPControls3*, lLangID : Int32, pbstrLangName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getLanguageName.call(this, lLangID, pbstrLangName)
    end
    def get_currentPositionTimecode(this : IWMPControls3*, bstrTimecode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPositionTimecode.call(this, bstrTimecode)
    end
    def put_currentPositionTimecode(this : IWMPControls3*, bstrTimecode : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPositionTimecode.call(this, bstrTimecode)
    end

  end

  @[Extern]
  record IWMPClosedCaption2Vtbl,
    query_interface : Proc(IWMPClosedCaption2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPClosedCaption2*, UInt32),
    release : Proc(IWMPClosedCaption2*, UInt32),
    get_type_info_count : Proc(IWMPClosedCaption2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPClosedCaption2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPClosedCaption2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPClosedCaption2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_SAMIStyle : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SAMIStyle : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SAMILang : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SAMILang : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SAMIFileName : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SAMIFileName : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_captioningId : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_captioningId : Proc(IWMPClosedCaption2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SAMILangCount : Proc(IWMPClosedCaption2*, Int32*, Win32cr::Foundation::HRESULT),
    getSAMILangName : Proc(IWMPClosedCaption2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getSAMILangID : Proc(IWMPClosedCaption2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_SAMIStyleCount : Proc(IWMPClosedCaption2*, Int32*, Win32cr::Foundation::HRESULT),
    getSAMIStyleName : Proc(IWMPClosedCaption2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("350ba78b-6bc8-4113-a5f5-312056934eb6")]
  record IWMPClosedCaption2, lpVtbl : IWMPClosedCaption2Vtbl* do
    GUID = LibC::GUID.new(0x350ba78b_u32, 0x6bc8_u16, 0x4113_u16, StaticArray[0xa5_u8, 0xf5_u8, 0x31_u8, 0x20_u8, 0x56_u8, 0x93_u8, 0x4e_u8, 0xb6_u8])
    def query_interface(this : IWMPClosedCaption2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPClosedCaption2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPClosedCaption2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPClosedCaption2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPClosedCaption2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPClosedCaption2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPClosedCaption2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_SAMIStyle(this : IWMPClosedCaption2*, pbstrSAMIStyle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMIStyle.call(this, pbstrSAMIStyle)
    end
    def put_SAMIStyle(this : IWMPClosedCaption2*, bstrSAMIStyle : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAMIStyle.call(this, bstrSAMIStyle)
    end
    def get_SAMILang(this : IWMPClosedCaption2*, pbstrSAMILang : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMILang.call(this, pbstrSAMILang)
    end
    def put_SAMILang(this : IWMPClosedCaption2*, bstrSAMILang : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAMILang.call(this, bstrSAMILang)
    end
    def get_SAMIFileName(this : IWMPClosedCaption2*, pbstrSAMIFileName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMIFileName.call(this, pbstrSAMIFileName)
    end
    def put_SAMIFileName(this : IWMPClosedCaption2*, bstrSAMIFileName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAMIFileName.call(this, bstrSAMIFileName)
    end
    def get_captioningId(this : IWMPClosedCaption2*, pbstrCaptioningID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_captioningId.call(this, pbstrCaptioningID)
    end
    def put_captioningId(this : IWMPClosedCaption2*, bstrCaptioningID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_captioningId.call(this, bstrCaptioningID)
    end
    def get_SAMILangCount(this : IWMPClosedCaption2*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMILangCount.call(this, plCount)
    end
    def getSAMILangName(this : IWMPClosedCaption2*, nIndex : Int32, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getSAMILangName.call(this, nIndex, pbstrName)
    end
    def getSAMILangID(this : IWMPClosedCaption2*, nIndex : Int32, plLangID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getSAMILangID.call(this, nIndex, plLangID)
    end
    def get_SAMIStyleCount(this : IWMPClosedCaption2*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAMIStyleCount.call(this, plCount)
    end
    def getSAMIStyleName(this : IWMPClosedCaption2*, nIndex : Int32, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getSAMIStyleName.call(this, nIndex, pbstrName)
    end

  end

  @[Extern]
  record IWMPPlayerApplicationVtbl,
    query_interface : Proc(IWMPPlayerApplication*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlayerApplication*, UInt32),
    release : Proc(IWMPPlayerApplication*, UInt32),
    get_type_info_count : Proc(IWMPPlayerApplication*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlayerApplication*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlayerApplication*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlayerApplication*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    switchToPlayerApplication : Proc(IWMPPlayerApplication*, Win32cr::Foundation::HRESULT),
    switchToControl : Proc(IWMPPlayerApplication*, Win32cr::Foundation::HRESULT),
    get_playerDocked : Proc(IWMPPlayerApplication*, Int16*, Win32cr::Foundation::HRESULT),
    get_hasDisplay : Proc(IWMPPlayerApplication*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("40897764-ceab-47be-ad4a-8e28537f9bbf")]
  record IWMPPlayerApplication, lpVtbl : IWMPPlayerApplicationVtbl* do
    GUID = LibC::GUID.new(0x40897764_u32, 0xceab_u16, 0x47be_u16, StaticArray[0xad_u8, 0x4a_u8, 0x8e_u8, 0x28_u8, 0x53_u8, 0x7f_u8, 0x9b_u8, 0xbf_u8])
    def query_interface(this : IWMPPlayerApplication*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlayerApplication*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlayerApplication*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlayerApplication*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlayerApplication*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlayerApplication*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlayerApplication*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def switchToPlayerApplication(this : IWMPPlayerApplication*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.switchToPlayerApplication.call(this)
    end
    def switchToControl(this : IWMPPlayerApplication*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.switchToControl.call(this)
    end
    def get_playerDocked(this : IWMPPlayerApplication*, pbPlayerDocked : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playerDocked.call(this, pbPlayerDocked)
    end
    def get_hasDisplay(this : IWMPPlayerApplication*, pbHasDisplay : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hasDisplay.call(this, pbHasDisplay)
    end

  end

  @[Extern]
  record IWMPCore3Vtbl,
    query_interface : Proc(IWMPCore3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPCore3*, UInt32),
    release : Proc(IWMPCore3*, UInt32),
    get_type_info_count : Proc(IWMPCore3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPCore3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPCore3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPCore3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IWMPCore3*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPCore3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IWMPCore3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_openState : Proc(IWMPCore3*, Win32cr::Media::MediaPlayer::WMPOpenState*, Win32cr::Foundation::HRESULT),
    get_playState : Proc(IWMPCore3*, Win32cr::Media::MediaPlayer::WMPPlayState*, Win32cr::Foundation::HRESULT),
    get_controls : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_settings : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_currentMedia : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    put_currentMedia : Proc(IWMPCore3*, Void*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_playlistCollection : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_versionInfo : Proc(IWMPCore3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    launchURL : Proc(IWMPCore3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_network : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_currentPlaylist : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    put_currentPlaylist : Proc(IWMPCore3*, Void*, Win32cr::Foundation::HRESULT),
    get_cdromCollection : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_closedCaption : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_isOnline : Proc(IWMPCore3*, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPCore3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dvd : Proc(IWMPCore3*, Void**, Win32cr::Foundation::HRESULT),
    newPlaylist : Proc(IWMPCore3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    newMedia : Proc(IWMPCore3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7587c667-628f-499f-88e7-6a6f4e888464")]
  record IWMPCore3, lpVtbl : IWMPCore3Vtbl* do
    GUID = LibC::GUID.new(0x7587c667_u32, 0x628f_u16, 0x499f_u16, StaticArray[0x88_u8, 0xe7_u8, 0x6a_u8, 0x6f_u8, 0x4e_u8, 0x88_u8, 0x84_u8, 0x64_u8])
    def query_interface(this : IWMPCore3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPCore3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPCore3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPCore3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPCore3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPCore3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPCore3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def close(this : IWMPCore3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_URL(this : IWMPCore3*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end
    def put_URL(this : IWMPCore3*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, bstrURL)
    end
    def get_openState(this : IWMPCore3*, pwmpos : Win32cr::Media::MediaPlayer::WMPOpenState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_openState.call(this, pwmpos)
    end
    def get_playState(this : IWMPCore3*, pwmpps : Win32cr::Media::MediaPlayer::WMPPlayState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playState.call(this, pwmpps)
    end
    def get_controls(this : IWMPCore3*, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controls.call(this, ppControl)
    end
    def get_settings(this : IWMPCore3*, ppSettings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_settings.call(this, ppSettings)
    end
    def get_currentMedia(this : IWMPCore3*, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMedia.call(this, ppMedia)
    end
    def put_currentMedia(this : IWMPCore3*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMedia.call(this, pMedia)
    end
    def get_mediaCollection(this : IWMPCore3*, ppMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppMediaCollection)
    end
    def get_playlistCollection(this : IWMPCore3*, ppPlaylistCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlistCollection.call(this, ppPlaylistCollection)
    end
    def get_versionInfo(this : IWMPCore3*, pbstrVersionInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_versionInfo.call(this, pbstrVersionInfo)
    end
    def launchURL(this : IWMPCore3*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launchURL.call(this, bstrURL)
    end
    def get_network(this : IWMPCore3*, ppQNI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network.call(this, ppQNI)
    end
    def get_currentPlaylist(this : IWMPCore3*, ppPL : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPlaylist.call(this, ppPL)
    end
    def put_currentPlaylist(this : IWMPCore3*, pPL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPlaylist.call(this, pPL)
    end
    def get_cdromCollection(this : IWMPCore3*, ppCdromCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdromCollection.call(this, ppCdromCollection)
    end
    def get_closedCaption(this : IWMPCore3*, ppClosedCaption : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_closedCaption.call(this, ppClosedCaption)
    end
    def get_isOnline(this : IWMPCore3*, pfOnline : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isOnline.call(this, pfOnline)
    end
    def get_error(this : IWMPCore3*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def get_status(this : IWMPCore3*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pbstrStatus)
    end
    def get_dvd(this : IWMPCore3*, ppDVD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd.call(this, ppDVD)
    end
    def newPlaylist(this : IWMPCore3*, bstrName : Win32cr::Foundation::BSTR, bstrURL : Win32cr::Foundation::BSTR, ppPlaylist : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.newPlaylist.call(this, bstrName, bstrURL, ppPlaylist)
    end
    def newMedia(this : IWMPCore3*, bstrURL : Win32cr::Foundation::BSTR, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.newMedia.call(this, bstrURL, ppMedia)
    end

  end

  @[Extern]
  record IWMPPlayer4Vtbl,
    query_interface : Proc(IWMPPlayer4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlayer4*, UInt32),
    release : Proc(IWMPPlayer4*, UInt32),
    get_type_info_count : Proc(IWMPPlayer4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPPlayer4*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPPlayer4*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPPlayer4*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IWMPPlayer4*, Win32cr::Foundation::HRESULT),
    get_URL : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_URL : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_openState : Proc(IWMPPlayer4*, Win32cr::Media::MediaPlayer::WMPOpenState*, Win32cr::Foundation::HRESULT),
    get_playState : Proc(IWMPPlayer4*, Win32cr::Media::MediaPlayer::WMPPlayState*, Win32cr::Foundation::HRESULT),
    get_controls : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_settings : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_currentMedia : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    put_currentMedia : Proc(IWMPPlayer4*, Void*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_playlistCollection : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_versionInfo : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    launchURL : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_network : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_currentPlaylist : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    put_currentPlaylist : Proc(IWMPPlayer4*, Void*, Win32cr::Foundation::HRESULT),
    get_cdromCollection : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_closedCaption : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_isOnline : Proc(IWMPPlayer4*, Int16*, Win32cr::Foundation::HRESULT),
    get_error : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dvd : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    newPlaylist : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    newMedia : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_enabled : Proc(IWMPPlayer4*, Int16*, Win32cr::Foundation::HRESULT),
    put_enabled : Proc(IWMPPlayer4*, Int16, Win32cr::Foundation::HRESULT),
    get_fullScreen : Proc(IWMPPlayer4*, Int16*, Win32cr::Foundation::HRESULT),
    put_fullScreen : Proc(IWMPPlayer4*, Int16, Win32cr::Foundation::HRESULT),
    get_enableContextMenu : Proc(IWMPPlayer4*, Int16*, Win32cr::Foundation::HRESULT),
    put_enableContextMenu : Proc(IWMPPlayer4*, Int16, Win32cr::Foundation::HRESULT),
    put_uiMode : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_uiMode : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_stretchToFit : Proc(IWMPPlayer4*, Int16*, Win32cr::Foundation::HRESULT),
    put_stretchToFit : Proc(IWMPPlayer4*, Int16, Win32cr::Foundation::HRESULT),
    get_windowlessVideo : Proc(IWMPPlayer4*, Int16*, Win32cr::Foundation::HRESULT),
    put_windowlessVideo : Proc(IWMPPlayer4*, Int16, Win32cr::Foundation::HRESULT),
    get_isRemote : Proc(IWMPPlayer4*, Int16*, Win32cr::Foundation::HRESULT),
    get_playerApplication : Proc(IWMPPlayer4*, Void**, Win32cr::Foundation::HRESULT),
    openPlayer : Proc(IWMPPlayer4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6c497d62-8919-413c-82db-e935fb3ec584")]
  record IWMPPlayer4, lpVtbl : IWMPPlayer4Vtbl* do
    GUID = LibC::GUID.new(0x6c497d62_u32, 0x8919_u16, 0x413c_u16, StaticArray[0x82_u8, 0xdb_u8, 0xe9_u8, 0x35_u8, 0xfb_u8, 0x3e_u8, 0xc5_u8, 0x84_u8])
    def query_interface(this : IWMPPlayer4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlayer4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlayer4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPPlayer4*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPPlayer4*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPPlayer4*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPPlayer4*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def close(this : IWMPPlayer4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_URL(this : IWMPPlayer4*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pbstrURL)
    end
    def put_URL(this : IWMPPlayer4*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_URL.call(this, bstrURL)
    end
    def get_openState(this : IWMPPlayer4*, pwmpos : Win32cr::Media::MediaPlayer::WMPOpenState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_openState.call(this, pwmpos)
    end
    def get_playState(this : IWMPPlayer4*, pwmpps : Win32cr::Media::MediaPlayer::WMPPlayState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playState.call(this, pwmpps)
    end
    def get_controls(this : IWMPPlayer4*, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controls.call(this, ppControl)
    end
    def get_settings(this : IWMPPlayer4*, ppSettings : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_settings.call(this, ppSettings)
    end
    def get_currentMedia(this : IWMPPlayer4*, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentMedia.call(this, ppMedia)
    end
    def put_currentMedia(this : IWMPPlayer4*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentMedia.call(this, pMedia)
    end
    def get_mediaCollection(this : IWMPPlayer4*, ppMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppMediaCollection)
    end
    def get_playlistCollection(this : IWMPPlayer4*, ppPlaylistCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playlistCollection.call(this, ppPlaylistCollection)
    end
    def get_versionInfo(this : IWMPPlayer4*, pbstrVersionInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_versionInfo.call(this, pbstrVersionInfo)
    end
    def launchURL(this : IWMPPlayer4*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.launchURL.call(this, bstrURL)
    end
    def get_network(this : IWMPPlayer4*, ppQNI : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network.call(this, ppQNI)
    end
    def get_currentPlaylist(this : IWMPPlayer4*, ppPL : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentPlaylist.call(this, ppPL)
    end
    def put_currentPlaylist(this : IWMPPlayer4*, pPL : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_currentPlaylist.call(this, pPL)
    end
    def get_cdromCollection(this : IWMPPlayer4*, ppCdromCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdromCollection.call(this, ppCdromCollection)
    end
    def get_closedCaption(this : IWMPPlayer4*, ppClosedCaption : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_closedCaption.call(this, ppClosedCaption)
    end
    def get_isOnline(this : IWMPPlayer4*, pfOnline : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isOnline.call(this, pfOnline)
    end
    def get_error(this : IWMPPlayer4*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def get_status(this : IWMPPlayer4*, pbstrStatus : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pbstrStatus)
    end
    def get_dvd(this : IWMPPlayer4*, ppDVD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd.call(this, ppDVD)
    end
    def newPlaylist(this : IWMPPlayer4*, bstrName : Win32cr::Foundation::BSTR, bstrURL : Win32cr::Foundation::BSTR, ppPlaylist : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.newPlaylist.call(this, bstrName, bstrURL, ppPlaylist)
    end
    def newMedia(this : IWMPPlayer4*, bstrURL : Win32cr::Foundation::BSTR, ppMedia : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.newMedia.call(this, bstrURL, ppMedia)
    end
    def get_enabled(this : IWMPPlayer4*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enabled.call(this, pbEnabled)
    end
    def put_enabled(this : IWMPPlayer4*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enabled.call(this, bEnabled)
    end
    def get_fullScreen(this : IWMPPlayer4*, pbFullScreen : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fullScreen.call(this, pbFullScreen)
    end
    def put_fullScreen(this : IWMPPlayer4*, bFullScreen : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_fullScreen.call(this, bFullScreen)
    end
    def get_enableContextMenu(this : IWMPPlayer4*, pbEnableContextMenu : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enableContextMenu.call(this, pbEnableContextMenu)
    end
    def put_enableContextMenu(this : IWMPPlayer4*, bEnableContextMenu : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_enableContextMenu.call(this, bEnableContextMenu)
    end
    def put_uiMode(this : IWMPPlayer4*, bstrMode : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_uiMode.call(this, bstrMode)
    end
    def get_uiMode(this : IWMPPlayer4*, pbstrMode : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uiMode.call(this, pbstrMode)
    end
    def get_stretchToFit(this : IWMPPlayer4*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stretchToFit.call(this, pbEnabled)
    end
    def put_stretchToFit(this : IWMPPlayer4*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_stretchToFit.call(this, bEnabled)
    end
    def get_windowlessVideo(this : IWMPPlayer4*, pbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windowlessVideo.call(this, pbEnabled)
    end
    def put_windowlessVideo(this : IWMPPlayer4*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_windowlessVideo.call(this, bEnabled)
    end
    def get_isRemote(this : IWMPPlayer4*, pvarfIsRemote : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_isRemote.call(this, pvarfIsRemote)
    end
    def get_playerApplication(this : IWMPPlayer4*, ppIWMPPlayerApplication : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_playerApplication.call(this, ppIWMPPlayerApplication)
    end
    def openPlayer(this : IWMPPlayer4*, bstrURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.openPlayer.call(this, bstrURL)
    end

  end

  @[Extern]
  record IWMPPlayerServicesVtbl,
    query_interface : Proc(IWMPPlayerServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlayerServices*, UInt32),
    release : Proc(IWMPPlayerServices*, UInt32),
    activateUIPlugin : Proc(IWMPPlayerServices*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setTaskPane : Proc(IWMPPlayerServices*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setTaskPaneURL : Proc(IWMPPlayerServices*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1d01fbdb-ade2-4c8d-9842-c190b95c3306")]
  record IWMPPlayerServices, lpVtbl : IWMPPlayerServicesVtbl* do
    GUID = LibC::GUID.new(0x1d01fbdb_u32, 0xade2_u16, 0x4c8d_u16, StaticArray[0x98_u8, 0x42_u8, 0xc1_u8, 0x90_u8, 0xb9_u8, 0x5c_u8, 0x33_u8, 0x6_u8])
    def query_interface(this : IWMPPlayerServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlayerServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlayerServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def activateUIPlugin(this : IWMPPlayerServices*, bstrPlugin : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activateUIPlugin.call(this, bstrPlugin)
    end
    def setTaskPane(this : IWMPPlayerServices*, bstrTaskPane : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setTaskPane.call(this, bstrTaskPane)
    end
    def setTaskPaneURL(this : IWMPPlayerServices*, bstrTaskPane : Win32cr::Foundation::BSTR, bstrURL : Win32cr::Foundation::BSTR, bstrFriendlyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setTaskPaneURL.call(this, bstrTaskPane, bstrURL, bstrFriendlyName)
    end

  end

  @[Extern]
  record IWMPSyncDeviceVtbl,
    query_interface : Proc(IWMPSyncDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSyncDevice*, UInt32),
    release : Proc(IWMPSyncDevice*, UInt32),
    get_friendlyName : Proc(IWMPSyncDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_friendlyName : Proc(IWMPSyncDevice*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_deviceName : Proc(IWMPSyncDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_deviceId : Proc(IWMPSyncDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_partnershipIndex : Proc(IWMPSyncDevice*, Int32*, Win32cr::Foundation::HRESULT),
    get_connected : Proc(IWMPSyncDevice*, Int16*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPSyncDevice*, Win32cr::Media::MediaPlayer::WMPDeviceStatus*, Win32cr::Foundation::HRESULT),
    get_syncState : Proc(IWMPSyncDevice*, Win32cr::Media::MediaPlayer::WMPSyncState*, Win32cr::Foundation::HRESULT),
    get_progress : Proc(IWMPSyncDevice*, Int32*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPSyncDevice*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createPartnership : Proc(IWMPSyncDevice*, Int16, Win32cr::Foundation::HRESULT),
    deletePartnership : Proc(IWMPSyncDevice*, Win32cr::Foundation::HRESULT),
    start : Proc(IWMPSyncDevice*, Win32cr::Foundation::HRESULT),
    stop : Proc(IWMPSyncDevice*, Win32cr::Foundation::HRESULT),
    showSettings : Proc(IWMPSyncDevice*, Win32cr::Foundation::HRESULT),
    isIdentical : Proc(IWMPSyncDevice*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("82a2986c-0293-4fd0-b279-b21b86c058be")]
  record IWMPSyncDevice, lpVtbl : IWMPSyncDeviceVtbl* do
    GUID = LibC::GUID.new(0x82a2986c_u32, 0x293_u16, 0x4fd0_u16, StaticArray[0xb2_u8, 0x79_u8, 0xb2_u8, 0x1b_u8, 0x86_u8, 0xc0_u8, 0x58_u8, 0xbe_u8])
    def query_interface(this : IWMPSyncDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSyncDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSyncDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_friendlyName(this : IWMPSyncDevice*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_friendlyName.call(this, pbstrName)
    end
    def put_friendlyName(this : IWMPSyncDevice*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_friendlyName.call(this, bstrName)
    end
    def get_deviceName(this : IWMPSyncDevice*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deviceName.call(this, pbstrName)
    end
    def get_deviceId(this : IWMPSyncDevice*, pbstrDeviceId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deviceId.call(this, pbstrDeviceId)
    end
    def get_partnershipIndex(this : IWMPSyncDevice*, plIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_partnershipIndex.call(this, plIndex)
    end
    def get_connected(this : IWMPSyncDevice*, pvbConnected : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connected.call(this, pvbConnected)
    end
    def get_status(this : IWMPSyncDevice*, pwmpds : Win32cr::Media::MediaPlayer::WMPDeviceStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pwmpds)
    end
    def get_syncState(this : IWMPSyncDevice*, pwmpss : Win32cr::Media::MediaPlayer::WMPSyncState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_syncState.call(this, pwmpss)
    end
    def get_progress(this : IWMPSyncDevice*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_progress.call(this, plProgress)
    end
    def getItemInfo(this : IWMPSyncDevice*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end
    def createPartnership(this : IWMPSyncDevice*, vbShowUI : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPartnership.call(this, vbShowUI)
    end
    def deletePartnership(this : IWMPSyncDevice*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deletePartnership.call(this)
    end
    def start(this : IWMPSyncDevice*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IWMPSyncDevice*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def showSettings(this : IWMPSyncDevice*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.showSettings.call(this)
    end
    def isIdentical(this : IWMPSyncDevice*, pDevice : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isIdentical.call(this, pDevice, pvbool)
    end

  end

  @[Extern]
  record IWMPSyncServicesVtbl,
    query_interface : Proc(IWMPSyncServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSyncServices*, UInt32),
    release : Proc(IWMPSyncServices*, UInt32),
    get_deviceCount : Proc(IWMPSyncServices*, Int32*, Win32cr::Foundation::HRESULT),
    getDevice : Proc(IWMPSyncServices*, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8b5050ff-e0a4-4808-b3a8-893a9e1ed894")]
  record IWMPSyncServices, lpVtbl : IWMPSyncServicesVtbl* do
    GUID = LibC::GUID.new(0x8b5050ff_u32, 0xe0a4_u16, 0x4808_u16, StaticArray[0xb3_u8, 0xa8_u8, 0x89_u8, 0x3a_u8, 0x9e_u8, 0x1e_u8, 0xd8_u8, 0x94_u8])
    def query_interface(this : IWMPSyncServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSyncServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSyncServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_deviceCount(this : IWMPSyncServices*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deviceCount.call(this, plCount)
    end
    def getDevice(this : IWMPSyncServices*, lIndex : Int32, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDevice.call(this, lIndex, ppDevice)
    end

  end

  @[Extern]
  record IWMPPlayerServices2Vtbl,
    query_interface : Proc(IWMPPlayerServices2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlayerServices2*, UInt32),
    release : Proc(IWMPPlayerServices2*, UInt32),
    activateUIPlugin : Proc(IWMPPlayerServices2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setTaskPane : Proc(IWMPPlayerServices2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setTaskPaneURL : Proc(IWMPPlayerServices2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    setBackgroundProcessingPriority : Proc(IWMPPlayerServices2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1bb1592f-f040-418a-9f71-17c7512b4d70")]
  record IWMPPlayerServices2, lpVtbl : IWMPPlayerServices2Vtbl* do
    GUID = LibC::GUID.new(0x1bb1592f_u32, 0xf040_u16, 0x418a_u16, StaticArray[0x9f_u8, 0x71_u8, 0x17_u8, 0xc7_u8, 0x51_u8, 0x2b_u8, 0x4d_u8, 0x70_u8])
    def query_interface(this : IWMPPlayerServices2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlayerServices2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlayerServices2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def activateUIPlugin(this : IWMPPlayerServices2*, bstrPlugin : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activateUIPlugin.call(this, bstrPlugin)
    end
    def setTaskPane(this : IWMPPlayerServices2*, bstrTaskPane : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setTaskPane.call(this, bstrTaskPane)
    end
    def setTaskPaneURL(this : IWMPPlayerServices2*, bstrTaskPane : Win32cr::Foundation::BSTR, bstrURL : Win32cr::Foundation::BSTR, bstrFriendlyName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setTaskPaneURL.call(this, bstrTaskPane, bstrURL, bstrFriendlyName)
    end
    def setBackgroundProcessingPriority(this : IWMPPlayerServices2*, bstrPriority : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setBackgroundProcessingPriority.call(this, bstrPriority)
    end

  end

  @[Extern]
  record IWMPCdromRipVtbl,
    query_interface : Proc(IWMPCdromRip*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPCdromRip*, UInt32),
    release : Proc(IWMPCdromRip*, UInt32),
    get_ripState : Proc(IWMPCdromRip*, Win32cr::Media::MediaPlayer::WMPRipState*, Win32cr::Foundation::HRESULT),
    get_ripProgress : Proc(IWMPCdromRip*, Int32*, Win32cr::Foundation::HRESULT),
    startRip : Proc(IWMPCdromRip*, Win32cr::Foundation::HRESULT),
    stopRip : Proc(IWMPCdromRip*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56e2294f-69ed-4629-a869-aea72c0dcc2c")]
  record IWMPCdromRip, lpVtbl : IWMPCdromRipVtbl* do
    GUID = LibC::GUID.new(0x56e2294f_u32, 0x69ed_u16, 0x4629_u16, StaticArray[0xa8_u8, 0x69_u8, 0xae_u8, 0xa7_u8, 0x2c_u8, 0xd_u8, 0xcc_u8, 0x2c_u8])
    def query_interface(this : IWMPCdromRip*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPCdromRip*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPCdromRip*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ripState(this : IWMPCdromRip*, pwmprs : Win32cr::Media::MediaPlayer::WMPRipState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ripState.call(this, pwmprs)
    end
    def get_ripProgress(this : IWMPCdromRip*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ripProgress.call(this, plProgress)
    end
    def startRip(this : IWMPCdromRip*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startRip.call(this)
    end
    def stopRip(this : IWMPCdromRip*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stopRip.call(this)
    end

  end

  @[Extern]
  record IWMPCdromBurnVtbl,
    query_interface : Proc(IWMPCdromBurn*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPCdromBurn*, UInt32),
    release : Proc(IWMPCdromBurn*, UInt32),
    isAvailable : Proc(IWMPCdromBurn*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPCdromBurn*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_label : Proc(IWMPCdromBurn*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_label : Proc(IWMPCdromBurn*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_burnFormat : Proc(IWMPCdromBurn*, Win32cr::Media::MediaPlayer::WMPBurnFormat*, Win32cr::Foundation::HRESULT),
    put_burnFormat : Proc(IWMPCdromBurn*, Win32cr::Media::MediaPlayer::WMPBurnFormat, Win32cr::Foundation::HRESULT),
    get_burnPlaylist : Proc(IWMPCdromBurn*, Void**, Win32cr::Foundation::HRESULT),
    put_burnPlaylist : Proc(IWMPCdromBurn*, Void*, Win32cr::Foundation::HRESULT),
    refreshStatus : Proc(IWMPCdromBurn*, Win32cr::Foundation::HRESULT),
    get_burnState : Proc(IWMPCdromBurn*, Win32cr::Media::MediaPlayer::WMPBurnState*, Win32cr::Foundation::HRESULT),
    get_burnProgress : Proc(IWMPCdromBurn*, Int32*, Win32cr::Foundation::HRESULT),
    startBurn : Proc(IWMPCdromBurn*, Win32cr::Foundation::HRESULT),
    stopBurn : Proc(IWMPCdromBurn*, Win32cr::Foundation::HRESULT),
    erase : Proc(IWMPCdromBurn*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bd94dbeb-417f-4928-aa06-087d56ed9b59")]
  record IWMPCdromBurn, lpVtbl : IWMPCdromBurnVtbl* do
    GUID = LibC::GUID.new(0xbd94dbeb_u32, 0x417f_u16, 0x4928_u16, StaticArray[0xaa_u8, 0x6_u8, 0x8_u8, 0x7d_u8, 0x56_u8, 0xed_u8, 0x9b_u8, 0x59_u8])
    def query_interface(this : IWMPCdromBurn*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPCdromBurn*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPCdromBurn*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def isAvailable(this : IWMPCdromBurn*, bstrItem : Win32cr::Foundation::BSTR, pIsAvailable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isAvailable.call(this, bstrItem, pIsAvailable)
    end
    def getItemInfo(this : IWMPCdromBurn*, bstrItem : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItem, pbstrVal)
    end
    def get_label(this : IWMPCdromBurn*, pbstrLabel : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_label.call(this, pbstrLabel)
    end
    def put_label(this : IWMPCdromBurn*, bstrLabel : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_label.call(this, bstrLabel)
    end
    def get_burnFormat(this : IWMPCdromBurn*, pwmpbf : Win32cr::Media::MediaPlayer::WMPBurnFormat*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_burnFormat.call(this, pwmpbf)
    end
    def put_burnFormat(this : IWMPCdromBurn*, wmpbf : Win32cr::Media::MediaPlayer::WMPBurnFormat) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_burnFormat.call(this, wmpbf)
    end
    def get_burnPlaylist(this : IWMPCdromBurn*, ppPlaylist : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_burnPlaylist.call(this, ppPlaylist)
    end
    def put_burnPlaylist(this : IWMPCdromBurn*, pPlaylist : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_burnPlaylist.call(this, pPlaylist)
    end
    def refreshStatus(this : IWMPCdromBurn*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refreshStatus.call(this)
    end
    def get_burnState(this : IWMPCdromBurn*, pwmpbs : Win32cr::Media::MediaPlayer::WMPBurnState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_burnState.call(this, pwmpbs)
    end
    def get_burnProgress(this : IWMPCdromBurn*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_burnProgress.call(this, plProgress)
    end
    def startBurn(this : IWMPCdromBurn*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startBurn.call(this)
    end
    def stopBurn(this : IWMPCdromBurn*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stopBurn.call(this)
    end
    def erase(this : IWMPCdromBurn*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.erase.call(this)
    end

  end

  @[Extern]
  record IWMPQueryVtbl,
    query_interface : Proc(IWMPQuery*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPQuery*, UInt32),
    release : Proc(IWMPQuery*, UInt32),
    get_type_info_count : Proc(IWMPQuery*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPQuery*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPQuery*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPQuery*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    addCondition : Proc(IWMPQuery*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    beginNextGroup : Proc(IWMPQuery*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a00918f3-a6b0-4bfb-9189-fd834c7bc5a5")]
  record IWMPQuery, lpVtbl : IWMPQueryVtbl* do
    GUID = LibC::GUID.new(0xa00918f3_u32, 0xa6b0_u16, 0x4bfb_u16, StaticArray[0x91_u8, 0x89_u8, 0xfd_u8, 0x83_u8, 0x4c_u8, 0x7b_u8, 0xc5_u8, 0xa5_u8])
    def query_interface(this : IWMPQuery*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPQuery*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPQuery*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPQuery*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPQuery*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPQuery*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPQuery*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def addCondition(this : IWMPQuery*, bstrAttribute : Win32cr::Foundation::BSTR, bstrOperator : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.addCondition.call(this, bstrAttribute, bstrOperator, bstrValue)
    end
    def beginNextGroup(this : IWMPQuery*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.beginNextGroup.call(this)
    end

  end

  @[Extern]
  record IWMPMediaCollection2Vtbl,
    query_interface : Proc(IWMPMediaCollection2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMediaCollection2*, UInt32),
    release : Proc(IWMPMediaCollection2*, UInt32),
    get_type_info_count : Proc(IWMPMediaCollection2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPMediaCollection2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPMediaCollection2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPMediaCollection2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    add : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getAll : Proc(IWMPMediaCollection2*, Void**, Win32cr::Foundation::HRESULT),
    getByName : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByGenre : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByAuthor : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByAlbum : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getByAttribute : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    remove : Proc(IWMPMediaCollection2*, Void*, Int16, Win32cr::Foundation::HRESULT),
    getAttributeStringCollection : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    getMediaAtom : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    setDeleted : Proc(IWMPMediaCollection2*, Void*, Int16, Win32cr::Foundation::HRESULT),
    isDeleted : Proc(IWMPMediaCollection2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    createQuery : Proc(IWMPMediaCollection2*, Void**, Win32cr::Foundation::HRESULT),
    getPlaylistByQuery : Proc(IWMPMediaCollection2*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int16, Void**, Win32cr::Foundation::HRESULT),
    getStringCollectionByQuery : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int16, Void**, Win32cr::Foundation::HRESULT),
    getByAttributeAndMediaType : Proc(IWMPMediaCollection2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8ba957f5-fd8c-4791-b82d-f840401ee474")]
  record IWMPMediaCollection2, lpVtbl : IWMPMediaCollection2Vtbl* do
    GUID = LibC::GUID.new(0x8ba957f5_u32, 0xfd8c_u16, 0x4791_u16, StaticArray[0xb8_u8, 0x2d_u8, 0xf8_u8, 0x40_u8, 0x40_u8, 0x1e_u8, 0xe4_u8, 0x74_u8])
    def query_interface(this : IWMPMediaCollection2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMediaCollection2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMediaCollection2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPMediaCollection2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPMediaCollection2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPMediaCollection2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPMediaCollection2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def add(this : IWMPMediaCollection2*, bstrURL : Win32cr::Foundation::BSTR, ppItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, bstrURL, ppItem)
    end
    def getAll(this : IWMPMediaCollection2*, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAll.call(this, ppMediaItems)
    end
    def getByName(this : IWMPMediaCollection2*, bstrName : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByName.call(this, bstrName, ppMediaItems)
    end
    def getByGenre(this : IWMPMediaCollection2*, bstrGenre : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByGenre.call(this, bstrGenre, ppMediaItems)
    end
    def getByAuthor(this : IWMPMediaCollection2*, bstrAuthor : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByAuthor.call(this, bstrAuthor, ppMediaItems)
    end
    def getByAlbum(this : IWMPMediaCollection2*, bstrAlbum : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByAlbum.call(this, bstrAlbum, ppMediaItems)
    end
    def getByAttribute(this : IWMPMediaCollection2*, bstrAttribute : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByAttribute.call(this, bstrAttribute, bstrValue, ppMediaItems)
    end
    def remove(this : IWMPMediaCollection2*, pItem : Void*, varfDeleteFile : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, pItem, varfDeleteFile)
    end
    def getAttributeStringCollection(this : IWMPMediaCollection2*, bstrAttribute : Win32cr::Foundation::BSTR, bstrMediaType : Win32cr::Foundation::BSTR, ppStringCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeStringCollection.call(this, bstrAttribute, bstrMediaType, ppStringCollection)
    end
    def getMediaAtom(this : IWMPMediaCollection2*, bstrItemName : Win32cr::Foundation::BSTR, plAtom : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getMediaAtom.call(this, bstrItemName, plAtom)
    end
    def setDeleted(this : IWMPMediaCollection2*, pItem : Void*, varfIsDeleted : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setDeleted.call(this, pItem, varfIsDeleted)
    end
    def isDeleted(this : IWMPMediaCollection2*, pItem : Void*, pvarfIsDeleted : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isDeleted.call(this, pItem, pvarfIsDeleted)
    end
    def createQuery(this : IWMPMediaCollection2*, ppQuery : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createQuery.call(this, ppQuery)
    end
    def getPlaylistByQuery(this : IWMPMediaCollection2*, pQuery : Void*, bstrMediaType : Win32cr::Foundation::BSTR, bstrSortAttribute : Win32cr::Foundation::BSTR, fSortAscending : Int16, ppPlaylist : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getPlaylistByQuery.call(this, pQuery, bstrMediaType, bstrSortAttribute, fSortAscending, ppPlaylist)
    end
    def getStringCollectionByQuery(this : IWMPMediaCollection2*, bstrAttribute : Win32cr::Foundation::BSTR, pQuery : Void*, bstrMediaType : Win32cr::Foundation::BSTR, bstrSortAttribute : Win32cr::Foundation::BSTR, fSortAscending : Int16, ppStringCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getStringCollectionByQuery.call(this, bstrAttribute, pQuery, bstrMediaType, bstrSortAttribute, fSortAscending, ppStringCollection)
    end
    def getByAttributeAndMediaType(this : IWMPMediaCollection2*, bstrAttribute : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR, bstrMediaType : Win32cr::Foundation::BSTR, ppMediaItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getByAttributeAndMediaType.call(this, bstrAttribute, bstrValue, bstrMediaType, ppMediaItems)
    end

  end

  @[Extern]
  record IWMPStringCollection2Vtbl,
    query_interface : Proc(IWMPStringCollection2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPStringCollection2*, UInt32),
    release : Proc(IWMPStringCollection2*, UInt32),
    get_type_info_count : Proc(IWMPStringCollection2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPStringCollection2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPStringCollection2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPStringCollection2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IWMPStringCollection2*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IWMPStringCollection2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    isIdentical : Proc(IWMPStringCollection2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPStringCollection2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    getAttributeCountByType : Proc(IWMPStringCollection2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    getItemInfoByType : Proc(IWMPStringCollection2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("46ad648d-53f1-4a74-92e2-2a1b68d63fd4")]
  record IWMPStringCollection2, lpVtbl : IWMPStringCollection2Vtbl* do
    GUID = LibC::GUID.new(0x46ad648d_u32, 0x53f1_u16, 0x4a74_u16, StaticArray[0x92_u8, 0xe2_u8, 0x2a_u8, 0x1b_u8, 0x68_u8, 0xd6_u8, 0x3f_u8, 0xd4_u8])
    def query_interface(this : IWMPStringCollection2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPStringCollection2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPStringCollection2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPStringCollection2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPStringCollection2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPStringCollection2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPStringCollection2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_count(this : IWMPStringCollection2*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def item(this : IWMPStringCollection2*, lIndex : Int32, pbstrString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, lIndex, pbstrString)
    end
    def isIdentical(this : IWMPStringCollection2*, pIWMPStringCollection2 : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isIdentical.call(this, pIWMPStringCollection2, pvbool)
    end
    def getItemInfo(this : IWMPStringCollection2*, lCollectionIndex : Int32, bstrItemName : Win32cr::Foundation::BSTR, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, lCollectionIndex, bstrItemName, pbstrValue)
    end
    def getAttributeCountByType(this : IWMPStringCollection2*, lCollectionIndex : Int32, bstrType : Win32cr::Foundation::BSTR, bstrLanguage : Win32cr::Foundation::BSTR, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getAttributeCountByType.call(this, lCollectionIndex, bstrType, bstrLanguage, plCount)
    end
    def getItemInfoByType(this : IWMPStringCollection2*, lCollectionIndex : Int32, bstrType : Win32cr::Foundation::BSTR, bstrLanguage : Win32cr::Foundation::BSTR, lAttributeIndex : Int32, pvarValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfoByType.call(this, lCollectionIndex, bstrType, bstrLanguage, lAttributeIndex, pvarValue)
    end

  end

  @[Extern]
  record IWMPLibraryVtbl,
    query_interface : Proc(IWMPLibrary*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPLibrary*, UInt32),
    release : Proc(IWMPLibrary*, UInt32),
    get_name : Proc(IWMPLibrary*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IWMPLibrary*, Win32cr::Media::MediaPlayer::WMPLibraryType*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPLibrary*, Void**, Win32cr::Foundation::HRESULT),
    isIdentical : Proc(IWMPLibrary*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3df47861-7df1-4c1f-a81b-4c26f0f7a7c6")]
  record IWMPLibrary, lpVtbl : IWMPLibraryVtbl* do
    GUID = LibC::GUID.new(0x3df47861_u32, 0x7df1_u16, 0x4c1f_u16, StaticArray[0xa8_u8, 0x1b_u8, 0x4c_u8, 0x26_u8, 0xf0_u8, 0xf7_u8, 0xa7_u8, 0xc6_u8])
    def query_interface(this : IWMPLibrary*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPLibrary*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPLibrary*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IWMPLibrary*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def get_type(this : IWMPLibrary*, pwmplt : Win32cr::Media::MediaPlayer::WMPLibraryType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pwmplt)
    end
    def get_mediaCollection(this : IWMPLibrary*, ppIWMPMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppIWMPMediaCollection)
    end
    def isIdentical(this : IWMPLibrary*, pIWMPLibrary : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isIdentical.call(this, pIWMPLibrary, pvbool)
    end

  end

  @[Extern]
  record IWMPLibraryServicesVtbl,
    query_interface : Proc(IWMPLibraryServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPLibraryServices*, UInt32),
    release : Proc(IWMPLibraryServices*, UInt32),
    getCountByType : Proc(IWMPLibraryServices*, Win32cr::Media::MediaPlayer::WMPLibraryType, Int32*, Win32cr::Foundation::HRESULT),
    getLibraryByType : Proc(IWMPLibraryServices*, Win32cr::Media::MediaPlayer::WMPLibraryType, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("39c2f8d5-1cf2-4d5e-ae09-d73492cf9eaa")]
  record IWMPLibraryServices, lpVtbl : IWMPLibraryServicesVtbl* do
    GUID = LibC::GUID.new(0x39c2f8d5_u32, 0x1cf2_u16, 0x4d5e_u16, StaticArray[0xae_u8, 0x9_u8, 0xd7_u8, 0x34_u8, 0x92_u8, 0xcf_u8, 0x9e_u8, 0xaa_u8])
    def query_interface(this : IWMPLibraryServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPLibraryServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPLibraryServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def getCountByType(this : IWMPLibraryServices*, wmplt : Win32cr::Media::MediaPlayer::WMPLibraryType, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getCountByType.call(this, wmplt, plCount)
    end
    def getLibraryByType(this : IWMPLibraryServices*, wmplt : Win32cr::Media::MediaPlayer::WMPLibraryType, lIndex : Int32, ppIWMPLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getLibraryByType.call(this, wmplt, lIndex, ppIWMPLibrary)
    end

  end

  @[Extern]
  record IWMPLibrarySharingServicesVtbl,
    query_interface : Proc(IWMPLibrarySharingServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPLibrarySharingServices*, UInt32),
    release : Proc(IWMPLibrarySharingServices*, UInt32),
    isLibraryShared : Proc(IWMPLibrarySharingServices*, Int16*, Win32cr::Foundation::HRESULT),
    isLibrarySharingEnabled : Proc(IWMPLibrarySharingServices*, Int16*, Win32cr::Foundation::HRESULT),
    showLibrarySharing : Proc(IWMPLibrarySharingServices*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("82cba86b-9f04-474b-a365-d6dd1466e541")]
  record IWMPLibrarySharingServices, lpVtbl : IWMPLibrarySharingServicesVtbl* do
    GUID = LibC::GUID.new(0x82cba86b_u32, 0x9f04_u16, 0x474b_u16, StaticArray[0xa3_u8, 0x65_u8, 0xd6_u8, 0xdd_u8, 0x14_u8, 0x66_u8, 0xe5_u8, 0x41_u8])
    def query_interface(this : IWMPLibrarySharingServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPLibrarySharingServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPLibrarySharingServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def isLibraryShared(this : IWMPLibrarySharingServices*, pvbShared : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isLibraryShared.call(this, pvbShared)
    end
    def isLibrarySharingEnabled(this : IWMPLibrarySharingServices*, pvbEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isLibrarySharingEnabled.call(this, pvbEnabled)
    end
    def showLibrarySharing(this : IWMPLibrarySharingServices*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.showLibrarySharing.call(this)
    end

  end

  @[Extern]
  record IWMPFolderMonitorServicesVtbl,
    query_interface : Proc(IWMPFolderMonitorServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPFolderMonitorServices*, UInt32),
    release : Proc(IWMPFolderMonitorServices*, UInt32),
    get_count : Proc(IWMPFolderMonitorServices*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IWMPFolderMonitorServices*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    add : Proc(IWMPFolderMonitorServices*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove : Proc(IWMPFolderMonitorServices*, Int32, Win32cr::Foundation::HRESULT),
    get_scanState : Proc(IWMPFolderMonitorServices*, Win32cr::Media::MediaPlayer::WMPFolderScanState*, Win32cr::Foundation::HRESULT),
    get_currentFolder : Proc(IWMPFolderMonitorServices*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_scannedFilesCount : Proc(IWMPFolderMonitorServices*, Int32*, Win32cr::Foundation::HRESULT),
    get_addedFilesCount : Proc(IWMPFolderMonitorServices*, Int32*, Win32cr::Foundation::HRESULT),
    get_updateProgress : Proc(IWMPFolderMonitorServices*, Int32*, Win32cr::Foundation::HRESULT),
    startScan : Proc(IWMPFolderMonitorServices*, Win32cr::Foundation::HRESULT),
    stopScan : Proc(IWMPFolderMonitorServices*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("788c8743-e57f-439d-a468-5bc77f2e59c6")]
  record IWMPFolderMonitorServices, lpVtbl : IWMPFolderMonitorServicesVtbl* do
    GUID = LibC::GUID.new(0x788c8743_u32, 0xe57f_u16, 0x439d_u16, StaticArray[0xa4_u8, 0x68_u8, 0x5b_u8, 0xc7_u8, 0x7f_u8, 0x2e_u8, 0x59_u8, 0xc6_u8])
    def query_interface(this : IWMPFolderMonitorServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPFolderMonitorServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPFolderMonitorServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_count(this : IWMPFolderMonitorServices*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def item(this : IWMPFolderMonitorServices*, lIndex : Int32, pbstrFolder : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, lIndex, pbstrFolder)
    end
    def add(this : IWMPFolderMonitorServices*, bstrFolder : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, bstrFolder)
    end
    def remove(this : IWMPFolderMonitorServices*, lIndex : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, lIndex)
    end
    def get_scanState(this : IWMPFolderMonitorServices*, pwmpfss : Win32cr::Media::MediaPlayer::WMPFolderScanState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scanState.call(this, pwmpfss)
    end
    def get_currentFolder(this : IWMPFolderMonitorServices*, pbstrFolder : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_currentFolder.call(this, pbstrFolder)
    end
    def get_scannedFilesCount(this : IWMPFolderMonitorServices*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scannedFilesCount.call(this, plCount)
    end
    def get_addedFilesCount(this : IWMPFolderMonitorServices*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_addedFilesCount.call(this, plCount)
    end
    def get_updateProgress(this : IWMPFolderMonitorServices*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_updateProgress.call(this, plProgress)
    end
    def startScan(this : IWMPFolderMonitorServices*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startScan.call(this)
    end
    def stopScan(this : IWMPFolderMonitorServices*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stopScan.call(this)
    end

  end

  @[Extern]
  record IWMPSyncDevice2Vtbl,
    query_interface : Proc(IWMPSyncDevice2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSyncDevice2*, UInt32),
    release : Proc(IWMPSyncDevice2*, UInt32),
    get_friendlyName : Proc(IWMPSyncDevice2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_friendlyName : Proc(IWMPSyncDevice2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_deviceName : Proc(IWMPSyncDevice2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_deviceId : Proc(IWMPSyncDevice2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_partnershipIndex : Proc(IWMPSyncDevice2*, Int32*, Win32cr::Foundation::HRESULT),
    get_connected : Proc(IWMPSyncDevice2*, Int16*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPSyncDevice2*, Win32cr::Media::MediaPlayer::WMPDeviceStatus*, Win32cr::Foundation::HRESULT),
    get_syncState : Proc(IWMPSyncDevice2*, Win32cr::Media::MediaPlayer::WMPSyncState*, Win32cr::Foundation::HRESULT),
    get_progress : Proc(IWMPSyncDevice2*, Int32*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPSyncDevice2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createPartnership : Proc(IWMPSyncDevice2*, Int16, Win32cr::Foundation::HRESULT),
    deletePartnership : Proc(IWMPSyncDevice2*, Win32cr::Foundation::HRESULT),
    start : Proc(IWMPSyncDevice2*, Win32cr::Foundation::HRESULT),
    stop : Proc(IWMPSyncDevice2*, Win32cr::Foundation::HRESULT),
    showSettings : Proc(IWMPSyncDevice2*, Win32cr::Foundation::HRESULT),
    isIdentical : Proc(IWMPSyncDevice2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    setItemInfo : Proc(IWMPSyncDevice2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("88afb4b2-140a-44d2-91e6-4543da467cd1")]
  record IWMPSyncDevice2, lpVtbl : IWMPSyncDevice2Vtbl* do
    GUID = LibC::GUID.new(0x88afb4b2_u32, 0x140a_u16, 0x44d2_u16, StaticArray[0x91_u8, 0xe6_u8, 0x45_u8, 0x43_u8, 0xda_u8, 0x46_u8, 0x7c_u8, 0xd1_u8])
    def query_interface(this : IWMPSyncDevice2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSyncDevice2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSyncDevice2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_friendlyName(this : IWMPSyncDevice2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_friendlyName.call(this, pbstrName)
    end
    def put_friendlyName(this : IWMPSyncDevice2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_friendlyName.call(this, bstrName)
    end
    def get_deviceName(this : IWMPSyncDevice2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deviceName.call(this, pbstrName)
    end
    def get_deviceId(this : IWMPSyncDevice2*, pbstrDeviceId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deviceId.call(this, pbstrDeviceId)
    end
    def get_partnershipIndex(this : IWMPSyncDevice2*, plIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_partnershipIndex.call(this, plIndex)
    end
    def get_connected(this : IWMPSyncDevice2*, pvbConnected : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connected.call(this, pvbConnected)
    end
    def get_status(this : IWMPSyncDevice2*, pwmpds : Win32cr::Media::MediaPlayer::WMPDeviceStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pwmpds)
    end
    def get_syncState(this : IWMPSyncDevice2*, pwmpss : Win32cr::Media::MediaPlayer::WMPSyncState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_syncState.call(this, pwmpss)
    end
    def get_progress(this : IWMPSyncDevice2*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_progress.call(this, plProgress)
    end
    def getItemInfo(this : IWMPSyncDevice2*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end
    def createPartnership(this : IWMPSyncDevice2*, vbShowUI : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPartnership.call(this, vbShowUI)
    end
    def deletePartnership(this : IWMPSyncDevice2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deletePartnership.call(this)
    end
    def start(this : IWMPSyncDevice2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IWMPSyncDevice2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def showSettings(this : IWMPSyncDevice2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.showSettings.call(this)
    end
    def isIdentical(this : IWMPSyncDevice2*, pDevice : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isIdentical.call(this, pDevice, pvbool)
    end
    def setItemInfo(this : IWMPSyncDevice2*, bstrItemName : Win32cr::Foundation::BSTR, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setItemInfo.call(this, bstrItemName, bstrVal)
    end

  end

  @[Extern]
  record IWMPSyncDevice3Vtbl,
    query_interface : Proc(IWMPSyncDevice3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSyncDevice3*, UInt32),
    release : Proc(IWMPSyncDevice3*, UInt32),
    get_friendlyName : Proc(IWMPSyncDevice3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_friendlyName : Proc(IWMPSyncDevice3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_deviceName : Proc(IWMPSyncDevice3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_deviceId : Proc(IWMPSyncDevice3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_partnershipIndex : Proc(IWMPSyncDevice3*, Int32*, Win32cr::Foundation::HRESULT),
    get_connected : Proc(IWMPSyncDevice3*, Int16*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IWMPSyncDevice3*, Win32cr::Media::MediaPlayer::WMPDeviceStatus*, Win32cr::Foundation::HRESULT),
    get_syncState : Proc(IWMPSyncDevice3*, Win32cr::Media::MediaPlayer::WMPSyncState*, Win32cr::Foundation::HRESULT),
    get_progress : Proc(IWMPSyncDevice3*, Int32*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPSyncDevice3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    createPartnership : Proc(IWMPSyncDevice3*, Int16, Win32cr::Foundation::HRESULT),
    deletePartnership : Proc(IWMPSyncDevice3*, Win32cr::Foundation::HRESULT),
    start : Proc(IWMPSyncDevice3*, Win32cr::Foundation::HRESULT),
    stop : Proc(IWMPSyncDevice3*, Win32cr::Foundation::HRESULT),
    showSettings : Proc(IWMPSyncDevice3*, Win32cr::Foundation::HRESULT),
    isIdentical : Proc(IWMPSyncDevice3*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    setItemInfo : Proc(IWMPSyncDevice3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    estimateSyncSize : Proc(IWMPSyncDevice3*, Void*, Void*, Win32cr::Foundation::HRESULT),
    cancelEstimation : Proc(IWMPSyncDevice3*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b22c85f9-263c-4372-a0da-b518db9b4098")]
  record IWMPSyncDevice3, lpVtbl : IWMPSyncDevice3Vtbl* do
    GUID = LibC::GUID.new(0xb22c85f9_u32, 0x263c_u16, 0x4372_u16, StaticArray[0xa0_u8, 0xda_u8, 0xb5_u8, 0x18_u8, 0xdb_u8, 0x9b_u8, 0x40_u8, 0x98_u8])
    def query_interface(this : IWMPSyncDevice3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSyncDevice3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSyncDevice3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_friendlyName(this : IWMPSyncDevice3*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_friendlyName.call(this, pbstrName)
    end
    def put_friendlyName(this : IWMPSyncDevice3*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_friendlyName.call(this, bstrName)
    end
    def get_deviceName(this : IWMPSyncDevice3*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deviceName.call(this, pbstrName)
    end
    def get_deviceId(this : IWMPSyncDevice3*, pbstrDeviceId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deviceId.call(this, pbstrDeviceId)
    end
    def get_partnershipIndex(this : IWMPSyncDevice3*, plIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_partnershipIndex.call(this, plIndex)
    end
    def get_connected(this : IWMPSyncDevice3*, pvbConnected : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connected.call(this, pvbConnected)
    end
    def get_status(this : IWMPSyncDevice3*, pwmpds : Win32cr::Media::MediaPlayer::WMPDeviceStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pwmpds)
    end
    def get_syncState(this : IWMPSyncDevice3*, pwmpss : Win32cr::Media::MediaPlayer::WMPSyncState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_syncState.call(this, pwmpss)
    end
    def get_progress(this : IWMPSyncDevice3*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_progress.call(this, plProgress)
    end
    def getItemInfo(this : IWMPSyncDevice3*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end
    def createPartnership(this : IWMPSyncDevice3*, vbShowUI : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createPartnership.call(this, vbShowUI)
    end
    def deletePartnership(this : IWMPSyncDevice3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deletePartnership.call(this)
    end
    def start(this : IWMPSyncDevice3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IWMPSyncDevice3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def showSettings(this : IWMPSyncDevice3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.showSettings.call(this)
    end
    def isIdentical(this : IWMPSyncDevice3*, pDevice : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isIdentical.call(this, pDevice, pvbool)
    end
    def setItemInfo(this : IWMPSyncDevice3*, bstrItemName : Win32cr::Foundation::BSTR, bstrVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setItemInfo.call(this, bstrItemName, bstrVal)
    end
    def estimateSyncSize(this : IWMPSyncDevice3*, pNonRulePlaylist : Void*, pRulesPlaylist : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.estimateSyncSize.call(this, pNonRulePlaylist, pRulesPlaylist)
    end
    def cancelEstimation(this : IWMPSyncDevice3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancelEstimation.call(this)
    end

  end

  @[Extern]
  record IWMPLibrary2Vtbl,
    query_interface : Proc(IWMPLibrary2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPLibrary2*, UInt32),
    release : Proc(IWMPLibrary2*, UInt32),
    get_name : Proc(IWMPLibrary2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IWMPLibrary2*, Win32cr::Media::MediaPlayer::WMPLibraryType*, Win32cr::Foundation::HRESULT),
    get_mediaCollection : Proc(IWMPLibrary2*, Void**, Win32cr::Foundation::HRESULT),
    isIdentical : Proc(IWMPLibrary2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPLibrary2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dd578a4e-79b1-426c-bf8f-3add9072500b")]
  record IWMPLibrary2, lpVtbl : IWMPLibrary2Vtbl* do
    GUID = LibC::GUID.new(0xdd578a4e_u32, 0x79b1_u16, 0x426c_u16, StaticArray[0xbf_u8, 0x8f_u8, 0x3a_u8, 0xdd_u8, 0x90_u8, 0x72_u8, 0x50_u8, 0xb_u8])
    def query_interface(this : IWMPLibrary2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPLibrary2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPLibrary2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IWMPLibrary2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pbstrName)
    end
    def get_type(this : IWMPLibrary2*, pwmplt : Win32cr::Media::MediaPlayer::WMPLibraryType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pwmplt)
    end
    def get_mediaCollection(this : IWMPLibrary2*, ppIWMPMediaCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mediaCollection.call(this, ppIWMPMediaCollection)
    end
    def isIdentical(this : IWMPLibrary2*, pIWMPLibrary : Void*, pvbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.isIdentical.call(this, pIWMPLibrary, pvbool)
    end
    def getItemInfo(this : IWMPLibrary2*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end

  end

  @[Extern]
  record IWMPEventsVtbl,
    query_interface : Proc(IWMPEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPEvents*, UInt32),
    release : Proc(IWMPEvents*, UInt32),
    open_state_change : Proc(IWMPEvents*, Int32, Void),
    play_state_change : Proc(IWMPEvents*, Int32, Void),
    audio_language_change : Proc(IWMPEvents*, Int32, Void),
    status_change : Proc(IWMPEvents*, Void),
    script_command : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    new_stream : Proc(IWMPEvents*, Void),
    disconnect : Proc(IWMPEvents*, Int32, Void),
    buffering : Proc(IWMPEvents*, Int16, Void),
    error : Proc(IWMPEvents*, Void),
    warning : Proc(IWMPEvents*, Int32, Int32, Win32cr::Foundation::BSTR, Void),
    end_of_stream : Proc(IWMPEvents*, Int32, Void),
    position_change : Proc(IWMPEvents*, Float64, Float64, Void),
    marker_hit : Proc(IWMPEvents*, Int32, Void),
    duration_unit_change : Proc(IWMPEvents*, Int32, Void),
    cdrom_media_change : Proc(IWMPEvents*, Int32, Void),
    playlist_change : Proc(IWMPEvents*, Void*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_change : Proc(IWMPEvents*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_item_available : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Void),
    media_change : Proc(IWMPEvents*, Void*, Void),
    current_media_item_available : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Void),
    current_item_change : Proc(IWMPEvents*, Void*, Void),
    media_collection_change : Proc(IWMPEvents*, Void),
    media_collection_attribute_string_added : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_removed : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_changed : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    playlist_collection_change : Proc(IWMPEvents*, Void),
    playlist_collection_playlist_added : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_removed : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Int16, Void),
    mode_change : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Int16, Void),
    media_error : Proc(IWMPEvents*, Void*, Void),
    open_playlist_switch : Proc(IWMPEvents*, Void*, Void),
    domain_change : Proc(IWMPEvents*, Win32cr::Foundation::BSTR, Void),
    switched_to_player_application : Proc(IWMPEvents*, Void),
    switched_to_control : Proc(IWMPEvents*, Void),
    player_docked_state_change : Proc(IWMPEvents*, Void),
    player_reconnect : Proc(IWMPEvents*, Void),
    click : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void),
    double_click : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void),
    key_down : Proc(IWMPEvents*, Int16, Int16, Void),
    key_press : Proc(IWMPEvents*, Int16, Void),
    key_up : Proc(IWMPEvents*, Int16, Int16, Void),
    mouse_down : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void),
    mouse_move : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void),
    mouse_up : Proc(IWMPEvents*, Int16, Int16, Int32, Int32, Void)


  @[Extern]
  #@[Com("19a6627b-da9e-47c1-bb23-00b5e668236a")]
  record IWMPEvents, lpVtbl : IWMPEventsVtbl* do
    GUID = LibC::GUID.new(0x19a6627b_u32, 0xda9e_u16, 0x47c1_u16, StaticArray[0xbb_u8, 0x23_u8, 0x0_u8, 0xb5_u8, 0xe6_u8, 0x68_u8, 0x23_u8, 0x6a_u8])
    def query_interface(this : IWMPEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_state_change(this : IWMPEvents*, new_state : Int32) : Void
      @lpVtbl.try &.value.open_state_change.call(this, new_state)
    end
    def play_state_change(this : IWMPEvents*, new_state : Int32) : Void
      @lpVtbl.try &.value.play_state_change.call(this, new_state)
    end
    def audio_language_change(this : IWMPEvents*, lang_id : Int32) : Void
      @lpVtbl.try &.value.audio_language_change.call(this, lang_id)
    end
    def status_change(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.status_change.call(this)
    end
    def script_command(this : IWMPEvents*, scType : Win32cr::Foundation::BSTR, param : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.script_command.call(this, scType, param)
    end
    def new_stream(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.new_stream.call(this)
    end
    def disconnect(this : IWMPEvents*, result : Int32) : Void
      @lpVtbl.try &.value.disconnect.call(this, result)
    end
    def buffering(this : IWMPEvents*, start : Int16) : Void
      @lpVtbl.try &.value.buffering.call(this, start)
    end
    def error(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.error.call(this)
    end
    def warning(this : IWMPEvents*, warning_type : Int32, param : Int32, description : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.warning.call(this, warning_type, param, description)
    end
    def end_of_stream(this : IWMPEvents*, result : Int32) : Void
      @lpVtbl.try &.value.end_of_stream.call(this, result)
    end
    def position_change(this : IWMPEvents*, oldPosition : Float64, newPosition : Float64) : Void
      @lpVtbl.try &.value.position_change.call(this, oldPosition, newPosition)
    end
    def marker_hit(this : IWMPEvents*, marker_num : Int32) : Void
      @lpVtbl.try &.value.marker_hit.call(this, marker_num)
    end
    def duration_unit_change(this : IWMPEvents*, new_duration_unit : Int32) : Void
      @lpVtbl.try &.value.duration_unit_change.call(this, new_duration_unit)
    end
    def cdrom_media_change(this : IWMPEvents*, cdrom_num : Int32) : Void
      @lpVtbl.try &.value.cdrom_media_change.call(this, cdrom_num)
    end
    def playlist_change(this : IWMPEvents*, playlist : Void*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.playlist_change.call(this, playlist, change)
    end
    def current_playlist_change(this : IWMPEvents*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.current_playlist_change.call(this, change)
    end
    def current_playlist_item_available(this : IWMPEvents*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_playlist_item_available.call(this, bstrItemName)
    end
    def media_change(this : IWMPEvents*, item : Void*) : Void
      @lpVtbl.try &.value.media_change.call(this, item)
    end
    def current_media_item_available(this : IWMPEvents*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_media_item_available.call(this, bstrItemName)
    end
    def current_item_change(this : IWMPEvents*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.current_item_change.call(this, pdispMedia)
    end
    def media_collection_change(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.media_collection_change.call(this)
    end
    def media_collection_attribute_string_added(this : IWMPEvents*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_added.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_removed(this : IWMPEvents*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_removed.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_changed(this : IWMPEvents*, bstrAttribName : Win32cr::Foundation::BSTR, bstrOldAttribVal : Win32cr::Foundation::BSTR, bstrNewAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_changed.call(this, bstrAttribName, bstrOldAttribVal, bstrNewAttribVal)
    end
    def playlist_collection_change(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.playlist_collection_change.call(this)
    end
    def playlist_collection_playlist_added(this : IWMPEvents*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_added.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_removed(this : IWMPEvents*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_removed.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_set_as_deleted(this : IWMPEvents*, bstrPlaylistName : Win32cr::Foundation::BSTR, varfIsDeleted : Int16) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_set_as_deleted.call(this, bstrPlaylistName, varfIsDeleted)
    end
    def mode_change(this : IWMPEvents*, mode_name : Win32cr::Foundation::BSTR, new_value : Int16) : Void
      @lpVtbl.try &.value.mode_change.call(this, mode_name, new_value)
    end
    def media_error(this : IWMPEvents*, pMediaObject : Void*) : Void
      @lpVtbl.try &.value.media_error.call(this, pMediaObject)
    end
    def open_playlist_switch(this : IWMPEvents*, pItem : Void*) : Void
      @lpVtbl.try &.value.open_playlist_switch.call(this, pItem)
    end
    def domain_change(this : IWMPEvents*, strDomain : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.domain_change.call(this, strDomain)
    end
    def switched_to_player_application(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.switched_to_player_application.call(this)
    end
    def switched_to_control(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.switched_to_control.call(this)
    end
    def player_docked_state_change(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.player_docked_state_change.call(this)
    end
    def player_reconnect(this : IWMPEvents*) : Void
      @lpVtbl.try &.value.player_reconnect.call(this)
    end
    def click(this : IWMPEvents*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.click.call(this, nButton, nShiftState, fX, fY)
    end
    def double_click(this : IWMPEvents*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.double_click.call(this, nButton, nShiftState, fX, fY)
    end
    def key_down(this : IWMPEvents*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_down.call(this, nKeyCode, nShiftState)
    end
    def key_press(this : IWMPEvents*, nKeyAscii : Int16) : Void
      @lpVtbl.try &.value.key_press.call(this, nKeyAscii)
    end
    def key_up(this : IWMPEvents*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_up.call(this, nKeyCode, nShiftState)
    end
    def mouse_down(this : IWMPEvents*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_down.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_move(this : IWMPEvents*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_move.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_up(this : IWMPEvents*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_up.call(this, nButton, nShiftState, fX, fY)
    end

  end

  @[Extern]
  record IWMPEvents2Vtbl,
    query_interface : Proc(IWMPEvents2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPEvents2*, UInt32),
    release : Proc(IWMPEvents2*, UInt32),
    open_state_change : Proc(IWMPEvents2*, Int32, Void),
    play_state_change : Proc(IWMPEvents2*, Int32, Void),
    audio_language_change : Proc(IWMPEvents2*, Int32, Void),
    status_change : Proc(IWMPEvents2*, Void),
    script_command : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    new_stream : Proc(IWMPEvents2*, Void),
    disconnect : Proc(IWMPEvents2*, Int32, Void),
    buffering : Proc(IWMPEvents2*, Int16, Void),
    error : Proc(IWMPEvents2*, Void),
    warning : Proc(IWMPEvents2*, Int32, Int32, Win32cr::Foundation::BSTR, Void),
    end_of_stream : Proc(IWMPEvents2*, Int32, Void),
    position_change : Proc(IWMPEvents2*, Float64, Float64, Void),
    marker_hit : Proc(IWMPEvents2*, Int32, Void),
    duration_unit_change : Proc(IWMPEvents2*, Int32, Void),
    cdrom_media_change : Proc(IWMPEvents2*, Int32, Void),
    playlist_change : Proc(IWMPEvents2*, Void*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_change : Proc(IWMPEvents2*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_item_available : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Void),
    media_change : Proc(IWMPEvents2*, Void*, Void),
    current_media_item_available : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Void),
    current_item_change : Proc(IWMPEvents2*, Void*, Void),
    media_collection_change : Proc(IWMPEvents2*, Void),
    media_collection_attribute_string_added : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_removed : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_changed : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    playlist_collection_change : Proc(IWMPEvents2*, Void),
    playlist_collection_playlist_added : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_removed : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Int16, Void),
    mode_change : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Int16, Void),
    media_error : Proc(IWMPEvents2*, Void*, Void),
    open_playlist_switch : Proc(IWMPEvents2*, Void*, Void),
    domain_change : Proc(IWMPEvents2*, Win32cr::Foundation::BSTR, Void),
    switched_to_player_application : Proc(IWMPEvents2*, Void),
    switched_to_control : Proc(IWMPEvents2*, Void),
    player_docked_state_change : Proc(IWMPEvents2*, Void),
    player_reconnect : Proc(IWMPEvents2*, Void),
    click : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void),
    double_click : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void),
    key_down : Proc(IWMPEvents2*, Int16, Int16, Void),
    key_press : Proc(IWMPEvents2*, Int16, Void),
    key_up : Proc(IWMPEvents2*, Int16, Int16, Void),
    mouse_down : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void),
    mouse_move : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void),
    mouse_up : Proc(IWMPEvents2*, Int16, Int16, Int32, Int32, Void),
    device_connect : Proc(IWMPEvents2*, Void*, Void),
    device_disconnect : Proc(IWMPEvents2*, Void*, Void),
    device_status_change : Proc(IWMPEvents2*, Void*, Win32cr::Media::MediaPlayer::WMPDeviceStatus, Void),
    device_sync_state_change : Proc(IWMPEvents2*, Void*, Win32cr::Media::MediaPlayer::WMPSyncState, Void),
    device_sync_error : Proc(IWMPEvents2*, Void*, Void*, Void),
    create_partnership_complete : Proc(IWMPEvents2*, Void*, Win32cr::Foundation::HRESULT, Void)


  @[Extern]
  #@[Com("1e7601fa-47ea-4107-9ea9-9004ed9684ff")]
  record IWMPEvents2, lpVtbl : IWMPEvents2Vtbl* do
    GUID = LibC::GUID.new(0x1e7601fa_u32, 0x47ea_u16, 0x4107_u16, StaticArray[0x9e_u8, 0xa9_u8, 0x90_u8, 0x4_u8, 0xed_u8, 0x96_u8, 0x84_u8, 0xff_u8])
    def query_interface(this : IWMPEvents2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPEvents2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPEvents2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_state_change(this : IWMPEvents2*, new_state : Int32) : Void
      @lpVtbl.try &.value.open_state_change.call(this, new_state)
    end
    def play_state_change(this : IWMPEvents2*, new_state : Int32) : Void
      @lpVtbl.try &.value.play_state_change.call(this, new_state)
    end
    def audio_language_change(this : IWMPEvents2*, lang_id : Int32) : Void
      @lpVtbl.try &.value.audio_language_change.call(this, lang_id)
    end
    def status_change(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.status_change.call(this)
    end
    def script_command(this : IWMPEvents2*, scType : Win32cr::Foundation::BSTR, param : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.script_command.call(this, scType, param)
    end
    def new_stream(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.new_stream.call(this)
    end
    def disconnect(this : IWMPEvents2*, result : Int32) : Void
      @lpVtbl.try &.value.disconnect.call(this, result)
    end
    def buffering(this : IWMPEvents2*, start : Int16) : Void
      @lpVtbl.try &.value.buffering.call(this, start)
    end
    def error(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.error.call(this)
    end
    def warning(this : IWMPEvents2*, warning_type : Int32, param : Int32, description : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.warning.call(this, warning_type, param, description)
    end
    def end_of_stream(this : IWMPEvents2*, result : Int32) : Void
      @lpVtbl.try &.value.end_of_stream.call(this, result)
    end
    def position_change(this : IWMPEvents2*, oldPosition : Float64, newPosition : Float64) : Void
      @lpVtbl.try &.value.position_change.call(this, oldPosition, newPosition)
    end
    def marker_hit(this : IWMPEvents2*, marker_num : Int32) : Void
      @lpVtbl.try &.value.marker_hit.call(this, marker_num)
    end
    def duration_unit_change(this : IWMPEvents2*, new_duration_unit : Int32) : Void
      @lpVtbl.try &.value.duration_unit_change.call(this, new_duration_unit)
    end
    def cdrom_media_change(this : IWMPEvents2*, cdrom_num : Int32) : Void
      @lpVtbl.try &.value.cdrom_media_change.call(this, cdrom_num)
    end
    def playlist_change(this : IWMPEvents2*, playlist : Void*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.playlist_change.call(this, playlist, change)
    end
    def current_playlist_change(this : IWMPEvents2*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.current_playlist_change.call(this, change)
    end
    def current_playlist_item_available(this : IWMPEvents2*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_playlist_item_available.call(this, bstrItemName)
    end
    def media_change(this : IWMPEvents2*, item : Void*) : Void
      @lpVtbl.try &.value.media_change.call(this, item)
    end
    def current_media_item_available(this : IWMPEvents2*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_media_item_available.call(this, bstrItemName)
    end
    def current_item_change(this : IWMPEvents2*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.current_item_change.call(this, pdispMedia)
    end
    def media_collection_change(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.media_collection_change.call(this)
    end
    def media_collection_attribute_string_added(this : IWMPEvents2*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_added.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_removed(this : IWMPEvents2*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_removed.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_changed(this : IWMPEvents2*, bstrAttribName : Win32cr::Foundation::BSTR, bstrOldAttribVal : Win32cr::Foundation::BSTR, bstrNewAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_changed.call(this, bstrAttribName, bstrOldAttribVal, bstrNewAttribVal)
    end
    def playlist_collection_change(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.playlist_collection_change.call(this)
    end
    def playlist_collection_playlist_added(this : IWMPEvents2*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_added.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_removed(this : IWMPEvents2*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_removed.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_set_as_deleted(this : IWMPEvents2*, bstrPlaylistName : Win32cr::Foundation::BSTR, varfIsDeleted : Int16) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_set_as_deleted.call(this, bstrPlaylistName, varfIsDeleted)
    end
    def mode_change(this : IWMPEvents2*, mode_name : Win32cr::Foundation::BSTR, new_value : Int16) : Void
      @lpVtbl.try &.value.mode_change.call(this, mode_name, new_value)
    end
    def media_error(this : IWMPEvents2*, pMediaObject : Void*) : Void
      @lpVtbl.try &.value.media_error.call(this, pMediaObject)
    end
    def open_playlist_switch(this : IWMPEvents2*, pItem : Void*) : Void
      @lpVtbl.try &.value.open_playlist_switch.call(this, pItem)
    end
    def domain_change(this : IWMPEvents2*, strDomain : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.domain_change.call(this, strDomain)
    end
    def switched_to_player_application(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.switched_to_player_application.call(this)
    end
    def switched_to_control(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.switched_to_control.call(this)
    end
    def player_docked_state_change(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.player_docked_state_change.call(this)
    end
    def player_reconnect(this : IWMPEvents2*) : Void
      @lpVtbl.try &.value.player_reconnect.call(this)
    end
    def click(this : IWMPEvents2*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.click.call(this, nButton, nShiftState, fX, fY)
    end
    def double_click(this : IWMPEvents2*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.double_click.call(this, nButton, nShiftState, fX, fY)
    end
    def key_down(this : IWMPEvents2*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_down.call(this, nKeyCode, nShiftState)
    end
    def key_press(this : IWMPEvents2*, nKeyAscii : Int16) : Void
      @lpVtbl.try &.value.key_press.call(this, nKeyAscii)
    end
    def key_up(this : IWMPEvents2*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_up.call(this, nKeyCode, nShiftState)
    end
    def mouse_down(this : IWMPEvents2*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_down.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_move(this : IWMPEvents2*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_move.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_up(this : IWMPEvents2*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_up.call(this, nButton, nShiftState, fX, fY)
    end
    def device_connect(this : IWMPEvents2*, pDevice : Void*) : Void
      @lpVtbl.try &.value.device_connect.call(this, pDevice)
    end
    def device_disconnect(this : IWMPEvents2*, pDevice : Void*) : Void
      @lpVtbl.try &.value.device_disconnect.call(this, pDevice)
    end
    def device_status_change(this : IWMPEvents2*, pDevice : Void*, new_status : Win32cr::Media::MediaPlayer::WMPDeviceStatus) : Void
      @lpVtbl.try &.value.device_status_change.call(this, pDevice, new_status)
    end
    def device_sync_state_change(this : IWMPEvents2*, pDevice : Void*, new_state : Win32cr::Media::MediaPlayer::WMPSyncState) : Void
      @lpVtbl.try &.value.device_sync_state_change.call(this, pDevice, new_state)
    end
    def device_sync_error(this : IWMPEvents2*, pDevice : Void*, pMedia : Void*) : Void
      @lpVtbl.try &.value.device_sync_error.call(this, pDevice, pMedia)
    end
    def create_partnership_complete(this : IWMPEvents2*, pDevice : Void*, hrResult : Win32cr::Foundation::HRESULT) : Void
      @lpVtbl.try &.value.create_partnership_complete.call(this, pDevice, hrResult)
    end

  end

  @[Extern]
  record IWMPEvents3Vtbl,
    query_interface : Proc(IWMPEvents3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPEvents3*, UInt32),
    release : Proc(IWMPEvents3*, UInt32),
    open_state_change : Proc(IWMPEvents3*, Int32, Void),
    play_state_change : Proc(IWMPEvents3*, Int32, Void),
    audio_language_change : Proc(IWMPEvents3*, Int32, Void),
    status_change : Proc(IWMPEvents3*, Void),
    script_command : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    new_stream : Proc(IWMPEvents3*, Void),
    disconnect : Proc(IWMPEvents3*, Int32, Void),
    buffering : Proc(IWMPEvents3*, Int16, Void),
    error : Proc(IWMPEvents3*, Void),
    warning : Proc(IWMPEvents3*, Int32, Int32, Win32cr::Foundation::BSTR, Void),
    end_of_stream : Proc(IWMPEvents3*, Int32, Void),
    position_change : Proc(IWMPEvents3*, Float64, Float64, Void),
    marker_hit : Proc(IWMPEvents3*, Int32, Void),
    duration_unit_change : Proc(IWMPEvents3*, Int32, Void),
    cdrom_media_change : Proc(IWMPEvents3*, Int32, Void),
    playlist_change : Proc(IWMPEvents3*, Void*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_change : Proc(IWMPEvents3*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_item_available : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Void),
    media_change : Proc(IWMPEvents3*, Void*, Void),
    current_media_item_available : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Void),
    current_item_change : Proc(IWMPEvents3*, Void*, Void),
    media_collection_change : Proc(IWMPEvents3*, Void),
    media_collection_attribute_string_added : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_removed : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_changed : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    playlist_collection_change : Proc(IWMPEvents3*, Void),
    playlist_collection_playlist_added : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_removed : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Int16, Void),
    mode_change : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Int16, Void),
    media_error : Proc(IWMPEvents3*, Void*, Void),
    open_playlist_switch : Proc(IWMPEvents3*, Void*, Void),
    domain_change : Proc(IWMPEvents3*, Win32cr::Foundation::BSTR, Void),
    switched_to_player_application : Proc(IWMPEvents3*, Void),
    switched_to_control : Proc(IWMPEvents3*, Void),
    player_docked_state_change : Proc(IWMPEvents3*, Void),
    player_reconnect : Proc(IWMPEvents3*, Void),
    click : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void),
    double_click : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void),
    key_down : Proc(IWMPEvents3*, Int16, Int16, Void),
    key_press : Proc(IWMPEvents3*, Int16, Void),
    key_up : Proc(IWMPEvents3*, Int16, Int16, Void),
    mouse_down : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void),
    mouse_move : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void),
    mouse_up : Proc(IWMPEvents3*, Int16, Int16, Int32, Int32, Void),
    device_connect : Proc(IWMPEvents3*, Void*, Void),
    device_disconnect : Proc(IWMPEvents3*, Void*, Void),
    device_status_change : Proc(IWMPEvents3*, Void*, Win32cr::Media::MediaPlayer::WMPDeviceStatus, Void),
    device_sync_state_change : Proc(IWMPEvents3*, Void*, Win32cr::Media::MediaPlayer::WMPSyncState, Void),
    device_sync_error : Proc(IWMPEvents3*, Void*, Void*, Void),
    create_partnership_complete : Proc(IWMPEvents3*, Void*, Win32cr::Foundation::HRESULT, Void),
    cdrom_rip_state_change : Proc(IWMPEvents3*, Void*, Win32cr::Media::MediaPlayer::WMPRipState, Void),
    cdrom_rip_media_error : Proc(IWMPEvents3*, Void*, Void*, Void),
    cdrom_burn_state_change : Proc(IWMPEvents3*, Void*, Win32cr::Media::MediaPlayer::WMPBurnState, Void),
    cdrom_burn_media_error : Proc(IWMPEvents3*, Void*, Void*, Void),
    cdrom_burn_error : Proc(IWMPEvents3*, Void*, Win32cr::Foundation::HRESULT, Void),
    library_connect : Proc(IWMPEvents3*, Void*, Void),
    library_disconnect : Proc(IWMPEvents3*, Void*, Void),
    folder_scan_state_change : Proc(IWMPEvents3*, Win32cr::Media::MediaPlayer::WMPFolderScanState, Void),
    string_collection_change : Proc(IWMPEvents3*, Void*, Win32cr::Media::MediaPlayer::WMPStringCollectionChangeEventType, Int32, Void),
    media_collection_media_added : Proc(IWMPEvents3*, Void*, Void),
    media_collection_media_removed : Proc(IWMPEvents3*, Void*, Void)


  @[Extern]
  #@[Com("1f504270-a66b-4223-8e96-26a06c63d69f")]
  record IWMPEvents3, lpVtbl : IWMPEvents3Vtbl* do
    GUID = LibC::GUID.new(0x1f504270_u32, 0xa66b_u16, 0x4223_u16, StaticArray[0x8e_u8, 0x96_u8, 0x26_u8, 0xa0_u8, 0x6c_u8, 0x63_u8, 0xd6_u8, 0x9f_u8])
    def query_interface(this : IWMPEvents3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPEvents3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPEvents3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_state_change(this : IWMPEvents3*, new_state : Int32) : Void
      @lpVtbl.try &.value.open_state_change.call(this, new_state)
    end
    def play_state_change(this : IWMPEvents3*, new_state : Int32) : Void
      @lpVtbl.try &.value.play_state_change.call(this, new_state)
    end
    def audio_language_change(this : IWMPEvents3*, lang_id : Int32) : Void
      @lpVtbl.try &.value.audio_language_change.call(this, lang_id)
    end
    def status_change(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.status_change.call(this)
    end
    def script_command(this : IWMPEvents3*, scType : Win32cr::Foundation::BSTR, param : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.script_command.call(this, scType, param)
    end
    def new_stream(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.new_stream.call(this)
    end
    def disconnect(this : IWMPEvents3*, result : Int32) : Void
      @lpVtbl.try &.value.disconnect.call(this, result)
    end
    def buffering(this : IWMPEvents3*, start : Int16) : Void
      @lpVtbl.try &.value.buffering.call(this, start)
    end
    def error(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.error.call(this)
    end
    def warning(this : IWMPEvents3*, warning_type : Int32, param : Int32, description : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.warning.call(this, warning_type, param, description)
    end
    def end_of_stream(this : IWMPEvents3*, result : Int32) : Void
      @lpVtbl.try &.value.end_of_stream.call(this, result)
    end
    def position_change(this : IWMPEvents3*, oldPosition : Float64, newPosition : Float64) : Void
      @lpVtbl.try &.value.position_change.call(this, oldPosition, newPosition)
    end
    def marker_hit(this : IWMPEvents3*, marker_num : Int32) : Void
      @lpVtbl.try &.value.marker_hit.call(this, marker_num)
    end
    def duration_unit_change(this : IWMPEvents3*, new_duration_unit : Int32) : Void
      @lpVtbl.try &.value.duration_unit_change.call(this, new_duration_unit)
    end
    def cdrom_media_change(this : IWMPEvents3*, cdrom_num : Int32) : Void
      @lpVtbl.try &.value.cdrom_media_change.call(this, cdrom_num)
    end
    def playlist_change(this : IWMPEvents3*, playlist : Void*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.playlist_change.call(this, playlist, change)
    end
    def current_playlist_change(this : IWMPEvents3*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.current_playlist_change.call(this, change)
    end
    def current_playlist_item_available(this : IWMPEvents3*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_playlist_item_available.call(this, bstrItemName)
    end
    def media_change(this : IWMPEvents3*, item : Void*) : Void
      @lpVtbl.try &.value.media_change.call(this, item)
    end
    def current_media_item_available(this : IWMPEvents3*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_media_item_available.call(this, bstrItemName)
    end
    def current_item_change(this : IWMPEvents3*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.current_item_change.call(this, pdispMedia)
    end
    def media_collection_change(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.media_collection_change.call(this)
    end
    def media_collection_attribute_string_added(this : IWMPEvents3*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_added.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_removed(this : IWMPEvents3*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_removed.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_changed(this : IWMPEvents3*, bstrAttribName : Win32cr::Foundation::BSTR, bstrOldAttribVal : Win32cr::Foundation::BSTR, bstrNewAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_changed.call(this, bstrAttribName, bstrOldAttribVal, bstrNewAttribVal)
    end
    def playlist_collection_change(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.playlist_collection_change.call(this)
    end
    def playlist_collection_playlist_added(this : IWMPEvents3*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_added.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_removed(this : IWMPEvents3*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_removed.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_set_as_deleted(this : IWMPEvents3*, bstrPlaylistName : Win32cr::Foundation::BSTR, varfIsDeleted : Int16) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_set_as_deleted.call(this, bstrPlaylistName, varfIsDeleted)
    end
    def mode_change(this : IWMPEvents3*, mode_name : Win32cr::Foundation::BSTR, new_value : Int16) : Void
      @lpVtbl.try &.value.mode_change.call(this, mode_name, new_value)
    end
    def media_error(this : IWMPEvents3*, pMediaObject : Void*) : Void
      @lpVtbl.try &.value.media_error.call(this, pMediaObject)
    end
    def open_playlist_switch(this : IWMPEvents3*, pItem : Void*) : Void
      @lpVtbl.try &.value.open_playlist_switch.call(this, pItem)
    end
    def domain_change(this : IWMPEvents3*, strDomain : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.domain_change.call(this, strDomain)
    end
    def switched_to_player_application(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.switched_to_player_application.call(this)
    end
    def switched_to_control(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.switched_to_control.call(this)
    end
    def player_docked_state_change(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.player_docked_state_change.call(this)
    end
    def player_reconnect(this : IWMPEvents3*) : Void
      @lpVtbl.try &.value.player_reconnect.call(this)
    end
    def click(this : IWMPEvents3*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.click.call(this, nButton, nShiftState, fX, fY)
    end
    def double_click(this : IWMPEvents3*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.double_click.call(this, nButton, nShiftState, fX, fY)
    end
    def key_down(this : IWMPEvents3*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_down.call(this, nKeyCode, nShiftState)
    end
    def key_press(this : IWMPEvents3*, nKeyAscii : Int16) : Void
      @lpVtbl.try &.value.key_press.call(this, nKeyAscii)
    end
    def key_up(this : IWMPEvents3*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_up.call(this, nKeyCode, nShiftState)
    end
    def mouse_down(this : IWMPEvents3*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_down.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_move(this : IWMPEvents3*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_move.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_up(this : IWMPEvents3*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_up.call(this, nButton, nShiftState, fX, fY)
    end
    def device_connect(this : IWMPEvents3*, pDevice : Void*) : Void
      @lpVtbl.try &.value.device_connect.call(this, pDevice)
    end
    def device_disconnect(this : IWMPEvents3*, pDevice : Void*) : Void
      @lpVtbl.try &.value.device_disconnect.call(this, pDevice)
    end
    def device_status_change(this : IWMPEvents3*, pDevice : Void*, new_status : Win32cr::Media::MediaPlayer::WMPDeviceStatus) : Void
      @lpVtbl.try &.value.device_status_change.call(this, pDevice, new_status)
    end
    def device_sync_state_change(this : IWMPEvents3*, pDevice : Void*, new_state : Win32cr::Media::MediaPlayer::WMPSyncState) : Void
      @lpVtbl.try &.value.device_sync_state_change.call(this, pDevice, new_state)
    end
    def device_sync_error(this : IWMPEvents3*, pDevice : Void*, pMedia : Void*) : Void
      @lpVtbl.try &.value.device_sync_error.call(this, pDevice, pMedia)
    end
    def create_partnership_complete(this : IWMPEvents3*, pDevice : Void*, hrResult : Win32cr::Foundation::HRESULT) : Void
      @lpVtbl.try &.value.create_partnership_complete.call(this, pDevice, hrResult)
    end
    def cdrom_rip_state_change(this : IWMPEvents3*, pCdromRip : Void*, wmprs : Win32cr::Media::MediaPlayer::WMPRipState) : Void
      @lpVtbl.try &.value.cdrom_rip_state_change.call(this, pCdromRip, wmprs)
    end
    def cdrom_rip_media_error(this : IWMPEvents3*, pCdromRip : Void*, pMedia : Void*) : Void
      @lpVtbl.try &.value.cdrom_rip_media_error.call(this, pCdromRip, pMedia)
    end
    def cdrom_burn_state_change(this : IWMPEvents3*, pCdromBurn : Void*, wmpbs : Win32cr::Media::MediaPlayer::WMPBurnState) : Void
      @lpVtbl.try &.value.cdrom_burn_state_change.call(this, pCdromBurn, wmpbs)
    end
    def cdrom_burn_media_error(this : IWMPEvents3*, pCdromBurn : Void*, pMedia : Void*) : Void
      @lpVtbl.try &.value.cdrom_burn_media_error.call(this, pCdromBurn, pMedia)
    end
    def cdrom_burn_error(this : IWMPEvents3*, pCdromBurn : Void*, hrError : Win32cr::Foundation::HRESULT) : Void
      @lpVtbl.try &.value.cdrom_burn_error.call(this, pCdromBurn, hrError)
    end
    def library_connect(this : IWMPEvents3*, pLibrary : Void*) : Void
      @lpVtbl.try &.value.library_connect.call(this, pLibrary)
    end
    def library_disconnect(this : IWMPEvents3*, pLibrary : Void*) : Void
      @lpVtbl.try &.value.library_disconnect.call(this, pLibrary)
    end
    def folder_scan_state_change(this : IWMPEvents3*, wmpfss : Win32cr::Media::MediaPlayer::WMPFolderScanState) : Void
      @lpVtbl.try &.value.folder_scan_state_change.call(this, wmpfss)
    end
    def string_collection_change(this : IWMPEvents3*, pdispStringCollection : Void*, change : Win32cr::Media::MediaPlayer::WMPStringCollectionChangeEventType, lCollectionIndex : Int32) : Void
      @lpVtbl.try &.value.string_collection_change.call(this, pdispStringCollection, change, lCollectionIndex)
    end
    def media_collection_media_added(this : IWMPEvents3*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.media_collection_media_added.call(this, pdispMedia)
    end
    def media_collection_media_removed(this : IWMPEvents3*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.media_collection_media_removed.call(this, pdispMedia)
    end

  end

  @[Extern]
  record IWMPEvents4Vtbl,
    query_interface : Proc(IWMPEvents4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPEvents4*, UInt32),
    release : Proc(IWMPEvents4*, UInt32),
    open_state_change : Proc(IWMPEvents4*, Int32, Void),
    play_state_change : Proc(IWMPEvents4*, Int32, Void),
    audio_language_change : Proc(IWMPEvents4*, Int32, Void),
    status_change : Proc(IWMPEvents4*, Void),
    script_command : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    new_stream : Proc(IWMPEvents4*, Void),
    disconnect : Proc(IWMPEvents4*, Int32, Void),
    buffering : Proc(IWMPEvents4*, Int16, Void),
    error : Proc(IWMPEvents4*, Void),
    warning : Proc(IWMPEvents4*, Int32, Int32, Win32cr::Foundation::BSTR, Void),
    end_of_stream : Proc(IWMPEvents4*, Int32, Void),
    position_change : Proc(IWMPEvents4*, Float64, Float64, Void),
    marker_hit : Proc(IWMPEvents4*, Int32, Void),
    duration_unit_change : Proc(IWMPEvents4*, Int32, Void),
    cdrom_media_change : Proc(IWMPEvents4*, Int32, Void),
    playlist_change : Proc(IWMPEvents4*, Void*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_change : Proc(IWMPEvents4*, Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType, Void),
    current_playlist_item_available : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Void),
    media_change : Proc(IWMPEvents4*, Void*, Void),
    current_media_item_available : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Void),
    current_item_change : Proc(IWMPEvents4*, Void*, Void),
    media_collection_change : Proc(IWMPEvents4*, Void),
    media_collection_attribute_string_added : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_removed : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    media_collection_attribute_string_changed : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void),
    playlist_collection_change : Proc(IWMPEvents4*, Void),
    playlist_collection_playlist_added : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_removed : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Void),
    playlist_collection_playlist_set_as_deleted : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Int16, Void),
    mode_change : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Int16, Void),
    media_error : Proc(IWMPEvents4*, Void*, Void),
    open_playlist_switch : Proc(IWMPEvents4*, Void*, Void),
    domain_change : Proc(IWMPEvents4*, Win32cr::Foundation::BSTR, Void),
    switched_to_player_application : Proc(IWMPEvents4*, Void),
    switched_to_control : Proc(IWMPEvents4*, Void),
    player_docked_state_change : Proc(IWMPEvents4*, Void),
    player_reconnect : Proc(IWMPEvents4*, Void),
    click : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void),
    double_click : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void),
    key_down : Proc(IWMPEvents4*, Int16, Int16, Void),
    key_press : Proc(IWMPEvents4*, Int16, Void),
    key_up : Proc(IWMPEvents4*, Int16, Int16, Void),
    mouse_down : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void),
    mouse_move : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void),
    mouse_up : Proc(IWMPEvents4*, Int16, Int16, Int32, Int32, Void),
    device_connect : Proc(IWMPEvents4*, Void*, Void),
    device_disconnect : Proc(IWMPEvents4*, Void*, Void),
    device_status_change : Proc(IWMPEvents4*, Void*, Win32cr::Media::MediaPlayer::WMPDeviceStatus, Void),
    device_sync_state_change : Proc(IWMPEvents4*, Void*, Win32cr::Media::MediaPlayer::WMPSyncState, Void),
    device_sync_error : Proc(IWMPEvents4*, Void*, Void*, Void),
    create_partnership_complete : Proc(IWMPEvents4*, Void*, Win32cr::Foundation::HRESULT, Void),
    cdrom_rip_state_change : Proc(IWMPEvents4*, Void*, Win32cr::Media::MediaPlayer::WMPRipState, Void),
    cdrom_rip_media_error : Proc(IWMPEvents4*, Void*, Void*, Void),
    cdrom_burn_state_change : Proc(IWMPEvents4*, Void*, Win32cr::Media::MediaPlayer::WMPBurnState, Void),
    cdrom_burn_media_error : Proc(IWMPEvents4*, Void*, Void*, Void),
    cdrom_burn_error : Proc(IWMPEvents4*, Void*, Win32cr::Foundation::HRESULT, Void),
    library_connect : Proc(IWMPEvents4*, Void*, Void),
    library_disconnect : Proc(IWMPEvents4*, Void*, Void),
    folder_scan_state_change : Proc(IWMPEvents4*, Win32cr::Media::MediaPlayer::WMPFolderScanState, Void),
    string_collection_change : Proc(IWMPEvents4*, Void*, Win32cr::Media::MediaPlayer::WMPStringCollectionChangeEventType, Int32, Void),
    media_collection_media_added : Proc(IWMPEvents4*, Void*, Void),
    media_collection_media_removed : Proc(IWMPEvents4*, Void*, Void),
    device_estimation : Proc(IWMPEvents4*, Void*, Win32cr::Foundation::HRESULT, Int64, Int64, Void)


  @[Extern]
  #@[Com("26dabcfa-306b-404d-9a6f-630a8405048d")]
  record IWMPEvents4, lpVtbl : IWMPEvents4Vtbl* do
    GUID = LibC::GUID.new(0x26dabcfa_u32, 0x306b_u16, 0x404d_u16, StaticArray[0x9a_u8, 0x6f_u8, 0x63_u8, 0xa_u8, 0x84_u8, 0x5_u8, 0x4_u8, 0x8d_u8])
    def query_interface(this : IWMPEvents4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPEvents4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPEvents4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_state_change(this : IWMPEvents4*, new_state : Int32) : Void
      @lpVtbl.try &.value.open_state_change.call(this, new_state)
    end
    def play_state_change(this : IWMPEvents4*, new_state : Int32) : Void
      @lpVtbl.try &.value.play_state_change.call(this, new_state)
    end
    def audio_language_change(this : IWMPEvents4*, lang_id : Int32) : Void
      @lpVtbl.try &.value.audio_language_change.call(this, lang_id)
    end
    def status_change(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.status_change.call(this)
    end
    def script_command(this : IWMPEvents4*, scType : Win32cr::Foundation::BSTR, param : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.script_command.call(this, scType, param)
    end
    def new_stream(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.new_stream.call(this)
    end
    def disconnect(this : IWMPEvents4*, result : Int32) : Void
      @lpVtbl.try &.value.disconnect.call(this, result)
    end
    def buffering(this : IWMPEvents4*, start : Int16) : Void
      @lpVtbl.try &.value.buffering.call(this, start)
    end
    def error(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.error.call(this)
    end
    def warning(this : IWMPEvents4*, warning_type : Int32, param : Int32, description : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.warning.call(this, warning_type, param, description)
    end
    def end_of_stream(this : IWMPEvents4*, result : Int32) : Void
      @lpVtbl.try &.value.end_of_stream.call(this, result)
    end
    def position_change(this : IWMPEvents4*, oldPosition : Float64, newPosition : Float64) : Void
      @lpVtbl.try &.value.position_change.call(this, oldPosition, newPosition)
    end
    def marker_hit(this : IWMPEvents4*, marker_num : Int32) : Void
      @lpVtbl.try &.value.marker_hit.call(this, marker_num)
    end
    def duration_unit_change(this : IWMPEvents4*, new_duration_unit : Int32) : Void
      @lpVtbl.try &.value.duration_unit_change.call(this, new_duration_unit)
    end
    def cdrom_media_change(this : IWMPEvents4*, cdrom_num : Int32) : Void
      @lpVtbl.try &.value.cdrom_media_change.call(this, cdrom_num)
    end
    def playlist_change(this : IWMPEvents4*, playlist : Void*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.playlist_change.call(this, playlist, change)
    end
    def current_playlist_change(this : IWMPEvents4*, change : Win32cr::Media::MediaPlayer::WMPPlaylistChangeEventType) : Void
      @lpVtbl.try &.value.current_playlist_change.call(this, change)
    end
    def current_playlist_item_available(this : IWMPEvents4*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_playlist_item_available.call(this, bstrItemName)
    end
    def media_change(this : IWMPEvents4*, item : Void*) : Void
      @lpVtbl.try &.value.media_change.call(this, item)
    end
    def current_media_item_available(this : IWMPEvents4*, bstrItemName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.current_media_item_available.call(this, bstrItemName)
    end
    def current_item_change(this : IWMPEvents4*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.current_item_change.call(this, pdispMedia)
    end
    def media_collection_change(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.media_collection_change.call(this)
    end
    def media_collection_attribute_string_added(this : IWMPEvents4*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_added.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_removed(this : IWMPEvents4*, bstrAttribName : Win32cr::Foundation::BSTR, bstrAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_removed.call(this, bstrAttribName, bstrAttribVal)
    end
    def media_collection_attribute_string_changed(this : IWMPEvents4*, bstrAttribName : Win32cr::Foundation::BSTR, bstrOldAttribVal : Win32cr::Foundation::BSTR, bstrNewAttribVal : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.media_collection_attribute_string_changed.call(this, bstrAttribName, bstrOldAttribVal, bstrNewAttribVal)
    end
    def playlist_collection_change(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.playlist_collection_change.call(this)
    end
    def playlist_collection_playlist_added(this : IWMPEvents4*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_added.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_removed(this : IWMPEvents4*, bstrPlaylistName : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_removed.call(this, bstrPlaylistName)
    end
    def playlist_collection_playlist_set_as_deleted(this : IWMPEvents4*, bstrPlaylistName : Win32cr::Foundation::BSTR, varfIsDeleted : Int16) : Void
      @lpVtbl.try &.value.playlist_collection_playlist_set_as_deleted.call(this, bstrPlaylistName, varfIsDeleted)
    end
    def mode_change(this : IWMPEvents4*, mode_name : Win32cr::Foundation::BSTR, new_value : Int16) : Void
      @lpVtbl.try &.value.mode_change.call(this, mode_name, new_value)
    end
    def media_error(this : IWMPEvents4*, pMediaObject : Void*) : Void
      @lpVtbl.try &.value.media_error.call(this, pMediaObject)
    end
    def open_playlist_switch(this : IWMPEvents4*, pItem : Void*) : Void
      @lpVtbl.try &.value.open_playlist_switch.call(this, pItem)
    end
    def domain_change(this : IWMPEvents4*, strDomain : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.domain_change.call(this, strDomain)
    end
    def switched_to_player_application(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.switched_to_player_application.call(this)
    end
    def switched_to_control(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.switched_to_control.call(this)
    end
    def player_docked_state_change(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.player_docked_state_change.call(this)
    end
    def player_reconnect(this : IWMPEvents4*) : Void
      @lpVtbl.try &.value.player_reconnect.call(this)
    end
    def click(this : IWMPEvents4*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.click.call(this, nButton, nShiftState, fX, fY)
    end
    def double_click(this : IWMPEvents4*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.double_click.call(this, nButton, nShiftState, fX, fY)
    end
    def key_down(this : IWMPEvents4*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_down.call(this, nKeyCode, nShiftState)
    end
    def key_press(this : IWMPEvents4*, nKeyAscii : Int16) : Void
      @lpVtbl.try &.value.key_press.call(this, nKeyAscii)
    end
    def key_up(this : IWMPEvents4*, nKeyCode : Int16, nShiftState : Int16) : Void
      @lpVtbl.try &.value.key_up.call(this, nKeyCode, nShiftState)
    end
    def mouse_down(this : IWMPEvents4*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_down.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_move(this : IWMPEvents4*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_move.call(this, nButton, nShiftState, fX, fY)
    end
    def mouse_up(this : IWMPEvents4*, nButton : Int16, nShiftState : Int16, fX : Int32, fY : Int32) : Void
      @lpVtbl.try &.value.mouse_up.call(this, nButton, nShiftState, fX, fY)
    end
    def device_connect(this : IWMPEvents4*, pDevice : Void*) : Void
      @lpVtbl.try &.value.device_connect.call(this, pDevice)
    end
    def device_disconnect(this : IWMPEvents4*, pDevice : Void*) : Void
      @lpVtbl.try &.value.device_disconnect.call(this, pDevice)
    end
    def device_status_change(this : IWMPEvents4*, pDevice : Void*, new_status : Win32cr::Media::MediaPlayer::WMPDeviceStatus) : Void
      @lpVtbl.try &.value.device_status_change.call(this, pDevice, new_status)
    end
    def device_sync_state_change(this : IWMPEvents4*, pDevice : Void*, new_state : Win32cr::Media::MediaPlayer::WMPSyncState) : Void
      @lpVtbl.try &.value.device_sync_state_change.call(this, pDevice, new_state)
    end
    def device_sync_error(this : IWMPEvents4*, pDevice : Void*, pMedia : Void*) : Void
      @lpVtbl.try &.value.device_sync_error.call(this, pDevice, pMedia)
    end
    def create_partnership_complete(this : IWMPEvents4*, pDevice : Void*, hrResult : Win32cr::Foundation::HRESULT) : Void
      @lpVtbl.try &.value.create_partnership_complete.call(this, pDevice, hrResult)
    end
    def cdrom_rip_state_change(this : IWMPEvents4*, pCdromRip : Void*, wmprs : Win32cr::Media::MediaPlayer::WMPRipState) : Void
      @lpVtbl.try &.value.cdrom_rip_state_change.call(this, pCdromRip, wmprs)
    end
    def cdrom_rip_media_error(this : IWMPEvents4*, pCdromRip : Void*, pMedia : Void*) : Void
      @lpVtbl.try &.value.cdrom_rip_media_error.call(this, pCdromRip, pMedia)
    end
    def cdrom_burn_state_change(this : IWMPEvents4*, pCdromBurn : Void*, wmpbs : Win32cr::Media::MediaPlayer::WMPBurnState) : Void
      @lpVtbl.try &.value.cdrom_burn_state_change.call(this, pCdromBurn, wmpbs)
    end
    def cdrom_burn_media_error(this : IWMPEvents4*, pCdromBurn : Void*, pMedia : Void*) : Void
      @lpVtbl.try &.value.cdrom_burn_media_error.call(this, pCdromBurn, pMedia)
    end
    def cdrom_burn_error(this : IWMPEvents4*, pCdromBurn : Void*, hrError : Win32cr::Foundation::HRESULT) : Void
      @lpVtbl.try &.value.cdrom_burn_error.call(this, pCdromBurn, hrError)
    end
    def library_connect(this : IWMPEvents4*, pLibrary : Void*) : Void
      @lpVtbl.try &.value.library_connect.call(this, pLibrary)
    end
    def library_disconnect(this : IWMPEvents4*, pLibrary : Void*) : Void
      @lpVtbl.try &.value.library_disconnect.call(this, pLibrary)
    end
    def folder_scan_state_change(this : IWMPEvents4*, wmpfss : Win32cr::Media::MediaPlayer::WMPFolderScanState) : Void
      @lpVtbl.try &.value.folder_scan_state_change.call(this, wmpfss)
    end
    def string_collection_change(this : IWMPEvents4*, pdispStringCollection : Void*, change : Win32cr::Media::MediaPlayer::WMPStringCollectionChangeEventType, lCollectionIndex : Int32) : Void
      @lpVtbl.try &.value.string_collection_change.call(this, pdispStringCollection, change, lCollectionIndex)
    end
    def media_collection_media_added(this : IWMPEvents4*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.media_collection_media_added.call(this, pdispMedia)
    end
    def media_collection_media_removed(this : IWMPEvents4*, pdispMedia : Void*) : Void
      @lpVtbl.try &.value.media_collection_media_removed.call(this, pdispMedia)
    end
    def device_estimation(this : IWMPEvents4*, pDevice : Void*, hrResult : Win32cr::Foundation::HRESULT, qwEstimatedUsedSpace : Int64, qwEstimatedSpace : Int64) : Void
      @lpVtbl.try &.value.device_estimation.call(this, pDevice, hrResult, qwEstimatedUsedSpace, qwEstimatedSpace)
    end

  end

  @[Extern]
  record WMPOCXEventsVtbl,
    query_interface : Proc(WMPOCXEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(WMPOCXEvents*, UInt32),
    release : Proc(WMPOCXEvents*, UInt32),
    get_type_info_count : Proc(WMPOCXEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(WMPOCXEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(WMPOCXEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(WMPOCXEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6bf52a51-394a-11d3-b153-00c04f79faa6")]
  record WMPOCXEvents, lpVtbl : WMPOCXEventsVtbl* do
    GUID = LibC::GUID.new(0x6bf52a51_u32, 0x394a_u16, 0x11d3_u16, StaticArray[0xb1_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0xfa_u8, 0xa6_u8])
    def query_interface(this : WMPOCXEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : WMPOCXEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : WMPOCXEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : WMPOCXEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : WMPOCXEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : WMPOCXEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : WMPOCXEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IWMPNodeRealEstateVtbl,
    query_interface : Proc(IWMPNodeRealEstate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPNodeRealEstate*, UInt32),
    release : Proc(IWMPNodeRealEstate*, UInt32),
    get_desired_size : Proc(IWMPNodeRealEstate*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    set_rects : Proc(IWMPNodeRealEstate*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_rects : Proc(IWMPNodeRealEstate*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_windowless : Proc(IWMPNodeRealEstate*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_windowless : Proc(IWMPNodeRealEstate*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_full_screen : Proc(IWMPNodeRealEstate*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_full_screen : Proc(IWMPNodeRealEstate*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("42751198-5a50-4460-bcb4-709f8bdc8e59")]
  record IWMPNodeRealEstate, lpVtbl : IWMPNodeRealEstateVtbl* do
    GUID = LibC::GUID.new(0x42751198_u32, 0x5a50_u16, 0x4460_u16, StaticArray[0xbc_u8, 0xb4_u8, 0x70_u8, 0x9f_u8, 0x8b_u8, 0xdc_u8, 0x8e_u8, 0x59_u8])
    def query_interface(this : IWMPNodeRealEstate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPNodeRealEstate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPNodeRealEstate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_desired_size(this : IWMPNodeRealEstate*, pSize : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desired_size.call(this, pSize)
    end
    def set_rects(this : IWMPNodeRealEstate*, pSrc : Win32cr::Foundation::RECT*, pDest : Win32cr::Foundation::RECT*, pClip : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rects.call(this, pSrc, pDest, pClip)
    end
    def get_rects(this : IWMPNodeRealEstate*, pSrc : Win32cr::Foundation::RECT*, pDest : Win32cr::Foundation::RECT*, pClip : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rects.call(this, pSrc, pDest, pClip)
    end
    def set_windowless(this : IWMPNodeRealEstate*, fWindowless : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_windowless.call(this, fWindowless)
    end
    def get_windowless(this : IWMPNodeRealEstate*, pfWindowless : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_windowless.call(this, pfWindowless)
    end
    def set_full_screen(this : IWMPNodeRealEstate*, fFullScreen : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_full_screen.call(this, fFullScreen)
    end
    def get_full_screen(this : IWMPNodeRealEstate*, pfFullScreen : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_full_screen.call(this, pfFullScreen)
    end

  end

  @[Extern]
  record IWMPNodeRealEstateHostVtbl,
    query_interface : Proc(IWMPNodeRealEstateHost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPNodeRealEstateHost*, UInt32),
    release : Proc(IWMPNodeRealEstateHost*, UInt32),
    on_desired_size_change : Proc(IWMPNodeRealEstateHost*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    on_full_screen_transition : Proc(IWMPNodeRealEstateHost*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1491087d-2c6b-44c8-b019-b3c929d2ada9")]
  record IWMPNodeRealEstateHost, lpVtbl : IWMPNodeRealEstateHostVtbl* do
    GUID = LibC::GUID.new(0x1491087d_u32, 0x2c6b_u16, 0x44c8_u16, StaticArray[0xb0_u8, 0x19_u8, 0xb3_u8, 0xc9_u8, 0x29_u8, 0xd2_u8, 0xad_u8, 0xa9_u8])
    def query_interface(this : IWMPNodeRealEstateHost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPNodeRealEstateHost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPNodeRealEstateHost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_desired_size_change(this : IWMPNodeRealEstateHost*, pSize : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_desired_size_change.call(this, pSize)
    end
    def on_full_screen_transition(this : IWMPNodeRealEstateHost*, fFullScreen : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_full_screen_transition.call(this, fFullScreen)
    end

  end

  @[Extern]
  record IWMPNodeWindowedVtbl,
    query_interface : Proc(IWMPNodeWindowed*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPNodeWindowed*, UInt32),
    release : Proc(IWMPNodeWindowed*, UInt32),
    set_owner_window : Proc(IWMPNodeWindowed*, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    get_owner_window : Proc(IWMPNodeWindowed*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("96740bfa-c56a-45d1-a3a4-762914d4ade9")]
  record IWMPNodeWindowed, lpVtbl : IWMPNodeWindowedVtbl* do
    GUID = LibC::GUID.new(0x96740bfa_u32, 0xc56a_u16, 0x45d1_u16, StaticArray[0xa3_u8, 0xa4_u8, 0x76_u8, 0x29_u8, 0x14_u8, 0xd4_u8, 0xad_u8, 0xe9_u8])
    def query_interface(this : IWMPNodeWindowed*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPNodeWindowed*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPNodeWindowed*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_owner_window(this : IWMPNodeWindowed*, hwnd : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_owner_window.call(this, hwnd)
    end
    def get_owner_window(this : IWMPNodeWindowed*, phwnd : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_owner_window.call(this, phwnd)
    end

  end

  @[Extern]
  record IWMPNodeWindowedHostVtbl,
    query_interface : Proc(IWMPNodeWindowedHost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPNodeWindowedHost*, UInt32),
    release : Proc(IWMPNodeWindowedHost*, UInt32),
    on_window_message_from_renderer : Proc(IWMPNodeWindowedHost*, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a300415a-54aa-4081-adbf-3b13610d8958")]
  record IWMPNodeWindowedHost, lpVtbl : IWMPNodeWindowedHostVtbl* do
    GUID = LibC::GUID.new(0xa300415a_u32, 0x54aa_u16, 0x4081_u16, StaticArray[0xad_u8, 0xbf_u8, 0x3b_u8, 0x13_u8, 0x61_u8, 0xd_u8, 0x89_u8, 0x58_u8])
    def query_interface(this : IWMPNodeWindowedHost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPNodeWindowedHost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPNodeWindowedHost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_window_message_from_renderer(this : IWMPNodeWindowedHost*, uMsg : UInt32, wparam : Win32cr::Foundation::WPARAM, lparam : Win32cr::Foundation::LPARAM, plRet : Win32cr::Foundation::LRESULT*, pfHandled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_window_message_from_renderer.call(this, uMsg, wparam, lparam, plRet, pfHandled)
    end

  end

  @[Extern]
  record IWMPWindowMessageSinkVtbl,
    query_interface : Proc(IWMPWindowMessageSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPWindowMessageSink*, UInt32),
    release : Proc(IWMPWindowMessageSink*, UInt32),
    on_window_message : Proc(IWMPWindowMessageSink*, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3a0daa30-908d-4789-ba87-aed879b5c49b")]
  record IWMPWindowMessageSink, lpVtbl : IWMPWindowMessageSinkVtbl* do
    GUID = LibC::GUID.new(0x3a0daa30_u32, 0x908d_u16, 0x4789_u16, StaticArray[0xba_u8, 0x87_u8, 0xae_u8, 0xd8_u8, 0x79_u8, 0xb5_u8, 0xc4_u8, 0x9b_u8])
    def query_interface(this : IWMPWindowMessageSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPWindowMessageSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPWindowMessageSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_window_message(this : IWMPWindowMessageSink*, uMsg : UInt32, wparam : Win32cr::Foundation::WPARAM, lparam : Win32cr::Foundation::LPARAM, plRet : Win32cr::Foundation::LRESULT*, pfHandled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_window_message.call(this, uMsg, wparam, lparam, plRet, pfHandled)
    end

  end

  @[Extern]
  record IWMPNodeWindowlessVtbl,
    query_interface : Proc(IWMPNodeWindowless*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPNodeWindowless*, UInt32),
    release : Proc(IWMPNodeWindowless*, UInt32),
    on_window_message : Proc(IWMPNodeWindowless*, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    on_draw : Proc(IWMPNodeWindowless*, LibC::IntPtrT, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9b9199ad-780c-4eda-b816-261eba5d1575")]
  record IWMPNodeWindowless, lpVtbl : IWMPNodeWindowlessVtbl* do
    GUID = LibC::GUID.new(0x9b9199ad_u32, 0x780c_u16, 0x4eda_u16, StaticArray[0xb8_u8, 0x16_u8, 0x26_u8, 0x1e_u8, 0xba_u8, 0x5d_u8, 0x15_u8, 0x75_u8])
    def query_interface(this : IWMPNodeWindowless*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPNodeWindowless*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPNodeWindowless*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_window_message(this : IWMPNodeWindowless*, uMsg : UInt32, wparam : Win32cr::Foundation::WPARAM, lparam : Win32cr::Foundation::LPARAM, plRet : Win32cr::Foundation::LRESULT*, pfHandled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_window_message.call(this, uMsg, wparam, lparam, plRet, pfHandled)
    end
    def on_draw(this : IWMPNodeWindowless*, hdc : LibC::IntPtrT, prcDraw : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_draw.call(this, hdc, prcDraw)
    end

  end

  @[Extern]
  record IWMPNodeWindowlessHostVtbl,
    query_interface : Proc(IWMPNodeWindowlessHost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPNodeWindowlessHost*, UInt32),
    release : Proc(IWMPNodeWindowlessHost*, UInt32),
    invalidate_rect : Proc(IWMPNodeWindowlessHost*, Win32cr::Foundation::RECT*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("be7017c6-ce34-4901-8106-770381aa6e3e")]
  record IWMPNodeWindowlessHost, lpVtbl : IWMPNodeWindowlessHostVtbl* do
    GUID = LibC::GUID.new(0xbe7017c6_u32, 0xce34_u16, 0x4901_u16, StaticArray[0x81_u8, 0x6_u8, 0x77_u8, 0x3_u8, 0x81_u8, 0xaa_u8, 0x6e_u8, 0x3e_u8])
    def query_interface(this : IWMPNodeWindowlessHost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPNodeWindowlessHost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPNodeWindowlessHost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def invalidate_rect(this : IWMPNodeWindowlessHost*, prc : Win32cr::Foundation::RECT*, fErase : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_rect.call(this, prc, fErase)
    end

  end

  @[Extern]
  record IWMPVideoRenderConfigVtbl,
    query_interface : Proc(IWMPVideoRenderConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPVideoRenderConfig*, UInt32),
    release : Proc(IWMPVideoRenderConfig*, UInt32),
    put_presenterActivate : Proc(IWMPVideoRenderConfig*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d6cf803-1ec0-4c8d-b3ca-f18e27282074")]
  record IWMPVideoRenderConfig, lpVtbl : IWMPVideoRenderConfigVtbl* do
    GUID = LibC::GUID.new(0x6d6cf803_u32, 0x1ec0_u16, 0x4c8d_u16, StaticArray[0xb3_u8, 0xca_u8, 0xf1_u8, 0x8e_u8, 0x27_u8, 0x28_u8, 0x20_u8, 0x74_u8])
    def query_interface(this : IWMPVideoRenderConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPVideoRenderConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPVideoRenderConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_presenterActivate(this : IWMPVideoRenderConfig*, pActivate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_presenterActivate.call(this, pActivate)
    end

  end

  @[Extern]
  record IWMPAudioRenderConfigVtbl,
    query_interface : Proc(IWMPAudioRenderConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPAudioRenderConfig*, UInt32),
    release : Proc(IWMPAudioRenderConfig*, UInt32),
    get_audioOutputDevice : Proc(IWMPAudioRenderConfig*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_audioOutputDevice : Proc(IWMPAudioRenderConfig*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e79c6349-5997-4ce4-917c-22a3391ec564")]
  record IWMPAudioRenderConfig, lpVtbl : IWMPAudioRenderConfigVtbl* do
    GUID = LibC::GUID.new(0xe79c6349_u32, 0x5997_u16, 0x4ce4_u16, StaticArray[0x91_u8, 0x7c_u8, 0x22_u8, 0xa3_u8, 0x39_u8, 0x1e_u8, 0xc5_u8, 0x64_u8])
    def query_interface(this : IWMPAudioRenderConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPAudioRenderConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPAudioRenderConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_audioOutputDevice(this : IWMPAudioRenderConfig*, pbstrOutputDevice : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audioOutputDevice.call(this, pbstrOutputDevice)
    end
    def put_audioOutputDevice(this : IWMPAudioRenderConfig*, bstrOutputDevice : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_audioOutputDevice.call(this, bstrOutputDevice)
    end

  end

  @[Extern]
  record IWMPRenderConfigVtbl,
    query_interface : Proc(IWMPRenderConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPRenderConfig*, UInt32),
    release : Proc(IWMPRenderConfig*, UInt32),
    put_inProcOnly : Proc(IWMPRenderConfig*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_inProcOnly : Proc(IWMPRenderConfig*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("959506c1-0314-4ec5-9e61-8528db5e5478")]
  record IWMPRenderConfig, lpVtbl : IWMPRenderConfigVtbl* do
    GUID = LibC::GUID.new(0x959506c1_u32, 0x314_u16, 0x4ec5_u16, StaticArray[0x9e_u8, 0x61_u8, 0x85_u8, 0x28_u8, 0xdb_u8, 0x5e_u8, 0x54_u8, 0x78_u8])
    def query_interface(this : IWMPRenderConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPRenderConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPRenderConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_inProcOnly(this : IWMPRenderConfig*, fInProc : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_inProcOnly.call(this, fInProc)
    end
    def get_inProcOnly(this : IWMPRenderConfig*, pfInProc : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_inProcOnly.call(this, pfInProc)
    end

  end

  @[Extern]
  record IWMPServicesVtbl,
    query_interface : Proc(IWMPServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPServices*, UInt32),
    release : Proc(IWMPServices*, UInt32),
    get_stream_time : Proc(IWMPServices*, Int64*, Win32cr::Foundation::HRESULT),
    get_stream_state : Proc(IWMPServices*, Win32cr::Media::MediaPlayer::WMPServices_StreamState*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("afb6b76b-1e20-4198-83b3-191db6e0b149")]
  record IWMPServices, lpVtbl : IWMPServicesVtbl* do
    GUID = LibC::GUID.new(0xafb6b76b_u32, 0x1e20_u16, 0x4198_u16, StaticArray[0x83_u8, 0xb3_u8, 0x19_u8, 0x1d_u8, 0xb6_u8, 0xe0_u8, 0xb1_u8, 0x49_u8])
    def query_interface(this : IWMPServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_time(this : IWMPServices*, prt : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_time.call(this, prt)
    end
    def get_stream_state(this : IWMPServices*, pState : Win32cr::Media::MediaPlayer::WMPServices_StreamState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_state.call(this, pState)
    end

  end

  @[Extern]
  record IWMPMediaPluginRegistrarVtbl,
    query_interface : Proc(IWMPMediaPluginRegistrar*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPMediaPluginRegistrar*, UInt32),
    release : Proc(IWMPMediaPluginRegistrar*, UInt32),
    wmp_register_player_plugin : Proc(IWMPMediaPluginRegistrar*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, LibC::GUID, LibC::GUID, UInt32, Void*, Win32cr::Foundation::HRESULT),
    wmp_un_register_player_plugin : Proc(IWMPMediaPluginRegistrar*, LibC::GUID, LibC::GUID, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("68e27045-05bd-40b2-9720-23088c78e390")]
  record IWMPMediaPluginRegistrar, lpVtbl : IWMPMediaPluginRegistrarVtbl* do
    GUID = LibC::GUID.new(0x68e27045_u32, 0x5bd_u16, 0x40b2_u16, StaticArray[0x97_u8, 0x20_u8, 0x23_u8, 0x8_u8, 0x8c_u8, 0x78_u8, 0xe3_u8, 0x90_u8])
    def query_interface(this : IWMPMediaPluginRegistrar*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPMediaPluginRegistrar*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPMediaPluginRegistrar*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def wmp_register_player_plugin(this : IWMPMediaPluginRegistrar*, pwszFriendlyName : Win32cr::Foundation::PWSTR, pwszDescription : Win32cr::Foundation::PWSTR, pwszUninstallString : Win32cr::Foundation::PWSTR, dwPriority : UInt32, guidPluginType : LibC::GUID, clsid : LibC::GUID, cMediaTypes : UInt32, pMediaTypes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wmp_register_player_plugin.call(this, pwszFriendlyName, pwszDescription, pwszUninstallString, dwPriority, guidPluginType, clsid, cMediaTypes, pMediaTypes)
    end
    def wmp_un_register_player_plugin(this : IWMPMediaPluginRegistrar*, guidPluginType : LibC::GUID, clsid : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wmp_un_register_player_plugin.call(this, guidPluginType, clsid)
    end

  end

  @[Extern]
  record IWMPPluginVtbl,
    query_interface : Proc(IWMPPlugin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPlugin*, UInt32),
    release : Proc(IWMPPlugin*, UInt32),
    init : Proc(IWMPPlugin*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IWMPPlugin*, Win32cr::Foundation::HRESULT),
    get_id : Proc(IWMPPlugin*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_caps : Proc(IWMPPlugin*, UInt32*, Win32cr::Foundation::HRESULT),
    advise_wmp_services : Proc(IWMPPlugin*, Void*, Win32cr::Foundation::HRESULT),
    un_advise_wmp_services : Proc(IWMPPlugin*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f1392a70-024c-42bb-a998-73dfdfe7d5a7")]
  record IWMPPlugin, lpVtbl : IWMPPluginVtbl* do
    GUID = LibC::GUID.new(0xf1392a70_u32, 0x24c_u16, 0x42bb_u16, StaticArray[0xa9_u8, 0x98_u8, 0x73_u8, 0xdf_u8, 0xdf_u8, 0xe7_u8, 0xd5_u8, 0xa7_u8])
    def query_interface(this : IWMPPlugin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPlugin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPlugin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IWMPPlugin*, dwPlaybackContext : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, dwPlaybackContext)
    end
    def shutdown(this : IWMPPlugin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_id(this : IWMPPlugin*, pGUID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, pGUID)
    end
    def get_caps(this : IWMPPlugin*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_caps.call(this, pdwFlags)
    end
    def advise_wmp_services(this : IWMPPlugin*, pWMPServices : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise_wmp_services.call(this, pWMPServices)
    end
    def un_advise_wmp_services(this : IWMPPlugin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_advise_wmp_services.call(this)
    end

  end

  @[Extern]
  record IWMPPluginEnableVtbl,
    query_interface : Proc(IWMPPluginEnable*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPluginEnable*, UInt32),
    release : Proc(IWMPPluginEnable*, UInt32),
    set_enable : Proc(IWMPPluginEnable*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_enable : Proc(IWMPPluginEnable*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5fca444c-7ad1-479d-a4ef-40566a5309d6")]
  record IWMPPluginEnable, lpVtbl : IWMPPluginEnableVtbl* do
    GUID = LibC::GUID.new(0x5fca444c_u32, 0x7ad1_u16, 0x479d_u16, StaticArray[0xa4_u8, 0xef_u8, 0x40_u8, 0x56_u8, 0x6a_u8, 0x53_u8, 0x9_u8, 0xd6_u8])
    def query_interface(this : IWMPPluginEnable*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPluginEnable*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPluginEnable*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_enable(this : IWMPPluginEnable*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_enable.call(this, fEnable)
    end
    def get_enable(this : IWMPPluginEnable*, pfEnable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enable.call(this, pfEnable)
    end

  end

  @[Extern]
  record IWMPGraphCreationVtbl,
    query_interface : Proc(IWMPGraphCreation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPGraphCreation*, UInt32),
    release : Proc(IWMPGraphCreation*, UInt32),
    graph_creation_pre_render : Proc(IWMPGraphCreation*, Void*, Void*, Win32cr::Foundation::HRESULT),
    graph_creation_post_render : Proc(IWMPGraphCreation*, Void*, Win32cr::Foundation::HRESULT),
    get_graph_creation_flags : Proc(IWMPGraphCreation*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bfb377e5-c594-4369-a970-de896d5ece74")]
  record IWMPGraphCreation, lpVtbl : IWMPGraphCreationVtbl* do
    GUID = LibC::GUID.new(0xbfb377e5_u32, 0xc594_u16, 0x4369_u16, StaticArray[0xa9_u8, 0x70_u8, 0xde_u8, 0x89_u8, 0x6d_u8, 0x5e_u8, 0xce_u8, 0x74_u8])
    def query_interface(this : IWMPGraphCreation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPGraphCreation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPGraphCreation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def graph_creation_pre_render(this : IWMPGraphCreation*, pFilterGraph : Void*, pReserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.graph_creation_pre_render.call(this, pFilterGraph, pReserved)
    end
    def graph_creation_post_render(this : IWMPGraphCreation*, pFilterGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.graph_creation_post_render.call(this, pFilterGraph)
    end
    def get_graph_creation_flags(this : IWMPGraphCreation*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_graph_creation_flags.call(this, pdwFlags)
    end

  end

  @[Extern]
  record IWMPConvertVtbl,
    query_interface : Proc(IWMPConvert*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPConvert*, UInt32),
    release : Proc(IWMPConvert*, UInt32),
    convert_file : Proc(IWMPConvert*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_error_url : Proc(IWMPConvert*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d683162f-57d4-4108-8373-4a9676d1c2e9")]
  record IWMPConvert, lpVtbl : IWMPConvertVtbl* do
    GUID = LibC::GUID.new(0xd683162f_u32, 0x57d4_u16, 0x4108_u16, StaticArray[0x83_u8, 0x73_u8, 0x4a_u8, 0x96_u8, 0x76_u8, 0xd1_u8, 0xc2_u8, 0xe9_u8])
    def query_interface(this : IWMPConvert*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPConvert*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPConvert*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def convert_file(this : IWMPConvert*, bstrInputFile : Win32cr::Foundation::BSTR, bstrDestinationFolder : Win32cr::Foundation::BSTR, pbstrOutputFile : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_file.call(this, bstrInputFile, bstrDestinationFolder, pbstrOutputFile)
    end
    def get_error_url(this : IWMPConvert*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_url.call(this, pbstrURL)
    end

  end

  @[Extern]
  record IWMPTranscodePolicyVtbl,
    query_interface : Proc(IWMPTranscodePolicy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPTranscodePolicy*, UInt32),
    release : Proc(IWMPTranscodePolicy*, UInt32),
    allowTranscode : Proc(IWMPTranscodePolicy*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b64cbac3-401c-4327-a3e8-b9feb3a8c25c")]
  record IWMPTranscodePolicy, lpVtbl : IWMPTranscodePolicyVtbl* do
    GUID = LibC::GUID.new(0xb64cbac3_u32, 0x401c_u16, 0x4327_u16, StaticArray[0xa3_u8, 0xe8_u8, 0xb9_u8, 0xfe_u8, 0xb3_u8, 0xa8_u8, 0xc2_u8, 0x5c_u8])
    def query_interface(this : IWMPTranscodePolicy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPTranscodePolicy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPTranscodePolicy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def allowTranscode(this : IWMPTranscodePolicy*, pvbAllow : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allowTranscode.call(this, pvbAllow)
    end

  end

  @[Extern]
  record IWMPUserEventSinkVtbl,
    query_interface : Proc(IWMPUserEventSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPUserEventSink*, UInt32),
    release : Proc(IWMPUserEventSink*, UInt32),
    notify_user_event : Proc(IWMPUserEventSink*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cfccfa72-c343-48c3-a2de-b7a4402e39f2")]
  record IWMPUserEventSink, lpVtbl : IWMPUserEventSinkVtbl* do
    GUID = LibC::GUID.new(0xcfccfa72_u32, 0xc343_u16, 0x48c3_u16, StaticArray[0xa2_u8, 0xde_u8, 0xb7_u8, 0xa4_u8, 0x40_u8, 0x2e_u8, 0x39_u8, 0xf2_u8])
    def query_interface(this : IWMPUserEventSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPUserEventSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPUserEventSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_user_event(this : IWMPUserEventSink*, event_code : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_user_event.call(this, event_code)
    end

  end

  @[Extern]
  record IXFeedsManagerVtbl,
    query_interface : Proc(IXFeedsManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedsManager*, UInt32),
    release : Proc(IXFeedsManager*, UInt32),
    root_folder : Proc(IXFeedsManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_subscribed : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    exists_feed : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_feed : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_feed_by_url : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    exists_folder : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_folder : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    delete_feed : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    delete_folder : Proc(IXFeedsManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    background_sync : Proc(IXFeedsManager*, Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_ACTION, Win32cr::Foundation::HRESULT),
    background_sync_status : Proc(IXFeedsManager*, Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_STATUS*, Win32cr::Foundation::HRESULT),
    default_interval : Proc(IXFeedsManager*, UInt32*, Win32cr::Foundation::HRESULT),
    set_default_interval : Proc(IXFeedsManager*, UInt32, Win32cr::Foundation::HRESULT),
    async_sync_all : Proc(IXFeedsManager*, Win32cr::Foundation::HRESULT),
    normalize : Proc(IXFeedsManager*, Void*, Void**, Win32cr::Foundation::HRESULT),
    item_count_limit : Proc(IXFeedsManager*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5357e238-fb12-4aca-a930-cab7832b84bf")]
  record IXFeedsManager, lpVtbl : IXFeedsManagerVtbl* do
    GUID = LibC::GUID.new(0x5357e238_u32, 0xfb12_u16, 0x4aca_u16, StaticArray[0xa9_u8, 0x30_u8, 0xca_u8, 0xb7_u8, 0x83_u8, 0x2b_u8, 0x84_u8, 0xbf_u8])
    def query_interface(this : IXFeedsManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedsManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedsManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def root_folder(this : IXFeedsManager*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.root_folder.call(this, riid, ppv)
    end
    def is_subscribed(this : IXFeedsManager*, pszUrl : Win32cr::Foundation::PWSTR, pbSubscribed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_subscribed.call(this, pszUrl, pbSubscribed)
    end
    def exists_feed(this : IXFeedsManager*, pszPath : Win32cr::Foundation::PWSTR, pbFeedExists : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_feed.call(this, pszPath, pbFeedExists)
    end
    def get_feed(this : IXFeedsManager*, pszPath : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_feed.call(this, pszPath, riid, ppv)
    end
    def get_feed_by_url(this : IXFeedsManager*, pszUrl : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_feed_by_url.call(this, pszUrl, riid, ppv)
    end
    def exists_folder(this : IXFeedsManager*, pszPath : Win32cr::Foundation::PWSTR, pbFolderExists : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_folder.call(this, pszPath, pbFolderExists)
    end
    def get_folder(this : IXFeedsManager*, pszPath : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_folder.call(this, pszPath, riid, ppv)
    end
    def delete_feed(this : IXFeedsManager*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_feed.call(this, pszPath)
    end
    def delete_folder(this : IXFeedsManager*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_folder.call(this, pszPath)
    end
    def background_sync(this : IXFeedsManager*, fbsa : Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_ACTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.background_sync.call(this, fbsa)
    end
    def background_sync_status(this : IXFeedsManager*, pfbss : Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.background_sync_status.call(this, pfbss)
    end
    def default_interval(this : IXFeedsManager*, puiInterval : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.default_interval.call(this, puiInterval)
    end
    def set_default_interval(this : IXFeedsManager*, uiInterval : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_interval.call(this, uiInterval)
    end
    def async_sync_all(this : IXFeedsManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_sync_all.call(this)
    end
    def normalize(this : IXFeedsManager*, pStreamIn : Void*, ppStreamOut : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.normalize.call(this, pStreamIn, ppStreamOut)
    end
    def item_count_limit(this : IXFeedsManager*, puiItemCountLimit : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item_count_limit.call(this, puiItemCountLimit)
    end

  end

  @[Extern]
  record IXFeedsEnumVtbl,
    query_interface : Proc(IXFeedsEnum*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedsEnum*, UInt32),
    release : Proc(IXFeedsEnum*, UInt32),
    count : Proc(IXFeedsEnum*, UInt32*, Win32cr::Foundation::HRESULT),
    item : Proc(IXFeedsEnum*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dc43a9d5-5015-4301-8c96-a47434b4d658")]
  record IXFeedsEnum, lpVtbl : IXFeedsEnumVtbl* do
    GUID = LibC::GUID.new(0xdc43a9d5_u32, 0x5015_u16, 0x4301_u16, StaticArray[0x8c_u8, 0x96_u8, 0xa4_u8, 0x74_u8, 0x34_u8, 0xb4_u8, 0xd6_u8, 0x58_u8])
    def query_interface(this : IXFeedsEnum*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedsEnum*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedsEnum*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def count(this : IXFeedsEnum*, puiCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.count.call(this, puiCount)
    end
    def item(this : IXFeedsEnum*, uiIndex : UInt32, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, uiIndex, riid, ppv)
    end

  end

  @[Extern]
  record IXFeedFolderVtbl,
    query_interface : Proc(IXFeedFolder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedFolder*, UInt32),
    release : Proc(IXFeedFolder*, UInt32),
    feeds : Proc(IXFeedFolder*, Void**, Win32cr::Foundation::HRESULT),
    subfolders : Proc(IXFeedFolder*, Void**, Win32cr::Foundation::HRESULT),
    create_feed : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_subfolder : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    exists_feed : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    exists_subfolder : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_feed : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_subfolder : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IXFeedFolder*, Win32cr::Foundation::HRESULT),
    name : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    rename : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    path : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    move : Proc(IXFeedFolder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    parent : Proc(IXFeedFolder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_root : Proc(IXFeedFolder*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_watcher : Proc(IXFeedFolder*, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    total_unread_item_count : Proc(IXFeedFolder*, UInt32*, Win32cr::Foundation::HRESULT),
    total_item_count : Proc(IXFeedFolder*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4c963678-3a51-4b88-8531-98b90b6508f2")]
  record IXFeedFolder, lpVtbl : IXFeedFolderVtbl* do
    GUID = LibC::GUID.new(0x4c963678_u32, 0x3a51_u16, 0x4b88_u16, StaticArray[0x85_u8, 0x31_u8, 0x98_u8, 0xb9_u8, 0xb_u8, 0x65_u8, 0x8_u8, 0xf2_u8])
    def query_interface(this : IXFeedFolder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedFolder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedFolder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def feeds(this : IXFeedFolder*, ppfe : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feeds.call(this, ppfe)
    end
    def subfolders(this : IXFeedFolder*, ppfe : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.subfolders.call(this, ppfe)
    end
    def create_feed(this : IXFeedFolder*, pszName : Win32cr::Foundation::PWSTR, pszUrl : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_feed.call(this, pszName, pszUrl, riid, ppv)
    end
    def create_subfolder(this : IXFeedFolder*, pszName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_subfolder.call(this, pszName, riid, ppv)
    end
    def exists_feed(this : IXFeedFolder*, pszName : Win32cr::Foundation::PWSTR, pbFeedExists : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_feed.call(this, pszName, pbFeedExists)
    end
    def exists_subfolder(this : IXFeedFolder*, pszName : Win32cr::Foundation::PWSTR, pbSubfolderExists : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_subfolder.call(this, pszName, pbSubfolderExists)
    end
    def get_feed(this : IXFeedFolder*, pszName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_feed.call(this, pszName, riid, ppv)
    end
    def get_subfolder(this : IXFeedFolder*, pszName : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subfolder.call(this, pszName, riid, ppv)
    end
    def delete(this : IXFeedFolder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def name(this : IXFeedFolder*, ppszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name.call(this, ppszName)
    end
    def rename(this : IXFeedFolder*, pszName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename.call(this, pszName)
    end
    def path(this : IXFeedFolder*, ppszPath : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.path.call(this, ppszPath)
    end
    def move(this : IXFeedFolder*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, pszPath)
    end
    def parent(this : IXFeedFolder*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parent.call(this, riid, ppv)
    end
    def is_root(this : IXFeedFolder*, pbIsRootFeedFolder : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_root.call(this, pbIsRootFeedFolder)
    end
    def get_watcher(this : IXFeedFolder*, scope : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, mask : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_watcher.call(this, scope, mask, riid, ppv)
    end
    def total_unread_item_count(this : IXFeedFolder*, puiTotalUnreadItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.total_unread_item_count.call(this, puiTotalUnreadItemCount)
    end
    def total_item_count(this : IXFeedFolder*, puiTotalItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.total_item_count.call(this, puiTotalItemCount)
    end

  end

  @[Extern]
  record IXFeedFolderEventsVtbl,
    query_interface : Proc(IXFeedFolderEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedFolderEvents*, UInt32),
    release : Proc(IXFeedFolderEvents*, UInt32),
    error : Proc(IXFeedFolderEvents*, Win32cr::Foundation::HRESULT),
    folder_added : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    folder_deleted : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    folder_renamed : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    folder_moved_from : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    folder_moved_to : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    folder_item_count_changed : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    feed_added : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_deleted : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_renamed : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_url_changed : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_moved_from : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_moved_to : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_downloading : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_download_completed : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR, Win32cr::Foundation::HRESULT),
    feed_item_count_changed : Proc(IXFeedFolderEvents*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7964b769-234a-4bb1-a5f4-90454c8ad07e")]
  record IXFeedFolderEvents, lpVtbl : IXFeedFolderEventsVtbl* do
    GUID = LibC::GUID.new(0x7964b769_u32, 0x234a_u16, 0x4bb1_u16, StaticArray[0xa5_u8, 0xf4_u8, 0x90_u8, 0x45_u8, 0x4c_u8, 0x8a_u8, 0xd0_u8, 0x7e_u8])
    def query_interface(this : IXFeedFolderEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedFolderEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedFolderEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def error(this : IXFeedFolderEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.error.call(this)
    end
    def folder_added(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_added.call(this, pszPath)
    end
    def folder_deleted(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_deleted.call(this, pszPath)
    end
    def folder_renamed(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_renamed.call(this, pszPath, pszOldPath)
    end
    def folder_moved_from(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_moved_from.call(this, pszPath, pszOldPath)
    end
    def folder_moved_to(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_moved_to.call(this, pszPath, pszOldPath)
    end
    def folder_item_count_changed(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, feicfFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_item_count_changed.call(this, pszPath, feicfFlags)
    end
    def feed_added(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_added.call(this, pszPath)
    end
    def feed_deleted(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_deleted.call(this, pszPath)
    end
    def feed_renamed(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_renamed.call(this, pszPath, pszOldPath)
    end
    def feed_url_changed(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_url_changed.call(this, pszPath)
    end
    def feed_moved_from(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_moved_from.call(this, pszPath, pszOldPath)
    end
    def feed_moved_to(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_moved_to.call(this, pszPath, pszOldPath)
    end
    def feed_downloading(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_downloading.call(this, pszPath)
    end
    def feed_download_completed(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, fde : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_download_completed.call(this, pszPath, fde)
    end
    def feed_item_count_changed(this : IXFeedFolderEvents*, pszPath : Win32cr::Foundation::PWSTR, feicfFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_item_count_changed.call(this, pszPath, feicfFlags)
    end

  end

  @[Extern]
  record IXFeedVtbl,
    query_interface : Proc(IXFeed*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeed*, UInt32),
    release : Proc(IXFeed*, UInt32),
    xml : Proc(IXFeed*, UInt32, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    name : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    rename : Proc(IXFeed*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    url : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_url : Proc(IXFeed*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    local_id : Proc(IXFeed*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    path : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    move : Proc(IXFeed*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    parent : Proc(IXFeed*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    last_write_time : Proc(IXFeed*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    delete : Proc(IXFeed*, Win32cr::Foundation::HRESULT),
    download : Proc(IXFeed*, Win32cr::Foundation::HRESULT),
    async_download : Proc(IXFeed*, Win32cr::Foundation::HRESULT),
    cancel_async_download : Proc(IXFeed*, Win32cr::Foundation::HRESULT),
    sync_setting : Proc(IXFeed*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*, Win32cr::Foundation::HRESULT),
    set_sync_setting : Proc(IXFeed*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING, Win32cr::Foundation::HRESULT),
    interval : Proc(IXFeed*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interval : Proc(IXFeed*, UInt32, Win32cr::Foundation::HRESULT),
    last_download_time : Proc(IXFeed*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    local_enclosure_path : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    items : Proc(IXFeed*, Void**, Win32cr::Foundation::HRESULT),
    get_item : Proc(IXFeed*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    mark_all_items_read : Proc(IXFeed*, Win32cr::Foundation::HRESULT),
    max_item_count : Proc(IXFeed*, UInt32*, Win32cr::Foundation::HRESULT),
    set_max_item_count : Proc(IXFeed*, UInt32, Win32cr::Foundation::HRESULT),
    download_enclosures_automatically : Proc(IXFeed*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_download_enclosures_automatically : Proc(IXFeed*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    download_status : Proc(IXFeed*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*, Win32cr::Foundation::HRESULT),
    last_download_error : Proc(IXFeed*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*, Win32cr::Foundation::HRESULT),
    merge : Proc(IXFeed*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    download_url : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    title : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    description : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    link : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    image : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    last_build_date : Proc(IXFeed*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    pub_date : Proc(IXFeed*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    ttl : Proc(IXFeed*, UInt32*, Win32cr::Foundation::HRESULT),
    language : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    copyright : Proc(IXFeed*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    is_list : Proc(IXFeed*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_watcher : Proc(IXFeed*, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    unread_item_count : Proc(IXFeed*, UInt32*, Win32cr::Foundation::HRESULT),
    item_count : Proc(IXFeed*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a44179a4-e0f6-403b-af8d-d080f425a451")]
  record IXFeed, lpVtbl : IXFeedVtbl* do
    GUID = LibC::GUID.new(0xa44179a4_u32, 0xe0f6_u16, 0x403b_u16, StaticArray[0xaf_u8, 0x8d_u8, 0xd0_u8, 0x80_u8, 0xf4_u8, 0x25_u8, 0xa4_u8, 0x51_u8])
    def query_interface(this : IXFeed*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeed*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeed*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def xml(this : IXFeed*, uiItemCount : UInt32, sortProperty : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, sortOrder : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, filterFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, includeFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, pps : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, uiItemCount, sortProperty, sortOrder, filterFlags, includeFlags, pps)
    end
    def name(this : IXFeed*, ppszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name.call(this, ppszName)
    end
    def rename(this : IXFeed*, pszName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename.call(this, pszName)
    end
    def url(this : IXFeed*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.url.call(this, ppszUrl)
    end
    def set_url(this : IXFeed*, pszUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_url.call(this, pszUrl)
    end
    def local_id(this : IXFeed*, pguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.local_id.call(this, pguid)
    end
    def path(this : IXFeed*, ppszPath : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.path.call(this, ppszPath)
    end
    def move(this : IXFeed*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, pszPath)
    end
    def parent(this : IXFeed*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parent.call(this, riid, ppv)
    end
    def last_write_time(this : IXFeed*, pstLastWriteTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_write_time.call(this, pstLastWriteTime)
    end
    def delete(this : IXFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def download(this : IXFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download.call(this)
    end
    def async_download(this : IXFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_download.call(this)
    end
    def cancel_async_download(this : IXFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_async_download.call(this)
    end
    def sync_setting(this : IXFeed*, pfss : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync_setting.call(this, pfss)
    end
    def set_sync_setting(this : IXFeed*, fss : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_setting.call(this, fss)
    end
    def interval(this : IXFeed*, puiInterval : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.interval.call(this, puiInterval)
    end
    def set_interval(this : IXFeed*, uiInterval : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interval.call(this, uiInterval)
    end
    def last_download_time(this : IXFeed*, pstLastDownloadTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_download_time.call(this, pstLastDownloadTime)
    end
    def local_enclosure_path(this : IXFeed*, ppszPath : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.local_enclosure_path.call(this, ppszPath)
    end
    def items(this : IXFeed*, ppfe : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.items.call(this, ppfe)
    end
    def get_item(this : IXFeed*, uiId : UInt32, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, uiId, riid, ppv)
    end
    def mark_all_items_read(this : IXFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mark_all_items_read.call(this)
    end
    def max_item_count(this : IXFeed*, puiMaxItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.max_item_count.call(this, puiMaxItemCount)
    end
    def set_max_item_count(this : IXFeed*, uiMaxItemCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_max_item_count.call(this, uiMaxItemCount)
    end
    def download_enclosures_automatically(this : IXFeed*, pbDownloadEnclosuresAutomatically : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_enclosures_automatically.call(this, pbDownloadEnclosuresAutomatically)
    end
    def set_download_enclosures_automatically(this : IXFeed*, bDownloadEnclosuresAutomatically : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_download_enclosures_automatically.call(this, bDownloadEnclosuresAutomatically)
    end
    def download_status(this : IXFeed*, pfds : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_status.call(this, pfds)
    end
    def last_download_error(this : IXFeed*, pfde : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_download_error.call(this, pfde)
    end
    def merge(this : IXFeed*, pStream : Void*, pszUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.merge.call(this, pStream, pszUrl)
    end
    def download_url(this : IXFeed*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_url.call(this, ppszUrl)
    end
    def title(this : IXFeed*, ppszTitle : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.title.call(this, ppszTitle)
    end
    def description(this : IXFeed*, ppszDescription : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.description.call(this, ppszDescription)
    end
    def link(this : IXFeed*, ppszHomePage : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.link.call(this, ppszHomePage)
    end
    def image(this : IXFeed*, ppszImageUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.image.call(this, ppszImageUrl)
    end
    def last_build_date(this : IXFeed*, pstLastBuildDate : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_build_date.call(this, pstLastBuildDate)
    end
    def pub_date(this : IXFeed*, pstPubDate : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pub_date.call(this, pstPubDate)
    end
    def ttl(this : IXFeed*, puiTtl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ttl.call(this, puiTtl)
    end
    def language(this : IXFeed*, ppszLanguage : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.language.call(this, ppszLanguage)
    end
    def copyright(this : IXFeed*, ppszCopyright : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copyright.call(this, ppszCopyright)
    end
    def is_list(this : IXFeed*, pbIsList : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_list.call(this, pbIsList)
    end
    def get_watcher(this : IXFeed*, scope : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, mask : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_watcher.call(this, scope, mask, riid, ppv)
    end
    def unread_item_count(this : IXFeed*, puiUnreadItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unread_item_count.call(this, puiUnreadItemCount)
    end
    def item_count(this : IXFeed*, puiItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item_count.call(this, puiItemCount)
    end

  end

  @[Extern]
  record IXFeed2Vtbl,
    query_interface : Proc(IXFeed2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeed2*, UInt32),
    release : Proc(IXFeed2*, UInt32),
    xml : Proc(IXFeed2*, UInt32, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    name : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    rename : Proc(IXFeed2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    url : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_url : Proc(IXFeed2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    local_id : Proc(IXFeed2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    path : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    move : Proc(IXFeed2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    parent : Proc(IXFeed2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    last_write_time : Proc(IXFeed2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    delete : Proc(IXFeed2*, Win32cr::Foundation::HRESULT),
    download : Proc(IXFeed2*, Win32cr::Foundation::HRESULT),
    async_download : Proc(IXFeed2*, Win32cr::Foundation::HRESULT),
    cancel_async_download : Proc(IXFeed2*, Win32cr::Foundation::HRESULT),
    sync_setting : Proc(IXFeed2*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*, Win32cr::Foundation::HRESULT),
    set_sync_setting : Proc(IXFeed2*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING, Win32cr::Foundation::HRESULT),
    interval : Proc(IXFeed2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_interval : Proc(IXFeed2*, UInt32, Win32cr::Foundation::HRESULT),
    last_download_time : Proc(IXFeed2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    local_enclosure_path : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    items : Proc(IXFeed2*, Void**, Win32cr::Foundation::HRESULT),
    get_item : Proc(IXFeed2*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    mark_all_items_read : Proc(IXFeed2*, Win32cr::Foundation::HRESULT),
    max_item_count : Proc(IXFeed2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_max_item_count : Proc(IXFeed2*, UInt32, Win32cr::Foundation::HRESULT),
    download_enclosures_automatically : Proc(IXFeed2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_download_enclosures_automatically : Proc(IXFeed2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    download_status : Proc(IXFeed2*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*, Win32cr::Foundation::HRESULT),
    last_download_error : Proc(IXFeed2*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*, Win32cr::Foundation::HRESULT),
    merge : Proc(IXFeed2*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    download_url : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    title : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    description : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    link : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    image : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    last_build_date : Proc(IXFeed2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    pub_date : Proc(IXFeed2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    ttl : Proc(IXFeed2*, UInt32*, Win32cr::Foundation::HRESULT),
    language : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    copyright : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    is_list : Proc(IXFeed2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_watcher : Proc(IXFeed2*, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    unread_item_count : Proc(IXFeed2*, UInt32*, Win32cr::Foundation::HRESULT),
    item_count : Proc(IXFeed2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_effective_id : Proc(IXFeed2*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    last_item_download_time : Proc(IXFeed2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    username : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    password : Proc(IXFeed2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_credentials : Proc(IXFeed2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    clear_credentials : Proc(IXFeed2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ce528e77-3716-4eb7-956d-f5e37502e12a")]
  record IXFeed2, lpVtbl : IXFeed2Vtbl* do
    GUID = LibC::GUID.new(0xce528e77_u32, 0x3716_u16, 0x4eb7_u16, StaticArray[0x95_u8, 0x6d_u8, 0xf5_u8, 0xe3_u8, 0x75_u8, 0x2_u8, 0xe1_u8, 0x2a_u8])
    def query_interface(this : IXFeed2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeed2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeed2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def xml(this : IXFeed2*, uiItemCount : UInt32, sortProperty : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, sortOrder : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, filterFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, includeFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, pps : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, uiItemCount, sortProperty, sortOrder, filterFlags, includeFlags, pps)
    end
    def name(this : IXFeed2*, ppszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name.call(this, ppszName)
    end
    def rename(this : IXFeed2*, pszName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename.call(this, pszName)
    end
    def url(this : IXFeed2*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.url.call(this, ppszUrl)
    end
    def set_url(this : IXFeed2*, pszUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_url.call(this, pszUrl)
    end
    def local_id(this : IXFeed2*, pguid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.local_id.call(this, pguid)
    end
    def path(this : IXFeed2*, ppszPath : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.path.call(this, ppszPath)
    end
    def move(this : IXFeed2*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, pszPath)
    end
    def parent(this : IXFeed2*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parent.call(this, riid, ppv)
    end
    def last_write_time(this : IXFeed2*, pstLastWriteTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_write_time.call(this, pstLastWriteTime)
    end
    def delete(this : IXFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def download(this : IXFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download.call(this)
    end
    def async_download(this : IXFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_download.call(this)
    end
    def cancel_async_download(this : IXFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_async_download.call(this)
    end
    def sync_setting(this : IXFeed2*, pfss : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync_setting.call(this, pfss)
    end
    def set_sync_setting(this : IXFeed2*, fss : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_setting.call(this, fss)
    end
    def interval(this : IXFeed2*, puiInterval : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.interval.call(this, puiInterval)
    end
    def set_interval(this : IXFeed2*, uiInterval : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interval.call(this, uiInterval)
    end
    def last_download_time(this : IXFeed2*, pstLastDownloadTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_download_time.call(this, pstLastDownloadTime)
    end
    def local_enclosure_path(this : IXFeed2*, ppszPath : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.local_enclosure_path.call(this, ppszPath)
    end
    def items(this : IXFeed2*, ppfe : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.items.call(this, ppfe)
    end
    def get_item(this : IXFeed2*, uiId : UInt32, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, uiId, riid, ppv)
    end
    def mark_all_items_read(this : IXFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mark_all_items_read.call(this)
    end
    def max_item_count(this : IXFeed2*, puiMaxItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.max_item_count.call(this, puiMaxItemCount)
    end
    def set_max_item_count(this : IXFeed2*, uiMaxItemCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_max_item_count.call(this, uiMaxItemCount)
    end
    def download_enclosures_automatically(this : IXFeed2*, pbDownloadEnclosuresAutomatically : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_enclosures_automatically.call(this, pbDownloadEnclosuresAutomatically)
    end
    def set_download_enclosures_automatically(this : IXFeed2*, bDownloadEnclosuresAutomatically : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_download_enclosures_automatically.call(this, bDownloadEnclosuresAutomatically)
    end
    def download_status(this : IXFeed2*, pfds : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_status.call(this, pfds)
    end
    def last_download_error(this : IXFeed2*, pfde : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_download_error.call(this, pfde)
    end
    def merge(this : IXFeed2*, pStream : Void*, pszUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.merge.call(this, pStream, pszUrl)
    end
    def download_url(this : IXFeed2*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_url.call(this, ppszUrl)
    end
    def title(this : IXFeed2*, ppszTitle : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.title.call(this, ppszTitle)
    end
    def description(this : IXFeed2*, ppszDescription : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.description.call(this, ppszDescription)
    end
    def link(this : IXFeed2*, ppszHomePage : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.link.call(this, ppszHomePage)
    end
    def image(this : IXFeed2*, ppszImageUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.image.call(this, ppszImageUrl)
    end
    def last_build_date(this : IXFeed2*, pstLastBuildDate : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_build_date.call(this, pstLastBuildDate)
    end
    def pub_date(this : IXFeed2*, pstPubDate : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pub_date.call(this, pstPubDate)
    end
    def ttl(this : IXFeed2*, puiTtl : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ttl.call(this, puiTtl)
    end
    def language(this : IXFeed2*, ppszLanguage : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.language.call(this, ppszLanguage)
    end
    def copyright(this : IXFeed2*, ppszCopyright : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copyright.call(this, ppszCopyright)
    end
    def is_list(this : IXFeed2*, pbIsList : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_list.call(this, pbIsList)
    end
    def get_watcher(this : IXFeed2*, scope : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, mask : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_watcher.call(this, scope, mask, riid, ppv)
    end
    def unread_item_count(this : IXFeed2*, puiUnreadItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unread_item_count.call(this, puiUnreadItemCount)
    end
    def item_count(this : IXFeed2*, puiItemCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item_count.call(this, puiItemCount)
    end
    def get_item_by_effective_id(this : IXFeed2*, uiEffectiveId : UInt32, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_effective_id.call(this, uiEffectiveId, riid, ppv)
    end
    def last_item_download_time(this : IXFeed2*, pstLastItemDownloadTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_item_download_time.call(this, pstLastItemDownloadTime)
    end
    def username(this : IXFeed2*, ppszUsername : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.username.call(this, ppszUsername)
    end
    def password(this : IXFeed2*, ppszPassword : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.password.call(this, ppszPassword)
    end
    def set_credentials(this : IXFeed2*, pszUsername : Win32cr::Foundation::PWSTR, pszPassword : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_credentials.call(this, pszUsername, pszPassword)
    end
    def clear_credentials(this : IXFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_credentials.call(this)
    end

  end

  @[Extern]
  record IXFeedEventsVtbl,
    query_interface : Proc(IXFeedEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedEvents*, UInt32),
    release : Proc(IXFeedEvents*, UInt32),
    error : Proc(IXFeedEvents*, Win32cr::Foundation::HRESULT),
    feed_deleted : Proc(IXFeedEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_renamed : Proc(IXFeedEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_url_changed : Proc(IXFeedEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_moved : Proc(IXFeedEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_downloading : Proc(IXFeedEvents*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    feed_download_completed : Proc(IXFeedEvents*, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR, Win32cr::Foundation::HRESULT),
    feed_item_count_changed : Proc(IXFeedEvents*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1630852e-1263-465b-98e5-fe60ffec4ac2")]
  record IXFeedEvents, lpVtbl : IXFeedEventsVtbl* do
    GUID = LibC::GUID.new(0x1630852e_u32, 0x1263_u16, 0x465b_u16, StaticArray[0x98_u8, 0xe5_u8, 0xfe_u8, 0x60_u8, 0xff_u8, 0xec_u8, 0x4a_u8, 0xc2_u8])
    def query_interface(this : IXFeedEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def error(this : IXFeedEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.error.call(this)
    end
    def feed_deleted(this : IXFeedEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_deleted.call(this, pszPath)
    end
    def feed_renamed(this : IXFeedEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_renamed.call(this, pszPath, pszOldPath)
    end
    def feed_url_changed(this : IXFeedEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_url_changed.call(this, pszPath)
    end
    def feed_moved(this : IXFeedEvents*, pszPath : Win32cr::Foundation::PWSTR, pszOldPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_moved.call(this, pszPath, pszOldPath)
    end
    def feed_downloading(this : IXFeedEvents*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_downloading.call(this, pszPath)
    end
    def feed_download_completed(this : IXFeedEvents*, pszPath : Win32cr::Foundation::PWSTR, fde : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_download_completed.call(this, pszPath, fde)
    end
    def feed_item_count_changed(this : IXFeedEvents*, pszPath : Win32cr::Foundation::PWSTR, feicfFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_item_count_changed.call(this, pszPath, feicfFlags)
    end

  end

  @[Extern]
  record IXFeedItemVtbl,
    query_interface : Proc(IXFeedItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedItem*, UInt32),
    release : Proc(IXFeedItem*, UInt32),
    xml : Proc(IXFeedItem*, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    title : Proc(IXFeedItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    link : Proc(IXFeedItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    guid : Proc(IXFeedItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    description : Proc(IXFeedItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    pub_date : Proc(IXFeedItem*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    comments : Proc(IXFeedItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    author : Proc(IXFeedItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    enclosure : Proc(IXFeedItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_read : Proc(IXFeedItem*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_is_read : Proc(IXFeedItem*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    local_id : Proc(IXFeedItem*, UInt32*, Win32cr::Foundation::HRESULT),
    parent : Proc(IXFeedItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IXFeedItem*, Win32cr::Foundation::HRESULT),
    download_url : Proc(IXFeedItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    last_download_time : Proc(IXFeedItem*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    modified : Proc(IXFeedItem*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e757b2f5-e73e-434e-a1bf-2bd7c3e60fcb")]
  record IXFeedItem, lpVtbl : IXFeedItemVtbl* do
    GUID = LibC::GUID.new(0xe757b2f5_u32, 0xe73e_u16, 0x434e_u16, StaticArray[0xa1_u8, 0xbf_u8, 0x2b_u8, 0xd7_u8, 0xc3_u8, 0xe6_u8, 0xf_u8, 0xcb_u8])
    def query_interface(this : IXFeedItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def xml(this : IXFeedItem*, fxif : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, pps : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, fxif, pps)
    end
    def title(this : IXFeedItem*, ppszTitle : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.title.call(this, ppszTitle)
    end
    def link(this : IXFeedItem*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.link.call(this, ppszUrl)
    end
    def guid(this : IXFeedItem*, ppszGuid : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.guid.call(this, ppszGuid)
    end
    def description(this : IXFeedItem*, ppszDescription : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.description.call(this, ppszDescription)
    end
    def pub_date(this : IXFeedItem*, pstPubDate : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pub_date.call(this, pstPubDate)
    end
    def comments(this : IXFeedItem*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.comments.call(this, ppszUrl)
    end
    def author(this : IXFeedItem*, ppszAuthor : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.author.call(this, ppszAuthor)
    end
    def enclosure(this : IXFeedItem*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enclosure.call(this, riid, ppv)
    end
    def is_read(this : IXFeedItem*, pbIsRead : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_read.call(this, pbIsRead)
    end
    def set_is_read(this : IXFeedItem*, bIsRead : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_is_read.call(this, bIsRead)
    end
    def local_id(this : IXFeedItem*, puiId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.local_id.call(this, puiId)
    end
    def parent(this : IXFeedItem*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parent.call(this, riid, ppv)
    end
    def delete(this : IXFeedItem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def download_url(this : IXFeedItem*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_url.call(this, ppszUrl)
    end
    def last_download_time(this : IXFeedItem*, pstLastDownloadTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_download_time.call(this, pstLastDownloadTime)
    end
    def modified(this : IXFeedItem*, pstModifiedTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.modified.call(this, pstModifiedTime)
    end

  end

  @[Extern]
  record IXFeedItem2Vtbl,
    query_interface : Proc(IXFeedItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedItem2*, UInt32),
    release : Proc(IXFeedItem2*, UInt32),
    xml : Proc(IXFeedItem2*, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    title : Proc(IXFeedItem2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    link : Proc(IXFeedItem2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    guid : Proc(IXFeedItem2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    description : Proc(IXFeedItem2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    pub_date : Proc(IXFeedItem2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    comments : Proc(IXFeedItem2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    author : Proc(IXFeedItem2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    enclosure : Proc(IXFeedItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_read : Proc(IXFeedItem2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_is_read : Proc(IXFeedItem2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    local_id : Proc(IXFeedItem2*, UInt32*, Win32cr::Foundation::HRESULT),
    parent : Proc(IXFeedItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IXFeedItem2*, Win32cr::Foundation::HRESULT),
    download_url : Proc(IXFeedItem2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    last_download_time : Proc(IXFeedItem2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    modified : Proc(IXFeedItem2*, Win32cr::Foundation::SYSTEMTIME*, Win32cr::Foundation::HRESULT),
    effective_id : Proc(IXFeedItem2*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6cda2dc7-9013-4522-9970-2a9dd9ead5a3")]
  record IXFeedItem2, lpVtbl : IXFeedItem2Vtbl* do
    GUID = LibC::GUID.new(0x6cda2dc7_u32, 0x9013_u16, 0x4522_u16, StaticArray[0x99_u8, 0x70_u8, 0x2a_u8, 0x9d_u8, 0xd9_u8, 0xea_u8, 0xd5_u8, 0xa3_u8])
    def query_interface(this : IXFeedItem2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedItem2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedItem2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def xml(this : IXFeedItem2*, fxif : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, pps : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, fxif, pps)
    end
    def title(this : IXFeedItem2*, ppszTitle : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.title.call(this, ppszTitle)
    end
    def link(this : IXFeedItem2*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.link.call(this, ppszUrl)
    end
    def guid(this : IXFeedItem2*, ppszGuid : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.guid.call(this, ppszGuid)
    end
    def description(this : IXFeedItem2*, ppszDescription : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.description.call(this, ppszDescription)
    end
    def pub_date(this : IXFeedItem2*, pstPubDate : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pub_date.call(this, pstPubDate)
    end
    def comments(this : IXFeedItem2*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.comments.call(this, ppszUrl)
    end
    def author(this : IXFeedItem2*, ppszAuthor : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.author.call(this, ppszAuthor)
    end
    def enclosure(this : IXFeedItem2*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enclosure.call(this, riid, ppv)
    end
    def is_read(this : IXFeedItem2*, pbIsRead : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_read.call(this, pbIsRead)
    end
    def set_is_read(this : IXFeedItem2*, bIsRead : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_is_read.call(this, bIsRead)
    end
    def local_id(this : IXFeedItem2*, puiId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.local_id.call(this, puiId)
    end
    def parent(this : IXFeedItem2*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parent.call(this, riid, ppv)
    end
    def delete(this : IXFeedItem2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def download_url(this : IXFeedItem2*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_url.call(this, ppszUrl)
    end
    def last_download_time(this : IXFeedItem2*, pstLastDownloadTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_download_time.call(this, pstLastDownloadTime)
    end
    def modified(this : IXFeedItem2*, pstModifiedTime : Win32cr::Foundation::SYSTEMTIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.modified.call(this, pstModifiedTime)
    end
    def effective_id(this : IXFeedItem2*, puiEffectiveId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.effective_id.call(this, puiEffectiveId)
    end

  end

  @[Extern]
  record IXFeedEnclosureVtbl,
    query_interface : Proc(IXFeedEnclosure*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXFeedEnclosure*, UInt32),
    release : Proc(IXFeedEnclosure*, UInt32),
    url : Proc(IXFeedEnclosure*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    type__ : Proc(IXFeedEnclosure*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    length : Proc(IXFeedEnclosure*, UInt32*, Win32cr::Foundation::HRESULT),
    async_download : Proc(IXFeedEnclosure*, Win32cr::Foundation::HRESULT),
    cancel_async_download : Proc(IXFeedEnclosure*, Win32cr::Foundation::HRESULT),
    download_status : Proc(IXFeedEnclosure*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*, Win32cr::Foundation::HRESULT),
    last_download_error : Proc(IXFeedEnclosure*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*, Win32cr::Foundation::HRESULT),
    local_path : Proc(IXFeedEnclosure*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    parent : Proc(IXFeedEnclosure*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    download_url : Proc(IXFeedEnclosure*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    download_mime_type : Proc(IXFeedEnclosure*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    remove_file : Proc(IXFeedEnclosure*, Win32cr::Foundation::HRESULT),
    set_file : Proc(IXFeedEnclosure*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bfbfb953-644f-4792-b69c-dfaca4cbf89a")]
  record IXFeedEnclosure, lpVtbl : IXFeedEnclosureVtbl* do
    GUID = LibC::GUID.new(0xbfbfb953_u32, 0x644f_u16, 0x4792_u16, StaticArray[0xb6_u8, 0x9c_u8, 0xdf_u8, 0xac_u8, 0xa4_u8, 0xcb_u8, 0xf8_u8, 0x9a_u8])
    def query_interface(this : IXFeedEnclosure*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXFeedEnclosure*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXFeedEnclosure*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def url(this : IXFeedEnclosure*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.url.call(this, ppszUrl)
    end
    def type__(this : IXFeedEnclosure*, ppszMimeType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.type__.call(this, ppszMimeType)
    end
    def length(this : IXFeedEnclosure*, puiLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.length.call(this, puiLength)
    end
    def async_download(this : IXFeedEnclosure*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_download.call(this)
    end
    def cancel_async_download(this : IXFeedEnclosure*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_async_download.call(this)
    end
    def download_status(this : IXFeedEnclosure*, pfds : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_status.call(this, pfds)
    end
    def last_download_error(this : IXFeedEnclosure*, pfde : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.last_download_error.call(this, pfde)
    end
    def local_path(this : IXFeedEnclosure*, ppszPath : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.local_path.call(this, ppszPath)
    end
    def parent(this : IXFeedEnclosure*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parent.call(this, riid, ppv)
    end
    def download_url(this : IXFeedEnclosure*, ppszUrl : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_url.call(this, ppszUrl)
    end
    def download_mime_type(this : IXFeedEnclosure*, ppszMimeType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_mime_type.call(this, ppszMimeType)
    end
    def remove_file(this : IXFeedEnclosure*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_file.call(this)
    end
    def set_file(this : IXFeedEnclosure*, pszDownloadUrl : Win32cr::Foundation::PWSTR, pszDownloadFilePath : Win32cr::Foundation::PWSTR, pszDownloadMimeType : Win32cr::Foundation::PWSTR, pszEnclosureFilename : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_file.call(this, pszDownloadUrl, pszDownloadFilePath, pszDownloadMimeType, pszEnclosureFilename)
    end

  end

  @[Extern]
  record IFeedsManagerVtbl,
    query_interface : Proc(IFeedsManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedsManager*, UInt32),
    release : Proc(IFeedsManager*, UInt32),
    get_type_info_count : Proc(IFeedsManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedsManager*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedsManager*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedsManager*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_RootFolder : Proc(IFeedsManager*, Void**, Win32cr::Foundation::HRESULT),
    is_subscribed : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    exists_feed : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_feed : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_feed_by_url : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    exists_folder : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_folder : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    delete_feed : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    delete_folder : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    background_sync : Proc(IFeedsManager*, Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_ACTION, Win32cr::Foundation::HRESULT),
    get_BackgroundSyncStatus : Proc(IFeedsManager*, Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_STATUS*, Win32cr::Foundation::HRESULT),
    get_DefaultInterval : Proc(IFeedsManager*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultInterval : Proc(IFeedsManager*, Int32, Win32cr::Foundation::HRESULT),
    async_sync_all : Proc(IFeedsManager*, Win32cr::Foundation::HRESULT),
    normalize : Proc(IFeedsManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ItemCountLimit : Proc(IFeedsManager*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a74029cc-1f1a-4906-88f0-810638d86591")]
  record IFeedsManager, lpVtbl : IFeedsManagerVtbl* do
    GUID = LibC::GUID.new(0xa74029cc_u32, 0x1f1a_u16, 0x4906_u16, StaticArray[0x88_u8, 0xf0_u8, 0x81_u8, 0x6_u8, 0x38_u8, 0xd8_u8, 0x65_u8, 0x91_u8])
    def query_interface(this : IFeedsManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedsManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedsManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedsManager*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedsManager*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedsManager*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedsManager*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_RootFolder(this : IFeedsManager*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RootFolder.call(this, disp)
    end
    def is_subscribed(this : IFeedsManager*, feedUrl : Win32cr::Foundation::BSTR, subscribed : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_subscribed.call(this, feedUrl, subscribed)
    end
    def exists_feed(this : IFeedsManager*, feedPath : Win32cr::Foundation::BSTR, exists : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_feed.call(this, feedPath, exists)
    end
    def get_feed(this : IFeedsManager*, feedPath : Win32cr::Foundation::BSTR, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_feed.call(this, feedPath, disp)
    end
    def get_feed_by_url(this : IFeedsManager*, feedUrl : Win32cr::Foundation::BSTR, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_feed_by_url.call(this, feedUrl, disp)
    end
    def exists_folder(this : IFeedsManager*, folderPath : Win32cr::Foundation::BSTR, exists : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_folder.call(this, folderPath, exists)
    end
    def get_folder(this : IFeedsManager*, folderPath : Win32cr::Foundation::BSTR, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_folder.call(this, folderPath, disp)
    end
    def delete_feed(this : IFeedsManager*, feedPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_feed.call(this, feedPath)
    end
    def delete_folder(this : IFeedsManager*, folderPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_folder.call(this, folderPath)
    end
    def background_sync(this : IFeedsManager*, action : Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_ACTION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.background_sync.call(this, action)
    end
    def get_BackgroundSyncStatus(this : IFeedsManager*, status : Win32cr::Media::MediaPlayer::FEEDS_BACKGROUNDSYNC_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BackgroundSyncStatus.call(this, status)
    end
    def get_DefaultInterval(this : IFeedsManager*, minutes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultInterval.call(this, minutes)
    end
    def put_DefaultInterval(this : IFeedsManager*, minutes : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultInterval.call(this, minutes)
    end
    def async_sync_all(this : IFeedsManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_sync_all.call(this)
    end
    def normalize(this : IFeedsManager*, feedXmlIn : Win32cr::Foundation::BSTR, feedXmlOut : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.normalize.call(this, feedXmlIn, feedXmlOut)
    end
    def get_ItemCountLimit(this : IFeedsManager*, itemCountLimit : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemCountLimit.call(this, itemCountLimit)
    end

  end

  @[Extern]
  record IFeedsEnumVtbl,
    query_interface : Proc(IFeedsEnum*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedsEnum*, UInt32),
    release : Proc(IFeedsEnum*, UInt32),
    get_type_info_count : Proc(IFeedsEnum*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedsEnum*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedsEnum*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedsEnum*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IFeedsEnum*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IFeedsEnum*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IFeedsEnum*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e3cd0028-2eed-4c60-8fae-a3225309a836")]
  record IFeedsEnum, lpVtbl : IFeedsEnumVtbl* do
    GUID = LibC::GUID.new(0xe3cd0028_u32, 0x2eed_u16, 0x4c60_u16, StaticArray[0x8f_u8, 0xae_u8, 0xa3_u8, 0x22_u8, 0x53_u8, 0x9_u8, 0xa8_u8, 0x36_u8])
    def query_interface(this : IFeedsEnum*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedsEnum*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedsEnum*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedsEnum*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedsEnum*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedsEnum*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedsEnum*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IFeedsEnum*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def item(this : IFeedsEnum*, index : Int32, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, index, disp)
    end
    def get__NewEnum(this : IFeedsEnum*, enumVar : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, enumVar)
    end

  end

  @[Extern]
  record IFeedFolderVtbl,
    query_interface : Proc(IFeedFolder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedFolder*, UInt32),
    release : Proc(IFeedFolder*, UInt32),
    get_type_info_count : Proc(IFeedFolder*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedFolder*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedFolder*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedFolder*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Feeds : Proc(IFeedFolder*, Void**, Win32cr::Foundation::HRESULT),
    get_Subfolders : Proc(IFeedFolder*, Void**, Win32cr::Foundation::HRESULT),
    create_feed : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    create_subfolder : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    exists_feed : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_feed : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    exists_subfolder : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_subfolder : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IFeedFolder*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFeedFolder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    rename : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IFeedFolder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    move : Proc(IFeedFolder*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IFeedFolder*, Void**, Win32cr::Foundation::HRESULT),
    get_IsRoot : Proc(IFeedFolder*, Int16*, Win32cr::Foundation::HRESULT),
    get_TotalUnreadItemCount : Proc(IFeedFolder*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalItemCount : Proc(IFeedFolder*, Int32*, Win32cr::Foundation::HRESULT),
    get_watcher : Proc(IFeedFolder*, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("81f04ad1-4194-4d7d-86d6-11813cec163c")]
  record IFeedFolder, lpVtbl : IFeedFolderVtbl* do
    GUID = LibC::GUID.new(0x81f04ad1_u32, 0x4194_u16, 0x4d7d_u16, StaticArray[0x86_u8, 0xd6_u8, 0x11_u8, 0x81_u8, 0x3c_u8, 0xec_u8, 0x16_u8, 0x3c_u8])
    def query_interface(this : IFeedFolder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedFolder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedFolder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedFolder*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedFolder*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedFolder*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedFolder*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Feeds(this : IFeedFolder*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Feeds.call(this, disp)
    end
    def get_Subfolders(this : IFeedFolder*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subfolders.call(this, disp)
    end
    def create_feed(this : IFeedFolder*, feedName : Win32cr::Foundation::BSTR, feedUrl : Win32cr::Foundation::BSTR, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_feed.call(this, feedName, feedUrl, disp)
    end
    def create_subfolder(this : IFeedFolder*, folderName : Win32cr::Foundation::BSTR, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_subfolder.call(this, folderName, disp)
    end
    def exists_feed(this : IFeedFolder*, feedName : Win32cr::Foundation::BSTR, exists : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_feed.call(this, feedName, exists)
    end
    def get_feed(this : IFeedFolder*, feedName : Win32cr::Foundation::BSTR, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_feed.call(this, feedName, disp)
    end
    def exists_subfolder(this : IFeedFolder*, folderName : Win32cr::Foundation::BSTR, exists : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists_subfolder.call(this, folderName, exists)
    end
    def get_subfolder(this : IFeedFolder*, folderName : Win32cr::Foundation::BSTR, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subfolder.call(this, folderName, disp)
    end
    def delete(this : IFeedFolder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def get_Name(this : IFeedFolder*, folderName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, folderName)
    end
    def rename(this : IFeedFolder*, folderName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename.call(this, folderName)
    end
    def get_Path(this : IFeedFolder*, folderPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, folderPath)
    end
    def move(this : IFeedFolder*, newParentPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, newParentPath)
    end
    def get_Parent(this : IFeedFolder*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, disp)
    end
    def get_IsRoot(this : IFeedFolder*, isRoot : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRoot.call(this, isRoot)
    end
    def get_TotalUnreadItemCount(this : IFeedFolder*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalUnreadItemCount.call(this, count)
    end
    def get_TotalItemCount(this : IFeedFolder*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalItemCount.call(this, count)
    end
    def get_watcher(this : IFeedFolder*, scope : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, mask : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_watcher.call(this, scope, mask, disp)
    end

  end

  @[Extern]
  record IFeedFolderEventsVtbl,
    query_interface : Proc(IFeedFolderEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedFolderEvents*, UInt32),
    release : Proc(IFeedFolderEvents*, UInt32),
    get_type_info_count : Proc(IFeedFolderEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedFolderEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedFolderEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedFolderEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    error : Proc(IFeedFolderEvents*, Win32cr::Foundation::HRESULT),
    folder_added : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    folder_deleted : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    folder_renamed : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    folder_moved_from : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    folder_moved_to : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    folder_item_count_changed : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT),
    feed_added : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_deleted : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_renamed : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_url_changed : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_moved_from : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_moved_to : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_downloading : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_download_completed : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR, Win32cr::Foundation::HRESULT),
    feed_item_count_changed : Proc(IFeedFolderEvents*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("20a59fa6-a844-4630-9e98-175f70b4d55b")]
  record IFeedFolderEvents, lpVtbl : IFeedFolderEventsVtbl* do
    GUID = LibC::GUID.new(0x20a59fa6_u32, 0xa844_u16, 0x4630_u16, StaticArray[0x9e_u8, 0x98_u8, 0x17_u8, 0x5f_u8, 0x70_u8, 0xb4_u8, 0xd5_u8, 0x5b_u8])
    def query_interface(this : IFeedFolderEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedFolderEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedFolderEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedFolderEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedFolderEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedFolderEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedFolderEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def error(this : IFeedFolderEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.error.call(this)
    end
    def folder_added(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_added.call(this, path)
    end
    def folder_deleted(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_deleted.call(this, path)
    end
    def folder_renamed(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_renamed.call(this, path, oldPath)
    end
    def folder_moved_from(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_moved_from.call(this, path, oldPath)
    end
    def folder_moved_to(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_moved_to.call(this, path, oldPath)
    end
    def folder_item_count_changed(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, itemCountType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.folder_item_count_changed.call(this, path, itemCountType)
    end
    def feed_added(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_added.call(this, path)
    end
    def feed_deleted(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_deleted.call(this, path)
    end
    def feed_renamed(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_renamed.call(this, path, oldPath)
    end
    def feed_url_changed(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_url_changed.call(this, path)
    end
    def feed_moved_from(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_moved_from.call(this, path, oldPath)
    end
    def feed_moved_to(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_moved_to.call(this, path, oldPath)
    end
    def feed_downloading(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_downloading.call(this, path)
    end
    def feed_download_completed(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, error : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_download_completed.call(this, path, error)
    end
    def feed_item_count_changed(this : IFeedFolderEvents*, path : Win32cr::Foundation::BSTR, itemCountType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_item_count_changed.call(this, path, itemCountType)
    end

  end

  @[Extern]
  record IFeedVtbl,
    query_interface : Proc(IFeed*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeed*, UInt32),
    release : Proc(IFeed*, UInt32),
    get_type_info_count : Proc(IFeed*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeed*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeed*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeed*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    xml : Proc(IFeed*, Int32, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    rename : Proc(IFeed*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Url : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Url : Proc(IFeed*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_LocalId : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    move : Proc(IFeed*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IFeed*, Void**, Win32cr::Foundation::HRESULT),
    get_LastWriteTime : Proc(IFeed*, Float64*, Win32cr::Foundation::HRESULT),
    delete : Proc(IFeed*, Win32cr::Foundation::HRESULT),
    download : Proc(IFeed*, Win32cr::Foundation::HRESULT),
    async_download : Proc(IFeed*, Win32cr::Foundation::HRESULT),
    cancel_async_download : Proc(IFeed*, Win32cr::Foundation::HRESULT),
    get_SyncSetting : Proc(IFeed*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*, Win32cr::Foundation::HRESULT),
    put_SyncSetting : Proc(IFeed*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING, Win32cr::Foundation::HRESULT),
    get_Interval : Proc(IFeed*, Int32*, Win32cr::Foundation::HRESULT),
    put_Interval : Proc(IFeed*, Int32, Win32cr::Foundation::HRESULT),
    get_LastDownloadTime : Proc(IFeed*, Float64*, Win32cr::Foundation::HRESULT),
    get_LocalEnclosurePath : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Items : Proc(IFeed*, Void**, Win32cr::Foundation::HRESULT),
    get_item : Proc(IFeed*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Title : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Link : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Image : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LastBuildDate : Proc(IFeed*, Float64*, Win32cr::Foundation::HRESULT),
    get_PubDate : Proc(IFeed*, Float64*, Win32cr::Foundation::HRESULT),
    get_Ttl : Proc(IFeed*, Int32*, Win32cr::Foundation::HRESULT),
    get_Language : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Copyright : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MaxItemCount : Proc(IFeed*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxItemCount : Proc(IFeed*, Int32, Win32cr::Foundation::HRESULT),
    get_DownloadEnclosuresAutomatically : Proc(IFeed*, Int16*, Win32cr::Foundation::HRESULT),
    put_DownloadEnclosuresAutomatically : Proc(IFeed*, Int16, Win32cr::Foundation::HRESULT),
    get_DownloadStatus : Proc(IFeed*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*, Win32cr::Foundation::HRESULT),
    get_LastDownloadError : Proc(IFeed*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*, Win32cr::Foundation::HRESULT),
    merge : Proc(IFeed*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DownloadUrl : Proc(IFeed*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsList : Proc(IFeed*, Int16*, Win32cr::Foundation::HRESULT),
    mark_all_items_read : Proc(IFeed*, Win32cr::Foundation::HRESULT),
    get_watcher : Proc(IFeed*, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, Void**, Win32cr::Foundation::HRESULT),
    get_UnreadItemCount : Proc(IFeed*, Int32*, Win32cr::Foundation::HRESULT),
    get_ItemCount : Proc(IFeed*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f7f915d8-2ede-42bc-98e7-a5d05063a757")]
  record IFeed, lpVtbl : IFeedVtbl* do
    GUID = LibC::GUID.new(0xf7f915d8_u32, 0x2ede_u16, 0x42bc_u16, StaticArray[0x98_u8, 0xe7_u8, 0xa5_u8, 0xd0_u8, 0x50_u8, 0x63_u8, 0xa7_u8, 0x57_u8])
    def query_interface(this : IFeed*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeed*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeed*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeed*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeed*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeed*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeed*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def xml(this : IFeed*, count : Int32, sortProperty : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, sortOrder : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, filterFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, includeFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, xml : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, count, sortProperty, sortOrder, filterFlags, includeFlags, xml)
    end
    def get_Name(this : IFeed*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def rename(this : IFeed*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename.call(this, name)
    end
    def get_Url(this : IFeed*, feedUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Url.call(this, feedUrl)
    end
    def put_Url(this : IFeed*, feedUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Url.call(this, feedUrl)
    end
    def get_LocalId(this : IFeed*, feedGuid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalId.call(this, feedGuid)
    end
    def get_Path(this : IFeed*, path : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, path)
    end
    def move(this : IFeed*, newParentPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, newParentPath)
    end
    def get_Parent(this : IFeed*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, disp)
    end
    def get_LastWriteTime(this : IFeed*, lastWrite : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWriteTime.call(this, lastWrite)
    end
    def delete(this : IFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def download(this : IFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download.call(this)
    end
    def async_download(this : IFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_download.call(this)
    end
    def cancel_async_download(this : IFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_async_download.call(this)
    end
    def get_SyncSetting(this : IFeed*, syncSetting : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SyncSetting.call(this, syncSetting)
    end
    def put_SyncSetting(this : IFeed*, syncSetting : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SyncSetting.call(this, syncSetting)
    end
    def get_Interval(this : IFeed*, minutes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Interval.call(this, minutes)
    end
    def put_Interval(this : IFeed*, minutes : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Interval.call(this, minutes)
    end
    def get_LastDownloadTime(this : IFeed*, lastDownload : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastDownloadTime.call(this, lastDownload)
    end
    def get_LocalEnclosurePath(this : IFeed*, path : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalEnclosurePath.call(this, path)
    end
    def get_Items(this : IFeed*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Items.call(this, disp)
    end
    def get_item(this : IFeed*, itemId : Int32, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, itemId, disp)
    end
    def get_Title(this : IFeed*, title : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Title.call(this, title)
    end
    def get_Description(this : IFeed*, description : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, description)
    end
    def get_Link(this : IFeed*, homePage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Link.call(this, homePage)
    end
    def get_Image(this : IFeed*, imageUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Image.call(this, imageUrl)
    end
    def get_LastBuildDate(this : IFeed*, lastBuildDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastBuildDate.call(this, lastBuildDate)
    end
    def get_PubDate(this : IFeed*, lastPopulateDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PubDate.call(this, lastPopulateDate)
    end
    def get_Ttl(this : IFeed*, ttl : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Ttl.call(this, ttl)
    end
    def get_Language(this : IFeed*, language : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Language.call(this, language)
    end
    def get_Copyright(this : IFeed*, copyright : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Copyright.call(this, copyright)
    end
    def get_MaxItemCount(this : IFeed*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxItemCount.call(this, count)
    end
    def put_MaxItemCount(this : IFeed*, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxItemCount.call(this, count)
    end
    def get_DownloadEnclosuresAutomatically(this : IFeed*, downloadEnclosuresAutomatically : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadEnclosuresAutomatically.call(this, downloadEnclosuresAutomatically)
    end
    def put_DownloadEnclosuresAutomatically(this : IFeed*, downloadEnclosuresAutomatically : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DownloadEnclosuresAutomatically.call(this, downloadEnclosuresAutomatically)
    end
    def get_DownloadStatus(this : IFeed*, status : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadStatus.call(this, status)
    end
    def get_LastDownloadError(this : IFeed*, error : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastDownloadError.call(this, error)
    end
    def merge(this : IFeed*, feedXml : Win32cr::Foundation::BSTR, feedUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.merge.call(this, feedXml, feedUrl)
    end
    def get_DownloadUrl(this : IFeed*, feedUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadUrl.call(this, feedUrl)
    end
    def get_IsList(this : IFeed*, isList : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsList.call(this, isList)
    end
    def mark_all_items_read(this : IFeed*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mark_all_items_read.call(this)
    end
    def get_watcher(this : IFeed*, scope : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, mask : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_watcher.call(this, scope, mask, disp)
    end
    def get_UnreadItemCount(this : IFeed*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UnreadItemCount.call(this, count)
    end
    def get_ItemCount(this : IFeed*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemCount.call(this, count)
    end

  end

  @[Extern]
  record IFeed2Vtbl,
    query_interface : Proc(IFeed2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeed2*, UInt32),
    release : Proc(IFeed2*, UInt32),
    get_type_info_count : Proc(IFeed2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeed2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeed2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeed2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    xml : Proc(IFeed2*, Int32, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    rename : Proc(IFeed2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Url : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Url : Proc(IFeed2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_LocalId : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    move : Proc(IFeed2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IFeed2*, Void**, Win32cr::Foundation::HRESULT),
    get_LastWriteTime : Proc(IFeed2*, Float64*, Win32cr::Foundation::HRESULT),
    delete : Proc(IFeed2*, Win32cr::Foundation::HRESULT),
    download : Proc(IFeed2*, Win32cr::Foundation::HRESULT),
    async_download : Proc(IFeed2*, Win32cr::Foundation::HRESULT),
    cancel_async_download : Proc(IFeed2*, Win32cr::Foundation::HRESULT),
    get_SyncSetting : Proc(IFeed2*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*, Win32cr::Foundation::HRESULT),
    put_SyncSetting : Proc(IFeed2*, Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING, Win32cr::Foundation::HRESULT),
    get_Interval : Proc(IFeed2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Interval : Proc(IFeed2*, Int32, Win32cr::Foundation::HRESULT),
    get_LastDownloadTime : Proc(IFeed2*, Float64*, Win32cr::Foundation::HRESULT),
    get_LocalEnclosurePath : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Items : Proc(IFeed2*, Void**, Win32cr::Foundation::HRESULT),
    get_item : Proc(IFeed2*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Title : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Link : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Image : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LastBuildDate : Proc(IFeed2*, Float64*, Win32cr::Foundation::HRESULT),
    get_PubDate : Proc(IFeed2*, Float64*, Win32cr::Foundation::HRESULT),
    get_Ttl : Proc(IFeed2*, Int32*, Win32cr::Foundation::HRESULT),
    get_Language : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Copyright : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MaxItemCount : Proc(IFeed2*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxItemCount : Proc(IFeed2*, Int32, Win32cr::Foundation::HRESULT),
    get_DownloadEnclosuresAutomatically : Proc(IFeed2*, Int16*, Win32cr::Foundation::HRESULT),
    put_DownloadEnclosuresAutomatically : Proc(IFeed2*, Int16, Win32cr::Foundation::HRESULT),
    get_DownloadStatus : Proc(IFeed2*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*, Win32cr::Foundation::HRESULT),
    get_LastDownloadError : Proc(IFeed2*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*, Win32cr::Foundation::HRESULT),
    merge : Proc(IFeed2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DownloadUrl : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_IsList : Proc(IFeed2*, Int16*, Win32cr::Foundation::HRESULT),
    mark_all_items_read : Proc(IFeed2*, Win32cr::Foundation::HRESULT),
    get_watcher : Proc(IFeed2*, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, Void**, Win32cr::Foundation::HRESULT),
    get_UnreadItemCount : Proc(IFeed2*, Int32*, Win32cr::Foundation::HRESULT),
    get_ItemCount : Proc(IFeed2*, Int32*, Win32cr::Foundation::HRESULT),
    get_item_by_effective_id : Proc(IFeed2*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_LastItemDownloadTime : Proc(IFeed2*, Float64*, Win32cr::Foundation::HRESULT),
    get_Username : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Password : Proc(IFeed2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_credentials : Proc(IFeed2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    clear_credentials : Proc(IFeed2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("33f2ea09-1398-4ab9-b6a4-f94b49d0a42e")]
  record IFeed2, lpVtbl : IFeed2Vtbl* do
    GUID = LibC::GUID.new(0x33f2ea09_u32, 0x1398_u16, 0x4ab9_u16, StaticArray[0xb6_u8, 0xa4_u8, 0xf9_u8, 0x4b_u8, 0x49_u8, 0xd0_u8, 0xa4_u8, 0x2e_u8])
    def query_interface(this : IFeed2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeed2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeed2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeed2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeed2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeed2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeed2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def xml(this : IFeed2*, count : Int32, sortProperty : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_PROPERTY, sortOrder : Win32cr::Media::MediaPlayer::FEEDS_XML_SORT_ORDER, filterFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_FILTER_FLAGS, includeFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, xml : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, count, sortProperty, sortOrder, filterFlags, includeFlags, xml)
    end
    def get_Name(this : IFeed2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def rename(this : IFeed2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rename.call(this, name)
    end
    def get_Url(this : IFeed2*, feedUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Url.call(this, feedUrl)
    end
    def put_Url(this : IFeed2*, feedUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Url.call(this, feedUrl)
    end
    def get_LocalId(this : IFeed2*, feedGuid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalId.call(this, feedGuid)
    end
    def get_Path(this : IFeed2*, path : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, path)
    end
    def move(this : IFeed2*, newParentPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.move.call(this, newParentPath)
    end
    def get_Parent(this : IFeed2*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, disp)
    end
    def get_LastWriteTime(this : IFeed2*, lastWrite : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWriteTime.call(this, lastWrite)
    end
    def delete(this : IFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def download(this : IFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download.call(this)
    end
    def async_download(this : IFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_download.call(this)
    end
    def cancel_async_download(this : IFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_async_download.call(this)
    end
    def get_SyncSetting(this : IFeed2*, syncSetting : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SyncSetting.call(this, syncSetting)
    end
    def put_SyncSetting(this : IFeed2*, syncSetting : Win32cr::Media::MediaPlayer::FEEDS_SYNC_SETTING) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SyncSetting.call(this, syncSetting)
    end
    def get_Interval(this : IFeed2*, minutes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Interval.call(this, minutes)
    end
    def put_Interval(this : IFeed2*, minutes : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Interval.call(this, minutes)
    end
    def get_LastDownloadTime(this : IFeed2*, lastDownload : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastDownloadTime.call(this, lastDownload)
    end
    def get_LocalEnclosurePath(this : IFeed2*, path : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalEnclosurePath.call(this, path)
    end
    def get_Items(this : IFeed2*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Items.call(this, disp)
    end
    def get_item(this : IFeed2*, itemId : Int32, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, itemId, disp)
    end
    def get_Title(this : IFeed2*, title : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Title.call(this, title)
    end
    def get_Description(this : IFeed2*, description : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, description)
    end
    def get_Link(this : IFeed2*, homePage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Link.call(this, homePage)
    end
    def get_Image(this : IFeed2*, imageUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Image.call(this, imageUrl)
    end
    def get_LastBuildDate(this : IFeed2*, lastBuildDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastBuildDate.call(this, lastBuildDate)
    end
    def get_PubDate(this : IFeed2*, lastPopulateDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PubDate.call(this, lastPopulateDate)
    end
    def get_Ttl(this : IFeed2*, ttl : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Ttl.call(this, ttl)
    end
    def get_Language(this : IFeed2*, language : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Language.call(this, language)
    end
    def get_Copyright(this : IFeed2*, copyright : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Copyright.call(this, copyright)
    end
    def get_MaxItemCount(this : IFeed2*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxItemCount.call(this, count)
    end
    def put_MaxItemCount(this : IFeed2*, count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxItemCount.call(this, count)
    end
    def get_DownloadEnclosuresAutomatically(this : IFeed2*, downloadEnclosuresAutomatically : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadEnclosuresAutomatically.call(this, downloadEnclosuresAutomatically)
    end
    def put_DownloadEnclosuresAutomatically(this : IFeed2*, downloadEnclosuresAutomatically : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DownloadEnclosuresAutomatically.call(this, downloadEnclosuresAutomatically)
    end
    def get_DownloadStatus(this : IFeed2*, status : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadStatus.call(this, status)
    end
    def get_LastDownloadError(this : IFeed2*, error : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastDownloadError.call(this, error)
    end
    def merge(this : IFeed2*, feedXml : Win32cr::Foundation::BSTR, feedUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.merge.call(this, feedXml, feedUrl)
    end
    def get_DownloadUrl(this : IFeed2*, feedUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadUrl.call(this, feedUrl)
    end
    def get_IsList(this : IFeed2*, isList : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsList.call(this, isList)
    end
    def mark_all_items_read(this : IFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mark_all_items_read.call(this)
    end
    def get_watcher(this : IFeed2*, scope : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_SCOPE, mask : Win32cr::Media::MediaPlayer::FEEDS_EVENTS_MASK, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_watcher.call(this, scope, mask, disp)
    end
    def get_UnreadItemCount(this : IFeed2*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UnreadItemCount.call(this, count)
    end
    def get_ItemCount(this : IFeed2*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ItemCount.call(this, count)
    end
    def get_item_by_effective_id(this : IFeed2*, itemEffectiveId : Int32, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_effective_id.call(this, itemEffectiveId, disp)
    end
    def get_LastItemDownloadTime(this : IFeed2*, lastItemDownloadTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastItemDownloadTime.call(this, lastItemDownloadTime)
    end
    def get_Username(this : IFeed2*, username : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Username.call(this, username)
    end
    def get_Password(this : IFeed2*, password : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Password.call(this, password)
    end
    def set_credentials(this : IFeed2*, username : Win32cr::Foundation::BSTR, password : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_credentials.call(this, username, password)
    end
    def clear_credentials(this : IFeed2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_credentials.call(this)
    end

  end

  @[Extern]
  record IFeedEventsVtbl,
    query_interface : Proc(IFeedEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedEvents*, UInt32),
    release : Proc(IFeedEvents*, UInt32),
    get_type_info_count : Proc(IFeedEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    error : Proc(IFeedEvents*, Win32cr::Foundation::HRESULT),
    feed_deleted : Proc(IFeedEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_renamed : Proc(IFeedEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_url_changed : Proc(IFeedEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_moved : Proc(IFeedEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_downloading : Proc(IFeedEvents*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    feed_download_completed : Proc(IFeedEvents*, Win32cr::Foundation::BSTR, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR, Win32cr::Foundation::HRESULT),
    feed_item_count_changed : Proc(IFeedEvents*, Win32cr::Foundation::BSTR, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("abf35c99-0681-47ea-9a8c-1436a375a99e")]
  record IFeedEvents, lpVtbl : IFeedEventsVtbl* do
    GUID = LibC::GUID.new(0xabf35c99_u32, 0x681_u16, 0x47ea_u16, StaticArray[0x9a_u8, 0x8c_u8, 0x14_u8, 0x36_u8, 0xa3_u8, 0x75_u8, 0xa9_u8, 0x9e_u8])
    def query_interface(this : IFeedEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def error(this : IFeedEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.error.call(this)
    end
    def feed_deleted(this : IFeedEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_deleted.call(this, path)
    end
    def feed_renamed(this : IFeedEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_renamed.call(this, path, oldPath)
    end
    def feed_url_changed(this : IFeedEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_url_changed.call(this, path)
    end
    def feed_moved(this : IFeedEvents*, path : Win32cr::Foundation::BSTR, oldPath : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_moved.call(this, path, oldPath)
    end
    def feed_downloading(this : IFeedEvents*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_downloading.call(this, path)
    end
    def feed_download_completed(this : IFeedEvents*, path : Win32cr::Foundation::BSTR, error : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_download_completed.call(this, path, error)
    end
    def feed_item_count_changed(this : IFeedEvents*, path : Win32cr::Foundation::BSTR, itemCountType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.feed_item_count_changed.call(this, path, itemCountType)
    end

  end

  @[Extern]
  record IFeedItemVtbl,
    query_interface : Proc(IFeedItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedItem*, UInt32),
    release : Proc(IFeedItem*, UInt32),
    get_type_info_count : Proc(IFeedItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    xml : Proc(IFeedItem*, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Title : Proc(IFeedItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Link : Proc(IFeedItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Guid : Proc(IFeedItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IFeedItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_PubDate : Proc(IFeedItem*, Float64*, Win32cr::Foundation::HRESULT),
    get_Comments : Proc(IFeedItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Author : Proc(IFeedItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Enclosure : Proc(IFeedItem*, Void**, Win32cr::Foundation::HRESULT),
    get_IsRead : Proc(IFeedItem*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsRead : Proc(IFeedItem*, Int16, Win32cr::Foundation::HRESULT),
    get_LocalId : Proc(IFeedItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IFeedItem*, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IFeedItem*, Win32cr::Foundation::HRESULT),
    get_DownloadUrl : Proc(IFeedItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LastDownloadTime : Proc(IFeedItem*, Float64*, Win32cr::Foundation::HRESULT),
    get_Modified : Proc(IFeedItem*, Float64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0a1e6cad-0a47-4da2-a13d-5baaa5c8bd4f")]
  record IFeedItem, lpVtbl : IFeedItemVtbl* do
    GUID = LibC::GUID.new(0xa1e6cad_u32, 0xa47_u16, 0x4da2_u16, StaticArray[0xa1_u8, 0x3d_u8, 0x5b_u8, 0xaa_u8, 0xa5_u8, 0xc8_u8, 0xbd_u8, 0x4f_u8])
    def query_interface(this : IFeedItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def xml(this : IFeedItem*, includeFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, xml : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, includeFlags, xml)
    end
    def get_Title(this : IFeedItem*, title : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Title.call(this, title)
    end
    def get_Link(this : IFeedItem*, linkUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Link.call(this, linkUrl)
    end
    def get_Guid(this : IFeedItem*, itemGuid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Guid.call(this, itemGuid)
    end
    def get_Description(this : IFeedItem*, description : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, description)
    end
    def get_PubDate(this : IFeedItem*, pubDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PubDate.call(this, pubDate)
    end
    def get_Comments(this : IFeedItem*, comments : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Comments.call(this, comments)
    end
    def get_Author(this : IFeedItem*, author : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Author.call(this, author)
    end
    def get_Enclosure(this : IFeedItem*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Enclosure.call(this, disp)
    end
    def get_IsRead(this : IFeedItem*, isRead : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRead.call(this, isRead)
    end
    def put_IsRead(this : IFeedItem*, isRead : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsRead.call(this, isRead)
    end
    def get_LocalId(this : IFeedItem*, itemId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalId.call(this, itemId)
    end
    def get_Parent(this : IFeedItem*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, disp)
    end
    def delete(this : IFeedItem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def get_DownloadUrl(this : IFeedItem*, itemUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadUrl.call(this, itemUrl)
    end
    def get_LastDownloadTime(this : IFeedItem*, lastDownload : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastDownloadTime.call(this, lastDownload)
    end
    def get_Modified(this : IFeedItem*, modified : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modified.call(this, modified)
    end

  end

  @[Extern]
  record IFeedItem2Vtbl,
    query_interface : Proc(IFeedItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedItem2*, UInt32),
    release : Proc(IFeedItem2*, UInt32),
    get_type_info_count : Proc(IFeedItem2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedItem2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedItem2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedItem2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    xml : Proc(IFeedItem2*, Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Title : Proc(IFeedItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Link : Proc(IFeedItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Guid : Proc(IFeedItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IFeedItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_PubDate : Proc(IFeedItem2*, Float64*, Win32cr::Foundation::HRESULT),
    get_Comments : Proc(IFeedItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Author : Proc(IFeedItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Enclosure : Proc(IFeedItem2*, Void**, Win32cr::Foundation::HRESULT),
    get_IsRead : Proc(IFeedItem2*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsRead : Proc(IFeedItem2*, Int16, Win32cr::Foundation::HRESULT),
    get_LocalId : Proc(IFeedItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IFeedItem2*, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IFeedItem2*, Win32cr::Foundation::HRESULT),
    get_DownloadUrl : Proc(IFeedItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LastDownloadTime : Proc(IFeedItem2*, Float64*, Win32cr::Foundation::HRESULT),
    get_Modified : Proc(IFeedItem2*, Float64*, Win32cr::Foundation::HRESULT),
    get_EffectiveId : Proc(IFeedItem2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("79ac9ef4-f9c1-4d2b-a50b-a7ffba4dcf37")]
  record IFeedItem2, lpVtbl : IFeedItem2Vtbl* do
    GUID = LibC::GUID.new(0x79ac9ef4_u32, 0xf9c1_u16, 0x4d2b_u16, StaticArray[0xa5_u8, 0xb_u8, 0xa7_u8, 0xff_u8, 0xba_u8, 0x4d_u8, 0xcf_u8, 0x37_u8])
    def query_interface(this : IFeedItem2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedItem2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedItem2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedItem2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedItem2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedItem2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedItem2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def xml(this : IFeedItem2*, includeFlags : Win32cr::Media::MediaPlayer::FEEDS_XML_INCLUDE_FLAGS, xml : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.xml.call(this, includeFlags, xml)
    end
    def get_Title(this : IFeedItem2*, title : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Title.call(this, title)
    end
    def get_Link(this : IFeedItem2*, linkUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Link.call(this, linkUrl)
    end
    def get_Guid(this : IFeedItem2*, itemGuid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Guid.call(this, itemGuid)
    end
    def get_Description(this : IFeedItem2*, description : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, description)
    end
    def get_PubDate(this : IFeedItem2*, pubDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PubDate.call(this, pubDate)
    end
    def get_Comments(this : IFeedItem2*, comments : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Comments.call(this, comments)
    end
    def get_Author(this : IFeedItem2*, author : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Author.call(this, author)
    end
    def get_Enclosure(this : IFeedItem2*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Enclosure.call(this, disp)
    end
    def get_IsRead(this : IFeedItem2*, isRead : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRead.call(this, isRead)
    end
    def put_IsRead(this : IFeedItem2*, isRead : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsRead.call(this, isRead)
    end
    def get_LocalId(this : IFeedItem2*, itemId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalId.call(this, itemId)
    end
    def get_Parent(this : IFeedItem2*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, disp)
    end
    def delete(this : IFeedItem2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def get_DownloadUrl(this : IFeedItem2*, itemUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadUrl.call(this, itemUrl)
    end
    def get_LastDownloadTime(this : IFeedItem2*, lastDownload : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastDownloadTime.call(this, lastDownload)
    end
    def get_Modified(this : IFeedItem2*, modified : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modified.call(this, modified)
    end
    def get_EffectiveId(this : IFeedItem2*, effectiveId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EffectiveId.call(this, effectiveId)
    end

  end

  @[Extern]
  record IFeedEnclosureVtbl,
    query_interface : Proc(IFeedEnclosure*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFeedEnclosure*, UInt32),
    release : Proc(IFeedEnclosure*, UInt32),
    get_type_info_count : Proc(IFeedEnclosure*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFeedEnclosure*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFeedEnclosure*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFeedEnclosure*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Url : Proc(IFeedEnclosure*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IFeedEnclosure*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IFeedEnclosure*, Int32*, Win32cr::Foundation::HRESULT),
    async_download : Proc(IFeedEnclosure*, Win32cr::Foundation::HRESULT),
    cancel_async_download : Proc(IFeedEnclosure*, Win32cr::Foundation::HRESULT),
    get_DownloadStatus : Proc(IFeedEnclosure*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*, Win32cr::Foundation::HRESULT),
    get_LastDownloadError : Proc(IFeedEnclosure*, Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*, Win32cr::Foundation::HRESULT),
    get_LocalPath : Proc(IFeedEnclosure*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Parent : Proc(IFeedEnclosure*, Void**, Win32cr::Foundation::HRESULT),
    get_DownloadUrl : Proc(IFeedEnclosure*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DownloadMimeType : Proc(IFeedEnclosure*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_file : Proc(IFeedEnclosure*, Win32cr::Foundation::HRESULT),
    set_file : Proc(IFeedEnclosure*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("361c26f7-90a4-4e67-ae09-3a36a546436a")]
  record IFeedEnclosure, lpVtbl : IFeedEnclosureVtbl* do
    GUID = LibC::GUID.new(0x361c26f7_u32, 0x90a4_u16, 0x4e67_u16, StaticArray[0xae_u8, 0x9_u8, 0x3a_u8, 0x36_u8, 0xa5_u8, 0x46_u8, 0x43_u8, 0x6a_u8])
    def query_interface(this : IFeedEnclosure*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFeedEnclosure*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFeedEnclosure*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFeedEnclosure*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFeedEnclosure*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFeedEnclosure*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFeedEnclosure*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Url(this : IFeedEnclosure*, enclosureUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Url.call(this, enclosureUrl)
    end
    def get_Type(this : IFeedEnclosure*, mimeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, mimeType)
    end
    def get_Length(this : IFeedEnclosure*, length : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, length)
    end
    def async_download(this : IFeedEnclosure*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.async_download.call(this)
    end
    def cancel_async_download(this : IFeedEnclosure*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_async_download.call(this)
    end
    def get_DownloadStatus(this : IFeedEnclosure*, status : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadStatus.call(this, status)
    end
    def get_LastDownloadError(this : IFeedEnclosure*, error : Win32cr::Media::MediaPlayer::FEEDS_DOWNLOAD_ERROR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastDownloadError.call(this, error)
    end
    def get_LocalPath(this : IFeedEnclosure*, localPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalPath.call(this, localPath)
    end
    def get_Parent(this : IFeedEnclosure*, disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Parent.call(this, disp)
    end
    def get_DownloadUrl(this : IFeedEnclosure*, enclosureUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadUrl.call(this, enclosureUrl)
    end
    def get_DownloadMimeType(this : IFeedEnclosure*, mimeType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DownloadMimeType.call(this, mimeType)
    end
    def remove_file(this : IFeedEnclosure*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_file.call(this)
    end
    def set_file(this : IFeedEnclosure*, downloadUrl : Win32cr::Foundation::BSTR, downloadFilePath : Win32cr::Foundation::BSTR, downloadMimeType : Win32cr::Foundation::BSTR, enclosureFilename : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_file.call(this, downloadUrl, downloadFilePath, downloadMimeType, enclosureFilename)
    end

  end

  @[Extern]
  record IWMPEffectsVtbl,
    query_interface : Proc(IWMPEffects*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPEffects*, UInt32),
    release : Proc(IWMPEffects*, UInt32),
    render : Proc(IWMPEffects*, Win32cr::Media::MediaPlayer::TimedLevel*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    media_info : Proc(IWMPEffects*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_capabilities : Proc(IWMPEffects*, UInt32*, Win32cr::Foundation::HRESULT),
    get_title : Proc(IWMPEffects*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_preset_title : Proc(IWMPEffects*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_preset_count : Proc(IWMPEffects*, Int32*, Win32cr::Foundation::HRESULT),
    set_current_preset : Proc(IWMPEffects*, Int32, Win32cr::Foundation::HRESULT),
    get_current_preset : Proc(IWMPEffects*, Int32*, Win32cr::Foundation::HRESULT),
    display_property_page : Proc(IWMPEffects*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    go_fullscreen : Proc(IWMPEffects*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    render_full_screen : Proc(IWMPEffects*, Win32cr::Media::MediaPlayer::TimedLevel*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d3984c13-c3cb-48e2-8be5-5168340b4f35")]
  record IWMPEffects, lpVtbl : IWMPEffectsVtbl* do
    GUID = LibC::GUID.new(0xd3984c13_u32, 0xc3cb_u16, 0x48e2_u16, StaticArray[0x8b_u8, 0xe5_u8, 0x51_u8, 0x68_u8, 0x34_u8, 0xb_u8, 0x4f_u8, 0x35_u8])
    def query_interface(this : IWMPEffects*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPEffects*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPEffects*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def render(this : IWMPEffects*, pLevels : Win32cr::Media::MediaPlayer::TimedLevel*, hdc : Win32cr::Graphics::Gdi::HDC, prc : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, pLevels, hdc, prc)
    end
    def media_info(this : IWMPEffects*, lChannelCount : Int32, lSampleRate : Int32, bstrTitle : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.media_info.call(this, lChannelCount, lSampleRate, bstrTitle)
    end
    def get_capabilities(this : IWMPEffects*, pdwCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities.call(this, pdwCapabilities)
    end
    def get_title(this : IWMPEffects*, bstrTitle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_title.call(this, bstrTitle)
    end
    def get_preset_title(this : IWMPEffects*, nPreset : Int32, bstrPresetTitle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preset_title.call(this, nPreset, bstrPresetTitle)
    end
    def get_preset_count(this : IWMPEffects*, pnPresetCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preset_count.call(this, pnPresetCount)
    end
    def set_current_preset(this : IWMPEffects*, nPreset : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_preset.call(this, nPreset)
    end
    def get_current_preset(this : IWMPEffects*, pnPreset : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_preset.call(this, pnPreset)
    end
    def display_property_page(this : IWMPEffects*, hwndOwner : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.display_property_page.call(this, hwndOwner)
    end
    def go_fullscreen(this : IWMPEffects*, fFullScreen : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.go_fullscreen.call(this, fFullScreen)
    end
    def render_full_screen(this : IWMPEffects*, pLevels : Win32cr::Media::MediaPlayer::TimedLevel*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_full_screen.call(this, pLevels)
    end

  end

  @[Extern]
  record IWMPEffects2Vtbl,
    query_interface : Proc(IWMPEffects2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPEffects2*, UInt32),
    release : Proc(IWMPEffects2*, UInt32),
    render : Proc(IWMPEffects2*, Win32cr::Media::MediaPlayer::TimedLevel*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    media_info : Proc(IWMPEffects2*, Int32, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_capabilities : Proc(IWMPEffects2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_title : Proc(IWMPEffects2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_preset_title : Proc(IWMPEffects2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_preset_count : Proc(IWMPEffects2*, Int32*, Win32cr::Foundation::HRESULT),
    set_current_preset : Proc(IWMPEffects2*, Int32, Win32cr::Foundation::HRESULT),
    get_current_preset : Proc(IWMPEffects2*, Int32*, Win32cr::Foundation::HRESULT),
    display_property_page : Proc(IWMPEffects2*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    go_fullscreen : Proc(IWMPEffects2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    render_full_screen : Proc(IWMPEffects2*, Win32cr::Media::MediaPlayer::TimedLevel*, Win32cr::Foundation::HRESULT),
    set_core : Proc(IWMPEffects2*, Void*, Win32cr::Foundation::HRESULT),
    create : Proc(IWMPEffects2*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    destroy : Proc(IWMPEffects2*, Win32cr::Foundation::HRESULT),
    notify_new_media : Proc(IWMPEffects2*, Void*, Win32cr::Foundation::HRESULT),
    on_window_message : Proc(IWMPEffects2*, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT*, Win32cr::Foundation::HRESULT),
    render_windowed : Proc(IWMPEffects2*, Win32cr::Media::MediaPlayer::TimedLevel*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("695386ec-aa3c-4618-a5e1-dd9a8b987632")]
  record IWMPEffects2, lpVtbl : IWMPEffects2Vtbl* do
    GUID = LibC::GUID.new(0x695386ec_u32, 0xaa3c_u16, 0x4618_u16, StaticArray[0xa5_u8, 0xe1_u8, 0xdd_u8, 0x9a_u8, 0x8b_u8, 0x98_u8, 0x76_u8, 0x32_u8])
    def query_interface(this : IWMPEffects2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPEffects2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPEffects2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def render(this : IWMPEffects2*, pLevels : Win32cr::Media::MediaPlayer::TimedLevel*, hdc : Win32cr::Graphics::Gdi::HDC, prc : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, pLevels, hdc, prc)
    end
    def media_info(this : IWMPEffects2*, lChannelCount : Int32, lSampleRate : Int32, bstrTitle : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.media_info.call(this, lChannelCount, lSampleRate, bstrTitle)
    end
    def get_capabilities(this : IWMPEffects2*, pdwCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities.call(this, pdwCapabilities)
    end
    def get_title(this : IWMPEffects2*, bstrTitle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_title.call(this, bstrTitle)
    end
    def get_preset_title(this : IWMPEffects2*, nPreset : Int32, bstrPresetTitle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preset_title.call(this, nPreset, bstrPresetTitle)
    end
    def get_preset_count(this : IWMPEffects2*, pnPresetCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preset_count.call(this, pnPresetCount)
    end
    def set_current_preset(this : IWMPEffects2*, nPreset : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_preset.call(this, nPreset)
    end
    def get_current_preset(this : IWMPEffects2*, pnPreset : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_preset.call(this, pnPreset)
    end
    def display_property_page(this : IWMPEffects2*, hwndOwner : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.display_property_page.call(this, hwndOwner)
    end
    def go_fullscreen(this : IWMPEffects2*, fFullScreen : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.go_fullscreen.call(this, fFullScreen)
    end
    def render_full_screen(this : IWMPEffects2*, pLevels : Win32cr::Media::MediaPlayer::TimedLevel*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_full_screen.call(this, pLevels)
    end
    def set_core(this : IWMPEffects2*, pPlayer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_core.call(this, pPlayer)
    end
    def create(this : IWMPEffects2*, hwndParent : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create.call(this, hwndParent)
    end
    def destroy(this : IWMPEffects2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.destroy.call(this)
    end
    def notify_new_media(this : IWMPEffects2*, pMedia : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_new_media.call(this, pMedia)
    end
    def on_window_message(this : IWMPEffects2*, msg : UInt32, w_param : Win32cr::Foundation::WPARAM, l_param : Win32cr::Foundation::LPARAM, plResultParam : Win32cr::Foundation::LRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_window_message.call(this, msg, w_param, l_param, plResultParam)
    end
    def render_windowed(this : IWMPEffects2*, pData : Win32cr::Media::MediaPlayer::TimedLevel*, fRequiredRender : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_windowed.call(this, pData, fRequiredRender)
    end

  end

  @[Extern]
  record IWMPPluginUIVtbl,
    query_interface : Proc(IWMPPluginUI*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPPluginUI*, UInt32),
    release : Proc(IWMPPluginUI*, UInt32),
    set_core : Proc(IWMPPluginUI*, Void*, Win32cr::Foundation::HRESULT),
    create : Proc(IWMPPluginUI*, Win32cr::Foundation::HWND, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    destroy : Proc(IWMPPluginUI*, Win32cr::Foundation::HRESULT),
    display_property_page : Proc(IWMPPluginUI*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_property : Proc(IWMPPluginUI*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_property : Proc(IWMPPluginUI*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    translate_accelerator : Proc(IWMPPluginUI*, Win32cr::UI::WindowsAndMessaging::MSG*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4c5e8f9f-ad3e-4bf9-9753-fcd30d6d38dd")]
  record IWMPPluginUI, lpVtbl : IWMPPluginUIVtbl* do
    GUID = LibC::GUID.new(0x4c5e8f9f_u32, 0xad3e_u16, 0x4bf9_u16, StaticArray[0x97_u8, 0x53_u8, 0xfc_u8, 0xd3_u8, 0xd_u8, 0x6d_u8, 0x38_u8, 0xdd_u8])
    def query_interface(this : IWMPPluginUI*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPPluginUI*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPPluginUI*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_core(this : IWMPPluginUI*, pCore : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_core.call(this, pCore)
    end
    def create(this : IWMPPluginUI*, hwndParent : Win32cr::Foundation::HWND, phwndWindow : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create.call(this, hwndParent, phwndWindow)
    end
    def destroy(this : IWMPPluginUI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.destroy.call(this)
    end
    def display_property_page(this : IWMPPluginUI*, hwndParent : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.display_property_page.call(this, hwndParent)
    end
    def get_property(this : IWMPPluginUI*, pwszName : Win32cr::Foundation::PWSTR, pvarProperty : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, pwszName, pvarProperty)
    end
    def set_property(this : IWMPPluginUI*, pwszName : Win32cr::Foundation::PWSTR, pvarProperty : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, pwszName, pvarProperty)
    end
    def translate_accelerator(this : IWMPPluginUI*, lpmsg : Win32cr::UI::WindowsAndMessaging::MSG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.translate_accelerator.call(this, lpmsg)
    end

  end

  @[Extern]
  record IWMPContentContainerVtbl,
    query_interface : Proc(IWMPContentContainer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPContentContainer*, UInt32),
    release : Proc(IWMPContentContainer*, UInt32),
    get_id : Proc(IWMPContentContainer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_price : Proc(IWMPContentContainer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IWMPContentContainer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_content_count : Proc(IWMPContentContainer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_content_price : Proc(IWMPContentContainer*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_content_id : Proc(IWMPContentContainer*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ad7f4d9c-1a9f-4ed2-9815-ecc0b58cb616")]
  record IWMPContentContainer, lpVtbl : IWMPContentContainerVtbl* do
    GUID = LibC::GUID.new(0xad7f4d9c_u32, 0x1a9f_u16, 0x4ed2_u16, StaticArray[0x98_u8, 0x15_u8, 0xec_u8, 0xc0_u8, 0xb5_u8, 0x8c_u8, 0xb6_u8, 0x16_u8])
    def query_interface(this : IWMPContentContainer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPContentContainer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPContentContainer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : IWMPContentContainer*, pContentID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, pContentID)
    end
    def get_price(this : IWMPContentContainer*, pbstrPrice : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_price.call(this, pbstrPrice)
    end
    def get_type(this : IWMPContentContainer*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pbstrType)
    end
    def get_content_count(this : IWMPContentContainer*, pcContent : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_count.call(this, pcContent)
    end
    def get_content_price(this : IWMPContentContainer*, idxContent : UInt32, pbstrPrice : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_price.call(this, idxContent, pbstrPrice)
    end
    def get_content_id(this : IWMPContentContainer*, idxContent : UInt32, pContentID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_id.call(this, idxContent, pContentID)
    end

  end

  @[Extern]
  record IWMPContentContainerListVtbl,
    query_interface : Proc(IWMPContentContainerList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPContentContainerList*, UInt32),
    release : Proc(IWMPContentContainerList*, UInt32),
    get_transaction_type : Proc(IWMPContentContainerList*, Win32cr::Media::MediaPlayer::WMPTransactionType*, Win32cr::Foundation::HRESULT),
    get_container_count : Proc(IWMPContentContainerList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_container : Proc(IWMPContentContainerList*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a9937f78-0802-4af8-8b8d-e3f045bc8ab5")]
  record IWMPContentContainerList, lpVtbl : IWMPContentContainerListVtbl* do
    GUID = LibC::GUID.new(0xa9937f78_u32, 0x802_u16, 0x4af8_u16, StaticArray[0x8b_u8, 0x8d_u8, 0xe3_u8, 0xf0_u8, 0x45_u8, 0xbc_u8, 0x8a_u8, 0xb5_u8])
    def query_interface(this : IWMPContentContainerList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPContentContainerList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPContentContainerList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_transaction_type(this : IWMPContentContainerList*, pwmptt : Win32cr::Media::MediaPlayer::WMPTransactionType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transaction_type.call(this, pwmptt)
    end
    def get_container_count(this : IWMPContentContainerList*, pcContainer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_container_count.call(this, pcContainer)
    end
    def get_container(this : IWMPContentContainerList*, idxContainer : UInt32, ppContent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_container.call(this, idxContainer, ppContent)
    end

  end

  @[Extern]
  record IWMPContentPartnerCallbackVtbl,
    query_interface : Proc(IWMPContentPartnerCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPContentPartnerCallback*, UInt32),
    release : Proc(IWMPContentPartnerCallback*, UInt32),
    notify : Proc(IWMPContentPartnerCallback*, Win32cr::Media::MediaPlayer::WMPCallbackNotification, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    buy_complete : Proc(IWMPContentPartnerCallback*, Win32cr::Foundation::HRESULT, UInt32, Win32cr::Foundation::HRESULT),
    download_track : Proc(IWMPContentPartnerCallback*, UInt32, Win32cr::Foundation::BSTR, UInt32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    get_catalog_version : Proc(IWMPContentPartnerCallback*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    update_device_complete : Proc(IWMPContentPartnerCallback*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    change_view : Proc(IWMPContentPartnerCallback*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_list_contents : Proc(IWMPContentPartnerCallback*, UInt32, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    list_contents_complete : Proc(IWMPContentPartnerCallback*, UInt32, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    send_message_complete : Proc(IWMPContentPartnerCallback*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_content_i_ds_in_library : Proc(IWMPContentPartnerCallback*, UInt32*, UInt32**, Win32cr::Foundation::HRESULT),
    refresh_license_complete : Proc(IWMPContentPartnerCallback*, UInt32, UInt32, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    show_popup : Proc(IWMPContentPartnerCallback*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    verify_permission_complete : Proc(IWMPContentPartnerCallback*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9e8f7da2-0695-403c-b697-da10fafaa676")]
  record IWMPContentPartnerCallback, lpVtbl : IWMPContentPartnerCallbackVtbl* do
    GUID = LibC::GUID.new(0x9e8f7da2_u32, 0x695_u16, 0x403c_u16, StaticArray[0xb6_u8, 0x97_u8, 0xda_u8, 0x10_u8, 0xfa_u8, 0xfa_u8, 0xa6_u8, 0x76_u8])
    def query_interface(this : IWMPContentPartnerCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPContentPartnerCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPContentPartnerCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify(this : IWMPContentPartnerCallback*, type__ : Win32cr::Media::MediaPlayer::WMPCallbackNotification, pContext : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, type__, pContext)
    end
    def buy_complete(this : IWMPContentPartnerCallback*, hrResult : Win32cr::Foundation::HRESULT, dwBuyCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.buy_complete.call(this, hrResult, dwBuyCookie)
    end
    def download_track(this : IWMPContentPartnerCallback*, cookie : UInt32, bstrTrackURL : Win32cr::Foundation::BSTR, dwServiceTrackID : UInt32, bstrDownloadParams : Win32cr::Foundation::BSTR, hrDownload : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_track.call(this, cookie, bstrTrackURL, dwServiceTrackID, bstrDownloadParams, hrDownload)
    end
    def get_catalog_version(this : IWMPContentPartnerCallback*, pdwVersion : UInt32*, pdwSchemaVersion : UInt32*, plcid : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_catalog_version.call(this, pdwVersion, pdwSchemaVersion, plcid)
    end
    def update_device_complete(this : IWMPContentPartnerCallback*, bstrDeviceName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_device_complete.call(this, bstrDeviceName)
    end
    def change_view(this : IWMPContentPartnerCallback*, bstrType : Win32cr::Foundation::BSTR, bstrID : Win32cr::Foundation::BSTR, bstrFilter : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_view.call(this, bstrType, bstrID, bstrFilter)
    end
    def add_list_contents(this : IWMPContentPartnerCallback*, dwListCookie : UInt32, cItems : UInt32, prgItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_list_contents.call(this, dwListCookie, cItems, prgItems)
    end
    def list_contents_complete(this : IWMPContentPartnerCallback*, dwListCookie : UInt32, hrSuccess : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.list_contents_complete.call(this, dwListCookie, hrSuccess)
    end
    def send_message_complete(this : IWMPContentPartnerCallback*, bstrMsg : Win32cr::Foundation::BSTR, bstrParam : Win32cr::Foundation::BSTR, bstrResult : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_message_complete.call(this, bstrMsg, bstrParam, bstrResult)
    end
    def get_content_i_ds_in_library(this : IWMPContentPartnerCallback*, pcContentIDs : UInt32*, pprgIDs : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_i_ds_in_library.call(this, pcContentIDs, pprgIDs)
    end
    def refresh_license_complete(this : IWMPContentPartnerCallback*, dwCookie : UInt32, contentID : UInt32, hrRefresh : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh_license_complete.call(this, dwCookie, contentID, hrRefresh)
    end
    def show_popup(this : IWMPContentPartnerCallback*, lIndex : Int32, bstrParameters : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_popup.call(this, lIndex, bstrParameters)
    end
    def verify_permission_complete(this : IWMPContentPartnerCallback*, bstrPermission : Win32cr::Foundation::BSTR, pContext : Win32cr::System::Com::VARIANT*, hrPermission : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify_permission_complete.call(this, bstrPermission, pContext, hrPermission)
    end

  end

  @[Extern]
  record IWMPContentPartnerVtbl,
    query_interface : Proc(IWMPContentPartner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPContentPartner*, UInt32),
    release : Proc(IWMPContentPartner*, UInt32),
    set_callback : Proc(IWMPContentPartner*, Void*, Win32cr::Foundation::HRESULT),
    notify : Proc(IWMPContentPartner*, Win32cr::Media::MediaPlayer::WMPPartnerNotification, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_item_info : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_content_partner_info : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_commands : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::BSTR, UInt32, UInt32*, UInt32*, Win32cr::Media::MediaPlayer::WMPContextMenuInfo**, Win32cr::Foundation::HRESULT),
    invoke_command : Proc(IWMPContentPartner*, UInt32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::BSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    can_buy_silent : Proc(IWMPContentPartner*, Void*, Win32cr::Foundation::BSTR*, Int16*, Win32cr::Foundation::HRESULT),
    buy : Proc(IWMPContentPartner*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_streaming_url : Proc(IWMPContentPartner*, Win32cr::Media::MediaPlayer::WMPStreamingType, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    download : Proc(IWMPContentPartner*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    download_track_complete : Proc(IWMPContentPartner*, Win32cr::Foundation::HRESULT, UInt32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    refresh_license : Proc(IWMPContentPartner*, UInt32, Int16, Win32cr::Foundation::BSTR, Win32cr::Media::MediaPlayer::WMPStreamingType, UInt32, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_catalog_url : Proc(IWMPContentPartner*, UInt32, UInt32, UInt32, UInt32*, Win32cr::Foundation::BSTR*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_template : Proc(IWMPContentPartner*, Win32cr::Media::MediaPlayer::WMPTaskType, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Media::MediaPlayer::WMPTemplateSize*, Win32cr::Foundation::HRESULT),
    update_device : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_list_contents : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, UInt32, Win32cr::Foundation::HRESULT),
    login : Proc(IWMPContentPartner*, Win32cr::System::Com::BLOB, Win32cr::System::Com::BLOB, Int16, Int16, Win32cr::Foundation::HRESULT),
    authenticate : Proc(IWMPContentPartner*, Win32cr::System::Com::BLOB, Win32cr::System::Com::BLOB, Win32cr::Foundation::HRESULT),
    logout : Proc(IWMPContentPartner*, Win32cr::Foundation::HRESULT),
    send_message : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    station_event : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, UInt32, UInt32, UInt32, Win32cr::Foundation::BSTR, UInt32, Win32cr::Foundation::HRESULT),
    compare_container_list_prices : Proc(IWMPContentPartner*, Void*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    verify_permission : Proc(IWMPContentPartner*, Win32cr::Foundation::BSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("55455073-41b5-4e75-87b8-f13bdb291d08")]
  record IWMPContentPartner, lpVtbl : IWMPContentPartnerVtbl* do
    GUID = LibC::GUID.new(0x55455073_u32, 0x41b5_u16, 0x4e75_u16, StaticArray[0x87_u8, 0xb8_u8, 0xf1_u8, 0x3b_u8, 0xdb_u8, 0x29_u8, 0x1d_u8, 0x8_u8])
    def query_interface(this : IWMPContentPartner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPContentPartner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPContentPartner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_callback(this : IWMPContentPartner*, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_callback.call(this, pCallback)
    end
    def notify(this : IWMPContentPartner*, type__ : Win32cr::Media::MediaPlayer::WMPPartnerNotification, pContext : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, type__, pContext)
    end
    def get_item_info(this : IWMPContentPartner*, bstrInfoName : Win32cr::Foundation::BSTR, pContext : Win32cr::System::Com::VARIANT*, pData : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_info.call(this, bstrInfoName, pContext, pData)
    end
    def get_content_partner_info(this : IWMPContentPartner*, bstrInfoName : Win32cr::Foundation::BSTR, pData : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_partner_info.call(this, bstrInfoName, pData)
    end
    def get_commands(this : IWMPContentPartner*, location : Win32cr::Foundation::BSTR, pLocationContext : Win32cr::System::Com::VARIANT*, itemLocation : Win32cr::Foundation::BSTR, cItemIDs : UInt32, prgItemIDs : UInt32*, pcItemIDs : UInt32*, pprgItems : Win32cr::Media::MediaPlayer::WMPContextMenuInfo**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_commands.call(this, location, pLocationContext, itemLocation, cItemIDs, prgItemIDs, pcItemIDs, pprgItems)
    end
    def invoke_command(this : IWMPContentPartner*, dwCommandID : UInt32, location : Win32cr::Foundation::BSTR, pLocationContext : Win32cr::System::Com::VARIANT*, itemLocation : Win32cr::Foundation::BSTR, cItemIDs : UInt32, rgItemIDs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_command.call(this, dwCommandID, location, pLocationContext, itemLocation, cItemIDs, rgItemIDs)
    end
    def can_buy_silent(this : IWMPContentPartner*, pInfo : Void*, pbstrTotalPrice : Win32cr::Foundation::BSTR*, pSilentOK : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_buy_silent.call(this, pInfo, pbstrTotalPrice, pSilentOK)
    end
    def buy(this : IWMPContentPartner*, pInfo : Void*, cookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.buy.call(this, pInfo, cookie)
    end
    def get_streaming_url(this : IWMPContentPartner*, st : Win32cr::Media::MediaPlayer::WMPStreamingType, pStreamContext : Win32cr::System::Com::VARIANT*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_streaming_url.call(this, st, pStreamContext, pbstrURL)
    end
    def download(this : IWMPContentPartner*, pInfo : Void*, cookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download.call(this, pInfo, cookie)
    end
    def download_track_complete(this : IWMPContentPartner*, hrResult : Win32cr::Foundation::HRESULT, contentID : UInt32, downloadTrackParam : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.download_track_complete.call(this, hrResult, contentID, downloadTrackParam)
    end
    def refresh_license(this : IWMPContentPartner*, dwCookie : UInt32, fLocal : Int16, bstrURL : Win32cr::Foundation::BSTR, type__ : Win32cr::Media::MediaPlayer::WMPStreamingType, contentID : UInt32, bstrRefreshReason : Win32cr::Foundation::BSTR, pReasonContext : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh_license.call(this, dwCookie, fLocal, bstrURL, type__, contentID, bstrRefreshReason, pReasonContext)
    end
    def get_catalog_url(this : IWMPContentPartner*, dwCatalogVersion : UInt32, dwCatalogSchemaVersion : UInt32, catalogLCID : UInt32, pdwNewCatalogVersion : UInt32*, pbstrCatalogURL : Win32cr::Foundation::BSTR*, pExpirationDate : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_catalog_url.call(this, dwCatalogVersion, dwCatalogSchemaVersion, catalogLCID, pdwNewCatalogVersion, pbstrCatalogURL, pExpirationDate)
    end
    def get_template(this : IWMPContentPartner*, task : Win32cr::Media::MediaPlayer::WMPTaskType, location : Win32cr::Foundation::BSTR, pContext : Win32cr::System::Com::VARIANT*, clickLocation : Win32cr::Foundation::BSTR, pClickContext : Win32cr::System::Com::VARIANT*, bstrFilter : Win32cr::Foundation::BSTR, bstrViewParams : Win32cr::Foundation::BSTR, pbstrTemplateURL : Win32cr::Foundation::BSTR*, pTemplateSize : Win32cr::Media::MediaPlayer::WMPTemplateSize*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_template.call(this, task, location, pContext, clickLocation, pClickContext, bstrFilter, bstrViewParams, pbstrTemplateURL, pTemplateSize)
    end
    def update_device(this : IWMPContentPartner*, bstrDeviceName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_device.call(this, bstrDeviceName)
    end
    def get_list_contents(this : IWMPContentPartner*, location : Win32cr::Foundation::BSTR, pContext : Win32cr::System::Com::VARIANT*, bstrListType : Win32cr::Foundation::BSTR, bstrParams : Win32cr::Foundation::BSTR, dwListCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_contents.call(this, location, pContext, bstrListType, bstrParams, dwListCookie)
    end
    def login(this : IWMPContentPartner*, userInfo : Win32cr::System::Com::BLOB, pwdInfo : Win32cr::System::Com::BLOB, fUsedCachedCreds : Int16, fOkToCache : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.login.call(this, userInfo, pwdInfo, fUsedCachedCreds, fOkToCache)
    end
    def authenticate(this : IWMPContentPartner*, userInfo : Win32cr::System::Com::BLOB, pwdInfo : Win32cr::System::Com::BLOB) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.authenticate.call(this, userInfo, pwdInfo)
    end
    def logout(this : IWMPContentPartner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logout.call(this)
    end
    def send_message(this : IWMPContentPartner*, bstrMsg : Win32cr::Foundation::BSTR, bstrParam : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_message.call(this, bstrMsg, bstrParam)
    end
    def station_event(this : IWMPContentPartner*, bstrStationEventType : Win32cr::Foundation::BSTR, station_id : UInt32, playlist_index : UInt32, track_id : UInt32, track_data : Win32cr::Foundation::BSTR, dwSecondsPlayed : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.station_event.call(this, bstrStationEventType, station_id, playlist_index, track_id, track_data, dwSecondsPlayed)
    end
    def compare_container_list_prices(this : IWMPContentPartner*, pListBase : Void*, pListCompare : Void*, pResult : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_container_list_prices.call(this, pListBase, pListCompare, pResult)
    end
    def verify_permission(this : IWMPContentPartner*, bstrPermission : Win32cr::Foundation::BSTR, pContext : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.verify_permission.call(this, bstrPermission, pContext)
    end

  end

  @[Extern]
  record IWMPSubscriptionServiceVtbl,
    query_interface : Proc(IWMPSubscriptionService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSubscriptionService*, UInt32),
    release : Proc(IWMPSubscriptionService*, UInt32),
    allowPlay : Proc(IWMPSubscriptionService*, Win32cr::Foundation::HWND, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    allowCDBurn : Proc(IWMPSubscriptionService*, Win32cr::Foundation::HWND, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    allowPDATransfer : Proc(IWMPSubscriptionService*, Win32cr::Foundation::HWND, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    startBackgroundProcessing : Proc(IWMPSubscriptionService*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("376055f8-2a59-4a73-9501-dca5273a7a10")]
  record IWMPSubscriptionService, lpVtbl : IWMPSubscriptionServiceVtbl* do
    GUID = LibC::GUID.new(0x376055f8_u32, 0x2a59_u16, 0x4a73_u16, StaticArray[0x95_u8, 0x1_u8, 0xdc_u8, 0xa5_u8, 0x27_u8, 0x3a_u8, 0x7a_u8, 0x10_u8])
    def query_interface(this : IWMPSubscriptionService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSubscriptionService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSubscriptionService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def allowPlay(this : IWMPSubscriptionService*, hwnd : Win32cr::Foundation::HWND, pMedia : Void*, pfAllowPlay : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allowPlay.call(this, hwnd, pMedia, pfAllowPlay)
    end
    def allowCDBurn(this : IWMPSubscriptionService*, hwnd : Win32cr::Foundation::HWND, pPlaylist : Void*, pfAllowBurn : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allowCDBurn.call(this, hwnd, pPlaylist, pfAllowBurn)
    end
    def allowPDATransfer(this : IWMPSubscriptionService*, hwnd : Win32cr::Foundation::HWND, pPlaylist : Void*, pfAllowTransfer : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allowPDATransfer.call(this, hwnd, pPlaylist, pfAllowTransfer)
    end
    def startBackgroundProcessing(this : IWMPSubscriptionService*, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startBackgroundProcessing.call(this, hwnd)
    end

  end

  @[Extern]
  record IWMPSubscriptionServiceCallbackVtbl,
    query_interface : Proc(IWMPSubscriptionServiceCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSubscriptionServiceCallback*, UInt32),
    release : Proc(IWMPSubscriptionServiceCallback*, UInt32),
    onComplete : Proc(IWMPSubscriptionServiceCallback*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dd01d127-2dc2-4c3a-876e-63312079f9b0")]
  record IWMPSubscriptionServiceCallback, lpVtbl : IWMPSubscriptionServiceCallbackVtbl* do
    GUID = LibC::GUID.new(0xdd01d127_u32, 0x2dc2_u16, 0x4c3a_u16, StaticArray[0x87_u8, 0x6e_u8, 0x63_u8, 0x31_u8, 0x20_u8, 0x79_u8, 0xf9_u8, 0xb0_u8])
    def query_interface(this : IWMPSubscriptionServiceCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSubscriptionServiceCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSubscriptionServiceCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def onComplete(this : IWMPSubscriptionServiceCallback*, hrResult : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.onComplete.call(this, hrResult)
    end

  end

  @[Extern]
  record IWMPSubscriptionService2Vtbl,
    query_interface : Proc(IWMPSubscriptionService2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPSubscriptionService2*, UInt32),
    release : Proc(IWMPSubscriptionService2*, UInt32),
    allowPlay : Proc(IWMPSubscriptionService2*, Win32cr::Foundation::HWND, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    allowCDBurn : Proc(IWMPSubscriptionService2*, Win32cr::Foundation::HWND, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    allowPDATransfer : Proc(IWMPSubscriptionService2*, Win32cr::Foundation::HWND, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    startBackgroundProcessing : Proc(IWMPSubscriptionService2*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    stopBackgroundProcessing : Proc(IWMPSubscriptionService2*, Win32cr::Foundation::HRESULT),
    serviceEvent : Proc(IWMPSubscriptionService2*, Win32cr::Media::MediaPlayer::WMPSubscriptionServiceEvent, Win32cr::Foundation::HRESULT),
    deviceAvailable : Proc(IWMPSubscriptionService2*, Win32cr::Foundation::BSTR, Void*, Win32cr::Foundation::HRESULT),
    prepareForSync : Proc(IWMPSubscriptionService2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a94c120e-d600-4ec6-b05e-ec9d56d84de0")]
  record IWMPSubscriptionService2, lpVtbl : IWMPSubscriptionService2Vtbl* do
    GUID = LibC::GUID.new(0xa94c120e_u32, 0xd600_u16, 0x4ec6_u16, StaticArray[0xb0_u8, 0x5e_u8, 0xec_u8, 0x9d_u8, 0x56_u8, 0xd8_u8, 0x4d_u8, 0xe0_u8])
    def query_interface(this : IWMPSubscriptionService2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPSubscriptionService2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPSubscriptionService2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def allowPlay(this : IWMPSubscriptionService2*, hwnd : Win32cr::Foundation::HWND, pMedia : Void*, pfAllowPlay : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allowPlay.call(this, hwnd, pMedia, pfAllowPlay)
    end
    def allowCDBurn(this : IWMPSubscriptionService2*, hwnd : Win32cr::Foundation::HWND, pPlaylist : Void*, pfAllowBurn : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allowCDBurn.call(this, hwnd, pPlaylist, pfAllowBurn)
    end
    def allowPDATransfer(this : IWMPSubscriptionService2*, hwnd : Win32cr::Foundation::HWND, pPlaylist : Void*, pfAllowTransfer : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allowPDATransfer.call(this, hwnd, pPlaylist, pfAllowTransfer)
    end
    def startBackgroundProcessing(this : IWMPSubscriptionService2*, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startBackgroundProcessing.call(this, hwnd)
    end
    def stopBackgroundProcessing(this : IWMPSubscriptionService2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stopBackgroundProcessing.call(this)
    end
    def serviceEvent(this : IWMPSubscriptionService2*, event : Win32cr::Media::MediaPlayer::WMPSubscriptionServiceEvent) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.serviceEvent.call(this, event)
    end
    def deviceAvailable(this : IWMPSubscriptionService2*, bstrDeviceName : Win32cr::Foundation::BSTR, pCB : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deviceAvailable.call(this, bstrDeviceName, pCB)
    end
    def prepareForSync(this : IWMPSubscriptionService2*, bstrFilename : Win32cr::Foundation::BSTR, bstrDeviceName : Win32cr::Foundation::BSTR, pCB : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepareForSync.call(this, bstrFilename, bstrDeviceName, pCB)
    end

  end

  @[Extern]
  record IWMPDownloadItemVtbl,
    query_interface : Proc(IWMPDownloadItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPDownloadItem*, UInt32),
    release : Proc(IWMPDownloadItem*, UInt32),
    get_type_info_count : Proc(IWMPDownloadItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPDownloadItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPDownloadItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPDownloadItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_sourceURL : Proc(IWMPDownloadItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IWMPDownloadItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IWMPDownloadItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_progress : Proc(IWMPDownloadItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_downloadState : Proc(IWMPDownloadItem*, Win32cr::Media::MediaPlayer::WMPSubscriptionDownloadState*, Win32cr::Foundation::HRESULT),
    pause : Proc(IWMPDownloadItem*, Win32cr::Foundation::HRESULT),
    resume : Proc(IWMPDownloadItem*, Win32cr::Foundation::HRESULT),
    cancel : Proc(IWMPDownloadItem*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c9470e8e-3f6b-46a9-a0a9-452815c34297")]
  record IWMPDownloadItem, lpVtbl : IWMPDownloadItemVtbl* do
    GUID = LibC::GUID.new(0xc9470e8e_u32, 0x3f6b_u16, 0x46a9_u16, StaticArray[0xa0_u8, 0xa9_u8, 0x45_u8, 0x28_u8, 0x15_u8, 0xc3_u8, 0x42_u8, 0x97_u8])
    def query_interface(this : IWMPDownloadItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPDownloadItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPDownloadItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPDownloadItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPDownloadItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPDownloadItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPDownloadItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_sourceURL(this : IWMPDownloadItem*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sourceURL.call(this, pbstrURL)
    end
    def get_size(this : IWMPDownloadItem*, plSize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, plSize)
    end
    def get_type(this : IWMPDownloadItem*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pbstrType)
    end
    def get_progress(this : IWMPDownloadItem*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_progress.call(this, plProgress)
    end
    def get_downloadState(this : IWMPDownloadItem*, pwmpsdls : Win32cr::Media::MediaPlayer::WMPSubscriptionDownloadState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_downloadState.call(this, pwmpsdls)
    end
    def pause(this : IWMPDownloadItem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def resume(this : IWMPDownloadItem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end
    def cancel(this : IWMPDownloadItem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end

  end

  @[Extern]
  record IWMPDownloadItem2Vtbl,
    query_interface : Proc(IWMPDownloadItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPDownloadItem2*, UInt32),
    release : Proc(IWMPDownloadItem2*, UInt32),
    get_type_info_count : Proc(IWMPDownloadItem2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPDownloadItem2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPDownloadItem2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPDownloadItem2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_sourceURL : Proc(IWMPDownloadItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_size : Proc(IWMPDownloadItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IWMPDownloadItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_progress : Proc(IWMPDownloadItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_downloadState : Proc(IWMPDownloadItem2*, Win32cr::Media::MediaPlayer::WMPSubscriptionDownloadState*, Win32cr::Foundation::HRESULT),
    pause : Proc(IWMPDownloadItem2*, Win32cr::Foundation::HRESULT),
    resume : Proc(IWMPDownloadItem2*, Win32cr::Foundation::HRESULT),
    cancel : Proc(IWMPDownloadItem2*, Win32cr::Foundation::HRESULT),
    getItemInfo : Proc(IWMPDownloadItem2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9fbb3336-6da3-479d-b8ff-67d46e20a987")]
  record IWMPDownloadItem2, lpVtbl : IWMPDownloadItem2Vtbl* do
    GUID = LibC::GUID.new(0x9fbb3336_u32, 0x6da3_u16, 0x479d_u16, StaticArray[0xb8_u8, 0xff_u8, 0x67_u8, 0xd4_u8, 0x6e_u8, 0x20_u8, 0xa9_u8, 0x87_u8])
    def query_interface(this : IWMPDownloadItem2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPDownloadItem2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPDownloadItem2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPDownloadItem2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPDownloadItem2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPDownloadItem2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPDownloadItem2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_sourceURL(this : IWMPDownloadItem2*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sourceURL.call(this, pbstrURL)
    end
    def get_size(this : IWMPDownloadItem2*, plSize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size.call(this, plSize)
    end
    def get_type(this : IWMPDownloadItem2*, pbstrType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pbstrType)
    end
    def get_progress(this : IWMPDownloadItem2*, plProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_progress.call(this, plProgress)
    end
    def get_downloadState(this : IWMPDownloadItem2*, pwmpsdls : Win32cr::Media::MediaPlayer::WMPSubscriptionDownloadState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_downloadState.call(this, pwmpsdls)
    end
    def pause(this : IWMPDownloadItem2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def resume(this : IWMPDownloadItem2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end
    def cancel(this : IWMPDownloadItem2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end
    def getItemInfo(this : IWMPDownloadItem2*, bstrItemName : Win32cr::Foundation::BSTR, pbstrVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getItemInfo.call(this, bstrItemName, pbstrVal)
    end

  end

  @[Extern]
  record IWMPDownloadCollectionVtbl,
    query_interface : Proc(IWMPDownloadCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPDownloadCollection*, UInt32),
    release : Proc(IWMPDownloadCollection*, UInt32),
    get_type_info_count : Proc(IWMPDownloadCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPDownloadCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPDownloadCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPDownloadCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_id : Proc(IWMPDownloadCollection*, Int32*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IWMPDownloadCollection*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IWMPDownloadCollection*, Int32, Void**, Win32cr::Foundation::HRESULT),
    startDownload : Proc(IWMPDownloadCollection*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    removeItem : Proc(IWMPDownloadCollection*, Int32, Win32cr::Foundation::HRESULT),
    clear : Proc(IWMPDownloadCollection*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0a319c7f-85f9-436c-b88e-82fd88000e1c")]
  record IWMPDownloadCollection, lpVtbl : IWMPDownloadCollectionVtbl* do
    GUID = LibC::GUID.new(0xa319c7f_u32, 0x85f9_u16, 0x436c_u16, StaticArray[0xb8_u8, 0x8e_u8, 0x82_u8, 0xfd_u8, 0x88_u8, 0x0_u8, 0xe_u8, 0x1c_u8])
    def query_interface(this : IWMPDownloadCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPDownloadCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPDownloadCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPDownloadCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPDownloadCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPDownloadCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPDownloadCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_id(this : IWMPDownloadCollection*, plId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, plId)
    end
    def get_count(this : IWMPDownloadCollection*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def item(this : IWMPDownloadCollection*, lItem : Int32, ppDownload : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, lItem, ppDownload)
    end
    def startDownload(this : IWMPDownloadCollection*, bstrSourceURL : Win32cr::Foundation::BSTR, bstrType : Win32cr::Foundation::BSTR, ppDownload : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.startDownload.call(this, bstrSourceURL, bstrType, ppDownload)
    end
    def removeItem(this : IWMPDownloadCollection*, lItem : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.removeItem.call(this, lItem)
    end
    def clear(this : IWMPDownloadCollection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record IWMPDownloadManagerVtbl,
    query_interface : Proc(IWMPDownloadManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMPDownloadManager*, UInt32),
    release : Proc(IWMPDownloadManager*, UInt32),
    get_type_info_count : Proc(IWMPDownloadManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWMPDownloadManager*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWMPDownloadManager*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWMPDownloadManager*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    getDownloadCollection : Proc(IWMPDownloadManager*, Int32, Void**, Win32cr::Foundation::HRESULT),
    createDownloadCollection : Proc(IWMPDownloadManager*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e15e9ad1-8f20-4cc4-9ec7-1a328ca86a0d")]
  record IWMPDownloadManager, lpVtbl : IWMPDownloadManagerVtbl* do
    GUID = LibC::GUID.new(0xe15e9ad1_u32, 0x8f20_u16, 0x4cc4_u16, StaticArray[0x9e_u8, 0xc7_u8, 0x1a_u8, 0x32_u8, 0x8c_u8, 0xa8_u8, 0x6a_u8, 0xd_u8])
    def query_interface(this : IWMPDownloadManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMPDownloadManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMPDownloadManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWMPDownloadManager*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWMPDownloadManager*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWMPDownloadManager*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWMPDownloadManager*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def getDownloadCollection(this : IWMPDownloadManager*, lCollectionId : Int32, ppCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getDownloadCollection.call(this, lCollectionId, ppCollection)
    end
    def createDownloadCollection(this : IWMPDownloadManager*, ppCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.createDownloadCollection.call(this, ppCollection)
    end

  end

end