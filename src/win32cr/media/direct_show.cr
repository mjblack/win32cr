require "./../foundation.cr"
require "./../system/com.cr"
require "./media_foundation.cr"
require "./../media.cr"
require "./../graphics/gdi.cr"
require "./../system/com/structured_storage.cr"
require "./../system/registry.cr"
require "./../graphics/direct_draw.cr"
require "./audio/direct_sound.cr"
require "./kernel_streaming.cr"
require "./windows_media_format.cr"
require "./audio.cr"
require "./../ui/windows_and_messaging.cr"
require "./../graphics/direct3_d9.cr"
require "./../system/diagnostics/etw.cr"
require "./../system/ole.cr"

module Win32cr::Media::DirectShow
  alias AMGETERRORTEXTPROCA = Proc(Win32cr::Foundation::HRESULT, Win32cr::Foundation::PSTR, UInt32, Win32cr::Foundation::BOOL)*

  alias AMGETERRORTEXTPROCW = Proc(Win32cr::Foundation::HRESULT, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::BOOL)*

  alias PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT = Proc(Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, UInt32*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS = Proc(Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_GETVIDEOPROCESSORCAPS = Proc(Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Media::MediaFoundation::DXVA2_VideoProcessorCaps*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT = Proc(Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS = Proc(Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_GETPROCAMPRANGE = Proc(Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_GETFILTERPROPERTYRANGE = Proc(Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_CREATEVIDEOPROCESSDEVICE = Proc(Void*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_DESTROYVIDEOPROCESSDEVICE = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_VIDEOPROCESSBEGINFRAME = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_VIDEOPROCESSENDFRAME = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_VIDEOPROCESSSETRENDERTARGET = Proc(Win32cr::Foundation::HANDLE, Void*, Win32cr::Foundation::HRESULT)*

  alias PDXVA2SW_VIDEOPROCESSBLT = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::DirectShow::DXVA2_VIDEOPROCESSBLT*, Win32cr::Foundation::HRESULT)*

  EC_SND_DEVICE_ERROR_BASE = 512_u32
  EC_SNDDEV_IN_ERROR = 512_u32
  EC_SNDDEV_OUT_ERROR = 513_u32
  EC_SYSTEMBASE = 0_u32
  EC_USER = 32768_u32
  EC_COMPLETE = 1_u32
  EC_USERABORT = 2_u32
  EC_ERRORABORT = 3_u32
  EC_TIME = 4_u32
  EC_REPAINT = 5_u32
  EC_STREAM_ERROR_STOPPED = 6_u32
  EC_STREAM_ERROR_STILLPLAYING = 7_u32
  EC_ERROR_STILLPLAYING = 8_u32
  EC_PALETTE_CHANGED = 9_u32
  EC_VIDEO_SIZE_CHANGED = 10_u32
  EC_QUALITY_CHANGE = 11_u32
  EC_SHUTTING_DOWN = 12_u32
  EC_CLOCK_CHANGED = 13_u32
  EC_PAUSED = 14_u32
  EC_OPENING_FILE = 16_u32
  EC_BUFFERING_DATA = 17_u32
  EC_FULLSCREEN_LOST = 18_u32
  EC_ACTIVATE = 19_u32
  EC_NEED_RESTART = 20_u32
  EC_WINDOW_DESTROYED = 21_u32
  EC_DISPLAY_CHANGED = 22_u32
  EC_STARVATION = 23_u32
  EC_OLE_EVENT = 24_u32
  EC_NOTIFY_WINDOW = 25_u32
  EC_STREAM_CONTROL_STOPPED = 26_u32
  EC_STREAM_CONTROL_STARTED = 27_u32
  EC_END_OF_SEGMENT = 28_u32
  EC_SEGMENT_STARTED = 29_u32
  EC_LENGTH_CHANGED = 30_u32
  EC_DEVICE_LOST = 31_u32
  EC_SAMPLE_NEEDED = 32_u32
  EC_PROCESSING_LATENCY = 33_u32
  EC_SAMPLE_LATENCY = 34_u32
  EC_SCRUB_TIME = 35_u32
  EC_STEP_COMPLETE = 36_u32
  EC_TIMECODE_AVAILABLE = 48_u32
  EC_EXTDEVICE_MODE_CHANGE = 49_u32
  EC_STATE_CHANGE = 50_u32
  EC_GRAPH_CHANGED = 80_u32
  EC_CLOCK_UNSET = 81_u32
  EC_VMR_RENDERDEVICE_SET = 83_u32
  VMR_RENDER_DEVICE_OVERLAY = 1_u32
  VMR_RENDER_DEVICE_VIDMEM = 2_u32
  VMR_RENDER_DEVICE_SYSMEM = 4_u32
  EC_VMR_SURFACE_FLIPPED = 84_u32
  EC_VMR_RECONNECTION_FAILED = 85_u32
  EC_PREPROCESS_COMPLETE = 86_u32
  EC_CODECAPI_EVENT = 87_u32
  EC_WMT_EVENT_BASE = 593_u32
  EC_WMT_INDEX_EVENT = 593_u32
  EC_WMT_EVENT = 594_u32
  EC_BUILT = 768_u32
  EC_UNBUILT = 769_u32
  EC_SKIP_FRAMES = 37_u32
  EC_PLEASE_REOPEN = 64_u32
  EC_STATUS = 65_u32
  EC_MARKER_HIT = 66_u32
  EC_LOADSTATUS = 67_u32
  EC_FILE_CLOSED = 68_u32
  EC_ERRORABORTEX = 69_u32
  AM_LOADSTATUS_CLOSED = 0_u32
  AM_LOADSTATUS_LOADINGDESCR = 1_u32
  AM_LOADSTATUS_LOADINGMCAST = 2_u32
  AM_LOADSTATUS_LOCATING = 3_u32
  AM_LOADSTATUS_CONNECTING = 4_u32
  AM_LOADSTATUS_OPENING = 5_u32
  AM_LOADSTATUS_OPEN = 6_u32
  EC_NEW_PIN = 32_u32
  EC_RENDER_FINISHED = 33_u32
  EC_EOS_SOON = 70_u32
  EC_CONTENTPROPERTY_CHANGED = 71_u32
  AM_CONTENTPROPERTY_TITLE = 1_u32
  AM_CONTENTPROPERTY_AUTHOR = 2_u32
  AM_CONTENTPROPERTY_COPYRIGHT = 4_u32
  AM_CONTENTPROPERTY_DESCRIPTION = 8_u32
  EC_BANDWIDTHCHANGE = 72_u32
  EC_VIDEOFRAMEREADY = 73_u32
  EC_DVDBASE = 256_u32
  EC_DVD_DOMAIN_CHANGE = 257_u32
  EC_DVD_TITLE_CHANGE = 258_u32
  EC_DVD_CHAPTER_START = 259_u32
  EC_DVD_AUDIO_STREAM_CHANGE = 260_u32
  EC_DVD_SUBPICTURE_STREAM_CHANGE = 261_u32
  EC_DVD_ANGLE_CHANGE = 262_u32
  EC_DVD_BUTTON_CHANGE = 263_u32
  EC_DVD_VALID_UOPS_CHANGE = 264_u32
  EC_DVD_STILL_ON = 265_u32
  EC_DVD_STILL_OFF = 266_u32
  EC_DVD_CURRENT_TIME = 267_u32
  EC_DVD_ERROR = 268_u32
  EC_DVD_WARNING = 269_u32
  EC_DVD_CHAPTER_AUTOSTOP = 270_u32
  EC_DVD_NO_FP_PGC = 271_u32
  EC_DVD_PLAYBACK_RATE_CHANGE = 272_u32
  EC_DVD_PARENTAL_LEVEL_CHANGE = 273_u32
  EC_DVD_PLAYBACK_STOPPED = 274_u32
  EC_DVD_ANGLES_AVAILABLE = 275_u32
  EC_DVD_PLAYPERIOD_AUTOSTOP = 276_u32
  EC_DVD_BUTTON_AUTO_ACTIVATED = 277_u32
  EC_DVD_CMD_START = 278_u32
  EC_DVD_CMD_END = 279_u32
  EC_DVD_DISC_EJECTED = 280_u32
  EC_DVD_DISC_INSERTED = 281_u32
  EC_DVD_CURRENT_HMSF_TIME = 282_u32
  EC_DVD_KARAOKE_MODE = 283_u32
  EC_DVD_PROGRAM_CELL_CHANGE = 284_u32
  EC_DVD_TITLE_SET_CHANGE = 285_u32
  EC_DVD_PROGRAM_CHAIN_CHANGE = 286_u32
  EC_DVD_VOBU_Offset = 287_u32
  EC_DVD_VOBU_Timestamp = 288_u32
  EC_DVD_GPRM_Change = 289_u32
  EC_DVD_SPRM_Change = 290_u32
  EC_DVD_BeginNavigationCommands = 291_u32
  EC_DVD_NavigationCommand = 292_u32
  AM_AC3_ALTERNATE_AUDIO_1 = 1_u32
  AM_AC3_ALTERNATE_AUDIO_2 = 2_u32
  AM_AC3_ALTERNATE_AUDIO_BOTH = 3_u32
  AM_AC3_SERVICE_MAIN_AUDIO = 0_u32
  AM_AC3_SERVICE_NO_DIALOG = 1_u32
  AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2_u32
  AM_AC3_SERVICE_HEARING_IMPAIRED = 3_u32
  AM_AC3_SERVICE_DIALOG_ONLY = 4_u32
  AM_AC3_SERVICE_COMMENTARY = 5_u32
  AM_AC3_SERVICE_EMERGENCY_FLASH = 6_u32
  AM_AC3_SERVICE_VOICE_OVER = 7_u32
  AM_UseNewCSSKey = 1_u32
  AM_ReverseBlockStart = 2_u32
  AM_ReverseBlockEnd = 4_u32
  AM_DVD_CGMS_RESERVED_MASK = 120_u32
  AM_DVD_CGMS_COPY_PROTECT_MASK = 24_u32
  AM_DVD_CGMS_COPY_PERMITTED = 0_u32
  AM_DVD_CGMS_COPY_ONCE = 16_u32
  AM_DVD_CGMS_NO_COPY = 24_u32
  AM_DVD_COPYRIGHT_MASK = 64_u32
  AM_DVD_NOT_COPYRIGHTED = 0_u32
  AM_DVD_COPYRIGHTED = 64_u32
  AM_DVD_SECTOR_PROTECT_MASK = 32_u32
  AM_DVD_SECTOR_NOT_PROTECTED = 0_u32
  AM_DVD_SECTOR_PROTECTED = 32_u32
  AMINTERLACE_IsInterlaced = 1_u32
  AMINTERLACE_1FieldPerSample = 2_u32
  AMINTERLACE_Field1First = 4_u32
  AMINTERLACE_UNUSED = 8_u32
  AMINTERLACE_FieldPatternMask = 48_u32
  AMINTERLACE_FieldPatField1Only = 0_u32
  AMINTERLACE_FieldPatField2Only = 16_u32
  AMINTERLACE_FieldPatBothRegular = 32_u32
  AMINTERLACE_FieldPatBothIrregular = 48_u32
  AMINTERLACE_DisplayModeMask = 192_u32
  AMINTERLACE_DisplayModeBobOnly = 0_u32
  AMINTERLACE_DisplayModeWeaveOnly = 64_u32
  AMINTERLACE_DisplayModeBobOrWeave = 128_u32
  AMCOPYPROTECT_RestrictDuplication = 1_u32
  AMCONTROL_USED = 1_u32
  AMCONTROL_PAD_TO_4x3 = 2_u32
  AMCONTROL_PAD_TO_16x9 = 4_u32
  AMCONTROL_COLORINFO_PRESENT = 128_u32
  AM_VIDEO_FLAG_FIELD_MASK = 3_i32
  AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0_i32
  AM_VIDEO_FLAG_FIELD1 = 1_i32
  AM_VIDEO_FLAG_FIELD2 = 2_i32
  AM_VIDEO_FLAG_FIELD1FIRST = 4_i32
  AM_VIDEO_FLAG_WEAVE = 8_i32
  AM_VIDEO_FLAG_IPB_MASK = 48_i32
  AM_VIDEO_FLAG_I_SAMPLE = 0_i32
  AM_VIDEO_FLAG_P_SAMPLE = 16_i32
  AM_VIDEO_FLAG_B_SAMPLE = 32_i32
  AM_VIDEO_FLAG_REPEAT_FIELD = 64_i32
  AVIF_HASINDEX = 16_u32
  AVIF_MUSTUSEINDEX = 32_u32
  AVIF_ISINTERLEAVED = 256_u32
  AVIF_TRUSTCKTYPE = 2048_u32
  AVIF_WASCAPTUREFILE = 65536_u32
  AVIF_COPYRIGHTED = 131072_u32
  AVI_HEADERSIZE = 2048_u32
  AVISF_DISABLED = 1_u32
  AVISF_VIDEO_PALCHANGES = 65536_u32
  AVIIF_LIST = 1_i32
  AVIIF_KEYFRAME = 16_i32
  AVIIF_FIRSTPART = 32_i32
  AVIIF_LASTPART = 64_i32
  AVIIF_NOTIME = 256_i32
  AVIIF_COMPUSE = 268369920_i32
  AVIIF_NO_TIME = 256_u32
  AVIIF_COMPRESSOR = 268369920_u32
  TIMECODE_RATE_30DROP = 0_u32
  TIMECODE_SMPTE_BINARY_GROUP = 7_u32
  TIMECODE_SMPTE_COLOR_FRAME = 8_u32
  AVI_INDEX_OF_INDEXES = 0_u32
  AVI_INDEX_OF_CHUNKS = 1_u32
  AVI_INDEX_OF_TIMED_CHUNKS = 2_u32
  AVI_INDEX_OF_SUB_2FIELD = 3_u32
  AVI_INDEX_IS_DATA = 128_u32
  AVI_INDEX_SUB_DEFAULT = 0_u32
  AVI_INDEX_SUB_2FIELD = 1_u32
  STDINDEXSIZE = 16384_u32
  AVISTDINDEX_DELTAFRAME = 2147483648_u32
  AMVA_TYPEINDEX_OUTPUTFRAME = 4294967295_u32
  AMVA_QUERYRENDERSTATUSF_READ = 1_u32
  MIN_DIMENSION = 1_u32
  BDA_PLP_ID_NOT_SET = -1_i32
  CDEF_CLASS_DEFAULT = 1_u32
  CDEF_BYPASS_CLASS_MANAGER = 2_u32
  CDEF_MERIT_ABOVE_DO_NOT_USE = 8_u32
  CDEF_DEVMON_CMGR_DEVICE = 16_u32
  CDEF_DEVMON_DMO = 32_u32
  CDEF_DEVMON_PNP_DEVICE = 64_u32
  CDEF_DEVMON_FILTER = 128_u32
  CDEF_DEVMON_SELECTIVE_MASK = 240_u32
  CHARS_IN_GUID = 39_u32
  MAX_PIN_NAME = 128_u32
  MAX_FILTER_NAME = 128_u32
  AM_GBF_PREVFRAMESKIPPED = 1_u32
  AM_GBF_NOTASYNCPOINT = 2_u32
  AM_GBF_NOWAIT = 4_u32
  AM_GBF_NODDSURFACELOCK = 8_u32
  AMF_AUTOMATICGAIN = -1
  AnalogVideo_NTSC_Mask = 7_u32
  AnalogVideo_PAL_Mask = 1052656_u32
  AnalogVideo_SECAM_Mask = 1044480_u32
  MPEG2_PROGRAM_STREAM_MAP = 0_u32
  MPEG2_PROGRAM_ELEMENTARY_STREAM = 1_u32
  MPEG2_PROGRAM_DIRECTORY_PES_PACKET = 2_u32
  MPEG2_PROGRAM_PACK_HEADER = 3_u32
  MPEG2_PROGRAM_PES_STREAM = 4_u32
  MPEG2_PROGRAM_SYSTEM_HEADER = 5_u32
  SUBSTREAM_FILTER_VAL_NONE = 268435456_u32
  AM_GETDECODERCAP_QUERY_VMR_SUPPORT = 1_u32
  VMR_NOTSUPPORTED = 0_u32
  VMR_SUPPORTED = 1_u32
  AM_QUERY_DECODER_VMR_SUPPORT = 1_u32
  AM_QUERY_DECODER_DXVA_1_SUPPORT = 2_u32
  AM_QUERY_DECODER_DVD_SUPPORT = 3_u32
  AM_QUERY_DECODER_ATSC_SD_SUPPORT = 4_u32
  AM_QUERY_DECODER_ATSC_HD_SUPPORT = 5_u32
  AM_GETDECODERCAP_QUERY_VMR9_SUPPORT = 6_u32
  AM_GETDECODERCAP_QUERY_EVR_SUPPORT = 7_u32
  DECODER_CAP_NOTSUPPORTED = 0_u32
  DECODER_CAP_SUPPORTED = 1_u32
  VMRBITMAP_DISABLE = 1_u32
  VMRBITMAP_HDC = 2_u32
  VMRBITMAP_ENTIREDDS = 4_u32
  VMRBITMAP_SRCCOLORKEY = 8_u32
  VMRBITMAP_SRCRECT = 16_u32
  DVD_TITLE_MENU = 0_u32
  DVD_STREAM_DATA_CURRENT = 2048_u32
  DVD_STREAM_DATA_VMGM = 1024_u32
  DVD_STREAM_DATA_VTSM = 1025_u32
  DVD_DEFAULT_AUDIO_STREAM = 15_u32
  DVD_AUDIO_CAPS_AC3 = 1_u32
  DVD_AUDIO_CAPS_MPEG2 = 2_u32
  DVD_AUDIO_CAPS_LPCM = 4_u32
  DVD_AUDIO_CAPS_DTS = 8_u32
  DVD_AUDIO_CAPS_SDDS = 16_u32
  MEDIATYPE_MPEG2_PACK = "36523b13-8ee5-11d1-8ca3-0060b057664a"
  MEDIATYPE_MPEG2_PES = "e06d8020-db46-11cf-b4d1-00805f6cbbea"
  MEDIATYPE_CONTROL = "e06d8021-db46-11cf-b4d1-00805f6cbbea"
  MEDIATYPE_MPEG2_SECTIONS = "455f176c-4b06-47ce-9aef-8caef73df7b5"
  MEDIASUBTYPE_MPEG2_VERSIONED_TABLES = "1ed988b0-3ffc-4523-8725-347beec1a8a0"
  MEDIASUBTYPE_ATSC_SI = "b3c7397c-d303-414d-b33c-4ed2c9d29733"
  MEDIASUBTYPE_DVB_SI = "e9dd31a3-221d-4adb-8532-9af309c1a408"
  MEDIASUBTYPE_ISDB_SI = "e89ad298-3601-4b06-aaec-9ddeedcc5bd0"
  MEDIASUBTYPE_TIF_SI = "ec232eb2-cb96-4191-b226-0ea129f38250"
  MEDIASUBTYPE_MPEG2DATA = "c892e55b-252d-42b5-a316-d997e7a5d995"
  MEDIASUBTYPE_MPEG2_WMDRM_TRANSPORT = "18bec4ea-4676-450e-b478-0cd84c54b327"
  MEDIASUBTYPE_MPEG2_VIDEO = "e06d8026-db46-11cf-b4d1-00805f6cbbea"
  FORMAT_MPEG2_VIDEO = "e06d80e3-db46-11cf-b4d1-00805f6cbbea"
  FORMAT_VIDEOINFO2 = "f72a76a0-eb0a-11d0-ace4-0000c0cc16ba"
  MEDIASUBTYPE_MPEG2_PROGRAM = "e06d8022-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_MPEG2_TRANSPORT = "e06d8023-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_MPEG2_TRANSPORT_STRIDE = "138aa9a4-1ee2-4c5b-988e-19abfdbc8a11"
  MEDIASUBTYPE_MPEG2_UDCR_TRANSPORT = "18bec4ea-4676-450e-b478-0cd84c54b327"
  MEDIASUBTYPE_MPEG2_PBDA_TRANSPORT_RAW = "0d7aed42-cb9a-11db-9705-005056c00008"
  MEDIASUBTYPE_MPEG2_PBDA_TRANSPORT_PROCESSED = "af748dd4-0d80-11db-9705-005056c00008"
  MEDIASUBTYPE_MPEG2_AUDIO = "e06d802b-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_DOLBY_AC3 = "e06d802c-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_DVD_SUBPICTURE = "e06d802d-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_DVD_LPCM_AUDIO = "e06d8032-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_DTS = "e06d8033-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_SDDS = "e06d8034-db46-11cf-b4d1-00805f6cbbea"
  MEDIATYPE_DVD_ENCRYPTED_PACK = "ed0b916a-044d-11d1-aa78-00c04fc31d60"
  MEDIATYPE_DVD_NAVIGATION = "e06d802e-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_DVD_NAVIGATION_PCI = "e06d802f-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_DVD_NAVIGATION_DSI = "e06d8030-db46-11cf-b4d1-00805f6cbbea"
  MEDIASUBTYPE_DVD_NAVIGATION_PROVIDER = "e06d8031-db46-11cf-b4d1-00805f6cbbea"
  FORMAT_MPEG2Video = "e06d80e3-db46-11cf-b4d1-00805f6cbbea"
  FORMAT_DolbyAC3 = "e06d80e4-db46-11cf-b4d1-00805f6cbbea"
  FORMAT_MPEG2Audio = "e06d80e5-db46-11cf-b4d1-00805f6cbbea"
  FORMAT_DVD_LPCMAudio = "e06d80e6-db46-11cf-b4d1-00805f6cbbea"
  FORMAT_UVCH264Video = "2017be05-6629-4248-aaed-7e1a47bc9b9c"
  FORMAT_JPEGImage = "692fa379-d3e8-4651-b5b4-0b94b013eeaf"
  FORMAT_Image = "692fa379-d3e8-4651-b5b4-0b94b013eeaf"
  AM_KSPROPSETID_AC3 = "bfabe720-6e1f-11d0-bcf2-444553540000"
  AM_KSPROPSETID_DvdSubPic = "ac390460-43af-11d0-bd6a-003505c103a9"
  AM_KSPROPSETID_CopyProt = "0e8a0a40-6aef-11d0-9ed0-00a024ca19b3"
  AM_KSPROPSETID_TSRateChange = "a503c5c0-1d1d-11d1-ad80-444553540000"
  AM_KSPROPSETID_DVD_RateChange = "3577eb09-9582-477f-b29c-b0c452a4ff9a"
  AM_KSPROPSETID_DvdKaraoke = "ae4720ae-aa71-42d8-b82a-fffdf58b76fd"
  AM_KSPROPSETID_FrameStep = "c830acbd-ab07-492f-8852-45b6987c2979"
  AM_KSPROPSETID_MPEG4_MediaType_Attributes = "ff6c4bfa-07a9-4c7b-a237-672f9d68065f"
  AM_KSCATEGORY_CAPTURE = "65e8773d-8f56-11d0-a3b9-00a0c9223196"
  AM_KSCATEGORY_RENDER = "65e8773e-8f56-11d0-a3b9-00a0c9223196"
  AM_KSCATEGORY_DATACOMPRESSOR = "1e84c900-7e70-11d0-a5d6-28db04c10000"
  AM_KSCATEGORY_AUDIO = "6994ad04-93ef-11d0-a3cc-00a0c9223196"
  AM_KSCATEGORY_VIDEO = "6994ad05-93ef-11d0-a3cc-00a0c9223196"
  AM_KSCATEGORY_TVTUNER = "a799a800-a46d-11d0-a18c-00a02401dcd4"
  AM_KSCATEGORY_CROSSBAR = "a799a801-a46d-11d0-a18c-00a02401dcd4"
  AM_KSCATEGORY_TVAUDIO = "a799a802-a46d-11d0-a18c-00a02401dcd4"
  AM_KSCATEGORY_VBICODEC = "07dad660-22f1-11d1-a9f4-00c04fbbde8f"
  AM_KSCATEGORY_VBICODEC_MI = "9c24a977-0951-451a-8006-0e49bd28cd5f"
  AM_KSCATEGORY_SPLITTER = "0a4252a0-7e70-11d0-a5d6-28db04c10000"
  AM_INTERFACESETID_Standard = "1a8766a0-62ce-11cf-a5d6-28db04c10000"
  PBDA_AUX_CONNECTOR_TYPE_SVideo = "a0e905f4-24c9-4a54-b761-213355efc13a"
  PBDA_AUX_CONNECTOR_TYPE_Composite = "f6298b4c-c725-4d42-849b-410bbb14ea62"
  CLSID_PBDA_AUX_DATA_TYPE = "fd456373-3323-4090-adca-8ed45f55cf10"
  CLSID_PBDA_Encoder_DATA_TYPE = "728fd6bc-5546-4716-b103-f899f5a1fa68"
  PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0_u32
  PBDA_Encoder_Audio_AlgorithmType_AC3 = 1_u32
  PBDA_Encoder_Video_MPEG2PartII = 0_u32
  PBDA_Encoder_Video_MPEG4Part10 = 1_u32
  PBDA_Encoder_Video_AVC = 1_u32
  PBDA_Encoder_Video_H264 = 1_u32
  PBDA_Encoder_BitrateMode_Constant = 1_u32
  PBDA_Encoder_BitrateMode_Variable = 2_u32
  PBDA_Encoder_BitrateMode_Average = 3_u32
  CLSID_PBDA_FDC_DATA_TYPE = "e7dbf9a0-22ab-4047-8e67-ef9ad504e729"
  CLSID_PBDA_GDDS_DATA_TYPE = "c80c0df3-6052-4c16-9f56-c44c21f73c45"
  LIBID_QuartzNetTypeLib = "56a868b1-0ad4-11ce-b03a-0020af0ba770"
  LIBID_QuartzTypeLib = "56a868b0-0ad4-11ce-b03a-0020af0ba770"
  CLSID_AMMultiMediaStream = "49c47ce5-9ba4-11d0-8212-00c04fc32c45"
  CLSID_AMDirectDrawStream = "49c47ce4-9ba4-11d0-8212-00c04fc32c45"
  CLSID_AMAudioStream = "8496e040-af4c-11d0-8212-00c04fc32c45"
  CLSID_AMAudioData = "f2468580-af8a-11d0-8212-00c04fc32c45"
  CLSID_AMMediaTypeStream = "cf0f2f7c-f7bf-11d0-900d-00c04fd9189d"
  AMDDS_NONE = 0_u32
  AMDDS_DCIPS = 1_u32
  AMDDS_PS = 2_u32
  AMDDS_RGBOVR = 4_u32
  AMDDS_YUVOVR = 8_u32
  AMDDS_RGBOFF = 16_u32
  AMDDS_YUVOFF = 32_u32
  AMDDS_RGBFLP = 64_u32
  AMDDS_YUVFLP = 128_u32
  AMDDS_ALL = 255_u32
  AMDDS_DEFAULT = 255_u32
  Ipalette_colors = 256_u32
  Iega_colors = 16_u32
  Imask_colors = 3_u32
  Itruecolor = 16_u32
  Ired = 0_u32
  Igreen = 1_u32
  Iblue = 2_u32
  Ipalette = 8_u32
  Imaxbits = 8_u32
  MAX_SIZE_MPEG1_SEQUENCE_INFO = 140_u32
  CLSID_DMOWrapperFilter = "94297043-bd82-4dfd-b0de-8177739c6d20"
  CLSID_DMOFilterCategory = "bcd5796c-bd52-4d30-ab76-70f975b89199"
  AM_MPEG_AUDIO_DUAL_MERGE = 0_u32
  AM_MPEG_AUDIO_DUAL_LEFT = 1_u32
  AM_MPEG_AUDIO_DUAL_RIGHT = 2_u32
  VFW_FIRST_CODE = 512_u32
  MAX_ERROR_TEXT_LEN = 160_u32
  MPBOOL_TRUE = 1_u32
  MPBOOL_FALSE = 0_u32
  DWORD_ALLPARAMS = -1_i32
  GUID_TIME_REFERENCE = "93ad712b-daa0-4ffe-bc81-b0ce500fcdd9"
  GUID_TIME_MUSIC = "0574c49d-5b04-4b15-a542-ae282030117b"
  GUID_TIME_SAMPLES = "a8593d05-0c43-4984-9a63-97af9e02c4c0"
  MPF_ENVLP_STANDARD = 0_u32
  MPF_ENVLP_BEGIN_CURRENTVAL = 1_u32
  MPF_ENVLP_BEGIN_NEUTRALVAL = 2_u32
  MPF_PUNCHIN_REFTIME = 0_u32
  MPF_PUNCHIN_NOW = 1_u32
  MPF_PUNCHIN_STOPPED = 2_u32
  MSPID_PrimaryVideo = "a35ff56a-9fda-11d0-8fdf-00c04fd9189d"
  MSPID_PrimaryAudio = "a35ff56b-9fda-11d0-8fdf-00c04fd9189d"
  VFW_E_INVALIDMEDIATYPE = -2147220992_i32
  VFW_E_INVALIDSUBTYPE = -2147220991_i32
  VFW_E_NEED_OWNER = -2147220990_i32
  VFW_E_ENUM_OUT_OF_SYNC = -2147220989_i32
  VFW_E_ALREADY_CONNECTED = -2147220988_i32
  VFW_E_FILTER_ACTIVE = -2147220987_i32
  VFW_E_NO_TYPES = -2147220986_i32
  VFW_E_NO_ACCEPTABLE_TYPES = -2147220985_i32
  VFW_E_INVALID_DIRECTION = -2147220984_i32
  VFW_E_NOT_CONNECTED = -2147220983_i32
  VFW_E_NO_ALLOCATOR = -2147220982_i32
  VFW_E_RUNTIME_ERROR = -2147220981_i32
  VFW_E_BUFFER_NOTSET = -2147220980_i32
  VFW_E_BUFFER_OVERFLOW = -2147220979_i32
  VFW_E_BADALIGN = -2147220978_i32
  VFW_E_ALREADY_COMMITTED = -2147220977_i32
  VFW_E_BUFFERS_OUTSTANDING = -2147220976_i32
  VFW_E_NOT_COMMITTED = -2147220975_i32
  VFW_E_SIZENOTSET = -2147220974_i32
  VFW_E_NO_CLOCK = -2147220973_i32
  VFW_E_NO_SINK = -2147220972_i32
  VFW_E_NO_INTERFACE = -2147220971_i32
  VFW_E_NOT_FOUND = -2147220970_i32
  VFW_E_CANNOT_CONNECT = -2147220969_i32
  VFW_E_CANNOT_RENDER = -2147220968_i32
  VFW_E_CHANGING_FORMAT = -2147220967_i32
  VFW_E_NO_COLOR_KEY_SET = -2147220966_i32
  VFW_E_NOT_OVERLAY_CONNECTION = -2147220965_i32
  VFW_E_NOT_SAMPLE_CONNECTION = -2147220964_i32
  VFW_E_PALETTE_SET = -2147220963_i32
  VFW_E_COLOR_KEY_SET = -2147220962_i32
  VFW_E_NO_COLOR_KEY_FOUND = -2147220961_i32
  VFW_E_NO_PALETTE_AVAILABLE = -2147220960_i32
  VFW_E_NO_DISPLAY_PALETTE = -2147220959_i32
  VFW_E_TOO_MANY_COLORS = -2147220958_i32
  VFW_E_STATE_CHANGED = -2147220957_i32
  VFW_E_NOT_STOPPED = -2147220956_i32
  VFW_E_NOT_PAUSED = -2147220955_i32
  VFW_E_NOT_RUNNING = -2147220954_i32
  VFW_E_WRONG_STATE = -2147220953_i32
  VFW_E_START_TIME_AFTER_END = -2147220952_i32
  VFW_E_INVALID_RECT = -2147220951_i32
  VFW_E_TYPE_NOT_ACCEPTED = -2147220950_i32
  VFW_E_SAMPLE_REJECTED = -2147220949_i32
  VFW_E_SAMPLE_REJECTED_EOS = -2147220948_i32
  VFW_E_DUPLICATE_NAME = -2147220947_i32
  VFW_S_DUPLICATE_NAME = 262701_i32
  VFW_E_TIMEOUT = -2147220946_i32
  VFW_E_INVALID_FILE_FORMAT = -2147220945_i32
  VFW_E_ENUM_OUT_OF_RANGE = -2147220944_i32
  VFW_E_CIRCULAR_GRAPH = -2147220943_i32
  VFW_E_NOT_ALLOWED_TO_SAVE = -2147220942_i32
  VFW_E_TIME_ALREADY_PASSED = -2147220941_i32
  VFW_E_ALREADY_CANCELLED = -2147220940_i32
  VFW_E_CORRUPT_GRAPH_FILE = -2147220939_i32
  VFW_E_ADVISE_ALREADY_SET = -2147220938_i32
  VFW_S_STATE_INTERMEDIATE = 262711_i32
  VFW_E_NO_MODEX_AVAILABLE = -2147220936_i32
  VFW_E_NO_ADVISE_SET = -2147220935_i32
  VFW_E_NO_FULLSCREEN = -2147220934_i32
  VFW_E_IN_FULLSCREEN_MODE = -2147220933_i32
  VFW_E_UNKNOWN_FILE_TYPE = -2147220928_i32
  VFW_E_CANNOT_LOAD_SOURCE_FILTER = -2147220927_i32
  VFW_S_PARTIAL_RENDER = 262722_i32
  VFW_E_FILE_TOO_SHORT = -2147220925_i32
  VFW_E_INVALID_FILE_VERSION = -2147220924_i32
  VFW_S_SOME_DATA_IGNORED = 262725_i32
  VFW_S_CONNECTIONS_DEFERRED = 262726_i32
  VFW_E_INVALID_CLSID = -2147220921_i32
  VFW_E_INVALID_MEDIA_TYPE = -2147220920_i32
  VFW_E_BAD_KEY = -2147220494_i32
  VFW_S_NO_MORE_ITEMS = 262403_i32
  VFW_E_SAMPLE_TIME_NOT_SET = -2147220919_i32
  VFW_S_RESOURCE_NOT_NEEDED = 262736_i32
  VFW_E_MEDIA_TIME_NOT_SET = -2147220911_i32
  VFW_E_NO_TIME_FORMAT_SET = -2147220910_i32
  VFW_E_MONO_AUDIO_HW = -2147220909_i32
  VFW_S_MEDIA_TYPE_IGNORED = 262740_i32
  VFW_E_NO_DECOMPRESSOR = -2147220907_i32
  VFW_E_NO_AUDIO_HARDWARE = -2147220906_i32
  VFW_S_VIDEO_NOT_RENDERED = 262743_i32
  VFW_S_AUDIO_NOT_RENDERED = 262744_i32
  VFW_E_RPZA = -2147220903_i32
  VFW_S_RPZA = 262746_i32
  VFW_E_PROCESSOR_NOT_SUITABLE = -2147220901_i32
  VFW_E_UNSUPPORTED_AUDIO = -2147220900_i32
  VFW_E_UNSUPPORTED_VIDEO = -2147220899_i32
  VFW_E_MPEG_NOT_CONSTRAINED = -2147220898_i32
  VFW_E_NOT_IN_GRAPH = -2147220897_i32
  VFW_S_ESTIMATED = 262752_i32
  VFW_E_NO_TIME_FORMAT = -2147220895_i32
  VFW_E_READ_ONLY = -2147220894_i32
  VFW_S_RESERVED = 262755_i32
  VFW_E_BUFFER_UNDERFLOW = -2147220892_i32
  VFW_E_UNSUPPORTED_STREAM = -2147220891_i32
  VFW_E_NO_TRANSPORT = -2147220890_i32
  VFW_S_STREAM_OFF = 262759_i32
  VFW_S_CANT_CUE = 262760_i32
  VFW_E_BAD_VIDEOCD = -2147220887_i32
  VFW_S_NO_STOP_TIME = 262768_i32
  VFW_E_OUT_OF_VIDEO_MEMORY = -2147220879_i32
  VFW_E_VP_NEGOTIATION_FAILED = -2147220878_i32
  VFW_E_DDRAW_CAPS_NOT_SUITABLE = -2147220877_i32
  VFW_E_NO_VP_HARDWARE = -2147220876_i32
  VFW_E_NO_CAPTURE_HARDWARE = -2147220875_i32
  VFW_E_DVD_OPERATION_INHIBITED = -2147220874_i32
  VFW_E_DVD_INVALIDDOMAIN = -2147220873_i32
  VFW_E_DVD_NO_BUTTON = -2147220872_i32
  VFW_E_DVD_GRAPHNOTREADY = -2147220871_i32
  VFW_E_DVD_RENDERFAIL = -2147220870_i32
  VFW_E_DVD_DECNOTENOUGH = -2147220869_i32
  VFW_E_DDRAW_VERSION_NOT_SUITABLE = -2147220868_i32
  VFW_E_COPYPROT_FAILED = -2147220867_i32
  VFW_S_NOPREVIEWPIN = 262782_i32
  VFW_E_TIME_EXPIRED = -2147220865_i32
  VFW_S_DVD_NON_ONE_SEQUENTIAL = 262784_i32
  VFW_E_DVD_WRONG_SPEED = -2147220863_i32
  VFW_E_DVD_MENU_DOES_NOT_EXIST = -2147220862_i32
  VFW_E_DVD_CMD_CANCELLED = -2147220861_i32
  VFW_E_DVD_STATE_WRONG_VERSION = -2147220860_i32
  VFW_E_DVD_STATE_CORRUPT = -2147220859_i32
  VFW_E_DVD_STATE_WRONG_DISC = -2147220858_i32
  VFW_E_DVD_INCOMPATIBLE_REGION = -2147220857_i32
  VFW_E_DVD_NO_ATTRIBUTES = -2147220856_i32
  VFW_E_DVD_NO_GOUP_PGC = -2147220855_i32
  VFW_E_DVD_LOW_PARENTAL_LEVEL = -2147220854_i32
  VFW_E_DVD_NOT_IN_KARAOKE_MODE = -2147220853_i32
  VFW_S_DVD_CHANNEL_CONTENTS_NOT_AVAILABLE = 262796_i32
  VFW_S_DVD_NOT_ACCURATE = 262797_i32
  VFW_E_FRAME_STEP_UNSUPPORTED = -2147220850_i32
  VFW_E_DVD_STREAM_DISABLED = -2147220849_i32
  VFW_E_DVD_TITLE_UNKNOWN = -2147220848_i32
  VFW_E_DVD_INVALID_DISC = -2147220847_i32
  VFW_E_DVD_NO_RESUME_INFORMATION = -2147220846_i32
  VFW_E_PIN_ALREADY_BLOCKED_ON_THIS_THREAD = -2147220845_i32
  VFW_E_PIN_ALREADY_BLOCKED = -2147220844_i32
  VFW_E_CERTIFICATION_FAILURE = -2147220843_i32
  VFW_E_VMR_NOT_IN_MIXER_MODE = -2147220842_i32
  VFW_E_VMR_NO_AP_SUPPLIED = -2147220841_i32
  VFW_E_VMR_NO_DEINTERLACE_HW = -2147220840_i32
  VFW_E_VMR_NO_PROCAMP_HW = -2147220839_i32
  VFW_E_DVD_VMR9_INCOMPATIBLEDEC = -2147220838_i32
  VFW_E_NO_COPP_HW = -2147220837_i32
  VFW_E_DVD_NONBLOCKING = -2147220836_i32
  VFW_E_DVD_TOO_MANY_RENDERERS_IN_FILTER_GRAPH = -2147220835_i32
  VFW_E_DVD_NON_EVR_RENDERER_IN_FILTER_GRAPH = -2147220834_i32
  VFW_E_DVD_RESOLUTION_ERROR = -2147220833_i32
  E_PROP_SET_UNSUPPORTED = -2147023726_i32
  E_PROP_ID_UNSUPPORTED = -2147023728_i32
  VFW_E_CODECAPI_LINEAR_RANGE = -2147220720_i32
  VFW_E_CODECAPI_ENUMERATED = -2147220719_i32
  VFW_E_CODECAPI_NO_DEFAULT = -2147220717_i32
  VFW_E_CODECAPI_NO_CURRENT_VALUE = -2147220716_i32
  VFW_E_DVD_CHAPTER_DOES_NOT_EXIST = -2147220715_i32
  VFW_S_DVD_RENDER_STATUS = 262944_i32
  CFSTR_VFW_FILTERLIST = "Video for Windows 4 Filters"
  DXVA_ModeNone = "1b81be00-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH261_A = "1b81be01-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH261_B = "1b81be02-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_A = "1b81be03-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_B = "1b81be04-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_C = "1b81be05-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_D = "1b81be06-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_E = "1b81be07-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_F = "1b81be08-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG1_A = "1b81be09-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG1_VLD = "6f3ec719-3735-42cc-8063-65cc3cb36616"
  DXVA_ModeMPEG2_A = "1b81be0a-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_B = "1b81be0b-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_C = "1b81be0c-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_D = "1b81be0d-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2and1_VLD = "86695f12-340e-4f04-9fd3-9253dd327460"
  DXVA_ModeH264_A = "1b81be64-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_B = "1b81be65-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_C = "1b81be66-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_D = "1b81be67-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_E = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_F = "1b81be69-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_VLD_WithFMOASO_NoFGT = "d5f04ff9-3418-45d8-9561-32a76aae2ddd"
  DXVA_ModeH264_VLD_Stereo_Progressive_NoFGT = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  DXVA_ModeH264_VLD_Stereo_NoFGT = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  DXVA_ModeH264_VLD_Multiview_NoFGT = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  DXVA_ModeWMV8_A = "1b81be80-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV8_B = "1b81be81-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_A = "1b81be90-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_B = "1b81be91-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_C = "1b81be94-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_A = "1b81bea0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_B = "1b81bea1-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_C = "1b81bea2-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_D = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG4pt2_VLD_Simple = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  DXVA_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  DXVA_ModeMPEG4pt2_VLD_AdvSimple_GMC = "ab998b5b-4258-44a9-9feb-94e597a6baae"
  DXVA_ModeHEVC_VLD_Main = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  DXVA_ModeHEVC_VLD_Main10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  DXVA_ModeVP9_VLD_Profile0 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  DXVA_ModeVP9_VLD_10bit_Profile2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  DXVA_ModeVP8_VLD = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  DXVA_ModeAV1_VLD_Profile0 = "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a"
  DXVA_ModeAV1_VLD_Profile1 = "6936ff0f-45b1-4163-9cc1-646ef6946108"
  DXVA_ModeAV1_VLD_Profile2 = "0c5f2aa1-e541-4089-bb7b-98110a19d7c8"
  DXVA_ModeAV1_VLD_12bit_Profile2 = "17127009-a00f-4ce1-994e-bf4081f6f3f0"
  DXVA_ModeAV1_VLD_12bit_Profile2_420 = "2d80bed6-9cac-4835-9e91-327bbc4f9ee8"
  DXVA_NoEncrypt = "1b81bed0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_RESTRICTED_MODE_UNRESTRICTED = 65535_u32
  DXVA_RESTRICTED_MODE_H261_A = 1_u32
  DXVA_RESTRICTED_MODE_H261_B = 2_u32
  DXVA_RESTRICTED_MODE_H263_A = 3_u32
  DXVA_RESTRICTED_MODE_H263_B = 4_u32
  DXVA_RESTRICTED_MODE_H263_C = 5_u32
  DXVA_RESTRICTED_MODE_H263_D = 6_u32
  DXVA_RESTRICTED_MODE_H263_E = 7_u32
  DXVA_RESTRICTED_MODE_H263_F = 8_u32
  DXVA_RESTRICTED_MODE_MPEG1_A = 9_u32
  DXVA_RESTRICTED_MODE_MPEG2_A = 10_u32
  DXVA_RESTRICTED_MODE_MPEG2_B = 11_u32
  DXVA_RESTRICTED_MODE_MPEG2_C = 12_u32
  DXVA_RESTRICTED_MODE_MPEG2_D = 13_u32
  DXVA_RESTRICTED_MODE_MPEG1_VLD = 16_u32
  DXVA_RESTRICTED_MODE_MPEG2and1_VLD = 17_u32
  DXVA_RESTRICTED_MODE_H264_A = 100_u32
  DXVA_RESTRICTED_MODE_H264_B = 101_u32
  DXVA_RESTRICTED_MODE_H264_C = 102_u32
  DXVA_RESTRICTED_MODE_H264_D = 103_u32
  DXVA_RESTRICTED_MODE_H264_E = 104_u32
  DXVA_RESTRICTED_MODE_H264_F = 105_u32
  DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = 112_u32
  DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = 113_u32
  DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = 114_u32
  DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = 115_u32
  DXVA_RESTRICTED_MODE_WMV8_A = 128_u32
  DXVA_RESTRICTED_MODE_WMV8_B = 129_u32
  DXVA_RESTRICTED_MODE_WMV9_A = 144_u32
  DXVA_RESTRICTED_MODE_WMV9_B = 145_u32
  DXVA_RESTRICTED_MODE_WMV9_C = 148_u32
  DXVA_RESTRICTED_MODE_VC1_A = 160_u32
  DXVA_RESTRICTED_MODE_VC1_B = 161_u32
  DXVA_RESTRICTED_MODE_VC1_C = 162_u32
  DXVA_RESTRICTED_MODE_VC1_D = 163_u32
  DXVA_RESTRICTED_MODE_VC1_D2010 = 164_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = 176_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = 177_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = 178_u32
  DXVA_RESTRICTED_MODE_WMV8_POSTPROC = 128_u32
  DXVA_RESTRICTED_MODE_WMV8_MOCOMP = 129_u32
  DXVA_RESTRICTED_MODE_WMV9_POSTPROC = 144_u32
  DXVA_RESTRICTED_MODE_WMV9_MOCOMP = 145_u32
  DXVA_RESTRICTED_MODE_WMV9_IDCT = 148_u32
  DXVA_RESTRICTED_MODE_VC1_POSTPROC = 160_u32
  DXVA_RESTRICTED_MODE_VC1_MOCOMP = 161_u32
  DXVA_RESTRICTED_MODE_VC1_IDCT = 162_u32
  DXVA_RESTRICTED_MODE_VC1_VLD = 163_u32
  DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = 100_u32
  DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = 101_u32
  DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = 102_u32
  DXVA_RESTRICTED_MODE_H264_IDCT_FGT = 103_u32
  DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = 104_u32
  DXVA_RESTRICTED_MODE_H264_VLD_FGT = 105_u32
  DXVA_COMPBUFFER_TYPE_THAT_IS_NOT_USED = 0_u32
  DXVA_PICTURE_DECODE_BUFFER = 1_u32
  DXVA_MACROBLOCK_CONTROL_BUFFER = 2_u32
  DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3_u32
  DXVA_DEBLOCKING_CONTROL_BUFFER = 4_u32
  DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5_u32
  DXVA_SLICE_CONTROL_BUFFER = 6_u32
  DXVA_BITSTREAM_DATA_BUFFER = 7_u32
  DXVA_AYUV_BUFFER = 8_u32
  DXVA_IA44_SURFACE_BUFFER = 9_u32
  DXVA_DPXD_SURFACE_BUFFER = 10_u32
  DXVA_HIGHLIGHT_BUFFER = 11_u32
  DXVA_DCCMD_SURFACE_BUFFER = 12_u32
  DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13_u32
  DXVA_PICTURE_RESAMPLE_BUFFER = 14_u32
  DXVA_READ_BACK_BUFFER = 15_u32
  DXVA_MOTION_VECTOR_BUFFER = 16_u32
  DXVA_FILM_GRAIN_BUFFER = 17_u32
  DXVA_NUM_TYPES_COMP_BUFFERS = 18_u32
  DXVA_PICTURE_DECODING_FUNCTION = 1_u32
  DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2_u32
  DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3_u32
  DXVA_PICTURE_RESAMPLE_FUNCTION = 4_u32
  DXVA_DEBLOCKING_FILTER_FUNCTION = 5_u32
  DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6_u32
  DXVA_STATUS_REPORTING_FUNCTION = 7_u32
  DXVA_EXECUTE_RETURN_OK = 0_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3_u32
  DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4_u32
  DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = 16777201_u32
  DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = 16777205_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = 16777208_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = 16777209_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = 16777212_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = 16777211_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = 16777215_u32
  DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = 16776960_u32
  DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = 16776968_u32
  DXVA_CHROMA_FORMAT_420 = 1_u32
  DXVA_CHROMA_FORMAT_422 = 2_u32
  DXVA_CHROMA_FORMAT_444 = 3_u32
  DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1_u32
  DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2_u32
  DXVA_PICTURE_STRUCTURE_FRAME = 3_u32
  DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0_u32
  DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2_u32
  DXVA_SCAN_METHOD_ZIG_ZAG = 0_u32
  DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1_u32
  DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2_u32
  DXVA_SCAN_METHOD_ARBITRARY = 3_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3_u32
  DXVA_USUAL_BLOCK_WIDTH = 8_u32
  DXVA_USUAL_BLOCK_HEIGHT = 8_u32
  DXVA_NumMV_OBMC_off_BinPBwith4MV_off = 4_u32
  DXVA_NumMV_OBMC_off_BinPBwith4MV_on = 5_u32
  DXVA_NumMV_OBMC_on__BinPB_off = 10_u32
  DXVA_NumMV_OBMC_on__BinPB_on = 11_u32
  DXVA_CONFIG_DATA_TYPE_IA44 = 0_u32
  DXVA_CONFIG_DATA_TYPE_AI44 = 1_u32
  DXVA_CONFIG_DATA_TYPE_DPXD = 2_u32
  DXVA_CONFIG_DATA_TYPE_AYUV = 3_u32
  DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0_u32
  DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1_u32
  DXVA_ExtColorData_ShiftBase = 8_u32
  DXVA_DeinterlaceBobDevice = "335aa36e-7884-43a4-9c91-7f87faf3e37e"
  DXVA_DeinterlaceContainerDevice = "0e85cb93-3046-4ff0-aecc-d58cb5f035fd"
  MAX_DEINTERLACE_SURFACES = 32_u32
  DXVA_DeinterlaceBltFnCode = 1_u32
  DXVA_DeinterlaceBltExFnCode = 2_u32
  MAX_DEINTERLACE_DEVICE_GUIDS = 32_u32
  DXVA_DeinterlaceQueryAvailableModesFnCode = 1_u32
  DXVA_DeinterlaceQueryModeCapsFnCode = 2_u32
  DXVA_ProcAmpControlDevice = "9f200913-2ffd-4056-9f1e-e1b508f22dcf"
  DXVA_ProcAmpControlQueryCapsFnCode = 3_u32
  DXVA_ProcAmpControlQueryRangeFnCode = 4_u32
  DXVA_ProcAmpControlBltFnCode = 1_u32
  DXVA_COPPDevice = "d2457add-8999-45ed-8a8a-d1aa047ba4d5"
  DXVA_COPPGetCertificateLengthFnCode = 1_u32
  DXVA_COPPKeyExchangeFnCode = 2_u32
  DXVA_COPPSequenceStartFnCode = 3_u32
  DXVA_COPPCommandFnCode = 4_u32
  DXVA_COPPSetProtectionLevel = "9bb9327c-4eb5-4727-9f00-b42b0919c0da"
  COPP_NoProtectionLevelAvailable = -1_i32
  COPP_DefaultProtectionLevel = 0_u32
  DXVA_COPPSetSignaling = "09a631a5-d684-4c60-8e4d-d3bb0f0be3ee"
  COPP_ImageAspectRatio_EN300294_Mask = 7_u32
  DXVA_COPPQueryStatusFnCode = 5_u32
  DXVA_COPPQueryConnectorType = "81d0bfd5-6afe-48c2-99c0-95a08f97c5da"
  DXVA_COPPQueryProtectionType = "38f2a801-9a6c-48bb-9107-b6696e6f1797"
  DXVA_COPPQueryLocalProtectionLevel = "b2075857-3eda-4d5d-88db-748f8c1a0549"
  DXVA_COPPQueryGlobalProtectionLevel = "1957210a-7766-452a-b99a-d27aed54f03a"
  DXVA_COPPQueryDisplayData = "d7bf1ba3-ad13-4f8e-af98-0dcb3ca204cc"
  DXVA_COPPQueryHDCPKeyData = "0db59d74-a992-492e-a0bd-c23fda564e00"
  DXVA_COPPQueryBusData = "c6f4d673-6174-4184-8e35-f6db5200bcba"
  DXVA_COPPQuerySignaling = "6629a591-3b79-4cf3-924a-11e8e7811671"
  DXVA2Trace_Control = "a0386e75-f70c-464c-a9ce-33c44e091623"
  DXVA2Trace_DecodeDevCreated = "b4de17a1-c5b2-44fe-86d5-d97a648114ff"
  DXVA2Trace_DecodeDevDestroyed = "853ebdf2-4160-421d-8893-63dcea4f18bb"
  DXVA2Trace_DecodeDevBeginFrame = "9fd1acf6-44cb-4637-bc62-2c11a9608f90"
  DXVA2Trace_DecodeDevExecute = "850aeb4c-d19a-4609-b3b4-bcbf0e22121e"
  DXVA2Trace_DecodeDevGetBuffer = "57b128fb-72cb-4137-a575-d91fa3160897"
  DXVA2Trace_DecodeDevEndFrame = "9fb3cb33-47dc-4899-98c8-c0c6cd7cd3cb"
  DXVA2Trace_VideoProcessDevCreated = "895508c6-540d-4c87-98f8-8dcbf2dabb2a"
  DXVA2Trace_VideoProcessDevDestroyed = "f97f30b1-fb49-42c7-8ee8-88bdfa92d4e2"
  DXVA2Trace_VideoProcessBlt = "69089cc0-71ab-42d0-953a-2887bf05a8af"
  MSTapeDeviceGUID = "8c0f6af2-0edb-44c1-8aeb-59040bd830ed"
  DTV_CardStatus_Inserted = 0_u32
  DTV_CardStatus_Removed = 1_u32
  DTV_CardStatus_Error = 2_u32
  DTV_CardStatus_FirmwareDownload = 3_u32
  OCUR_PAIRING_PROTOCOL_VERSION = 2_u32
  PBDA_PAIRING_PROTOCOL_VERSION = 3_u32
  DTV_MMIMessage_Open = 0_u32
  DTV_MMIMessage_Close = 1_u32
  DTV_Entitlement_CanDecrypt = 0_u32
  DTV_Entitlement_NotEntitled = 1_u32
  DTV_Entitlement_TechnicalFailure = 2_u32
  AudioType_Standard = 0_u32
  AudioType_Music_And_Effects = 1_u32
  AudioType_Visually_Impaired = 2_u32
  AudioType_Hearing_Impaired = 3_u32
  AudioType_Dialogue = 4_u32
  AudioType_Commentary = 5_u32
  AudioType_Emergency = 6_u32
  AudioType_Voiceover = 7_u32
  AudioType_Reserved = -1_i32
  MAX_COUNTRY_CODE_STRING = 3_u32
  PARENTAL_CONTROL_TIME_RANGE = 1_u32
  REQUIRED_PARENTAL_CONTROL_TIME_RANGE = 2_u32
  PARENTAL_CONTROL_CONTENT_RATING = 256_u32
  PARENTAL_CONTROL_ATTRIB_VIOLENCE = 512_u32
  PARENTAL_CONTROL_ATTRIB_LANGUAGE = 513_u32
  PARENTAL_CONTROL_ATTRIB_SEXUAL = 514_u32
  PARENTAL_CONTROL_ATTRIB_DIALOGUE = 515_u32
  PARENTAL_CONTROL_ATTRIB_FANTASY = 516_u32
  PARENTAL_CONTROL_VALUE_UNDEFINED = 0_u32
  MPEG2_FILTER_VERSION_1_SIZE = 124_u32
  MPEG2_FILTER_VERSION_2_SIZE = 133_u32
  SID_MSVidCtl_CurrentAudioEndpoint = "cf9a88f4-abcf-4ed8-9b74-7db33445459e"
  STREAMBUFFER_EC_BASE = 806_u32
  EVENTID_SBE2RecControlStarted = "8966a89e-f83e-4c0e-bc3b-bfa7649e04cb"
  EVENTID_SBE2RecControlStopped = "454b1ec8-0c9b-4caa-b1a1-1e7a2666f6c3"
  SBE2_STREAM_DESC_EVENT = "2313a4ed-bf2d-454f-ad8a-d95ba7f91fee"
  SBE2_V1_STREAMS_CREATION_EVENT = "000fcf09-97f5-46ac-9769-7a83b35384fb"
  SBE2_V2_STREAMS_CREATION_EVENT = "a72530a3-0344-4cab-a2d0-fe937dbdcab3"
  SBE2_STREAM_DESC_VERSION = 1_u32
  SID_DRMSecureServiceChannel = "c4c4c4c4-0049-4e2b-98fb-9537f6ce516d"
  CLSID_ETFilterEncProperties = "c4c4c481-0049-4e2b-98fb-9537f6ce516d"
  CLSID_ETFilterTagProperties = "c4c4c491-0049-4e2b-98fb-9537f6ce516d"
  CLSID_PTFilter = "9cd31617-b303-4f96-8330-2eb173ea4dc6"
  CLSID_DTFilterEncProperties = "c4c4c482-0049-4e2b-98fb-9537f6ce516d"
  CLSID_DTFilterTagProperties = "c4c4c492-0049-4e2b-98fb-9537f6ce516d"
  CLSID_XDSCodecProperties = "c4c4c483-0049-4e2b-98fb-9537f6ce516d"
  CLSID_XDSCodecTagProperties = "c4c4c493-0049-4e2b-98fb-9537f6ce516d"
  CLSID_CPCAFiltersCategory = "c4c4c4fc-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecNewXDSRating = "c4c4c4e0-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecDuplicateXDSRating = "c4c4c4df-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecNewXDSPacket = "c4c4c4e1-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingChange = "c4c4c4e2-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingsBlock = "c4c4c4e3-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingsUnblock = "c4c4c4e4-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterXDSPacket = "c4c4c4e5-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterEncryptionOn = "c4c4c4e6-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterEncryptionOff = "c4c4c4e7-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterCOPPUnblock = "c4c4c4e8-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_EncDecFilterError = "c4c4c4e9-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterCOPPBlock = "c4c4c4ea-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterCopyOnce = "c4c4c4eb-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterCopyNever = "c4c4c4f0-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterDataFormatOK = "c4c4c4ec-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterDataFormatFailure = "c4c4c4ed-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETDTFilterLicenseOK = "c4c4c4ee-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETDTFilterLicenseFailure = "c4c4c4ef-0049-4e2b-98fb-9537f6ce516d"
  MEDIASUBTYPE_ETDTFilter_Tagged = "c4c4c4d0-0049-4e2b-98fb-9537f6ce516d"
  FORMATTYPE_ETDTFilter_Tagged = "c4c4c4d1-0049-4e2b-98fb-9537f6ce516d"
  MEDIASUBTYPE_CPFilters_Processed = "46adbd28-6fd0-4796-93b2-155c51dc048d"
  FORMATTYPE_CPFilters_Processed = "6739b36f-1d5f-4ac2-8192-28bb0e73d16a"
  EVENTID_EncDecFilterEvent = "4a1b465b-0fb9-4159-afbd-e33006a0f9f4"
  EVENTID_FormatNotSupportedEvent = "24b2280a-b2aa-4777-bf65-63f35e7b024a"
  EVENTID_DemultiplexerFilterDiscontinuity = "16155770-aed5-475c-bb98-95a33070df0c"
  DSATTRIB_WMDRMProtectionInfo = "40749583-6b9d-4eec-b43c-67a1801e1a9b"
  DSATTRIB_BadSampleInfo = "e4846dda-5838-42b4-b897-6f7e5faa2f2f"
  MPEG_PAT_PID = 0_u32
  MPEG_PAT_TID = 0_u32
  MPEG_CAT_PID = 1_u32
  MPEG_CAT_TID = 1_u32
  MPEG_PMT_TID = 2_u32
  MPEG_TSDT_PID = 2_u32
  MPEG_TSDT_TID = 3_u32
  ATSC_MGT_PID = 8187_u32
  ATSC_MGT_TID = 199_u32
  ATSC_VCT_PID = 8187_u32
  ATSC_VCT_TERR_TID = 200_u32
  ATSC_VCT_CABL_TID = 201_u32
  ATSC_EIT_TID = 203_u32
  ATSC_ETT_TID = 204_u32
  ATSC_RRT_TID = 202_u32
  ATSC_RRT_PID = 8187_u32
  ATSC_STT_PID = 8187_u32
  ATSC_STT_TID = 205_u32
  ATSC_PIT_TID = 208_u32
  DVB_NIT_PID = 16_u32
  DVB_NIT_ACTUAL_TID = 64_u32
  DVB_NIT_OTHER_TID = 65_u32
  DVB_SDT_PID = 17_u32
  DVB_SDT_ACTUAL_TID = 66_u32
  DVB_SDT_OTHER_TID = 70_u32
  DVB_BAT_PID = 17_u32
  DVB_BAT_TID = 74_u32
  DVB_EIT_PID = 18_u32
  DVB_EIT_ACTUAL_TID = 78_u32
  DVB_EIT_OTHER_TID = 79_u32
  DVB_RST_PID = 19_u32
  DVB_RST_TID = 113_u32
  DVB_TDT_PID = 20_u32
  DVB_TDT_TID = 112_u32
  DVB_ST_PID_16 = 16_u32
  DVB_ST_PID_17 = 17_u32
  DVB_ST_PID_18 = 18_u32
  DVB_ST_PID_19 = 19_u32
  DVB_ST_PID_20 = 20_u32
  DVB_ST_TID = 114_u32
  ISDB_ST_TID = 114_u32
  DVB_TOT_PID = 20_u32
  DVB_TOT_TID = 115_u32
  DVB_DIT_PID = 30_u32
  DVB_DIT_TID = 126_u32
  DVB_SIT_PID = 31_u32
  DVB_SIT_TID = 127_u32
  ISDB_EMM_TID = 133_u32
  ISDB_BIT_PID = 36_u32
  ISDB_BIT_TID = 196_u32
  ISDB_NBIT_PID = 37_u32
  ISDB_NBIT_MSG_TID = 197_u32
  ISDB_NBIT_REF_TID = 198_u32
  ISDB_LDT_PID = 37_u32
  ISDB_LDT_TID = 199_u32
  ISDB_SDTT_PID = 35_u32
  ISDB_SDTT_ALT_PID = 40_u32
  ISDB_SDTT_TID = 195_u32
  ISDB_CDT_PID = 41_u32
  ISDB_CDT_TID = 200_u32
  SCTE_EAS_TID = 216_u32
  SCTE_EAS_IB_PID = 8187_u32
  SCTE_EAS_OOB_PID = 8188_u32
  CLSID_Mpeg2TableFilter = "752845f1-758f-4c83-a043-4270c593308e"
  ATSC_ETM_LOCATION_NOT_PRESENT = 0_u32
  ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = 1_u32
  ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = 2_u32
  ATSC_ETM_LOCATION_RESERVED = 3_u32
  SAMPLE_SEQ_SEQUENCE_HEADER = 1_u32
  SAMPLE_SEQ_GOP_HEADER = 2_u32
  SAMPLE_SEQ_PICTURE_HEADER = 3_u32
  SAMPLE_SEQ_SEQUENCE_START = 1_u32
  SAMPLE_SEQ_SEEK_POINT = 2_u32
  SAMPLE_SEQ_FRAME_START = 3_u32
  SAMPLE_SEQ_CONTENT_UNKNOWN = 0_u32
  SAMPLE_SEQ_CONTENT_I_FRAME = 1_u32
  SAMPLE_SEQ_CONTENT_P_FRAME = 2_u32
  SAMPLE_SEQ_CONTENT_B_FRAME = 3_u32
  SAMPLE_SEQ_CONTENT_STANDALONE_FRAME = 1_u32
  SAMPLE_SEQ_CONTENT_REF_FRAME = 2_u32
  SAMPLE_SEQ_CONTENT_NONREF_FRAME = 3_u32
  COMPONENT_TAG_CAPTION_MIN = 48_u32
  COMPONENT_TAG_CAPTION_MAX = 55_u32
  COMPONENT_TAG_SUPERIMPOSE_MIN = 56_u32
  COMPONENT_TAG_SUPERIMPOSE_MAX = 63_u32
  DVBS_SCAN_TABLE_MAX_SIZE = 400_u32
  G_wszexcludescriptstreamdeliverysynchronization = "ExcludeScriptStreamDeliverySynchronization"
  MPEG2_BASE = 512_u32
  MPEG2_S_MORE_DATA_AVAILABLE = 262656_i32
  MPEG2_S_NO_MORE_DATA_AVAILABLE = 262657_i32
  MPEG2_S_SG_INFO_FOUND = 262658_i32
  MPEG2_S_SG_INFO_NOT_FOUND = 262659_i32
  MPEG2_S_MPE_INFO_FOUND = 262660_i32
  MPEG2_S_MPE_INFO_NOT_FOUND = 262661_i32
  MPEG2_S_NEW_MODULE_VERSION = 262662_i32
  MPEG2_E_UNINITIALIZED = -2147220992_i32
  MPEG2_E_ALREADY_INITIALIZED = -2147220991_i32
  MPEG2_E_OUT_OF_BOUNDS = -2147220990_i32
  MPEG2_E_MALFORMED_TABLE = -2147220989_i32
  MPEG2_E_UNDEFINED = -2147220988_i32
  MPEG2_E_NOT_PRESENT = -2147220987_i32
  MPEG2_E_SECTION_NOT_FOUND = -2147220986_i32
  MPEG2_E_TX_STREAM_UNAVAILABLE = -2147220985_i32
  MPEG2_E_SERVICE_ID_NOT_FOUND = -2147220984_i32
  MPEG2_E_SERVICE_PMT_NOT_FOUND = -2147220983_i32
  MPEG2_E_DSI_NOT_FOUND = -2147220982_i32
  MPEG2_E_SERVER_UNAVAILABLE = -2147220981_i32
  MPEG2_E_INVALID_CAROUSEL_ID = -2147220980_i32
  MPEG2_E_MALFORMED_DSMCC_MESSAGE = -2147220979_i32
  MPEG2_E_INVALID_SG_OBJECT_KIND = -2147220978_i32
  MPEG2_E_OBJECT_NOT_FOUND = -2147220977_i32
  MPEG2_E_OBJECT_KIND_NOT_A_DIRECTORY = -2147220976_i32
  MPEG2_E_OBJECT_KIND_NOT_A_FILE = -2147220975_i32
  MPEG2_E_FILE_OFFSET_TOO_BIG = -2147220974_i32
  MPEG2_E_STREAM_STOPPED = -2147220973_i32
  MPEG2_E_REGISTRY_ACCESS_FAILED = -2147220972_i32
  MPEG2_E_INVALID_UDP_PORT = -2147220971_i32
  MPEG2_E_DATA_SOURCE_FAILED = -2147220970_i32
  MPEG2_E_DII_NOT_FOUND = -2147220969_i32
  MPEG2_E_DSHOW_PIN_NOT_FOUND = -2147220968_i32
  MPEG2_E_BUFFER_TOO_SMALL = -2147220967_i32
  MPEG2_E_MISSING_SECTIONS = -2147220966_i32
  MPEG2_E_TOO_MANY_SECTIONS = -2147220965_i32
  MPEG2_E_NEXT_TABLE_OPS_NOT_AVAILABLE = -2147220964_i32
  MPEG2_E_INCORRECT_DESCRIPTOR_TAG = -2147220963_i32
  MSDRI_S_MMI_PENDING = 2_i32
  MSDRI_S_PENDING = 1_i32
  BDA_E_FAILURE = -1073479679_i32
  BDA_E_NOT_IMPLEMENTED = -1073479678_i32
  BDA_E_NO_SUCH_COMMAND = -1073479677_i32
  BDA_E_OUT_OF_BOUNDS = -1073479676_i32
  BDA_E_INVALID_SCHEMA = -1073479675_i32
  BDA_E_INVALID_HANDLE = -1073479674_i32
  BDA_E_INVALID_TYPE = -1073479673_i32
  BDA_E_READ_ONLY = -1073479672_i32
  BDA_E_ACCESS_DENIED = -1073479671_i32
  BDA_E_NOT_FOUND = -1073479670_i32
  BDA_E_BUFFER_TOO_SMALL = -1073479669_i32
  BDA_E_OUT_OF_RESOURCES = -1073479668_i32
  BDA_E_OUT_OF_MEMORY = -1073479667_i32
  BDA_E_DISABLED = -1073479666_i32
  BDA_E_NO_HANDLER = -1073479665_i32
  BDA_E_INVALID_LANGUAGE = -1073479664_i32
  BDA_E_TIMEOUT_ELAPSED = -1073479663_i32
  BDA_E_NO_MORE_EVENTS = -1073475583_i32
  BDA_E_NO_MORE_DATA = -1073475582_i32
  BDA_E_TUNER_INITIALIZING = -1073467391_i32
  BDA_E_TUNER_REQUIRED = -1073467390_i32
  BDA_E_TUNER_CONFLICT = -1073467389_i32
  BDA_E_INVALID_TUNE_REQUEST = -1073467388_i32
  BDA_E_INVALID_ENTITLEMENT_TOKEN = -1073463295_i32
  BDA_E_INVALID_CAPTURE_TOKEN = -1073463294_i32
  BDA_E_WOULD_DISRUPT_STREAMING = -1073463293_i32
  BDA_E_INVALID_PURCHASE_TOKEN = -1073463292_i32
  BDA_E_IPNETWORK_ERROR = -1073459199_i32
  BDA_E_IPNETWORK_ADDRESS_NOT_FOUND = -1073459198_i32
  BDA_E_IPNETWORK_TIMEOUT = -1073459197_i32
  BDA_E_IPNETWORK_UNAVAILABLE = -1073459196_i32
  BDA_E_TUNE_FAILED_SDV01 = -1073455103_i32
  BDA_E_TUNE_FAILED_SDV02 = -1073455102_i32
  BDA_E_TUNE_FAILED_SDV03 = -1073455101_i32
  BDA_E_TUNE_FAILED_SDV04 = -1073455100_i32
  BDA_E_TUNE_FAILED_SDV05 = -1073455099_i32
  BDA_E_TUNE_FAILED_SDV06 = -1073455098_i32
  BDA_E_TUNE_FAILED_SDV07 = -1073455097_i32
  BDA_E_TUNE_FAILED_SDV08 = -1073455096_i32
  BDA_E_TUNE_FAILED_SDVFF = -1073454849_i32
  BDA_E_WMDRM_INVALID_SIGNATURE = -1073418239_i32
  BDA_E_WMDRM_INVALID_CERTIFICATE = -1073418238_i32
  BDA_E_WMDRM_INVALID_VERSION = -1073418236_i32
  BDA_E_WMDRM_INVALID_DATE = -1073418235_i32
  BDA_E_WMDRM_INVALID_PROXIMITY = -1073418234_i32
  BDA_E_WMDRM_KEY_ID_NOT_FOUND = -1073418232_i32
  SPECIFYPAGES_STATISTICS = "4c437b92-6e9e-11d1-a704-006097c4e476"
  G_wszstreambufferrecordingduration = "Duration"
  G_wszstreambufferrecordingbitrate = "Bitrate"
  G_wszstreambufferrecordingseekable = "Seekable"
  G_wszstreambufferrecordingstridable = "Stridable"
  G_wszstreambufferrecordingbroadcast = "Broadcast"
  G_wszstreambufferrecordingprotected = "Is_Protected"
  G_wszstreambufferrecordingtrusted = "Is_Trusted"
  G_wszstreambufferrecordingsignature_name = "Signature_Name"
  G_wszstreambufferrecordinghasaudio = "HasAudio"
  G_wszstreambufferrecordinghasimage = "HasImage"
  G_wszstreambufferrecordinghasscript = "HasScript"
  G_wszstreambufferrecordinghasvideo = "HasVideo"
  G_wszstreambufferrecordingcurrentbitrate = "CurrentBitrate"
  G_wszstreambufferrecordingoptimalbitrate = "OptimalBitrate"
  G_wszstreambufferrecordinghasattachedimages = "HasAttachedImages"
  G_wszstreambufferrecordingskipbackward = "Can_Skip_Backward"
  G_wszstreambufferrecordingskipforward = "Can_Skip_Forward"
  G_wszstreambufferrecordingnumberofframes = "NumberOfFrames"
  G_wszstreambufferrecordingfilesize = "FileSize"
  G_wszstreambufferrecordinghasarbitrarydatastream = "HasArbitraryDataStream"
  G_wszstreambufferrecordinghasfiletransferstream = "HasFileTransferStream"
  G_wszstreambufferrecordingtitle = "Title"
  G_wszstreambufferrecordingauthor = "Author"
  G_wszstreambufferrecordingdescription = "Description"
  G_wszstreambufferrecordingrating = "Rating"
  G_wszstreambufferrecordingcopyright = "Copyright"
  G_wszstreambufferrecordinguse_drm = "Use_DRM"
  G_wszstreambufferrecordingdrm_flags = "DRM_Flags"
  G_wszstreambufferrecordingdrm_level = "DRM_Level"
  G_wszstreambufferrecordingalbumtitle = "WM/AlbumTitle"
  G_wszstreambufferrecordingtrack = "WM/Track"
  G_wszstreambufferrecordingpromotionurl = "WM/PromotionURL"
  G_wszstreambufferrecordingalbumcoverurl = "WM/AlbumCoverURL"
  G_wszstreambufferrecordinggenre = "WM/Genre"
  G_wszstreambufferrecordingyear = "WM/Year"
  G_wszstreambufferrecordinggenreid = "WM/GenreID"
  G_wszstreambufferrecordingmcdi = "WM/MCDI"
  G_wszstreambufferrecordingcomposer = "WM/Composer"
  G_wszstreambufferrecordinglyrics = "WM/Lyrics"
  G_wszstreambufferrecordingtracknumber = "WM/TrackNumber"
  G_wszstreambufferrecordingtoolname = "WM/ToolName"
  G_wszstreambufferrecordingtoolversion = "WM/ToolVersion"
  G_wszstreambufferrecordingisvbr = "IsVBR"
  G_wszstreambufferrecordingalbumartist = "WM/AlbumArtist"
  G_wszstreambufferrecordingbannerimagetype = "BannerImageType"
  G_wszstreambufferrecordingbannerimagedata = "BannerImageData"
  G_wszstreambufferrecordingbannerimageurl = "BannerImageURL"
  G_wszstreambufferrecordingcopyrighturl = "CopyrightURL"
  G_wszstreambufferrecordingaspectratiox = "AspectRatioX"
  G_wszstreambufferrecordingaspectratioy = "AspectRatioY"
  G_wszstreambufferrecordingnscname = "NSC_Name"
  G_wszstreambufferrecordingnscaddress = "NSC_Address"
  G_wszstreambufferrecordingnscphone = "NSC_Phone"
  G_wszstreambufferrecordingnscemail = "NSC_Email"
  G_wszstreambufferrecordingnscdescription = "NSC_Description"
  STREAMBUFFER_EC_TIMEHOLE = 806_i32
  STREAMBUFFER_EC_STALE_DATA_READ = 807_i32
  STREAMBUFFER_EC_STALE_FILE_DELETED = 808_i32
  STREAMBUFFER_EC_CONTENT_BECOMING_STALE = 809_i32
  STREAMBUFFER_EC_WRITE_FAILURE = 810_i32
  STREAMBUFFER_EC_WRITE_FAILURE_CLEAR = 811_i32
  STREAMBUFFER_EC_READ_FAILURE = 812_i32
  STREAMBUFFER_EC_RATE_CHANGED = 813_i32
  STREAMBUFFER_EC_PRIMARY_AUDIO = 814_i32
  STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS = 815_i32
  STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE = 816_i32

  CLSID_FilgraphManager = LibC::GUID.new(0xe436ebb3_u32, 0x524f_u16, 0x11ce_u16, StaticArray[0x9f_u8, 0x53_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])

  CLSID_SystemTuningSpaces = LibC::GUID.new(0xd02aac50_u32, 0x27e_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])

  CLSID_TuningSpace = LibC::GUID.new(0x5ffdc5e6_u32, 0xb83a_u16, 0x4b55_u16, StaticArray[0xb6_u8, 0xe8_u8, 0xc6_u8, 0x9e_u8, 0x76_u8, 0x5f_u8, 0xe9_u8, 0xdb_u8])

  CLSID_ChannelIDTuningSpace = LibC::GUID.new(0xcc829a2f_u32, 0x3365_u16, 0x463f_u16, StaticArray[0xaf_u8, 0x13_u8, 0x81_u8, 0xdb_u8, 0xb6_u8, 0xf3_u8, 0xa5_u8, 0x55_u8])

  CLSID_ATSCTuningSpace = LibC::GUID.new(0xa2e30750_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_DigitalCableTuningSpace = LibC::GUID.new(0xd9bb4cee_u32, 0xb87a_u16, 0x47f1_u16, StaticArray[0xac_u8, 0x92_u8, 0xb0_u8, 0x8d_u8, 0x9c_u8, 0x78_u8, 0x13_u8, 0xfc_u8])

  CLSID_AnalogRadioTuningSpace = LibC::GUID.new(0x8a674b4c_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_AuxInTuningSpace = LibC::GUID.new(0xf9769a06_u32, 0x7aca_u16, 0x4e39_u16, StaticArray[0x9c_u8, 0xfb_u8, 0x97_u8, 0xbb_u8, 0x35_u8, 0xf0_u8, 0xe7_u8, 0x7e_u8])

  CLSID_AnalogTVTuningSpace = LibC::GUID.new(0x8a674b4d_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_DVBTuningSpace = LibC::GUID.new(0xc6b14b32_u32, 0x76aa_u16, 0x4a86_u16, StaticArray[0xa7_u8, 0xac_u8, 0x5c_u8, 0x79_u8, 0xaa_u8, 0xf5_u8, 0x8d_u8, 0xa7_u8])

  CLSID_DVBSTuningSpace = LibC::GUID.new(0xb64016f3_u32, 0xc9a2_u16, 0x4066_u16, StaticArray[0x96_u8, 0xf0_u8, 0xbd_u8, 0x95_u8, 0x63_u8, 0x31_u8, 0x47_u8, 0x26_u8])

  CLSID_ComponentTypes = LibC::GUID.new(0xa1a2b1c4_u32, 0xe3a_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])

  CLSID_ComponentType = LibC::GUID.new(0x823535a0_u32, 0x318_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])

  CLSID_LanguageComponentType = LibC::GUID.new(0x1be49f30_u32, 0xe1b_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])

  CLSID_MPEG2ComponentType = LibC::GUID.new(0x418008f3_u32, 0xcf67_u16, 0x4668_u16, StaticArray[0x96_u8, 0x28_u8, 0x10_u8, 0xdc_u8, 0x52_u8, 0xbe_u8, 0x1d_u8, 0x8_u8])

  CLSID_ATSCComponentType = LibC::GUID.new(0xa8dcf3d5_u32, 0x780_u16, 0x4ef4_u16, StaticArray[0x8a_u8, 0x83_u8, 0x2c_u8, 0xff_u8, 0xaa_u8, 0xcb_u8, 0x8a_u8, 0xce_u8])

  CLSID_Components = LibC::GUID.new(0x809b6661_u32, 0x94c4_u16, 0x49e6_u16, StaticArray[0xb6_u8, 0xec_u8, 0x3f_u8, 0xf_u8, 0x86_u8, 0x22_u8, 0x15_u8, 0xaa_u8])

  CLSID_Component = LibC::GUID.new(0x59dc47a8_u32, 0x116c_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])

  CLSID_MPEG2Component = LibC::GUID.new(0x55cb2d7_u32, 0x2969_u16, 0x45cd_u16, StaticArray[0x91_u8, 0x4b_u8, 0x76_u8, 0x89_u8, 0x7_u8, 0x22_u8, 0xf1_u8, 0x12_u8])

  CLSID_AnalogAudioComponentType = LibC::GUID.new(0x28ab0005_u32, 0xe845_u16, 0x4ffa_u16, StaticArray[0xaa_u8, 0x9b_u8, 0xf4_u8, 0x66_u8, 0x52_u8, 0x36_u8, 0x14_u8, 0x1c_u8])

  CLSID_TuneRequest = LibC::GUID.new(0xb46e0d38_u32, 0xab35_u16, 0x4a06_u16, StaticArray[0xa1_u8, 0x37_u8, 0x70_u8, 0x57_u8, 0x6b_u8, 0x1_u8, 0xb3_u8, 0x9f_u8])

  CLSID_ChannelIDTuneRequest = LibC::GUID.new(0x3a9428a7_u32, 0x31a4_u16, 0x45e9_u16, StaticArray[0x9e_u8, 0xfb_u8, 0xe0_u8, 0x55_u8, 0xbf_u8, 0x7b_u8, 0xb3_u8, 0xdb_u8])

  CLSID_ChannelTuneRequest = LibC::GUID.new(0x369b4e5_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_ATSCChannelTuneRequest = LibC::GUID.new(0x369b4e6_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_DigitalCableTuneRequest = LibC::GUID.new(0x26ec0b63_u32, 0xaa90_u16, 0x458a_u16, StaticArray[0x8d_u8, 0xf4_u8, 0x56_u8, 0x59_u8, 0xf2_u8, 0xc8_u8, 0xa1_u8, 0x8a_u8])

  CLSID_MPEG2TuneRequest = LibC::GUID.new(0x955ac62_u32, 0xbf2e_u16, 0x4cba_u16, StaticArray[0xa2_u8, 0xb9_u8, 0xa6_u8, 0x3f_u8, 0x77_u8, 0x2d_u8, 0x46_u8, 0xcf_u8])

  CLSID_MPEG2TuneRequestFactory = LibC::GUID.new(0x2c63e4eb_u32, 0x4cea_u16, 0x41b8_u16, StaticArray[0x91_u8, 0x9c_u8, 0xe9_u8, 0x47_u8, 0xea_u8, 0x19_u8, 0xa7_u8, 0x7c_u8])

  CLSID_Locator = LibC::GUID.new(0x888c883_u32, 0xac4f_u16, 0x4943_u16, StaticArray[0xb5_u8, 0x16_u8, 0x2c_u8, 0x38_u8, 0xd9_u8, 0xb3_u8, 0x45_u8, 0x62_u8])

  CLSID_DigitalLocator = LibC::GUID.new(0x6e50cc0d_u32, 0xc19b_u16, 0x4bf6_u16, StaticArray[0x81_u8, 0xb_u8, 0x5b_u8, 0xd6_u8, 0x7_u8, 0x61_u8, 0xf5_u8, 0xcc_u8])

  CLSID_AnalogLocator = LibC::GUID.new(0x49638b91_u32, 0x48ab_u16, 0x48b7_u16, StaticArray[0xa4_u8, 0x7a_u8, 0x7d_u8, 0xe_u8, 0x75_u8, 0xa0_u8, 0x8e_u8, 0xde_u8])

  CLSID_ATSCLocator = LibC::GUID.new(0x8872ff1b_u32, 0x98fa_u16, 0x4d7a_u16, StaticArray[0x8d_u8, 0x93_u8, 0xc9_u8, 0xf1_u8, 0x5_u8, 0x5f_u8, 0x85_u8, 0xbb_u8])

  CLSID_DigitalCableLocator = LibC::GUID.new(0x3c06416_u32, 0xd127_u16, 0x407a_u16, StaticArray[0xab_u8, 0x4c_u8, 0xfd_u8, 0xd2_u8, 0x79_u8, 0xab_u8, 0xbe_u8, 0x5d_u8])

  CLSID_DVBTLocator = LibC::GUID.new(0x9cd64701_u32, 0xbdf3_u16, 0x4d14_u16, StaticArray[0x8e_u8, 0x3_u8, 0xf1_u8, 0x29_u8, 0x83_u8, 0xd8_u8, 0x66_u8, 0x64_u8])

  CLSID_DVBTLocator2 = LibC::GUID.new(0xefe3fa02_u32, 0x45d7_u16, 0x4920_u16, StaticArray[0xbe_u8, 0x96_u8, 0x53_u8, 0xfa_u8, 0x7f_u8, 0x35_u8, 0xb0_u8, 0xe6_u8])

  CLSID_DVBSLocator = LibC::GUID.new(0x1df7d126_u32, 0x4050_u16, 0x47f0_u16, StaticArray[0xa7_u8, 0xcf_u8, 0x4c_u8, 0x4c_u8, 0xa9_u8, 0x24_u8, 0x13_u8, 0x33_u8])

  CLSID_DVBCLocator = LibC::GUID.new(0xc531d9fd_u32, 0x9685_u16, 0x4028_u16, StaticArray[0x8b_u8, 0x68_u8, 0x6e_u8, 0x12_u8, 0x32_u8, 0x7_u8, 0x9f_u8, 0x1e_u8])

  CLSID_ISDBSLocator = LibC::GUID.new(0x6504afed_u32, 0xa629_u16, 0x455c_u16, StaticArray[0xa7_u8, 0xf1_u8, 0x4_u8, 0x96_u8, 0x4d_u8, 0xea_u8, 0x5c_u8, 0xc4_u8])

  CLSID_DVBTuneRequest = LibC::GUID.new(0x15d6504a_u32, 0x5494_u16, 0x499c_u16, StaticArray[0x88_u8, 0x6c_u8, 0x97_u8, 0x3c_u8, 0x9e_u8, 0x53_u8, 0xb9_u8, 0xf1_u8])

  CLSID_CreatePropBagOnRegKey = LibC::GUID.new(0x8a674b49_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_BroadcastEventService = LibC::GUID.new(0xb3ffb92_u32, 0x919_u16, 0x4934_u16, StaticArray[0x9d_u8, 0x5b_u8, 0x61_u8, 0x9c_u8, 0x71_u8, 0x9d_u8, 0x2_u8, 0x2_u8])

  CLSID_TunerMarshaler = LibC::GUID.new(0x6438570b_u32, 0xc08_u16, 0x4a25_u16, StaticArray[0x95_u8, 0x4_u8, 0x80_u8, 0x12_u8, 0xbb_u8, 0x4d_u8, 0x50_u8, 0xcf_u8])

  CLSID_PersistTuneXmlUtility = LibC::GUID.new(0xe77026b0_u32, 0xb97f_u16, 0x4cbb_u16, StaticArray[0xb7_u8, 0xfb_u8, 0xf4_u8, 0xf0_u8, 0x3a_u8, 0xd6_u8, 0x9f_u8, 0x11_u8])

  CLSID_ESEventService = LibC::GUID.new(0xc20447fc_u32, 0xec60_u16, 0x475e_u16, StaticArray[0x81_u8, 0x3f_u8, 0xd2_u8, 0xb0_u8, 0xa6_u8, 0xde_u8, 0xce_u8, 0xfe_u8])

  CLSID_ESEventFactory = LibC::GUID.new(0x8e8a07da_u32, 0x71f8_u16, 0x40c1_u16, StaticArray[0xa9_u8, 0x29_u8, 0x5e_u8, 0x3a_u8, 0x86_u8, 0x8a_u8, 0xc2_u8, 0xc6_u8])

  CLSID_XDSToRat = LibC::GUID.new(0xc5c5c5f0_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])

  CLSID_EvalRat = LibC::GUID.new(0xc5c5c5f1_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])

  CLSID_ETFilter = LibC::GUID.new(0xc4c4c4f1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])

  CLSID_DTFilter = LibC::GUID.new(0xc4c4c4f2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])

  CLSID_XDSCodec = LibC::GUID.new(0xc4c4c4f3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])

  CLSID_CXDSData = LibC::GUID.new(0xc4c4c4f4_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])

  CLSID_MSVidAnalogTunerDevice = LibC::GUID.new(0x1c15d484_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidBDATunerDevice = LibC::GUID.new(0xa2e3074e_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidFilePlaybackDevice = LibC::GUID.new(0x37b0353c_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidWebDVD = LibC::GUID.new(0x11b3619_u32, 0xfe63_u16, 0x4814_u16, StaticArray[0x8a_u8, 0x84_u8, 0x15_u8, 0xa1_u8, 0x94_u8, 0xce_u8, 0x9c_u8, 0xe3_u8])

  CLSID_MSVidWebDVDAdm = LibC::GUID.new(0xfa7c375b_u32, 0x66a7_u16, 0x4280_u16, StaticArray[0x87_u8, 0x9d_u8, 0xfd_u8, 0x45_u8, 0x9c_u8, 0x84_u8, 0xbb_u8, 0x2_u8])

  CLSID_MSVidVideoRenderer = LibC::GUID.new(0x37b03543_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidVMR9 = LibC::GUID.new(0x24dc3975_u32, 0x9bf_u16, 0x4231_u16, StaticArray[0x86_u8, 0x55_u8, 0x3e_u8, 0xe7_u8, 0x1f_u8, 0x43_u8, 0x83_u8, 0x7d_u8])

  CLSID_MSVidEVR = LibC::GUID.new(0xc45268a2_u32, 0xfa81_u16, 0x4e19_u16, StaticArray[0xb1_u8, 0xe3_u8, 0x72_u8, 0xed_u8, 0xbd_u8, 0x60_u8, 0xae_u8, 0xda_u8])

  CLSID_MSVidAudioRenderer = LibC::GUID.new(0x37b03544_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidGenericSink = LibC::GUID.new(0x4a5869cf_u32, 0x929d_u16, 0x4040_u16, StaticArray[0xae_u8, 0x3_u8, 0xfc_u8, 0xaf_u8, 0xc5_u8, 0xb9_u8, 0xcd_u8, 0x42_u8])

  CLSID_MSVidStreamBufferSink = LibC::GUID.new(0x9e77aac4_u32, 0x35e5_u16, 0x42a1_u16, StaticArray[0xbd_u8, 0xc2_u8, 0x8f_u8, 0x3f_u8, 0xf3_u8, 0x99_u8, 0x84_u8, 0x7c_u8])

  CLSID_MSVidStreamBufferSource = LibC::GUID.new(0xad8e510d_u32, 0x217f_u16, 0x409b_u16, StaticArray[0x80_u8, 0x76_u8, 0x29_u8, 0xc5_u8, 0xe7_u8, 0x3b_u8, 0x98_u8, 0xe8_u8])

  CLSID_MSVidStreamBufferV2Source = LibC::GUID.new(0xfd351ea1_u32, 0x4173_u16, 0x4af4_u16, StaticArray[0x82_u8, 0x1d_u8, 0x80_u8, 0xd4_u8, 0xae_u8, 0x97_u8, 0x90_u8, 0x48_u8])

  CLSID_MSVidEncoder = LibC::GUID.new(0xbb530c63_u32, 0xd9df_u16, 0x4b49_u16, StaticArray[0x94_u8, 0x39_u8, 0x63_u8, 0x45_u8, 0x39_u8, 0x62_u8, 0xe5_u8, 0x98_u8])

  CLSID_MSVidITVCapture = LibC::GUID.new(0x5740a302_u32, 0xef0b_u16, 0x45ce_u16, StaticArray[0xbf_u8, 0x3b_u8, 0x44_u8, 0x70_u8, 0xa1_u8, 0x4a_u8, 0x89_u8, 0x80_u8])

  CLSID_MSVidITVPlayback = LibC::GUID.new(0x9e797ed0_u32, 0x5253_u16, 0x4243_u16, StaticArray[0xa9_u8, 0xb7_u8, 0xbd_u8, 0x6_u8, 0xc5_u8, 0x8f_u8, 0x8e_u8, 0xf3_u8])

  CLSID_MSVidCCA = LibC::GUID.new(0x86151827_u32, 0xe47b_u16, 0x45ee_u16, StaticArray[0x84_u8, 0x21_u8, 0xd1_u8, 0xe_u8, 0x6e_u8, 0x69_u8, 0x9_u8, 0x79_u8])

  CLSID_MSVidClosedCaptioning = LibC::GUID.new(0x7f9cb14d_u32, 0x48e4_u16, 0x43b6_u16, StaticArray[0x93_u8, 0x46_u8, 0x1a_u8, 0xeb_u8, 0xc3_u8, 0x9c_u8, 0x64_u8, 0xd3_u8])

  CLSID_MSVidClosedCaptioningSI = LibC::GUID.new(0x92ed88bf_u32, 0x879e_u16, 0x448f_u16, StaticArray[0xb6_u8, 0xb6_u8, 0xa3_u8, 0x85_u8, 0xbc_u8, 0xeb_u8, 0x84_u8, 0x6d_u8])

  CLSID_MSVidDataServices = LibC::GUID.new(0x334125c0_u32, 0x77e5_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidXDS = LibC::GUID.new(0x149eedf_u32, 0xd08f_u16, 0x4142_u16, StaticArray[0x8d_u8, 0x73_u8, 0xd2_u8, 0x39_u8, 0x3_u8, 0xd2_u8, 0x1e_u8, 0x90_u8])

  CLSID_MSVidAnalogCaptureToDataServices = LibC::GUID.new(0xc5702cd6_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidDataServicesToStreamBufferSink = LibC::GUID.new(0x38f03426_u32, 0xe83b_u16, 0x4e68_u16, StaticArray[0xb6_u8, 0x5b_u8, 0xdc_u8, 0xae_u8, 0x73_u8, 0x30_u8, 0x48_u8, 0x38_u8])

  CLSID_MSVidDataServicesToXDS = LibC::GUID.new(0x429ec6e_u32, 0x1144_u16, 0x4bed_u16, StaticArray[0xb8_u8, 0x8b_u8, 0x2f_u8, 0xb9_u8, 0x89_u8, 0x9a_u8, 0x4a_u8, 0x3d_u8])

  CLSID_MSVidAnalogCaptureToXDS = LibC::GUID.new(0x3540d440_u32, 0x5b1d_u16, 0x49cb_u16, StaticArray[0x82_u8, 0x1a_u8, 0xe8_u8, 0x4b_u8, 0x8c_u8, 0xf0_u8, 0x65_u8, 0xa7_u8])

  CLSID_MSVidCtl = LibC::GUID.new(0xb0edf163_u32, 0x910a_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidInputDevices = LibC::GUID.new(0xc5702ccc_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidOutputDevices = LibC::GUID.new(0xc5702ccd_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidVideoRendererDevices = LibC::GUID.new(0xc5702cce_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidAudioRendererDevices = LibC::GUID.new(0xc5702ccf_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidFeatures = LibC::GUID.new(0xc5702cd0_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidGenericComposite = LibC::GUID.new(0x2764bce5_u32, 0xcc39_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x39_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidAnalogCaptureToOverlayMixer = LibC::GUID.new(0xe18af75a_u32, 0x8af_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_MSVidWebDVDToVideoRenderer = LibC::GUID.new(0x267db0b3_u32, 0x55e3_u16, 0x4902_u16, StaticArray[0x94_u8, 0x9b_u8, 0xdf_u8, 0x8f_u8, 0x5c_u8, 0xec_u8, 0x1_u8, 0x91_u8])

  CLSID_MSVidWebDVDToAudioRenderer = LibC::GUID.new(0x8d04238e_u32, 0x9fd1_u16, 0x41c6_u16, StaticArray[0x8d_u8, 0xe3_u8, 0x9e_u8, 0x1e_u8, 0xe3_u8, 0x9_u8, 0xe9_u8, 0x35_u8])

  CLSID_MSVidMPEG2DecoderToClosedCaptioning = LibC::GUID.new(0x6ad28ee1_u32, 0x5002_u16, 0x4e71_u16, StaticArray[0xaa_u8, 0xf7_u8, 0xbd_u8, 0x7_u8, 0x79_u8, 0x7_u8, 0xb1_u8, 0xa4_u8])

  CLSID_MSVidAnalogCaptureToStreamBufferSink = LibC::GUID.new(0x9f50e8b1_u32, 0x9530_u16, 0x4ddc_u16, StaticArray[0x82_u8, 0x5e_u8, 0x1a_u8, 0xf8_u8, 0x1d_u8, 0x47_u8, 0xae_u8, 0xd6_u8])

  CLSID_MSVidDigitalCaptureToStreamBufferSink = LibC::GUID.new(0xabe40035_u32, 0x27c3_u16, 0x4a2f_u16, StaticArray[0x81_u8, 0x53_u8, 0x66_u8, 0x24_u8, 0x47_u8, 0x16_u8, 0x8_u8, 0xaf_u8])

  CLSID_MSVidITVToStreamBufferSink = LibC::GUID.new(0x92b94828_u32, 0x1af7_u16, 0x4e6e_u16, StaticArray[0x9e_u8, 0xbf_u8, 0x77_u8, 0x6_u8, 0x57_u8, 0xf7_u8, 0x7a_u8, 0xf5_u8])

  CLSID_MSVidCCAToStreamBufferSink = LibC::GUID.new(0x3ef76d68_u32, 0x8661_u16, 0x4843_u16, StaticArray[0x8b_u8, 0x8f_u8, 0xc3_u8, 0x71_u8, 0x63_u8, 0xd8_u8, 0xc9_u8, 0xce_u8])

  CLSID_MSVidEncoderToStreamBufferSink = LibC::GUID.new(0xa0b9b497_u32, 0xafbc_u16, 0x45ad_u16, StaticArray[0xa8_u8, 0xa6_u8, 0x9b_u8, 0x7_u8, 0x7c_u8, 0x40_u8, 0xd4_u8, 0xf2_u8])

  CLSID_MSVidFilePlaybackToVideoRenderer = LibC::GUID.new(0xb401c5eb_u32, 0x8457_u16, 0x427f_u16, StaticArray[0x84_u8, 0xea_u8, 0xa4_u8, 0xd2_u8, 0x36_u8, 0x33_u8, 0x64_u8, 0xb0_u8])

  CLSID_MSVidFilePlaybackToAudioRenderer = LibC::GUID.new(0xcc23f537_u32, 0x18d4_u16, 0x4ece_u16, StaticArray[0x93_u8, 0xbd_u8, 0x20_u8, 0x7a_u8, 0x84_u8, 0x72_u8, 0x69_u8, 0x79_u8])

  CLSID_MSVidAnalogTVToEncoder = LibC::GUID.new(0x28953661_u32, 0x231_u16, 0x41db_u16, StaticArray[0x89_u8, 0x86_u8, 0x21_u8, 0xff_u8, 0x43_u8, 0x88_u8, 0xee_u8, 0x9b_u8])

  CLSID_MSVidStreamBufferSourceToVideoRenderer = LibC::GUID.new(0x3c4708dc_u32, 0xb181_u16, 0x46a8_u16, StaticArray[0x8d_u8, 0xa8_u8, 0x4a_u8, 0xb0_u8, 0x37_u8, 0x17_u8, 0x58_u8, 0xcd_u8])

  CLSID_MSVidAnalogCaptureToCCA = LibC::GUID.new(0x942b7909_u32, 0xa28e_u16, 0x49a1_u16, StaticArray[0xa2_u8, 0x7_u8, 0x34_u8, 0xeb_u8, 0xcb_u8, 0xcb_u8, 0x4b_u8, 0x3b_u8])

  CLSID_MSVidDigitalCaptureToCCA = LibC::GUID.new(0x73d14237_u32, 0xb9db_u16, 0x4efa_u16, StaticArray[0xa6_u8, 0xdd_u8, 0x84_u8, 0x35_u8, 0x4_u8, 0x21_u8, 0xfb_u8, 0x2f_u8])

  CLSID_MSVidDigitalCaptureToITV = LibC::GUID.new(0x5d8e73f7_u32, 0x4989_u16, 0x4ac8_u16, StaticArray[0x8a_u8, 0x98_u8, 0x39_u8, 0xba_u8, 0xd_u8, 0x32_u8, 0x53_u8, 0x2_u8])

  CLSID_MSVidSBESourceToITV = LibC::GUID.new(0x2291478c_u32, 0x5ee3_u16, 0x4bef_u16, StaticArray[0xab_u8, 0x5d_u8, 0xb5_u8, 0xff_u8, 0x2c_u8, 0xf5_u8, 0x83_u8, 0x52_u8])

  CLSID_MSVidSBESourceToCC = LibC::GUID.new(0x9193a8f9_u32, 0xcba_u16, 0x400e_u16, StaticArray[0xaa_u8, 0x97_u8, 0xeb_u8, 0x47_u8, 0x9_u8, 0x16_u8, 0x45_u8, 0x76_u8])

  CLSID_MSVidSBESourceToGenericSink = LibC::GUID.new(0x991da7e5_u32, 0x953f_u16, 0x435b_u16, StaticArray[0xbe_u8, 0x5e_u8, 0xb9_u8, 0x2a_u8, 0x5_u8, 0xed_u8, 0xfc_u8, 0x42_u8])

  CLSID_MSVidCCToVMR = LibC::GUID.new(0xc4bf2784_u32, 0xae00_u16, 0x41ba_u16, StaticArray[0x98_u8, 0x28_u8, 0x9c_u8, 0x95_u8, 0x3b_u8, 0xd3_u8, 0xc5_u8, 0x4a_u8])

  CLSID_MSVidCCToAR = LibC::GUID.new(0xd76334ca_u32, 0xd89e_u16, 0x4baf_u16, StaticArray[0x86_u8, 0xab_u8, 0xdd_u8, 0xb5_u8, 0x93_u8, 0x72_u8, 0xaf_u8, 0xc2_u8])

  CLSID_MSEventBinder = LibC::GUID.new(0x577faa18_u32, 0x4518_u16, 0x445e_u16, StaticArray[0x8f_u8, 0x70_u8, 0x14_u8, 0x73_u8, 0xf8_u8, 0xcf_u8, 0x4b_u8, 0xa4_u8])

  CLSID_MSVidStreamBufferRecordingControl = LibC::GUID.new(0xcaafdd83_u32, 0xcefc_u16, 0x4e3d_u16, StaticArray[0xba_u8, 0x3_u8, 0x17_u8, 0x5f_u8, 0x17_u8, 0xa2_u8, 0x4f_u8, 0x91_u8])

  CLSID_MSVidRect = LibC::GUID.new(0xcb4276e6_u32, 0x7d5f_u16, 0x4cf1_u16, StaticArray[0x97_u8, 0x27_u8, 0x62_u8, 0x9c_u8, 0x5e_u8, 0x6d_u8, 0xb6_u8, 0xae_u8])

  CLSID_MSVidDevice = LibC::GUID.new(0x6e40476f_u32, 0x9c49_u16, 0x4c3e_u16, StaticArray[0x8b_u8, 0xb9_u8, 0x85_u8, 0x87_u8, 0x95_u8, 0x8e_u8, 0xff_u8, 0x74_u8])

  CLSID_MSVidDevice2 = LibC::GUID.new(0x30997f7d_u32, 0xb3b5_u16, 0x4a1c_u16, StaticArray[0x98_u8, 0x3a_u8, 0x1f_u8, 0xe8_u8, 0x9_u8, 0x8c_u8, 0xb7_u8, 0x7d_u8])

  CLSID_MSVidInputDevice = LibC::GUID.new(0xac1972f2_u32, 0x138a_u16, 0x4ca3_u16, StaticArray[0x90_u8, 0xda_u8, 0xae_u8, 0x51_u8, 0x11_u8, 0x2e_u8, 0xda_u8, 0x28_u8])

  CLSID_MSVidVideoInputDevice = LibC::GUID.new(0x95f4820b_u32, 0xbb3a_u16, 0x4e2d_u16, StaticArray[0xbc_u8, 0x64_u8, 0x5b_u8, 0x81_u8, 0x7b_u8, 0xc2_u8, 0xc3_u8, 0xe_u8])

  CLSID_MSVidVideoPlaybackDevice = LibC::GUID.new(0x1990d634_u32, 0x1a5e_u16, 0x4071_u16, StaticArray[0xa3_u8, 0x4a_u8, 0x53_u8, 0xaa_u8, 0xff_u8, 0xce_u8, 0x9f_u8, 0x36_u8])

  CLSID_MSVidFeature = LibC::GUID.new(0x7748530b_u32, 0xc08a_u16, 0x47ea_u16, StaticArray[0xb2_u8, 0x4c_u8, 0xbe_u8, 0x86_u8, 0x95_u8, 0xff_u8, 0x40_u8, 0x5f_u8])

  CLSID_MSVidOutput = LibC::GUID.new(0x87eb890d_u32, 0x3ad_u16, 0x4e9d_u16, StaticArray[0x98_u8, 0x66_u8, 0x37_u8, 0x6e_u8, 0x5e_u8, 0xc5_u8, 0x72_u8, 0xed_u8])

  CLSID_SectionList = LibC::GUID.new(0x73da5d04_u32, 0x4347_u16, 0x45d3_u16, StaticArray[0xa9_u8, 0xdc_u8, 0xfa_u8, 0xe9_u8, 0xdd_u8, 0xbe_u8, 0x55_u8, 0x8d_u8])

  CLSID_Mpeg2Stream = LibC::GUID.new(0xf91d96c7_u32, 0x8509_u16, 0x4d0b_u16, StaticArray[0xab_u8, 0x26_u8, 0xa0_u8, 0xdd_u8, 0x10_u8, 0x90_u8, 0x4b_u8, 0xb7_u8])

  CLSID_Mpeg2Data = LibC::GUID.new(0xc666e115_u32, 0xbb62_u16, 0x4027_u16, StaticArray[0xa1_u8, 0x13_u8, 0x82_u8, 0xd6_u8, 0x43_u8, 0xfe_u8, 0x2d_u8, 0x99_u8])

  CLSID_Mpeg2DataLib = LibC::GUID.new(0xdbaf6c1b_u32, 0xb6a4_u16, 0x4898_u16, StaticArray[0xae_u8, 0x65_u8, 0x20_u8, 0x4f_u8, 0xd_u8, 0x95_u8, 0x9_u8, 0xa1_u8])

  CLSID_TIFLoad = LibC::GUID.new(0x14eb8748_u32, 0x1753_u16, 0x4393_u16, StaticArray[0x95_u8, 0xae_u8, 0x4f_u8, 0x7e_u8, 0x7a_u8, 0x87_u8, 0xaa_u8, 0xd6_u8])

  CLSID_EVENTID_TuningChanging = LibC::GUID.new(0x83183c03_u32, 0xc09e_u16, 0x45c4_u16, StaticArray[0xa7_u8, 0x19_u8, 0x80_u8, 0x7a_u8, 0x94_u8, 0x95_u8, 0x2b_u8, 0xf9_u8])

  CLSID_EVENTID_TuningChanged = LibC::GUID.new(0x9d7e6235_u32, 0x4b7d_u16, 0x425d_u16, StaticArray[0xa6_u8, 0xd1_u8, 0xd7_u8, 0x17_u8, 0xc3_u8, 0x3b_u8, 0x9c_u8, 0x4c_u8])

  CLSID_EVENTID_CandidatePostTuneData = LibC::GUID.new(0x9f02d3d0_u32, 0x9f06_u16, 0x4369_u16, StaticArray[0x9f_u8, 0x1e_u8, 0x3a_u8, 0xd6_u8, 0xca_u8, 0x19_u8, 0x80_u8, 0x7e_u8])

  CLSID_EVENTID_CADenialCountChanged = LibC::GUID.new(0x2a65c528_u32, 0x2249_u16, 0x4070_u16, StaticArray[0xac_u8, 0x16_u8, 0x0_u8, 0x39_u8, 0xc_u8, 0xdf_u8, 0xb2_u8, 0xdd_u8])

  CLSID_EVENTID_SignalStatusChanged = LibC::GUID.new(0x6d9cfaf2_u32, 0x702d_u16, 0x4b01_u16, StaticArray[0x8d_u8, 0xff_u8, 0x68_u8, 0x92_u8, 0xad_u8, 0x20_u8, 0xd1_u8, 0x91_u8])

  CLSID_EVENTID_NewSignalAcquired = LibC::GUID.new(0xc87ec52d_u32, 0xcd18_u16, 0x404a_u16, StaticArray[0xa0_u8, 0x76_u8, 0xc0_u8, 0x2a_u8, 0x27_u8, 0x3d_u8, 0x3d_u8, 0xe7_u8])

  CLSID_EVENTID_EASMessageReceived = LibC::GUID.new(0xd10df9d5_u32, 0xc261_u16, 0x4b85_u16, StaticArray[0x9e_u8, 0x8a_u8, 0x51_u8, 0x7b_u8, 0x32_u8, 0x99_u8, 0xca_u8, 0xb2_u8])

  CLSID_EVENTID_PSITable = LibC::GUID.new(0x1b9c3703_u32, 0xd447_u16, 0x4e16_u16, StaticArray[0x97_u8, 0xbb_u8, 0x1_u8, 0x79_u8, 0x9f_u8, 0xc0_u8, 0x31_u8, 0xed_u8])

  CLSID_EVENTID_ServiceTerminated = LibC::GUID.new(0xa1d591c_u32, 0xe0d2_u16, 0x4f8e_u16, StaticArray[0x89_u8, 0x60_u8, 0x23_u8, 0x35_u8, 0xbe_u8, 0xf4_u8, 0x5c_u8, 0xcb_u8])

  CLSID_EVENTID_CardStatusChanged = LibC::GUID.new(0xa265faea_u32, 0xf874_u16, 0x4b38_u16, StaticArray[0x9f_u8, 0xf7_u8, 0xc5_u8, 0x3d_u8, 0x2_u8, 0x96_u8, 0x99_u8, 0x96_u8])

  CLSID_EVENTID_DRMParingStatusChanged = LibC::GUID.new(0x906f5_u32, 0xf0d1_u16, 0x41d6_u16, StaticArray[0xa7_u8, 0xdf_u8, 0x40_u8, 0x28_u8, 0x69_u8, 0x76_u8, 0x69_u8, 0xf6_u8])

  CLSID_EVENTID_DRMParingStepComplete = LibC::GUID.new(0x5b2ebf78_u32, 0xb752_u16, 0x4420_u16, StaticArray[0xb4_u8, 0x1e_u8, 0xa4_u8, 0x72_u8, 0xdc_u8, 0x95_u8, 0x82_u8, 0x8e_u8])

  CLSID_EVENTID_MMIMessage = LibC::GUID.new(0x52c29af_u32, 0x9a4_u16, 0x4b93_u16, StaticArray[0x89_u8, 0xf_u8, 0xbd_u8, 0x6a_u8, 0x34_u8, 0x89_u8, 0x68_u8, 0xa4_u8])

  CLSID_EVENTID_EntitlementChanged = LibC::GUID.new(0x9071ad5d_u32, 0x2359_u16, 0x4c95_u16, StaticArray[0x86_u8, 0x94_u8, 0xaf_u8, 0xa8_u8, 0x1d_u8, 0x70_u8, 0xbf_u8, 0xd5_u8])

  CLSID_EVENTID_STBChannelNumber = LibC::GUID.new(0x17c4d730_u32, 0xd0f0_u16, 0x413a_u16, StaticArray[0x8c_u8, 0x99_u8, 0x50_u8, 0x4_u8, 0x69_u8, 0xde_u8, 0x35_u8, 0xad_u8])

  CLSID_EVENTID_BDAEventingServicePendingEvent = LibC::GUID.new(0x5ca51711_u32, 0x5ddc_u16, 0x41a6_u16, StaticArray[0x94_u8, 0x30_u8, 0xe4_u8, 0x1b_u8, 0x8b_u8, 0x3b_u8, 0xbc_u8, 0x5b_u8])

  CLSID_EVENTID_BDAConditionalAccessTAG = LibC::GUID.new(0xefc3a459_u32, 0xae8b_u16, 0x4b4a_u16, StaticArray[0x8f_u8, 0xe9_u8, 0x79_u8, 0xa0_u8, 0xd0_u8, 0x97_u8, 0xf3_u8, 0xea_u8])

  CLSID_EVENTTYPE_CASDescrambleFailureEvent = LibC::GUID.new(0xb2127d42_u32, 0x7be5_u16, 0x4f4b_u16, StaticArray[0x91_u8, 0x30_u8, 0x66_u8, 0x79_u8, 0x89_u8, 0x9f_u8, 0x4f_u8, 0x4b_u8])

  CLSID_EVENTID_CASFailureSpanningEvent = LibC::GUID.new(0xead831ae_u32, 0x5529_u16, 0x4d1f_u16, StaticArray[0xaf_u8, 0xce_u8, 0xd_u8, 0x8c_u8, 0xd1_u8, 0x25_u8, 0x7d_u8, 0x30_u8])

  CLSID_EVENTID_ChannelChangeSpanningEvent = LibC::GUID.new(0x9067c5e5_u32, 0x4c5c_u16, 0x4205_u16, StaticArray[0x86_u8, 0xc8_u8, 0x7a_u8, 0xfe_u8, 0x20_u8, 0xfe_u8, 0x1e_u8, 0xfa_u8])

  CLSID_EVENTID_ChannelTypeSpanningEvent = LibC::GUID.new(0x72ab1d51_u32, 0x87d2_u16, 0x489b_u16, StaticArray[0xba_u8, 0x11_u8, 0xe_u8, 0x8_u8, 0xdc_u8, 0x21_u8, 0x2_u8, 0x43_u8])

  CLSID_EVENTID_ChannelInfoSpanningEvent = LibC::GUID.new(0x41f36d80_u32, 0x4132_u16, 0x4cc2_u16, StaticArray[0xb1_u8, 0x21_u8, 0x1_u8, 0xa4_u8, 0x32_u8, 0x19_u8, 0xd8_u8, 0x1b_u8])

  CLSID_EVENTID_RRTSpanningEvent = LibC::GUID.new(0xf6cfc8f4_u32, 0xda93_u16, 0x4f2f_u16, StaticArray[0xbf_u8, 0xf8_u8, 0xba_u8, 0x1e_u8, 0xe6_u8, 0xfc_u8, 0xa3_u8, 0xa2_u8])

  CLSID_EVENTID_CSDescriptorSpanningEvent = LibC::GUID.new(0xefe779d9_u32, 0x97f0_u16, 0x4786_u16, StaticArray[0x80_u8, 0xd_u8, 0x95_u8, 0xcf_u8, 0x50_u8, 0x5d_u8, 0xdc_u8, 0x66_u8])

  CLSID_EVENTID_CtxADescriptorSpanningEvent = LibC::GUID.new(0x3ab4a2e6_u32, 0x4247_u16, 0x4b34_u16, StaticArray[0x89_u8, 0x6c_u8, 0x30_u8, 0xaf_u8, 0xa5_u8, 0xd2_u8, 0x1c_u8, 0x24_u8])

  CLSID_EVENTID_DVBScramblingControlSpanningEvent = LibC::GUID.new(0x4bd4e1c4_u32, 0x90a1_u16, 0x4109_u16, StaticArray[0x82_u8, 0x36_u8, 0x27_u8, 0xf0_u8, 0xe_u8, 0x7d_u8, 0xcc_u8, 0x5b_u8])

  CLSID_EVENTID_SignalAndServiceStatusSpanningEvent = LibC::GUID.new(0x8068c5cb_u32, 0x3c04_u16, 0x492b_u16, StaticArray[0xb4_u8, 0x7d_u8, 0x3_u8, 0x8_u8, 0x82_u8, 0xd_u8, 0xce_u8, 0x51_u8])

  CLSID_EVENTID_EmmMessageSpanningEvent = LibC::GUID.new(0x6bf00268_u32, 0x4f7e_u16, 0x4294_u16, StaticArray[0xaa_u8, 0x87_u8, 0xe9_u8, 0xe9_u8, 0x53_u8, 0xe4_u8, 0x3f_u8, 0x14_u8])

  CLSID_EVENTID_AudioTypeSpanningEvent = LibC::GUID.new(0x501cbfbe_u32, 0xb849_u16, 0x42ce_u16, StaticArray[0x9b_u8, 0xe9_u8, 0x3d_u8, 0xb8_u8, 0x69_u8, 0xfb_u8, 0x82_u8, 0xb3_u8])

  CLSID_EVENTID_StreamTypeSpanningEvent = LibC::GUID.new(0x82af2ebc_u32, 0x30a6_u16, 0x4264_u16, StaticArray[0xa8_u8, 0xb_u8, 0xad_u8, 0x2e_u8, 0x13_u8, 0x72_u8, 0xac_u8, 0x60_u8])

  CLSID_EVENTID_ARIBcontentSpanningEvent = LibC::GUID.new(0x3a954083_u32, 0x93d0_u16, 0x463e_u16, StaticArray[0x90_u8, 0xb2_u8, 0x7_u8, 0x42_u8, 0xc4_u8, 0x96_u8, 0xed_u8, 0xf0_u8])

  CLSID_EVENTID_LanguageSpanningEvent = LibC::GUID.new(0xe292666d_u32, 0x9c02_u16, 0x448d_u16, StaticArray[0xaa_u8, 0x8d_u8, 0x78_u8, 0x1a_u8, 0x93_u8, 0xfd_u8, 0xc3_u8, 0x95_u8])

  CLSID_EVENTID_DualMonoSpanningEvent = LibC::GUID.new(0xa9a29b56_u32, 0xa84b_u16, 0x488c_u16, StaticArray[0x89_u8, 0xd5_u8, 0xd_u8, 0x4e_u8, 0x76_u8, 0x57_u8, 0xc8_u8, 0xce_u8])

  CLSID_EVENTID_PIDListSpanningEvent = LibC::GUID.new(0x47fc8f65_u32, 0xe2bb_u16, 0x4634_u16, StaticArray[0x9c_u8, 0xef_u8, 0xfd_u8, 0xbf_u8, 0xe6_u8, 0x26_u8, 0x1d_u8, 0x5c_u8])

  CLSID_EVENTID_AudioDescriptorSpanningEvent = LibC::GUID.new(0x107bd41c_u32, 0xa6da_u16, 0x4691_u16, StaticArray[0x83_u8, 0x69_u8, 0x11_u8, 0xb2_u8, 0xcd_u8, 0xaa_u8, 0x28_u8, 0x8e_u8])

  CLSID_EVENTID_SubtitleSpanningEvent = LibC::GUID.new(0x5dcec048_u32, 0xd0b9_u16, 0x4163_u16, StaticArray[0x87_u8, 0x2c_u8, 0x4f_u8, 0x32_u8, 0x22_u8, 0x3b_u8, 0xe8_u8, 0x8a_u8])

  CLSID_EVENTID_TeletextSpanningEvent = LibC::GUID.new(0x9599d950_u32, 0x5f33_u16, 0x4617_u16, StaticArray[0xaf_u8, 0x7c_u8, 0x1e_u8, 0x54_u8, 0xb5_u8, 0x10_u8, 0xda_u8, 0xa3_u8])

  CLSID_EVENTID_StreamIDSpanningEvent = LibC::GUID.new(0xcaf1ab68_u32, 0xe153_u16, 0x4d41_u16, StaticArray[0xa6_u8, 0xb3_u8, 0xa7_u8, 0xc9_u8, 0x98_u8, 0xdb_u8, 0x75_u8, 0xee_u8])

  CLSID_EVENTID_PBDAParentalControlEvent = LibC::GUID.new(0xf947aa85_u32, 0xfb52_u16, 0x48e8_u16, StaticArray[0xb9_u8, 0xc5_u8, 0xe1_u8, 0xe1_u8, 0xf4_u8, 0x11_u8, 0xa5_u8, 0x1a_u8])

  CLSID_EVENTID_TuneFailureEvent = LibC::GUID.new(0xd97287b2_u32, 0x2dfd_u16, 0x436a_u16, StaticArray[0x94_u8, 0x85_u8, 0x99_u8, 0xd7_u8, 0xd4_u8, 0xab_u8, 0x5a_u8, 0x69_u8])

  CLSID_EVENTID_TuneFailureSpanningEvent = LibC::GUID.new(0x6f8aa455_u32, 0x5ee1_u16, 0x48ab_u16, StaticArray[0xa2_u8, 0x7c_u8, 0x4c_u8, 0x8d_u8, 0x70_u8, 0xb9_u8, 0xae_u8, 0xba_u8])

  CLSID_EVENTID_DvbParentalRatingDescriptor = LibC::GUID.new(0x2a67a58d_u32, 0xeca5_u16, 0x4eac_u16, StaticArray[0xab_u8, 0xcb_u8, 0xe7_u8, 0x34_u8, 0xd3_u8, 0x77_u8, 0x6d_u8, 0xa_u8])

  CLSID_EVENTID_DFNWithNoActualAVData = LibC::GUID.new(0xf5689ffe_u32, 0x55f9_u16, 0x4bb3_u16, StaticArray[0x96_u8, 0xbe_u8, 0xae_u8, 0x97_u8, 0x1c_u8, 0x63_u8, 0xba_u8, 0xe0_u8])

  CLSID_KSDATAFORMAT_TYPE_BDA_ANTENNA = LibC::GUID.new(0x71985f41_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_BDA_MPEG2_TRANSPORT = LibC::GUID.new(0xf4aeb342_u32, 0x329_u16, 0x4fdd_u16, StaticArray[0xa8_u8, 0xfd_u8, 0x4a_u8, 0xff_u8, 0x49_u8, 0x26_u8, 0xc9_u8, 0x78_u8])

  CLSID_KSDATAFORMAT_SPECIFIER_BDA_TRANSPORT = LibC::GUID.new(0x8deda6fd_u32, 0xac5f_u16, 0x4334_u16, StaticArray[0x8e_u8, 0xcf_u8, 0xa4_u8, 0xba_u8, 0x8f_u8, 0xa7_u8, 0xd0_u8, 0xf0_u8])

  CLSID_KSDATAFORMAT_TYPE_BDA_IF_SIGNAL = LibC::GUID.new(0x61be0b47_u32, 0xa5eb_u16, 0x499b_u16, StaticArray[0x9a_u8, 0x85_u8, 0x5b_u8, 0x16_u8, 0xc0_u8, 0x7f_u8, 0x12_u8, 0x58_u8])

  CLSID_KSDATAFORMAT_TYPE_MPEG2_SECTIONS = LibC::GUID.new(0x455f176c_u32, 0x4b06_u16, 0x47ce_u16, StaticArray[0x9a_u8, 0xef_u8, 0x8c_u8, 0xae_u8, 0xf7_u8, 0x3d_u8, 0xf7_u8, 0xb5_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_ATSC_SI = LibC::GUID.new(0xb3c7397c_u32, 0xd303_u16, 0x414d_u16, StaticArray[0xb3_u8, 0x3c_u8, 0x4e_u8, 0xd2_u8, 0xc9_u8, 0xd2_u8, 0x97_u8, 0x33_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_DVB_SI = LibC::GUID.new(0xe9dd31a3_u32, 0x221d_u16, 0x4adb_u16, StaticArray[0x85_u8, 0x32_u8, 0x9a_u8, 0xf3_u8, 0x9_u8, 0xc1_u8, 0xa4_u8, 0x8_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_PSIP = LibC::GUID.new(0x762e3f66_u32, 0x336f_u16, 0x48d1_u16, StaticArray[0xbf_u8, 0x83_u8, 0x2b_u8, 0x0_u8, 0x35_u8, 0x2c_u8, 0x11_u8, 0xf0_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_OOB_PSIP = LibC::GUID.new(0x951727db_u32, 0xd2ce_u16, 0x4528_u16, StaticArray[0x96_u8, 0xf6_u8, 0x33_u8, 0x1_u8, 0xfa_u8, 0xbb_u8, 0x2d_u8, 0xe0_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_ISDB_SI = LibC::GUID.new(0x4a2eeb99_u32, 0x6458_u16, 0x4538_u16, StaticArray[0xb1_u8, 0x87_u8, 0x4_u8, 0x1_u8, 0x7c_u8, 0x41_u8, 0x41_u8, 0x3f_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_PBDA_TRANSPORT_RAW = LibC::GUID.new(0xd7aed42_u32, 0xcb9a_u16, 0x11db_u16, StaticArray[0x97_u8, 0x5_u8, 0x0_u8, 0x50_u8, 0x56_u8, 0xc0_u8, 0x0_u8, 0x8_u8])

  CLSID_PINNAME_BDA_TRANSPORT = LibC::GUID.new(0x78216a81_u32, 0xcfa8_u16, 0x493e_u16, StaticArray[0x97_u8, 0x11_u8, 0x36_u8, 0xa6_u8, 0x1c_u8, 0x8_u8, 0xbd_u8, 0x9d_u8])

  CLSID_PINNAME_BDA_ANALOG_VIDEO = LibC::GUID.new(0x5c0c8281_u32, 0x5667_u16, 0x486c_u16, StaticArray[0x84_u8, 0x82_u8, 0x63_u8, 0xe3_u8, 0x1f_u8, 0x1_u8, 0xa6_u8, 0xe9_u8])

  CLSID_PINNAME_BDA_ANALOG_AUDIO = LibC::GUID.new(0xd28a580a_u32, 0x9b1f_u16, 0x4b0c_u16, StaticArray[0x9c_u8, 0x33_u8, 0x9b_u8, 0xf0_u8, 0xa8_u8, 0xea_u8, 0x63_u8, 0x6b_u8])

  CLSID_PINNAME_BDA_FM_RADIO = LibC::GUID.new(0xd2855fed_u32, 0xb2d3_u16, 0x4eeb_u16, StaticArray[0x9b_u8, 0xd0_u8, 0x19_u8, 0x34_u8, 0x36_u8, 0xa2_u8, 0xf8_u8, 0x90_u8])

  CLSID_PINNAME_BDA_IF_PIN = LibC::GUID.new(0x1a9d4a42_u32, 0xf3cd_u16, 0x48a1_u16, StaticArray[0x9a_u8, 0xea_u8, 0x71_u8, 0xde_u8, 0x13_u8, 0x3c_u8, 0xbe_u8, 0x14_u8])

  CLSID_PINNAME_BDA_OPENCABLE_PSIP_PIN = LibC::GUID.new(0x297bb104_u32, 0xe5c9_u16, 0x4ace_u16, StaticArray[0xb1_u8, 0x23_u8, 0x95_u8, 0xc3_u8, 0xcb_u8, 0xb2_u8, 0x4d_u8, 0x4f_u8])

  CLSID_KSPROPSETID_BdaEthernetFilter = LibC::GUID.new(0x71985f43_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaIPv4Filter = LibC::GUID.new(0x71985f44_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaIPv6Filter = LibC::GUID.new(0xe1785a74_u32, 0x2a23_u16, 0x4fb3_u16, StaticArray[0x92_u8, 0x45_u8, 0xa8_u8, 0xf8_u8, 0x80_u8, 0x17_u8, 0xef_u8, 0x33_u8])

  CLSID_KSPROPSETID_BdaSignalStats = LibC::GUID.new(0x1347d106_u32, 0xcf3a_u16, 0x428a_u16, StaticArray[0xa5_u8, 0xcb_u8, 0xac_u8, 0xd_u8, 0x9a_u8, 0x2a_u8, 0x43_u8, 0x38_u8])

  CLSID_KSMETHODSETID_BdaChangeSync = LibC::GUID.new(0xfd0a5af3_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSMETHODSETID_BdaDeviceConfiguration = LibC::GUID.new(0x71985f45_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaTopology = LibC::GUID.new(0xa14ee835_u32, 0xa23_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaPinControl = LibC::GUID.new(0xded49d5_u32, 0xa8b7_u16, 0x4d5d_u16, StaticArray[0x97_u8, 0xa1_u8, 0x12_u8, 0xb0_u8, 0xc1_u8, 0x95_u8, 0x87_u8, 0x4d_u8])

  CLSID_KSEVENTSETID_BdaPinEvent = LibC::GUID.new(0x104781cd_u32, 0x50bd_u16, 0x40d5_u16, StaticArray[0x95_u8, 0xfb_u8, 0x8_u8, 0x7e_u8, 0xe_u8, 0x86_u8, 0xa5_u8, 0x91_u8])

  CLSID_KSPROPSETID_BdaVoidTransform = LibC::GUID.new(0x71985f46_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaNullTransform = LibC::GUID.new(0xddf15b0d_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaFrequencyFilter = LibC::GUID.new(0x71985f47_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSEVENTSETID_BdaTunerEvent = LibC::GUID.new(0xaab59e17_u32, 0x1c9_u16, 0x4ebf_u16, StaticArray[0x93_u8, 0xf2_u8, 0xfc_u8, 0x3b_u8, 0x79_u8, 0xb4_u8, 0x6f_u8, 0x91_u8])

  CLSID_KSPROPSETID_BdaLNBInfo = LibC::GUID.new(0x992cf102_u32, 0x49f9_u16, 0x4719_u16, StaticArray[0xa6_u8, 0x64_u8, 0xc4_u8, 0xf2_u8, 0x3e_u8, 0x24_u8, 0x8_u8, 0xf4_u8])

  CLSID_KSPROPSETID_BdaDiseqCommand = LibC::GUID.new(0xf84e2ab0_u32, 0x3c6b_u16, 0x45e3_u16, StaticArray[0xa0_u8, 0xfc_u8, 0x86_u8, 0x69_u8, 0xd4_u8, 0xb8_u8, 0x1f_u8, 0x11_u8])

  CLSID_KSEVENTSETID_BdaDiseqCEvent = LibC::GUID.new(0x8b19bbf0_u32, 0x4184_u16, 0x43ac_u16, StaticArray[0xad_u8, 0x3c_u8, 0xc_u8, 0x88_u8, 0x9b_u8, 0xe4_u8, 0xc2_u8, 0x12_u8])

  CLSID_KSPROPSETID_BdaDigitalDemodulator = LibC::GUID.new(0xef30f379_u32, 0x985b_u16, 0x4d10_u16, StaticArray[0xb6_u8, 0x40_u8, 0xa7_u8, 0x9d_u8, 0x5e_u8, 0x4_u8, 0xe1_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaAutodemodulate = LibC::GUID.new(0xddf15b12_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSPROPSETID_BdaTableSection = LibC::GUID.new(0x516b99c5_u32, 0x971c_u16, 0x4aaf_u16, StaticArray[0xb3_u8, 0xf3_u8, 0xd9_u8, 0xfd_u8, 0xa8_u8, 0xa1_u8, 0x5e_u8, 0x16_u8])

  CLSID_KSPROPSETID_BdaPIDFilter = LibC::GUID.new(0xd0a67d65_u32, 0x8df_u16, 0x4fec_u16, StaticArray[0x85_u8, 0x33_u8, 0xe5_u8, 0xb5_u8, 0x50_u8, 0x41_u8, 0xb_u8, 0x85_u8])

  CLSID_KSPROPSETID_BdaCA = LibC::GUID.new(0xb0693766_u32, 0x5278_u16, 0x4ec6_u16, StaticArray[0xb9_u8, 0xe1_u8, 0x3c_u8, 0xe4_u8, 0x5_u8, 0x60_u8, 0xef_u8, 0x5a_u8])

  CLSID_KSEVENTSETID_BdaCAEvent = LibC::GUID.new(0x488c4ccc_u32, 0xb768_u16, 0x4129_u16, StaticArray[0x8e_u8, 0xb1_u8, 0xb0_u8, 0xa_u8, 0x7_u8, 0x1f_u8, 0x90_u8, 0x68_u8])

  CLSID_KSMETHODSETID_BdaDrmService = LibC::GUID.new(0xbff6b5bb_u32, 0xb0ae_u16, 0x484c_u16, StaticArray[0x9d_u8, 0xca_u8, 0x73_u8, 0x52_u8, 0x8f_u8, 0xb0_u8, 0xb4_u8, 0x6e_u8])

  CLSID_KSMETHODSETID_BdaWmdrmSession = LibC::GUID.new(0x4be6fa3d_u32, 0x7cd_u16, 0x4139_u16, StaticArray[0x8b_u8, 0x80_u8, 0x8c_u8, 0x18_u8, 0xba_u8, 0x3a_u8, 0xec_u8, 0x88_u8])

  CLSID_KSMETHODSETID_BdaWmdrmTuner = LibC::GUID.new(0x86d979cf_u32, 0xa8a7_u16, 0x4f94_u16, StaticArray[0xb5_u8, 0xfb_u8, 0x14_u8, 0xc0_u8, 0xac_u8, 0xa6_u8, 0x8f_u8, 0xe6_u8])

  CLSID_KSMETHODSETID_BdaEventing = LibC::GUID.new(0xf99492da_u32, 0x6193_u16, 0x4eb0_u16, StaticArray[0x86_u8, 0x90_u8, 0x66_u8, 0x86_u8, 0xcb_u8, 0xff_u8, 0x71_u8, 0x3e_u8])

  CLSID_KSEVENTSETID_BdaEvent = LibC::GUID.new(0xae7e55b2_u32, 0x96d7_u16, 0x4e29_u16, StaticArray[0x90_u8, 0x8f_u8, 0x62_u8, 0xf9_u8, 0x5b_u8, 0x2a_u8, 0x16_u8, 0x79_u8])

  CLSID_KSMETHODSETID_BdaDebug = LibC::GUID.new(0xd4a90ec_u32, 0xc69d_u16, 0x4ee2_u16, StaticArray[0x8c_u8, 0x5a_u8, 0xfb_u8, 0x1f_u8, 0x63_u8, 0xa5_u8, 0xd_u8, 0xa1_u8])

  CLSID_KSMETHODSETID_BdaTuner = LibC::GUID.new(0xb774102f_u32, 0xac07_u16, 0x478a_u16, StaticArray[0x82_u8, 0x28_u8, 0x27_u8, 0x42_u8, 0xd9_u8, 0x61_u8, 0xfa_u8, 0x7e_u8])

  CLSID_KSMETHODSETID_BdaNameValueA = LibC::GUID.new(0xc24096d_u32, 0x5ff5_u16, 0x47de_u16, StaticArray[0xa8_u8, 0x56_u8, 0x6_u8, 0x2e_u8, 0x58_u8, 0x7e_u8, 0x37_u8, 0x27_u8])

  CLSID_KSMETHODSETID_BdaNameValue = LibC::GUID.new(0x36e07304_u32, 0x9f0d_u16, 0x4e88_u16, StaticArray[0x91_u8, 0x18_u8, 0xac_u8, 0xb_u8, 0xa3_u8, 0x17_u8, 0xb7_u8, 0xf2_u8])

  CLSID_KSMETHODSETID_BdaMux = LibC::GUID.new(0x942aafec_u32, 0x4c05_u16, 0x4c74_u16, StaticArray[0xb8_u8, 0xeb_u8, 0x87_u8, 0x6_u8, 0xc2_u8, 0xa4_u8, 0x94_u8, 0x3f_u8])

  CLSID_KSMETHODSETID_BdaScanning = LibC::GUID.new(0x12eb49df_u32, 0x6249_u16, 0x47f3_u16, StaticArray[0xb1_u8, 0x90_u8, 0xe2_u8, 0x1e_u8, 0x6e_u8, 0x2f_u8, 0x8a_u8, 0x9c_u8])

  CLSID_KSMETHODSETID_BdaGuideDataDeliveryService = LibC::GUID.new(0x8d9d5562_u32, 0x1589_u16, 0x417d_u16, StaticArray[0x99_u8, 0xce_u8, 0xac_u8, 0x53_u8, 0x1d_u8, 0xda_u8, 0x19_u8, 0xf9_u8])

  CLSID_KSMETHODSETID_BdaConditionalAccessService = LibC::GUID.new(0x10ced3b4_u32, 0x320b_u16, 0x41bf_u16, StaticArray[0x98_u8, 0x24_u8, 0x1b_u8, 0x2e_u8, 0x68_u8, 0xe7_u8, 0x1e_u8, 0xb9_u8])

  CLSID_KSMETHODSETID_BdaIsdbConditionalAccess = LibC::GUID.new(0x5e68c627_u32, 0x16c2_u16, 0x4e6c_u16, StaticArray[0xb1_u8, 0xe2_u8, 0xd0_u8, 0x1_u8, 0x70_u8, 0xcd_u8, 0xaa_u8, 0xf_u8])

  CLSID_KSMETHODSETID_BdaTSSelector = LibC::GUID.new(0x1dcfafe9_u32, 0xb45e_u16, 0x41b3_u16, StaticArray[0xbb_u8, 0x2a_u8, 0x56_u8, 0x1e_u8, 0xb1_u8, 0x29_u8, 0xae_u8, 0x98_u8])

  CLSID_KSMETHODSETID_BdaUserActivity = LibC::GUID.new(0xeda5c834_u32, 0x4531_u16, 0x483c_u16, StaticArray[0xbe_u8, 0xa_u8, 0x94_u8, 0xe6_u8, 0xc9_u8, 0x6f_u8, 0xf3_u8, 0x96_u8])

  CLSID_KSCATEGORY_BDA_RECEIVER_COMPONENT = LibC::GUID.new(0xfd0a5af4_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSCATEGORY_BDA_NETWORK_TUNER = LibC::GUID.new(0x71985f48_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSCATEGORY_BDA_NETWORK_EPG = LibC::GUID.new(0x71985f49_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSCATEGORY_BDA_IP_SINK = LibC::GUID.new(0x71985f4a_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSCATEGORY_BDA_NETWORK_PROVIDER = LibC::GUID.new(0x71985f4b_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSCATEGORY_BDA_TRANSPORT_INFORMATION = LibC::GUID.new(0xa2e3074f_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])

  CLSID_KSNODE_BDA_RF_TUNER = LibC::GUID.new(0x71985f4c_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSNODE_BDA_ANALOG_DEMODULATOR = LibC::GUID.new(0x634db199_u32, 0x27dd_u16, 0x46b8_u16, StaticArray[0xac_u8, 0xfb_u8, 0xec_u8, 0xc9_u8, 0x8e_u8, 0x61_u8, 0xa2_u8, 0xad_u8])

  CLSID_KSNODE_BDA_QAM_DEMODULATOR = LibC::GUID.new(0x71985f4d_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSNODE_BDA_QPSK_DEMODULATOR = LibC::GUID.new(0x6390c905_u32, 0x27c1_u16, 0x4d67_u16, StaticArray[0xbd_u8, 0xb7_u8, 0x77_u8, 0xc5_u8, 0xd_u8, 0x7_u8, 0x93_u8, 0x0_u8])

  CLSID_KSNODE_BDA_8VSB_DEMODULATOR = LibC::GUID.new(0x71985f4f_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSNODE_BDA_COFDM_DEMODULATOR = LibC::GUID.new(0x2dac6e05_u32, 0xedbe_u16, 0x4b9c_u16, StaticArray[0xb3_u8, 0x87_u8, 0x1b_u8, 0x6f_u8, 0xad_u8, 0x7d_u8, 0x64_u8, 0x95_u8])

  CLSID_KSNODE_BDA_8PSK_DEMODULATOR = LibC::GUID.new(0xe957a0e7_u32, 0xdd98_u16, 0x4a3c_u16, StaticArray[0x81_u8, 0xb_u8, 0x35_u8, 0x25_u8, 0x15_u8, 0x7a_u8, 0xb6_u8, 0x2e_u8])

  CLSID_KSNODE_BDA_ISDB_T_DEMODULATOR = LibC::GUID.new(0xfcea3ae3_u32, 0x2cb2_u16, 0x464d_u16, StaticArray[0x8f_u8, 0x5d_u8, 0x30_u8, 0x5c_u8, 0xb_u8, 0xb7_u8, 0x78_u8, 0xa2_u8])

  CLSID_KSNODE_BDA_ISDB_S_DEMODULATOR = LibC::GUID.new(0xedde230a_u32, 0x9086_u16, 0x432d_u16, StaticArray[0xb8_u8, 0xa5_u8, 0x66_u8, 0x70_u8, 0x26_u8, 0x38_u8, 0x7_u8, 0xe9_u8])

  CLSID_KSNODE_BDA_OPENCABLE_POD = LibC::GUID.new(0x345812a0_u32, 0xfb7c_u16, 0x4790_u16, StaticArray[0xaa_u8, 0x7e_u8, 0xb1_u8, 0xdb_u8, 0x88_u8, 0xac_u8, 0x19_u8, 0xc9_u8])

  CLSID_KSNODE_BDA_COMMON_CA_POD = LibC::GUID.new(0xd83ef8fc_u32, 0xf3b8_u16, 0x45ab_u16, StaticArray[0x8b_u8, 0x71_u8, 0xec_u8, 0xf7_u8, 0xc3_u8, 0x39_u8, 0xde_u8, 0xb4_u8])

  CLSID_KSNODE_BDA_PID_FILTER = LibC::GUID.new(0xf5412789_u32, 0xb0a0_u16, 0x44e1_u16, StaticArray[0xae_u8, 0x4f_u8, 0xee_u8, 0x99_u8, 0x9b_u8, 0x1b_u8, 0x7f_u8, 0xbe_u8])

  CLSID_KSNODE_BDA_IP_SINK = LibC::GUID.new(0x71985f4e_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  CLSID_KSNODE_BDA_VIDEO_ENCODER = LibC::GUID.new(0xd98429e3_u32, 0x65c9_u16, 0x4ac4_u16, StaticArray[0x93_u8, 0xaa_u8, 0x76_u8, 0x67_u8, 0x82_u8, 0x83_u8, 0x3b_u8, 0x7a_u8])

  CLSID_KSNODE_BDA_PBDA_CAS = LibC::GUID.new(0xc026869f_u32, 0x7129_u16, 0x4e71_u16, StaticArray[0x86_u8, 0x96_u8, 0xec_u8, 0x8f_u8, 0x75_u8, 0x29_u8, 0x9b_u8, 0x77_u8])

  CLSID_KSNODE_BDA_PBDA_ISDBCAS = LibC::GUID.new(0xf2cf2ab3_u32, 0x5b9d_u16, 0x40ae_u16, StaticArray[0xab_u8, 0x7c_u8, 0x4e_u8, 0x7a_u8, 0xd0_u8, 0xbd_u8, 0x1c_u8, 0x52_u8])

  CLSID_KSNODE_BDA_PBDA_TUNER = LibC::GUID.new(0xaa5e8286_u32, 0x593c_u16, 0x4979_u16, StaticArray[0x94_u8, 0x94_u8, 0x46_u8, 0xa2_u8, 0xa9_u8, 0xdf_u8, 0xe0_u8, 0x76_u8])

  CLSID_KSNODE_BDA_PBDA_MUX = LibC::GUID.new(0xf88c7787_u32, 0x6678_u16, 0x4f4b_u16, StaticArray[0xa1_u8, 0x3e_u8, 0xda_u8, 0x9_u8, 0x86_u8, 0x1d_u8, 0x68_u8, 0x2b_u8])

  CLSID_KSNODE_BDA_PBDA_DRM = LibC::GUID.new(0x9eeebd03_u32, 0xeea1_u16, 0x450f_u16, StaticArray[0x96_u8, 0xae_u8, 0x63_u8, 0x3e_u8, 0x6d_u8, 0xe6_u8, 0x3c_u8, 0xce_u8])

  CLSID_KSNODE_BDA_DRI_DRM = LibC::GUID.new(0x4f95ad74_u32, 0xcefb_u16, 0x42d2_u16, StaticArray[0x94_u8, 0xa9_u8, 0x68_u8, 0xc5_u8, 0xb2_u8, 0xc1_u8, 0xaa_u8, 0xbe_u8])

  CLSID_KSNODE_BDA_TS_SELECTOR = LibC::GUID.new(0x5eddf185_u32, 0xfed1_u16, 0x4f45_u16, StaticArray[0x96_u8, 0x85_u8, 0xbb_u8, 0xb7_u8, 0x3c_u8, 0x32_u8, 0x3c_u8, 0xfc_u8])

  CLSID_PINNAME_IPSINK_INPUT = LibC::GUID.new(0x3fdffa70_u32, 0xac9a_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x17_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])

  CLSID_KSDATAFORMAT_TYPE_BDA_IP = LibC::GUID.new(0xe25f7b8e_u32, 0xcccc_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x25_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP = LibC::GUID.new(0x5a9a213c_u32, 0xdb08_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])

  CLSID_KSDATAFORMAT_SPECIFIER_BDA_IP = LibC::GUID.new(0x6b891420_u32, 0xdb09_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])

  CLSID_KSDATAFORMAT_TYPE_BDA_IP_CONTROL = LibC::GUID.new(0xdadd5799_u32, 0x7d5b_u16, 0x4b63_u16, StaticArray[0x80_u8, 0xfb_u8, 0xd1_u8, 0x44_u8, 0x2f_u8, 0x26_u8, 0xb6_u8, 0x21_u8])

  CLSID_KSDATAFORMAT_SUBTYPE_BDA_IP_CONTROL = LibC::GUID.new(0x499856e8_u32, 0xe85b_u16, 0x48ed_u16, StaticArray[0x9b_u8, 0xea_u8, 0x41_u8, 0xd_u8, 0xd_u8, 0xd4_u8, 0xef_u8, 0x81_u8])

  CLSID_PINNAME_MPE = LibC::GUID.new(0xc1b06d73_u32, 0x1dbb_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x46_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])

  CLSID_KSDATAFORMAT_TYPE_MPE = LibC::GUID.new(0x455f176c_u32, 0x4b06_u16, 0x47ce_u16, StaticArray[0x9a_u8, 0xef_u8, 0x8c_u8, 0xae_u8, 0xf7_u8, 0x3d_u8, 0xf7_u8, 0xb5_u8])

  CLSID_DIGITAL_CABLE_NETWORK_TYPE = LibC::GUID.new(0x143827ab_u32, 0xf77b_u16, 0x498d_u16, StaticArray[0x81_u8, 0xca_u8, 0x5a_u8, 0x0_u8, 0x7a_u8, 0xec_u8, 0x28_u8, 0xbf_u8])

  CLSID_ANALOG_TV_NETWORK_TYPE = LibC::GUID.new(0xb820d87e_u32, 0xe0e3_u16, 0x478f_u16, StaticArray[0x8a_u8, 0x38_u8, 0x4e_u8, 0x13_u8, 0xf7_u8, 0xb3_u8, 0xdf_u8, 0x42_u8])

  CLSID_ANALOG_AUXIN_NETWORK_TYPE = LibC::GUID.new(0x742ef867_u32, 0x9e1_u16, 0x40a3_u16, StaticArray[0x82_u8, 0xd3_u8, 0x96_u8, 0x69_u8, 0xba_u8, 0x35_u8, 0x32_u8, 0x5f_u8])

  CLSID_ANALOG_FM_NETWORK_TYPE = LibC::GUID.new(0x7728087b_u32, 0x2bb9_u16, 0x4e30_u16, StaticArray[0x80_u8, 0x78_u8, 0x44_u8, 0x94_u8, 0x76_u8, 0xe5_u8, 0x9d_u8, 0xbb_u8])

  CLSID_ISDB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x95037f6f_u32, 0x3ac7_u16, 0x4452_u16, StaticArray[0xb6_u8, 0xc4_u8, 0x45_u8, 0xa9_u8, 0xce_u8, 0x92_u8, 0x92_u8, 0xa2_u8])

  CLSID_ISDB_T_NETWORK_TYPE = LibC::GUID.new(0xfc3855a6_u32, 0xc901_u16, 0x4f2e_u16, StaticArray[0xab_u8, 0xa8_u8, 0x90_u8, 0x81_u8, 0x5a_u8, 0xfc_u8, 0x6c_u8, 0x83_u8])

  CLSID_ISDB_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xb0a4e6a0_u32, 0x6a1a_u16, 0x4b83_u16, StaticArray[0xbb_u8, 0x5b_u8, 0x90_u8, 0x3e_u8, 0x1d_u8, 0x90_u8, 0xe6_u8, 0xb6_u8])

  CLSID_ISDB_S_NETWORK_TYPE = LibC::GUID.new(0xa1e78202_u32, 0x1459_u16, 0x41b1_u16, StaticArray[0x9c_u8, 0xa9_u8, 0x2a_u8, 0x92_u8, 0x58_u8, 0x7a_u8, 0x42_u8, 0xcc_u8])

  CLSID_ISDB_CABLE_TV_NETWORK_TYPE = LibC::GUID.new(0xc974ddb5_u32, 0x41fe_u16, 0x4b25_u16, StaticArray[0x97_u8, 0x41_u8, 0x92_u8, 0xf0_u8, 0x49_u8, 0xf1_u8, 0xd5_u8, 0xd1_u8])

  CLSID_DIRECT_TV_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0x93b66fb5_u32, 0x93d4_u16, 0x4323_u16, StaticArray[0x92_u8, 0x1c_u8, 0xc1_u8, 0xf5_u8, 0x2d_u8, 0xf6_u8, 0x1d_u8, 0x3f_u8])

  CLSID_ECHOSTAR_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xc4f6b31b_u32, 0xc6bf_u16, 0x4759_u16, StaticArray[0x88_u8, 0x6f_u8, 0xa7_u8, 0x38_u8, 0x6d_u8, 0xca_u8, 0x27_u8, 0xa0_u8])

  CLSID_ATSC_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0xdad2fdd_u32, 0x5fd7_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])

  CLSID_DVB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x216c62df_u32, 0x6d7f_u16, 0x4e9a_u16, StaticArray[0x85_u8, 0x71_u8, 0x5_u8, 0xf1_u8, 0x4e_u8, 0xdb_u8, 0x76_u8, 0x6a_u8])

  CLSID_BSKYB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x9e9e46c6_u32, 0x3aba_u16, 0x4f08_u16, StaticArray[0xad_u8, 0xe_u8, 0xcc_u8, 0x5a_u8, 0xc8_u8, 0x14_u8, 0x8c_u8, 0x2b_u8])

  CLSID_DVB_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xfa4b375a_u32, 0x45b4_u16, 0x4d45_u16, StaticArray[0x84_u8, 0x40_u8, 0x26_u8, 0x39_u8, 0x57_u8, 0xb1_u8, 0x16_u8, 0x23_u8])

  CLSID_DVB_CABLE_TV_NETWORK_TYPE = LibC::GUID.new(0xdc0c0fe7_u32, 0x485_u16, 0x4266_u16, StaticArray[0xb9_u8, 0x3f_u8, 0x68_u8, 0xfb_u8, 0xf8_u8, 0xe_u8, 0xd8_u8, 0x34_u8])

  CLSID_BDA_DEBUG_DATA_AVAILABLE = LibC::GUID.new(0x69c24f54_u32, 0x9983_u16, 0x497e_u16, StaticArray[0xb4_u8, 0x15_u8, 0x28_u8, 0x2b_u8, 0xe4_u8, 0xc5_u8, 0x55_u8, 0xfb_u8])

  CLSID_BDA_DEBUG_DATA_TYPE_STRING = LibC::GUID.new(0xa806e767_u32, 0xde5c_u16, 0x430c_u16, StaticArray[0x80_u8, 0xbf_u8, 0xa2_u8, 0x1e_u8, 0xbe_u8, 0x6_u8, 0xc7_u8, 0x48_u8])

  CLSID_EVENTID_BDA_IsdbCASResponse = LibC::GUID.new(0xd4cb1966_u32, 0x41bc_u16, 0x4ced_u16, StaticArray[0x9a_u8, 0x20_u8, 0xfd_u8, 0xce_u8, 0xac_u8, 0x78_u8, 0xf7_u8, 0xd_u8])

  CLSID_EVENTID_BDA_CASRequestTuner = LibC::GUID.new(0xcf39a9d8_u32, 0xf5d3_u16, 0x4685_u16, StaticArray[0xbe_u8, 0x57_u8, 0xed_u8, 0x81_u8, 0xdb_u8, 0xa4_u8, 0x6b_u8, 0x27_u8])

  CLSID_EVENTID_BDA_CASReleaseTuner = LibC::GUID.new(0x20c1a16b_u32, 0x441f_u16, 0x49a5_u16, StaticArray[0xbb_u8, 0x5c_u8, 0xe9_u8, 0xa0_u8, 0x44_u8, 0x95_u8, 0xc6_u8, 0xc1_u8])

  CLSID_EVENTID_BDA_CASOpenMMI = LibC::GUID.new(0x85dac915_u32, 0xe593_u16, 0x410d_u16, StaticArray[0x84_u8, 0x71_u8, 0xd6_u8, 0x81_u8, 0x21_u8, 0x5_u8, 0xf2_u8, 0x8e_u8])

  CLSID_EVENTID_BDA_CASCloseMMI = LibC::GUID.new(0x5d0f550f_u32, 0xde2e_u16, 0x479d_u16, StaticArray[0x83_u8, 0x45_u8, 0xec_u8, 0xe_u8, 0x95_u8, 0x57_u8, 0xe8_u8, 0xa2_u8])

  CLSID_EVENTID_BDA_CASBroadcastMMI = LibC::GUID.new(0x676876f0_u32, 0x1132_u16, 0x404c_u16, StaticArray[0xa7_u8, 0xca_u8, 0xe7_u8, 0x20_u8, 0x69_u8, 0xa9_u8, 0xd5_u8, 0x4f_u8])

  CLSID_EVENTID_BDA_TunerSignalLock = LibC::GUID.new(0x1872e740_u32, 0xf573_u16, 0x429b_u16, StaticArray[0xa0_u8, 0xe_u8, 0xd9_u8, 0xc1_u8, 0xe4_u8, 0x8_u8, 0xaf_u8, 0x9_u8])

  CLSID_EVENTID_BDA_TunerNoSignal = LibC::GUID.new(0xe29b382b_u32, 0x1edd_u16, 0x4930_u16, StaticArray[0xbc_u8, 0x46_u8, 0x68_u8, 0x2f_u8, 0xd7_u8, 0x2d_u8, 0x2d_u8, 0xfb_u8])

  CLSID_EVENTID_BDA_GPNVValueUpdate = LibC::GUID.new(0xff75c68c_u32, 0xf416_u16, 0x4e7e_u16, StaticArray[0xbf_u8, 0x17_u8, 0x6d_u8, 0x55_u8, 0xc5_u8, 0xdf_u8, 0x15_u8, 0x75_u8])

  CLSID_EVENTID_BDA_UpdateDrmStatus = LibC::GUID.new(0x65a6f681_u32, 0x1462_u16, 0x473b_u16, StaticArray[0x88_u8, 0xce_u8, 0xcb_u8, 0x73_u8, 0x14_u8, 0x27_u8, 0xbd_u8, 0xb5_u8])

  CLSID_EVENTID_BDA_UpdateScanState = LibC::GUID.new(0x55702b50_u32, 0x7b49_u16, 0x42b8_u16, StaticArray[0xa8_u8, 0x2f_u8, 0x4a_u8, 0xfb_u8, 0x69_u8, 0x1b_u8, 0x6_u8, 0x28_u8])

  CLSID_EVENTID_BDA_GuideDataAvailable = LibC::GUID.new(0x98db717a_u32, 0x478a_u16, 0x4cd4_u16, StaticArray[0x92_u8, 0xd0_u8, 0x95_u8, 0xf6_u8, 0x6b_u8, 0x89_u8, 0xe5_u8, 0xb1_u8])

  CLSID_EVENTID_BDA_GuideServiceInformationUpdated = LibC::GUID.new(0xa1c3ea2b_u32, 0x175f_u16, 0x4458_u16, StaticArray[0xb7_u8, 0x35_u8, 0x50_u8, 0x7d_u8, 0x22_u8, 0xdb_u8, 0x23_u8, 0xa6_u8])

  CLSID_EVENTID_BDA_GuideDataError = LibC::GUID.new(0xac33c448_u32, 0x6f73_u16, 0x4fd7_u16, StaticArray[0xb3_u8, 0x41_u8, 0x59_u8, 0x4c_u8, 0x36_u8, 0xd_u8, 0x8d_u8, 0x74_u8])

  CLSID_EVENTID_BDA_DiseqCResponseAvailable = LibC::GUID.new(0xefa628f8_u32, 0x1f2c_u16, 0x4b67_u16, StaticArray[0x9e_u8, 0xa5_u8, 0xac_u8, 0xf6_u8, 0xfa_u8, 0x9a_u8, 0x1f_u8, 0x36_u8])

  CLSID_EVENTID_BDA_LbigsOpenConnection = LibC::GUID.new(0x356207b2_u32, 0x6f31_u16, 0x4eb0_u16, StaticArray[0xa2_u8, 0x71_u8, 0xb3_u8, 0xfa_u8, 0x6b_u8, 0xb7_u8, 0x68_u8, 0xf_u8])

  CLSID_EVENTID_BDA_LbigsSendData = LibC::GUID.new(0x1123277b_u32, 0xf1c6_u16, 0x4154_u16, StaticArray[0x8b_u8, 0xd_u8, 0x48_u8, 0xe6_u8, 0x15_u8, 0x70_u8, 0x59_u8, 0xaa_u8])

  CLSID_EVENTID_BDA_LbigsCloseConnectionHandle = LibC::GUID.new(0xc2f08b99_u32, 0x65ef_u16, 0x4314_u16, StaticArray[0x96_u8, 0x71_u8, 0xe9_u8, 0x9d_u8, 0x4c_u8, 0xce_u8, 0xb_u8, 0xae_u8])

  CLSID_EVENTID_BDA_EncoderSignalLock = LibC::GUID.new(0x5ec90eb9_u32, 0x39fa_u16, 0x4cfc_u16, StaticArray[0xb9_u8, 0x3f_u8, 0x0_u8, 0xbb_u8, 0x11_u8, 0x7_u8, 0x7f_u8, 0x5e_u8])

  CLSID_EVENTID_BDA_FdcStatus = LibC::GUID.new(0x5f25366_u32, 0xd0eb_u16, 0x43d2_u16, StaticArray[0xbc_u8, 0x3c_u8, 0x68_u8, 0x2b_u8, 0x86_u8, 0x3d_u8, 0xf1_u8, 0x42_u8])

  CLSID_EVENTID_BDA_FdcTableSection = LibC::GUID.new(0x6a0cd757_u32, 0x4ce3_u16, 0x4e5b_u16, StaticArray[0x94_u8, 0x44_u8, 0x71_u8, 0x87_u8, 0xb8_u8, 0x71_u8, 0x52_u8, 0xc5_u8])

  CLSID_EVENTID_BDA_TransprtStreamSelectorInfo = LibC::GUID.new(0xc40f9f85_u32, 0x9d0_u16, 0x489c_u16, StaticArray[0x9e_u8, 0x9c_u8, 0xa_u8, 0xbb_u8, 0xb5_u8, 0x69_u8, 0x51_u8, 0xb0_u8])

  CLSID_EVENTID_BDA_RatingPinReset = LibC::GUID.new(0xc6e048c0_u32, 0xc574_u16, 0x4c26_u16, StaticArray[0xbc_u8, 0xda_u8, 0x2f_u8, 0x4d_u8, 0x35_u8, 0xeb_u8, 0x5e_u8, 0x85_u8])

  CLSID_PBDA_ALWAYS_TUNE_IN_MUX = LibC::GUID.new(0x1e1d7141_u32, 0x583f_u16, 0x4ac2_u16, StaticArray[0xb0_u8, 0x19_u8, 0x1f_u8, 0x43_u8, 0xe_u8, 0xda_u8, 0xf_u8, 0x4c_u8])

  CLSID_BDANETWORKTYPE_ATSC = LibC::GUID.new(0x71985f51_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  enum OA_BOOL
    OATRUE = -1_i32
    OAFALSE = 0_i32
  end
  enum MPEGLAYER3WAVEFORMAT_FLAGS : UInt32
    MPEGLAYER3_FLAG_PADDING_ISO = 0_u32
    MPEGLAYER3_FLAG_PADDING_ON = 1_u32
    MPEGLAYER3_FLAG_PADDING_OFF = 2_u32
  end
  enum AMVP_SELECT_FORMAT_BY
    AMVP_DO_NOT_CARE = 0_i32
    AMVP_BEST_BANDWIDTH = 1_i32
    AMVP_INPUT_SAME_AS_OUTPUT = 2_i32
  end
  enum AMVP_MODE
    AMVP_MODE_WEAVE = 0_i32
    AMVP_MODE_BOBINTERLEAVED = 1_i32
    AMVP_MODE_BOBNONINTERLEAVED = 2_i32
    AMVP_MODE_SKIPEVEN = 3_i32
    AMVP_MODE_SKIPODD = 4_i32
  end
  enum PIN_DIRECTION
    PINDIR_INPUT = 0_i32
    PINDIR_OUTPUT = 1_i32
  end
  enum FILTER_STATE
    State_Stopped = 0_i32
    State_Paused = 1_i32
    State_Running = 2_i32
  end
  enum AM_SAMPLE_PROPERTY_FLAGS
    AM_SAMPLE_SPLICEPOINT = 1_i32
    AM_SAMPLE_PREROLL = 2_i32
    AM_SAMPLE_DATADISCONTINUITY = 4_i32
    AM_SAMPLE_TYPECHANGED = 8_i32
    AM_SAMPLE_TIMEVALID = 16_i32
    AM_SAMPLE_TIMEDISCONTINUITY = 64_i32
    AM_SAMPLE_FLUSH_ON_PAUSE = 128_i32
    AM_SAMPLE_STOPVALID = 256_i32
    AM_SAMPLE_ENDOFSTREAM = 512_i32
    AM_STREAM_MEDIA = 0_i32
    AM_STREAM_CONTROL = 1_i32
  end
  enum AM_SEEKING_SeekingFlags
    AM_SEEKING_NoPositioning = 0_i32
    AM_SEEKING_AbsolutePositioning = 1_i32
    AM_SEEKING_RelativePositioning = 2_i32
    AM_SEEKING_IncrementalPositioning = 3_i32
    AM_SEEKING_PositioningBitsMask = 3_i32
    AM_SEEKING_SeekToKeyFrame = 4_i32
    AM_SEEKING_ReturnTime = 8_i32
    AM_SEEKING_Segment = 16_i32
    AM_SEEKING_NoFlush = 32_i32
  end
  enum AM_SEEKING_SEEKING_CAPABILITIES
    AM_SEEKING_CanSeekAbsolute = 1_i32
    AM_SEEKING_CanSeekForwards = 2_i32
    AM_SEEKING_CanSeekBackwards = 4_i32
    AM_SEEKING_CanGetCurrentPos = 8_i32
    AM_SEEKING_CanGetStopPos = 16_i32
    AM_SEEKING_CanGetDuration = 32_i32
    AM_SEEKING_CanPlayBackwards = 64_i32
    AM_SEEKING_CanDoSegments = 128_i32
    AM_SEEKING_Source = 256_i32
  end
  enum AM_MEDIAEVENT_FLAGS
    AM_MEDIAEVENT_NONOTIFY = 1_i32
  end
  enum IFILTERMAPPER_MERIT
    MERIT_PREFERRED = 8388608_i32
    MERIT_NORMAL = 6291456_i32
    MERIT_UNLIKELY = 4194304_i32
    MERIT_DO_NOT_USE = 2097152_i32
    MERIT_SW_COMPRESSOR = 1048576_i32
    MERIT_HW_COMPRESSOR = 1048656_i32
  end
  @[Flags]
  enum REG_PINFLAG : UInt32
    REG_PINFLAG_B_ZERO = 1_u32
    REG_PINFLAG_B_RENDERER = 2_u32
    REG_PINFLAG_B_MANY = 4_u32
    REG_PINFLAG_B_OUTPUT = 8_u32
  end
  enum QualityMessageType
    Famine = 0_i32
    Flood = 1_i32
  end
  enum COLORKEY_TYPE
    CK_NOCOLORKEY = 0_i32
    CK_INDEX = 1_i32
    CK_RGB = 2_i32
  end
  @[Flags]
  enum ADVISE_TYPE : UInt32
    ADVISE_NONE = 0_u32
    ADVISE_CLIPPING = 1_u32
    ADVISE_PALETTE = 2_u32
    ADVISE_COLORKEY = 4_u32
    ADVISE_POSITION = 8_u32
    ADVISE_DISPLAY_CHANGE = 16_u32
  end
  enum AM_FILESINK_FLAGS
    AM_FILE_OVERWRITE = 1_i32
  end
  enum AM_RENSDEREXFLAGS_
    AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1_i32
  end
  enum AM_STREAM_INFO_FLAGS
    AM_STREAM_INFO_START_DEFINED = 1_i32
    AM_STREAM_INFO_STOP_DEFINED = 2_i32
    AM_STREAM_INFO_DISCARDING = 4_i32
    AM_STREAM_INFO_STOP_SEND_EXTRA = 16_i32
  end
  enum InterleavingMode
    INTERLEAVE_NONE = 0_i32
    INTERLEAVE_CAPTURE = 1_i32
    INTERLEAVE_FULL = 2_i32
    INTERLEAVE_NONE_BUFFERED = 3_i32
  end
  enum CompressionCaps
    CompressionCaps_CanQuality = 1_i32
    CompressionCaps_CanCrunch = 2_i32
    CompressionCaps_CanKeyFrame = 4_i32
    CompressionCaps_CanBFrame = 8_i32
    CompressionCaps_CanWindow = 16_i32
  end
  enum VfwCaptureDialogs
    VfwCaptureDialog_Source = 1_i32
    VfwCaptureDialog_Format = 2_i32
    VfwCaptureDialog_Display = 4_i32
  end
  enum VfwCompressDialogs
    VfwCompressDialog_Config = 1_i32
    VfwCompressDialog_About = 2_i32
    VfwCompressDialog_QueryConfig = 4_i32
    VfwCompressDialog_QueryAbout = 8_i32
  end
  enum AnalogVideoStandard
    AnalogVideo_None = 0_i32
    AnalogVideo_NTSC_M = 1_i32
    AnalogVideo_NTSC_M_J = 2_i32
    AnalogVideo_NTSC_433 = 4_i32
    AnalogVideo_PAL_B = 16_i32
    AnalogVideo_PAL_D = 32_i32
    AnalogVideo_PAL_G = 64_i32
    AnalogVideo_PAL_H = 128_i32
    AnalogVideo_PAL_I = 256_i32
    AnalogVideo_PAL_M = 512_i32
    AnalogVideo_PAL_N = 1024_i32
    AnalogVideo_PAL_60 = 2048_i32
    AnalogVideo_SECAM_B = 4096_i32
    AnalogVideo_SECAM_D = 8192_i32
    AnalogVideo_SECAM_G = 16384_i32
    AnalogVideo_SECAM_H = 32768_i32
    AnalogVideo_SECAM_K = 65536_i32
    AnalogVideo_SECAM_K1 = 131072_i32
    AnalogVideo_SECAM_L = 262144_i32
    AnalogVideo_SECAM_L1 = 524288_i32
    AnalogVideo_PAL_N_COMBO = 1048576_i32
    AnalogVideoMask_MCE_NTSC = 1052167_i32
    AnalogVideoMask_MCE_PAL = 496_i32
    AnalogVideoMask_MCE_SECAM = 1044480_i32
  end
  enum TunerInputType
    TunerInputCable = 0_i32
    TunerInputAntenna = 1_i32
  end
  enum VideoCopyProtectionType
    VideoCopyProtectionMacrovisionBasic = 0_i32
    VideoCopyProtectionMacrovisionCBI = 1_i32
  end
  enum PhysicalConnectorType
    PhysConn_Video_Tuner = 1_i32
    PhysConn_Video_Composite = 2_i32
    PhysConn_Video_SVideo = 3_i32
    PhysConn_Video_RGB = 4_i32
    PhysConn_Video_YRYBY = 5_i32
    PhysConn_Video_SerialDigital = 6_i32
    PhysConn_Video_ParallelDigital = 7_i32
    PhysConn_Video_SCSI = 8_i32
    PhysConn_Video_AUX = 9_i32
    PhysConn_Video_1394 = 10_i32
    PhysConn_Video_USB = 11_i32
    PhysConn_Video_VideoDecoder = 12_i32
    PhysConn_Video_VideoEncoder = 13_i32
    PhysConn_Video_SCART = 14_i32
    PhysConn_Video_Black = 15_i32
    PhysConn_Audio_Tuner = 4096_i32
    PhysConn_Audio_Line = 4097_i32
    PhysConn_Audio_Mic = 4098_i32
    PhysConn_Audio_AESDigital = 4099_i32
    PhysConn_Audio_SPDIFDigital = 4100_i32
    PhysConn_Audio_SCSI = 4101_i32
    PhysConn_Audio_AUX = 4102_i32
    PhysConn_Audio_1394 = 4103_i32
    PhysConn_Audio_USB = 4104_i32
    PhysConn_Audio_AudioDecoder = 4105_i32
  end
  enum VideoProcAmpProperty
    VideoProcAmp_Brightness = 0_i32
    VideoProcAmp_Contrast = 1_i32
    VideoProcAmp_Hue = 2_i32
    VideoProcAmp_Saturation = 3_i32
    VideoProcAmp_Sharpness = 4_i32
    VideoProcAmp_Gamma = 5_i32
    VideoProcAmp_ColorEnable = 6_i32
    VideoProcAmp_WhiteBalance = 7_i32
    VideoProcAmp_BacklightCompensation = 8_i32
    VideoProcAmp_Gain = 9_i32
  end
  enum VideoProcAmpFlags
    VideoProcAmp_Flags_Auto = 1_i32
    VideoProcAmp_Flags_Manual = 2_i32
  end
  enum CameraControlProperty
    CameraControl_Pan = 0_i32
    CameraControl_Tilt = 1_i32
    CameraControl_Roll = 2_i32
    CameraControl_Zoom = 3_i32
    CameraControl_Exposure = 4_i32
    CameraControl_Iris = 5_i32
    CameraControl_Focus = 6_i32
  end
  enum CameraControlFlags
    CameraControl_Flags_Auto = 1_i32
    CameraControl_Flags_Manual = 2_i32
  end
  enum VideoControlFlags
    VideoControlFlag_FlipHorizontal = 1_i32
    VideoControlFlag_FlipVertical = 2_i32
    VideoControlFlag_ExternalTriggerEnable = 4_i32
    VideoControlFlag_Trigger = 8_i32
  end
  enum AMTunerSubChannel
    AMTUNER_SUBCHAN_NO_TUNE = -2_i32
    AMTUNER_SUBCHAN_DEFAULT = -1_i32
  end
  enum AMTunerSignalStrength
    AMTUNER_HASNOSIGNALSTRENGTH = -1_i32
    AMTUNER_NOSIGNAL = 0_i32
    AMTUNER_SIGNALPRESENT = 1_i32
  end
  enum AMTunerModeType
    AMTUNER_MODE_DEFAULT = 0_i32
    AMTUNER_MODE_TV = 1_i32
    AMTUNER_MODE_FM_RADIO = 2_i32
    AMTUNER_MODE_AM_RADIO = 4_i32
    AMTUNER_MODE_DSS = 8_i32
  end
  enum AMTunerEventType
    AMTUNER_EVENT_CHANGED = 1_i32
  end
  enum TVAudioMode
    AMTVAUDIO_MODE_MONO = 1_i32
    AMTVAUDIO_MODE_STEREO = 2_i32
    AMTVAUDIO_MODE_LANG_A = 16_i32
    AMTVAUDIO_MODE_LANG_B = 32_i32
    AMTVAUDIO_MODE_LANG_C = 64_i32
    AMTVAUDIO_PRESET_STEREO = 512_i32
    AMTVAUDIO_PRESET_LANG_A = 4096_i32
    AMTVAUDIO_PRESET_LANG_B = 8192_i32
    AMTVAUDIO_PRESET_LANG_C = 16384_i32
  end
  enum AMTVAudioEventType
    AMTVAUDIO_EVENT_CHANGED = 1_i32
  end
  enum AMPROPERTY_PIN
    AMPROPERTY_PIN_CATEGORY = 0_i32
    AMPROPERTY_PIN_MEDIUM = 1_i32
  end
  enum AMSTREAMSELECTINFOFLAGS_
    AMSTREAMSELECTINFO_ENABLED = 1_i32
    AMSTREAMSELECTINFO_EXCLUSIVE = 2_i32
  end
  enum AMSTREAMSELECTENABLEFLAGS_
    AMSTREAMSELECTENABLE_ENABLE = 1_i32
    AMSTREAMSELECTENABLE_ENABLEALL = 2_i32
  end
  enum AMRESCTL_RESERVEFLAGS_
    AMRESCTL_RESERVEFLAGS_RESERVE = 0_i32
    AMRESCTL_RESERVEFLAGS_UNRESERVE = 1_i32
  end
  enum AM_FILTER_MISC_FLAGS_
    AM_FILTER_MISC_FLAGS_IS_RENDERER = 1_i32
    AM_FILTER_MISC_FLAGS_IS_SOURCE = 2_i32
  end
  enum DECIMATION_USAGE
    DECIMATION_LEGACY = 0_i32
    DECIMATION_USE_DECODER_ONLY = 1_i32
    DECIMATION_USE_VIDEOPORT_ONLY = 2_i32
    DECIMATION_USE_OVERLAY_ONLY = 3_i32
    DECIMATION_DEFAULT = 4_i32
  end
  enum AM_PUSHSOURCE_FLAGS_
    AM_PUSHSOURCECAPS_INTERNAL_RM = 1_i32
    AM_PUSHSOURCECAPS_NOT_LIVE = 2_i32
    AM_PUSHSOURCECAPS_PRIVATE_CLOCK = 4_i32
    AM_PUSHSOURCEREQS_USE_STREAM_CLOCK = 65536_i32
    AM_PUSHSOURCEREQS_USE_CLOCK_CHAIN = 131072_i32
  end
  enum DVENCODERRESOLUTION_
    DVENCODERRESOLUTION_720x480 = 2012_i32
    DVENCODERRESOLUTION_360x240 = 2013_i32
    DVENCODERRESOLUTION_180x120 = 2014_i32
    DVENCODERRESOLUTION_88x60 = 2015_i32
  end
  enum DVENCODERVIDEOFORMAT_
    DVENCODERVIDEOFORMAT_NTSC = 2000_i32
    DVENCODERVIDEOFORMAT_PAL = 2001_i32
  end
  enum DVENCODERFORMAT_
    DVENCODERFORMAT_DVSD = 2007_i32
    DVENCODERFORMAT_DVHD = 2008_i32
    DVENCODERFORMAT_DVSL = 2009_i32
  end
  enum DVDECODERRESOLUTION_
    DVDECODERRESOLUTION_720x480 = 1000_i32
    DVDECODERRESOLUTION_360x240 = 1001_i32
    DVDECODERRESOLUTION_180x120 = 1002_i32
    DVDECODERRESOLUTION_88x60 = 1003_i32
  end
  enum DVRESOLUTION_
    DVRESOLUTION_FULL = 1000_i32
    DVRESOLUTION_HALF = 1001_i32
    DVRESOLUTION_QUARTER = 1002_i32
    DVRESOLUTION_DC = 1003_i32
  end
  enum AM_AUDIO_RENDERER_STAT_PARAM_
    AM_AUDREND_STAT_PARAM_BREAK_COUNT = 1_i32
    AM_AUDREND_STAT_PARAM_SLAVE_MODE = 2_i32
    AM_AUDREND_STAT_PARAM_SILENCE_DUR = 3_i32
    AM_AUDREND_STAT_PARAM_LAST_BUFFER_DUR = 4_i32
    AM_AUDREND_STAT_PARAM_DISCONTINUITIES = 5_i32
    AM_AUDREND_STAT_PARAM_SLAVE_RATE = 6_i32
    AM_AUDREND_STAT_PARAM_SLAVE_DROPWRITE_DUR = 7_i32
    AM_AUDREND_STAT_PARAM_SLAVE_HIGHLOWERROR = 8_i32
    AM_AUDREND_STAT_PARAM_SLAVE_LASTHIGHLOWERROR = 9_i32
    AM_AUDREND_STAT_PARAM_SLAVE_ACCUMERROR = 10_i32
    AM_AUDREND_STAT_PARAM_BUFFERFULLNESS = 11_i32
    AM_AUDREND_STAT_PARAM_JITTER = 12_i32
  end
  enum AM_INTF_SEARCH_FLAGS_
    AM_INTF_SEARCH_INPUT_PIN = 1_i32
    AM_INTF_SEARCH_OUTPUT_PIN = 2_i32
    AM_INTF_SEARCH_FILTER = 4_i32
  end
  enum AMOVERLAYFX
    AMOVERFX_NOFX = 0_i32
    AMOVERFX_MIRRORLEFTRIGHT = 2_i32
    AMOVERFX_MIRRORUPDOWN = 4_i32
    AMOVERFX_DEINTERLACE = 8_i32
  end
  enum AM_PIN_FLOW_CONTROL_BLOCK_FLAGS_
    AM_PIN_FLOW_CONTROL_BLOCK = 1_i32
  end
  enum AM_GRAPH_CONFIG_RECONNECT_FLAGS
    AM_GRAPH_CONFIG_RECONNECT_DIRECTCONNECT = 1_i32
    AM_GRAPH_CONFIG_RECONNECT_CACHE_REMOVED_FILTERS = 2_i32
    AM_GRAPH_CONFIG_RECONNECT_USE_ONLY_CACHED_FILTERS = 4_i32
  end
  enum REM_FILTER_FLAGS_
    REMFILTERF_LEAVECONNECTED = 1_i32
  end
  enum AM_FILTER_FLAGS
    AM_FILTER_FLAGS_REMOVABLE = 1_i32
  end
  enum VMRPresentationFlags
    VMRSample_SyncPoint = 1_i32
    VMRSample_Preroll = 2_i32
    VMRSample_Discontinuity = 4_i32
    VMRSample_TimeValid = 8_i32
    VMRSample_SrcDstRectsValid = 16_i32
  end
  enum VMRSurfaceAllocationFlags
    AMAP_PIXELFORMAT_VALID = 1_i32
    AMAP_3D_TARGET = 2_i32
    AMAP_ALLOW_SYSMEM = 4_i32
    AMAP_FORCE_SYSMEM = 8_i32
    AMAP_DIRECTED_FLIP = 16_i32
    AMAP_DXVA_TARGET = 32_i32
  end
  enum VMR_ASPECT_RATIO_MODE
    VMR_ARMODE_NONE = 0_i32
    VMR_ARMODE_LETTER_BOX = 1_i32
  end
  enum VMRMixerPrefs
    MixerPref_NoDecimation = 1_i32
    MixerPref_DecimateOutput = 2_i32
    MixerPref_ARAdjustXorY = 4_i32
    MixerPref_DecimationReserved = 8_i32
    MixerPref_DecimateMask = 15_i32
    MixerPref_BiLinearFiltering = 16_i32
    MixerPref_PointFiltering = 32_i32
    MixerPref_FilteringMask = 240_i32
    MixerPref_RenderTargetRGB = 256_i32
    MixerPref_RenderTargetYUV = 4096_i32
    MixerPref_RenderTargetYUV420 = 512_i32
    MixerPref_RenderTargetYUV422 = 1024_i32
    MixerPref_RenderTargetYUV444 = 2048_i32
    MixerPref_RenderTargetReserved = 57344_i32
    MixerPref_RenderTargetMask = 65280_i32
    MixerPref_DynamicSwitchToBOB = 65536_i32
    MixerPref_DynamicDecimateBy2 = 131072_i32
    MixerPref_DynamicReserved = 786432_i32
    MixerPref_DynamicMask = 983040_i32
  end
  enum VMRRenderPrefs
    RenderPrefs_RestrictToInitialMonitor = 0_i32
    RenderPrefs_ForceOffscreen = 1_i32
    RenderPrefs_ForceOverlays = 2_i32
    RenderPrefs_AllowOverlays = 0_i32
    RenderPrefs_AllowOffscreen = 0_i32
    RenderPrefs_DoNotRenderColorKeyAndBorder = 8_i32
    RenderPrefs_Reserved = 16_i32
    RenderPrefs_PreferAGPMemWhenMixing = 32_i32
    RenderPrefs_Mask = 63_i32
  end
  enum VMRMode
    VMRMode_Windowed = 1_i32
    VMRMode_Windowless = 2_i32
    VMRMode_Renderless = 4_i32
    VMRMode_Mask = 7_i32
  end
  enum STREAMIF_CONSTANTS
    MAX_NUMBER_OF_STREAMS = 16_i32
  end
  enum VMRDeinterlacePrefs
    DeinterlacePref_NextBest = 1_i32
    DeinterlacePref_BOB = 2_i32
    DeinterlacePref_Weave = 4_i32
    DeinterlacePref_Mask = 7_i32
  end
  enum VMRDeinterlaceTech
    DeinterlaceTech_Unknown = 0_i32
    DeinterlaceTech_BOBLineReplicate = 1_i32
    DeinterlaceTech_BOBVerticalStretch = 2_i32
    DeinterlaceTech_MedianFiltering = 4_i32
    DeinterlaceTech_EdgeFiltering = 16_i32
    DeinterlaceTech_FieldAdaptive = 32_i32
    DeinterlaceTech_PixelAdaptive = 64_i32
    DeinterlaceTech_MotionVectorSteered = 128_i32
  end
  enum DVD_DOMAIN
    DVD_DOMAIN_FirstPlay = 1_i32
    DVD_DOMAIN_VideoManagerMenu = 2_i32
    DVD_DOMAIN_VideoTitleSetMenu = 3_i32
    DVD_DOMAIN_Title = 4_i32
    DVD_DOMAIN_Stop = 5_i32
  end
  enum DVD_MENU_ID
    DVD_MENU_Title = 2_i32
    DVD_MENU_Root = 3_i32
    DVD_MENU_Subpicture = 4_i32
    DVD_MENU_Audio = 5_i32
    DVD_MENU_Angle = 6_i32
    DVD_MENU_Chapter = 7_i32
  end
  enum DVD_DISC_SIDE
    DVD_SIDE_A = 1_i32
    DVD_SIDE_B = 2_i32
  end
  enum DVD_PREFERRED_DISPLAY_MODE
    DISPLAY_CONTENT_DEFAULT = 0_i32
    DISPLAY_16x9 = 1_i32
    DISPLAY_4x3_PANSCAN_PREFERRED = 2_i32
    DISPLAY_4x3_LETTERBOX_PREFERRED = 3_i32
  end
  enum DVD_FRAMERATE
    DVD_FPS_25 = 1_i32
    DVD_FPS_30NonDrop = 3_i32
  end
  enum DVD_NavCmdType
    DVD_NavCmdType_Pre = 1_i32
    DVD_NavCmdType_Post = 2_i32
    DVD_NavCmdType_Cell = 3_i32
    DVD_NavCmdType_Button = 4_i32
  end
  enum DVD_TIMECODE_FLAGS
    DVD_TC_FLAG_25fps = 1_i32
    DVD_TC_FLAG_30fps = 2_i32
    DVD_TC_FLAG_DropFrame = 4_i32
    DVD_TC_FLAG_Interpolated = 8_i32
  end
  enum VALID_UOP_FLAG
    UOP_FLAG_Play_Title_Or_AtTime = 1_i32
    UOP_FLAG_Play_Chapter = 2_i32
    UOP_FLAG_Play_Title = 4_i32
    UOP_FLAG_Stop = 8_i32
    UOP_FLAG_ReturnFromSubMenu = 16_i32
    UOP_FLAG_Play_Chapter_Or_AtTime = 32_i32
    UOP_FLAG_PlayPrev_Or_Replay_Chapter = 64_i32
    UOP_FLAG_PlayNext_Chapter = 128_i32
    UOP_FLAG_Play_Forwards = 256_i32
    UOP_FLAG_Play_Backwards = 512_i32
    UOP_FLAG_ShowMenu_Title = 1024_i32
    UOP_FLAG_ShowMenu_Root = 2048_i32
    UOP_FLAG_ShowMenu_SubPic = 4096_i32
    UOP_FLAG_ShowMenu_Audio = 8192_i32
    UOP_FLAG_ShowMenu_Angle = 16384_i32
    UOP_FLAG_ShowMenu_Chapter = 32768_i32
    UOP_FLAG_Resume = 65536_i32
    UOP_FLAG_Select_Or_Activate_Button = 131072_i32
    UOP_FLAG_Still_Off = 262144_i32
    UOP_FLAG_Pause_On = 524288_i32
    UOP_FLAG_Select_Audio_Stream = 1048576_i32
    UOP_FLAG_Select_SubPic_Stream = 2097152_i32
    UOP_FLAG_Select_Angle = 4194304_i32
    UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 8388608_i32
    UOP_FLAG_Select_Video_Mode_Preference = 16777216_i32
  end
  enum DVD_CMD_FLAGS
    DVD_CMD_FLAG_None = 0_i32
    DVD_CMD_FLAG_Flush = 1_i32
    DVD_CMD_FLAG_SendEvents = 2_i32
    DVD_CMD_FLAG_Block = 4_i32
    DVD_CMD_FLAG_StartWhenRendered = 8_i32
    DVD_CMD_FLAG_EndAfterRendered = 16_i32
  end
  enum DVD_OPTION_FLAG
    DVD_ResetOnStop = 1_i32
    DVD_NotifyParentalLevelChange = 2_i32
    DVD_HMSF_TimeCodeEvents = 3_i32
    DVD_AudioDuringFFwdRew = 4_i32
    DVD_EnableNonblockingAPIs = 5_i32
    DVD_CacheSizeInMB = 6_i32
    DVD_EnablePortableBookmarks = 7_i32
    DVD_EnableExtendedCopyProtectErrors = 8_i32
    DVD_NotifyPositionChange = 9_i32
    DVD_IncreaseOutputControl = 10_i32
    DVD_EnableStreaming = 11_i32
    DVD_EnableESOutput = 12_i32
    DVD_EnableTitleLength = 13_i32
    DVD_DisableStillThrottle = 14_i32
    DVD_EnableLoggingEvents = 15_i32
    DVD_MaxReadBurstInKB = 16_i32
    DVD_ReadBurstPeriodInMS = 17_i32
    DVD_RestartDisc = 18_i32
    DVD_EnableCC = 19_i32
  end
  enum DVD_RELATIVE_BUTTON
    DVD_Relative_Upper = 1_i32
    DVD_Relative_Lower = 2_i32
    DVD_Relative_Left = 3_i32
    DVD_Relative_Right = 4_i32
  end
  enum DVD_PARENTAL_LEVEL
    DVD_PARENTAL_LEVEL_8 = 32768_i32
    DVD_PARENTAL_LEVEL_7 = 16384_i32
    DVD_PARENTAL_LEVEL_6 = 8192_i32
    DVD_PARENTAL_LEVEL_5 = 4096_i32
    DVD_PARENTAL_LEVEL_4 = 2048_i32
    DVD_PARENTAL_LEVEL_3 = 1024_i32
    DVD_PARENTAL_LEVEL_2 = 512_i32
    DVD_PARENTAL_LEVEL_1 = 256_i32
  end
  enum DVD_AUDIO_LANG_EXT
    DVD_AUD_EXT_NotSpecified = 0_i32
    DVD_AUD_EXT_Captions = 1_i32
    DVD_AUD_EXT_VisuallyImpaired = 2_i32
    DVD_AUD_EXT_DirectorComments1 = 3_i32
    DVD_AUD_EXT_DirectorComments2 = 4_i32
  end
  enum DVD_SUBPICTURE_LANG_EXT
    DVD_SP_EXT_NotSpecified = 0_i32
    DVD_SP_EXT_Caption_Normal = 1_i32
    DVD_SP_EXT_Caption_Big = 2_i32
    DVD_SP_EXT_Caption_Children = 3_i32
    DVD_SP_EXT_CC_Normal = 5_i32
    DVD_SP_EXT_CC_Big = 6_i32
    DVD_SP_EXT_CC_Children = 7_i32
    DVD_SP_EXT_Forced = 9_i32
    DVD_SP_EXT_DirectorComments_Normal = 13_i32
    DVD_SP_EXT_DirectorComments_Big = 14_i32
    DVD_SP_EXT_DirectorComments_Children = 15_i32
  end
  enum DVD_AUDIO_APPMODE
    DVD_AudioMode_None = 0_i32
    DVD_AudioMode_Karaoke = 1_i32
    DVD_AudioMode_Surround = 2_i32
    DVD_AudioMode_Other = 3_i32
  end
  enum DVD_AUDIO_FORMAT
    DVD_AudioFormat_AC3 = 0_i32
    DVD_AudioFormat_MPEG1 = 1_i32
    DVD_AudioFormat_MPEG1_DRC = 2_i32
    DVD_AudioFormat_MPEG2 = 3_i32
    DVD_AudioFormat_MPEG2_DRC = 4_i32
    DVD_AudioFormat_LPCM = 5_i32
    DVD_AudioFormat_DTS = 6_i32
    DVD_AudioFormat_SDDS = 7_i32
    DVD_AudioFormat_Other = 8_i32
  end
  enum DVD_KARAOKE_DOWNMIX
    DVD_Mix_0to0 = 1_i32
    DVD_Mix_1to0 = 2_i32
    DVD_Mix_2to0 = 4_i32
    DVD_Mix_3to0 = 8_i32
    DVD_Mix_4to0 = 16_i32
    DVD_Mix_Lto0 = 32_i32
    DVD_Mix_Rto0 = 64_i32
    DVD_Mix_0to1 = 256_i32
    DVD_Mix_1to1 = 512_i32
    DVD_Mix_2to1 = 1024_i32
    DVD_Mix_3to1 = 2048_i32
    DVD_Mix_4to1 = 4096_i32
    DVD_Mix_Lto1 = 8192_i32
    DVD_Mix_Rto1 = 16384_i32
  end
  enum DVD_KARAOKE_CONTENTS
    DVD_Karaoke_GuideVocal1 = 1_i32
    DVD_Karaoke_GuideVocal2 = 2_i32
    DVD_Karaoke_GuideMelody1 = 4_i32
    DVD_Karaoke_GuideMelody2 = 8_i32
    DVD_Karaoke_GuideMelodyA = 16_i32
    DVD_Karaoke_GuideMelodyB = 32_i32
    DVD_Karaoke_SoundEffectA = 64_i32
    DVD_Karaoke_SoundEffectB = 128_i32
  end
  enum DVD_KARAOKE_ASSIGNMENT
    DVD_Assignment_reserved0 = 0_i32
    DVD_Assignment_reserved1 = 1_i32
    DVD_Assignment_LR = 2_i32
    DVD_Assignment_LRM = 3_i32
    DVD_Assignment_LR1 = 4_i32
    DVD_Assignment_LRM1 = 5_i32
    DVD_Assignment_LR12 = 6_i32
    DVD_Assignment_LRM12 = 7_i32
  end
  enum DVD_VIDEO_COMPRESSION
    DVD_VideoCompression_Other = 0_i32
    DVD_VideoCompression_MPEG1 = 1_i32
    DVD_VideoCompression_MPEG2 = 2_i32
  end
  enum DVD_SUBPICTURE_TYPE
    DVD_SPType_NotSpecified = 0_i32
    DVD_SPType_Language = 1_i32
    DVD_SPType_Other = 2_i32
  end
  enum DVD_SUBPICTURE_CODING
    DVD_SPCoding_RunLength = 0_i32
    DVD_SPCoding_Extended = 1_i32
    DVD_SPCoding_Other = 2_i32
  end
  enum DVD_TITLE_APPMODE
    DVD_AppMode_Not_Specified = 0_i32
    DVD_AppMode_Karaoke = 1_i32
    DVD_AppMode_Other = 3_i32
  end
  enum DVD_TextStringType
    DVD_Struct_Volume = 1_i32
    DVD_Struct_Title = 2_i32
    DVD_Struct_ParentalID = 3_i32
    DVD_Struct_PartOfTitle = 4_i32
    DVD_Struct_Cell = 5_i32
    DVD_Stream_Audio = 16_i32
    DVD_Stream_Subpicture = 17_i32
    DVD_Stream_Angle = 18_i32
    DVD_Channel_Audio = 32_i32
    DVD_General_Name = 48_i32
    DVD_General_Comments = 49_i32
    DVD_Title_Series = 56_i32
    DVD_Title_Movie = 57_i32
    DVD_Title_Video = 58_i32
    DVD_Title_Album = 59_i32
    DVD_Title_Song = 60_i32
    DVD_Title_Other = 63_i32
    DVD_Title_Sub_Series = 64_i32
    DVD_Title_Sub_Movie = 65_i32
    DVD_Title_Sub_Video = 66_i32
    DVD_Title_Sub_Album = 67_i32
    DVD_Title_Sub_Song = 68_i32
    DVD_Title_Sub_Other = 71_i32
    DVD_Title_Orig_Series = 72_i32
    DVD_Title_Orig_Movie = 73_i32
    DVD_Title_Orig_Video = 74_i32
    DVD_Title_Orig_Album = 75_i32
    DVD_Title_Orig_Song = 76_i32
    DVD_Title_Orig_Other = 79_i32
    DVD_Other_Scene = 80_i32
    DVD_Other_Cut = 81_i32
    DVD_Other_Take = 82_i32
  end
  enum DVD_TextCharSet
    DVD_CharSet_Unicode = 0_i32
    DVD_CharSet_ISO646 = 1_i32
    DVD_CharSet_JIS_Roman_Kanji = 2_i32
    DVD_CharSet_ISO8859_1 = 3_i32
    DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 4_i32
  end
  enum AM_DVD_GRAPH_FLAGS
    AM_DVD_HWDEC_PREFER = 1_i32
    AM_DVD_HWDEC_ONLY = 2_i32
    AM_DVD_SWDEC_PREFER = 4_i32
    AM_DVD_SWDEC_ONLY = 8_i32
    AM_DVD_NOVPE = 256_i32
    AM_DVD_DO_NOT_CLEAR = 512_i32
    AM_DVD_VMR9_ONLY = 2048_i32
    AM_DVD_EVR_ONLY = 4096_i32
    AM_DVD_EVR_QOS = 8192_i32
    AM_DVD_ADAPT_GRAPH = 16384_i32
    AM_DVD_MASK = 65535_i32
  end
  enum AM_DVD_STREAM_FLAGS
    AM_DVD_STREAM_VIDEO = 1_i32
    AM_DVD_STREAM_AUDIO = 2_i32
    AM_DVD_STREAM_SUBPIC = 4_i32
  end
  enum AM_OVERLAY_NOTIFY_FLAGS_
    AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 1_i32
    AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 2_i32
    AM_OVERLAY_NOTIFY_DEST_CHANGE = 4_i32
  end
  enum BDA_EVENT_ID
    BDA_EVENT_SIGNAL_LOSS = 0_i32
    BDA_EVENT_SIGNAL_LOCK = 1_i32
    BDA_EVENT_DATA_START = 2_i32
    BDA_EVENT_DATA_STOP = 3_i32
    BDA_EVENT_CHANNEL_ACQUIRED = 4_i32
    BDA_EVENT_CHANNEL_LOST = 5_i32
    BDA_EVENT_CHANNEL_SOURCE_CHANGED = 6_i32
    BDA_EVENT_CHANNEL_ACTIVATED = 7_i32
    BDA_EVENT_CHANNEL_DEACTIVATED = 8_i32
    BDA_EVENT_SUBCHANNEL_ACQUIRED = 9_i32
    BDA_EVENT_SUBCHANNEL_LOST = 10_i32
    BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED = 11_i32
    BDA_EVENT_SUBCHANNEL_ACTIVATED = 12_i32
    BDA_EVENT_SUBCHANNEL_DEACTIVATED = 13_i32
    BDA_EVENT_ACCESS_GRANTED = 14_i32
    BDA_EVENT_ACCESS_DENIED = 15_i32
    BDA_EVENT_OFFER_EXTENDED = 16_i32
    BDA_EVENT_PURCHASE_COMPLETED = 17_i32
    BDA_EVENT_SMART_CARD_INSERTED = 18_i32
    BDA_EVENT_SMART_CARD_REMOVED = 19_i32
  end
  enum BDA_MULTICAST_MODE
    BDA_PROMISCUOUS_MULTICAST = 0_i32
    BDA_FILTERED_MULTICAST = 1_i32
    BDA_NO_MULTICAST = 2_i32
  end
  enum BDA_SIGNAL_STATE
    BDA_SIGNAL_UNAVAILABLE = 0_i32
    BDA_SIGNAL_INACTIVE = 1_i32
    BDA_SIGNAL_ACTIVE = 2_i32
  end
  enum BDA_CHANGE_STATE
    BDA_CHANGES_COMPLETE = 0_i32
    BDA_CHANGES_PENDING = 1_i32
  end
  enum MEDIA_SAMPLE_CONTENT
    MEDIA_TRANSPORT_PACKET = 0_i32
    MEDIA_ELEMENTARY_STREAM = 1_i32
    MEDIA_MPEG2_PSI = 2_i32
    MEDIA_TRANSPORT_PAYLOAD = 3_i32
  end
  enum ISDBCAS_REQUEST_ID
    ISDBCAS_REQUEST_ID_EMG = 56_i32
    ISDBCAS_REQUEST_ID_EMD = 58_i32
  end
  enum MUX_PID_TYPE
    PID_OTHER = -1_i32
    PID_ELEMENTARY_STREAM = 0_i32
    PID_MPEG2_SECTION_PSI_SI = 1_i32
  end
  enum DVBSystemType
    DVB_Cable = 0_i32
    DVB_Terrestrial = 1_i32
    DVB_Satellite = 2_i32
    ISDB_Terrestrial = 3_i32
    ISDB_Satellite = 4_i32
  end
  enum BDA_Channel
    BDA_UNDEFINED_CHANNEL = -1_i32
  end
  enum ComponentCategory
    CategoryNotSet = -1_i32
    CategoryOther = 0_i32
    CategoryVideo = 1_i32
    CategoryAudio = 2_i32
    CategoryText = 3_i32
    CategorySubtitles = 4_i32
    CategoryCaptions = 5_i32
    CategorySuperimpose = 6_i32
    CategoryData = 7_i32
    CATEGORY_COUNT = 8_i32
  end
  enum ComponentStatus
    StatusActive = 0_i32
    StatusInactive = 1_i32
    StatusUnavailable = 2_i32
  end
  enum MPEG2StreamType
    BDA_UNITIALIZED_MPEG2STREAMTYPE = -1_i32
    Reserved1 = 0_i32
    ISO_IEC_11172_2_VIDEO = 1_i32
    ISO_IEC_13818_2_VIDEO = 2_i32
    ISO_IEC_11172_3_AUDIO = 3_i32
    ISO_IEC_13818_3_AUDIO = 4_i32
    ISO_IEC_13818_1_PRIVATE_SECTION = 5_i32
    ISO_IEC_13818_1_PES = 6_i32
    ISO_IEC_13522_MHEG = 7_i32
    ANNEX_A_DSM_CC = 8_i32
    ITU_T_REC_H_222_1 = 9_i32
    ISO_IEC_13818_6_TYPE_A = 10_i32
    ISO_IEC_13818_6_TYPE_B = 11_i32
    ISO_IEC_13818_6_TYPE_C = 12_i32
    ISO_IEC_13818_6_TYPE_D = 13_i32
    ISO_IEC_13818_1_AUXILIARY = 14_i32
    ISO_IEC_13818_7_AUDIO = 15_i32
    ISO_IEC_14496_2_VISUAL = 16_i32
    ISO_IEC_14496_3_AUDIO = 17_i32
    ISO_IEC_14496_1_IN_PES = 18_i32
    ISO_IEC_14496_1_IN_SECTION = 19_i32
    ISO_IEC_13818_6_DOWNLOAD = 20_i32
    METADATA_IN_PES = 21_i32
    METADATA_IN_SECTION = 22_i32
    METADATA_IN_DATA_CAROUSEL = 23_i32
    METADATA_IN_OBJECT_CAROUSEL = 24_i32
    METADATA_IN_DOWNLOAD_PROTOCOL = 25_i32
    IRPM_STREAMM = 26_i32
    ITU_T_H264 = 27_i32
    ISO_IEC_13818_1_RESERVED = 28_i32
    USER_PRIVATE = 16_i32
    HEVC_VIDEO_OR_TEMPORAL_VIDEO = 36_i32
    HEVC_TEMPORAL_VIDEO_SUBSET = 37_i32
    ISO_IEC_USER_PRIVATE = 128_i32
    DOLBY_AC3_AUDIO = 129_i32
    DOLBY_DIGITAL_PLUS_AUDIO_ATSC = 135_i32
  end
  enum ATSCComponentTypeFlags
    ATSCCT_AC3 = 1_i32
  end
  enum BinaryConvolutionCodeRate
    BDA_BCC_RATE_NOT_SET = -1_i32
    BDA_BCC_RATE_NOT_DEFINED = 0_i32
    BDA_BCC_RATE_1_2 = 1_i32
    BDA_BCC_RATE_2_3 = 2_i32
    BDA_BCC_RATE_3_4 = 3_i32
    BDA_BCC_RATE_3_5 = 4_i32
    BDA_BCC_RATE_4_5 = 5_i32
    BDA_BCC_RATE_5_6 = 6_i32
    BDA_BCC_RATE_5_11 = 7_i32
    BDA_BCC_RATE_7_8 = 8_i32
    BDA_BCC_RATE_1_4 = 9_i32
    BDA_BCC_RATE_1_3 = 10_i32
    BDA_BCC_RATE_2_5 = 11_i32
    BDA_BCC_RATE_6_7 = 12_i32
    BDA_BCC_RATE_8_9 = 13_i32
    BDA_BCC_RATE_9_10 = 14_i32
    BDA_BCC_RATE_MAX = 15_i32
  end
  enum FECMethod
    BDA_FEC_METHOD_NOT_SET = -1_i32
    BDA_FEC_METHOD_NOT_DEFINED = 0_i32
    BDA_FEC_VITERBI = 1_i32
    BDA_FEC_RS_204_188 = 2_i32
    BDA_FEC_LDPC = 3_i32
    BDA_FEC_BCH = 4_i32
    BDA_FEC_RS_147_130 = 5_i32
    BDA_FEC_MAX = 6_i32
  end
  enum ModulationType
    BDA_MOD_NOT_SET = -1_i32
    BDA_MOD_NOT_DEFINED = 0_i32
    BDA_MOD_16QAM = 1_i32
    BDA_MOD_32QAM = 2_i32
    BDA_MOD_64QAM = 3_i32
    BDA_MOD_80QAM = 4_i32
    BDA_MOD_96QAM = 5_i32
    BDA_MOD_112QAM = 6_i32
    BDA_MOD_128QAM = 7_i32
    BDA_MOD_160QAM = 8_i32
    BDA_MOD_192QAM = 9_i32
    BDA_MOD_224QAM = 10_i32
    BDA_MOD_256QAM = 11_i32
    BDA_MOD_320QAM = 12_i32
    BDA_MOD_384QAM = 13_i32
    BDA_MOD_448QAM = 14_i32
    BDA_MOD_512QAM = 15_i32
    BDA_MOD_640QAM = 16_i32
    BDA_MOD_768QAM = 17_i32
    BDA_MOD_896QAM = 18_i32
    BDA_MOD_1024QAM = 19_i32
    BDA_MOD_QPSK = 20_i32
    BDA_MOD_BPSK = 21_i32
    BDA_MOD_OQPSK = 22_i32
    BDA_MOD_8VSB = 23_i32
    BDA_MOD_16VSB = 24_i32
    BDA_MOD_ANALOG_AMPLITUDE = 25_i32
    BDA_MOD_ANALOG_FREQUENCY = 26_i32
    BDA_MOD_8PSK = 27_i32
    BDA_MOD_RF = 28_i32
    BDA_MOD_16APSK = 29_i32
    BDA_MOD_32APSK = 30_i32
    BDA_MOD_NBC_QPSK = 31_i32
    BDA_MOD_NBC_8PSK = 32_i32
    BDA_MOD_DIRECTV = 33_i32
    BDA_MOD_ISDB_T_TMCC = 34_i32
    BDA_MOD_ISDB_S_TMCC = 35_i32
    BDA_MOD_MAX = 36_i32
  end
  enum ScanModulationTypes
    BDA_SCAN_MOD_16QAM = 1_i32
    BDA_SCAN_MOD_32QAM = 2_i32
    BDA_SCAN_MOD_64QAM = 4_i32
    BDA_SCAN_MOD_80QAM = 8_i32
    BDA_SCAN_MOD_96QAM = 16_i32
    BDA_SCAN_MOD_112QAM = 32_i32
    BDA_SCAN_MOD_128QAM = 64_i32
    BDA_SCAN_MOD_160QAM = 128_i32
    BDA_SCAN_MOD_192QAM = 256_i32
    BDA_SCAN_MOD_224QAM = 512_i32
    BDA_SCAN_MOD_256QAM = 1024_i32
    BDA_SCAN_MOD_320QAM = 2048_i32
    BDA_SCAN_MOD_384QAM = 4096_i32
    BDA_SCAN_MOD_448QAM = 8192_i32
    BDA_SCAN_MOD_512QAM = 16384_i32
    BDA_SCAN_MOD_640QAM = 32768_i32
    BDA_SCAN_MOD_768QAM = 65536_i32
    BDA_SCAN_MOD_896QAM = 131072_i32
    BDA_SCAN_MOD_1024QAM = 262144_i32
    BDA_SCAN_MOD_QPSK = 524288_i32
    BDA_SCAN_MOD_BPSK = 1048576_i32
    BDA_SCAN_MOD_OQPSK = 2097152_i32
    BDA_SCAN_MOD_8VSB = 4194304_i32
    BDA_SCAN_MOD_16VSB = 8388608_i32
    BDA_SCAN_MOD_AM_RADIO = 16777216_i32
    BDA_SCAN_MOD_FM_RADIO = 33554432_i32
    BDA_SCAN_MOD_8PSK = 67108864_i32
    BDA_SCAN_MOD_RF = 134217728_i32
    ScanModulationTypesMask_MCE_DigitalCable = 11_i32
    ScanModulationTypesMask_MCE_TerrestrialATSC = 23_i32
    ScanModulationTypesMask_MCE_AnalogTv = 28_i32
    ScanModulationTypesMask_MCE_All_TV = -1_i32
    ScanModulationTypesMask_DVBC = 75_i32
    BDA_SCAN_MOD_16APSK = 268435456_i32
    BDA_SCAN_MOD_32APSK = 536870912_i32
  end
  enum SpectralInversion
    BDA_SPECTRAL_INVERSION_NOT_SET = -1_i32
    BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0_i32
    BDA_SPECTRAL_INVERSION_AUTOMATIC = 1_i32
    BDA_SPECTRAL_INVERSION_NORMAL = 2_i32
    BDA_SPECTRAL_INVERSION_INVERTED = 3_i32
    BDA_SPECTRAL_INVERSION_MAX = 4_i32
  end
  enum Polarisation
    BDA_POLARISATION_NOT_SET = -1_i32
    BDA_POLARISATION_NOT_DEFINED = 0_i32
    BDA_POLARISATION_LINEAR_H = 1_i32
    BDA_POLARISATION_LINEAR_V = 2_i32
    BDA_POLARISATION_CIRCULAR_L = 3_i32
    BDA_POLARISATION_CIRCULAR_R = 4_i32
    BDA_POLARISATION_MAX = 5_i32
  end
  enum LNB_Source
    BDA_LNB_SOURCE_NOT_SET = -1_i32
    BDA_LNB_SOURCE_NOT_DEFINED = 0_i32
    BDA_LNB_SOURCE_A = 1_i32
    BDA_LNB_SOURCE_B = 2_i32
    BDA_LNB_SOURCE_C = 3_i32
    BDA_LNB_SOURCE_D = 4_i32
    BDA_LNB_SOURCE_MAX = 5_i32
  end
  enum GuardInterval
    BDA_GUARD_NOT_SET = -1_i32
    BDA_GUARD_NOT_DEFINED = 0_i32
    BDA_GUARD_1_32 = 1_i32
    BDA_GUARD_1_16 = 2_i32
    BDA_GUARD_1_8 = 3_i32
    BDA_GUARD_1_4 = 4_i32
    BDA_GUARD_1_128 = 5_i32
    BDA_GUARD_19_128 = 6_i32
    BDA_GUARD_19_256 = 7_i32
    BDA_GUARD_MAX = 8_i32
  end
  enum HierarchyAlpha
    BDA_HALPHA_NOT_SET = -1_i32
    BDA_HALPHA_NOT_DEFINED = 0_i32
    BDA_HALPHA_1 = 1_i32
    BDA_HALPHA_2 = 2_i32
    BDA_HALPHA_4 = 3_i32
    BDA_HALPHA_MAX = 4_i32
  end
  enum TransmissionMode
    BDA_XMIT_MODE_NOT_SET = -1_i32
    BDA_XMIT_MODE_NOT_DEFINED = 0_i32
    BDA_XMIT_MODE_2K = 1_i32
    BDA_XMIT_MODE_8K = 2_i32
    BDA_XMIT_MODE_4K = 3_i32
    BDA_XMIT_MODE_2K_INTERLEAVED = 4_i32
    BDA_XMIT_MODE_4K_INTERLEAVED = 5_i32
    BDA_XMIT_MODE_1K = 6_i32
    BDA_XMIT_MODE_16K = 7_i32
    BDA_XMIT_MODE_32K = 8_i32
    BDA_XMIT_MODE_MAX = 9_i32
  end
  enum RollOff
    BDA_ROLL_OFF_NOT_SET = -1_i32
    BDA_ROLL_OFF_NOT_DEFINED = 0_i32
    BDA_ROLL_OFF_20 = 1_i32
    BDA_ROLL_OFF_25 = 2_i32
    BDA_ROLL_OFF_35 = 3_i32
    BDA_ROLL_OFF_MAX = 4_i32
  end
  enum Pilot
    BDA_PILOT_NOT_SET = -1_i32
    BDA_PILOT_NOT_DEFINED = 0_i32
    BDA_PILOT_OFF = 1_i32
    BDA_PILOT_ON = 2_i32
    BDA_PILOT_MAX = 3_i32
  end
  enum BDA_Frequency
    BDA_FREQUENCY_NOT_SET = -1_i32
    BDA_FREQUENCY_NOT_DEFINED = 0_i32
  end
  enum BDA_Range
    BDA_RANGE_NOT_SET = -1_i32
    BDA_RANGE_NOT_DEFINED = 0_i32
  end
  enum BDA_Channel_Bandwidth
    BDA_CHAN_BANDWITH_NOT_SET = -1_i32
    BDA_CHAN_BANDWITH_NOT_DEFINED = 0_i32
  end
  enum BDA_Frequency_Multiplier
    BDA_FREQUENCY_MULTIPLIER_NOT_SET = -1_i32
    BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0_i32
  end
  enum BDA_Comp_Flags
    BDACOMP_NOT_DEFINED = 0_i32
    BDACOMP_EXCLUDE_TS_FROM_TR = 1_i32
    BDACOMP_INCLUDE_LOCATOR_IN_TR = 2_i32
    BDACOMP_INCLUDE_COMPONENTS_IN_TR = 4_i32
  end
  enum ApplicationTypeType
    SCTE28_ConditionalAccess = 0_i32
    SCTE28_POD_Host_Binding_Information = 1_i32
    SCTE28_IPService = 2_i32
    SCTE28_NetworkInterface_SCTE55_2 = 3_i32
    SCTE28_NetworkInterface_SCTE55_1 = 4_i32
    SCTE28_CopyProtection = 5_i32
    SCTE28_Diagnostic = 6_i32
    SCTE28_Undesignated = 7_i32
    SCTE28_Reserved = 8_i32
  end
  enum BDA_CONDITIONALACCESS_REQUESTTYPE
    CONDITIONALACCESS_ACCESS_UNSPECIFIED = 0_i32
    CONDITIONALACCESS_ACCESS_NOT_POSSIBLE = 1_i32
    CONDITIONALACCESS_ACCESS_POSSIBLE = 2_i32
    CONDITIONALACCESS_ACCESS_POSSIBLE_NO_STREAMING_DISRUPTION = 3_i32
  end
  enum BDA_CONDITIONALACCESS_MMICLOSEREASON
    CONDITIONALACCESS_UNSPECIFIED = 0_i32
    CONDITIONALACCESS_CLOSED_ITSELF = 1_i32
    CONDITIONALACCESS_TUNER_REQUESTED_CLOSE = 2_i32
    CONDITIONALACCESS_DIALOG_TIMEOUT = 3_i32
    CONDITIONALACCESS_DIALOG_FOCUS_CHANGE = 4_i32
    CONDITIONALACCESS_DIALOG_USER_DISMISSED = 5_i32
    CONDITIONALACCESS_DIALOG_USER_NOT_AVAILABLE = 6_i32
  end
  enum BDA_CONDITIONALACCESS_SESSION_RESULT
    CONDITIONALACCESS_SUCCESSFULL = 0_i32
    CONDITIONALACCESS_ENDED_NOCHANGE = 1_i32
    CONDITIONALACCESS_ABORTED = 2_i32
  end
  enum BDA_DISCOVERY_STATE
    BDA_DISCOVERY_UNSPECIFIED = 0_i32
    BDA_DISCOVERY_REQUIRED = 1_i32
    BDA_DISCOVERY_COMPLETE = 2_i32
  end
  enum SmartCardStatusType
    CardInserted = 0_i32
    CardRemoved = 1_i32
    CardError = 2_i32
    CardDataChanged = 3_i32
    CardFirmwareUpgrade = 4_i32
  end
  enum SmartCardAssociationType
    NotAssociated = 0_i32
    Associated = 1_i32
    AssociationUnknown = 2_i32
  end
  enum LocationCodeSchemeType
    SCTE_18 = 0_i32
  end
  enum EntitlementType
    Entitled = 0_i32
    NotEntitled = 1_i32
    TechnicalFailure = 2_i32
  end
  enum UICloseReasonType
    NotReady = 0_i32
    UserClosed = 1_i32
    SystemClosed = 2_i32
    DeviceClosed = 3_i32
    ErrorClosed = 4_i32
  end
  enum BDA_DrmPairingError
    BDA_DrmPairing_Succeeded = 0_i32
    BDA_DrmPairing_HardwareFailure = 1_i32
    BDA_DrmPairing_NeedRevocationData = 2_i32
    BDA_DrmPairing_NeedIndiv = 3_i32
    BDA_DrmPairing_Other = 4_i32
    BDA_DrmPairing_DrmInitFailed = 5_i32
    BDA_DrmPairing_DrmNotPaired = 6_i32
    BDA_DrmPairing_DrmRePairSoon = 7_i32
    BDA_DrmPairing_Aborted = 8_i32
    BDA_DrmPairing_NeedSDKUpdate = 9_i32
  end
  @[Flags]
  enum KSPROPERTY_IPSINK : UInt32
    KSPROPERTY_IPSINK_MULTICASTLIST = 0_u32
    KSPROPERTY_IPSINK_ADAPTER_DESCRIPTION = 1_u32
    KSPROPERTY_IPSINK_ADAPTER_ADDRESS = 2_u32
  end
  enum AMExtendedSeekingCapabilities
    AM_EXSEEK_CANSEEK = 1_i32
    AM_EXSEEK_CANSCAN = 2_i32
    AM_EXSEEK_MARKERSEEK = 4_i32
    AM_EXSEEK_SCANWITHOUTCLOCK = 8_i32
    AM_EXSEEK_NOSTANDARDREPAINT = 16_i32
    AM_EXSEEK_BUFFERING = 32_i32
    AM_EXSEEK_SENDS_VIDEOFRAMEREADY = 64_i32
  end
  enum AM_LINE21_CCLEVEL
    AM_L21_CCLEVEL_TC2 = 0_i32
  end
  enum AM_LINE21_CCSERVICE
    AM_L21_CCSERVICE_None = 0_i32
    AM_L21_CCSERVICE_Caption1 = 1_i32
    AM_L21_CCSERVICE_Caption2 = 2_i32
    AM_L21_CCSERVICE_Text1 = 3_i32
    AM_L21_CCSERVICE_Text2 = 4_i32
    AM_L21_CCSERVICE_XDS = 5_i32
    AM_L21_CCSERVICE_DefChannel = 10_i32
    AM_L21_CCSERVICE_Invalid = 11_i32
  end
  enum AM_LINE21_CCSTATE
    AM_L21_CCSTATE_Off = 0_i32
    AM_L21_CCSTATE_On = 1_i32
  end
  enum AM_LINE21_CCSTYLE
    AM_L21_CCSTYLE_None = 0_i32
    AM_L21_CCSTYLE_PopOn = 1_i32
    AM_L21_CCSTYLE_PaintOn = 2_i32
    AM_L21_CCSTYLE_RollUp = 3_i32
  end
  enum AM_LINE21_DRAWBGMODE
    AM_L21_DRAWBGMODE_Opaque = 0_i32
    AM_L21_DRAWBGMODE_Transparent = 1_i32
  end
  enum AM_WST_LEVEL
    AM_WST_LEVEL_1_5 = 0_i32
  end
  enum AM_WST_SERVICE
    AM_WST_SERVICE_None = 0_i32
    AM_WST_SERVICE_Text = 1_i32
    AM_WST_SERVICE_IDS = 2_i32
    AM_WST_SERVICE_Invalid = 3_i32
  end
  enum AM_WST_STATE
    AM_WST_STATE_Off = 0_i32
    AM_WST_STATE_On = 1_i32
  end
  enum AM_WST_STYLE
    AM_WST_STYLE_None = 0_i32
    AM_WST_STYLE_Invers = 1_i32
  end
  enum AM_WST_DRAWBGMODE
    AM_WST_DRAWBGMODE_Opaque = 0_i32
    AM_WST_DRAWBGMODE_Transparent = 1_i32
  end
  enum STREAM_TYPE
    STREAMTYPE_READ = 0_i32
    STREAMTYPE_WRITE = 1_i32
    STREAMTYPE_TRANSFORM = 2_i32
  end
  enum STREAM_STATE
    STREAMSTATE_STOP = 0_i32
    STREAMSTATE_RUN = 1_i32
  end
  enum COMPLETION_STATUS_FLAGS
    COMPSTAT_NOUPDATEOK = 1_i32
    COMPSTAT_WAIT = 2_i32
    COMPSTAT_ABORT = 4_i32
  end
  @[Flags]
  enum MMSSF_GET_INFORMATION_FLAGS : UInt32
    MMSSF_HASCLOCK = 1_u32
    MMSSF_SUPPORTSEEK = 2_u32
    MMSSF_ASYNCHRONOUS = 4_u32
  end
  enum SSUPDATE_TYPE
    SSUPDATE_ASYNC = 1_i32
    SSUPDATE_CONTINUOUS = 2_i32
  end
  @[Flags]
  enum DDSFF_FLAGS : UInt32
    DDSFF_PROGRESSIVERENDER = 1_u32
  end
  @[Flags]
  enum AMMSF_MMS_INIT_FLAGS : UInt32
    AMMSF_NOGRAPHTHREAD = 1_u32
  end
  @[Flags]
  enum AMMSF_MS_FLAGS : UInt32
    AMMSF_ADDDEFAULTRENDERER = 1_u32
    AMMSF_CREATEPEER = 2_u32
    AMMSF_STOPIFNOSAMPLES = 4_u32
    AMMSF_NOSTALL = 8_u32
  end
  @[Flags]
  enum AMMSF_RENDER_FLAGS : UInt32
    AMMSF_RENDERTYPEMASK = 3_u32
    AMMSF_RENDERTOEXISTING = 0_u32
    AMMSF_RENDERALLSTREAMS = 1_u32
    AMMSF_NORENDER = 2_u32
    AMMSF_NOCLOCK = 4_u32
    AMMSF_RUN = 8_u32
  end
  @[Flags]
  enum OUTPUT_STATE : UInt32
    Disabled = 0_u32
    ReadData = 1_u32
    RenderData = 2_u32
  end
  enum AM_PROPERTY_FRAMESTEP
    AM_PROPERTY_FRAMESTEP_STEP = 1_i32
    AM_PROPERTY_FRAMESTEP_CANCEL = 2_i32
    AM_PROPERTY_FRAMESTEP_CANSTEP = 3_i32
    AM_PROPERTY_FRAMESTEP_CANSTEPMULTIPLE = 4_i32
  end
  enum AM_ASPECT_RATIO_MODE
    AM_ARMODE_STRETCHED = 0_i32
    AM_ARMODE_LETTER_BOX = 1_i32
    AM_ARMODE_CROP = 2_i32
    AM_ARMODE_STRETCHED_AS_PRIMARY = 3_i32
  end
  enum VMR9PresentationFlags
    VMR9Sample_SyncPoint = 1_i32
    VMR9Sample_Preroll = 2_i32
    VMR9Sample_Discontinuity = 4_i32
    VMR9Sample_TimeValid = 8_i32
    VMR9Sample_SrcDstRectsValid = 16_i32
  end
  enum VMR9SurfaceAllocationFlags
    VMR9AllocFlag_3DRenderTarget = 1_i32
    VMR9AllocFlag_DXVATarget = 2_i32
    VMR9AllocFlag_TextureSurface = 4_i32
    VMR9AllocFlag_OffscreenSurface = 8_i32
    VMR9AllocFlag_RGBDynamicSwitch = 16_i32
    VMR9AllocFlag_UsageReserved = 224_i32
    VMR9AllocFlag_UsageMask = 255_i32
  end
  enum VMR9AspectRatioMode
    VMR9ARMode_None = 0_i32
    VMR9ARMode_LetterBox = 1_i32
  end
  enum VMR9MixerPrefs
    MixerPref9_NoDecimation = 1_i32
    MixerPref9_DecimateOutput = 2_i32
    MixerPref9_ARAdjustXorY = 4_i32
    MixerPref9_NonSquareMixing = 8_i32
    MixerPref9_DecimateMask = 15_i32
    MixerPref9_BiLinearFiltering = 16_i32
    MixerPref9_PointFiltering = 32_i32
    MixerPref9_AnisotropicFiltering = 64_i32
    MixerPref9_PyramidalQuadFiltering = 128_i32
    MixerPref9_GaussianQuadFiltering = 256_i32
    MixerPref9_FilteringReserved = 3584_i32
    MixerPref9_FilteringMask = 4080_i32
    MixerPref9_RenderTargetRGB = 4096_i32
    MixerPref9_RenderTargetYUV = 8192_i32
    MixerPref9_RenderTargetReserved = 1032192_i32
    MixerPref9_RenderTargetMask = 1044480_i32
    MixerPref9_DynamicSwitchToBOB = 1048576_i32
    MixerPref9_DynamicDecimateBy2 = 2097152_i32
    MixerPref9_DynamicReserved = 12582912_i32
    MixerPref9_DynamicMask = 15728640_i32
  end
  enum VMR9ProcAmpControlFlags
    ProcAmpControl9_Brightness = 1_i32
    ProcAmpControl9_Contrast = 2_i32
    ProcAmpControl9_Hue = 4_i32
    ProcAmpControl9_Saturation = 8_i32
    ProcAmpControl9_Mask = 15_i32
  end
  enum VMR9AlphaBitmapFlags
    VMR9AlphaBitmap_Disable = 1_i32
    VMR9AlphaBitmap_hDC = 2_i32
    VMR9AlphaBitmap_EntireDDS = 4_i32
    VMR9AlphaBitmap_SrcColorKey = 8_i32
    VMR9AlphaBitmap_SrcRect = 16_i32
    VMR9AlphaBitmap_FilterMode = 32_i32
  end
  enum VMR9RenderPrefs
    RenderPrefs9_DoNotRenderBorder = 1_i32
    RenderPrefs9_Mask = 1_i32
  end
  enum VMR9Mode
    VMR9Mode_Windowed = 1_i32
    VMR9Mode_Windowless = 2_i32
    VMR9Mode_Renderless = 4_i32
    VMR9Mode_Mask = 7_i32
  end
  enum VMR9DeinterlacePrefs
    DeinterlacePref9_NextBest = 1_i32
    DeinterlacePref9_BOB = 2_i32
    DeinterlacePref9_Weave = 4_i32
    DeinterlacePref9_Mask = 7_i32
  end
  enum VMR9DeinterlaceTech
    DeinterlaceTech9_Unknown = 0_i32
    DeinterlaceTech9_BOBLineReplicate = 1_i32
    DeinterlaceTech9_BOBVerticalStretch = 2_i32
    DeinterlaceTech9_MedianFiltering = 4_i32
    DeinterlaceTech9_EdgeFiltering = 16_i32
    DeinterlaceTech9_FieldAdaptive = 32_i32
    DeinterlaceTech9_PixelAdaptive = 64_i32
    DeinterlaceTech9_MotionVectorSteered = 128_i32
  end
  enum VMR9_SampleFormat
    VMR9_SampleReserved = 1_i32
    VMR9_SampleProgressiveFrame = 2_i32
    VMR9_SampleFieldInterleavedEvenFirst = 3_i32
    VMR9_SampleFieldInterleavedOddFirst = 4_i32
    VMR9_SampleFieldSingleEven = 5_i32
    VMR9_SampleFieldSingleOdd = 6_i32
  end
  enum AM_PROPERTY_AC3
    AM_PROPERTY_AC3_ERROR_CONCEALMENT = 1_i32
    AM_PROPERTY_AC3_ALTERNATE_AUDIO = 2_i32
    AM_PROPERTY_AC3_DOWNMIX = 3_i32
    AM_PROPERTY_AC3_BIT_STREAM_MODE = 4_i32
    AM_PROPERTY_AC3_DIALOGUE_LEVEL = 5_i32
    AM_PROPERTY_AC3_LANGUAGE_CODE = 6_i32
    AM_PROPERTY_AC3_ROOM_TYPE = 7_i32
  end
  enum AM_PROPERTY_DVDSUBPIC
    AM_PROPERTY_DVDSUBPIC_PALETTE = 0_i32
    AM_PROPERTY_DVDSUBPIC_HLI = 1_i32
    AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 2_i32
  end
  enum AM_PROPERTY_DVDCOPYPROT
    AM_PROPERTY_DVDCOPY_CHLG_KEY = 1_i32
    AM_PROPERTY_DVDCOPY_DVD_KEY1 = 2_i32
    AM_PROPERTY_DVDCOPY_DEC_KEY2 = 3_i32
    AM_PROPERTY_DVDCOPY_TITLE_KEY = 4_i32
    AM_PROPERTY_COPY_MACROVISION = 5_i32
    AM_PROPERTY_DVDCOPY_REGION = 6_i32
    AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 7_i32
    AM_PROPERTY_COPY_ANALOG_COMPONENT = 8_i32
    AM_PROPERTY_COPY_DIGITAL_CP = 9_i32
    AM_PROPERTY_COPY_DVD_SRM = 10_i32
    AM_PROPERTY_DVDCOPY_SUPPORTS_NEW_KEYCOUNT = 11_i32
    AM_PROPERTY_DVDCOPY_DISC_KEY = 128_i32
  end
  enum AM_DIGITAL_CP
    AM_DIGITAL_CP_OFF = 0_i32
    AM_DIGITAL_CP_ON = 1_i32
    AM_DIGITAL_CP_DVD_COMPLIANT = 2_i32
  end
  enum AM_DVDCOPYSTATE
    AM_DVDCOPYSTATE_INITIALIZE = 0_i32
    AM_DVDCOPYSTATE_INITIALIZE_TITLE = 1_i32
    AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2_i32
    AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3_i32
    AM_DVDCOPYSTATE_DONE = 4_i32
  end
  enum AM_COPY_MACROVISION_LEVEL
    AM_MACROVISION_DISABLED = 0_i32
    AM_MACROVISION_LEVEL1 = 1_i32
    AM_MACROVISION_LEVEL2 = 2_i32
    AM_MACROVISION_LEVEL3 = 3_i32
  end
  enum AM_MPEG2Level
    AM_MPEG2Level_Low = 1_i32
    AM_MPEG2Level_Main = 2_i32
    AM_MPEG2Level_High1440 = 3_i32
    AM_MPEG2Level_High = 4_i32
  end
  enum AM_MPEG2Profile
    AM_MPEG2Profile_Simple = 1_i32
    AM_MPEG2Profile_Main = 2_i32
    AM_MPEG2Profile_SNRScalable = 3_i32
    AM_MPEG2Profile_SpatiallyScalable = 4_i32
    AM_MPEG2Profile_High = 5_i32
  end
  enum AM_PROPERTY_DVDKARAOKE
    AM_PROPERTY_DVDKARAOKE_ENABLE = 0_i32
    AM_PROPERTY_DVDKARAOKE_DATA = 1_i32
  end
  enum AM_PROPERTY_TS_RATE_CHANGE
    AM_RATE_SimpleRateChange = 1_i32
    AM_RATE_ExactRateChange = 2_i32
    AM_RATE_MaxFullDataRate = 3_i32
    AM_RATE_Step = 4_i32
    AM_RATE_UseRateVersion = 5_i32
    AM_RATE_QueryFullFrameRate = 6_i32
    AM_RATE_QueryLastRateSegPTS = 7_i32
    AM_RATE_CorrectTS = 8_i32
    AM_RATE_ReverseMaxFullDataRate = 9_i32
    AM_RATE_ResetOnTimeDisc = 10_i32
    AM_RATE_QueryMapping = 11_i32
  end
  enum AM_PROPERTY_DVD_RATE_CHANGE
    AM_RATE_ChangeRate = 1_i32
    AM_RATE_FullDataRateMax = 2_i32
    AM_RATE_ReverseDecode = 3_i32
    AM_RATE_DecoderPosition = 4_i32
    AM_RATE_DecoderVersion = 5_i32
  end
  enum DVD_PLAY_DIRECTION
    DVD_DIR_FORWARD = 0_i32
    DVD_DIR_BACKWARD = 1_i32
  end
  enum DVD_ERROR
    DVD_ERROR_Unexpected = 1_i32
    DVD_ERROR_CopyProtectFail = 2_i32
    DVD_ERROR_InvalidDVD1_0Disc = 3_i32
    DVD_ERROR_InvalidDiscRegion = 4_i32
    DVD_ERROR_LowParentalLevel = 5_i32
    DVD_ERROR_MacrovisionFail = 6_i32
    DVD_ERROR_IncompatibleSystemAndDecoderRegions = 7_i32
    DVD_ERROR_IncompatibleDiscAndDecoderRegions = 8_i32
    DVD_ERROR_CopyProtectOutputFail = 9_i32
    DVD_ERROR_CopyProtectOutputNotSupported = 10_i32
  end
  enum DVD_WARNING
    DVD_WARNING_InvalidDVD1_0Disc = 1_i32
    DVD_WARNING_FormatNotSupported = 2_i32
    DVD_WARNING_IllegalNavCommand = 3_i32
    DVD_WARNING_Open = 4_i32
    DVD_WARNING_Seek = 5_i32
    DVD_WARNING_Read = 6_i32
  end
  enum DVD_PB_STOPPED
    DVD_PB_STOPPED_Other = 0_i32
    DVD_PB_STOPPED_NoBranch = 1_i32
    DVD_PB_STOPPED_NoFirstPlayDomain = 2_i32
    DVD_PB_STOPPED_StopCommand = 3_i32
    DVD_PB_STOPPED_Reset = 4_i32
    DVD_PB_STOPPED_DiscEjected = 5_i32
    DVD_PB_STOPPED_IllegalNavCommand = 6_i32
    DVD_PB_STOPPED_PlayPeriodAutoStop = 7_i32
    DVD_PB_STOPPED_PlayChapterAutoStop = 8_i32
    DVD_PB_STOPPED_ParentalFailure = 9_i32
    DVD_PB_STOPPED_RegionFailure = 10_i32
    DVD_PB_STOPPED_MacrovisionFailure = 11_i32
    DVD_PB_STOPPED_DiscReadError = 12_i32
    DVD_PB_STOPPED_CopyProtectFailure = 13_i32
    DVD_PB_STOPPED_CopyProtectOutputFailure = 14_i32
    DVD_PB_STOPPED_CopyProtectOutputNotSupported = 15_i32
  end
  enum SNDDEV_ERR
    SNDDEV_ERROR_Open = 1_i32
    SNDDEV_ERROR_Close = 2_i32
    SNDDEV_ERROR_GetCaps = 3_i32
    SNDDEV_ERROR_PrepareHeader = 4_i32
    SNDDEV_ERROR_UnprepareHeader = 5_i32
    SNDDEV_ERROR_Reset = 6_i32
    SNDDEV_ERROR_Restart = 7_i32
    SNDDEV_ERROR_GetPosition = 8_i32
    SNDDEV_ERROR_Write = 9_i32
    SNDDEV_ERROR_Pause = 10_i32
    SNDDEV_ERROR_Stop = 11_i32
    SNDDEV_ERROR_Start = 12_i32
    SNDDEV_ERROR_AddBuffer = 13_i32
    SNDDEV_ERROR_Query = 14_i32
  end
  enum MP_TYPE
    MPT_INT = 0_i32
    MPT_FLOAT = 1_i32
    MPT_BOOL = 2_i32
    MPT_ENUM = 3_i32
    MPT_MAX = 4_i32
  end
  enum MP_CURVE_TYPE
    MP_CURVE_JUMP = 1_i32
    MP_CURVE_LINEAR = 2_i32
    MP_CURVE_SQUARE = 4_i32
    MP_CURVE_INVSQUARE = 8_i32
    MP_CURVE_SINE = 16_i32
  end
  enum DXVA2_SampleFlags
    DXVA2_SampleFlag_Palette_Changed = 1_i32
    DXVA2_SampleFlag_SrcRect_Changed = 2_i32
    DXVA2_SampleFlag_DstRect_Changed = 4_i32
    DXVA2_SampleFlag_ColorData_Changed = 8_i32
    DXVA2_SampleFlag_PlanarAlpha_Changed = 16_i32
    DXVA2_SampleFlag_RFF = 65536_i32
    DXVA2_SampleFlag_TFF = 131072_i32
    DXVA2_SampleFlag_RFF_TFF_Present = 262144_i32
    DXVA2_SampleFlagsMask = -65505_i32
  end
  enum DXVA2_DestinationFlags
    DXVA2_DestinationFlag_Background_Changed = 1_i32
    DXVA2_DestinationFlag_TargetRect_Changed = 2_i32
    DXVA2_DestinationFlag_ColorData_Changed = 4_i32
    DXVA2_DestinationFlag_Alpha_Changed = 8_i32
    DXVA2_DestinationFlag_RFF = 65536_i32
    DXVA2_DestinationFlag_TFF = 131072_i32
    DXVA2_DestinationFlag_RFF_TFF_Present = 262144_i32
    DXVA2_DestinationFlagMask = -65521_i32
  end
  enum AMPlayListItemFlags
    AMPLAYLISTITEM_CANSKIP = 1_i32
    AMPLAYLISTITEM_CANBIND = 2_i32
  end
  enum AMPlayListFlags
    AMPLAYLIST_STARTINSCANMODE = 1_i32
    AMPLAYLIST_FORCEBANNER = 2_i32
  end
  enum AMPlayListEventFlags
    AMPLAYLISTEVENT_RESUME = 0_i32
    AMPLAYLISTEVENT_BREAK = 1_i32
    AMPLAYLISTEVENT_NEXT = 2_i32
    AMPLAYLISTEVENT_MASK = 15_i32
    AMPLAYLISTEVENT_REFRESH = 16_i32
  end
  enum DISPID_TUNER
    DISPID_TUNER_TS_UNIQUENAME = 1_i32
    DISPID_TUNER_TS_FRIENDLYNAME = 2_i32
    DISPID_TUNER_TS_CLSID = 3_i32
    DISPID_TUNER_TS_NETWORKTYPE = 4_i32
    DISPID_TUNER_TS__NETWORKTYPE = 5_i32
    DISPID_TUNER_TS_CREATETUNEREQUEST = 6_i32
    DISPID_TUNER_TS_ENUMCATEGORYGUIDS = 7_i32
    DISPID_TUNER_TS_ENUMDEVICEMONIKERS = 8_i32
    DISPID_TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES = 9_i32
    DISPID_TUNER_TS_FREQMAP = 10_i32
    DISPID_TUNER_TS_DEFLOCATOR = 11_i32
    DISPID_TUNER_TS_CLONE = 12_i32
    DISPID_TUNER_TR_TUNINGSPACE = 1_i32
    DISPID_TUNER_TR_COMPONENTS = 2_i32
    DISPID_TUNER_TR_CLONE = 3_i32
    DISPID_TUNER_TR_LOCATOR = 4_i32
    DISPID_TUNER_CT_CATEGORY = 1_i32
    DISPID_TUNER_CT_MEDIAMAJORTYPE = 2_i32
    DISPID_TUNER_CT__MEDIAMAJORTYPE = 3_i32
    DISPID_TUNER_CT_MEDIASUBTYPE = 4_i32
    DISPID_TUNER_CT__MEDIASUBTYPE = 5_i32
    DISPID_TUNER_CT_MEDIAFORMATTYPE = 6_i32
    DISPID_TUNER_CT__MEDIAFORMATTYPE = 7_i32
    DISPID_TUNER_CT_MEDIATYPE = 8_i32
    DISPID_TUNER_CT_CLONE = 9_i32
    DISPID_TUNER_LCT_LANGID = 100_i32
    DISPID_TUNER_MP2CT_TYPE = 200_i32
    DISPID_TUNER_ATSCCT_FLAGS = 300_i32
    DISPID_TUNER_L_CARRFREQ = 1_i32
    DISPID_TUNER_L_INNERFECMETHOD = 2_i32
    DISPID_TUNER_L_INNERFECRATE = 3_i32
    DISPID_TUNER_L_OUTERFECMETHOD = 4_i32
    DISPID_TUNER_L_OUTERFECRATE = 5_i32
    DISPID_TUNER_L_MOD = 6_i32
    DISPID_TUNER_L_SYMRATE = 7_i32
    DISPID_TUNER_L_CLONE = 8_i32
    DISPID_TUNER_L_ATSC_PHYS_CHANNEL = 201_i32
    DISPID_TUNER_L_ATSC_TSID = 202_i32
    DISPID_TUNER_L_ATSC_MP2_PROGNO = 203_i32
    DISPID_TUNER_L_DVBT_BANDWIDTH = 301_i32
    DISPID_TUNER_L_DVBT_LPINNERFECMETHOD = 302_i32
    DISPID_TUNER_L_DVBT_LPINNERFECRATE = 303_i32
    DISPID_TUNER_L_DVBT_GUARDINTERVAL = 304_i32
    DISPID_TUNER_L_DVBT_HALPHA = 305_i32
    DISPID_TUNER_L_DVBT_TRANSMISSIONMODE = 306_i32
    DISPID_TUNER_L_DVBT_INUSE = 307_i32
    DISPID_TUNER_L_DVBT2_PHYSICALLAYERPIPEID = 351_i32
    DISPID_TUNER_L_DVBS_POLARISATION = 401_i32
    DISPID_TUNER_L_DVBS_WEST = 402_i32
    DISPID_TUNER_L_DVBS_ORBITAL = 403_i32
    DISPID_TUNER_L_DVBS_AZIMUTH = 404_i32
    DISPID_TUNER_L_DVBS_ELEVATION = 405_i32
    DISPID_TUNER_L_DVBS2_DISEQ_LNB_SOURCE = 406_i32
    DISPID_TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE = 407_i32
    DISPID_TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE = 408_i32
    DISPID_TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE = 409_i32
    DISPID_TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE = 410_i32
    DISPID_TUNER_L_DVBS2_ROLLOFF = 411_i32
    DISPID_TUNER_L_DVBS2_PILOT = 412_i32
    DISPID_TUNER_L_ANALOG_STANDARD = 601_i32
    DISPID_TUNER_L_DTV_O_MAJOR_CHANNEL = 701_i32
    DISPID_TUNER_C_TYPE = 1_i32
    DISPID_TUNER_C_STATUS = 2_i32
    DISPID_TUNER_C_LANGID = 3_i32
    DISPID_TUNER_C_DESCRIPTION = 4_i32
    DISPID_TUNER_C_CLONE = 5_i32
    DISPID_TUNER_C_MP2_PID = 101_i32
    DISPID_TUNER_C_MP2_PCRPID = 102_i32
    DISPID_TUNER_C_MP2_PROGNO = 103_i32
    DISPID_TUNER_C_ANALOG_AUDIO = 201_i32
    DISPID_TUNER_TS_DVB_SYSTEMTYPE = 101_i32
    DISPID_TUNER_TS_DVB2_NETWORK_ID = 102_i32
    DISPID_TUNER_TS_DVBS_LOW_OSC_FREQ = 1001_i32
    DISPID_TUNER_TS_DVBS_HI_OSC_FREQ = 1002_i32
    DISPID_TUNER_TS_DVBS_LNB_SWITCH_FREQ = 1003_i32
    DISPID_TUNER_TS_DVBS_INPUT_RANGE = 1004_i32
    DISPID_TUNER_TS_DVBS_SPECTRAL_INVERSION = 1005_i32
    DISPID_TUNER_TS_AR_MINFREQUENCY = 101_i32
    DISPID_TUNER_TS_AR_MAXFREQUENCY = 102_i32
    DISPID_TUNER_TS_AR_STEP = 103_i32
    DISPID_TUNER_TS_AR_COUNTRYCODE = 104_i32
    DISPID_TUNER_TS_AUX_COUNTRYCODE = 101_i32
    DISPID_TUNER_TS_ATV_MINCHANNEL = 101_i32
    DISPID_TUNER_TS_ATV_MAXCHANNEL = 102_i32
    DISPID_TUNER_TS_ATV_INPUTTYPE = 103_i32
    DISPID_TUNER_TS_ATV_COUNTRYCODE = 104_i32
    DISPID_TUNER_TS_ATSC_MINMINORCHANNEL = 201_i32
    DISPID_TUNER_TS_ATSC_MAXMINORCHANNEL = 202_i32
    DISPID_TUNER_TS_ATSC_MINPHYSCHANNEL = 203_i32
    DISPID_TUNER_TS_ATSC_MAXPHYSCHANNEL = 204_i32
    DISPID_TUNER_TS_DC_MINMAJORCHANNEL = 301_i32
    DISPID_TUNER_TS_DC_MAXMAJORCHANNEL = 302_i32
    DISPID_TUNER_TS_DC_MINSOURCEID = 303_i32
    DISPID_TUNER_TS_DC_MAXSOURCEID = 304_i32
    DISPID_CHTUNER_ATVAC_CHANNEL = 101_i32
    DISPID_CHTUNER_ATVDC_SYSTEM = 101_i32
    DISPID_CHTUNER_ATVDC_CONTENT = 102_i32
    DISPID_CHTUNER_CIDTR_CHANNELID = 101_i32
    DISPID_CHTUNER_CTR_CHANNEL = 101_i32
    DISPID_CHTUNER_ACTR_MINOR_CHANNEL = 201_i32
    DISPID_CHTUNER_DCTR_MAJOR_CHANNEL = 301_i32
    DISPID_CHTUNER_DCTR_SRCID = 302_i32
    DISPID_DVBTUNER_DVBC_ATTRIBUTESVALID = 101_i32
    DISPID_DVBTUNER_DVBC_PID = 102_i32
    DISPID_DVBTUNER_DVBC_TAG = 103_i32
    DISPID_DVBTUNER_DVBC_COMPONENTTYPE = 104_i32
    DISPID_DVBTUNER_ONID = 101_i32
    DISPID_DVBTUNER_TSID = 102_i32
    DISPID_DVBTUNER_SID = 103_i32
    DISPID_MP2TUNER_TSID = 101_i32
    DISPID_MP2TUNER_PROGNO = 102_i32
    DISPID_MP2TUNERFACTORY_CREATETUNEREQUEST = 1_i32
  end
  enum EnTvRat_System
    MPAA = 0_i32
    US_TV = 1_i32
    Canadian_English = 2_i32
    Canadian_French = 3_i32
    Reserved4 = 4_i32
    System5 = 5_i32
    System6 = 6_i32
    Reserved7 = 7_i32
    PBDA = 8_i32
    AgeBased = 9_i32
    TvRat_kSystems = 10_i32
    TvRat_SystemDontKnow = 255_i32
  end
  enum EnTvRat_GenericLevel
    TvRat_0 = 0_i32
    TvRat_1 = 1_i32
    TvRat_2 = 2_i32
    TvRat_3 = 3_i32
    TvRat_4 = 4_i32
    TvRat_5 = 5_i32
    TvRat_6 = 6_i32
    TvRat_7 = 7_i32
    TvRat_8 = 8_i32
    TvRat_9 = 9_i32
    TvRat_10 = 10_i32
    TvRat_11 = 11_i32
    TvRat_12 = 12_i32
    TvRat_13 = 13_i32
    TvRat_14 = 14_i32
    TvRat_15 = 15_i32
    TvRat_16 = 16_i32
    TvRat_17 = 17_i32
    TvRat_18 = 18_i32
    TvRat_19 = 19_i32
    TvRat_20 = 20_i32
    TvRat_21 = 21_i32
    TvRat_kLevels = 22_i32
    TvRat_Unblock = -1_i32
    TvRat_LevelDontKnow = 255_i32
  end
  enum EnTvRat_MPAA
    MPAA_NotApplicable = 0_i32
    MPAA_G = 1_i32
    MPAA_PG = 2_i32
    MPAA_PG13 = 3_i32
    MPAA_R = 4_i32
    MPAA_NC17 = 5_i32
    MPAA_X = 6_i32
    MPAA_NotRated = 7_i32
  end
  enum EnTvRat_US_TV
    US_TV_None = 0_i32
    US_TV_Y = 1_i32
    US_TV_Y7 = 2_i32
    US_TV_G = 3_i32
    US_TV_PG = 4_i32
    US_TV_14 = 5_i32
    US_TV_MA = 6_i32
    US_TV_None7 = 7_i32
  end
  enum EnTvRat_CAE_TV
    CAE_TV_Exempt = 0_i32
    CAE_TV_C = 1_i32
    CAE_TV_C8 = 2_i32
    CAE_TV_G = 3_i32
    CAE_TV_PG = 4_i32
    CAE_TV_14 = 5_i32
    CAE_TV_18 = 6_i32
    CAE_TV_Reserved = 7_i32
  end
  enum EnTvRat_CAF_TV
    CAF_TV_Exempt = 0_i32
    CAF_TV_G = 1_i32
    CAF_TV_8 = 2_i32
    CAF_TV_13 = 3_i32
    CAF_TV_16 = 4_i32
    CAF_TV_18 = 5_i32
    CAF_TV_Reserved6 = 6_i32
    CAF_TV_Reserved = 7_i32
  end
  enum BfEnTvRat_GenericAttributes
    BfAttrNone = 0_i32
    BfIsBlocked = 1_i32
    BfIsAttr_1 = 2_i32
    BfIsAttr_2 = 4_i32
    BfIsAttr_3 = 8_i32
    BfIsAttr_4 = 16_i32
    BfIsAttr_5 = 32_i32
    BfIsAttr_6 = 64_i32
    BfIsAttr_7 = 128_i32
    BfValidAttrSubmask = 255_i32
  end
  enum BfEnTvRat_Attributes_US_TV
    US_TV_IsBlocked = 1_i32
    US_TV_IsViolent = 2_i32
    US_TV_IsSexualSituation = 4_i32
    US_TV_IsAdultLanguage = 8_i32
    US_TV_IsSexuallySuggestiveDialog = 16_i32
    US_TV_ValidAttrSubmask = 31_i32
  end
  enum BfEnTvRat_Attributes_MPAA
    MPAA_IsBlocked = 1_i32
    MPAA_ValidAttrSubmask = 1_i32
  end
  enum BfEnTvRat_Attributes_CAE_TV
    CAE_IsBlocked = 1_i32
    CAE_ValidAttrSubmask = 1_i32
  end
  enum BfEnTvRat_Attributes_CAF_TV
    CAF_IsBlocked = 1_i32
    CAF_ValidAttrSubmask = 1_i32
  end
  enum FormatNotSupportedEvents
    FORMATNOTSUPPORTED_CLEAR = 0_i32
    FORMATNOTSUPPORTED_NOTSUPPORTED = 1_i32
  end
  enum ProtType
    PROT_COPY_FREE = 1_i32
    PROT_COPY_ONCE = 2_i32
    PROT_COPY_NEVER = 3_i32
    PROT_COPY_NEVER_REALLY = 4_i32
    PROT_COPY_NO_MORE = 5_i32
    PROT_COPY_FREE_CIT = 6_i32
    PROT_COPY_BF = 7_i32
    PROT_COPY_CN_RECORDING_STOP = 8_i32
    PROT_COPY_FREE_SECURE = 9_i32
    PROT_COPY_INVALID = 50_i32
  end
  enum EncDecEvents
    ENCDEC_CPEVENT = 0_i32
    ENCDEC_RECORDING_STATUS = 1_i32
  end
  enum CPRecordingStatus
    RECORDING_STOPPED = 0_i32
    RECORDING_STARTED = 1_i32
  end
  enum CPEventBitShift
    CPEVENT_BITSHIFT_RATINGS = 0_i32
    CPEVENT_BITSHIFT_COPP = 1_i32
    CPEVENT_BITSHIFT_LICENSE = 2_i32
    CPEVENT_BITSHIFT_ROLLBACK = 3_i32
    CPEVENT_BITSHIFT_SAC = 4_i32
    CPEVENT_BITSHIFT_DOWNRES = 5_i32
    CPEVENT_BITSHIFT_STUBLIB = 6_i32
    CPEVENT_BITSHIFT_UNTRUSTEDGRAPH = 7_i32
    CPEVENT_BITSHIFT_PENDING_CERTIFICATE = 8_i32
    CPEVENT_BITSHIFT_NO_PLAYREADY = 9_i32
  end
  enum CPEvents
    CPEVENT_NONE = 0_i32
    CPEVENT_RATINGS = 1_i32
    CPEVENT_COPP = 2_i32
    CPEVENT_LICENSE = 3_i32
    CPEVENT_ROLLBACK = 4_i32
    CPEVENT_SAC = 5_i32
    CPEVENT_DOWNRES = 6_i32
    CPEVENT_STUBLIB = 7_i32
    CPEVENT_UNTRUSTEDGRAPH = 8_i32
    CPEVENT_PROTECTWINDOWED = 9_i32
  end
  enum RevokedComponent
    REVOKED_COPP = 0_i32
    REVOKED_SAC = 1_i32
    REVOKED_APP_STUB = 2_i32
    REVOKED_SECURE_PIPELINE = 3_i32
    REVOKED_MAX_TYPES = 4_i32
  end
  enum EnTag_Mode
    EnTag_Remove = 0_i32
    EnTag_Once = 1_i32
    EnTag_Repeat = 2_i32
  end
  enum COPPEventBlockReason
    COPP_Unknown = -1_i32
    COPP_BadDriver = 0_i32
    COPP_NoCardHDCPSupport = 1_i32
    COPP_NoMonitorHDCPSupport = 2_i32
    COPP_BadCertificate = 3_i32
    COPP_InvalidBusProtection = 4_i32
    COPP_AeroGlassOff = 5_i32
    COPP_RogueApp = 6_i32
    COPP_ForbiddenVideo = 7_i32
    COPP_Activate = 8_i32
    COPP_DigitalAudioUnprotected = 9_i32
  end
  enum LicenseEventBlockReason
    LIC_BadLicense = 0_i32
    LIC_NeedIndiv = 1_i32
    LIC_Expired = 2_i32
    LIC_NeedActivation = 3_i32
    LIC_ExtenderBlocked = 4_i32
  end
  enum DownResEventParam
    DOWNRES_Always = 0_i32
    DOWNRES_InWindowOnly = 1_i32
    DOWNRES_Undefined = 2_i32
  end
  enum SegDispidList
    Dispidname = 0_i32
    Dispidstatus = 1_i32
    Dispiddevimagesourcewidth = 2_i32
    Dispiddevimagesourceheight = 3_i32
    Dispiddevcountrycode = 4_i32
    Dispiddevoverscan = 5_i32
    Dispidsegment = 6_i32
    Dispiddevvolume = 7_i32
    Dispiddevbalance = 8_i32
    Dispiddevpower = 9_i32
    Dispidtunechan = 10_i32
    Dispiddevvideosubchannel = 11_i32
    Dispiddevaudiosubchannel = 12_i32
    Dispidchannelavailable = 13_i32
    Dispiddevvideofrequency = 14_i32
    Dispiddevaudiofrequency = 15_i32
    Dispidcount = 16_i32
    Dispiddevfilename = 17_i32
    Dispidvisible = 18_i32
    Dispidowner = 19_i32
    Dispidmessagedrain = 20_i32
    Dispidviewable = 21_i32
    Dispiddevview = 22_i32
    Dispidkscat = 23_i32
    Dispidclsid = 24_i32
    Dispid_kscat = 25_i32
    Dispid_clsid = 26_i32
    Dispidtune = 27_i32
    Dispidts = 28_i32
    Dispiddevsap = 29_i32
    Dispidclip = 30_i32
    Dispidrequestedcliprect = 31_i32
    Dispidclippedsourcerect = 32_i32
    Dispidavailablesourcerect = 33_i32
    Dispidmediaposition = 34_i32
    Dispiddevrun = 35_i32
    Dispiddevpause = 36_i32
    Dispiddevstop = 37_i32
    Dispidccenable = 38_i32
    Dispiddevstep = 39_i32
    Dispiddevcanstep = 40_i32
    Dispidsourcesize = 41_i32
    Dispid_playtitle = 42_i32
    Dispid_playchapterintitle = 43_i32
    Dispid_playchapter = 44_i32
    Dispid_playchaptersautostop = 45_i32
    Dispid_playattime = 46_i32
    Dispid_playattimeintitle = 47_i32
    Dispid_playperiodintitleautostop = 48_i32
    Dispid_replaychapter = 49_i32
    Dispid_playprevchapter = 50_i32
    Dispid_playnextchapter = 51_i32
    Dispid_playforwards = 52_i32
    Dispid_playbackwards = 53_i32
    Dispid_stilloff = 54_i32
    Dispid_audiolanguage = 55_i32
    Dispid_showmenu = 56_i32
    Dispid_resume = 57_i32
    Dispid_returnfromsubmenu = 58_i32
    Dispid_buttonsavailable = 59_i32
    Dispid_currentbutton = 60_i32
    Dispid_selectandactivatebutton = 61_i32
    Dispid_activatebutton = 62_i32
    Dispid_selectrightbutton = 63_i32
    Dispid_selectleftbutton = 64_i32
    Dispid_selectlowerbutton = 65_i32
    Dispid_selectupperbutton = 66_i32
    Dispid_activateatposition = 67_i32
    Dispid_selectatposition = 68_i32
    Dispid_buttonatposition = 69_i32
    Dispid_numberofchapters = 70_i32
    Dispid_totaltitletime = 71_i32
    Dispid_titlesavailable = 72_i32
    Dispid_volumesavailable = 73_i32
    Dispid_currentvolume = 74_i32
    Dispid_currentdiscside = 75_i32
    Dispid_currentdomain = 76_i32
    Dispid_currentchapter = 77_i32
    Dispid_currenttitle = 78_i32
    Dispid_currenttime = 79_i32
    Dispid_framespersecond = 80_i32
    Dispid_dvdtimecode2bstr = 81_i32
    Dispid_dvddirectory = 82_i32
    Dispid_issubpicturestreamenabled = 83_i32
    Dispid_isaudiostreamenabled = 84_i32
    Dispid_currentsubpicturestream = 85_i32
    Dispid_subpicturelanguage = 86_i32
    Dispid_currentaudiostream = 87_i32
    Dispid_audiostreamsavailable = 88_i32
    Dispid_anglesavailable = 89_i32
    Dispid_currentangle = 90_i32
    Dispid_ccactive = 91_i32
    Dispid_currentccservice = 92_i32
    Dispid_subpicturestreamsavailable = 93_i32
    Dispid_subpictureon = 94_i32
    Dispid_dvduniqueid = 95_i32
    Dispid_enableresetonstop = 96_i32
    Dispid_acceptparentallevelchange = 97_i32
    Dispid_notifyparentallevelchange = 98_i32
    Dispid_selectparentalcountry = 99_i32
    Dispid_selectparentallevel = 100_i32
    Dispid_titleparentallevels = 101_i32
    Dispid_playerparentalcountry = 102_i32
    Dispid_playerparentallevel = 103_i32
    Dispid_eject = 104_i32
    Dispid_uopvalid = 105_i32
    Dispid_sprm = 106_i32
    Dispid_gprm = 107_i32
    Dispid_dvdtextstringtype = 108_i32
    Dispid_dvdtextstring = 109_i32
    Dispid_dvdtextnumberofstrings = 110_i32
    Dispid_dvdtextnumberoflanguages = 111_i32
    Dispid_dvdtextlanguagelcid = 112_i32
    Dispid_regionchange = 113_i32
    Dispid_dvdadm = 114_i32
    Dispid_deletebookmark = 115_i32
    Dispid_restorebookmark = 116_i32
    Dispid_savebookmark = 117_i32
    Dispid_selectdefaultaudiolanguage = 118_i32
    Dispid_selectdefaultsubpicturelanguage = 119_i32
    Dispid_preferredsubpicturestream = 120_i32
    Dispid_defaultmenulanguage = 121_i32
    Dispid_defaultsubpicturelanguage = 122_i32
    Dispid_defaultaudiolanguage = 123_i32
    Dispid_defaultsubpicturelanguageext = 124_i32
    Dispid_defaultaudiolanguageext = 125_i32
    Dispid_languagefromlcid = 126_i32
    Dispid_karaokeaudiopresentationmode = 127_i32
    Dispid_karaokechannelcontent = 128_i32
    Dispid_karaokechannelassignment = 129_i32
    Dispid_restorepreferredsettings = 130_i32
    Dispid_buttonrect = 131_i32
    Dispid_dvdscreeninmousecoordinates = 132_i32
    Dispid_customcompositorclass = 133_i32
    Dispidcustomcompositorclass = 134_i32
    Dispid_customcompositor = 135_i32
    Dispidmixerbitmap = 136_i32
    Dispid_mixerbitmap = 137_i32
    Dispidmixerbitmapopacity = 138_i32
    Dispidmixerbitmaprect = 139_i32
    Dispidsetupmixerbitmap = 140_i32
    Dispidusingoverlay = 141_i32
    Dispiddisplaychange = 142_i32
    Dispidrepaint = 143_i32
    Dispid_isequaldevice = 144_i32
    Dispidrate = 145_i32
    Dispidposition = 146_i32
    Dispidpositionmode = 147_i32
    Dispidlength = 148_i32
    Dispidchangepassword = 149_i32
    Dispidsaveparentallevel = 150_i32
    Dispidsaveparentalcountry = 151_i32
    Dispidconfirmpassword = 152_i32
    Dispidgetparentallevel = 153_i32
    Dispidgetparentalcountry = 154_i32
    Dispiddefaultaudiolcid = 155_i32
    Dispiddefaultsubpicturelcid = 156_i32
    Dispiddefaultmenulcid = 157_i32
    Dispidbookmarkonstop = 158_i32
    Dispidmaxvidrect = 159_i32
    Dispidminvidrect = 160_i32
    Dispidcapture = 161_i32
    Dispid_decimateinput = 162_i32
    Dispidalloctor = 163_i32
    Dispid_allocator = 164_i32
    Dispidallocpresentid = 165_i32
    Dispidsetallocator = 166_i32
    Dispid_setallocator = 167_i32
    Dispidstreambuffersinkname = 168_i32
    Dispidstreambuffersourcename = 169_i32
    Dispidstreambuffercontentrecording = 170_i32
    Dispidstreambufferreferencerecording = 171_i32
    Dispidstarttime = 172_i32
    Dispidstoptime = 173_i32
    Dispidrecordingstopped = 174_i32
    Dispidrecordingstarted = 175_i32
    Dispidnamesetlock = 176_i32
    Dispidrecordingtype = 177_i32
    Dispidstart = 178_i32
    Dispidrecordingattribute = 179_i32
    Dispid_recordingattribute = 180_i32
    Dispidsbeconfigure = 181_i32
    Dispid_currentratings = 182_i32
    Dispid_maxratingslevel = 183_i32
    Dispid_audioencoderint = 184_i32
    Dispid_videoencoderint = 185_i32
    Dispidservice = 186_i32
    Dispid_blockunrated = 187_i32
    Dispid_unrateddelay = 188_i32
    Dispid_suppresseffects = 189_i32
    Dispidsbesource = 190_i32
    Dispidsetsinkfilter = 191_i32
    Dispid_sinkstreams = 192_i32
    Dispidtvformats = 193_i32
    Dispidmodes = 194_i32
    Dispidauxinputs = 195_i32
    Dispidteletextfilter = 196_i32
    Dispid_channelchangeint = 197_i32
    Dispidunlockprofile = 198_i32
    Dispid_addfilter = 199_i32
    Dispidsetminseek = 200_i32
    Dispidrateex = 201_i32
    Dispidaudiocounter = 202_i32
    Dispidvideocounter = 203_i32
    Dispidcccounter = 204_i32
    Dispidwstcounter = 205_i32
    Dispid_audiocounter = 206_i32
    Dispid_videocounter = 207_i32
    Dispid_cccounter = 208_i32
    Dispid_wstcounter = 209_i32
    Dispidaudioanalysis = 210_i32
    Dispidvideoanalysis = 211_i32
    Dispiddataanalysis = 212_i32
    Dispidaudio_analysis = 213_i32
    Dispidvideo_analysis = 214_i32
    Dispiddata_analysis = 215_i32
    Dispid_resetfilterlist = 216_i32
    Dispiddevicepath = 217_i32
    Dispid_sourcefilter = 218_i32
    Dispid__sourcefilter = 219_i32
    Dispiduserevent = 220_i32
    Dispid_bookmark = 221_i32
    LastReservedDeviceDispid = 16383_i32
  end
  enum SegEventidList
    Eventidstatechange = 0_i32
    Eventidontunechanged = 1_i32
    Eventidendofmedia = 2_i32
    Eventiddvdnotify = 3_i32
    Eventidplayforwards = 4_i32
    Eventidplaybackwards = 5_i32
    Eventidshowmenu = 6_i32
    Eventidresume = 7_i32
    Eventidselectoractivatebutton = 8_i32
    Eventidstilloff = 9_i32
    Eventidpauseon = 10_i32
    Eventidchangecurrentaudiostream = 11_i32
    Eventidchangecurrentsubpicturestream = 12_i32
    Eventidchangecurrentangle = 13_i32
    Eventidplayattimeintitle = 14_i32
    Eventidplayattime = 15_i32
    Eventidplaychapterintitle = 16_i32
    Eventidplaychapter = 17_i32
    Eventidreplaychapter = 18_i32
    Eventidplaynextchapter = 19_i32
    Eventidstop = 20_i32
    Eventidreturnfromsubmenu = 21_i32
    Eventidplaytitle = 22_i32
    Eventidplayprevchapter = 23_i32
    Eventidchangekaraokepresmode = 24_i32
    Eventidchangevideopresmode = 25_i32
    Eventidoverlayunavailable = 26_i32
    Eventidsinkcertificatefailure = 27_i32
    Eventidsinkcertificatesuccess = 28_i32
    Eventidsourcecertificatefailure = 29_i32
    Eventidsourcecertificatesuccess = 30_i32
    Eventidratingsblocked = 31_i32
    Eventidratingsunlocked = 32_i32
    Eventidratingschanged = 33_i32
    Eventidwritefailure = 34_i32
    Eventidtimehole = 35_i32
    Eventidstaledataread = 36_i32
    Eventidcontentbecomingstale = 37_i32
    Eventidstalefiledeleted = 38_i32
    Eventidencryptionon = 39_i32
    Eventidencryptionoff = 40_i32
    Eventidratechange = 41_i32
    Eventidlicensechange = 42_i32
    Eventidcoppblocked = 43_i32
    Eventidcoppunblocked = 44_i32
    Dispidlicenseerrorcode = 45_i32
    Eventidbroadcastevent = 46_i32
    Eventidbroadcasteventex = 47_i32
    Eventidcontentprimarilyaudio = 48_i32
    Dispidavdecaudiodualmonoevent = 49_i32
    Dispidavaudiosamplerateevent = 50_i32
    Dispidavaudiochannelconfigevent = 51_i32
    Dispidavaudiochannelcountevent = 52_i32
    Dispidavdeccommonmeanbitrateevent = 53_i32
    Dispidavddsurroundmodeevent = 54_i32
    Dispidavdeccommoninputformatevent = 55_i32
    Dispidavdeccommonoutputformatevent = 56_i32
    Eventidwritefailureclear = 57_i32
    LastReservedDeviceEvent = 16383_i32
  end
  enum PositionModeList
    FrameMode = 0_i32
    TenthsSecondsMode = 1_i32
  end
  enum RecordingType
    CONTENT = 0_i32
    REFERENCE = 1_i32
  end
  enum MSVidCCService
    None = 0_i32
    Caption1 = 1_i32
    Caption2 = 2_i32
    Text1 = 3_i32
    Text2 = 4_i32
    XDS = 5_i32
  end
  enum MSVidSinkStreams
    MSVidSink_Video = 1_i32
    MSVidSink_Audio = 2_i32
    MSVidSink_Other = 4_i32
  end
  enum MSVidSegmentType
    MSVidSEG_SOURCE = 0_i32
    MSVidSEG_XFORM = 1_i32
    MSVidSEG_DEST = 2_i32
  end
  enum MSVidCtlButtonstate
    MSVIDCTL_LEFT_BUTTON = 1_i32
    MSVIDCTL_RIGHT_BUTTON = 2_i32
    MSVIDCTL_MIDDLE_BUTTON = 4_i32
    MSVIDCTL_X_BUTTON1 = 8_i32
    MSVIDCTL_X_BUTTON2 = 16_i32
    MSVIDCTL_SHIFT = 1_i32
    MSVIDCTL_CTRL = 2_i32
    MSVIDCTL_ALT = 4_i32
  end
  enum DVDMenuIDConstants
    Dvdmenu_title = 2_i32
    Dvdmenu_root = 3_i32
    Dvdmenu_subpicture = 4_i32
    Dvdmenu_audio = 5_i32
    Dvdmenu_angle = 6_i32
    Dvdmenu_chapter = 7_i32
  end
  enum DVDFilterState
    Dvdstate_undefined = -2_i32
    Dvdstate_unitialized = -1_i32
    Dvdstate_stopped = 0_i32
    Dvdstate_paused = 1_i32
    Dvdstate_running = 2_i32
  end
  enum DVDTextStringType
    Dvdstruct_volume = 1_i32
    Dvdstruct_title = 2_i32
    Dvdstruct_parentalid = 3_i32
    Dvdstruct_partoftitle = 4_i32
    Dvdstruct_cell = 5_i32
    Dvdstream_audio = 16_i32
    Dvdstream_subpicture = 17_i32
    Dvdstream_angle = 18_i32
    Dvdchannel_audio = 32_i32
    Dvdgeneral_name = 48_i32
    Dvdgeneral_comments = 49_i32
    Dvdtitle_series = 56_i32
    Dvdtitle_movie = 57_i32
    Dvdtitle_video = 58_i32
    Dvdtitle_album = 59_i32
    Dvdtitle_song = 60_i32
    Dvdtitle_other = 63_i32
    Dvdtitle_sub_series = 64_i32
    Dvdtitle_sub_movie = 65_i32
    Dvdtitle_sub_video = 66_i32
    Dvdtitle_sub_album = 67_i32
    Dvdtitle_sub_song = 68_i32
    Dvdtitle_sub_other = 71_i32
    Dvdtitle_orig_series = 72_i32
    Dvdtitle_orig_movie = 73_i32
    Dvdtitle_orig_video = 74_i32
    Dvdtitle_orig_album = 75_i32
    Dvdtitle_orig_song = 76_i32
    Dvdtitle_orig_other = 79_i32
    Dvdother_scene = 80_i32
    Dvdother_cut = 81_i32
    Dvdother_take = 82_i32
  end
  enum DVDSPExt
    Dvdspext_notspecified = 0_i32
    Dvdspext_caption_normal = 1_i32
    Dvdspext_caption_big = 2_i32
    Dvdspext_caption_children = 3_i32
    Dvdspext_cc_normal = 5_i32
    Dvdspext_cc_big = 6_i32
    Dvdspext_cc_children = 7_i32
    Dvdspext_forced = 9_i32
    Dvdspext_directorcomments_normal = 13_i32
    Dvdspext_directorcomments_big = 14_i32
    Dvdspext_directorcomments_children = 15_i32
  end
  enum SourceSizeList
    Sslfullsize = 0_i32
    Sslclipbyoverscan = 1_i32
    Sslclipbycliprect = 2_i32
  end
  enum MSViddispidList
    Dispidinputs = 0_i32
    Dispidoutputs = 1_i32
    Dispid_inputs = 2_i32
    Dispid_outputs = 3_i32
    Dispidvideorenderers = 4_i32
    Dispidaudiorenderers = 5_i32
    Dispidfeatures = 6_i32
    Dispidinput = 7_i32
    Dispidoutput = 8_i32
    Dispidvideorenderer = 9_i32
    Dispidaudiorenderer = 10_i32
    Dispidselectedfeatures = 11_i32
    Dispidview = 12_i32
    Dispidbuild = 13_i32
    Dispidpause = 14_i32
    Dispidrun = 15_i32
    Dispidstop = 16_i32
    Dispiddecompose = 17_i32
    Dispiddisplaysize = 18_i32
    Dispidmaintainaspectratio = 19_i32
    Dispidcolorkey = 20_i32
    Dispidstatechange = 21_i32
    Dispidgetstate = 22_i32
    Dispidunbind = 23_i32
    Dispidbind = 24_i32
    Dispiddisablevideo = 25_i32
    Dispiddisableaudio = 26_i32
    Dispidviewnext = 27_i32
    Dispidservicep = 28_i32
  end
  enum DisplaySizeList
    Dsldefaultsize = 0_i32
    Dslsourcesize = 0_i32
    Dslhalfsourcesize = 1_i32
    Dsldoublesourcesize = 2_i32
    Dslfullscreen = 3_i32
    Dslhalfscreen = 4_i32
    Dslquarterscreen = 5_i32
    Dslsixteenthscreen = 6_i32
  end
  enum MSVidCtlStateList
    STATE_UNBUILT = -1_i32
    STATE_STOP = 0_i32
    STATE_PAUSE = 1_i32
    STATE_PLAY = 2_i32
  end
  enum RECORDING_TYPE
    RECORDING_TYPE_CONTENT = 0_i32
    RECORDING_TYPE_REFERENCE = 1_i32
  end
  enum STREAMBUFFER_ATTR_DATATYPE
    STREAMBUFFER_TYPE_DWORD = 0_i32
    STREAMBUFFER_TYPE_STRING = 1_i32
    STREAMBUFFER_TYPE_BINARY = 2_i32
    STREAMBUFFER_TYPE_BOOL = 3_i32
    STREAMBUFFER_TYPE_QWORD = 4_i32
    STREAMBUFFER_TYPE_WORD = 5_i32
    STREAMBUFFER_TYPE_GUID = 6_i32
  end
  enum CROSSBAR_DEFAULT_FLAGS
    DEF_MODE_PROFILE = 1_i32
    DEF_MODE_STREAMS = 2_i32
  end
  enum MPEG_CURRENT_NEXT_BIT
    MPEG_SECTION_IS_NEXT = 0_i32
    MPEG_SECTION_IS_CURRENT = 1_i32
  end
  enum MPEG_CONTEXT_TYPE
    MPEG_CONTEXT_BCS_DEMUX = 0_i32
    MPEG_CONTEXT_WINSOCK = 1_i32
  end
  enum MPEG_REQUEST_TYPE
    MPEG_RQST_UNKNOWN = 0_i32
    MPEG_RQST_GET_SECTION = 1_i32
    MPEG_RQST_GET_SECTION_ASYNC = 2_i32
    MPEG_RQST_GET_TABLE = 3_i32
    MPEG_RQST_GET_TABLE_ASYNC = 4_i32
    MPEG_RQST_GET_SECTIONS_STREAM = 5_i32
    MPEG_RQST_GET_PES_STREAM = 6_i32
    MPEG_RQST_GET_TS_STREAM = 7_i32
    MPEG_RQST_START_MPE_STREAM = 8_i32
  end
  enum VA_VIDEO_FORMAT
    VA_VIDEO_COMPONENT = 0_i32
    VA_VIDEO_PAL = 1_i32
    VA_VIDEO_NTSC = 2_i32
    VA_VIDEO_SECAM = 3_i32
    VA_VIDEO_MAC = 4_i32
    VA_VIDEO_UNSPECIFIED = 5_i32
  end
  enum VA_COLOR_PRIMARIES
    VA_PRIMARIES_ITU_R_BT_709 = 1_i32
    VA_PRIMARIES_UNSPECIFIED = 2_i32
    VA_PRIMARIES_ITU_R_BT_470_SYSTEM_M = 4_i32
    VA_PRIMARIES_ITU_R_BT_470_SYSTEM_B_G = 5_i32
    VA_PRIMARIES_SMPTE_170M = 6_i32
    VA_PRIMARIES_SMPTE_240M = 7_i32
    VA_PRIMARIES_H264_GENERIC_FILM = 8_i32
  end
  enum VA_TRANSFER_CHARACTERISTICS
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_709 = 1_i32
    VA_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2_i32
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_M = 4_i32
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_B_G = 5_i32
    VA_TRANSFER_CHARACTERISTICS_SMPTE_170M = 6_i32
    VA_TRANSFER_CHARACTERISTICS_SMPTE_240M = 7_i32
    VA_TRANSFER_CHARACTERISTICS_LINEAR = 8_i32
    VA_TRANSFER_CHARACTERISTICS_H264_LOG_100_TO_1 = 9_i32
    VA_TRANSFER_CHARACTERISTICS_H264_LOG_316_TO_1 = 10_i32
  end
  enum VA_MATRIX_COEFFICIENTS
    VA_MATRIX_COEFF_H264_RGB = 0_i32
    VA_MATRIX_COEFF_ITU_R_BT_709 = 1_i32
    VA_MATRIX_COEFF_UNSPECIFIED = 2_i32
    VA_MATRIX_COEFF_FCC = 4_i32
    VA_MATRIX_COEFF_ITU_R_BT_470_SYSTEM_B_G = 5_i32
    VA_MATRIX_COEFF_SMPTE_170M = 6_i32
    VA_MATRIX_COEFF_SMPTE_240M = 7_i32
    VA_MATRIX_COEFF_H264_YCgCo = 8_i32
  end
  enum DVB_STRCONV_MODE
    STRCONV_MODE_DVB = 0_i32
    STRCONV_MODE_DVB_EMPHASIS = 1_i32
    STRCONV_MODE_DVB_WITHOUT_EMPHASIS = 2_i32
    STRCONV_MODE_ISDB = 3_i32
  end
  enum CRID_LOCATION
    CRID_LOCATION_IN_DESCRIPTOR = 0_i32
    CRID_LOCATION_IN_CIT = 1_i32
    CRID_LOCATION_DVB_RESERVED1 = 2_i32
    CRID_LOCATION_DVB_RESERVED2 = 3_i32
  end
  enum DESC_LINKAGE_TYPE
    DESC_LINKAGE_RESERVED0 = 0_i32
    DESC_LINKAGE_INFORMATION = 1_i32
    DESC_LINKAGE_EPG = 2_i32
    DESC_LINKAGE_CA_REPLACEMENT = 3_i32
    DESC_LINKAGE_COMPLETE_NET_BOUQUET_SI = 4_i32
    DESC_LINKAGE_REPLACEMENT = 5_i32
    DESC_LINKAGE_DATA = 6_i32
    DESC_LINKAGE_RESERVED1 = 7_i32
    DESC_LINKAGE_USER = 8_i32
    DESC_LINKAGE_RESERVED2 = 255_i32
  end
  enum ChannelChangeSpanningEvent_State
    ChannelChangeSpanningEvent_Start = 0_i32
    ChannelChangeSpanningEvent_End = 2_i32
  end
  enum ChannelType
    ChannelTypeNone = 0_i32
    ChannelTypeOther = 1_i32
    ChannelTypeVideo = 2_i32
    ChannelTypeAudio = 4_i32
    ChannelTypeText = 8_i32
    ChannelTypeSubtitles = 16_i32
    ChannelTypeCaptions = 32_i32
    ChannelTypeSuperimpose = 64_i32
    ChannelTypeData = 128_i32
  end
  enum SignalAndServiceStatusSpanningEvent_State
    SignalAndServiceStatusSpanningEvent_None = -1_i32
    SignalAndServiceStatusSpanningEvent_Clear = 0_i32
    SignalAndServiceStatusSpanningEvent_NoTVSignal = 1_i32
    SignalAndServiceStatusSpanningEvent_ServiceOffAir = 2_i32
    SignalAndServiceStatusSpanningEvent_WeakTVSignal = 3_i32
    SignalAndServiceStatusSpanningEvent_NoSubscription = 4_i32
    SignalAndServiceStatusSpanningEvent_AllAVScrambled = 5_i32
  end
  enum KSPROPERTY_BDA_ETHERNET_FILTER
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE = 0_i32
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST = 1_i32
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE = 2_i32
  end
  enum KSPROPERTY_BDA_IPv4_FILTER
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE = 0_i32
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST = 1_i32
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE = 2_i32
  end
  enum KSPROPERTY_BDA_IPv6_FILTER
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE = 0_i32
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST = 1_i32
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE = 2_i32
  end
  enum KSPROPERTY_BDA_SIGNAL_STATS
    KSPROPERTY_BDA_SIGNAL_STRENGTH = 0_i32
    KSPROPERTY_BDA_SIGNAL_QUALITY = 1_i32
    KSPROPERTY_BDA_SIGNAL_PRESENT = 2_i32
    KSPROPERTY_BDA_SIGNAL_LOCKED = 3_i32
    KSPROPERTY_BDA_SAMPLE_TIME = 4_i32
    KSPROPERTY_BDA_SIGNAL_LOCK_CAPS = 5_i32
    KSPROPERTY_BDA_SIGNAL_LOCK_TYPE = 6_i32
  end
  enum BDA_LockType
    Bda_LockType_None = 0_i32
    Bda_LockType_PLL = 1_i32
    Bda_LockType_DecoderDemod = 2_i32
    Bda_LockType_Complete = 128_i32
  end
  enum KSMETHOD_BDA_CHANGE_SYNC
    KSMETHOD_BDA_START_CHANGES = 0_i32
    KSMETHOD_BDA_CHECK_CHANGES = 1_i32
    KSMETHOD_BDA_COMMIT_CHANGES = 2_i32
    KSMETHOD_BDA_GET_CHANGE_STATE = 3_i32
  end
  enum KSMETHOD_BDA_DEVICE_CONFIGURATION
    KSMETHOD_BDA_CREATE_PIN_FACTORY = 0_i32
    KSMETHOD_BDA_DELETE_PIN_FACTORY = 1_i32
    KSMETHOD_BDA_CREATE_TOPOLOGY = 2_i32
  end
  enum KSPROPERTY_BDA_TOPOLOGY
    KSPROPERTY_BDA_NODE_TYPES = 0_i32
    KSPROPERTY_BDA_PIN_TYPES = 1_i32
    KSPROPERTY_BDA_TEMPLATE_CONNECTIONS = 2_i32
    KSPROPERTY_BDA_NODE_METHODS = 3_i32
    KSPROPERTY_BDA_NODE_PROPERTIES = 4_i32
    KSPROPERTY_BDA_NODE_EVENTS = 5_i32
    KSPROPERTY_BDA_CONTROLLING_PIN_ID = 6_i32
    KSPROPERTY_BDA_NODE_DESCRIPTORS = 7_i32
  end
  enum KSPROPERTY_BDA_PIN_CONTROL
    KSPROPERTY_BDA_PIN_ID = 0_i32
    KSPROPERTY_BDA_PIN_TYPE = 1_i32
  end
  enum KSPROPERTY_BDA_PIN_EVENT
    KSEVENT_BDA_PIN_CONNECTED = 0_i32
    KSEVENT_BDA_PIN_DISCONNECTED = 1_i32
  end
  enum KSPROPERTY_BDA_VOID_TRANSFORM
    KSPROPERTY_BDA_VOID_TRANSFORM_START = 0_i32
    KSPROPERTY_BDA_VOID_TRANSFORM_STOP = 1_i32
  end
  enum KSPROPERTY_BDA_NULL_TRANSFORM
    KSPROPERTY_BDA_NULL_TRANSFORM_START = 0_i32
    KSPROPERTY_BDA_NULL_TRANSFORM_STOP = 1_i32
  end
  enum KSPROPERTY_BDA_FREQUENCY_FILTER
    KSPROPERTY_BDA_RF_TUNER_FREQUENCY = 0_i32
    KSPROPERTY_BDA_RF_TUNER_POLARITY = 1_i32
    KSPROPERTY_BDA_RF_TUNER_RANGE = 2_i32
    KSPROPERTY_BDA_RF_TUNER_TRANSPONDER = 3_i32
    KSPROPERTY_BDA_RF_TUNER_BANDWIDTH = 4_i32
    KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER = 5_i32
    KSPROPERTY_BDA_RF_TUNER_CAPS = 6_i32
    KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS = 7_i32
    KSPROPERTY_BDA_RF_TUNER_STANDARD = 8_i32
    KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE = 9_i32
  end
  enum BDA_SignalType
    Bda_SignalType_Unknown = 0_i32
    Bda_SignalType_Analog = 1_i32
    Bda_SignalType_Digital = 2_i32
  end
  enum BDA_DigitalSignalStandard
    Bda_DigitalStandard_None = 0_i32
    Bda_DigitalStandard_DVB_T = 1_i32
    Bda_DigitalStandard_DVB_S = 2_i32
    Bda_DigitalStandard_DVB_C = 4_i32
    Bda_DigitalStandard_ATSC = 8_i32
    Bda_DigitalStandard_ISDB_T = 16_i32
    Bda_DigitalStandard_ISDB_S = 32_i32
    Bda_DigitalStandard_ISDB_C = 64_i32
  end
  enum KSEVENT_BDA_TUNER
    KSEVENT_BDA_TUNER_SCAN = 0_i32
  end
  enum KSPROPERTY_BDA_LNB_INFO
    KSPROPERTY_BDA_LNB_LOF_LOW_BAND = 0_i32
    KSPROPERTY_BDA_LNB_LOF_HIGH_BAND = 1_i32
    KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY = 2_i32
  end
  enum KSPROPERTY_BDA_DISEQC_COMMAND
    KSPROPERTY_BDA_DISEQC_ENABLE = 0_i32
    KSPROPERTY_BDA_DISEQC_LNB_SOURCE = 1_i32
    KSPROPERTY_BDA_DISEQC_USETONEBURST = 2_i32
    KSPROPERTY_BDA_DISEQC_REPEATS = 3_i32
    KSPROPERTY_BDA_DISEQC_SEND = 4_i32
    KSPROPERTY_BDA_DISEQC_RESPONSE = 5_i32
  end
  enum KSPROPERTY_BDA_DISEQC_EVENT
    KSEVENT_BDA_DISEQC_DATA_RECEIVED = 0_i32
  end
  enum KSPROPERTY_BDA_DIGITAL_DEMODULATOR
    KSPROPERTY_BDA_MODULATION_TYPE = 0_i32
    KSPROPERTY_BDA_INNER_FEC_TYPE = 1_i32
    KSPROPERTY_BDA_INNER_FEC_RATE = 2_i32
    KSPROPERTY_BDA_OUTER_FEC_TYPE = 3_i32
    KSPROPERTY_BDA_OUTER_FEC_RATE = 4_i32
    KSPROPERTY_BDA_SYMBOL_RATE = 5_i32
    KSPROPERTY_BDA_SPECTRAL_INVERSION = 6_i32
    KSPROPERTY_BDA_GUARD_INTERVAL = 7_i32
    KSPROPERTY_BDA_TRANSMISSION_MODE = 8_i32
    KSPROPERTY_BDA_ROLL_OFF = 9_i32
    KSPROPERTY_BDA_PILOT = 10_i32
    KSPROPERTY_BDA_SIGNALTIMEOUTS = 11_i32
    KSPROPERTY_BDA_PLP_NUMBER = 12_i32
  end
  enum KSPROPERTY_BDA_AUTODEMODULATE
    KSPROPERTY_BDA_AUTODEMODULATE_START = 0_i32
    KSPROPERTY_BDA_AUTODEMODULATE_STOP = 1_i32
  end
  enum KSPROPERTY_IDS_BDA_TABLE
    KSPROPERTY_BDA_TABLE_SECTION = 0_i32
  end
  enum KSPROPERTY_BDA_PIDFILTER
    KSPROPERTY_BDA_PIDFILTER_MAP_PIDS = 0_i32
    KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS = 1_i32
    KSPROPERTY_BDA_PIDFILTER_LIST_PIDS = 2_i32
  end
  enum KSPROPERTY_BDA_CA
    KSPROPERTY_BDA_ECM_MAP_STATUS = 0_i32
    KSPROPERTY_BDA_CA_MODULE_STATUS = 1_i32
    KSPROPERTY_BDA_CA_SMART_CARD_STATUS = 2_i32
    KSPROPERTY_BDA_CA_MODULE_UI = 3_i32
    KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS = 4_i32
    KSPROPERTY_BDA_CA_REMOVE_PROGRAM = 5_i32
  end
  enum KSPROPERTY_BDA_CA_EVENT
    KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED = 0_i32
    KSEVENT_BDA_CA_MODULE_STATUS_CHANGED = 1_i32
    KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED = 2_i32
    KSEVENT_BDA_CA_MODULE_UI_REQUESTED = 3_i32
  end
  enum KSMETHOD_BDA_DRM
    KSMETHOD_BDA_DRM_CURRENT = 0_i32
    KSMETHOD_BDA_DRM_DRMSTATUS = 1_i32
  end
  enum KSMETHOD_BDA_WMDRM
    KSMETHOD_BDA_WMDRM_STATUS = 0_i32
    KSMETHOD_BDA_WMDRM_REVINFO = 1_i32
    KSMETHOD_BDA_WMDRM_CRL = 2_i32
    KSMETHOD_BDA_WMDRM_MESSAGE = 3_i32
    KSMETHOD_BDA_WMDRM_REISSUELICENSE = 4_i32
    KSMETHOD_BDA_WMDRM_RENEWLICENSE = 5_i32
    KSMETHOD_BDA_WMDRM_LICENSE = 6_i32
    KSMETHOD_BDA_WMDRM_KEYINFO = 7_i32
  end
  enum KSMETHOD_BDA_WMDRM_TUNER
    KSMETHOD_BDA_WMDRMTUNER_CANCELCAPTURETOKEN = 0_i32
    KSMETHOD_BDA_WMDRMTUNER_SETPIDPROTECTION = 1_i32
    KSMETHOD_BDA_WMDRMTUNER_GETPIDPROTECTION = 2_i32
    KSMETHOD_BDA_WMDRMTUNER_SETSYNCVALUE = 3_i32
    KSMETHOD_BDA_WMDRMTUNER_STARTCODEPROFILE = 4_i32
    KSMETHOD_BDA_WMDRMTUNER_PURCHASE_ENTITLEMENT = 5_i32
  end
  enum KSMETHOD_BDA_EVENTING_SERVICE
    KSMETHOD_BDA_EVENT_DATA = 0_i32
    KSMETHOD_BDA_EVENT_COMPLETE = 1_i32
  end
  enum KSEVENT_BDA_EVENT_TYPE
    KSEVENT_BDA_EVENT_PENDINGEVENT = 0_i32
  end
  enum KSMETHOD_BDA_DEBUG_SERVICE
    KSMETHOD_BDA_DEBUG_LEVEL = 0_i32
    KSMETHOD_BDA_DEBUG_DATA = 1_i32
  end
  enum KSMETHOD_BDA_TUNER_SERVICE
    KSMETHOD_BDA_TUNER_SETTUNER = 0_i32
    KSMETHOD_BDA_TUNER_GETTUNERSTATE = 1_i32
    KSMETHOD_BDA_TUNER_SIGNALNOISERATIO = 2_i32
  end
  enum KSMETHOD_BDA_GPNV_SERVICE
    KSMETHOD_BDA_GPNV_GETVALUE = 0_i32
    KSMETHOD_BDA_GPNV_SETVALUE = 1_i32
    KSMETHOD_BDA_GPNV_NAMEFROMINDEX = 2_i32
    KSMETHOD_BDA_GPNV_GETVALUEUPDATENAME = 3_i32
  end
  enum KSMETHOD_BDA_MUX_SERVICE
    KSMETHOD_BDA_MUX_GETPIDLIST = 0_i32
    KSMETHOD_BDA_MUX_SETPIDLIST = 1_i32
  end
  enum KSMETHOD_BDA_SCAN_SERVICE
    KSMETHOD_BDA_SCAN_CAPABILTIES = 0_i32
    KSMETHOD_BDA_SCANNING_STATE = 1_i32
    KSMETHOD_BDA_SCAN_FILTER = 2_i32
    KSMETHOD_BDA_SCAN_START = 3_i32
    KSMETHOD_BDA_SCAN_RESUME = 4_i32
    KSMETHOD_BDA_SCAN_STOP = 5_i32
  end
  enum KSMETHOD_BDA_GDDS_SERVICE
    KSMETHOD_BDA_GDDS_DATATYPE = 0_i32
    KSMETHOD_BDA_GDDS_DATA = 1_i32
    KSMETHOD_BDA_GDDS_TUNEXMLFROMIDX = 2_i32
    KSMETHOD_BDA_GDDS_GETSERVICES = 3_i32
    KSMETHOD_BDA_GDDS_SERVICEFROMTUNEXML = 4_i32
    KSMETHOD_BDA_GDDS_DATAUPDATE = 5_i32
  end
  enum KSMETHOD_BDA_CAS_SERVICE
    KSMETHOD_BDA_CAS_CHECKENTITLEMENTTOKEN = 0_i32
    KSMETHOD_BDA_CAS_SETCAPTURETOKEN = 1_i32
    KSMETHOD_BDA_CAS_OPENBROADCASTMMI = 2_i32
    KSMETHOD_BDA_CAS_CLOSEMMIDIALOG = 3_i32
  end
  enum KSMETHOD_BDA_ISDB_CAS
    KSMETHOD_BDA_ISDBCAS_SETREQUEST = 0_i32
    KSMETHOD_BDA_ISDBCAS_RESPONSEDATA = 1_i32
  end
  enum KSMETHOD_BDA_TS_SELECTOR
    KSMETHOD_BDA_TS_SELECTOR_SETTSID = 0_i32
    KSMETHOD_BDA_TS_SELECTOR_GETTSINFORMATION = 1_i32
  end
  enum KSMETHOD_BDA_USERACTIVITY_SERVICE
    KSMETHOD_BDA_USERACTIVITY_USEREASON = 0_i32
    KSMETHOD_BDA_USERACTIVITY_INTERVAL = 1_i32
    KSMETHOD_BDA_USERACTIVITY_DETECTED = 2_i32
  end
  enum VIDEOENCODER_BITRATE_MODE
    ConstantBitRate = 0_i32
    VariableBitRateAverage = 1_i32
    VariableBitRatePeak = 2_i32
  end
  enum COPP_HDCP_Protection_Level
    COPP_HDCP_Level0 = 0_i32
    COPP_HDCP_LevelMin = 0_i32
    COPP_HDCP_Level1 = 1_i32
    COPP_HDCP_LevelMax = 1_i32
    COPP_HDCP_ForceDWORD = 2147483647_i32
  end
  enum COPP_CGMSA_Protection_Level
    COPP_CGMSA_Disabled = 0_i32
    COPP_CGMSA_LevelMin = 0_i32
    COPP_CGMSA_CopyFreely = 1_i32
    COPP_CGMSA_CopyNoMore = 2_i32
    COPP_CGMSA_CopyOneGeneration = 3_i32
    COPP_CGMSA_CopyNever = 4_i32
    COPP_CGMSA_RedistributionControlRequired = 8_i32
    COPP_CGMSA_LevelMax = 12_i32
    COPP_CGMSA_ForceDWORD = 2147483647_i32
  end
  enum COPP_ACP_Protection_Level
    COPP_ACP_Level0 = 0_i32
    COPP_ACP_LevelMin = 0_i32
    COPP_ACP_Level1 = 1_i32
    COPP_ACP_Level2 = 2_i32
    COPP_ACP_Level3 = 3_i32
    COPP_ACP_LevelMax = 3_i32
    COPP_ACP_ForceDWORD = 2147483647_i32
  end
  enum COPP_TVProtectionStandard
    COPP_ProtectionStandard_Unknown = -2147483648_i32
    COPP_ProtectionStandard_None = 0_i32
    COPP_ProtectionStandard_IEC61880_525i = 1_i32
    COPP_ProtectionStandard_IEC61880_2_525i = 2_i32
    COPP_ProtectionStandard_IEC62375_625p = 4_i32
    COPP_ProtectionStandard_EIA608B_525 = 8_i32
    COPP_ProtectionStandard_EN300294_625i = 16_i32
    COPP_ProtectionStandard_CEA805A_TypeA_525p = 32_i32
    COPP_ProtectionStandard_CEA805A_TypeA_750p = 64_i32
    COPP_ProtectionStandard_CEA805A_TypeA_1125i = 128_i32
    COPP_ProtectionStandard_CEA805A_TypeB_525p = 256_i32
    COPP_ProtectionStandard_CEA805A_TypeB_750p = 512_i32
    COPP_ProtectionStandard_CEA805A_TypeB_1125i = 1024_i32
    COPP_ProtectionStandard_ARIBTRB15_525i = 2048_i32
    COPP_ProtectionStandard_ARIBTRB15_525p = 4096_i32
    COPP_ProtectionStandard_ARIBTRB15_750p = 8192_i32
    COPP_ProtectionStandard_ARIBTRB15_1125i = 16384_i32
    COPP_ProtectionStandard_Mask = -2147450881_i32
    COPP_ProtectionStandard_Reserved = 2147450880_i32
  end
  enum COPP_ImageAspectRatio_EN300294
    COPP_AspectRatio_EN300294_FullFormat4by3 = 0_i32
    COPP_AspectRatio_EN300294_Box14by9Center = 1_i32
    COPP_AspectRatio_EN300294_Box14by9Top = 2_i32
    COPP_AspectRatio_EN300294_Box16by9Center = 3_i32
    COPP_AspectRatio_EN300294_Box16by9Top = 4_i32
    COPP_AspectRatio_EN300294_BoxGT16by9Center = 5_i32
    COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6_i32
    COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7_i32
    COPP_AspectRatio_ForceDWORD = 2147483647_i32
  end
  enum COPP_StatusFlags
    COPP_StatusNormal = 0_i32
    COPP_LinkLost = 1_i32
    COPP_RenegotiationRequired = 2_i32
    COPP_StatusFlagsReserved = -4_i32
  end
  enum COPP_StatusHDCPFlags
    COPP_HDCPRepeater = 1_i32
    COPP_HDCPFlagsReserved = -2_i32
  end
  enum COPP_ConnectorType
    COPP_ConnectorType_Unknown = -1_i32
    COPP_ConnectorType_VGA = 0_i32
    COPP_ConnectorType_SVideo = 1_i32
    COPP_ConnectorType_CompositeVideo = 2_i32
    COPP_ConnectorType_ComponentVideo = 3_i32
    COPP_ConnectorType_DVI = 4_i32
    COPP_ConnectorType_HDMI = 5_i32
    COPP_ConnectorType_LVDS = 6_i32
    COPP_ConnectorType_TMDS = 7_i32
    COPP_ConnectorType_D_JPN = 8_i32
    COPP_ConnectorType_Internal = -2147483648_i32
    COPP_ConnectorType_ForceDWORD = 2147483647_i32
  end
  enum COPP_BusType
    COPP_BusType_Unknown = 0_i32
    COPP_BusType_PCI = 1_i32
    COPP_BusType_PCIX = 2_i32
    COPP_BusType_PCIExpress = 3_i32
    COPP_BusType_AGP = 4_i32
    COPP_BusType_Integrated = -2147483648_i32
    COPP_BusType_ForceDWORD = 2147483647_i32
  end

  @[Extern]
  record AMVPSIZE,
    dwWidth : UInt32,
    dwHeight : UInt32

  @[Extern]
  record AMVPDIMINFO,
    dwFieldWidth : UInt32,
    dwFieldHeight : UInt32,
    dwVBIWidth : UInt32,
    dwVBIHeight : UInt32,
    rcValidRegion : Win32cr::Foundation::RECT

  @[Extern]
  record AMVPDATAINFO,
    dwSize : UInt32,
    dwMicrosecondsPerField : UInt32,
    amvpDimInfo : Win32cr::Media::DirectShow::AMVPDIMINFO,
    dwPictAspectRatioX : UInt32,
    dwPictAspectRatioY : UInt32,
    bEnableDoubleClock : Win32cr::Foundation::BOOL,
    bEnableVACT : Win32cr::Foundation::BOOL,
    bDataIsInterlaced : Win32cr::Foundation::BOOL,
    lHalfLinesOdd : Int32,
    bFieldPolarityInverted : Win32cr::Foundation::BOOL,
    dwNumLinesInVREF : UInt32,
    lHalfLinesEven : Int32,
    dwReserved1 : UInt32

  @[Extern]
  record ALLOCATOR_PROPERTIES,
    cBuffers : Int32,
    cbBuffer : Int32,
    cbAlign : Int32,
    cbPrefix : Int32

  @[Extern]
  record PIN_INFO,
    pFilter : Void*,
    dir : Win32cr::Media::DirectShow::PIN_DIRECTION,
    achName : UInt16[128]

  @[Extern]
  record FILTER_INFO,
    achName : UInt16[128],
    pGraph : Void*

  @[Extern]
  record AM_SAMPLE2_PROPERTIES,
    cbData : UInt32,
    dwTypeSpecificFlags : UInt32,
    dwSampleFlags : UInt32,
    lActual : Int32,
    tStart : Int64,
    tStop : Int64,
    dwStreamId : UInt32,
    pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*,
    pbBuffer : UInt8*,
    cbBuffer : Int32

  @[Extern]
  record REGFILTER,
    clsid : LibC::GUID,
    name : Win32cr::Foundation::PWSTR

  @[Extern]
  record REGPINTYPES,
    clsMajorType : LibC::GUID*,
    clsMinorType : LibC::GUID*

  @[Extern]
  record REGFILTERPINS,
    strName : Win32cr::Foundation::PWSTR,
    bRendered : Win32cr::Foundation::BOOL,
    bOutput : Win32cr::Foundation::BOOL,
    bZero : Win32cr::Foundation::BOOL,
    bMany : Win32cr::Foundation::BOOL,
    clsConnectsToFilter : LibC::GUID*,
    strConnectsToPin : Win32cr::Foundation::PWSTR,
    nMediaTypes : UInt32,
    lpMediaType : Win32cr::Media::DirectShow::REGPINTYPES*

  @[Extern]
  record REGPINMEDIUM,
    clsMedium : LibC::GUID,
    dw1 : UInt32,
    dw2 : UInt32

  @[Extern]
  record REGFILTERPINS2,
    dwFlags : UInt32,
    cInstances : UInt32,
    nMediaTypes : UInt32,
    lpMediaType : Win32cr::Media::DirectShow::REGPINTYPES*,
    nMediums : UInt32,
    lpMedium : Win32cr::Media::DirectShow::REGPINMEDIUM*,
    clsPinCategory : LibC::GUID*

  @[Extern]
  record REGFILTER2,
    dwVersion : UInt32,
    dwMerit : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      anonymous1 : Anonymous1_e__Struct_,
      anonymous2 : Anonymous2_e__Struct_ do

      # Nested Type Anonymous1_e__Struct_
      @[Extern]
      record Anonymous1_e__Struct_,
        cPins : UInt32,
        rgPins : Win32cr::Media::DirectShow::REGFILTERPINS*


      # Nested Type Anonymous2_e__Struct_
      @[Extern]
      record Anonymous2_e__Struct_,
        cPins2 : UInt32,
        rgPins2 : Win32cr::Media::DirectShow::REGFILTERPINS2*

    end

  end

  @[Extern]
  record Quality,
    type__ : Win32cr::Media::DirectShow::QualityMessageType,
    proportion : Int32,
    late : Int64,
    time_stamp : Int64

  @[Extern]
  record COLORKEY,
    key_type : UInt32,
    palette_index : UInt32,
    low_color_value : UInt32,
    high_color_value : UInt32

  @[Extern]
  record AM_STREAM_INFO,
    tStart : Int64,
    tStop : Int64,
    dwStartCookie : UInt32,
    dwStopCookie : UInt32,
    dwFlags : UInt32

  @[Extern]
  record VIDEO_STREAM_CONFIG_CAPS,
    guid : LibC::GUID,
    video_standard : UInt32,
    input_size : Win32cr::Foundation::SIZE,
    min_cropping_size : Win32cr::Foundation::SIZE,
    max_cropping_size : Win32cr::Foundation::SIZE,
    crop_granularity_x : Int32,
    crop_granularity_y : Int32,
    crop_align_x : Int32,
    crop_align_y : Int32,
    min_output_size : Win32cr::Foundation::SIZE,
    max_output_size : Win32cr::Foundation::SIZE,
    output_granularity_x : Int32,
    output_granularity_y : Int32,
    stretch_taps_x : Int32,
    stretch_taps_y : Int32,
    shrink_taps_x : Int32,
    shrink_taps_y : Int32,
    min_frame_interval : Int64,
    max_frame_interval : Int64,
    min_bits_per_second : Int32,
    max_bits_per_second : Int32

  @[Extern]
  record AUDIO_STREAM_CONFIG_CAPS,
    guid : LibC::GUID,
    minimum_channels : UInt32,
    maximum_channels : UInt32,
    channels_granularity : UInt32,
    minimum_bits_per_sample : UInt32,
    maximum_bits_per_sample : UInt32,
    bits_per_sample_granularity : UInt32,
    minimum_sample_frequency : UInt32,
    maximum_sample_frequency : UInt32,
    sample_frequency_granularity : UInt32

  @[Extern]
  record DVINFO,
    dwDVAAuxSrc : UInt32,
    dwDVAAuxCtl : UInt32,
    dwDVAAuxSrc1 : UInt32,
    dwDVAAuxCtl1 : UInt32,
    dwDVVAuxSrc : UInt32,
    dwDVVAuxCtl : UInt32,
    dwDVReserved : UInt32[2]

  @[Extern]
  record STREAM_ID_MAP,
    stream_id : UInt32,
    dwMediaSampleContent : UInt32,
    ulSubstreamFilterValue : UInt32,
    iDataOffset : Int32

  @[Extern]
  record AMCOPPSignature,
    signature : UInt8[256]

  @[Extern]
  record AMCOPPCommand,
    macKDI : LibC::GUID,
    guidCommandID : LibC::GUID,
    dwSequence : UInt32,
    cbSizeData : UInt32,
    command_data : UInt8[4056]

  @[Extern]
  record AMCOPPStatusInput,
    rApp : LibC::GUID,
    guidStatusRequestID : LibC::GUID,
    dwSequence : UInt32,
    cbSizeData : UInt32,
    status_data : UInt8[4056]

  @[Extern]
  record AMCOPPStatusOutput,
    macKDI : LibC::GUID,
    cbSizeData : UInt32,
    copp_status : UInt8[4076]

  @[Extern]
  record VMRPRESENTATIONINFO,
    dwFlags : UInt32,
    lpSurf : Void*,
    rtStart : Int64,
    rtEnd : Int64,
    szAspectRatio : Win32cr::Foundation::SIZE,
    rcSrc : Win32cr::Foundation::RECT,
    rcDst : Win32cr::Foundation::RECT,
    dwTypeSpecificFlags : UInt32,
    dwInterlaceFlags : UInt32

  @[Extern]
  record VMRALLOCATIONINFO,
    dwFlags : UInt32,
    lpHdr : Win32cr::Graphics::Gdi::BITMAPINFOHEADER*,
    lpPixFmt : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*,
    szAspectRatio : Win32cr::Foundation::SIZE,
    dwMinBuffers : UInt32,
    dwMaxBuffers : UInt32,
    dwInterlaceFlags : UInt32,
    szNativeSize : Win32cr::Foundation::SIZE

  @[Extern]
  record NORMALIZEDRECT,
    left : Float32,
    top : Float32,
    right : Float32,
    bottom : Float32

  @[Extern]
  record VMRGUID,
    pGUID : LibC::GUID*,
    guid : LibC::GUID

  @[Extern]
  record VMRMONITORINFO,
    guid : Win32cr::Media::DirectShow::VMRGUID,
    rcMonitor : Win32cr::Foundation::RECT,
    hMon : Win32cr::Graphics::Gdi::HMONITOR,
    dwFlags : UInt32,
    szDevice : UInt16[32],
    szDescription : UInt16[256],
    liDriverVersion : Win32cr::Foundation::LARGE_INTEGER,
    dwVendorId : UInt32,
    dwDeviceId : UInt32,
    dwSubSysId : UInt32,
    dwRevision : UInt32

  @[Extern]
  record VMRFrequency,
    dwNumerator : UInt32,
    dwDenominator : UInt32

  @[Extern]
  record VMRVideoDesc,
    dwSize : UInt32,
    dwSampleWidth : UInt32,
    dwSampleHeight : UInt32,
    single_field_per_sample : Win32cr::Foundation::BOOL,
    dwFourCC : UInt32,
    input_sample_freq : Win32cr::Media::DirectShow::VMRFrequency,
    output_frame_freq : Win32cr::Media::DirectShow::VMRFrequency

  @[Extern]
  record VMRDeinterlaceCaps,
    dwSize : UInt32,
    dwNumPreviousOutputFrames : UInt32,
    dwNumForwardRefSamples : UInt32,
    dwNumBackwardRefSamples : UInt32,
    deinterlace_technology : Win32cr::Media::DirectShow::VMRDeinterlaceTech

  @[Extern]
  record VMRALPHABITMAP,
    dwFlags : UInt32,
    hdc : Win32cr::Graphics::Gdi::HDC,
    pDDS : Void*,
    rSrc : Win32cr::Foundation::RECT,
    rDest : Win32cr::Media::DirectShow::NORMALIZEDRECT,
    fAlpha : Float32,
    clrSrcKey : UInt32

  @[Extern]
  record VMRVIDEOSTREAMINFO,
    pddsVideoSurface : Void*,
    dwWidth : UInt32,
    dwHeight : UInt32,
    dwStrmID : UInt32,
    fAlpha : Float32,
    ddClrKey : Win32cr::Graphics::DirectDraw::DDCOLORKEY,
    rNormal : Win32cr::Media::DirectShow::NORMALIZEDRECT

  @[Extern]
  record DVD_ATR,
    ulCAT : UInt32,
    pbATRI : UInt8[768]

  @[Extern]
  record DVD_TIMECODE,
    _bitfield : UInt32

  @[Extern]
  record DVD_HMSF_TIMECODE,
    bHours : UInt8,
    bMinutes : UInt8,
    bSeconds : UInt8,
    bFrames : UInt8

  @[Extern]
  record DVD_PLAYBACK_LOCATION2,
    title_num : UInt32,
    chapter_num : UInt32,
    time_code : Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE,
    time_code_flags : UInt32

  @[Extern]
  record DVD_PLAYBACK_LOCATION,
    title_num : UInt32,
    chapter_num : UInt32,
    time_code : UInt32

  @[Extern]
  record DVD_AudioAttributes,
    app_mode : Win32cr::Media::DirectShow::DVD_AUDIO_APPMODE,
    app_mode_data : UInt8,
    audio_format : Win32cr::Media::DirectShow::DVD_AUDIO_FORMAT,
    language : UInt32,
    language_extension : Win32cr::Media::DirectShow::DVD_AUDIO_LANG_EXT,
    fHasMultichannelInfo : Win32cr::Foundation::BOOL,
    dwFrequency : UInt32,
    bQuantization : UInt8,
    bNumberOfChannels : UInt8,
    dwReserved : UInt32[2]

  @[Extern]
  record DVD_MUA_MixingInfo,
    fMixTo0 : Win32cr::Foundation::BOOL,
    fMixTo1 : Win32cr::Foundation::BOOL,
    fMix0InPhase : Win32cr::Foundation::BOOL,
    fMix1InPhase : Win32cr::Foundation::BOOL,
    dwSpeakerPosition : UInt32

  @[Extern]
  record DVD_MUA_Coeff,
    log2_alpha : Float64,
    log2_beta : Float64

  @[Extern]
  record DVD_MultichannelAudioAttributes,
    info : Win32cr::Media::DirectShow::DVD_MUA_MixingInfo[8],
    coeff : Win32cr::Media::DirectShow::DVD_MUA_Coeff[8]

  @[Extern]
  record DVD_KaraokeAttributes,
    bVersion : UInt8,
    fMasterOfCeremoniesInGuideVocal1 : Win32cr::Foundation::BOOL,
    fDuet : Win32cr::Foundation::BOOL,
    channel_assignment : Win32cr::Media::DirectShow::DVD_KARAOKE_ASSIGNMENT,
    wChannelContents : UInt16[8]

  @[Extern]
  record DVD_VideoAttributes,
    fPanscanPermitted : Win32cr::Foundation::BOOL,
    fLetterboxPermitted : Win32cr::Foundation::BOOL,
    ulAspectX : UInt32,
    ulAspectY : UInt32,
    ulFrameRate : UInt32,
    ulFrameHeight : UInt32,
    compression : Win32cr::Media::DirectShow::DVD_VIDEO_COMPRESSION,
    fLine21Field1InGOP : Win32cr::Foundation::BOOL,
    fLine21Field2InGOP : Win32cr::Foundation::BOOL,
    ulSourceResolutionX : UInt32,
    ulSourceResolutionY : UInt32,
    fIsSourceLetterboxed : Win32cr::Foundation::BOOL,
    fIsFilmMode : Win32cr::Foundation::BOOL

  @[Extern]
  record DVD_SubpictureAttributes,
    type__ : Win32cr::Media::DirectShow::DVD_SUBPICTURE_TYPE,
    coding_mode : Win32cr::Media::DirectShow::DVD_SUBPICTURE_CODING,
    language : UInt32,
    language_extension : Win32cr::Media::DirectShow::DVD_SUBPICTURE_LANG_EXT

  @[Extern]
  record DVD_TitleAttributes,
    anonymous : Anonymous_e__Union_,
    video_attributes : Win32cr::Media::DirectShow::DVD_VideoAttributes,
    ulNumberOfAudioStreams : UInt32,
    audio_attributes : Win32cr::Media::DirectShow::DVD_AudioAttributes[8],
    multichannel_audio_attributes : Win32cr::Media::DirectShow::DVD_MultichannelAudioAttributes[8],
    ulNumberOfSubpictureStreams : UInt32,
    subpicture_attributes : Win32cr::Media::DirectShow::DVD_SubpictureAttributes[32] do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      app_mode : Win32cr::Media::DirectShow::DVD_TITLE_APPMODE,
      title_length : Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE

  end

  @[Extern]
  record DVD_MenuAttributes,
    fCompatibleRegion : Win32cr::Foundation::BOOL[8],
    video_attributes : Win32cr::Media::DirectShow::DVD_VideoAttributes,
    fAudioPresent : Win32cr::Foundation::BOOL,
    audio_attributes : Win32cr::Media::DirectShow::DVD_AudioAttributes,
    fSubpicturePresent : Win32cr::Foundation::BOOL,
    subpicture_attributes : Win32cr::Media::DirectShow::DVD_SubpictureAttributes

  @[Extern]
  record DVD_DECODER_CAPS,
    dwSize : UInt32,
    dwAudioCaps : UInt32,
    dFwdMaxRateVideo : Float64,
    dFwdMaxRateAudio : Float64,
    dFwdMaxRateSP : Float64,
    dBwdMaxRateVideo : Float64,
    dBwdMaxRateAudio : Float64,
    dBwdMaxRateSP : Float64,
    dwRes1 : UInt32,
    dwRes2 : UInt32,
    dwRes3 : UInt32,
    dwRes4 : UInt32

  @[Extern]
  record AM_DVD_RENDERSTATUS,
    hrVPEStatus : Win32cr::Foundation::HRESULT,
    bDvdVolInvalid : Win32cr::Foundation::BOOL,
    bDvdVolUnknown : Win32cr::Foundation::BOOL,
    bNoLine21In : Win32cr::Foundation::BOOL,
    bNoLine21Out : Win32cr::Foundation::BOOL,
    iNumStreams : Int32,
    iNumStreamsFailed : Int32,
    dwFailedStreamsFlag : UInt32

  @[Extern]
  record BDA_TEMPLATE_CONNECTION,
    from_node_type : UInt32,
    from_node_pin_type : UInt32,
    to_node_type : UInt32,
    to_node_pin_type : UInt32

  @[Extern]
  record BDA_TEMPLATE_PIN_JOINT,
    uliTemplateConnection : UInt32,
    ulcInstancesMax : UInt32

  @[Extern]
  record KS_BDA_FRAME_INFO,
    extended_header_size : UInt32,
    dwFrameFlags : UInt32,
    ulEvent : UInt32,
    ulChannelNumber : UInt32,
    ulSubchannelNumber : UInt32,
    ulReason : UInt32

  @[Extern]
  record BDA_ETHERNET_ADDRESS,
    rgbAddress : UInt8[6]

  @[Extern]
  record BDA_ETHERNET_ADDRESS_LIST,
    ulcAddresses : UInt32,
    rgAddressl : Win32cr::Media::DirectShow::BDA_ETHERNET_ADDRESS*

  @[Extern]
  record BDA_IPv4_ADDRESS,
    rgbAddress : UInt8[4]

  @[Extern]
  record BDA_IPv4_ADDRESS_LIST,
    ulcAddresses : UInt32,
    rgAddressl : Win32cr::Media::DirectShow::BDA_IPv4_ADDRESS*

  @[Extern]
  record BDA_IPv6_ADDRESS,
    rgbAddress : UInt8[6]

  @[Extern]
  record BDA_IPv6_ADDRESS_LIST,
    ulcAddresses : UInt32,
    rgAddressl : Win32cr::Media::DirectShow::BDA_IPv6_ADDRESS*

  @[Extern]
  record BDANODE_DESCRIPTOR,
    ulBdaNodeType : UInt32,
    guidFunction : LibC::GUID,
    guidName : LibC::GUID

  @[Extern]
  record BDA_TABLE_SECTION,
    ulPrimarySectionId : UInt32,
    ulSecondarySectionId : UInt32,
    ulcbSectionLength : UInt32,
    argbSectionData : UInt32*

  @[Extern]
  record BDA_DISEQC_SEND,
    ulRequestId : UInt32,
    ulPacketLength : UInt32,
    argbPacketData : UInt8[8]

  @[Extern]
  record BDA_DISEQC_RESPONSE,
    ulRequestId : UInt32,
    ulPacketLength : UInt32,
    argbPacketData : UInt8[8]

  @[Extern]
  record PID_MAP,
    ulPID : UInt32,
    media_sample_content : Win32cr::Media::DirectShow::MEDIA_SAMPLE_CONTENT

  @[Extern]
  record BDA_PID_MAP,
    media_sample_content : Win32cr::Media::DirectShow::MEDIA_SAMPLE_CONTENT,
    ulcPIDs : UInt32,
    aulPIDs : UInt32*

  @[Extern]
  record BDA_PID_UNMAP,
    ulcPIDs : UInt32,
    aulPIDs : UInt32*

  @[Extern]
  record BDA_CA_MODULE_UI,
    ulFormat : UInt32,
    ulbcDesc : UInt32,
    ulDesc : UInt32*

  @[Extern]
  record BDA_PROGRAM_PID_LIST,
    ulProgramNumber : UInt32,
    ulcPIDs : UInt32,
    ulPID : UInt32*

  @[Extern]
  record BDA_DRM_DRMSTATUS,
    lResult : Int32,
    dr_muuid : LibC::GUID,
    ulDrmUuidListStringSize : UInt32,
    argbDrmUuidListString : LibC::GUID*

  @[Extern]
  record BDA_WMDRM_STATUS,
    lResult : Int32,
    ulMaxCaptureTokenSize : UInt32,
    uMaxStreamingPid : UInt32,
    ulMaxLicense : UInt32,
    ulMinSecurityLevel : UInt32,
    ulRevInfoSequenceNumber : UInt32,
    ulRevInfoIssuedTime : UInt64,
    ulRevListVersion : UInt32,
    ulRevInfoTTL : UInt32,
    ulState : UInt32

  @[Extern]
  record BDA_WMDRM_KEYINFOLIST,
    lResult : Int32,
    ulKeyuuidBufferLen : UInt32,
    argKeyuuidBuffer : LibC::GUID*

  @[Extern]
  record BDA_BUFFER,
    lResult : Int32,
    ulBufferSize : UInt32,
    argbBuffer : UInt8*

  @[Extern]
  record BDA_WMDRM_RENEWLICENSE,
    lResult : Int32,
    ulDescrambleStatus : UInt32,
    ulXmrLicenseOutputLength : UInt32,
    argbXmrLicenceOutputBuffer : UInt8*

  @[Extern]
  record BDA_WMDRMTUNER_PIDPROTECTION,
    lResult : Int32,
    uuidKeyID : LibC::GUID

  @[Extern]
  record BDA_WMDRMTUNER_PURCHASEENTITLEMENT,
    lResult : Int32,
    ulDescrambleStatus : UInt32,
    ulCaptureTokenLength : UInt32,
    argbCaptureTokenBuffer : UInt8*

  @[Extern]
  record BDA_TUNER_TUNERSTATE,
    lResult : Int32,
    ulTuneLength : UInt32,
    argbTuneData : UInt8*

  @[Extern]
  record BDA_TUNER_DIAGNOSTICS,
    lResult : Int32,
    ulSignalLevel : UInt32,
    ulSignalLevelQuality : UInt32,
    ulSignalNoiseRatio : UInt32

  @[Extern]
  record BDA_STRING,
    lResult : Int32,
    ulStringSize : UInt32,
    argbString : UInt8*

  @[Extern]
  record BDA_SCAN_CAPABILTIES,
    lResult : Int32,
    ul64AnalogStandardsSupported : UInt64

  @[Extern]
  record BDA_SCAN_STATE,
    lResult : Int32,
    ulSignalLock : UInt32,
    ulSecondsLeft : UInt32,
    ulCurrentFrequency : UInt32

  @[Extern]
  record BDA_SCAN_START,
    lResult : Int32,
    lower_frequency : UInt32,
    higer_frequency : UInt32

  @[Extern]
  record BDA_GDDS_DATATYPE,
    lResult : Int32,
    uuidDataType : LibC::GUID

  @[Extern]
  record BDA_GDDS_DATA,
    lResult : Int32,
    ulDataLength : UInt32,
    ulPercentageProgress : UInt32,
    argbData : UInt8*

  @[Extern]
  record BDA_USERACTIVITY_INTERVAL,
    lResult : Int32,
    ulActivityInterval : UInt32

  @[Extern]
  record BDA_CAS_CHECK_ENTITLEMENTTOKEN,
    lResult : Int32,
    ulDescrambleStatus : UInt32

  @[Extern]
  record BDA_CAS_CLOSE_MMIDIALOG,
    lResult : Int32,
    session_result : UInt32

  @[Extern]
  record BDA_CAS_REQUESTTUNERDATA,
    ucRequestPriority : UInt8,
    ucRequestReason : UInt8,
    ucRequestConsequences : UInt8,
    ulEstimatedTime : UInt32

  @[Extern]
  record BDA_CAS_OPENMMIDATA,
    ulDialogNumber : UInt32,
    ulDialogRequest : UInt32,
    uuidDialogType : LibC::GUID,
    usDialogDataLength : UInt16,
    argbDialogData : UInt8*

  @[Extern]
  record BDA_CAS_CLOSEMMIDATA,
    ulDialogNumber : UInt32

  @[Extern]
  record BDA_ISDBCAS_REQUESTHEADER,
    bInstruction : UInt8,
    bReserved : UInt8[3],
    ulDataLength : UInt32,
    argbIsdbCommand : UInt8*

  @[Extern]
  record BDA_ISDBCAS_RESPONSEDATA,
    lResult : Int32,
    ulRequestID : UInt32,
    ulIsdbStatus : UInt32,
    ulIsdbDataSize : UInt32,
    argbIsdbCommandData : UInt8*

  @[Extern]
  record BDA_ISDBCAS_EMG_REQ,
    bCLA : UInt8,
    bINS : UInt8,
    bP1 : UInt8,
    bP2 : UInt8,
    bLC : UInt8,
    bCardId : UInt8[6],
    bProtocol : UInt8,
    bCABroadcasterGroupId : UInt8,
    bMessageControl : UInt8,
    bMessageCode : UInt8*

  @[Extern]
  record BDA_MUX_PIDLISTITEM,
    usPIDNumber : UInt16,
    usProgramNumber : UInt16,
    ePIDType : Win32cr::Media::DirectShow::MUX_PID_TYPE

  @[Extern]
  record BDA_TS_SELECTORINFO,
    bTSInfolength : UInt8,
    bReserved : UInt8[2],
    guidNetworkType : LibC::GUID,
    bTSIDCount : UInt8,
    usTSID : UInt16*

  @[Extern]
  record BDA_TS_SELECTORINFO_ISDBS_EXT,
    bTMCC : UInt8[48]

  @[Extern]
  record BDA_DVBT2_L1_SIGNALLING_DATA,
    l1_pre_type : UInt8,
    l1_pre_bwt_s1_s2 : UInt8,
    l1_pre_repetition_guard_papr : UInt8,
    l1_pre_mod_cod_fec : UInt8,
    l1_pre_postsize_info_pilot : UInt8[5],
    l1_pre_tx_id_avail : UInt8,
    l1_pre_cell_id : UInt8[2],
    l1_pre_network_id : UInt8[2],
    l1_pre_t2_system_id : UInt8[2],
    l1_pre_num_t2_frames : UInt8,
    l1_pre_num_data_regenflag_l1_postext : UInt8[2],
    l1_pre_numrf_currentrf_reserved : UInt8[2],
    l1_pre_crc32 : UInt8[4],
    l1_post_data : UInt8*

  @[Extern]
  record BDA_RATING_PINRESET,
    bPinLength : UInt8,
    argbNewPin : UInt8*

  @[Extern]
  record MPEG2_TRANSPORT_STRIDE,
    dwOffset : UInt32,
    dwPacketLength : UInt32,
    dwStride : UInt32

  @[Extern]
  record BDA_SIGNAL_TIMEOUTS,
    ulCarrierTimeoutMs : UInt32,
    ulScanningTimeoutMs : UInt32,
    ulTuningTimeoutMs : UInt32

  @[Extern]
  record EALocationCodeType,
    location_code_scheme : Win32cr::Media::DirectShow::LocationCodeSchemeType,
    state_code : UInt8,
    county_subdivision : UInt8,
    county_code : UInt16

  @[Extern]
  record SmartCardApplication,
    application_type : Win32cr::Media::DirectShow::ApplicationTypeType,
    application_version : UInt16,
    pbstrApplicationName : Win32cr::Foundation::BSTR,
    pbstrApplicationURL : Win32cr::Foundation::BSTR

  @[Extern]
  record AMVAUncompBufferInfo,
    dwMinNumSurfaces : UInt32,
    dwMaxNumSurfaces : UInt32,
    ddUncompPixelFormat : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT

  @[Extern]
  record AMVAUncompDataInfo,
    dwUncompWidth : UInt32,
    dwUncompHeight : UInt32,
    ddUncompPixelFormat : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT

  @[Extern]
  record AMVAInternalMemInfo,
    dwScratchMemAlloc : UInt32

  @[Extern]
  record AMVACompBufferInfo,
    dwNumCompBuffers : UInt32,
    dwWidthToCreate : UInt32,
    dwHeightToCreate : UInt32,
    dwBytesToAllocate : UInt32,
    ddCompCaps : Win32cr::Graphics::DirectDraw::DDSCAPS2,
    ddPixelFormat : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT

  @[Extern]
  record AMVABeginFrameInfo,
    dwDestSurfaceIndex : UInt32,
    pInputData : Void*,
    dwSizeInputData : UInt32,
    pOutputData : Void*,
    dwSizeOutputData : UInt32

  @[Extern]
  record AMVAEndFrameInfo,
    dwSizeMiscData : UInt32,
    pMiscData : Void*

  @[Extern]
  record AMVABUFFERINFO,
    dwTypeIndex : UInt32,
    dwBufferIndex : UInt32,
    dwDataOffset : UInt32,
    dwDataSize : UInt32

  @[Extern]
  record AM_WST_PAGE,
    dwPageNr : UInt32,
    dwSubPageNr : UInt32,
    pucPageData : UInt8*

  @[Extern]
  record TRUECOLORINFO,
    dwBitMasks : UInt32[3],
    bmiColors : Win32cr::Graphics::Gdi::RGBQUAD[256]

  @[Extern]
  record VIDEOINFO,
    rcSource : Win32cr::Foundation::RECT,
    rcTarget : Win32cr::Foundation::RECT,
    dwBitRate : UInt32,
    dwBitErrorRate : UInt32,
    avg_time_per_frame : Int64,
    bmiHeader : Win32cr::Graphics::Gdi::BITMAPINFOHEADER,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      bmiColors : Win32cr::Graphics::Gdi::RGBQUAD[256],
      dwBitMasks : UInt32[3],
      true_color_info : Win32cr::Media::DirectShow::TRUECOLORINFO

  end

  @[Extern]
  record ANALOGVIDEOINFO,
    rcSource : Win32cr::Foundation::RECT,
    rcTarget : Win32cr::Foundation::RECT,
    dwActiveWidth : UInt32,
    dwActiveHeight : UInt32,
    avg_time_per_frame : Int64

  @[Extern]
  record AM_FRAMESTEP_STEP,
    dwFramesToStep : UInt32

  @[Extern]
  record AM_MPEGSTREAMTYPE,
    dwStreamId : UInt32,
    dwReserved : UInt32,
    mt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE,
    bFormat : UInt8*

  @[Extern]
  record AM_MPEGSYSTEMTYPE,
    dwBitRate : UInt32,
    cStreams : UInt32,
    streams : Win32cr::Media::DirectShow::AM_MPEGSTREAMTYPE*

  @[Extern]
  record VMR9PresentationInfo,
    dwFlags : UInt32,
    lpSurf : Void*,
    rtStart : Int64,
    rtEnd : Int64,
    szAspectRatio : Win32cr::Foundation::SIZE,
    rcSrc : Win32cr::Foundation::RECT,
    rcDst : Win32cr::Foundation::RECT,
    dwReserved1 : UInt32,
    dwReserved2 : UInt32

  @[Extern]
  record VMR9AllocationInfo,
    dwFlags : UInt32,
    dwWidth : UInt32,
    dwHeight : UInt32,
    format : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    pool : Win32cr::Graphics::Direct3D9::D3DPOOL,
    min_buffers : UInt32,
    szAspectRatio : Win32cr::Foundation::SIZE,
    szNativeSize : Win32cr::Foundation::SIZE

  @[Extern]
  record VMR9NormalizedRect,
    left : Float32,
    top : Float32,
    right : Float32,
    bottom : Float32

  @[Extern]
  record VMR9ProcAmpControl,
    dwSize : UInt32,
    dwFlags : UInt32,
    brightness : Float32,
    contrast : Float32,
    hue : Float32,
    saturation : Float32

  @[Extern]
  record VMR9ProcAmpControlRange,
    dwSize : UInt32,
    dwProperty : Win32cr::Media::DirectShow::VMR9ProcAmpControlFlags,
    min_value : Float32,
    max_value : Float32,
    default_value : Float32,
    step_size : Float32

  @[Extern]
  record VMR9AlphaBitmap,
    dwFlags : UInt32,
    hdc : Win32cr::Graphics::Gdi::HDC,
    pDDS : Void*,
    rSrc : Win32cr::Foundation::RECT,
    rDest : Win32cr::Media::DirectShow::VMR9NormalizedRect,
    fAlpha : Float32,
    clrSrcKey : UInt32,
    dwFilterMode : UInt32

  @[Extern]
  record VMR9MonitorInfo,
    uDevID : UInt32,
    rcMonitor : Win32cr::Foundation::RECT,
    hMon : Win32cr::Graphics::Gdi::HMONITOR,
    dwFlags : UInt32,
    szDevice : UInt16[32],
    szDescription : UInt16[512],
    liDriverVersion : Win32cr::Foundation::LARGE_INTEGER,
    dwVendorId : UInt32,
    dwDeviceId : UInt32,
    dwSubSysId : UInt32,
    dwRevision : UInt32

  @[Extern]
  record VMR9Frequency,
    dwNumerator : UInt32,
    dwDenominator : UInt32

  @[Extern]
  record VMR9VideoDesc,
    dwSize : UInt32,
    dwSampleWidth : UInt32,
    dwSampleHeight : UInt32,
    sample_format : Win32cr::Media::DirectShow::VMR9_SampleFormat,
    dwFourCC : UInt32,
    input_sample_freq : Win32cr::Media::DirectShow::VMR9Frequency,
    output_frame_freq : Win32cr::Media::DirectShow::VMR9Frequency

  @[Extern]
  record VMR9DeinterlaceCaps,
    dwSize : UInt32,
    dwNumPreviousOutputFrames : UInt32,
    dwNumForwardRefSamples : UInt32,
    dwNumBackwardRefSamples : UInt32,
    deinterlace_technology : Win32cr::Media::DirectShow::VMR9DeinterlaceTech

  @[Extern]
  record VMR9VideoStreamInfo,
    pddsVideoSurface : Void*,
    dwWidth : UInt32,
    dwHeight : UInt32,
    dwStrmID : UInt32,
    fAlpha : Float32,
    rNormal : Win32cr::Media::DirectShow::VMR9NormalizedRect,
    rtStart : Int64,
    rtEnd : Int64,
    sample_format : Win32cr::Media::DirectShow::VMR9_SampleFormat

  @[Extern]
  record RIFFCHUNK,
    fcc : UInt32,
    cb : UInt32

  @[Extern]
  record RIFFLIST,
    fcc : UInt32,
    cb : UInt32,
    fccListType : UInt32

  @[Extern]
  record AVIMAINHEADER,
    fcc : UInt32,
    cb : UInt32,
    dwMicroSecPerFrame : UInt32,
    dwMaxBytesPerSec : UInt32,
    dwPaddingGranularity : UInt32,
    dwFlags : UInt32,
    dwTotalFrames : UInt32,
    dwInitialFrames : UInt32,
    dwStreams : UInt32,
    dwSuggestedBufferSize : UInt32,
    dwWidth : UInt32,
    dwHeight : UInt32,
    dwReserved : UInt32[4]

  @[Extern]
  record AVIEXTHEADER,
    fcc : UInt32,
    cb : UInt32,
    dwGrandFrames : UInt32,
    dwFuture : UInt32[61]

  @[Extern]
  record AVISTREAMHEADER,
    fcc : UInt32,
    cb : UInt32,
    fccType : UInt32,
    fccHandler : UInt32,
    dwFlags : UInt32,
    wPriority : UInt16,
    wLanguage : UInt16,
    dwInitialFrames : UInt32,
    dwScale : UInt32,
    dwRate : UInt32,
    dwStart : UInt32,
    dwLength : UInt32,
    dwSuggestedBufferSize : UInt32,
    dwQuality : UInt32,
    dwSampleSize : UInt32,
    rcFrame : Rcframe_e__struct_ do

    # Nested Type Rcframe_e__struct_
    @[Extern]
    record Rcframe_e__struct_,
      left : Int16,
      top : Int16,
      right : Int16,
      bottom : Int16

  end

  @[Extern]
  record AVIOLDINDEX,
    fcc : UInt32,
    cb : UInt32,
    aIndex : Avioldindex_entry_* do

    # Nested Type Avioldindex_entry_
    @[Extern]
    record Avioldindex_entry_,
      dwChunkId : UInt32,
      dwFlags : UInt32,
      dwOffset : UInt32,
      dwSize : UInt32

  end

  @[Extern]
  record TIMECODEDATA,
    time : Win32cr::Media::TIMECODE,
    dwSMPTEflags : UInt32,
    dwUser : UInt32

  @[Extern]
  record AVIMETAINDEX,
    fcc : UInt32,
    cb : UInt32,
    wLongsPerEntry : UInt16,
    bIndexSubType : UInt8,
    bIndexType : UInt8,
    nEntriesInUse : UInt32,
    dwChunkId : UInt32,
    dwReserved : UInt32[3],
    adwIndex : UInt32*

  @[Extern]
  record AVISUPERINDEX,
    fcc : UInt32,
    cb : UInt32,
    wLongsPerEntry : UInt16,
    bIndexSubType : UInt8,
    bIndexType : UInt8,
    nEntriesInUse : UInt32,
    dwChunkId : UInt32,
    dwReserved : UInt32[3],
    aIndex : Avisuperindex_entry_[1022] do

    # Nested Type Avisuperindex_entry_
    @[Extern]
    record Avisuperindex_entry_,
      qwOffset : UInt64,
      dwSize : UInt32,
      dwDuration : UInt32

  end

  @[Extern]
  record AVISTDINDEX_ENTRY,
    dwOffset : UInt32,
    dwSize : UInt32

  @[Extern]
  record AVISTDINDEX,
    fcc : UInt32,
    cb : UInt32,
    wLongsPerEntry : UInt16,
    bIndexSubType : UInt8,
    bIndexType : UInt8,
    nEntriesInUse : UInt32,
    dwChunkId : UInt32,
    qwBaseOffset : UInt64,
    dwReserved_3 : UInt32,
    aIndex : Win32cr::Media::DirectShow::AVISTDINDEX_ENTRY[2044]

  @[Extern]
  record AVITIMEDINDEX_ENTRY,
    dwOffset : UInt32,
    dwSize : UInt32,
    dwDuration : UInt32

  @[Extern]
  record Avitimedindex_,
    fcc : UInt32,
    cb : UInt32,
    wLongsPerEntry : UInt16,
    bIndexSubType : UInt8,
    bIndexType : UInt8,
    nEntriesInUse : UInt32,
    dwChunkId : UInt32,
    qwBaseOffset : UInt64,
    dwReserved_3 : UInt32,
    aIndex : Win32cr::Media::DirectShow::AVITIMEDINDEX_ENTRY[1362],
    adwTrailingFill : UInt32[2734]

  @[Extern]
  record AVITIMECODEINDEX,
    fcc : UInt32,
    cb : UInt32,
    wLongsPerEntry : UInt16,
    bIndexSubType : UInt8,
    bIndexType : UInt8,
    nEntriesInUse : UInt32,
    dwChunkId : UInt32,
    dwReserved : UInt32[3],
    aIndex : Win32cr::Media::DirectShow::TIMECODEDATA[1022]

  @[Extern]
  record AVITCDLINDEX_ENTRY,
    dwTick : UInt32,
    time : Win32cr::Media::TIMECODE,
    dwSMPTEflags : UInt32,
    dwUser : UInt32,
    szReelId : Int8[12]

  @[Extern]
  record Avitcdlindex_,
    fcc : UInt32,
    cb : UInt32,
    wLongsPerEntry : UInt16,
    bIndexSubType : UInt8,
    bIndexType : UInt8,
    nEntriesInUse : UInt32,
    dwChunkId : UInt32,
    dwReserved : UInt32[3],
    aIndex : Win32cr::Media::DirectShow::AVITCDLINDEX_ENTRY[584],
    adwTrailingFill : UInt32[3512]

  @[Extern]
  record AVIFIELDINDEX,
    fcc : UInt32,
    cb : UInt32,
    wLongsPerEntry : UInt16,
    bIndexSubType : UInt8,
    bIndexType : UInt8,
    nEntriesInUse : UInt32,
    dwChunkId : UInt32,
    qwBaseOffset : UInt64,
    dwReserved3 : UInt32,
    aIndex : Avifieldindex_entry_* do

    # Nested Type Avifieldindex_entry_
    @[Extern]
    record Avifieldindex_entry_,
      dwOffset : UInt32,
      dwSize : UInt32,
      dwOffsetField2 : UInt32

  end

  @[Extern]
  record MainAVIHeader,
    dwMicroSecPerFrame : UInt32,
    dwMaxBytesPerSec : UInt32,
    dwPaddingGranularity : UInt32,
    dwFlags : UInt32,
    dwTotalFrames : UInt32,
    dwInitialFrames : UInt32,
    dwStreams : UInt32,
    dwSuggestedBufferSize : UInt32,
    dwWidth : UInt32,
    dwHeight : UInt32,
    dwReserved : UInt32[4]

  @[Extern]
  record AVIStreamHeader,
    fccType : UInt32,
    fccHandler : UInt32,
    dwFlags : UInt32,
    wPriority : UInt16,
    wLanguage : UInt16,
    dwInitialFrames : UInt32,
    dwScale : UInt32,
    dwRate : UInt32,
    dwStart : UInt32,
    dwLength : UInt32,
    dwSuggestedBufferSize : UInt32,
    dwQuality : UInt32,
    dwSampleSize : UInt32,
    rcFrame : Win32cr::Foundation::RECT

  @[Extern]
  record AVIINDEXENTRY,
    ckid : UInt32,
    dwFlags : UInt32,
    dwChunkOffset : UInt32,
    dwChunkLength : UInt32

  @[Extern]
  record AVIPALCHANGE,
    bFirstEntry : UInt8,
    bNumEntries : UInt8,
    wFlags : UInt16,
    peNew : Win32cr::Graphics::Gdi::PALETTEENTRY*

  @[Extern]
  record AM_AC3_ERROR_CONCEALMENT,
    fRepeatPreviousBlock : Win32cr::Foundation::BOOL,
    fErrorInCurrentBlock : Win32cr::Foundation::BOOL

  @[Extern]
  record AM_AC3_ALTERNATE_AUDIO,
    fStereo : Win32cr::Foundation::BOOL,
    dual_mode : UInt32

  @[Extern]
  record AM_AC3_DOWNMIX,
    fDownMix : Win32cr::Foundation::BOOL,
    fDolbySurround : Win32cr::Foundation::BOOL

  @[Extern]
  record AM_AC3_BIT_STREAM_MODE,
    bit_stream_mode : Int32

  @[Extern]
  record AM_AC3_DIALOGUE_LEVEL,
    dialogue_level : UInt32

  @[Extern]
  record AM_AC3_ROOM_TYPE,
    fLargeRoom : Win32cr::Foundation::BOOL

  @[Extern]
  record AM_DVD_YUV,
    reserved : UInt8,
    y : UInt8,
    u : UInt8,
    v : UInt8

  @[Extern]
  record AM_PROPERTY_SPPAL,
    sppal : Win32cr::Media::DirectShow::AM_DVD_YUV[16]

  @[Extern]
  record AM_COLCON,
    _bitfield1 : UInt8,
    _bitfield2 : UInt8,
    _bitfield3 : UInt8,
    _bitfield4 : UInt8

  @[Extern]
  record AM_PROPERTY_SPHLI,
    hliss : UInt16,
    reserved : UInt16,
    start_ptm : UInt32,
    end_ptm : UInt32,
    start_x : UInt16,
    start_y : UInt16,
    stop_x : UInt16,
    stop_y : UInt16,
    col_con : Win32cr::Media::DirectShow::AM_COLCON

  @[Extern]
  record AM_DVDCOPY_CHLGKEY,
    chlg_key : UInt8[10],
    reserved : UInt8[2]

  @[Extern]
  record AM_DVDCOPY_BUSKEY,
    bus_key : UInt8[5],
    reserved : UInt8*

  @[Extern]
  record AM_DVDCOPY_DISCKEY,
    disc_key : UInt8[2048]

  @[Extern]
  record AM_DVDCOPY_TITLEKEY,
    key_flags : UInt32,
    reserved1 : UInt32[2],
    title_key : UInt8[6],
    reserved2 : UInt8[2]

  @[Extern]
  record AM_COPY_MACROVISION,
    macrovision_level : UInt32

  @[Extern]
  record AM_DVDCOPY_SET_COPY_STATE,
    dvd_copy_state : UInt32

  @[Extern]
  record DVD_REGION,
    copy_system : UInt8,
    region_data : UInt8,
    system_region : UInt8,
    reset_count : UInt8

  @[Extern]
  record AM_DvdKaraokeData,
    dwDownmix : UInt32,
    dwSpeakerAssignment : UInt32

  @[Extern]
  record AM_SimpleRateChange,
    start_time : Int64,
    rate : Int32

  @[Extern]
  record AM_QueryRate,
    lMaxForwardFullFrame : Int32,
    lMaxReverseFullFrame : Int32

  @[Extern]
  record AM_ExactRateChange,
    output_zero_time : Int64,
    rate : Int32

  @[Extern]
  record AM_DVD_ChangeRate,
    start_in_time : Int64,
    start_out_time : Int64,
    rate : Int32

  @[Extern]
  record MP_PARAMINFO,
    mpType : Win32cr::Media::DirectShow::MP_TYPE,
    mopCaps : UInt32,
    mpdMinValue : Float32,
    mpdMaxValue : Float32,
    mpdNeutralValue : Float32,
    szUnitText : UInt16[32],
    szLabel : UInt16[32]

  @[Extern]
  record MP_ENVELOPE_SEGMENT,
    rtStart : Int64,
    rtEnd : Int64,
    valStart : Float32,
    valEnd : Float32,
    iCurve : Win32cr::Media::DirectShow::MP_CURVE_TYPE,
    flags : UInt32

  @[Extern]
  record VFW_FILTERLIST,
    cFilters : UInt32,
    aClsId : LibC::GUID*

  @[Extern]
  record DXVA2_VIDEOSAMPLE,
    start : Int64,
    end__ : Int64,
    sample_format : Win32cr::Media::MediaFoundation::DXVA2_ExtendedFormat,
    sample_flags : UInt32,
    src_resource : Void*,
    src_rect : Win32cr::Foundation::RECT,
    dst_rect : Win32cr::Foundation::RECT,
    pal : Win32cr::Media::MediaFoundation::DXVA2_AYUVSample8[16],
    planar_alpha : Win32cr::Media::MediaFoundation::DXVA2_Fixed32

  @[Extern]
  record DXVA2_VIDEOPROCESSBLT,
    target_frame : Int64,
    target_rect : Win32cr::Foundation::RECT,
    constriction_size : Win32cr::Foundation::SIZE,
    streaming_flags : UInt32,
    background_color : Win32cr::Media::MediaFoundation::DXVA2_AYUVSample16,
    dest_format : Win32cr::Media::MediaFoundation::DXVA2_ExtendedFormat,
    dest_flags : UInt32,
    proc_amp_values : Win32cr::Media::MediaFoundation::DXVA2_ProcAmpValues,
    alpha : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    noise_filter_luma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    noise_filter_chroma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    detail_filter_luma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    detail_filter_chroma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    pSrcSurfaces : Win32cr::Media::DirectShow::DXVA2_VIDEOSAMPLE*,
    num_src_surfaces : UInt32

  @[Extern]
  record DXVA2SW_CALLBACKS,
    size : UInt32,
    get_video_processor_render_target_count : Win32cr::Media::DirectShow::PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT,
    get_video_processor_render_targets : Win32cr::Media::DirectShow::PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS,
    get_video_processor_caps : Win32cr::Media::DirectShow::PDXVA2SW_GETVIDEOPROCESSORCAPS,
    get_video_processor_sub_stream_format_count : Win32cr::Media::DirectShow::PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT,
    get_video_processor_sub_stream_formats : Win32cr::Media::DirectShow::PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS,
    get_proc_amp_range : Win32cr::Media::DirectShow::PDXVA2SW_GETPROCAMPRANGE,
    get_filter_property_range : Win32cr::Media::DirectShow::PDXVA2SW_GETFILTERPROPERTYRANGE,
    create_video_process_device : Win32cr::Media::DirectShow::PDXVA2SW_CREATEVIDEOPROCESSDEVICE,
    destroy_video_process_device : Win32cr::Media::DirectShow::PDXVA2SW_DESTROYVIDEOPROCESSDEVICE,
    video_process_begin_frame : Win32cr::Media::DirectShow::PDXVA2SW_VIDEOPROCESSBEGINFRAME,
    video_process_end_frame : Win32cr::Media::DirectShow::PDXVA2SW_VIDEOPROCESSENDFRAME,
    video_process_set_render_target : Win32cr::Media::DirectShow::PDXVA2SW_VIDEOPROCESSSETRENDERTARGET,
    video_process_blt : Win32cr::Media::DirectShow::PDXVA2SW_VIDEOPROCESSBLT

  @[Extern]
  record DXVA2Trace_DecodeDevCreatedData,
    wmiHeader : Win32cr::System::Diagnostics::Etw::EVENT_TRACE_HEADER,
    pObject : UInt64,
    pD3DDevice : UInt64,
    device_guid : LibC::GUID,
    width : UInt32,
    height : UInt32,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVA2Trace_DecodeDeviceData,
    wmiHeader : Win32cr::System::Diagnostics::Etw::EVENT_TRACE_HEADER,
    pObject : UInt64,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVA2Trace_DecodeDevBeginFrameData,
    wmiHeader : Win32cr::System::Diagnostics::Etw::EVENT_TRACE_HEADER,
    pObject : UInt64,
    pRenderTarget : UInt64,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVA2Trace_DecodeDevGetBufferData,
    wmiHeader : Win32cr::System::Diagnostics::Etw::EVENT_TRACE_HEADER,
    pObject : UInt64,
    buffer_type : UInt32,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVA2Trace_VideoProcessDevCreatedData,
    wmiHeader : Win32cr::System::Diagnostics::Etw::EVENT_TRACE_HEADER,
    pObject : UInt64,
    pD3DDevice : UInt64,
    device_guid : LibC::GUID,
    rt_four_cc : UInt32,
    width : UInt32,
    height : UInt32,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVA2Trace_VideoProcessDeviceData,
    wmiHeader : Win32cr::System::Diagnostics::Etw::EVENT_TRACE_HEADER,
    pObject : UInt64,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVA2TraceVideoProcessBltData,
    wmiHeader : Win32cr::System::Diagnostics::Etw::EVENT_TRACE_HEADER,
    pObject : UInt64,
    pRenderTarget : UInt64,
    target_frame_time : UInt64,
    target_rect : Win32cr::Foundation::RECT,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record WMDRMProtectionInfo,
    wszKID : UInt16[25],
    qwCounter : UInt64,
    qwIndex : UInt64,
    bOffset : UInt8

  @[Extern]
  record BadSampleInfo,
    hrReason : Win32cr::Foundation::HRESULT

  @[Extern]
  record STREAMBUFFER_ATTRIBUTE,
    pszName : Win32cr::Foundation::PWSTR,
    stream_buffer_attribute_type : Win32cr::Media::DirectShow::STREAMBUFFER_ATTR_DATATYPE,
    pbAttribute : UInt8*,
    cbLength : UInt16

  @[Extern]
  record SBE_PIN_DATA,
    cDataBytes : UInt64,
    cSamplesProcessed : UInt64,
    cDiscontinuities : UInt64,
    cSyncPoints : UInt64,
    cTimestamps : UInt64

  @[Extern]
  record SBE2_STREAM_DESC,
    version : UInt32,
    stream_id : UInt32,
    default : UInt32,
    reserved : UInt32

  @[Extern]
  record DVR_STREAM_DESC,
    version : UInt32,
    stream_id : UInt32,
    default : Win32cr::Foundation::BOOL,
    creation : Win32cr::Foundation::BOOL,
    reserved : UInt32,
    guidSubMediaType : LibC::GUID,
    guidFormatType : LibC::GUID,
    media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE

  @[Extern]
  record PID_BITS_MIDL,
    bits : UInt16

  @[Extern]
  record MPEG_HEADER_BITS_MIDL,
    bits : UInt16

  @[Extern]
  record MPEG_HEADER_VERSION_BITS_MIDL,
    bits : UInt8

  @[Extern]
  record TID_EXTENSION,
    wTidExt : UInt16,
    wCount : UInt16

  @[Extern]
  record SECTION,
    table_id : UInt8,
    header : Header_e__Union_,
    section_data : UInt8* do

    # Nested Type Header_e__Union_
    @[Extern(union: true)]
    record Header_e__Union_,
      s : Win32cr::Media::DirectShow::MPEG_HEADER_BITS_MIDL,
      w : UInt16

  end

  @[Extern]
  record LONG_SECTION,
    table_id : UInt8,
    header : Header_e__Union_,
    table_id_extension : UInt16,
    version : Version_e__Union_,
    section_number : UInt8,
    last_section_number : UInt8,
    remaining_data : UInt8* do

    # Nested Type Header_e__Union_
    @[Extern(union: true)]
    record Header_e__Union_,
      s : Win32cr::Media::DirectShow::MPEG_HEADER_BITS_MIDL,
      w : UInt16


    # Nested Type Version_e__Union_
    @[Extern(union: true)]
    record Version_e__Union_,
      s : Win32cr::Media::DirectShow::MPEG_HEADER_VERSION_BITS_MIDL,
      b : UInt8

  end

  @[Extern]
  record DSMCC_SECTION,
    table_id : UInt8,
    header : Header_e__Union_,
    table_id_extension : UInt16,
    version : Version_e__Union_,
    section_number : UInt8,
    last_section_number : UInt8,
    protocol_discriminator : UInt8,
    dsmcc_type : UInt8,
    message_id : UInt16,
    transaction_id : UInt32,
    reserved : UInt8,
    adaptation_length : UInt8,
    message_length : UInt16,
    remaining_data : UInt8* do

    # Nested Type Header_e__Union_
    @[Extern(union: true)]
    record Header_e__Union_,
      s : Win32cr::Media::DirectShow::MPEG_HEADER_BITS_MIDL,
      w : UInt16


    # Nested Type Version_e__Union_
    @[Extern(union: true)]
    record Version_e__Union_,
      s : Win32cr::Media::DirectShow::MPEG_HEADER_VERSION_BITS_MIDL,
      b : UInt8

  end

  @[Extern]
  record MPEG_RQST_PACKET,
    dwLength : UInt32,
    pSection : Win32cr::Media::DirectShow::SECTION*

  @[Extern]
  record MPEG_PACKET_LIST,
    wPacketCount : UInt16,
    packet_list : Win32cr::Media::DirectShow::MPEG_RQST_PACKET**

  @[Extern]
  record DSMCC_FILTER_OPTIONS,
    fSpecifyProtocol : Win32cr::Foundation::BOOL,
    protocol : UInt8,
    fSpecifyType : Win32cr::Foundation::BOOL,
    type__ : UInt8,
    fSpecifyMessageId : Win32cr::Foundation::BOOL,
    message_id : UInt16,
    fSpecifyTransactionId : Win32cr::Foundation::BOOL,
    fUseTrxIdMessageIdMask : Win32cr::Foundation::BOOL,
    transaction_id : UInt32,
    fSpecifyModuleVersion : Win32cr::Foundation::BOOL,
    module_version : UInt8,
    fSpecifyBlockNumber : Win32cr::Foundation::BOOL,
    block_number : UInt16,
    fGetModuleCall : Win32cr::Foundation::BOOL,
    number_of_blocks_in_module : UInt16

  @[Extern]
  record ATSC_FILTER_OPTIONS,
    fSpecifyEtmId : Win32cr::Foundation::BOOL,
    etm_id : UInt32

  @[Extern]
  record DVB_EIT_FILTER_OPTIONS,
    fSpecifySegment : Win32cr::Foundation::BOOL,
    bSegment : UInt8

  @[Extern]
  record MPEG2_FILTER,
    bVersionNumber : UInt8,
    wFilterSize : UInt16,
    fUseRawFilteringBits : Win32cr::Foundation::BOOL,
    filter : UInt8[16],
    mask : UInt8[16],
    fSpecifyTableIdExtension : Win32cr::Foundation::BOOL,
    table_id_extension : UInt16,
    fSpecifyVersion : Win32cr::Foundation::BOOL,
    version : UInt8,
    fSpecifySectionNumber : Win32cr::Foundation::BOOL,
    section_number : UInt8,
    fSpecifyCurrentNext : Win32cr::Foundation::BOOL,
    fNext : Win32cr::Foundation::BOOL,
    fSpecifyDsmccOptions : Win32cr::Foundation::BOOL,
    dsmcc : Win32cr::Media::DirectShow::DSMCC_FILTER_OPTIONS,
    fSpecifyAtscOptions : Win32cr::Foundation::BOOL,
    atsc : Win32cr::Media::DirectShow::ATSC_FILTER_OPTIONS

  @[Extern]
  record MPEG2_FILTER2,
    anonymous : Anonymous_e__Union_,
    fSpecifyDvbEitOptions : Win32cr::Foundation::BOOL,
    dvb_eit : Win32cr::Media::DirectShow::DVB_EIT_FILTER_OPTIONS do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      anonymous : Anonymous_e__Struct_,
      bVersion1Bytes : UInt8[124] do

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      record Anonymous_e__Struct_,
        bVersionNumber : UInt8,
        wFilterSize : UInt16,
        fUseRawFilteringBits : Win32cr::Foundation::BOOL,
        filter : UInt8[16],
        mask : UInt8[16],
        fSpecifyTableIdExtension : Win32cr::Foundation::BOOL,
        table_id_extension : UInt16,
        fSpecifyVersion : Win32cr::Foundation::BOOL,
        version : UInt8,
        fSpecifySectionNumber : Win32cr::Foundation::BOOL,
        section_number : UInt8,
        fSpecifyCurrentNext : Win32cr::Foundation::BOOL,
        fNext : Win32cr::Foundation::BOOL,
        fSpecifyDsmccOptions : Win32cr::Foundation::BOOL,
        dsmcc : Win32cr::Media::DirectShow::DSMCC_FILTER_OPTIONS,
        fSpecifyAtscOptions : Win32cr::Foundation::BOOL,
        atsc : Win32cr::Media::DirectShow::ATSC_FILTER_OPTIONS

    end

  end

  @[Extern]
  record MPEG_STREAM_BUFFER,
    hr : Win32cr::Foundation::HRESULT,
    dwDataBufferSize : UInt32,
    dwSizeOfDataRead : UInt32,
    pDataBuffer : UInt8*

  @[Extern]
  record MPEG_TIME,
    hours : UInt8,
    minutes : UInt8,
    seconds : UInt8

  @[Extern]
  record MPEG_DATE,
    date : UInt8,
    month : UInt8,
    year : UInt16

  @[Extern]
  record MPEG_DATE_AND_TIME,
    d : Win32cr::Media::DirectShow::MPEG_DATE,
    t : Win32cr::Media::DirectShow::MPEG_TIME

  @[Extern]
  record MPEG_BCS_DEMUX,
    avm_graph_id : UInt32

  @[Extern]
  record MPEG_WINSOCK,
    avm_graph_id : UInt32

  @[Extern]
  record MPEG_CONTEXT,
    type__ : Win32cr::Media::DirectShow::MPEG_CONTEXT_TYPE,
    u : U_e__Union_ do

    # Nested Type U_e__Union_
    @[Extern(union: true)]
    record U_e__Union_,
      demux : Win32cr::Media::DirectShow::MPEG_BCS_DEMUX,
      winsock : Win32cr::Media::DirectShow::MPEG_WINSOCK

  end

  @[Extern]
  record MPEG_SERVICE_REQUEST,
    type__ : Win32cr::Media::DirectShow::MPEG_REQUEST_TYPE,
    context : Win32cr::Media::DirectShow::MPEG_CONTEXT,
    pid : UInt16,
    table_id : UInt8,
    filter : Win32cr::Media::DirectShow::MPEG2_FILTER,
    flags : UInt32

  @[Extern]
  record MPEG_SERVICE_RESPONSE,
    ip_address : UInt32,
    port : UInt16

  @[Extern]
  record DSMCC_ELEMENT,
    pid : UInt16,
    bComponentTag : UInt8,
    dwCarouselId : UInt32,
    dwTransactionId : UInt32,
    pNext : Win32cr::Media::DirectShow::DSMCC_ELEMENT*

  @[Extern]
  record MPE_ELEMENT,
    pid : UInt16,
    bComponentTag : UInt8,
    pNext : Win32cr::Media::DirectShow::MPE_ELEMENT*

  @[Extern]
  record MPEG_STREAM_FILTER,
    wPidValue : UInt16,
    dwFilterSize : UInt32,
    fCrcEnabled : Win32cr::Foundation::BOOL,
    rgchFilter : UInt8[16],
    rgchMask : UInt8[16]

  @[Extern]
  record Mpeg2TableSampleHdr,
    section_count : UInt8,
    reserved : UInt8[3],
    section_offsets : Int32*

  @[Extern]
  record ProgramElement,
    wProgramNumber : UInt16,
    wProgramMapPID : UInt16

  @[Extern]
  record UDCR_TAG,
    bVersion : UInt8,
    kid : UInt8[25],
    ullBaseCounter : UInt64,
    ullBaseCounterRange : UInt64,
    fScrambled : Win32cr::Foundation::BOOL,
    bStreamMark : UInt8,
    dwReserved1 : UInt32,
    dwReserved2 : UInt32

  @[Extern]
  record PIC_SEQ_SAMPLE,
    _bitfield : UInt32

  @[Extern]
  record SAMPLE_SEQ_OFFSET,
    _bitfield : UInt32

  @[Extern]
  record VA_OPTIONAL_VIDEO_PROPERTIES,
    dwPictureHeight : UInt16,
    dwPictureWidth : UInt16,
    dwAspectRatioX : UInt16,
    dwAspectRatioY : UInt16,
    va_video_format : Win32cr::Media::DirectShow::VA_VIDEO_FORMAT,
    va_color_primaries : Win32cr::Media::DirectShow::VA_COLOR_PRIMARIES,
    va_transfer_characteristics : Win32cr::Media::DirectShow::VA_TRANSFER_CHARACTERISTICS,
    va_matrix_coefficients : Win32cr::Media::DirectShow::VA_MATRIX_COEFFICIENTS

  @[Extern]
  record TRANSPORT_PROPERTIES,
    pid : UInt32,
    pcr : Int64,
    fields : Fields_e__Union_ do

    # Nested Type Fields_e__Union_
    @[Extern(union: true)]
    record Fields_e__Union_,
      others : Others_,
      value : Int64 do

      # Nested Type Others_
      @[Extern]
      record Others_,
        _bitfield : Int64

    end

  end

  @[Extern]
  record PBDA_TAG_ATTRIBUTE,
    table_uu_id : LibC::GUID,
    table_id : UInt8,
    version_no : UInt16,
    table_data_size : UInt32,
    table_data : UInt8*

  @[Extern]
  record CAPTURE_STREAMTIME,
    stream_time : Int64

  @[Extern]
  record DSHOW_STREAM_DESC,
    version_no : UInt32,
    stream_id : UInt32,
    default : Win32cr::Foundation::BOOL,
    creation : Win32cr::Foundation::BOOL,
    reserved : UInt32

  @[Extern]
  record SAMPLE_LIVE_STREAM_TIME,
    qwStreamTime : UInt64,
    qwLiveTime : UInt64

  @[Extern]
  record KSP_BDA_NODE_PIN,
    property : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulNodeType : UInt32,
    ulInputPinId : UInt32,
    ulOutputPinId : UInt32

  @[Extern]
  record KSM_BDA_PIN,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    anonymous : Anonymous_e__Union_,
    reserved : UInt32 do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pin_id : UInt32,
      pin_type : UInt32

  end

  @[Extern]
  record KSM_BDA_PIN_PAIR,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    anonymous1 : Anonymous1_e__Union_,
    anonymous2 : Anonymous2_e__Union_ do

    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    record Anonymous1_e__Union_,
      input_pin_id : UInt32,
      input_pin_type : UInt32


    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    record Anonymous2_e__Union_,
      output_pin_id : UInt32,
      output_pin_type : UInt32

  end

  @[Extern]
  record KSP_NODE_ESPID,
    property : Win32cr::Media::KernelStreaming::KSP_NODE,
    es_pid : UInt32

  @[Extern]
  record KSM_BDA_DEBUG_LEVEL,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ucDebugLevel : UInt8,
    ulDebugStringSize : UInt32,
    argbDebugString : UInt8*

  @[Extern]
  record BDA_DEBUG_DATA,
    lResult : Int32,
    uuidDebugDataType : LibC::GUID,
    ulDataSize : UInt32,
    argbDebugData : UInt8*

  @[Extern]
  record BDA_EVENT_DATA,
    lResult : Int32,
    ulEventID : UInt32,
    uuidEventType : LibC::GUID,
    ulEventDataLength : UInt32,
    argbEventData : UInt8*

  @[Extern]
  record KSM_BDA_EVENT_COMPLETE,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulEventID : UInt32,
    ulEventResult : UInt32

  @[Extern]
  record KSM_BDA_DRM_SETDRM,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    new_dr_muuid : LibC::GUID

  @[Extern]
  record KSM_BDA_BUFFER,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulBufferSize : UInt32,
    argbBuffer : UInt8*

  @[Extern]
  record KSM_BDA_WMDRM_LICENSE,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    uuidKeyID : LibC::GUID

  @[Extern]
  record KSM_BDA_WMDRM_RENEWLICENSE,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulXMRLicenseLength : UInt32,
    ulEntitlementTokenLength : UInt32,
    argbDataBuffer : UInt8*

  @[Extern]
  record KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulDialogRequest : UInt32,
    cLanguage : Win32cr::Foundation::CHAR[12],
    ulPurchaseTokenLength : UInt32,
    argbDataBuffer : UInt8*

  @[Extern]
  record KSM_BDA_WMDRMTUNER_SETPIDPROTECTION,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulPID : UInt32,
    uuidKeyID : LibC::GUID

  @[Extern]
  record KSM_BDA_WMDRMTUNER_GETPIDPROTECTION,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulPID : UInt32

  @[Extern]
  record KSM_BDA_WMDRMTUNER_SYNCVALUE,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulSyncValue : UInt32

  @[Extern]
  record KSM_BDA_TUNER_TUNEREQUEST,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulTuneLength : UInt32,
    argbTuneData : UInt8*

  @[Extern]
  record KSM_BDA_GPNV_GETVALUE,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulNameLength : UInt32,
    cLanguage : Win32cr::Foundation::CHAR[12],
    argbData : UInt8*

  @[Extern]
  record KSM_BDA_GPNV_SETVALUE,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulDialogRequest : UInt32,
    cLanguage : Win32cr::Foundation::CHAR[12],
    ulNameLength : UInt32,
    ulValueLength : UInt32,
    argbName : UInt8*

  @[Extern]
  record KSM_BDA_GPNV_NAMEINDEX,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulValueNameIndex : UInt32

  @[Extern]
  record KSM_BDA_SCAN_CAPABILTIES,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    uuidBroadcastStandard : LibC::GUID

  @[Extern]
  record KSM_BDA_SCAN_FILTER,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulScanModulationTypeSize : UInt32,
    analog_video_standards : UInt64,
    argbScanModulationTypes : UInt8*

  @[Extern]
  record KSM_BDA_SCAN_START,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    lower_frequency : UInt32,
    higher_frequency : UInt32

  @[Extern]
  record KSM_BDA_GDDS_TUNEXMLFROMIDX,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulIdx : UInt64

  @[Extern]
  record KSM_BDA_GDDS_SERVICEFROMTUNEXML,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulTuneXmlLength : UInt32,
    argbTuneXml : UInt8*

  @[Extern]
  record KSM_BDA_USERACTIVITY_USEREASON,
    method : Win32cr::Media::KernelStreaming::KSIDENTIFIER,
    ulUseReason : UInt32

  @[Extern]
  record KSM_BDA_CAS_ENTITLEMENTTOKEN,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulDialogRequest : UInt32,
    cLanguage : Win32cr::Foundation::CHAR[12],
    ulRequestType : UInt32,
    ulEntitlementTokenLen : UInt32,
    argbEntitlementToken : UInt8*

  @[Extern]
  record KSM_BDA_CAS_CAPTURETOKEN,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulTokenLength : UInt32,
    argbToken : UInt8*

  @[Extern]
  record KSM_BDA_CAS_OPENBROADCASTMMI,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulDialogRequest : UInt32,
    cLanguage : Win32cr::Foundation::CHAR[12],
    ulEventId : UInt32

  @[Extern]
  record KSM_BDA_CAS_CLOSEMMIDIALOG,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulDialogRequest : UInt32,
    cLanguage : Win32cr::Foundation::CHAR[12],
    ulDialogNumber : UInt32,
    ulReason : UInt32

  @[Extern]
  record KSM_BDA_ISDBCAS_REQUEST,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    ulRequestID : UInt32,
    ulIsdbCommandSize : UInt32,
    argbIsdbCommandData : UInt8*

  @[Extern]
  record KSM_BDA_TS_SELECTOR_SETTSID,
    node_method : Win32cr::Media::KernelStreaming::KSM_NODE,
    usTSID : UInt16

  @[Extern]
  record KS_DATARANGE_BDA_ANTENNA,
    data_range : Win32cr::Media::KernelStreaming::KSDATAFORMAT

  @[Extern]
  record BDA_TRANSPORT_INFO,
    ulcbPhyiscalPacket : UInt32,
    ulcbPhyiscalFrame : UInt32,
    ulcbPhyiscalFrameAlignment : UInt32,
    avg_time_per_frame : Int64

  @[Extern]
  record KS_DATARANGE_BDA_TRANSPORT,
    data_range : Win32cr::Media::KernelStreaming::KSDATAFORMAT,
    bda_transport_info : Win32cr::Media::DirectShow::BDA_TRANSPORT_INFO

  @[Extern]
  record ChannelChangeInfo,
    state : Win32cr::Media::DirectShow::ChannelChangeSpanningEvent_State,
    time_stamp : UInt64

  @[Extern]
  record ChannelTypeInfo,
    channelType : Win32cr::Media::DirectShow::ChannelType,
    timeStamp : UInt64

  @[Extern]
  record ChannelInfo,
    lFrequency : Int32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      dvb : DVB_e__Struct_,
      dc : DC_e__Struct_,
      atsc : ATSC_e__Struct_ do

      # Nested Type DC_e__Struct_
      @[Extern]
      record DC_e__Struct_,
        lProgNumber : Int32


      # Nested Type DVB_e__Struct_
      @[Extern]
      record DVB_e__Struct_,
        lONID : Int32,
        lTSID : Int32,
        lSID : Int32


      # Nested Type ATSC_e__Struct_
      @[Extern]
      record ATSC_e__Struct_,
        lProgNumber : Int32

    end

  end

  @[Extern]
  record SpanningEventDescriptor,
    wDataLen : UInt16,
    wProgNumber : UInt16,
    wSID : UInt16,
    bDescriptor : UInt8*

  @[Extern]
  record DVBScramblingControlSpanningEvent,
    ulPID : UInt32,
    fScrambled : Win32cr::Foundation::BOOL

  @[Extern]
  record SpanningEventEmmMessage,
    bCAbroadcasterGroupId : UInt8,
    bMessageControl : UInt8,
    wServiceId : UInt16,
    wTableIdExtension : UInt16,
    bDeletionStatus : UInt8,
    bDisplayingDuration1 : UInt8,
    bDisplayingDuration2 : UInt8,
    bDisplayingDuration3 : UInt8,
    bDisplayingCycle : UInt8,
    bFormatVersion : UInt8,
    bDisplayPosition : UInt8,
    wMessageLength : UInt16,
    szMessageArea : UInt16*

  @[Extern]
  record LanguageInfo,
    lang_id : UInt16,
    lISOLangCode : Int32

  @[Extern]
  record DualMonoInfo,
    lang_id1 : UInt16,
    lang_id2 : UInt16,
    lISOLangCode1 : Int32,
    lISOLangCode2 : Int32

  @[Extern]
  record PIDListSpanningEvent,
    wPIDCount : UInt16,
    pulPIDs : UInt32*

  @[Extern]
  record RATING_ATTRIBUTE,
    rating_attribute_id : UInt32,
    rating_attribute_value : UInt32

  @[Extern]
  record RATING_SYSTEM,
    rating_system_id : LibC::GUID,
    _bitfield : UInt8,
    country_code : UInt8[3],
    rating_attribute_count : UInt32,
    lpratingattrib : Win32cr::Media::DirectShow::RATING_ATTRIBUTE*

  @[Extern]
  record RATING_INFO,
    rating_system_count : UInt32,
    lpratingsystem : Win32cr::Media::DirectShow::RATING_SYSTEM*

  @[Extern]
  record PBDAParentalControl,
    rating_system_count : UInt32,
    rating_systems : Win32cr::Media::DirectShow::RATING_SYSTEM*

  @[Extern]
  record DvbParentalRatingParam,
    szCountryCode : Win32cr::Foundation::CHAR[4],
    bRating : UInt8

  @[Extern]
  record DvbParentalRatingDescriptor,
    ulNumParams : UInt32,
    pParams : Win32cr::Media::DirectShow::DvbParentalRatingParam*

  @[Extern]
  record KSPROPERTY_BDA_RF_TUNER_CAPS_S,
    property : Win32cr::Media::KernelStreaming::KSP_NODE,
    mode : UInt32,
    analog_standards_supported : UInt32,
    digital_standards_supported : UInt32,
    min_frequency : UInt32,
    max_frequency : UInt32,
    settling_time : UInt32,
    analog_sensing_range : UInt32,
    digital_sensing_range : UInt32,
    milli_seconds_per_m_hz : UInt32

  @[Extern]
  record KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S,
    property : Win32cr::Media::KernelStreaming::KSP_NODE,
    current_frequency : UInt32,
    frequency_range_min : UInt32,
    frequency_range_max : UInt32,
    milli_seconds_left : UInt32

  @[Extern]
  record KSPROPERTY_BDA_RF_TUNER_STANDARD_S,
    property : Win32cr::Media::KernelStreaming::KSP_NODE,
    signal_type : Win32cr::Media::DirectShow::BDA_SignalType,
    signal_standard : UInt32

  @[Extern]
  record KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S,
    property : Win32cr::Media::KernelStreaming::KSP_NODE,
    auto_detect : Win32cr::Foundation::BOOL

  @[Extern]
  record KSEVENTDATA_BDA_RF_TUNER_SCAN_S,
    event_data : Win32cr::Media::KernelStreaming::KSEVENTDATA,
    start_frequency : UInt32,
    end_frequency : UInt32,
    lock_requested : Win32cr::Media::DirectShow::BDA_LockType

  @[Extern]
  record PID_BITS,
    _bitfield : UInt16

  @[Extern]
  record MPEG_HEADER_BITS,
    _bitfield : UInt16

  @[Extern]
  record MPEG_HEADER_VERSION_BITS,
    _bitfield : UInt8

  @[Extern]
  record MPEG1WAVEFORMAT,
    wfx : Win32cr::Media::Audio::WAVEFORMATEX,
    fwHeadLayer : UInt16,
    dwHeadBitrate : UInt32,
    fwHeadMode : UInt16,
    fwHeadModeExt : UInt16,
    wHeadEmphasis : UInt16,
    fwHeadFlags : UInt16,
    dwPTSLow : UInt32,
    dwPTSHigh : UInt32

  @[Extern]
  record MPEGLAYER3WAVEFORMAT,
    wfx : Win32cr::Media::Audio::WAVEFORMATEX,
    wID : UInt16,
    fdwFlags : Win32cr::Media::DirectShow::MPEGLAYER3WAVEFORMAT_FLAGS,
    nBlockSize : UInt16,
    nFramesPerBlock : UInt16,
    nCodecDelay : UInt16

  @[Extern]
  record HEAACWAVEINFO,
    wfx : Win32cr::Media::Audio::WAVEFORMATEX,
    wPayloadType : UInt16,
    wAudioProfileLevelIndication : UInt16,
    wStructType : UInt16,
    wReserved1 : UInt16,
    dwReserved2 : UInt32

  @[Extern]
  record HEAACWAVEFORMAT,
    wfInfo : Win32cr::Media::DirectShow::HEAACWAVEINFO,
    pbAudioSpecificConfig : UInt8*

  @[Extern]
  record DXVA_COPPSetProtectionLevelCmdData,
    prot_type : UInt32,
    prot_level : UInt32,
    extended_info_change_mask : UInt32,
    extended_info_data : UInt32

  @[Extern]
  record DXVA_COPPSetSignalingCmdData,
    active_tv_protection_standard : UInt32,
    aspect_ratio_change_mask1 : UInt32,
    aspect_ratio_data1 : UInt32,
    aspect_ratio_change_mask2 : UInt32,
    aspect_ratio_data2 : UInt32,
    aspect_ratio_change_mask3 : UInt32,
    aspect_ratio_data3 : UInt32,
    extended_info_change_mask : UInt32[4],
    extended_info_data : UInt32[4],
    reserved : UInt32

  @[Extern]
  record DXVA_COPPStatusData,
    rApp : LibC::GUID,
    dwFlags : UInt32,
    dwData : UInt32,
    extended_info_valid_mask : UInt32,
    extended_info_data : UInt32

  @[Extern]
  record DXVA_COPPStatusDisplayData,
    rApp : LibC::GUID,
    dwFlags : UInt32,
    display_width : UInt32,
    display_height : UInt32,
    format : UInt32,
    d3dFormat : UInt32,
    freq_numerator : UInt32,
    freq_denominator : UInt32

  @[Extern]
  record DXVA_COPPStatusHDCPKeyData,
    rApp : LibC::GUID,
    dwFlags : UInt32,
    dwHDCPFlags : UInt32,
    b_key : LibC::GUID,
    reserved1 : LibC::GUID,
    reserved2 : LibC::GUID

  @[Extern]
  record DXVA_COPPStatusSignalingCmdData,
    rApp : LibC::GUID,
    dwFlags : UInt32,
    available_tv_protection_standards : UInt32,
    active_tv_protection_standard : UInt32,
    tv_type : UInt32,
    aspect_ratio_valid_mask1 : UInt32,
    aspect_ratio_data1 : UInt32,
    aspect_ratio_valid_mask2 : UInt32,
    aspect_ratio_data2 : UInt32,
    aspect_ratio_valid_mask3 : UInt32,
    aspect_ratio_data3 : UInt32,
    extended_info_valid_mask : UInt32[4],
    extended_info_data : UInt32[4]

  @[Extern]
  record ICreateDevEnumVtbl,
    query_interface : Proc(ICreateDevEnum*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreateDevEnum*, UInt32),
    release : Proc(ICreateDevEnum*, UInt32),
    create_class_enumerator : Proc(ICreateDevEnum*, LibC::GUID*, Void**, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("29840822-5b84-11d0-bd3b-00a0c911ce86")]
  record ICreateDevEnum, lpVtbl : ICreateDevEnumVtbl* do
    GUID = LibC::GUID.new(0x29840822_u32, 0x5b84_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x3b_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
    def query_interface(this : ICreateDevEnum*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreateDevEnum*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreateDevEnum*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_class_enumerator(this : ICreateDevEnum*, clsidDeviceClass : LibC::GUID*, ppEnumMoniker : Void**, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_class_enumerator.call(this, clsidDeviceClass, ppEnumMoniker, dwFlags)
    end

  end

  @[Extern]
  record IPinVtbl,
    query_interface : Proc(IPin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPin*, UInt32),
    release : Proc(IPin*, UInt32),
    connect : Proc(IPin*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    receive_connection : Proc(IPin*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IPin*, Win32cr::Foundation::HRESULT),
    connected_to : Proc(IPin*, Void**, Win32cr::Foundation::HRESULT),
    connection_media_type : Proc(IPin*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    query_pin_info : Proc(IPin*, Win32cr::Media::DirectShow::PIN_INFO*, Win32cr::Foundation::HRESULT),
    query_direction : Proc(IPin*, Win32cr::Media::DirectShow::PIN_DIRECTION*, Win32cr::Foundation::HRESULT),
    query_id : Proc(IPin*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    query_accept : Proc(IPin*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    enum_media_types : Proc(IPin*, Void**, Win32cr::Foundation::HRESULT),
    query_internal_connections : Proc(IPin*, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_stream : Proc(IPin*, Win32cr::Foundation::HRESULT),
    begin_flush : Proc(IPin*, Win32cr::Foundation::HRESULT),
    end_flush : Proc(IPin*, Win32cr::Foundation::HRESULT),
    new_segment : Proc(IPin*, Int64, Int64, Float64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a86891-0ad4-11ce-b03a-0020af0ba770")]
  record IPin, lpVtbl : IPinVtbl* do
    GUID = LibC::GUID.new(0x56a86891_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IPin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def connect(this : IPin*, pReceivePin : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, pReceivePin, pmt)
    end
    def receive_connection(this : IPin*, pConnector : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.receive_connection.call(this, pConnector, pmt)
    end
    def disconnect(this : IPin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this)
    end
    def connected_to(this : IPin*, pPin : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connected_to.call(this, pPin)
    end
    def connection_media_type(this : IPin*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connection_media_type.call(this, pmt)
    end
    def query_pin_info(this : IPin*, pInfo : Win32cr::Media::DirectShow::PIN_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_pin_info.call(this, pInfo)
    end
    def query_direction(this : IPin*, pPinDir : Win32cr::Media::DirectShow::PIN_DIRECTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_direction.call(this, pPinDir)
    end
    def query_id(this : IPin*, id : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_id.call(this, id)
    end
    def query_accept(this : IPin*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_accept.call(this, pmt)
    end
    def enum_media_types(this : IPin*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_media_types.call(this, ppEnum)
    end
    def query_internal_connections(this : IPin*, apPin : Void**, nPin : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_internal_connections.call(this, apPin, nPin)
    end
    def end_of_stream(this : IPin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_stream.call(this)
    end
    def begin_flush(this : IPin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_flush.call(this)
    end
    def end_flush(this : IPin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_flush.call(this)
    end
    def new_segment(this : IPin*, tStart : Int64, tStop : Int64, dRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.new_segment.call(this, tStart, tStop, dRate)
    end

  end

  @[Extern]
  record IEnumPinsVtbl,
    query_interface : Proc(IEnumPins*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumPins*, UInt32),
    release : Proc(IEnumPins*, UInt32),
    next__ : Proc(IEnumPins*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumPins*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumPins*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumPins*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a86892-0ad4-11ce-b03a-0020af0ba770")]
  record IEnumPins, lpVtbl : IEnumPinsVtbl* do
    GUID = LibC::GUID.new(0x56a86892_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IEnumPins*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumPins*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumPins*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumPins*, cPins : UInt32, ppPins : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cPins, ppPins, pcFetched)
    end
    def skip(this : IEnumPins*, cPins : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cPins)
    end
    def reset(this : IEnumPins*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumPins*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumMediaTypesVtbl,
    query_interface : Proc(IEnumMediaTypes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumMediaTypes*, UInt32),
    release : Proc(IEnumMediaTypes*, UInt32),
    next__ : Proc(IEnumMediaTypes*, UInt32, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumMediaTypes*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumMediaTypes*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumMediaTypes*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("89c31040-846b-11ce-97d3-00aa0055595a")]
  record IEnumMediaTypes, lpVtbl : IEnumMediaTypesVtbl* do
    GUID = LibC::GUID.new(0x89c31040_u32, 0x846b_u16, 0x11ce_u16, StaticArray[0x97_u8, 0xd3_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x55_u8, 0x59_u8, 0x5a_u8])
    def query_interface(this : IEnumMediaTypes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumMediaTypes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumMediaTypes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumMediaTypes*, cMediaTypes : UInt32, ppMediaTypes : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cMediaTypes, ppMediaTypes, pcFetched)
    end
    def skip(this : IEnumMediaTypes*, cMediaTypes : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cMediaTypes)
    end
    def reset(this : IEnumMediaTypes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumMediaTypes*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IFilterGraphVtbl,
    query_interface : Proc(IFilterGraph*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterGraph*, UInt32),
    release : Proc(IFilterGraph*, UInt32),
    add_filter : Proc(IFilterGraph*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    remove_filter : Proc(IFilterGraph*, Void*, Win32cr::Foundation::HRESULT),
    enum_filters : Proc(IFilterGraph*, Void**, Win32cr::Foundation::HRESULT),
    find_filter_by_name : Proc(IFilterGraph*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    connect_direct : Proc(IFilterGraph*, Void*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    reconnect : Proc(IFilterGraph*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IFilterGraph*, Void*, Win32cr::Foundation::HRESULT),
    set_default_sync_source : Proc(IFilterGraph*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a8689f-0ad4-11ce-b03a-0020af0ba770")]
  record IFilterGraph, lpVtbl : IFilterGraphVtbl* do
    GUID = LibC::GUID.new(0x56a8689f_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IFilterGraph*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterGraph*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterGraph*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_filter(this : IFilterGraph*, pFilter : Void*, pName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_filter.call(this, pFilter, pName)
    end
    def remove_filter(this : IFilterGraph*, pFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_filter.call(this, pFilter)
    end
    def enum_filters(this : IFilterGraph*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_filters.call(this, ppEnum)
    end
    def find_filter_by_name(this : IFilterGraph*, pName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_filter_by_name.call(this, pName, ppFilter)
    end
    def connect_direct(this : IFilterGraph*, ppinOut : Void*, ppinIn : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_direct.call(this, ppinOut, ppinIn, pmt)
    end
    def reconnect(this : IFilterGraph*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconnect.call(this, ppin)
    end
    def disconnect(this : IFilterGraph*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this, ppin)
    end
    def set_default_sync_source(this : IFilterGraph*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_sync_source.call(this)
    end

  end

  @[Extern]
  record IEnumFiltersVtbl,
    query_interface : Proc(IEnumFilters*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumFilters*, UInt32),
    release : Proc(IEnumFilters*, UInt32),
    next__ : Proc(IEnumFilters*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumFilters*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumFilters*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumFilters*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a86893-0ad4-11ce-b03a-0020af0ba770")]
  record IEnumFilters, lpVtbl : IEnumFiltersVtbl* do
    GUID = LibC::GUID.new(0x56a86893_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IEnumFilters*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumFilters*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumFilters*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumFilters*, cFilters : UInt32, ppFilter : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cFilters, ppFilter, pcFetched)
    end
    def skip(this : IEnumFilters*, cFilters : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cFilters)
    end
    def reset(this : IEnumFilters*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumFilters*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IMediaFilterVtbl,
    query_interface : Proc(IMediaFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaFilter*, UInt32),
    release : Proc(IMediaFilter*, UInt32),
    get_class_id : Proc(IMediaFilter*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMediaFilter*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMediaFilter*, Win32cr::Foundation::HRESULT),
    run : Proc(IMediaFilter*, Int64, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMediaFilter*, UInt32, Win32cr::Media::DirectShow::FILTER_STATE*, Win32cr::Foundation::HRESULT),
    set_sync_source : Proc(IMediaFilter*, Void*, Win32cr::Foundation::HRESULT),
    get_sync_source : Proc(IMediaFilter*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a86899-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaFilter, lpVtbl : IMediaFilterVtbl* do
    GUID = LibC::GUID.new(0x56a86899_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IMediaFilter*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def stop(this : IMediaFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IMediaFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def run(this : IMediaFilter*, tStart : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this, tStart)
    end
    def get_state(this : IMediaFilter*, dwMilliSecsTimeout : UInt32, state : Win32cr::Media::DirectShow::FILTER_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, dwMilliSecsTimeout, state)
    end
    def set_sync_source(this : IMediaFilter*, pClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_source.call(this, pClock)
    end
    def get_sync_source(this : IMediaFilter*, pClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sync_source.call(this, pClock)
    end

  end

  @[Extern]
  record IBaseFilterVtbl,
    query_interface : Proc(IBaseFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBaseFilter*, UInt32),
    release : Proc(IBaseFilter*, UInt32),
    get_class_id : Proc(IBaseFilter*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    stop : Proc(IBaseFilter*, Win32cr::Foundation::HRESULT),
    pause : Proc(IBaseFilter*, Win32cr::Foundation::HRESULT),
    run : Proc(IBaseFilter*, Int64, Win32cr::Foundation::HRESULT),
    get_state : Proc(IBaseFilter*, UInt32, Win32cr::Media::DirectShow::FILTER_STATE*, Win32cr::Foundation::HRESULT),
    set_sync_source : Proc(IBaseFilter*, Void*, Win32cr::Foundation::HRESULT),
    get_sync_source : Proc(IBaseFilter*, Void**, Win32cr::Foundation::HRESULT),
    enum_pins : Proc(IBaseFilter*, Void**, Win32cr::Foundation::HRESULT),
    find_pin : Proc(IBaseFilter*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    query_filter_info : Proc(IBaseFilter*, Win32cr::Media::DirectShow::FILTER_INFO*, Win32cr::Foundation::HRESULT),
    join_filter_graph : Proc(IBaseFilter*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    query_vendor_info : Proc(IBaseFilter*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a86895-0ad4-11ce-b03a-0020af0ba770")]
  record IBaseFilter, lpVtbl : IBaseFilterVtbl* do
    GUID = LibC::GUID.new(0x56a86895_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IBaseFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBaseFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBaseFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IBaseFilter*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def stop(this : IBaseFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IBaseFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def run(this : IBaseFilter*, tStart : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this, tStart)
    end
    def get_state(this : IBaseFilter*, dwMilliSecsTimeout : UInt32, state : Win32cr::Media::DirectShow::FILTER_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, dwMilliSecsTimeout, state)
    end
    def set_sync_source(this : IBaseFilter*, pClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_source.call(this, pClock)
    end
    def get_sync_source(this : IBaseFilter*, pClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sync_source.call(this, pClock)
    end
    def enum_pins(this : IBaseFilter*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_pins.call(this, ppEnum)
    end
    def find_pin(this : IBaseFilter*, id : Win32cr::Foundation::PWSTR, ppPin : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_pin.call(this, id, ppPin)
    end
    def query_filter_info(this : IBaseFilter*, pInfo : Win32cr::Media::DirectShow::FILTER_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_filter_info.call(this, pInfo)
    end
    def join_filter_graph(this : IBaseFilter*, pGraph : Void*, pName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.join_filter_graph.call(this, pGraph, pName)
    end
    def query_vendor_info(this : IBaseFilter*, pVendorInfo : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_vendor_info.call(this, pVendorInfo)
    end

  end

  @[Extern]
  record IMediaSampleVtbl,
    query_interface : Proc(IMediaSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaSample*, UInt32),
    release : Proc(IMediaSample*, UInt32),
    get_pointer : Proc(IMediaSample*, UInt8**, Win32cr::Foundation::HRESULT),
    get_size : Proc(IMediaSample*, Int32),
    get_time : Proc(IMediaSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_time : Proc(IMediaSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    is_sync_point : Proc(IMediaSample*, Win32cr::Foundation::HRESULT),
    set_sync_point : Proc(IMediaSample*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    is_preroll : Proc(IMediaSample*, Win32cr::Foundation::HRESULT),
    set_preroll : Proc(IMediaSample*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_actual_data_length : Proc(IMediaSample*, Int32),
    set_actual_data_length : Proc(IMediaSample*, Int32, Win32cr::Foundation::HRESULT),
    get_media_type : Proc(IMediaSample*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(IMediaSample*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    is_discontinuity : Proc(IMediaSample*, Win32cr::Foundation::HRESULT),
    set_discontinuity : Proc(IMediaSample*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_media_time : Proc(IMediaSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_media_time : Proc(IMediaSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a8689a-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaSample, lpVtbl : IMediaSampleVtbl* do
    GUID = LibC::GUID.new(0x56a8689a_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_pointer(this : IMediaSample*, ppBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pointer.call(this, ppBuffer)
    end
    def get_size(this : IMediaSample*) : Int32
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_time(this : IMediaSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time.call(this, pTimeStart, pTimeEnd)
    end
    def set_time(this : IMediaSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time.call(this, pTimeStart, pTimeEnd)
    end
    def is_sync_point(this : IMediaSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_sync_point.call(this)
    end
    def set_sync_point(this : IMediaSample*, bIsSyncPoint : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_point.call(this, bIsSyncPoint)
    end
    def is_preroll(this : IMediaSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_preroll.call(this)
    end
    def set_preroll(this : IMediaSample*, bIsPreroll : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preroll.call(this, bIsPreroll)
    end
    def get_actual_data_length(this : IMediaSample*) : Int32
      @lpVtbl.try &.value.get_actual_data_length.call(this)
    end
    def set_actual_data_length(this : IMediaSample*, __midl__i_media_sample0000 : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_actual_data_length.call(this, __midl__i_media_sample0000)
    end
    def get_media_type(this : IMediaSample*, ppMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type.call(this, ppMediaType)
    end
    def set_media_type(this : IMediaSample*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, pMediaType)
    end
    def is_discontinuity(this : IMediaSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_discontinuity.call(this)
    end
    def set_discontinuity(this : IMediaSample*, bDiscontinuity : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_discontinuity.call(this, bDiscontinuity)
    end
    def get_media_time(this : IMediaSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_time.call(this, pTimeStart, pTimeEnd)
    end
    def set_media_time(this : IMediaSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_time.call(this, pTimeStart, pTimeEnd)
    end

  end

  @[Extern]
  record IMediaSample2Vtbl,
    query_interface : Proc(IMediaSample2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaSample2*, UInt32),
    release : Proc(IMediaSample2*, UInt32),
    get_pointer : Proc(IMediaSample2*, UInt8**, Win32cr::Foundation::HRESULT),
    get_size : Proc(IMediaSample2*, Int32),
    get_time : Proc(IMediaSample2*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_time : Proc(IMediaSample2*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    is_sync_point : Proc(IMediaSample2*, Win32cr::Foundation::HRESULT),
    set_sync_point : Proc(IMediaSample2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    is_preroll : Proc(IMediaSample2*, Win32cr::Foundation::HRESULT),
    set_preroll : Proc(IMediaSample2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_actual_data_length : Proc(IMediaSample2*, Int32),
    set_actual_data_length : Proc(IMediaSample2*, Int32, Win32cr::Foundation::HRESULT),
    get_media_type : Proc(IMediaSample2*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(IMediaSample2*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    is_discontinuity : Proc(IMediaSample2*, Win32cr::Foundation::HRESULT),
    set_discontinuity : Proc(IMediaSample2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_media_time : Proc(IMediaSample2*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_media_time : Proc(IMediaSample2*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_properties : Proc(IMediaSample2*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    set_properties : Proc(IMediaSample2*, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("36b73884-c2c8-11cf-8b46-00805f6cef60")]
  record IMediaSample2, lpVtbl : IMediaSample2Vtbl* do
    GUID = LibC::GUID.new(0x36b73884_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
    def query_interface(this : IMediaSample2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaSample2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaSample2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_pointer(this : IMediaSample2*, ppBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pointer.call(this, ppBuffer)
    end
    def get_size(this : IMediaSample2*) : Int32
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_time(this : IMediaSample2*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time.call(this, pTimeStart, pTimeEnd)
    end
    def set_time(this : IMediaSample2*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time.call(this, pTimeStart, pTimeEnd)
    end
    def is_sync_point(this : IMediaSample2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_sync_point.call(this)
    end
    def set_sync_point(this : IMediaSample2*, bIsSyncPoint : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_point.call(this, bIsSyncPoint)
    end
    def is_preroll(this : IMediaSample2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_preroll.call(this)
    end
    def set_preroll(this : IMediaSample2*, bIsPreroll : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preroll.call(this, bIsPreroll)
    end
    def get_actual_data_length(this : IMediaSample2*) : Int32
      @lpVtbl.try &.value.get_actual_data_length.call(this)
    end
    def set_actual_data_length(this : IMediaSample2*, __midl__i_media_sample0000 : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_actual_data_length.call(this, __midl__i_media_sample0000)
    end
    def get_media_type(this : IMediaSample2*, ppMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type.call(this, ppMediaType)
    end
    def set_media_type(this : IMediaSample2*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, pMediaType)
    end
    def is_discontinuity(this : IMediaSample2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_discontinuity.call(this)
    end
    def set_discontinuity(this : IMediaSample2*, bDiscontinuity : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_discontinuity.call(this, bDiscontinuity)
    end
    def get_media_time(this : IMediaSample2*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_time.call(this, pTimeStart, pTimeEnd)
    end
    def set_media_time(this : IMediaSample2*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_time.call(this, pTimeStart, pTimeEnd)
    end
    def get_properties(this : IMediaSample2*, cbProperties : UInt32, pbProperties : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, cbProperties, pbProperties)
    end
    def set_properties(this : IMediaSample2*, cbProperties : UInt32, pbProperties : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_properties.call(this, cbProperties, pbProperties)
    end

  end

  @[Extern]
  record IMediaSample2ConfigVtbl,
    query_interface : Proc(IMediaSample2Config*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaSample2Config*, UInt32),
    release : Proc(IMediaSample2Config*, UInt32),
    get_surface : Proc(IMediaSample2Config*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("68961e68-832b-41ea-bc91-63593f3e70e3")]
  record IMediaSample2Config, lpVtbl : IMediaSample2ConfigVtbl* do
    GUID = LibC::GUID.new(0x68961e68_u32, 0x832b_u16, 0x41ea_u16, StaticArray[0xbc_u8, 0x91_u8, 0x63_u8, 0x59_u8, 0x3f_u8, 0x3e_u8, 0x70_u8, 0xe3_u8])
    def query_interface(this : IMediaSample2Config*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaSample2Config*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaSample2Config*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_surface(this : IMediaSample2Config*, ppDirect3DSurface9 : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface.call(this, ppDirect3DSurface9)
    end

  end

  @[Extern]
  record IMemAllocatorVtbl,
    query_interface : Proc(IMemAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMemAllocator*, UInt32),
    release : Proc(IMemAllocator*, UInt32),
    set_properties : Proc(IMemAllocator*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    get_properties : Proc(IMemAllocator*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    commit : Proc(IMemAllocator*, Win32cr::Foundation::HRESULT),
    decommit : Proc(IMemAllocator*, Win32cr::Foundation::HRESULT),
    get_buffer : Proc(IMemAllocator*, Void**, Int64*, Int64*, UInt32, Win32cr::Foundation::HRESULT),
    release_buffer : Proc(IMemAllocator*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a8689c-0ad4-11ce-b03a-0020af0ba770")]
  record IMemAllocator, lpVtbl : IMemAllocatorVtbl* do
    GUID = LibC::GUID.new(0x56a8689c_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMemAllocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMemAllocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMemAllocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_properties(this : IMemAllocator*, pRequest : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, pActual : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_properties.call(this, pRequest, pActual)
    end
    def get_properties(this : IMemAllocator*, pProps : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pProps)
    end
    def commit(this : IMemAllocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this)
    end
    def decommit(this : IMemAllocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decommit.call(this)
    end
    def get_buffer(this : IMemAllocator*, ppBuffer : Void**, pStartTime : Int64*, pEndTime : Int64*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, ppBuffer, pStartTime, pEndTime, dwFlags)
    end
    def release_buffer(this : IMemAllocator*, pBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_buffer.call(this, pBuffer)
    end

  end

  @[Extern]
  record IMemAllocatorCallbackTempVtbl,
    query_interface : Proc(IMemAllocatorCallbackTemp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMemAllocatorCallbackTemp*, UInt32),
    release : Proc(IMemAllocatorCallbackTemp*, UInt32),
    set_properties : Proc(IMemAllocatorCallbackTemp*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    get_properties : Proc(IMemAllocatorCallbackTemp*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    commit : Proc(IMemAllocatorCallbackTemp*, Win32cr::Foundation::HRESULT),
    decommit : Proc(IMemAllocatorCallbackTemp*, Win32cr::Foundation::HRESULT),
    get_buffer : Proc(IMemAllocatorCallbackTemp*, Void**, Int64*, Int64*, UInt32, Win32cr::Foundation::HRESULT),
    release_buffer : Proc(IMemAllocatorCallbackTemp*, Void*, Win32cr::Foundation::HRESULT),
    set_notify : Proc(IMemAllocatorCallbackTemp*, Void*, Win32cr::Foundation::HRESULT),
    get_free_count : Proc(IMemAllocatorCallbackTemp*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("379a0cf0-c1de-11d2-abf5-00a0c905f375")]
  record IMemAllocatorCallbackTemp, lpVtbl : IMemAllocatorCallbackTempVtbl* do
    GUID = LibC::GUID.new(0x379a0cf0_u32, 0xc1de_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf5_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IMemAllocatorCallbackTemp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMemAllocatorCallbackTemp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMemAllocatorCallbackTemp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_properties(this : IMemAllocatorCallbackTemp*, pRequest : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, pActual : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_properties.call(this, pRequest, pActual)
    end
    def get_properties(this : IMemAllocatorCallbackTemp*, pProps : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pProps)
    end
    def commit(this : IMemAllocatorCallbackTemp*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this)
    end
    def decommit(this : IMemAllocatorCallbackTemp*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decommit.call(this)
    end
    def get_buffer(this : IMemAllocatorCallbackTemp*, ppBuffer : Void**, pStartTime : Int64*, pEndTime : Int64*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, ppBuffer, pStartTime, pEndTime, dwFlags)
    end
    def release_buffer(this : IMemAllocatorCallbackTemp*, pBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_buffer.call(this, pBuffer)
    end
    def set_notify(this : IMemAllocatorCallbackTemp*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify.call(this, pNotify)
    end
    def get_free_count(this : IMemAllocatorCallbackTemp*, plBuffersFree : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_free_count.call(this, plBuffersFree)
    end

  end

  @[Extern]
  record IMemAllocatorNotifyCallbackTempVtbl,
    query_interface : Proc(IMemAllocatorNotifyCallbackTemp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMemAllocatorNotifyCallbackTemp*, UInt32),
    release : Proc(IMemAllocatorNotifyCallbackTemp*, UInt32),
    notify_release : Proc(IMemAllocatorNotifyCallbackTemp*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("92980b30-c1de-11d2-abf5-00a0c905f375")]
  record IMemAllocatorNotifyCallbackTemp, lpVtbl : IMemAllocatorNotifyCallbackTempVtbl* do
    GUID = LibC::GUID.new(0x92980b30_u32, 0xc1de_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf5_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IMemAllocatorNotifyCallbackTemp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMemAllocatorNotifyCallbackTemp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMemAllocatorNotifyCallbackTemp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_release(this : IMemAllocatorNotifyCallbackTemp*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_release.call(this)
    end

  end

  @[Extern]
  record IMemInputPinVtbl,
    query_interface : Proc(IMemInputPin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMemInputPin*, UInt32),
    release : Proc(IMemInputPin*, UInt32),
    get_allocator : Proc(IMemInputPin*, Void**, Win32cr::Foundation::HRESULT),
    notify_allocator : Proc(IMemInputPin*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_allocator_requirements : Proc(IMemInputPin*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    receive : Proc(IMemInputPin*, Void*, Win32cr::Foundation::HRESULT),
    receive_multiple : Proc(IMemInputPin*, Void**, Int32, Int32*, Win32cr::Foundation::HRESULT),
    receive_can_block : Proc(IMemInputPin*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a8689d-0ad4-11ce-b03a-0020af0ba770")]
  record IMemInputPin, lpVtbl : IMemInputPinVtbl* do
    GUID = LibC::GUID.new(0x56a8689d_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMemInputPin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMemInputPin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMemInputPin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_allocator(this : IMemInputPin*, ppAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocator.call(this, ppAllocator)
    end
    def notify_allocator(this : IMemInputPin*, pAllocator : Void*, bReadOnly : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_allocator.call(this, pAllocator, bReadOnly)
    end
    def get_allocator_requirements(this : IMemInputPin*, pProps : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocator_requirements.call(this, pProps)
    end
    def receive(this : IMemInputPin*, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.receive.call(this, pSample)
    end
    def receive_multiple(this : IMemInputPin*, pSamples : Void**, nSamples : Int32, nSamplesProcessed : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.receive_multiple.call(this, pSamples, nSamples, nSamplesProcessed)
    end
    def receive_can_block(this : IMemInputPin*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.receive_can_block.call(this)
    end

  end

  @[Extern]
  record IAMovieSetupVtbl,
    query_interface : Proc(IAMovieSetup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMovieSetup*, UInt32),
    release : Proc(IAMovieSetup*, UInt32),
    register : Proc(IAMovieSetup*, Win32cr::Foundation::HRESULT),
    unregister : Proc(IAMovieSetup*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a3d8cec0-7e5a-11cf-bbc5-00805f6cef20")]
  record IAMovieSetup, lpVtbl : IAMovieSetupVtbl* do
    GUID = LibC::GUID.new(0xa3d8cec0_u32, 0x7e5a_u16, 0x11cf_u16, StaticArray[0xbb_u8, 0xc5_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x20_u8])
    def query_interface(this : IAMovieSetup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMovieSetup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMovieSetup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register(this : IAMovieSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register.call(this)
    end
    def unregister(this : IAMovieSetup*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister.call(this)
    end

  end

  @[Extern]
  record IMediaSeekingVtbl,
    query_interface : Proc(IMediaSeeking*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaSeeking*, UInt32),
    release : Proc(IMediaSeeking*, UInt32),
    get_capabilities : Proc(IMediaSeeking*, UInt32*, Win32cr::Foundation::HRESULT),
    check_capabilities : Proc(IMediaSeeking*, UInt32*, Win32cr::Foundation::HRESULT),
    is_format_supported : Proc(IMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    query_preferred_format : Proc(IMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_time_format : Proc(IMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_using_time_format : Proc(IMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_time_format : Proc(IMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT),
    get_stop_position : Proc(IMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT),
    get_current_position : Proc(IMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT),
    convert_time_format : Proc(IMediaSeeking*, Int64*, LibC::GUID*, Int64, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_positions : Proc(IMediaSeeking*, Int64*, UInt32, Int64*, UInt32, Win32cr::Foundation::HRESULT),
    get_positions : Proc(IMediaSeeking*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_available : Proc(IMediaSeeking*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_rate : Proc(IMediaSeeking*, Float64, Win32cr::Foundation::HRESULT),
    get_rate : Proc(IMediaSeeking*, Float64*, Win32cr::Foundation::HRESULT),
    get_preroll : Proc(IMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("36b73880-c2c8-11cf-8b46-00805f6cef60")]
  record IMediaSeeking, lpVtbl : IMediaSeekingVtbl* do
    GUID = LibC::GUID.new(0x36b73880_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
    def query_interface(this : IMediaSeeking*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaSeeking*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaSeeking*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capabilities(this : IMediaSeeking*, pCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities.call(this, pCapabilities)
    end
    def check_capabilities(this : IMediaSeeking*, pCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_capabilities.call(this, pCapabilities)
    end
    def is_format_supported(this : IMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_format_supported.call(this, pFormat)
    end
    def query_preferred_format(this : IMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_preferred_format.call(this, pFormat)
    end
    def get_time_format(this : IMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_format.call(this, pFormat)
    end
    def is_using_time_format(this : IMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_time_format.call(this, pFormat)
    end
    def set_time_format(this : IMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time_format.call(this, pFormat)
    end
    def get_duration(this : IMediaSeeking*, pDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def get_stop_position(this : IMediaSeeking*, pStop : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stop_position.call(this, pStop)
    end
    def get_current_position(this : IMediaSeeking*, pCurrent : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_position.call(this, pCurrent)
    end
    def convert_time_format(this : IMediaSeeking*, pTarget : Int64*, pTargetFormat : LibC::GUID*, source : Int64, pSourceFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_time_format.call(this, pTarget, pTargetFormat, source, pSourceFormat)
    end
    def set_positions(this : IMediaSeeking*, pCurrent : Int64*, dwCurrentFlags : UInt32, pStop : Int64*, dwStopFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_positions.call(this, pCurrent, dwCurrentFlags, pStop, dwStopFlags)
    end
    def get_positions(this : IMediaSeeking*, pCurrent : Int64*, pStop : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_positions.call(this, pCurrent, pStop)
    end
    def get_available(this : IMediaSeeking*, pEarliest : Int64*, pLatest : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available.call(this, pEarliest, pLatest)
    end
    def set_rate(this : IMediaSeeking*, dRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rate.call(this, dRate)
    end
    def get_rate(this : IMediaSeeking*, pdRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rate.call(this, pdRate)
    end
    def get_preroll(this : IMediaSeeking*, pllPreroll : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preroll.call(this, pllPreroll)
    end

  end

  @[Extern]
  record IEnumRegFiltersVtbl,
    query_interface : Proc(IEnumRegFilters*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumRegFilters*, UInt32),
    release : Proc(IEnumRegFilters*, UInt32),
    next__ : Proc(IEnumRegFilters*, UInt32, Win32cr::Media::DirectShow::REGFILTER**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumRegFilters*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumRegFilters*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumRegFilters*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a4-0ad4-11ce-b03a-0020af0ba770")]
  record IEnumRegFilters, lpVtbl : IEnumRegFiltersVtbl* do
    GUID = LibC::GUID.new(0x56a868a4_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IEnumRegFilters*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumRegFilters*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumRegFilters*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumRegFilters*, cFilters : UInt32, apRegFilter : Win32cr::Media::DirectShow::REGFILTER**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cFilters, apRegFilter, pcFetched)
    end
    def skip(this : IEnumRegFilters*, cFilters : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cFilters)
    end
    def reset(this : IEnumRegFilters*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumRegFilters*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IFilterMapperVtbl,
    query_interface : Proc(IFilterMapper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterMapper*, UInt32),
    release : Proc(IFilterMapper*, UInt32),
    register_filter : Proc(IFilterMapper*, LibC::GUID, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    register_filter_instance : Proc(IFilterMapper*, LibC::GUID, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    register_pin : Proc(IFilterMapper*, LibC::GUID, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, LibC::GUID, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    register_pin_type : Proc(IFilterMapper*, LibC::GUID, Win32cr::Foundation::PWSTR, LibC::GUID, LibC::GUID, Win32cr::Foundation::HRESULT),
    unregister_filter : Proc(IFilterMapper*, LibC::GUID, Win32cr::Foundation::HRESULT),
    unregister_filter_instance : Proc(IFilterMapper*, LibC::GUID, Win32cr::Foundation::HRESULT),
    unregister_pin : Proc(IFilterMapper*, LibC::GUID, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    enum_matching_filters : Proc(IFilterMapper*, Void**, UInt32, Win32cr::Foundation::BOOL, LibC::GUID, LibC::GUID, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, LibC::GUID, LibC::GUID, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a3-0ad4-11ce-b03a-0020af0ba770")]
  record IFilterMapper, lpVtbl : IFilterMapperVtbl* do
    GUID = LibC::GUID.new(0x56a868a3_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IFilterMapper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterMapper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterMapper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_filter(this : IFilterMapper*, clsid : LibC::GUID, name : Win32cr::Foundation::PWSTR, dwMerit : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_filter.call(this, clsid, name, dwMerit)
    end
    def register_filter_instance(this : IFilterMapper*, clsid : LibC::GUID, name : Win32cr::Foundation::PWSTR, mr_id : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_filter_instance.call(this, clsid, name, mr_id)
    end
    def register_pin(this : IFilterMapper*, filter : LibC::GUID, name : Win32cr::Foundation::PWSTR, bRendered : Win32cr::Foundation::BOOL, bOutput : Win32cr::Foundation::BOOL, bZero : Win32cr::Foundation::BOOL, bMany : Win32cr::Foundation::BOOL, connects_to_filter : LibC::GUID, connects_to_pin : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_pin.call(this, filter, name, bRendered, bOutput, bZero, bMany, connects_to_filter, connects_to_pin)
    end
    def register_pin_type(this : IFilterMapper*, clsFilter : LibC::GUID, strName : Win32cr::Foundation::PWSTR, clsMajorType : LibC::GUID, clsSubType : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_pin_type.call(this, clsFilter, strName, clsMajorType, clsSubType)
    end
    def unregister_filter(this : IFilterMapper*, filter : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_filter.call(this, filter)
    end
    def unregister_filter_instance(this : IFilterMapper*, mr_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_filter_instance.call(this, mr_id)
    end
    def unregister_pin(this : IFilterMapper*, filter : LibC::GUID, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_pin.call(this, filter, name)
    end
    def enum_matching_filters(this : IFilterMapper*, ppEnum : Void**, dwMerit : UInt32, bInputNeeded : Win32cr::Foundation::BOOL, clsInMaj : LibC::GUID, clsInSub : LibC::GUID, bRender : Win32cr::Foundation::BOOL, bOututNeeded : Win32cr::Foundation::BOOL, clsOutMaj : LibC::GUID, clsOutSub : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_matching_filters.call(this, ppEnum, dwMerit, bInputNeeded, clsInMaj, clsInSub, bRender, bOututNeeded, clsOutMaj, clsOutSub)
    end

  end

  @[Extern]
  record IFilterMapper2Vtbl,
    query_interface : Proc(IFilterMapper2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterMapper2*, UInt32),
    release : Proc(IFilterMapper2*, UInt32),
    create_category : Proc(IFilterMapper2*, LibC::GUID*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    unregister_filter : Proc(IFilterMapper2*, LibC::GUID*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    register_filter : Proc(IFilterMapper2*, LibC::GUID*, Win32cr::Foundation::PWSTR, Void**, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Media::DirectShow::REGFILTER2*, Win32cr::Foundation::HRESULT),
    enum_matching_filters : Proc(IFilterMapper2*, Void**, UInt32, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::BOOL, UInt32, LibC::GUID*, Win32cr::Media::DirectShow::REGPINMEDIUM*, LibC::GUID*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, UInt32, LibC::GUID*, Win32cr::Media::DirectShow::REGPINMEDIUM*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b79bb0b0-33c1-11d1-abe1-00a0c905f375")]
  record IFilterMapper2, lpVtbl : IFilterMapper2Vtbl* do
    GUID = LibC::GUID.new(0xb79bb0b0_u32, 0x33c1_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IFilterMapper2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterMapper2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterMapper2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_category(this : IFilterMapper2*, clsidCategory : LibC::GUID*, dwCategoryMerit : UInt32, description : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_category.call(this, clsidCategory, dwCategoryMerit, description)
    end
    def unregister_filter(this : IFilterMapper2*, pclsidCategory : LibC::GUID*, szInstance : Win32cr::Foundation::PWSTR, filter : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_filter.call(this, pclsidCategory, szInstance, filter)
    end
    def register_filter(this : IFilterMapper2*, clsidFilter : LibC::GUID*, name : Win32cr::Foundation::PWSTR, ppMoniker : Void**, pclsidCategory : LibC::GUID*, szInstance : Win32cr::Foundation::PWSTR, prf2 : Win32cr::Media::DirectShow::REGFILTER2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_filter.call(this, clsidFilter, name, ppMoniker, pclsidCategory, szInstance, prf2)
    end
    def enum_matching_filters(this : IFilterMapper2*, ppEnum : Void**, dwFlags : UInt32, bExactMatch : Win32cr::Foundation::BOOL, dwMerit : UInt32, bInputNeeded : Win32cr::Foundation::BOOL, cInputTypes : UInt32, pInputTypes : LibC::GUID*, pMedIn : Win32cr::Media::DirectShow::REGPINMEDIUM*, pPinCategoryIn : LibC::GUID*, bRender : Win32cr::Foundation::BOOL, bOutputNeeded : Win32cr::Foundation::BOOL, cOutputTypes : UInt32, pOutputTypes : LibC::GUID*, pMedOut : Win32cr::Media::DirectShow::REGPINMEDIUM*, pPinCategoryOut : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_matching_filters.call(this, ppEnum, dwFlags, bExactMatch, dwMerit, bInputNeeded, cInputTypes, pInputTypes, pMedIn, pPinCategoryIn, bRender, bOutputNeeded, cOutputTypes, pOutputTypes, pMedOut, pPinCategoryOut)
    end

  end

  @[Extern]
  record IFilterMapper3Vtbl,
    query_interface : Proc(IFilterMapper3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterMapper3*, UInt32),
    release : Proc(IFilterMapper3*, UInt32),
    create_category : Proc(IFilterMapper3*, LibC::GUID*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    unregister_filter : Proc(IFilterMapper3*, LibC::GUID*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    register_filter : Proc(IFilterMapper3*, LibC::GUID*, Win32cr::Foundation::PWSTR, Void**, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Media::DirectShow::REGFILTER2*, Win32cr::Foundation::HRESULT),
    enum_matching_filters : Proc(IFilterMapper3*, Void**, UInt32, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::BOOL, UInt32, LibC::GUID*, Win32cr::Media::DirectShow::REGPINMEDIUM*, LibC::GUID*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, UInt32, LibC::GUID*, Win32cr::Media::DirectShow::REGPINMEDIUM*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_i_create_dev_enum : Proc(IFilterMapper3*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b79bb0b1-33c1-11d1-abe1-00a0c905f375")]
  record IFilterMapper3, lpVtbl : IFilterMapper3Vtbl* do
    GUID = LibC::GUID.new(0xb79bb0b1_u32, 0x33c1_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IFilterMapper3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterMapper3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterMapper3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_category(this : IFilterMapper3*, clsidCategory : LibC::GUID*, dwCategoryMerit : UInt32, description : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_category.call(this, clsidCategory, dwCategoryMerit, description)
    end
    def unregister_filter(this : IFilterMapper3*, pclsidCategory : LibC::GUID*, szInstance : Win32cr::Foundation::PWSTR, filter : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_filter.call(this, pclsidCategory, szInstance, filter)
    end
    def register_filter(this : IFilterMapper3*, clsidFilter : LibC::GUID*, name : Win32cr::Foundation::PWSTR, ppMoniker : Void**, pclsidCategory : LibC::GUID*, szInstance : Win32cr::Foundation::PWSTR, prf2 : Win32cr::Media::DirectShow::REGFILTER2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_filter.call(this, clsidFilter, name, ppMoniker, pclsidCategory, szInstance, prf2)
    end
    def enum_matching_filters(this : IFilterMapper3*, ppEnum : Void**, dwFlags : UInt32, bExactMatch : Win32cr::Foundation::BOOL, dwMerit : UInt32, bInputNeeded : Win32cr::Foundation::BOOL, cInputTypes : UInt32, pInputTypes : LibC::GUID*, pMedIn : Win32cr::Media::DirectShow::REGPINMEDIUM*, pPinCategoryIn : LibC::GUID*, bRender : Win32cr::Foundation::BOOL, bOutputNeeded : Win32cr::Foundation::BOOL, cOutputTypes : UInt32, pOutputTypes : LibC::GUID*, pMedOut : Win32cr::Media::DirectShow::REGPINMEDIUM*, pPinCategoryOut : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_matching_filters.call(this, ppEnum, dwFlags, bExactMatch, dwMerit, bInputNeeded, cInputTypes, pInputTypes, pMedIn, pPinCategoryIn, bRender, bOutputNeeded, cOutputTypes, pOutputTypes, pMedOut, pPinCategoryOut)
    end
    def get_i_create_dev_enum(this : IFilterMapper3*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_create_dev_enum.call(this, ppEnum)
    end

  end

  @[Extern]
  record IQualityControlVtbl,
    query_interface : Proc(IQualityControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQualityControl*, UInt32),
    release : Proc(IQualityControl*, UInt32),
    notify : Proc(IQualityControl*, Void*, Win32cr::Media::DirectShow::Quality, Win32cr::Foundation::HRESULT),
    set_sink : Proc(IQualityControl*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a5-0ad4-11ce-b03a-0020af0ba770")]
  record IQualityControl, lpVtbl : IQualityControlVtbl* do
    GUID = LibC::GUID.new(0x56a868a5_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IQualityControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQualityControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQualityControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify(this : IQualityControl*, pSelf : Void*, q : Win32cr::Media::DirectShow::Quality) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, pSelf, q)
    end
    def set_sink(this : IQualityControl*, piqc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sink.call(this, piqc)
    end

  end

  @[Extern]
  record IOverlayNotifyVtbl,
    query_interface : Proc(IOverlayNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOverlayNotify*, UInt32),
    release : Proc(IOverlayNotify*, UInt32),
    on_palette_change : Proc(IOverlayNotify*, UInt32, Win32cr::Graphics::Gdi::PALETTEENTRY*, Win32cr::Foundation::HRESULT),
    on_clip_change : Proc(IOverlayNotify*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Graphics::Gdi::RGNDATA*, Win32cr::Foundation::HRESULT),
    on_color_key_change : Proc(IOverlayNotify*, Win32cr::Media::DirectShow::COLORKEY*, Win32cr::Foundation::HRESULT),
    on_position_change : Proc(IOverlayNotify*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a0-0ad4-11ce-b03a-0020af0ba770")]
  record IOverlayNotify, lpVtbl : IOverlayNotifyVtbl* do
    GUID = LibC::GUID.new(0x56a868a0_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IOverlayNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOverlayNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOverlayNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_palette_change(this : IOverlayNotify*, dwColors : UInt32, pPalette : Win32cr::Graphics::Gdi::PALETTEENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_palette_change.call(this, dwColors, pPalette)
    end
    def on_clip_change(this : IOverlayNotify*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationRect : Win32cr::Foundation::RECT*, pRgnData : Win32cr::Graphics::Gdi::RGNDATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clip_change.call(this, pSourceRect, pDestinationRect, pRgnData)
    end
    def on_color_key_change(this : IOverlayNotify*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_color_key_change.call(this, pColorKey)
    end
    def on_position_change(this : IOverlayNotify*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_position_change.call(this, pSourceRect, pDestinationRect)
    end

  end

  @[Extern]
  record IOverlayNotify2Vtbl,
    query_interface : Proc(IOverlayNotify2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOverlayNotify2*, UInt32),
    release : Proc(IOverlayNotify2*, UInt32),
    on_palette_change : Proc(IOverlayNotify2*, UInt32, Win32cr::Graphics::Gdi::PALETTEENTRY*, Win32cr::Foundation::HRESULT),
    on_clip_change : Proc(IOverlayNotify2*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Graphics::Gdi::RGNDATA*, Win32cr::Foundation::HRESULT),
    on_color_key_change : Proc(IOverlayNotify2*, Win32cr::Media::DirectShow::COLORKEY*, Win32cr::Foundation::HRESULT),
    on_position_change : Proc(IOverlayNotify2*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    on_display_change : Proc(IOverlayNotify2*, Win32cr::Graphics::Gdi::HMONITOR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("680efa10-d535-11d1-87c8-00a0c9223196")]
  record IOverlayNotify2, lpVtbl : IOverlayNotify2Vtbl* do
    GUID = LibC::GUID.new(0x680efa10_u32, 0xd535_u16, 0x11d1_u16, StaticArray[0x87_u8, 0xc8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x22_u8, 0x31_u8, 0x96_u8])
    def query_interface(this : IOverlayNotify2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOverlayNotify2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOverlayNotify2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_palette_change(this : IOverlayNotify2*, dwColors : UInt32, pPalette : Win32cr::Graphics::Gdi::PALETTEENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_palette_change.call(this, dwColors, pPalette)
    end
    def on_clip_change(this : IOverlayNotify2*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationRect : Win32cr::Foundation::RECT*, pRgnData : Win32cr::Graphics::Gdi::RGNDATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clip_change.call(this, pSourceRect, pDestinationRect, pRgnData)
    end
    def on_color_key_change(this : IOverlayNotify2*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_color_key_change.call(this, pColorKey)
    end
    def on_position_change(this : IOverlayNotify2*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_position_change.call(this, pSourceRect, pDestinationRect)
    end
    def on_display_change(this : IOverlayNotify2*, hMonitor : Win32cr::Graphics::Gdi::HMONITOR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_display_change.call(this, hMonitor)
    end

  end

  @[Extern]
  record IOverlayVtbl,
    query_interface : Proc(IOverlay*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOverlay*, UInt32),
    release : Proc(IOverlay*, UInt32),
    get_palette : Proc(IOverlay*, UInt32*, Win32cr::Graphics::Gdi::PALETTEENTRY**, Win32cr::Foundation::HRESULT),
    set_palette : Proc(IOverlay*, UInt32, Win32cr::Graphics::Gdi::PALETTEENTRY*, Win32cr::Foundation::HRESULT),
    get_default_color_key : Proc(IOverlay*, Win32cr::Media::DirectShow::COLORKEY*, Win32cr::Foundation::HRESULT),
    get_color_key : Proc(IOverlay*, Win32cr::Media::DirectShow::COLORKEY*, Win32cr::Foundation::HRESULT),
    set_color_key : Proc(IOverlay*, Win32cr::Media::DirectShow::COLORKEY*, Win32cr::Foundation::HRESULT),
    get_window_handle : Proc(IOverlay*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    get_clip_list : Proc(IOverlay*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Graphics::Gdi::RGNDATA**, Win32cr::Foundation::HRESULT),
    get_video_position : Proc(IOverlay*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    advise : Proc(IOverlay*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    unadvise : Proc(IOverlay*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a1-0ad4-11ce-b03a-0020af0ba770")]
  record IOverlay, lpVtbl : IOverlayVtbl* do
    GUID = LibC::GUID.new(0x56a868a1_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IOverlay*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOverlay*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOverlay*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_palette(this : IOverlay*, pdwColors : UInt32*, ppPalette : Win32cr::Graphics::Gdi::PALETTEENTRY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_palette.call(this, pdwColors, ppPalette)
    end
    def set_palette(this : IOverlay*, dwColors : UInt32, pPalette : Win32cr::Graphics::Gdi::PALETTEENTRY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_palette.call(this, dwColors, pPalette)
    end
    def get_default_color_key(this : IOverlay*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_color_key.call(this, pColorKey)
    end
    def get_color_key(this : IOverlay*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_key.call(this, pColorKey)
    end
    def set_color_key(this : IOverlay*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color_key.call(this, pColorKey)
    end
    def get_window_handle(this : IOverlay*, pHwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window_handle.call(this, pHwnd)
    end
    def get_clip_list(this : IOverlay*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationRect : Win32cr::Foundation::RECT*, ppRgnData : Win32cr::Graphics::Gdi::RGNDATA**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_list.call(this, pSourceRect, pDestinationRect, ppRgnData)
    end
    def get_video_position(this : IOverlay*, pSourceRect : Win32cr::Foundation::RECT*, pDestinationRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_position.call(this, pSourceRect, pDestinationRect)
    end
    def advise(this : IOverlay*, pOverlayNotify : Void*, dwInterests : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise.call(this, pOverlayNotify, dwInterests)
    end
    def unadvise(this : IOverlay*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unadvise.call(this)
    end

  end

  @[Extern]
  record IMediaEventSinkVtbl,
    query_interface : Proc(IMediaEventSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaEventSink*, UInt32),
    release : Proc(IMediaEventSink*, UInt32),
    notify : Proc(IMediaEventSink*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a2-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaEventSink, lpVtbl : IMediaEventSinkVtbl* do
    GUID = LibC::GUID.new(0x56a868a2_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaEventSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaEventSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaEventSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify(this : IMediaEventSink*, event_code : Int32, event_param1 : LibC::IntPtrT, event_param2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, event_code, event_param1, event_param2)
    end

  end

  @[Extern]
  record IFileSourceFilterVtbl,
    query_interface : Proc(IFileSourceFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSourceFilter*, UInt32),
    release : Proc(IFileSourceFilter*, UInt32),
    load : Proc(IFileSourceFilter*, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    get_cur_file : Proc(IFileSourceFilter*, Win32cr::Foundation::PWSTR*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a6-0ad4-11ce-b03a-0020af0ba770")]
  record IFileSourceFilter, lpVtbl : IFileSourceFilterVtbl* do
    GUID = LibC::GUID.new(0x56a868a6_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IFileSourceFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSourceFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSourceFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def load(this : IFileSourceFilter*, pszFileName : Win32cr::Foundation::PWSTR, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, pszFileName, pmt)
    end
    def get_cur_file(this : IFileSourceFilter*, ppszFileName : Win32cr::Foundation::PWSTR*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cur_file.call(this, ppszFileName, pmt)
    end

  end

  @[Extern]
  record IFileSinkFilterVtbl,
    query_interface : Proc(IFileSinkFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSinkFilter*, UInt32),
    release : Proc(IFileSinkFilter*, UInt32),
    set_file_name : Proc(IFileSinkFilter*, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    get_cur_file : Proc(IFileSinkFilter*, Win32cr::Foundation::PWSTR*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a2104830-7c70-11cf-8bce-00aa00a3f1a6")]
  record IFileSinkFilter, lpVtbl : IFileSinkFilterVtbl* do
    GUID = LibC::GUID.new(0xa2104830_u32, 0x7c70_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0xce_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xa3_u8, 0xf1_u8, 0xa6_u8])
    def query_interface(this : IFileSinkFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSinkFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSinkFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_file_name(this : IFileSinkFilter*, pszFileName : Win32cr::Foundation::PWSTR, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_file_name.call(this, pszFileName, pmt)
    end
    def get_cur_file(this : IFileSinkFilter*, ppszFileName : Win32cr::Foundation::PWSTR*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cur_file.call(this, ppszFileName, pmt)
    end

  end

  @[Extern]
  record IFileSinkFilter2Vtbl,
    query_interface : Proc(IFileSinkFilter2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSinkFilter2*, UInt32),
    release : Proc(IFileSinkFilter2*, UInt32),
    set_file_name : Proc(IFileSinkFilter2*, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    get_cur_file : Proc(IFileSinkFilter2*, Win32cr::Foundation::PWSTR*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    set_mode : Proc(IFileSinkFilter2*, UInt32, Win32cr::Foundation::HRESULT),
    get_mode : Proc(IFileSinkFilter2*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("00855b90-ce1b-11d0-bd4f-00a0c911ce86")]
  record IFileSinkFilter2, lpVtbl : IFileSinkFilter2Vtbl* do
    GUID = LibC::GUID.new(0x855b90_u32, 0xce1b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x4f_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
    def query_interface(this : IFileSinkFilter2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSinkFilter2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSinkFilter2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_file_name(this : IFileSinkFilter2*, pszFileName : Win32cr::Foundation::PWSTR, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_file_name.call(this, pszFileName, pmt)
    end
    def get_cur_file(this : IFileSinkFilter2*, ppszFileName : Win32cr::Foundation::PWSTR*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cur_file.call(this, ppszFileName, pmt)
    end
    def set_mode(this : IFileSinkFilter2*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mode.call(this, dwFlags)
    end
    def get_mode(this : IFileSinkFilter2*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mode.call(this, pdwFlags)
    end

  end

  @[Extern]
  record IGraphBuilderVtbl,
    query_interface : Proc(IGraphBuilder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGraphBuilder*, UInt32),
    release : Proc(IGraphBuilder*, UInt32),
    add_filter : Proc(IGraphBuilder*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    remove_filter : Proc(IGraphBuilder*, Void*, Win32cr::Foundation::HRESULT),
    enum_filters : Proc(IGraphBuilder*, Void**, Win32cr::Foundation::HRESULT),
    find_filter_by_name : Proc(IGraphBuilder*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    connect_direct : Proc(IGraphBuilder*, Void*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    reconnect : Proc(IGraphBuilder*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IGraphBuilder*, Void*, Win32cr::Foundation::HRESULT),
    set_default_sync_source : Proc(IGraphBuilder*, Win32cr::Foundation::HRESULT),
    connect : Proc(IGraphBuilder*, Void*, Void*, Win32cr::Foundation::HRESULT),
    render : Proc(IGraphBuilder*, Void*, Win32cr::Foundation::HRESULT),
    render_file : Proc(IGraphBuilder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_source_filter : Proc(IGraphBuilder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    set_log_file : Proc(IGraphBuilder*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    abort : Proc(IGraphBuilder*, Win32cr::Foundation::HRESULT),
    should_operation_continue : Proc(IGraphBuilder*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868a9-0ad4-11ce-b03a-0020af0ba770")]
  record IGraphBuilder, lpVtbl : IGraphBuilderVtbl* do
    GUID = LibC::GUID.new(0x56a868a9_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IGraphBuilder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGraphBuilder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGraphBuilder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_filter(this : IGraphBuilder*, pFilter : Void*, pName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_filter.call(this, pFilter, pName)
    end
    def remove_filter(this : IGraphBuilder*, pFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_filter.call(this, pFilter)
    end
    def enum_filters(this : IGraphBuilder*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_filters.call(this, ppEnum)
    end
    def find_filter_by_name(this : IGraphBuilder*, pName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_filter_by_name.call(this, pName, ppFilter)
    end
    def connect_direct(this : IGraphBuilder*, ppinOut : Void*, ppinIn : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_direct.call(this, ppinOut, ppinIn, pmt)
    end
    def reconnect(this : IGraphBuilder*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconnect.call(this, ppin)
    end
    def disconnect(this : IGraphBuilder*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this, ppin)
    end
    def set_default_sync_source(this : IGraphBuilder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_sync_source.call(this)
    end
    def connect(this : IGraphBuilder*, ppinOut : Void*, ppinIn : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, ppinOut, ppinIn)
    end
    def render(this : IGraphBuilder*, ppinOut : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, ppinOut)
    end
    def render_file(this : IGraphBuilder*, lpcwstrFile : Win32cr::Foundation::PWSTR, lpcwstrPlayList : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_file.call(this, lpcwstrFile, lpcwstrPlayList)
    end
    def add_source_filter(this : IGraphBuilder*, lpcwstrFileName : Win32cr::Foundation::PWSTR, lpcwstrFilterName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_source_filter.call(this, lpcwstrFileName, lpcwstrFilterName, ppFilter)
    end
    def set_log_file(this : IGraphBuilder*, hFile : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_file.call(this, hFile)
    end
    def abort(this : IGraphBuilder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def should_operation_continue(this : IGraphBuilder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.should_operation_continue.call(this)
    end

  end

  @[Extern]
  record ICaptureGraphBuilderVtbl,
    query_interface : Proc(ICaptureGraphBuilder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICaptureGraphBuilder*, UInt32),
    release : Proc(ICaptureGraphBuilder*, UInt32),
    set_filtergraph : Proc(ICaptureGraphBuilder*, Void*, Win32cr::Foundation::HRESULT),
    get_filtergraph : Proc(ICaptureGraphBuilder*, Void**, Win32cr::Foundation::HRESULT),
    set_output_file_name : Proc(ICaptureGraphBuilder*, LibC::GUID*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    find_interface : Proc(ICaptureGraphBuilder*, LibC::GUID*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    render_stream : Proc(ICaptureGraphBuilder*, LibC::GUID*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    control_stream : Proc(ICaptureGraphBuilder*, LibC::GUID*, Void*, Int64*, Int64*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    alloc_cap_file : Proc(ICaptureGraphBuilder*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    copy_capture_file : Proc(ICaptureGraphBuilder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Int32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bf87b6e0-8c27-11d0-b3f0-00aa003761c5")]
  record ICaptureGraphBuilder, lpVtbl : ICaptureGraphBuilderVtbl* do
    GUID = LibC::GUID.new(0xbf87b6e0_u32, 0x8c27_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
    def query_interface(this : ICaptureGraphBuilder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICaptureGraphBuilder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICaptureGraphBuilder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_filtergraph(this : ICaptureGraphBuilder*, pfg : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_filtergraph.call(this, pfg)
    end
    def get_filtergraph(this : ICaptureGraphBuilder*, ppfg : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filtergraph.call(this, ppfg)
    end
    def set_output_file_name(this : ICaptureGraphBuilder*, pType : LibC::GUID*, lpstrFile : Win32cr::Foundation::PWSTR, ppf : Void**, ppSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_file_name.call(this, pType, lpstrFile, ppf, ppSink)
    end
    def find_interface(this : ICaptureGraphBuilder*, pCategory : LibC::GUID*, pf : Void*, riid : LibC::GUID*, ppint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_interface.call(this, pCategory, pf, riid, ppint)
    end
    def render_stream(this : ICaptureGraphBuilder*, pCategory : LibC::GUID*, pSource : Void*, pfCompressor : Void*, pfRenderer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_stream.call(this, pCategory, pSource, pfCompressor, pfRenderer)
    end
    def control_stream(this : ICaptureGraphBuilder*, pCategory : LibC::GUID*, pFilter : Void*, pstart : Int64*, pstop : Int64*, wStartCookie : UInt16, wStopCookie : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.control_stream.call(this, pCategory, pFilter, pstart, pstop, wStartCookie, wStopCookie)
    end
    def alloc_cap_file(this : ICaptureGraphBuilder*, lpstr : Win32cr::Foundation::PWSTR, dwlSize : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alloc_cap_file.call(this, lpstr, dwlSize)
    end
    def copy_capture_file(this : ICaptureGraphBuilder*, lpwstrOld : Win32cr::Foundation::PWSTR, lpwstrNew : Win32cr::Foundation::PWSTR, fAllowEscAbort : Int32, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_capture_file.call(this, lpwstrOld, lpwstrNew, fAllowEscAbort, pCallback)
    end

  end

  @[Extern]
  record IAMCopyCaptureFileProgressVtbl,
    query_interface : Proc(IAMCopyCaptureFileProgress*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMCopyCaptureFileProgress*, UInt32),
    release : Proc(IAMCopyCaptureFileProgress*, UInt32),
    progress : Proc(IAMCopyCaptureFileProgress*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("670d1d20-a068-11d0-b3f0-00aa003761c5")]
  record IAMCopyCaptureFileProgress, lpVtbl : IAMCopyCaptureFileProgressVtbl* do
    GUID = LibC::GUID.new(0x670d1d20_u32, 0xa068_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
    def query_interface(this : IAMCopyCaptureFileProgress*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMCopyCaptureFileProgress*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMCopyCaptureFileProgress*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def progress(this : IAMCopyCaptureFileProgress*, iProgress : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.progress.call(this, iProgress)
    end

  end

  @[Extern]
  record ICaptureGraphBuilder2Vtbl,
    query_interface : Proc(ICaptureGraphBuilder2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICaptureGraphBuilder2*, UInt32),
    release : Proc(ICaptureGraphBuilder2*, UInt32),
    set_filtergraph : Proc(ICaptureGraphBuilder2*, Void*, Win32cr::Foundation::HRESULT),
    get_filtergraph : Proc(ICaptureGraphBuilder2*, Void**, Win32cr::Foundation::HRESULT),
    set_output_file_name : Proc(ICaptureGraphBuilder2*, LibC::GUID*, Win32cr::Foundation::PWSTR, Void**, Void**, Win32cr::Foundation::HRESULT),
    find_interface : Proc(ICaptureGraphBuilder2*, LibC::GUID*, LibC::GUID*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    render_stream : Proc(ICaptureGraphBuilder2*, LibC::GUID*, LibC::GUID*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    control_stream : Proc(ICaptureGraphBuilder2*, LibC::GUID*, LibC::GUID*, Void*, Int64*, Int64*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    alloc_cap_file : Proc(ICaptureGraphBuilder2*, Win32cr::Foundation::PWSTR, UInt64, Win32cr::Foundation::HRESULT),
    copy_capture_file : Proc(ICaptureGraphBuilder2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Int32, Void*, Win32cr::Foundation::HRESULT),
    find_pin : Proc(ICaptureGraphBuilder2*, Void*, Win32cr::Media::DirectShow::PIN_DIRECTION, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::BOOL, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("93e5a4e0-2d50-11d2-abfa-00a0c9c6e38d")]
  record ICaptureGraphBuilder2, lpVtbl : ICaptureGraphBuilder2Vtbl* do
    GUID = LibC::GUID.new(0x93e5a4e0_u32, 0x2d50_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xfa_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xc6_u8, 0xe3_u8, 0x8d_u8])
    def query_interface(this : ICaptureGraphBuilder2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICaptureGraphBuilder2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICaptureGraphBuilder2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_filtergraph(this : ICaptureGraphBuilder2*, pfg : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_filtergraph.call(this, pfg)
    end
    def get_filtergraph(this : ICaptureGraphBuilder2*, ppfg : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filtergraph.call(this, ppfg)
    end
    def set_output_file_name(this : ICaptureGraphBuilder2*, pType : LibC::GUID*, lpstrFile : Win32cr::Foundation::PWSTR, ppf : Void**, ppSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_file_name.call(this, pType, lpstrFile, ppf, ppSink)
    end
    def find_interface(this : ICaptureGraphBuilder2*, pCategory : LibC::GUID*, pType : LibC::GUID*, pf : Void*, riid : LibC::GUID*, ppint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_interface.call(this, pCategory, pType, pf, riid, ppint)
    end
    def render_stream(this : ICaptureGraphBuilder2*, pCategory : LibC::GUID*, pType : LibC::GUID*, pSource : Void*, pfCompressor : Void*, pfRenderer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_stream.call(this, pCategory, pType, pSource, pfCompressor, pfRenderer)
    end
    def control_stream(this : ICaptureGraphBuilder2*, pCategory : LibC::GUID*, pType : LibC::GUID*, pFilter : Void*, pstart : Int64*, pstop : Int64*, wStartCookie : UInt16, wStopCookie : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.control_stream.call(this, pCategory, pType, pFilter, pstart, pstop, wStartCookie, wStopCookie)
    end
    def alloc_cap_file(this : ICaptureGraphBuilder2*, lpstr : Win32cr::Foundation::PWSTR, dwlSize : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alloc_cap_file.call(this, lpstr, dwlSize)
    end
    def copy_capture_file(this : ICaptureGraphBuilder2*, lpwstrOld : Win32cr::Foundation::PWSTR, lpwstrNew : Win32cr::Foundation::PWSTR, fAllowEscAbort : Int32, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_capture_file.call(this, lpwstrOld, lpwstrNew, fAllowEscAbort, pCallback)
    end
    def find_pin(this : ICaptureGraphBuilder2*, pSource : Void*, pindir : Win32cr::Media::DirectShow::PIN_DIRECTION, pCategory : LibC::GUID*, pType : LibC::GUID*, fUnconnected : Win32cr::Foundation::BOOL, num : Int32, ppPin : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_pin.call(this, pSource, pindir, pCategory, pType, fUnconnected, num, ppPin)
    end

  end

  @[Extern]
  record IFilterGraph2Vtbl,
    query_interface : Proc(IFilterGraph2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterGraph2*, UInt32),
    release : Proc(IFilterGraph2*, UInt32),
    add_filter : Proc(IFilterGraph2*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    remove_filter : Proc(IFilterGraph2*, Void*, Win32cr::Foundation::HRESULT),
    enum_filters : Proc(IFilterGraph2*, Void**, Win32cr::Foundation::HRESULT),
    find_filter_by_name : Proc(IFilterGraph2*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    connect_direct : Proc(IFilterGraph2*, Void*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    reconnect : Proc(IFilterGraph2*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IFilterGraph2*, Void*, Win32cr::Foundation::HRESULT),
    set_default_sync_source : Proc(IFilterGraph2*, Win32cr::Foundation::HRESULT),
    connect : Proc(IFilterGraph2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    render : Proc(IFilterGraph2*, Void*, Win32cr::Foundation::HRESULT),
    render_file : Proc(IFilterGraph2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_source_filter : Proc(IFilterGraph2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    set_log_file : Proc(IFilterGraph2*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    abort : Proc(IFilterGraph2*, Win32cr::Foundation::HRESULT),
    should_operation_continue : Proc(IFilterGraph2*, Win32cr::Foundation::HRESULT),
    add_source_filter_for_moniker : Proc(IFilterGraph2*, Void*, Void*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    reconnect_ex : Proc(IFilterGraph2*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    render_ex : Proc(IFilterGraph2*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("36b73882-c2c8-11cf-8b46-00805f6cef60")]
  record IFilterGraph2, lpVtbl : IFilterGraph2Vtbl* do
    GUID = LibC::GUID.new(0x36b73882_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
    def query_interface(this : IFilterGraph2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterGraph2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterGraph2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_filter(this : IFilterGraph2*, pFilter : Void*, pName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_filter.call(this, pFilter, pName)
    end
    def remove_filter(this : IFilterGraph2*, pFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_filter.call(this, pFilter)
    end
    def enum_filters(this : IFilterGraph2*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_filters.call(this, ppEnum)
    end
    def find_filter_by_name(this : IFilterGraph2*, pName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_filter_by_name.call(this, pName, ppFilter)
    end
    def connect_direct(this : IFilterGraph2*, ppinOut : Void*, ppinIn : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_direct.call(this, ppinOut, ppinIn, pmt)
    end
    def reconnect(this : IFilterGraph2*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconnect.call(this, ppin)
    end
    def disconnect(this : IFilterGraph2*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this, ppin)
    end
    def set_default_sync_source(this : IFilterGraph2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_sync_source.call(this)
    end
    def connect(this : IFilterGraph2*, ppinOut : Void*, ppinIn : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, ppinOut, ppinIn)
    end
    def render(this : IFilterGraph2*, ppinOut : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, ppinOut)
    end
    def render_file(this : IFilterGraph2*, lpcwstrFile : Win32cr::Foundation::PWSTR, lpcwstrPlayList : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_file.call(this, lpcwstrFile, lpcwstrPlayList)
    end
    def add_source_filter(this : IFilterGraph2*, lpcwstrFileName : Win32cr::Foundation::PWSTR, lpcwstrFilterName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_source_filter.call(this, lpcwstrFileName, lpcwstrFilterName, ppFilter)
    end
    def set_log_file(this : IFilterGraph2*, hFile : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_file.call(this, hFile)
    end
    def abort(this : IFilterGraph2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def should_operation_continue(this : IFilterGraph2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.should_operation_continue.call(this)
    end
    def add_source_filter_for_moniker(this : IFilterGraph2*, pMoniker : Void*, pCtx : Void*, lpcwstrFilterName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_source_filter_for_moniker.call(this, pMoniker, pCtx, lpcwstrFilterName, ppFilter)
    end
    def reconnect_ex(this : IFilterGraph2*, ppin : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconnect_ex.call(this, ppin, pmt)
    end
    def render_ex(this : IFilterGraph2*, pPinOut : Void*, dwFlags : UInt32, pvContext : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_ex.call(this, pPinOut, dwFlags, pvContext)
    end

  end

  @[Extern]
  record IFilterGraph3Vtbl,
    query_interface : Proc(IFilterGraph3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterGraph3*, UInt32),
    release : Proc(IFilterGraph3*, UInt32),
    add_filter : Proc(IFilterGraph3*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    remove_filter : Proc(IFilterGraph3*, Void*, Win32cr::Foundation::HRESULT),
    enum_filters : Proc(IFilterGraph3*, Void**, Win32cr::Foundation::HRESULT),
    find_filter_by_name : Proc(IFilterGraph3*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    connect_direct : Proc(IFilterGraph3*, Void*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    reconnect : Proc(IFilterGraph3*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IFilterGraph3*, Void*, Win32cr::Foundation::HRESULT),
    set_default_sync_source : Proc(IFilterGraph3*, Win32cr::Foundation::HRESULT),
    connect : Proc(IFilterGraph3*, Void*, Void*, Win32cr::Foundation::HRESULT),
    render : Proc(IFilterGraph3*, Void*, Win32cr::Foundation::HRESULT),
    render_file : Proc(IFilterGraph3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_source_filter : Proc(IFilterGraph3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    set_log_file : Proc(IFilterGraph3*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    abort : Proc(IFilterGraph3*, Win32cr::Foundation::HRESULT),
    should_operation_continue : Proc(IFilterGraph3*, Win32cr::Foundation::HRESULT),
    add_source_filter_for_moniker : Proc(IFilterGraph3*, Void*, Void*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    reconnect_ex : Proc(IFilterGraph3*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    render_ex : Proc(IFilterGraph3*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_sync_source_ex : Proc(IFilterGraph3*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aaf38154-b80b-422f-91e6-b66467509a07")]
  record IFilterGraph3, lpVtbl : IFilterGraph3Vtbl* do
    GUID = LibC::GUID.new(0xaaf38154_u32, 0xb80b_u16, 0x422f_u16, StaticArray[0x91_u8, 0xe6_u8, 0xb6_u8, 0x64_u8, 0x67_u8, 0x50_u8, 0x9a_u8, 0x7_u8])
    def query_interface(this : IFilterGraph3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterGraph3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterGraph3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_filter(this : IFilterGraph3*, pFilter : Void*, pName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_filter.call(this, pFilter, pName)
    end
    def remove_filter(this : IFilterGraph3*, pFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_filter.call(this, pFilter)
    end
    def enum_filters(this : IFilterGraph3*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_filters.call(this, ppEnum)
    end
    def find_filter_by_name(this : IFilterGraph3*, pName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_filter_by_name.call(this, pName, ppFilter)
    end
    def connect_direct(this : IFilterGraph3*, ppinOut : Void*, ppinIn : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_direct.call(this, ppinOut, ppinIn, pmt)
    end
    def reconnect(this : IFilterGraph3*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconnect.call(this, ppin)
    end
    def disconnect(this : IFilterGraph3*, ppin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this, ppin)
    end
    def set_default_sync_source(this : IFilterGraph3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_sync_source.call(this)
    end
    def connect(this : IFilterGraph3*, ppinOut : Void*, ppinIn : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, ppinOut, ppinIn)
    end
    def render(this : IFilterGraph3*, ppinOut : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, ppinOut)
    end
    def render_file(this : IFilterGraph3*, lpcwstrFile : Win32cr::Foundation::PWSTR, lpcwstrPlayList : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_file.call(this, lpcwstrFile, lpcwstrPlayList)
    end
    def add_source_filter(this : IFilterGraph3*, lpcwstrFileName : Win32cr::Foundation::PWSTR, lpcwstrFilterName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_source_filter.call(this, lpcwstrFileName, lpcwstrFilterName, ppFilter)
    end
    def set_log_file(this : IFilterGraph3*, hFile : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_log_file.call(this, hFile)
    end
    def abort(this : IFilterGraph3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def should_operation_continue(this : IFilterGraph3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.should_operation_continue.call(this)
    end
    def add_source_filter_for_moniker(this : IFilterGraph3*, pMoniker : Void*, pCtx : Void*, lpcwstrFilterName : Win32cr::Foundation::PWSTR, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_source_filter_for_moniker.call(this, pMoniker, pCtx, lpcwstrFilterName, ppFilter)
    end
    def reconnect_ex(this : IFilterGraph3*, ppin : Void*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconnect_ex.call(this, ppin, pmt)
    end
    def render_ex(this : IFilterGraph3*, pPinOut : Void*, dwFlags : UInt32, pvContext : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_ex.call(this, pPinOut, dwFlags, pvContext)
    end
    def set_sync_source_ex(this : IFilterGraph3*, pClockForMostOfFilterGraph : Void*, pClockForFilter : Void*, pFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_source_ex.call(this, pClockForMostOfFilterGraph, pClockForFilter, pFilter)
    end

  end

  @[Extern]
  record IStreamBuilderVtbl,
    query_interface : Proc(IStreamBuilder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBuilder*, UInt32),
    release : Proc(IStreamBuilder*, UInt32),
    render : Proc(IStreamBuilder*, Void*, Void*, Win32cr::Foundation::HRESULT),
    backout : Proc(IStreamBuilder*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868bf-0ad4-11ce-b03a-0020af0ba770")]
  record IStreamBuilder, lpVtbl : IStreamBuilderVtbl* do
    GUID = LibC::GUID.new(0x56a868bf_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IStreamBuilder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBuilder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBuilder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def render(this : IStreamBuilder*, ppinOut : Void*, pGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, ppinOut, pGraph)
    end
    def backout(this : IStreamBuilder*, ppinOut : Void*, pGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.backout.call(this, ppinOut, pGraph)
    end

  end

  @[Extern]
  record IAsyncReaderVtbl,
    query_interface : Proc(IAsyncReader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAsyncReader*, UInt32),
    release : Proc(IAsyncReader*, UInt32),
    request_allocator : Proc(IAsyncReader*, Void*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Void**, Win32cr::Foundation::HRESULT),
    request : Proc(IAsyncReader*, Void*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    wait_for_next : Proc(IAsyncReader*, UInt32, Void**, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    sync_read_aligned : Proc(IAsyncReader*, Void*, Win32cr::Foundation::HRESULT),
    sync_read : Proc(IAsyncReader*, Int64, Int32, UInt8*, Win32cr::Foundation::HRESULT),
    length : Proc(IAsyncReader*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    begin_flush : Proc(IAsyncReader*, Win32cr::Foundation::HRESULT),
    end_flush : Proc(IAsyncReader*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868aa-0ad4-11ce-b03a-0020af0ba770")]
  record IAsyncReader, lpVtbl : IAsyncReaderVtbl* do
    GUID = LibC::GUID.new(0x56a868aa_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IAsyncReader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAsyncReader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAsyncReader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def request_allocator(this : IAsyncReader*, pPreferred : Void*, pProps : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, ppActual : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_allocator.call(this, pPreferred, pProps, ppActual)
    end
    def request(this : IAsyncReader*, pSample : Void*, dwUser : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request.call(this, pSample, dwUser)
    end
    def wait_for_next(this : IAsyncReader*, dwTimeout : UInt32, ppSample : Void**, pdwUser : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_next.call(this, dwTimeout, ppSample, pdwUser)
    end
    def sync_read_aligned(this : IAsyncReader*, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync_read_aligned.call(this, pSample)
    end
    def sync_read(this : IAsyncReader*, llPosition : Int64, lLength : Int32, pBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync_read.call(this, llPosition, lLength, pBuffer)
    end
    def length(this : IAsyncReader*, pTotal : Int64*, pAvailable : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.length.call(this, pTotal, pAvailable)
    end
    def begin_flush(this : IAsyncReader*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_flush.call(this)
    end
    def end_flush(this : IAsyncReader*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_flush.call(this)
    end

  end

  @[Extern]
  record IGraphVersionVtbl,
    query_interface : Proc(IGraphVersion*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGraphVersion*, UInt32),
    release : Proc(IGraphVersion*, UInt32),
    query_version : Proc(IGraphVersion*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868ab-0ad4-11ce-b03a-0020af0ba770")]
  record IGraphVersion, lpVtbl : IGraphVersionVtbl* do
    GUID = LibC::GUID.new(0x56a868ab_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IGraphVersion*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGraphVersion*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGraphVersion*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_version(this : IGraphVersion*, pVersion : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_version.call(this, pVersion)
    end

  end

  @[Extern]
  record IResourceConsumerVtbl,
    query_interface : Proc(IResourceConsumer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IResourceConsumer*, UInt32),
    release : Proc(IResourceConsumer*, UInt32),
    acquire_resource : Proc(IResourceConsumer*, Int32, Win32cr::Foundation::HRESULT),
    release_resource : Proc(IResourceConsumer*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868ad-0ad4-11ce-b03a-0020af0ba770")]
  record IResourceConsumer, lpVtbl : IResourceConsumerVtbl* do
    GUID = LibC::GUID.new(0x56a868ad_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IResourceConsumer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IResourceConsumer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IResourceConsumer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def acquire_resource(this : IResourceConsumer*, idResource : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acquire_resource.call(this, idResource)
    end
    def release_resource(this : IResourceConsumer*, idResource : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_resource.call(this, idResource)
    end

  end

  @[Extern]
  record IResourceManagerVtbl,
    query_interface : Proc(IResourceManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IResourceManager*, UInt32),
    release : Proc(IResourceManager*, UInt32),
    register : Proc(IResourceManager*, Win32cr::Foundation::PWSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    register_group : Proc(IResourceManager*, Win32cr::Foundation::PWSTR, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    request_resource : Proc(IResourceManager*, Int32, Void*, Void*, Win32cr::Foundation::HRESULT),
    notify_acquire : Proc(IResourceManager*, Int32, Void*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    notify_release : Proc(IResourceManager*, Int32, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    cancel_request : Proc(IResourceManager*, Int32, Void*, Win32cr::Foundation::HRESULT),
    set_focus : Proc(IResourceManager*, Void*, Win32cr::Foundation::HRESULT),
    release_focus : Proc(IResourceManager*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868ac-0ad4-11ce-b03a-0020af0ba770")]
  record IResourceManager, lpVtbl : IResourceManagerVtbl* do
    GUID = LibC::GUID.new(0x56a868ac_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IResourceManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IResourceManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IResourceManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register(this : IResourceManager*, pName : Win32cr::Foundation::PWSTR, cResource : Int32, plToken : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register.call(this, pName, cResource, plToken)
    end
    def register_group(this : IResourceManager*, pName : Win32cr::Foundation::PWSTR, cResource : Int32, palTokens : Int32*, plToken : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_group.call(this, pName, cResource, palTokens, plToken)
    end
    def request_resource(this : IResourceManager*, idResource : Int32, pFocusObject : Void*, pConsumer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_resource.call(this, idResource, pFocusObject, pConsumer)
    end
    def notify_acquire(this : IResourceManager*, idResource : Int32, pConsumer : Void*, hr : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_acquire.call(this, idResource, pConsumer, hr)
    end
    def notify_release(this : IResourceManager*, idResource : Int32, pConsumer : Void*, bStillWant : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_release.call(this, idResource, pConsumer, bStillWant)
    end
    def cancel_request(this : IResourceManager*, idResource : Int32, pConsumer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_request.call(this, idResource, pConsumer)
    end
    def set_focus(this : IResourceManager*, pFocusObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_focus.call(this, pFocusObject)
    end
    def release_focus(this : IResourceManager*, pFocusObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_focus.call(this, pFocusObject)
    end

  end

  @[Extern]
  record IDistributorNotifyVtbl,
    query_interface : Proc(IDistributorNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDistributorNotify*, UInt32),
    release : Proc(IDistributorNotify*, UInt32),
    stop : Proc(IDistributorNotify*, Win32cr::Foundation::HRESULT),
    pause : Proc(IDistributorNotify*, Win32cr::Foundation::HRESULT),
    run : Proc(IDistributorNotify*, Int64, Win32cr::Foundation::HRESULT),
    set_sync_source : Proc(IDistributorNotify*, Void*, Win32cr::Foundation::HRESULT),
    notify_graph_change : Proc(IDistributorNotify*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868af-0ad4-11ce-b03a-0020af0ba770")]
  record IDistributorNotify, lpVtbl : IDistributorNotifyVtbl* do
    GUID = LibC::GUID.new(0x56a868af_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IDistributorNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDistributorNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDistributorNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def stop(this : IDistributorNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IDistributorNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def run(this : IDistributorNotify*, tStart : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this, tStart)
    end
    def set_sync_source(this : IDistributorNotify*, pClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_source.call(this, pClock)
    end
    def notify_graph_change(this : IDistributorNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_graph_change.call(this)
    end

  end

  @[Extern]
  record IAMStreamControlVtbl,
    query_interface : Proc(IAMStreamControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMStreamControl*, UInt32),
    release : Proc(IAMStreamControl*, UInt32),
    start_at : Proc(IAMStreamControl*, Int64*, UInt32, Win32cr::Foundation::HRESULT),
    stop_at : Proc(IAMStreamControl*, Int64*, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::HRESULT),
    get_info : Proc(IAMStreamControl*, Win32cr::Media::DirectShow::AM_STREAM_INFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("36b73881-c2c8-11cf-8b46-00805f6cef60")]
  record IAMStreamControl, lpVtbl : IAMStreamControlVtbl* do
    GUID = LibC::GUID.new(0x36b73881_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
    def query_interface(this : IAMStreamControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMStreamControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMStreamControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_at(this : IAMStreamControl*, ptStart : Int64*, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_at.call(this, ptStart, dwCookie)
    end
    def stop_at(this : IAMStreamControl*, ptStop : Int64*, bSendExtra : Win32cr::Foundation::BOOL, dwCookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_at.call(this, ptStop, bSendExtra, dwCookie)
    end
    def get_info(this : IAMStreamControl*, pInfo : Win32cr::Media::DirectShow::AM_STREAM_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this, pInfo)
    end

  end

  @[Extern]
  record ISeekingPassThruVtbl,
    query_interface : Proc(ISeekingPassThru*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISeekingPassThru*, UInt32),
    release : Proc(ISeekingPassThru*, UInt32),
    init : Proc(ISeekingPassThru*, Win32cr::Foundation::BOOL, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("36b73883-c2c8-11cf-8b46-00805f6cef60")]
  record ISeekingPassThru, lpVtbl : ISeekingPassThruVtbl* do
    GUID = LibC::GUID.new(0x36b73883_u32, 0xc2c8_u16, 0x11cf_u16, StaticArray[0x8b_u8, 0x46_u8, 0x0_u8, 0x80_u8, 0x5f_u8, 0x6c_u8, 0xef_u8, 0x60_u8])
    def query_interface(this : ISeekingPassThru*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISeekingPassThru*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISeekingPassThru*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : ISeekingPassThru*, bSupportRendering : Win32cr::Foundation::BOOL, pPin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, bSupportRendering, pPin)
    end

  end

  @[Extern]
  record IAMStreamConfigVtbl,
    query_interface : Proc(IAMStreamConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMStreamConfig*, UInt32),
    release : Proc(IAMStreamConfig*, UInt32),
    set_format : Proc(IAMStreamConfig*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    get_format : Proc(IAMStreamConfig*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, Win32cr::Foundation::HRESULT),
    get_number_of_capabilities : Proc(IAMStreamConfig*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_stream_caps : Proc(IAMStreamConfig*, Int32, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e13340-30ac-11d0-a18c-00a0c9118956")]
  record IAMStreamConfig, lpVtbl : IAMStreamConfigVtbl* do
    GUID = LibC::GUID.new(0xc6e13340_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMStreamConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMStreamConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMStreamConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_format(this : IAMStreamConfig*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_format.call(this, pmt)
    end
    def get_format(this : IAMStreamConfig*, ppmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_format.call(this, ppmt)
    end
    def get_number_of_capabilities(this : IAMStreamConfig*, piCount : Int32*, piSize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_capabilities.call(this, piCount, piSize)
    end
    def get_stream_caps(this : IAMStreamConfig*, iIndex : Int32, ppmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, pSCC : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_caps.call(this, iIndex, ppmt, pSCC)
    end

  end

  @[Extern]
  record IConfigInterleavingVtbl,
    query_interface : Proc(IConfigInterleaving*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConfigInterleaving*, UInt32),
    release : Proc(IConfigInterleaving*, UInt32),
    put_Mode : Proc(IConfigInterleaving*, Win32cr::Media::DirectShow::InterleavingMode, Win32cr::Foundation::HRESULT),
    get_Mode : Proc(IConfigInterleaving*, Win32cr::Media::DirectShow::InterleavingMode*, Win32cr::Foundation::HRESULT),
    put_Interleaving : Proc(IConfigInterleaving*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_Interleaving : Proc(IConfigInterleaving*, Int64*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bee3d220-157b-11d0-bd23-00a0c911ce86")]
  record IConfigInterleaving, lpVtbl : IConfigInterleavingVtbl* do
    GUID = LibC::GUID.new(0xbee3d220_u32, 0x157b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x23_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
    def query_interface(this : IConfigInterleaving*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConfigInterleaving*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConfigInterleaving*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_Mode(this : IConfigInterleaving*, mode : Win32cr::Media::DirectShow::InterleavingMode) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mode.call(this, mode)
    end
    def get_Mode(this : IConfigInterleaving*, pMode : Win32cr::Media::DirectShow::InterleavingMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mode.call(this, pMode)
    end
    def put_Interleaving(this : IConfigInterleaving*, prtInterleave : Int64*, prtPreroll : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Interleaving.call(this, prtInterleave, prtPreroll)
    end
    def get_Interleaving(this : IConfigInterleaving*, prtInterleave : Int64*, prtPreroll : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Interleaving.call(this, prtInterleave, prtPreroll)
    end

  end

  @[Extern]
  record IConfigAviMuxVtbl,
    query_interface : Proc(IConfigAviMux*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConfigAviMux*, UInt32),
    release : Proc(IConfigAviMux*, UInt32),
    set_master_stream : Proc(IConfigAviMux*, Int32, Win32cr::Foundation::HRESULT),
    get_master_stream : Proc(IConfigAviMux*, Int32*, Win32cr::Foundation::HRESULT),
    set_output_compatibility_index : Proc(IConfigAviMux*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_output_compatibility_index : Proc(IConfigAviMux*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5acd6aa0-f482-11ce-8b67-00aa00a3f1a6")]
  record IConfigAviMux, lpVtbl : IConfigAviMuxVtbl* do
    GUID = LibC::GUID.new(0x5acd6aa0_u32, 0xf482_u16, 0x11ce_u16, StaticArray[0x8b_u8, 0x67_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xa3_u8, 0xf1_u8, 0xa6_u8])
    def query_interface(this : IConfigAviMux*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConfigAviMux*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConfigAviMux*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_master_stream(this : IConfigAviMux*, iStream : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_master_stream.call(this, iStream)
    end
    def get_master_stream(this : IConfigAviMux*, pStream : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_master_stream.call(this, pStream)
    end
    def set_output_compatibility_index(this : IConfigAviMux*, fOldIndex : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_compatibility_index.call(this, fOldIndex)
    end
    def get_output_compatibility_index(this : IConfigAviMux*, pfOldIndex : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_compatibility_index.call(this, pfOldIndex)
    end

  end

  @[Extern]
  record IAMVideoCompressionVtbl,
    query_interface : Proc(IAMVideoCompression*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVideoCompression*, UInt32),
    release : Proc(IAMVideoCompression*, UInt32),
    put_KeyFrameRate : Proc(IAMVideoCompression*, Int32, Win32cr::Foundation::HRESULT),
    get_KeyFrameRate : Proc(IAMVideoCompression*, Int32*, Win32cr::Foundation::HRESULT),
    put_PFramesPerKeyFrame : Proc(IAMVideoCompression*, Int32, Win32cr::Foundation::HRESULT),
    get_PFramesPerKeyFrame : Proc(IAMVideoCompression*, Int32*, Win32cr::Foundation::HRESULT),
    put_Quality : Proc(IAMVideoCompression*, Float64, Win32cr::Foundation::HRESULT),
    get_Quality : Proc(IAMVideoCompression*, Float64*, Win32cr::Foundation::HRESULT),
    put_WindowSize : Proc(IAMVideoCompression*, UInt64, Win32cr::Foundation::HRESULT),
    get_WindowSize : Proc(IAMVideoCompression*, UInt64*, Win32cr::Foundation::HRESULT),
    get_info : Proc(IAMVideoCompression*, Win32cr::Foundation::PWSTR, Int32*, Win32cr::Foundation::PWSTR, Int32*, Int32*, Int32*, Float64*, Int32*, Win32cr::Foundation::HRESULT),
    override_key_frame : Proc(IAMVideoCompression*, Int32, Win32cr::Foundation::HRESULT),
    override_frame_size : Proc(IAMVideoCompression*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e13343-30ac-11d0-a18c-00a0c9118956")]
  record IAMVideoCompression, lpVtbl : IAMVideoCompressionVtbl* do
    GUID = LibC::GUID.new(0xc6e13343_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMVideoCompression*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVideoCompression*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVideoCompression*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_KeyFrameRate(this : IAMVideoCompression*, key_frame_rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KeyFrameRate.call(this, key_frame_rate)
    end
    def get_KeyFrameRate(this : IAMVideoCompression*, pKeyFrameRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyFrameRate.call(this, pKeyFrameRate)
    end
    def put_PFramesPerKeyFrame(this : IAMVideoCompression*, p_frames_per_key_frame : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PFramesPerKeyFrame.call(this, p_frames_per_key_frame)
    end
    def get_PFramesPerKeyFrame(this : IAMVideoCompression*, pPFramesPerKeyFrame : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PFramesPerKeyFrame.call(this, pPFramesPerKeyFrame)
    end
    def put_Quality(this : IAMVideoCompression*, quality : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Quality.call(this, quality)
    end
    def get_Quality(this : IAMVideoCompression*, pQuality : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Quality.call(this, pQuality)
    end
    def put_WindowSize(this : IAMVideoCompression*, window_size : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WindowSize.call(this, window_size)
    end
    def get_WindowSize(this : IAMVideoCompression*, pWindowSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WindowSize.call(this, pWindowSize)
    end
    def get_info(this : IAMVideoCompression*, pszVersion : Win32cr::Foundation::PWSTR, pcbVersion : Int32*, pszDescription : Win32cr::Foundation::PWSTR, pcbDescription : Int32*, pDefaultKeyFrameRate : Int32*, pDefaultPFramesPerKey : Int32*, pDefaultQuality : Float64*, pCapabilities : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this, pszVersion, pcbVersion, pszDescription, pcbDescription, pDefaultKeyFrameRate, pDefaultPFramesPerKey, pDefaultQuality, pCapabilities)
    end
    def override_key_frame(this : IAMVideoCompression*, frame_number : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.override_key_frame.call(this, frame_number)
    end
    def override_frame_size(this : IAMVideoCompression*, frame_number : Int32, size : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.override_frame_size.call(this, frame_number, size)
    end

  end

  @[Extern]
  record IAMVfwCaptureDialogsVtbl,
    query_interface : Proc(IAMVfwCaptureDialogs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVfwCaptureDialogs*, UInt32),
    release : Proc(IAMVfwCaptureDialogs*, UInt32),
    has_dialog : Proc(IAMVfwCaptureDialogs*, Int32, Win32cr::Foundation::HRESULT),
    show_dialog : Proc(IAMVfwCaptureDialogs*, Int32, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    send_driver_message : Proc(IAMVfwCaptureDialogs*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d8d715a0-6e5e-11d0-b3f0-00aa003761c5")]
  record IAMVfwCaptureDialogs, lpVtbl : IAMVfwCaptureDialogsVtbl* do
    GUID = LibC::GUID.new(0xd8d715a0_u32, 0x6e5e_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
    def query_interface(this : IAMVfwCaptureDialogs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVfwCaptureDialogs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVfwCaptureDialogs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def has_dialog(this : IAMVfwCaptureDialogs*, iDialog : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_dialog.call(this, iDialog)
    end
    def show_dialog(this : IAMVfwCaptureDialogs*, iDialog : Int32, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_dialog.call(this, iDialog, hwnd)
    end
    def send_driver_message(this : IAMVfwCaptureDialogs*, iDialog : Int32, uMsg : Int32, dw1 : Int32, dw2 : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_driver_message.call(this, iDialog, uMsg, dw1, dw2)
    end

  end

  @[Extern]
  record IAMVfwCompressDialogsVtbl,
    query_interface : Proc(IAMVfwCompressDialogs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVfwCompressDialogs*, UInt32),
    release : Proc(IAMVfwCompressDialogs*, UInt32),
    show_dialog : Proc(IAMVfwCompressDialogs*, Int32, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_state : Proc(IAMVfwCompressDialogs*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    set_state : Proc(IAMVfwCompressDialogs*, Void*, Int32, Win32cr::Foundation::HRESULT),
    send_driver_message : Proc(IAMVfwCompressDialogs*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d8d715a3-6e5e-11d0-b3f0-00aa003761c5")]
  record IAMVfwCompressDialogs, lpVtbl : IAMVfwCompressDialogsVtbl* do
    GUID = LibC::GUID.new(0xd8d715a3_u32, 0x6e5e_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
    def query_interface(this : IAMVfwCompressDialogs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVfwCompressDialogs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVfwCompressDialogs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def show_dialog(this : IAMVfwCompressDialogs*, iDialog : Int32, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_dialog.call(this, iDialog, hwnd)
    end
    def get_state(this : IAMVfwCompressDialogs*, pState : Void*, pcbState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pState, pcbState)
    end
    def set_state(this : IAMVfwCompressDialogs*, pState : Void*, cbState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_state.call(this, pState, cbState)
    end
    def send_driver_message(this : IAMVfwCompressDialogs*, uMsg : Int32, dw1 : Int32, dw2 : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_driver_message.call(this, uMsg, dw1, dw2)
    end

  end

  @[Extern]
  record IAMDroppedFramesVtbl,
    query_interface : Proc(IAMDroppedFrames*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMDroppedFrames*, UInt32),
    release : Proc(IAMDroppedFrames*, UInt32),
    get_num_dropped : Proc(IAMDroppedFrames*, Int32*, Win32cr::Foundation::HRESULT),
    get_num_not_dropped : Proc(IAMDroppedFrames*, Int32*, Win32cr::Foundation::HRESULT),
    get_dropped_info : Proc(IAMDroppedFrames*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_average_frame_size : Proc(IAMDroppedFrames*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e13344-30ac-11d0-a18c-00a0c9118956")]
  record IAMDroppedFrames, lpVtbl : IAMDroppedFramesVtbl* do
    GUID = LibC::GUID.new(0xc6e13344_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMDroppedFrames*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMDroppedFrames*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMDroppedFrames*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_num_dropped(this : IAMDroppedFrames*, plDropped : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_num_dropped.call(this, plDropped)
    end
    def get_num_not_dropped(this : IAMDroppedFrames*, plNotDropped : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_num_not_dropped.call(this, plNotDropped)
    end
    def get_dropped_info(this : IAMDroppedFrames*, lSize : Int32, plArray : Int32*, plNumCopied : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dropped_info.call(this, lSize, plArray, plNumCopied)
    end
    def get_average_frame_size(this : IAMDroppedFrames*, plAverageSize : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_average_frame_size.call(this, plAverageSize)
    end

  end

  @[Extern]
  record IAMAudioInputMixerVtbl,
    query_interface : Proc(IAMAudioInputMixer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMAudioInputMixer*, UInt32),
    release : Proc(IAMAudioInputMixer*, UInt32),
    put_Enable : Proc(IAMAudioInputMixer*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_Enable : Proc(IAMAudioInputMixer*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_Mono : Proc(IAMAudioInputMixer*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_Mono : Proc(IAMAudioInputMixer*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_MixLevel : Proc(IAMAudioInputMixer*, Float64, Win32cr::Foundation::HRESULT),
    get_MixLevel : Proc(IAMAudioInputMixer*, Float64*, Win32cr::Foundation::HRESULT),
    put_Pan : Proc(IAMAudioInputMixer*, Float64, Win32cr::Foundation::HRESULT),
    get_Pan : Proc(IAMAudioInputMixer*, Float64*, Win32cr::Foundation::HRESULT),
    put_Loudness : Proc(IAMAudioInputMixer*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_Loudness : Proc(IAMAudioInputMixer*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_Treble : Proc(IAMAudioInputMixer*, Float64, Win32cr::Foundation::HRESULT),
    get_Treble : Proc(IAMAudioInputMixer*, Float64*, Win32cr::Foundation::HRESULT),
    get_TrebleRange : Proc(IAMAudioInputMixer*, Float64*, Win32cr::Foundation::HRESULT),
    put_Bass : Proc(IAMAudioInputMixer*, Float64, Win32cr::Foundation::HRESULT),
    get_Bass : Proc(IAMAudioInputMixer*, Float64*, Win32cr::Foundation::HRESULT),
    get_BassRange : Proc(IAMAudioInputMixer*, Float64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("54c39221-8380-11d0-b3f0-00aa003761c5")]
  record IAMAudioInputMixer, lpVtbl : IAMAudioInputMixerVtbl* do
    GUID = LibC::GUID.new(0x54c39221_u32, 0x8380_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
    def query_interface(this : IAMAudioInputMixer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMAudioInputMixer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMAudioInputMixer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_Enable(this : IAMAudioInputMixer*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Enable.call(this, fEnable)
    end
    def get_Enable(this : IAMAudioInputMixer*, pfEnable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Enable.call(this, pfEnable)
    end
    def put_Mono(this : IAMAudioInputMixer*, fMono : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mono.call(this, fMono)
    end
    def get_Mono(this : IAMAudioInputMixer*, pfMono : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mono.call(this, pfMono)
    end
    def put_MixLevel(this : IAMAudioInputMixer*, level : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixLevel.call(this, level)
    end
    def get_MixLevel(this : IAMAudioInputMixer*, pLevel : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixLevel.call(this, pLevel)
    end
    def put_Pan(this : IAMAudioInputMixer*, pan : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Pan.call(this, pan)
    end
    def get_Pan(this : IAMAudioInputMixer*, pPan : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Pan.call(this, pPan)
    end
    def put_Loudness(this : IAMAudioInputMixer*, fLoudness : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Loudness.call(this, fLoudness)
    end
    def get_Loudness(this : IAMAudioInputMixer*, pfLoudness : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Loudness.call(this, pfLoudness)
    end
    def put_Treble(this : IAMAudioInputMixer*, treble : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Treble.call(this, treble)
    end
    def get_Treble(this : IAMAudioInputMixer*, pTreble : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Treble.call(this, pTreble)
    end
    def get_TrebleRange(this : IAMAudioInputMixer*, pRange : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TrebleRange.call(this, pRange)
    end
    def put_Bass(this : IAMAudioInputMixer*, bass : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Bass.call(this, bass)
    end
    def get_Bass(this : IAMAudioInputMixer*, pBass : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Bass.call(this, pBass)
    end
    def get_BassRange(this : IAMAudioInputMixer*, pRange : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BassRange.call(this, pRange)
    end

  end

  @[Extern]
  record IAMBufferNegotiationVtbl,
    query_interface : Proc(IAMBufferNegotiation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMBufferNegotiation*, UInt32),
    release : Proc(IAMBufferNegotiation*, UInt32),
    suggest_allocator_properties : Proc(IAMBufferNegotiation*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    get_allocator_properties : Proc(IAMBufferNegotiation*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56ed71a0-af5f-11d0-b3f0-00aa003761c5")]
  record IAMBufferNegotiation, lpVtbl : IAMBufferNegotiationVtbl* do
    GUID = LibC::GUID.new(0x56ed71a0_u32, 0xaf5f_u16, 0x11d0_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
    def query_interface(this : IAMBufferNegotiation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMBufferNegotiation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMBufferNegotiation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def suggest_allocator_properties(this : IAMBufferNegotiation*, pprop : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.suggest_allocator_properties.call(this, pprop)
    end
    def get_allocator_properties(this : IAMBufferNegotiation*, pprop : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocator_properties.call(this, pprop)
    end

  end

  @[Extern]
  record IAMAnalogVideoDecoderVtbl,
    query_interface : Proc(IAMAnalogVideoDecoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMAnalogVideoDecoder*, UInt32),
    release : Proc(IAMAnalogVideoDecoder*, UInt32),
    get_AvailableTVFormats : Proc(IAMAnalogVideoDecoder*, Int32*, Win32cr::Foundation::HRESULT),
    put_TVFormat : Proc(IAMAnalogVideoDecoder*, Int32, Win32cr::Foundation::HRESULT),
    get_TVFormat : Proc(IAMAnalogVideoDecoder*, Int32*, Win32cr::Foundation::HRESULT),
    get_HorizontalLocked : Proc(IAMAnalogVideoDecoder*, Int32*, Win32cr::Foundation::HRESULT),
    put_VCRHorizontalLocking : Proc(IAMAnalogVideoDecoder*, Int32, Win32cr::Foundation::HRESULT),
    get_VCRHorizontalLocking : Proc(IAMAnalogVideoDecoder*, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberOfLines : Proc(IAMAnalogVideoDecoder*, Int32*, Win32cr::Foundation::HRESULT),
    put_OutputEnable : Proc(IAMAnalogVideoDecoder*, Int32, Win32cr::Foundation::HRESULT),
    get_OutputEnable : Proc(IAMAnalogVideoDecoder*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e13350-30ac-11d0-a18c-00a0c9118956")]
  record IAMAnalogVideoDecoder, lpVtbl : IAMAnalogVideoDecoderVtbl* do
    GUID = LibC::GUID.new(0xc6e13350_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMAnalogVideoDecoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMAnalogVideoDecoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMAnalogVideoDecoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_AvailableTVFormats(this : IAMAnalogVideoDecoder*, lAnalogVideoStandard : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvailableTVFormats.call(this, lAnalogVideoStandard)
    end
    def put_TVFormat(this : IAMAnalogVideoDecoder*, lAnalogVideoStandard : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TVFormat.call(this, lAnalogVideoStandard)
    end
    def get_TVFormat(this : IAMAnalogVideoDecoder*, plAnalogVideoStandard : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TVFormat.call(this, plAnalogVideoStandard)
    end
    def get_HorizontalLocked(this : IAMAnalogVideoDecoder*, plLocked : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HorizontalLocked.call(this, plLocked)
    end
    def put_VCRHorizontalLocking(this : IAMAnalogVideoDecoder*, lVCRHorizontalLocking : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VCRHorizontalLocking.call(this, lVCRHorizontalLocking)
    end
    def get_VCRHorizontalLocking(this : IAMAnalogVideoDecoder*, plVCRHorizontalLocking : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VCRHorizontalLocking.call(this, plVCRHorizontalLocking)
    end
    def get_NumberOfLines(this : IAMAnalogVideoDecoder*, plNumberOfLines : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfLines.call(this, plNumberOfLines)
    end
    def put_OutputEnable(this : IAMAnalogVideoDecoder*, lOutputEnable : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OutputEnable.call(this, lOutputEnable)
    end
    def get_OutputEnable(this : IAMAnalogVideoDecoder*, plOutputEnable : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OutputEnable.call(this, plOutputEnable)
    end

  end

  @[Extern]
  record IAMVideoProcAmpVtbl,
    query_interface : Proc(IAMVideoProcAmp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVideoProcAmp*, UInt32),
    release : Proc(IAMVideoProcAmp*, UInt32),
    get_range : Proc(IAMVideoProcAmp*, Int32, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set : Proc(IAMVideoProcAmp*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get : Proc(IAMVideoProcAmp*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e13360-30ac-11d0-a18c-00a0c9118956")]
  record IAMVideoProcAmp, lpVtbl : IAMVideoProcAmpVtbl* do
    GUID = LibC::GUID.new(0xc6e13360_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMVideoProcAmp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVideoProcAmp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVideoProcAmp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_range(this : IAMVideoProcAmp*, property : Int32, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_range.call(this, property, pMin, pMax, pSteppingDelta, pDefault, pCapsFlags)
    end
    def set(this : IAMVideoProcAmp*, property : Int32, lValue : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set.call(this, property, lValue, flags)
    end
    def get(this : IAMVideoProcAmp*, property : Int32, lValue : Int32*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, property, lValue, flags)
    end

  end

  @[Extern]
  record IAMCameraControlVtbl,
    query_interface : Proc(IAMCameraControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMCameraControl*, UInt32),
    release : Proc(IAMCameraControl*, UInt32),
    get_range : Proc(IAMCameraControl*, Int32, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set : Proc(IAMCameraControl*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get : Proc(IAMCameraControl*, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e13370-30ac-11d0-a18c-00a0c9118956")]
  record IAMCameraControl, lpVtbl : IAMCameraControlVtbl* do
    GUID = LibC::GUID.new(0xc6e13370_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMCameraControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMCameraControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMCameraControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_range(this : IAMCameraControl*, property : Int32, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_range.call(this, property, pMin, pMax, pSteppingDelta, pDefault, pCapsFlags)
    end
    def set(this : IAMCameraControl*, property : Int32, lValue : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set.call(this, property, lValue, flags)
    end
    def get(this : IAMCameraControl*, property : Int32, lValue : Int32*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get.call(this, property, lValue, flags)
    end

  end

  @[Extern]
  record IAMVideoControlVtbl,
    query_interface : Proc(IAMVideoControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVideoControl*, UInt32),
    release : Proc(IAMVideoControl*, UInt32),
    get_caps : Proc(IAMVideoControl*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    set_mode : Proc(IAMVideoControl*, Void*, Int32, Win32cr::Foundation::HRESULT),
    get_mode : Proc(IAMVideoControl*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    get_current_actual_frame_rate : Proc(IAMVideoControl*, Void*, Int64*, Win32cr::Foundation::HRESULT),
    get_max_available_frame_rate : Proc(IAMVideoControl*, Void*, Int32, Win32cr::Foundation::SIZE, Int64*, Win32cr::Foundation::HRESULT),
    get_frame_rate_list : Proc(IAMVideoControl*, Void*, Int32, Win32cr::Foundation::SIZE, Int32*, Int64**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6a2e0670-28e4-11d0-a18c-00a0c9118956")]
  record IAMVideoControl, lpVtbl : IAMVideoControlVtbl* do
    GUID = LibC::GUID.new(0x6a2e0670_u32, 0x28e4_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMVideoControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVideoControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVideoControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_caps(this : IAMVideoControl*, pPin : Void*, pCapsFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_caps.call(this, pPin, pCapsFlags)
    end
    def set_mode(this : IAMVideoControl*, pPin : Void*, mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mode.call(this, pPin, mode)
    end
    def get_mode(this : IAMVideoControl*, pPin : Void*, mode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mode.call(this, pPin, mode)
    end
    def get_current_actual_frame_rate(this : IAMVideoControl*, pPin : Void*, actual_frame_rate : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_actual_frame_rate.call(this, pPin, actual_frame_rate)
    end
    def get_max_available_frame_rate(this : IAMVideoControl*, pPin : Void*, iIndex : Int32, dimensions : Win32cr::Foundation::SIZE, max_available_frame_rate : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_available_frame_rate.call(this, pPin, iIndex, dimensions, max_available_frame_rate)
    end
    def get_frame_rate_list(this : IAMVideoControl*, pPin : Void*, iIndex : Int32, dimensions : Win32cr::Foundation::SIZE, list_size : Int32*, frame_rates : Int64**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frame_rate_list.call(this, pPin, iIndex, dimensions, list_size, frame_rates)
    end

  end

  @[Extern]
  record IAMCrossbarVtbl,
    query_interface : Proc(IAMCrossbar*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMCrossbar*, UInt32),
    release : Proc(IAMCrossbar*, UInt32),
    get_PinCounts : Proc(IAMCrossbar*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    can_route : Proc(IAMCrossbar*, Int32, Int32, Win32cr::Foundation::HRESULT),
    route : Proc(IAMCrossbar*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_IsRoutedTo : Proc(IAMCrossbar*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_CrossbarPinInfo : Proc(IAMCrossbar*, Win32cr::Foundation::BOOL, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e13380-30ac-11d0-a18c-00a0c9118956")]
  record IAMCrossbar, lpVtbl : IAMCrossbarVtbl* do
    GUID = LibC::GUID.new(0xc6e13380_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMCrossbar*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMCrossbar*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMCrossbar*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_PinCounts(this : IAMCrossbar*, output_pin_count : Int32*, input_pin_count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PinCounts.call(this, output_pin_count, input_pin_count)
    end
    def can_route(this : IAMCrossbar*, output_pin_index : Int32, input_pin_index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_route.call(this, output_pin_index, input_pin_index)
    end
    def route(this : IAMCrossbar*, output_pin_index : Int32, input_pin_index : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.route.call(this, output_pin_index, input_pin_index)
    end
    def get_IsRoutedTo(this : IAMCrossbar*, output_pin_index : Int32, input_pin_index : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRoutedTo.call(this, output_pin_index, input_pin_index)
    end
    def get_CrossbarPinInfo(this : IAMCrossbar*, is_input_pin : Win32cr::Foundation::BOOL, pin_index : Int32, pin_index_related : Int32*, physical_type : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CrossbarPinInfo.call(this, is_input_pin, pin_index, pin_index_related, physical_type)
    end

  end

  @[Extern]
  record IAMTunerVtbl,
    query_interface : Proc(IAMTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTuner*, UInt32),
    release : Proc(IAMTuner*, UInt32),
    put_Channel : Proc(IAMTuner*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IAMTuner*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    channel_min_max : Proc(IAMTuner*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IAMTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IAMTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IAMTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IAMTuner*, Int32*, Win32cr::Foundation::HRESULT),
    logon : Proc(IAMTuner*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    logout : Proc(IAMTuner*, Win32cr::Foundation::HRESULT),
    signal_present : Proc(IAMTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_Mode : Proc(IAMTuner*, Win32cr::Media::DirectShow::AMTunerModeType, Win32cr::Foundation::HRESULT),
    get_Mode : Proc(IAMTuner*, Win32cr::Media::DirectShow::AMTunerModeType*, Win32cr::Foundation::HRESULT),
    get_available_modes : Proc(IAMTuner*, Int32*, Win32cr::Foundation::HRESULT),
    register_notification_call_back : Proc(IAMTuner*, Void*, Int32, Win32cr::Foundation::HRESULT),
    un_register_notification_call_back : Proc(IAMTuner*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("211a8761-03ac-11d1-8d13-00aa00bd8339")]
  record IAMTuner, lpVtbl : IAMTunerVtbl* do
    GUID = LibC::GUID.new(0x211a8761_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
    def query_interface(this : IAMTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_Channel(this : IAMTuner*, lChannel : Int32, lVideoSubChannel : Int32, lAudioSubChannel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, lChannel, lVideoSubChannel, lAudioSubChannel)
    end
    def get_Channel(this : IAMTuner*, plChannel : Int32*, plVideoSubChannel : Int32*, plAudioSubChannel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, plChannel, plVideoSubChannel, plAudioSubChannel)
    end
    def channel_min_max(this : IAMTuner*, lChannelMin : Int32*, lChannelMax : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.channel_min_max.call(this, lChannelMin, lChannelMax)
    end
    def put_CountryCode(this : IAMTuner*, lCountryCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, lCountryCode)
    end
    def get_CountryCode(this : IAMTuner*, plCountryCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, plCountryCode)
    end
    def put_TuningSpace(this : IAMTuner*, lTuningSpace : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, lTuningSpace)
    end
    def get_TuningSpace(this : IAMTuner*, plTuningSpace : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, plTuningSpace)
    end
    def logon(this : IAMTuner*, hCurrentUser : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logon.call(this, hCurrentUser)
    end
    def logout(this : IAMTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logout.call(this)
    end
    def signal_present(this : IAMTuner*, plSignalStrength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal_present.call(this, plSignalStrength)
    end
    def put_Mode(this : IAMTuner*, lMode : Win32cr::Media::DirectShow::AMTunerModeType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mode.call(this, lMode)
    end
    def get_Mode(this : IAMTuner*, plMode : Win32cr::Media::DirectShow::AMTunerModeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mode.call(this, plMode)
    end
    def get_available_modes(this : IAMTuner*, plModes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_modes.call(this, plModes)
    end
    def register_notification_call_back(this : IAMTuner*, pNotify : Void*, lEvents : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_notification_call_back.call(this, pNotify, lEvents)
    end
    def un_register_notification_call_back(this : IAMTuner*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_register_notification_call_back.call(this, pNotify)
    end

  end

  @[Extern]
  record IAMTunerNotificationVtbl,
    query_interface : Proc(IAMTunerNotification*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTunerNotification*, UInt32),
    release : Proc(IAMTunerNotification*, UInt32),
    on_event : Proc(IAMTunerNotification*, Win32cr::Media::DirectShow::AMTunerEventType, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("211a8760-03ac-11d1-8d13-00aa00bd8339")]
  record IAMTunerNotification, lpVtbl : IAMTunerNotificationVtbl* do
    GUID = LibC::GUID.new(0x211a8760_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
    def query_interface(this : IAMTunerNotification*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTunerNotification*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTunerNotification*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_event(this : IAMTunerNotification*, event : Win32cr::Media::DirectShow::AMTunerEventType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event.call(this, event)
    end

  end

  @[Extern]
  record IAMTVTunerVtbl,
    query_interface : Proc(IAMTVTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTVTuner*, UInt32),
    release : Proc(IAMTVTuner*, UInt32),
    put_Channel : Proc(IAMTVTuner*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IAMTVTuner*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    channel_min_max : Proc(IAMTVTuner*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IAMTVTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IAMTVTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    logon : Proc(IAMTVTuner*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    logout : Proc(IAMTVTuner*, Win32cr::Foundation::HRESULT),
    signal_present : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_Mode : Proc(IAMTVTuner*, Win32cr::Media::DirectShow::AMTunerModeType, Win32cr::Foundation::HRESULT),
    get_Mode : Proc(IAMTVTuner*, Win32cr::Media::DirectShow::AMTunerModeType*, Win32cr::Foundation::HRESULT),
    get_available_modes : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    register_notification_call_back : Proc(IAMTVTuner*, Void*, Int32, Win32cr::Foundation::HRESULT),
    un_register_notification_call_back : Proc(IAMTVTuner*, Void*, Win32cr::Foundation::HRESULT),
    get_AvailableTVFormats : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    get_TVFormat : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    auto_tune : Proc(IAMTVTuner*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    store_auto_tune : Proc(IAMTVTuner*, Win32cr::Foundation::HRESULT),
    get_NumInputConnections : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_InputType : Proc(IAMTVTuner*, Int32, Win32cr::Media::DirectShow::TunerInputType, Win32cr::Foundation::HRESULT),
    get_InputType : Proc(IAMTVTuner*, Int32, Win32cr::Media::DirectShow::TunerInputType*, Win32cr::Foundation::HRESULT),
    put_ConnectInput : Proc(IAMTVTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_ConnectInput : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    get_VideoFrequency : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT),
    get_AudioFrequency : Proc(IAMTVTuner*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("211a8766-03ac-11d1-8d13-00aa00bd8339")]
  record IAMTVTuner, lpVtbl : IAMTVTunerVtbl* do
    GUID = LibC::GUID.new(0x211a8766_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
    def query_interface(this : IAMTVTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTVTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTVTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_Channel(this : IAMTVTuner*, lChannel : Int32, lVideoSubChannel : Int32, lAudioSubChannel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, lChannel, lVideoSubChannel, lAudioSubChannel)
    end
    def get_Channel(this : IAMTVTuner*, plChannel : Int32*, plVideoSubChannel : Int32*, plAudioSubChannel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, plChannel, plVideoSubChannel, plAudioSubChannel)
    end
    def channel_min_max(this : IAMTVTuner*, lChannelMin : Int32*, lChannelMax : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.channel_min_max.call(this, lChannelMin, lChannelMax)
    end
    def put_CountryCode(this : IAMTVTuner*, lCountryCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, lCountryCode)
    end
    def get_CountryCode(this : IAMTVTuner*, plCountryCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, plCountryCode)
    end
    def put_TuningSpace(this : IAMTVTuner*, lTuningSpace : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, lTuningSpace)
    end
    def get_TuningSpace(this : IAMTVTuner*, plTuningSpace : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, plTuningSpace)
    end
    def logon(this : IAMTVTuner*, hCurrentUser : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logon.call(this, hCurrentUser)
    end
    def logout(this : IAMTVTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logout.call(this)
    end
    def signal_present(this : IAMTVTuner*, plSignalStrength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal_present.call(this, plSignalStrength)
    end
    def put_Mode(this : IAMTVTuner*, lMode : Win32cr::Media::DirectShow::AMTunerModeType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mode.call(this, lMode)
    end
    def get_Mode(this : IAMTVTuner*, plMode : Win32cr::Media::DirectShow::AMTunerModeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mode.call(this, plMode)
    end
    def get_available_modes(this : IAMTVTuner*, plModes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_modes.call(this, plModes)
    end
    def register_notification_call_back(this : IAMTVTuner*, pNotify : Void*, lEvents : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_notification_call_back.call(this, pNotify, lEvents)
    end
    def un_register_notification_call_back(this : IAMTVTuner*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_register_notification_call_back.call(this, pNotify)
    end
    def get_AvailableTVFormats(this : IAMTVTuner*, lAnalogVideoStandard : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvailableTVFormats.call(this, lAnalogVideoStandard)
    end
    def get_TVFormat(this : IAMTVTuner*, plAnalogVideoStandard : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TVFormat.call(this, plAnalogVideoStandard)
    end
    def auto_tune(this : IAMTVTuner*, lChannel : Int32, plFoundSignal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.auto_tune.call(this, lChannel, plFoundSignal)
    end
    def store_auto_tune(this : IAMTVTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.store_auto_tune.call(this)
    end
    def get_NumInputConnections(this : IAMTVTuner*, plNumInputConnections : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumInputConnections.call(this, plNumInputConnections)
    end
    def put_InputType(this : IAMTVTuner*, lIndex : Int32, input_type : Win32cr::Media::DirectShow::TunerInputType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InputType.call(this, lIndex, input_type)
    end
    def get_InputType(this : IAMTVTuner*, lIndex : Int32, pInputType : Win32cr::Media::DirectShow::TunerInputType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InputType.call(this, lIndex, pInputType)
    end
    def put_ConnectInput(this : IAMTVTuner*, lIndex : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ConnectInput.call(this, lIndex)
    end
    def get_ConnectInput(this : IAMTVTuner*, plIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectInput.call(this, plIndex)
    end
    def get_VideoFrequency(this : IAMTVTuner*, lFreq : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoFrequency.call(this, lFreq)
    end
    def get_AudioFrequency(this : IAMTVTuner*, lFreq : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioFrequency.call(this, lFreq)
    end

  end

  @[Extern]
  record IBPCSatelliteTunerVtbl,
    query_interface : Proc(IBPCSatelliteTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBPCSatelliteTuner*, UInt32),
    release : Proc(IBPCSatelliteTuner*, UInt32),
    put_Channel : Proc(IBPCSatelliteTuner*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IBPCSatelliteTuner*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    channel_min_max : Proc(IBPCSatelliteTuner*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IBPCSatelliteTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IBPCSatelliteTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IBPCSatelliteTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IBPCSatelliteTuner*, Int32*, Win32cr::Foundation::HRESULT),
    logon : Proc(IBPCSatelliteTuner*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    logout : Proc(IBPCSatelliteTuner*, Win32cr::Foundation::HRESULT),
    signal_present : Proc(IBPCSatelliteTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_Mode : Proc(IBPCSatelliteTuner*, Win32cr::Media::DirectShow::AMTunerModeType, Win32cr::Foundation::HRESULT),
    get_Mode : Proc(IBPCSatelliteTuner*, Win32cr::Media::DirectShow::AMTunerModeType*, Win32cr::Foundation::HRESULT),
    get_available_modes : Proc(IBPCSatelliteTuner*, Int32*, Win32cr::Foundation::HRESULT),
    register_notification_call_back : Proc(IBPCSatelliteTuner*, Void*, Int32, Win32cr::Foundation::HRESULT),
    un_register_notification_call_back : Proc(IBPCSatelliteTuner*, Void*, Win32cr::Foundation::HRESULT),
    get_DefaultSubChannelTypes : Proc(IBPCSatelliteTuner*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultSubChannelTypes : Proc(IBPCSatelliteTuner*, Int32, Int32, Win32cr::Foundation::HRESULT),
    is_taping_permitted : Proc(IBPCSatelliteTuner*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("211a8765-03ac-11d1-8d13-00aa00bd8339")]
  record IBPCSatelliteTuner, lpVtbl : IBPCSatelliteTunerVtbl* do
    GUID = LibC::GUID.new(0x211a8765_u32, 0x3ac_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x13_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xbd_u8, 0x83_u8, 0x39_u8])
    def query_interface(this : IBPCSatelliteTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBPCSatelliteTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBPCSatelliteTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_Channel(this : IBPCSatelliteTuner*, lChannel : Int32, lVideoSubChannel : Int32, lAudioSubChannel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, lChannel, lVideoSubChannel, lAudioSubChannel)
    end
    def get_Channel(this : IBPCSatelliteTuner*, plChannel : Int32*, plVideoSubChannel : Int32*, plAudioSubChannel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, plChannel, plVideoSubChannel, plAudioSubChannel)
    end
    def channel_min_max(this : IBPCSatelliteTuner*, lChannelMin : Int32*, lChannelMax : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.channel_min_max.call(this, lChannelMin, lChannelMax)
    end
    def put_CountryCode(this : IBPCSatelliteTuner*, lCountryCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, lCountryCode)
    end
    def get_CountryCode(this : IBPCSatelliteTuner*, plCountryCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, plCountryCode)
    end
    def put_TuningSpace(this : IBPCSatelliteTuner*, lTuningSpace : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, lTuningSpace)
    end
    def get_TuningSpace(this : IBPCSatelliteTuner*, plTuningSpace : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, plTuningSpace)
    end
    def logon(this : IBPCSatelliteTuner*, hCurrentUser : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logon.call(this, hCurrentUser)
    end
    def logout(this : IBPCSatelliteTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logout.call(this)
    end
    def signal_present(this : IBPCSatelliteTuner*, plSignalStrength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal_present.call(this, plSignalStrength)
    end
    def put_Mode(this : IBPCSatelliteTuner*, lMode : Win32cr::Media::DirectShow::AMTunerModeType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mode.call(this, lMode)
    end
    def get_Mode(this : IBPCSatelliteTuner*, plMode : Win32cr::Media::DirectShow::AMTunerModeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mode.call(this, plMode)
    end
    def get_available_modes(this : IBPCSatelliteTuner*, plModes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_modes.call(this, plModes)
    end
    def register_notification_call_back(this : IBPCSatelliteTuner*, pNotify : Void*, lEvents : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_notification_call_back.call(this, pNotify, lEvents)
    end
    def un_register_notification_call_back(this : IBPCSatelliteTuner*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_register_notification_call_back.call(this, pNotify)
    end
    def get_DefaultSubChannelTypes(this : IBPCSatelliteTuner*, plDefaultVideoType : Int32*, plDefaultAudioType : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultSubChannelTypes.call(this, plDefaultVideoType, plDefaultAudioType)
    end
    def put_DefaultSubChannelTypes(this : IBPCSatelliteTuner*, lDefaultVideoType : Int32, lDefaultAudioType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultSubChannelTypes.call(this, lDefaultVideoType, lDefaultAudioType)
    end
    def is_taping_permitted(this : IBPCSatelliteTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_taping_permitted.call(this)
    end

  end

  @[Extern]
  record IAMTVAudioVtbl,
    query_interface : Proc(IAMTVAudio*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTVAudio*, UInt32),
    release : Proc(IAMTVAudio*, UInt32),
    get_hardware_supported_tv_audio_modes : Proc(IAMTVAudio*, Int32*, Win32cr::Foundation::HRESULT),
    get_available_tv_audio_modes : Proc(IAMTVAudio*, Int32*, Win32cr::Foundation::HRESULT),
    get_TVAudioMode : Proc(IAMTVAudio*, Int32*, Win32cr::Foundation::HRESULT),
    put_TVAudioMode : Proc(IAMTVAudio*, Int32, Win32cr::Foundation::HRESULT),
    register_notification_call_back : Proc(IAMTVAudio*, Void*, Int32, Win32cr::Foundation::HRESULT),
    un_register_notification_call_back : Proc(IAMTVAudio*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83ec1c30-23d1-11d1-99e6-00a0c9560266")]
  record IAMTVAudio, lpVtbl : IAMTVAudioVtbl* do
    GUID = LibC::GUID.new(0x83ec1c30_u32, 0x23d1_u16, 0x11d1_u16, StaticArray[0x99_u8, 0xe6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x56_u8, 0x2_u8, 0x66_u8])
    def query_interface(this : IAMTVAudio*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTVAudio*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTVAudio*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_hardware_supported_tv_audio_modes(this : IAMTVAudio*, plModes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hardware_supported_tv_audio_modes.call(this, plModes)
    end
    def get_available_tv_audio_modes(this : IAMTVAudio*, plModes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_tv_audio_modes.call(this, plModes)
    end
    def get_TVAudioMode(this : IAMTVAudio*, plMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TVAudioMode.call(this, plMode)
    end
    def put_TVAudioMode(this : IAMTVAudio*, lMode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TVAudioMode.call(this, lMode)
    end
    def register_notification_call_back(this : IAMTVAudio*, pNotify : Void*, lEvents : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_notification_call_back.call(this, pNotify, lEvents)
    end
    def un_register_notification_call_back(this : IAMTVAudio*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_register_notification_call_back.call(this, pNotify)
    end

  end

  @[Extern]
  record IAMTVAudioNotificationVtbl,
    query_interface : Proc(IAMTVAudioNotification*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTVAudioNotification*, UInt32),
    release : Proc(IAMTVAudioNotification*, UInt32),
    on_event : Proc(IAMTVAudioNotification*, Win32cr::Media::DirectShow::AMTVAudioEventType, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83ec1c33-23d1-11d1-99e6-00a0c9560266")]
  record IAMTVAudioNotification, lpVtbl : IAMTVAudioNotificationVtbl* do
    GUID = LibC::GUID.new(0x83ec1c33_u32, 0x23d1_u16, 0x11d1_u16, StaticArray[0x99_u8, 0xe6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x56_u8, 0x2_u8, 0x66_u8])
    def query_interface(this : IAMTVAudioNotification*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTVAudioNotification*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTVAudioNotification*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_event(this : IAMTVAudioNotification*, event : Win32cr::Media::DirectShow::AMTVAudioEventType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event.call(this, event)
    end

  end

  @[Extern]
  record IAMAnalogVideoEncoderVtbl,
    query_interface : Proc(IAMAnalogVideoEncoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMAnalogVideoEncoder*, UInt32),
    release : Proc(IAMAnalogVideoEncoder*, UInt32),
    get_AvailableTVFormats : Proc(IAMAnalogVideoEncoder*, Int32*, Win32cr::Foundation::HRESULT),
    put_TVFormat : Proc(IAMAnalogVideoEncoder*, Int32, Win32cr::Foundation::HRESULT),
    get_TVFormat : Proc(IAMAnalogVideoEncoder*, Int32*, Win32cr::Foundation::HRESULT),
    put_CopyProtection : Proc(IAMAnalogVideoEncoder*, Int32, Win32cr::Foundation::HRESULT),
    get_CopyProtection : Proc(IAMAnalogVideoEncoder*, Int32*, Win32cr::Foundation::HRESULT),
    put_CCEnable : Proc(IAMAnalogVideoEncoder*, Int32, Win32cr::Foundation::HRESULT),
    get_CCEnable : Proc(IAMAnalogVideoEncoder*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6e133b0-30ac-11d0-a18c-00a0c9118956")]
  record IAMAnalogVideoEncoder, lpVtbl : IAMAnalogVideoEncoderVtbl* do
    GUID = LibC::GUID.new(0xc6e133b0_u32, 0x30ac_u16, 0x11d0_u16, StaticArray[0xa1_u8, 0x8c_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0x89_u8, 0x56_u8])
    def query_interface(this : IAMAnalogVideoEncoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMAnalogVideoEncoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMAnalogVideoEncoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_AvailableTVFormats(this : IAMAnalogVideoEncoder*, lAnalogVideoStandard : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvailableTVFormats.call(this, lAnalogVideoStandard)
    end
    def put_TVFormat(this : IAMAnalogVideoEncoder*, lAnalogVideoStandard : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TVFormat.call(this, lAnalogVideoStandard)
    end
    def get_TVFormat(this : IAMAnalogVideoEncoder*, plAnalogVideoStandard : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TVFormat.call(this, plAnalogVideoStandard)
    end
    def put_CopyProtection(this : IAMAnalogVideoEncoder*, lVideoCopyProtection : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CopyProtection.call(this, lVideoCopyProtection)
    end
    def get_CopyProtection(this : IAMAnalogVideoEncoder*, lVideoCopyProtection : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CopyProtection.call(this, lVideoCopyProtection)
    end
    def put_CCEnable(this : IAMAnalogVideoEncoder*, lCCEnable : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CCEnable.call(this, lCCEnable)
    end
    def get_CCEnable(this : IAMAnalogVideoEncoder*, lCCEnable : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CCEnable.call(this, lCCEnable)
    end

  end

  @[Extern]
  record IMediaPropertyBagVtbl,
    query_interface : Proc(IMediaPropertyBag*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaPropertyBag*, UInt32),
    release : Proc(IMediaPropertyBag*, UInt32),
    read : Proc(IMediaPropertyBag*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Void*, Win32cr::Foundation::HRESULT),
    write : Proc(IMediaPropertyBag*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    enum_property : Proc(IMediaPropertyBag*, UInt32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6025a880-c0d5-11d0-bd4e-00a0c911ce86")]
  record IMediaPropertyBag, lpVtbl : IMediaPropertyBagVtbl* do
    GUID = LibC::GUID.new(0x6025a880_u32, 0xc0d5_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x4e_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
    def query_interface(this : IMediaPropertyBag*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaPropertyBag*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaPropertyBag*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read(this : IMediaPropertyBag*, pszPropName : Win32cr::Foundation::PWSTR, pVar : Win32cr::System::Com::VARIANT*, pErrorLog : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pszPropName, pVar, pErrorLog)
    end
    def write(this : IMediaPropertyBag*, pszPropName : Win32cr::Foundation::PWSTR, pVar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pszPropName, pVar)
    end
    def enum_property(this : IMediaPropertyBag*, iProperty : UInt32, pvarPropertyName : Win32cr::System::Com::VARIANT*, pvarPropertyValue : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_property.call(this, iProperty, pvarPropertyName, pvarPropertyValue)
    end

  end

  @[Extern]
  record IPersistMediaPropertyBagVtbl,
    query_interface : Proc(IPersistMediaPropertyBag*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPersistMediaPropertyBag*, UInt32),
    release : Proc(IPersistMediaPropertyBag*, UInt32),
    get_class_id : Proc(IPersistMediaPropertyBag*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    init_new : Proc(IPersistMediaPropertyBag*, Win32cr::Foundation::HRESULT),
    load : Proc(IPersistMediaPropertyBag*, Void*, Void*, Win32cr::Foundation::HRESULT),
    save : Proc(IPersistMediaPropertyBag*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5738e040-b67f-11d0-bd4d-00a0c911ce86")]
  record IPersistMediaPropertyBag, lpVtbl : IPersistMediaPropertyBagVtbl* do
    GUID = LibC::GUID.new(0x5738e040_u32, 0xb67f_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x4d_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
    def query_interface(this : IPersistMediaPropertyBag*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPersistMediaPropertyBag*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPersistMediaPropertyBag*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IPersistMediaPropertyBag*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def init_new(this : IPersistMediaPropertyBag*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_new.call(this)
    end
    def load(this : IPersistMediaPropertyBag*, pPropBag : Void*, pErrorLog : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, pPropBag, pErrorLog)
    end
    def save(this : IPersistMediaPropertyBag*, pPropBag : Void*, fClearDirty : Win32cr::Foundation::BOOL, fSaveAllProperties : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, pPropBag, fClearDirty, fSaveAllProperties)
    end

  end

  @[Extern]
  record IAMPhysicalPinInfoVtbl,
    query_interface : Proc(IAMPhysicalPinInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMPhysicalPinInfo*, UInt32),
    release : Proc(IAMPhysicalPinInfo*, UInt32),
    get_physical_type : Proc(IAMPhysicalPinInfo*, Int32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f938c991-3029-11cf-8c44-00aa006b6814")]
  record IAMPhysicalPinInfo, lpVtbl : IAMPhysicalPinInfoVtbl* do
    GUID = LibC::GUID.new(0xf938c991_u32, 0x3029_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x44_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
    def query_interface(this : IAMPhysicalPinInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMPhysicalPinInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMPhysicalPinInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_physical_type(this : IAMPhysicalPinInfo*, pType : Int32*, ppszType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_physical_type.call(this, pType, ppszType)
    end

  end

  @[Extern]
  record IAMExtDeviceVtbl,
    query_interface : Proc(IAMExtDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMExtDevice*, UInt32),
    release : Proc(IAMExtDevice*, UInt32),
    get_capability : Proc(IAMExtDevice*, Int32, Int32*, Float64*, Win32cr::Foundation::HRESULT),
    get_ExternalDeviceID : Proc(IAMExtDevice*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_ExternalDeviceVersion : Proc(IAMExtDevice*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    put_DevicePower : Proc(IAMExtDevice*, Int32, Win32cr::Foundation::HRESULT),
    get_DevicePower : Proc(IAMExtDevice*, Int32*, Win32cr::Foundation::HRESULT),
    calibrate : Proc(IAMExtDevice*, LibC::UIntPtrT, Int32, Int32*, Win32cr::Foundation::HRESULT),
    put_DevicePort : Proc(IAMExtDevice*, Int32, Win32cr::Foundation::HRESULT),
    get_DevicePort : Proc(IAMExtDevice*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b5730a90-1a2c-11cf-8c23-00aa006b6814")]
  record IAMExtDevice, lpVtbl : IAMExtDeviceVtbl* do
    GUID = LibC::GUID.new(0xb5730a90_u32, 0x1a2c_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x23_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
    def query_interface(this : IAMExtDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMExtDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMExtDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capability(this : IAMExtDevice*, capability : Int32, pValue : Int32*, pdblValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capability.call(this, capability, pValue, pdblValue)
    end
    def get_ExternalDeviceID(this : IAMExtDevice*, ppszData : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExternalDeviceID.call(this, ppszData)
    end
    def get_ExternalDeviceVersion(this : IAMExtDevice*, ppszData : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExternalDeviceVersion.call(this, ppszData)
    end
    def put_DevicePower(this : IAMExtDevice*, power_mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DevicePower.call(this, power_mode)
    end
    def get_DevicePower(this : IAMExtDevice*, pPowerMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DevicePower.call(this, pPowerMode)
    end
    def calibrate(this : IAMExtDevice*, hEvent : LibC::UIntPtrT, mode : Int32, pStatus : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.calibrate.call(this, hEvent, mode, pStatus)
    end
    def put_DevicePort(this : IAMExtDevice*, device_port : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DevicePort.call(this, device_port)
    end
    def get_DevicePort(this : IAMExtDevice*, pDevicePort : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DevicePort.call(this, pDevicePort)
    end

  end

  @[Extern]
  record IAMExtTransportVtbl,
    query_interface : Proc(IAMExtTransport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMExtTransport*, UInt32),
    release : Proc(IAMExtTransport*, UInt32),
    get_capability : Proc(IAMExtTransport*, Int32, Int32*, Float64*, Win32cr::Foundation::HRESULT),
    put_MediaState : Proc(IAMExtTransport*, Int32, Win32cr::Foundation::HRESULT),
    get_MediaState : Proc(IAMExtTransport*, Int32*, Win32cr::Foundation::HRESULT),
    put_LocalControl : Proc(IAMExtTransport*, Int32, Win32cr::Foundation::HRESULT),
    get_LocalControl : Proc(IAMExtTransport*, Int32*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IAMExtTransport*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_transport_basic_parameters : Proc(IAMExtTransport*, Int32, Int32*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_transport_basic_parameters : Proc(IAMExtTransport*, Int32, Int32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_transport_video_parameters : Proc(IAMExtTransport*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    set_transport_video_parameters : Proc(IAMExtTransport*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_transport_audio_parameters : Proc(IAMExtTransport*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    set_transport_audio_parameters : Proc(IAMExtTransport*, Int32, Int32, Win32cr::Foundation::HRESULT),
    put_Mode : Proc(IAMExtTransport*, Int32, Win32cr::Foundation::HRESULT),
    get_Mode : Proc(IAMExtTransport*, Int32*, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IAMExtTransport*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IAMExtTransport*, Float64*, Win32cr::Foundation::HRESULT),
    get_chase : Proc(IAMExtTransport*, Int32*, Int32*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    set_chase : Proc(IAMExtTransport*, Int32, Int32, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_bump : Proc(IAMExtTransport*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_bump : Proc(IAMExtTransport*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_AntiClogControl : Proc(IAMExtTransport*, Int32*, Win32cr::Foundation::HRESULT),
    put_AntiClogControl : Proc(IAMExtTransport*, Int32, Win32cr::Foundation::HRESULT),
    get_edit_property_set : Proc(IAMExtTransport*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    set_edit_property_set : Proc(IAMExtTransport*, Int32*, Int32, Win32cr::Foundation::HRESULT),
    get_edit_property : Proc(IAMExtTransport*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    set_edit_property : Proc(IAMExtTransport*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_EditStart : Proc(IAMExtTransport*, Int32*, Win32cr::Foundation::HRESULT),
    put_EditStart : Proc(IAMExtTransport*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a03cd5f0-3045-11cf-8c44-00aa006b6814")]
  record IAMExtTransport, lpVtbl : IAMExtTransportVtbl* do
    GUID = LibC::GUID.new(0xa03cd5f0_u32, 0x3045_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x44_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
    def query_interface(this : IAMExtTransport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMExtTransport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMExtTransport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capability(this : IAMExtTransport*, capability : Int32, pValue : Int32*, pdblValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capability.call(this, capability, pValue, pdblValue)
    end
    def put_MediaState(this : IAMExtTransport*, state : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaState.call(this, state)
    end
    def get_MediaState(this : IAMExtTransport*, pState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaState.call(this, pState)
    end
    def put_LocalControl(this : IAMExtTransport*, state : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalControl.call(this, state)
    end
    def get_LocalControl(this : IAMExtTransport*, pState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalControl.call(this, pState)
    end
    def get_status(this : IAMExtTransport*, status_item : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, status_item, pValue)
    end
    def get_transport_basic_parameters(this : IAMExtTransport*, param : Int32, pValue : Int32*, ppszData : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_basic_parameters.call(this, param, pValue, ppszData)
    end
    def set_transport_basic_parameters(this : IAMExtTransport*, param : Int32, value : Int32, pszData : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transport_basic_parameters.call(this, param, value, pszData)
    end
    def get_transport_video_parameters(this : IAMExtTransport*, param : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_video_parameters.call(this, param, pValue)
    end
    def set_transport_video_parameters(this : IAMExtTransport*, param : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transport_video_parameters.call(this, param, value)
    end
    def get_transport_audio_parameters(this : IAMExtTransport*, param : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_audio_parameters.call(this, param, pValue)
    end
    def set_transport_audio_parameters(this : IAMExtTransport*, param : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_transport_audio_parameters.call(this, param, value)
    end
    def put_Mode(this : IAMExtTransport*, mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mode.call(this, mode)
    end
    def get_Mode(this : IAMExtTransport*, pMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mode.call(this, pMode)
    end
    def put_Rate(this : IAMExtTransport*, dblRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, dblRate)
    end
    def get_Rate(this : IAMExtTransport*, pdblRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, pdblRate)
    end
    def get_chase(this : IAMExtTransport*, pEnabled : Int32*, pOffset : Int32*, phEvent : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_chase.call(this, pEnabled, pOffset, phEvent)
    end
    def set_chase(this : IAMExtTransport*, enable : Int32, offset : Int32, hEvent : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_chase.call(this, enable, offset, hEvent)
    end
    def get_bump(this : IAMExtTransport*, pSpeed : Int32*, pDuration : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bump.call(this, pSpeed, pDuration)
    end
    def set_bump(this : IAMExtTransport*, speed : Int32, duration : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_bump.call(this, speed, duration)
    end
    def get_AntiClogControl(this : IAMExtTransport*, pEnabled : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AntiClogControl.call(this, pEnabled)
    end
    def put_AntiClogControl(this : IAMExtTransport*, enable : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AntiClogControl.call(this, enable)
    end
    def get_edit_property_set(this : IAMExtTransport*, edit_id : Int32, pState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_edit_property_set.call(this, edit_id, pState)
    end
    def set_edit_property_set(this : IAMExtTransport*, pEditID : Int32*, state : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_edit_property_set.call(this, pEditID, state)
    end
    def get_edit_property(this : IAMExtTransport*, edit_id : Int32, param : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_edit_property.call(this, edit_id, param, pValue)
    end
    def set_edit_property(this : IAMExtTransport*, edit_id : Int32, param : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_edit_property.call(this, edit_id, param, value)
    end
    def get_EditStart(this : IAMExtTransport*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EditStart.call(this, pValue)
    end
    def put_EditStart(this : IAMExtTransport*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EditStart.call(this, value)
    end

  end

  @[Extern]
  record IAMTimecodeReaderVtbl,
    query_interface : Proc(IAMTimecodeReader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTimecodeReader*, UInt32),
    release : Proc(IAMTimecodeReader*, UInt32),
    get_tcr_mode : Proc(IAMTimecodeReader*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    set_tcr_mode : Proc(IAMTimecodeReader*, Int32, Int32, Win32cr::Foundation::HRESULT),
    put_VITCLine : Proc(IAMTimecodeReader*, Int32, Win32cr::Foundation::HRESULT),
    get_VITCLine : Proc(IAMTimecodeReader*, Int32*, Win32cr::Foundation::HRESULT),
    get_timecode : Proc(IAMTimecodeReader*, Win32cr::Media::TIMECODE_SAMPLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9b496ce1-811b-11cf-8c77-00aa006b6814")]
  record IAMTimecodeReader, lpVtbl : IAMTimecodeReaderVtbl* do
    GUID = LibC::GUID.new(0x9b496ce1_u32, 0x811b_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x77_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
    def query_interface(this : IAMTimecodeReader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTimecodeReader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTimecodeReader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tcr_mode(this : IAMTimecodeReader*, param : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tcr_mode.call(this, param, pValue)
    end
    def set_tcr_mode(this : IAMTimecodeReader*, param : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tcr_mode.call(this, param, value)
    end
    def put_VITCLine(this : IAMTimecodeReader*, line : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VITCLine.call(this, line)
    end
    def get_VITCLine(this : IAMTimecodeReader*, pLine : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VITCLine.call(this, pLine)
    end
    def get_timecode(this : IAMTimecodeReader*, pTimecodeSample : Win32cr::Media::TIMECODE_SAMPLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_timecode.call(this, pTimecodeSample)
    end

  end

  @[Extern]
  record IAMTimecodeGeneratorVtbl,
    query_interface : Proc(IAMTimecodeGenerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTimecodeGenerator*, UInt32),
    release : Proc(IAMTimecodeGenerator*, UInt32),
    get_tcg_mode : Proc(IAMTimecodeGenerator*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    set_tcg_mode : Proc(IAMTimecodeGenerator*, Int32, Int32, Win32cr::Foundation::HRESULT),
    put_VITCLine : Proc(IAMTimecodeGenerator*, Int32, Win32cr::Foundation::HRESULT),
    get_VITCLine : Proc(IAMTimecodeGenerator*, Int32*, Win32cr::Foundation::HRESULT),
    set_timecode : Proc(IAMTimecodeGenerator*, Win32cr::Media::TIMECODE_SAMPLE*, Win32cr::Foundation::HRESULT),
    get_timecode : Proc(IAMTimecodeGenerator*, Win32cr::Media::TIMECODE_SAMPLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9b496ce0-811b-11cf-8c77-00aa006b6814")]
  record IAMTimecodeGenerator, lpVtbl : IAMTimecodeGeneratorVtbl* do
    GUID = LibC::GUID.new(0x9b496ce0_u32, 0x811b_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x77_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
    def query_interface(this : IAMTimecodeGenerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTimecodeGenerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTimecodeGenerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tcg_mode(this : IAMTimecodeGenerator*, param : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tcg_mode.call(this, param, pValue)
    end
    def set_tcg_mode(this : IAMTimecodeGenerator*, param : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tcg_mode.call(this, param, value)
    end
    def put_VITCLine(this : IAMTimecodeGenerator*, line : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VITCLine.call(this, line)
    end
    def get_VITCLine(this : IAMTimecodeGenerator*, pLine : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VITCLine.call(this, pLine)
    end
    def set_timecode(this : IAMTimecodeGenerator*, pTimecodeSample : Win32cr::Media::TIMECODE_SAMPLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_timecode.call(this, pTimecodeSample)
    end
    def get_timecode(this : IAMTimecodeGenerator*, pTimecodeSample : Win32cr::Media::TIMECODE_SAMPLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_timecode.call(this, pTimecodeSample)
    end

  end

  @[Extern]
  record IAMTimecodeDisplayVtbl,
    query_interface : Proc(IAMTimecodeDisplay*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMTimecodeDisplay*, UInt32),
    release : Proc(IAMTimecodeDisplay*, UInt32),
    get_tc_display_enable : Proc(IAMTimecodeDisplay*, Int32*, Win32cr::Foundation::HRESULT),
    set_tc_display_enable : Proc(IAMTimecodeDisplay*, Int32, Win32cr::Foundation::HRESULT),
    get_tc_display : Proc(IAMTimecodeDisplay*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    set_tc_display : Proc(IAMTimecodeDisplay*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9b496ce2-811b-11cf-8c77-00aa006b6814")]
  record IAMTimecodeDisplay, lpVtbl : IAMTimecodeDisplayVtbl* do
    GUID = LibC::GUID.new(0x9b496ce2_u32, 0x811b_u16, 0x11cf_u16, StaticArray[0x8c_u8, 0x77_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0x68_u8, 0x14_u8])
    def query_interface(this : IAMTimecodeDisplay*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMTimecodeDisplay*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMTimecodeDisplay*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tc_display_enable(this : IAMTimecodeDisplay*, pState : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tc_display_enable.call(this, pState)
    end
    def set_tc_display_enable(this : IAMTimecodeDisplay*, state : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tc_display_enable.call(this, state)
    end
    def get_tc_display(this : IAMTimecodeDisplay*, param : Int32, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tc_display.call(this, param, pValue)
    end
    def set_tc_display(this : IAMTimecodeDisplay*, param : Int32, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tc_display.call(this, param, value)
    end

  end

  @[Extern]
  record IAMDevMemoryAllocatorVtbl,
    query_interface : Proc(IAMDevMemoryAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMDevMemoryAllocator*, UInt32),
    release : Proc(IAMDevMemoryAllocator*, UInt32),
    get_info : Proc(IAMDevMemoryAllocator*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    check_memory : Proc(IAMDevMemoryAllocator*, UInt8*, Win32cr::Foundation::HRESULT),
    alloc : Proc(IAMDevMemoryAllocator*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    free : Proc(IAMDevMemoryAllocator*, UInt8*, Win32cr::Foundation::HRESULT),
    get_dev_memory_object : Proc(IAMDevMemoryAllocator*, Void**, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6545bf0-e76b-11d0-bd52-00a0c911ce86")]
  record IAMDevMemoryAllocator, lpVtbl : IAMDevMemoryAllocatorVtbl* do
    GUID = LibC::GUID.new(0xc6545bf0_u32, 0xe76b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x52_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
    def query_interface(this : IAMDevMemoryAllocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMDevMemoryAllocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMDevMemoryAllocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_info(this : IAMDevMemoryAllocator*, pdwcbTotalFree : UInt32*, pdwcbLargestFree : UInt32*, pdwcbTotalMemory : UInt32*, pdwcbMinimumChunk : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this, pdwcbTotalFree, pdwcbLargestFree, pdwcbTotalMemory, pdwcbMinimumChunk)
    end
    def check_memory(this : IAMDevMemoryAllocator*, pBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_memory.call(this, pBuffer)
    end
    def alloc(this : IAMDevMemoryAllocator*, ppBuffer : UInt8**, pdwcbBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.alloc.call(this, ppBuffer, pdwcbBuffer)
    end
    def free(this : IAMDevMemoryAllocator*, pBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free.call(this, pBuffer)
    end
    def get_dev_memory_object(this : IAMDevMemoryAllocator*, ppUnkInnner : Void**, pUnkOuter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dev_memory_object.call(this, ppUnkInnner, pUnkOuter)
    end

  end

  @[Extern]
  record IAMDevMemoryControlVtbl,
    query_interface : Proc(IAMDevMemoryControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMDevMemoryControl*, UInt32),
    release : Proc(IAMDevMemoryControl*, UInt32),
    query_write_sync : Proc(IAMDevMemoryControl*, Win32cr::Foundation::HRESULT),
    write_sync : Proc(IAMDevMemoryControl*, Win32cr::Foundation::HRESULT),
    get_dev_id : Proc(IAMDevMemoryControl*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6545bf1-e76b-11d0-bd52-00a0c911ce86")]
  record IAMDevMemoryControl, lpVtbl : IAMDevMemoryControlVtbl* do
    GUID = LibC::GUID.new(0xc6545bf1_u32, 0xe76b_u16, 0x11d0_u16, StaticArray[0xbd_u8, 0x52_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x11_u8, 0xce_u8, 0x86_u8])
    def query_interface(this : IAMDevMemoryControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMDevMemoryControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMDevMemoryControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_write_sync(this : IAMDevMemoryControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_write_sync.call(this)
    end
    def write_sync(this : IAMDevMemoryControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_sync.call(this)
    end
    def get_dev_id(this : IAMDevMemoryControl*, pdwDevId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dev_id.call(this, pdwDevId)
    end

  end

  @[Extern]
  record IAMStreamSelectVtbl,
    query_interface : Proc(IAMStreamSelect*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMStreamSelect*, UInt32),
    release : Proc(IAMStreamSelect*, UInt32),
    count : Proc(IAMStreamSelect*, UInt32*, Win32cr::Foundation::HRESULT),
    info : Proc(IAMStreamSelect*, Int32, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::PWSTR*, Void**, Void**, Win32cr::Foundation::HRESULT),
    enable : Proc(IAMStreamSelect*, Int32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c1960960-17f5-11d1-abe1-00a0c905f375")]
  record IAMStreamSelect, lpVtbl : IAMStreamSelectVtbl* do
    GUID = LibC::GUID.new(0xc1960960_u32, 0x17f5_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IAMStreamSelect*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMStreamSelect*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMStreamSelect*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def count(this : IAMStreamSelect*, pcStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.count.call(this, pcStreams)
    end
    def info(this : IAMStreamSelect*, lIndex : Int32, ppmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, pdwFlags : UInt32*, plcid : UInt32*, pdwGroup : UInt32*, ppszName : Win32cr::Foundation::PWSTR*, ppObject : Void**, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.info.call(this, lIndex, ppmt, pdwFlags, plcid, pdwGroup, ppszName, ppObject, ppUnk)
    end
    def enable(this : IAMStreamSelect*, lIndex : Int32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable.call(this, lIndex, dwFlags)
    end

  end

  @[Extern]
  record IAMResourceControlVtbl,
    query_interface : Proc(IAMResourceControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMResourceControl*, UInt32),
    release : Proc(IAMResourceControl*, UInt32),
    reserve : Proc(IAMResourceControl*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8389d2d0-77d7-11d1-abe6-00a0c905f375")]
  record IAMResourceControl, lpVtbl : IAMResourceControlVtbl* do
    GUID = LibC::GUID.new(0x8389d2d0_u32, 0x77d7_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IAMResourceControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMResourceControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMResourceControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reserve(this : IAMResourceControl*, dwFlags : UInt32, pvReserved : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reserve.call(this, dwFlags, pvReserved)
    end

  end

  @[Extern]
  record IAMClockAdjustVtbl,
    query_interface : Proc(IAMClockAdjust*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMClockAdjust*, UInt32),
    release : Proc(IAMClockAdjust*, UInt32),
    set_clock_delta : Proc(IAMClockAdjust*, Int64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4d5466b0-a49c-11d1-abe8-00a0c905f375")]
  record IAMClockAdjust, lpVtbl : IAMClockAdjustVtbl* do
    GUID = LibC::GUID.new(0x4d5466b0_u32, 0xa49c_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IAMClockAdjust*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMClockAdjust*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMClockAdjust*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_clock_delta(this : IAMClockAdjust*, rtDelta : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clock_delta.call(this, rtDelta)
    end

  end

  @[Extern]
  record IAMFilterMiscFlagsVtbl,
    query_interface : Proc(IAMFilterMiscFlags*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMFilterMiscFlags*, UInt32),
    release : Proc(IAMFilterMiscFlags*, UInt32),
    get_misc_flags : Proc(IAMFilterMiscFlags*, UInt32)


  @[Extern]
  #@[Com("2dd74950-a890-11d1-abe8-00a0c905f375")]
  record IAMFilterMiscFlags, lpVtbl : IAMFilterMiscFlagsVtbl* do
    GUID = LibC::GUID.new(0x2dd74950_u32, 0xa890_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IAMFilterMiscFlags*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMFilterMiscFlags*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMFilterMiscFlags*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_misc_flags(this : IAMFilterMiscFlags*) : UInt32
      @lpVtbl.try &.value.get_misc_flags.call(this)
    end

  end

  @[Extern]
  record IDrawVideoImageVtbl,
    query_interface : Proc(IDrawVideoImage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDrawVideoImage*, UInt32),
    release : Proc(IDrawVideoImage*, UInt32),
    draw_video_image_begin : Proc(IDrawVideoImage*, Win32cr::Foundation::HRESULT),
    draw_video_image_end : Proc(IDrawVideoImage*, Win32cr::Foundation::HRESULT),
    draw_video_image_draw : Proc(IDrawVideoImage*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("48efb120-ab49-11d2-aed2-00a0c995e8d5")]
  record IDrawVideoImage, lpVtbl : IDrawVideoImageVtbl* do
    GUID = LibC::GUID.new(0x48efb120_u32, 0xab49_u16, 0x11d2_u16, StaticArray[0xae_u8, 0xd2_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x95_u8, 0xe8_u8, 0xd5_u8])
    def query_interface(this : IDrawVideoImage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDrawVideoImage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDrawVideoImage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def draw_video_image_begin(this : IDrawVideoImage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_video_image_begin.call(this)
    end
    def draw_video_image_end(this : IDrawVideoImage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_video_image_end.call(this)
    end
    def draw_video_image_draw(this : IDrawVideoImage*, hdc : Win32cr::Graphics::Gdi::HDC, lprcSrc : Win32cr::Foundation::RECT*, lprcDst : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.draw_video_image_draw.call(this, hdc, lprcSrc, lprcDst)
    end

  end

  @[Extern]
  record IDecimateVideoImageVtbl,
    query_interface : Proc(IDecimateVideoImage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDecimateVideoImage*, UInt32),
    release : Proc(IDecimateVideoImage*, UInt32),
    set_decimation_image_size : Proc(IDecimateVideoImage*, Int32, Int32, Win32cr::Foundation::HRESULT),
    reset_decimation_image_size : Proc(IDecimateVideoImage*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2e5ea3e0-e924-11d2-b6da-00a0c995e8df")]
  record IDecimateVideoImage, lpVtbl : IDecimateVideoImageVtbl* do
    GUID = LibC::GUID.new(0x2e5ea3e0_u32, 0xe924_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0xda_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x95_u8, 0xe8_u8, 0xdf_u8])
    def query_interface(this : IDecimateVideoImage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDecimateVideoImage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDecimateVideoImage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_decimation_image_size(this : IDecimateVideoImage*, lWidth : Int32, lHeight : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_decimation_image_size.call(this, lWidth, lHeight)
    end
    def reset_decimation_image_size(this : IDecimateVideoImage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_decimation_image_size.call(this)
    end

  end

  @[Extern]
  record IAMVideoDecimationPropertiesVtbl,
    query_interface : Proc(IAMVideoDecimationProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVideoDecimationProperties*, UInt32),
    release : Proc(IAMVideoDecimationProperties*, UInt32),
    query_decimation_usage : Proc(IAMVideoDecimationProperties*, Win32cr::Media::DirectShow::DECIMATION_USAGE*, Win32cr::Foundation::HRESULT),
    set_decimation_usage : Proc(IAMVideoDecimationProperties*, Win32cr::Media::DirectShow::DECIMATION_USAGE, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("60d32930-13da-11d3-9ec6-c4fcaef5c7be")]
  record IAMVideoDecimationProperties, lpVtbl : IAMVideoDecimationPropertiesVtbl* do
    GUID = LibC::GUID.new(0x60d32930_u32, 0x13da_u16, 0x11d3_u16, StaticArray[0x9e_u8, 0xc6_u8, 0xc4_u8, 0xfc_u8, 0xae_u8, 0xf5_u8, 0xc7_u8, 0xbe_u8])
    def query_interface(this : IAMVideoDecimationProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVideoDecimationProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVideoDecimationProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_decimation_usage(this : IAMVideoDecimationProperties*, lpUsage : Win32cr::Media::DirectShow::DECIMATION_USAGE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_decimation_usage.call(this, lpUsage)
    end
    def set_decimation_usage(this : IAMVideoDecimationProperties*, usage : Win32cr::Media::DirectShow::DECIMATION_USAGE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_decimation_usage.call(this, usage)
    end

  end

  @[Extern]
  record IVideoFrameStepVtbl,
    query_interface : Proc(IVideoFrameStep*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVideoFrameStep*, UInt32),
    release : Proc(IVideoFrameStep*, UInt32),
    step : Proc(IVideoFrameStep*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    can_step : Proc(IVideoFrameStep*, Int32, Void*, Win32cr::Foundation::HRESULT),
    cancel_step : Proc(IVideoFrameStep*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e46a9787-2b71-444d-a4b5-1fab7b708d6a")]
  record IVideoFrameStep, lpVtbl : IVideoFrameStepVtbl* do
    GUID = LibC::GUID.new(0xe46a9787_u32, 0x2b71_u16, 0x444d_u16, StaticArray[0xa4_u8, 0xb5_u8, 0x1f_u8, 0xab_u8, 0x7b_u8, 0x70_u8, 0x8d_u8, 0x6a_u8])
    def query_interface(this : IVideoFrameStep*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVideoFrameStep*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVideoFrameStep*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def step(this : IVideoFrameStep*, dwFrames : UInt32, pStepObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, dwFrames, pStepObject)
    end
    def can_step(this : IVideoFrameStep*, bMultiple : Int32, pStepObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_step.call(this, bMultiple, pStepObject)
    end
    def cancel_step(this : IVideoFrameStep*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_step.call(this)
    end

  end

  @[Extern]
  record IAMLatencyVtbl,
    query_interface : Proc(IAMLatency*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMLatency*, UInt32),
    release : Proc(IAMLatency*, UInt32),
    get_latency : Proc(IAMLatency*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("62ea93ba-ec62-11d2-b770-00c04fb6bd3d")]
  record IAMLatency, lpVtbl : IAMLatencyVtbl* do
    GUID = LibC::GUID.new(0x62ea93ba_u32, 0xec62_u16, 0x11d2_u16, StaticArray[0xb7_u8, 0x70_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbd_u8, 0x3d_u8])
    def query_interface(this : IAMLatency*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMLatency*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMLatency*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_latency(this : IAMLatency*, prtLatency : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_latency.call(this, prtLatency)
    end

  end

  @[Extern]
  record IAMPushSourceVtbl,
    query_interface : Proc(IAMPushSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMPushSource*, UInt32),
    release : Proc(IAMPushSource*, UInt32),
    get_latency : Proc(IAMPushSource*, Int64*, Win32cr::Foundation::HRESULT),
    get_push_source_flags : Proc(IAMPushSource*, UInt32*, Win32cr::Foundation::HRESULT),
    set_push_source_flags : Proc(IAMPushSource*, UInt32, Win32cr::Foundation::HRESULT),
    set_stream_offset : Proc(IAMPushSource*, Int64, Win32cr::Foundation::HRESULT),
    get_stream_offset : Proc(IAMPushSource*, Int64*, Win32cr::Foundation::HRESULT),
    get_max_stream_offset : Proc(IAMPushSource*, Int64*, Win32cr::Foundation::HRESULT),
    set_max_stream_offset : Proc(IAMPushSource*, Int64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f185fe76-e64e-11d2-b76e-00c04fb6bd3d")]
  record IAMPushSource, lpVtbl : IAMPushSourceVtbl* do
    GUID = LibC::GUID.new(0xf185fe76_u32, 0xe64e_u16, 0x11d2_u16, StaticArray[0xb7_u8, 0x6e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbd_u8, 0x3d_u8])
    def query_interface(this : IAMPushSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMPushSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMPushSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_latency(this : IAMPushSource*, prtLatency : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_latency.call(this, prtLatency)
    end
    def get_push_source_flags(this : IAMPushSource*, pFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_push_source_flags.call(this, pFlags)
    end
    def set_push_source_flags(this : IAMPushSource*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_push_source_flags.call(this, flags)
    end
    def set_stream_offset(this : IAMPushSource*, rtOffset : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_offset.call(this, rtOffset)
    end
    def get_stream_offset(this : IAMPushSource*, prtOffset : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_offset.call(this, prtOffset)
    end
    def get_max_stream_offset(this : IAMPushSource*, prtMaxOffset : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_stream_offset.call(this, prtMaxOffset)
    end
    def set_max_stream_offset(this : IAMPushSource*, rtMaxOffset : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_max_stream_offset.call(this, rtMaxOffset)
    end

  end

  @[Extern]
  record IAMDeviceRemovalVtbl,
    query_interface : Proc(IAMDeviceRemoval*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMDeviceRemoval*, UInt32),
    release : Proc(IAMDeviceRemoval*, UInt32),
    device_info : Proc(IAMDeviceRemoval*, LibC::GUID*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    reassociate : Proc(IAMDeviceRemoval*, Win32cr::Foundation::HRESULT),
    disassociate : Proc(IAMDeviceRemoval*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f90a6130-b658-11d2-ae49-0000f8754b99")]
  record IAMDeviceRemoval, lpVtbl : IAMDeviceRemovalVtbl* do
    GUID = LibC::GUID.new(0xf90a6130_u32, 0xb658_u16, 0x11d2_u16, StaticArray[0xae_u8, 0x49_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x75_u8, 0x4b_u8, 0x99_u8])
    def query_interface(this : IAMDeviceRemoval*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMDeviceRemoval*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMDeviceRemoval*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def device_info(this : IAMDeviceRemoval*, pclsidInterfaceClass : LibC::GUID*, pwszSymbolicLink : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.device_info.call(this, pclsidInterfaceClass, pwszSymbolicLink)
    end
    def reassociate(this : IAMDeviceRemoval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reassociate.call(this)
    end
    def disassociate(this : IAMDeviceRemoval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disassociate.call(this)
    end

  end

  @[Extern]
  record IDVEncVtbl,
    query_interface : Proc(IDVEnc*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVEnc*, UInt32),
    release : Proc(IDVEnc*, UInt32),
    get_IFormatResolution : Proc(IDVEnc*, Int32*, Int32*, Int32*, UInt8, Win32cr::Media::DirectShow::DVINFO*, Win32cr::Foundation::HRESULT),
    put_IFormatResolution : Proc(IDVEnc*, Int32, Int32, Int32, UInt8, Win32cr::Media::DirectShow::DVINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d18e17a0-aacb-11d0-afb0-00aa00b67a42")]
  record IDVEnc, lpVtbl : IDVEncVtbl* do
    GUID = LibC::GUID.new(0xd18e17a0_u32, 0xaacb_u16, 0x11d0_u16, StaticArray[0xaf_u8, 0xb0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xb6_u8, 0x7a_u8, 0x42_u8])
    def query_interface(this : IDVEnc*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVEnc*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVEnc*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_IFormatResolution(this : IDVEnc*, video_format : Int32*, dv_format : Int32*, resolution : Int32*, fDVInfo : UInt8, sDVInfo : Win32cr::Media::DirectShow::DVINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IFormatResolution.call(this, video_format, dv_format, resolution, fDVInfo, sDVInfo)
    end
    def put_IFormatResolution(this : IDVEnc*, video_format : Int32, dv_format : Int32, resolution : Int32, fDVInfo : UInt8, sDVInfo : Win32cr::Media::DirectShow::DVINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IFormatResolution.call(this, video_format, dv_format, resolution, fDVInfo, sDVInfo)
    end

  end

  @[Extern]
  record IIPDVDecVtbl,
    query_interface : Proc(IIPDVDec*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIPDVDec*, UInt32),
    release : Proc(IIPDVDec*, UInt32),
    get_IPDisplay : Proc(IIPDVDec*, Int32*, Win32cr::Foundation::HRESULT),
    put_IPDisplay : Proc(IIPDVDec*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b8e8bd60-0bfe-11d0-af91-00aa00b67a42")]
  record IIPDVDec, lpVtbl : IIPDVDecVtbl* do
    GUID = LibC::GUID.new(0xb8e8bd60_u32, 0xbfe_u16, 0x11d0_u16, StaticArray[0xaf_u8, 0x91_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xb6_u8, 0x7a_u8, 0x42_u8])
    def query_interface(this : IIPDVDec*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIPDVDec*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIPDVDec*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_IPDisplay(this : IIPDVDec*, displayPix : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IPDisplay.call(this, displayPix)
    end
    def put_IPDisplay(this : IIPDVDec*, displayPix : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IPDisplay.call(this, displayPix)
    end

  end

  @[Extern]
  record IDVRGB219Vtbl,
    query_interface : Proc(IDVRGB219*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVRGB219*, UInt32),
    release : Proc(IDVRGB219*, UInt32),
    set_rgb219 : Proc(IDVRGB219*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("58473a19-2bc8-4663-8012-25f81babddd1")]
  record IDVRGB219, lpVtbl : IDVRGB219Vtbl* do
    GUID = LibC::GUID.new(0x58473a19_u32, 0x2bc8_u16, 0x4663_u16, StaticArray[0x80_u8, 0x12_u8, 0x25_u8, 0xf8_u8, 0x1b_u8, 0xab_u8, 0xdd_u8, 0xd1_u8])
    def query_interface(this : IDVRGB219*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVRGB219*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVRGB219*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_rgb219(this : IDVRGB219*, bState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rgb219.call(this, bState)
    end

  end

  @[Extern]
  record IDVSplitterVtbl,
    query_interface : Proc(IDVSplitter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVSplitter*, UInt32),
    release : Proc(IDVSplitter*, UInt32),
    discard_alternate_video_frames : Proc(IDVSplitter*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("92a3a302-da7c-4a1f-ba7e-1802bb5d2d02")]
  record IDVSplitter, lpVtbl : IDVSplitterVtbl* do
    GUID = LibC::GUID.new(0x92a3a302_u32, 0xda7c_u16, 0x4a1f_u16, StaticArray[0xba_u8, 0x7e_u8, 0x18_u8, 0x2_u8, 0xbb_u8, 0x5d_u8, 0x2d_u8, 0x2_u8])
    def query_interface(this : IDVSplitter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVSplitter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVSplitter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def discard_alternate_video_frames(this : IDVSplitter*, nDiscard : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.discard_alternate_video_frames.call(this, nDiscard)
    end

  end

  @[Extern]
  record IAMAudioRendererStatsVtbl,
    query_interface : Proc(IAMAudioRendererStats*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMAudioRendererStats*, UInt32),
    release : Proc(IAMAudioRendererStats*, UInt32),
    get_stat_param : Proc(IAMAudioRendererStats*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("22320cb2-d41a-11d2-bf7c-d7cb9df0bf93")]
  record IAMAudioRendererStats, lpVtbl : IAMAudioRendererStatsVtbl* do
    GUID = LibC::GUID.new(0x22320cb2_u32, 0xd41a_u16, 0x11d2_u16, StaticArray[0xbf_u8, 0x7c_u8, 0xd7_u8, 0xcb_u8, 0x9d_u8, 0xf0_u8, 0xbf_u8, 0x93_u8])
    def query_interface(this : IAMAudioRendererStats*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMAudioRendererStats*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMAudioRendererStats*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stat_param(this : IAMAudioRendererStats*, dwParam : UInt32, pdwParam1 : UInt32*, pdwParam2 : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stat_param.call(this, dwParam, pdwParam1, pdwParam2)
    end

  end

  @[Extern]
  record IAMGraphStreamsVtbl,
    query_interface : Proc(IAMGraphStreams*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMGraphStreams*, UInt32),
    release : Proc(IAMGraphStreams*, UInt32),
    find_upstream_interface : Proc(IAMGraphStreams*, Void*, LibC::GUID*, Void**, UInt32, Win32cr::Foundation::HRESULT),
    sync_using_stream_offset : Proc(IAMGraphStreams*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_max_graph_latency : Proc(IAMGraphStreams*, Int64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("632105fa-072e-11d3-8af9-00c04fb6bd3d")]
  record IAMGraphStreams, lpVtbl : IAMGraphStreamsVtbl* do
    GUID = LibC::GUID.new(0x632105fa_u32, 0x72e_u16, 0x11d3_u16, StaticArray[0x8a_u8, 0xf9_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xbd_u8, 0x3d_u8])
    def query_interface(this : IAMGraphStreams*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMGraphStreams*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMGraphStreams*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def find_upstream_interface(this : IAMGraphStreams*, pPin : Void*, riid : LibC::GUID*, ppvInterface : Void**, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_upstream_interface.call(this, pPin, riid, ppvInterface, dwFlags)
    end
    def sync_using_stream_offset(this : IAMGraphStreams*, bUseStreamOffset : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.sync_using_stream_offset.call(this, bUseStreamOffset)
    end
    def set_max_graph_latency(this : IAMGraphStreams*, rtMaxGraphLatency : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_max_graph_latency.call(this, rtMaxGraphLatency)
    end

  end

  @[Extern]
  record IAMOverlayFXVtbl,
    query_interface : Proc(IAMOverlayFX*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMOverlayFX*, UInt32),
    release : Proc(IAMOverlayFX*, UInt32),
    query_overlay_fx_caps : Proc(IAMOverlayFX*, UInt32*, Win32cr::Foundation::HRESULT),
    set_overlay_fx : Proc(IAMOverlayFX*, UInt32, Win32cr::Foundation::HRESULT),
    get_overlay_fx : Proc(IAMOverlayFX*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("62fae250-7e65-4460-bfc9-6398b322073c")]
  record IAMOverlayFX, lpVtbl : IAMOverlayFXVtbl* do
    GUID = LibC::GUID.new(0x62fae250_u32, 0x7e65_u16, 0x4460_u16, StaticArray[0xbf_u8, 0xc9_u8, 0x63_u8, 0x98_u8, 0xb3_u8, 0x22_u8, 0x7_u8, 0x3c_u8])
    def query_interface(this : IAMOverlayFX*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMOverlayFX*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMOverlayFX*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_overlay_fx_caps(this : IAMOverlayFX*, lpdwOverlayFXCaps : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_overlay_fx_caps.call(this, lpdwOverlayFXCaps)
    end
    def set_overlay_fx(this : IAMOverlayFX*, dwOverlayFX : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_overlay_fx.call(this, dwOverlayFX)
    end
    def get_overlay_fx(this : IAMOverlayFX*, lpdwOverlayFX : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_overlay_fx.call(this, lpdwOverlayFX)
    end

  end

  @[Extern]
  record IAMOpenProgressVtbl,
    query_interface : Proc(IAMOpenProgress*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMOpenProgress*, UInt32),
    release : Proc(IAMOpenProgress*, UInt32),
    query_progress : Proc(IAMOpenProgress*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    abort_operation : Proc(IAMOpenProgress*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8e1c39a1-de53-11cf-aa63-0080c744528d")]
  record IAMOpenProgress, lpVtbl : IAMOpenProgressVtbl* do
    GUID = LibC::GUID.new(0x8e1c39a1_u32, 0xde53_u16, 0x11cf_u16, StaticArray[0xaa_u8, 0x63_u8, 0x0_u8, 0x80_u8, 0xc7_u8, 0x44_u8, 0x52_u8, 0x8d_u8])
    def query_interface(this : IAMOpenProgress*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMOpenProgress*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMOpenProgress*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_progress(this : IAMOpenProgress*, pllTotal : Int64*, pllCurrent : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_progress.call(this, pllTotal, pllCurrent)
    end
    def abort_operation(this : IAMOpenProgress*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort_operation.call(this)
    end

  end

  @[Extern]
  record IMpeg2DemultiplexerVtbl,
    query_interface : Proc(IMpeg2Demultiplexer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMpeg2Demultiplexer*, UInt32),
    release : Proc(IMpeg2Demultiplexer*, UInt32),
    create_output_pin : Proc(IMpeg2Demultiplexer*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    set_output_pin_media_type : Proc(IMpeg2Demultiplexer*, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    delete_output_pin : Proc(IMpeg2Demultiplexer*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("436eee9c-264f-4242-90e1-4e330c107512")]
  record IMpeg2Demultiplexer, lpVtbl : IMpeg2DemultiplexerVtbl* do
    GUID = LibC::GUID.new(0x436eee9c_u32, 0x264f_u16, 0x4242_u16, StaticArray[0x90_u8, 0xe1_u8, 0x4e_u8, 0x33_u8, 0xc_u8, 0x10_u8, 0x75_u8, 0x12_u8])
    def query_interface(this : IMpeg2Demultiplexer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMpeg2Demultiplexer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMpeg2Demultiplexer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_output_pin(this : IMpeg2Demultiplexer*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, pszPinName : Win32cr::Foundation::PWSTR, ppIPin : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_output_pin.call(this, pMediaType, pszPinName, ppIPin)
    end
    def set_output_pin_media_type(this : IMpeg2Demultiplexer*, pszPinName : Win32cr::Foundation::PWSTR, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_pin_media_type.call(this, pszPinName, pMediaType)
    end
    def delete_output_pin(this : IMpeg2Demultiplexer*, pszPinName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_output_pin.call(this, pszPinName)
    end

  end

  @[Extern]
  record IEnumStreamIdMapVtbl,
    query_interface : Proc(IEnumStreamIdMap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumStreamIdMap*, UInt32),
    release : Proc(IEnumStreamIdMap*, UInt32),
    next__ : Proc(IEnumStreamIdMap*, UInt32, Win32cr::Media::DirectShow::STREAM_ID_MAP*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumStreamIdMap*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumStreamIdMap*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumStreamIdMap*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("945c1566-6202-46fc-96c7-d87f289c6534")]
  record IEnumStreamIdMap, lpVtbl : IEnumStreamIdMapVtbl* do
    GUID = LibC::GUID.new(0x945c1566_u32, 0x6202_u16, 0x46fc_u16, StaticArray[0x96_u8, 0xc7_u8, 0xd8_u8, 0x7f_u8, 0x28_u8, 0x9c_u8, 0x65_u8, 0x34_u8])
    def query_interface(this : IEnumStreamIdMap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumStreamIdMap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumStreamIdMap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumStreamIdMap*, cRequest : UInt32, pStreamIdMap : Win32cr::Media::DirectShow::STREAM_ID_MAP*, pcReceived : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cRequest, pStreamIdMap, pcReceived)
    end
    def skip(this : IEnumStreamIdMap*, cRecords : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cRecords)
    end
    def reset(this : IEnumStreamIdMap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumStreamIdMap*, ppIEnumStreamIdMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIEnumStreamIdMap)
    end

  end

  @[Extern]
  record IMPEG2StreamIdMapVtbl,
    query_interface : Proc(IMPEG2StreamIdMap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2StreamIdMap*, UInt32),
    release : Proc(IMPEG2StreamIdMap*, UInt32),
    map_stream_id : Proc(IMPEG2StreamIdMap*, UInt32, UInt32, UInt32, Int32, Win32cr::Foundation::HRESULT),
    unmap_stream_id : Proc(IMPEG2StreamIdMap*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    enum_stream_id_map : Proc(IMPEG2StreamIdMap*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d0e04c47-25b8-4369-925a-362a01d95444")]
  record IMPEG2StreamIdMap, lpVtbl : IMPEG2StreamIdMapVtbl* do
    GUID = LibC::GUID.new(0xd0e04c47_u32, 0x25b8_u16, 0x4369_u16, StaticArray[0x92_u8, 0x5a_u8, 0x36_u8, 0x2a_u8, 0x1_u8, 0xd9_u8, 0x54_u8, 0x44_u8])
    def query_interface(this : IMPEG2StreamIdMap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2StreamIdMap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2StreamIdMap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def map_stream_id(this : IMPEG2StreamIdMap*, ulStreamId : UInt32, media_sample_content : UInt32, ulSubstreamFilterValue : UInt32, iDataOffset : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_stream_id.call(this, ulStreamId, media_sample_content, ulSubstreamFilterValue, iDataOffset)
    end
    def unmap_stream_id(this : IMPEG2StreamIdMap*, culStreamId : UInt32, pulStreamId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unmap_stream_id.call(this, culStreamId, pulStreamId)
    end
    def enum_stream_id_map(this : IMPEG2StreamIdMap*, ppIEnumStreamIdMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_stream_id_map.call(this, ppIEnumStreamIdMap)
    end

  end

  @[Extern]
  record IRegisterServiceProviderVtbl,
    query_interface : Proc(IRegisterServiceProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRegisterServiceProvider*, UInt32),
    release : Proc(IRegisterServiceProvider*, UInt32),
    register_service : Proc(IRegisterServiceProvider*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7b3a2f01-0751-48dd-b556-004785171c54")]
  record IRegisterServiceProvider, lpVtbl : IRegisterServiceProviderVtbl* do
    GUID = LibC::GUID.new(0x7b3a2f01_u32, 0x751_u16, 0x48dd_u16, StaticArray[0xb5_u8, 0x56_u8, 0x0_u8, 0x47_u8, 0x85_u8, 0x17_u8, 0x1c_u8, 0x54_u8])
    def query_interface(this : IRegisterServiceProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRegisterServiceProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRegisterServiceProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_service(this : IRegisterServiceProvider*, guidService : LibC::GUID*, pUnkObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_service.call(this, guidService, pUnkObject)
    end

  end

  @[Extern]
  record IAMClockSlaveVtbl,
    query_interface : Proc(IAMClockSlave*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMClockSlave*, UInt32),
    release : Proc(IAMClockSlave*, UInt32),
    set_error_tolerance : Proc(IAMClockSlave*, UInt32, Win32cr::Foundation::HRESULT),
    get_error_tolerance : Proc(IAMClockSlave*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9fd52741-176d-4b36-8f51-ca8f933223be")]
  record IAMClockSlave, lpVtbl : IAMClockSlaveVtbl* do
    GUID = LibC::GUID.new(0x9fd52741_u32, 0x176d_u16, 0x4b36_u16, StaticArray[0x8f_u8, 0x51_u8, 0xca_u8, 0x8f_u8, 0x93_u8, 0x32_u8, 0x23_u8, 0xbe_u8])
    def query_interface(this : IAMClockSlave*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMClockSlave*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMClockSlave*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_error_tolerance(this : IAMClockSlave*, dwTolerance : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_error_tolerance.call(this, dwTolerance)
    end
    def get_error_tolerance(this : IAMClockSlave*, pdwTolerance : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error_tolerance.call(this, pdwTolerance)
    end

  end

  @[Extern]
  record IAMGraphBuilderCallbackVtbl,
    query_interface : Proc(IAMGraphBuilderCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMGraphBuilderCallback*, UInt32),
    release : Proc(IAMGraphBuilderCallback*, UInt32),
    selected_filter : Proc(IAMGraphBuilderCallback*, Void*, Win32cr::Foundation::HRESULT),
    created_filter : Proc(IAMGraphBuilderCallback*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4995f511-9ddb-4f12-bd3b-f04611807b79")]
  record IAMGraphBuilderCallback, lpVtbl : IAMGraphBuilderCallbackVtbl* do
    GUID = LibC::GUID.new(0x4995f511_u32, 0x9ddb_u16, 0x4f12_u16, StaticArray[0xbd_u8, 0x3b_u8, 0xf0_u8, 0x46_u8, 0x11_u8, 0x80_u8, 0x7b_u8, 0x79_u8])
    def query_interface(this : IAMGraphBuilderCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMGraphBuilderCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMGraphBuilderCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def selected_filter(this : IAMGraphBuilderCallback*, pMon : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.selected_filter.call(this, pMon)
    end
    def created_filter(this : IAMGraphBuilderCallback*, pFil : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.created_filter.call(this, pFil)
    end

  end

  @[Extern]
  record IAMFilterGraphCallbackVtbl,
    query_interface : Proc(IAMFilterGraphCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMFilterGraphCallback*, UInt32),
    release : Proc(IAMFilterGraphCallback*, UInt32),
    unable_to_render : Proc(IAMFilterGraphCallback*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868fd-0ad4-11ce-b0a3-0020af0ba770")]
  record IAMFilterGraphCallback, lpVtbl : IAMFilterGraphCallbackVtbl* do
    GUID = LibC::GUID.new(0x56a868fd_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0xa3_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IAMFilterGraphCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMFilterGraphCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMFilterGraphCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def unable_to_render(this : IAMFilterGraphCallback*, pPin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unable_to_render.call(this, pPin)
    end

  end

  @[Extern]
  record IGetCapabilitiesKeyVtbl,
    query_interface : Proc(IGetCapabilitiesKey*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGetCapabilitiesKey*, UInt32),
    release : Proc(IGetCapabilitiesKey*, UInt32),
    get_capabilities_key : Proc(IGetCapabilitiesKey*, Win32cr::System::Registry::HKEY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a8809222-07bb-48ea-951c-33158100625b")]
  record IGetCapabilitiesKey, lpVtbl : IGetCapabilitiesKeyVtbl* do
    GUID = LibC::GUID.new(0xa8809222_u32, 0x7bb_u16, 0x48ea_u16, StaticArray[0x95_u8, 0x1c_u8, 0x33_u8, 0x15_u8, 0x81_u8, 0x0_u8, 0x62_u8, 0x5b_u8])
    def query_interface(this : IGetCapabilitiesKey*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGetCapabilitiesKey*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGetCapabilitiesKey*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capabilities_key(this : IGetCapabilitiesKey*, pHKey : Win32cr::System::Registry::HKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities_key.call(this, pHKey)
    end

  end

  @[Extern]
  record IEncoderAPIVtbl,
    query_interface : Proc(IEncoderAPI*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEncoderAPI*, UInt32),
    release : Proc(IEncoderAPI*, UInt32),
    is_supported : Proc(IEncoderAPI*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_available : Proc(IEncoderAPI*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_parameter_range : Proc(IEncoderAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_parameter_values : Proc(IEncoderAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT**, UInt32*, Win32cr::Foundation::HRESULT),
    get_default_value : Proc(IEncoderAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IEncoderAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_value : Proc(IEncoderAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("70423839-6acc-4b23-b079-21dbf08156a5")]
  record IEncoderAPI, lpVtbl : IEncoderAPIVtbl* do
    GUID = LibC::GUID.new(0x70423839_u32, 0x6acc_u16, 0x4b23_u16, StaticArray[0xb0_u8, 0x79_u8, 0x21_u8, 0xdb_u8, 0xf0_u8, 0x81_u8, 0x56_u8, 0xa5_u8])
    def query_interface(this : IEncoderAPI*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEncoderAPI*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEncoderAPI*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_supported(this : IEncoderAPI*, api : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_supported.call(this, api)
    end
    def is_available(this : IEncoderAPI*, api : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_available.call(this, api)
    end
    def get_parameter_range(this : IEncoderAPI*, api : LibC::GUID*, value_min : Win32cr::System::Com::VARIANT*, value_max : Win32cr::System::Com::VARIANT*, stepping_delta : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_range.call(this, api, value_min, value_max, stepping_delta)
    end
    def get_parameter_values(this : IEncoderAPI*, api : LibC::GUID*, values : Win32cr::System::Com::VARIANT**, values_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_values.call(this, api, values, values_count)
    end
    def get_default_value(this : IEncoderAPI*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_value.call(this, api, value)
    end
    def get_value(this : IEncoderAPI*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, api, value)
    end
    def set_value(this : IEncoderAPI*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, api, value)
    end

  end

  @[Extern]
  record IVideoEncoderVtbl,
    query_interface : Proc(IVideoEncoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVideoEncoder*, UInt32),
    release : Proc(IVideoEncoder*, UInt32),
    is_supported : Proc(IVideoEncoder*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_available : Proc(IVideoEncoder*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_parameter_range : Proc(IVideoEncoder*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_parameter_values : Proc(IVideoEncoder*, LibC::GUID*, Win32cr::System::Com::VARIANT**, UInt32*, Win32cr::Foundation::HRESULT),
    get_default_value : Proc(IVideoEncoder*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IVideoEncoder*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_value : Proc(IVideoEncoder*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("02997c3b-8e1b-460e-9270-545e0de9563e")]
  record IVideoEncoder, lpVtbl : IVideoEncoderVtbl* do
    GUID = LibC::GUID.new(0x2997c3b_u32, 0x8e1b_u16, 0x460e_u16, StaticArray[0x92_u8, 0x70_u8, 0x54_u8, 0x5e_u8, 0xd_u8, 0xe9_u8, 0x56_u8, 0x3e_u8])
    def query_interface(this : IVideoEncoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVideoEncoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVideoEncoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_supported(this : IVideoEncoder*, api : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_supported.call(this, api)
    end
    def is_available(this : IVideoEncoder*, api : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_available.call(this, api)
    end
    def get_parameter_range(this : IVideoEncoder*, api : LibC::GUID*, value_min : Win32cr::System::Com::VARIANT*, value_max : Win32cr::System::Com::VARIANT*, stepping_delta : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_range.call(this, api, value_min, value_max, stepping_delta)
    end
    def get_parameter_values(this : IVideoEncoder*, api : LibC::GUID*, values : Win32cr::System::Com::VARIANT**, values_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_values.call(this, api, values, values_count)
    end
    def get_default_value(this : IVideoEncoder*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_value.call(this, api, value)
    end
    def get_value(this : IVideoEncoder*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, api, value)
    end
    def set_value(this : IVideoEncoder*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, api, value)
    end

  end

  @[Extern]
  record IAMDecoderCapsVtbl,
    query_interface : Proc(IAMDecoderCaps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMDecoderCaps*, UInt32),
    release : Proc(IAMDecoderCaps*, UInt32),
    get_decoder_caps : Proc(IAMDecoderCaps*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c0dff467-d499-4986-972b-e1d9090fa941")]
  record IAMDecoderCaps, lpVtbl : IAMDecoderCapsVtbl* do
    GUID = LibC::GUID.new(0xc0dff467_u32, 0xd499_u16, 0x4986_u16, StaticArray[0x97_u8, 0x2b_u8, 0xe1_u8, 0xd9_u8, 0x9_u8, 0xf_u8, 0xa9_u8, 0x41_u8])
    def query_interface(this : IAMDecoderCaps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMDecoderCaps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMDecoderCaps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_decoder_caps(this : IAMDecoderCaps*, dwCapIndex : UInt32, lpdwCap : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decoder_caps.call(this, dwCapIndex, lpdwCap)
    end

  end

  @[Extern]
  record IAMCertifiedOutputProtectionVtbl,
    query_interface : Proc(IAMCertifiedOutputProtection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMCertifiedOutputProtection*, UInt32),
    release : Proc(IAMCertifiedOutputProtection*, UInt32),
    key_exchange : Proc(IAMCertifiedOutputProtection*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    session_sequence_start : Proc(IAMCertifiedOutputProtection*, Win32cr::Media::DirectShow::AMCOPPSignature*, Win32cr::Foundation::HRESULT),
    protection_command : Proc(IAMCertifiedOutputProtection*, Win32cr::Media::DirectShow::AMCOPPCommand*, Win32cr::Foundation::HRESULT),
    protection_status : Proc(IAMCertifiedOutputProtection*, Win32cr::Media::DirectShow::AMCOPPStatusInput*, Win32cr::Media::DirectShow::AMCOPPStatusOutput*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6feded3e-0ff1-4901-a2f1-43f7012c8515")]
  record IAMCertifiedOutputProtection, lpVtbl : IAMCertifiedOutputProtectionVtbl* do
    GUID = LibC::GUID.new(0x6feded3e_u32, 0xff1_u16, 0x4901_u16, StaticArray[0xa2_u8, 0xf1_u8, 0x43_u8, 0xf7_u8, 0x1_u8, 0x2c_u8, 0x85_u8, 0x15_u8])
    def query_interface(this : IAMCertifiedOutputProtection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMCertifiedOutputProtection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMCertifiedOutputProtection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def key_exchange(this : IAMCertifiedOutputProtection*, pRandom : LibC::GUID*, var_len_cert_gh : UInt8**, pdwLengthCertGH : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.key_exchange.call(this, pRandom, var_len_cert_gh, pdwLengthCertGH)
    end
    def session_sequence_start(this : IAMCertifiedOutputProtection*, pSig : Win32cr::Media::DirectShow::AMCOPPSignature*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.session_sequence_start.call(this, pSig)
    end
    def protection_command(this : IAMCertifiedOutputProtection*, cmd : Win32cr::Media::DirectShow::AMCOPPCommand*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.protection_command.call(this, cmd)
    end
    def protection_status(this : IAMCertifiedOutputProtection*, pStatusInput : Win32cr::Media::DirectShow::AMCOPPStatusInput*, pStatusOutput : Win32cr::Media::DirectShow::AMCOPPStatusOutput*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.protection_status.call(this, pStatusInput, pStatusOutput)
    end

  end

  @[Extern]
  record IAMAsyncReaderTimestampScalingVtbl,
    query_interface : Proc(IAMAsyncReaderTimestampScaling*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMAsyncReaderTimestampScaling*, UInt32),
    release : Proc(IAMAsyncReaderTimestampScaling*, UInt32),
    get_timestamp_mode : Proc(IAMAsyncReaderTimestampScaling*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_timestamp_mode : Proc(IAMAsyncReaderTimestampScaling*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cf7b26fc-9a00-485b-8147-3e789d5e8f67")]
  record IAMAsyncReaderTimestampScaling, lpVtbl : IAMAsyncReaderTimestampScalingVtbl* do
    GUID = LibC::GUID.new(0xcf7b26fc_u32, 0x9a00_u16, 0x485b_u16, StaticArray[0x81_u8, 0x47_u8, 0x3e_u8, 0x78_u8, 0x9d_u8, 0x5e_u8, 0x8f_u8, 0x67_u8])
    def query_interface(this : IAMAsyncReaderTimestampScaling*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMAsyncReaderTimestampScaling*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMAsyncReaderTimestampScaling*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_timestamp_mode(this : IAMAsyncReaderTimestampScaling*, pfRaw : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_timestamp_mode.call(this, pfRaw)
    end
    def set_timestamp_mode(this : IAMAsyncReaderTimestampScaling*, fRaw : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_timestamp_mode.call(this, fRaw)
    end

  end

  @[Extern]
  record IAMPluginControlVtbl,
    query_interface : Proc(IAMPluginControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMPluginControl*, UInt32),
    release : Proc(IAMPluginControl*, UInt32),
    get_preferred_clsid : Proc(IAMPluginControl*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_preferred_clsid_by_index : Proc(IAMPluginControl*, UInt32, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_preferred_clsid : Proc(IAMPluginControl*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_disabled : Proc(IAMPluginControl*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_disabled_by_index : Proc(IAMPluginControl*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_disabled : Proc(IAMPluginControl*, LibC::GUID*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    is_legacy_disabled : Proc(IAMPluginControl*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0e26a181-f40c-4635-8786-976284b52981")]
  record IAMPluginControl, lpVtbl : IAMPluginControlVtbl* do
    GUID = LibC::GUID.new(0xe26a181_u32, 0xf40c_u16, 0x4635_u16, StaticArray[0x87_u8, 0x86_u8, 0x97_u8, 0x62_u8, 0x84_u8, 0xb5_u8, 0x29_u8, 0x81_u8])
    def query_interface(this : IAMPluginControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMPluginControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMPluginControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_preferred_clsid(this : IAMPluginControl*, subType : LibC::GUID*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preferred_clsid.call(this, subType, clsid)
    end
    def get_preferred_clsid_by_index(this : IAMPluginControl*, index : UInt32, subType : LibC::GUID*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preferred_clsid_by_index.call(this, index, subType, clsid)
    end
    def set_preferred_clsid(this : IAMPluginControl*, subType : LibC::GUID*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preferred_clsid.call(this, subType, clsid)
    end
    def is_disabled(this : IAMPluginControl*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_disabled.call(this, clsid)
    end
    def get_disabled_by_index(this : IAMPluginControl*, index : UInt32, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disabled_by_index.call(this, index, clsid)
    end
    def set_disabled(this : IAMPluginControl*, clsid : LibC::GUID*, disabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_disabled.call(this, clsid, disabled)
    end
    def is_legacy_disabled(this : IAMPluginControl*, dllName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_legacy_disabled.call(this, dllName)
    end

  end

  @[Extern]
  record IPinConnectionVtbl,
    query_interface : Proc(IPinConnection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPinConnection*, UInt32),
    release : Proc(IPinConnection*, UInt32),
    dynamic_query_accept : Proc(IPinConnection*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    notify_end_of_stream : Proc(IPinConnection*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    is_end_pin : Proc(IPinConnection*, Win32cr::Foundation::HRESULT),
    dynamic_disconnect : Proc(IPinConnection*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4a9a62d3-27d4-403d-91e9-89f540e55534")]
  record IPinConnection, lpVtbl : IPinConnectionVtbl* do
    GUID = LibC::GUID.new(0x4a9a62d3_u32, 0x27d4_u16, 0x403d_u16, StaticArray[0x91_u8, 0xe9_u8, 0x89_u8, 0xf5_u8, 0x40_u8, 0xe5_u8, 0x55_u8, 0x34_u8])
    def query_interface(this : IPinConnection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPinConnection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPinConnection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def dynamic_query_accept(this : IPinConnection*, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dynamic_query_accept.call(this, pmt)
    end
    def notify_end_of_stream(this : IPinConnection*, hNotifyEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_end_of_stream.call(this, hNotifyEvent)
    end
    def is_end_pin(this : IPinConnection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_end_pin.call(this)
    end
    def dynamic_disconnect(this : IPinConnection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dynamic_disconnect.call(this)
    end

  end

  @[Extern]
  record IPinFlowControlVtbl,
    query_interface : Proc(IPinFlowControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPinFlowControl*, UInt32),
    release : Proc(IPinFlowControl*, UInt32),
    block : Proc(IPinFlowControl*, UInt32, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c56e9858-dbf3-4f6b-8119-384af2060deb")]
  record IPinFlowControl, lpVtbl : IPinFlowControlVtbl* do
    GUID = LibC::GUID.new(0xc56e9858_u32, 0xdbf3_u16, 0x4f6b_u16, StaticArray[0x81_u8, 0x19_u8, 0x38_u8, 0x4a_u8, 0xf2_u8, 0x6_u8, 0xd_u8, 0xeb_u8])
    def query_interface(this : IPinFlowControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPinFlowControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPinFlowControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def block(this : IPinFlowControl*, dwBlockFlags : UInt32, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.block.call(this, dwBlockFlags, hEvent)
    end

  end

  @[Extern]
  record IGraphConfigVtbl,
    query_interface : Proc(IGraphConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGraphConfig*, UInt32),
    release : Proc(IGraphConfig*, UInt32),
    reconnect : Proc(IGraphConfig*, Void*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Void*, Win32cr::Foundation::HANDLE, UInt32, Win32cr::Foundation::HRESULT),
    reconfigure : Proc(IGraphConfig*, Void*, Void*, UInt32, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    add_filter_to_cache : Proc(IGraphConfig*, Void*, Win32cr::Foundation::HRESULT),
    enum_cache_filter : Proc(IGraphConfig*, Void**, Win32cr::Foundation::HRESULT),
    remove_filter_from_cache : Proc(IGraphConfig*, Void*, Win32cr::Foundation::HRESULT),
    get_start_time : Proc(IGraphConfig*, Int64*, Win32cr::Foundation::HRESULT),
    push_through_data : Proc(IGraphConfig*, Void*, Void*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_filter_flags : Proc(IGraphConfig*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_filter_flags : Proc(IGraphConfig*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_filter_ex : Proc(IGraphConfig*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("03a1eb8e-32bf-4245-8502-114d08a9cb88")]
  record IGraphConfig, lpVtbl : IGraphConfigVtbl* do
    GUID = LibC::GUID.new(0x3a1eb8e_u32, 0x32bf_u16, 0x4245_u16, StaticArray[0x85_u8, 0x2_u8, 0x11_u8, 0x4d_u8, 0x8_u8, 0xa9_u8, 0xcb_u8, 0x88_u8])
    def query_interface(this : IGraphConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGraphConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGraphConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reconnect(this : IGraphConfig*, pOutputPin : Void*, pInputPin : Void*, pmtFirstConnection : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, pUsingFilter : Void*, hAbortEvent : Win32cr::Foundation::HANDLE, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconnect.call(this, pOutputPin, pInputPin, pmtFirstConnection, pUsingFilter, hAbortEvent, dwFlags)
    end
    def reconfigure(this : IGraphConfig*, pCallback : Void*, pvContext : Void*, dwFlags : UInt32, hAbortEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconfigure.call(this, pCallback, pvContext, dwFlags, hAbortEvent)
    end
    def add_filter_to_cache(this : IGraphConfig*, pFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_filter_to_cache.call(this, pFilter)
    end
    def enum_cache_filter(this : IGraphConfig*, pEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_cache_filter.call(this, pEnum)
    end
    def remove_filter_from_cache(this : IGraphConfig*, pFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_filter_from_cache.call(this, pFilter)
    end
    def get_start_time(this : IGraphConfig*, prtStart : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_start_time.call(this, prtStart)
    end
    def push_through_data(this : IGraphConfig*, pOutputPin : Void*, pConnection : Void*, hEventAbort : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_through_data.call(this, pOutputPin, pConnection, hEventAbort)
    end
    def set_filter_flags(this : IGraphConfig*, pFilter : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_filter_flags.call(this, pFilter, dwFlags)
    end
    def get_filter_flags(this : IGraphConfig*, pFilter : Void*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter_flags.call(this, pFilter, pdwFlags)
    end
    def remove_filter_ex(this : IGraphConfig*, pFilter : Void*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_filter_ex.call(this, pFilter, flags)
    end

  end

  @[Extern]
  record IGraphConfigCallbackVtbl,
    query_interface : Proc(IGraphConfigCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGraphConfigCallback*, UInt32),
    release : Proc(IGraphConfigCallback*, UInt32),
    reconfigure : Proc(IGraphConfigCallback*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ade0fd60-d19d-11d2-abf6-00a0c905f375")]
  record IGraphConfigCallback, lpVtbl : IGraphConfigCallbackVtbl* do
    GUID = LibC::GUID.new(0xade0fd60_u32, 0xd19d_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IGraphConfigCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGraphConfigCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGraphConfigCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reconfigure(this : IGraphConfigCallback*, pvContext : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reconfigure.call(this, pvContext, dwFlags)
    end

  end

  @[Extern]
  record IFilterChainVtbl,
    query_interface : Proc(IFilterChain*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterChain*, UInt32),
    release : Proc(IFilterChain*, UInt32),
    start_chain : Proc(IFilterChain*, Void*, Void*, Win32cr::Foundation::HRESULT),
    pause_chain : Proc(IFilterChain*, Void*, Void*, Win32cr::Foundation::HRESULT),
    stop_chain : Proc(IFilterChain*, Void*, Void*, Win32cr::Foundation::HRESULT),
    remove_chain : Proc(IFilterChain*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dcfbdcf6-0dc2-45f5-9ab2-7c330ea09c29")]
  record IFilterChain, lpVtbl : IFilterChainVtbl* do
    GUID = LibC::GUID.new(0xdcfbdcf6_u32, 0xdc2_u16, 0x45f5_u16, StaticArray[0x9a_u8, 0xb2_u8, 0x7c_u8, 0x33_u8, 0xe_u8, 0xa0_u8, 0x9c_u8, 0x29_u8])
    def query_interface(this : IFilterChain*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterChain*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterChain*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_chain(this : IFilterChain*, pStartFilter : Void*, pEndFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_chain.call(this, pStartFilter, pEndFilter)
    end
    def pause_chain(this : IFilterChain*, pStartFilter : Void*, pEndFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause_chain.call(this, pStartFilter, pEndFilter)
    end
    def stop_chain(this : IFilterChain*, pStartFilter : Void*, pEndFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_chain.call(this, pStartFilter, pEndFilter)
    end
    def remove_chain(this : IFilterChain*, pStartFilter : Void*, pEndFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_chain.call(this, pStartFilter, pEndFilter)
    end

  end

  @[Extern]
  record IVMRImagePresenterVtbl,
    query_interface : Proc(IVMRImagePresenter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRImagePresenter*, UInt32),
    release : Proc(IVMRImagePresenter*, UInt32),
    start_presenting : Proc(IVMRImagePresenter*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    stop_presenting : Proc(IVMRImagePresenter*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    present_image : Proc(IVMRImagePresenter*, LibC::UIntPtrT, Win32cr::Media::DirectShow::VMRPRESENTATIONINFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ce704fe7-e71e-41fb-baa2-c4403e1182f5")]
  record IVMRImagePresenter, lpVtbl : IVMRImagePresenterVtbl* do
    GUID = LibC::GUID.new(0xce704fe7_u32, 0xe71e_u16, 0x41fb_u16, StaticArray[0xba_u8, 0xa2_u8, 0xc4_u8, 0x40_u8, 0x3e_u8, 0x11_u8, 0x82_u8, 0xf5_u8])
    def query_interface(this : IVMRImagePresenter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRImagePresenter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRImagePresenter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_presenting(this : IVMRImagePresenter*, dwUserID : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_presenting.call(this, dwUserID)
    end
    def stop_presenting(this : IVMRImagePresenter*, dwUserID : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_presenting.call(this, dwUserID)
    end
    def present_image(this : IVMRImagePresenter*, dwUserID : LibC::UIntPtrT, lpPresInfo : Win32cr::Media::DirectShow::VMRPRESENTATIONINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.present_image.call(this, dwUserID, lpPresInfo)
    end

  end

  @[Extern]
  record IVMRSurfaceAllocatorVtbl,
    query_interface : Proc(IVMRSurfaceAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRSurfaceAllocator*, UInt32),
    release : Proc(IVMRSurfaceAllocator*, UInt32),
    allocate_surface : Proc(IVMRSurfaceAllocator*, LibC::UIntPtrT, Win32cr::Media::DirectShow::VMRALLOCATIONINFO*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    free_surface : Proc(IVMRSurfaceAllocator*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    prepare_surface : Proc(IVMRSurfaceAllocator*, LibC::UIntPtrT, Void*, UInt32, Win32cr::Foundation::HRESULT),
    advise_notify : Proc(IVMRSurfaceAllocator*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("31ce832e-4484-458b-8cca-f4d7e3db0b52")]
  record IVMRSurfaceAllocator, lpVtbl : IVMRSurfaceAllocatorVtbl* do
    GUID = LibC::GUID.new(0x31ce832e_u32, 0x4484_u16, 0x458b_u16, StaticArray[0x8c_u8, 0xca_u8, 0xf4_u8, 0xd7_u8, 0xe3_u8, 0xdb_u8, 0xb_u8, 0x52_u8])
    def query_interface(this : IVMRSurfaceAllocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRSurfaceAllocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRSurfaceAllocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def allocate_surface(this : IVMRSurfaceAllocator*, dwUserID : LibC::UIntPtrT, lpAllocInfo : Win32cr::Media::DirectShow::VMRALLOCATIONINFO*, lpdwActualBuffers : UInt32*, lplpSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_surface.call(this, dwUserID, lpAllocInfo, lpdwActualBuffers, lplpSurface)
    end
    def free_surface(this : IVMRSurfaceAllocator*, dwID : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_surface.call(this, dwID)
    end
    def prepare_surface(this : IVMRSurfaceAllocator*, dwUserID : LibC::UIntPtrT, lpSurface : Void*, dwSurfaceFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_surface.call(this, dwUserID, lpSurface, dwSurfaceFlags)
    end
    def advise_notify(this : IVMRSurfaceAllocator*, lpIVMRSurfAllocNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise_notify.call(this, lpIVMRSurfAllocNotify)
    end

  end

  @[Extern]
  record IVMRSurfaceAllocatorNotifyVtbl,
    query_interface : Proc(IVMRSurfaceAllocatorNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRSurfaceAllocatorNotify*, UInt32),
    release : Proc(IVMRSurfaceAllocatorNotify*, UInt32),
    advise_surface_allocator : Proc(IVMRSurfaceAllocatorNotify*, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    set_d_draw_device : Proc(IVMRSurfaceAllocatorNotify*, Void*, Win32cr::Graphics::Gdi::HMONITOR, Win32cr::Foundation::HRESULT),
    change_d_draw_device : Proc(IVMRSurfaceAllocatorNotify*, Void*, Win32cr::Graphics::Gdi::HMONITOR, Win32cr::Foundation::HRESULT),
    restore_d_draw_surfaces : Proc(IVMRSurfaceAllocatorNotify*, Win32cr::Foundation::HRESULT),
    notify_event : Proc(IVMRSurfaceAllocatorNotify*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    set_border_color : Proc(IVMRSurfaceAllocatorNotify*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aada05a8-5a4e-4729-af0b-cea27aed51e2")]
  record IVMRSurfaceAllocatorNotify, lpVtbl : IVMRSurfaceAllocatorNotifyVtbl* do
    GUID = LibC::GUID.new(0xaada05a8_u32, 0x5a4e_u16, 0x4729_u16, StaticArray[0xaf_u8, 0xb_u8, 0xce_u8, 0xa2_u8, 0x7a_u8, 0xed_u8, 0x51_u8, 0xe2_u8])
    def query_interface(this : IVMRSurfaceAllocatorNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRSurfaceAllocatorNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRSurfaceAllocatorNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def advise_surface_allocator(this : IVMRSurfaceAllocatorNotify*, dwUserID : LibC::UIntPtrT, lpIVRMSurfaceAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise_surface_allocator.call(this, dwUserID, lpIVRMSurfaceAllocator)
    end
    def set_d_draw_device(this : IVMRSurfaceAllocatorNotify*, lpDDrawDevice : Void*, hMonitor : Win32cr::Graphics::Gdi::HMONITOR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_d_draw_device.call(this, lpDDrawDevice, hMonitor)
    end
    def change_d_draw_device(this : IVMRSurfaceAllocatorNotify*, lpDDrawDevice : Void*, hMonitor : Win32cr::Graphics::Gdi::HMONITOR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_d_draw_device.call(this, lpDDrawDevice, hMonitor)
    end
    def restore_d_draw_surfaces(this : IVMRSurfaceAllocatorNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_d_draw_surfaces.call(this)
    end
    def notify_event(this : IVMRSurfaceAllocatorNotify*, event_code : Int32, param1 : LibC::IntPtrT, param2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_event.call(this, event_code, param1, param2)
    end
    def set_border_color(this : IVMRSurfaceAllocatorNotify*, clrBorder : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, clrBorder)
    end

  end

  @[Extern]
  record IVMRWindowlessControlVtbl,
    query_interface : Proc(IVMRWindowlessControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRWindowlessControl*, UInt32),
    release : Proc(IVMRWindowlessControl*, UInt32),
    get_native_video_size : Proc(IVMRWindowlessControl*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_min_ideal_video_size : Proc(IVMRWindowlessControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_max_ideal_video_size : Proc(IVMRWindowlessControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_video_position : Proc(IVMRWindowlessControl*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_video_position : Proc(IVMRWindowlessControl*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_aspect_ratio_mode : Proc(IVMRWindowlessControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IVMRWindowlessControl*, UInt32, Win32cr::Foundation::HRESULT),
    set_video_clipping_window : Proc(IVMRWindowlessControl*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    repaint_video : Proc(IVMRWindowlessControl*, Win32cr::Foundation::HWND, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::HRESULT),
    display_mode_changed : Proc(IVMRWindowlessControl*, Win32cr::Foundation::HRESULT),
    get_current_image : Proc(IVMRWindowlessControl*, UInt8**, Win32cr::Foundation::HRESULT),
    set_border_color : Proc(IVMRWindowlessControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_border_color : Proc(IVMRWindowlessControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_color_key : Proc(IVMRWindowlessControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_color_key : Proc(IVMRWindowlessControl*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0eb1088c-4dcd-46f0-878f-39dae86a51b7")]
  record IVMRWindowlessControl, lpVtbl : IVMRWindowlessControlVtbl* do
    GUID = LibC::GUID.new(0xeb1088c_u32, 0x4dcd_u16, 0x46f0_u16, StaticArray[0x87_u8, 0x8f_u8, 0x39_u8, 0xda_u8, 0xe8_u8, 0x6a_u8, 0x51_u8, 0xb7_u8])
    def query_interface(this : IVMRWindowlessControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRWindowlessControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRWindowlessControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_native_video_size(this : IVMRWindowlessControl*, lpWidth : Int32*, lpHeight : Int32*, lpARWidth : Int32*, lpARHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_size.call(this, lpWidth, lpHeight, lpARWidth, lpARHeight)
    end
    def get_min_ideal_video_size(this : IVMRWindowlessControl*, lpWidth : Int32*, lpHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_min_ideal_video_size.call(this, lpWidth, lpHeight)
    end
    def get_max_ideal_video_size(this : IVMRWindowlessControl*, lpWidth : Int32*, lpHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_ideal_video_size.call(this, lpWidth, lpHeight)
    end
    def set_video_position(this : IVMRWindowlessControl*, lpSRCRect : Win32cr::Foundation::RECT*, lpDSTRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_position.call(this, lpSRCRect, lpDSTRect)
    end
    def get_video_position(this : IVMRWindowlessControl*, lpSRCRect : Win32cr::Foundation::RECT*, lpDSTRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_position.call(this, lpSRCRect, lpDSTRect)
    end
    def get_aspect_ratio_mode(this : IVMRWindowlessControl*, lpAspectRatioMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, lpAspectRatioMode)
    end
    def set_aspect_ratio_mode(this : IVMRWindowlessControl*, aspect_ratio_mode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, aspect_ratio_mode)
    end
    def set_video_clipping_window(this : IVMRWindowlessControl*, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_clipping_window.call(this, hwnd)
    end
    def repaint_video(this : IVMRWindowlessControl*, hwnd : Win32cr::Foundation::HWND, hdc : Win32cr::Graphics::Gdi::HDC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.repaint_video.call(this, hwnd, hdc)
    end
    def display_mode_changed(this : IVMRWindowlessControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.display_mode_changed.call(this)
    end
    def get_current_image(this : IVMRWindowlessControl*, lpDib : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_image.call(this, lpDib)
    end
    def set_border_color(this : IVMRWindowlessControl*, clr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, clr)
    end
    def get_border_color(this : IVMRWindowlessControl*, lpClr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_border_color.call(this, lpClr)
    end
    def set_color_key(this : IVMRWindowlessControl*, clr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color_key.call(this, clr)
    end
    def get_color_key(this : IVMRWindowlessControl*, lpClr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_key.call(this, lpClr)
    end

  end

  @[Extern]
  record IVMRMixerControlVtbl,
    query_interface : Proc(IVMRMixerControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRMixerControl*, UInt32),
    release : Proc(IVMRMixerControl*, UInt32),
    set_alpha : Proc(IVMRMixerControl*, UInt32, Float32, Win32cr::Foundation::HRESULT),
    get_alpha : Proc(IVMRMixerControl*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_z_order : Proc(IVMRMixerControl*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_z_order : Proc(IVMRMixerControl*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_rect : Proc(IVMRMixerControl*, UInt32, Win32cr::Media::DirectShow::NORMALIZEDRECT*, Win32cr::Foundation::HRESULT),
    get_output_rect : Proc(IVMRMixerControl*, UInt32, Win32cr::Media::DirectShow::NORMALIZEDRECT*, Win32cr::Foundation::HRESULT),
    set_background_clr : Proc(IVMRMixerControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_background_clr : Proc(IVMRMixerControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_mixing_prefs : Proc(IVMRMixerControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_mixing_prefs : Proc(IVMRMixerControl*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c1a17b0-bed0-415d-974b-dc6696131599")]
  record IVMRMixerControl, lpVtbl : IVMRMixerControlVtbl* do
    GUID = LibC::GUID.new(0x1c1a17b0_u32, 0xbed0_u16, 0x415d_u16, StaticArray[0x97_u8, 0x4b_u8, 0xdc_u8, 0x66_u8, 0x96_u8, 0x13_u8, 0x15_u8, 0x99_u8])
    def query_interface(this : IVMRMixerControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRMixerControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRMixerControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_alpha(this : IVMRMixerControl*, dwStreamID : UInt32, alpha : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_alpha.call(this, dwStreamID, alpha)
    end
    def get_alpha(this : IVMRMixerControl*, dwStreamID : UInt32, pAlpha : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alpha.call(this, dwStreamID, pAlpha)
    end
    def set_z_order(this : IVMRMixerControl*, dwStreamID : UInt32, dwZ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_z_order.call(this, dwStreamID, dwZ)
    end
    def get_z_order(this : IVMRMixerControl*, dwStreamID : UInt32, pZ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_z_order.call(this, dwStreamID, pZ)
    end
    def set_output_rect(this : IVMRMixerControl*, dwStreamID : UInt32, pRect : Win32cr::Media::DirectShow::NORMALIZEDRECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_rect.call(this, dwStreamID, pRect)
    end
    def get_output_rect(this : IVMRMixerControl*, dwStreamID : UInt32, pRect : Win32cr::Media::DirectShow::NORMALIZEDRECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_rect.call(this, dwStreamID, pRect)
    end
    def set_background_clr(this : IVMRMixerControl*, clr_bkg : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_clr.call(this, clr_bkg)
    end
    def get_background_clr(this : IVMRMixerControl*, lpClrBkg : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_background_clr.call(this, lpClrBkg)
    end
    def set_mixing_prefs(this : IVMRMixerControl*, dwMixerPrefs : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mixing_prefs.call(this, dwMixerPrefs)
    end
    def get_mixing_prefs(this : IVMRMixerControl*, pdwMixerPrefs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mixing_prefs.call(this, pdwMixerPrefs)
    end

  end

  @[Extern]
  record IVMRMonitorConfigVtbl,
    query_interface : Proc(IVMRMonitorConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRMonitorConfig*, UInt32),
    release : Proc(IVMRMonitorConfig*, UInt32),
    set_monitor : Proc(IVMRMonitorConfig*, Win32cr::Media::DirectShow::VMRGUID*, Win32cr::Foundation::HRESULT),
    get_monitor : Proc(IVMRMonitorConfig*, Win32cr::Media::DirectShow::VMRGUID*, Win32cr::Foundation::HRESULT),
    set_default_monitor : Proc(IVMRMonitorConfig*, Win32cr::Media::DirectShow::VMRGUID*, Win32cr::Foundation::HRESULT),
    get_default_monitor : Proc(IVMRMonitorConfig*, Win32cr::Media::DirectShow::VMRGUID*, Win32cr::Foundation::HRESULT),
    get_available_monitors : Proc(IVMRMonitorConfig*, Win32cr::Media::DirectShow::VMRMONITORINFO*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9cf0b1b6-fbaa-4b7f-88cf-cf1f130a0dce")]
  record IVMRMonitorConfig, lpVtbl : IVMRMonitorConfigVtbl* do
    GUID = LibC::GUID.new(0x9cf0b1b6_u32, 0xfbaa_u16, 0x4b7f_u16, StaticArray[0x88_u8, 0xcf_u8, 0xcf_u8, 0x1f_u8, 0x13_u8, 0xa_u8, 0xd_u8, 0xce_u8])
    def query_interface(this : IVMRMonitorConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRMonitorConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRMonitorConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_monitor(this : IVMRMonitorConfig*, pGUID : Win32cr::Media::DirectShow::VMRGUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_monitor.call(this, pGUID)
    end
    def get_monitor(this : IVMRMonitorConfig*, pGUID : Win32cr::Media::DirectShow::VMRGUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_monitor.call(this, pGUID)
    end
    def set_default_monitor(this : IVMRMonitorConfig*, pGUID : Win32cr::Media::DirectShow::VMRGUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_monitor.call(this, pGUID)
    end
    def get_default_monitor(this : IVMRMonitorConfig*, pGUID : Win32cr::Media::DirectShow::VMRGUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_monitor.call(this, pGUID)
    end
    def get_available_monitors(this : IVMRMonitorConfig*, pInfo : Win32cr::Media::DirectShow::VMRMONITORINFO*, dwMaxInfoArraySize : UInt32, pdwNumDevices : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_monitors.call(this, pInfo, dwMaxInfoArraySize, pdwNumDevices)
    end

  end

  @[Extern]
  record IVMRFilterConfigVtbl,
    query_interface : Proc(IVMRFilterConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRFilterConfig*, UInt32),
    release : Proc(IVMRFilterConfig*, UInt32),
    set_image_compositor : Proc(IVMRFilterConfig*, Void*, Win32cr::Foundation::HRESULT),
    set_number_of_streams : Proc(IVMRFilterConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_of_streams : Proc(IVMRFilterConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    set_rendering_prefs : Proc(IVMRFilterConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_prefs : Proc(IVMRFilterConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    set_rendering_mode : Proc(IVMRFilterConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_mode : Proc(IVMRFilterConfig*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9e5530c5-7034-48b4-bb46-0b8a6efc8e36")]
  record IVMRFilterConfig, lpVtbl : IVMRFilterConfigVtbl* do
    GUID = LibC::GUID.new(0x9e5530c5_u32, 0x7034_u16, 0x48b4_u16, StaticArray[0xbb_u8, 0x46_u8, 0xb_u8, 0x8a_u8, 0x6e_u8, 0xfc_u8, 0x8e_u8, 0x36_u8])
    def query_interface(this : IVMRFilterConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRFilterConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRFilterConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_image_compositor(this : IVMRFilterConfig*, lpVMRImgCompositor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_compositor.call(this, lpVMRImgCompositor)
    end
    def set_number_of_streams(this : IVMRFilterConfig*, dwMaxStreams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_number_of_streams.call(this, dwMaxStreams)
    end
    def get_number_of_streams(this : IVMRFilterConfig*, pdwMaxStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_streams.call(this, pdwMaxStreams)
    end
    def set_rendering_prefs(this : IVMRFilterConfig*, dwRenderFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_prefs.call(this, dwRenderFlags)
    end
    def get_rendering_prefs(this : IVMRFilterConfig*, pdwRenderFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_prefs.call(this, pdwRenderFlags)
    end
    def set_rendering_mode(this : IVMRFilterConfig*, mode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_mode.call(this, mode)
    end
    def get_rendering_mode(this : IVMRFilterConfig*, pMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_mode.call(this, pMode)
    end

  end

  @[Extern]
  record IVMRAspectRatioControlVtbl,
    query_interface : Proc(IVMRAspectRatioControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRAspectRatioControl*, UInt32),
    release : Proc(IVMRAspectRatioControl*, UInt32),
    get_aspect_ratio_mode : Proc(IVMRAspectRatioControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IVMRAspectRatioControl*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ede80b5c-bad6-4623-b537-65586c9f8dfd")]
  record IVMRAspectRatioControl, lpVtbl : IVMRAspectRatioControlVtbl* do
    GUID = LibC::GUID.new(0xede80b5c_u32, 0xbad6_u16, 0x4623_u16, StaticArray[0xb5_u8, 0x37_u8, 0x65_u8, 0x58_u8, 0x6c_u8, 0x9f_u8, 0x8d_u8, 0xfd_u8])
    def query_interface(this : IVMRAspectRatioControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRAspectRatioControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRAspectRatioControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_aspect_ratio_mode(this : IVMRAspectRatioControl*, lpdwARMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, lpdwARMode)
    end
    def set_aspect_ratio_mode(this : IVMRAspectRatioControl*, dwARMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, dwARMode)
    end

  end

  @[Extern]
  record IVMRDeinterlaceControlVtbl,
    query_interface : Proc(IVMRDeinterlaceControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRDeinterlaceControl*, UInt32),
    release : Proc(IVMRDeinterlaceControl*, UInt32),
    get_number_of_deinterlace_modes : Proc(IVMRDeinterlaceControl*, Win32cr::Media::DirectShow::VMRVideoDesc*, UInt32*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_deinterlace_mode_caps : Proc(IVMRDeinterlaceControl*, LibC::GUID*, Win32cr::Media::DirectShow::VMRVideoDesc*, Win32cr::Media::DirectShow::VMRDeinterlaceCaps*, Win32cr::Foundation::HRESULT),
    get_deinterlace_mode : Proc(IVMRDeinterlaceControl*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_deinterlace_mode : Proc(IVMRDeinterlaceControl*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_deinterlace_prefs : Proc(IVMRDeinterlaceControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_deinterlace_prefs : Proc(IVMRDeinterlaceControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_actual_deinterlace_mode : Proc(IVMRDeinterlaceControl*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bb057577-0db8-4e6a-87a7-1a8c9a505a0f")]
  record IVMRDeinterlaceControl, lpVtbl : IVMRDeinterlaceControlVtbl* do
    GUID = LibC::GUID.new(0xbb057577_u32, 0xdb8_u16, 0x4e6a_u16, StaticArray[0x87_u8, 0xa7_u8, 0x1a_u8, 0x8c_u8, 0x9a_u8, 0x50_u8, 0x5a_u8, 0xf_u8])
    def query_interface(this : IVMRDeinterlaceControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRDeinterlaceControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRDeinterlaceControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_of_deinterlace_modes(this : IVMRDeinterlaceControl*, lpVideoDescription : Win32cr::Media::DirectShow::VMRVideoDesc*, lpdwNumDeinterlaceModes : UInt32*, lpDeinterlaceModes : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_deinterlace_modes.call(this, lpVideoDescription, lpdwNumDeinterlaceModes, lpDeinterlaceModes)
    end
    def get_deinterlace_mode_caps(this : IVMRDeinterlaceControl*, lpDeinterlaceMode : LibC::GUID*, lpVideoDescription : Win32cr::Media::DirectShow::VMRVideoDesc*, lpDeinterlaceCaps : Win32cr::Media::DirectShow::VMRDeinterlaceCaps*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_mode_caps.call(this, lpDeinterlaceMode, lpVideoDescription, lpDeinterlaceCaps)
    end
    def get_deinterlace_mode(this : IVMRDeinterlaceControl*, dwStreamID : UInt32, lpDeinterlaceMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_mode.call(this, dwStreamID, lpDeinterlaceMode)
    end
    def set_deinterlace_mode(this : IVMRDeinterlaceControl*, dwStreamID : UInt32, lpDeinterlaceMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_deinterlace_mode.call(this, dwStreamID, lpDeinterlaceMode)
    end
    def get_deinterlace_prefs(this : IVMRDeinterlaceControl*, lpdwDeinterlacePrefs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_prefs.call(this, lpdwDeinterlacePrefs)
    end
    def set_deinterlace_prefs(this : IVMRDeinterlaceControl*, dwDeinterlacePrefs : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_deinterlace_prefs.call(this, dwDeinterlacePrefs)
    end
    def get_actual_deinterlace_mode(this : IVMRDeinterlaceControl*, dwStreamID : UInt32, lpDeinterlaceMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_deinterlace_mode.call(this, dwStreamID, lpDeinterlaceMode)
    end

  end

  @[Extern]
  record IVMRMixerBitmapVtbl,
    query_interface : Proc(IVMRMixerBitmap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRMixerBitmap*, UInt32),
    release : Proc(IVMRMixerBitmap*, UInt32),
    set_alpha_bitmap : Proc(IVMRMixerBitmap*, Win32cr::Media::DirectShow::VMRALPHABITMAP*, Win32cr::Foundation::HRESULT),
    update_alpha_bitmap_parameters : Proc(IVMRMixerBitmap*, Win32cr::Media::DirectShow::VMRALPHABITMAP*, Win32cr::Foundation::HRESULT),
    get_alpha_bitmap_parameters : Proc(IVMRMixerBitmap*, Win32cr::Media::DirectShow::VMRALPHABITMAP*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1e673275-0257-40aa-af20-7c608d4a0428")]
  record IVMRMixerBitmap, lpVtbl : IVMRMixerBitmapVtbl* do
    GUID = LibC::GUID.new(0x1e673275_u32, 0x257_u16, 0x40aa_u16, StaticArray[0xaf_u8, 0x20_u8, 0x7c_u8, 0x60_u8, 0x8d_u8, 0x4a_u8, 0x4_u8, 0x28_u8])
    def query_interface(this : IVMRMixerBitmap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRMixerBitmap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRMixerBitmap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_alpha_bitmap(this : IVMRMixerBitmap*, pBmpParms : Win32cr::Media::DirectShow::VMRALPHABITMAP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_alpha_bitmap.call(this, pBmpParms)
    end
    def update_alpha_bitmap_parameters(this : IVMRMixerBitmap*, pBmpParms : Win32cr::Media::DirectShow::VMRALPHABITMAP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_alpha_bitmap_parameters.call(this, pBmpParms)
    end
    def get_alpha_bitmap_parameters(this : IVMRMixerBitmap*, pBmpParms : Win32cr::Media::DirectShow::VMRALPHABITMAP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alpha_bitmap_parameters.call(this, pBmpParms)
    end

  end

  @[Extern]
  record IVMRImageCompositorVtbl,
    query_interface : Proc(IVMRImageCompositor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRImageCompositor*, UInt32),
    release : Proc(IVMRImageCompositor*, UInt32),
    init_composition_target : Proc(IVMRImageCompositor*, Void*, Void*, Win32cr::Foundation::HRESULT),
    term_composition_target : Proc(IVMRImageCompositor*, Void*, Void*, Win32cr::Foundation::HRESULT),
    set_stream_media_type : Proc(IVMRImageCompositor*, UInt32, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    composite_image : Proc(IVMRImageCompositor*, Void*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Int64, Int64, UInt32, Win32cr::Media::DirectShow::VMRVIDEOSTREAMINFO*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7a4fb5af-479f-4074-bb40-ce6722e43c82")]
  record IVMRImageCompositor, lpVtbl : IVMRImageCompositorVtbl* do
    GUID = LibC::GUID.new(0x7a4fb5af_u32, 0x479f_u16, 0x4074_u16, StaticArray[0xbb_u8, 0x40_u8, 0xce_u8, 0x67_u8, 0x22_u8, 0xe4_u8, 0x3c_u8, 0x82_u8])
    def query_interface(this : IVMRImageCompositor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRImageCompositor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRImageCompositor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init_composition_target(this : IVMRImageCompositor*, pD3DDevice : Void*, pddsRenderTarget : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_composition_target.call(this, pD3DDevice, pddsRenderTarget)
    end
    def term_composition_target(this : IVMRImageCompositor*, pD3DDevice : Void*, pddsRenderTarget : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.term_composition_target.call(this, pD3DDevice, pddsRenderTarget)
    end
    def set_stream_media_type(this : IVMRImageCompositor*, dwStrmID : UInt32, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, fTexture : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_media_type.call(this, dwStrmID, pmt, fTexture)
    end
    def composite_image(this : IVMRImageCompositor*, pD3DDevice : Void*, pddsRenderTarget : Void*, pmtRenderTarget : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, rtStart : Int64, rtEnd : Int64, dwClrBkGnd : UInt32, pVideoStreamInfo : Win32cr::Media::DirectShow::VMRVIDEOSTREAMINFO*, cStreams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.composite_image.call(this, pD3DDevice, pddsRenderTarget, pmtRenderTarget, rtStart, rtEnd, dwClrBkGnd, pVideoStreamInfo, cStreams)
    end

  end

  @[Extern]
  record IVMRVideoStreamControlVtbl,
    query_interface : Proc(IVMRVideoStreamControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRVideoStreamControl*, UInt32),
    release : Proc(IVMRVideoStreamControl*, UInt32),
    set_color_key : Proc(IVMRVideoStreamControl*, Win32cr::Graphics::DirectDraw::DDCOLORKEY*, Win32cr::Foundation::HRESULT),
    get_color_key : Proc(IVMRVideoStreamControl*, Win32cr::Graphics::DirectDraw::DDCOLORKEY*, Win32cr::Foundation::HRESULT),
    set_stream_active_state : Proc(IVMRVideoStreamControl*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_stream_active_state : Proc(IVMRVideoStreamControl*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("058d1f11-2a54-4bef-bd54-df706626b727")]
  record IVMRVideoStreamControl, lpVtbl : IVMRVideoStreamControlVtbl* do
    GUID = LibC::GUID.new(0x58d1f11_u32, 0x2a54_u16, 0x4bef_u16, StaticArray[0xbd_u8, 0x54_u8, 0xdf_u8, 0x70_u8, 0x66_u8, 0x26_u8, 0xb7_u8, 0x27_u8])
    def query_interface(this : IVMRVideoStreamControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRVideoStreamControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRVideoStreamControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_color_key(this : IVMRVideoStreamControl*, lpClrKey : Win32cr::Graphics::DirectDraw::DDCOLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color_key.call(this, lpClrKey)
    end
    def get_color_key(this : IVMRVideoStreamControl*, lpClrKey : Win32cr::Graphics::DirectDraw::DDCOLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_key.call(this, lpClrKey)
    end
    def set_stream_active_state(this : IVMRVideoStreamControl*, fActive : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_active_state.call(this, fActive)
    end
    def get_stream_active_state(this : IVMRVideoStreamControl*, lpfActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_active_state.call(this, lpfActive)
    end

  end

  @[Extern]
  record IVMRSurfaceVtbl,
    query_interface : Proc(IVMRSurface*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRSurface*, UInt32),
    release : Proc(IVMRSurface*, UInt32),
    is_surface_locked : Proc(IVMRSurface*, Win32cr::Foundation::HRESULT),
    lock_surface : Proc(IVMRSurface*, UInt8**, Win32cr::Foundation::HRESULT),
    unlock_surface : Proc(IVMRSurface*, Win32cr::Foundation::HRESULT),
    get_surface : Proc(IVMRSurface*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a9849bbe-9ec8-4263-b764-62730f0d15d0")]
  record IVMRSurface, lpVtbl : IVMRSurfaceVtbl* do
    GUID = LibC::GUID.new(0xa9849bbe_u32, 0x9ec8_u16, 0x4263_u16, StaticArray[0xb7_u8, 0x64_u8, 0x62_u8, 0x73_u8, 0xf_u8, 0xd_u8, 0x15_u8, 0xd0_u8])
    def query_interface(this : IVMRSurface*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRSurface*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRSurface*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_surface_locked(this : IVMRSurface*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_surface_locked.call(this)
    end
    def lock_surface(this : IVMRSurface*, lpSurface : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_surface.call(this, lpSurface)
    end
    def unlock_surface(this : IVMRSurface*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_surface.call(this)
    end
    def get_surface(this : IVMRSurface*, lplpSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface.call(this, lplpSurface)
    end

  end

  @[Extern]
  record IVMRImagePresenterConfigVtbl,
    query_interface : Proc(IVMRImagePresenterConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRImagePresenterConfig*, UInt32),
    release : Proc(IVMRImagePresenterConfig*, UInt32),
    set_rendering_prefs : Proc(IVMRImagePresenterConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_prefs : Proc(IVMRImagePresenterConfig*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9f3a1c85-8555-49ba-935f-be5b5b29d178")]
  record IVMRImagePresenterConfig, lpVtbl : IVMRImagePresenterConfigVtbl* do
    GUID = LibC::GUID.new(0x9f3a1c85_u32, 0x8555_u16, 0x49ba_u16, StaticArray[0x93_u8, 0x5f_u8, 0xbe_u8, 0x5b_u8, 0x5b_u8, 0x29_u8, 0xd1_u8, 0x78_u8])
    def query_interface(this : IVMRImagePresenterConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRImagePresenterConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRImagePresenterConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_rendering_prefs(this : IVMRImagePresenterConfig*, dwRenderFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_prefs.call(this, dwRenderFlags)
    end
    def get_rendering_prefs(this : IVMRImagePresenterConfig*, dwRenderFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_prefs.call(this, dwRenderFlags)
    end

  end

  @[Extern]
  record IVMRImagePresenterExclModeConfigVtbl,
    query_interface : Proc(IVMRImagePresenterExclModeConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRImagePresenterExclModeConfig*, UInt32),
    release : Proc(IVMRImagePresenterExclModeConfig*, UInt32),
    set_rendering_prefs : Proc(IVMRImagePresenterExclModeConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_prefs : Proc(IVMRImagePresenterExclModeConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    set_xlc_mode_dd_obj_and_primary_surface : Proc(IVMRImagePresenterExclModeConfig*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_xlc_mode_dd_obj_and_primary_surface : Proc(IVMRImagePresenterExclModeConfig*, Void**, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e6f7ce40-4673-44f1-8f77-5499d68cb4ea")]
  record IVMRImagePresenterExclModeConfig, lpVtbl : IVMRImagePresenterExclModeConfigVtbl* do
    GUID = LibC::GUID.new(0xe6f7ce40_u32, 0x4673_u16, 0x44f1_u16, StaticArray[0x8f_u8, 0x77_u8, 0x54_u8, 0x99_u8, 0xd6_u8, 0x8c_u8, 0xb4_u8, 0xea_u8])
    def query_interface(this : IVMRImagePresenterExclModeConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRImagePresenterExclModeConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRImagePresenterExclModeConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_rendering_prefs(this : IVMRImagePresenterExclModeConfig*, dwRenderFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_prefs.call(this, dwRenderFlags)
    end
    def get_rendering_prefs(this : IVMRImagePresenterExclModeConfig*, dwRenderFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_prefs.call(this, dwRenderFlags)
    end
    def set_xlc_mode_dd_obj_and_primary_surface(this : IVMRImagePresenterExclModeConfig*, lpDDObj : Void*, lpPrimarySurf : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_xlc_mode_dd_obj_and_primary_surface.call(this, lpDDObj, lpPrimarySurf)
    end
    def get_xlc_mode_dd_obj_and_primary_surface(this : IVMRImagePresenterExclModeConfig*, lpDDObj : Void**, lpPrimarySurf : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xlc_mode_dd_obj_and_primary_surface.call(this, lpDDObj, lpPrimarySurf)
    end

  end

  @[Extern]
  record IVPManagerVtbl,
    query_interface : Proc(IVPManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPManager*, UInt32),
    release : Proc(IVPManager*, UInt32),
    set_video_port_index : Proc(IVPManager*, UInt32, Win32cr::Foundation::HRESULT),
    get_video_port_index : Proc(IVPManager*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aac18c18-e186-46d2-825d-a1f8dc8e395a")]
  record IVPManager, lpVtbl : IVPManagerVtbl* do
    GUID = LibC::GUID.new(0xaac18c18_u32, 0xe186_u16, 0x46d2_u16, StaticArray[0x82_u8, 0x5d_u8, 0xa1_u8, 0xf8_u8, 0xdc_u8, 0x8e_u8, 0x39_u8, 0x5a_u8])
    def query_interface(this : IVPManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_video_port_index(this : IVPManager*, dwVideoPortIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_port_index.call(this, dwVideoPortIndex)
    end
    def get_video_port_index(this : IVPManager*, pdwVideoPortIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_port_index.call(this, pdwVideoPortIndex)
    end

  end

  @[Extern]
  record IDvdControlVtbl,
    query_interface : Proc(IDvdControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvdControl*, UInt32),
    release : Proc(IDvdControl*, UInt32),
    title_play : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    chapter_play : Proc(IDvdControl*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    time_play : Proc(IDvdControl*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    stop_for_resume : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    go_up : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    time_search : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    chapter_search : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    prev_pg_search : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    top_pg_search : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    next_pg_search : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    forward_scan : Proc(IDvdControl*, Float64, Win32cr::Foundation::HRESULT),
    backward_scan : Proc(IDvdControl*, Float64, Win32cr::Foundation::HRESULT),
    menu_call : Proc(IDvdControl*, Win32cr::Media::DirectShow::DVD_MENU_ID, Win32cr::Foundation::HRESULT),
    resume : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    upper_button_select : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    lower_button_select : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    left_button_select : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    right_button_select : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    button_activate : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    button_select_and_activate : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    still_off : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    pause_on : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    pause_off : Proc(IDvdControl*, Win32cr::Foundation::HRESULT),
    menu_language_select : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    audio_stream_change : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    subpicture_stream_change : Proc(IDvdControl*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    angle_change : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    parental_level_select : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    parental_country_select : Proc(IDvdControl*, UInt16, Win32cr::Foundation::HRESULT),
    karaoke_audio_presentation_mode_change : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    video_mode_preferrence : Proc(IDvdControl*, UInt32, Win32cr::Foundation::HRESULT),
    set_root : Proc(IDvdControl*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    mouse_activate : Proc(IDvdControl*, Win32cr::Foundation::POINT, Win32cr::Foundation::HRESULT),
    mouse_select : Proc(IDvdControl*, Win32cr::Foundation::POINT, Win32cr::Foundation::HRESULT),
    chapter_play_auto_stop : Proc(IDvdControl*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a70efe61-e2a3-11d0-a9be-00aa0061be93")]
  record IDvdControl, lpVtbl : IDvdControlVtbl* do
    GUID = LibC::GUID.new(0xa70efe61_u32, 0xe2a3_u16, 0x11d0_u16, StaticArray[0xa9_u8, 0xbe_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x61_u8, 0xbe_u8, 0x93_u8])
    def query_interface(this : IDvdControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvdControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvdControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def title_play(this : IDvdControl*, ulTitle : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.title_play.call(this, ulTitle)
    end
    def chapter_play(this : IDvdControl*, ulTitle : UInt32, ulChapter : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.chapter_play.call(this, ulTitle, ulChapter)
    end
    def time_play(this : IDvdControl*, ulTitle : UInt32, bcdTime : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.time_play.call(this, ulTitle, bcdTime)
    end
    def stop_for_resume(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_for_resume.call(this)
    end
    def go_up(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.go_up.call(this)
    end
    def time_search(this : IDvdControl*, bcdTime : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.time_search.call(this, bcdTime)
    end
    def chapter_search(this : IDvdControl*, ulChapter : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.chapter_search.call(this, ulChapter)
    end
    def prev_pg_search(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prev_pg_search.call(this)
    end
    def top_pg_search(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.top_pg_search.call(this)
    end
    def next_pg_search(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next_pg_search.call(this)
    end
    def forward_scan(this : IDvdControl*, dwSpeed : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.forward_scan.call(this, dwSpeed)
    end
    def backward_scan(this : IDvdControl*, dwSpeed : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.backward_scan.call(this, dwSpeed)
    end
    def menu_call(this : IDvdControl*, menu_id : Win32cr::Media::DirectShow::DVD_MENU_ID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.menu_call.call(this, menu_id)
    end
    def resume(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end
    def upper_button_select(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.upper_button_select.call(this)
    end
    def lower_button_select(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lower_button_select.call(this)
    end
    def left_button_select(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.left_button_select.call(this)
    end
    def right_button_select(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.right_button_select.call(this)
    end
    def button_activate(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.button_activate.call(this)
    end
    def button_select_and_activate(this : IDvdControl*, ulButton : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.button_select_and_activate.call(this, ulButton)
    end
    def still_off(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.still_off.call(this)
    end
    def pause_on(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause_on.call(this)
    end
    def pause_off(this : IDvdControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause_off.call(this)
    end
    def menu_language_select(this : IDvdControl*, language : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.menu_language_select.call(this, language)
    end
    def audio_stream_change(this : IDvdControl*, ulAudio : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.audio_stream_change.call(this, ulAudio)
    end
    def subpicture_stream_change(this : IDvdControl*, ulSubPicture : UInt32, bDisplay : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.subpicture_stream_change.call(this, ulSubPicture, bDisplay)
    end
    def angle_change(this : IDvdControl*, ulAngle : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.angle_change.call(this, ulAngle)
    end
    def parental_level_select(this : IDvdControl*, ulParentalLevel : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parental_level_select.call(this, ulParentalLevel)
    end
    def parental_country_select(this : IDvdControl*, wCountry : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parental_country_select.call(this, wCountry)
    end
    def karaoke_audio_presentation_mode_change(this : IDvdControl*, ulMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.karaoke_audio_presentation_mode_change.call(this, ulMode)
    end
    def video_mode_preferrence(this : IDvdControl*, ulPreferredDisplayMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.video_mode_preferrence.call(this, ulPreferredDisplayMode)
    end
    def set_root(this : IDvdControl*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_root.call(this, pszPath)
    end
    def mouse_activate(this : IDvdControl*, point : Win32cr::Foundation::POINT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mouse_activate.call(this, point)
    end
    def mouse_select(this : IDvdControl*, point : Win32cr::Foundation::POINT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mouse_select.call(this, point)
    end
    def chapter_play_auto_stop(this : IDvdControl*, ulTitle : UInt32, ulChapter : UInt32, ulChaptersToPlay : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.chapter_play_auto_stop.call(this, ulTitle, ulChapter, ulChaptersToPlay)
    end

  end

  @[Extern]
  record IDvdInfoVtbl,
    query_interface : Proc(IDvdInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvdInfo*, UInt32),
    release : Proc(IDvdInfo*, UInt32),
    get_current_domain : Proc(IDvdInfo*, Win32cr::Media::DirectShow::DVD_DOMAIN*, Win32cr::Foundation::HRESULT),
    get_current_location : Proc(IDvdInfo*, Win32cr::Media::DirectShow::DVD_PLAYBACK_LOCATION*, Win32cr::Foundation::HRESULT),
    get_total_title_time : Proc(IDvdInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_button : Proc(IDvdInfo*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_angle : Proc(IDvdInfo*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_audio : Proc(IDvdInfo*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_subpicture : Proc(IDvdInfo*, UInt32*, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_current_uops : Proc(IDvdInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_all_spr_ms : Proc(IDvdInfo*, UInt16**, Win32cr::Foundation::HRESULT),
    get_all_gpr_ms : Proc(IDvdInfo*, UInt16**, Win32cr::Foundation::HRESULT),
    get_audio_language : Proc(IDvdInfo*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_subpicture_language : Proc(IDvdInfo*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_title_attributes : Proc(IDvdInfo*, UInt32, Win32cr::Media::DirectShow::DVD_ATR*, Win32cr::Foundation::HRESULT),
    get_vmg_attributes : Proc(IDvdInfo*, Win32cr::Media::DirectShow::DVD_ATR*, Win32cr::Foundation::HRESULT),
    get_current_video_attributes : Proc(IDvdInfo*, UInt8**, Win32cr::Foundation::HRESULT),
    get_current_audio_attributes : Proc(IDvdInfo*, UInt8**, Win32cr::Foundation::HRESULT),
    get_current_subpicture_attributes : Proc(IDvdInfo*, UInt8**, Win32cr::Foundation::HRESULT),
    get_current_volume_info : Proc(IDvdInfo*, UInt32*, UInt32*, Win32cr::Media::DirectShow::DVD_DISC_SIDE*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dvd_text_info : Proc(IDvdInfo*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_player_parental_level : Proc(IDvdInfo*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_number_of_chapters : Proc(IDvdInfo*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_title_parental_levels : Proc(IDvdInfo*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_root : Proc(IDvdInfo*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a70efe60-e2a3-11d0-a9be-00aa0061be93")]
  record IDvdInfo, lpVtbl : IDvdInfoVtbl* do
    GUID = LibC::GUID.new(0xa70efe60_u32, 0xe2a3_u16, 0x11d0_u16, StaticArray[0xa9_u8, 0xbe_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x61_u8, 0xbe_u8, 0x93_u8])
    def query_interface(this : IDvdInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvdInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvdInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_current_domain(this : IDvdInfo*, pDomain : Win32cr::Media::DirectShow::DVD_DOMAIN*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_domain.call(this, pDomain)
    end
    def get_current_location(this : IDvdInfo*, pLocation : Win32cr::Media::DirectShow::DVD_PLAYBACK_LOCATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_location.call(this, pLocation)
    end
    def get_total_title_time(this : IDvdInfo*, pulTotalTime : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_title_time.call(this, pulTotalTime)
    end
    def get_current_button(this : IDvdInfo*, pulButtonsAvailable : UInt32*, pulCurrentButton : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_button.call(this, pulButtonsAvailable, pulCurrentButton)
    end
    def get_current_angle(this : IDvdInfo*, pulAnglesAvailable : UInt32*, pulCurrentAngle : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_angle.call(this, pulAnglesAvailable, pulCurrentAngle)
    end
    def get_current_audio(this : IDvdInfo*, pulStreamsAvailable : UInt32*, pulCurrentStream : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_audio.call(this, pulStreamsAvailable, pulCurrentStream)
    end
    def get_current_subpicture(this : IDvdInfo*, pulStreamsAvailable : UInt32*, pulCurrentStream : UInt32*, pIsDisabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_subpicture.call(this, pulStreamsAvailable, pulCurrentStream, pIsDisabled)
    end
    def get_current_uops(this : IDvdInfo*, pUOP : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_uops.call(this, pUOP)
    end
    def get_all_spr_ms(this : IDvdInfo*, pRegisterArray : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_spr_ms.call(this, pRegisterArray)
    end
    def get_all_gpr_ms(this : IDvdInfo*, pRegisterArray : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_gpr_ms.call(this, pRegisterArray)
    end
    def get_audio_language(this : IDvdInfo*, ulStream : UInt32, pLanguage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_language.call(this, ulStream, pLanguage)
    end
    def get_subpicture_language(this : IDvdInfo*, ulStream : UInt32, pLanguage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subpicture_language.call(this, ulStream, pLanguage)
    end
    def get_title_attributes(this : IDvdInfo*, ulTitle : UInt32, pATR : Win32cr::Media::DirectShow::DVD_ATR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_title_attributes.call(this, ulTitle, pATR)
    end
    def get_vmg_attributes(this : IDvdInfo*, pATR : Win32cr::Media::DirectShow::DVD_ATR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vmg_attributes.call(this, pATR)
    end
    def get_current_video_attributes(this : IDvdInfo*, pATR : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_video_attributes.call(this, pATR)
    end
    def get_current_audio_attributes(this : IDvdInfo*, pATR : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_audio_attributes.call(this, pATR)
    end
    def get_current_subpicture_attributes(this : IDvdInfo*, pATR : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_subpicture_attributes.call(this, pATR)
    end
    def get_current_volume_info(this : IDvdInfo*, pulNumOfVol : UInt32*, pulThisVolNum : UInt32*, pSide : Win32cr::Media::DirectShow::DVD_DISC_SIDE*, pulNumOfTitles : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_volume_info.call(this, pulNumOfVol, pulThisVolNum, pSide, pulNumOfTitles)
    end
    def get_dvd_text_info(this : IDvdInfo*, pTextManager : UInt8*, ulBufSize : UInt32, pulActualSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_text_info.call(this, pTextManager, ulBufSize, pulActualSize)
    end
    def get_player_parental_level(this : IDvdInfo*, pulParentalLevel : UInt32*, pulCountryCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_player_parental_level.call(this, pulParentalLevel, pulCountryCode)
    end
    def get_number_of_chapters(this : IDvdInfo*, ulTitle : UInt32, pulNumberOfChapters : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_chapters.call(this, ulTitle, pulNumberOfChapters)
    end
    def get_title_parental_levels(this : IDvdInfo*, ulTitle : UInt32, pulParentalLevels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_title_parental_levels.call(this, ulTitle, pulParentalLevels)
    end
    def get_root(this : IDvdInfo*, pRoot : UInt8*, ulBufSize : UInt32, pulActualSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root.call(this, pRoot, ulBufSize, pulActualSize)
    end

  end

  @[Extern]
  record IDvdCmdVtbl,
    query_interface : Proc(IDvdCmd*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvdCmd*, UInt32),
    release : Proc(IDvdCmd*, UInt32),
    wait_for_start : Proc(IDvdCmd*, Win32cr::Foundation::HRESULT),
    wait_for_end : Proc(IDvdCmd*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5a4a97e4-94ee-4a55-9751-74b5643aa27d")]
  record IDvdCmd, lpVtbl : IDvdCmdVtbl* do
    GUID = LibC::GUID.new(0x5a4a97e4_u32, 0x94ee_u16, 0x4a55_u16, StaticArray[0x97_u8, 0x51_u8, 0x74_u8, 0xb5_u8, 0x64_u8, 0x3a_u8, 0xa2_u8, 0x7d_u8])
    def query_interface(this : IDvdCmd*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvdCmd*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvdCmd*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def wait_for_start(this : IDvdCmd*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_start.call(this)
    end
    def wait_for_end(this : IDvdCmd*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_end.call(this)
    end

  end

  @[Extern]
  record IDvdStateVtbl,
    query_interface : Proc(IDvdState*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvdState*, UInt32),
    release : Proc(IDvdState*, UInt32),
    get_disc_id : Proc(IDvdState*, UInt64*, Win32cr::Foundation::HRESULT),
    get_parental_level : Proc(IDvdState*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("86303d6d-1c4a-4087-ab42-f711167048ef")]
  record IDvdState, lpVtbl : IDvdStateVtbl* do
    GUID = LibC::GUID.new(0x86303d6d_u32, 0x1c4a_u16, 0x4087_u16, StaticArray[0xab_u8, 0x42_u8, 0xf7_u8, 0x11_u8, 0x16_u8, 0x70_u8, 0x48_u8, 0xef_u8])
    def query_interface(this : IDvdState*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvdState*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvdState*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_disc_id(this : IDvdState*, pullUniqueID : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disc_id.call(this, pullUniqueID)
    end
    def get_parental_level(this : IDvdState*, pulParentalLevel : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parental_level.call(this, pulParentalLevel)
    end

  end

  @[Extern]
  record IDvdControl2Vtbl,
    query_interface : Proc(IDvdControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvdControl2*, UInt32),
    release : Proc(IDvdControl2*, UInt32),
    play_title : Proc(IDvdControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_chapter_in_title : Proc(IDvdControl2*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_at_time_in_title : Proc(IDvdControl2*, UInt32, Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    stop : Proc(IDvdControl2*, Win32cr::Foundation::HRESULT),
    return_from_submenu : Proc(IDvdControl2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_at_time : Proc(IDvdControl2*, Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_chapter : Proc(IDvdControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_prev_chapter : Proc(IDvdControl2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    replay_chapter : Proc(IDvdControl2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_next_chapter : Proc(IDvdControl2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_forwards : Proc(IDvdControl2*, Float64, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_backwards : Proc(IDvdControl2*, Float64, UInt32, Void**, Win32cr::Foundation::HRESULT),
    show_menu : Proc(IDvdControl2*, Win32cr::Media::DirectShow::DVD_MENU_ID, UInt32, Void**, Win32cr::Foundation::HRESULT),
    resume : Proc(IDvdControl2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    select_relative_button : Proc(IDvdControl2*, Win32cr::Media::DirectShow::DVD_RELATIVE_BUTTON, Win32cr::Foundation::HRESULT),
    activate_button : Proc(IDvdControl2*, Win32cr::Foundation::HRESULT),
    select_button : Proc(IDvdControl2*, UInt32, Win32cr::Foundation::HRESULT),
    select_and_activate_button : Proc(IDvdControl2*, UInt32, Win32cr::Foundation::HRESULT),
    still_off : Proc(IDvdControl2*, Win32cr::Foundation::HRESULT),
    pause : Proc(IDvdControl2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    select_audio_stream : Proc(IDvdControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    select_subpicture_stream : Proc(IDvdControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_subpicture_state : Proc(IDvdControl2*, Win32cr::Foundation::BOOL, UInt32, Void**, Win32cr::Foundation::HRESULT),
    select_angle : Proc(IDvdControl2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    select_parental_level : Proc(IDvdControl2*, UInt32, Win32cr::Foundation::HRESULT),
    select_parental_country : Proc(IDvdControl2*, UInt8*, Win32cr::Foundation::HRESULT),
    select_karaoke_audio_presentation_mode : Proc(IDvdControl2*, UInt32, Win32cr::Foundation::HRESULT),
    select_video_mode_preference : Proc(IDvdControl2*, UInt32, Win32cr::Foundation::HRESULT),
    set_dvd_directory : Proc(IDvdControl2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    activate_at_position : Proc(IDvdControl2*, Win32cr::Foundation::POINT, Win32cr::Foundation::HRESULT),
    select_at_position : Proc(IDvdControl2*, Win32cr::Foundation::POINT, Win32cr::Foundation::HRESULT),
    play_chapters_auto_stop : Proc(IDvdControl2*, UInt32, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    accept_parental_level_change : Proc(IDvdControl2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_option : Proc(IDvdControl2*, Win32cr::Media::DirectShow::DVD_OPTION_FLAG, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_state : Proc(IDvdControl2*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    play_period_in_title_auto_stop : Proc(IDvdControl2*, UInt32, Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_gprm : Proc(IDvdControl2*, UInt32, UInt16, UInt32, Void**, Win32cr::Foundation::HRESULT),
    select_default_menu_language : Proc(IDvdControl2*, UInt32, Win32cr::Foundation::HRESULT),
    select_default_audio_language : Proc(IDvdControl2*, UInt32, Win32cr::Media::DirectShow::DVD_AUDIO_LANG_EXT, Win32cr::Foundation::HRESULT),
    select_default_subpicture_language : Proc(IDvdControl2*, UInt32, Win32cr::Media::DirectShow::DVD_SUBPICTURE_LANG_EXT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("33bc7430-eec0-11d2-8201-00a0c9d74842")]
  record IDvdControl2, lpVtbl : IDvdControl2Vtbl* do
    GUID = LibC::GUID.new(0x33bc7430_u32, 0xeec0_u16, 0x11d2_u16, StaticArray[0x82_u8, 0x1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd7_u8, 0x48_u8, 0x42_u8])
    def query_interface(this : IDvdControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvdControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvdControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def play_title(this : IDvdControl2*, ulTitle : UInt32, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_title.call(this, ulTitle, dwFlags, ppCmd)
    end
    def play_chapter_in_title(this : IDvdControl2*, ulTitle : UInt32, ulChapter : UInt32, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter_in_title.call(this, ulTitle, ulChapter, dwFlags, ppCmd)
    end
    def play_at_time_in_title(this : IDvdControl2*, ulTitle : UInt32, pStartTime : Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time_in_title.call(this, ulTitle, pStartTime, dwFlags, ppCmd)
    end
    def stop(this : IDvdControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def return_from_submenu(this : IDvdControl2*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_from_submenu.call(this, dwFlags, ppCmd)
    end
    def play_at_time(this : IDvdControl2*, pTime : Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time.call(this, pTime, dwFlags, ppCmd)
    end
    def play_chapter(this : IDvdControl2*, ulChapter : UInt32, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter.call(this, ulChapter, dwFlags, ppCmd)
    end
    def play_prev_chapter(this : IDvdControl2*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_prev_chapter.call(this, dwFlags, ppCmd)
    end
    def replay_chapter(this : IDvdControl2*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replay_chapter.call(this, dwFlags, ppCmd)
    end
    def play_next_chapter(this : IDvdControl2*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_next_chapter.call(this, dwFlags, ppCmd)
    end
    def play_forwards(this : IDvdControl2*, dSpeed : Float64, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_forwards.call(this, dSpeed, dwFlags, ppCmd)
    end
    def play_backwards(this : IDvdControl2*, dSpeed : Float64, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_backwards.call(this, dSpeed, dwFlags, ppCmd)
    end
    def show_menu(this : IDvdControl2*, menu_id : Win32cr::Media::DirectShow::DVD_MENU_ID, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_menu.call(this, menu_id, dwFlags, ppCmd)
    end
    def resume(this : IDvdControl2*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this, dwFlags, ppCmd)
    end
    def select_relative_button(this : IDvdControl2*, buttonDir : Win32cr::Media::DirectShow::DVD_RELATIVE_BUTTON) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_relative_button.call(this, buttonDir)
    end
    def activate_button(this : IDvdControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_button.call(this)
    end
    def select_button(this : IDvdControl2*, ulButton : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_button.call(this, ulButton)
    end
    def select_and_activate_button(this : IDvdControl2*, ulButton : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_and_activate_button.call(this, ulButton)
    end
    def still_off(this : IDvdControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.still_off.call(this)
    end
    def pause(this : IDvdControl2*, bState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this, bState)
    end
    def select_audio_stream(this : IDvdControl2*, ulAudio : UInt32, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_audio_stream.call(this, ulAudio, dwFlags, ppCmd)
    end
    def select_subpicture_stream(this : IDvdControl2*, ulSubPicture : UInt32, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_subpicture_stream.call(this, ulSubPicture, dwFlags, ppCmd)
    end
    def set_subpicture_state(this : IDvdControl2*, bState : Win32cr::Foundation::BOOL, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_subpicture_state.call(this, bState, dwFlags, ppCmd)
    end
    def select_angle(this : IDvdControl2*, ulAngle : UInt32, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_angle.call(this, ulAngle, dwFlags, ppCmd)
    end
    def select_parental_level(this : IDvdControl2*, ulParentalLevel : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_parental_level.call(this, ulParentalLevel)
    end
    def select_parental_country(this : IDvdControl2*, bCountry : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_parental_country.call(this, bCountry)
    end
    def select_karaoke_audio_presentation_mode(this : IDvdControl2*, ulMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_karaoke_audio_presentation_mode.call(this, ulMode)
    end
    def select_video_mode_preference(this : IDvdControl2*, ulPreferredDisplayMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_video_mode_preference.call(this, ulPreferredDisplayMode)
    end
    def set_dvd_directory(this : IDvdControl2*, pszwPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dvd_directory.call(this, pszwPath)
    end
    def activate_at_position(this : IDvdControl2*, point : Win32cr::Foundation::POINT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_at_position.call(this, point)
    end
    def select_at_position(this : IDvdControl2*, point : Win32cr::Foundation::POINT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_at_position.call(this, point)
    end
    def play_chapters_auto_stop(this : IDvdControl2*, ulTitle : UInt32, ulChapter : UInt32, ulChaptersToPlay : UInt32, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapters_auto_stop.call(this, ulTitle, ulChapter, ulChaptersToPlay, dwFlags, ppCmd)
    end
    def accept_parental_level_change(this : IDvdControl2*, bAccept : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.accept_parental_level_change.call(this, bAccept)
    end
    def set_option(this : IDvdControl2*, flag : Win32cr::Media::DirectShow::DVD_OPTION_FLAG, fState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_option.call(this, flag, fState)
    end
    def set_state(this : IDvdControl2*, pState : Void*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_state.call(this, pState, dwFlags, ppCmd)
    end
    def play_period_in_title_auto_stop(this : IDvdControl2*, ulTitle : UInt32, pStartTime : Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, pEndTime : Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_period_in_title_auto_stop.call(this, ulTitle, pStartTime, pEndTime, dwFlags, ppCmd)
    end
    def set_gprm(this : IDvdControl2*, ulIndex : UInt32, wValue : UInt16, dwFlags : UInt32, ppCmd : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_gprm.call(this, ulIndex, wValue, dwFlags, ppCmd)
    end
    def select_default_menu_language(this : IDvdControl2*, language : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_default_menu_language.call(this, language)
    end
    def select_default_audio_language(this : IDvdControl2*, language : UInt32, audioExtension : Win32cr::Media::DirectShow::DVD_AUDIO_LANG_EXT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_default_audio_language.call(this, language, audioExtension)
    end
    def select_default_subpicture_language(this : IDvdControl2*, language : UInt32, subpictureExtension : Win32cr::Media::DirectShow::DVD_SUBPICTURE_LANG_EXT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_default_subpicture_language.call(this, language, subpictureExtension)
    end

  end

  @[Extern]
  record IDvdInfo2Vtbl,
    query_interface : Proc(IDvdInfo2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvdInfo2*, UInt32),
    release : Proc(IDvdInfo2*, UInt32),
    get_current_domain : Proc(IDvdInfo2*, Win32cr::Media::DirectShow::DVD_DOMAIN*, Win32cr::Foundation::HRESULT),
    get_current_location : Proc(IDvdInfo2*, Win32cr::Media::DirectShow::DVD_PLAYBACK_LOCATION2*, Win32cr::Foundation::HRESULT),
    get_total_title_time : Proc(IDvdInfo2*, Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_button : Proc(IDvdInfo2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_angle : Proc(IDvdInfo2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_audio : Proc(IDvdInfo2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_subpicture : Proc(IDvdInfo2*, UInt32*, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_current_uops : Proc(IDvdInfo2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_all_spr_ms : Proc(IDvdInfo2*, UInt16**, Win32cr::Foundation::HRESULT),
    get_all_gpr_ms : Proc(IDvdInfo2*, UInt16**, Win32cr::Foundation::HRESULT),
    get_audio_language : Proc(IDvdInfo2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_subpicture_language : Proc(IDvdInfo2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_title_attributes : Proc(IDvdInfo2*, UInt32, Win32cr::Media::DirectShow::DVD_MenuAttributes*, Win32cr::Media::DirectShow::DVD_TitleAttributes*, Win32cr::Foundation::HRESULT),
    get_vmg_attributes : Proc(IDvdInfo2*, Win32cr::Media::DirectShow::DVD_MenuAttributes*, Win32cr::Foundation::HRESULT),
    get_current_video_attributes : Proc(IDvdInfo2*, Win32cr::Media::DirectShow::DVD_VideoAttributes*, Win32cr::Foundation::HRESULT),
    get_audio_attributes : Proc(IDvdInfo2*, UInt32, Win32cr::Media::DirectShow::DVD_AudioAttributes*, Win32cr::Foundation::HRESULT),
    get_karaoke_attributes : Proc(IDvdInfo2*, UInt32, Win32cr::Media::DirectShow::DVD_KaraokeAttributes*, Win32cr::Foundation::HRESULT),
    get_subpicture_attributes : Proc(IDvdInfo2*, UInt32, Win32cr::Media::DirectShow::DVD_SubpictureAttributes*, Win32cr::Foundation::HRESULT),
    get_dvd_volume_info : Proc(IDvdInfo2*, UInt32*, UInt32*, Win32cr::Media::DirectShow::DVD_DISC_SIDE*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dvd_text_number_of_languages : Proc(IDvdInfo2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dvd_text_language_info : Proc(IDvdInfo2*, UInt32, UInt32*, UInt32*, Win32cr::Media::DirectShow::DVD_TextCharSet*, Win32cr::Foundation::HRESULT),
    get_dvd_text_string_as_native : Proc(IDvdInfo2*, UInt32, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Media::DirectShow::DVD_TextStringType*, Win32cr::Foundation::HRESULT),
    get_dvd_text_string_as_unicode : Proc(IDvdInfo2*, UInt32, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Media::DirectShow::DVD_TextStringType*, Win32cr::Foundation::HRESULT),
    get_player_parental_level : Proc(IDvdInfo2*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    get_number_of_chapters : Proc(IDvdInfo2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_title_parental_levels : Proc(IDvdInfo2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_dvd_directory : Proc(IDvdInfo2*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    is_audio_stream_enabled : Proc(IDvdInfo2*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_disc_id : Proc(IDvdInfo2*, Win32cr::Foundation::PWSTR, UInt64*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IDvdInfo2*, Void**, Win32cr::Foundation::HRESULT),
    get_menu_languages : Proc(IDvdInfo2*, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_button_at_position : Proc(IDvdInfo2*, Win32cr::Foundation::POINT, UInt32*, Win32cr::Foundation::HRESULT),
    get_cmd_from_event : Proc(IDvdInfo2*, LibC::IntPtrT, Void**, Win32cr::Foundation::HRESULT),
    get_default_menu_language : Proc(IDvdInfo2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_default_audio_language : Proc(IDvdInfo2*, UInt32*, Win32cr::Media::DirectShow::DVD_AUDIO_LANG_EXT*, Win32cr::Foundation::HRESULT),
    get_default_subpicture_language : Proc(IDvdInfo2*, UInt32*, Win32cr::Media::DirectShow::DVD_SUBPICTURE_LANG_EXT*, Win32cr::Foundation::HRESULT),
    get_decoder_caps : Proc(IDvdInfo2*, Win32cr::Media::DirectShow::DVD_DECODER_CAPS*, Win32cr::Foundation::HRESULT),
    get_button_rect : Proc(IDvdInfo2*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    is_subpicture_stream_enabled : Proc(IDvdInfo2*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34151510-eec0-11d2-8201-00a0c9d74842")]
  record IDvdInfo2, lpVtbl : IDvdInfo2Vtbl* do
    GUID = LibC::GUID.new(0x34151510_u32, 0xeec0_u16, 0x11d2_u16, StaticArray[0x82_u8, 0x1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xd7_u8, 0x48_u8, 0x42_u8])
    def query_interface(this : IDvdInfo2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvdInfo2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvdInfo2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_current_domain(this : IDvdInfo2*, pDomain : Win32cr::Media::DirectShow::DVD_DOMAIN*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_domain.call(this, pDomain)
    end
    def get_current_location(this : IDvdInfo2*, pLocation : Win32cr::Media::DirectShow::DVD_PLAYBACK_LOCATION2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_location.call(this, pLocation)
    end
    def get_total_title_time(this : IDvdInfo2*, pTotalTime : Win32cr::Media::DirectShow::DVD_HMSF_TIMECODE*, ulTimeCodeFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_title_time.call(this, pTotalTime, ulTimeCodeFlags)
    end
    def get_current_button(this : IDvdInfo2*, pulButtonsAvailable : UInt32*, pulCurrentButton : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_button.call(this, pulButtonsAvailable, pulCurrentButton)
    end
    def get_current_angle(this : IDvdInfo2*, pulAnglesAvailable : UInt32*, pulCurrentAngle : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_angle.call(this, pulAnglesAvailable, pulCurrentAngle)
    end
    def get_current_audio(this : IDvdInfo2*, pulStreamsAvailable : UInt32*, pulCurrentStream : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_audio.call(this, pulStreamsAvailable, pulCurrentStream)
    end
    def get_current_subpicture(this : IDvdInfo2*, pulStreamsAvailable : UInt32*, pulCurrentStream : UInt32*, pbIsDisabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_subpicture.call(this, pulStreamsAvailable, pulCurrentStream, pbIsDisabled)
    end
    def get_current_uops(this : IDvdInfo2*, pulUOPs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_uops.call(this, pulUOPs)
    end
    def get_all_spr_ms(this : IDvdInfo2*, pRegisterArray : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_spr_ms.call(this, pRegisterArray)
    end
    def get_all_gpr_ms(this : IDvdInfo2*, pRegisterArray : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_gpr_ms.call(this, pRegisterArray)
    end
    def get_audio_language(this : IDvdInfo2*, ulStream : UInt32, pLanguage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_language.call(this, ulStream, pLanguage)
    end
    def get_subpicture_language(this : IDvdInfo2*, ulStream : UInt32, pLanguage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subpicture_language.call(this, ulStream, pLanguage)
    end
    def get_title_attributes(this : IDvdInfo2*, ulTitle : UInt32, pMenu : Win32cr::Media::DirectShow::DVD_MenuAttributes*, pTitle : Win32cr::Media::DirectShow::DVD_TitleAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_title_attributes.call(this, ulTitle, pMenu, pTitle)
    end
    def get_vmg_attributes(this : IDvdInfo2*, pATR : Win32cr::Media::DirectShow::DVD_MenuAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vmg_attributes.call(this, pATR)
    end
    def get_current_video_attributes(this : IDvdInfo2*, pATR : Win32cr::Media::DirectShow::DVD_VideoAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_video_attributes.call(this, pATR)
    end
    def get_audio_attributes(this : IDvdInfo2*, ulStream : UInt32, pATR : Win32cr::Media::DirectShow::DVD_AudioAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_attributes.call(this, ulStream, pATR)
    end
    def get_karaoke_attributes(this : IDvdInfo2*, ulStream : UInt32, pAttributes : Win32cr::Media::DirectShow::DVD_KaraokeAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_karaoke_attributes.call(this, ulStream, pAttributes)
    end
    def get_subpicture_attributes(this : IDvdInfo2*, ulStream : UInt32, pATR : Win32cr::Media::DirectShow::DVD_SubpictureAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subpicture_attributes.call(this, ulStream, pATR)
    end
    def get_dvd_volume_info(this : IDvdInfo2*, pulNumOfVolumes : UInt32*, pulVolume : UInt32*, pSide : Win32cr::Media::DirectShow::DVD_DISC_SIDE*, pulNumOfTitles : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_volume_info.call(this, pulNumOfVolumes, pulVolume, pSide, pulNumOfTitles)
    end
    def get_dvd_text_number_of_languages(this : IDvdInfo2*, pulNumOfLangs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_text_number_of_languages.call(this, pulNumOfLangs)
    end
    def get_dvd_text_language_info(this : IDvdInfo2*, ulLangIndex : UInt32, pulNumOfStrings : UInt32*, pLangCode : UInt32*, pbCharacterSet : Win32cr::Media::DirectShow::DVD_TextCharSet*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_text_language_info.call(this, ulLangIndex, pulNumOfStrings, pLangCode, pbCharacterSet)
    end
    def get_dvd_text_string_as_native(this : IDvdInfo2*, ulLangIndex : UInt32, ulStringIndex : UInt32, pbBuffer : UInt8*, ulMaxBufferSize : UInt32, pulActualSize : UInt32*, pType : Win32cr::Media::DirectShow::DVD_TextStringType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_text_string_as_native.call(this, ulLangIndex, ulStringIndex, pbBuffer, ulMaxBufferSize, pulActualSize, pType)
    end
    def get_dvd_text_string_as_unicode(this : IDvdInfo2*, ulLangIndex : UInt32, ulStringIndex : UInt32, pchwBuffer : Win32cr::Foundation::PWSTR, ulMaxBufferSize : UInt32, pulActualSize : UInt32*, pType : Win32cr::Media::DirectShow::DVD_TextStringType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_text_string_as_unicode.call(this, ulLangIndex, ulStringIndex, pchwBuffer, ulMaxBufferSize, pulActualSize, pType)
    end
    def get_player_parental_level(this : IDvdInfo2*, pulParentalLevel : UInt32*, pbCountryCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_player_parental_level.call(this, pulParentalLevel, pbCountryCode)
    end
    def get_number_of_chapters(this : IDvdInfo2*, ulTitle : UInt32, pulNumOfChapters : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_chapters.call(this, ulTitle, pulNumOfChapters)
    end
    def get_title_parental_levels(this : IDvdInfo2*, ulTitle : UInt32, pulParentalLevels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_title_parental_levels.call(this, ulTitle, pulParentalLevels)
    end
    def get_dvd_directory(this : IDvdInfo2*, pszwPath : UInt16*, ulMaxSize : UInt32, pulActualSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_directory.call(this, pszwPath, ulMaxSize, pulActualSize)
    end
    def is_audio_stream_enabled(this : IDvdInfo2*, ulStreamNum : UInt32, pbEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_audio_stream_enabled.call(this, ulStreamNum, pbEnabled)
    end
    def get_disc_id(this : IDvdInfo2*, pszwPath : Win32cr::Foundation::PWSTR, pullDiscID : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disc_id.call(this, pszwPath, pullDiscID)
    end
    def get_state(this : IDvdInfo2*, pStateData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pStateData)
    end
    def get_menu_languages(this : IDvdInfo2*, pLanguages : UInt32*, ulMaxLanguages : UInt32, pulActualLanguages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_menu_languages.call(this, pLanguages, ulMaxLanguages, pulActualLanguages)
    end
    def get_button_at_position(this : IDvdInfo2*, point : Win32cr::Foundation::POINT, pulButtonIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_button_at_position.call(this, point, pulButtonIndex)
    end
    def get_cmd_from_event(this : IDvdInfo2*, lParam1 : LibC::IntPtrT, pCmdObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cmd_from_event.call(this, lParam1, pCmdObj)
    end
    def get_default_menu_language(this : IDvdInfo2*, pLanguage : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_menu_language.call(this, pLanguage)
    end
    def get_default_audio_language(this : IDvdInfo2*, pLanguage : UInt32*, pAudioExtension : Win32cr::Media::DirectShow::DVD_AUDIO_LANG_EXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_audio_language.call(this, pLanguage, pAudioExtension)
    end
    def get_default_subpicture_language(this : IDvdInfo2*, pLanguage : UInt32*, pSubpictureExtension : Win32cr::Media::DirectShow::DVD_SUBPICTURE_LANG_EXT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_subpicture_language.call(this, pLanguage, pSubpictureExtension)
    end
    def get_decoder_caps(this : IDvdInfo2*, pCaps : Win32cr::Media::DirectShow::DVD_DECODER_CAPS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decoder_caps.call(this, pCaps)
    end
    def get_button_rect(this : IDvdInfo2*, ulButton : UInt32, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_button_rect.call(this, ulButton, pRect)
    end
    def is_subpicture_stream_enabled(this : IDvdInfo2*, ulStreamNum : UInt32, pbEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_subpicture_stream_enabled.call(this, ulStreamNum, pbEnabled)
    end

  end

  @[Extern]
  record IDvdGraphBuilderVtbl,
    query_interface : Proc(IDvdGraphBuilder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvdGraphBuilder*, UInt32),
    release : Proc(IDvdGraphBuilder*, UInt32),
    get_filtergraph : Proc(IDvdGraphBuilder*, Void**, Win32cr::Foundation::HRESULT),
    get_dvd_interface : Proc(IDvdGraphBuilder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    render_dvd_video_volume : Proc(IDvdGraphBuilder*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Media::DirectShow::AM_DVD_RENDERSTATUS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fcc152b6-f372-11d0-8e00-00c04fd7c08b")]
  record IDvdGraphBuilder, lpVtbl : IDvdGraphBuilderVtbl* do
    GUID = LibC::GUID.new(0xfcc152b6_u32, 0xf372_u16, 0x11d0_u16, StaticArray[0x8e_u8, 0x0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xc0_u8, 0x8b_u8])
    def query_interface(this : IDvdGraphBuilder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvdGraphBuilder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvdGraphBuilder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_filtergraph(this : IDvdGraphBuilder*, ppGB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filtergraph.call(this, ppGB)
    end
    def get_dvd_interface(this : IDvdGraphBuilder*, riid : LibC::GUID*, ppvIF : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dvd_interface.call(this, riid, ppvIF)
    end
    def render_dvd_video_volume(this : IDvdGraphBuilder*, lpcwszPathName : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pStatus : Win32cr::Media::DirectShow::AM_DVD_RENDERSTATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_dvd_video_volume.call(this, lpcwszPathName, dwFlags, pStatus)
    end

  end

  @[Extern]
  record IDDrawExclModeVideoVtbl,
    query_interface : Proc(IDDrawExclModeVideo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDDrawExclModeVideo*, UInt32),
    release : Proc(IDDrawExclModeVideo*, UInt32),
    set_d_draw_object : Proc(IDDrawExclModeVideo*, Void*, Win32cr::Foundation::HRESULT),
    get_d_draw_object : Proc(IDDrawExclModeVideo*, Void**, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_d_draw_surface : Proc(IDDrawExclModeVideo*, Void*, Win32cr::Foundation::HRESULT),
    get_d_draw_surface : Proc(IDDrawExclModeVideo*, Void**, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_draw_parameters : Proc(IDDrawExclModeVideo*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_native_video_props : Proc(IDDrawExclModeVideo*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_callback_interface : Proc(IDDrawExclModeVideo*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("153acc21-d83b-11d1-82bf-00a0c9696c8f")]
  record IDDrawExclModeVideo, lpVtbl : IDDrawExclModeVideoVtbl* do
    GUID = LibC::GUID.new(0x153acc21_u32, 0xd83b_u16, 0x11d1_u16, StaticArray[0x82_u8, 0xbf_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x6c_u8, 0x8f_u8])
    def query_interface(this : IDDrawExclModeVideo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDDrawExclModeVideo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDDrawExclModeVideo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_d_draw_object(this : IDDrawExclModeVideo*, pDDrawObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_d_draw_object.call(this, pDDrawObject)
    end
    def get_d_draw_object(this : IDDrawExclModeVideo*, ppDDrawObject : Void**, pbUsingExternal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_d_draw_object.call(this, ppDDrawObject, pbUsingExternal)
    end
    def set_d_draw_surface(this : IDDrawExclModeVideo*, pDDrawSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_d_draw_surface.call(this, pDDrawSurface)
    end
    def get_d_draw_surface(this : IDDrawExclModeVideo*, ppDDrawSurface : Void**, pbUsingExternal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_d_draw_surface.call(this, ppDDrawSurface, pbUsingExternal)
    end
    def set_draw_parameters(this : IDDrawExclModeVideo*, prcSource : Win32cr::Foundation::RECT*, prcTarget : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_draw_parameters.call(this, prcSource, prcTarget)
    end
    def get_native_video_props(this : IDDrawExclModeVideo*, pdwVideoWidth : UInt32*, pdwVideoHeight : UInt32*, pdwPictAspectRatioX : UInt32*, pdwPictAspectRatioY : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_props.call(this, pdwVideoWidth, pdwVideoHeight, pdwPictAspectRatioX, pdwPictAspectRatioY)
    end
    def set_callback_interface(this : IDDrawExclModeVideo*, pCallback : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_callback_interface.call(this, pCallback, dwFlags)
    end

  end

  @[Extern]
  record IDDrawExclModeVideoCallbackVtbl,
    query_interface : Proc(IDDrawExclModeVideoCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDDrawExclModeVideoCallback*, UInt32),
    release : Proc(IDDrawExclModeVideoCallback*, UInt32),
    on_update_overlay : Proc(IDDrawExclModeVideoCallback*, Win32cr::Foundation::BOOL, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::BOOL, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    on_update_color_key : Proc(IDDrawExclModeVideoCallback*, Win32cr::Media::DirectShow::COLORKEY*, UInt32, Win32cr::Foundation::HRESULT),
    on_update_size : Proc(IDDrawExclModeVideoCallback*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("913c24a0-20ab-11d2-9038-00a0c9697298")]
  record IDDrawExclModeVideoCallback, lpVtbl : IDDrawExclModeVideoCallbackVtbl* do
    GUID = LibC::GUID.new(0x913c24a0_u32, 0x20ab_u16, 0x11d2_u16, StaticArray[0x90_u8, 0x38_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x72_u8, 0x98_u8])
    def query_interface(this : IDDrawExclModeVideoCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDDrawExclModeVideoCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDDrawExclModeVideoCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_update_overlay(this : IDDrawExclModeVideoCallback*, bBefore : Win32cr::Foundation::BOOL, dwFlags : UInt32, bOldVisible : Win32cr::Foundation::BOOL, prcOldSrc : Win32cr::Foundation::RECT*, prcOldDest : Win32cr::Foundation::RECT*, bNewVisible : Win32cr::Foundation::BOOL, prcNewSrc : Win32cr::Foundation::RECT*, prcNewDest : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_update_overlay.call(this, bBefore, dwFlags, bOldVisible, prcOldSrc, prcOldDest, bNewVisible, prcNewSrc, prcNewDest)
    end
    def on_update_color_key(this : IDDrawExclModeVideoCallback*, pKey : Win32cr::Media::DirectShow::COLORKEY*, dwColor : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_update_color_key.call(this, pKey, dwColor)
    end
    def on_update_size(this : IDDrawExclModeVideoCallback*, dwWidth : UInt32, dwHeight : UInt32, dwARWidth : UInt32, dwARHeight : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_update_size.call(this, dwWidth, dwHeight, dwARWidth, dwARHeight)
    end

  end

  @[Extern]
  record IBDA_NetworkProviderVtbl,
    query_interface : Proc(IBDA_NetworkProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_NetworkProvider*, UInt32),
    release : Proc(IBDA_NetworkProvider*, UInt32),
    put_signal_source : Proc(IBDA_NetworkProvider*, UInt32, Win32cr::Foundation::HRESULT),
    get_signal_source : Proc(IBDA_NetworkProvider*, UInt32*, Win32cr::Foundation::HRESULT),
    get_network_type : Proc(IBDA_NetworkProvider*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put_tuning_space : Proc(IBDA_NetworkProvider*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_tuning_space : Proc(IBDA_NetworkProvider*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    register_device_filter : Proc(IBDA_NetworkProvider*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    un_register_device_filter : Proc(IBDA_NetworkProvider*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fd501041-8ebe-11ce-8183-00aa00577da2")]
  record IBDA_NetworkProvider, lpVtbl : IBDA_NetworkProviderVtbl* do
    GUID = LibC::GUID.new(0xfd501041_u32, 0x8ebe_u16, 0x11ce_u16, StaticArray[0x81_u8, 0x83_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x57_u8, 0x7d_u8, 0xa2_u8])
    def query_interface(this : IBDA_NetworkProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_NetworkProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_NetworkProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_signal_source(this : IBDA_NetworkProvider*, ulSignalSource : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_signal_source.call(this, ulSignalSource)
    end
    def get_signal_source(this : IBDA_NetworkProvider*, pulSignalSource : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signal_source.call(this, pulSignalSource)
    end
    def get_network_type(this : IBDA_NetworkProvider*, pguidNetworkType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network_type.call(this, pguidNetworkType)
    end
    def put_tuning_space(this : IBDA_NetworkProvider*, guidTuningSpace : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_tuning_space.call(this, guidTuningSpace)
    end
    def get_tuning_space(this : IBDA_NetworkProvider*, pguidTuingSpace : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tuning_space.call(this, pguidTuingSpace)
    end
    def register_device_filter(this : IBDA_NetworkProvider*, pUnkFilterControl : Void*, ppvRegisitrationContext : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_device_filter.call(this, pUnkFilterControl, ppvRegisitrationContext)
    end
    def un_register_device_filter(this : IBDA_NetworkProvider*, pvRegistrationContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_register_device_filter.call(this, pvRegistrationContext)
    end

  end

  @[Extern]
  record IBDA_EthernetFilterVtbl,
    query_interface : Proc(IBDA_EthernetFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_EthernetFilter*, UInt32),
    release : Proc(IBDA_EthernetFilter*, UInt32),
    get_multicast_list_size : Proc(IBDA_EthernetFilter*, UInt32*, Win32cr::Foundation::HRESULT),
    put_multicast_list : Proc(IBDA_EthernetFilter*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_multicast_list : Proc(IBDA_EthernetFilter*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    put_multicast_mode : Proc(IBDA_EthernetFilter*, UInt32, Win32cr::Foundation::HRESULT),
    get_multicast_mode : Proc(IBDA_EthernetFilter*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("71985f43-1ca1-11d3-9cc8-00c04f7971e0")]
  record IBDA_EthernetFilter, lpVtbl : IBDA_EthernetFilterVtbl* do
    GUID = LibC::GUID.new(0x71985f43_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
    def query_interface(this : IBDA_EthernetFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_EthernetFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_EthernetFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multicast_list_size(this : IBDA_EthernetFilter*, pulcbAddresses : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_list_size.call(this, pulcbAddresses)
    end
    def put_multicast_list(this : IBDA_EthernetFilter*, ulcbAddresses : UInt32, pAddressList : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_multicast_list.call(this, ulcbAddresses, pAddressList)
    end
    def get_multicast_list(this : IBDA_EthernetFilter*, pulcbAddresses : UInt32*, pAddressList : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_list.call(this, pulcbAddresses, pAddressList)
    end
    def put_multicast_mode(this : IBDA_EthernetFilter*, ulModeMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_multicast_mode.call(this, ulModeMask)
    end
    def get_multicast_mode(this : IBDA_EthernetFilter*, pulModeMask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_mode.call(this, pulModeMask)
    end

  end

  @[Extern]
  record IBDA_IPV4FilterVtbl,
    query_interface : Proc(IBDA_IPV4Filter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_IPV4Filter*, UInt32),
    release : Proc(IBDA_IPV4Filter*, UInt32),
    get_multicast_list_size : Proc(IBDA_IPV4Filter*, UInt32*, Win32cr::Foundation::HRESULT),
    put_multicast_list : Proc(IBDA_IPV4Filter*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_multicast_list : Proc(IBDA_IPV4Filter*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    put_multicast_mode : Proc(IBDA_IPV4Filter*, UInt32, Win32cr::Foundation::HRESULT),
    get_multicast_mode : Proc(IBDA_IPV4Filter*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("71985f44-1ca1-11d3-9cc8-00c04f7971e0")]
  record IBDA_IPV4Filter, lpVtbl : IBDA_IPV4FilterVtbl* do
    GUID = LibC::GUID.new(0x71985f44_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
    def query_interface(this : IBDA_IPV4Filter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_IPV4Filter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_IPV4Filter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multicast_list_size(this : IBDA_IPV4Filter*, pulcbAddresses : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_list_size.call(this, pulcbAddresses)
    end
    def put_multicast_list(this : IBDA_IPV4Filter*, ulcbAddresses : UInt32, pAddressList : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_multicast_list.call(this, ulcbAddresses, pAddressList)
    end
    def get_multicast_list(this : IBDA_IPV4Filter*, pulcbAddresses : UInt32*, pAddressList : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_list.call(this, pulcbAddresses, pAddressList)
    end
    def put_multicast_mode(this : IBDA_IPV4Filter*, ulModeMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_multicast_mode.call(this, ulModeMask)
    end
    def get_multicast_mode(this : IBDA_IPV4Filter*, pulModeMask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_mode.call(this, pulModeMask)
    end

  end

  @[Extern]
  record IBDA_IPV6FilterVtbl,
    query_interface : Proc(IBDA_IPV6Filter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_IPV6Filter*, UInt32),
    release : Proc(IBDA_IPV6Filter*, UInt32),
    get_multicast_list_size : Proc(IBDA_IPV6Filter*, UInt32*, Win32cr::Foundation::HRESULT),
    put_multicast_list : Proc(IBDA_IPV6Filter*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_multicast_list : Proc(IBDA_IPV6Filter*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    put_multicast_mode : Proc(IBDA_IPV6Filter*, UInt32, Win32cr::Foundation::HRESULT),
    get_multicast_mode : Proc(IBDA_IPV6Filter*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e1785a74-2a23-4fb3-9245-a8f88017ef33")]
  record IBDA_IPV6Filter, lpVtbl : IBDA_IPV6FilterVtbl* do
    GUID = LibC::GUID.new(0xe1785a74_u32, 0x2a23_u16, 0x4fb3_u16, StaticArray[0x92_u8, 0x45_u8, 0xa8_u8, 0xf8_u8, 0x80_u8, 0x17_u8, 0xef_u8, 0x33_u8])
    def query_interface(this : IBDA_IPV6Filter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_IPV6Filter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_IPV6Filter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multicast_list_size(this : IBDA_IPV6Filter*, pulcbAddresses : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_list_size.call(this, pulcbAddresses)
    end
    def put_multicast_list(this : IBDA_IPV6Filter*, ulcbAddresses : UInt32, pAddressList : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_multicast_list.call(this, ulcbAddresses, pAddressList)
    end
    def get_multicast_list(this : IBDA_IPV6Filter*, pulcbAddresses : UInt32*, pAddressList : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_list.call(this, pulcbAddresses, pAddressList)
    end
    def put_multicast_mode(this : IBDA_IPV6Filter*, ulModeMask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_multicast_mode.call(this, ulModeMask)
    end
    def get_multicast_mode(this : IBDA_IPV6Filter*, pulModeMask : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_mode.call(this, pulModeMask)
    end

  end

  @[Extern]
  record IBDA_DeviceControlVtbl,
    query_interface : Proc(IBDA_DeviceControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DeviceControl*, UInt32),
    release : Proc(IBDA_DeviceControl*, UInt32),
    start_changes : Proc(IBDA_DeviceControl*, Win32cr::Foundation::HRESULT),
    check_changes : Proc(IBDA_DeviceControl*, Win32cr::Foundation::HRESULT),
    commit_changes : Proc(IBDA_DeviceControl*, Win32cr::Foundation::HRESULT),
    get_change_state : Proc(IBDA_DeviceControl*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fd0a5af3-b41d-11d2-9c95-00c04f7971e0")]
  record IBDA_DeviceControl, lpVtbl : IBDA_DeviceControlVtbl* do
    GUID = LibC::GUID.new(0xfd0a5af3_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
    def query_interface(this : IBDA_DeviceControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DeviceControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DeviceControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_changes(this : IBDA_DeviceControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_changes.call(this)
    end
    def check_changes(this : IBDA_DeviceControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_changes.call(this)
    end
    def commit_changes(this : IBDA_DeviceControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit_changes.call(this)
    end
    def get_change_state(this : IBDA_DeviceControl*, pState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_change_state.call(this, pState)
    end

  end

  @[Extern]
  record IBDA_PinControlVtbl,
    query_interface : Proc(IBDA_PinControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_PinControl*, UInt32),
    release : Proc(IBDA_PinControl*, UInt32),
    get_pin_id : Proc(IBDA_PinControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_pin_type : Proc(IBDA_PinControl*, UInt32*, Win32cr::Foundation::HRESULT),
    registration_context : Proc(IBDA_PinControl*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0ded49d5-a8b7-4d5d-97a1-12b0c195874d")]
  record IBDA_PinControl, lpVtbl : IBDA_PinControlVtbl* do
    GUID = LibC::GUID.new(0xded49d5_u32, 0xa8b7_u16, 0x4d5d_u16, StaticArray[0x97_u8, 0xa1_u8, 0x12_u8, 0xb0_u8, 0xc1_u8, 0x95_u8, 0x87_u8, 0x4d_u8])
    def query_interface(this : IBDA_PinControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_PinControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_PinControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_pin_id(this : IBDA_PinControl*, pulPinID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pin_id.call(this, pulPinID)
    end
    def get_pin_type(this : IBDA_PinControl*, pulPinType : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pin_type.call(this, pulPinType)
    end
    def registration_context(this : IBDA_PinControl*, pulRegistrationCtx : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.registration_context.call(this, pulRegistrationCtx)
    end

  end

  @[Extern]
  record IBDA_SignalPropertiesVtbl,
    query_interface : Proc(IBDA_SignalProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_SignalProperties*, UInt32),
    release : Proc(IBDA_SignalProperties*, UInt32),
    put_network_type : Proc(IBDA_SignalProperties*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_network_type : Proc(IBDA_SignalProperties*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put_signal_source : Proc(IBDA_SignalProperties*, UInt32, Win32cr::Foundation::HRESULT),
    get_signal_source : Proc(IBDA_SignalProperties*, UInt32*, Win32cr::Foundation::HRESULT),
    put_tuning_space : Proc(IBDA_SignalProperties*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_tuning_space : Proc(IBDA_SignalProperties*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d2f1644b-b409-11d2-bc69-00a0c9ee9e16")]
  record IBDA_SignalProperties, lpVtbl : IBDA_SignalPropertiesVtbl* do
    GUID = LibC::GUID.new(0xd2f1644b_u32, 0xb409_u16, 0x11d2_u16, StaticArray[0xbc_u8, 0x69_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xee_u8, 0x9e_u8, 0x16_u8])
    def query_interface(this : IBDA_SignalProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_SignalProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_SignalProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_network_type(this : IBDA_SignalProperties*, guidNetworkType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_network_type.call(this, guidNetworkType)
    end
    def get_network_type(this : IBDA_SignalProperties*, pguidNetworkType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network_type.call(this, pguidNetworkType)
    end
    def put_signal_source(this : IBDA_SignalProperties*, ulSignalSource : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_signal_source.call(this, ulSignalSource)
    end
    def get_signal_source(this : IBDA_SignalProperties*, pulSignalSource : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signal_source.call(this, pulSignalSource)
    end
    def put_tuning_space(this : IBDA_SignalProperties*, guidTuningSpace : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_tuning_space.call(this, guidTuningSpace)
    end
    def get_tuning_space(this : IBDA_SignalProperties*, pguidTuingSpace : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tuning_space.call(this, pguidTuingSpace)
    end

  end

  @[Extern]
  record IBDA_SignalStatisticsVtbl,
    query_interface : Proc(IBDA_SignalStatistics*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_SignalStatistics*, UInt32),
    release : Proc(IBDA_SignalStatistics*, UInt32),
    put_SignalStrength : Proc(IBDA_SignalStatistics*, Int32, Win32cr::Foundation::HRESULT),
    get_SignalStrength : Proc(IBDA_SignalStatistics*, Int32*, Win32cr::Foundation::HRESULT),
    put_SignalQuality : Proc(IBDA_SignalStatistics*, Int32, Win32cr::Foundation::HRESULT),
    get_SignalQuality : Proc(IBDA_SignalStatistics*, Int32*, Win32cr::Foundation::HRESULT),
    put_SignalPresent : Proc(IBDA_SignalStatistics*, Win32cr::Foundation::BOOLEAN, Win32cr::Foundation::HRESULT),
    get_SignalPresent : Proc(IBDA_SignalStatistics*, UInt8*, Win32cr::Foundation::HRESULT),
    put_SignalLocked : Proc(IBDA_SignalStatistics*, Win32cr::Foundation::BOOLEAN, Win32cr::Foundation::HRESULT),
    get_SignalLocked : Proc(IBDA_SignalStatistics*, UInt8*, Win32cr::Foundation::HRESULT),
    put_SampleTime : Proc(IBDA_SignalStatistics*, Int32, Win32cr::Foundation::HRESULT),
    get_SampleTime : Proc(IBDA_SignalStatistics*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1347d106-cf3a-428a-a5cb-ac0d9a2a4338")]
  record IBDA_SignalStatistics, lpVtbl : IBDA_SignalStatisticsVtbl* do
    GUID = LibC::GUID.new(0x1347d106_u32, 0xcf3a_u16, 0x428a_u16, StaticArray[0xa5_u8, 0xcb_u8, 0xac_u8, 0xd_u8, 0x9a_u8, 0x2a_u8, 0x43_u8, 0x38_u8])
    def query_interface(this : IBDA_SignalStatistics*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_SignalStatistics*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_SignalStatistics*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_SignalStrength(this : IBDA_SignalStatistics*, lDbStrength : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalStrength.call(this, lDbStrength)
    end
    def get_SignalStrength(this : IBDA_SignalStatistics*, plDbStrength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalStrength.call(this, plDbStrength)
    end
    def put_SignalQuality(this : IBDA_SignalStatistics*, lPercentQuality : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalQuality.call(this, lPercentQuality)
    end
    def get_SignalQuality(this : IBDA_SignalStatistics*, plPercentQuality : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalQuality.call(this, plPercentQuality)
    end
    def put_SignalPresent(this : IBDA_SignalStatistics*, fPresent : Win32cr::Foundation::BOOLEAN) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalPresent.call(this, fPresent)
    end
    def get_SignalPresent(this : IBDA_SignalStatistics*, pfPresent : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalPresent.call(this, pfPresent)
    end
    def put_SignalLocked(this : IBDA_SignalStatistics*, fLocked : Win32cr::Foundation::BOOLEAN) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalLocked.call(this, fLocked)
    end
    def get_SignalLocked(this : IBDA_SignalStatistics*, pfLocked : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalLocked.call(this, pfLocked)
    end
    def put_SampleTime(this : IBDA_SignalStatistics*, lmsSampleTime : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SampleTime.call(this, lmsSampleTime)
    end
    def get_SampleTime(this : IBDA_SignalStatistics*, plmsSampleTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SampleTime.call(this, plmsSampleTime)
    end

  end

  @[Extern]
  record IBDA_TopologyVtbl,
    query_interface : Proc(IBDA_Topology*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_Topology*, UInt32),
    release : Proc(IBDA_Topology*, UInt32),
    get_node_types : Proc(IBDA_Topology*, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_node_descriptors : Proc(IBDA_Topology*, UInt32*, UInt32, Win32cr::Media::DirectShow::BDANODE_DESCRIPTOR*, Win32cr::Foundation::HRESULT),
    get_node_interfaces : Proc(IBDA_Topology*, UInt32, UInt32*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_pin_types : Proc(IBDA_Topology*, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_template_connections : Proc(IBDA_Topology*, UInt32*, UInt32, Win32cr::Media::DirectShow::BDA_TEMPLATE_CONNECTION*, Win32cr::Foundation::HRESULT),
    create_pin : Proc(IBDA_Topology*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    delete_pin : Proc(IBDA_Topology*, UInt32, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(IBDA_Topology*, UInt32, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    set_medium : Proc(IBDA_Topology*, UInt32, Win32cr::Media::DirectShow::REGPINMEDIUM*, Win32cr::Foundation::HRESULT),
    create_topology : Proc(IBDA_Topology*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_control_node : Proc(IBDA_Topology*, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("79b56888-7fea-4690-b45d-38fd3c7849be")]
  record IBDA_Topology, lpVtbl : IBDA_TopologyVtbl* do
    GUID = LibC::GUID.new(0x79b56888_u32, 0x7fea_u16, 0x4690_u16, StaticArray[0xb4_u8, 0x5d_u8, 0x38_u8, 0xfd_u8, 0x3c_u8, 0x78_u8, 0x49_u8, 0xbe_u8])
    def query_interface(this : IBDA_Topology*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_Topology*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_Topology*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_node_types(this : IBDA_Topology*, pulcNodeTypes : UInt32*, ulcNodeTypesMax : UInt32, rgulNodeTypes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_node_types.call(this, pulcNodeTypes, ulcNodeTypesMax, rgulNodeTypes)
    end
    def get_node_descriptors(this : IBDA_Topology*, ulcNodeDescriptors : UInt32*, ulcNodeDescriptorsMax : UInt32, rgNodeDescriptors : Win32cr::Media::DirectShow::BDANODE_DESCRIPTOR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_node_descriptors.call(this, ulcNodeDescriptors, ulcNodeDescriptorsMax, rgNodeDescriptors)
    end
    def get_node_interfaces(this : IBDA_Topology*, ulNodeType : UInt32, pulcInterfaces : UInt32*, ulcInterfacesMax : UInt32, rgguidInterfaces : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_node_interfaces.call(this, ulNodeType, pulcInterfaces, ulcInterfacesMax, rgguidInterfaces)
    end
    def get_pin_types(this : IBDA_Topology*, pulcPinTypes : UInt32*, ulcPinTypesMax : UInt32, rgulPinTypes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pin_types.call(this, pulcPinTypes, ulcPinTypesMax, rgulPinTypes)
    end
    def get_template_connections(this : IBDA_Topology*, pulcConnections : UInt32*, ulcConnectionsMax : UInt32, rgConnections : Win32cr::Media::DirectShow::BDA_TEMPLATE_CONNECTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_template_connections.call(this, pulcConnections, ulcConnectionsMax, rgConnections)
    end
    def create_pin(this : IBDA_Topology*, ulPinType : UInt32, pulPinId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pin.call(this, ulPinType, pulPinId)
    end
    def delete_pin(this : IBDA_Topology*, ulPinId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_pin.call(this, ulPinId)
    end
    def set_media_type(this : IBDA_Topology*, ulPinId : UInt32, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, ulPinId, pMediaType)
    end
    def set_medium(this : IBDA_Topology*, ulPinId : UInt32, pMedium : Win32cr::Media::DirectShow::REGPINMEDIUM*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_medium.call(this, ulPinId, pMedium)
    end
    def create_topology(this : IBDA_Topology*, ulInputPinId : UInt32, ulOutputPinId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_topology.call(this, ulInputPinId, ulOutputPinId)
    end
    def get_control_node(this : IBDA_Topology*, ulInputPinId : UInt32, ulOutputPinId : UInt32, ulNodeType : UInt32, ppControlNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_control_node.call(this, ulInputPinId, ulOutputPinId, ulNodeType, ppControlNode)
    end

  end

  @[Extern]
  record IBDA_VoidTransformVtbl,
    query_interface : Proc(IBDA_VoidTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_VoidTransform*, UInt32),
    release : Proc(IBDA_VoidTransform*, UInt32),
    start : Proc(IBDA_VoidTransform*, Win32cr::Foundation::HRESULT),
    stop : Proc(IBDA_VoidTransform*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("71985f46-1ca1-11d3-9cc8-00c04f7971e0")]
  record IBDA_VoidTransform, lpVtbl : IBDA_VoidTransformVtbl* do
    GUID = LibC::GUID.new(0x71985f46_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
    def query_interface(this : IBDA_VoidTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_VoidTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_VoidTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start(this : IBDA_VoidTransform*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IBDA_VoidTransform*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end

  end

  @[Extern]
  record IBDA_NullTransformVtbl,
    query_interface : Proc(IBDA_NullTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_NullTransform*, UInt32),
    release : Proc(IBDA_NullTransform*, UInt32),
    start : Proc(IBDA_NullTransform*, Win32cr::Foundation::HRESULT),
    stop : Proc(IBDA_NullTransform*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ddf15b0d-bd25-11d2-9ca0-00c04f7971e0")]
  record IBDA_NullTransform, lpVtbl : IBDA_NullTransformVtbl* do
    GUID = LibC::GUID.new(0xddf15b0d_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
    def query_interface(this : IBDA_NullTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_NullTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_NullTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start(this : IBDA_NullTransform*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IBDA_NullTransform*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end

  end

  @[Extern]
  record IBDA_FrequencyFilterVtbl,
    query_interface : Proc(IBDA_FrequencyFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_FrequencyFilter*, UInt32),
    release : Proc(IBDA_FrequencyFilter*, UInt32),
    put_Autotune : Proc(IBDA_FrequencyFilter*, UInt32, Win32cr::Foundation::HRESULT),
    get_Autotune : Proc(IBDA_FrequencyFilter*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Frequency : Proc(IBDA_FrequencyFilter*, UInt32, Win32cr::Foundation::HRESULT),
    get_Frequency : Proc(IBDA_FrequencyFilter*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Polarity : Proc(IBDA_FrequencyFilter*, Win32cr::Media::DirectShow::Polarisation, Win32cr::Foundation::HRESULT),
    get_Polarity : Proc(IBDA_FrequencyFilter*, Win32cr::Media::DirectShow::Polarisation*, Win32cr::Foundation::HRESULT),
    put_Range : Proc(IBDA_FrequencyFilter*, UInt32, Win32cr::Foundation::HRESULT),
    get_Range : Proc(IBDA_FrequencyFilter*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Bandwidth : Proc(IBDA_FrequencyFilter*, UInt32, Win32cr::Foundation::HRESULT),
    get_Bandwidth : Proc(IBDA_FrequencyFilter*, UInt32*, Win32cr::Foundation::HRESULT),
    put_FrequencyMultiplier : Proc(IBDA_FrequencyFilter*, UInt32, Win32cr::Foundation::HRESULT),
    get_FrequencyMultiplier : Proc(IBDA_FrequencyFilter*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("71985f47-1ca1-11d3-9cc8-00c04f7971e0")]
  record IBDA_FrequencyFilter, lpVtbl : IBDA_FrequencyFilterVtbl* do
    GUID = LibC::GUID.new(0x71985f47_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
    def query_interface(this : IBDA_FrequencyFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_FrequencyFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_FrequencyFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_Autotune(this : IBDA_FrequencyFilter*, ulTransponder : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Autotune.call(this, ulTransponder)
    end
    def get_Autotune(this : IBDA_FrequencyFilter*, pulTransponder : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Autotune.call(this, pulTransponder)
    end
    def put_Frequency(this : IBDA_FrequencyFilter*, ulFrequency : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Frequency.call(this, ulFrequency)
    end
    def get_Frequency(this : IBDA_FrequencyFilter*, pulFrequency : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Frequency.call(this, pulFrequency)
    end
    def put_Polarity(this : IBDA_FrequencyFilter*, polarity : Win32cr::Media::DirectShow::Polarisation) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Polarity.call(this, polarity)
    end
    def get_Polarity(this : IBDA_FrequencyFilter*, pPolarity : Win32cr::Media::DirectShow::Polarisation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Polarity.call(this, pPolarity)
    end
    def put_Range(this : IBDA_FrequencyFilter*, ulRange : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Range.call(this, ulRange)
    end
    def get_Range(this : IBDA_FrequencyFilter*, pulRange : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Range.call(this, pulRange)
    end
    def put_Bandwidth(this : IBDA_FrequencyFilter*, ulBandwidth : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Bandwidth.call(this, ulBandwidth)
    end
    def get_Bandwidth(this : IBDA_FrequencyFilter*, pulBandwidth : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Bandwidth.call(this, pulBandwidth)
    end
    def put_FrequencyMultiplier(this : IBDA_FrequencyFilter*, ulMultiplier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMultiplier.call(this, ulMultiplier)
    end
    def get_FrequencyMultiplier(this : IBDA_FrequencyFilter*, pulMultiplier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMultiplier.call(this, pulMultiplier)
    end

  end

  @[Extern]
  record IBDA_LNBInfoVtbl,
    query_interface : Proc(IBDA_LNBInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_LNBInfo*, UInt32),
    release : Proc(IBDA_LNBInfo*, UInt32),
    put_LocalOscilatorFrequencyLowBand : Proc(IBDA_LNBInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_LocalOscilatorFrequencyLowBand : Proc(IBDA_LNBInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    put_LocalOscilatorFrequencyHighBand : Proc(IBDA_LNBInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_LocalOscilatorFrequencyHighBand : Proc(IBDA_LNBInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    put_HighLowSwitchFrequency : Proc(IBDA_LNBInfo*, UInt32, Win32cr::Foundation::HRESULT),
    get_HighLowSwitchFrequency : Proc(IBDA_LNBInfo*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("992cf102-49f9-4719-a664-c4f23e2408f4")]
  record IBDA_LNBInfo, lpVtbl : IBDA_LNBInfoVtbl* do
    GUID = LibC::GUID.new(0x992cf102_u32, 0x49f9_u16, 0x4719_u16, StaticArray[0xa6_u8, 0x64_u8, 0xc4_u8, 0xf2_u8, 0x3e_u8, 0x24_u8, 0x8_u8, 0xf4_u8])
    def query_interface(this : IBDA_LNBInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_LNBInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_LNBInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_LocalOscilatorFrequencyLowBand(this : IBDA_LNBInfo*, ulLOFLow : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalOscilatorFrequencyLowBand.call(this, ulLOFLow)
    end
    def get_LocalOscilatorFrequencyLowBand(this : IBDA_LNBInfo*, pulLOFLow : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalOscilatorFrequencyLowBand.call(this, pulLOFLow)
    end
    def put_LocalOscilatorFrequencyHighBand(this : IBDA_LNBInfo*, ulLOFHigh : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalOscilatorFrequencyHighBand.call(this, ulLOFHigh)
    end
    def get_LocalOscilatorFrequencyHighBand(this : IBDA_LNBInfo*, pulLOFHigh : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalOscilatorFrequencyHighBand.call(this, pulLOFHigh)
    end
    def put_HighLowSwitchFrequency(this : IBDA_LNBInfo*, ulSwitchFrequency : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HighLowSwitchFrequency.call(this, ulSwitchFrequency)
    end
    def get_HighLowSwitchFrequency(this : IBDA_LNBInfo*, pulSwitchFrequency : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HighLowSwitchFrequency.call(this, pulSwitchFrequency)
    end

  end

  @[Extern]
  record IBDA_DiseqCommandVtbl,
    query_interface : Proc(IBDA_DiseqCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DiseqCommand*, UInt32),
    release : Proc(IBDA_DiseqCommand*, UInt32),
    put_EnableDiseqCommands : Proc(IBDA_DiseqCommand*, Win32cr::Foundation::BOOLEAN, Win32cr::Foundation::HRESULT),
    put_DiseqLNBSource : Proc(IBDA_DiseqCommand*, UInt32, Win32cr::Foundation::HRESULT),
    put_DiseqUseToneBurst : Proc(IBDA_DiseqCommand*, Win32cr::Foundation::BOOLEAN, Win32cr::Foundation::HRESULT),
    put_DiseqRepeats : Proc(IBDA_DiseqCommand*, UInt32, Win32cr::Foundation::HRESULT),
    put_DiseqSendCommand : Proc(IBDA_DiseqCommand*, UInt32, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_DiseqResponse : Proc(IBDA_DiseqCommand*, UInt32, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f84e2ab0-3c6b-45e3-a0fc-8669d4b81f11")]
  record IBDA_DiseqCommand, lpVtbl : IBDA_DiseqCommandVtbl* do
    GUID = LibC::GUID.new(0xf84e2ab0_u32, 0x3c6b_u16, 0x45e3_u16, StaticArray[0xa0_u8, 0xfc_u8, 0x86_u8, 0x69_u8, 0xd4_u8, 0xb8_u8, 0x1f_u8, 0x11_u8])
    def query_interface(this : IBDA_DiseqCommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DiseqCommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DiseqCommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_EnableDiseqCommands(this : IBDA_DiseqCommand*, bEnable : Win32cr::Foundation::BOOLEAN) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableDiseqCommands.call(this, bEnable)
    end
    def put_DiseqLNBSource(this : IBDA_DiseqCommand*, ulLNBSource : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiseqLNBSource.call(this, ulLNBSource)
    end
    def put_DiseqUseToneBurst(this : IBDA_DiseqCommand*, bUseToneBurst : Win32cr::Foundation::BOOLEAN) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiseqUseToneBurst.call(this, bUseToneBurst)
    end
    def put_DiseqRepeats(this : IBDA_DiseqCommand*, ulRepeats : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiseqRepeats.call(this, ulRepeats)
    end
    def put_DiseqSendCommand(this : IBDA_DiseqCommand*, ulRequestId : UInt32, ulcbCommandLen : UInt32, pbCommand : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiseqSendCommand.call(this, ulRequestId, ulcbCommandLen, pbCommand)
    end
    def get_DiseqResponse(this : IBDA_DiseqCommand*, ulRequestId : UInt32, pulcbResponseLen : UInt32*, pbResponse : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DiseqResponse.call(this, ulRequestId, pulcbResponseLen, pbResponse)
    end

  end

  @[Extern]
  record IBDA_AutoDemodulateVtbl,
    query_interface : Proc(IBDA_AutoDemodulate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_AutoDemodulate*, UInt32),
    release : Proc(IBDA_AutoDemodulate*, UInt32),
    put_AutoDemodulate : Proc(IBDA_AutoDemodulate*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ddf15b12-bd25-11d2-9ca0-00c04f7971e0")]
  record IBDA_AutoDemodulate, lpVtbl : IBDA_AutoDemodulateVtbl* do
    GUID = LibC::GUID.new(0xddf15b12_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
    def query_interface(this : IBDA_AutoDemodulate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_AutoDemodulate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_AutoDemodulate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_AutoDemodulate(this : IBDA_AutoDemodulate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoDemodulate.call(this)
    end

  end

  @[Extern]
  record IBDA_AutoDemodulateExVtbl,
    query_interface : Proc(IBDA_AutoDemodulateEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_AutoDemodulateEx*, UInt32),
    release : Proc(IBDA_AutoDemodulateEx*, UInt32),
    put_AutoDemodulate : Proc(IBDA_AutoDemodulateEx*, Win32cr::Foundation::HRESULT),
    get_SupportedDeviceNodeTypes : Proc(IBDA_AutoDemodulateEx*, UInt32, UInt32*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_SupportedVideoFormats : Proc(IBDA_AutoDemodulateEx*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AuxInputCount : Proc(IBDA_AutoDemodulateEx*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34518d13-1182-48e6-b28f-b24987787326")]
  record IBDA_AutoDemodulateEx, lpVtbl : IBDA_AutoDemodulateExVtbl* do
    GUID = LibC::GUID.new(0x34518d13_u32, 0x1182_u16, 0x48e6_u16, StaticArray[0xb2_u8, 0x8f_u8, 0xb2_u8, 0x49_u8, 0x87_u8, 0x78_u8, 0x73_u8, 0x26_u8])
    def query_interface(this : IBDA_AutoDemodulateEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_AutoDemodulateEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_AutoDemodulateEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_AutoDemodulate(this : IBDA_AutoDemodulateEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoDemodulate.call(this)
    end
    def get_SupportedDeviceNodeTypes(this : IBDA_AutoDemodulateEx*, ulcDeviceNodeTypesMax : UInt32, pulcDeviceNodeTypes : UInt32*, pguidDeviceNodeTypes : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedDeviceNodeTypes.call(this, ulcDeviceNodeTypesMax, pulcDeviceNodeTypes, pguidDeviceNodeTypes)
    end
    def get_SupportedVideoFormats(this : IBDA_AutoDemodulateEx*, pulAMTunerModeType : UInt32*, pulAnalogVideoStandard : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedVideoFormats.call(this, pulAMTunerModeType, pulAnalogVideoStandard)
    end
    def get_AuxInputCount(this : IBDA_AutoDemodulateEx*, pulCompositeCount : UInt32*, pulSvideoCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AuxInputCount.call(this, pulCompositeCount, pulSvideoCount)
    end

  end

  @[Extern]
  record IBDA_DigitalDemodulatorVtbl,
    query_interface : Proc(IBDA_DigitalDemodulator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DigitalDemodulator*, UInt32),
    release : Proc(IBDA_DigitalDemodulator*, UInt32),
    put_ModulationType : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    get_ModulationType : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_InnerFECMethod : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    get_InnerFECMethod : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECMethod : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    get_OuterFECMethod : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IBDA_DigitalDemodulator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IBDA_DigitalDemodulator*, UInt32*, Win32cr::Foundation::HRESULT),
    put_SpectralInversion : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT),
    get_SpectralInversion : Proc(IBDA_DigitalDemodulator*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ef30f379-985b-4d10-b640-a79d5e04e1e0")]
  record IBDA_DigitalDemodulator, lpVtbl : IBDA_DigitalDemodulatorVtbl* do
    GUID = LibC::GUID.new(0xef30f379_u32, 0x985b_u16, 0x4d10_u16, StaticArray[0xb6_u8, 0x40_u8, 0xa7_u8, 0x9d_u8, 0x5e_u8, 0x4_u8, 0xe1_u8, 0xe0_u8])
    def query_interface(this : IBDA_DigitalDemodulator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DigitalDemodulator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DigitalDemodulator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_ModulationType(this : IBDA_DigitalDemodulator*, pModulationType : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ModulationType.call(this, pModulationType)
    end
    def get_ModulationType(this : IBDA_DigitalDemodulator*, pModulationType : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModulationType.call(this, pModulationType)
    end
    def put_InnerFECMethod(this : IBDA_DigitalDemodulator*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECMethod.call(this, pFECMethod)
    end
    def get_InnerFECMethod(this : IBDA_DigitalDemodulator*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECMethod.call(this, pFECMethod)
    end
    def put_InnerFECRate(this : IBDA_DigitalDemodulator*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, pFECRate)
    end
    def get_InnerFECRate(this : IBDA_DigitalDemodulator*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, pFECRate)
    end
    def put_OuterFECMethod(this : IBDA_DigitalDemodulator*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECMethod.call(this, pFECMethod)
    end
    def get_OuterFECMethod(this : IBDA_DigitalDemodulator*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECMethod.call(this, pFECMethod)
    end
    def put_OuterFECRate(this : IBDA_DigitalDemodulator*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, pFECRate)
    end
    def get_OuterFECRate(this : IBDA_DigitalDemodulator*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, pFECRate)
    end
    def put_SymbolRate(this : IBDA_DigitalDemodulator*, pSymbolRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, pSymbolRate)
    end
    def get_SymbolRate(this : IBDA_DigitalDemodulator*, pSymbolRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, pSymbolRate)
    end
    def put_SpectralInversion(this : IBDA_DigitalDemodulator*, pSpectralInversion : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SpectralInversion.call(this, pSpectralInversion)
    end
    def get_SpectralInversion(this : IBDA_DigitalDemodulator*, pSpectralInversion : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SpectralInversion.call(this, pSpectralInversion)
    end

  end

  @[Extern]
  record IBDA_DigitalDemodulator2Vtbl,
    query_interface : Proc(IBDA_DigitalDemodulator2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DigitalDemodulator2*, UInt32),
    release : Proc(IBDA_DigitalDemodulator2*, UInt32),
    put_ModulationType : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    get_ModulationType : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_InnerFECMethod : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    get_InnerFECMethod : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECMethod : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    get_OuterFECMethod : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IBDA_DigitalDemodulator2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IBDA_DigitalDemodulator2*, UInt32*, Win32cr::Foundation::HRESULT),
    put_SpectralInversion : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT),
    get_SpectralInversion : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT),
    put_GuardInterval : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::GuardInterval*, Win32cr::Foundation::HRESULT),
    get_GuardInterval : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::GuardInterval*, Win32cr::Foundation::HRESULT),
    put_TransmissionMode : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::TransmissionMode*, Win32cr::Foundation::HRESULT),
    get_TransmissionMode : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::TransmissionMode*, Win32cr::Foundation::HRESULT),
    put_RollOff : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::RollOff*, Win32cr::Foundation::HRESULT),
    get_RollOff : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::RollOff*, Win32cr::Foundation::HRESULT),
    put_Pilot : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::Pilot*, Win32cr::Foundation::HRESULT),
    get_Pilot : Proc(IBDA_DigitalDemodulator2*, Win32cr::Media::DirectShow::Pilot*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("525ed3ee-5cf3-4e1e-9a06-5368a84f9a6e")]
  record IBDA_DigitalDemodulator2, lpVtbl : IBDA_DigitalDemodulator2Vtbl* do
    GUID = LibC::GUID.new(0x525ed3ee_u32, 0x5cf3_u16, 0x4e1e_u16, StaticArray[0x9a_u8, 0x6_u8, 0x53_u8, 0x68_u8, 0xa8_u8, 0x4f_u8, 0x9a_u8, 0x6e_u8])
    def query_interface(this : IBDA_DigitalDemodulator2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DigitalDemodulator2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DigitalDemodulator2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_ModulationType(this : IBDA_DigitalDemodulator2*, pModulationType : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ModulationType.call(this, pModulationType)
    end
    def get_ModulationType(this : IBDA_DigitalDemodulator2*, pModulationType : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModulationType.call(this, pModulationType)
    end
    def put_InnerFECMethod(this : IBDA_DigitalDemodulator2*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECMethod.call(this, pFECMethod)
    end
    def get_InnerFECMethod(this : IBDA_DigitalDemodulator2*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECMethod.call(this, pFECMethod)
    end
    def put_InnerFECRate(this : IBDA_DigitalDemodulator2*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, pFECRate)
    end
    def get_InnerFECRate(this : IBDA_DigitalDemodulator2*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, pFECRate)
    end
    def put_OuterFECMethod(this : IBDA_DigitalDemodulator2*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECMethod.call(this, pFECMethod)
    end
    def get_OuterFECMethod(this : IBDA_DigitalDemodulator2*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECMethod.call(this, pFECMethod)
    end
    def put_OuterFECRate(this : IBDA_DigitalDemodulator2*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, pFECRate)
    end
    def get_OuterFECRate(this : IBDA_DigitalDemodulator2*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, pFECRate)
    end
    def put_SymbolRate(this : IBDA_DigitalDemodulator2*, pSymbolRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, pSymbolRate)
    end
    def get_SymbolRate(this : IBDA_DigitalDemodulator2*, pSymbolRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, pSymbolRate)
    end
    def put_SpectralInversion(this : IBDA_DigitalDemodulator2*, pSpectralInversion : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SpectralInversion.call(this, pSpectralInversion)
    end
    def get_SpectralInversion(this : IBDA_DigitalDemodulator2*, pSpectralInversion : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SpectralInversion.call(this, pSpectralInversion)
    end
    def put_GuardInterval(this : IBDA_DigitalDemodulator2*, pGuardInterval : Win32cr::Media::DirectShow::GuardInterval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GuardInterval.call(this, pGuardInterval)
    end
    def get_GuardInterval(this : IBDA_DigitalDemodulator2*, pGuardInterval : Win32cr::Media::DirectShow::GuardInterval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GuardInterval.call(this, pGuardInterval)
    end
    def put_TransmissionMode(this : IBDA_DigitalDemodulator2*, pTransmissionMode : Win32cr::Media::DirectShow::TransmissionMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TransmissionMode.call(this, pTransmissionMode)
    end
    def get_TransmissionMode(this : IBDA_DigitalDemodulator2*, pTransmissionMode : Win32cr::Media::DirectShow::TransmissionMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TransmissionMode.call(this, pTransmissionMode)
    end
    def put_RollOff(this : IBDA_DigitalDemodulator2*, pRollOff : Win32cr::Media::DirectShow::RollOff*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RollOff.call(this, pRollOff)
    end
    def get_RollOff(this : IBDA_DigitalDemodulator2*, pRollOff : Win32cr::Media::DirectShow::RollOff*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RollOff.call(this, pRollOff)
    end
    def put_Pilot(this : IBDA_DigitalDemodulator2*, pPilot : Win32cr::Media::DirectShow::Pilot*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Pilot.call(this, pPilot)
    end
    def get_Pilot(this : IBDA_DigitalDemodulator2*, pPilot : Win32cr::Media::DirectShow::Pilot*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Pilot.call(this, pPilot)
    end

  end

  @[Extern]
  record IBDA_DigitalDemodulator3Vtbl,
    query_interface : Proc(IBDA_DigitalDemodulator3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DigitalDemodulator3*, UInt32),
    release : Proc(IBDA_DigitalDemodulator3*, UInt32),
    put_ModulationType : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    get_ModulationType : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_InnerFECMethod : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    get_InnerFECMethod : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECMethod : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    get_OuterFECMethod : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IBDA_DigitalDemodulator3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IBDA_DigitalDemodulator3*, UInt32*, Win32cr::Foundation::HRESULT),
    put_SpectralInversion : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT),
    get_SpectralInversion : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT),
    put_GuardInterval : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::GuardInterval*, Win32cr::Foundation::HRESULT),
    get_GuardInterval : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::GuardInterval*, Win32cr::Foundation::HRESULT),
    put_TransmissionMode : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::TransmissionMode*, Win32cr::Foundation::HRESULT),
    get_TransmissionMode : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::TransmissionMode*, Win32cr::Foundation::HRESULT),
    put_RollOff : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::RollOff*, Win32cr::Foundation::HRESULT),
    get_RollOff : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::RollOff*, Win32cr::Foundation::HRESULT),
    put_Pilot : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::Pilot*, Win32cr::Foundation::HRESULT),
    get_Pilot : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::Pilot*, Win32cr::Foundation::HRESULT),
    put_SignalTimeouts : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::BDA_SIGNAL_TIMEOUTS*, Win32cr::Foundation::HRESULT),
    get_SignalTimeouts : Proc(IBDA_DigitalDemodulator3*, Win32cr::Media::DirectShow::BDA_SIGNAL_TIMEOUTS*, Win32cr::Foundation::HRESULT),
    put_PLPNumber : Proc(IBDA_DigitalDemodulator3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_PLPNumber : Proc(IBDA_DigitalDemodulator3*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("13f19604-7d32-4359-93a2-a05205d90ac9")]
  record IBDA_DigitalDemodulator3, lpVtbl : IBDA_DigitalDemodulator3Vtbl* do
    GUID = LibC::GUID.new(0x13f19604_u32, 0x7d32_u16, 0x4359_u16, StaticArray[0x93_u8, 0xa2_u8, 0xa0_u8, 0x52_u8, 0x5_u8, 0xd9_u8, 0xa_u8, 0xc9_u8])
    def query_interface(this : IBDA_DigitalDemodulator3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DigitalDemodulator3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DigitalDemodulator3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_ModulationType(this : IBDA_DigitalDemodulator3*, pModulationType : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ModulationType.call(this, pModulationType)
    end
    def get_ModulationType(this : IBDA_DigitalDemodulator3*, pModulationType : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModulationType.call(this, pModulationType)
    end
    def put_InnerFECMethod(this : IBDA_DigitalDemodulator3*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECMethod.call(this, pFECMethod)
    end
    def get_InnerFECMethod(this : IBDA_DigitalDemodulator3*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECMethod.call(this, pFECMethod)
    end
    def put_InnerFECRate(this : IBDA_DigitalDemodulator3*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, pFECRate)
    end
    def get_InnerFECRate(this : IBDA_DigitalDemodulator3*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, pFECRate)
    end
    def put_OuterFECMethod(this : IBDA_DigitalDemodulator3*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECMethod.call(this, pFECMethod)
    end
    def get_OuterFECMethod(this : IBDA_DigitalDemodulator3*, pFECMethod : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECMethod.call(this, pFECMethod)
    end
    def put_OuterFECRate(this : IBDA_DigitalDemodulator3*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, pFECRate)
    end
    def get_OuterFECRate(this : IBDA_DigitalDemodulator3*, pFECRate : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, pFECRate)
    end
    def put_SymbolRate(this : IBDA_DigitalDemodulator3*, pSymbolRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, pSymbolRate)
    end
    def get_SymbolRate(this : IBDA_DigitalDemodulator3*, pSymbolRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, pSymbolRate)
    end
    def put_SpectralInversion(this : IBDA_DigitalDemodulator3*, pSpectralInversion : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SpectralInversion.call(this, pSpectralInversion)
    end
    def get_SpectralInversion(this : IBDA_DigitalDemodulator3*, pSpectralInversion : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SpectralInversion.call(this, pSpectralInversion)
    end
    def put_GuardInterval(this : IBDA_DigitalDemodulator3*, pGuardInterval : Win32cr::Media::DirectShow::GuardInterval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GuardInterval.call(this, pGuardInterval)
    end
    def get_GuardInterval(this : IBDA_DigitalDemodulator3*, pGuardInterval : Win32cr::Media::DirectShow::GuardInterval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GuardInterval.call(this, pGuardInterval)
    end
    def put_TransmissionMode(this : IBDA_DigitalDemodulator3*, pTransmissionMode : Win32cr::Media::DirectShow::TransmissionMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TransmissionMode.call(this, pTransmissionMode)
    end
    def get_TransmissionMode(this : IBDA_DigitalDemodulator3*, pTransmissionMode : Win32cr::Media::DirectShow::TransmissionMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TransmissionMode.call(this, pTransmissionMode)
    end
    def put_RollOff(this : IBDA_DigitalDemodulator3*, pRollOff : Win32cr::Media::DirectShow::RollOff*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RollOff.call(this, pRollOff)
    end
    def get_RollOff(this : IBDA_DigitalDemodulator3*, pRollOff : Win32cr::Media::DirectShow::RollOff*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RollOff.call(this, pRollOff)
    end
    def put_Pilot(this : IBDA_DigitalDemodulator3*, pPilot : Win32cr::Media::DirectShow::Pilot*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Pilot.call(this, pPilot)
    end
    def get_Pilot(this : IBDA_DigitalDemodulator3*, pPilot : Win32cr::Media::DirectShow::Pilot*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Pilot.call(this, pPilot)
    end
    def put_SignalTimeouts(this : IBDA_DigitalDemodulator3*, pSignalTimeouts : Win32cr::Media::DirectShow::BDA_SIGNAL_TIMEOUTS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalTimeouts.call(this, pSignalTimeouts)
    end
    def get_SignalTimeouts(this : IBDA_DigitalDemodulator3*, pSignalTimeouts : Win32cr::Media::DirectShow::BDA_SIGNAL_TIMEOUTS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalTimeouts.call(this, pSignalTimeouts)
    end
    def put_PLPNumber(this : IBDA_DigitalDemodulator3*, pPLPNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PLPNumber.call(this, pPLPNumber)
    end
    def get_PLPNumber(this : IBDA_DigitalDemodulator3*, pPLPNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PLPNumber.call(this, pPLPNumber)
    end

  end

  @[Extern]
  record ICCSubStreamFilteringVtbl,
    query_interface : Proc(ICCSubStreamFiltering*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICCSubStreamFiltering*, UInt32),
    release : Proc(ICCSubStreamFiltering*, UInt32),
    get_SubstreamTypes : Proc(ICCSubStreamFiltering*, Int32*, Win32cr::Foundation::HRESULT),
    put_SubstreamTypes : Proc(ICCSubStreamFiltering*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4b2bd7ea-8347-467b-8dbf-62f784929cc3")]
  record ICCSubStreamFiltering, lpVtbl : ICCSubStreamFilteringVtbl* do
    GUID = LibC::GUID.new(0x4b2bd7ea_u32, 0x8347_u16, 0x467b_u16, StaticArray[0x8d_u8, 0xbf_u8, 0x62_u8, 0xf7_u8, 0x84_u8, 0x92_u8, 0x9c_u8, 0xc3_u8])
    def query_interface(this : ICCSubStreamFiltering*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICCSubStreamFiltering*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICCSubStreamFiltering*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_SubstreamTypes(this : ICCSubStreamFiltering*, pTypes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubstreamTypes.call(this, pTypes)
    end
    def put_SubstreamTypes(this : ICCSubStreamFiltering*, types : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SubstreamTypes.call(this, types)
    end

  end

  @[Extern]
  record IBDA_IPSinkControlVtbl,
    query_interface : Proc(IBDA_IPSinkControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_IPSinkControl*, UInt32),
    release : Proc(IBDA_IPSinkControl*, UInt32),
    get_multicast_list : Proc(IBDA_IPSinkControl*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    get_adapter_ip_address : Proc(IBDA_IPSinkControl*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3f4dc8e2-4050-11d3-8f4b-00c04f7971e2")]
  record IBDA_IPSinkControl, lpVtbl : IBDA_IPSinkControlVtbl* do
    GUID = LibC::GUID.new(0x3f4dc8e2_u32, 0x4050_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x4b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
    def query_interface(this : IBDA_IPSinkControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_IPSinkControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_IPSinkControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multicast_list(this : IBDA_IPSinkControl*, pulcbSize : UInt32*, pbBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multicast_list.call(this, pulcbSize, pbBuffer)
    end
    def get_adapter_ip_address(this : IBDA_IPSinkControl*, pulcbSize : UInt32*, pbBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_ip_address.call(this, pulcbSize, pbBuffer)
    end

  end

  @[Extern]
  record IBDA_IPSinkInfoVtbl,
    query_interface : Proc(IBDA_IPSinkInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_IPSinkInfo*, UInt32),
    release : Proc(IBDA_IPSinkInfo*, UInt32),
    get_MulticastList : Proc(IBDA_IPSinkInfo*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    get_AdapterIPAddress : Proc(IBDA_IPSinkInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_AdapterDescription : Proc(IBDA_IPSinkInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a750108f-492e-4d51-95f7-649b23ff7ad7")]
  record IBDA_IPSinkInfo, lpVtbl : IBDA_IPSinkInfoVtbl* do
    GUID = LibC::GUID.new(0xa750108f_u32, 0x492e_u16, 0x4d51_u16, StaticArray[0x95_u8, 0xf7_u8, 0x64_u8, 0x9b_u8, 0x23_u8, 0xff_u8, 0x7a_u8, 0xd7_u8])
    def query_interface(this : IBDA_IPSinkInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_IPSinkInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_IPSinkInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_MulticastList(this : IBDA_IPSinkInfo*, pulcbAddresses : UInt32*, ppbAddressList : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MulticastList.call(this, pulcbAddresses, ppbAddressList)
    end
    def get_AdapterIPAddress(this : IBDA_IPSinkInfo*, pbstrBuffer : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AdapterIPAddress.call(this, pbstrBuffer)
    end
    def get_AdapterDescription(this : IBDA_IPSinkInfo*, pbstrBuffer : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AdapterDescription.call(this, pbstrBuffer)
    end

  end

  @[Extern]
  record IEnumPIDMapVtbl,
    query_interface : Proc(IEnumPIDMap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumPIDMap*, UInt32),
    release : Proc(IEnumPIDMap*, UInt32),
    next__ : Proc(IEnumPIDMap*, UInt32, Win32cr::Media::DirectShow::PID_MAP*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumPIDMap*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumPIDMap*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumPIDMap*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("afb6c2a2-2c41-11d3-8a60-0000f81e0e4a")]
  record IEnumPIDMap, lpVtbl : IEnumPIDMapVtbl* do
    GUID = LibC::GUID.new(0xafb6c2a2_u32, 0x2c41_u16, 0x11d3_u16, StaticArray[0x8a_u8, 0x60_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x1e_u8, 0xe_u8, 0x4a_u8])
    def query_interface(this : IEnumPIDMap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumPIDMap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumPIDMap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumPIDMap*, cRequest : UInt32, pPIDMap : Win32cr::Media::DirectShow::PID_MAP*, pcReceived : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cRequest, pPIDMap, pcReceived)
    end
    def skip(this : IEnumPIDMap*, cRecords : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cRecords)
    end
    def reset(this : IEnumPIDMap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumPIDMap*, ppIEnumPIDMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIEnumPIDMap)
    end

  end

  @[Extern]
  record IMPEG2PIDMapVtbl,
    query_interface : Proc(IMPEG2PIDMap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2PIDMap*, UInt32),
    release : Proc(IMPEG2PIDMap*, UInt32),
    map_pid : Proc(IMPEG2PIDMap*, UInt32, UInt32*, Win32cr::Media::DirectShow::MEDIA_SAMPLE_CONTENT, Win32cr::Foundation::HRESULT),
    unmap_pid : Proc(IMPEG2PIDMap*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    enum_pid_map : Proc(IMPEG2PIDMap*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("afb6c2a1-2c41-11d3-8a60-0000f81e0e4a")]
  record IMPEG2PIDMap, lpVtbl : IMPEG2PIDMapVtbl* do
    GUID = LibC::GUID.new(0xafb6c2a1_u32, 0x2c41_u16, 0x11d3_u16, StaticArray[0x8a_u8, 0x60_u8, 0x0_u8, 0x0_u8, 0xf8_u8, 0x1e_u8, 0xe_u8, 0x4a_u8])
    def query_interface(this : IMPEG2PIDMap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2PIDMap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2PIDMap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def map_pid(this : IMPEG2PIDMap*, culPID : UInt32, pulPID : UInt32*, media_sample_content : Win32cr::Media::DirectShow::MEDIA_SAMPLE_CONTENT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_pid.call(this, culPID, pulPID, media_sample_content)
    end
    def unmap_pid(this : IMPEG2PIDMap*, culPID : UInt32, pulPID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unmap_pid.call(this, culPID, pulPID)
    end
    def enum_pid_map(this : IMPEG2PIDMap*, pIEnumPIDMap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_pid_map.call(this, pIEnumPIDMap)
    end

  end

  @[Extern]
  record IFrequencyMapVtbl,
    query_interface : Proc(IFrequencyMap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFrequencyMap*, UInt32),
    release : Proc(IFrequencyMap*, UInt32),
    get_FrequencyMapping : Proc(IFrequencyMap*, UInt32*, UInt32**, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IFrequencyMap*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IFrequencyMap*, UInt32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IFrequencyMap*, UInt32, Win32cr::Foundation::HRESULT),
    get_DefaultFrequencyMapping : Proc(IFrequencyMap*, UInt32, UInt32*, UInt32**, Win32cr::Foundation::HRESULT),
    get_CountryCodeList : Proc(IFrequencyMap*, UInt32*, UInt32**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("06fb45c1-693c-4ea7-b79f-7a6a54d8def2")]
  record IFrequencyMap, lpVtbl : IFrequencyMapVtbl* do
    GUID = LibC::GUID.new(0x6fb45c1_u32, 0x693c_u16, 0x4ea7_u16, StaticArray[0xb7_u8, 0x9f_u8, 0x7a_u8, 0x6a_u8, 0x54_u8, 0xd8_u8, 0xde_u8, 0xf2_u8])
    def query_interface(this : IFrequencyMap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFrequencyMap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFrequencyMap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_FrequencyMapping(this : IFrequencyMap*, ulCount : UInt32*, ppulList : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, ulCount, ppulList)
    end
    def put_FrequencyMapping(this : IFrequencyMap*, ulCount : UInt32, pList : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, ulCount, pList)
    end
    def get_CountryCode(this : IFrequencyMap*, pulCountryCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, pulCountryCode)
    end
    def put_CountryCode(this : IFrequencyMap*, ulCountryCode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, ulCountryCode)
    end
    def get_DefaultFrequencyMapping(this : IFrequencyMap*, ulCountryCode : UInt32, pulCount : UInt32*, ppulList : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultFrequencyMapping.call(this, ulCountryCode, pulCount, ppulList)
    end
    def get_CountryCodeList(this : IFrequencyMap*, pulCount : UInt32*, ppulList : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCodeList.call(this, pulCount, ppulList)
    end

  end

  @[Extern]
  record IBDA_EasMessageVtbl,
    query_interface : Proc(IBDA_EasMessage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_EasMessage*, UInt32),
    release : Proc(IBDA_EasMessage*, UInt32),
    get_EasMessage : Proc(IBDA_EasMessage*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d806973d-3ebe-46de-8fbb-6358fe784208")]
  record IBDA_EasMessage, lpVtbl : IBDA_EasMessageVtbl* do
    GUID = LibC::GUID.new(0xd806973d_u32, 0x3ebe_u16, 0x46de_u16, StaticArray[0x8f_u8, 0xbb_u8, 0x63_u8, 0x58_u8, 0xfe_u8, 0x78_u8, 0x42_u8, 0x8_u8])
    def query_interface(this : IBDA_EasMessage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_EasMessage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_EasMessage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_EasMessage(this : IBDA_EasMessage*, ulEventID : UInt32, ppEASObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EasMessage.call(this, ulEventID, ppEASObject)
    end

  end

  @[Extern]
  record IBDA_TransportStreamInfoVtbl,
    query_interface : Proc(IBDA_TransportStreamInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_TransportStreamInfo*, UInt32),
    release : Proc(IBDA_TransportStreamInfo*, UInt32),
    get_PatTableTickCount : Proc(IBDA_TransportStreamInfo*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8e882535-5f86-47ab-86cf-c281a72a0549")]
  record IBDA_TransportStreamInfo, lpVtbl : IBDA_TransportStreamInfoVtbl* do
    GUID = LibC::GUID.new(0x8e882535_u32, 0x5f86_u16, 0x47ab_u16, StaticArray[0x86_u8, 0xcf_u8, 0xc2_u8, 0x81_u8, 0xa7_u8, 0x2a_u8, 0x5_u8, 0x49_u8])
    def query_interface(this : IBDA_TransportStreamInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_TransportStreamInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_TransportStreamInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_PatTableTickCount(this : IBDA_TransportStreamInfo*, pPatTickCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PatTableTickCount.call(this, pPatTickCount)
    end

  end

  @[Extern]
  record IBDA_ConditionalAccessVtbl,
    query_interface : Proc(IBDA_ConditionalAccess*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_ConditionalAccess*, UInt32),
    release : Proc(IBDA_ConditionalAccess*, UInt32),
    get_SmartCardStatus : Proc(IBDA_ConditionalAccess*, Win32cr::Media::DirectShow::SmartCardStatusType*, Win32cr::Media::DirectShow::SmartCardAssociationType*, Win32cr::Foundation::BSTR*, Int16*, Win32cr::Foundation::HRESULT),
    get_SmartCardInfo : Proc(IBDA_ConditionalAccess*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Int16*, UInt8*, Int32*, Win32cr::Foundation::BSTR*, Win32cr::Media::DirectShow::EALocationCodeType*, Win32cr::Foundation::HRESULT),
    get_SmartCardApplications : Proc(IBDA_ConditionalAccess*, UInt32*, UInt32, Win32cr::Media::DirectShow::SmartCardApplication*, Win32cr::Foundation::HRESULT),
    get_Entitlement : Proc(IBDA_ConditionalAccess*, UInt16, Win32cr::Media::DirectShow::EntitlementType*, Win32cr::Foundation::HRESULT),
    tune_by_channel : Proc(IBDA_ConditionalAccess*, UInt16, Win32cr::Foundation::HRESULT),
    set_program : Proc(IBDA_ConditionalAccess*, UInt16, Win32cr::Foundation::HRESULT),
    add_program : Proc(IBDA_ConditionalAccess*, UInt16, Win32cr::Foundation::HRESULT),
    remove_program : Proc(IBDA_ConditionalAccess*, UInt16, Win32cr::Foundation::HRESULT),
    get_module_ui : Proc(IBDA_ConditionalAccess*, UInt8, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    inform_ui_closed : Proc(IBDA_ConditionalAccess*, UInt8, Win32cr::Media::DirectShow::UICloseReasonType, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cd51f1e0-7be9-4123-8482-a2a796c0a6b0")]
  record IBDA_ConditionalAccess, lpVtbl : IBDA_ConditionalAccessVtbl* do
    GUID = LibC::GUID.new(0xcd51f1e0_u32, 0x7be9_u16, 0x4123_u16, StaticArray[0x84_u8, 0x82_u8, 0xa2_u8, 0xa7_u8, 0x96_u8, 0xc0_u8, 0xa6_u8, 0xb0_u8])
    def query_interface(this : IBDA_ConditionalAccess*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_ConditionalAccess*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_ConditionalAccess*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_SmartCardStatus(this : IBDA_ConditionalAccess*, pCardStatus : Win32cr::Media::DirectShow::SmartCardStatusType*, pCardAssociation : Win32cr::Media::DirectShow::SmartCardAssociationType*, pbstrCardError : Win32cr::Foundation::BSTR*, pfOOBLocked : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmartCardStatus.call(this, pCardStatus, pCardAssociation, pbstrCardError, pfOOBLocked)
    end
    def get_SmartCardInfo(this : IBDA_ConditionalAccess*, pbstrCardName : Win32cr::Foundation::BSTR*, pbstrCardManufacturer : Win32cr::Foundation::BSTR*, pfDaylightSavings : Int16*, pbyRatingRegion : UInt8*, plTimeZoneOffsetMinutes : Int32*, pbstrLanguage : Win32cr::Foundation::BSTR*, pEALocationCode : Win32cr::Media::DirectShow::EALocationCodeType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmartCardInfo.call(this, pbstrCardName, pbstrCardManufacturer, pfDaylightSavings, pbyRatingRegion, plTimeZoneOffsetMinutes, pbstrLanguage, pEALocationCode)
    end
    def get_SmartCardApplications(this : IBDA_ConditionalAccess*, pulcApplications : UInt32*, ulcApplicationsMax : UInt32, rgApplications : Win32cr::Media::DirectShow::SmartCardApplication*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SmartCardApplications.call(this, pulcApplications, ulcApplicationsMax, rgApplications)
    end
    def get_Entitlement(this : IBDA_ConditionalAccess*, usVirtualChannel : UInt16, pEntitlement : Win32cr::Media::DirectShow::EntitlementType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Entitlement.call(this, usVirtualChannel, pEntitlement)
    end
    def tune_by_channel(this : IBDA_ConditionalAccess*, usVirtualChannel : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tune_by_channel.call(this, usVirtualChannel)
    end
    def set_program(this : IBDA_ConditionalAccess*, usProgramNumber : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_program.call(this, usProgramNumber)
    end
    def add_program(this : IBDA_ConditionalAccess*, usProgramNumber : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_program.call(this, usProgramNumber)
    end
    def remove_program(this : IBDA_ConditionalAccess*, usProgramNumber : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_program.call(this, usProgramNumber)
    end
    def get_module_ui(this : IBDA_ConditionalAccess*, byDialogNumber : UInt8, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_module_ui.call(this, byDialogNumber, pbstrURL)
    end
    def inform_ui_closed(this : IBDA_ConditionalAccess*, byDialogNumber : UInt8, close_reason : Win32cr::Media::DirectShow::UICloseReasonType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.inform_ui_closed.call(this, byDialogNumber, close_reason)
    end

  end

  @[Extern]
  record IBDA_DiagnosticPropertiesVtbl,
    query_interface : Proc(IBDA_DiagnosticProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DiagnosticProperties*, UInt32),
    release : Proc(IBDA_DiagnosticProperties*, UInt32),
    read : Proc(IBDA_DiagnosticProperties*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Void*, Win32cr::Foundation::HRESULT),
    write : Proc(IBDA_DiagnosticProperties*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("20e80cb5-c543-4c1b-8eb3-49e719eee7d4")]
  record IBDA_DiagnosticProperties, lpVtbl : IBDA_DiagnosticPropertiesVtbl* do
    GUID = LibC::GUID.new(0x20e80cb5_u32, 0xc543_u16, 0x4c1b_u16, StaticArray[0x8e_u8, 0xb3_u8, 0x49_u8, 0xe7_u8, 0x19_u8, 0xee_u8, 0xe7_u8, 0xd4_u8])
    def query_interface(this : IBDA_DiagnosticProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DiagnosticProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DiagnosticProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read(this : IBDA_DiagnosticProperties*, pszPropName : Win32cr::Foundation::PWSTR, pVar : Win32cr::System::Com::VARIANT*, pErrorLog : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pszPropName, pVar, pErrorLog)
    end
    def write(this : IBDA_DiagnosticProperties*, pszPropName : Win32cr::Foundation::PWSTR, pVar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pszPropName, pVar)
    end

  end

  @[Extern]
  record IBDA_DRMVtbl,
    query_interface : Proc(IBDA_DRM*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DRM*, UInt32),
    release : Proc(IBDA_DRM*, UInt32),
    get_drm_pairing_status : Proc(IBDA_DRM*, UInt32*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    perform_drm_pairing : Proc(IBDA_DRM*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f98d88b0-1992-4cd6-a6d9-b9afab99330d")]
  record IBDA_DRM, lpVtbl : IBDA_DRMVtbl* do
    GUID = LibC::GUID.new(0xf98d88b0_u32, 0x1992_u16, 0x4cd6_u16, StaticArray[0xa6_u8, 0xd9_u8, 0xb9_u8, 0xaf_u8, 0xab_u8, 0x99_u8, 0x33_u8, 0xd_u8])
    def query_interface(this : IBDA_DRM*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DRM*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DRM*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_drm_pairing_status(this : IBDA_DRM*, pdwStatus : UInt32*, phError : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drm_pairing_status.call(this, pdwStatus, phError)
    end
    def perform_drm_pairing(this : IBDA_DRM*, fSync : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.perform_drm_pairing.call(this, fSync)
    end

  end

  @[Extern]
  record IBDA_NameValueServiceVtbl,
    query_interface : Proc(IBDA_NameValueService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_NameValueService*, UInt32),
    release : Proc(IBDA_NameValueService*, UInt32),
    get_value_name_by_index : Proc(IBDA_NameValueService*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IBDA_NameValueService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_value : Proc(IBDA_NameValueService*, UInt32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7f0b3150-7b81-4ad4-98e3-7e9097094301")]
  record IBDA_NameValueService, lpVtbl : IBDA_NameValueServiceVtbl* do
    GUID = LibC::GUID.new(0x7f0b3150_u32, 0x7b81_u16, 0x4ad4_u16, StaticArray[0x98_u8, 0xe3_u8, 0x7e_u8, 0x90_u8, 0x97_u8, 0x9_u8, 0x43_u8, 0x1_u8])
    def query_interface(this : IBDA_NameValueService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_NameValueService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_NameValueService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_value_name_by_index(this : IBDA_NameValueService*, ulIndex : UInt32, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_name_by_index.call(this, ulIndex, pbstrName)
    end
    def get_value(this : IBDA_NameValueService*, bstrName : Win32cr::Foundation::BSTR, bstrLanguage : Win32cr::Foundation::BSTR, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, bstrName, bstrLanguage, pbstrValue)
    end
    def set_value(this : IBDA_NameValueService*, ulDialogRequest : UInt32, bstrLanguage : Win32cr::Foundation::BSTR, bstrName : Win32cr::Foundation::BSTR, bstrValue : Win32cr::Foundation::BSTR, ulReserved : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, ulDialogRequest, bstrLanguage, bstrName, bstrValue, ulReserved)
    end

  end

  @[Extern]
  record IBDA_ConditionalAccessExVtbl,
    query_interface : Proc(IBDA_ConditionalAccessEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_ConditionalAccessEx*, UInt32),
    release : Proc(IBDA_ConditionalAccessEx*, UInt32),
    check_entitlement_token : Proc(IBDA_ConditionalAccessEx*, UInt32, Win32cr::Foundation::BSTR, Win32cr::Media::DirectShow::BDA_CONDITIONALACCESS_REQUESTTYPE, UInt32, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    set_capture_token : Proc(IBDA_ConditionalAccessEx*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    open_broadcast_mmi : Proc(IBDA_ConditionalAccessEx*, UInt32, Win32cr::Foundation::BSTR, UInt32, Win32cr::Foundation::HRESULT),
    close_mmi_dialog : Proc(IBDA_ConditionalAccessEx*, UInt32, Win32cr::Foundation::BSTR, UInt32, Win32cr::Media::DirectShow::BDA_CONDITIONALACCESS_MMICLOSEREASON, UInt32*, Win32cr::Foundation::HRESULT),
    create_dialog_request_number : Proc(IBDA_ConditionalAccessEx*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("497c3418-23cb-44ba-bb62-769f506fcea7")]
  record IBDA_ConditionalAccessEx, lpVtbl : IBDA_ConditionalAccessExVtbl* do
    GUID = LibC::GUID.new(0x497c3418_u32, 0x23cb_u16, 0x44ba_u16, StaticArray[0xbb_u8, 0x62_u8, 0x76_u8, 0x9f_u8, 0x50_u8, 0x6f_u8, 0xce_u8, 0xa7_u8])
    def query_interface(this : IBDA_ConditionalAccessEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_ConditionalAccessEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_ConditionalAccessEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def check_entitlement_token(this : IBDA_ConditionalAccessEx*, ulDialogRequest : UInt32, bstrLanguage : Win32cr::Foundation::BSTR, request_type : Win32cr::Media::DirectShow::BDA_CONDITIONALACCESS_REQUESTTYPE, ulcbEntitlementTokenLen : UInt32, pbEntitlementToken : UInt8*, pulDescrambleStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_entitlement_token.call(this, ulDialogRequest, bstrLanguage, request_type, ulcbEntitlementTokenLen, pbEntitlementToken, pulDescrambleStatus)
    end
    def set_capture_token(this : IBDA_ConditionalAccessEx*, ulcbCaptureTokenLen : UInt32, pbCaptureToken : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_capture_token.call(this, ulcbCaptureTokenLen, pbCaptureToken)
    end
    def open_broadcast_mmi(this : IBDA_ConditionalAccessEx*, ulDialogRequest : UInt32, bstrLanguage : Win32cr::Foundation::BSTR, event_id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_broadcast_mmi.call(this, ulDialogRequest, bstrLanguage, event_id)
    end
    def close_mmi_dialog(this : IBDA_ConditionalAccessEx*, ulDialogRequest : UInt32, bstrLanguage : Win32cr::Foundation::BSTR, ulDialogNumber : UInt32, reason_code : Win32cr::Media::DirectShow::BDA_CONDITIONALACCESS_MMICLOSEREASON, pulSessionResult : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_mmi_dialog.call(this, ulDialogRequest, bstrLanguage, ulDialogNumber, reason_code, pulSessionResult)
    end
    def create_dialog_request_number(this : IBDA_ConditionalAccessEx*, pulDialogRequestNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_dialog_request_number.call(this, pulDialogRequestNumber)
    end

  end

  @[Extern]
  record IBDA_ISDBConditionalAccessVtbl,
    query_interface : Proc(IBDA_ISDBConditionalAccess*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_ISDBConditionalAccess*, UInt32),
    release : Proc(IBDA_ISDBConditionalAccess*, UInt32),
    set_isdb_cas_request : Proc(IBDA_ISDBConditionalAccess*, UInt32, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5e68c627-16c2-4e6c-b1e2-d00170cdaa0f")]
  record IBDA_ISDBConditionalAccess, lpVtbl : IBDA_ISDBConditionalAccessVtbl* do
    GUID = LibC::GUID.new(0x5e68c627_u32, 0x16c2_u16, 0x4e6c_u16, StaticArray[0xb1_u8, 0xe2_u8, 0xd0_u8, 0x1_u8, 0x70_u8, 0xcd_u8, 0xaa_u8, 0xf_u8])
    def query_interface(this : IBDA_ISDBConditionalAccess*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_ISDBConditionalAccess*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_ISDBConditionalAccess*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_isdb_cas_request(this : IBDA_ISDBConditionalAccess*, ulRequestId : UInt32, ulcbRequestBufferLen : UInt32, pbRequestBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_isdb_cas_request.call(this, ulRequestId, ulcbRequestBufferLen, pbRequestBuffer)
    end

  end

  @[Extern]
  record IBDA_EventingServiceVtbl,
    query_interface : Proc(IBDA_EventingService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_EventingService*, UInt32),
    release : Proc(IBDA_EventingService*, UInt32),
    complete_event : Proc(IBDA_EventingService*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("207c413f-00dc-4c61-bad6-6fee1ff07064")]
  record IBDA_EventingService, lpVtbl : IBDA_EventingServiceVtbl* do
    GUID = LibC::GUID.new(0x207c413f_u32, 0xdc_u16, 0x4c61_u16, StaticArray[0xba_u8, 0xd6_u8, 0x6f_u8, 0xee_u8, 0x1f_u8, 0xf0_u8, 0x70_u8, 0x64_u8])
    def query_interface(this : IBDA_EventingService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_EventingService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_EventingService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def complete_event(this : IBDA_EventingService*, ulEventID : UInt32, ulEventResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.complete_event.call(this, ulEventID, ulEventResult)
    end

  end

  @[Extern]
  record IBDA_AUXVtbl,
    query_interface : Proc(IBDA_AUX*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_AUX*, UInt32),
    release : Proc(IBDA_AUX*, UInt32),
    query_capabilities : Proc(IBDA_AUX*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_capability : Proc(IBDA_AUX*, UInt32, UInt32*, LibC::GUID*, UInt32*, UInt32*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7def4c09-6e66-4567-a819-f0e17f4a81ab")]
  record IBDA_AUX, lpVtbl : IBDA_AUXVtbl* do
    GUID = LibC::GUID.new(0x7def4c09_u32, 0x6e66_u16, 0x4567_u16, StaticArray[0xa8_u8, 0x19_u8, 0xf0_u8, 0xe1_u8, 0x7f_u8, 0x4a_u8, 0x81_u8, 0xab_u8])
    def query_interface(this : IBDA_AUX*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_AUX*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_AUX*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_capabilities(this : IBDA_AUX*, pdwNumAuxInputsBSTR : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_capabilities.call(this, pdwNumAuxInputsBSTR)
    end
    def enum_capability(this : IBDA_AUX*, dwIndex : UInt32, dwInputID : UInt32*, pConnectorType : LibC::GUID*, conn_type_num : UInt32*, num_video_stds : UInt32*, analog_stds : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_capability.call(this, dwIndex, dwInputID, pConnectorType, conn_type_num, num_video_stds, analog_stds)
    end

  end

  @[Extern]
  record IBDA_EncoderVtbl,
    query_interface : Proc(IBDA_Encoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_Encoder*, UInt32),
    release : Proc(IBDA_Encoder*, UInt32),
    query_capabilities : Proc(IBDA_Encoder*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_audio_capability : Proc(IBDA_Encoder*, UInt32, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    enum_video_capability : Proc(IBDA_Encoder*, UInt32, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_parameters : Proc(IBDA_Encoder*, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_state : Proc(IBDA_Encoder*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt64*, Win32cr::Foundation::BOOL*, Int32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3a8bad59-59fe-4559-a0ba-396cfaa98ae3")]
  record IBDA_Encoder, lpVtbl : IBDA_EncoderVtbl* do
    GUID = LibC::GUID.new(0x3a8bad59_u32, 0x59fe_u16, 0x4559_u16, StaticArray[0xa0_u8, 0xba_u8, 0x39_u8, 0x6c_u8, 0xfa_u8, 0xa9_u8, 0x8a_u8, 0xe3_u8])
    def query_interface(this : IBDA_Encoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_Encoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_Encoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_capabilities(this : IBDA_Encoder*, num_audio_fmts : UInt32*, num_video_fmts : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_capabilities.call(this, num_audio_fmts, num_video_fmts)
    end
    def enum_audio_capability(this : IBDA_Encoder*, fmt_index : UInt32, method_id : UInt32*, algorithm_type : UInt32*, sampling_rate : UInt32*, bit_depth : UInt32*, num_channels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_audio_capability.call(this, fmt_index, method_id, algorithm_type, sampling_rate, bit_depth, num_channels)
    end
    def enum_video_capability(this : IBDA_Encoder*, fmt_index : UInt32, method_id : UInt32*, algorithm_type : UInt32*, vertical_size : UInt32*, horizontal_size : UInt32*, aspect_ratio : UInt32*, frame_rate_code : UInt32*, progressive_sequence : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_video_capability.call(this, fmt_index, method_id, algorithm_type, vertical_size, horizontal_size, aspect_ratio, frame_rate_code, progressive_sequence)
    end
    def set_parameters(this : IBDA_Encoder*, audio_bitrate_mode : UInt32, audio_bitrate : UInt32, audio_method_id : UInt32, audio_program : UInt32, video_bitrate_mode : UInt32, video_bitrate : UInt32, video_method_id : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parameters.call(this, audio_bitrate_mode, audio_bitrate, audio_method_id, audio_program, video_bitrate_mode, video_bitrate, video_method_id)
    end
    def get_state(this : IBDA_Encoder*, audio_bitrate_max : UInt32*, audio_bitrate_min : UInt32*, audio_bitrate_mode : UInt32*, audio_bitrate_stepping : UInt32*, audio_bitrate : UInt32*, audio_method_id : UInt32*, available_audio_programs : UInt32*, audio_program : UInt32*, video_bitrate_max : UInt32*, video_bitrate_min : UInt32*, video_bitrate_mode : UInt32*, video_bitrate : UInt32*, video_bitrate_stepping : UInt32*, video_method_id : UInt32*, signal_source_id : UInt32*, signal_format : UInt64*, signal_lock : Win32cr::Foundation::BOOL*, signal_level : Int32*, signal_to_noise_ratio : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, audio_bitrate_max, audio_bitrate_min, audio_bitrate_mode, audio_bitrate_stepping, audio_bitrate, audio_method_id, available_audio_programs, audio_program, video_bitrate_max, video_bitrate_min, video_bitrate_mode, video_bitrate, video_bitrate_stepping, video_method_id, signal_source_id, signal_format, signal_lock, signal_level, signal_to_noise_ratio)
    end

  end

  @[Extern]
  record IBDA_FDCVtbl,
    query_interface : Proc(IBDA_FDC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_FDC*, UInt32),
    release : Proc(IBDA_FDC*, UInt32),
    get_status : Proc(IBDA_FDC*, UInt32*, Win32cr::Foundation::BOOL*, UInt32*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    request_tables : Proc(IBDA_FDC*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_pid : Proc(IBDA_FDC*, Win32cr::Foundation::BSTR, UInt32*, Win32cr::Foundation::HRESULT),
    remove_pid : Proc(IBDA_FDC*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_tid : Proc(IBDA_FDC*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    remove_tid : Proc(IBDA_FDC*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_table_section : Proc(IBDA_FDC*, UInt32*, UInt32, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("138adc7e-58ae-437f-b0b4-c9fe19d5b4ac")]
  record IBDA_FDC, lpVtbl : IBDA_FDCVtbl* do
    GUID = LibC::GUID.new(0x138adc7e_u32, 0x58ae_u16, 0x437f_u16, StaticArray[0xb0_u8, 0xb4_u8, 0xc9_u8, 0xfe_u8, 0x19_u8, 0xd5_u8, 0xb4_u8, 0xac_u8])
    def query_interface(this : IBDA_FDC*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_FDC*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_FDC*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_status(this : IBDA_FDC*, current_bitrate : UInt32*, carrier_lock : Win32cr::Foundation::BOOL*, current_frequency : UInt32*, current_spectrum_inversion : Win32cr::Foundation::BOOL*, current_pid_list : Win32cr::Foundation::BSTR*, current_tid_list : Win32cr::Foundation::BSTR*, overflow : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, current_bitrate, carrier_lock, current_frequency, current_spectrum_inversion, current_pid_list, current_tid_list, overflow)
    end
    def request_tables(this : IBDA_FDC*, table_i_ds : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_tables.call(this, table_i_ds)
    end
    def add_pid(this : IBDA_FDC*, pids_to_add : Win32cr::Foundation::BSTR, remaining_filter_entries : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_pid.call(this, pids_to_add, remaining_filter_entries)
    end
    def remove_pid(this : IBDA_FDC*, pids_to_remove : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_pid.call(this, pids_to_remove)
    end
    def add_tid(this : IBDA_FDC*, tids_to_add : Win32cr::Foundation::BSTR, current_tid_list : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_tid.call(this, tids_to_add, current_tid_list)
    end
    def remove_tid(this : IBDA_FDC*, tids_to_remove : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_tid.call(this, tids_to_remove)
    end
    def get_table_section(this : IBDA_FDC*, pid : UInt32*, max_buffer_size : UInt32, actual_size : UInt32*, sec_buffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_section.call(this, pid, max_buffer_size, actual_size, sec_buffer)
    end

  end

  @[Extern]
  record IBDA_GuideDataDeliveryServiceVtbl,
    query_interface : Proc(IBDA_GuideDataDeliveryService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_GuideDataDeliveryService*, UInt32),
    release : Proc(IBDA_GuideDataDeliveryService*, UInt32),
    get_guide_data_type : Proc(IBDA_GuideDataDeliveryService*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_guide_data : Proc(IBDA_GuideDataDeliveryService*, UInt32*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    request_guide_data_update : Proc(IBDA_GuideDataDeliveryService*, Win32cr::Foundation::HRESULT),
    get_tune_xml_from_service_idx : Proc(IBDA_GuideDataDeliveryService*, UInt64, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_services : Proc(IBDA_GuideDataDeliveryService*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_info_from_tune_xml : Proc(IBDA_GuideDataDeliveryService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c0afcb73-23e7-4bc6-bafa-fdc167b4719f")]
  record IBDA_GuideDataDeliveryService, lpVtbl : IBDA_GuideDataDeliveryServiceVtbl* do
    GUID = LibC::GUID.new(0xc0afcb73_u32, 0x23e7_u16, 0x4bc6_u16, StaticArray[0xba_u8, 0xfa_u8, 0xfd_u8, 0xc1_u8, 0x67_u8, 0xb4_u8, 0x71_u8, 0x9f_u8])
    def query_interface(this : IBDA_GuideDataDeliveryService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_GuideDataDeliveryService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_GuideDataDeliveryService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_guide_data_type(this : IBDA_GuideDataDeliveryService*, pguidDataType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guide_data_type.call(this, pguidDataType)
    end
    def get_guide_data(this : IBDA_GuideDataDeliveryService*, pulcbBufferLen : UInt32*, pbBuffer : UInt8*, pulGuideDataPercentageProgress : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guide_data.call(this, pulcbBufferLen, pbBuffer, pulGuideDataPercentageProgress)
    end
    def request_guide_data_update(this : IBDA_GuideDataDeliveryService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_guide_data_update.call(this)
    end
    def get_tune_xml_from_service_idx(this : IBDA_GuideDataDeliveryService*, ul64ServiceIdx : UInt64, pbstrTuneXml : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tune_xml_from_service_idx.call(this, ul64ServiceIdx, pbstrTuneXml)
    end
    def get_services(this : IBDA_GuideDataDeliveryService*, pulcbBufferLen : UInt32*, pbBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_services.call(this, pulcbBufferLen, pbBuffer)
    end
    def get_service_info_from_tune_xml(this : IBDA_GuideDataDeliveryService*, bstrTuneXml : Win32cr::Foundation::BSTR, pbstrServiceDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_info_from_tune_xml.call(this, bstrTuneXml, pbstrServiceDescription)
    end

  end

  @[Extern]
  record IBDA_DRMServiceVtbl,
    query_interface : Proc(IBDA_DRMService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DRMService*, UInt32),
    release : Proc(IBDA_DRMService*, UInt32),
    set_drm : Proc(IBDA_DRMService*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_drm_status : Proc(IBDA_DRMService*, Win32cr::Foundation::BSTR*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bff6b5bb-b0ae-484c-9dca-73528fb0b46e")]
  record IBDA_DRMService, lpVtbl : IBDA_DRMServiceVtbl* do
    GUID = LibC::GUID.new(0xbff6b5bb_u32, 0xb0ae_u16, 0x484c_u16, StaticArray[0x9d_u8, 0xca_u8, 0x73_u8, 0x52_u8, 0x8f_u8, 0xb0_u8, 0xb4_u8, 0x6e_u8])
    def query_interface(this : IBDA_DRMService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DRMService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DRMService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_drm(this : IBDA_DRMService*, puuidNewDrm : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_drm.call(this, puuidNewDrm)
    end
    def get_drm_status(this : IBDA_DRMService*, pbstrDrmUuidList : Win32cr::Foundation::BSTR*, drm_uuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drm_status.call(this, pbstrDrmUuidList, drm_uuid)
    end

  end

  @[Extern]
  record IBDA_WMDRMSessionVtbl,
    query_interface : Proc(IBDA_WMDRMSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_WMDRMSession*, UInt32),
    release : Proc(IBDA_WMDRMSession*, UInt32),
    get_status : Proc(IBDA_WMDRMSession*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt64*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_rev_info : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    set_crl : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    transact_message : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    get_license : Proc(IBDA_WMDRMSession*, LibC::GUID*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    reissue_license : Proc(IBDA_WMDRMSession*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    renew_license : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, UInt32, UInt8*, UInt32*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    get_key_info : Proc(IBDA_WMDRMSession*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4be6fa3d-07cd-4139-8b80-8c18ba3aec88")]
  record IBDA_WMDRMSession, lpVtbl : IBDA_WMDRMSessionVtbl* do
    GUID = LibC::GUID.new(0x4be6fa3d_u32, 0x7cd_u16, 0x4139_u16, StaticArray[0x8b_u8, 0x80_u8, 0x8c_u8, 0x18_u8, 0xba_u8, 0x3a_u8, 0xec_u8, 0x88_u8])
    def query_interface(this : IBDA_WMDRMSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_WMDRMSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_WMDRMSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_status(this : IBDA_WMDRMSession*, max_capture_token : UInt32*, max_streaming_pid : UInt32*, max_license : UInt32*, min_security_level : UInt32*, rev_info_sequence_number : UInt32*, rev_info_issued_time : UInt64*, rev_info_ttl : UInt32*, rev_list_version : UInt32*, ulState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, max_capture_token, max_streaming_pid, max_license, min_security_level, rev_info_sequence_number, rev_info_issued_time, rev_info_ttl, rev_list_version, ulState)
    end
    def set_rev_info(this : IBDA_WMDRMSession*, ulRevInfoLen : UInt32, pbRevInfo : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rev_info.call(this, ulRevInfoLen, pbRevInfo)
    end
    def set_crl(this : IBDA_WMDRMSession*, ulCrlLen : UInt32, pbCrlLen : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_crl.call(this, ulCrlLen, pbCrlLen)
    end
    def transact_message(this : IBDA_WMDRMSession*, ulcbRequest : UInt32, pbRequest : UInt8*, pulcbResponse : UInt32*, pbResponse : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transact_message.call(this, ulcbRequest, pbRequest, pulcbResponse, pbResponse)
    end
    def get_license(this : IBDA_WMDRMSession*, uuidKey : LibC::GUID*, pulPackageLen : UInt32*, pbPackage : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_license.call(this, uuidKey, pulPackageLen, pbPackage)
    end
    def reissue_license(this : IBDA_WMDRMSession*, uuidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reissue_license.call(this, uuidKey)
    end
    def renew_license(this : IBDA_WMDRMSession*, ulInXmrLicenseLen : UInt32, pbInXmrLicense : UInt8*, ulEntitlementTokenLen : UInt32, pbEntitlementToken : UInt8*, pulDescrambleStatus : UInt32*, pulOutXmrLicenseLen : UInt32*, pbOutXmrLicense : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.renew_license.call(this, ulInXmrLicenseLen, pbInXmrLicense, ulEntitlementTokenLen, pbEntitlementToken, pulDescrambleStatus, pulOutXmrLicenseLen, pbOutXmrLicense)
    end
    def get_key_info(this : IBDA_WMDRMSession*, pulKeyInfoLen : UInt32*, pbKeyInfo : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_info.call(this, pulKeyInfoLen, pbKeyInfo)
    end

  end

  @[Extern]
  record IBDA_WMDRMTunerVtbl,
    query_interface : Proc(IBDA_WMDRMTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_WMDRMTuner*, UInt32),
    release : Proc(IBDA_WMDRMTuner*, UInt32),
    purchase_entitlement : Proc(IBDA_WMDRMTuner*, UInt32, Win32cr::Foundation::BSTR, UInt32, UInt8*, UInt32*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    cancel_capture_token : Proc(IBDA_WMDRMTuner*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    set_pid_protection : Proc(IBDA_WMDRMTuner*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_pid_protection : Proc(IBDA_WMDRMTuner*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_sync_value : Proc(IBDA_WMDRMTuner*, UInt32, Win32cr::Foundation::HRESULT),
    get_start_code_profile : Proc(IBDA_WMDRMTuner*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("86d979cf-a8a7-4f94-b5fb-14c0aca68fe6")]
  record IBDA_WMDRMTuner, lpVtbl : IBDA_WMDRMTunerVtbl* do
    GUID = LibC::GUID.new(0x86d979cf_u32, 0xa8a7_u16, 0x4f94_u16, StaticArray[0xb5_u8, 0xfb_u8, 0x14_u8, 0xc0_u8, 0xac_u8, 0xa6_u8, 0x8f_u8, 0xe6_u8])
    def query_interface(this : IBDA_WMDRMTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_WMDRMTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_WMDRMTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def purchase_entitlement(this : IBDA_WMDRMTuner*, ulDialogRequest : UInt32, bstrLanguage : Win32cr::Foundation::BSTR, ulPurchaseTokenLen : UInt32, pbPurchaseToken : UInt8*, pulDescrambleStatus : UInt32*, pulCaptureTokenLen : UInt32*, pbCaptureToken : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.purchase_entitlement.call(this, ulDialogRequest, bstrLanguage, ulPurchaseTokenLen, pbPurchaseToken, pulDescrambleStatus, pulCaptureTokenLen, pbCaptureToken)
    end
    def cancel_capture_token(this : IBDA_WMDRMTuner*, ulCaptureTokenLen : UInt32, pbCaptureToken : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_capture_token.call(this, ulCaptureTokenLen, pbCaptureToken)
    end
    def set_pid_protection(this : IBDA_WMDRMTuner*, ulPid : UInt32, uuidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pid_protection.call(this, ulPid, uuidKey)
    end
    def get_pid_protection(this : IBDA_WMDRMTuner*, pulPid : UInt32, uuidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pid_protection.call(this, pulPid, uuidKey)
    end
    def set_sync_value(this : IBDA_WMDRMTuner*, ulSyncValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_value.call(this, ulSyncValue)
    end
    def get_start_code_profile(this : IBDA_WMDRMTuner*, pulStartCodeProfileLen : UInt32*, pbStartCodeProfile : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_start_code_profile.call(this, pulStartCodeProfileLen, pbStartCodeProfile)
    end

  end

  @[Extern]
  record IBDA_DRIDRMServiceVtbl,
    query_interface : Proc(IBDA_DRIDRMService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DRIDRMService*, UInt32),
    release : Proc(IBDA_DRIDRMService*, UInt32),
    set_drm : Proc(IBDA_DRIDRMService*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_drm_status : Proc(IBDA_DRIDRMService*, Win32cr::Foundation::BSTR*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_pairing_status : Proc(IBDA_DRIDRMService*, Win32cr::Media::DirectShow::BDA_DrmPairingError*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1f9bc2a5-44a3-4c52-aab1-0bbce5a1381d")]
  record IBDA_DRIDRMService, lpVtbl : IBDA_DRIDRMServiceVtbl* do
    GUID = LibC::GUID.new(0x1f9bc2a5_u32, 0x44a3_u16, 0x4c52_u16, StaticArray[0xaa_u8, 0xb1_u8, 0xb_u8, 0xbc_u8, 0xe5_u8, 0xa1_u8, 0x38_u8, 0x1d_u8])
    def query_interface(this : IBDA_DRIDRMService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DRIDRMService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DRIDRMService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_drm(this : IBDA_DRIDRMService*, bstrNewDrm : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_drm.call(this, bstrNewDrm)
    end
    def get_drm_status(this : IBDA_DRIDRMService*, pbstrDrmUuidList : Win32cr::Foundation::BSTR*, drm_uuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drm_status.call(this, pbstrDrmUuidList, drm_uuid)
    end
    def get_pairing_status(this : IBDA_DRIDRMService*, penumPairingStatus : Win32cr::Media::DirectShow::BDA_DrmPairingError*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pairing_status.call(this, penumPairingStatus)
    end

  end

  @[Extern]
  record IBDA_DRIWMDRMSessionVtbl,
    query_interface : Proc(IBDA_DRIWMDRMSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_DRIWMDRMSession*, UInt32),
    release : Proc(IBDA_DRIWMDRMSession*, UInt32),
    acknowledge_license : Proc(IBDA_DRIWMDRMSession*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    process_license_challenge : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    process_registration_challenge : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    set_rev_info : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    set_crl : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_hms_association_data : Proc(IBDA_DRIWMDRMSession*, Win32cr::Foundation::HRESULT),
    get_last_cardea_error : Proc(IBDA_DRIWMDRMSession*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("05c690f8-56db-4bb2-b053-79c12098bb26")]
  record IBDA_DRIWMDRMSession, lpVtbl : IBDA_DRIWMDRMSessionVtbl* do
    GUID = LibC::GUID.new(0x5c690f8_u32, 0x56db_u16, 0x4bb2_u16, StaticArray[0xb0_u8, 0x53_u8, 0x79_u8, 0xc1_u8, 0x20_u8, 0x98_u8, 0xbb_u8, 0x26_u8])
    def query_interface(this : IBDA_DRIWMDRMSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_DRIWMDRMSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_DRIWMDRMSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def acknowledge_license(this : IBDA_DRIWMDRMSession*, hrLicenseAck : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acknowledge_license.call(this, hrLicenseAck)
    end
    def process_license_challenge(this : IBDA_DRIWMDRMSession*, dwcbLicenseMessage : UInt32, pbLicenseMessage : UInt8*, pdwcbLicenseResponse : UInt32*, ppbLicenseResponse : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_license_challenge.call(this, dwcbLicenseMessage, pbLicenseMessage, pdwcbLicenseResponse, ppbLicenseResponse)
    end
    def process_registration_challenge(this : IBDA_DRIWMDRMSession*, dwcbRegistrationMessage : UInt32, pbRegistrationMessage : UInt8*, pdwcbRegistrationResponse : UInt32*, ppbRegistrationResponse : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_registration_challenge.call(this, dwcbRegistrationMessage, pbRegistrationMessage, pdwcbRegistrationResponse, ppbRegistrationResponse)
    end
    def set_rev_info(this : IBDA_DRIWMDRMSession*, dwRevInfoLen : UInt32, pbRevInfo : UInt8*, pdwResponse : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rev_info.call(this, dwRevInfoLen, pbRevInfo, pdwResponse)
    end
    def set_crl(this : IBDA_DRIWMDRMSession*, dwCrlLen : UInt32, pbCrlLen : UInt8*, pdwResponse : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_crl.call(this, dwCrlLen, pbCrlLen, pdwResponse)
    end
    def get_hms_association_data(this : IBDA_DRIWMDRMSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hms_association_data.call(this)
    end
    def get_last_cardea_error(this : IBDA_DRIWMDRMSession*, pdwError : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_cardea_error.call(this, pdwError)
    end

  end

  @[Extern]
  record IBDA_MUXVtbl,
    query_interface : Proc(IBDA_MUX*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_MUX*, UInt32),
    release : Proc(IBDA_MUX*, UInt32),
    set_pid_list : Proc(IBDA_MUX*, UInt32, Win32cr::Media::DirectShow::BDA_MUX_PIDLISTITEM*, Win32cr::Foundation::HRESULT),
    get_pid_list : Proc(IBDA_MUX*, UInt32*, Win32cr::Media::DirectShow::BDA_MUX_PIDLISTITEM*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("942aafec-4c05-4c74-b8eb-8706c2a4943f")]
  record IBDA_MUX, lpVtbl : IBDA_MUXVtbl* do
    GUID = LibC::GUID.new(0x942aafec_u32, 0x4c05_u16, 0x4c74_u16, StaticArray[0xb8_u8, 0xeb_u8, 0x87_u8, 0x6_u8, 0xc2_u8, 0xa4_u8, 0x94_u8, 0x3f_u8])
    def query_interface(this : IBDA_MUX*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_MUX*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_MUX*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_pid_list(this : IBDA_MUX*, ulPidListCount : UInt32, pbPidListBuffer : Win32cr::Media::DirectShow::BDA_MUX_PIDLISTITEM*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pid_list.call(this, ulPidListCount, pbPidListBuffer)
    end
    def get_pid_list(this : IBDA_MUX*, pulPidListCount : UInt32*, pbPidListBuffer : Win32cr::Media::DirectShow::BDA_MUX_PIDLISTITEM*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pid_list.call(this, pulPidListCount, pbPidListBuffer)
    end

  end

  @[Extern]
  record IBDA_TransportStreamSelectorVtbl,
    query_interface : Proc(IBDA_TransportStreamSelector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_TransportStreamSelector*, UInt32),
    release : Proc(IBDA_TransportStreamSelector*, UInt32),
    set_tsid : Proc(IBDA_TransportStreamSelector*, UInt16, Win32cr::Foundation::HRESULT),
    get_ts_information : Proc(IBDA_TransportStreamSelector*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1dcfafe9-b45e-41b3-bb2a-561eb129ae98")]
  record IBDA_TransportStreamSelector, lpVtbl : IBDA_TransportStreamSelectorVtbl* do
    GUID = LibC::GUID.new(0x1dcfafe9_u32, 0xb45e_u16, 0x41b3_u16, StaticArray[0xbb_u8, 0x2a_u8, 0x56_u8, 0x1e_u8, 0xb1_u8, 0x29_u8, 0xae_u8, 0x98_u8])
    def query_interface(this : IBDA_TransportStreamSelector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_TransportStreamSelector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_TransportStreamSelector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_tsid(this : IBDA_TransportStreamSelector*, usTSID : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_tsid.call(this, usTSID)
    end
    def get_ts_information(this : IBDA_TransportStreamSelector*, pulTSInformationBufferLen : UInt32*, pbTSInformationBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ts_information.call(this, pulTSInformationBufferLen, pbTSInformationBuffer)
    end

  end

  @[Extern]
  record IBDA_UserActivityServiceVtbl,
    query_interface : Proc(IBDA_UserActivityService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_UserActivityService*, UInt32),
    release : Proc(IBDA_UserActivityService*, UInt32),
    set_current_tuner_use_reason : Proc(IBDA_UserActivityService*, UInt32, Win32cr::Foundation::HRESULT),
    get_user_activity_interval : Proc(IBDA_UserActivityService*, UInt32*, Win32cr::Foundation::HRESULT),
    user_activity_detected : Proc(IBDA_UserActivityService*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("53b14189-e478-4b7a-a1ff-506db4b99dfe")]
  record IBDA_UserActivityService, lpVtbl : IBDA_UserActivityServiceVtbl* do
    GUID = LibC::GUID.new(0x53b14189_u32, 0xe478_u16, 0x4b7a_u16, StaticArray[0xa1_u8, 0xff_u8, 0x50_u8, 0x6d_u8, 0xb4_u8, 0xb9_u8, 0x9d_u8, 0xfe_u8])
    def query_interface(this : IBDA_UserActivityService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_UserActivityService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_UserActivityService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_current_tuner_use_reason(this : IBDA_UserActivityService*, dwUseReason : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_tuner_use_reason.call(this, dwUseReason)
    end
    def get_user_activity_interval(this : IBDA_UserActivityService*, pdwActivityInterval : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_user_activity_interval.call(this, pdwActivityInterval)
    end
    def user_activity_detected(this : IBDA_UserActivityService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.user_activity_detected.call(this)
    end

  end

  @[Extern]
  record IESEventVtbl,
    query_interface : Proc(IESEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESEvent*, UInt32),
    release : Proc(IESEvent*, UInt32),
    get_event_id : Proc(IESEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1f0e5357-af43-44e6-8547-654c645145d2")]
  record IESEvent, lpVtbl : IESEventVtbl* do
    GUID = LibC::GUID.new(0x1f0e5357_u32, 0xaf43_u16, 0x44e6_u16, StaticArray[0x85_u8, 0x47_u8, 0x65_u8, 0x4c_u8, 0x64_u8, 0x51_u8, 0x45_u8, 0xd2_u8])
    def query_interface(this : IESEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end

  end

  @[Extern]
  record IESEventsVtbl,
    query_interface : Proc(IESEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESEvents*, UInt32),
    release : Proc(IESEvents*, UInt32),
    on_es_event_received : Proc(IESEvents*, LibC::GUID, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("abd414bf-cfe5-4e5e-af5b-4b4e49c5bfeb")]
  record IESEvents, lpVtbl : IESEventsVtbl* do
    GUID = LibC::GUID.new(0xabd414bf_u32, 0xcfe5_u16, 0x4e5e_u16, StaticArray[0xaf_u8, 0x5b_u8, 0x4b_u8, 0x4e_u8, 0x49_u8, 0xc5_u8, 0xbf_u8, 0xeb_u8])
    def query_interface(this : IESEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_es_event_received(this : IESEvents*, guidEventType : LibC::GUID, pESEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_es_event_received.call(this, guidEventType, pESEvent)
    end

  end

  @[Extern]
  record IBroadcastEventVtbl,
    query_interface : Proc(IBroadcastEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBroadcastEvent*, UInt32),
    release : Proc(IBroadcastEvent*, UInt32),
    fire : Proc(IBroadcastEvent*, LibC::GUID, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3b21263f-26e8-489d-aac4-924f7efd9511")]
  record IBroadcastEvent, lpVtbl : IBroadcastEventVtbl* do
    GUID = LibC::GUID.new(0x3b21263f_u32, 0x26e8_u16, 0x489d_u16, StaticArray[0xaa_u8, 0xc4_u8, 0x92_u8, 0x4f_u8, 0x7e_u8, 0xfd_u8, 0x95_u8, 0x11_u8])
    def query_interface(this : IBroadcastEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBroadcastEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBroadcastEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def fire(this : IBroadcastEvent*, event_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire.call(this, event_id)
    end

  end

  @[Extern]
  record IBroadcastEventExVtbl,
    query_interface : Proc(IBroadcastEventEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBroadcastEventEx*, UInt32),
    release : Proc(IBroadcastEventEx*, UInt32),
    fire : Proc(IBroadcastEventEx*, LibC::GUID, Win32cr::Foundation::HRESULT),
    fire_ex : Proc(IBroadcastEventEx*, LibC::GUID, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3d9e3887-1929-423f-8021-43682de95448")]
  record IBroadcastEventEx, lpVtbl : IBroadcastEventExVtbl* do
    GUID = LibC::GUID.new(0x3d9e3887_u32, 0x1929_u16, 0x423f_u16, StaticArray[0x80_u8, 0x21_u8, 0x43_u8, 0x68_u8, 0x2d_u8, 0xe9_u8, 0x54_u8, 0x48_u8])
    def query_interface(this : IBroadcastEventEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBroadcastEventEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBroadcastEventEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def fire(this : IBroadcastEventEx*, event_id : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire.call(this, event_id)
    end
    def fire_ex(this : IBroadcastEventEx*, event_id : LibC::GUID, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire_ex.call(this, event_id, param1, param2, param3, param4)
    end

  end

  @[Extern]
  record IAMNetShowConfigVtbl,
    query_interface : Proc(IAMNetShowConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMNetShowConfig*, UInt32),
    release : Proc(IAMNetShowConfig*, UInt32),
    get_type_info_count : Proc(IAMNetShowConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMNetShowConfig*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMNetShowConfig*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMNetShowConfig*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_BufferingTime : Proc(IAMNetShowConfig*, Float64*, Win32cr::Foundation::HRESULT),
    put_BufferingTime : Proc(IAMNetShowConfig*, Float64, Win32cr::Foundation::HRESULT),
    get_UseFixedUDPPort : Proc(IAMNetShowConfig*, Int16*, Win32cr::Foundation::HRESULT),
    put_UseFixedUDPPort : Proc(IAMNetShowConfig*, Int16, Win32cr::Foundation::HRESULT),
    get_FixedUDPPort : Proc(IAMNetShowConfig*, Int32*, Win32cr::Foundation::HRESULT),
    put_FixedUDPPort : Proc(IAMNetShowConfig*, Int32, Win32cr::Foundation::HRESULT),
    get_UseHTTPProxy : Proc(IAMNetShowConfig*, Int16*, Win32cr::Foundation::HRESULT),
    put_UseHTTPProxy : Proc(IAMNetShowConfig*, Int16, Win32cr::Foundation::HRESULT),
    get_EnableAutoProxy : Proc(IAMNetShowConfig*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableAutoProxy : Proc(IAMNetShowConfig*, Int16, Win32cr::Foundation::HRESULT),
    get_HTTPProxyHost : Proc(IAMNetShowConfig*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_HTTPProxyHost : Proc(IAMNetShowConfig*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_HTTPProxyPort : Proc(IAMNetShowConfig*, Int32*, Win32cr::Foundation::HRESULT),
    put_HTTPProxyPort : Proc(IAMNetShowConfig*, Int32, Win32cr::Foundation::HRESULT),
    get_EnableMulticast : Proc(IAMNetShowConfig*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableMulticast : Proc(IAMNetShowConfig*, Int16, Win32cr::Foundation::HRESULT),
    get_EnableUDP : Proc(IAMNetShowConfig*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableUDP : Proc(IAMNetShowConfig*, Int16, Win32cr::Foundation::HRESULT),
    get_EnableTCP : Proc(IAMNetShowConfig*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableTCP : Proc(IAMNetShowConfig*, Int16, Win32cr::Foundation::HRESULT),
    get_EnableHTTP : Proc(IAMNetShowConfig*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableHTTP : Proc(IAMNetShowConfig*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa2aa8f1-8b62-11d0-a520-000000000000")]
  record IAMNetShowConfig, lpVtbl : IAMNetShowConfigVtbl* do
    GUID = LibC::GUID.new(0xfa2aa8f1_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IAMNetShowConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMNetShowConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMNetShowConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMNetShowConfig*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMNetShowConfig*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMNetShowConfig*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMNetShowConfig*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_BufferingTime(this : IAMNetShowConfig*, pBufferingTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BufferingTime.call(this, pBufferingTime)
    end
    def put_BufferingTime(this : IAMNetShowConfig*, buffering_time : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BufferingTime.call(this, buffering_time)
    end
    def get_UseFixedUDPPort(this : IAMNetShowConfig*, pUseFixedUDPPort : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseFixedUDPPort.call(this, pUseFixedUDPPort)
    end
    def put_UseFixedUDPPort(this : IAMNetShowConfig*, use_fixed_udp_port : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseFixedUDPPort.call(this, use_fixed_udp_port)
    end
    def get_FixedUDPPort(this : IAMNetShowConfig*, pFixedUDPPort : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FixedUDPPort.call(this, pFixedUDPPort)
    end
    def put_FixedUDPPort(this : IAMNetShowConfig*, fixed_udp_port : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FixedUDPPort.call(this, fixed_udp_port)
    end
    def get_UseHTTPProxy(this : IAMNetShowConfig*, pUseHTTPProxy : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseHTTPProxy.call(this, pUseHTTPProxy)
    end
    def put_UseHTTPProxy(this : IAMNetShowConfig*, use_http_proxy : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseHTTPProxy.call(this, use_http_proxy)
    end
    def get_EnableAutoProxy(this : IAMNetShowConfig*, pEnableAutoProxy : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableAutoProxy.call(this, pEnableAutoProxy)
    end
    def put_EnableAutoProxy(this : IAMNetShowConfig*, enable_auto_proxy : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableAutoProxy.call(this, enable_auto_proxy)
    end
    def get_HTTPProxyHost(this : IAMNetShowConfig*, pbstrHTTPProxyHost : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HTTPProxyHost.call(this, pbstrHTTPProxyHost)
    end
    def put_HTTPProxyHost(this : IAMNetShowConfig*, bstrHTTPProxyHost : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HTTPProxyHost.call(this, bstrHTTPProxyHost)
    end
    def get_HTTPProxyPort(this : IAMNetShowConfig*, pHTTPProxyPort : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HTTPProxyPort.call(this, pHTTPProxyPort)
    end
    def put_HTTPProxyPort(this : IAMNetShowConfig*, http_proxy_port : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HTTPProxyPort.call(this, http_proxy_port)
    end
    def get_EnableMulticast(this : IAMNetShowConfig*, pEnableMulticast : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableMulticast.call(this, pEnableMulticast)
    end
    def put_EnableMulticast(this : IAMNetShowConfig*, enable_multicast : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableMulticast.call(this, enable_multicast)
    end
    def get_EnableUDP(this : IAMNetShowConfig*, pEnableUDP : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableUDP.call(this, pEnableUDP)
    end
    def put_EnableUDP(this : IAMNetShowConfig*, enable_udp : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableUDP.call(this, enable_udp)
    end
    def get_EnableTCP(this : IAMNetShowConfig*, pEnableTCP : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableTCP.call(this, pEnableTCP)
    end
    def put_EnableTCP(this : IAMNetShowConfig*, enable_tcp : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableTCP.call(this, enable_tcp)
    end
    def get_EnableHTTP(this : IAMNetShowConfig*, pEnableHTTP : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableHTTP.call(this, pEnableHTTP)
    end
    def put_EnableHTTP(this : IAMNetShowConfig*, enable_http : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableHTTP.call(this, enable_http)
    end

  end

  @[Extern]
  record IAMChannelInfoVtbl,
    query_interface : Proc(IAMChannelInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMChannelInfo*, UInt32),
    release : Proc(IAMChannelInfo*, UInt32),
    get_type_info_count : Proc(IAMChannelInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMChannelInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMChannelInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMChannelInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ChannelName : Proc(IAMChannelInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ChannelDescription : Proc(IAMChannelInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ChannelURL : Proc(IAMChannelInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ContactAddress : Proc(IAMChannelInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ContactPhone : Proc(IAMChannelInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ContactEmail : Proc(IAMChannelInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa2aa8f2-8b62-11d0-a520-000000000000")]
  record IAMChannelInfo, lpVtbl : IAMChannelInfoVtbl* do
    GUID = LibC::GUID.new(0xfa2aa8f2_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IAMChannelInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMChannelInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMChannelInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMChannelInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMChannelInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMChannelInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMChannelInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ChannelName(this : IAMChannelInfo*, pbstrChannelName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChannelName.call(this, pbstrChannelName)
    end
    def get_ChannelDescription(this : IAMChannelInfo*, pbstrChannelDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChannelDescription.call(this, pbstrChannelDescription)
    end
    def get_ChannelURL(this : IAMChannelInfo*, pbstrChannelURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChannelURL.call(this, pbstrChannelURL)
    end
    def get_ContactAddress(this : IAMChannelInfo*, pbstrContactAddress : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContactAddress.call(this, pbstrContactAddress)
    end
    def get_ContactPhone(this : IAMChannelInfo*, pbstrContactPhone : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContactPhone.call(this, pbstrContactPhone)
    end
    def get_ContactEmail(this : IAMChannelInfo*, pbstrContactEmail : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContactEmail.call(this, pbstrContactEmail)
    end

  end

  @[Extern]
  record IAMNetworkStatusVtbl,
    query_interface : Proc(IAMNetworkStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMNetworkStatus*, UInt32),
    release : Proc(IAMNetworkStatus*, UInt32),
    get_type_info_count : Proc(IAMNetworkStatus*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMNetworkStatus*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMNetworkStatus*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMNetworkStatus*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ReceivedPackets : Proc(IAMNetworkStatus*, Int32*, Win32cr::Foundation::HRESULT),
    get_RecoveredPackets : Proc(IAMNetworkStatus*, Int32*, Win32cr::Foundation::HRESULT),
    get_LostPackets : Proc(IAMNetworkStatus*, Int32*, Win32cr::Foundation::HRESULT),
    get_ReceptionQuality : Proc(IAMNetworkStatus*, Int32*, Win32cr::Foundation::HRESULT),
    get_BufferingCount : Proc(IAMNetworkStatus*, Int32*, Win32cr::Foundation::HRESULT),
    get_IsBroadcast : Proc(IAMNetworkStatus*, Int16*, Win32cr::Foundation::HRESULT),
    get_BufferingProgress : Proc(IAMNetworkStatus*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa2aa8f3-8b62-11d0-a520-000000000000")]
  record IAMNetworkStatus, lpVtbl : IAMNetworkStatusVtbl* do
    GUID = LibC::GUID.new(0xfa2aa8f3_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IAMNetworkStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMNetworkStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMNetworkStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMNetworkStatus*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMNetworkStatus*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMNetworkStatus*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMNetworkStatus*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ReceivedPackets(this : IAMNetworkStatus*, pReceivedPackets : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReceivedPackets.call(this, pReceivedPackets)
    end
    def get_RecoveredPackets(this : IAMNetworkStatus*, pRecoveredPackets : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecoveredPackets.call(this, pRecoveredPackets)
    end
    def get_LostPackets(this : IAMNetworkStatus*, pLostPackets : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LostPackets.call(this, pLostPackets)
    end
    def get_ReceptionQuality(this : IAMNetworkStatus*, pReceptionQuality : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReceptionQuality.call(this, pReceptionQuality)
    end
    def get_BufferingCount(this : IAMNetworkStatus*, pBufferingCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BufferingCount.call(this, pBufferingCount)
    end
    def get_IsBroadcast(this : IAMNetworkStatus*, pIsBroadcast : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsBroadcast.call(this, pIsBroadcast)
    end
    def get_BufferingProgress(this : IAMNetworkStatus*, pBufferingProgress : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BufferingProgress.call(this, pBufferingProgress)
    end

  end

  @[Extern]
  record IAMExtendedSeekingVtbl,
    query_interface : Proc(IAMExtendedSeeking*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMExtendedSeeking*, UInt32),
    release : Proc(IAMExtendedSeeking*, UInt32),
    get_type_info_count : Proc(IAMExtendedSeeking*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMExtendedSeeking*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMExtendedSeeking*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMExtendedSeeking*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ExSeekCapabilities : Proc(IAMExtendedSeeking*, Int32*, Win32cr::Foundation::HRESULT),
    get_MarkerCount : Proc(IAMExtendedSeeking*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentMarker : Proc(IAMExtendedSeeking*, Int32*, Win32cr::Foundation::HRESULT),
    get_marker_time : Proc(IAMExtendedSeeking*, Int32, Float64*, Win32cr::Foundation::HRESULT),
    get_marker_name : Proc(IAMExtendedSeeking*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_PlaybackSpeed : Proc(IAMExtendedSeeking*, Float64, Win32cr::Foundation::HRESULT),
    get_PlaybackSpeed : Proc(IAMExtendedSeeking*, Float64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa2aa8f9-8b62-11d0-a520-000000000000")]
  record IAMExtendedSeeking, lpVtbl : IAMExtendedSeekingVtbl* do
    GUID = LibC::GUID.new(0xfa2aa8f9_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IAMExtendedSeeking*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMExtendedSeeking*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMExtendedSeeking*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMExtendedSeeking*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMExtendedSeeking*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMExtendedSeeking*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMExtendedSeeking*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ExSeekCapabilities(this : IAMExtendedSeeking*, pExCapabilities : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExSeekCapabilities.call(this, pExCapabilities)
    end
    def get_MarkerCount(this : IAMExtendedSeeking*, pMarkerCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MarkerCount.call(this, pMarkerCount)
    end
    def get_CurrentMarker(this : IAMExtendedSeeking*, pCurrentMarker : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentMarker.call(this, pCurrentMarker)
    end
    def get_marker_time(this : IAMExtendedSeeking*, marker_num : Int32, pMarkerTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_marker_time.call(this, marker_num, pMarkerTime)
    end
    def get_marker_name(this : IAMExtendedSeeking*, marker_num : Int32, pbstrMarkerName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_marker_name.call(this, marker_num, pbstrMarkerName)
    end
    def put_PlaybackSpeed(this : IAMExtendedSeeking*, speed : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PlaybackSpeed.call(this, speed)
    end
    def get_PlaybackSpeed(this : IAMExtendedSeeking*, pSpeed : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlaybackSpeed.call(this, pSpeed)
    end

  end

  @[Extern]
  record IAMNetShowExPropsVtbl,
    query_interface : Proc(IAMNetShowExProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMNetShowExProps*, UInt32),
    release : Proc(IAMNetShowExProps*, UInt32),
    get_type_info_count : Proc(IAMNetShowExProps*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMNetShowExProps*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMNetShowExProps*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMNetShowExProps*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_SourceProtocol : Proc(IAMNetShowExProps*, Int32*, Win32cr::Foundation::HRESULT),
    get_Bandwidth : Proc(IAMNetShowExProps*, Int32*, Win32cr::Foundation::HRESULT),
    get_ErrorCorrection : Proc(IAMNetShowExProps*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CodecCount : Proc(IAMNetShowExProps*, Int32*, Win32cr::Foundation::HRESULT),
    get_codec_installed : Proc(IAMNetShowExProps*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    get_codec_description : Proc(IAMNetShowExProps*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_codec_url : Proc(IAMNetShowExProps*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CreationDate : Proc(IAMNetShowExProps*, Float64*, Win32cr::Foundation::HRESULT),
    get_SourceLink : Proc(IAMNetShowExProps*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa2aa8f5-8b62-11d0-a520-000000000000")]
  record IAMNetShowExProps, lpVtbl : IAMNetShowExPropsVtbl* do
    GUID = LibC::GUID.new(0xfa2aa8f5_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IAMNetShowExProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMNetShowExProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMNetShowExProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMNetShowExProps*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMNetShowExProps*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMNetShowExProps*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMNetShowExProps*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_SourceProtocol(this : IAMNetShowExProps*, pSourceProtocol : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceProtocol.call(this, pSourceProtocol)
    end
    def get_Bandwidth(this : IAMNetShowExProps*, pBandwidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Bandwidth.call(this, pBandwidth)
    end
    def get_ErrorCorrection(this : IAMNetShowExProps*, pbstrErrorCorrection : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorCorrection.call(this, pbstrErrorCorrection)
    end
    def get_CodecCount(this : IAMNetShowExProps*, pCodecCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CodecCount.call(this, pCodecCount)
    end
    def get_codec_installed(this : IAMNetShowExProps*, codec_num : Int32, pCodecInstalled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_installed.call(this, codec_num, pCodecInstalled)
    end
    def get_codec_description(this : IAMNetShowExProps*, codec_num : Int32, pbstrCodecDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_description.call(this, codec_num, pbstrCodecDescription)
    end
    def get_codec_url(this : IAMNetShowExProps*, codec_num : Int32, pbstrCodecURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_url.call(this, codec_num, pbstrCodecURL)
    end
    def get_CreationDate(this : IAMNetShowExProps*, pCreationDate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CreationDate.call(this, pCreationDate)
    end
    def get_SourceLink(this : IAMNetShowExProps*, pbstrSourceLink : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceLink.call(this, pbstrSourceLink)
    end

  end

  @[Extern]
  record IAMExtendedErrorInfoVtbl,
    query_interface : Proc(IAMExtendedErrorInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMExtendedErrorInfo*, UInt32),
    release : Proc(IAMExtendedErrorInfo*, UInt32),
    get_type_info_count : Proc(IAMExtendedErrorInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMExtendedErrorInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMExtendedErrorInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMExtendedErrorInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_HasError : Proc(IAMExtendedErrorInfo*, Int16*, Win32cr::Foundation::HRESULT),
    get_ErrorDescription : Proc(IAMExtendedErrorInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ErrorCode : Proc(IAMExtendedErrorInfo*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa2aa8f6-8b62-11d0-a520-000000000000")]
  record IAMExtendedErrorInfo, lpVtbl : IAMExtendedErrorInfoVtbl* do
    GUID = LibC::GUID.new(0xfa2aa8f6_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IAMExtendedErrorInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMExtendedErrorInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMExtendedErrorInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMExtendedErrorInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMExtendedErrorInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMExtendedErrorInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMExtendedErrorInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_HasError(this : IAMExtendedErrorInfo*, pHasError : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HasError.call(this, pHasError)
    end
    def get_ErrorDescription(this : IAMExtendedErrorInfo*, pbstrErrorDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorDescription.call(this, pbstrErrorDescription)
    end
    def get_ErrorCode(this : IAMExtendedErrorInfo*, pErrorCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ErrorCode.call(this, pErrorCode)
    end

  end

  @[Extern]
  record IAMMediaContentVtbl,
    query_interface : Proc(IAMMediaContent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMMediaContent*, UInt32),
    release : Proc(IAMMediaContent*, UInt32),
    get_type_info_count : Proc(IAMMediaContent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMMediaContent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMMediaContent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMMediaContent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AuthorName : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Title : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Rating : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Copyright : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BaseURL : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LogoURL : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_LogoIconURL : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_WatermarkURL : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MoreInfoURL : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MoreInfoBannerImage : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MoreInfoBannerURL : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MoreInfoText : Proc(IAMMediaContent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa2aa8f4-8b62-11d0-a520-000000000000")]
  record IAMMediaContent, lpVtbl : IAMMediaContentVtbl* do
    GUID = LibC::GUID.new(0xfa2aa8f4_u32, 0x8b62_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0x20_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IAMMediaContent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMMediaContent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMMediaContent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMMediaContent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMMediaContent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMMediaContent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMMediaContent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AuthorName(this : IAMMediaContent*, pbstrAuthorName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AuthorName.call(this, pbstrAuthorName)
    end
    def get_Title(this : IAMMediaContent*, pbstrTitle : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Title.call(this, pbstrTitle)
    end
    def get_Rating(this : IAMMediaContent*, pbstrRating : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rating.call(this, pbstrRating)
    end
    def get_Description(this : IAMMediaContent*, pbstrDescription : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, pbstrDescription)
    end
    def get_Copyright(this : IAMMediaContent*, pbstrCopyright : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Copyright.call(this, pbstrCopyright)
    end
    def get_BaseURL(this : IAMMediaContent*, pbstrBaseURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BaseURL.call(this, pbstrBaseURL)
    end
    def get_LogoURL(this : IAMMediaContent*, pbstrLogoURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LogoURL.call(this, pbstrLogoURL)
    end
    def get_LogoIconURL(this : IAMMediaContent*, pbstrLogoURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LogoIconURL.call(this, pbstrLogoURL)
    end
    def get_WatermarkURL(this : IAMMediaContent*, pbstrWatermarkURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WatermarkURL.call(this, pbstrWatermarkURL)
    end
    def get_MoreInfoURL(this : IAMMediaContent*, pbstrMoreInfoURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MoreInfoURL.call(this, pbstrMoreInfoURL)
    end
    def get_MoreInfoBannerImage(this : IAMMediaContent*, pbstrMoreInfoBannerImage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MoreInfoBannerImage.call(this, pbstrMoreInfoBannerImage)
    end
    def get_MoreInfoBannerURL(this : IAMMediaContent*, pbstrMoreInfoBannerURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MoreInfoBannerURL.call(this, pbstrMoreInfoBannerURL)
    end
    def get_MoreInfoText(this : IAMMediaContent*, pbstrMoreInfoText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MoreInfoText.call(this, pbstrMoreInfoText)
    end

  end

  @[Extern]
  record IAMMediaContent2Vtbl,
    query_interface : Proc(IAMMediaContent2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMMediaContent2*, UInt32),
    release : Proc(IAMMediaContent2*, UInt32),
    get_type_info_count : Proc(IAMMediaContent2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMMediaContent2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMMediaContent2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMMediaContent2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_MediaParameter : Proc(IAMMediaContent2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MediaParameterName : Proc(IAMMediaContent2*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_PlaylistCount : Proc(IAMMediaContent2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ce8f78c1-74d9-11d2-b09d-00a0c9a81117")]
  record IAMMediaContent2, lpVtbl : IAMMediaContent2Vtbl* do
    GUID = LibC::GUID.new(0xce8f78c1_u32, 0x74d9_u16, 0x11d2_u16, StaticArray[0xb0_u8, 0x9d_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0xa8_u8, 0x11_u8, 0x17_u8])
    def query_interface(this : IAMMediaContent2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMMediaContent2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMMediaContent2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMMediaContent2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMMediaContent2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMMediaContent2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMMediaContent2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_MediaParameter(this : IAMMediaContent2*, entry_num : Int32, bstrName : Win32cr::Foundation::BSTR, pbstrValue : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaParameter.call(this, entry_num, bstrName, pbstrValue)
    end
    def get_MediaParameterName(this : IAMMediaContent2*, entry_num : Int32, index : Int32, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaParameterName.call(this, entry_num, index, pbstrName)
    end
    def get_PlaylistCount(this : IAMMediaContent2*, pNumberEntries : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlaylistCount.call(this, pNumberEntries)
    end

  end

  @[Extern]
  record IAMNetShowPrerollVtbl,
    query_interface : Proc(IAMNetShowPreroll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMNetShowPreroll*, UInt32),
    release : Proc(IAMNetShowPreroll*, UInt32),
    get_type_info_count : Proc(IAMNetShowPreroll*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMNetShowPreroll*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMNetShowPreroll*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMNetShowPreroll*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Preroll : Proc(IAMNetShowPreroll*, Int16, Win32cr::Foundation::HRESULT),
    get_Preroll : Proc(IAMNetShowPreroll*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aae7e4e2-6388-11d1-8d93-006097c9a2b2")]
  record IAMNetShowPreroll, lpVtbl : IAMNetShowPrerollVtbl* do
    GUID = LibC::GUID.new(0xaae7e4e2_u32, 0x6388_u16, 0x11d1_u16, StaticArray[0x8d_u8, 0x93_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xa2_u8, 0xb2_u8])
    def query_interface(this : IAMNetShowPreroll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMNetShowPreroll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMNetShowPreroll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMNetShowPreroll*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMNetShowPreroll*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMNetShowPreroll*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMNetShowPreroll*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_Preroll(this : IAMNetShowPreroll*, fPreroll : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Preroll.call(this, fPreroll)
    end
    def get_Preroll(this : IAMNetShowPreroll*, pfPreroll : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Preroll.call(this, pfPreroll)
    end

  end

  @[Extern]
  record IDShowPluginVtbl,
    query_interface : Proc(IDShowPlugin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDShowPlugin*, UInt32),
    release : Proc(IDShowPlugin*, UInt32),
    get_URL : Proc(IDShowPlugin*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_UserAgent : Proc(IDShowPlugin*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4746b7c8-700e-11d1-becc-00c04fb6e937")]
  record IDShowPlugin, lpVtbl : IDShowPluginVtbl* do
    GUID = LibC::GUID.new(0x4746b7c8_u32, 0x700e_u16, 0x11d1_u16, StaticArray[0xbe_u8, 0xcc_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xe9_u8, 0x37_u8])
    def query_interface(this : IDShowPlugin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDShowPlugin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDShowPlugin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_URL(this : IDShowPlugin*, pURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_URL.call(this, pURL)
    end
    def get_UserAgent(this : IDShowPlugin*, pUserAgent : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UserAgent.call(this, pUserAgent)
    end

  end

  @[Extern]
  record IAMDirectSoundVtbl,
    query_interface : Proc(IAMDirectSound*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMDirectSound*, UInt32),
    release : Proc(IAMDirectSound*, UInt32),
    get_direct_sound_interface : Proc(IAMDirectSound*, Void**, Win32cr::Foundation::HRESULT),
    get_primary_buffer_interface : Proc(IAMDirectSound*, Void**, Win32cr::Foundation::HRESULT),
    get_secondary_buffer_interface : Proc(IAMDirectSound*, Void**, Win32cr::Foundation::HRESULT),
    release_direct_sound_interface : Proc(IAMDirectSound*, Void*, Win32cr::Foundation::HRESULT),
    release_primary_buffer_interface : Proc(IAMDirectSound*, Void*, Win32cr::Foundation::HRESULT),
    release_secondary_buffer_interface : Proc(IAMDirectSound*, Void*, Win32cr::Foundation::HRESULT),
    set_focus_window : Proc(IAMDirectSound*, Win32cr::Foundation::HWND, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_focus_window : Proc(IAMDirectSound*, Win32cr::Foundation::HWND*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("546f4260-d53e-11cf-b3f0-00aa003761c5")]
  record IAMDirectSound, lpVtbl : IAMDirectSoundVtbl* do
    GUID = LibC::GUID.new(0x546f4260_u32, 0xd53e_u16, 0x11cf_u16, StaticArray[0xb3_u8, 0xf0_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x61_u8, 0xc5_u8])
    def query_interface(this : IAMDirectSound*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMDirectSound*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMDirectSound*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_direct_sound_interface(this : IAMDirectSound*, lplpds : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_direct_sound_interface.call(this, lplpds)
    end
    def get_primary_buffer_interface(this : IAMDirectSound*, lplpdsb : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_primary_buffer_interface.call(this, lplpdsb)
    end
    def get_secondary_buffer_interface(this : IAMDirectSound*, lplpdsb : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_secondary_buffer_interface.call(this, lplpdsb)
    end
    def release_direct_sound_interface(this : IAMDirectSound*, lpds : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_direct_sound_interface.call(this, lpds)
    end
    def release_primary_buffer_interface(this : IAMDirectSound*, lpdsb : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_primary_buffer_interface.call(this, lpdsb)
    end
    def release_secondary_buffer_interface(this : IAMDirectSound*, lpdsb : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_secondary_buffer_interface.call(this, lpdsb)
    end
    def set_focus_window(this : IAMDirectSound*, param0 : Win32cr::Foundation::HWND, param1 : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_focus_window.call(this, param0, param1)
    end
    def get_focus_window(this : IAMDirectSound*, param0 : Win32cr::Foundation::HWND*, param1 : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_focus_window.call(this, param0, param1)
    end

  end

  @[Extern]
  record IAMLine21DecoderVtbl,
    query_interface : Proc(IAMLine21Decoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMLine21Decoder*, UInt32),
    release : Proc(IAMLine21Decoder*, UInt32),
    get_decoder_level : Proc(IAMLine21Decoder*, Win32cr::Media::DirectShow::AM_LINE21_CCLEVEL*, Win32cr::Foundation::HRESULT),
    get_current_service : Proc(IAMLine21Decoder*, Win32cr::Media::DirectShow::AM_LINE21_CCSERVICE*, Win32cr::Foundation::HRESULT),
    set_current_service : Proc(IAMLine21Decoder*, Win32cr::Media::DirectShow::AM_LINE21_CCSERVICE, Win32cr::Foundation::HRESULT),
    get_service_state : Proc(IAMLine21Decoder*, Win32cr::Media::DirectShow::AM_LINE21_CCSTATE*, Win32cr::Foundation::HRESULT),
    set_service_state : Proc(IAMLine21Decoder*, Win32cr::Media::DirectShow::AM_LINE21_CCSTATE, Win32cr::Foundation::HRESULT),
    get_output_format : Proc(IAMLine21Decoder*, Win32cr::Graphics::Gdi::BITMAPINFOHEADER*, Win32cr::Foundation::HRESULT),
    set_output_format : Proc(IAMLine21Decoder*, Win32cr::Graphics::Gdi::BITMAPINFO*, Win32cr::Foundation::HRESULT),
    get_background_color : Proc(IAMLine21Decoder*, UInt32*, Win32cr::Foundation::HRESULT),
    set_background_color : Proc(IAMLine21Decoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_redraw_always : Proc(IAMLine21Decoder*, Int32*, Win32cr::Foundation::HRESULT),
    set_redraw_always : Proc(IAMLine21Decoder*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_draw_background_mode : Proc(IAMLine21Decoder*, Win32cr::Media::DirectShow::AM_LINE21_DRAWBGMODE*, Win32cr::Foundation::HRESULT),
    set_draw_background_mode : Proc(IAMLine21Decoder*, Win32cr::Media::DirectShow::AM_LINE21_DRAWBGMODE, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6e8d4a21-310c-11d0-b79a-00aa003767a7")]
  record IAMLine21Decoder, lpVtbl : IAMLine21DecoderVtbl* do
    GUID = LibC::GUID.new(0x6e8d4a21_u32, 0x310c_u16, 0x11d0_u16, StaticArray[0xb7_u8, 0x9a_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x37_u8, 0x67_u8, 0xa7_u8])
    def query_interface(this : IAMLine21Decoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMLine21Decoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMLine21Decoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_decoder_level(this : IAMLine21Decoder*, lpLevel : Win32cr::Media::DirectShow::AM_LINE21_CCLEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decoder_level.call(this, lpLevel)
    end
    def get_current_service(this : IAMLine21Decoder*, lpService : Win32cr::Media::DirectShow::AM_LINE21_CCSERVICE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_service.call(this, lpService)
    end
    def set_current_service(this : IAMLine21Decoder*, service : Win32cr::Media::DirectShow::AM_LINE21_CCSERVICE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_service.call(this, service)
    end
    def get_service_state(this : IAMLine21Decoder*, lpState : Win32cr::Media::DirectShow::AM_LINE21_CCSTATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_state.call(this, lpState)
    end
    def set_service_state(this : IAMLine21Decoder*, state : Win32cr::Media::DirectShow::AM_LINE21_CCSTATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_service_state.call(this, state)
    end
    def get_output_format(this : IAMLine21Decoder*, lpbmih : Win32cr::Graphics::Gdi::BITMAPINFOHEADER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_format.call(this, lpbmih)
    end
    def set_output_format(this : IAMLine21Decoder*, lpbmi : Win32cr::Graphics::Gdi::BITMAPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_format.call(this, lpbmi)
    end
    def get_background_color(this : IAMLine21Decoder*, pdwPhysColor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_background_color.call(this, pdwPhysColor)
    end
    def set_background_color(this : IAMLine21Decoder*, dwPhysColor : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_color.call(this, dwPhysColor)
    end
    def get_redraw_always(this : IAMLine21Decoder*, lpbOption : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_redraw_always.call(this, lpbOption)
    end
    def set_redraw_always(this : IAMLine21Decoder*, bOption : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_redraw_always.call(this, bOption)
    end
    def get_draw_background_mode(this : IAMLine21Decoder*, lpMode : Win32cr::Media::DirectShow::AM_LINE21_DRAWBGMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_draw_background_mode.call(this, lpMode)
    end
    def set_draw_background_mode(this : IAMLine21Decoder*, mode : Win32cr::Media::DirectShow::AM_LINE21_DRAWBGMODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_draw_background_mode.call(this, mode)
    end

  end

  @[Extern]
  record IAMParseVtbl,
    query_interface : Proc(IAMParse*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMParse*, UInt32),
    release : Proc(IAMParse*, UInt32),
    get_parse_time : Proc(IAMParse*, Int64*, Win32cr::Foundation::HRESULT),
    set_parse_time : Proc(IAMParse*, Int64, Win32cr::Foundation::HRESULT),
    flush : Proc(IAMParse*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c47a3420-005c-11d2-9038-00a0c9697298")]
  record IAMParse, lpVtbl : IAMParseVtbl* do
    GUID = LibC::GUID.new(0xc47a3420_u32, 0x5c_u16, 0x11d2_u16, StaticArray[0x90_u8, 0x38_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x72_u8, 0x98_u8])
    def query_interface(this : IAMParse*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMParse*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMParse*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_parse_time(this : IAMParse*, prtCurrent : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parse_time.call(this, prtCurrent)
    end
    def set_parse_time(this : IAMParse*, rtCurrent : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parse_time.call(this, rtCurrent)
    end
    def flush(this : IAMParse*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this)
    end

  end

  @[Extern]
  record IAMCollectionVtbl,
    query_interface : Proc(IAMCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMCollection*, UInt32),
    release : Proc(IAMCollection*, UInt32),
    get_type_info_count : Proc(IAMCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMCollection*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMCollection*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMCollection*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IAMCollection*, Int32*, Win32cr::Foundation::HRESULT),
    item : Proc(IAMCollection*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IAMCollection*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b9-0ad4-11ce-b03a-0020af0ba770")]
  record IAMCollection, lpVtbl : IAMCollectionVtbl* do
    GUID = LibC::GUID.new(0x56a868b9_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IAMCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMCollection*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMCollection*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMCollection*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMCollection*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IAMCollection*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, plCount)
    end
    def item(this : IAMCollection*, lItem : Int32, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, lItem, ppUnk)
    end
    def get__NewEnum(this : IAMCollection*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppUnk)
    end

  end

  @[Extern]
  record IMediaControlVtbl,
    query_interface : Proc(IMediaControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaControl*, UInt32),
    release : Proc(IMediaControl*, UInt32),
    get_type_info_count : Proc(IMediaControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMediaControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMediaControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMediaControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    run : Proc(IMediaControl*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMediaControl*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMediaControl*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMediaControl*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    render_file : Proc(IMediaControl*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_source_filter : Proc(IMediaControl*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_FilterCollection : Proc(IMediaControl*, Void**, Win32cr::Foundation::HRESULT),
    get_RegFilterCollection : Proc(IMediaControl*, Void**, Win32cr::Foundation::HRESULT),
    stop_when_ready : Proc(IMediaControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b1-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaControl, lpVtbl : IMediaControlVtbl* do
    GUID = LibC::GUID.new(0x56a868b1_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMediaControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMediaControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMediaControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMediaControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def run(this : IMediaControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMediaControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMediaControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_state(this : IMediaControl*, msTimeout : Int32, pfs : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, msTimeout, pfs)
    end
    def render_file(this : IMediaControl*, strFilename : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render_file.call(this, strFilename)
    end
    def add_source_filter(this : IMediaControl*, strFilename : Win32cr::Foundation::BSTR, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_source_filter.call(this, strFilename, ppUnk)
    end
    def get_FilterCollection(this : IMediaControl*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FilterCollection.call(this, ppUnk)
    end
    def get_RegFilterCollection(this : IMediaControl*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RegFilterCollection.call(this, ppUnk)
    end
    def stop_when_ready(this : IMediaControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_when_ready.call(this)
    end

  end

  @[Extern]
  record IMediaEventVtbl,
    query_interface : Proc(IMediaEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaEvent*, UInt32),
    release : Proc(IMediaEvent*, UInt32),
    get_type_info_count : Proc(IMediaEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMediaEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMediaEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMediaEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_handle : Proc(IMediaEvent*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    get_event : Proc(IMediaEvent*, Int32*, LibC::IntPtrT*, LibC::IntPtrT*, Int32, Win32cr::Foundation::HRESULT),
    wait_for_completion : Proc(IMediaEvent*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    cancel_default_handling : Proc(IMediaEvent*, Int32, Win32cr::Foundation::HRESULT),
    restore_default_handling : Proc(IMediaEvent*, Int32, Win32cr::Foundation::HRESULT),
    free_event_params : Proc(IMediaEvent*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b6-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaEvent, lpVtbl : IMediaEventVtbl* do
    GUID = LibC::GUID.new(0x56a868b6_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMediaEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMediaEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMediaEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMediaEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_event_handle(this : IMediaEvent*, hEvent : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_handle.call(this, hEvent)
    end
    def get_event(this : IMediaEvent*, lEventCode : Int32*, lParam1 : LibC::IntPtrT*, lParam2 : LibC::IntPtrT*, msTimeout : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, lEventCode, lParam1, lParam2, msTimeout)
    end
    def wait_for_completion(this : IMediaEvent*, msTimeout : Int32, pEvCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_completion.call(this, msTimeout, pEvCode)
    end
    def cancel_default_handling(this : IMediaEvent*, lEvCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_default_handling.call(this, lEvCode)
    end
    def restore_default_handling(this : IMediaEvent*, lEvCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_default_handling.call(this, lEvCode)
    end
    def free_event_params(this : IMediaEvent*, lEvCode : Int32, lParam1 : LibC::IntPtrT, lParam2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_event_params.call(this, lEvCode, lParam1, lParam2)
    end

  end

  @[Extern]
  record IMediaEventExVtbl,
    query_interface : Proc(IMediaEventEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaEventEx*, UInt32),
    release : Proc(IMediaEventEx*, UInt32),
    get_type_info_count : Proc(IMediaEventEx*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMediaEventEx*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMediaEventEx*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMediaEventEx*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_handle : Proc(IMediaEventEx*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    get_event : Proc(IMediaEventEx*, Int32*, LibC::IntPtrT*, LibC::IntPtrT*, Int32, Win32cr::Foundation::HRESULT),
    wait_for_completion : Proc(IMediaEventEx*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    cancel_default_handling : Proc(IMediaEventEx*, Int32, Win32cr::Foundation::HRESULT),
    restore_default_handling : Proc(IMediaEventEx*, Int32, Win32cr::Foundation::HRESULT),
    free_event_params : Proc(IMediaEventEx*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    set_notify_window : Proc(IMediaEventEx*, LibC::IntPtrT, Int32, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    set_notify_flags : Proc(IMediaEventEx*, Int32, Win32cr::Foundation::HRESULT),
    get_notify_flags : Proc(IMediaEventEx*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868c0-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaEventEx, lpVtbl : IMediaEventExVtbl* do
    GUID = LibC::GUID.new(0x56a868c0_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaEventEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaEventEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaEventEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMediaEventEx*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMediaEventEx*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMediaEventEx*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMediaEventEx*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_event_handle(this : IMediaEventEx*, hEvent : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_handle.call(this, hEvent)
    end
    def get_event(this : IMediaEventEx*, lEventCode : Int32*, lParam1 : LibC::IntPtrT*, lParam2 : LibC::IntPtrT*, msTimeout : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, lEventCode, lParam1, lParam2, msTimeout)
    end
    def wait_for_completion(this : IMediaEventEx*, msTimeout : Int32, pEvCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_for_completion.call(this, msTimeout, pEvCode)
    end
    def cancel_default_handling(this : IMediaEventEx*, lEvCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_default_handling.call(this, lEvCode)
    end
    def restore_default_handling(this : IMediaEventEx*, lEvCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_default_handling.call(this, lEvCode)
    end
    def free_event_params(this : IMediaEventEx*, lEvCode : Int32, lParam1 : LibC::IntPtrT, lParam2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_event_params.call(this, lEvCode, lParam1, lParam2)
    end
    def set_notify_window(this : IMediaEventEx*, hwnd : LibC::IntPtrT, lMsg : Int32, lInstanceData : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_window.call(this, hwnd, lMsg, lInstanceData)
    end
    def set_notify_flags(this : IMediaEventEx*, lNoNotifyFlags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify_flags.call(this, lNoNotifyFlags)
    end
    def get_notify_flags(this : IMediaEventEx*, lplNoNotifyFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_notify_flags.call(this, lplNoNotifyFlags)
    end

  end

  @[Extern]
  record IMediaPositionVtbl,
    query_interface : Proc(IMediaPosition*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaPosition*, UInt32),
    release : Proc(IMediaPosition*, UInt32),
    get_type_info_count : Proc(IMediaPosition*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMediaPosition*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMediaPosition*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMediaPosition*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Duration : Proc(IMediaPosition*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMediaPosition*, Float64, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMediaPosition*, Float64*, Win32cr::Foundation::HRESULT),
    get_StopTime : Proc(IMediaPosition*, Float64*, Win32cr::Foundation::HRESULT),
    put_StopTime : Proc(IMediaPosition*, Float64, Win32cr::Foundation::HRESULT),
    get_PrerollTime : Proc(IMediaPosition*, Float64*, Win32cr::Foundation::HRESULT),
    put_PrerollTime : Proc(IMediaPosition*, Float64, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMediaPosition*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMediaPosition*, Float64*, Win32cr::Foundation::HRESULT),
    can_seek_forward : Proc(IMediaPosition*, Int32*, Win32cr::Foundation::HRESULT),
    can_seek_backward : Proc(IMediaPosition*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b2-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaPosition, lpVtbl : IMediaPositionVtbl* do
    GUID = LibC::GUID.new(0x56a868b2_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaPosition*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaPosition*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaPosition*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMediaPosition*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMediaPosition*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMediaPosition*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMediaPosition*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Duration(this : IMediaPosition*, plength : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Duration.call(this, plength)
    end
    def put_CurrentPosition(this : IMediaPosition*, llTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, llTime)
    end
    def get_CurrentPosition(this : IMediaPosition*, pllTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, pllTime)
    end
    def get_StopTime(this : IMediaPosition*, pllTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StopTime.call(this, pllTime)
    end
    def put_StopTime(this : IMediaPosition*, llTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StopTime.call(this, llTime)
    end
    def get_PrerollTime(this : IMediaPosition*, pllTime : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrerollTime.call(this, pllTime)
    end
    def put_PrerollTime(this : IMediaPosition*, llTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrerollTime.call(this, llTime)
    end
    def put_Rate(this : IMediaPosition*, dRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, dRate)
    end
    def get_Rate(this : IMediaPosition*, pdRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, pdRate)
    end
    def can_seek_forward(this : IMediaPosition*, pCanSeekForward : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_seek_forward.call(this, pCanSeekForward)
    end
    def can_seek_backward(this : IMediaPosition*, pCanSeekBackward : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_seek_backward.call(this, pCanSeekBackward)
    end

  end

  @[Extern]
  record IBasicAudioVtbl,
    query_interface : Proc(IBasicAudio*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBasicAudio*, UInt32),
    release : Proc(IBasicAudio*, UInt32),
    get_type_info_count : Proc(IBasicAudio*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBasicAudio*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBasicAudio*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBasicAudio*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Volume : Proc(IBasicAudio*, Int32, Win32cr::Foundation::HRESULT),
    get_Volume : Proc(IBasicAudio*, Int32*, Win32cr::Foundation::HRESULT),
    put_Balance : Proc(IBasicAudio*, Int32, Win32cr::Foundation::HRESULT),
    get_Balance : Proc(IBasicAudio*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b3-0ad4-11ce-b03a-0020af0ba770")]
  record IBasicAudio, lpVtbl : IBasicAudioVtbl* do
    GUID = LibC::GUID.new(0x56a868b3_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IBasicAudio*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBasicAudio*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBasicAudio*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBasicAudio*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBasicAudio*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBasicAudio*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBasicAudio*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_Volume(this : IBasicAudio*, lVolume : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Volume.call(this, lVolume)
    end
    def get_Volume(this : IBasicAudio*, plVolume : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Volume.call(this, plVolume)
    end
    def put_Balance(this : IBasicAudio*, lBalance : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Balance.call(this, lBalance)
    end
    def get_Balance(this : IBasicAudio*, plBalance : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Balance.call(this, plBalance)
    end

  end

  @[Extern]
  record IVideoWindowVtbl,
    query_interface : Proc(IVideoWindow*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVideoWindow*, UInt32),
    release : Proc(IVideoWindow*, UInt32),
    get_type_info_count : Proc(IVideoWindow*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IVideoWindow*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IVideoWindow*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IVideoWindow*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Caption : Proc(IVideoWindow*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Caption : Proc(IVideoWindow*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_WindowStyle : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_WindowStyle : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_WindowStyleEx : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_WindowStyleEx : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_AutoShow : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_AutoShow : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_WindowState : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_WindowState : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_BackgroundPalette : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_BackgroundPalette : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_Visible : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_Visible : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_Left : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_Left : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_Width : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_Width : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_Top : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_Top : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_Height : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_Height : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_Owner : Proc(IVideoWindow*, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    get_Owner : Proc(IVideoWindow*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    put_MessageDrain : Proc(IVideoWindow*, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    get_MessageDrain : Proc(IVideoWindow*, LibC::IntPtrT*, Win32cr::Foundation::HRESULT),
    get_BorderColor : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_BorderColor : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    get_FullScreenMode : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT),
    put_FullScreenMode : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    set_window_foreground : Proc(IVideoWindow*, Int32, Win32cr::Foundation::HRESULT),
    notify_owner_message : Proc(IVideoWindow*, LibC::IntPtrT, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    set_window_position : Proc(IVideoWindow*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_window_position : Proc(IVideoWindow*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_min_ideal_image_size : Proc(IVideoWindow*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_max_ideal_image_size : Proc(IVideoWindow*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_restore_position : Proc(IVideoWindow*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    hide_cursor : Proc(IVideoWindow*, Win32cr::Media::DirectShow::OA_BOOL, Win32cr::Foundation::HRESULT),
    is_cursor_hidden : Proc(IVideoWindow*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b4-0ad4-11ce-b03a-0020af0ba770")]
  record IVideoWindow, lpVtbl : IVideoWindowVtbl* do
    GUID = LibC::GUID.new(0x56a868b4_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IVideoWindow*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVideoWindow*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVideoWindow*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IVideoWindow*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IVideoWindow*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IVideoWindow*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IVideoWindow*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def put_Caption(this : IVideoWindow*, strCaption : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Caption.call(this, strCaption)
    end
    def get_Caption(this : IVideoWindow*, strCaption : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Caption.call(this, strCaption)
    end
    def put_WindowStyle(this : IVideoWindow*, window_style : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WindowStyle.call(this, window_style)
    end
    def get_WindowStyle(this : IVideoWindow*, window_style : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WindowStyle.call(this, window_style)
    end
    def put_WindowStyleEx(this : IVideoWindow*, window_style_ex : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WindowStyleEx.call(this, window_style_ex)
    end
    def get_WindowStyleEx(this : IVideoWindow*, window_style_ex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WindowStyleEx.call(this, window_style_ex)
    end
    def put_AutoShow(this : IVideoWindow*, auto_show : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoShow.call(this, auto_show)
    end
    def get_AutoShow(this : IVideoWindow*, auto_show : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoShow.call(this, auto_show)
    end
    def put_WindowState(this : IVideoWindow*, window_state : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WindowState.call(this, window_state)
    end
    def get_WindowState(this : IVideoWindow*, window_state : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WindowState.call(this, window_state)
    end
    def put_BackgroundPalette(this : IVideoWindow*, background_palette : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BackgroundPalette.call(this, background_palette)
    end
    def get_BackgroundPalette(this : IVideoWindow*, pBackgroundPalette : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BackgroundPalette.call(this, pBackgroundPalette)
    end
    def put_Visible(this : IVideoWindow*, visible : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Visible.call(this, visible)
    end
    def get_Visible(this : IVideoWindow*, pVisible : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Visible.call(this, pVisible)
    end
    def put_Left(this : IVideoWindow*, left : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Left.call(this, left)
    end
    def get_Left(this : IVideoWindow*, pLeft : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Left.call(this, pLeft)
    end
    def put_Width(this : IVideoWindow*, width : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Width.call(this, width)
    end
    def get_Width(this : IVideoWindow*, pWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Width.call(this, pWidth)
    end
    def put_Top(this : IVideoWindow*, top : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Top.call(this, top)
    end
    def get_Top(this : IVideoWindow*, pTop : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Top.call(this, pTop)
    end
    def put_Height(this : IVideoWindow*, height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Height.call(this, height)
    end
    def get_Height(this : IVideoWindow*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Height.call(this, pHeight)
    end
    def put_Owner(this : IVideoWindow*, owner : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Owner.call(this, owner)
    end
    def get_Owner(this : IVideoWindow*, owner : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Owner.call(this, owner)
    end
    def put_MessageDrain(this : IVideoWindow*, drain : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MessageDrain.call(this, drain)
    end
    def get_MessageDrain(this : IVideoWindow*, drain : LibC::IntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MessageDrain.call(this, drain)
    end
    def get_BorderColor(this : IVideoWindow*, color : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BorderColor.call(this, color)
    end
    def put_BorderColor(this : IVideoWindow*, color : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BorderColor.call(this, color)
    end
    def get_FullScreenMode(this : IVideoWindow*, full_screen_mode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullScreenMode.call(this, full_screen_mode)
    end
    def put_FullScreenMode(this : IVideoWindow*, full_screen_mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FullScreenMode.call(this, full_screen_mode)
    end
    def set_window_foreground(this : IVideoWindow*, focus : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_window_foreground.call(this, focus)
    end
    def notify_owner_message(this : IVideoWindow*, hwnd : LibC::IntPtrT, uMsg : Int32, wParam : LibC::IntPtrT, lParam : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_owner_message.call(this, hwnd, uMsg, wParam, lParam)
    end
    def set_window_position(this : IVideoWindow*, left : Int32, top : Int32, width : Int32, height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_window_position.call(this, left, top, width, height)
    end
    def get_window_position(this : IVideoWindow*, pLeft : Int32*, pTop : Int32*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_window_position.call(this, pLeft, pTop, pWidth, pHeight)
    end
    def get_min_ideal_image_size(this : IVideoWindow*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_min_ideal_image_size.call(this, pWidth, pHeight)
    end
    def get_max_ideal_image_size(this : IVideoWindow*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_ideal_image_size.call(this, pWidth, pHeight)
    end
    def get_restore_position(this : IVideoWindow*, pLeft : Int32*, pTop : Int32*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_restore_position.call(this, pLeft, pTop, pWidth, pHeight)
    end
    def hide_cursor(this : IVideoWindow*, hide_cursor : Win32cr::Media::DirectShow::OA_BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hide_cursor.call(this, hide_cursor)
    end
    def is_cursor_hidden(this : IVideoWindow*, cursor_hidden : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_cursor_hidden.call(this, cursor_hidden)
    end

  end

  @[Extern]
  record IBasicVideoVtbl,
    query_interface : Proc(IBasicVideo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBasicVideo*, UInt32),
    release : Proc(IBasicVideo*, UInt32),
    get_type_info_count : Proc(IBasicVideo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBasicVideo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBasicVideo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBasicVideo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AvgTimePerFrame : Proc(IBasicVideo*, Float64*, Win32cr::Foundation::HRESULT),
    get_BitRate : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    get_BitErrorRate : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    get_VideoWidth : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    get_VideoHeight : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceLeft : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceLeft : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceWidth : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceWidth : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceTop : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceTop : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceHeight : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceHeight : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationLeft : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationLeft : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationWidth : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationWidth : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationTop : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationTop : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationHeight : Proc(IBasicVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationHeight : Proc(IBasicVideo*, Int32*, Win32cr::Foundation::HRESULT),
    set_source_position : Proc(IBasicVideo*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_source_position : Proc(IBasicVideo*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_default_source_position : Proc(IBasicVideo*, Win32cr::Foundation::HRESULT),
    set_destination_position : Proc(IBasicVideo*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_destination_position : Proc(IBasicVideo*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_default_destination_position : Proc(IBasicVideo*, Win32cr::Foundation::HRESULT),
    get_video_size : Proc(IBasicVideo*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_video_palette_entries : Proc(IBasicVideo*, Int32, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_current_image : Proc(IBasicVideo*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    is_using_default_source : Proc(IBasicVideo*, Win32cr::Foundation::HRESULT),
    is_using_default_destination : Proc(IBasicVideo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b5-0ad4-11ce-b03a-0020af0ba770")]
  record IBasicVideo, lpVtbl : IBasicVideoVtbl* do
    GUID = LibC::GUID.new(0x56a868b5_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IBasicVideo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBasicVideo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBasicVideo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBasicVideo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBasicVideo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBasicVideo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBasicVideo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AvgTimePerFrame(this : IBasicVideo*, pAvgTimePerFrame : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvgTimePerFrame.call(this, pAvgTimePerFrame)
    end
    def get_BitRate(this : IBasicVideo*, pBitRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BitRate.call(this, pBitRate)
    end
    def get_BitErrorRate(this : IBasicVideo*, pBitErrorRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BitErrorRate.call(this, pBitErrorRate)
    end
    def get_VideoWidth(this : IBasicVideo*, pVideoWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoWidth.call(this, pVideoWidth)
    end
    def get_VideoHeight(this : IBasicVideo*, pVideoHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoHeight.call(this, pVideoHeight)
    end
    def put_SourceLeft(this : IBasicVideo*, source_left : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceLeft.call(this, source_left)
    end
    def get_SourceLeft(this : IBasicVideo*, pSourceLeft : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceLeft.call(this, pSourceLeft)
    end
    def put_SourceWidth(this : IBasicVideo*, source_width : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceWidth.call(this, source_width)
    end
    def get_SourceWidth(this : IBasicVideo*, pSourceWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceWidth.call(this, pSourceWidth)
    end
    def put_SourceTop(this : IBasicVideo*, source_top : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceTop.call(this, source_top)
    end
    def get_SourceTop(this : IBasicVideo*, pSourceTop : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceTop.call(this, pSourceTop)
    end
    def put_SourceHeight(this : IBasicVideo*, source_height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceHeight.call(this, source_height)
    end
    def get_SourceHeight(this : IBasicVideo*, pSourceHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceHeight.call(this, pSourceHeight)
    end
    def put_DestinationLeft(this : IBasicVideo*, destination_left : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationLeft.call(this, destination_left)
    end
    def get_DestinationLeft(this : IBasicVideo*, pDestinationLeft : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationLeft.call(this, pDestinationLeft)
    end
    def put_DestinationWidth(this : IBasicVideo*, destination_width : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationWidth.call(this, destination_width)
    end
    def get_DestinationWidth(this : IBasicVideo*, pDestinationWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationWidth.call(this, pDestinationWidth)
    end
    def put_DestinationTop(this : IBasicVideo*, destination_top : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationTop.call(this, destination_top)
    end
    def get_DestinationTop(this : IBasicVideo*, pDestinationTop : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationTop.call(this, pDestinationTop)
    end
    def put_DestinationHeight(this : IBasicVideo*, destination_height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationHeight.call(this, destination_height)
    end
    def get_DestinationHeight(this : IBasicVideo*, pDestinationHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationHeight.call(this, pDestinationHeight)
    end
    def set_source_position(this : IBasicVideo*, left : Int32, top : Int32, width : Int32, height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_position.call(this, left, top, width, height)
    end
    def get_source_position(this : IBasicVideo*, pLeft : Int32*, pTop : Int32*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_position.call(this, pLeft, pTop, pWidth, pHeight)
    end
    def set_default_source_position(this : IBasicVideo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_source_position.call(this)
    end
    def set_destination_position(this : IBasicVideo*, left : Int32, top : Int32, width : Int32, height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_destination_position.call(this, left, top, width, height)
    end
    def get_destination_position(this : IBasicVideo*, pLeft : Int32*, pTop : Int32*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_destination_position.call(this, pLeft, pTop, pWidth, pHeight)
    end
    def set_default_destination_position(this : IBasicVideo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_destination_position.call(this)
    end
    def get_video_size(this : IBasicVideo*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_size.call(this, pWidth, pHeight)
    end
    def get_video_palette_entries(this : IBasicVideo*, start_index : Int32, entries : Int32, pRetrieved : Int32*, pPalette : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_palette_entries.call(this, start_index, entries, pRetrieved, pPalette)
    end
    def get_current_image(this : IBasicVideo*, pBufferSize : Int32*, pDIBImage : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_image.call(this, pBufferSize, pDIBImage)
    end
    def is_using_default_source(this : IBasicVideo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_default_source.call(this)
    end
    def is_using_default_destination(this : IBasicVideo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_default_destination.call(this)
    end

  end

  @[Extern]
  record IBasicVideo2Vtbl,
    query_interface : Proc(IBasicVideo2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBasicVideo2*, UInt32),
    release : Proc(IBasicVideo2*, UInt32),
    get_type_info_count : Proc(IBasicVideo2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBasicVideo2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBasicVideo2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBasicVideo2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AvgTimePerFrame : Proc(IBasicVideo2*, Float64*, Win32cr::Foundation::HRESULT),
    get_BitRate : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    get_BitErrorRate : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    get_VideoWidth : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    get_VideoHeight : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceLeft : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceLeft : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceWidth : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceWidth : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceTop : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceTop : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceHeight : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceHeight : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationLeft : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationLeft : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationWidth : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationWidth : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationTop : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationTop : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    put_DestinationHeight : Proc(IBasicVideo2*, Int32, Win32cr::Foundation::HRESULT),
    get_DestinationHeight : Proc(IBasicVideo2*, Int32*, Win32cr::Foundation::HRESULT),
    set_source_position : Proc(IBasicVideo2*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_source_position : Proc(IBasicVideo2*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_default_source_position : Proc(IBasicVideo2*, Win32cr::Foundation::HRESULT),
    set_destination_position : Proc(IBasicVideo2*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_destination_position : Proc(IBasicVideo2*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_default_destination_position : Proc(IBasicVideo2*, Win32cr::Foundation::HRESULT),
    get_video_size : Proc(IBasicVideo2*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_video_palette_entries : Proc(IBasicVideo2*, Int32, Int32, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_current_image : Proc(IBasicVideo2*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    is_using_default_source : Proc(IBasicVideo2*, Win32cr::Foundation::HRESULT),
    is_using_default_destination : Proc(IBasicVideo2*, Win32cr::Foundation::HRESULT),
    get_preferred_aspect_ratio : Proc(IBasicVideo2*, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("329bb360-f6ea-11d1-9038-00a0c9697298")]
  record IBasicVideo2, lpVtbl : IBasicVideo2Vtbl* do
    GUID = LibC::GUID.new(0x329bb360_u32, 0xf6ea_u16, 0x11d1_u16, StaticArray[0x90_u8, 0x38_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x72_u8, 0x98_u8])
    def query_interface(this : IBasicVideo2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBasicVideo2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBasicVideo2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBasicVideo2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBasicVideo2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBasicVideo2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBasicVideo2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AvgTimePerFrame(this : IBasicVideo2*, pAvgTimePerFrame : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvgTimePerFrame.call(this, pAvgTimePerFrame)
    end
    def get_BitRate(this : IBasicVideo2*, pBitRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BitRate.call(this, pBitRate)
    end
    def get_BitErrorRate(this : IBasicVideo2*, pBitErrorRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BitErrorRate.call(this, pBitErrorRate)
    end
    def get_VideoWidth(this : IBasicVideo2*, pVideoWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoWidth.call(this, pVideoWidth)
    end
    def get_VideoHeight(this : IBasicVideo2*, pVideoHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoHeight.call(this, pVideoHeight)
    end
    def put_SourceLeft(this : IBasicVideo2*, source_left : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceLeft.call(this, source_left)
    end
    def get_SourceLeft(this : IBasicVideo2*, pSourceLeft : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceLeft.call(this, pSourceLeft)
    end
    def put_SourceWidth(this : IBasicVideo2*, source_width : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceWidth.call(this, source_width)
    end
    def get_SourceWidth(this : IBasicVideo2*, pSourceWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceWidth.call(this, pSourceWidth)
    end
    def put_SourceTop(this : IBasicVideo2*, source_top : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceTop.call(this, source_top)
    end
    def get_SourceTop(this : IBasicVideo2*, pSourceTop : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceTop.call(this, pSourceTop)
    end
    def put_SourceHeight(this : IBasicVideo2*, source_height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceHeight.call(this, source_height)
    end
    def get_SourceHeight(this : IBasicVideo2*, pSourceHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceHeight.call(this, pSourceHeight)
    end
    def put_DestinationLeft(this : IBasicVideo2*, destination_left : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationLeft.call(this, destination_left)
    end
    def get_DestinationLeft(this : IBasicVideo2*, pDestinationLeft : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationLeft.call(this, pDestinationLeft)
    end
    def put_DestinationWidth(this : IBasicVideo2*, destination_width : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationWidth.call(this, destination_width)
    end
    def get_DestinationWidth(this : IBasicVideo2*, pDestinationWidth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationWidth.call(this, pDestinationWidth)
    end
    def put_DestinationTop(this : IBasicVideo2*, destination_top : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationTop.call(this, destination_top)
    end
    def get_DestinationTop(this : IBasicVideo2*, pDestinationTop : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationTop.call(this, pDestinationTop)
    end
    def put_DestinationHeight(this : IBasicVideo2*, destination_height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DestinationHeight.call(this, destination_height)
    end
    def get_DestinationHeight(this : IBasicVideo2*, pDestinationHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DestinationHeight.call(this, pDestinationHeight)
    end
    def set_source_position(this : IBasicVideo2*, left : Int32, top : Int32, width : Int32, height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_position.call(this, left, top, width, height)
    end
    def get_source_position(this : IBasicVideo2*, pLeft : Int32*, pTop : Int32*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_position.call(this, pLeft, pTop, pWidth, pHeight)
    end
    def set_default_source_position(this : IBasicVideo2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_source_position.call(this)
    end
    def set_destination_position(this : IBasicVideo2*, left : Int32, top : Int32, width : Int32, height : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_destination_position.call(this, left, top, width, height)
    end
    def get_destination_position(this : IBasicVideo2*, pLeft : Int32*, pTop : Int32*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_destination_position.call(this, pLeft, pTop, pWidth, pHeight)
    end
    def set_default_destination_position(this : IBasicVideo2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_destination_position.call(this)
    end
    def get_video_size(this : IBasicVideo2*, pWidth : Int32*, pHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_size.call(this, pWidth, pHeight)
    end
    def get_video_palette_entries(this : IBasicVideo2*, start_index : Int32, entries : Int32, pRetrieved : Int32*, pPalette : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_palette_entries.call(this, start_index, entries, pRetrieved, pPalette)
    end
    def get_current_image(this : IBasicVideo2*, pBufferSize : Int32*, pDIBImage : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_image.call(this, pBufferSize, pDIBImage)
    end
    def is_using_default_source(this : IBasicVideo2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_default_source.call(this)
    end
    def is_using_default_destination(this : IBasicVideo2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_default_destination.call(this)
    end
    def get_preferred_aspect_ratio(this : IBasicVideo2*, plAspectX : Int32*, plAspectY : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preferred_aspect_ratio.call(this, plAspectX, plAspectY)
    end

  end

  @[Extern]
  record IDeferredCommandVtbl,
    query_interface : Proc(IDeferredCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDeferredCommand*, UInt32),
    release : Proc(IDeferredCommand*, UInt32),
    cancel : Proc(IDeferredCommand*, Win32cr::Foundation::HRESULT),
    confidence : Proc(IDeferredCommand*, Int32*, Win32cr::Foundation::HRESULT),
    postpone : Proc(IDeferredCommand*, Float64, Win32cr::Foundation::HRESULT),
    get_h_result : Proc(IDeferredCommand*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b8-0ad4-11ce-b03a-0020af0ba770")]
  record IDeferredCommand, lpVtbl : IDeferredCommandVtbl* do
    GUID = LibC::GUID.new(0x56a868b8_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IDeferredCommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDeferredCommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDeferredCommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def cancel(this : IDeferredCommand*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end
    def confidence(this : IDeferredCommand*, pConfidence : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.confidence.call(this, pConfidence)
    end
    def postpone(this : IDeferredCommand*, newtime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.postpone.call(this, newtime)
    end
    def get_h_result(this : IDeferredCommand*, phrResult : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_h_result.call(this, phrResult)
    end

  end

  @[Extern]
  record IQueueCommandVtbl,
    query_interface : Proc(IQueueCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQueueCommand*, UInt32),
    release : Proc(IQueueCommand*, UInt32),
    invoke_at_stream_time : Proc(IQueueCommand*, Void**, Float64, LibC::GUID*, Int32, Int16, Int32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    invoke_at_presentation_time : Proc(IQueueCommand*, Void**, Float64, LibC::GUID*, Int32, Int16, Int32, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868b7-0ad4-11ce-b03a-0020af0ba770")]
  record IQueueCommand, lpVtbl : IQueueCommandVtbl* do
    GUID = LibC::GUID.new(0x56a868b7_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IQueueCommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQueueCommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQueueCommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def invoke_at_stream_time(this : IQueueCommand*, pCmd : Void**, time : Float64, iid : LibC::GUID*, dispidMethod : Int32, wFlags : Int16, cArgs : Int32, pDispParams : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*, puArgErr : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_at_stream_time.call(this, pCmd, time, iid, dispidMethod, wFlags, cArgs, pDispParams, pvarResult, puArgErr)
    end
    def invoke_at_presentation_time(this : IQueueCommand*, pCmd : Void**, time : Float64, iid : LibC::GUID*, dispidMethod : Int32, wFlags : Int16, cArgs : Int32, pDispParams : Win32cr::System::Com::VARIANT*, pvarResult : Win32cr::System::Com::VARIANT*, puArgErr : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_at_presentation_time.call(this, pCmd, time, iid, dispidMethod, wFlags, cArgs, pDispParams, pvarResult, puArgErr)
    end

  end

  @[Extern]
  record IFilterInfoVtbl,
    query_interface : Proc(IFilterInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFilterInfo*, UInt32),
    release : Proc(IFilterInfo*, UInt32),
    get_type_info_count : Proc(IFilterInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFilterInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFilterInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFilterInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    find_pin : Proc(IFilterInfo*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFilterInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VendorInfo : Proc(IFilterInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Filter : Proc(IFilterInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_Pins : Proc(IFilterInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_IsFileSource : Proc(IFilterInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_Filename : Proc(IFilterInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Filename : Proc(IFilterInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868ba-0ad4-11ce-b03a-0020af0ba770")]
  record IFilterInfo, lpVtbl : IFilterInfoVtbl* do
    GUID = LibC::GUID.new(0x56a868ba_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IFilterInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFilterInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFilterInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFilterInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFilterInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFilterInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFilterInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def find_pin(this : IFilterInfo*, strPinID : Win32cr::Foundation::BSTR, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_pin.call(this, strPinID, ppUnk)
    end
    def get_Name(this : IFilterInfo*, strName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, strName)
    end
    def get_VendorInfo(this : IFilterInfo*, strVendorInfo : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VendorInfo.call(this, strVendorInfo)
    end
    def get_Filter(this : IFilterInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Filter.call(this, ppUnk)
    end
    def get_Pins(this : IFilterInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Pins.call(this, ppUnk)
    end
    def get_IsFileSource(this : IFilterInfo*, pbIsSource : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsFileSource.call(this, pbIsSource)
    end
    def get_Filename(this : IFilterInfo*, pstrFilename : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Filename.call(this, pstrFilename)
    end
    def put_Filename(this : IFilterInfo*, strFilename : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Filename.call(this, strFilename)
    end

  end

  @[Extern]
  record IRegFilterInfoVtbl,
    query_interface : Proc(IRegFilterInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRegFilterInfo*, UInt32),
    release : Proc(IRegFilterInfo*, UInt32),
    get_type_info_count : Proc(IRegFilterInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IRegFilterInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IRegFilterInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IRegFilterInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IRegFilterInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    filter : Proc(IRegFilterInfo*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868bb-0ad4-11ce-b03a-0020af0ba770")]
  record IRegFilterInfo, lpVtbl : IRegFilterInfoVtbl* do
    GUID = LibC::GUID.new(0x56a868bb_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IRegFilterInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRegFilterInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRegFilterInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IRegFilterInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IRegFilterInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IRegFilterInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IRegFilterInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IRegFilterInfo*, strName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, strName)
    end
    def filter(this : IRegFilterInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.filter.call(this, ppUnk)
    end

  end

  @[Extern]
  record IMediaTypeInfoVtbl,
    query_interface : Proc(IMediaTypeInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaTypeInfo*, UInt32),
    release : Proc(IMediaTypeInfo*, UInt32),
    get_type_info_count : Proc(IMediaTypeInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMediaTypeInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMediaTypeInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMediaTypeInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IMediaTypeInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Subtype : Proc(IMediaTypeInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868bc-0ad4-11ce-b03a-0020af0ba770")]
  record IMediaTypeInfo, lpVtbl : IMediaTypeInfoVtbl* do
    GUID = LibC::GUID.new(0x56a868bc_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IMediaTypeInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaTypeInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaTypeInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMediaTypeInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMediaTypeInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMediaTypeInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMediaTypeInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Type(this : IMediaTypeInfo*, strType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, strType)
    end
    def get_Subtype(this : IMediaTypeInfo*, strType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Subtype.call(this, strType)
    end

  end

  @[Extern]
  record IPinInfoVtbl,
    query_interface : Proc(IPinInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPinInfo*, UInt32),
    release : Proc(IPinInfo*, UInt32),
    get_type_info_count : Proc(IPinInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IPinInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IPinInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IPinInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Pin : Proc(IPinInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_ConnectedTo : Proc(IPinInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_ConnectionMediaType : Proc(IPinInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_FilterInfo : Proc(IPinInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IPinInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Direction : Proc(IPinInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_PinID : Proc(IPinInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_MediaTypes : Proc(IPinInfo*, Void**, Win32cr::Foundation::HRESULT),
    connect : Proc(IPinInfo*, Void*, Win32cr::Foundation::HRESULT),
    connect_direct : Proc(IPinInfo*, Void*, Win32cr::Foundation::HRESULT),
    connect_with_type : Proc(IPinInfo*, Void*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IPinInfo*, Win32cr::Foundation::HRESULT),
    render : Proc(IPinInfo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868bd-0ad4-11ce-b03a-0020af0ba770")]
  record IPinInfo, lpVtbl : IPinInfoVtbl* do
    GUID = LibC::GUID.new(0x56a868bd_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IPinInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPinInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPinInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IPinInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IPinInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IPinInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IPinInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Pin(this : IPinInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Pin.call(this, ppUnk)
    end
    def get_ConnectedTo(this : IPinInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectedTo.call(this, ppUnk)
    end
    def get_ConnectionMediaType(this : IPinInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectionMediaType.call(this, ppUnk)
    end
    def get_FilterInfo(this : IPinInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FilterInfo.call(this, ppUnk)
    end
    def get_Name(this : IPinInfo*, ppUnk : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, ppUnk)
    end
    def get_Direction(this : IPinInfo*, ppDirection : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Direction.call(this, ppDirection)
    end
    def get_PinID(this : IPinInfo*, strPinID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PinID.call(this, strPinID)
    end
    def get_MediaTypes(this : IPinInfo*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaTypes.call(this, ppUnk)
    end
    def connect(this : IPinInfo*, pPin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, pPin)
    end
    def connect_direct(this : IPinInfo*, pPin : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_direct.call(this, pPin)
    end
    def connect_with_type(this : IPinInfo*, pPin : Void*, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_with_type.call(this, pPin, pMediaType)
    end
    def disconnect(this : IPinInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this)
    end
    def render(this : IPinInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this)
    end

  end

  @[Extern]
  record IAMStatsVtbl,
    query_interface : Proc(IAMStats*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMStats*, UInt32),
    release : Proc(IAMStats*, UInt32),
    get_type_info_count : Proc(IAMStats*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAMStats*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAMStats*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAMStats*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    reset : Proc(IAMStats*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IAMStats*, Int32*, Win32cr::Foundation::HRESULT),
    get_value_by_index : Proc(IAMStats*, Int32, Win32cr::Foundation::BSTR*, Int32*, Float64*, Float64*, Float64*, Float64*, Float64*, Win32cr::Foundation::HRESULT),
    get_value_by_name : Proc(IAMStats*, Win32cr::Foundation::BSTR, Int32*, Int32*, Float64*, Float64*, Float64*, Float64*, Float64*, Win32cr::Foundation::HRESULT),
    get_index : Proc(IAMStats*, Win32cr::Foundation::BSTR, Int32, Int32*, Win32cr::Foundation::HRESULT),
    add_value : Proc(IAMStats*, Int32, Float64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bc9bcf80-dcd2-11d2-abf6-00a0c905f375")]
  record IAMStats, lpVtbl : IAMStatsVtbl* do
    GUID = LibC::GUID.new(0xbc9bcf80_u32, 0xdcd2_u16, 0x11d2_u16, StaticArray[0xab_u8, 0xf6_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IAMStats*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMStats*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMStats*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAMStats*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAMStats*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAMStats*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAMStats*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def reset(this : IAMStats*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def get_Count(this : IAMStats*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, plCount)
    end
    def get_value_by_index(this : IAMStats*, lIndex : Int32, szName : Win32cr::Foundation::BSTR*, lCount : Int32*, dLast : Float64*, dAverage : Float64*, dStdDev : Float64*, dMin : Float64*, dMax : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_by_index.call(this, lIndex, szName, lCount, dLast, dAverage, dStdDev, dMin, dMax)
    end
    def get_value_by_name(this : IAMStats*, szName : Win32cr::Foundation::BSTR, lIndex : Int32*, lCount : Int32*, dLast : Float64*, dAverage : Float64*, dStdDev : Float64*, dMin : Float64*, dMax : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_by_name.call(this, szName, lIndex, lCount, dLast, dAverage, dStdDev, dMin, dMax)
    end
    def get_index(this : IAMStats*, szName : Win32cr::Foundation::BSTR, lCreate : Int32, plIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index.call(this, szName, lCreate, plIndex)
    end
    def add_value(this : IAMStats*, lIndex : Int32, dValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_value.call(this, lIndex, dValue)
    end

  end

  @[Extern]
  record IAMVideoAcceleratorNotifyVtbl,
    query_interface : Proc(IAMVideoAcceleratorNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVideoAcceleratorNotify*, UInt32),
    release : Proc(IAMVideoAcceleratorNotify*, UInt32),
    get_uncomp_surfaces_info : Proc(IAMVideoAcceleratorNotify*, LibC::GUID*, Win32cr::Media::DirectShow::AMVAUncompBufferInfo*, Win32cr::Foundation::HRESULT),
    set_uncomp_surfaces_info : Proc(IAMVideoAcceleratorNotify*, UInt32, Win32cr::Foundation::HRESULT),
    get_create_video_accelerator_data : Proc(IAMVideoAcceleratorNotify*, LibC::GUID*, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("256a6a21-fbad-11d1-82bf-00a0c9696c8f")]
  record IAMVideoAcceleratorNotify, lpVtbl : IAMVideoAcceleratorNotifyVtbl* do
    GUID = LibC::GUID.new(0x256a6a21_u32, 0xfbad_u16, 0x11d1_u16, StaticArray[0x82_u8, 0xbf_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x6c_u8, 0x8f_u8])
    def query_interface(this : IAMVideoAcceleratorNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVideoAcceleratorNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVideoAcceleratorNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_uncomp_surfaces_info(this : IAMVideoAcceleratorNotify*, pGuid : LibC::GUID*, pUncompBufferInfo : Win32cr::Media::DirectShow::AMVAUncompBufferInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uncomp_surfaces_info.call(this, pGuid, pUncompBufferInfo)
    end
    def set_uncomp_surfaces_info(this : IAMVideoAcceleratorNotify*, dwActualUncompSurfacesAllocated : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uncomp_surfaces_info.call(this, dwActualUncompSurfacesAllocated)
    end
    def get_create_video_accelerator_data(this : IAMVideoAcceleratorNotify*, pGuid : LibC::GUID*, pdwSizeMiscData : UInt32*, ppMiscData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_create_video_accelerator_data.call(this, pGuid, pdwSizeMiscData, ppMiscData)
    end

  end

  @[Extern]
  record IAMVideoAcceleratorVtbl,
    query_interface : Proc(IAMVideoAccelerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMVideoAccelerator*, UInt32),
    release : Proc(IAMVideoAccelerator*, UInt32),
    get_video_accelerator_gui_ds : Proc(IAMVideoAccelerator*, UInt32*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_uncomp_formats_supported : Proc(IAMVideoAccelerator*, LibC::GUID*, UInt32*, Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*, Win32cr::Foundation::HRESULT),
    get_internal_mem_info : Proc(IAMVideoAccelerator*, LibC::GUID*, Win32cr::Media::DirectShow::AMVAUncompDataInfo*, Win32cr::Media::DirectShow::AMVAInternalMemInfo*, Win32cr::Foundation::HRESULT),
    get_comp_buffer_info : Proc(IAMVideoAccelerator*, LibC::GUID*, Win32cr::Media::DirectShow::AMVAUncompDataInfo*, UInt32*, Win32cr::Media::DirectShow::AMVACompBufferInfo*, Win32cr::Foundation::HRESULT),
    get_internal_comp_buffer_info : Proc(IAMVideoAccelerator*, UInt32*, Win32cr::Media::DirectShow::AMVACompBufferInfo*, Win32cr::Foundation::HRESULT),
    begin_frame : Proc(IAMVideoAccelerator*, Win32cr::Media::DirectShow::AMVABeginFrameInfo*, Win32cr::Foundation::HRESULT),
    end_frame : Proc(IAMVideoAccelerator*, Win32cr::Media::DirectShow::AMVAEndFrameInfo*, Win32cr::Foundation::HRESULT),
    get_buffer : Proc(IAMVideoAccelerator*, UInt32, UInt32, Win32cr::Foundation::BOOL, Void**, Int32*, Win32cr::Foundation::HRESULT),
    release_buffer : Proc(IAMVideoAccelerator*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    execute : Proc(IAMVideoAccelerator*, UInt32, Void*, UInt32, Void*, UInt32, UInt32, Win32cr::Media::DirectShow::AMVABUFFERINFO*, Win32cr::Foundation::HRESULT),
    query_render_status : Proc(IAMVideoAccelerator*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    display_frame : Proc(IAMVideoAccelerator*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("256a6a22-fbad-11d1-82bf-00a0c9696c8f")]
  record IAMVideoAccelerator, lpVtbl : IAMVideoAcceleratorVtbl* do
    GUID = LibC::GUID.new(0x256a6a22_u32, 0xfbad_u16, 0x11d1_u16, StaticArray[0x82_u8, 0xbf_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x69_u8, 0x6c_u8, 0x8f_u8])
    def query_interface(this : IAMVideoAccelerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMVideoAccelerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMVideoAccelerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_video_accelerator_gui_ds(this : IAMVideoAccelerator*, pdwNumGuidsSupported : UInt32*, pGuidsSupported : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_accelerator_gui_ds.call(this, pdwNumGuidsSupported, pGuidsSupported)
    end
    def get_uncomp_formats_supported(this : IAMVideoAccelerator*, pGuid : LibC::GUID*, pdwNumFormatsSupported : UInt32*, pFormatsSupported : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uncomp_formats_supported.call(this, pGuid, pdwNumFormatsSupported, pFormatsSupported)
    end
    def get_internal_mem_info(this : IAMVideoAccelerator*, pGuid : LibC::GUID*, pamvaUncompDataInfo : Win32cr::Media::DirectShow::AMVAUncompDataInfo*, pamvaInternalMemInfo : Win32cr::Media::DirectShow::AMVAInternalMemInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_internal_mem_info.call(this, pGuid, pamvaUncompDataInfo, pamvaInternalMemInfo)
    end
    def get_comp_buffer_info(this : IAMVideoAccelerator*, pGuid : LibC::GUID*, pamvaUncompDataInfo : Win32cr::Media::DirectShow::AMVAUncompDataInfo*, pdwNumTypesCompBuffers : UInt32*, pamvaCompBufferInfo : Win32cr::Media::DirectShow::AMVACompBufferInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_comp_buffer_info.call(this, pGuid, pamvaUncompDataInfo, pdwNumTypesCompBuffers, pamvaCompBufferInfo)
    end
    def get_internal_comp_buffer_info(this : IAMVideoAccelerator*, pdwNumTypesCompBuffers : UInt32*, pamvaCompBufferInfo : Win32cr::Media::DirectShow::AMVACompBufferInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_internal_comp_buffer_info.call(this, pdwNumTypesCompBuffers, pamvaCompBufferInfo)
    end
    def begin_frame(this : IAMVideoAccelerator*, amvaBeginFrameInfo : Win32cr::Media::DirectShow::AMVABeginFrameInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_frame.call(this, amvaBeginFrameInfo)
    end
    def end_frame(this : IAMVideoAccelerator*, pEndFrameInfo : Win32cr::Media::DirectShow::AMVAEndFrameInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_frame.call(this, pEndFrameInfo)
    end
    def get_buffer(this : IAMVideoAccelerator*, dwTypeIndex : UInt32, dwBufferIndex : UInt32, bReadOnly : Win32cr::Foundation::BOOL, ppBuffer : Void**, lpStride : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, dwTypeIndex, dwBufferIndex, bReadOnly, ppBuffer, lpStride)
    end
    def release_buffer(this : IAMVideoAccelerator*, dwTypeIndex : UInt32, dwBufferIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_buffer.call(this, dwTypeIndex, dwBufferIndex)
    end
    def execute(this : IAMVideoAccelerator*, dwFunction : UInt32, lpPrivateInputData : Void*, cbPrivateInputData : UInt32, lpPrivateOutputDat : Void*, cbPrivateOutputData : UInt32, dwNumBuffers : UInt32, pamvaBufferInfo : Win32cr::Media::DirectShow::AMVABUFFERINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, dwFunction, lpPrivateInputData, cbPrivateInputData, lpPrivateOutputDat, cbPrivateOutputData, dwNumBuffers, pamvaBufferInfo)
    end
    def query_render_status(this : IAMVideoAccelerator*, dwTypeIndex : UInt32, dwBufferIndex : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_render_status.call(this, dwTypeIndex, dwBufferIndex, dwFlags)
    end
    def display_frame(this : IAMVideoAccelerator*, dwFlipToIndex : UInt32, pMediaSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.display_frame.call(this, dwFlipToIndex, pMediaSample)
    end

  end

  @[Extern]
  record IAMWstDecoderVtbl,
    query_interface : Proc(IAMWstDecoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMWstDecoder*, UInt32),
    release : Proc(IAMWstDecoder*, UInt32),
    get_decoder_level : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_LEVEL*, Win32cr::Foundation::HRESULT),
    get_current_service : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_SERVICE*, Win32cr::Foundation::HRESULT),
    get_service_state : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_STATE*, Win32cr::Foundation::HRESULT),
    set_service_state : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_STATE, Win32cr::Foundation::HRESULT),
    get_output_format : Proc(IAMWstDecoder*, Win32cr::Graphics::Gdi::BITMAPINFOHEADER*, Win32cr::Foundation::HRESULT),
    set_output_format : Proc(IAMWstDecoder*, Win32cr::Graphics::Gdi::BITMAPINFO*, Win32cr::Foundation::HRESULT),
    get_background_color : Proc(IAMWstDecoder*, UInt32*, Win32cr::Foundation::HRESULT),
    set_background_color : Proc(IAMWstDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_redraw_always : Proc(IAMWstDecoder*, Int32*, Win32cr::Foundation::HRESULT),
    set_redraw_always : Proc(IAMWstDecoder*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_draw_background_mode : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_DRAWBGMODE*, Win32cr::Foundation::HRESULT),
    set_draw_background_mode : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_DRAWBGMODE, Win32cr::Foundation::HRESULT),
    set_answer_mode : Proc(IAMWstDecoder*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_answer_mode : Proc(IAMWstDecoder*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_hold_page : Proc(IAMWstDecoder*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_hold_page : Proc(IAMWstDecoder*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_current_page : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_PAGE*, Win32cr::Foundation::HRESULT),
    set_current_page : Proc(IAMWstDecoder*, Win32cr::Media::DirectShow::AM_WST_PAGE, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c056de21-75c2-11d3-a184-00105aef9f33")]
  record IAMWstDecoder, lpVtbl : IAMWstDecoderVtbl* do
    GUID = LibC::GUID.new(0xc056de21_u32, 0x75c2_u16, 0x11d3_u16, StaticArray[0xa1_u8, 0x84_u8, 0x0_u8, 0x10_u8, 0x5a_u8, 0xef_u8, 0x9f_u8, 0x33_u8])
    def query_interface(this : IAMWstDecoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMWstDecoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMWstDecoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_decoder_level(this : IAMWstDecoder*, lpLevel : Win32cr::Media::DirectShow::AM_WST_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decoder_level.call(this, lpLevel)
    end
    def get_current_service(this : IAMWstDecoder*, lpService : Win32cr::Media::DirectShow::AM_WST_SERVICE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_service.call(this, lpService)
    end
    def get_service_state(this : IAMWstDecoder*, lpState : Win32cr::Media::DirectShow::AM_WST_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_state.call(this, lpState)
    end
    def set_service_state(this : IAMWstDecoder*, state : Win32cr::Media::DirectShow::AM_WST_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_service_state.call(this, state)
    end
    def get_output_format(this : IAMWstDecoder*, lpbmih : Win32cr::Graphics::Gdi::BITMAPINFOHEADER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_format.call(this, lpbmih)
    end
    def set_output_format(this : IAMWstDecoder*, lpbmi : Win32cr::Graphics::Gdi::BITMAPINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_format.call(this, lpbmi)
    end
    def get_background_color(this : IAMWstDecoder*, pdwPhysColor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_background_color.call(this, pdwPhysColor)
    end
    def set_background_color(this : IAMWstDecoder*, dwPhysColor : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_color.call(this, dwPhysColor)
    end
    def get_redraw_always(this : IAMWstDecoder*, lpbOption : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_redraw_always.call(this, lpbOption)
    end
    def set_redraw_always(this : IAMWstDecoder*, bOption : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_redraw_always.call(this, bOption)
    end
    def get_draw_background_mode(this : IAMWstDecoder*, lpMode : Win32cr::Media::DirectShow::AM_WST_DRAWBGMODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_draw_background_mode.call(this, lpMode)
    end
    def set_draw_background_mode(this : IAMWstDecoder*, mode : Win32cr::Media::DirectShow::AM_WST_DRAWBGMODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_draw_background_mode.call(this, mode)
    end
    def set_answer_mode(this : IAMWstDecoder*, bAnswer : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_answer_mode.call(this, bAnswer)
    end
    def get_answer_mode(this : IAMWstDecoder*, pbAnswer : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_answer_mode.call(this, pbAnswer)
    end
    def set_hold_page(this : IAMWstDecoder*, bHoldPage : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_hold_page.call(this, bHoldPage)
    end
    def get_hold_page(this : IAMWstDecoder*, pbHoldPage : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hold_page.call(this, pbHoldPage)
    end
    def get_current_page(this : IAMWstDecoder*, pWstPage : Win32cr::Media::DirectShow::AM_WST_PAGE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_page.call(this, pWstPage)
    end
    def set_current_page(this : IAMWstDecoder*, wst_page : Win32cr::Media::DirectShow::AM_WST_PAGE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_page.call(this, wst_page)
    end

  end

  @[Extern]
  record IKsTopologyInfoVtbl,
    query_interface : Proc(IKsTopologyInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IKsTopologyInfo*, UInt32),
    release : Proc(IKsTopologyInfo*, UInt32),
    get_NumCategories : Proc(IKsTopologyInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IKsTopologyInfo*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_NumConnections : Proc(IKsTopologyInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ConnectionInfo : Proc(IKsTopologyInfo*, UInt32, Win32cr::Media::KernelStreaming::KSTOPOLOGY_CONNECTION*, Win32cr::Foundation::HRESULT),
    get_NodeName : Proc(IKsTopologyInfo*, UInt32, Win32cr::Foundation::PWSTR, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_NumNodes : Proc(IKsTopologyInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_NodeType : Proc(IKsTopologyInfo*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_node_instance : Proc(IKsTopologyInfo*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("720d4ac0-7533-11d0-a5d6-28db04c10000")]
  record IKsTopologyInfo, lpVtbl : IKsTopologyInfoVtbl* do
    GUID = LibC::GUID.new(0x720d4ac0_u32, 0x7533_u16, 0x11d0_u16, StaticArray[0xa5_u8, 0xd6_u8, 0x28_u8, 0xdb_u8, 0x4_u8, 0xc1_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IKsTopologyInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IKsTopologyInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IKsTopologyInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_NumCategories(this : IKsTopologyInfo*, pdwNumCategories : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumCategories.call(this, pdwNumCategories)
    end
    def get_Category(this : IKsTopologyInfo*, dwIndex : UInt32, pCategory : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, dwIndex, pCategory)
    end
    def get_NumConnections(this : IKsTopologyInfo*, pdwNumConnections : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumConnections.call(this, pdwNumConnections)
    end
    def get_ConnectionInfo(this : IKsTopologyInfo*, dwIndex : UInt32, pConnectionInfo : Win32cr::Media::KernelStreaming::KSTOPOLOGY_CONNECTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ConnectionInfo.call(this, dwIndex, pConnectionInfo)
    end
    def get_NodeName(this : IKsTopologyInfo*, dwNodeId : UInt32, pwchNodeName : Win32cr::Foundation::PWSTR, dwBufSize : UInt32, pdwNameLen : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NodeName.call(this, dwNodeId, pwchNodeName, dwBufSize, pdwNameLen)
    end
    def get_NumNodes(this : IKsTopologyInfo*, pdwNumNodes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumNodes.call(this, pdwNumNodes)
    end
    def get_NodeType(this : IKsTopologyInfo*, dwNodeId : UInt32, pNodeType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NodeType.call(this, dwNodeId, pNodeType)
    end
    def create_node_instance(this : IKsTopologyInfo*, dwNodeId : UInt32, iid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_node_instance.call(this, dwNodeId, iid, ppvObject)
    end

  end

  @[Extern]
  record ISelectorVtbl,
    query_interface : Proc(ISelector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISelector*, UInt32),
    release : Proc(ISelector*, UInt32),
    get_NumSources : Proc(ISelector*, UInt32*, Win32cr::Foundation::HRESULT),
    get_SourceNodeId : Proc(ISelector*, UInt32*, Win32cr::Foundation::HRESULT),
    put_SourceNodeId : Proc(ISelector*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1abdaeca-68b6-4f83-9371-b413907c7b9f")]
  record ISelector, lpVtbl : ISelectorVtbl* do
    GUID = LibC::GUID.new(0x1abdaeca_u32, 0x68b6_u16, 0x4f83_u16, StaticArray[0x93_u8, 0x71_u8, 0xb4_u8, 0x13_u8, 0x90_u8, 0x7c_u8, 0x7b_u8, 0x9f_u8])
    def query_interface(this : ISelector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISelector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISelector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_NumSources(this : ISelector*, pdwNumSources : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumSources.call(this, pdwNumSources)
    end
    def get_SourceNodeId(this : ISelector*, pdwPinId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceNodeId.call(this, pdwPinId)
    end
    def put_SourceNodeId(this : ISelector*, dwPinId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceNodeId.call(this, dwPinId)
    end

  end

  @[Extern]
  record ICameraControlVtbl,
    query_interface : Proc(ICameraControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICameraControl*, UInt32),
    release : Proc(ICameraControl*, UInt32),
    get_Exposure : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Exposure : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Exposure : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Focus : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Focus : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Focus : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Iris : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Iris : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Iris : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Zoom : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Zoom : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Zoom : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_FocalLengths : Proc(ICameraControl*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Pan : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Pan : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Pan : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Tilt : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Tilt : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Tilt : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_PanTilt : Proc(ICameraControl*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_PanTilt : Proc(ICameraControl*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_Roll : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Roll : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Roll : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_ExposureRelative : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_ExposureRelative : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_ExposureRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_FocusRelative : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_FocusRelative : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_FocusRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_IrisRelative : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_IrisRelative : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_IrisRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_ZoomRelative : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_ZoomRelative : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_ZoomRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_PanRelative : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_PanRelative : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_TiltRelative : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_TiltRelative : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_TiltRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_PanTiltRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_PanTiltRelative : Proc(ICameraControl*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_PanRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_RollRelative : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_RollRelative : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_RollRelative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_ScanMode : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_ScanMode : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_PrivacyMode : Proc(ICameraControl*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_PrivacyMode : Proc(ICameraControl*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2ba1785d-4d1b-44ef-85e8-c7f1d3f20184")]
  record ICameraControl, lpVtbl : ICameraControlVtbl* do
    GUID = LibC::GUID.new(0x2ba1785d_u32, 0x4d1b_u16, 0x44ef_u16, StaticArray[0x85_u8, 0xe8_u8, 0xc7_u8, 0xf1_u8, 0xd3_u8, 0xf2_u8, 0x1_u8, 0x84_u8])
    def query_interface(this : ICameraControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICameraControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICameraControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Exposure(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Exposure.call(this, pValue, pFlags)
    end
    def put_Exposure(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Exposure.call(this, value, flags)
    end
    def getRange_Exposure(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Exposure.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Focus(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Focus.call(this, pValue, pFlags)
    end
    def put_Focus(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Focus.call(this, value, flags)
    end
    def getRange_Focus(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Focus.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Iris(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Iris.call(this, pValue, pFlags)
    end
    def put_Iris(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Iris.call(this, value, flags)
    end
    def getRange_Iris(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Iris.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Zoom(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Zoom.call(this, pValue, pFlags)
    end
    def put_Zoom(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Zoom.call(this, value, flags)
    end
    def getRange_Zoom(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Zoom.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_FocalLengths(this : ICameraControl*, plOcularFocalLength : Int32*, plObjectiveFocalLengthMin : Int32*, plObjectiveFocalLengthMax : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FocalLengths.call(this, plOcularFocalLength, plObjectiveFocalLengthMin, plObjectiveFocalLengthMax)
    end
    def get_Pan(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Pan.call(this, pValue, pFlags)
    end
    def put_Pan(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Pan.call(this, value, flags)
    end
    def getRange_Pan(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Pan.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Tilt(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Tilt.call(this, pValue, pFlags)
    end
    def put_Tilt(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Tilt.call(this, value, flags)
    end
    def getRange_Tilt(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Tilt.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_PanTilt(this : ICameraControl*, pPanValue : Int32*, pTiltValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PanTilt.call(this, pPanValue, pTiltValue, pFlags)
    end
    def put_PanTilt(this : ICameraControl*, pan_value : Int32, tilt_value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PanTilt.call(this, pan_value, tilt_value, flags)
    end
    def get_Roll(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Roll.call(this, pValue, pFlags)
    end
    def put_Roll(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Roll.call(this, value, flags)
    end
    def getRange_Roll(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Roll.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_ExposureRelative(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExposureRelative.call(this, pValue, pFlags)
    end
    def put_ExposureRelative(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ExposureRelative.call(this, value, flags)
    end
    def getRange_ExposureRelative(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_ExposureRelative.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_FocusRelative(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FocusRelative.call(this, pValue, pFlags)
    end
    def put_FocusRelative(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FocusRelative.call(this, value, flags)
    end
    def getRange_FocusRelative(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_FocusRelative.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_IrisRelative(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IrisRelative.call(this, pValue, pFlags)
    end
    def put_IrisRelative(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IrisRelative.call(this, value, flags)
    end
    def getRange_IrisRelative(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_IrisRelative.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_ZoomRelative(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ZoomRelative.call(this, pValue, pFlags)
    end
    def put_ZoomRelative(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ZoomRelative.call(this, value, flags)
    end
    def getRange_ZoomRelative(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_ZoomRelative.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_PanRelative(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PanRelative.call(this, pValue, pFlags)
    end
    def put_PanRelative(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PanRelative.call(this, value, flags)
    end
    def get_TiltRelative(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TiltRelative.call(this, pValue, pFlags)
    end
    def put_TiltRelative(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TiltRelative.call(this, value, flags)
    end
    def getRange_TiltRelative(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_TiltRelative.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_PanTiltRelative(this : ICameraControl*, pPanValue : Int32*, pTiltValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PanTiltRelative.call(this, pPanValue, pTiltValue, pFlags)
    end
    def put_PanTiltRelative(this : ICameraControl*, pan_value : Int32, tilt_value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PanTiltRelative.call(this, pan_value, tilt_value, flags)
    end
    def getRange_PanRelative(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_PanRelative.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_RollRelative(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RollRelative.call(this, pValue, pFlags)
    end
    def put_RollRelative(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RollRelative.call(this, value, flags)
    end
    def getRange_RollRelative(this : ICameraControl*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_RollRelative.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_ScanMode(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ScanMode.call(this, pValue, pFlags)
    end
    def put_ScanMode(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ScanMode.call(this, value, flags)
    end
    def get_PrivacyMode(this : ICameraControl*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PrivacyMode.call(this, pValue, pFlags)
    end
    def put_PrivacyMode(this : ICameraControl*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PrivacyMode.call(this, value, flags)
    end

  end

  @[Extern]
  record IVideoProcAmpVtbl,
    query_interface : Proc(IVideoProcAmp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVideoProcAmp*, UInt32),
    release : Proc(IVideoProcAmp*, UInt32),
    get_BacklightCompensation : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_BacklightCompensation : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_BacklightCompensation : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Brightness : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Brightness : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Brightness : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_ColorEnable : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_ColorEnable : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_ColorEnable : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Contrast : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Contrast : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Contrast : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Gamma : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Gamma : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Gamma : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Saturation : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Saturation : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Saturation : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Sharpness : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Sharpness : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Sharpness : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_WhiteBalance : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_WhiteBalance : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_WhiteBalance : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Gain : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Gain : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Gain : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_Hue : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_Hue : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_Hue : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_DigitalMultiplier : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_DigitalMultiplier : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_DigitalMultiplier : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_PowerlineFrequency : Proc(IVideoProcAmp*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_PowerlineFrequency : Proc(IVideoProcAmp*, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_PowerlineFrequency : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_WhiteBalanceComponent : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    put_WhiteBalanceComponent : Proc(IVideoProcAmp*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    getRange_WhiteBalanceComponent : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4050560e-42a7-413a-85c2-09269a2d0f44")]
  record IVideoProcAmp, lpVtbl : IVideoProcAmpVtbl* do
    GUID = LibC::GUID.new(0x4050560e_u32, 0x42a7_u16, 0x413a_u16, StaticArray[0x85_u8, 0xc2_u8, 0x9_u8, 0x26_u8, 0x9a_u8, 0x2d_u8, 0xf_u8, 0x44_u8])
    def query_interface(this : IVideoProcAmp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVideoProcAmp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVideoProcAmp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_BacklightCompensation(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BacklightCompensation.call(this, pValue, pFlags)
    end
    def put_BacklightCompensation(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BacklightCompensation.call(this, value, flags)
    end
    def getRange_BacklightCompensation(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_BacklightCompensation.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Brightness(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Brightness.call(this, pValue, pFlags)
    end
    def put_Brightness(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Brightness.call(this, value, flags)
    end
    def getRange_Brightness(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Brightness.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_ColorEnable(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ColorEnable.call(this, pValue, pFlags)
    end
    def put_ColorEnable(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ColorEnable.call(this, value, flags)
    end
    def getRange_ColorEnable(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_ColorEnable.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Contrast(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Contrast.call(this, pValue, pFlags)
    end
    def put_Contrast(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Contrast.call(this, value, flags)
    end
    def getRange_Contrast(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Contrast.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Gamma(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Gamma.call(this, pValue, pFlags)
    end
    def put_Gamma(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Gamma.call(this, value, flags)
    end
    def getRange_Gamma(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Gamma.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Saturation(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Saturation.call(this, pValue, pFlags)
    end
    def put_Saturation(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Saturation.call(this, value, flags)
    end
    def getRange_Saturation(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Saturation.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Sharpness(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Sharpness.call(this, pValue, pFlags)
    end
    def put_Sharpness(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Sharpness.call(this, value, flags)
    end
    def getRange_Sharpness(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Sharpness.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_WhiteBalance(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WhiteBalance.call(this, pValue, pFlags)
    end
    def put_WhiteBalance(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WhiteBalance.call(this, value, flags)
    end
    def getRange_WhiteBalance(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_WhiteBalance.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Gain(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Gain.call(this, pValue, pFlags)
    end
    def put_Gain(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Gain.call(this, value, flags)
    end
    def getRange_Gain(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Gain.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_Hue(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Hue.call(this, pValue, pFlags)
    end
    def put_Hue(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Hue.call(this, value, flags)
    end
    def getRange_Hue(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_Hue.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_DigitalMultiplier(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DigitalMultiplier.call(this, pValue, pFlags)
    end
    def put_DigitalMultiplier(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DigitalMultiplier.call(this, value, flags)
    end
    def getRange_DigitalMultiplier(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_DigitalMultiplier.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_PowerlineFrequency(this : IVideoProcAmp*, pValue : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PowerlineFrequency.call(this, pValue, pFlags)
    end
    def put_PowerlineFrequency(this : IVideoProcAmp*, value : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PowerlineFrequency.call(this, value, flags)
    end
    def getRange_PowerlineFrequency(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_PowerlineFrequency.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end
    def get_WhiteBalanceComponent(this : IVideoProcAmp*, pValue1 : Int32*, pValue2 : Int32*, pFlags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WhiteBalanceComponent.call(this, pValue1, pValue2, pFlags)
    end
    def put_WhiteBalanceComponent(this : IVideoProcAmp*, value1 : Int32, value2 : Int32, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WhiteBalanceComponent.call(this, value1, value2, flags)
    end
    def getRange_WhiteBalanceComponent(this : IVideoProcAmp*, pMin : Int32*, pMax : Int32*, pSteppingDelta : Int32*, pDefault : Int32*, pCapsFlag : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.getRange_WhiteBalanceComponent.call(this, pMin, pMax, pSteppingDelta, pDefault, pCapsFlag)
    end

  end

  @[Extern]
  record IKsNodeControlVtbl,
    query_interface : Proc(IKsNodeControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IKsNodeControl*, UInt32),
    release : Proc(IKsNodeControl*, UInt32),
    put_NodeId : Proc(IKsNodeControl*, UInt32, Win32cr::Foundation::HRESULT),
    put_KsControl : Proc(IKsNodeControl*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("11737c14-24a7-4bb5-81a0-0d003813b0c4")]
  record IKsNodeControl, lpVtbl : IKsNodeControlVtbl* do
    GUID = LibC::GUID.new(0x11737c14_u32, 0x24a7_u16, 0x4bb5_u16, StaticArray[0x81_u8, 0xa0_u8, 0xd_u8, 0x0_u8, 0x38_u8, 0x13_u8, 0xb0_u8, 0xc4_u8])
    def query_interface(this : IKsNodeControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IKsNodeControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IKsNodeControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_NodeId(this : IKsNodeControl*, dwNodeId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NodeId.call(this, dwNodeId)
    end
    def put_KsControl(this : IKsNodeControl*, pKsControl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KsControl.call(this, pKsControl)
    end

  end

  @[Extern]
  record IAMWMBufferPassVtbl,
    query_interface : Proc(IAMWMBufferPass*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMWMBufferPass*, UInt32),
    release : Proc(IAMWMBufferPass*, UInt32),
    set_notify : Proc(IAMWMBufferPass*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6dd816d7-e740-4123-9e24-2444412644d8")]
  record IAMWMBufferPass, lpVtbl : IAMWMBufferPassVtbl* do
    GUID = LibC::GUID.new(0x6dd816d7_u32, 0xe740_u16, 0x4123_u16, StaticArray[0x9e_u8, 0x24_u8, 0x24_u8, 0x44_u8, 0x41_u8, 0x26_u8, 0x44_u8, 0xd8_u8])
    def query_interface(this : IAMWMBufferPass*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMWMBufferPass*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMWMBufferPass*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_notify(this : IAMWMBufferPass*, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_notify.call(this, pCallback)
    end

  end

  @[Extern]
  record IAMWMBufferPassCallbackVtbl,
    query_interface : Proc(IAMWMBufferPassCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMWMBufferPassCallback*, UInt32),
    release : Proc(IAMWMBufferPassCallback*, UInt32),
    notify : Proc(IAMWMBufferPassCallback*, Void*, Void*, Int64*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b25b8372-d2d2-44b2-8653-1b8dae332489")]
  record IAMWMBufferPassCallback, lpVtbl : IAMWMBufferPassCallbackVtbl* do
    GUID = LibC::GUID.new(0xb25b8372_u32, 0xd2d2_u16, 0x44b2_u16, StaticArray[0x86_u8, 0x53_u8, 0x1b_u8, 0x8d_u8, 0xae_u8, 0x33_u8, 0x24_u8, 0x89_u8])
    def query_interface(this : IAMWMBufferPassCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMWMBufferPassCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMWMBufferPassCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify(this : IAMWMBufferPassCallback*, pNSSBuffer3 : Void*, pPin : Void*, prtStart : Int64*, prtEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify.call(this, pNSSBuffer3, pPin, prtStart, prtEnd)
    end

  end

  @[Extern]
  record IConfigAsfWriterVtbl,
    query_interface : Proc(IConfigAsfWriter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConfigAsfWriter*, UInt32),
    release : Proc(IConfigAsfWriter*, UInt32),
    configure_filter_using_profile_id : Proc(IConfigAsfWriter*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_profile_id : Proc(IConfigAsfWriter*, UInt32*, Win32cr::Foundation::HRESULT),
    configure_filter_using_profile_guid : Proc(IConfigAsfWriter*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_current_profile_guid : Proc(IConfigAsfWriter*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    configure_filter_using_profile : Proc(IConfigAsfWriter*, Void*, Win32cr::Foundation::HRESULT),
    get_current_profile : Proc(IConfigAsfWriter*, Void**, Win32cr::Foundation::HRESULT),
    set_index_mode : Proc(IConfigAsfWriter*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_index_mode : Proc(IConfigAsfWriter*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("45086030-f7e4-486a-b504-826bb5792a3b")]
  record IConfigAsfWriter, lpVtbl : IConfigAsfWriterVtbl* do
    GUID = LibC::GUID.new(0x45086030_u32, 0xf7e4_u16, 0x486a_u16, StaticArray[0xb5_u8, 0x4_u8, 0x82_u8, 0x6b_u8, 0xb5_u8, 0x79_u8, 0x2a_u8, 0x3b_u8])
    def query_interface(this : IConfigAsfWriter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConfigAsfWriter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConfigAsfWriter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def configure_filter_using_profile_id(this : IConfigAsfWriter*, dwProfileId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure_filter_using_profile_id.call(this, dwProfileId)
    end
    def get_current_profile_id(this : IConfigAsfWriter*, pdwProfileId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_profile_id.call(this, pdwProfileId)
    end
    def configure_filter_using_profile_guid(this : IConfigAsfWriter*, guidProfile : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure_filter_using_profile_guid.call(this, guidProfile)
    end
    def get_current_profile_guid(this : IConfigAsfWriter*, pProfileGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_profile_guid.call(this, pProfileGuid)
    end
    def configure_filter_using_profile(this : IConfigAsfWriter*, pProfile : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure_filter_using_profile.call(this, pProfile)
    end
    def get_current_profile(this : IConfigAsfWriter*, ppProfile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_profile.call(this, ppProfile)
    end
    def set_index_mode(this : IConfigAsfWriter*, bIndexFile : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_index_mode.call(this, bIndexFile)
    end
    def get_index_mode(this : IConfigAsfWriter*, pbIndexFile : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_mode.call(this, pbIndexFile)
    end

  end

  @[Extern]
  record IConfigAsfWriter2Vtbl,
    query_interface : Proc(IConfigAsfWriter2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConfigAsfWriter2*, UInt32),
    release : Proc(IConfigAsfWriter2*, UInt32),
    configure_filter_using_profile_id : Proc(IConfigAsfWriter2*, UInt32, Win32cr::Foundation::HRESULT),
    get_current_profile_id : Proc(IConfigAsfWriter2*, UInt32*, Win32cr::Foundation::HRESULT),
    configure_filter_using_profile_guid : Proc(IConfigAsfWriter2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_current_profile_guid : Proc(IConfigAsfWriter2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    configure_filter_using_profile : Proc(IConfigAsfWriter2*, Void*, Win32cr::Foundation::HRESULT),
    get_current_profile : Proc(IConfigAsfWriter2*, Void**, Win32cr::Foundation::HRESULT),
    set_index_mode : Proc(IConfigAsfWriter2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_index_mode : Proc(IConfigAsfWriter2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    stream_num_from_pin : Proc(IConfigAsfWriter2*, Void*, UInt16*, Win32cr::Foundation::HRESULT),
    set_param : Proc(IConfigAsfWriter2*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_param : Proc(IConfigAsfWriter2*, UInt32, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    reset_multi_pass_state : Proc(IConfigAsfWriter2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7989ccaa-53f0-44f0-884a-f3b03f6ae066")]
  record IConfigAsfWriter2, lpVtbl : IConfigAsfWriter2Vtbl* do
    GUID = LibC::GUID.new(0x7989ccaa_u32, 0x53f0_u16, 0x44f0_u16, StaticArray[0x88_u8, 0x4a_u8, 0xf3_u8, 0xb0_u8, 0x3f_u8, 0x6a_u8, 0xe0_u8, 0x66_u8])
    def query_interface(this : IConfigAsfWriter2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConfigAsfWriter2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConfigAsfWriter2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def configure_filter_using_profile_id(this : IConfigAsfWriter2*, dwProfileId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure_filter_using_profile_id.call(this, dwProfileId)
    end
    def get_current_profile_id(this : IConfigAsfWriter2*, pdwProfileId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_profile_id.call(this, pdwProfileId)
    end
    def configure_filter_using_profile_guid(this : IConfigAsfWriter2*, guidProfile : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure_filter_using_profile_guid.call(this, guidProfile)
    end
    def get_current_profile_guid(this : IConfigAsfWriter2*, pProfileGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_profile_guid.call(this, pProfileGuid)
    end
    def configure_filter_using_profile(this : IConfigAsfWriter2*, pProfile : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure_filter_using_profile.call(this, pProfile)
    end
    def get_current_profile(this : IConfigAsfWriter2*, ppProfile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_profile.call(this, ppProfile)
    end
    def set_index_mode(this : IConfigAsfWriter2*, bIndexFile : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_index_mode.call(this, bIndexFile)
    end
    def get_index_mode(this : IConfigAsfWriter2*, pbIndexFile : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_mode.call(this, pbIndexFile)
    end
    def stream_num_from_pin(this : IConfigAsfWriter2*, pPin : Void*, pwStreamNum : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stream_num_from_pin.call(this, pPin, pwStreamNum)
    end
    def set_param(this : IConfigAsfWriter2*, dwParam : UInt32, dwParam1 : UInt32, dwParam2 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_param.call(this, dwParam, dwParam1, dwParam2)
    end
    def get_param(this : IConfigAsfWriter2*, dwParam : UInt32, pdwParam1 : UInt32*, pdwParam2 : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_param.call(this, dwParam, pdwParam1, pdwParam2)
    end
    def reset_multi_pass_state(this : IConfigAsfWriter2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_multi_pass_state.call(this)
    end

  end

  @[Extern]
  record IMultiMediaStreamVtbl,
    query_interface : Proc(IMultiMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultiMediaStream*, UInt32),
    release : Proc(IMultiMediaStream*, UInt32),
    get_information : Proc(IMultiMediaStream*, Win32cr::Media::DirectShow::MMSSF_GET_INFORMATION_FLAGS*, Win32cr::Media::DirectShow::STREAM_TYPE*, Win32cr::Foundation::HRESULT),
    get_media_stream : Proc(IMultiMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enum_media_streams : Proc(IMultiMediaStream*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMultiMediaStream*, Win32cr::Media::DirectShow::STREAM_STATE*, Win32cr::Foundation::HRESULT),
    set_state : Proc(IMultiMediaStream*, Win32cr::Media::DirectShow::STREAM_STATE, Win32cr::Foundation::HRESULT),
    get_time : Proc(IMultiMediaStream*, Int64*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IMultiMediaStream*, Int64*, Win32cr::Foundation::HRESULT),
    seek : Proc(IMultiMediaStream*, Int64, Win32cr::Foundation::HRESULT),
    get_end_of_stream_event_handle : Proc(IMultiMediaStream*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b502d1bc-9a57-11d0-8fde-00c04fd9189d")]
  record IMultiMediaStream, lpVtbl : IMultiMediaStreamVtbl* do
    GUID = LibC::GUID.new(0xb502d1bc_u32, 0x9a57_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IMultiMediaStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultiMediaStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultiMediaStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_information(this : IMultiMediaStream*, pdwFlags : Win32cr::Media::DirectShow::MMSSF_GET_INFORMATION_FLAGS*, pStreamType : Win32cr::Media::DirectShow::STREAM_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pdwFlags, pStreamType)
    end
    def get_media_stream(this : IMultiMediaStream*, idPurpose : LibC::GUID*, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_stream.call(this, idPurpose, ppMediaStream)
    end
    def enum_media_streams(this : IMultiMediaStream*, index : Int32, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_media_streams.call(this, index, ppMediaStream)
    end
    def get_state(this : IMultiMediaStream*, pCurrentState : Win32cr::Media::DirectShow::STREAM_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pCurrentState)
    end
    def set_state(this : IMultiMediaStream*, new_state : Win32cr::Media::DirectShow::STREAM_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_state.call(this, new_state)
    end
    def get_time(this : IMultiMediaStream*, pCurrentTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time.call(this, pCurrentTime)
    end
    def get_duration(this : IMultiMediaStream*, pDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def seek(this : IMultiMediaStream*, seek_time : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, seek_time)
    end
    def get_end_of_stream_event_handle(this : IMultiMediaStream*, phEOS : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_end_of_stream_event_handle.call(this, phEOS)
    end

  end

  @[Extern]
  record IMediaStreamVtbl,
    query_interface : Proc(IMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaStream*, UInt32),
    release : Proc(IMediaStream*, UInt32),
    get_multi_media_stream : Proc(IMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    get_information : Proc(IMediaStream*, LibC::GUID*, Win32cr::Media::DirectShow::STREAM_TYPE*, Win32cr::Foundation::HRESULT),
    set_same_format : Proc(IMediaStream*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IMediaStream*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_shared_sample : Proc(IMediaStream*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    send_end_of_stream : Proc(IMediaStream*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b502d1bd-9a57-11d0-8fde-00c04fd9189d")]
  record IMediaStream, lpVtbl : IMediaStreamVtbl* do
    GUID = LibC::GUID.new(0xb502d1bd_u32, 0x9a57_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IMediaStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multi_media_stream(this : IMediaStream*, ppMultiMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multi_media_stream.call(this, ppMultiMediaStream)
    end
    def get_information(this : IMediaStream*, pPurposeId : LibC::GUID*, pType : Win32cr::Media::DirectShow::STREAM_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pPurposeId, pType)
    end
    def set_same_format(this : IMediaStream*, pStreamThatHasDesiredFormat : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_same_format.call(this, pStreamThatHasDesiredFormat, dwFlags)
    end
    def allocate_sample(this : IMediaStream*, dwFlags : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, dwFlags, ppSample)
    end
    def create_shared_sample(this : IMediaStream*, pExistingSample : Void*, dwFlags : UInt32, ppNewSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_sample.call(this, pExistingSample, dwFlags, ppNewSample)
    end
    def send_end_of_stream(this : IMediaStream*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_end_of_stream.call(this, dwFlags)
    end

  end

  @[Extern]
  record IStreamSampleVtbl,
    query_interface : Proc(IStreamSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamSample*, UInt32),
    release : Proc(IStreamSample*, UInt32),
    get_media_stream : Proc(IStreamSample*, Void**, Win32cr::Foundation::HRESULT),
    get_sample_times : Proc(IStreamSample*, Int64*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_times : Proc(IStreamSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    update : Proc(IStreamSample*, UInt32, Win32cr::Foundation::HANDLE, Win32cr::Foundation::PAPCFUNC, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    completion_status : Proc(IStreamSample*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b502d1be-9a57-11d0-8fde-00c04fd9189d")]
  record IStreamSample, lpVtbl : IStreamSampleVtbl* do
    GUID = LibC::GUID.new(0xb502d1be_u32, 0x9a57_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IStreamSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_media_stream(this : IStreamSample*, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_stream.call(this, ppMediaStream)
    end
    def get_sample_times(this : IStreamSample*, pStartTime : Int64*, pEndTime : Int64*, pCurrentTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_times.call(this, pStartTime, pEndTime, pCurrentTime)
    end
    def set_sample_times(this : IStreamSample*, pStartTime : Int64*, pEndTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_times.call(this, pStartTime, pEndTime)
    end
    def update(this : IStreamSample*, dwFlags : UInt32, hEvent : Win32cr::Foundation::HANDLE, pfnAPC : Win32cr::Foundation::PAPCFUNC, dwAPCData : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, dwFlags, hEvent, pfnAPC, dwAPCData)
    end
    def completion_status(this : IStreamSample*, dwFlags : UInt32, dwMilliseconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.completion_status.call(this, dwFlags, dwMilliseconds)
    end

  end

  @[Extern]
  record IDirectDrawMediaStreamVtbl,
    query_interface : Proc(IDirectDrawMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectDrawMediaStream*, UInt32),
    release : Proc(IDirectDrawMediaStream*, UInt32),
    get_multi_media_stream : Proc(IDirectDrawMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    get_information : Proc(IDirectDrawMediaStream*, LibC::GUID*, Win32cr::Media::DirectShow::STREAM_TYPE*, Win32cr::Foundation::HRESULT),
    set_same_format : Proc(IDirectDrawMediaStream*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IDirectDrawMediaStream*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_shared_sample : Proc(IDirectDrawMediaStream*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    send_end_of_stream : Proc(IDirectDrawMediaStream*, UInt32, Win32cr::Foundation::HRESULT),
    get_format : Proc(IDirectDrawMediaStream*, Win32cr::Graphics::DirectDraw::DDSURFACEDESC*, Void**, Win32cr::Graphics::DirectDraw::DDSURFACEDESC*, UInt32*, Win32cr::Foundation::HRESULT),
    set_format : Proc(IDirectDrawMediaStream*, Win32cr::Graphics::DirectDraw::DDSURFACEDESC*, Void*, Win32cr::Foundation::HRESULT),
    get_direct_draw : Proc(IDirectDrawMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    set_direct_draw : Proc(IDirectDrawMediaStream*, Void*, Win32cr::Foundation::HRESULT),
    create_sample : Proc(IDirectDrawMediaStream*, Void*, Win32cr::Foundation::RECT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_time_per_frame : Proc(IDirectDrawMediaStream*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f4104fce-9a70-11d0-8fde-00c04fd9189d")]
  record IDirectDrawMediaStream, lpVtbl : IDirectDrawMediaStreamVtbl* do
    GUID = LibC::GUID.new(0xf4104fce_u32, 0x9a70_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IDirectDrawMediaStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectDrawMediaStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectDrawMediaStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multi_media_stream(this : IDirectDrawMediaStream*, ppMultiMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multi_media_stream.call(this, ppMultiMediaStream)
    end
    def get_information(this : IDirectDrawMediaStream*, pPurposeId : LibC::GUID*, pType : Win32cr::Media::DirectShow::STREAM_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pPurposeId, pType)
    end
    def set_same_format(this : IDirectDrawMediaStream*, pStreamThatHasDesiredFormat : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_same_format.call(this, pStreamThatHasDesiredFormat, dwFlags)
    end
    def allocate_sample(this : IDirectDrawMediaStream*, dwFlags : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, dwFlags, ppSample)
    end
    def create_shared_sample(this : IDirectDrawMediaStream*, pExistingSample : Void*, dwFlags : UInt32, ppNewSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_sample.call(this, pExistingSample, dwFlags, ppNewSample)
    end
    def send_end_of_stream(this : IDirectDrawMediaStream*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_end_of_stream.call(this, dwFlags)
    end
    def get_format(this : IDirectDrawMediaStream*, pDDSDCurrent : Win32cr::Graphics::DirectDraw::DDSURFACEDESC*, ppDirectDrawPalette : Void**, pDDSDDesired : Win32cr::Graphics::DirectDraw::DDSURFACEDESC*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_format.call(this, pDDSDCurrent, ppDirectDrawPalette, pDDSDDesired, pdwFlags)
    end
    def set_format(this : IDirectDrawMediaStream*, pDDSurfaceDesc : Win32cr::Graphics::DirectDraw::DDSURFACEDESC*, pDirectDrawPalette : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_format.call(this, pDDSurfaceDesc, pDirectDrawPalette)
    end
    def get_direct_draw(this : IDirectDrawMediaStream*, ppDirectDraw : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_direct_draw.call(this, ppDirectDraw)
    end
    def set_direct_draw(this : IDirectDrawMediaStream*, pDirectDraw : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_draw.call(this, pDirectDraw)
    end
    def create_sample(this : IDirectDrawMediaStream*, pSurface : Void*, pRect : Win32cr::Foundation::RECT*, dwFlags : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sample.call(this, pSurface, pRect, dwFlags, ppSample)
    end
    def get_time_per_frame(this : IDirectDrawMediaStream*, pFrameTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_per_frame.call(this, pFrameTime)
    end

  end

  @[Extern]
  record IDirectDrawStreamSampleVtbl,
    query_interface : Proc(IDirectDrawStreamSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectDrawStreamSample*, UInt32),
    release : Proc(IDirectDrawStreamSample*, UInt32),
    get_media_stream : Proc(IDirectDrawStreamSample*, Void**, Win32cr::Foundation::HRESULT),
    get_sample_times : Proc(IDirectDrawStreamSample*, Int64*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_times : Proc(IDirectDrawStreamSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    update : Proc(IDirectDrawStreamSample*, UInt32, Win32cr::Foundation::HANDLE, Win32cr::Foundation::PAPCFUNC, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    completion_status : Proc(IDirectDrawStreamSample*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_surface : Proc(IDirectDrawStreamSample*, Void**, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_rect : Proc(IDirectDrawStreamSample*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f4104fcf-9a70-11d0-8fde-00c04fd9189d")]
  record IDirectDrawStreamSample, lpVtbl : IDirectDrawStreamSampleVtbl* do
    GUID = LibC::GUID.new(0xf4104fcf_u32, 0x9a70_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IDirectDrawStreamSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectDrawStreamSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectDrawStreamSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_media_stream(this : IDirectDrawStreamSample*, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_stream.call(this, ppMediaStream)
    end
    def get_sample_times(this : IDirectDrawStreamSample*, pStartTime : Int64*, pEndTime : Int64*, pCurrentTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_times.call(this, pStartTime, pEndTime, pCurrentTime)
    end
    def set_sample_times(this : IDirectDrawStreamSample*, pStartTime : Int64*, pEndTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_times.call(this, pStartTime, pEndTime)
    end
    def update(this : IDirectDrawStreamSample*, dwFlags : UInt32, hEvent : Win32cr::Foundation::HANDLE, pfnAPC : Win32cr::Foundation::PAPCFUNC, dwAPCData : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, dwFlags, hEvent, pfnAPC, dwAPCData)
    end
    def completion_status(this : IDirectDrawStreamSample*, dwFlags : UInt32, dwMilliseconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.completion_status.call(this, dwFlags, dwMilliseconds)
    end
    def get_surface(this : IDirectDrawStreamSample*, ppDirectDrawSurface : Void**, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface.call(this, ppDirectDrawSurface, pRect)
    end
    def set_rect(this : IDirectDrawStreamSample*, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rect.call(this, pRect)
    end

  end

  @[Extern]
  record IAudioMediaStreamVtbl,
    query_interface : Proc(IAudioMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioMediaStream*, UInt32),
    release : Proc(IAudioMediaStream*, UInt32),
    get_multi_media_stream : Proc(IAudioMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    get_information : Proc(IAudioMediaStream*, LibC::GUID*, Win32cr::Media::DirectShow::STREAM_TYPE*, Win32cr::Foundation::HRESULT),
    set_same_format : Proc(IAudioMediaStream*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IAudioMediaStream*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_shared_sample : Proc(IAudioMediaStream*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    send_end_of_stream : Proc(IAudioMediaStream*, UInt32, Win32cr::Foundation::HRESULT),
    get_format : Proc(IAudioMediaStream*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::HRESULT),
    set_format : Proc(IAudioMediaStream*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::HRESULT),
    create_sample : Proc(IAudioMediaStream*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f7537560-a3be-11d0-8212-00c04fc32c45")]
  record IAudioMediaStream, lpVtbl : IAudioMediaStreamVtbl* do
    GUID = LibC::GUID.new(0xf7537560_u32, 0xa3be_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
    def query_interface(this : IAudioMediaStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioMediaStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioMediaStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multi_media_stream(this : IAudioMediaStream*, ppMultiMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multi_media_stream.call(this, ppMultiMediaStream)
    end
    def get_information(this : IAudioMediaStream*, pPurposeId : LibC::GUID*, pType : Win32cr::Media::DirectShow::STREAM_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pPurposeId, pType)
    end
    def set_same_format(this : IAudioMediaStream*, pStreamThatHasDesiredFormat : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_same_format.call(this, pStreamThatHasDesiredFormat, dwFlags)
    end
    def allocate_sample(this : IAudioMediaStream*, dwFlags : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, dwFlags, ppSample)
    end
    def create_shared_sample(this : IAudioMediaStream*, pExistingSample : Void*, dwFlags : UInt32, ppNewSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_sample.call(this, pExistingSample, dwFlags, ppNewSample)
    end
    def send_end_of_stream(this : IAudioMediaStream*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_end_of_stream.call(this, dwFlags)
    end
    def get_format(this : IAudioMediaStream*, pWaveFormatCurrent : Win32cr::Media::Audio::WAVEFORMATEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_format.call(this, pWaveFormatCurrent)
    end
    def set_format(this : IAudioMediaStream*, lpWaveFormat : Win32cr::Media::Audio::WAVEFORMATEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_format.call(this, lpWaveFormat)
    end
    def create_sample(this : IAudioMediaStream*, pAudioData : Void*, dwFlags : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sample.call(this, pAudioData, dwFlags, ppSample)
    end

  end

  @[Extern]
  record IAudioStreamSampleVtbl,
    query_interface : Proc(IAudioStreamSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioStreamSample*, UInt32),
    release : Proc(IAudioStreamSample*, UInt32),
    get_media_stream : Proc(IAudioStreamSample*, Void**, Win32cr::Foundation::HRESULT),
    get_sample_times : Proc(IAudioStreamSample*, Int64*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_times : Proc(IAudioStreamSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    update : Proc(IAudioStreamSample*, UInt32, Win32cr::Foundation::HANDLE, Win32cr::Foundation::PAPCFUNC, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    completion_status : Proc(IAudioStreamSample*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_audio_data : Proc(IAudioStreamSample*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("345fee00-aba5-11d0-8212-00c04fc32c45")]
  record IAudioStreamSample, lpVtbl : IAudioStreamSampleVtbl* do
    GUID = LibC::GUID.new(0x345fee00_u32, 0xaba5_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
    def query_interface(this : IAudioStreamSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioStreamSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioStreamSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_media_stream(this : IAudioStreamSample*, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_stream.call(this, ppMediaStream)
    end
    def get_sample_times(this : IAudioStreamSample*, pStartTime : Int64*, pEndTime : Int64*, pCurrentTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_times.call(this, pStartTime, pEndTime, pCurrentTime)
    end
    def set_sample_times(this : IAudioStreamSample*, pStartTime : Int64*, pEndTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_times.call(this, pStartTime, pEndTime)
    end
    def update(this : IAudioStreamSample*, dwFlags : UInt32, hEvent : Win32cr::Foundation::HANDLE, pfnAPC : Win32cr::Foundation::PAPCFUNC, dwAPCData : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, dwFlags, hEvent, pfnAPC, dwAPCData)
    end
    def completion_status(this : IAudioStreamSample*, dwFlags : UInt32, dwMilliseconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.completion_status.call(this, dwFlags, dwMilliseconds)
    end
    def get_audio_data(this : IAudioStreamSample*, ppAudio : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_data.call(this, ppAudio)
    end

  end

  @[Extern]
  record IMemoryDataVtbl,
    query_interface : Proc(IMemoryData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMemoryData*, UInt32),
    release : Proc(IMemoryData*, UInt32),
    set_buffer : Proc(IMemoryData*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_info : Proc(IMemoryData*, UInt32*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_actual : Proc(IMemoryData*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("327fc560-af60-11d0-8212-00c04fc32c45")]
  record IMemoryData, lpVtbl : IMemoryDataVtbl* do
    GUID = LibC::GUID.new(0x327fc560_u32, 0xaf60_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
    def query_interface(this : IMemoryData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMemoryData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMemoryData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_buffer(this : IMemoryData*, cbSize : UInt32, pbData : UInt8*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buffer.call(this, cbSize, pbData, dwFlags)
    end
    def get_info(this : IMemoryData*, pdwLength : UInt32*, ppbData : UInt8**, pcbActualData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this, pdwLength, ppbData, pcbActualData)
    end
    def set_actual(this : IMemoryData*, cbDataValid : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_actual.call(this, cbDataValid)
    end

  end

  @[Extern]
  record IAudioDataVtbl,
    query_interface : Proc(IAudioData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioData*, UInt32),
    release : Proc(IAudioData*, UInt32),
    set_buffer : Proc(IAudioData*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_info : Proc(IAudioData*, UInt32*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_actual : Proc(IAudioData*, UInt32, Win32cr::Foundation::HRESULT),
    get_format : Proc(IAudioData*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::HRESULT),
    set_format : Proc(IAudioData*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("54c719c0-af60-11d0-8212-00c04fc32c45")]
  record IAudioData, lpVtbl : IAudioDataVtbl* do
    GUID = LibC::GUID.new(0x54c719c0_u32, 0xaf60_u16, 0x11d0_u16, StaticArray[0x82_u8, 0x12_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xc3_u8, 0x2c_u8, 0x45_u8])
    def query_interface(this : IAudioData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_buffer(this : IAudioData*, cbSize : UInt32, pbData : UInt8*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buffer.call(this, cbSize, pbData, dwFlags)
    end
    def get_info(this : IAudioData*, pdwLength : UInt32*, ppbData : UInt8**, pcbActualData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this, pdwLength, ppbData, pcbActualData)
    end
    def set_actual(this : IAudioData*, cbDataValid : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_actual.call(this, cbDataValid)
    end
    def get_format(this : IAudioData*, pWaveFormatCurrent : Win32cr::Media::Audio::WAVEFORMATEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_format.call(this, pWaveFormatCurrent)
    end
    def set_format(this : IAudioData*, lpWaveFormat : Win32cr::Media::Audio::WAVEFORMATEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_format.call(this, lpWaveFormat)
    end

  end

  @[Extern]
  record IAMMultiMediaStreamVtbl,
    query_interface : Proc(IAMMultiMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMMultiMediaStream*, UInt32),
    release : Proc(IAMMultiMediaStream*, UInt32),
    get_information : Proc(IAMMultiMediaStream*, Win32cr::Media::DirectShow::MMSSF_GET_INFORMATION_FLAGS*, Win32cr::Media::DirectShow::STREAM_TYPE*, Win32cr::Foundation::HRESULT),
    get_media_stream : Proc(IAMMultiMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enum_media_streams : Proc(IAMMultiMediaStream*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_state : Proc(IAMMultiMediaStream*, Win32cr::Media::DirectShow::STREAM_STATE*, Win32cr::Foundation::HRESULT),
    set_state : Proc(IAMMultiMediaStream*, Win32cr::Media::DirectShow::STREAM_STATE, Win32cr::Foundation::HRESULT),
    get_time : Proc(IAMMultiMediaStream*, Int64*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IAMMultiMediaStream*, Int64*, Win32cr::Foundation::HRESULT),
    seek : Proc(IAMMultiMediaStream*, Int64, Win32cr::Foundation::HRESULT),
    get_end_of_stream_event_handle : Proc(IAMMultiMediaStream*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IAMMultiMediaStream*, Win32cr::Media::DirectShow::STREAM_TYPE, Win32cr::Media::DirectShow::AMMSF_MMS_INIT_FLAGS, Void*, Win32cr::Foundation::HRESULT),
    get_filter_graph : Proc(IAMMultiMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    get_filter : Proc(IAMMultiMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    add_media_stream : Proc(IAMMultiMediaStream*, Void*, LibC::GUID*, Win32cr::Media::DirectShow::AMMSF_MS_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    open_file : Proc(IAMMultiMediaStream*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    open_moniker : Proc(IAMMultiMediaStream*, Void*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    render : Proc(IAMMultiMediaStream*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bebe595c-9a6f-11d0-8fde-00c04fd9189d")]
  record IAMMultiMediaStream, lpVtbl : IAMMultiMediaStreamVtbl* do
    GUID = LibC::GUID.new(0xbebe595c_u32, 0x9a6f_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IAMMultiMediaStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMMultiMediaStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMMultiMediaStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_information(this : IAMMultiMediaStream*, pdwFlags : Win32cr::Media::DirectShow::MMSSF_GET_INFORMATION_FLAGS*, pStreamType : Win32cr::Media::DirectShow::STREAM_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pdwFlags, pStreamType)
    end
    def get_media_stream(this : IAMMultiMediaStream*, idPurpose : LibC::GUID*, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_stream.call(this, idPurpose, ppMediaStream)
    end
    def enum_media_streams(this : IAMMultiMediaStream*, index : Int32, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_media_streams.call(this, index, ppMediaStream)
    end
    def get_state(this : IAMMultiMediaStream*, pCurrentState : Win32cr::Media::DirectShow::STREAM_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pCurrentState)
    end
    def set_state(this : IAMMultiMediaStream*, new_state : Win32cr::Media::DirectShow::STREAM_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_state.call(this, new_state)
    end
    def get_time(this : IAMMultiMediaStream*, pCurrentTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time.call(this, pCurrentTime)
    end
    def get_duration(this : IAMMultiMediaStream*, pDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def seek(this : IAMMultiMediaStream*, seek_time : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, seek_time)
    end
    def get_end_of_stream_event_handle(this : IAMMultiMediaStream*, phEOS : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_end_of_stream_event_handle.call(this, phEOS)
    end
    def initialize__(this : IAMMultiMediaStream*, stream_type : Win32cr::Media::DirectShow::STREAM_TYPE, dwFlags : Win32cr::Media::DirectShow::AMMSF_MMS_INIT_FLAGS, pFilterGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, stream_type, dwFlags, pFilterGraph)
    end
    def get_filter_graph(this : IAMMultiMediaStream*, ppGraphBuilder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter_graph.call(this, ppGraphBuilder)
    end
    def get_filter(this : IAMMultiMediaStream*, ppFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter.call(this, ppFilter)
    end
    def add_media_stream(this : IAMMultiMediaStream*, pStreamObject : Void*, purpose_id : LibC::GUID*, dwFlags : Win32cr::Media::DirectShow::AMMSF_MS_FLAGS, ppNewStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_media_stream.call(this, pStreamObject, purpose_id, dwFlags, ppNewStream)
    end
    def open_file(this : IAMMultiMediaStream*, pszFileName : Win32cr::Foundation::PWSTR, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_file.call(this, pszFileName, dwFlags)
    end
    def open_moniker(this : IAMMultiMediaStream*, pCtx : Void*, pMoniker : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_moniker.call(this, pCtx, pMoniker, dwFlags)
    end
    def render(this : IAMMultiMediaStream*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.render.call(this, dwFlags)
    end

  end

  @[Extern]
  record IAMMediaStreamVtbl,
    query_interface : Proc(IAMMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMMediaStream*, UInt32),
    release : Proc(IAMMediaStream*, UInt32),
    get_multi_media_stream : Proc(IAMMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    get_information : Proc(IAMMediaStream*, LibC::GUID*, Win32cr::Media::DirectShow::STREAM_TYPE*, Win32cr::Foundation::HRESULT),
    set_same_format : Proc(IAMMediaStream*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IAMMediaStream*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_shared_sample : Proc(IAMMediaStream*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    send_end_of_stream : Proc(IAMMediaStream*, UInt32, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IAMMediaStream*, Void*, UInt32, LibC::GUID*, Win32cr::Media::DirectShow::STREAM_TYPE, Win32cr::Foundation::HRESULT),
    set_state : Proc(IAMMediaStream*, Win32cr::Media::DirectShow::FILTER_STATE, Win32cr::Foundation::HRESULT),
    join_am_multi_media_stream : Proc(IAMMediaStream*, Void*, Win32cr::Foundation::HRESULT),
    join_filter : Proc(IAMMediaStream*, Void*, Win32cr::Foundation::HRESULT),
    join_filter_graph : Proc(IAMMediaStream*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bebe595d-9a6f-11d0-8fde-00c04fd9189d")]
  record IAMMediaStream, lpVtbl : IAMMediaStreamVtbl* do
    GUID = LibC::GUID.new(0xbebe595d_u32, 0x9a6f_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IAMMediaStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMMediaStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMMediaStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multi_media_stream(this : IAMMediaStream*, ppMultiMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multi_media_stream.call(this, ppMultiMediaStream)
    end
    def get_information(this : IAMMediaStream*, pPurposeId : LibC::GUID*, pType : Win32cr::Media::DirectShow::STREAM_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pPurposeId, pType)
    end
    def set_same_format(this : IAMMediaStream*, pStreamThatHasDesiredFormat : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_same_format.call(this, pStreamThatHasDesiredFormat, dwFlags)
    end
    def allocate_sample(this : IAMMediaStream*, dwFlags : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, dwFlags, ppSample)
    end
    def create_shared_sample(this : IAMMediaStream*, pExistingSample : Void*, dwFlags : UInt32, ppNewSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_sample.call(this, pExistingSample, dwFlags, ppNewSample)
    end
    def send_end_of_stream(this : IAMMediaStream*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_end_of_stream.call(this, dwFlags)
    end
    def initialize__(this : IAMMediaStream*, pSourceObject : Void*, dwFlags : UInt32, purpose_id : LibC::GUID*, stream_type : Win32cr::Media::DirectShow::STREAM_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSourceObject, dwFlags, purpose_id, stream_type)
    end
    def set_state(this : IAMMediaStream*, state : Win32cr::Media::DirectShow::FILTER_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_state.call(this, state)
    end
    def join_am_multi_media_stream(this : IAMMediaStream*, pAMMultiMediaStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.join_am_multi_media_stream.call(this, pAMMultiMediaStream)
    end
    def join_filter(this : IAMMediaStream*, pMediaStreamFilter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.join_filter.call(this, pMediaStreamFilter)
    end
    def join_filter_graph(this : IAMMediaStream*, pFilterGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.join_filter_graph.call(this, pFilterGraph)
    end

  end

  @[Extern]
  record IMediaStreamFilterVtbl,
    query_interface : Proc(IMediaStreamFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaStreamFilter*, UInt32),
    release : Proc(IMediaStreamFilter*, UInt32),
    get_class_id : Proc(IMediaStreamFilter*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMediaStreamFilter*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMediaStreamFilter*, Win32cr::Foundation::HRESULT),
    run : Proc(IMediaStreamFilter*, Int64, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMediaStreamFilter*, UInt32, Win32cr::Media::DirectShow::FILTER_STATE*, Win32cr::Foundation::HRESULT),
    set_sync_source : Proc(IMediaStreamFilter*, Void*, Win32cr::Foundation::HRESULT),
    get_sync_source : Proc(IMediaStreamFilter*, Void**, Win32cr::Foundation::HRESULT),
    enum_pins : Proc(IMediaStreamFilter*, Void**, Win32cr::Foundation::HRESULT),
    find_pin : Proc(IMediaStreamFilter*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    query_filter_info : Proc(IMediaStreamFilter*, Win32cr::Media::DirectShow::FILTER_INFO*, Win32cr::Foundation::HRESULT),
    join_filter_graph : Proc(IMediaStreamFilter*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    query_vendor_info : Proc(IMediaStreamFilter*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    add_media_stream : Proc(IMediaStreamFilter*, Void*, Win32cr::Foundation::HRESULT),
    get_media_stream : Proc(IMediaStreamFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enum_media_streams : Proc(IMediaStreamFilter*, Int32, Void**, Win32cr::Foundation::HRESULT),
    support_seeking : Proc(IMediaStreamFilter*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    reference_time_to_stream_time : Proc(IMediaStreamFilter*, Int64*, Win32cr::Foundation::HRESULT),
    get_current_stream_time : Proc(IMediaStreamFilter*, Int64*, Win32cr::Foundation::HRESULT),
    wait_until : Proc(IMediaStreamFilter*, Int64, Win32cr::Foundation::HRESULT),
    flush : Proc(IMediaStreamFilter*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    end_of_stream : Proc(IMediaStreamFilter*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bebe595e-9a6f-11d0-8fde-00c04fd9189d")]
  record IMediaStreamFilter, lpVtbl : IMediaStreamFilterVtbl* do
    GUID = LibC::GUID.new(0xbebe595e_u32, 0x9a6f_u16, 0x11d0_u16, StaticArray[0x8f_u8, 0xde_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IMediaStreamFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaStreamFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaStreamFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IMediaStreamFilter*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def stop(this : IMediaStreamFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IMediaStreamFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def run(this : IMediaStreamFilter*, tStart : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this, tStart)
    end
    def get_state(this : IMediaStreamFilter*, dwMilliSecsTimeout : UInt32, state : Win32cr::Media::DirectShow::FILTER_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, dwMilliSecsTimeout, state)
    end
    def set_sync_source(this : IMediaStreamFilter*, pClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_source.call(this, pClock)
    end
    def get_sync_source(this : IMediaStreamFilter*, pClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sync_source.call(this, pClock)
    end
    def enum_pins(this : IMediaStreamFilter*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_pins.call(this, ppEnum)
    end
    def find_pin(this : IMediaStreamFilter*, id : Win32cr::Foundation::PWSTR, ppPin : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_pin.call(this, id, ppPin)
    end
    def query_filter_info(this : IMediaStreamFilter*, pInfo : Win32cr::Media::DirectShow::FILTER_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_filter_info.call(this, pInfo)
    end
    def join_filter_graph(this : IMediaStreamFilter*, pGraph : Void*, pName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.join_filter_graph.call(this, pGraph, pName)
    end
    def query_vendor_info(this : IMediaStreamFilter*, pVendorInfo : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_vendor_info.call(this, pVendorInfo)
    end
    def add_media_stream(this : IMediaStreamFilter*, pAMMediaStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_media_stream.call(this, pAMMediaStream)
    end
    def get_media_stream(this : IMediaStreamFilter*, idPurpose : LibC::GUID*, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_stream.call(this, idPurpose, ppMediaStream)
    end
    def enum_media_streams(this : IMediaStreamFilter*, index : Int32, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_media_streams.call(this, index, ppMediaStream)
    end
    def support_seeking(this : IMediaStreamFilter*, bRenderer : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.support_seeking.call(this, bRenderer)
    end
    def reference_time_to_stream_time(this : IMediaStreamFilter*, pTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reference_time_to_stream_time.call(this, pTime)
    end
    def get_current_stream_time(this : IMediaStreamFilter*, pCurrentStreamTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_stream_time.call(this, pCurrentStreamTime)
    end
    def wait_until(this : IMediaStreamFilter*, wait_stream_time : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_until.call(this, wait_stream_time)
    end
    def flush(this : IMediaStreamFilter*, bCancelEOS : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, bCancelEOS)
    end
    def end_of_stream(this : IMediaStreamFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_stream.call(this)
    end

  end

  @[Extern]
  record IDirectDrawMediaSampleAllocatorVtbl,
    query_interface : Proc(IDirectDrawMediaSampleAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectDrawMediaSampleAllocator*, UInt32),
    release : Proc(IDirectDrawMediaSampleAllocator*, UInt32),
    get_direct_draw : Proc(IDirectDrawMediaSampleAllocator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab6b4afc-f6e4-11d0-900d-00c04fd9189d")]
  record IDirectDrawMediaSampleAllocator, lpVtbl : IDirectDrawMediaSampleAllocatorVtbl* do
    GUID = LibC::GUID.new(0xab6b4afc_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IDirectDrawMediaSampleAllocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectDrawMediaSampleAllocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectDrawMediaSampleAllocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_direct_draw(this : IDirectDrawMediaSampleAllocator*, ppDirectDraw : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_direct_draw.call(this, ppDirectDraw)
    end

  end

  @[Extern]
  record IDirectDrawMediaSampleVtbl,
    query_interface : Proc(IDirectDrawMediaSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectDrawMediaSample*, UInt32),
    release : Proc(IDirectDrawMediaSample*, UInt32),
    get_surface_and_release_lock : Proc(IDirectDrawMediaSample*, Void**, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    lock_media_sample_pointer : Proc(IDirectDrawMediaSample*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab6b4afe-f6e4-11d0-900d-00c04fd9189d")]
  record IDirectDrawMediaSample, lpVtbl : IDirectDrawMediaSampleVtbl* do
    GUID = LibC::GUID.new(0xab6b4afe_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IDirectDrawMediaSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectDrawMediaSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectDrawMediaSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_surface_and_release_lock(this : IDirectDrawMediaSample*, ppDirectDrawSurface : Void**, pRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface_and_release_lock.call(this, ppDirectDrawSurface, pRect)
    end
    def lock_media_sample_pointer(this : IDirectDrawMediaSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_media_sample_pointer.call(this)
    end

  end

  @[Extern]
  record IAMMediaTypeStreamVtbl,
    query_interface : Proc(IAMMediaTypeStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMMediaTypeStream*, UInt32),
    release : Proc(IAMMediaTypeStream*, UInt32),
    get_multi_media_stream : Proc(IAMMediaTypeStream*, Void**, Win32cr::Foundation::HRESULT),
    get_information : Proc(IAMMediaTypeStream*, LibC::GUID*, Win32cr::Media::DirectShow::STREAM_TYPE*, Win32cr::Foundation::HRESULT),
    set_same_format : Proc(IAMMediaTypeStream*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IAMMediaTypeStream*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_shared_sample : Proc(IAMMediaTypeStream*, Void*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    send_end_of_stream : Proc(IAMMediaTypeStream*, UInt32, Win32cr::Foundation::HRESULT),
    get_format : Proc(IAMMediaTypeStream*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, UInt32, Win32cr::Foundation::HRESULT),
    set_format : Proc(IAMMediaTypeStream*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, UInt32, Win32cr::Foundation::HRESULT),
    create_sample : Proc(IAMMediaTypeStream*, Int32, UInt8*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_allocator_requirements : Proc(IAMMediaTypeStream*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT),
    set_stream_allocator_requirements : Proc(IAMMediaTypeStream*, Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab6b4afa-f6e4-11d0-900d-00c04fd9189d")]
  record IAMMediaTypeStream, lpVtbl : IAMMediaTypeStreamVtbl* do
    GUID = LibC::GUID.new(0xab6b4afa_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IAMMediaTypeStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMMediaTypeStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMMediaTypeStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_multi_media_stream(this : IAMMediaTypeStream*, ppMultiMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multi_media_stream.call(this, ppMultiMediaStream)
    end
    def get_information(this : IAMMediaTypeStream*, pPurposeId : LibC::GUID*, pType : Win32cr::Media::DirectShow::STREAM_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pPurposeId, pType)
    end
    def set_same_format(this : IAMMediaTypeStream*, pStreamThatHasDesiredFormat : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_same_format.call(this, pStreamThatHasDesiredFormat, dwFlags)
    end
    def allocate_sample(this : IAMMediaTypeStream*, dwFlags : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, dwFlags, ppSample)
    end
    def create_shared_sample(this : IAMMediaTypeStream*, pExistingSample : Void*, dwFlags : UInt32, ppNewSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_sample.call(this, pExistingSample, dwFlags, ppNewSample)
    end
    def send_end_of_stream(this : IAMMediaTypeStream*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_end_of_stream.call(this, dwFlags)
    end
    def get_format(this : IAMMediaTypeStream*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_format.call(this, pMediaType, dwFlags)
    end
    def set_format(this : IAMMediaTypeStream*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_format.call(this, pMediaType, dwFlags)
    end
    def create_sample(this : IAMMediaTypeStream*, lSampleSize : Int32, pbBuffer : UInt8*, dwFlags : UInt32, pUnkOuter : Void*, ppAMMediaTypeSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sample.call(this, lSampleSize, pbBuffer, dwFlags, pUnkOuter, ppAMMediaTypeSample)
    end
    def get_stream_allocator_requirements(this : IAMMediaTypeStream*, pProps : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_allocator_requirements.call(this, pProps)
    end
    def set_stream_allocator_requirements(this : IAMMediaTypeStream*, pProps : Win32cr::Media::DirectShow::ALLOCATOR_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_allocator_requirements.call(this, pProps)
    end

  end

  @[Extern]
  record IAMMediaTypeSampleVtbl,
    query_interface : Proc(IAMMediaTypeSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMMediaTypeSample*, UInt32),
    release : Proc(IAMMediaTypeSample*, UInt32),
    get_media_stream : Proc(IAMMediaTypeSample*, Void**, Win32cr::Foundation::HRESULT),
    get_sample_times : Proc(IAMMediaTypeSample*, Int64*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_times : Proc(IAMMediaTypeSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    update : Proc(IAMMediaTypeSample*, UInt32, Win32cr::Foundation::HANDLE, Win32cr::Foundation::PAPCFUNC, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    completion_status : Proc(IAMMediaTypeSample*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_pointer : Proc(IAMMediaTypeSample*, UInt8*, Int32, Win32cr::Foundation::HRESULT),
    get_pointer : Proc(IAMMediaTypeSample*, UInt8**, Win32cr::Foundation::HRESULT),
    get_size : Proc(IAMMediaTypeSample*, Int32),
    get_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    is_sync_point : Proc(IAMMediaTypeSample*, Win32cr::Foundation::HRESULT),
    set_sync_point : Proc(IAMMediaTypeSample*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    is_preroll : Proc(IAMMediaTypeSample*, Win32cr::Foundation::HRESULT),
    set_preroll : Proc(IAMMediaTypeSample*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_actual_data_length : Proc(IAMMediaTypeSample*, Int32),
    set_actual_data_length : Proc(IAMMediaTypeSample*, Int32, Win32cr::Foundation::HRESULT),
    get_media_type : Proc(IAMMediaTypeSample*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(IAMMediaTypeSample*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    is_discontinuity : Proc(IAMMediaTypeSample*, Win32cr::Foundation::HRESULT),
    set_discontinuity : Proc(IAMMediaTypeSample*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_media_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_media_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab6b4afb-f6e4-11d0-900d-00c04fd9189d")]
  record IAMMediaTypeSample, lpVtbl : IAMMediaTypeSampleVtbl* do
    GUID = LibC::GUID.new(0xab6b4afb_u32, 0xf6e4_u16, 0x11d0_u16, StaticArray[0x90_u8, 0xd_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd9_u8, 0x18_u8, 0x9d_u8])
    def query_interface(this : IAMMediaTypeSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMMediaTypeSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMMediaTypeSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_media_stream(this : IAMMediaTypeSample*, ppMediaStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_stream.call(this, ppMediaStream)
    end
    def get_sample_times(this : IAMMediaTypeSample*, pStartTime : Int64*, pEndTime : Int64*, pCurrentTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_times.call(this, pStartTime, pEndTime, pCurrentTime)
    end
    def set_sample_times(this : IAMMediaTypeSample*, pStartTime : Int64*, pEndTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_times.call(this, pStartTime, pEndTime)
    end
    def update(this : IAMMediaTypeSample*, dwFlags : UInt32, hEvent : Win32cr::Foundation::HANDLE, pfnAPC : Win32cr::Foundation::PAPCFUNC, dwAPCData : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, dwFlags, hEvent, pfnAPC, dwAPCData)
    end
    def completion_status(this : IAMMediaTypeSample*, dwFlags : UInt32, dwMilliseconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.completion_status.call(this, dwFlags, dwMilliseconds)
    end
    def set_pointer(this : IAMMediaTypeSample*, pBuffer : UInt8*, lSize : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pointer.call(this, pBuffer, lSize)
    end
    def get_pointer(this : IAMMediaTypeSample*, ppBuffer : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pointer.call(this, ppBuffer)
    end
    def get_size(this : IAMMediaTypeSample*) : Int32
      @lpVtbl.try &.value.get_size.call(this)
    end
    def get_time(this : IAMMediaTypeSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time.call(this, pTimeStart, pTimeEnd)
    end
    def set_time(this : IAMMediaTypeSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time.call(this, pTimeStart, pTimeEnd)
    end
    def is_sync_point(this : IAMMediaTypeSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_sync_point.call(this)
    end
    def set_sync_point(this : IAMMediaTypeSample*, bIsSyncPoint : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_point.call(this, bIsSyncPoint)
    end
    def is_preroll(this : IAMMediaTypeSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_preroll.call(this)
    end
    def set_preroll(this : IAMMediaTypeSample*, bIsPreroll : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preroll.call(this, bIsPreroll)
    end
    def get_actual_data_length(this : IAMMediaTypeSample*) : Int32
      @lpVtbl.try &.value.get_actual_data_length.call(this)
    end
    def set_actual_data_length(this : IAMMediaTypeSample*, __midl__iam_media_type_sample0000 : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_actual_data_length.call(this, __midl__iam_media_type_sample0000)
    end
    def get_media_type(this : IAMMediaTypeSample*, ppMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type.call(this, ppMediaType)
    end
    def set_media_type(this : IAMMediaTypeSample*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, pMediaType)
    end
    def is_discontinuity(this : IAMMediaTypeSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_discontinuity.call(this)
    end
    def set_discontinuity(this : IAMMediaTypeSample*, bDiscontinuity : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_discontinuity.call(this, bDiscontinuity)
    end
    def get_media_time(this : IAMMediaTypeSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_time.call(this, pTimeStart, pTimeEnd)
    end
    def set_media_time(this : IAMMediaTypeSample*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_time.call(this, pTimeStart, pTimeEnd)
    end

  end

  @[Extern]
  record IDirectDrawVideoVtbl,
    query_interface : Proc(IDirectDrawVideo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectDrawVideo*, UInt32),
    release : Proc(IDirectDrawVideo*, UInt32),
    get_switches : Proc(IDirectDrawVideo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_switches : Proc(IDirectDrawVideo*, UInt32, Win32cr::Foundation::HRESULT),
    get_caps : Proc(IDirectDrawVideo*, Win32cr::Graphics::DirectDraw::DDCAPS_DX7*, Win32cr::Foundation::HRESULT),
    get_emulated_caps : Proc(IDirectDrawVideo*, Win32cr::Graphics::DirectDraw::DDCAPS_DX7*, Win32cr::Foundation::HRESULT),
    get_surface_desc : Proc(IDirectDrawVideo*, Win32cr::Graphics::DirectDraw::DDSURFACEDESC*, Win32cr::Foundation::HRESULT),
    get_four_cc_codes : Proc(IDirectDrawVideo*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_direct_draw : Proc(IDirectDrawVideo*, Void*, Win32cr::Foundation::HRESULT),
    get_direct_draw : Proc(IDirectDrawVideo*, Void**, Win32cr::Foundation::HRESULT),
    get_surface_type : Proc(IDirectDrawVideo*, UInt32*, Win32cr::Foundation::HRESULT),
    set_default : Proc(IDirectDrawVideo*, Win32cr::Foundation::HRESULT),
    use_scan_line : Proc(IDirectDrawVideo*, Int32, Win32cr::Foundation::HRESULT),
    can_use_scan_line : Proc(IDirectDrawVideo*, Int32*, Win32cr::Foundation::HRESULT),
    use_overlay_stretch : Proc(IDirectDrawVideo*, Int32, Win32cr::Foundation::HRESULT),
    can_use_overlay_stretch : Proc(IDirectDrawVideo*, Int32*, Win32cr::Foundation::HRESULT),
    use_when_full_screen : Proc(IDirectDrawVideo*, Int32, Win32cr::Foundation::HRESULT),
    will_use_full_screen : Proc(IDirectDrawVideo*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("36d39eb0-dd75-11ce-bf0e-00aa0055595a")]
  record IDirectDrawVideo, lpVtbl : IDirectDrawVideoVtbl* do
    GUID = LibC::GUID.new(0x36d39eb0_u32, 0xdd75_u16, 0x11ce_u16, StaticArray[0xbf_u8, 0xe_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x55_u8, 0x59_u8, 0x5a_u8])
    def query_interface(this : IDirectDrawVideo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectDrawVideo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectDrawVideo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_switches(this : IDirectDrawVideo*, pSwitches : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_switches.call(this, pSwitches)
    end
    def set_switches(this : IDirectDrawVideo*, switches : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_switches.call(this, switches)
    end
    def get_caps(this : IDirectDrawVideo*, pCaps : Win32cr::Graphics::DirectDraw::DDCAPS_DX7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_caps.call(this, pCaps)
    end
    def get_emulated_caps(this : IDirectDrawVideo*, pCaps : Win32cr::Graphics::DirectDraw::DDCAPS_DX7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_emulated_caps.call(this, pCaps)
    end
    def get_surface_desc(this : IDirectDrawVideo*, pSurfaceDesc : Win32cr::Graphics::DirectDraw::DDSURFACEDESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface_desc.call(this, pSurfaceDesc)
    end
    def get_four_cc_codes(this : IDirectDrawVideo*, pCount : UInt32*, pCodes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_four_cc_codes.call(this, pCount, pCodes)
    end
    def set_direct_draw(this : IDirectDrawVideo*, pDirectDraw : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_draw.call(this, pDirectDraw)
    end
    def get_direct_draw(this : IDirectDrawVideo*, ppDirectDraw : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_direct_draw.call(this, ppDirectDraw)
    end
    def get_surface_type(this : IDirectDrawVideo*, pSurfaceType : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface_type.call(this, pSurfaceType)
    end
    def set_default(this : IDirectDrawVideo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default.call(this)
    end
    def use_scan_line(this : IDirectDrawVideo*, use_scan_line : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.use_scan_line.call(this, use_scan_line)
    end
    def can_use_scan_line(this : IDirectDrawVideo*, use_scan_line : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_use_scan_line.call(this, use_scan_line)
    end
    def use_overlay_stretch(this : IDirectDrawVideo*, use_overlay_stretch : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.use_overlay_stretch.call(this, use_overlay_stretch)
    end
    def can_use_overlay_stretch(this : IDirectDrawVideo*, use_overlay_stretch : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_use_overlay_stretch.call(this, use_overlay_stretch)
    end
    def use_when_full_screen(this : IDirectDrawVideo*, use_when_full_screen : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.use_when_full_screen.call(this, use_when_full_screen)
    end
    def will_use_full_screen(this : IDirectDrawVideo*, use_when_full_screen : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.will_use_full_screen.call(this, use_when_full_screen)
    end

  end

  @[Extern]
  record IQualPropVtbl,
    query_interface : Proc(IQualProp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IQualProp*, UInt32),
    release : Proc(IQualProp*, UInt32),
    get_FramesDroppedInRenderer : Proc(IQualProp*, Int32*, Win32cr::Foundation::HRESULT),
    get_FramesDrawn : Proc(IQualProp*, Int32*, Win32cr::Foundation::HRESULT),
    get_AvgFrameRate : Proc(IQualProp*, Int32*, Win32cr::Foundation::HRESULT),
    get_Jitter : Proc(IQualProp*, Int32*, Win32cr::Foundation::HRESULT),
    get_AvgSyncOffset : Proc(IQualProp*, Int32*, Win32cr::Foundation::HRESULT),
    get_DevSyncOffset : Proc(IQualProp*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1bd0ecb0-f8e2-11ce-aac6-0020af0b99a3")]
  record IQualProp, lpVtbl : IQualPropVtbl* do
    GUID = LibC::GUID.new(0x1bd0ecb0_u32, 0xf8e2_u16, 0x11ce_u16, StaticArray[0xaa_u8, 0xc6_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0x99_u8, 0xa3_u8])
    def query_interface(this : IQualProp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IQualProp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IQualProp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_FramesDroppedInRenderer(this : IQualProp*, pcFrames : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FramesDroppedInRenderer.call(this, pcFrames)
    end
    def get_FramesDrawn(this : IQualProp*, pcFramesDrawn : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FramesDrawn.call(this, pcFramesDrawn)
    end
    def get_AvgFrameRate(this : IQualProp*, piAvgFrameRate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvgFrameRate.call(this, piAvgFrameRate)
    end
    def get_Jitter(this : IQualProp*, iJitter : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Jitter.call(this, iJitter)
    end
    def get_AvgSyncOffset(this : IQualProp*, piAvg : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvgSyncOffset.call(this, piAvg)
    end
    def get_DevSyncOffset(this : IQualProp*, piDev : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DevSyncOffset.call(this, piDev)
    end

  end

  @[Extern]
  record IFullScreenVideoVtbl,
    query_interface : Proc(IFullScreenVideo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFullScreenVideo*, UInt32),
    release : Proc(IFullScreenVideo*, UInt32),
    count_modes : Proc(IFullScreenVideo*, Int32*, Win32cr::Foundation::HRESULT),
    get_mode_info : Proc(IFullScreenVideo*, Int32, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_current_mode : Proc(IFullScreenVideo*, Int32*, Win32cr::Foundation::HRESULT),
    is_mode_available : Proc(IFullScreenVideo*, Int32, Win32cr::Foundation::HRESULT),
    is_mode_enabled : Proc(IFullScreenVideo*, Int32, Win32cr::Foundation::HRESULT),
    set_enabled : Proc(IFullScreenVideo*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_clip_factor : Proc(IFullScreenVideo*, Int32*, Win32cr::Foundation::HRESULT),
    set_clip_factor : Proc(IFullScreenVideo*, Int32, Win32cr::Foundation::HRESULT),
    set_message_drain : Proc(IFullScreenVideo*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_message_drain : Proc(IFullScreenVideo*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    set_monitor : Proc(IFullScreenVideo*, Int32, Win32cr::Foundation::HRESULT),
    get_monitor : Proc(IFullScreenVideo*, Int32*, Win32cr::Foundation::HRESULT),
    hide_on_deactivate : Proc(IFullScreenVideo*, Int32, Win32cr::Foundation::HRESULT),
    is_hide_on_deactivate : Proc(IFullScreenVideo*, Win32cr::Foundation::HRESULT),
    set_caption : Proc(IFullScreenVideo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_caption : Proc(IFullScreenVideo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_default : Proc(IFullScreenVideo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dd1d7110-7836-11cf-bf47-00aa0055595a")]
  record IFullScreenVideo, lpVtbl : IFullScreenVideoVtbl* do
    GUID = LibC::GUID.new(0xdd1d7110_u32, 0x7836_u16, 0x11cf_u16, StaticArray[0xbf_u8, 0x47_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x55_u8, 0x59_u8, 0x5a_u8])
    def query_interface(this : IFullScreenVideo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFullScreenVideo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFullScreenVideo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def count_modes(this : IFullScreenVideo*, pModes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.count_modes.call(this, pModes)
    end
    def get_mode_info(this : IFullScreenVideo*, mode : Int32, pWidth : Int32*, pHeight : Int32*, pDepth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mode_info.call(this, mode, pWidth, pHeight, pDepth)
    end
    def get_current_mode(this : IFullScreenVideo*, pMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_mode.call(this, pMode)
    end
    def is_mode_available(this : IFullScreenVideo*, mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_mode_available.call(this, mode)
    end
    def is_mode_enabled(this : IFullScreenVideo*, mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_mode_enabled.call(this, mode)
    end
    def set_enabled(this : IFullScreenVideo*, mode : Int32, bEnabled : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_enabled.call(this, mode, bEnabled)
    end
    def get_clip_factor(this : IFullScreenVideo*, pClipFactor : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_factor.call(this, pClipFactor)
    end
    def set_clip_factor(this : IFullScreenVideo*, clip_factor : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clip_factor.call(this, clip_factor)
    end
    def set_message_drain(this : IFullScreenVideo*, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_message_drain.call(this, hwnd)
    end
    def get_message_drain(this : IFullScreenVideo*, hwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_message_drain.call(this, hwnd)
    end
    def set_monitor(this : IFullScreenVideo*, monitor : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_monitor.call(this, monitor)
    end
    def get_monitor(this : IFullScreenVideo*, monitor : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_monitor.call(this, monitor)
    end
    def hide_on_deactivate(this : IFullScreenVideo*, hide : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hide_on_deactivate.call(this, hide)
    end
    def is_hide_on_deactivate(this : IFullScreenVideo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_hide_on_deactivate.call(this)
    end
    def set_caption(this : IFullScreenVideo*, strCaption : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_caption.call(this, strCaption)
    end
    def get_caption(this : IFullScreenVideo*, pstrCaption : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_caption.call(this, pstrCaption)
    end
    def set_default(this : IFullScreenVideo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default.call(this)
    end

  end

  @[Extern]
  record IFullScreenVideoExVtbl,
    query_interface : Proc(IFullScreenVideoEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFullScreenVideoEx*, UInt32),
    release : Proc(IFullScreenVideoEx*, UInt32),
    count_modes : Proc(IFullScreenVideoEx*, Int32*, Win32cr::Foundation::HRESULT),
    get_mode_info : Proc(IFullScreenVideoEx*, Int32, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_current_mode : Proc(IFullScreenVideoEx*, Int32*, Win32cr::Foundation::HRESULT),
    is_mode_available : Proc(IFullScreenVideoEx*, Int32, Win32cr::Foundation::HRESULT),
    is_mode_enabled : Proc(IFullScreenVideoEx*, Int32, Win32cr::Foundation::HRESULT),
    set_enabled : Proc(IFullScreenVideoEx*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_clip_factor : Proc(IFullScreenVideoEx*, Int32*, Win32cr::Foundation::HRESULT),
    set_clip_factor : Proc(IFullScreenVideoEx*, Int32, Win32cr::Foundation::HRESULT),
    set_message_drain : Proc(IFullScreenVideoEx*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_message_drain : Proc(IFullScreenVideoEx*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    set_monitor : Proc(IFullScreenVideoEx*, Int32, Win32cr::Foundation::HRESULT),
    get_monitor : Proc(IFullScreenVideoEx*, Int32*, Win32cr::Foundation::HRESULT),
    hide_on_deactivate : Proc(IFullScreenVideoEx*, Int32, Win32cr::Foundation::HRESULT),
    is_hide_on_deactivate : Proc(IFullScreenVideoEx*, Win32cr::Foundation::HRESULT),
    set_caption : Proc(IFullScreenVideoEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_caption : Proc(IFullScreenVideoEx*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    set_default : Proc(IFullScreenVideoEx*, Win32cr::Foundation::HRESULT),
    set_accelerator_table : Proc(IFullScreenVideoEx*, Win32cr::Foundation::HWND, Win32cr::UI::WindowsAndMessaging::HACCEL, Win32cr::Foundation::HRESULT),
    get_accelerator_table : Proc(IFullScreenVideoEx*, Win32cr::Foundation::HWND*, Win32cr::UI::WindowsAndMessaging::HACCEL*, Win32cr::Foundation::HRESULT),
    keep_pixel_aspect_ratio : Proc(IFullScreenVideoEx*, Int32, Win32cr::Foundation::HRESULT),
    is_keep_pixel_aspect_ratio : Proc(IFullScreenVideoEx*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("53479470-f1dd-11cf-bc42-00aa00ac74f6")]
  record IFullScreenVideoEx, lpVtbl : IFullScreenVideoExVtbl* do
    GUID = LibC::GUID.new(0x53479470_u32, 0xf1dd_u16, 0x11cf_u16, StaticArray[0xbc_u8, 0x42_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0xac_u8, 0x74_u8, 0xf6_u8])
    def query_interface(this : IFullScreenVideoEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFullScreenVideoEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFullScreenVideoEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def count_modes(this : IFullScreenVideoEx*, pModes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.count_modes.call(this, pModes)
    end
    def get_mode_info(this : IFullScreenVideoEx*, mode : Int32, pWidth : Int32*, pHeight : Int32*, pDepth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mode_info.call(this, mode, pWidth, pHeight, pDepth)
    end
    def get_current_mode(this : IFullScreenVideoEx*, pMode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_mode.call(this, pMode)
    end
    def is_mode_available(this : IFullScreenVideoEx*, mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_mode_available.call(this, mode)
    end
    def is_mode_enabled(this : IFullScreenVideoEx*, mode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_mode_enabled.call(this, mode)
    end
    def set_enabled(this : IFullScreenVideoEx*, mode : Int32, bEnabled : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_enabled.call(this, mode, bEnabled)
    end
    def get_clip_factor(this : IFullScreenVideoEx*, pClipFactor : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_factor.call(this, pClipFactor)
    end
    def set_clip_factor(this : IFullScreenVideoEx*, clip_factor : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clip_factor.call(this, clip_factor)
    end
    def set_message_drain(this : IFullScreenVideoEx*, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_message_drain.call(this, hwnd)
    end
    def get_message_drain(this : IFullScreenVideoEx*, hwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_message_drain.call(this, hwnd)
    end
    def set_monitor(this : IFullScreenVideoEx*, monitor : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_monitor.call(this, monitor)
    end
    def get_monitor(this : IFullScreenVideoEx*, monitor : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_monitor.call(this, monitor)
    end
    def hide_on_deactivate(this : IFullScreenVideoEx*, hide : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hide_on_deactivate.call(this, hide)
    end
    def is_hide_on_deactivate(this : IFullScreenVideoEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_hide_on_deactivate.call(this)
    end
    def set_caption(this : IFullScreenVideoEx*, strCaption : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_caption.call(this, strCaption)
    end
    def get_caption(this : IFullScreenVideoEx*, pstrCaption : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_caption.call(this, pstrCaption)
    end
    def set_default(this : IFullScreenVideoEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default.call(this)
    end
    def set_accelerator_table(this : IFullScreenVideoEx*, hwnd : Win32cr::Foundation::HWND, hAccel : Win32cr::UI::WindowsAndMessaging::HACCEL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_accelerator_table.call(this, hwnd, hAccel)
    end
    def get_accelerator_table(this : IFullScreenVideoEx*, phwnd : Win32cr::Foundation::HWND*, phAccel : Win32cr::UI::WindowsAndMessaging::HACCEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_accelerator_table.call(this, phwnd, phAccel)
    end
    def keep_pixel_aspect_ratio(this : IFullScreenVideoEx*, keep_aspect : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.keep_pixel_aspect_ratio.call(this, keep_aspect)
    end
    def is_keep_pixel_aspect_ratio(this : IFullScreenVideoEx*, pKeepAspect : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_keep_pixel_aspect_ratio.call(this, pKeepAspect)
    end

  end

  @[Extern]
  record IBaseVideoMixerVtbl,
    query_interface : Proc(IBaseVideoMixer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBaseVideoMixer*, UInt32),
    release : Proc(IBaseVideoMixer*, UInt32),
    set_lead_pin : Proc(IBaseVideoMixer*, Int32, Win32cr::Foundation::HRESULT),
    get_lead_pin : Proc(IBaseVideoMixer*, Int32*, Win32cr::Foundation::HRESULT),
    get_input_pin_count : Proc(IBaseVideoMixer*, Int32*, Win32cr::Foundation::HRESULT),
    is_using_clock : Proc(IBaseVideoMixer*, Int32*, Win32cr::Foundation::HRESULT),
    set_using_clock : Proc(IBaseVideoMixer*, Int32, Win32cr::Foundation::HRESULT),
    get_clock_period : Proc(IBaseVideoMixer*, Int32*, Win32cr::Foundation::HRESULT),
    set_clock_period : Proc(IBaseVideoMixer*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("61ded640-e912-11ce-a099-00aa00479a58")]
  record IBaseVideoMixer, lpVtbl : IBaseVideoMixerVtbl* do
    GUID = LibC::GUID.new(0x61ded640_u32, 0xe912_u16, 0x11ce_u16, StaticArray[0xa0_u8, 0x99_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x47_u8, 0x9a_u8, 0x58_u8])
    def query_interface(this : IBaseVideoMixer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBaseVideoMixer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBaseVideoMixer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_lead_pin(this : IBaseVideoMixer*, iPin : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_lead_pin.call(this, iPin)
    end
    def get_lead_pin(this : IBaseVideoMixer*, piPin : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lead_pin.call(this, piPin)
    end
    def get_input_pin_count(this : IBaseVideoMixer*, piPinCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_pin_count.call(this, piPinCount)
    end
    def is_using_clock(this : IBaseVideoMixer*, pbValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_clock.call(this, pbValue)
    end
    def set_using_clock(this : IBaseVideoMixer*, bValue : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_using_clock.call(this, bValue)
    end
    def get_clock_period(this : IBaseVideoMixer*, pbValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clock_period.call(this, pbValue)
    end
    def set_clock_period(this : IBaseVideoMixer*, bValue : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clock_period.call(this, bValue)
    end

  end

  @[Extern]
  record IDMOWrapperFilterVtbl,
    query_interface : Proc(IDMOWrapperFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDMOWrapperFilter*, UInt32),
    release : Proc(IDMOWrapperFilter*, UInt32),
    init : Proc(IDMOWrapperFilter*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("52d6f586-9f0f-4824-8fc8-e32ca04930c2")]
  record IDMOWrapperFilter, lpVtbl : IDMOWrapperFilterVtbl* do
    GUID = LibC::GUID.new(0x52d6f586_u32, 0x9f0f_u16, 0x4824_u16, StaticArray[0x8f_u8, 0xc8_u8, 0xe3_u8, 0x2c_u8, 0xa0_u8, 0x49_u8, 0x30_u8, 0xc2_u8])
    def query_interface(this : IDMOWrapperFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDMOWrapperFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDMOWrapperFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IDMOWrapperFilter*, clsidDMO : LibC::GUID*, catDMO : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, clsidDMO, catDMO)
    end

  end

  @[Extern]
  record IMixerOCXNotifyVtbl,
    query_interface : Proc(IMixerOCXNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMixerOCXNotify*, UInt32),
    release : Proc(IMixerOCXNotify*, UInt32),
    on_invalidate_rect : Proc(IMixerOCXNotify*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    on_status_change : Proc(IMixerOCXNotify*, UInt32, Win32cr::Foundation::HRESULT),
    on_data_change : Proc(IMixerOCXNotify*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("81a3bd31-dee1-11d1-8508-00a0c91f9ca0")]
  record IMixerOCXNotify, lpVtbl : IMixerOCXNotifyVtbl* do
    GUID = LibC::GUID.new(0x81a3bd31_u32, 0xdee1_u16, 0x11d1_u16, StaticArray[0x85_u8, 0x8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x1f_u8, 0x9c_u8, 0xa0_u8])
    def query_interface(this : IMixerOCXNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMixerOCXNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMixerOCXNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_invalidate_rect(this : IMixerOCXNotify*, lpcRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_invalidate_rect.call(this, lpcRect)
    end
    def on_status_change(this : IMixerOCXNotify*, ulStatusFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_status_change.call(this, ulStatusFlags)
    end
    def on_data_change(this : IMixerOCXNotify*, ulDataFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_data_change.call(this, ulDataFlags)
    end

  end

  @[Extern]
  record IMixerOCXVtbl,
    query_interface : Proc(IMixerOCX*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMixerOCX*, UInt32),
    release : Proc(IMixerOCX*, UInt32),
    on_display_change : Proc(IMixerOCX*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_aspect_ratio : Proc(IMixerOCX*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_video_size : Proc(IMixerOCX*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IMixerOCX*, UInt32**, Win32cr::Foundation::HRESULT),
    on_draw : Proc(IMixerOCX*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_draw_region : Proc(IMixerOCX*, Win32cr::Foundation::POINT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    advise : Proc(IMixerOCX*, Void*, Win32cr::Foundation::HRESULT),
    un_advise : Proc(IMixerOCX*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("81a3bd32-dee1-11d1-8508-00a0c91f9ca0")]
  record IMixerOCX, lpVtbl : IMixerOCXVtbl* do
    GUID = LibC::GUID.new(0x81a3bd32_u32, 0xdee1_u16, 0x11d1_u16, StaticArray[0x85_u8, 0x8_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x1f_u8, 0x9c_u8, 0xa0_u8])
    def query_interface(this : IMixerOCX*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMixerOCX*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMixerOCX*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_display_change(this : IMixerOCX*, ulBitsPerPixel : UInt32, ulScreenWidth : UInt32, ulScreenHeight : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_display_change.call(this, ulBitsPerPixel, ulScreenWidth, ulScreenHeight)
    end
    def get_aspect_ratio(this : IMixerOCX*, pdwPictAspectRatioX : UInt32*, pdwPictAspectRatioY : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio.call(this, pdwPictAspectRatioX, pdwPictAspectRatioY)
    end
    def get_video_size(this : IMixerOCX*, pdwVideoWidth : UInt32*, pdwVideoHeight : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_size.call(this, pdwVideoWidth, pdwVideoHeight)
    end
    def get_status(this : IMixerOCX*, pdwStatus : UInt32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pdwStatus)
    end
    def on_draw(this : IMixerOCX*, hdcDraw : Win32cr::Graphics::Gdi::HDC, prcDraw : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_draw.call(this, hdcDraw, prcDraw)
    end
    def set_draw_region(this : IMixerOCX*, lpptTopLeftSC : Win32cr::Foundation::POINT*, prcDrawCC : Win32cr::Foundation::RECT*, lprcClip : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_draw_region.call(this, lpptTopLeftSC, prcDrawCC, lprcClip)
    end
    def advise(this : IMixerOCX*, pmdns : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise.call(this, pmdns)
    end
    def un_advise(this : IMixerOCX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.un_advise.call(this)
    end

  end

  @[Extern]
  record IMixerPinConfigVtbl,
    query_interface : Proc(IMixerPinConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMixerPinConfig*, UInt32),
    release : Proc(IMixerPinConfig*, UInt32),
    set_relative_position : Proc(IMixerPinConfig*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_relative_position : Proc(IMixerPinConfig*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_z_order : Proc(IMixerPinConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_z_order : Proc(IMixerPinConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    set_color_key : Proc(IMixerPinConfig*, Win32cr::Media::DirectShow::COLORKEY*, Win32cr::Foundation::HRESULT),
    get_color_key : Proc(IMixerPinConfig*, Win32cr::Media::DirectShow::COLORKEY*, UInt32*, Win32cr::Foundation::HRESULT),
    set_blending_parameter : Proc(IMixerPinConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_blending_parameter : Proc(IMixerPinConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IMixerPinConfig*, Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE, Win32cr::Foundation::HRESULT),
    get_aspect_ratio_mode : Proc(IMixerPinConfig*, Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE*, Win32cr::Foundation::HRESULT),
    set_stream_transparent : Proc(IMixerPinConfig*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_stream_transparent : Proc(IMixerPinConfig*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("593cdde1-0759-11d1-9e69-00c04fd7c15b")]
  record IMixerPinConfig, lpVtbl : IMixerPinConfigVtbl* do
    GUID = LibC::GUID.new(0x593cdde1_u32, 0x759_u16, 0x11d1_u16, StaticArray[0x9e_u8, 0x69_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xc1_u8, 0x5b_u8])
    def query_interface(this : IMixerPinConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMixerPinConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMixerPinConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_relative_position(this : IMixerPinConfig*, dwLeft : UInt32, dwTop : UInt32, dwRight : UInt32, dwBottom : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_relative_position.call(this, dwLeft, dwTop, dwRight, dwBottom)
    end
    def get_relative_position(this : IMixerPinConfig*, pdwLeft : UInt32*, pdwTop : UInt32*, pdwRight : UInt32*, pdwBottom : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_relative_position.call(this, pdwLeft, pdwTop, pdwRight, pdwBottom)
    end
    def set_z_order(this : IMixerPinConfig*, dwZOrder : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_z_order.call(this, dwZOrder)
    end
    def get_z_order(this : IMixerPinConfig*, pdwZOrder : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_z_order.call(this, pdwZOrder)
    end
    def set_color_key(this : IMixerPinConfig*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color_key.call(this, pColorKey)
    end
    def get_color_key(this : IMixerPinConfig*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*, pColor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_key.call(this, pColorKey, pColor)
    end
    def set_blending_parameter(this : IMixerPinConfig*, dwBlendingParameter : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blending_parameter.call(this, dwBlendingParameter)
    end
    def get_blending_parameter(this : IMixerPinConfig*, pdwBlendingParameter : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blending_parameter.call(this, pdwBlendingParameter)
    end
    def set_aspect_ratio_mode(this : IMixerPinConfig*, amAspectRatioMode : Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, amAspectRatioMode)
    end
    def get_aspect_ratio_mode(this : IMixerPinConfig*, pamAspectRatioMode : Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, pamAspectRatioMode)
    end
    def set_stream_transparent(this : IMixerPinConfig*, bStreamTransparent : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_transparent.call(this, bStreamTransparent)
    end
    def get_stream_transparent(this : IMixerPinConfig*, pbStreamTransparent : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_transparent.call(this, pbStreamTransparent)
    end

  end

  @[Extern]
  record IMixerPinConfig2Vtbl,
    query_interface : Proc(IMixerPinConfig2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMixerPinConfig2*, UInt32),
    release : Proc(IMixerPinConfig2*, UInt32),
    set_relative_position : Proc(IMixerPinConfig2*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_relative_position : Proc(IMixerPinConfig2*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_z_order : Proc(IMixerPinConfig2*, UInt32, Win32cr::Foundation::HRESULT),
    get_z_order : Proc(IMixerPinConfig2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_color_key : Proc(IMixerPinConfig2*, Win32cr::Media::DirectShow::COLORKEY*, Win32cr::Foundation::HRESULT),
    get_color_key : Proc(IMixerPinConfig2*, Win32cr::Media::DirectShow::COLORKEY*, UInt32*, Win32cr::Foundation::HRESULT),
    set_blending_parameter : Proc(IMixerPinConfig2*, UInt32, Win32cr::Foundation::HRESULT),
    get_blending_parameter : Proc(IMixerPinConfig2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IMixerPinConfig2*, Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE, Win32cr::Foundation::HRESULT),
    get_aspect_ratio_mode : Proc(IMixerPinConfig2*, Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE*, Win32cr::Foundation::HRESULT),
    set_stream_transparent : Proc(IMixerPinConfig2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_stream_transparent : Proc(IMixerPinConfig2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_overlay_surface_color_controls : Proc(IMixerPinConfig2*, Win32cr::Graphics::DirectDraw::DDCOLORCONTROL*, Win32cr::Foundation::HRESULT),
    get_overlay_surface_color_controls : Proc(IMixerPinConfig2*, Win32cr::Graphics::DirectDraw::DDCOLORCONTROL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ebf47182-8764-11d1-9e69-00c04fd7c15b")]
  record IMixerPinConfig2, lpVtbl : IMixerPinConfig2Vtbl* do
    GUID = LibC::GUID.new(0xebf47182_u32, 0x8764_u16, 0x11d1_u16, StaticArray[0x9e_u8, 0x69_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xc1_u8, 0x5b_u8])
    def query_interface(this : IMixerPinConfig2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMixerPinConfig2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMixerPinConfig2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_relative_position(this : IMixerPinConfig2*, dwLeft : UInt32, dwTop : UInt32, dwRight : UInt32, dwBottom : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_relative_position.call(this, dwLeft, dwTop, dwRight, dwBottom)
    end
    def get_relative_position(this : IMixerPinConfig2*, pdwLeft : UInt32*, pdwTop : UInt32*, pdwRight : UInt32*, pdwBottom : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_relative_position.call(this, pdwLeft, pdwTop, pdwRight, pdwBottom)
    end
    def set_z_order(this : IMixerPinConfig2*, dwZOrder : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_z_order.call(this, dwZOrder)
    end
    def get_z_order(this : IMixerPinConfig2*, pdwZOrder : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_z_order.call(this, pdwZOrder)
    end
    def set_color_key(this : IMixerPinConfig2*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color_key.call(this, pColorKey)
    end
    def get_color_key(this : IMixerPinConfig2*, pColorKey : Win32cr::Media::DirectShow::COLORKEY*, pColor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color_key.call(this, pColorKey, pColor)
    end
    def set_blending_parameter(this : IMixerPinConfig2*, dwBlendingParameter : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blending_parameter.call(this, dwBlendingParameter)
    end
    def get_blending_parameter(this : IMixerPinConfig2*, pdwBlendingParameter : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blending_parameter.call(this, pdwBlendingParameter)
    end
    def set_aspect_ratio_mode(this : IMixerPinConfig2*, amAspectRatioMode : Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, amAspectRatioMode)
    end
    def get_aspect_ratio_mode(this : IMixerPinConfig2*, pamAspectRatioMode : Win32cr::Media::DirectShow::AM_ASPECT_RATIO_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, pamAspectRatioMode)
    end
    def set_stream_transparent(this : IMixerPinConfig2*, bStreamTransparent : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_transparent.call(this, bStreamTransparent)
    end
    def get_stream_transparent(this : IMixerPinConfig2*, pbStreamTransparent : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_transparent.call(this, pbStreamTransparent)
    end
    def set_overlay_surface_color_controls(this : IMixerPinConfig2*, pColorControl : Win32cr::Graphics::DirectDraw::DDCOLORCONTROL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_overlay_surface_color_controls.call(this, pColorControl)
    end
    def get_overlay_surface_color_controls(this : IMixerPinConfig2*, pColorControl : Win32cr::Graphics::DirectDraw::DDCOLORCONTROL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_overlay_surface_color_controls.call(this, pColorControl)
    end

  end

  @[Extern]
  record IMpegAudioDecoderVtbl,
    query_interface : Proc(IMpegAudioDecoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMpegAudioDecoder*, UInt32),
    release : Proc(IMpegAudioDecoder*, UInt32),
    get_FrequencyDivider : Proc(IMpegAudioDecoder*, UInt32*, Win32cr::Foundation::HRESULT),
    put_FrequencyDivider : Proc(IMpegAudioDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_DecoderAccuracy : Proc(IMpegAudioDecoder*, UInt32*, Win32cr::Foundation::HRESULT),
    put_DecoderAccuracy : Proc(IMpegAudioDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_Stereo : Proc(IMpegAudioDecoder*, UInt32*, Win32cr::Foundation::HRESULT),
    put_Stereo : Proc(IMpegAudioDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_DecoderWordSize : Proc(IMpegAudioDecoder*, UInt32*, Win32cr::Foundation::HRESULT),
    put_DecoderWordSize : Proc(IMpegAudioDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_IntegerDecode : Proc(IMpegAudioDecoder*, UInt32*, Win32cr::Foundation::HRESULT),
    put_IntegerDecode : Proc(IMpegAudioDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_DualMode : Proc(IMpegAudioDecoder*, UInt32*, Win32cr::Foundation::HRESULT),
    put_DualMode : Proc(IMpegAudioDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    get_AudioFormat : Proc(IMpegAudioDecoder*, Win32cr::Media::DirectShow::MPEG1WAVEFORMAT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b45dd570-3c77-11d1-abe1-00a0c905f375")]
  record IMpegAudioDecoder, lpVtbl : IMpegAudioDecoderVtbl* do
    GUID = LibC::GUID.new(0xb45dd570_u32, 0x3c77_u16, 0x11d1_u16, StaticArray[0xab_u8, 0xe1_u8, 0x0_u8, 0xa0_u8, 0xc9_u8, 0x5_u8, 0xf3_u8, 0x75_u8])
    def query_interface(this : IMpegAudioDecoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMpegAudioDecoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMpegAudioDecoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_FrequencyDivider(this : IMpegAudioDecoder*, pDivider : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyDivider.call(this, pDivider)
    end
    def put_FrequencyDivider(this : IMpegAudioDecoder*, divider : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyDivider.call(this, divider)
    end
    def get_DecoderAccuracy(this : IMpegAudioDecoder*, pAccuracy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DecoderAccuracy.call(this, pAccuracy)
    end
    def put_DecoderAccuracy(this : IMpegAudioDecoder*, accuracy : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DecoderAccuracy.call(this, accuracy)
    end
    def get_Stereo(this : IMpegAudioDecoder*, pStereo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Stereo.call(this, pStereo)
    end
    def put_Stereo(this : IMpegAudioDecoder*, stereo : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Stereo.call(this, stereo)
    end
    def get_DecoderWordSize(this : IMpegAudioDecoder*, pWordSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DecoderWordSize.call(this, pWordSize)
    end
    def put_DecoderWordSize(this : IMpegAudioDecoder*, word_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DecoderWordSize.call(this, word_size)
    end
    def get_IntegerDecode(this : IMpegAudioDecoder*, pIntDecode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IntegerDecode.call(this, pIntDecode)
    end
    def put_IntegerDecode(this : IMpegAudioDecoder*, int_decode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IntegerDecode.call(this, int_decode)
    end
    def get_DualMode(this : IMpegAudioDecoder*, pIntDecode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DualMode.call(this, pIntDecode)
    end
    def put_DualMode(this : IMpegAudioDecoder*, int_decode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DualMode.call(this, int_decode)
    end
    def get_AudioFormat(this : IMpegAudioDecoder*, lpFmt : Win32cr::Media::DirectShow::MPEG1WAVEFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioFormat.call(this, lpFmt)
    end

  end

  @[Extern]
  record IVMRImagePresenter9Vtbl,
    query_interface : Proc(IVMRImagePresenter9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRImagePresenter9*, UInt32),
    release : Proc(IVMRImagePresenter9*, UInt32),
    start_presenting : Proc(IVMRImagePresenter9*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    stop_presenting : Proc(IVMRImagePresenter9*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    present_image : Proc(IVMRImagePresenter9*, LibC::UIntPtrT, Win32cr::Media::DirectShow::VMR9PresentationInfo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("69188c61-12a3-40f0-8ffc-342e7b433fd7")]
  record IVMRImagePresenter9, lpVtbl : IVMRImagePresenter9Vtbl* do
    GUID = LibC::GUID.new(0x69188c61_u32, 0x12a3_u16, 0x40f0_u16, StaticArray[0x8f_u8, 0xfc_u8, 0x34_u8, 0x2e_u8, 0x7b_u8, 0x43_u8, 0x3f_u8, 0xd7_u8])
    def query_interface(this : IVMRImagePresenter9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRImagePresenter9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRImagePresenter9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_presenting(this : IVMRImagePresenter9*, dwUserID : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_presenting.call(this, dwUserID)
    end
    def stop_presenting(this : IVMRImagePresenter9*, dwUserID : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_presenting.call(this, dwUserID)
    end
    def present_image(this : IVMRImagePresenter9*, dwUserID : LibC::UIntPtrT, lpPresInfo : Win32cr::Media::DirectShow::VMR9PresentationInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.present_image.call(this, dwUserID, lpPresInfo)
    end

  end

  @[Extern]
  record IVMRSurfaceAllocator9Vtbl,
    query_interface : Proc(IVMRSurfaceAllocator9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRSurfaceAllocator9*, UInt32),
    release : Proc(IVMRSurfaceAllocator9*, UInt32),
    initialize_device : Proc(IVMRSurfaceAllocator9*, LibC::UIntPtrT, Win32cr::Media::DirectShow::VMR9AllocationInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    terminate_device : Proc(IVMRSurfaceAllocator9*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_surface : Proc(IVMRSurfaceAllocator9*, LibC::UIntPtrT, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    advise_notify : Proc(IVMRSurfaceAllocator9*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8d5148ea-3f5d-46cf-9df1-d1b896eedb1f")]
  record IVMRSurfaceAllocator9, lpVtbl : IVMRSurfaceAllocator9Vtbl* do
    GUID = LibC::GUID.new(0x8d5148ea_u32, 0x3f5d_u16, 0x46cf_u16, StaticArray[0x9d_u8, 0xf1_u8, 0xd1_u8, 0xb8_u8, 0x96_u8, 0xee_u8, 0xdb_u8, 0x1f_u8])
    def query_interface(this : IVMRSurfaceAllocator9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRSurfaceAllocator9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRSurfaceAllocator9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize_device(this : IVMRSurfaceAllocator9*, dwUserID : LibC::UIntPtrT, lpAllocInfo : Win32cr::Media::DirectShow::VMR9AllocationInfo*, lpNumBuffers : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_device.call(this, dwUserID, lpAllocInfo, lpNumBuffers)
    end
    def terminate_device(this : IVMRSurfaceAllocator9*, dwID : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_device.call(this, dwID)
    end
    def get_surface(this : IVMRSurfaceAllocator9*, dwUserID : LibC::UIntPtrT, surface_index : UInt32, surface_flags : UInt32, lplpSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface.call(this, dwUserID, surface_index, surface_flags, lplpSurface)
    end
    def advise_notify(this : IVMRSurfaceAllocator9*, lpIVMRSurfAllocNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise_notify.call(this, lpIVMRSurfAllocNotify)
    end

  end

  @[Extern]
  record IVMRSurfaceAllocatorEx9Vtbl,
    query_interface : Proc(IVMRSurfaceAllocatorEx9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRSurfaceAllocatorEx9*, UInt32),
    release : Proc(IVMRSurfaceAllocatorEx9*, UInt32),
    initialize_device : Proc(IVMRSurfaceAllocatorEx9*, LibC::UIntPtrT, Win32cr::Media::DirectShow::VMR9AllocationInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    terminate_device : Proc(IVMRSurfaceAllocatorEx9*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_surface : Proc(IVMRSurfaceAllocatorEx9*, LibC::UIntPtrT, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    advise_notify : Proc(IVMRSurfaceAllocatorEx9*, Void*, Win32cr::Foundation::HRESULT),
    get_surface_ex : Proc(IVMRSurfaceAllocatorEx9*, LibC::UIntPtrT, UInt32, UInt32, Void**, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6de9a68a-a928-4522-bf57-655ae3866456")]
  record IVMRSurfaceAllocatorEx9, lpVtbl : IVMRSurfaceAllocatorEx9Vtbl* do
    GUID = LibC::GUID.new(0x6de9a68a_u32, 0xa928_u16, 0x4522_u16, StaticArray[0xbf_u8, 0x57_u8, 0x65_u8, 0x5a_u8, 0xe3_u8, 0x86_u8, 0x64_u8, 0x56_u8])
    def query_interface(this : IVMRSurfaceAllocatorEx9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRSurfaceAllocatorEx9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRSurfaceAllocatorEx9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize_device(this : IVMRSurfaceAllocatorEx9*, dwUserID : LibC::UIntPtrT, lpAllocInfo : Win32cr::Media::DirectShow::VMR9AllocationInfo*, lpNumBuffers : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_device.call(this, dwUserID, lpAllocInfo, lpNumBuffers)
    end
    def terminate_device(this : IVMRSurfaceAllocatorEx9*, dwID : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_device.call(this, dwID)
    end
    def get_surface(this : IVMRSurfaceAllocatorEx9*, dwUserID : LibC::UIntPtrT, surface_index : UInt32, surface_flags : UInt32, lplpSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface.call(this, dwUserID, surface_index, surface_flags, lplpSurface)
    end
    def advise_notify(this : IVMRSurfaceAllocatorEx9*, lpIVMRSurfAllocNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise_notify.call(this, lpIVMRSurfAllocNotify)
    end
    def get_surface_ex(this : IVMRSurfaceAllocatorEx9*, dwUserID : LibC::UIntPtrT, surface_index : UInt32, surface_flags : UInt32, lplpSurface : Void**, lprcDst : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface_ex.call(this, dwUserID, surface_index, surface_flags, lplpSurface, lprcDst)
    end

  end

  @[Extern]
  record IVMRSurfaceAllocatorNotify9Vtbl,
    query_interface : Proc(IVMRSurfaceAllocatorNotify9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRSurfaceAllocatorNotify9*, UInt32),
    release : Proc(IVMRSurfaceAllocatorNotify9*, UInt32),
    advise_surface_allocator : Proc(IVMRSurfaceAllocatorNotify9*, LibC::UIntPtrT, Void*, Win32cr::Foundation::HRESULT),
    set_d3_d_device : Proc(IVMRSurfaceAllocatorNotify9*, Void*, Win32cr::Graphics::Gdi::HMONITOR, Win32cr::Foundation::HRESULT),
    change_d3_d_device : Proc(IVMRSurfaceAllocatorNotify9*, Void*, Win32cr::Graphics::Gdi::HMONITOR, Win32cr::Foundation::HRESULT),
    allocate_surface_helper : Proc(IVMRSurfaceAllocatorNotify9*, Win32cr::Media::DirectShow::VMR9AllocationInfo*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    notify_event : Proc(IVMRSurfaceAllocatorNotify9*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dca3f5df-bb3a-4d03-bd81-84614bfbfa0c")]
  record IVMRSurfaceAllocatorNotify9, lpVtbl : IVMRSurfaceAllocatorNotify9Vtbl* do
    GUID = LibC::GUID.new(0xdca3f5df_u32, 0xbb3a_u16, 0x4d03_u16, StaticArray[0xbd_u8, 0x81_u8, 0x84_u8, 0x61_u8, 0x4b_u8, 0xfb_u8, 0xfa_u8, 0xc_u8])
    def query_interface(this : IVMRSurfaceAllocatorNotify9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRSurfaceAllocatorNotify9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRSurfaceAllocatorNotify9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def advise_surface_allocator(this : IVMRSurfaceAllocatorNotify9*, dwUserID : LibC::UIntPtrT, lpIVRMSurfaceAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.advise_surface_allocator.call(this, dwUserID, lpIVRMSurfaceAllocator)
    end
    def set_d3_d_device(this : IVMRSurfaceAllocatorNotify9*, lpD3DDevice : Void*, hMonitor : Win32cr::Graphics::Gdi::HMONITOR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_d3_d_device.call(this, lpD3DDevice, hMonitor)
    end
    def change_d3_d_device(this : IVMRSurfaceAllocatorNotify9*, lpD3DDevice : Void*, hMonitor : Win32cr::Graphics::Gdi::HMONITOR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_d3_d_device.call(this, lpD3DDevice, hMonitor)
    end
    def allocate_surface_helper(this : IVMRSurfaceAllocatorNotify9*, lpAllocInfo : Win32cr::Media::DirectShow::VMR9AllocationInfo*, lpNumBuffers : UInt32*, lplpSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_surface_helper.call(this, lpAllocInfo, lpNumBuffers, lplpSurface)
    end
    def notify_event(this : IVMRSurfaceAllocatorNotify9*, event_code : Int32, param1 : LibC::IntPtrT, param2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_event.call(this, event_code, param1, param2)
    end

  end

  @[Extern]
  record IVMRWindowlessControl9Vtbl,
    query_interface : Proc(IVMRWindowlessControl9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRWindowlessControl9*, UInt32),
    release : Proc(IVMRWindowlessControl9*, UInt32),
    get_native_video_size : Proc(IVMRWindowlessControl9*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_min_ideal_video_size : Proc(IVMRWindowlessControl9*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_max_ideal_video_size : Proc(IVMRWindowlessControl9*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_video_position : Proc(IVMRWindowlessControl9*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_video_position : Proc(IVMRWindowlessControl9*, Win32cr::Foundation::RECT*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_aspect_ratio_mode : Proc(IVMRWindowlessControl9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IVMRWindowlessControl9*, UInt32, Win32cr::Foundation::HRESULT),
    set_video_clipping_window : Proc(IVMRWindowlessControl9*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    repaint_video : Proc(IVMRWindowlessControl9*, Win32cr::Foundation::HWND, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::HRESULT),
    display_mode_changed : Proc(IVMRWindowlessControl9*, Win32cr::Foundation::HRESULT),
    get_current_image : Proc(IVMRWindowlessControl9*, UInt8**, Win32cr::Foundation::HRESULT),
    set_border_color : Proc(IVMRWindowlessControl9*, UInt32, Win32cr::Foundation::HRESULT),
    get_border_color : Proc(IVMRWindowlessControl9*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8f537d09-f85e-4414-b23b-502e54c79927")]
  record IVMRWindowlessControl9, lpVtbl : IVMRWindowlessControl9Vtbl* do
    GUID = LibC::GUID.new(0x8f537d09_u32, 0xf85e_u16, 0x4414_u16, StaticArray[0xb2_u8, 0x3b_u8, 0x50_u8, 0x2e_u8, 0x54_u8, 0xc7_u8, 0x99_u8, 0x27_u8])
    def query_interface(this : IVMRWindowlessControl9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRWindowlessControl9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRWindowlessControl9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_native_video_size(this : IVMRWindowlessControl9*, lpWidth : Int32*, lpHeight : Int32*, lpARWidth : Int32*, lpARHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_size.call(this, lpWidth, lpHeight, lpARWidth, lpARHeight)
    end
    def get_min_ideal_video_size(this : IVMRWindowlessControl9*, lpWidth : Int32*, lpHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_min_ideal_video_size.call(this, lpWidth, lpHeight)
    end
    def get_max_ideal_video_size(this : IVMRWindowlessControl9*, lpWidth : Int32*, lpHeight : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_ideal_video_size.call(this, lpWidth, lpHeight)
    end
    def set_video_position(this : IVMRWindowlessControl9*, lpSRCRect : Win32cr::Foundation::RECT*, lpDSTRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_position.call(this, lpSRCRect, lpDSTRect)
    end
    def get_video_position(this : IVMRWindowlessControl9*, lpSRCRect : Win32cr::Foundation::RECT*, lpDSTRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_position.call(this, lpSRCRect, lpDSTRect)
    end
    def get_aspect_ratio_mode(this : IVMRWindowlessControl9*, lpAspectRatioMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, lpAspectRatioMode)
    end
    def set_aspect_ratio_mode(this : IVMRWindowlessControl9*, aspect_ratio_mode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, aspect_ratio_mode)
    end
    def set_video_clipping_window(this : IVMRWindowlessControl9*, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_clipping_window.call(this, hwnd)
    end
    def repaint_video(this : IVMRWindowlessControl9*, hwnd : Win32cr::Foundation::HWND, hdc : Win32cr::Graphics::Gdi::HDC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.repaint_video.call(this, hwnd, hdc)
    end
    def display_mode_changed(this : IVMRWindowlessControl9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.display_mode_changed.call(this)
    end
    def get_current_image(this : IVMRWindowlessControl9*, lpDib : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_image.call(this, lpDib)
    end
    def set_border_color(this : IVMRWindowlessControl9*, clr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, clr)
    end
    def get_border_color(this : IVMRWindowlessControl9*, lpClr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_border_color.call(this, lpClr)
    end

  end

  @[Extern]
  record IVMRMixerControl9Vtbl,
    query_interface : Proc(IVMRMixerControl9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRMixerControl9*, UInt32),
    release : Proc(IVMRMixerControl9*, UInt32),
    set_alpha : Proc(IVMRMixerControl9*, UInt32, Float32, Win32cr::Foundation::HRESULT),
    get_alpha : Proc(IVMRMixerControl9*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_z_order : Proc(IVMRMixerControl9*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_z_order : Proc(IVMRMixerControl9*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_rect : Proc(IVMRMixerControl9*, UInt32, Win32cr::Media::DirectShow::VMR9NormalizedRect*, Win32cr::Foundation::HRESULT),
    get_output_rect : Proc(IVMRMixerControl9*, UInt32, Win32cr::Media::DirectShow::VMR9NormalizedRect*, Win32cr::Foundation::HRESULT),
    set_background_clr : Proc(IVMRMixerControl9*, UInt32, Win32cr::Foundation::HRESULT),
    get_background_clr : Proc(IVMRMixerControl9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_mixing_prefs : Proc(IVMRMixerControl9*, UInt32, Win32cr::Foundation::HRESULT),
    get_mixing_prefs : Proc(IVMRMixerControl9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_proc_amp_control : Proc(IVMRMixerControl9*, UInt32, Win32cr::Media::DirectShow::VMR9ProcAmpControl*, Win32cr::Foundation::HRESULT),
    get_proc_amp_control : Proc(IVMRMixerControl9*, UInt32, Win32cr::Media::DirectShow::VMR9ProcAmpControl*, Win32cr::Foundation::HRESULT),
    get_proc_amp_control_range : Proc(IVMRMixerControl9*, UInt32, Win32cr::Media::DirectShow::VMR9ProcAmpControlRange*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1a777eaa-47c8-4930-b2c9-8fee1c1b0f3b")]
  record IVMRMixerControl9, lpVtbl : IVMRMixerControl9Vtbl* do
    GUID = LibC::GUID.new(0x1a777eaa_u32, 0x47c8_u16, 0x4930_u16, StaticArray[0xb2_u8, 0xc9_u8, 0x8f_u8, 0xee_u8, 0x1c_u8, 0x1b_u8, 0xf_u8, 0x3b_u8])
    def query_interface(this : IVMRMixerControl9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRMixerControl9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRMixerControl9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_alpha(this : IVMRMixerControl9*, dwStreamID : UInt32, alpha : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_alpha.call(this, dwStreamID, alpha)
    end
    def get_alpha(this : IVMRMixerControl9*, dwStreamID : UInt32, pAlpha : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alpha.call(this, dwStreamID, pAlpha)
    end
    def set_z_order(this : IVMRMixerControl9*, dwStreamID : UInt32, dwZ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_z_order.call(this, dwStreamID, dwZ)
    end
    def get_z_order(this : IVMRMixerControl9*, dwStreamID : UInt32, pZ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_z_order.call(this, dwStreamID, pZ)
    end
    def set_output_rect(this : IVMRMixerControl9*, dwStreamID : UInt32, pRect : Win32cr::Media::DirectShow::VMR9NormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_rect.call(this, dwStreamID, pRect)
    end
    def get_output_rect(this : IVMRMixerControl9*, dwStreamID : UInt32, pRect : Win32cr::Media::DirectShow::VMR9NormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_rect.call(this, dwStreamID, pRect)
    end
    def set_background_clr(this : IVMRMixerControl9*, clr_bkg : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_clr.call(this, clr_bkg)
    end
    def get_background_clr(this : IVMRMixerControl9*, lpClrBkg : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_background_clr.call(this, lpClrBkg)
    end
    def set_mixing_prefs(this : IVMRMixerControl9*, dwMixerPrefs : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mixing_prefs.call(this, dwMixerPrefs)
    end
    def get_mixing_prefs(this : IVMRMixerControl9*, pdwMixerPrefs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mixing_prefs.call(this, pdwMixerPrefs)
    end
    def set_proc_amp_control(this : IVMRMixerControl9*, dwStreamID : UInt32, lpClrControl : Win32cr::Media::DirectShow::VMR9ProcAmpControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_proc_amp_control.call(this, dwStreamID, lpClrControl)
    end
    def get_proc_amp_control(this : IVMRMixerControl9*, dwStreamID : UInt32, lpClrControl : Win32cr::Media::DirectShow::VMR9ProcAmpControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_proc_amp_control.call(this, dwStreamID, lpClrControl)
    end
    def get_proc_amp_control_range(this : IVMRMixerControl9*, dwStreamID : UInt32, lpClrControl : Win32cr::Media::DirectShow::VMR9ProcAmpControlRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_proc_amp_control_range.call(this, dwStreamID, lpClrControl)
    end

  end

  @[Extern]
  record IVMRMixerBitmap9Vtbl,
    query_interface : Proc(IVMRMixerBitmap9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRMixerBitmap9*, UInt32),
    release : Proc(IVMRMixerBitmap9*, UInt32),
    set_alpha_bitmap : Proc(IVMRMixerBitmap9*, Win32cr::Media::DirectShow::VMR9AlphaBitmap*, Win32cr::Foundation::HRESULT),
    update_alpha_bitmap_parameters : Proc(IVMRMixerBitmap9*, Win32cr::Media::DirectShow::VMR9AlphaBitmap*, Win32cr::Foundation::HRESULT),
    get_alpha_bitmap_parameters : Proc(IVMRMixerBitmap9*, Win32cr::Media::DirectShow::VMR9AlphaBitmap*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ced175e5-1935-4820-81bd-ff6ad00c9108")]
  record IVMRMixerBitmap9, lpVtbl : IVMRMixerBitmap9Vtbl* do
    GUID = LibC::GUID.new(0xced175e5_u32, 0x1935_u16, 0x4820_u16, StaticArray[0x81_u8, 0xbd_u8, 0xff_u8, 0x6a_u8, 0xd0_u8, 0xc_u8, 0x91_u8, 0x8_u8])
    def query_interface(this : IVMRMixerBitmap9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRMixerBitmap9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRMixerBitmap9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_alpha_bitmap(this : IVMRMixerBitmap9*, pBmpParms : Win32cr::Media::DirectShow::VMR9AlphaBitmap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_alpha_bitmap.call(this, pBmpParms)
    end
    def update_alpha_bitmap_parameters(this : IVMRMixerBitmap9*, pBmpParms : Win32cr::Media::DirectShow::VMR9AlphaBitmap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_alpha_bitmap_parameters.call(this, pBmpParms)
    end
    def get_alpha_bitmap_parameters(this : IVMRMixerBitmap9*, pBmpParms : Win32cr::Media::DirectShow::VMR9AlphaBitmap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alpha_bitmap_parameters.call(this, pBmpParms)
    end

  end

  @[Extern]
  record IVMRSurface9Vtbl,
    query_interface : Proc(IVMRSurface9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRSurface9*, UInt32),
    release : Proc(IVMRSurface9*, UInt32),
    is_surface_locked : Proc(IVMRSurface9*, Win32cr::Foundation::HRESULT),
    lock_surface : Proc(IVMRSurface9*, UInt8**, Win32cr::Foundation::HRESULT),
    unlock_surface : Proc(IVMRSurface9*, Win32cr::Foundation::HRESULT),
    get_surface : Proc(IVMRSurface9*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dfc581a1-6e1f-4c3a-8d0a-5e9792ea2afc")]
  record IVMRSurface9, lpVtbl : IVMRSurface9Vtbl* do
    GUID = LibC::GUID.new(0xdfc581a1_u32, 0x6e1f_u16, 0x4c3a_u16, StaticArray[0x8d_u8, 0xa_u8, 0x5e_u8, 0x97_u8, 0x92_u8, 0xea_u8, 0x2a_u8, 0xfc_u8])
    def query_interface(this : IVMRSurface9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRSurface9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRSurface9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_surface_locked(this : IVMRSurface9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_surface_locked.call(this)
    end
    def lock_surface(this : IVMRSurface9*, lpSurface : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_surface.call(this, lpSurface)
    end
    def unlock_surface(this : IVMRSurface9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_surface.call(this)
    end
    def get_surface(this : IVMRSurface9*, lplpSurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface.call(this, lplpSurface)
    end

  end

  @[Extern]
  record IVMRImagePresenterConfig9Vtbl,
    query_interface : Proc(IVMRImagePresenterConfig9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRImagePresenterConfig9*, UInt32),
    release : Proc(IVMRImagePresenterConfig9*, UInt32),
    set_rendering_prefs : Proc(IVMRImagePresenterConfig9*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_prefs : Proc(IVMRImagePresenterConfig9*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("45c15cab-6e22-420a-8043-ae1f0ac02c7d")]
  record IVMRImagePresenterConfig9, lpVtbl : IVMRImagePresenterConfig9Vtbl* do
    GUID = LibC::GUID.new(0x45c15cab_u32, 0x6e22_u16, 0x420a_u16, StaticArray[0x80_u8, 0x43_u8, 0xae_u8, 0x1f_u8, 0xa_u8, 0xc0_u8, 0x2c_u8, 0x7d_u8])
    def query_interface(this : IVMRImagePresenterConfig9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRImagePresenterConfig9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRImagePresenterConfig9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_rendering_prefs(this : IVMRImagePresenterConfig9*, dwRenderFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_prefs.call(this, dwRenderFlags)
    end
    def get_rendering_prefs(this : IVMRImagePresenterConfig9*, dwRenderFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_prefs.call(this, dwRenderFlags)
    end

  end

  @[Extern]
  record IVMRVideoStreamControl9Vtbl,
    query_interface : Proc(IVMRVideoStreamControl9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRVideoStreamControl9*, UInt32),
    release : Proc(IVMRVideoStreamControl9*, UInt32),
    set_stream_active_state : Proc(IVMRVideoStreamControl9*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_stream_active_state : Proc(IVMRVideoStreamControl9*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d0cfe38b-93e7-4772-8957-0400c49a4485")]
  record IVMRVideoStreamControl9, lpVtbl : IVMRVideoStreamControl9Vtbl* do
    GUID = LibC::GUID.new(0xd0cfe38b_u32, 0x93e7_u16, 0x4772_u16, StaticArray[0x89_u8, 0x57_u8, 0x4_u8, 0x0_u8, 0xc4_u8, 0x9a_u8, 0x44_u8, 0x85_u8])
    def query_interface(this : IVMRVideoStreamControl9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRVideoStreamControl9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRVideoStreamControl9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_stream_active_state(this : IVMRVideoStreamControl9*, fActive : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_active_state.call(this, fActive)
    end
    def get_stream_active_state(this : IVMRVideoStreamControl9*, lpfActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_active_state.call(this, lpfActive)
    end

  end

  @[Extern]
  record IVMRFilterConfig9Vtbl,
    query_interface : Proc(IVMRFilterConfig9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRFilterConfig9*, UInt32),
    release : Proc(IVMRFilterConfig9*, UInt32),
    set_image_compositor : Proc(IVMRFilterConfig9*, Void*, Win32cr::Foundation::HRESULT),
    set_number_of_streams : Proc(IVMRFilterConfig9*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_of_streams : Proc(IVMRFilterConfig9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_rendering_prefs : Proc(IVMRFilterConfig9*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_prefs : Proc(IVMRFilterConfig9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_rendering_mode : Proc(IVMRFilterConfig9*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_mode : Proc(IVMRFilterConfig9*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5a804648-4f66-4867-9c43-4f5c822cf1b8")]
  record IVMRFilterConfig9, lpVtbl : IVMRFilterConfig9Vtbl* do
    GUID = LibC::GUID.new(0x5a804648_u32, 0x4f66_u16, 0x4867_u16, StaticArray[0x9c_u8, 0x43_u8, 0x4f_u8, 0x5c_u8, 0x82_u8, 0x2c_u8, 0xf1_u8, 0xb8_u8])
    def query_interface(this : IVMRFilterConfig9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRFilterConfig9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRFilterConfig9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_image_compositor(this : IVMRFilterConfig9*, lpVMRImgCompositor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_image_compositor.call(this, lpVMRImgCompositor)
    end
    def set_number_of_streams(this : IVMRFilterConfig9*, dwMaxStreams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_number_of_streams.call(this, dwMaxStreams)
    end
    def get_number_of_streams(this : IVMRFilterConfig9*, pdwMaxStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_streams.call(this, pdwMaxStreams)
    end
    def set_rendering_prefs(this : IVMRFilterConfig9*, dwRenderFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_prefs.call(this, dwRenderFlags)
    end
    def get_rendering_prefs(this : IVMRFilterConfig9*, pdwRenderFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_prefs.call(this, pdwRenderFlags)
    end
    def set_rendering_mode(this : IVMRFilterConfig9*, mode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_mode.call(this, mode)
    end
    def get_rendering_mode(this : IVMRFilterConfig9*, pMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_mode.call(this, pMode)
    end

  end

  @[Extern]
  record IVMRAspectRatioControl9Vtbl,
    query_interface : Proc(IVMRAspectRatioControl9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRAspectRatioControl9*, UInt32),
    release : Proc(IVMRAspectRatioControl9*, UInt32),
    get_aspect_ratio_mode : Proc(IVMRAspectRatioControl9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IVMRAspectRatioControl9*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("00d96c29-bbde-4efc-9901-bb5036392146")]
  record IVMRAspectRatioControl9, lpVtbl : IVMRAspectRatioControl9Vtbl* do
    GUID = LibC::GUID.new(0xd96c29_u32, 0xbbde_u16, 0x4efc_u16, StaticArray[0x99_u8, 0x1_u8, 0xbb_u8, 0x50_u8, 0x36_u8, 0x39_u8, 0x21_u8, 0x46_u8])
    def query_interface(this : IVMRAspectRatioControl9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRAspectRatioControl9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRAspectRatioControl9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_aspect_ratio_mode(this : IVMRAspectRatioControl9*, lpdwARMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, lpdwARMode)
    end
    def set_aspect_ratio_mode(this : IVMRAspectRatioControl9*, dwARMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, dwARMode)
    end

  end

  @[Extern]
  record IVMRMonitorConfig9Vtbl,
    query_interface : Proc(IVMRMonitorConfig9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRMonitorConfig9*, UInt32),
    release : Proc(IVMRMonitorConfig9*, UInt32),
    set_monitor : Proc(IVMRMonitorConfig9*, UInt32, Win32cr::Foundation::HRESULT),
    get_monitor : Proc(IVMRMonitorConfig9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_default_monitor : Proc(IVMRMonitorConfig9*, UInt32, Win32cr::Foundation::HRESULT),
    get_default_monitor : Proc(IVMRMonitorConfig9*, UInt32*, Win32cr::Foundation::HRESULT),
    get_available_monitors : Proc(IVMRMonitorConfig9*, Win32cr::Media::DirectShow::VMR9MonitorInfo*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("46c2e457-8ba0-4eef-b80b-0680f0978749")]
  record IVMRMonitorConfig9, lpVtbl : IVMRMonitorConfig9Vtbl* do
    GUID = LibC::GUID.new(0x46c2e457_u32, 0x8ba0_u16, 0x4eef_u16, StaticArray[0xb8_u8, 0xb_u8, 0x6_u8, 0x80_u8, 0xf0_u8, 0x97_u8, 0x87_u8, 0x49_u8])
    def query_interface(this : IVMRMonitorConfig9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRMonitorConfig9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRMonitorConfig9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_monitor(this : IVMRMonitorConfig9*, uDev : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_monitor.call(this, uDev)
    end
    def get_monitor(this : IVMRMonitorConfig9*, puDev : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_monitor.call(this, puDev)
    end
    def set_default_monitor(this : IVMRMonitorConfig9*, uDev : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_monitor.call(this, uDev)
    end
    def get_default_monitor(this : IVMRMonitorConfig9*, puDev : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_monitor.call(this, puDev)
    end
    def get_available_monitors(this : IVMRMonitorConfig9*, pInfo : Win32cr::Media::DirectShow::VMR9MonitorInfo*, dwMaxInfoArraySize : UInt32, pdwNumDevices : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_monitors.call(this, pInfo, dwMaxInfoArraySize, pdwNumDevices)
    end

  end

  @[Extern]
  record IVMRDeinterlaceControl9Vtbl,
    query_interface : Proc(IVMRDeinterlaceControl9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRDeinterlaceControl9*, UInt32),
    release : Proc(IVMRDeinterlaceControl9*, UInt32),
    get_number_of_deinterlace_modes : Proc(IVMRDeinterlaceControl9*, Win32cr::Media::DirectShow::VMR9VideoDesc*, UInt32*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_deinterlace_mode_caps : Proc(IVMRDeinterlaceControl9*, LibC::GUID*, Win32cr::Media::DirectShow::VMR9VideoDesc*, Win32cr::Media::DirectShow::VMR9DeinterlaceCaps*, Win32cr::Foundation::HRESULT),
    get_deinterlace_mode : Proc(IVMRDeinterlaceControl9*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_deinterlace_mode : Proc(IVMRDeinterlaceControl9*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_deinterlace_prefs : Proc(IVMRDeinterlaceControl9*, UInt32*, Win32cr::Foundation::HRESULT),
    set_deinterlace_prefs : Proc(IVMRDeinterlaceControl9*, UInt32, Win32cr::Foundation::HRESULT),
    get_actual_deinterlace_mode : Proc(IVMRDeinterlaceControl9*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a215fb8d-13c2-4f7f-993c-003d6271a459")]
  record IVMRDeinterlaceControl9, lpVtbl : IVMRDeinterlaceControl9Vtbl* do
    GUID = LibC::GUID.new(0xa215fb8d_u32, 0x13c2_u16, 0x4f7f_u16, StaticArray[0x99_u8, 0x3c_u8, 0x0_u8, 0x3d_u8, 0x62_u8, 0x71_u8, 0xa4_u8, 0x59_u8])
    def query_interface(this : IVMRDeinterlaceControl9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRDeinterlaceControl9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRDeinterlaceControl9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_of_deinterlace_modes(this : IVMRDeinterlaceControl9*, lpVideoDescription : Win32cr::Media::DirectShow::VMR9VideoDesc*, lpdwNumDeinterlaceModes : UInt32*, lpDeinterlaceModes : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_deinterlace_modes.call(this, lpVideoDescription, lpdwNumDeinterlaceModes, lpDeinterlaceModes)
    end
    def get_deinterlace_mode_caps(this : IVMRDeinterlaceControl9*, lpDeinterlaceMode : LibC::GUID*, lpVideoDescription : Win32cr::Media::DirectShow::VMR9VideoDesc*, lpDeinterlaceCaps : Win32cr::Media::DirectShow::VMR9DeinterlaceCaps*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_mode_caps.call(this, lpDeinterlaceMode, lpVideoDescription, lpDeinterlaceCaps)
    end
    def get_deinterlace_mode(this : IVMRDeinterlaceControl9*, dwStreamID : UInt32, lpDeinterlaceMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_mode.call(this, dwStreamID, lpDeinterlaceMode)
    end
    def set_deinterlace_mode(this : IVMRDeinterlaceControl9*, dwStreamID : UInt32, lpDeinterlaceMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_deinterlace_mode.call(this, dwStreamID, lpDeinterlaceMode)
    end
    def get_deinterlace_prefs(this : IVMRDeinterlaceControl9*, lpdwDeinterlacePrefs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_prefs.call(this, lpdwDeinterlacePrefs)
    end
    def set_deinterlace_prefs(this : IVMRDeinterlaceControl9*, dwDeinterlacePrefs : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_deinterlace_prefs.call(this, dwDeinterlacePrefs)
    end
    def get_actual_deinterlace_mode(this : IVMRDeinterlaceControl9*, dwStreamID : UInt32, lpDeinterlaceMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_actual_deinterlace_mode.call(this, dwStreamID, lpDeinterlaceMode)
    end

  end

  @[Extern]
  record IVMRImageCompositor9Vtbl,
    query_interface : Proc(IVMRImageCompositor9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVMRImageCompositor9*, UInt32),
    release : Proc(IVMRImageCompositor9*, UInt32),
    init_composition_device : Proc(IVMRImageCompositor9*, Void*, Win32cr::Foundation::HRESULT),
    term_composition_device : Proc(IVMRImageCompositor9*, Void*, Win32cr::Foundation::HRESULT),
    set_stream_media_type : Proc(IVMRImageCompositor9*, UInt32, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    composite_image : Proc(IVMRImageCompositor9*, Void*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Int64, Int64, UInt32, Win32cr::Media::DirectShow::VMR9VideoStreamInfo*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4a5c89eb-df51-4654-ac2a-e48e02bbabf6")]
  record IVMRImageCompositor9, lpVtbl : IVMRImageCompositor9Vtbl* do
    GUID = LibC::GUID.new(0x4a5c89eb_u32, 0xdf51_u16, 0x4654_u16, StaticArray[0xac_u8, 0x2a_u8, 0xe4_u8, 0x8e_u8, 0x2_u8, 0xbb_u8, 0xab_u8, 0xf6_u8])
    def query_interface(this : IVMRImageCompositor9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVMRImageCompositor9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVMRImageCompositor9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init_composition_device(this : IVMRImageCompositor9*, pD3DDevice : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_composition_device.call(this, pD3DDevice)
    end
    def term_composition_device(this : IVMRImageCompositor9*, pD3DDevice : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.term_composition_device.call(this, pD3DDevice)
    end
    def set_stream_media_type(this : IVMRImageCompositor9*, dwStrmID : UInt32, pmt : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, fTexture : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_media_type.call(this, dwStrmID, pmt, fTexture)
    end
    def composite_image(this : IVMRImageCompositor9*, pD3DDevice : Void*, pddsRenderTarget : Void*, pmtRenderTarget : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, rtStart : Int64, rtEnd : Int64, dwClrBkGnd : UInt32, pVideoStreamInfo : Win32cr::Media::DirectShow::VMR9VideoStreamInfo*, cStreams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.composite_image.call(this, pD3DDevice, pddsRenderTarget, pmtRenderTarget, rtStart, rtEnd, dwClrBkGnd, pVideoStreamInfo, cStreams)
    end

  end

  @[Extern]
  record IVPBaseConfigVtbl,
    query_interface : Proc(IVPBaseConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPBaseConfig*, UInt32),
    release : Proc(IVPBaseConfig*, UInt32),
    get_connect_info : Proc(IVPBaseConfig*, UInt32*, Win32cr::Graphics::DirectDraw::DDVIDEOPORTCONNECT*, Win32cr::Foundation::HRESULT),
    set_connect_info : Proc(IVPBaseConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_vp_data_info : Proc(IVPBaseConfig*, Win32cr::Media::DirectShow::AMVPDATAINFO*, Win32cr::Foundation::HRESULT),
    get_max_pixel_rate : Proc(IVPBaseConfig*, Win32cr::Media::DirectShow::AMVPSIZE*, UInt32*, Win32cr::Foundation::HRESULT),
    inform_vp_input_formats : Proc(IVPBaseConfig*, UInt32, Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*, Win32cr::Foundation::HRESULT),
    get_video_formats : Proc(IVPBaseConfig*, UInt32*, Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*, Win32cr::Foundation::HRESULT),
    set_video_format : Proc(IVPBaseConfig*, UInt32, Win32cr::Foundation::HRESULT),
    set_invert_polarity : Proc(IVPBaseConfig*, Win32cr::Foundation::HRESULT),
    get_overlay_surface : Proc(IVPBaseConfig*, Void**, Win32cr::Foundation::HRESULT),
    set_direct_draw_kernel_handle : Proc(IVPBaseConfig*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    set_video_port_id : Proc(IVPBaseConfig*, UInt32, Win32cr::Foundation::HRESULT),
    set_dd_surface_kernel_handles : Proc(IVPBaseConfig*, UInt32, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    set_surface_parameters : Proc(IVPBaseConfig*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVPBaseConfig, lpVtbl : IVPBaseConfigVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IVPBaseConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPBaseConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPBaseConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_connect_info(this : IVPBaseConfig*, pdwNumConnectInfo : UInt32*, pddVPConnectInfo : Win32cr::Graphics::DirectDraw::DDVIDEOPORTCONNECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connect_info.call(this, pdwNumConnectInfo, pddVPConnectInfo)
    end
    def set_connect_info(this : IVPBaseConfig*, dwChosenEntry : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_connect_info.call(this, dwChosenEntry)
    end
    def get_vp_data_info(this : IVPBaseConfig*, pamvpDataInfo : Win32cr::Media::DirectShow::AMVPDATAINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vp_data_info.call(this, pamvpDataInfo)
    end
    def get_max_pixel_rate(this : IVPBaseConfig*, pamvpSize : Win32cr::Media::DirectShow::AMVPSIZE*, pdwMaxPixelsPerSecond : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_pixel_rate.call(this, pamvpSize, pdwMaxPixelsPerSecond)
    end
    def inform_vp_input_formats(this : IVPBaseConfig*, dwNumFormats : UInt32, pDDPixelFormats : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.inform_vp_input_formats.call(this, dwNumFormats, pDDPixelFormats)
    end
    def get_video_formats(this : IVPBaseConfig*, pdwNumFormats : UInt32*, pddPixelFormats : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_formats.call(this, pdwNumFormats, pddPixelFormats)
    end
    def set_video_format(this : IVPBaseConfig*, dwChosenEntry : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_format.call(this, dwChosenEntry)
    end
    def set_invert_polarity(this : IVPBaseConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_invert_polarity.call(this)
    end
    def get_overlay_surface(this : IVPBaseConfig*, ppddOverlaySurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_overlay_surface.call(this, ppddOverlaySurface)
    end
    def set_direct_draw_kernel_handle(this : IVPBaseConfig*, dwDDKernelHandle : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_draw_kernel_handle.call(this, dwDDKernelHandle)
    end
    def set_video_port_id(this : IVPBaseConfig*, dwVideoPortID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_port_id.call(this, dwVideoPortID)
    end
    def set_dd_surface_kernel_handles(this : IVPBaseConfig*, cHandles : UInt32, rgDDKernelHandles : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dd_surface_kernel_handles.call(this, cHandles, rgDDKernelHandles)
    end
    def set_surface_parameters(this : IVPBaseConfig*, dwPitch : UInt32, dwXOrigin : UInt32, dwYOrigin : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_surface_parameters.call(this, dwPitch, dwXOrigin, dwYOrigin)
    end

  end

  @[Extern]
  record IVPConfigVtbl,
    query_interface : Proc(IVPConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPConfig*, UInt32),
    release : Proc(IVPConfig*, UInt32),
    get_connect_info : Proc(IVPConfig*, UInt32*, Win32cr::Graphics::DirectDraw::DDVIDEOPORTCONNECT*, Win32cr::Foundation::HRESULT),
    set_connect_info : Proc(IVPConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_vp_data_info : Proc(IVPConfig*, Win32cr::Media::DirectShow::AMVPDATAINFO*, Win32cr::Foundation::HRESULT),
    get_max_pixel_rate : Proc(IVPConfig*, Win32cr::Media::DirectShow::AMVPSIZE*, UInt32*, Win32cr::Foundation::HRESULT),
    inform_vp_input_formats : Proc(IVPConfig*, UInt32, Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*, Win32cr::Foundation::HRESULT),
    get_video_formats : Proc(IVPConfig*, UInt32*, Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*, Win32cr::Foundation::HRESULT),
    set_video_format : Proc(IVPConfig*, UInt32, Win32cr::Foundation::HRESULT),
    set_invert_polarity : Proc(IVPConfig*, Win32cr::Foundation::HRESULT),
    get_overlay_surface : Proc(IVPConfig*, Void**, Win32cr::Foundation::HRESULT),
    set_direct_draw_kernel_handle : Proc(IVPConfig*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    set_video_port_id : Proc(IVPConfig*, UInt32, Win32cr::Foundation::HRESULT),
    set_dd_surface_kernel_handles : Proc(IVPConfig*, UInt32, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    set_surface_parameters : Proc(IVPConfig*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    is_vp_decimation_allowed : Proc(IVPConfig*, Int32*, Win32cr::Foundation::HRESULT),
    set_scaling_factors : Proc(IVPConfig*, Win32cr::Media::DirectShow::AMVPSIZE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bc29a660-30e3-11d0-9e69-00c04fd7c15b")]
  record IVPConfig, lpVtbl : IVPConfigVtbl* do
    GUID = LibC::GUID.new(0xbc29a660_u32, 0x30e3_u16, 0x11d0_u16, StaticArray[0x9e_u8, 0x69_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xc1_u8, 0x5b_u8])
    def query_interface(this : IVPConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_connect_info(this : IVPConfig*, pdwNumConnectInfo : UInt32*, pddVPConnectInfo : Win32cr::Graphics::DirectDraw::DDVIDEOPORTCONNECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connect_info.call(this, pdwNumConnectInfo, pddVPConnectInfo)
    end
    def set_connect_info(this : IVPConfig*, dwChosenEntry : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_connect_info.call(this, dwChosenEntry)
    end
    def get_vp_data_info(this : IVPConfig*, pamvpDataInfo : Win32cr::Media::DirectShow::AMVPDATAINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vp_data_info.call(this, pamvpDataInfo)
    end
    def get_max_pixel_rate(this : IVPConfig*, pamvpSize : Win32cr::Media::DirectShow::AMVPSIZE*, pdwMaxPixelsPerSecond : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_pixel_rate.call(this, pamvpSize, pdwMaxPixelsPerSecond)
    end
    def inform_vp_input_formats(this : IVPConfig*, dwNumFormats : UInt32, pDDPixelFormats : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.inform_vp_input_formats.call(this, dwNumFormats, pDDPixelFormats)
    end
    def get_video_formats(this : IVPConfig*, pdwNumFormats : UInt32*, pddPixelFormats : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_formats.call(this, pdwNumFormats, pddPixelFormats)
    end
    def set_video_format(this : IVPConfig*, dwChosenEntry : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_format.call(this, dwChosenEntry)
    end
    def set_invert_polarity(this : IVPConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_invert_polarity.call(this)
    end
    def get_overlay_surface(this : IVPConfig*, ppddOverlaySurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_overlay_surface.call(this, ppddOverlaySurface)
    end
    def set_direct_draw_kernel_handle(this : IVPConfig*, dwDDKernelHandle : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_draw_kernel_handle.call(this, dwDDKernelHandle)
    end
    def set_video_port_id(this : IVPConfig*, dwVideoPortID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_port_id.call(this, dwVideoPortID)
    end
    def set_dd_surface_kernel_handles(this : IVPConfig*, cHandles : UInt32, rgDDKernelHandles : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dd_surface_kernel_handles.call(this, cHandles, rgDDKernelHandles)
    end
    def set_surface_parameters(this : IVPConfig*, dwPitch : UInt32, dwXOrigin : UInt32, dwYOrigin : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_surface_parameters.call(this, dwPitch, dwXOrigin, dwYOrigin)
    end
    def is_vp_decimation_allowed(this : IVPConfig*, pbIsDecimationAllowed : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_vp_decimation_allowed.call(this, pbIsDecimationAllowed)
    end
    def set_scaling_factors(this : IVPConfig*, pamvpSize : Win32cr::Media::DirectShow::AMVPSIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scaling_factors.call(this, pamvpSize)
    end

  end

  @[Extern]
  record IVPVBIConfigVtbl,
    query_interface : Proc(IVPVBIConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPVBIConfig*, UInt32),
    release : Proc(IVPVBIConfig*, UInt32),
    get_connect_info : Proc(IVPVBIConfig*, UInt32*, Win32cr::Graphics::DirectDraw::DDVIDEOPORTCONNECT*, Win32cr::Foundation::HRESULT),
    set_connect_info : Proc(IVPVBIConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_vp_data_info : Proc(IVPVBIConfig*, Win32cr::Media::DirectShow::AMVPDATAINFO*, Win32cr::Foundation::HRESULT),
    get_max_pixel_rate : Proc(IVPVBIConfig*, Win32cr::Media::DirectShow::AMVPSIZE*, UInt32*, Win32cr::Foundation::HRESULT),
    inform_vp_input_formats : Proc(IVPVBIConfig*, UInt32, Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*, Win32cr::Foundation::HRESULT),
    get_video_formats : Proc(IVPVBIConfig*, UInt32*, Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*, Win32cr::Foundation::HRESULT),
    set_video_format : Proc(IVPVBIConfig*, UInt32, Win32cr::Foundation::HRESULT),
    set_invert_polarity : Proc(IVPVBIConfig*, Win32cr::Foundation::HRESULT),
    get_overlay_surface : Proc(IVPVBIConfig*, Void**, Win32cr::Foundation::HRESULT),
    set_direct_draw_kernel_handle : Proc(IVPVBIConfig*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    set_video_port_id : Proc(IVPVBIConfig*, UInt32, Win32cr::Foundation::HRESULT),
    set_dd_surface_kernel_handles : Proc(IVPVBIConfig*, UInt32, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    set_surface_parameters : Proc(IVPVBIConfig*, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ec529b00-1a1f-11d1-bad9-00609744111a")]
  record IVPVBIConfig, lpVtbl : IVPVBIConfigVtbl* do
    GUID = LibC::GUID.new(0xec529b00_u32, 0x1a1f_u16, 0x11d1_u16, StaticArray[0xba_u8, 0xd9_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0x44_u8, 0x11_u8, 0x1a_u8])
    def query_interface(this : IVPVBIConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPVBIConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPVBIConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_connect_info(this : IVPVBIConfig*, pdwNumConnectInfo : UInt32*, pddVPConnectInfo : Win32cr::Graphics::DirectDraw::DDVIDEOPORTCONNECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connect_info.call(this, pdwNumConnectInfo, pddVPConnectInfo)
    end
    def set_connect_info(this : IVPVBIConfig*, dwChosenEntry : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_connect_info.call(this, dwChosenEntry)
    end
    def get_vp_data_info(this : IVPVBIConfig*, pamvpDataInfo : Win32cr::Media::DirectShow::AMVPDATAINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vp_data_info.call(this, pamvpDataInfo)
    end
    def get_max_pixel_rate(this : IVPVBIConfig*, pamvpSize : Win32cr::Media::DirectShow::AMVPSIZE*, pdwMaxPixelsPerSecond : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_pixel_rate.call(this, pamvpSize, pdwMaxPixelsPerSecond)
    end
    def inform_vp_input_formats(this : IVPVBIConfig*, dwNumFormats : UInt32, pDDPixelFormats : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.inform_vp_input_formats.call(this, dwNumFormats, pDDPixelFormats)
    end
    def get_video_formats(this : IVPVBIConfig*, pdwNumFormats : UInt32*, pddPixelFormats : Win32cr::Graphics::DirectDraw::DDPIXELFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_formats.call(this, pdwNumFormats, pddPixelFormats)
    end
    def set_video_format(this : IVPVBIConfig*, dwChosenEntry : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_format.call(this, dwChosenEntry)
    end
    def set_invert_polarity(this : IVPVBIConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_invert_polarity.call(this)
    end
    def get_overlay_surface(this : IVPVBIConfig*, ppddOverlaySurface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_overlay_surface.call(this, ppddOverlaySurface)
    end
    def set_direct_draw_kernel_handle(this : IVPVBIConfig*, dwDDKernelHandle : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_draw_kernel_handle.call(this, dwDDKernelHandle)
    end
    def set_video_port_id(this : IVPVBIConfig*, dwVideoPortID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_port_id.call(this, dwVideoPortID)
    end
    def set_dd_surface_kernel_handles(this : IVPVBIConfig*, cHandles : UInt32, rgDDKernelHandles : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_dd_surface_kernel_handles.call(this, cHandles, rgDDKernelHandles)
    end
    def set_surface_parameters(this : IVPVBIConfig*, dwPitch : UInt32, dwXOrigin : UInt32, dwYOrigin : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_surface_parameters.call(this, dwPitch, dwXOrigin, dwYOrigin)
    end

  end

  @[Extern]
  record IVPBaseNotifyVtbl,
    query_interface : Proc(IVPBaseNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPBaseNotify*, UInt32),
    release : Proc(IVPBaseNotify*, UInt32),
    renegotiate_vp_parameters : Proc(IVPBaseNotify*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVPBaseNotify, lpVtbl : IVPBaseNotifyVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : IVPBaseNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPBaseNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPBaseNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def renegotiate_vp_parameters(this : IVPBaseNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.renegotiate_vp_parameters.call(this)
    end

  end

  @[Extern]
  record IVPNotifyVtbl,
    query_interface : Proc(IVPNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPNotify*, UInt32),
    release : Proc(IVPNotify*, UInt32),
    renegotiate_vp_parameters : Proc(IVPNotify*, Win32cr::Foundation::HRESULT),
    set_deinterlace_mode : Proc(IVPNotify*, Win32cr::Media::DirectShow::AMVP_MODE, Win32cr::Foundation::HRESULT),
    get_deinterlace_mode : Proc(IVPNotify*, Win32cr::Media::DirectShow::AMVP_MODE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c76794a1-d6c5-11d0-9e69-00c04fd7c15b")]
  record IVPNotify, lpVtbl : IVPNotifyVtbl* do
    GUID = LibC::GUID.new(0xc76794a1_u32, 0xd6c5_u16, 0x11d0_u16, StaticArray[0x9e_u8, 0x69_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xc1_u8, 0x5b_u8])
    def query_interface(this : IVPNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def renegotiate_vp_parameters(this : IVPNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.renegotiate_vp_parameters.call(this)
    end
    def set_deinterlace_mode(this : IVPNotify*, mode : Win32cr::Media::DirectShow::AMVP_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_deinterlace_mode.call(this, mode)
    end
    def get_deinterlace_mode(this : IVPNotify*, pMode : Win32cr::Media::DirectShow::AMVP_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_mode.call(this, pMode)
    end

  end

  @[Extern]
  record IVPNotify2Vtbl,
    query_interface : Proc(IVPNotify2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPNotify2*, UInt32),
    release : Proc(IVPNotify2*, UInt32),
    renegotiate_vp_parameters : Proc(IVPNotify2*, Win32cr::Foundation::HRESULT),
    set_deinterlace_mode : Proc(IVPNotify2*, Win32cr::Media::DirectShow::AMVP_MODE, Win32cr::Foundation::HRESULT),
    get_deinterlace_mode : Proc(IVPNotify2*, Win32cr::Media::DirectShow::AMVP_MODE*, Win32cr::Foundation::HRESULT),
    set_vp_sync_master : Proc(IVPNotify2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_vp_sync_master : Proc(IVPNotify2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ebf47183-8764-11d1-9e69-00c04fd7c15b")]
  record IVPNotify2, lpVtbl : IVPNotify2Vtbl* do
    GUID = LibC::GUID.new(0xebf47183_u32, 0x8764_u16, 0x11d1_u16, StaticArray[0x9e_u8, 0x69_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xd7_u8, 0xc1_u8, 0x5b_u8])
    def query_interface(this : IVPNotify2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPNotify2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPNotify2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def renegotiate_vp_parameters(this : IVPNotify2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.renegotiate_vp_parameters.call(this)
    end
    def set_deinterlace_mode(this : IVPNotify2*, mode : Win32cr::Media::DirectShow::AMVP_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_deinterlace_mode.call(this, mode)
    end
    def get_deinterlace_mode(this : IVPNotify2*, pMode : Win32cr::Media::DirectShow::AMVP_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_deinterlace_mode.call(this, pMode)
    end
    def set_vp_sync_master(this : IVPNotify2*, bVPSyncMaster : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_vp_sync_master.call(this, bVPSyncMaster)
    end
    def get_vp_sync_master(this : IVPNotify2*, pbVPSyncMaster : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vp_sync_master.call(this, pbVPSyncMaster)
    end

  end

  @[Extern]
  record IVPVBINotifyVtbl,
    query_interface : Proc(IVPVBINotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVPVBINotify*, UInt32),
    release : Proc(IVPVBINotify*, UInt32),
    renegotiate_vp_parameters : Proc(IVPVBINotify*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ec529b01-1a1f-11d1-bad9-00609744111a")]
  record IVPVBINotify, lpVtbl : IVPVBINotifyVtbl* do
    GUID = LibC::GUID.new(0xec529b01_u32, 0x1a1f_u16, 0x11d1_u16, StaticArray[0xba_u8, 0xd9_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0x44_u8, 0x11_u8, 0x1a_u8])
    def query_interface(this : IVPVBINotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVPVBINotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVPVBINotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def renegotiate_vp_parameters(this : IVPVBINotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.renegotiate_vp_parameters.call(this)
    end

  end

  @[Extern]
  record IMediaParamInfoVtbl,
    query_interface : Proc(IMediaParamInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaParamInfo*, UInt32),
    release : Proc(IMediaParamInfo*, UInt32),
    get_param_count : Proc(IMediaParamInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_param_info : Proc(IMediaParamInfo*, UInt32, Win32cr::Media::DirectShow::MP_PARAMINFO*, Win32cr::Foundation::HRESULT),
    get_param_text : Proc(IMediaParamInfo*, UInt32, UInt16**, Win32cr::Foundation::HRESULT),
    get_num_time_formats : Proc(IMediaParamInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_time_format : Proc(IMediaParamInfo*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_current_time_format : Proc(IMediaParamInfo*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d6cbb60-a223-44aa-842f-a2f06750be6d")]
  record IMediaParamInfo, lpVtbl : IMediaParamInfoVtbl* do
    GUID = LibC::GUID.new(0x6d6cbb60_u32, 0xa223_u16, 0x44aa_u16, StaticArray[0x84_u8, 0x2f_u8, 0xa2_u8, 0xf0_u8, 0x67_u8, 0x50_u8, 0xbe_u8, 0x6d_u8])
    def query_interface(this : IMediaParamInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaParamInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaParamInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_param_count(this : IMediaParamInfo*, pdwParams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_param_count.call(this, pdwParams)
    end
    def get_param_info(this : IMediaParamInfo*, dwParamIndex : UInt32, pInfo : Win32cr::Media::DirectShow::MP_PARAMINFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_param_info.call(this, dwParamIndex, pInfo)
    end
    def get_param_text(this : IMediaParamInfo*, dwParamIndex : UInt32, ppwchText : UInt16**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_param_text.call(this, dwParamIndex, ppwchText)
    end
    def get_num_time_formats(this : IMediaParamInfo*, pdwNumTimeFormats : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_num_time_formats.call(this, pdwNumTimeFormats)
    end
    def get_supported_time_format(this : IMediaParamInfo*, dwFormatIndex : UInt32, pguidTimeFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_time_format.call(this, dwFormatIndex, pguidTimeFormat)
    end
    def get_current_time_format(this : IMediaParamInfo*, pguidTimeFormat : LibC::GUID*, pTimeData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_time_format.call(this, pguidTimeFormat, pTimeData)
    end

  end

  @[Extern]
  record IMediaParamsVtbl,
    query_interface : Proc(IMediaParams*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMediaParams*, UInt32),
    release : Proc(IMediaParams*, UInt32),
    get_param : Proc(IMediaParams*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_param : Proc(IMediaParams*, UInt32, Float32, Win32cr::Foundation::HRESULT),
    add_envelope : Proc(IMediaParams*, UInt32, UInt32, Win32cr::Media::DirectShow::MP_ENVELOPE_SEGMENT*, Win32cr::Foundation::HRESULT),
    flush_envelope : Proc(IMediaParams*, UInt32, Int64, Int64, Win32cr::Foundation::HRESULT),
    set_time_format : Proc(IMediaParams*, LibC::GUID, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d6cbb61-a223-44aa-842f-a2f06750be6e")]
  record IMediaParams, lpVtbl : IMediaParamsVtbl* do
    GUID = LibC::GUID.new(0x6d6cbb61_u32, 0xa223_u16, 0x44aa_u16, StaticArray[0x84_u8, 0x2f_u8, 0xa2_u8, 0xf0_u8, 0x67_u8, 0x50_u8, 0xbe_u8, 0x6e_u8])
    def query_interface(this : IMediaParams*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMediaParams*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMediaParams*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_param(this : IMediaParams*, dwParamIndex : UInt32, pValue : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_param.call(this, dwParamIndex, pValue)
    end
    def set_param(this : IMediaParams*, dwParamIndex : UInt32, value : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_param.call(this, dwParamIndex, value)
    end
    def add_envelope(this : IMediaParams*, dwParamIndex : UInt32, cSegments : UInt32, pEnvelopeSegments : Win32cr::Media::DirectShow::MP_ENVELOPE_SEGMENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_envelope.call(this, dwParamIndex, cSegments, pEnvelopeSegments)
    end
    def flush_envelope(this : IMediaParams*, dwParamIndex : UInt32, refTimeStart : Int64, refTimeEnd : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_envelope.call(this, dwParamIndex, refTimeStart, refTimeEnd)
    end
    def set_time_format(this : IMediaParams*, guidTimeFormat : LibC::GUID, mpTimeData : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time_format.call(this, guidTimeFormat, mpTimeData)
    end

  end

  @[Extern]
  record IAMPlayListItemVtbl,
    query_interface : Proc(IAMPlayListItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMPlayListItem*, UInt32),
    release : Proc(IAMPlayListItem*, UInt32),
    get_flags : Proc(IAMPlayListItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_count : Proc(IAMPlayListItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_url : Proc(IAMPlayListItem*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_source_start : Proc(IAMPlayListItem*, UInt32, Int64*, Win32cr::Foundation::HRESULT),
    get_source_duration : Proc(IAMPlayListItem*, UInt32, Int64*, Win32cr::Foundation::HRESULT),
    get_source_start_marker : Proc(IAMPlayListItem*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_end_marker : Proc(IAMPlayListItem*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_source_start_marker_name : Proc(IAMPlayListItem*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_source_end_marker_name : Proc(IAMPlayListItem*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_link_url : Proc(IAMPlayListItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_scan_duration : Proc(IAMPlayListItem*, UInt32, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868ff-0ad4-11ce-b03a-0020af0ba770")]
  record IAMPlayListItem, lpVtbl : IAMPlayListItemVtbl* do
    GUID = LibC::GUID.new(0x56a868ff_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IAMPlayListItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMPlayListItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMPlayListItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_flags(this : IAMPlayListItem*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pdwFlags)
    end
    def get_source_count(this : IAMPlayListItem*, pdwSources : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_count.call(this, pdwSources)
    end
    def get_source_url(this : IAMPlayListItem*, dwSourceIndex : UInt32, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_url.call(this, dwSourceIndex, pbstrURL)
    end
    def get_source_start(this : IAMPlayListItem*, dwSourceIndex : UInt32, prtStart : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_start.call(this, dwSourceIndex, prtStart)
    end
    def get_source_duration(this : IAMPlayListItem*, dwSourceIndex : UInt32, prtDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_duration.call(this, dwSourceIndex, prtDuration)
    end
    def get_source_start_marker(this : IAMPlayListItem*, dwSourceIndex : UInt32, pdwMarker : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_start_marker.call(this, dwSourceIndex, pdwMarker)
    end
    def get_source_end_marker(this : IAMPlayListItem*, dwSourceIndex : UInt32, pdwMarker : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_end_marker.call(this, dwSourceIndex, pdwMarker)
    end
    def get_source_start_marker_name(this : IAMPlayListItem*, dwSourceIndex : UInt32, pbstrStartMarker : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_start_marker_name.call(this, dwSourceIndex, pbstrStartMarker)
    end
    def get_source_end_marker_name(this : IAMPlayListItem*, dwSourceIndex : UInt32, pbstrEndMarker : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_end_marker_name.call(this, dwSourceIndex, pbstrEndMarker)
    end
    def get_link_url(this : IAMPlayListItem*, pbstrURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_link_url.call(this, pbstrURL)
    end
    def get_scan_duration(this : IAMPlayListItem*, dwSourceIndex : UInt32, prtScanDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scan_duration.call(this, dwSourceIndex, prtScanDuration)
    end

  end

  @[Extern]
  record IAMPlayListVtbl,
    query_interface : Proc(IAMPlayList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMPlayList*, UInt32),
    release : Proc(IAMPlayList*, UInt32),
    get_flags : Proc(IAMPlayList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_count : Proc(IAMPlayList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item : Proc(IAMPlayList*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_named_event : Proc(IAMPlayList*, Win32cr::Foundation::PWSTR, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    get_repeat_info : Proc(IAMPlayList*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56a868fe-0ad4-11ce-b03a-0020af0ba770")]
  record IAMPlayList, lpVtbl : IAMPlayListVtbl* do
    GUID = LibC::GUID.new(0x56a868fe_u32, 0xad4_u16, 0x11ce_u16, StaticArray[0xb0_u8, 0x3a_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
    def query_interface(this : IAMPlayList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMPlayList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMPlayList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_flags(this : IAMPlayList*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pdwFlags)
    end
    def get_item_count(this : IAMPlayList*, pdwItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_count.call(this, pdwItems)
    end
    def get_item(this : IAMPlayList*, dwItemIndex : UInt32, ppItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, dwItemIndex, ppItem)
    end
    def get_named_event(this : IAMPlayList*, pwszEventName : Win32cr::Foundation::PWSTR, dwItemIndex : UInt32, ppItem : Void**, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_named_event.call(this, pwszEventName, dwItemIndex, ppItem, pdwFlags)
    end
    def get_repeat_info(this : IAMPlayList*, pdwRepeatCount : UInt32*, pdwRepeatStart : UInt32*, pdwRepeatEnd : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_repeat_info.call(this, pdwRepeatCount, pdwRepeatStart, pdwRepeatEnd)
    end

  end

  @[Extern]
  record ISpecifyParticularPagesVtbl,
    query_interface : Proc(ISpecifyParticularPages*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpecifyParticularPages*, UInt32),
    release : Proc(ISpecifyParticularPages*, UInt32),
    get_pages : Proc(ISpecifyParticularPages*, LibC::GUID*, Win32cr::System::Ole::CAUUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4c437b91-6e9e-11d1-a704-006097c4e476")]
  record ISpecifyParticularPages, lpVtbl : ISpecifyParticularPagesVtbl* do
    GUID = LibC::GUID.new(0x4c437b91_u32, 0x6e9e_u16, 0x11d1_u16, StaticArray[0xa7_u8, 0x4_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc4_u8, 0xe4_u8, 0x76_u8])
    def query_interface(this : ISpecifyParticularPages*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpecifyParticularPages*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpecifyParticularPages*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_pages(this : ISpecifyParticularPages*, guidWhatPages : LibC::GUID*, pPages : Win32cr::System::Ole::CAUUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pages.call(this, guidWhatPages, pPages)
    end

  end

  @[Extern]
  record IAMRebuildVtbl,
    query_interface : Proc(IAMRebuild*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAMRebuild*, UInt32),
    release : Proc(IAMRebuild*, UInt32),
    rebuild_now : Proc(IAMRebuild*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("02ef04dd-7580-11d1-bece-00c04fb6e937")]
  record IAMRebuild, lpVtbl : IAMRebuildVtbl* do
    GUID = LibC::GUID.new(0x2ef04dd_u32, 0x7580_u16, 0x11d1_u16, StaticArray[0xbe_u8, 0xce_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xb6_u8, 0xe9_u8, 0x37_u8])
    def query_interface(this : IAMRebuild*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAMRebuild*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAMRebuild*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def rebuild_now(this : IAMRebuild*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rebuild_now.call(this)
    end

  end

  @[Extern]
  record IBufferingTimeVtbl,
    query_interface : Proc(IBufferingTime*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBufferingTime*, UInt32),
    release : Proc(IBufferingTime*, UInt32),
    get_buffering_time : Proc(IBufferingTime*, UInt32*, Win32cr::Foundation::HRESULT),
    set_buffering_time : Proc(IBufferingTime*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1e00486a-78dd-11d2-8dd3-006097c9a2b2")]
  record IBufferingTime, lpVtbl : IBufferingTimeVtbl* do
    GUID = LibC::GUID.new(0x1e00486a_u32, 0x78dd_u16, 0x11d2_u16, StaticArray[0x8d_u8, 0xd3_u8, 0x0_u8, 0x60_u8, 0x97_u8, 0xc9_u8, 0xa2_u8, 0xb2_u8])
    def query_interface(this : IBufferingTime*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBufferingTime*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBufferingTime*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffering_time(this : IBufferingTime*, pdwMilliseconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffering_time.call(this, pdwMilliseconds)
    end
    def set_buffering_time(this : IBufferingTime*, dwMilliseconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buffering_time.call(this, dwMilliseconds)
    end

  end

  @[Extern]
  record ICreatePropBagOnRegKeyVtbl,
    query_interface : Proc(ICreatePropBagOnRegKey*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICreatePropBagOnRegKey*, UInt32),
    release : Proc(ICreatePropBagOnRegKey*, UInt32),
    create : Proc(ICreatePropBagOnRegKey*, Win32cr::System::Registry::HKEY, Win32cr::Foundation::PWSTR, UInt32, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8a674b48-1f63-11d3-b64c-00c04f79498e")]
  record ICreatePropBagOnRegKey, lpVtbl : ICreatePropBagOnRegKeyVtbl* do
    GUID = LibC::GUID.new(0x8a674b48_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : ICreatePropBagOnRegKey*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICreatePropBagOnRegKey*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICreatePropBagOnRegKey*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create(this : ICreatePropBagOnRegKey*, hkey : Win32cr::System::Registry::HKEY, subkey : Win32cr::Foundation::PWSTR, ulOptions : UInt32, samDesired : UInt32, iid : LibC::GUID*, ppBag : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create.call(this, hkey, subkey, ulOptions, samDesired, iid, ppBag)
    end

  end

  @[Extern]
  record ITuningSpacesVtbl,
    query_interface : Proc(ITuningSpaces*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITuningSpaces*, UInt32),
    release : Proc(ITuningSpaces*, UInt32),
    get_type_info_count : Proc(ITuningSpaces*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITuningSpaces*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITuningSpaces*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITuningSpaces*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ITuningSpaces*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ITuningSpaces*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(ITuningSpaces*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    get_EnumTuningSpaces : Proc(ITuningSpaces*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("901284e4-33fe-4b69-8d63-634a596f3756")]
  record ITuningSpaces, lpVtbl : ITuningSpacesVtbl* do
    GUID = LibC::GUID.new(0x901284e4_u32, 0x33fe_u16, 0x4b69_u16, StaticArray[0x8d_u8, 0x63_u8, 0x63_u8, 0x4a_u8, 0x59_u8, 0x6f_u8, 0x37_u8, 0x56_u8])
    def query_interface(this : ITuningSpaces*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITuningSpaces*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITuningSpaces*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITuningSpaces*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITuningSpaces*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITuningSpaces*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITuningSpaces*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : ITuningSpaces*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : ITuningSpaces*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end
    def get_Item(this : ITuningSpaces*, varIndex : Win32cr::System::Com::VARIANT, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, varIndex, tuning_space)
    end
    def get_EnumTuningSpaces(this : ITuningSpaces*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnumTuningSpaces.call(this, new_enum)
    end

  end

  @[Extern]
  record ITuningSpaceContainerVtbl,
    query_interface : Proc(ITuningSpaceContainer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITuningSpaceContainer*, UInt32),
    release : Proc(ITuningSpaceContainer*, UInt32),
    get_type_info_count : Proc(ITuningSpaceContainer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITuningSpaceContainer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITuningSpaceContainer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITuningSpaceContainer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(ITuningSpaceContainer*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(ITuningSpaceContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(ITuningSpaceContainer*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    put_Item : Proc(ITuningSpaceContainer*, Win32cr::System::Com::VARIANT, Void*, Win32cr::Foundation::HRESULT),
    tuning_spaces_for_clsid : Proc(ITuningSpaceContainer*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    _tuning_spaces_for_clsid2 : Proc(ITuningSpaceContainer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    tuning_spaces_for_name : Proc(ITuningSpaceContainer*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    find_id : Proc(ITuningSpaceContainer*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    add : Proc(ITuningSpaceContainer*, Void*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnumTuningSpaces : Proc(ITuningSpaceContainer*, Void**, Win32cr::Foundation::HRESULT),
    remove : Proc(ITuningSpaceContainer*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    get_MaxCount : Proc(ITuningSpaceContainer*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxCount : Proc(ITuningSpaceContainer*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5b692e84-e2f1-11d2-9493-00c04f72d980")]
  record ITuningSpaceContainer, lpVtbl : ITuningSpaceContainerVtbl* do
    GUID = LibC::GUID.new(0x5b692e84_u32, 0xe2f1_u16, 0x11d2_u16, StaticArray[0x94_u8, 0x93_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : ITuningSpaceContainer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITuningSpaceContainer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITuningSpaceContainer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITuningSpaceContainer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITuningSpaceContainer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITuningSpaceContainer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITuningSpaceContainer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : ITuningSpaceContainer*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : ITuningSpaceContainer*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end
    def get_Item(this : ITuningSpaceContainer*, varIndex : Win32cr::System::Com::VARIANT, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, varIndex, tuning_space)
    end
    def put_Item(this : ITuningSpaceContainer*, varIndex : Win32cr::System::Com::VARIANT, tuning_space : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Item.call(this, varIndex, tuning_space)
    end
    def tuning_spaces_for_clsid(this : ITuningSpaceContainer*, space_clsid : Win32cr::Foundation::BSTR, new_coll : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tuning_spaces_for_clsid.call(this, space_clsid, new_coll)
    end
    def _tuning_spaces_for_clsid2(this : ITuningSpaceContainer*, space_clsid : LibC::GUID*, new_coll : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value._tuning_spaces_for_clsid2.call(this, space_clsid, new_coll)
    end
    def tuning_spaces_for_name(this : ITuningSpaceContainer*, name : Win32cr::Foundation::BSTR, new_coll : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tuning_spaces_for_name.call(this, name, new_coll)
    end
    def find_id(this : ITuningSpaceContainer*, tuning_space : Void*, id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_id.call(this, tuning_space, id)
    end
    def add(this : ITuningSpaceContainer*, tuning_space : Void*, new_index : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, tuning_space, new_index)
    end
    def get_EnumTuningSpaces(this : ITuningSpaceContainer*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnumTuningSpaces.call(this, ppEnum)
    end
    def remove(this : ITuningSpaceContainer*, index : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def get_MaxCount(this : ITuningSpaceContainer*, max_count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxCount.call(this, max_count)
    end
    def put_MaxCount(this : ITuningSpaceContainer*, max_count : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxCount.call(this, max_count)
    end

  end

  @[Extern]
  record ITuningSpaceVtbl,
    query_interface : Proc(ITuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITuningSpace*, UInt32),
    release : Proc(ITuningSpace*, UInt32),
    get_type_info_count : Proc(ITuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(ITuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(ITuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(ITuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(ITuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(ITuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(ITuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(ITuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(ITuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(ITuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(ITuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(ITuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(ITuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(ITuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(ITuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(ITuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(ITuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(ITuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(ITuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(ITuningSpace*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("061c6e30-e622-11d2-9493-00c04f72d980")]
  record ITuningSpace, lpVtbl : ITuningSpaceVtbl* do
    GUID = LibC::GUID.new(0x61c6e30_u32, 0xe622_u16, 0x11d2_u16, StaticArray[0x94_u8, 0x93_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : ITuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : ITuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : ITuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : ITuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : ITuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : ITuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : ITuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : ITuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : ITuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : ITuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : ITuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : ITuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : ITuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : ITuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : ITuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : ITuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : ITuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : ITuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : ITuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : ITuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end

  end

  @[Extern]
  record IEnumTuningSpacesVtbl,
    query_interface : Proc(IEnumTuningSpaces*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumTuningSpaces*, UInt32),
    release : Proc(IEnumTuningSpaces*, UInt32),
    next__ : Proc(IEnumTuningSpaces*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumTuningSpaces*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumTuningSpaces*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumTuningSpaces*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8b8eb248-fc2b-11d2-9d8c-00c04f72d980")]
  record IEnumTuningSpaces, lpVtbl : IEnumTuningSpacesVtbl* do
    GUID = LibC::GUID.new(0x8b8eb248_u32, 0xfc2b_u16, 0x11d2_u16, StaticArray[0x9d_u8, 0x8c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : IEnumTuningSpaces*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumTuningSpaces*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumTuningSpaces*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumTuningSpaces*, celt : UInt32, rgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumTuningSpaces*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumTuningSpaces*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumTuningSpaces*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IDVBTuningSpaceVtbl,
    query_interface : Proc(IDVBTuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBTuningSpace*, UInt32),
    release : Proc(IDVBTuningSpace*, UInt32),
    get_type_info_count : Proc(IDVBTuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBTuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBTuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBTuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IDVBTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IDVBTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IDVBTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IDVBTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IDVBTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IDVBTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IDVBTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IDVBTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IDVBTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IDVBTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_SystemType : Proc(IDVBTuningSpace*, Win32cr::Media::DirectShow::DVBSystemType*, Win32cr::Foundation::HRESULT),
    put_SystemType : Proc(IDVBTuningSpace*, Win32cr::Media::DirectShow::DVBSystemType, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ada0b268-3b19-4e5b-acc4-49f852be13ba")]
  record IDVBTuningSpace, lpVtbl : IDVBTuningSpaceVtbl* do
    GUID = LibC::GUID.new(0xada0b268_u32, 0x3b19_u16, 0x4e5b_u16, StaticArray[0xac_u8, 0xc4_u8, 0x49_u8, 0xf8_u8, 0x52_u8, 0xbe_u8, 0x13_u8, 0xba_u8])
    def query_interface(this : IDVBTuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBTuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBTuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBTuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBTuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBTuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBTuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IDVBTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IDVBTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IDVBTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IDVBTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IDVBTuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IDVBTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IDVBTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IDVBTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IDVBTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IDVBTuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IDVBTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IDVBTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IDVBTuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IDVBTuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IDVBTuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IDVBTuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IDVBTuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IDVBTuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IDVBTuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_SystemType(this : IDVBTuningSpace*, sys_type : Win32cr::Media::DirectShow::DVBSystemType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SystemType.call(this, sys_type)
    end
    def put_SystemType(this : IDVBTuningSpace*, sys_type : Win32cr::Media::DirectShow::DVBSystemType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SystemType.call(this, sys_type)
    end

  end

  @[Extern]
  record IDVBTuningSpace2Vtbl,
    query_interface : Proc(IDVBTuningSpace2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBTuningSpace2*, UInt32),
    release : Proc(IDVBTuningSpace2*, UInt32),
    get_type_info_count : Proc(IDVBTuningSpace2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBTuningSpace2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBTuningSpace2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBTuningSpace2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IDVBTuningSpace2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IDVBTuningSpace2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IDVBTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IDVBTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IDVBTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IDVBTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IDVBTuningSpace2*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IDVBTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IDVBTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IDVBTuningSpace2*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    get_SystemType : Proc(IDVBTuningSpace2*, Win32cr::Media::DirectShow::DVBSystemType*, Win32cr::Foundation::HRESULT),
    put_SystemType : Proc(IDVBTuningSpace2*, Win32cr::Media::DirectShow::DVBSystemType, Win32cr::Foundation::HRESULT),
    get_NetworkID : Proc(IDVBTuningSpace2*, Int32*, Win32cr::Foundation::HRESULT),
    put_NetworkID : Proc(IDVBTuningSpace2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("843188b4-ce62-43db-966b-8145a094e040")]
  record IDVBTuningSpace2, lpVtbl : IDVBTuningSpace2Vtbl* do
    GUID = LibC::GUID.new(0x843188b4_u32, 0xce62_u16, 0x43db_u16, StaticArray[0x96_u8, 0x6b_u8, 0x81_u8, 0x45_u8, 0xa0_u8, 0x94_u8, 0xe0_u8, 0x40_u8])
    def query_interface(this : IDVBTuningSpace2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBTuningSpace2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBTuningSpace2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBTuningSpace2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBTuningSpace2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBTuningSpace2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBTuningSpace2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IDVBTuningSpace2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IDVBTuningSpace2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IDVBTuningSpace2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IDVBTuningSpace2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IDVBTuningSpace2*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IDVBTuningSpace2*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IDVBTuningSpace2*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IDVBTuningSpace2*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IDVBTuningSpace2*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IDVBTuningSpace2*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IDVBTuningSpace2*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IDVBTuningSpace2*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IDVBTuningSpace2*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IDVBTuningSpace2*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IDVBTuningSpace2*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IDVBTuningSpace2*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IDVBTuningSpace2*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IDVBTuningSpace2*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IDVBTuningSpace2*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_SystemType(this : IDVBTuningSpace2*, sys_type : Win32cr::Media::DirectShow::DVBSystemType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SystemType.call(this, sys_type)
    end
    def put_SystemType(this : IDVBTuningSpace2*, sys_type : Win32cr::Media::DirectShow::DVBSystemType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SystemType.call(this, sys_type)
    end
    def get_NetworkID(this : IDVBTuningSpace2*, network_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkID.call(this, network_id)
    end
    def put_NetworkID(this : IDVBTuningSpace2*, network_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkID.call(this, network_id)
    end

  end

  @[Extern]
  record IDVBSTuningSpaceVtbl,
    query_interface : Proc(IDVBSTuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBSTuningSpace*, UInt32),
    release : Proc(IDVBSTuningSpace*, UInt32),
    get_type_info_count : Proc(IDVBSTuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBSTuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBSTuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBSTuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IDVBSTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IDVBSTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IDVBSTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IDVBSTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IDVBSTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IDVBSTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IDVBSTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IDVBSTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IDVBSTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBSTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_SystemType : Proc(IDVBSTuningSpace*, Win32cr::Media::DirectShow::DVBSystemType*, Win32cr::Foundation::HRESULT),
    put_SystemType : Proc(IDVBSTuningSpace*, Win32cr::Media::DirectShow::DVBSystemType, Win32cr::Foundation::HRESULT),
    get_NetworkID : Proc(IDVBSTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_NetworkID : Proc(IDVBSTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_LowOscillator : Proc(IDVBSTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_LowOscillator : Proc(IDVBSTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_HighOscillator : Proc(IDVBSTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_HighOscillator : Proc(IDVBSTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_LNBSwitch : Proc(IDVBSTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_LNBSwitch : Proc(IDVBSTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_InputRange : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_InputRange : Proc(IDVBSTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SpectralInversion : Proc(IDVBSTuningSpace*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT),
    put_SpectralInversion : Proc(IDVBSTuningSpace*, Win32cr::Media::DirectShow::SpectralInversion, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cdf7be60-d954-42fd-a972-78971958e470")]
  record IDVBSTuningSpace, lpVtbl : IDVBSTuningSpaceVtbl* do
    GUID = LibC::GUID.new(0xcdf7be60_u32, 0xd954_u16, 0x42fd_u16, StaticArray[0xa9_u8, 0x72_u8, 0x78_u8, 0x97_u8, 0x19_u8, 0x58_u8, 0xe4_u8, 0x70_u8])
    def query_interface(this : IDVBSTuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBSTuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBSTuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBSTuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBSTuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBSTuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBSTuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IDVBSTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IDVBSTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IDVBSTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IDVBSTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IDVBSTuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IDVBSTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IDVBSTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IDVBSTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IDVBSTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IDVBSTuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IDVBSTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IDVBSTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IDVBSTuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IDVBSTuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IDVBSTuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IDVBSTuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IDVBSTuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IDVBSTuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IDVBSTuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_SystemType(this : IDVBSTuningSpace*, sys_type : Win32cr::Media::DirectShow::DVBSystemType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SystemType.call(this, sys_type)
    end
    def put_SystemType(this : IDVBSTuningSpace*, sys_type : Win32cr::Media::DirectShow::DVBSystemType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SystemType.call(this, sys_type)
    end
    def get_NetworkID(this : IDVBSTuningSpace*, network_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkID.call(this, network_id)
    end
    def put_NetworkID(this : IDVBSTuningSpace*, network_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkID.call(this, network_id)
    end
    def get_LowOscillator(this : IDVBSTuningSpace*, low_oscillator : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LowOscillator.call(this, low_oscillator)
    end
    def put_LowOscillator(this : IDVBSTuningSpace*, low_oscillator : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LowOscillator.call(this, low_oscillator)
    end
    def get_HighOscillator(this : IDVBSTuningSpace*, high_oscillator : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HighOscillator.call(this, high_oscillator)
    end
    def put_HighOscillator(this : IDVBSTuningSpace*, high_oscillator : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HighOscillator.call(this, high_oscillator)
    end
    def get_LNBSwitch(this : IDVBSTuningSpace*, lnb_switch : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LNBSwitch.call(this, lnb_switch)
    end
    def put_LNBSwitch(this : IDVBSTuningSpace*, lnb_switch : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LNBSwitch.call(this, lnb_switch)
    end
    def get_InputRange(this : IDVBSTuningSpace*, input_range : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InputRange.call(this, input_range)
    end
    def put_InputRange(this : IDVBSTuningSpace*, input_range : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InputRange.call(this, input_range)
    end
    def get_SpectralInversion(this : IDVBSTuningSpace*, spectral_inversion_val : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SpectralInversion.call(this, spectral_inversion_val)
    end
    def put_SpectralInversion(this : IDVBSTuningSpace*, spectral_inversion_val : Win32cr::Media::DirectShow::SpectralInversion) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SpectralInversion.call(this, spectral_inversion_val)
    end

  end

  @[Extern]
  record IAuxInTuningSpaceVtbl,
    query_interface : Proc(IAuxInTuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAuxInTuningSpace*, UInt32),
    release : Proc(IAuxInTuningSpace*, UInt32),
    get_type_info_count : Proc(IAuxInTuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAuxInTuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAuxInTuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAuxInTuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IAuxInTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IAuxInTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IAuxInTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IAuxInTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IAuxInTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IAuxInTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IAuxInTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IAuxInTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IAuxInTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IAuxInTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IAuxInTuningSpace*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e48244b8-7e17-4f76-a763-5090ff1e2f30")]
  record IAuxInTuningSpace, lpVtbl : IAuxInTuningSpaceVtbl* do
    GUID = LibC::GUID.new(0xe48244b8_u32, 0x7e17_u16, 0x4f76_u16, StaticArray[0xa7_u8, 0x63_u8, 0x50_u8, 0x90_u8, 0xff_u8, 0x1e_u8, 0x2f_u8, 0x30_u8])
    def query_interface(this : IAuxInTuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAuxInTuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAuxInTuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAuxInTuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAuxInTuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAuxInTuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAuxInTuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IAuxInTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IAuxInTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IAuxInTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IAuxInTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IAuxInTuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IAuxInTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IAuxInTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IAuxInTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IAuxInTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IAuxInTuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IAuxInTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IAuxInTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IAuxInTuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IAuxInTuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IAuxInTuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IAuxInTuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IAuxInTuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IAuxInTuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IAuxInTuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end

  end

  @[Extern]
  record IAuxInTuningSpace2Vtbl,
    query_interface : Proc(IAuxInTuningSpace2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAuxInTuningSpace2*, UInt32),
    release : Proc(IAuxInTuningSpace2*, UInt32),
    get_type_info_count : Proc(IAuxInTuningSpace2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAuxInTuningSpace2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAuxInTuningSpace2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAuxInTuningSpace2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IAuxInTuningSpace2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IAuxInTuningSpace2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IAuxInTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IAuxInTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IAuxInTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IAuxInTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IAuxInTuningSpace2*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IAuxInTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IAuxInTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IAuxInTuningSpace2*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IAuxInTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IAuxInTuningSpace2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IAuxInTuningSpace2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b10931ed-8bfe-4ab0-9dce-e469c29a9729")]
  record IAuxInTuningSpace2, lpVtbl : IAuxInTuningSpace2Vtbl* do
    GUID = LibC::GUID.new(0xb10931ed_u32, 0x8bfe_u16, 0x4ab0_u16, StaticArray[0x9d_u8, 0xce_u8, 0xe4_u8, 0x69_u8, 0xc2_u8, 0x9a_u8, 0x97_u8, 0x29_u8])
    def query_interface(this : IAuxInTuningSpace2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAuxInTuningSpace2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAuxInTuningSpace2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAuxInTuningSpace2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAuxInTuningSpace2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAuxInTuningSpace2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAuxInTuningSpace2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IAuxInTuningSpace2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IAuxInTuningSpace2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IAuxInTuningSpace2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IAuxInTuningSpace2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IAuxInTuningSpace2*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IAuxInTuningSpace2*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IAuxInTuningSpace2*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IAuxInTuningSpace2*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IAuxInTuningSpace2*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IAuxInTuningSpace2*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IAuxInTuningSpace2*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IAuxInTuningSpace2*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IAuxInTuningSpace2*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IAuxInTuningSpace2*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IAuxInTuningSpace2*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IAuxInTuningSpace2*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IAuxInTuningSpace2*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IAuxInTuningSpace2*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IAuxInTuningSpace2*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_CountryCode(this : IAuxInTuningSpace2*, country_code_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, country_code_val)
    end
    def put_CountryCode(this : IAuxInTuningSpace2*, new_country_code_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, new_country_code_val)
    end

  end

  @[Extern]
  record IAnalogTVTuningSpaceVtbl,
    query_interface : Proc(IAnalogTVTuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAnalogTVTuningSpace*, UInt32),
    release : Proc(IAnalogTVTuningSpace*, UInt32),
    get_type_info_count : Proc(IAnalogTVTuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAnalogTVTuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAnalogTVTuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAnalogTVTuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IAnalogTVTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IAnalogTVTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IAnalogTVTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IAnalogTVTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IAnalogTVTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IAnalogTVTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IAnalogTVTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IAnalogTVTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IAnalogTVTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IAnalogTVTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IAnalogTVTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_MinChannel : Proc(IAnalogTVTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinChannel : Proc(IAnalogTVTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxChannel : Proc(IAnalogTVTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxChannel : Proc(IAnalogTVTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_InputType : Proc(IAnalogTVTuningSpace*, Win32cr::Media::DirectShow::TunerInputType*, Win32cr::Foundation::HRESULT),
    put_InputType : Proc(IAnalogTVTuningSpace*, Win32cr::Media::DirectShow::TunerInputType, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IAnalogTVTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IAnalogTVTuningSpace*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2a6e293c-2595-11d3-b64c-00c04f79498e")]
  record IAnalogTVTuningSpace, lpVtbl : IAnalogTVTuningSpaceVtbl* do
    GUID = LibC::GUID.new(0x2a6e293c_u32, 0x2595_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IAnalogTVTuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAnalogTVTuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAnalogTVTuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAnalogTVTuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAnalogTVTuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAnalogTVTuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAnalogTVTuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IAnalogTVTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IAnalogTVTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IAnalogTVTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IAnalogTVTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IAnalogTVTuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IAnalogTVTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IAnalogTVTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IAnalogTVTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IAnalogTVTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IAnalogTVTuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IAnalogTVTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IAnalogTVTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IAnalogTVTuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IAnalogTVTuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IAnalogTVTuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IAnalogTVTuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IAnalogTVTuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IAnalogTVTuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IAnalogTVTuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_MinChannel(this : IAnalogTVTuningSpace*, min_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinChannel.call(this, min_channel_val)
    end
    def put_MinChannel(this : IAnalogTVTuningSpace*, new_min_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinChannel.call(this, new_min_channel_val)
    end
    def get_MaxChannel(this : IAnalogTVTuningSpace*, max_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxChannel.call(this, max_channel_val)
    end
    def put_MaxChannel(this : IAnalogTVTuningSpace*, new_max_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxChannel.call(this, new_max_channel_val)
    end
    def get_InputType(this : IAnalogTVTuningSpace*, input_type_val : Win32cr::Media::DirectShow::TunerInputType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InputType.call(this, input_type_val)
    end
    def put_InputType(this : IAnalogTVTuningSpace*, new_input_type_val : Win32cr::Media::DirectShow::TunerInputType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InputType.call(this, new_input_type_val)
    end
    def get_CountryCode(this : IAnalogTVTuningSpace*, country_code_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, country_code_val)
    end
    def put_CountryCode(this : IAnalogTVTuningSpace*, new_country_code_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, new_country_code_val)
    end

  end

  @[Extern]
  record IATSCTuningSpaceVtbl,
    query_interface : Proc(IATSCTuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSCTuningSpace*, UInt32),
    release : Proc(IATSCTuningSpace*, UInt32),
    get_type_info_count : Proc(IATSCTuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IATSCTuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IATSCTuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IATSCTuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IATSCTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IATSCTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IATSCTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IATSCTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IATSCTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IATSCTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IATSCTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IATSCTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IATSCTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IATSCTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IATSCTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_MinChannel : Proc(IATSCTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinChannel : Proc(IATSCTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxChannel : Proc(IATSCTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxChannel : Proc(IATSCTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_InputType : Proc(IATSCTuningSpace*, Win32cr::Media::DirectShow::TunerInputType*, Win32cr::Foundation::HRESULT),
    put_InputType : Proc(IATSCTuningSpace*, Win32cr::Media::DirectShow::TunerInputType, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IATSCTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IATSCTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MinMinorChannel : Proc(IATSCTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinMinorChannel : Proc(IATSCTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxMinorChannel : Proc(IATSCTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxMinorChannel : Proc(IATSCTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MinPhysicalChannel : Proc(IATSCTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinPhysicalChannel : Proc(IATSCTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxPhysicalChannel : Proc(IATSCTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxPhysicalChannel : Proc(IATSCTuningSpace*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0369b4e2-45b6-11d3-b650-00c04f79498e")]
  record IATSCTuningSpace, lpVtbl : IATSCTuningSpaceVtbl* do
    GUID = LibC::GUID.new(0x369b4e2_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IATSCTuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSCTuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSCTuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IATSCTuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IATSCTuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IATSCTuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IATSCTuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IATSCTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IATSCTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IATSCTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IATSCTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IATSCTuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IATSCTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IATSCTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IATSCTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IATSCTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IATSCTuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IATSCTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IATSCTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IATSCTuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IATSCTuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IATSCTuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IATSCTuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IATSCTuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IATSCTuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IATSCTuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_MinChannel(this : IATSCTuningSpace*, min_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinChannel.call(this, min_channel_val)
    end
    def put_MinChannel(this : IATSCTuningSpace*, new_min_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinChannel.call(this, new_min_channel_val)
    end
    def get_MaxChannel(this : IATSCTuningSpace*, max_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxChannel.call(this, max_channel_val)
    end
    def put_MaxChannel(this : IATSCTuningSpace*, new_max_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxChannel.call(this, new_max_channel_val)
    end
    def get_InputType(this : IATSCTuningSpace*, input_type_val : Win32cr::Media::DirectShow::TunerInputType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InputType.call(this, input_type_val)
    end
    def put_InputType(this : IATSCTuningSpace*, new_input_type_val : Win32cr::Media::DirectShow::TunerInputType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InputType.call(this, new_input_type_val)
    end
    def get_CountryCode(this : IATSCTuningSpace*, country_code_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, country_code_val)
    end
    def put_CountryCode(this : IATSCTuningSpace*, new_country_code_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, new_country_code_val)
    end
    def get_MinMinorChannel(this : IATSCTuningSpace*, min_minor_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinMinorChannel.call(this, min_minor_channel_val)
    end
    def put_MinMinorChannel(this : IATSCTuningSpace*, new_min_minor_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinMinorChannel.call(this, new_min_minor_channel_val)
    end
    def get_MaxMinorChannel(this : IATSCTuningSpace*, max_minor_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxMinorChannel.call(this, max_minor_channel_val)
    end
    def put_MaxMinorChannel(this : IATSCTuningSpace*, new_max_minor_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxMinorChannel.call(this, new_max_minor_channel_val)
    end
    def get_MinPhysicalChannel(this : IATSCTuningSpace*, min_physical_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinPhysicalChannel.call(this, min_physical_channel_val)
    end
    def put_MinPhysicalChannel(this : IATSCTuningSpace*, new_min_physical_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinPhysicalChannel.call(this, new_min_physical_channel_val)
    end
    def get_MaxPhysicalChannel(this : IATSCTuningSpace*, max_physical_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxPhysicalChannel.call(this, max_physical_channel_val)
    end
    def put_MaxPhysicalChannel(this : IATSCTuningSpace*, new_max_physical_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxPhysicalChannel.call(this, new_max_physical_channel_val)
    end

  end

  @[Extern]
  record IDigitalCableTuningSpaceVtbl,
    query_interface : Proc(IDigitalCableTuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDigitalCableTuningSpace*, UInt32),
    release : Proc(IDigitalCableTuningSpace*, UInt32),
    get_type_info_count : Proc(IDigitalCableTuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDigitalCableTuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDigitalCableTuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDigitalCableTuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IDigitalCableTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IDigitalCableTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IDigitalCableTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IDigitalCableTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IDigitalCableTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IDigitalCableTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IDigitalCableTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IDigitalCableTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IDigitalCableTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IDigitalCableTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IDigitalCableTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_MinChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_InputType : Proc(IDigitalCableTuningSpace*, Win32cr::Media::DirectShow::TunerInputType*, Win32cr::Foundation::HRESULT),
    put_InputType : Proc(IDigitalCableTuningSpace*, Win32cr::Media::DirectShow::TunerInputType, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MinMinorChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinMinorChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxMinorChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxMinorChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MinPhysicalChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinPhysicalChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxPhysicalChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxPhysicalChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MinMajorChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinMajorChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxMajorChannel : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxMajorChannel : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MinSourceID : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinSourceID : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxSourceID : Proc(IDigitalCableTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxSourceID : Proc(IDigitalCableTuningSpace*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("013f9f9c-b449-4ec7-a6d2-9d4f2fc70ae5")]
  record IDigitalCableTuningSpace, lpVtbl : IDigitalCableTuningSpaceVtbl* do
    GUID = LibC::GUID.new(0x13f9f9c_u32, 0xb449_u16, 0x4ec7_u16, StaticArray[0xa6_u8, 0xd2_u8, 0x9d_u8, 0x4f_u8, 0x2f_u8, 0xc7_u8, 0xa_u8, 0xe5_u8])
    def query_interface(this : IDigitalCableTuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDigitalCableTuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDigitalCableTuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDigitalCableTuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDigitalCableTuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDigitalCableTuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDigitalCableTuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IDigitalCableTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IDigitalCableTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IDigitalCableTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IDigitalCableTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IDigitalCableTuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IDigitalCableTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IDigitalCableTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IDigitalCableTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IDigitalCableTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IDigitalCableTuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IDigitalCableTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IDigitalCableTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IDigitalCableTuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IDigitalCableTuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IDigitalCableTuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IDigitalCableTuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IDigitalCableTuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IDigitalCableTuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IDigitalCableTuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_MinChannel(this : IDigitalCableTuningSpace*, min_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinChannel.call(this, min_channel_val)
    end
    def put_MinChannel(this : IDigitalCableTuningSpace*, new_min_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinChannel.call(this, new_min_channel_val)
    end
    def get_MaxChannel(this : IDigitalCableTuningSpace*, max_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxChannel.call(this, max_channel_val)
    end
    def put_MaxChannel(this : IDigitalCableTuningSpace*, new_max_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxChannel.call(this, new_max_channel_val)
    end
    def get_InputType(this : IDigitalCableTuningSpace*, input_type_val : Win32cr::Media::DirectShow::TunerInputType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InputType.call(this, input_type_val)
    end
    def put_InputType(this : IDigitalCableTuningSpace*, new_input_type_val : Win32cr::Media::DirectShow::TunerInputType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InputType.call(this, new_input_type_val)
    end
    def get_CountryCode(this : IDigitalCableTuningSpace*, country_code_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, country_code_val)
    end
    def put_CountryCode(this : IDigitalCableTuningSpace*, new_country_code_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, new_country_code_val)
    end
    def get_MinMinorChannel(this : IDigitalCableTuningSpace*, min_minor_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinMinorChannel.call(this, min_minor_channel_val)
    end
    def put_MinMinorChannel(this : IDigitalCableTuningSpace*, new_min_minor_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinMinorChannel.call(this, new_min_minor_channel_val)
    end
    def get_MaxMinorChannel(this : IDigitalCableTuningSpace*, max_minor_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxMinorChannel.call(this, max_minor_channel_val)
    end
    def put_MaxMinorChannel(this : IDigitalCableTuningSpace*, new_max_minor_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxMinorChannel.call(this, new_max_minor_channel_val)
    end
    def get_MinPhysicalChannel(this : IDigitalCableTuningSpace*, min_physical_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinPhysicalChannel.call(this, min_physical_channel_val)
    end
    def put_MinPhysicalChannel(this : IDigitalCableTuningSpace*, new_min_physical_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinPhysicalChannel.call(this, new_min_physical_channel_val)
    end
    def get_MaxPhysicalChannel(this : IDigitalCableTuningSpace*, max_physical_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxPhysicalChannel.call(this, max_physical_channel_val)
    end
    def put_MaxPhysicalChannel(this : IDigitalCableTuningSpace*, new_max_physical_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxPhysicalChannel.call(this, new_max_physical_channel_val)
    end
    def get_MinMajorChannel(this : IDigitalCableTuningSpace*, min_major_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinMajorChannel.call(this, min_major_channel_val)
    end
    def put_MinMajorChannel(this : IDigitalCableTuningSpace*, new_min_major_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinMajorChannel.call(this, new_min_major_channel_val)
    end
    def get_MaxMajorChannel(this : IDigitalCableTuningSpace*, max_major_channel_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxMajorChannel.call(this, max_major_channel_val)
    end
    def put_MaxMajorChannel(this : IDigitalCableTuningSpace*, new_max_major_channel_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxMajorChannel.call(this, new_max_major_channel_val)
    end
    def get_MinSourceID(this : IDigitalCableTuningSpace*, min_source_id_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinSourceID.call(this, min_source_id_val)
    end
    def put_MinSourceID(this : IDigitalCableTuningSpace*, new_min_source_id_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinSourceID.call(this, new_min_source_id_val)
    end
    def get_MaxSourceID(this : IDigitalCableTuningSpace*, max_source_id_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxSourceID.call(this, max_source_id_val)
    end
    def put_MaxSourceID(this : IDigitalCableTuningSpace*, new_max_source_id_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxSourceID.call(this, new_max_source_id_val)
    end

  end

  @[Extern]
  record IAnalogRadioTuningSpaceVtbl,
    query_interface : Proc(IAnalogRadioTuningSpace*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAnalogRadioTuningSpace*, UInt32),
    release : Proc(IAnalogRadioTuningSpace*, UInt32),
    get_type_info_count : Proc(IAnalogRadioTuningSpace*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAnalogRadioTuningSpace*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAnalogRadioTuningSpace*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAnalogRadioTuningSpace*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IAnalogRadioTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IAnalogRadioTuningSpace*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IAnalogRadioTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IAnalogRadioTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IAnalogRadioTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IAnalogRadioTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IAnalogRadioTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IAnalogRadioTuningSpace*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IAnalogRadioTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IAnalogRadioTuningSpace*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IAnalogRadioTuningSpace*, Void**, Win32cr::Foundation::HRESULT),
    get_MinFrequency : Proc(IAnalogRadioTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinFrequency : Proc(IAnalogRadioTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxFrequency : Proc(IAnalogRadioTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxFrequency : Proc(IAnalogRadioTuningSpace*, Int32, Win32cr::Foundation::HRESULT),
    get_Step : Proc(IAnalogRadioTuningSpace*, Int32*, Win32cr::Foundation::HRESULT),
    put_Step : Proc(IAnalogRadioTuningSpace*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2a6e293b-2595-11d3-b64c-00c04f79498e")]
  record IAnalogRadioTuningSpace, lpVtbl : IAnalogRadioTuningSpaceVtbl* do
    GUID = LibC::GUID.new(0x2a6e293b_u32, 0x2595_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IAnalogRadioTuningSpace*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAnalogRadioTuningSpace*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAnalogRadioTuningSpace*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAnalogRadioTuningSpace*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAnalogRadioTuningSpace*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAnalogRadioTuningSpace*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAnalogRadioTuningSpace*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IAnalogRadioTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IAnalogRadioTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IAnalogRadioTuningSpace*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IAnalogRadioTuningSpace*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IAnalogRadioTuningSpace*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IAnalogRadioTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IAnalogRadioTuningSpace*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IAnalogRadioTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IAnalogRadioTuningSpace*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IAnalogRadioTuningSpace*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IAnalogRadioTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IAnalogRadioTuningSpace*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IAnalogRadioTuningSpace*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IAnalogRadioTuningSpace*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IAnalogRadioTuningSpace*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IAnalogRadioTuningSpace*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IAnalogRadioTuningSpace*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IAnalogRadioTuningSpace*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IAnalogRadioTuningSpace*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_MinFrequency(this : IAnalogRadioTuningSpace*, min_frequency_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinFrequency.call(this, min_frequency_val)
    end
    def put_MinFrequency(this : IAnalogRadioTuningSpace*, new_min_frequency_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinFrequency.call(this, new_min_frequency_val)
    end
    def get_MaxFrequency(this : IAnalogRadioTuningSpace*, max_frequency_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxFrequency.call(this, max_frequency_val)
    end
    def put_MaxFrequency(this : IAnalogRadioTuningSpace*, new_max_frequency_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxFrequency.call(this, new_max_frequency_val)
    end
    def get_Step(this : IAnalogRadioTuningSpace*, step_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Step.call(this, step_val)
    end
    def put_Step(this : IAnalogRadioTuningSpace*, new_step_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Step.call(this, new_step_val)
    end

  end

  @[Extern]
  record IAnalogRadioTuningSpace2Vtbl,
    query_interface : Proc(IAnalogRadioTuningSpace2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAnalogRadioTuningSpace2*, UInt32),
    release : Proc(IAnalogRadioTuningSpace2*, UInt32),
    get_type_info_count : Proc(IAnalogRadioTuningSpace2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAnalogRadioTuningSpace2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAnalogRadioTuningSpace2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAnalogRadioTuningSpace2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_UniqueName : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_UniqueName : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_FriendlyName : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FriendlyName : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_CLSID : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_NetworkType : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_NetworkType : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__NetworkType : Proc(IAnalogRadioTuningSpace2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__NetworkType : Proc(IAnalogRadioTuningSpace2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IAnalogRadioTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    enum_category_gui_ds : Proc(IAnalogRadioTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    enum_device_monikers : Proc(IAnalogRadioTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    get_DefaultPreferredComponentTypes : Proc(IAnalogRadioTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultPreferredComponentTypes : Proc(IAnalogRadioTuningSpace2*, Void*, Win32cr::Foundation::HRESULT),
    get_FrequencyMapping : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FrequencyMapping : Proc(IAnalogRadioTuningSpace2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DefaultLocator : Proc(IAnalogRadioTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    put_DefaultLocator : Proc(IAnalogRadioTuningSpace2*, Void*, Win32cr::Foundation::HRESULT),
    clone : Proc(IAnalogRadioTuningSpace2*, Void**, Win32cr::Foundation::HRESULT),
    get_MinFrequency : Proc(IAnalogRadioTuningSpace2*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinFrequency : Proc(IAnalogRadioTuningSpace2*, Int32, Win32cr::Foundation::HRESULT),
    get_MaxFrequency : Proc(IAnalogRadioTuningSpace2*, Int32*, Win32cr::Foundation::HRESULT),
    put_MaxFrequency : Proc(IAnalogRadioTuningSpace2*, Int32, Win32cr::Foundation::HRESULT),
    get_Step : Proc(IAnalogRadioTuningSpace2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Step : Proc(IAnalogRadioTuningSpace2*, Int32, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IAnalogRadioTuningSpace2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IAnalogRadioTuningSpace2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("39dd45da-2da8-46ba-8a8a-87e2b73d983a")]
  record IAnalogRadioTuningSpace2, lpVtbl : IAnalogRadioTuningSpace2Vtbl* do
    GUID = LibC::GUID.new(0x39dd45da_u32, 0x2da8_u16, 0x46ba_u16, StaticArray[0x8a_u8, 0x8a_u8, 0x87_u8, 0xe2_u8, 0xb7_u8, 0x3d_u8, 0x98_u8, 0x3a_u8])
    def query_interface(this : IAnalogRadioTuningSpace2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAnalogRadioTuningSpace2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAnalogRadioTuningSpace2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAnalogRadioTuningSpace2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAnalogRadioTuningSpace2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAnalogRadioTuningSpace2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAnalogRadioTuningSpace2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_UniqueName(this : IAnalogRadioTuningSpace2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UniqueName.call(this, name)
    end
    def put_UniqueName(this : IAnalogRadioTuningSpace2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UniqueName.call(this, name)
    end
    def get_FriendlyName(this : IAnalogRadioTuningSpace2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FriendlyName.call(this, name)
    end
    def put_FriendlyName(this : IAnalogRadioTuningSpace2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FriendlyName.call(this, name)
    end
    def get_CLSID(this : IAnalogRadioTuningSpace2*, space_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CLSID.call(this, space_clsid)
    end
    def get_NetworkType(this : IAnalogRadioTuningSpace2*, network_type_guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NetworkType.call(this, network_type_guid)
    end
    def put_NetworkType(this : IAnalogRadioTuningSpace2*, network_type_guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_NetworkType.call(this, network_type_guid)
    end
    def get__NetworkType(this : IAnalogRadioTuningSpace2*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NetworkType.call(this, network_type_guid)
    end
    def put__NetworkType(this : IAnalogRadioTuningSpace2*, network_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__NetworkType.call(this, network_type_guid)
    end
    def create_tune_request(this : IAnalogRadioTuningSpace2*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tune_request)
    end
    def enum_category_gui_ds(this : IAnalogRadioTuningSpace2*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_category_gui_ds.call(this, ppEnum)
    end
    def enum_device_monikers(this : IAnalogRadioTuningSpace2*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_device_monikers.call(this, ppEnum)
    end
    def get_DefaultPreferredComponentTypes(this : IAnalogRadioTuningSpace2*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultPreferredComponentTypes.call(this, component_types)
    end
    def put_DefaultPreferredComponentTypes(this : IAnalogRadioTuningSpace2*, new_component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultPreferredComponentTypes.call(this, new_component_types)
    end
    def get_FrequencyMapping(this : IAnalogRadioTuningSpace2*, pMapping : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FrequencyMapping.call(this, pMapping)
    end
    def put_FrequencyMapping(this : IAnalogRadioTuningSpace2*, mapping : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FrequencyMapping.call(this, mapping)
    end
    def get_DefaultLocator(this : IAnalogRadioTuningSpace2*, locator_val : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultLocator.call(this, locator_val)
    end
    def put_DefaultLocator(this : IAnalogRadioTuningSpace2*, locator_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultLocator.call(this, locator_val)
    end
    def clone(this : IAnalogRadioTuningSpace2*, new_ts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ts)
    end
    def get_MinFrequency(this : IAnalogRadioTuningSpace2*, min_frequency_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinFrequency.call(this, min_frequency_val)
    end
    def put_MinFrequency(this : IAnalogRadioTuningSpace2*, new_min_frequency_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinFrequency.call(this, new_min_frequency_val)
    end
    def get_MaxFrequency(this : IAnalogRadioTuningSpace2*, max_frequency_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxFrequency.call(this, max_frequency_val)
    end
    def put_MaxFrequency(this : IAnalogRadioTuningSpace2*, new_max_frequency_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaxFrequency.call(this, new_max_frequency_val)
    end
    def get_Step(this : IAnalogRadioTuningSpace2*, step_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Step.call(this, step_val)
    end
    def put_Step(this : IAnalogRadioTuningSpace2*, new_step_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Step.call(this, new_step_val)
    end
    def get_CountryCode(this : IAnalogRadioTuningSpace2*, country_code_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, country_code_val)
    end
    def put_CountryCode(this : IAnalogRadioTuningSpace2*, new_country_code_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, new_country_code_val)
    end

  end

  @[Extern]
  record ITuneRequestVtbl,
    query_interface : Proc(ITuneRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITuneRequest*, UInt32),
    release : Proc(ITuneRequest*, UInt32),
    get_type_info_count : Proc(ITuneRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ITuneRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ITuneRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ITuneRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(ITuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Components : Proc(ITuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(ITuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Locator : Proc(ITuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_Locator : Proc(ITuneRequest*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("07ddc146-fc3d-11d2-9d8c-00c04f72d980")]
  record ITuneRequest, lpVtbl : ITuneRequestVtbl* do
    GUID = LibC::GUID.new(0x7ddc146_u32, 0xfc3d_u16, 0x11d2_u16, StaticArray[0x9d_u8, 0x8c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : ITuneRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITuneRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITuneRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ITuneRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ITuneRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ITuneRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ITuneRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TuningSpace(this : ITuneRequest*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def get_Components(this : ITuneRequest*, components : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Components.call(this, components)
    end
    def clone(this : ITuneRequest*, new_tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_tune_request)
    end
    def get_Locator(this : ITuneRequest*, locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locator.call(this, locator)
    end
    def put_Locator(this : ITuneRequest*, locator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Locator.call(this, locator)
    end

  end

  @[Extern]
  record IChannelIDTuneRequestVtbl,
    query_interface : Proc(IChannelIDTuneRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IChannelIDTuneRequest*, UInt32),
    release : Proc(IChannelIDTuneRequest*, UInt32),
    get_type_info_count : Proc(IChannelIDTuneRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IChannelIDTuneRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IChannelIDTuneRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IChannelIDTuneRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IChannelIDTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Components : Proc(IChannelIDTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(IChannelIDTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Locator : Proc(IChannelIDTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_Locator : Proc(IChannelIDTuneRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_ChannelID : Proc(IChannelIDTuneRequest*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ChannelID : Proc(IChannelIDTuneRequest*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("156eff60-86f4-4e28-89fc-109799fd57ee")]
  record IChannelIDTuneRequest, lpVtbl : IChannelIDTuneRequestVtbl* do
    GUID = LibC::GUID.new(0x156eff60_u32, 0x86f4_u16, 0x4e28_u16, StaticArray[0x89_u8, 0xfc_u8, 0x10_u8, 0x97_u8, 0x99_u8, 0xfd_u8, 0x57_u8, 0xee_u8])
    def query_interface(this : IChannelIDTuneRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IChannelIDTuneRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IChannelIDTuneRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IChannelIDTuneRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IChannelIDTuneRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IChannelIDTuneRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IChannelIDTuneRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TuningSpace(this : IChannelIDTuneRequest*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def get_Components(this : IChannelIDTuneRequest*, components : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Components.call(this, components)
    end
    def clone(this : IChannelIDTuneRequest*, new_tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_tune_request)
    end
    def get_Locator(this : IChannelIDTuneRequest*, locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locator.call(this, locator)
    end
    def put_Locator(this : IChannelIDTuneRequest*, locator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Locator.call(this, locator)
    end
    def get_ChannelID(this : IChannelIDTuneRequest*, channel_id : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChannelID.call(this, channel_id)
    end
    def put_ChannelID(this : IChannelIDTuneRequest*, channel_id : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ChannelID.call(this, channel_id)
    end

  end

  @[Extern]
  record IChannelTuneRequestVtbl,
    query_interface : Proc(IChannelTuneRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IChannelTuneRequest*, UInt32),
    release : Proc(IChannelTuneRequest*, UInt32),
    get_type_info_count : Proc(IChannelTuneRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IChannelTuneRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IChannelTuneRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IChannelTuneRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Components : Proc(IChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(IChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Locator : Proc(IChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_Locator : Proc(IChannelTuneRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IChannelTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_Channel : Proc(IChannelTuneRequest*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0369b4e0-45b6-11d3-b650-00c04f79498e")]
  record IChannelTuneRequest, lpVtbl : IChannelTuneRequestVtbl* do
    GUID = LibC::GUID.new(0x369b4e0_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IChannelTuneRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IChannelTuneRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IChannelTuneRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IChannelTuneRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IChannelTuneRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IChannelTuneRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IChannelTuneRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TuningSpace(this : IChannelTuneRequest*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def get_Components(this : IChannelTuneRequest*, components : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Components.call(this, components)
    end
    def clone(this : IChannelTuneRequest*, new_tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_tune_request)
    end
    def get_Locator(this : IChannelTuneRequest*, locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locator.call(this, locator)
    end
    def put_Locator(this : IChannelTuneRequest*, locator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Locator.call(this, locator)
    end
    def get_Channel(this : IChannelTuneRequest*, channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, channel)
    end
    def put_Channel(this : IChannelTuneRequest*, channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, channel)
    end

  end

  @[Extern]
  record IATSCChannelTuneRequestVtbl,
    query_interface : Proc(IATSCChannelTuneRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSCChannelTuneRequest*, UInt32),
    release : Proc(IATSCChannelTuneRequest*, UInt32),
    get_type_info_count : Proc(IATSCChannelTuneRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IATSCChannelTuneRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IATSCChannelTuneRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IATSCChannelTuneRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IATSCChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Components : Proc(IATSCChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(IATSCChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Locator : Proc(IATSCChannelTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_Locator : Proc(IATSCChannelTuneRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IATSCChannelTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_Channel : Proc(IATSCChannelTuneRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_MinorChannel : Proc(IATSCChannelTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinorChannel : Proc(IATSCChannelTuneRequest*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0369b4e1-45b6-11d3-b650-00c04f79498e")]
  record IATSCChannelTuneRequest, lpVtbl : IATSCChannelTuneRequestVtbl* do
    GUID = LibC::GUID.new(0x369b4e1_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IATSCChannelTuneRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSCChannelTuneRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSCChannelTuneRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IATSCChannelTuneRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IATSCChannelTuneRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IATSCChannelTuneRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IATSCChannelTuneRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TuningSpace(this : IATSCChannelTuneRequest*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def get_Components(this : IATSCChannelTuneRequest*, components : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Components.call(this, components)
    end
    def clone(this : IATSCChannelTuneRequest*, new_tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_tune_request)
    end
    def get_Locator(this : IATSCChannelTuneRequest*, locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locator.call(this, locator)
    end
    def put_Locator(this : IATSCChannelTuneRequest*, locator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Locator.call(this, locator)
    end
    def get_Channel(this : IATSCChannelTuneRequest*, channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, channel)
    end
    def put_Channel(this : IATSCChannelTuneRequest*, channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, channel)
    end
    def get_MinorChannel(this : IATSCChannelTuneRequest*, minor_channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinorChannel.call(this, minor_channel)
    end
    def put_MinorChannel(this : IATSCChannelTuneRequest*, minor_channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinorChannel.call(this, minor_channel)
    end

  end

  @[Extern]
  record IDigitalCableTuneRequestVtbl,
    query_interface : Proc(IDigitalCableTuneRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDigitalCableTuneRequest*, UInt32),
    release : Proc(IDigitalCableTuneRequest*, UInt32),
    get_type_info_count : Proc(IDigitalCableTuneRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDigitalCableTuneRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDigitalCableTuneRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDigitalCableTuneRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IDigitalCableTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Components : Proc(IDigitalCableTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(IDigitalCableTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Locator : Proc(IDigitalCableTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_Locator : Proc(IDigitalCableTuneRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IDigitalCableTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_Channel : Proc(IDigitalCableTuneRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_MinorChannel : Proc(IDigitalCableTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_MinorChannel : Proc(IDigitalCableTuneRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_MajorChannel : Proc(IDigitalCableTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_MajorChannel : Proc(IDigitalCableTuneRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_SourceID : Proc(IDigitalCableTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_SourceID : Proc(IDigitalCableTuneRequest*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bad7753b-6b37-4810-ae57-3ce0c4a9e6cb")]
  record IDigitalCableTuneRequest, lpVtbl : IDigitalCableTuneRequestVtbl* do
    GUID = LibC::GUID.new(0xbad7753b_u32, 0x6b37_u16, 0x4810_u16, StaticArray[0xae_u8, 0x57_u8, 0x3c_u8, 0xe0_u8, 0xc4_u8, 0xa9_u8, 0xe6_u8, 0xcb_u8])
    def query_interface(this : IDigitalCableTuneRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDigitalCableTuneRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDigitalCableTuneRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDigitalCableTuneRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDigitalCableTuneRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDigitalCableTuneRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDigitalCableTuneRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TuningSpace(this : IDigitalCableTuneRequest*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def get_Components(this : IDigitalCableTuneRequest*, components : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Components.call(this, components)
    end
    def clone(this : IDigitalCableTuneRequest*, new_tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_tune_request)
    end
    def get_Locator(this : IDigitalCableTuneRequest*, locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locator.call(this, locator)
    end
    def put_Locator(this : IDigitalCableTuneRequest*, locator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Locator.call(this, locator)
    end
    def get_Channel(this : IDigitalCableTuneRequest*, channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, channel)
    end
    def put_Channel(this : IDigitalCableTuneRequest*, channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, channel)
    end
    def get_MinorChannel(this : IDigitalCableTuneRequest*, minor_channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinorChannel.call(this, minor_channel)
    end
    def put_MinorChannel(this : IDigitalCableTuneRequest*, minor_channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MinorChannel.call(this, minor_channel)
    end
    def get_MajorChannel(this : IDigitalCableTuneRequest*, pMajorChannel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MajorChannel.call(this, pMajorChannel)
    end
    def put_MajorChannel(this : IDigitalCableTuneRequest*, major_channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MajorChannel.call(this, major_channel)
    end
    def get_SourceID(this : IDigitalCableTuneRequest*, pSourceID : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceID.call(this, pSourceID)
    end
    def put_SourceID(this : IDigitalCableTuneRequest*, source_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceID.call(this, source_id)
    end

  end

  @[Extern]
  record IDVBTuneRequestVtbl,
    query_interface : Proc(IDVBTuneRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBTuneRequest*, UInt32),
    release : Proc(IDVBTuneRequest*, UInt32),
    get_type_info_count : Proc(IDVBTuneRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBTuneRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBTuneRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBTuneRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IDVBTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Components : Proc(IDVBTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Locator : Proc(IDVBTuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_Locator : Proc(IDVBTuneRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_ONID : Proc(IDVBTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_ONID : Proc(IDVBTuneRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_TSID : Proc(IDVBTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_TSID : Proc(IDVBTuneRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_SID : Proc(IDVBTuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_SID : Proc(IDVBTuneRequest*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0d6f567e-a636-42bb-83ba-ce4c1704afa2")]
  record IDVBTuneRequest, lpVtbl : IDVBTuneRequestVtbl* do
    GUID = LibC::GUID.new(0xd6f567e_u32, 0xa636_u16, 0x42bb_u16, StaticArray[0x83_u8, 0xba_u8, 0xce_u8, 0x4c_u8, 0x17_u8, 0x4_u8, 0xaf_u8, 0xa2_u8])
    def query_interface(this : IDVBTuneRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBTuneRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBTuneRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBTuneRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBTuneRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBTuneRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBTuneRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TuningSpace(this : IDVBTuneRequest*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def get_Components(this : IDVBTuneRequest*, components : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Components.call(this, components)
    end
    def clone(this : IDVBTuneRequest*, new_tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_tune_request)
    end
    def get_Locator(this : IDVBTuneRequest*, locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locator.call(this, locator)
    end
    def put_Locator(this : IDVBTuneRequest*, locator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Locator.call(this, locator)
    end
    def get_ONID(this : IDVBTuneRequest*, onid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ONID.call(this, onid)
    end
    def put_ONID(this : IDVBTuneRequest*, onid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ONID.call(this, onid)
    end
    def get_TSID(this : IDVBTuneRequest*, tsid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TSID.call(this, tsid)
    end
    def put_TSID(this : IDVBTuneRequest*, tsid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TSID.call(this, tsid)
    end
    def get_SID(this : IDVBTuneRequest*, sid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SID.call(this, sid)
    end
    def put_SID(this : IDVBTuneRequest*, sid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SID.call(this, sid)
    end

  end

  @[Extern]
  record IMPEG2TuneRequestVtbl,
    query_interface : Proc(IMPEG2TuneRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2TuneRequest*, UInt32),
    release : Proc(IMPEG2TuneRequest*, UInt32),
    get_type_info_count : Proc(IMPEG2TuneRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMPEG2TuneRequest*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMPEG2TuneRequest*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMPEG2TuneRequest*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IMPEG2TuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Components : Proc(IMPEG2TuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(IMPEG2TuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    get_Locator : Proc(IMPEG2TuneRequest*, Void**, Win32cr::Foundation::HRESULT),
    put_Locator : Proc(IMPEG2TuneRequest*, Void*, Win32cr::Foundation::HRESULT),
    get_TSID : Proc(IMPEG2TuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_TSID : Proc(IMPEG2TuneRequest*, Int32, Win32cr::Foundation::HRESULT),
    get_ProgNo : Proc(IMPEG2TuneRequest*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProgNo : Proc(IMPEG2TuneRequest*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("eb7d987f-8a01-42ad-b8ae-574deee44d1a")]
  record IMPEG2TuneRequest, lpVtbl : IMPEG2TuneRequestVtbl* do
    GUID = LibC::GUID.new(0xeb7d987f_u32, 0x8a01_u16, 0x42ad_u16, StaticArray[0xb8_u8, 0xae_u8, 0x57_u8, 0x4d_u8, 0xee_u8, 0xe4_u8, 0x4d_u8, 0x1a_u8])
    def query_interface(this : IMPEG2TuneRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2TuneRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2TuneRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMPEG2TuneRequest*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMPEG2TuneRequest*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMPEG2TuneRequest*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMPEG2TuneRequest*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_TuningSpace(this : IMPEG2TuneRequest*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def get_Components(this : IMPEG2TuneRequest*, components : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Components.call(this, components)
    end
    def clone(this : IMPEG2TuneRequest*, new_tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_tune_request)
    end
    def get_Locator(this : IMPEG2TuneRequest*, locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Locator.call(this, locator)
    end
    def put_Locator(this : IMPEG2TuneRequest*, locator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Locator.call(this, locator)
    end
    def get_TSID(this : IMPEG2TuneRequest*, tsid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TSID.call(this, tsid)
    end
    def put_TSID(this : IMPEG2TuneRequest*, tsid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TSID.call(this, tsid)
    end
    def get_ProgNo(this : IMPEG2TuneRequest*, prog_no : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProgNo.call(this, prog_no)
    end
    def put_ProgNo(this : IMPEG2TuneRequest*, prog_no : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProgNo.call(this, prog_no)
    end

  end

  @[Extern]
  record IMPEG2TuneRequestFactoryVtbl,
    query_interface : Proc(IMPEG2TuneRequestFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2TuneRequestFactory*, UInt32),
    release : Proc(IMPEG2TuneRequestFactory*, UInt32),
    get_type_info_count : Proc(IMPEG2TuneRequestFactory*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMPEG2TuneRequestFactory*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMPEG2TuneRequestFactory*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMPEG2TuneRequestFactory*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_tune_request : Proc(IMPEG2TuneRequestFactory*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("14e11abd-ee37-4893-9ea1-6964de933e39")]
  record IMPEG2TuneRequestFactory, lpVtbl : IMPEG2TuneRequestFactoryVtbl* do
    GUID = LibC::GUID.new(0x14e11abd_u32, 0xee37_u16, 0x4893_u16, StaticArray[0x9e_u8, 0xa1_u8, 0x69_u8, 0x64_u8, 0xde_u8, 0x93_u8, 0x3e_u8, 0x39_u8])
    def query_interface(this : IMPEG2TuneRequestFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2TuneRequestFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2TuneRequestFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMPEG2TuneRequestFactory*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMPEG2TuneRequestFactory*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMPEG2TuneRequestFactory*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMPEG2TuneRequestFactory*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_tune_request(this : IMPEG2TuneRequestFactory*, tuning_space : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request.call(this, tuning_space, tune_request)
    end

  end

  @[Extern]
  record IMPEG2TuneRequestSupportVtbl,
    query_interface : Proc(IMPEG2TuneRequestSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2TuneRequestSupport*, UInt32),
    release : Proc(IMPEG2TuneRequestSupport*, UInt32)


  @[Extern]
  #@[Com("1b9d5fc3-5bbc-4b6c-bb18-b9d10e3eeebf")]
  record IMPEG2TuneRequestSupport, lpVtbl : IMPEG2TuneRequestSupportVtbl* do
    GUID = LibC::GUID.new(0x1b9d5fc3_u32, 0x5bbc_u16, 0x4b6c_u16, StaticArray[0xbb_u8, 0x18_u8, 0xb9_u8, 0xd1_u8, 0xe_u8, 0x3e_u8, 0xee_u8, 0xbf_u8])
    def query_interface(this : IMPEG2TuneRequestSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2TuneRequestSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2TuneRequestSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end

  end

  @[Extern]
  record ITunerCapVtbl,
    query_interface : Proc(ITunerCap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITunerCap*, UInt32),
    release : Proc(ITunerCap*, UInt32),
    get_SupportedNetworkTypes : Proc(ITunerCap*, UInt32, UInt32*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_SupportedVideoFormats : Proc(ITunerCap*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AuxInputCount : Proc(ITunerCap*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e60dfa45-8d56-4e65-a8ab-d6be9412c249")]
  record ITunerCap, lpVtbl : ITunerCapVtbl* do
    GUID = LibC::GUID.new(0xe60dfa45_u32, 0x8d56_u16, 0x4e65_u16, StaticArray[0xa8_u8, 0xab_u8, 0xd6_u8, 0xbe_u8, 0x94_u8, 0x12_u8, 0xc2_u8, 0x49_u8])
    def query_interface(this : ITunerCap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITunerCap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITunerCap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_SupportedNetworkTypes(this : ITunerCap*, ulcNetworkTypesMax : UInt32, pulcNetworkTypes : UInt32*, pguidNetworkTypes : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedNetworkTypes.call(this, ulcNetworkTypesMax, pulcNetworkTypes, pguidNetworkTypes)
    end
    def get_SupportedVideoFormats(this : ITunerCap*, pulAMTunerModeType : UInt32*, pulAnalogVideoStandard : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedVideoFormats.call(this, pulAMTunerModeType, pulAnalogVideoStandard)
    end
    def get_AuxInputCount(this : ITunerCap*, pulCompositeCount : UInt32*, pulSvideoCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AuxInputCount.call(this, pulCompositeCount, pulSvideoCount)
    end

  end

  @[Extern]
  record ITunerCapExVtbl,
    query_interface : Proc(ITunerCapEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITunerCapEx*, UInt32),
    release : Proc(ITunerCapEx*, UInt32),
    get_Has608_708Caption : Proc(ITunerCapEx*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ed3e0c66-18c8-4ea6-9300-f6841fdd35dc")]
  record ITunerCapEx, lpVtbl : ITunerCapExVtbl* do
    GUID = LibC::GUID.new(0xed3e0c66_u32, 0x18c8_u16, 0x4ea6_u16, StaticArray[0x93_u8, 0x0_u8, 0xf6_u8, 0x84_u8, 0x1f_u8, 0xdd_u8, 0x35_u8, 0xdc_u8])
    def query_interface(this : ITunerCapEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITunerCapEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITunerCapEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Has608_708Caption(this : ITunerCapEx*, pbHasCaption : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Has608_708Caption.call(this, pbHasCaption)
    end

  end

  @[Extern]
  record ITunerVtbl,
    query_interface : Proc(ITuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITuner*, UInt32),
    release : Proc(ITuner*, UInt32),
    get_TuningSpace : Proc(ITuner*, Void**, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(ITuner*, Void*, Win32cr::Foundation::HRESULT),
    enum_tuning_spaces : Proc(ITuner*, Void**, Win32cr::Foundation::HRESULT),
    get_TuneRequest : Proc(ITuner*, Void**, Win32cr::Foundation::HRESULT),
    put_TuneRequest : Proc(ITuner*, Void*, Win32cr::Foundation::HRESULT),
    validate : Proc(ITuner*, Void*, Win32cr::Foundation::HRESULT),
    get_PreferredComponentTypes : Proc(ITuner*, Void**, Win32cr::Foundation::HRESULT),
    put_PreferredComponentTypes : Proc(ITuner*, Void*, Win32cr::Foundation::HRESULT),
    get_SignalStrength : Proc(ITuner*, Int32*, Win32cr::Foundation::HRESULT),
    trigger_signal_events : Proc(ITuner*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("28c52640-018a-11d3-9d8e-00c04f72d980")]
  record ITuner, lpVtbl : ITunerVtbl* do
    GUID = LibC::GUID.new(0x28c52640_u32, 0x18a_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : ITuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_TuningSpace(this : ITuner*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def put_TuningSpace(this : ITuner*, tuning_space : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, tuning_space)
    end
    def enum_tuning_spaces(this : ITuner*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_tuning_spaces.call(this, ppEnum)
    end
    def get_TuneRequest(this : ITuner*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuneRequest.call(this, tune_request)
    end
    def put_TuneRequest(this : ITuner*, tune_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuneRequest.call(this, tune_request)
    end
    def validate(this : ITuner*, tune_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this, tune_request)
    end
    def get_PreferredComponentTypes(this : ITuner*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredComponentTypes.call(this, component_types)
    end
    def put_PreferredComponentTypes(this : ITuner*, component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PreferredComponentTypes.call(this, component_types)
    end
    def get_SignalStrength(this : ITuner*, strength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalStrength.call(this, strength)
    end
    def trigger_signal_events(this : ITuner*, interval : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.trigger_signal_events.call(this, interval)
    end

  end

  @[Extern]
  record IScanningTunerVtbl,
    query_interface : Proc(IScanningTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IScanningTuner*, UInt32),
    release : Proc(IScanningTuner*, UInt32),
    get_TuningSpace : Proc(IScanningTuner*, Void**, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IScanningTuner*, Void*, Win32cr::Foundation::HRESULT),
    enum_tuning_spaces : Proc(IScanningTuner*, Void**, Win32cr::Foundation::HRESULT),
    get_TuneRequest : Proc(IScanningTuner*, Void**, Win32cr::Foundation::HRESULT),
    put_TuneRequest : Proc(IScanningTuner*, Void*, Win32cr::Foundation::HRESULT),
    validate : Proc(IScanningTuner*, Void*, Win32cr::Foundation::HRESULT),
    get_PreferredComponentTypes : Proc(IScanningTuner*, Void**, Win32cr::Foundation::HRESULT),
    put_PreferredComponentTypes : Proc(IScanningTuner*, Void*, Win32cr::Foundation::HRESULT),
    get_SignalStrength : Proc(IScanningTuner*, Int32*, Win32cr::Foundation::HRESULT),
    trigger_signal_events : Proc(IScanningTuner*, Int32, Win32cr::Foundation::HRESULT),
    seek_up : Proc(IScanningTuner*, Win32cr::Foundation::HRESULT),
    seek_down : Proc(IScanningTuner*, Win32cr::Foundation::HRESULT),
    scan_up : Proc(IScanningTuner*, Int32, Win32cr::Foundation::HRESULT),
    scan_down : Proc(IScanningTuner*, Int32, Win32cr::Foundation::HRESULT),
    auto_program : Proc(IScanningTuner*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1dfd0a5c-0284-11d3-9d8e-00c04f72d980")]
  record IScanningTuner, lpVtbl : IScanningTunerVtbl* do
    GUID = LibC::GUID.new(0x1dfd0a5c_u32, 0x284_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : IScanningTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IScanningTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IScanningTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_TuningSpace(this : IScanningTuner*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def put_TuningSpace(this : IScanningTuner*, tuning_space : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, tuning_space)
    end
    def enum_tuning_spaces(this : IScanningTuner*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_tuning_spaces.call(this, ppEnum)
    end
    def get_TuneRequest(this : IScanningTuner*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuneRequest.call(this, tune_request)
    end
    def put_TuneRequest(this : IScanningTuner*, tune_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuneRequest.call(this, tune_request)
    end
    def validate(this : IScanningTuner*, tune_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this, tune_request)
    end
    def get_PreferredComponentTypes(this : IScanningTuner*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredComponentTypes.call(this, component_types)
    end
    def put_PreferredComponentTypes(this : IScanningTuner*, component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PreferredComponentTypes.call(this, component_types)
    end
    def get_SignalStrength(this : IScanningTuner*, strength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalStrength.call(this, strength)
    end
    def trigger_signal_events(this : IScanningTuner*, interval : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.trigger_signal_events.call(this, interval)
    end
    def seek_up(this : IScanningTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek_up.call(this)
    end
    def seek_down(this : IScanningTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek_down.call(this)
    end
    def scan_up(this : IScanningTuner*, milliseconds_pause : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scan_up.call(this, milliseconds_pause)
    end
    def scan_down(this : IScanningTuner*, milliseconds_pause : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scan_down.call(this, milliseconds_pause)
    end
    def auto_program(this : IScanningTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.auto_program.call(this)
    end

  end

  @[Extern]
  record IScanningTunerExVtbl,
    query_interface : Proc(IScanningTunerEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IScanningTunerEx*, UInt32),
    release : Proc(IScanningTunerEx*, UInt32),
    get_TuningSpace : Proc(IScanningTunerEx*, Void**, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IScanningTunerEx*, Void*, Win32cr::Foundation::HRESULT),
    enum_tuning_spaces : Proc(IScanningTunerEx*, Void**, Win32cr::Foundation::HRESULT),
    get_TuneRequest : Proc(IScanningTunerEx*, Void**, Win32cr::Foundation::HRESULT),
    put_TuneRequest : Proc(IScanningTunerEx*, Void*, Win32cr::Foundation::HRESULT),
    validate : Proc(IScanningTunerEx*, Void*, Win32cr::Foundation::HRESULT),
    get_PreferredComponentTypes : Proc(IScanningTunerEx*, Void**, Win32cr::Foundation::HRESULT),
    put_PreferredComponentTypes : Proc(IScanningTunerEx*, Void*, Win32cr::Foundation::HRESULT),
    get_SignalStrength : Proc(IScanningTunerEx*, Int32*, Win32cr::Foundation::HRESULT),
    trigger_signal_events : Proc(IScanningTunerEx*, Int32, Win32cr::Foundation::HRESULT),
    seek_up : Proc(IScanningTunerEx*, Win32cr::Foundation::HRESULT),
    seek_down : Proc(IScanningTunerEx*, Win32cr::Foundation::HRESULT),
    scan_up : Proc(IScanningTunerEx*, Int32, Win32cr::Foundation::HRESULT),
    scan_down : Proc(IScanningTunerEx*, Int32, Win32cr::Foundation::HRESULT),
    auto_program : Proc(IScanningTunerEx*, Win32cr::Foundation::HRESULT),
    get_current_locator : Proc(IScanningTunerEx*, Void**, Win32cr::Foundation::HRESULT),
    perform_exhaustive_scan : Proc(IScanningTunerEx*, Int32, Int32, Int16, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    terminate_current_scan : Proc(IScanningTunerEx*, Int32*, Win32cr::Foundation::HRESULT),
    resume_current_scan : Proc(IScanningTunerEx*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_tuner_scanning_capability : Proc(IScanningTunerEx*, Int32*, Int32*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_tuner_status : Proc(IScanningTunerEx*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    get_current_tuner_standard_capability : Proc(IScanningTunerEx*, LibC::GUID, Int32*, Int32*, Win32cr::Foundation::HRESULT),
    set_scan_signal_type_filter : Proc(IScanningTunerEx*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("04bbd195-0e2d-4593-9bd5-4f908bc33cf5")]
  record IScanningTunerEx, lpVtbl : IScanningTunerExVtbl* do
    GUID = LibC::GUID.new(0x4bbd195_u32, 0xe2d_u16, 0x4593_u16, StaticArray[0x9b_u8, 0xd5_u8, 0x4f_u8, 0x90_u8, 0x8b_u8, 0xc3_u8, 0x3c_u8, 0xf5_u8])
    def query_interface(this : IScanningTunerEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IScanningTunerEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IScanningTunerEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_TuningSpace(this : IScanningTunerEx*, tuning_space : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, tuning_space)
    end
    def put_TuningSpace(this : IScanningTunerEx*, tuning_space : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, tuning_space)
    end
    def enum_tuning_spaces(this : IScanningTunerEx*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_tuning_spaces.call(this, ppEnum)
    end
    def get_TuneRequest(this : IScanningTunerEx*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuneRequest.call(this, tune_request)
    end
    def put_TuneRequest(this : IScanningTunerEx*, tune_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuneRequest.call(this, tune_request)
    end
    def validate(this : IScanningTunerEx*, tune_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this, tune_request)
    end
    def get_PreferredComponentTypes(this : IScanningTunerEx*, component_types : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredComponentTypes.call(this, component_types)
    end
    def put_PreferredComponentTypes(this : IScanningTunerEx*, component_types : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PreferredComponentTypes.call(this, component_types)
    end
    def get_SignalStrength(this : IScanningTunerEx*, strength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalStrength.call(this, strength)
    end
    def trigger_signal_events(this : IScanningTunerEx*, interval : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.trigger_signal_events.call(this, interval)
    end
    def seek_up(this : IScanningTunerEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek_up.call(this)
    end
    def seek_down(this : IScanningTunerEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek_down.call(this)
    end
    def scan_up(this : IScanningTunerEx*, milliseconds_pause : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scan_up.call(this, milliseconds_pause)
    end
    def scan_down(this : IScanningTunerEx*, milliseconds_pause : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.scan_down.call(this, milliseconds_pause)
    end
    def auto_program(this : IScanningTunerEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.auto_program.call(this)
    end
    def get_current_locator(this : IScanningTunerEx*, pILocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_locator.call(this, pILocator)
    end
    def perform_exhaustive_scan(this : IScanningTunerEx*, dwLowerFreq : Int32, dwHigherFreq : Int32, bFineTune : Int16, hEvent : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.perform_exhaustive_scan.call(this, dwLowerFreq, dwHigherFreq, bFineTune, hEvent)
    end
    def terminate_current_scan(this : IScanningTunerEx*, pcurrentFreq : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate_current_scan.call(this, pcurrentFreq)
    end
    def resume_current_scan(this : IScanningTunerEx*, hEvent : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume_current_scan.call(this, hEvent)
    end
    def get_tuner_scanning_capability(this : IScanningTunerEx*, hardware_assisted_scanning : Int32*, num_standards_supported : Int32*, broadcast_standards : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tuner_scanning_capability.call(this, hardware_assisted_scanning, num_standards_supported, broadcast_standards)
    end
    def get_tuner_status(this : IScanningTunerEx*, seconds_left : Int32*, current_lock_type : Int32*, auto_detect : Int32*, current_freq : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tuner_status.call(this, seconds_left, current_lock_type, auto_detect, current_freq)
    end
    def get_current_tuner_standard_capability(this : IScanningTunerEx*, current_broadcast_standard : LibC::GUID, settling_time : Int32*, tv_standards_supported : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_tuner_standard_capability.call(this, current_broadcast_standard, settling_time, tv_standards_supported)
    end
    def set_scan_signal_type_filter(this : IScanningTunerEx*, scan_modulation_types : Int32, analog_video_standard : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_scan_signal_type_filter.call(this, scan_modulation_types, analog_video_standard)
    end

  end

  @[Extern]
  record IComponentTypeVtbl,
    query_interface : Proc(IComponentType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IComponentType*, UInt32),
    release : Proc(IComponentType*, UInt32),
    get_type_info_count : Proc(IComponentType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IComponentType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IComponentType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IComponentType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IComponentType*, Win32cr::Media::DirectShow::ComponentCategory*, Win32cr::Foundation::HRESULT),
    put_Category : Proc(IComponentType*, Win32cr::Media::DirectShow::ComponentCategory, Win32cr::Foundation::HRESULT),
    get_MediaMajorType : Proc(IComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaMajorType : Proc(IComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaMajorType : Proc(IComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaMajorType : Proc(IComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaSubType : Proc(IComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaSubType : Proc(IComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaSubType : Proc(IComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaSubType : Proc(IComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaFormatType : Proc(IComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaFormatType : Proc(IComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaFormatType : Proc(IComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaFormatType : Proc(IComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(IComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    put_MediaType : Proc(IComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    clone : Proc(IComponentType*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6a340dc0-0311-11d3-9d8e-00c04f72d980")]
  record IComponentType, lpVtbl : IComponentTypeVtbl* do
    GUID = LibC::GUID.new(0x6a340dc0_u32, 0x311_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : IComponentType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IComponentType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IComponentType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IComponentType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IComponentType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IComponentType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IComponentType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Category(this : IComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, category)
    end
    def put_Category(this : IComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Category.call(this, category)
    end
    def get_MediaMajorType(this : IComponentType*, media_major_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaMajorType.call(this, media_major_type)
    end
    def put_MediaMajorType(this : IComponentType*, media_major_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaMajorType.call(this, media_major_type)
    end
    def get__MediaMajorType(this : IComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaMajorType.call(this, media_major_type_guid)
    end
    def put__MediaMajorType(this : IComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaMajorType.call(this, media_major_type_guid)
    end
    def get_MediaSubType(this : IComponentType*, media_sub_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaSubType.call(this, media_sub_type)
    end
    def put_MediaSubType(this : IComponentType*, media_sub_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaSubType.call(this, media_sub_type)
    end
    def get__MediaSubType(this : IComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaSubType.call(this, media_sub_type_guid)
    end
    def put__MediaSubType(this : IComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaSubType.call(this, media_sub_type_guid)
    end
    def get_MediaFormatType(this : IComponentType*, media_format_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaFormatType.call(this, media_format_type)
    end
    def put_MediaFormatType(this : IComponentType*, media_format_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaFormatType.call(this, media_format_type)
    end
    def get__MediaFormatType(this : IComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaFormatType.call(this, media_format_type_guid)
    end
    def put__MediaFormatType(this : IComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaFormatType.call(this, media_format_type_guid)
    end
    def get_MediaType(this : IComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, media_type)
    end
    def put_MediaType(this : IComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaType.call(this, media_type)
    end
    def clone(this : IComponentType*, new_ct : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ct)
    end

  end

  @[Extern]
  record ILanguageComponentTypeVtbl,
    query_interface : Proc(ILanguageComponentType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ILanguageComponentType*, UInt32),
    release : Proc(ILanguageComponentType*, UInt32),
    get_type_info_count : Proc(ILanguageComponentType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ILanguageComponentType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ILanguageComponentType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ILanguageComponentType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(ILanguageComponentType*, Win32cr::Media::DirectShow::ComponentCategory*, Win32cr::Foundation::HRESULT),
    put_Category : Proc(ILanguageComponentType*, Win32cr::Media::DirectShow::ComponentCategory, Win32cr::Foundation::HRESULT),
    get_MediaMajorType : Proc(ILanguageComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaMajorType : Proc(ILanguageComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaMajorType : Proc(ILanguageComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaMajorType : Proc(ILanguageComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaSubType : Proc(ILanguageComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaSubType : Proc(ILanguageComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaSubType : Proc(ILanguageComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaSubType : Proc(ILanguageComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaFormatType : Proc(ILanguageComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaFormatType : Proc(ILanguageComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaFormatType : Proc(ILanguageComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaFormatType : Proc(ILanguageComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(ILanguageComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    put_MediaType : Proc(ILanguageComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    clone : Proc(ILanguageComponentType*, Void**, Win32cr::Foundation::HRESULT),
    get_LangID : Proc(ILanguageComponentType*, Int32*, Win32cr::Foundation::HRESULT),
    put_LangID : Proc(ILanguageComponentType*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b874c8ba-0fa2-11d3-9d8e-00c04f72d980")]
  record ILanguageComponentType, lpVtbl : ILanguageComponentTypeVtbl* do
    GUID = LibC::GUID.new(0xb874c8ba_u32, 0xfa2_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : ILanguageComponentType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ILanguageComponentType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ILanguageComponentType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ILanguageComponentType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ILanguageComponentType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ILanguageComponentType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ILanguageComponentType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Category(this : ILanguageComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, category)
    end
    def put_Category(this : ILanguageComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Category.call(this, category)
    end
    def get_MediaMajorType(this : ILanguageComponentType*, media_major_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaMajorType.call(this, media_major_type)
    end
    def put_MediaMajorType(this : ILanguageComponentType*, media_major_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaMajorType.call(this, media_major_type)
    end
    def get__MediaMajorType(this : ILanguageComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaMajorType.call(this, media_major_type_guid)
    end
    def put__MediaMajorType(this : ILanguageComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaMajorType.call(this, media_major_type_guid)
    end
    def get_MediaSubType(this : ILanguageComponentType*, media_sub_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaSubType.call(this, media_sub_type)
    end
    def put_MediaSubType(this : ILanguageComponentType*, media_sub_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaSubType.call(this, media_sub_type)
    end
    def get__MediaSubType(this : ILanguageComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaSubType.call(this, media_sub_type_guid)
    end
    def put__MediaSubType(this : ILanguageComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaSubType.call(this, media_sub_type_guid)
    end
    def get_MediaFormatType(this : ILanguageComponentType*, media_format_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaFormatType.call(this, media_format_type)
    end
    def put_MediaFormatType(this : ILanguageComponentType*, media_format_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaFormatType.call(this, media_format_type)
    end
    def get__MediaFormatType(this : ILanguageComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaFormatType.call(this, media_format_type_guid)
    end
    def put__MediaFormatType(this : ILanguageComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaFormatType.call(this, media_format_type_guid)
    end
    def get_MediaType(this : ILanguageComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, media_type)
    end
    def put_MediaType(this : ILanguageComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaType.call(this, media_type)
    end
    def clone(this : ILanguageComponentType*, new_ct : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ct)
    end
    def get_LangID(this : ILanguageComponentType*, lang_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LangID.call(this, lang_id)
    end
    def put_LangID(this : ILanguageComponentType*, lang_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LangID.call(this, lang_id)
    end

  end

  @[Extern]
  record IMPEG2ComponentTypeVtbl,
    query_interface : Proc(IMPEG2ComponentType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2ComponentType*, UInt32),
    release : Proc(IMPEG2ComponentType*, UInt32),
    get_type_info_count : Proc(IMPEG2ComponentType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMPEG2ComponentType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMPEG2ComponentType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMPEG2ComponentType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMPEG2ComponentType*, Win32cr::Media::DirectShow::ComponentCategory*, Win32cr::Foundation::HRESULT),
    put_Category : Proc(IMPEG2ComponentType*, Win32cr::Media::DirectShow::ComponentCategory, Win32cr::Foundation::HRESULT),
    get_MediaMajorType : Proc(IMPEG2ComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaMajorType : Proc(IMPEG2ComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaMajorType : Proc(IMPEG2ComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaMajorType : Proc(IMPEG2ComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaSubType : Proc(IMPEG2ComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaSubType : Proc(IMPEG2ComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaSubType : Proc(IMPEG2ComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaSubType : Proc(IMPEG2ComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaFormatType : Proc(IMPEG2ComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaFormatType : Proc(IMPEG2ComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaFormatType : Proc(IMPEG2ComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaFormatType : Proc(IMPEG2ComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(IMPEG2ComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    put_MediaType : Proc(IMPEG2ComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    clone : Proc(IMPEG2ComponentType*, Void**, Win32cr::Foundation::HRESULT),
    get_LangID : Proc(IMPEG2ComponentType*, Int32*, Win32cr::Foundation::HRESULT),
    put_LangID : Proc(IMPEG2ComponentType*, Int32, Win32cr::Foundation::HRESULT),
    get_StreamType : Proc(IMPEG2ComponentType*, Win32cr::Media::DirectShow::MPEG2StreamType*, Win32cr::Foundation::HRESULT),
    put_StreamType : Proc(IMPEG2ComponentType*, Win32cr::Media::DirectShow::MPEG2StreamType, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2c073d84-b51c-48c9-aa9f-68971e1f6e38")]
  record IMPEG2ComponentType, lpVtbl : IMPEG2ComponentTypeVtbl* do
    GUID = LibC::GUID.new(0x2c073d84_u32, 0xb51c_u16, 0x48c9_u16, StaticArray[0xaa_u8, 0x9f_u8, 0x68_u8, 0x97_u8, 0x1e_u8, 0x1f_u8, 0x6e_u8, 0x38_u8])
    def query_interface(this : IMPEG2ComponentType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2ComponentType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2ComponentType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMPEG2ComponentType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMPEG2ComponentType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMPEG2ComponentType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMPEG2ComponentType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Category(this : IMPEG2ComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, category)
    end
    def put_Category(this : IMPEG2ComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Category.call(this, category)
    end
    def get_MediaMajorType(this : IMPEG2ComponentType*, media_major_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaMajorType.call(this, media_major_type)
    end
    def put_MediaMajorType(this : IMPEG2ComponentType*, media_major_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaMajorType.call(this, media_major_type)
    end
    def get__MediaMajorType(this : IMPEG2ComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaMajorType.call(this, media_major_type_guid)
    end
    def put__MediaMajorType(this : IMPEG2ComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaMajorType.call(this, media_major_type_guid)
    end
    def get_MediaSubType(this : IMPEG2ComponentType*, media_sub_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaSubType.call(this, media_sub_type)
    end
    def put_MediaSubType(this : IMPEG2ComponentType*, media_sub_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaSubType.call(this, media_sub_type)
    end
    def get__MediaSubType(this : IMPEG2ComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaSubType.call(this, media_sub_type_guid)
    end
    def put__MediaSubType(this : IMPEG2ComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaSubType.call(this, media_sub_type_guid)
    end
    def get_MediaFormatType(this : IMPEG2ComponentType*, media_format_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaFormatType.call(this, media_format_type)
    end
    def put_MediaFormatType(this : IMPEG2ComponentType*, media_format_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaFormatType.call(this, media_format_type)
    end
    def get__MediaFormatType(this : IMPEG2ComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaFormatType.call(this, media_format_type_guid)
    end
    def put__MediaFormatType(this : IMPEG2ComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaFormatType.call(this, media_format_type_guid)
    end
    def get_MediaType(this : IMPEG2ComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, media_type)
    end
    def put_MediaType(this : IMPEG2ComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaType.call(this, media_type)
    end
    def clone(this : IMPEG2ComponentType*, new_ct : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ct)
    end
    def get_LangID(this : IMPEG2ComponentType*, lang_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LangID.call(this, lang_id)
    end
    def put_LangID(this : IMPEG2ComponentType*, lang_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LangID.call(this, lang_id)
    end
    def get_StreamType(this : IMPEG2ComponentType*, mp2_stream_type : Win32cr::Media::DirectShow::MPEG2StreamType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StreamType.call(this, mp2_stream_type)
    end
    def put_StreamType(this : IMPEG2ComponentType*, mp2_stream_type : Win32cr::Media::DirectShow::MPEG2StreamType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StreamType.call(this, mp2_stream_type)
    end

  end

  @[Extern]
  record IATSCComponentTypeVtbl,
    query_interface : Proc(IATSCComponentType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSCComponentType*, UInt32),
    release : Proc(IATSCComponentType*, UInt32),
    get_type_info_count : Proc(IATSCComponentType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IATSCComponentType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IATSCComponentType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IATSCComponentType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IATSCComponentType*, Win32cr::Media::DirectShow::ComponentCategory*, Win32cr::Foundation::HRESULT),
    put_Category : Proc(IATSCComponentType*, Win32cr::Media::DirectShow::ComponentCategory, Win32cr::Foundation::HRESULT),
    get_MediaMajorType : Proc(IATSCComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaMajorType : Proc(IATSCComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaMajorType : Proc(IATSCComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaMajorType : Proc(IATSCComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaSubType : Proc(IATSCComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaSubType : Proc(IATSCComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaSubType : Proc(IATSCComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaSubType : Proc(IATSCComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaFormatType : Proc(IATSCComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaFormatType : Proc(IATSCComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaFormatType : Proc(IATSCComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaFormatType : Proc(IATSCComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(IATSCComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    put_MediaType : Proc(IATSCComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    clone : Proc(IATSCComponentType*, Void**, Win32cr::Foundation::HRESULT),
    get_LangID : Proc(IATSCComponentType*, Int32*, Win32cr::Foundation::HRESULT),
    put_LangID : Proc(IATSCComponentType*, Int32, Win32cr::Foundation::HRESULT),
    get_StreamType : Proc(IATSCComponentType*, Win32cr::Media::DirectShow::MPEG2StreamType*, Win32cr::Foundation::HRESULT),
    put_StreamType : Proc(IATSCComponentType*, Win32cr::Media::DirectShow::MPEG2StreamType, Win32cr::Foundation::HRESULT),
    get_Flags : Proc(IATSCComponentType*, Int32*, Win32cr::Foundation::HRESULT),
    put_Flags : Proc(IATSCComponentType*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fc189e4d-7bd4-4125-b3b3-3a76a332cc96")]
  record IATSCComponentType, lpVtbl : IATSCComponentTypeVtbl* do
    GUID = LibC::GUID.new(0xfc189e4d_u32, 0x7bd4_u16, 0x4125_u16, StaticArray[0xb3_u8, 0xb3_u8, 0x3a_u8, 0x76_u8, 0xa3_u8, 0x32_u8, 0xcc_u8, 0x96_u8])
    def query_interface(this : IATSCComponentType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSCComponentType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSCComponentType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IATSCComponentType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IATSCComponentType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IATSCComponentType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IATSCComponentType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Category(this : IATSCComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, category)
    end
    def put_Category(this : IATSCComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Category.call(this, category)
    end
    def get_MediaMajorType(this : IATSCComponentType*, media_major_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaMajorType.call(this, media_major_type)
    end
    def put_MediaMajorType(this : IATSCComponentType*, media_major_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaMajorType.call(this, media_major_type)
    end
    def get__MediaMajorType(this : IATSCComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaMajorType.call(this, media_major_type_guid)
    end
    def put__MediaMajorType(this : IATSCComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaMajorType.call(this, media_major_type_guid)
    end
    def get_MediaSubType(this : IATSCComponentType*, media_sub_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaSubType.call(this, media_sub_type)
    end
    def put_MediaSubType(this : IATSCComponentType*, media_sub_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaSubType.call(this, media_sub_type)
    end
    def get__MediaSubType(this : IATSCComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaSubType.call(this, media_sub_type_guid)
    end
    def put__MediaSubType(this : IATSCComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaSubType.call(this, media_sub_type_guid)
    end
    def get_MediaFormatType(this : IATSCComponentType*, media_format_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaFormatType.call(this, media_format_type)
    end
    def put_MediaFormatType(this : IATSCComponentType*, media_format_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaFormatType.call(this, media_format_type)
    end
    def get__MediaFormatType(this : IATSCComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaFormatType.call(this, media_format_type_guid)
    end
    def put__MediaFormatType(this : IATSCComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaFormatType.call(this, media_format_type_guid)
    end
    def get_MediaType(this : IATSCComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, media_type)
    end
    def put_MediaType(this : IATSCComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaType.call(this, media_type)
    end
    def clone(this : IATSCComponentType*, new_ct : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ct)
    end
    def get_LangID(this : IATSCComponentType*, lang_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LangID.call(this, lang_id)
    end
    def put_LangID(this : IATSCComponentType*, lang_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LangID.call(this, lang_id)
    end
    def get_StreamType(this : IATSCComponentType*, mp2_stream_type : Win32cr::Media::DirectShow::MPEG2StreamType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StreamType.call(this, mp2_stream_type)
    end
    def put_StreamType(this : IATSCComponentType*, mp2_stream_type : Win32cr::Media::DirectShow::MPEG2StreamType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StreamType.call(this, mp2_stream_type)
    end
    def get_Flags(this : IATSCComponentType*, flags : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Flags.call(this, flags)
    end
    def put_Flags(this : IATSCComponentType*, flags : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Flags.call(this, flags)
    end

  end

  @[Extern]
  record IEnumComponentTypesVtbl,
    query_interface : Proc(IEnumComponentTypes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumComponentTypes*, UInt32),
    release : Proc(IEnumComponentTypes*, UInt32),
    next__ : Proc(IEnumComponentTypes*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumComponentTypes*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumComponentTypes*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumComponentTypes*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8a674b4a-1f63-11d3-b64c-00c04f79498e")]
  record IEnumComponentTypes, lpVtbl : IEnumComponentTypesVtbl* do
    GUID = LibC::GUID.new(0x8a674b4a_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IEnumComponentTypes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumComponentTypes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumComponentTypes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumComponentTypes*, celt : UInt32, rgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumComponentTypes*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumComponentTypes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumComponentTypes*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IComponentTypesVtbl,
    query_interface : Proc(IComponentTypes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IComponentTypes*, UInt32),
    release : Proc(IComponentTypes*, UInt32),
    get_type_info_count : Proc(IComponentTypes*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IComponentTypes*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IComponentTypes*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IComponentTypes*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IComponentTypes*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IComponentTypes*, Void**, Win32cr::Foundation::HRESULT),
    enum_component_types : Proc(IComponentTypes*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IComponentTypes*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    put_Item : Proc(IComponentTypes*, Win32cr::System::Com::VARIANT, Void*, Win32cr::Foundation::HRESULT),
    add : Proc(IComponentTypes*, Void*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    remove : Proc(IComponentTypes*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    clone : Proc(IComponentTypes*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0dc13d4a-0313-11d3-9d8e-00c04f72d980")]
  record IComponentTypes, lpVtbl : IComponentTypesVtbl* do
    GUID = LibC::GUID.new(0xdc13d4a_u32, 0x313_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : IComponentTypes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IComponentTypes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IComponentTypes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IComponentTypes*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IComponentTypes*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IComponentTypes*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IComponentTypes*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IComponentTypes*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : IComponentTypes*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppNewEnum)
    end
    def enum_component_types(this : IComponentTypes*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_component_types.call(this, ppNewEnum)
    end
    def get_Item(this : IComponentTypes*, index : Win32cr::System::Com::VARIANT, component_type : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, component_type)
    end
    def put_Item(this : IComponentTypes*, index : Win32cr::System::Com::VARIANT, component_type : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Item.call(this, index, component_type)
    end
    def add(this : IComponentTypes*, component_type : Void*, new_index : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, component_type, new_index)
    end
    def remove(this : IComponentTypes*, index : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clone(this : IComponentTypes*, new_list : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_list)
    end

  end

  @[Extern]
  record IComponentVtbl,
    query_interface : Proc(IComponent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IComponent*, UInt32),
    release : Proc(IComponent*, UInt32),
    get_type_info_count : Proc(IComponent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IComponent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IComponent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IComponent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IComponent*, Void**, Win32cr::Foundation::HRESULT),
    put_Type : Proc(IComponent*, Void*, Win32cr::Foundation::HRESULT),
    get_DescLangID : Proc(IComponent*, Int32*, Win32cr::Foundation::HRESULT),
    put_DescLangID : Proc(IComponent*, Int32, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IComponent*, Win32cr::Media::DirectShow::ComponentStatus*, Win32cr::Foundation::HRESULT),
    put_Status : Proc(IComponent*, Win32cr::Media::DirectShow::ComponentStatus, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IComponent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IComponent*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    clone : Proc(IComponent*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1a5576fc-0e19-11d3-9d8e-00c04f72d980")]
  record IComponent, lpVtbl : IComponentVtbl* do
    GUID = LibC::GUID.new(0x1a5576fc_u32, 0xe19_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : IComponent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IComponent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IComponent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IComponent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IComponent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IComponent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IComponent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Type(this : IComponent*, ct : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, ct)
    end
    def put_Type(this : IComponent*, ct : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Type.call(this, ct)
    end
    def get_DescLangID(this : IComponent*, lang_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DescLangID.call(this, lang_id)
    end
    def put_DescLangID(this : IComponent*, lang_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DescLangID.call(this, lang_id)
    end
    def get_Status(this : IComponent*, status : Win32cr::Media::DirectShow::ComponentStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Status(this : IComponent*, status : Win32cr::Media::DirectShow::ComponentStatus) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Status.call(this, status)
    end
    def get_Description(this : IComponent*, description : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, description)
    end
    def put_Description(this : IComponent*, description : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, description)
    end
    def clone(this : IComponent*, new_component : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_component)
    end

  end

  @[Extern]
  record IAnalogAudioComponentTypeVtbl,
    query_interface : Proc(IAnalogAudioComponentType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAnalogAudioComponentType*, UInt32),
    release : Proc(IAnalogAudioComponentType*, UInt32),
    get_type_info_count : Proc(IAnalogAudioComponentType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAnalogAudioComponentType*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAnalogAudioComponentType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAnalogAudioComponentType*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IAnalogAudioComponentType*, Win32cr::Media::DirectShow::ComponentCategory*, Win32cr::Foundation::HRESULT),
    put_Category : Proc(IAnalogAudioComponentType*, Win32cr::Media::DirectShow::ComponentCategory, Win32cr::Foundation::HRESULT),
    get_MediaMajorType : Proc(IAnalogAudioComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaMajorType : Proc(IAnalogAudioComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaMajorType : Proc(IAnalogAudioComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaMajorType : Proc(IAnalogAudioComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaSubType : Proc(IAnalogAudioComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaSubType : Proc(IAnalogAudioComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaSubType : Proc(IAnalogAudioComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaSubType : Proc(IAnalogAudioComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaFormatType : Proc(IAnalogAudioComponentType*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_MediaFormatType : Proc(IAnalogAudioComponentType*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__MediaFormatType : Proc(IAnalogAudioComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__MediaFormatType : Proc(IAnalogAudioComponentType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(IAnalogAudioComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    put_MediaType : Proc(IAnalogAudioComponentType*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    clone : Proc(IAnalogAudioComponentType*, Void**, Win32cr::Foundation::HRESULT),
    get_AnalogAudioMode : Proc(IAnalogAudioComponentType*, Win32cr::Media::DirectShow::TVAudioMode*, Win32cr::Foundation::HRESULT),
    put_AnalogAudioMode : Proc(IAnalogAudioComponentType*, Win32cr::Media::DirectShow::TVAudioMode, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2cfeb2a8-1787-4a24-a941-c6eaec39c842")]
  record IAnalogAudioComponentType, lpVtbl : IAnalogAudioComponentTypeVtbl* do
    GUID = LibC::GUID.new(0x2cfeb2a8_u32, 0x1787_u16, 0x4a24_u16, StaticArray[0xa9_u8, 0x41_u8, 0xc6_u8, 0xea_u8, 0xec_u8, 0x39_u8, 0xc8_u8, 0x42_u8])
    def query_interface(this : IAnalogAudioComponentType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAnalogAudioComponentType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAnalogAudioComponentType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAnalogAudioComponentType*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAnalogAudioComponentType*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAnalogAudioComponentType*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAnalogAudioComponentType*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Category(this : IAnalogAudioComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, category)
    end
    def put_Category(this : IAnalogAudioComponentType*, category : Win32cr::Media::DirectShow::ComponentCategory) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Category.call(this, category)
    end
    def get_MediaMajorType(this : IAnalogAudioComponentType*, media_major_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaMajorType.call(this, media_major_type)
    end
    def put_MediaMajorType(this : IAnalogAudioComponentType*, media_major_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaMajorType.call(this, media_major_type)
    end
    def get__MediaMajorType(this : IAnalogAudioComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaMajorType.call(this, media_major_type_guid)
    end
    def put__MediaMajorType(this : IAnalogAudioComponentType*, media_major_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaMajorType.call(this, media_major_type_guid)
    end
    def get_MediaSubType(this : IAnalogAudioComponentType*, media_sub_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaSubType.call(this, media_sub_type)
    end
    def put_MediaSubType(this : IAnalogAudioComponentType*, media_sub_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaSubType.call(this, media_sub_type)
    end
    def get__MediaSubType(this : IAnalogAudioComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaSubType.call(this, media_sub_type_guid)
    end
    def put__MediaSubType(this : IAnalogAudioComponentType*, media_sub_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaSubType.call(this, media_sub_type_guid)
    end
    def get_MediaFormatType(this : IAnalogAudioComponentType*, media_format_type : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaFormatType.call(this, media_format_type)
    end
    def put_MediaFormatType(this : IAnalogAudioComponentType*, media_format_type : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaFormatType.call(this, media_format_type)
    end
    def get__MediaFormatType(this : IAnalogAudioComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MediaFormatType.call(this, media_format_type_guid)
    end
    def put__MediaFormatType(this : IAnalogAudioComponentType*, media_format_type_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MediaFormatType.call(this, media_format_type_guid)
    end
    def get_MediaType(this : IAnalogAudioComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, media_type)
    end
    def put_MediaType(this : IAnalogAudioComponentType*, media_type : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaType.call(this, media_type)
    end
    def clone(this : IAnalogAudioComponentType*, new_ct : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_ct)
    end
    def get_AnalogAudioMode(this : IAnalogAudioComponentType*, mode : Win32cr::Media::DirectShow::TVAudioMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AnalogAudioMode.call(this, mode)
    end
    def put_AnalogAudioMode(this : IAnalogAudioComponentType*, mode : Win32cr::Media::DirectShow::TVAudioMode) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AnalogAudioMode.call(this, mode)
    end

  end

  @[Extern]
  record IMPEG2ComponentVtbl,
    query_interface : Proc(IMPEG2Component*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2Component*, UInt32),
    release : Proc(IMPEG2Component*, UInt32),
    get_type_info_count : Proc(IMPEG2Component*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMPEG2Component*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMPEG2Component*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMPEG2Component*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IMPEG2Component*, Void**, Win32cr::Foundation::HRESULT),
    put_Type : Proc(IMPEG2Component*, Void*, Win32cr::Foundation::HRESULT),
    get_DescLangID : Proc(IMPEG2Component*, Int32*, Win32cr::Foundation::HRESULT),
    put_DescLangID : Proc(IMPEG2Component*, Int32, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMPEG2Component*, Win32cr::Media::DirectShow::ComponentStatus*, Win32cr::Foundation::HRESULT),
    put_Status : Proc(IMPEG2Component*, Win32cr::Media::DirectShow::ComponentStatus, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IMPEG2Component*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Description : Proc(IMPEG2Component*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    clone : Proc(IMPEG2Component*, Void**, Win32cr::Foundation::HRESULT),
    get_PID : Proc(IMPEG2Component*, Int32*, Win32cr::Foundation::HRESULT),
    put_PID : Proc(IMPEG2Component*, Int32, Win32cr::Foundation::HRESULT),
    get_PCRPID : Proc(IMPEG2Component*, Int32*, Win32cr::Foundation::HRESULT),
    put_PCRPID : Proc(IMPEG2Component*, Int32, Win32cr::Foundation::HRESULT),
    get_ProgramNumber : Proc(IMPEG2Component*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProgramNumber : Proc(IMPEG2Component*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1493e353-1eb6-473c-802d-8e6b8ec9d2a9")]
  record IMPEG2Component, lpVtbl : IMPEG2ComponentVtbl* do
    GUID = LibC::GUID.new(0x1493e353_u32, 0x1eb6_u16, 0x473c_u16, StaticArray[0x80_u8, 0x2d_u8, 0x8e_u8, 0x6b_u8, 0x8e_u8, 0xc9_u8, 0xd2_u8, 0xa9_u8])
    def query_interface(this : IMPEG2Component*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2Component*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2Component*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMPEG2Component*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMPEG2Component*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMPEG2Component*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMPEG2Component*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Type(this : IMPEG2Component*, ct : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, ct)
    end
    def put_Type(this : IMPEG2Component*, ct : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Type.call(this, ct)
    end
    def get_DescLangID(this : IMPEG2Component*, lang_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DescLangID.call(this, lang_id)
    end
    def put_DescLangID(this : IMPEG2Component*, lang_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DescLangID.call(this, lang_id)
    end
    def get_Status(this : IMPEG2Component*, status : Win32cr::Media::DirectShow::ComponentStatus*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Status(this : IMPEG2Component*, status : Win32cr::Media::DirectShow::ComponentStatus) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Status.call(this, status)
    end
    def get_Description(this : IMPEG2Component*, description : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, description)
    end
    def put_Description(this : IMPEG2Component*, description : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Description.call(this, description)
    end
    def clone(this : IMPEG2Component*, new_component : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_component)
    end
    def get_PID(this : IMPEG2Component*, pid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PID.call(this, pid)
    end
    def put_PID(this : IMPEG2Component*, pid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PID.call(this, pid)
    end
    def get_PCRPID(this : IMPEG2Component*, pcrpid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PCRPID.call(this, pcrpid)
    end
    def put_PCRPID(this : IMPEG2Component*, pcrpid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PCRPID.call(this, pcrpid)
    end
    def get_ProgramNumber(this : IMPEG2Component*, program_number : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProgramNumber.call(this, program_number)
    end
    def put_ProgramNumber(this : IMPEG2Component*, program_number : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProgramNumber.call(this, program_number)
    end

  end

  @[Extern]
  record IEnumComponentsVtbl,
    query_interface : Proc(IEnumComponents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumComponents*, UInt32),
    release : Proc(IEnumComponents*, UInt32),
    next__ : Proc(IEnumComponents*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumComponents*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumComponents*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumComponents*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2a6e2939-2595-11d3-b64c-00c04f79498e")]
  record IEnumComponents, lpVtbl : IEnumComponentsVtbl* do
    GUID = LibC::GUID.new(0x2a6e2939_u32, 0x2595_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IEnumComponents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumComponents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumComponents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumComponents*, celt : UInt32, rgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumComponents*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumComponents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumComponents*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IComponentsVtbl,
    query_interface : Proc(IComponents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IComponents*, UInt32),
    release : Proc(IComponents*, UInt32),
    get_type_info_count : Proc(IComponents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IComponents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IComponents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IComponents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IComponents*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IComponents*, Void**, Win32cr::Foundation::HRESULT),
    enum_components : Proc(IComponents*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IComponents*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IComponents*, Void*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    remove : Proc(IComponents*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    clone : Proc(IComponents*, Void**, Win32cr::Foundation::HRESULT),
    put_Item : Proc(IComponents*, Win32cr::System::Com::VARIANT, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("39a48091-fffe-4182-a161-3ff802640e26")]
  record IComponents, lpVtbl : IComponentsVtbl* do
    GUID = LibC::GUID.new(0x39a48091_u32, 0xfffe_u16, 0x4182_u16, StaticArray[0xa1_u8, 0x61_u8, 0x3f_u8, 0xf8_u8, 0x2_u8, 0x64_u8, 0xe_u8, 0x26_u8])
    def query_interface(this : IComponents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IComponents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IComponents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IComponents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IComponents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IComponents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IComponents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IComponents*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : IComponents*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppNewEnum)
    end
    def enum_components(this : IComponents*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_components.call(this, ppNewEnum)
    end
    def get_Item(this : IComponents*, index : Win32cr::System::Com::VARIANT, ppComponent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, ppComponent)
    end
    def add(this : IComponents*, component : Void*, new_index : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, component, new_index)
    end
    def remove(this : IComponents*, index : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clone(this : IComponents*, new_list : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_list)
    end
    def put_Item(this : IComponents*, index : Win32cr::System::Com::VARIANT, ppComponent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Item.call(this, index, ppComponent)
    end

  end

  @[Extern]
  record IComponentsOldVtbl,
    query_interface : Proc(IComponentsOld*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IComponentsOld*, UInt32),
    release : Proc(IComponentsOld*, UInt32),
    get_type_info_count : Proc(IComponentsOld*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IComponentsOld*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IComponentsOld*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IComponentsOld*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IComponentsOld*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IComponentsOld*, Void**, Win32cr::Foundation::HRESULT),
    enum_components : Proc(IComponentsOld*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IComponentsOld*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IComponentsOld*, Void*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    remove : Proc(IComponentsOld*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    clone : Proc(IComponentsOld*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fcd01846-0e19-11d3-9d8e-00c04f72d980")]
  record IComponentsOld, lpVtbl : IComponentsOldVtbl* do
    GUID = LibC::GUID.new(0xfcd01846_u32, 0xe19_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
    def query_interface(this : IComponentsOld*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IComponentsOld*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IComponentsOld*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IComponentsOld*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IComponentsOld*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IComponentsOld*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IComponentsOld*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IComponentsOld*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get__NewEnum(this : IComponentsOld*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppNewEnum)
    end
    def enum_components(this : IComponentsOld*, ppNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_components.call(this, ppNewEnum)
    end
    def get_Item(this : IComponentsOld*, index : Win32cr::System::Com::VARIANT, ppComponent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, ppComponent)
    end
    def add(this : IComponentsOld*, component : Void*, new_index : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, component, new_index)
    end
    def remove(this : IComponentsOld*, index : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, index)
    end
    def clone(this : IComponentsOld*, new_list : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_list)
    end

  end

  @[Extern]
  record ILocatorVtbl,
    query_interface : Proc(ILocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ILocator*, UInt32),
    release : Proc(ILocator*, UInt32),
    get_type_info_count : Proc(ILocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(ILocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(ILocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(ILocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(ILocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(ILocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(ILocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(ILocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(ILocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(ILocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(ILocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(ILocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(ILocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(ILocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(ILocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(ILocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(ILocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(ILocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(ILocator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("286d7f89-760c-4f89-80c4-66841d2507aa")]
  record ILocator, lpVtbl : ILocatorVtbl* do
    GUID = LibC::GUID.new(0x286d7f89_u32, 0x760c_u16, 0x4f89_u16, StaticArray[0x80_u8, 0xc4_u8, 0x66_u8, 0x84_u8, 0x1d_u8, 0x25_u8, 0x7_u8, 0xaa_u8])
    def query_interface(this : ILocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ILocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ILocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : ILocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : ILocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : ILocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : ILocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : ILocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : ILocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : ILocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : ILocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : ILocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : ILocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : ILocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : ILocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : ILocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : ILocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : ILocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : ILocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : ILocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : ILocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : ILocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end

  end

  @[Extern]
  record IAnalogLocatorVtbl,
    query_interface : Proc(IAnalogLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAnalogLocator*, UInt32),
    release : Proc(IAnalogLocator*, UInt32),
    get_type_info_count : Proc(IAnalogLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IAnalogLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IAnalogLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IAnalogLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IAnalogLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IAnalogLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IAnalogLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IAnalogLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IAnalogLocator*, Void**, Win32cr::Foundation::HRESULT),
    get_VideoStandard : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::AnalogVideoStandard*, Win32cr::Foundation::HRESULT),
    put_VideoStandard : Proc(IAnalogLocator*, Win32cr::Media::DirectShow::AnalogVideoStandard, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("34d1f26b-e339-430d-abce-738cb48984dc")]
  record IAnalogLocator, lpVtbl : IAnalogLocatorVtbl* do
    GUID = LibC::GUID.new(0x34d1f26b_u32, 0xe339_u16, 0x430d_u16, StaticArray[0xab_u8, 0xce_u8, 0x73_u8, 0x8c_u8, 0xb4_u8, 0x89_u8, 0x84_u8, 0xdc_u8])
    def query_interface(this : IAnalogLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAnalogLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAnalogLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IAnalogLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IAnalogLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IAnalogLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IAnalogLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IAnalogLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IAnalogLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IAnalogLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IAnalogLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IAnalogLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IAnalogLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IAnalogLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IAnalogLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_VideoStandard(this : IAnalogLocator*, avs : Win32cr::Media::DirectShow::AnalogVideoStandard*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoStandard.call(this, avs)
    end
    def put_VideoStandard(this : IAnalogLocator*, avs : Win32cr::Media::DirectShow::AnalogVideoStandard) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VideoStandard.call(this, avs)
    end

  end

  @[Extern]
  record IDigitalLocatorVtbl,
    query_interface : Proc(IDigitalLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDigitalLocator*, UInt32),
    release : Proc(IDigitalLocator*, UInt32),
    get_type_info_count : Proc(IDigitalLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDigitalLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDigitalLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDigitalLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IDigitalLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IDigitalLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IDigitalLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IDigitalLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IDigitalLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IDigitalLocator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("19b595d8-839a-47f0-96df-4f194f3c768c")]
  record IDigitalLocator, lpVtbl : IDigitalLocatorVtbl* do
    GUID = LibC::GUID.new(0x19b595d8_u32, 0x839a_u16, 0x47f0_u16, StaticArray[0x96_u8, 0xdf_u8, 0x4f_u8, 0x19_u8, 0x4f_u8, 0x3c_u8, 0x76_u8, 0x8c_u8])
    def query_interface(this : IDigitalLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDigitalLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDigitalLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDigitalLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDigitalLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDigitalLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDigitalLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IDigitalLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IDigitalLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IDigitalLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IDigitalLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IDigitalLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IDigitalLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IDigitalLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IDigitalLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end

  end

  @[Extern]
  record IATSCLocatorVtbl,
    query_interface : Proc(IATSCLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSCLocator*, UInt32),
    release : Proc(IATSCLocator*, UInt32),
    get_type_info_count : Proc(IATSCLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IATSCLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IATSCLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IATSCLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IATSCLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IATSCLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IATSCLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IATSCLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IATSCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IATSCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IATSCLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IATSCLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IATSCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IATSCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IATSCLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IATSCLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IATSCLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IATSCLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IATSCLocator*, Void**, Win32cr::Foundation::HRESULT),
    get_PhysicalChannel : Proc(IATSCLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_PhysicalChannel : Proc(IATSCLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_TSID : Proc(IATSCLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_TSID : Proc(IATSCLocator*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bf8d986f-8c2b-4131-94d7-4d3d9fcc21ef")]
  record IATSCLocator, lpVtbl : IATSCLocatorVtbl* do
    GUID = LibC::GUID.new(0xbf8d986f_u32, 0x8c2b_u16, 0x4131_u16, StaticArray[0x94_u8, 0xd7_u8, 0x4d_u8, 0x3d_u8, 0x9f_u8, 0xcc_u8, 0x21_u8, 0xef_u8])
    def query_interface(this : IATSCLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSCLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSCLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IATSCLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IATSCLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IATSCLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IATSCLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IATSCLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IATSCLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IATSCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IATSCLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IATSCLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IATSCLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IATSCLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IATSCLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_PhysicalChannel(this : IATSCLocator*, physical_channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhysicalChannel.call(this, physical_channel)
    end
    def put_PhysicalChannel(this : IATSCLocator*, physical_channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PhysicalChannel.call(this, physical_channel)
    end
    def get_TSID(this : IATSCLocator*, tsid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TSID.call(this, tsid)
    end
    def put_TSID(this : IATSCLocator*, tsid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TSID.call(this, tsid)
    end

  end

  @[Extern]
  record IATSCLocator2Vtbl,
    query_interface : Proc(IATSCLocator2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSCLocator2*, UInt32),
    release : Proc(IATSCLocator2*, UInt32),
    get_type_info_count : Proc(IATSCLocator2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IATSCLocator2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IATSCLocator2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IATSCLocator2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IATSCLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IATSCLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IATSCLocator2*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IATSCLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IATSCLocator2*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IATSCLocator2*, Void**, Win32cr::Foundation::HRESULT),
    get_PhysicalChannel : Proc(IATSCLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_PhysicalChannel : Proc(IATSCLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_TSID : Proc(IATSCLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_TSID : Proc(IATSCLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_ProgramNumber : Proc(IATSCLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProgramNumber : Proc(IATSCLocator2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("612aa885-66cf-4090-ba0a-566f5312e4ca")]
  record IATSCLocator2, lpVtbl : IATSCLocator2Vtbl* do
    GUID = LibC::GUID.new(0x612aa885_u32, 0x66cf_u16, 0x4090_u16, StaticArray[0xba_u8, 0xa_u8, 0x56_u8, 0x6f_u8, 0x53_u8, 0x12_u8, 0xe4_u8, 0xca_u8])
    def query_interface(this : IATSCLocator2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSCLocator2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSCLocator2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IATSCLocator2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IATSCLocator2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IATSCLocator2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IATSCLocator2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IATSCLocator2*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IATSCLocator2*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IATSCLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IATSCLocator2*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IATSCLocator2*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IATSCLocator2*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IATSCLocator2*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IATSCLocator2*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_PhysicalChannel(this : IATSCLocator2*, physical_channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhysicalChannel.call(this, physical_channel)
    end
    def put_PhysicalChannel(this : IATSCLocator2*, physical_channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PhysicalChannel.call(this, physical_channel)
    end
    def get_TSID(this : IATSCLocator2*, tsid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TSID.call(this, tsid)
    end
    def put_TSID(this : IATSCLocator2*, tsid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TSID.call(this, tsid)
    end
    def get_ProgramNumber(this : IATSCLocator2*, program_number : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProgramNumber.call(this, program_number)
    end
    def put_ProgramNumber(this : IATSCLocator2*, program_number : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProgramNumber.call(this, program_number)
    end

  end

  @[Extern]
  record IDigitalCableLocatorVtbl,
    query_interface : Proc(IDigitalCableLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDigitalCableLocator*, UInt32),
    release : Proc(IDigitalCableLocator*, UInt32),
    get_type_info_count : Proc(IDigitalCableLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDigitalCableLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDigitalCableLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDigitalCableLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IDigitalCableLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IDigitalCableLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IDigitalCableLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IDigitalCableLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IDigitalCableLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IDigitalCableLocator*, Void**, Win32cr::Foundation::HRESULT),
    get_PhysicalChannel : Proc(IDigitalCableLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_PhysicalChannel : Proc(IDigitalCableLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_TSID : Proc(IDigitalCableLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_TSID : Proc(IDigitalCableLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_ProgramNumber : Proc(IDigitalCableLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_ProgramNumber : Proc(IDigitalCableLocator*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("48f66a11-171a-419a-9525-beeecd51584c")]
  record IDigitalCableLocator, lpVtbl : IDigitalCableLocatorVtbl* do
    GUID = LibC::GUID.new(0x48f66a11_u32, 0x171a_u16, 0x419a_u16, StaticArray[0x95_u8, 0x25_u8, 0xbe_u8, 0xee_u8, 0xcd_u8, 0x51_u8, 0x58_u8, 0x4c_u8])
    def query_interface(this : IDigitalCableLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDigitalCableLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDigitalCableLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDigitalCableLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDigitalCableLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDigitalCableLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDigitalCableLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IDigitalCableLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IDigitalCableLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IDigitalCableLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IDigitalCableLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IDigitalCableLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IDigitalCableLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IDigitalCableLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IDigitalCableLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_PhysicalChannel(this : IDigitalCableLocator*, physical_channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhysicalChannel.call(this, physical_channel)
    end
    def put_PhysicalChannel(this : IDigitalCableLocator*, physical_channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PhysicalChannel.call(this, physical_channel)
    end
    def get_TSID(this : IDigitalCableLocator*, tsid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TSID.call(this, tsid)
    end
    def put_TSID(this : IDigitalCableLocator*, tsid : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TSID.call(this, tsid)
    end
    def get_ProgramNumber(this : IDigitalCableLocator*, program_number : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProgramNumber.call(this, program_number)
    end
    def put_ProgramNumber(this : IDigitalCableLocator*, program_number : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ProgramNumber.call(this, program_number)
    end

  end

  @[Extern]
  record IDVBTLocatorVtbl,
    query_interface : Proc(IDVBTLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBTLocator*, UInt32),
    release : Proc(IDVBTLocator*, UInt32),
    get_type_info_count : Proc(IDVBTLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBTLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBTLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBTLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IDVBTLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IDVBTLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IDVBTLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IDVBTLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBTLocator*, Void**, Win32cr::Foundation::HRESULT),
    get_Bandwidth : Proc(IDVBTLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_Bandwidth : Proc(IDVBTLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_LPInnerFEC : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_LPInnerFEC : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_LPInnerFECRate : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_LPInnerFECRate : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_HAlpha : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::HierarchyAlpha*, Win32cr::Foundation::HRESULT),
    put_HAlpha : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::HierarchyAlpha, Win32cr::Foundation::HRESULT),
    get_Guard : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::GuardInterval*, Win32cr::Foundation::HRESULT),
    put_Guard : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::GuardInterval, Win32cr::Foundation::HRESULT),
    get_Mode : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::TransmissionMode*, Win32cr::Foundation::HRESULT),
    put_Mode : Proc(IDVBTLocator*, Win32cr::Media::DirectShow::TransmissionMode, Win32cr::Foundation::HRESULT),
    get_OtherFrequencyInUse : Proc(IDVBTLocator*, Int16*, Win32cr::Foundation::HRESULT),
    put_OtherFrequencyInUse : Proc(IDVBTLocator*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8664da16-dda2-42ac-926a-c18f9127c302")]
  record IDVBTLocator, lpVtbl : IDVBTLocatorVtbl* do
    GUID = LibC::GUID.new(0x8664da16_u32, 0xdda2_u16, 0x42ac_u16, StaticArray[0x92_u8, 0x6a_u8, 0xc1_u8, 0x8f_u8, 0x91_u8, 0x27_u8, 0xc3_u8, 0x2_u8])
    def query_interface(this : IDVBTLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBTLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBTLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBTLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBTLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBTLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBTLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IDVBTLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IDVBTLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IDVBTLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IDVBTLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IDVBTLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IDVBTLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IDVBTLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_Bandwidth(this : IDVBTLocator*, band_width_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Bandwidth.call(this, band_width_val)
    end
    def put_Bandwidth(this : IDVBTLocator*, bandwidth_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Bandwidth.call(this, bandwidth_val)
    end
    def get_LPInnerFEC(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LPInnerFEC.call(this, fec)
    end
    def put_LPInnerFEC(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LPInnerFEC.call(this, fec)
    end
    def get_LPInnerFECRate(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LPInnerFECRate.call(this, fec)
    end
    def put_LPInnerFECRate(this : IDVBTLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LPInnerFECRate.call(this, fec)
    end
    def get_HAlpha(this : IDVBTLocator*, alpha : Win32cr::Media::DirectShow::HierarchyAlpha*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HAlpha.call(this, alpha)
    end
    def put_HAlpha(this : IDVBTLocator*, alpha : Win32cr::Media::DirectShow::HierarchyAlpha) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HAlpha.call(this, alpha)
    end
    def get_Guard(this : IDVBTLocator*, gi : Win32cr::Media::DirectShow::GuardInterval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Guard.call(this, gi)
    end
    def put_Guard(this : IDVBTLocator*, gi : Win32cr::Media::DirectShow::GuardInterval) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Guard.call(this, gi)
    end
    def get_Mode(this : IDVBTLocator*, mode : Win32cr::Media::DirectShow::TransmissionMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mode.call(this, mode)
    end
    def put_Mode(this : IDVBTLocator*, mode : Win32cr::Media::DirectShow::TransmissionMode) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mode.call(this, mode)
    end
    def get_OtherFrequencyInUse(this : IDVBTLocator*, other_frequency_in_use_val : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OtherFrequencyInUse.call(this, other_frequency_in_use_val)
    end
    def put_OtherFrequencyInUse(this : IDVBTLocator*, other_frequency_in_use_val : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OtherFrequencyInUse.call(this, other_frequency_in_use_val)
    end

  end

  @[Extern]
  record IDVBTLocator2Vtbl,
    query_interface : Proc(IDVBTLocator2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBTLocator2*, UInt32),
    release : Proc(IDVBTLocator2*, UInt32),
    get_type_info_count : Proc(IDVBTLocator2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBTLocator2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBTLocator2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBTLocator2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IDVBTLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IDVBTLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IDVBTLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IDVBTLocator2*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBTLocator2*, Void**, Win32cr::Foundation::HRESULT),
    get_Bandwidth : Proc(IDVBTLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Bandwidth : Proc(IDVBTLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_LPInnerFEC : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_LPInnerFEC : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_LPInnerFECRate : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_LPInnerFECRate : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_HAlpha : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::HierarchyAlpha*, Win32cr::Foundation::HRESULT),
    put_HAlpha : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::HierarchyAlpha, Win32cr::Foundation::HRESULT),
    get_Guard : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::GuardInterval*, Win32cr::Foundation::HRESULT),
    put_Guard : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::GuardInterval, Win32cr::Foundation::HRESULT),
    get_Mode : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::TransmissionMode*, Win32cr::Foundation::HRESULT),
    put_Mode : Proc(IDVBTLocator2*, Win32cr::Media::DirectShow::TransmissionMode, Win32cr::Foundation::HRESULT),
    get_OtherFrequencyInUse : Proc(IDVBTLocator2*, Int16*, Win32cr::Foundation::HRESULT),
    put_OtherFrequencyInUse : Proc(IDVBTLocator2*, Int16, Win32cr::Foundation::HRESULT),
    get_PhysicalLayerPipeId : Proc(IDVBTLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_PhysicalLayerPipeId : Proc(IDVBTLocator2*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("448a2edf-ae95-4b43-a3cc-747843c453d4")]
  record IDVBTLocator2, lpVtbl : IDVBTLocator2Vtbl* do
    GUID = LibC::GUID.new(0x448a2edf_u32, 0xae95_u16, 0x4b43_u16, StaticArray[0xa3_u8, 0xcc_u8, 0x74_u8, 0x78_u8, 0x43_u8, 0xc4_u8, 0x53_u8, 0xd4_u8])
    def query_interface(this : IDVBTLocator2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBTLocator2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBTLocator2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBTLocator2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBTLocator2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBTLocator2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBTLocator2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IDVBTLocator2*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IDVBTLocator2*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IDVBTLocator2*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IDVBTLocator2*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IDVBTLocator2*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IDVBTLocator2*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IDVBTLocator2*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_Bandwidth(this : IDVBTLocator2*, band_width_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Bandwidth.call(this, band_width_val)
    end
    def put_Bandwidth(this : IDVBTLocator2*, bandwidth_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Bandwidth.call(this, bandwidth_val)
    end
    def get_LPInnerFEC(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LPInnerFEC.call(this, fec)
    end
    def put_LPInnerFEC(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LPInnerFEC.call(this, fec)
    end
    def get_LPInnerFECRate(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LPInnerFECRate.call(this, fec)
    end
    def put_LPInnerFECRate(this : IDVBTLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LPInnerFECRate.call(this, fec)
    end
    def get_HAlpha(this : IDVBTLocator2*, alpha : Win32cr::Media::DirectShow::HierarchyAlpha*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HAlpha.call(this, alpha)
    end
    def put_HAlpha(this : IDVBTLocator2*, alpha : Win32cr::Media::DirectShow::HierarchyAlpha) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HAlpha.call(this, alpha)
    end
    def get_Guard(this : IDVBTLocator2*, gi : Win32cr::Media::DirectShow::GuardInterval*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Guard.call(this, gi)
    end
    def put_Guard(this : IDVBTLocator2*, gi : Win32cr::Media::DirectShow::GuardInterval) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Guard.call(this, gi)
    end
    def get_Mode(this : IDVBTLocator2*, mode : Win32cr::Media::DirectShow::TransmissionMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Mode.call(this, mode)
    end
    def put_Mode(this : IDVBTLocator2*, mode : Win32cr::Media::DirectShow::TransmissionMode) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Mode.call(this, mode)
    end
    def get_OtherFrequencyInUse(this : IDVBTLocator2*, other_frequency_in_use_val : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OtherFrequencyInUse.call(this, other_frequency_in_use_val)
    end
    def put_OtherFrequencyInUse(this : IDVBTLocator2*, other_frequency_in_use_val : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OtherFrequencyInUse.call(this, other_frequency_in_use_val)
    end
    def get_PhysicalLayerPipeId(this : IDVBTLocator2*, physical_layer_pipe_id_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PhysicalLayerPipeId.call(this, physical_layer_pipe_id_val)
    end
    def put_PhysicalLayerPipeId(this : IDVBTLocator2*, physical_layer_pipe_id_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PhysicalLayerPipeId.call(this, physical_layer_pipe_id_val)
    end

  end

  @[Extern]
  record IDVBSLocatorVtbl,
    query_interface : Proc(IDVBSLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBSLocator*, UInt32),
    release : Proc(IDVBSLocator*, UInt32),
    get_type_info_count : Proc(IDVBSLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBSLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBSLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBSLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IDVBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IDVBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IDVBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IDVBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBSLocator*, Void**, Win32cr::Foundation::HRESULT),
    get_SignalPolarisation : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::Polarisation*, Win32cr::Foundation::HRESULT),
    put_SignalPolarisation : Proc(IDVBSLocator*, Win32cr::Media::DirectShow::Polarisation, Win32cr::Foundation::HRESULT),
    get_WestPosition : Proc(IDVBSLocator*, Int16*, Win32cr::Foundation::HRESULT),
    put_WestPosition : Proc(IDVBSLocator*, Int16, Win32cr::Foundation::HRESULT),
    get_OrbitalPosition : Proc(IDVBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_OrbitalPosition : Proc(IDVBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_Azimuth : Proc(IDVBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_Azimuth : Proc(IDVBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_Elevation : Proc(IDVBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_Elevation : Proc(IDVBSLocator*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3d7c353c-0d04-45f1-a742-f97cc1188dc8")]
  record IDVBSLocator, lpVtbl : IDVBSLocatorVtbl* do
    GUID = LibC::GUID.new(0x3d7c353c_u32, 0xd04_u16, 0x45f1_u16, StaticArray[0xa7_u8, 0x42_u8, 0xf9_u8, 0x7c_u8, 0xc1_u8, 0x18_u8, 0x8d_u8, 0xc8_u8])
    def query_interface(this : IDVBSLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBSLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBSLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBSLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBSLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBSLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBSLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IDVBSLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IDVBSLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IDVBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IDVBSLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IDVBSLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IDVBSLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IDVBSLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IDVBSLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_SignalPolarisation(this : IDVBSLocator*, polarisation_val : Win32cr::Media::DirectShow::Polarisation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalPolarisation.call(this, polarisation_val)
    end
    def put_SignalPolarisation(this : IDVBSLocator*, polarisation_val : Win32cr::Media::DirectShow::Polarisation) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalPolarisation.call(this, polarisation_val)
    end
    def get_WestPosition(this : IDVBSLocator*, west_longitude : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WestPosition.call(this, west_longitude)
    end
    def put_WestPosition(this : IDVBSLocator*, west_longitude : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WestPosition.call(this, west_longitude)
    end
    def get_OrbitalPosition(this : IDVBSLocator*, longitude : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OrbitalPosition.call(this, longitude)
    end
    def put_OrbitalPosition(this : IDVBSLocator*, longitude : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OrbitalPosition.call(this, longitude)
    end
    def get_Azimuth(this : IDVBSLocator*, azimuth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Azimuth.call(this, azimuth)
    end
    def put_Azimuth(this : IDVBSLocator*, azimuth : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Azimuth.call(this, azimuth)
    end
    def get_Elevation(this : IDVBSLocator*, elevation : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Elevation.call(this, elevation)
    end
    def put_Elevation(this : IDVBSLocator*, elevation : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Elevation.call(this, elevation)
    end

  end

  @[Extern]
  record IDVBSLocator2Vtbl,
    query_interface : Proc(IDVBSLocator2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBSLocator2*, UInt32),
    release : Proc(IDVBSLocator2*, UInt32),
    get_type_info_count : Proc(IDVBSLocator2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBSLocator2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBSLocator2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBSLocator2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBSLocator2*, Void**, Win32cr::Foundation::HRESULT),
    get_SignalPolarisation : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::Polarisation*, Win32cr::Foundation::HRESULT),
    put_SignalPolarisation : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::Polarisation, Win32cr::Foundation::HRESULT),
    get_WestPosition : Proc(IDVBSLocator2*, Int16*, Win32cr::Foundation::HRESULT),
    put_WestPosition : Proc(IDVBSLocator2*, Int16, Win32cr::Foundation::HRESULT),
    get_OrbitalPosition : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_OrbitalPosition : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_Azimuth : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Azimuth : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_Elevation : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Elevation : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_DiseqLNBSource : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::LNB_Source*, Win32cr::Foundation::HRESULT),
    put_DiseqLNBSource : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::LNB_Source, Win32cr::Foundation::HRESULT),
    get_LocalOscillatorOverrideLow : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_LocalOscillatorOverrideLow : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_LocalOscillatorOverrideHigh : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_LocalOscillatorOverrideHigh : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_LocalLNBSwitchOverride : Proc(IDVBSLocator2*, Int32*, Win32cr::Foundation::HRESULT),
    put_LocalLNBSwitchOverride : Proc(IDVBSLocator2*, Int32, Win32cr::Foundation::HRESULT),
    get_LocalSpectralInversionOverride : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::SpectralInversion*, Win32cr::Foundation::HRESULT),
    put_LocalSpectralInversionOverride : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::SpectralInversion, Win32cr::Foundation::HRESULT),
    get_SignalRollOff : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::RollOff*, Win32cr::Foundation::HRESULT),
    put_SignalRollOff : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::RollOff, Win32cr::Foundation::HRESULT),
    get_SignalPilot : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::Pilot*, Win32cr::Foundation::HRESULT),
    put_SignalPilot : Proc(IDVBSLocator2*, Win32cr::Media::DirectShow::Pilot, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6044634a-1733-4f99-b982-5fb12afce4f0")]
  record IDVBSLocator2, lpVtbl : IDVBSLocator2Vtbl* do
    GUID = LibC::GUID.new(0x6044634a_u32, 0x1733_u16, 0x4f99_u16, StaticArray[0xb9_u8, 0x82_u8, 0x5f_u8, 0xb1_u8, 0x2a_u8, 0xfc_u8, 0xe4_u8, 0xf0_u8])
    def query_interface(this : IDVBSLocator2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBSLocator2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBSLocator2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBSLocator2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBSLocator2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBSLocator2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBSLocator2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IDVBSLocator2*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IDVBSLocator2*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IDVBSLocator2*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IDVBSLocator2*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IDVBSLocator2*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IDVBSLocator2*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IDVBSLocator2*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IDVBSLocator2*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_SignalPolarisation(this : IDVBSLocator2*, polarisation_val : Win32cr::Media::DirectShow::Polarisation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalPolarisation.call(this, polarisation_val)
    end
    def put_SignalPolarisation(this : IDVBSLocator2*, polarisation_val : Win32cr::Media::DirectShow::Polarisation) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalPolarisation.call(this, polarisation_val)
    end
    def get_WestPosition(this : IDVBSLocator2*, west_longitude : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WestPosition.call(this, west_longitude)
    end
    def put_WestPosition(this : IDVBSLocator2*, west_longitude : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WestPosition.call(this, west_longitude)
    end
    def get_OrbitalPosition(this : IDVBSLocator2*, longitude : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OrbitalPosition.call(this, longitude)
    end
    def put_OrbitalPosition(this : IDVBSLocator2*, longitude : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OrbitalPosition.call(this, longitude)
    end
    def get_Azimuth(this : IDVBSLocator2*, azimuth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Azimuth.call(this, azimuth)
    end
    def put_Azimuth(this : IDVBSLocator2*, azimuth : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Azimuth.call(this, azimuth)
    end
    def get_Elevation(this : IDVBSLocator2*, elevation : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Elevation.call(this, elevation)
    end
    def put_Elevation(this : IDVBSLocator2*, elevation : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Elevation.call(this, elevation)
    end
    def get_DiseqLNBSource(this : IDVBSLocator2*, diseq_lnb_source_val : Win32cr::Media::DirectShow::LNB_Source*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DiseqLNBSource.call(this, diseq_lnb_source_val)
    end
    def put_DiseqLNBSource(this : IDVBSLocator2*, diseq_lnb_source_val : Win32cr::Media::DirectShow::LNB_Source) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DiseqLNBSource.call(this, diseq_lnb_source_val)
    end
    def get_LocalOscillatorOverrideLow(this : IDVBSLocator2*, local_oscillator_override_low_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalOscillatorOverrideLow.call(this, local_oscillator_override_low_val)
    end
    def put_LocalOscillatorOverrideLow(this : IDVBSLocator2*, local_oscillator_override_low_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalOscillatorOverrideLow.call(this, local_oscillator_override_low_val)
    end
    def get_LocalOscillatorOverrideHigh(this : IDVBSLocator2*, local_oscillator_override_high_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalOscillatorOverrideHigh.call(this, local_oscillator_override_high_val)
    end
    def put_LocalOscillatorOverrideHigh(this : IDVBSLocator2*, local_oscillator_override_high_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalOscillatorOverrideHigh.call(this, local_oscillator_override_high_val)
    end
    def get_LocalLNBSwitchOverride(this : IDVBSLocator2*, local_lnb_switch_override_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalLNBSwitchOverride.call(this, local_lnb_switch_override_val)
    end
    def put_LocalLNBSwitchOverride(this : IDVBSLocator2*, local_lnb_switch_override_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalLNBSwitchOverride.call(this, local_lnb_switch_override_val)
    end
    def get_LocalSpectralInversionOverride(this : IDVBSLocator2*, local_spectral_inversion_override_val : Win32cr::Media::DirectShow::SpectralInversion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LocalSpectralInversionOverride.call(this, local_spectral_inversion_override_val)
    end
    def put_LocalSpectralInversionOverride(this : IDVBSLocator2*, local_spectral_inversion_override_val : Win32cr::Media::DirectShow::SpectralInversion) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LocalSpectralInversionOverride.call(this, local_spectral_inversion_override_val)
    end
    def get_SignalRollOff(this : IDVBSLocator2*, roll_off_val : Win32cr::Media::DirectShow::RollOff*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalRollOff.call(this, roll_off_val)
    end
    def put_SignalRollOff(this : IDVBSLocator2*, roll_off_val : Win32cr::Media::DirectShow::RollOff) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalRollOff.call(this, roll_off_val)
    end
    def get_SignalPilot(this : IDVBSLocator2*, pilot_val : Win32cr::Media::DirectShow::Pilot*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalPilot.call(this, pilot_val)
    end
    def put_SignalPilot(this : IDVBSLocator2*, pilot_val : Win32cr::Media::DirectShow::Pilot) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalPilot.call(this, pilot_val)
    end

  end

  @[Extern]
  record IDVBCLocatorVtbl,
    query_interface : Proc(IDVBCLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVBCLocator*, UInt32),
    release : Proc(IDVBCLocator*, UInt32),
    get_type_info_count : Proc(IDVBCLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDVBCLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDVBCLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDVBCLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IDVBCLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IDVBCLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IDVBCLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IDVBCLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IDVBCLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IDVBCLocator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6e42f36e-1dd2-43c4-9f78-69d25ae39034")]
  record IDVBCLocator, lpVtbl : IDVBCLocatorVtbl* do
    GUID = LibC::GUID.new(0x6e42f36e_u32, 0x1dd2_u16, 0x43c4_u16, StaticArray[0x9f_u8, 0x78_u8, 0x69_u8, 0xd2_u8, 0x5a_u8, 0xe3_u8, 0x90_u8, 0x34_u8])
    def query_interface(this : IDVBCLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVBCLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVBCLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDVBCLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDVBCLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDVBCLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDVBCLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IDVBCLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IDVBCLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IDVBCLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IDVBCLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IDVBCLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IDVBCLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IDVBCLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IDVBCLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end

  end

  @[Extern]
  record IISDBSLocatorVtbl,
    query_interface : Proc(IISDBSLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDBSLocator*, UInt32),
    release : Proc(IISDBSLocator*, UInt32),
    get_type_info_count : Proc(IISDBSLocator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IISDBSLocator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IISDBSLocator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IISDBSLocator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_CarrierFrequency : Proc(IISDBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_CarrierFrequency : Proc(IISDBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_InnerFEC : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_InnerFEC : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_InnerFECRate : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_InnerFECRate : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_OuterFEC : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::FECMethod*, Win32cr::Foundation::HRESULT),
    put_OuterFEC : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::FECMethod, Win32cr::Foundation::HRESULT),
    get_OuterFECRate : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*, Win32cr::Foundation::HRESULT),
    put_OuterFECRate : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::BinaryConvolutionCodeRate, Win32cr::Foundation::HRESULT),
    get_Modulation : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::ModulationType*, Win32cr::Foundation::HRESULT),
    put_Modulation : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::ModulationType, Win32cr::Foundation::HRESULT),
    get_SymbolRate : Proc(IISDBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_SymbolRate : Proc(IISDBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    clone : Proc(IISDBSLocator*, Void**, Win32cr::Foundation::HRESULT),
    get_SignalPolarisation : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::Polarisation*, Win32cr::Foundation::HRESULT),
    put_SignalPolarisation : Proc(IISDBSLocator*, Win32cr::Media::DirectShow::Polarisation, Win32cr::Foundation::HRESULT),
    get_WestPosition : Proc(IISDBSLocator*, Int16*, Win32cr::Foundation::HRESULT),
    put_WestPosition : Proc(IISDBSLocator*, Int16, Win32cr::Foundation::HRESULT),
    get_OrbitalPosition : Proc(IISDBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_OrbitalPosition : Proc(IISDBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_Azimuth : Proc(IISDBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_Azimuth : Proc(IISDBSLocator*, Int32, Win32cr::Foundation::HRESULT),
    get_Elevation : Proc(IISDBSLocator*, Int32*, Win32cr::Foundation::HRESULT),
    put_Elevation : Proc(IISDBSLocator*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c9897087-e29c-473f-9e4b-7072123dea14")]
  record IISDBSLocator, lpVtbl : IISDBSLocatorVtbl* do
    GUID = LibC::GUID.new(0xc9897087_u32, 0xe29c_u16, 0x473f_u16, StaticArray[0x9e_u8, 0x4b_u8, 0x70_u8, 0x72_u8, 0x12_u8, 0x3d_u8, 0xea_u8, 0x14_u8])
    def query_interface(this : IISDBSLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDBSLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDBSLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IISDBSLocator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IISDBSLocator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IISDBSLocator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IISDBSLocator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_CarrierFrequency(this : IISDBSLocator*, frequency : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CarrierFrequency.call(this, frequency)
    end
    def put_CarrierFrequency(this : IISDBSLocator*, frequency : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CarrierFrequency.call(this, frequency)
    end
    def get_InnerFEC(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFEC.call(this, fec)
    end
    def put_InnerFEC(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFEC.call(this, fec)
    end
    def get_InnerFECRate(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InnerFECRate.call(this, fec)
    end
    def put_InnerFECRate(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InnerFECRate.call(this, fec)
    end
    def get_OuterFEC(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFEC.call(this, fec)
    end
    def put_OuterFEC(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::FECMethod) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFEC.call(this, fec)
    end
    def get_OuterFECRate(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OuterFECRate.call(this, fec)
    end
    def put_OuterFECRate(this : IISDBSLocator*, fec : Win32cr::Media::DirectShow::BinaryConvolutionCodeRate) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OuterFECRate.call(this, fec)
    end
    def get_Modulation(this : IISDBSLocator*, modulation : Win32cr::Media::DirectShow::ModulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Modulation.call(this, modulation)
    end
    def put_Modulation(this : IISDBSLocator*, modulation : Win32cr::Media::DirectShow::ModulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Modulation.call(this, modulation)
    end
    def get_SymbolRate(this : IISDBSLocator*, rate : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SymbolRate.call(this, rate)
    end
    def put_SymbolRate(this : IISDBSLocator*, rate : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SymbolRate.call(this, rate)
    end
    def clone(this : IISDBSLocator*, new_locator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, new_locator)
    end
    def get_SignalPolarisation(this : IISDBSLocator*, polarisation_val : Win32cr::Media::DirectShow::Polarisation*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SignalPolarisation.call(this, polarisation_val)
    end
    def put_SignalPolarisation(this : IISDBSLocator*, polarisation_val : Win32cr::Media::DirectShow::Polarisation) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SignalPolarisation.call(this, polarisation_val)
    end
    def get_WestPosition(this : IISDBSLocator*, west_longitude : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WestPosition.call(this, west_longitude)
    end
    def put_WestPosition(this : IISDBSLocator*, west_longitude : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WestPosition.call(this, west_longitude)
    end
    def get_OrbitalPosition(this : IISDBSLocator*, longitude : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OrbitalPosition.call(this, longitude)
    end
    def put_OrbitalPosition(this : IISDBSLocator*, longitude : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OrbitalPosition.call(this, longitude)
    end
    def get_Azimuth(this : IISDBSLocator*, azimuth : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Azimuth.call(this, azimuth)
    end
    def put_Azimuth(this : IISDBSLocator*, azimuth : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Azimuth.call(this, azimuth)
    end
    def get_Elevation(this : IISDBSLocator*, elevation : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Elevation.call(this, elevation)
    end
    def put_Elevation(this : IISDBSLocator*, elevation : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Elevation.call(this, elevation)
    end

  end

  @[Extern]
  record IESOpenMmiEventVtbl,
    query_interface : Proc(IESOpenMmiEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESOpenMmiEvent*, UInt32),
    release : Proc(IESOpenMmiEvent*, UInt32),
    get_event_id : Proc(IESOpenMmiEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESOpenMmiEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESOpenMmiEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESOpenMmiEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESOpenMmiEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dialog_number : Proc(IESOpenMmiEvent*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_dialog_type : Proc(IESOpenMmiEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_dialog_data : Proc(IESOpenMmiEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_dialog_string_data : Proc(IESOpenMmiEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ba4b6526-1a35-4635-8b56-3ec612746a8c")]
  record IESOpenMmiEvent, lpVtbl : IESOpenMmiEventVtbl* do
    GUID = LibC::GUID.new(0xba4b6526_u32, 0x1a35_u16, 0x4635_u16, StaticArray[0x8b_u8, 0x56_u8, 0x3e_u8, 0xc6_u8, 0x12_u8, 0x74_u8, 0x6a_u8, 0x8c_u8])
    def query_interface(this : IESOpenMmiEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESOpenMmiEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESOpenMmiEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESOpenMmiEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESOpenMmiEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESOpenMmiEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESOpenMmiEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESOpenMmiEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end
    def get_dialog_number(this : IESOpenMmiEvent*, pDialogRequest : UInt32*, pDialogNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dialog_number.call(this, pDialogRequest, pDialogNumber)
    end
    def get_dialog_type(this : IESOpenMmiEvent*, guidDialogType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dialog_type.call(this, guidDialogType)
    end
    def get_dialog_data(this : IESOpenMmiEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dialog_data.call(this, pbData)
    end
    def get_dialog_string_data(this : IESOpenMmiEvent*, pbstrBaseUrl : Win32cr::Foundation::BSTR*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dialog_string_data.call(this, pbstrBaseUrl, pbstrData)
    end

  end

  @[Extern]
  record IESCloseMmiEventVtbl,
    query_interface : Proc(IESCloseMmiEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESCloseMmiEvent*, UInt32),
    release : Proc(IESCloseMmiEvent*, UInt32),
    get_event_id : Proc(IESCloseMmiEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESCloseMmiEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESCloseMmiEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESCloseMmiEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESCloseMmiEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_dialog_number : Proc(IESCloseMmiEvent*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6b80e96f-55e2-45aa-b754-0c23c8e7d5c1")]
  record IESCloseMmiEvent, lpVtbl : IESCloseMmiEventVtbl* do
    GUID = LibC::GUID.new(0x6b80e96f_u32, 0x55e2_u16, 0x45aa_u16, StaticArray[0xb7_u8, 0x54_u8, 0xc_u8, 0x23_u8, 0xc8_u8, 0xe7_u8, 0xd5_u8, 0xc1_u8])
    def query_interface(this : IESCloseMmiEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESCloseMmiEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESCloseMmiEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESCloseMmiEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESCloseMmiEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESCloseMmiEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESCloseMmiEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESCloseMmiEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end
    def get_dialog_number(this : IESCloseMmiEvent*, pDialogNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dialog_number.call(this, pDialogNumber)
    end

  end

  @[Extern]
  record IESValueUpdatedEventVtbl,
    query_interface : Proc(IESValueUpdatedEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESValueUpdatedEvent*, UInt32),
    release : Proc(IESValueUpdatedEvent*, UInt32),
    get_event_id : Proc(IESValueUpdatedEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESValueUpdatedEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESValueUpdatedEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESValueUpdatedEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESValueUpdatedEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_value_names : Proc(IESValueUpdatedEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8a24c46e-bb63-4664-8602-5d9c718c146d")]
  record IESValueUpdatedEvent, lpVtbl : IESValueUpdatedEventVtbl* do
    GUID = LibC::GUID.new(0x8a24c46e_u32, 0xbb63_u16, 0x4664_u16, StaticArray[0x86_u8, 0x2_u8, 0x5d_u8, 0x9c_u8, 0x71_u8, 0x8c_u8, 0x14_u8, 0x6d_u8])
    def query_interface(this : IESValueUpdatedEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESValueUpdatedEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESValueUpdatedEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESValueUpdatedEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESValueUpdatedEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESValueUpdatedEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESValueUpdatedEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESValueUpdatedEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end
    def get_value_names(this : IESValueUpdatedEvent*, pbstrNames : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_names.call(this, pbstrNames)
    end

  end

  @[Extern]
  record IESRequestTunerEventVtbl,
    query_interface : Proc(IESRequestTunerEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESRequestTunerEvent*, UInt32),
    release : Proc(IESRequestTunerEvent*, UInt32),
    get_event_id : Proc(IESRequestTunerEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESRequestTunerEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESRequestTunerEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESRequestTunerEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESRequestTunerEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_priority : Proc(IESRequestTunerEvent*, UInt8*, Win32cr::Foundation::HRESULT),
    get_reason : Proc(IESRequestTunerEvent*, UInt8*, Win32cr::Foundation::HRESULT),
    get_consequences : Proc(IESRequestTunerEvent*, UInt8*, Win32cr::Foundation::HRESULT),
    get_estimated_time : Proc(IESRequestTunerEvent*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("54c7a5e8-c3bb-4f51-af14-e0e2c0e34c6d")]
  record IESRequestTunerEvent, lpVtbl : IESRequestTunerEventVtbl* do
    GUID = LibC::GUID.new(0x54c7a5e8_u32, 0xc3bb_u16, 0x4f51_u16, StaticArray[0xaf_u8, 0x14_u8, 0xe0_u8, 0xe2_u8, 0xc0_u8, 0xe3_u8, 0x4c_u8, 0x6d_u8])
    def query_interface(this : IESRequestTunerEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESRequestTunerEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESRequestTunerEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESRequestTunerEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESRequestTunerEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESRequestTunerEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESRequestTunerEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESRequestTunerEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end
    def get_priority(this : IESRequestTunerEvent*, pbyPriority : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_priority.call(this, pbyPriority)
    end
    def get_reason(this : IESRequestTunerEvent*, pbyReason : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_reason.call(this, pbyReason)
    end
    def get_consequences(this : IESRequestTunerEvent*, pbyConsequences : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_consequences.call(this, pbyConsequences)
    end
    def get_estimated_time(this : IESRequestTunerEvent*, pdwEstimatedTime : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_estimated_time.call(this, pdwEstimatedTime)
    end

  end

  @[Extern]
  record IESIsdbCasResponseEventVtbl,
    query_interface : Proc(IESIsdbCasResponseEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESIsdbCasResponseEvent*, UInt32),
    release : Proc(IESIsdbCasResponseEvent*, UInt32),
    get_event_id : Proc(IESIsdbCasResponseEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESIsdbCasResponseEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESIsdbCasResponseEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESIsdbCasResponseEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESIsdbCasResponseEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_request_id : Proc(IESIsdbCasResponseEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IESIsdbCasResponseEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_data_length : Proc(IESIsdbCasResponseEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_response_data : Proc(IESIsdbCasResponseEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2017cb03-dc0f-4c24-83ca-36307b2cd19f")]
  record IESIsdbCasResponseEvent, lpVtbl : IESIsdbCasResponseEventVtbl* do
    GUID = LibC::GUID.new(0x2017cb03_u32, 0xdc0f_u16, 0x4c24_u16, StaticArray[0x83_u8, 0xca_u8, 0x36_u8, 0x30_u8, 0x7b_u8, 0x2c_u8, 0xd1_u8, 0x9f_u8])
    def query_interface(this : IESIsdbCasResponseEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESIsdbCasResponseEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESIsdbCasResponseEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESIsdbCasResponseEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESIsdbCasResponseEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESIsdbCasResponseEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESIsdbCasResponseEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESIsdbCasResponseEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end
    def get_request_id(this : IESIsdbCasResponseEvent*, pRequestId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_request_id.call(this, pRequestId)
    end
    def get_status(this : IESIsdbCasResponseEvent*, pStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, pStatus)
    end
    def get_data_length(this : IESIsdbCasResponseEvent*, pRequestLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_length.call(this, pRequestLength)
    end
    def get_response_data(this : IESIsdbCasResponseEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_response_data.call(this, pbData)
    end

  end

  @[Extern]
  record IGpnvsCommonBaseVtbl,
    query_interface : Proc(IGpnvsCommonBase*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGpnvsCommonBase*, UInt32),
    release : Proc(IGpnvsCommonBase*, UInt32),
    get_value_update_name : Proc(IGpnvsCommonBase*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("907e0b5c-e42d-4f04-91f0-26f401f36907")]
  record IGpnvsCommonBase, lpVtbl : IGpnvsCommonBaseVtbl* do
    GUID = LibC::GUID.new(0x907e0b5c_u32, 0xe42d_u16, 0x4f04_u16, StaticArray[0x91_u8, 0xf0_u8, 0x26_u8, 0xf4_u8, 0x1_u8, 0xf3_u8, 0x69_u8, 0x7_u8])
    def query_interface(this : IGpnvsCommonBase*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGpnvsCommonBase*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGpnvsCommonBase*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_value_update_name(this : IGpnvsCommonBase*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value_update_name.call(this, pbstrName)
    end

  end

  @[Extern]
  record IESEventFactoryVtbl,
    query_interface : Proc(IESEventFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESEventFactory*, UInt32),
    release : Proc(IESEventFactory*, UInt32),
    create_es_event : Proc(IESEventFactory*, Void*, UInt32, LibC::GUID, UInt32, UInt8*, Win32cr::Foundation::BSTR, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("506a09b8-7f86-4e04-ac05-3303bfe8fc49")]
  record IESEventFactory, lpVtbl : IESEventFactoryVtbl* do
    GUID = LibC::GUID.new(0x506a09b8_u32, 0x7f86_u16, 0x4e04_u16, StaticArray[0xac_u8, 0x5_u8, 0x33_u8, 0x3_u8, 0xbf_u8, 0xe8_u8, 0xfc_u8, 0x49_u8])
    def query_interface(this : IESEventFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESEventFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESEventFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_es_event(this : IESEventFactory*, pServiceProvider : Void*, dwEventId : UInt32, guidEventType : LibC::GUID, dwEventDataLength : UInt32, pEventData : UInt8*, bstrBaseUrl : Win32cr::Foundation::BSTR, pInitContext : Void*, ppESEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_es_event.call(this, pServiceProvider, dwEventId, guidEventType, dwEventDataLength, pEventData, bstrBaseUrl, pInitContext, ppESEvent)
    end

  end

  @[Extern]
  record IESLicenseRenewalResultEventVtbl,
    query_interface : Proc(IESLicenseRenewalResultEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESLicenseRenewalResultEvent*, UInt32),
    release : Proc(IESLicenseRenewalResultEvent*, UInt32),
    get_event_id : Proc(IESLicenseRenewalResultEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESLicenseRenewalResultEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESLicenseRenewalResultEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESLicenseRenewalResultEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESLicenseRenewalResultEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_callers_id : Proc(IESLicenseRenewalResultEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_file_name : Proc(IESLicenseRenewalResultEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    is_renewal_successful : Proc(IESLicenseRenewalResultEvent*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_check_entitlement_call_required : Proc(IESLicenseRenewalResultEvent*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_descrambled_status : Proc(IESLicenseRenewalResultEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_renewal_result_code : Proc(IESLicenseRenewalResultEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_cas_failure_code : Proc(IESLicenseRenewalResultEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_renewal_h_result : Proc(IESLicenseRenewalResultEvent*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_entitlement_token_length : Proc(IESLicenseRenewalResultEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_entitlement_token : Proc(IESLicenseRenewalResultEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_expiry_date : Proc(IESLicenseRenewalResultEvent*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d5a48ef5-a81b-4df0-acaa-5e35e7ea45d4")]
  record IESLicenseRenewalResultEvent, lpVtbl : IESLicenseRenewalResultEventVtbl* do
    GUID = LibC::GUID.new(0xd5a48ef5_u32, 0xa81b_u16, 0x4df0_u16, StaticArray[0xac_u8, 0xaa_u8, 0x5e_u8, 0x35_u8, 0xe7_u8, 0xea_u8, 0x45_u8, 0xd4_u8])
    def query_interface(this : IESLicenseRenewalResultEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESLicenseRenewalResultEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESLicenseRenewalResultEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESLicenseRenewalResultEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESLicenseRenewalResultEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESLicenseRenewalResultEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESLicenseRenewalResultEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESLicenseRenewalResultEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end
    def get_callers_id(this : IESLicenseRenewalResultEvent*, pdwCallersId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_callers_id.call(this, pdwCallersId)
    end
    def get_file_name(this : IESLicenseRenewalResultEvent*, pbstrFilename : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_file_name.call(this, pbstrFilename)
    end
    def is_renewal_successful(this : IESLicenseRenewalResultEvent*, pfRenewalSuccessful : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_renewal_successful.call(this, pfRenewalSuccessful)
    end
    def is_check_entitlement_call_required(this : IESLicenseRenewalResultEvent*, pfCheckEntTokenCallNeeded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_check_entitlement_call_required.call(this, pfCheckEntTokenCallNeeded)
    end
    def get_descrambled_status(this : IESLicenseRenewalResultEvent*, pDescrambledStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_descrambled_status.call(this, pDescrambledStatus)
    end
    def get_renewal_result_code(this : IESLicenseRenewalResultEvent*, pdwRenewalResultCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_renewal_result_code.call(this, pdwRenewalResultCode)
    end
    def get_cas_failure_code(this : IESLicenseRenewalResultEvent*, pdwCASFailureCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cas_failure_code.call(this, pdwCASFailureCode)
    end
    def get_renewal_h_result(this : IESLicenseRenewalResultEvent*, phr : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_renewal_h_result.call(this, phr)
    end
    def get_entitlement_token_length(this : IESLicenseRenewalResultEvent*, pdwLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entitlement_token_length.call(this, pdwLength)
    end
    def get_entitlement_token(this : IESLicenseRenewalResultEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entitlement_token.call(this, pbData)
    end
    def get_expiry_date(this : IESLicenseRenewalResultEvent*, pqwExpiryDate : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expiry_date.call(this, pqwExpiryDate)
    end

  end

  @[Extern]
  record IESFileExpiryDateEventVtbl,
    query_interface : Proc(IESFileExpiryDateEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESFileExpiryDateEvent*, UInt32),
    release : Proc(IESFileExpiryDateEvent*, UInt32),
    get_event_id : Proc(IESFileExpiryDateEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_event_type : Proc(IESFileExpiryDateEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_completion_status : Proc(IESFileExpiryDateEvent*, UInt32, Win32cr::Foundation::HRESULT),
    get_data : Proc(IESFileExpiryDateEvent*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_string_data : Proc(IESFileExpiryDateEvent*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_tuner_id : Proc(IESFileExpiryDateEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_expiry_date : Proc(IESFileExpiryDateEvent*, UInt64*, Win32cr::Foundation::HRESULT),
    get_final_expiry_date : Proc(IESFileExpiryDateEvent*, UInt64*, Win32cr::Foundation::HRESULT),
    get_max_renewal_count : Proc(IESFileExpiryDateEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    is_entitlement_token_present : Proc(IESFileExpiryDateEvent*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    does_expire_after_first_use : Proc(IESFileExpiryDateEvent*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ba9edcb6-4d36-4cfe-8c56-87a6b0ca48e1")]
  record IESFileExpiryDateEvent, lpVtbl : IESFileExpiryDateEventVtbl* do
    GUID = LibC::GUID.new(0xba9edcb6_u32, 0x4d36_u16, 0x4cfe_u16, StaticArray[0x8c_u8, 0x56_u8, 0x87_u8, 0xa6_u8, 0xb0_u8, 0xca_u8, 0x48_u8, 0xe1_u8])
    def query_interface(this : IESFileExpiryDateEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESFileExpiryDateEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESFileExpiryDateEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event_id(this : IESFileExpiryDateEvent*, pdwEventId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_id.call(this, pdwEventId)
    end
    def get_event_type(this : IESFileExpiryDateEvent*, pguidEventType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_type.call(this, pguidEventType)
    end
    def set_completion_status(this : IESFileExpiryDateEvent*, dwResult : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_completion_status.call(this, dwResult)
    end
    def get_data(this : IESFileExpiryDateEvent*, pbData : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pbData)
    end
    def get_string_data(this : IESFileExpiryDateEvent*, pbstrData : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_data.call(this, pbstrData)
    end
    def get_tuner_id(this : IESFileExpiryDateEvent*, pguidTunerId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tuner_id.call(this, pguidTunerId)
    end
    def get_expiry_date(this : IESFileExpiryDateEvent*, pqwExpiryDate : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expiry_date.call(this, pqwExpiryDate)
    end
    def get_final_expiry_date(this : IESFileExpiryDateEvent*, pqwExpiryDate : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_final_expiry_date.call(this, pqwExpiryDate)
    end
    def get_max_renewal_count(this : IESFileExpiryDateEvent*, dwMaxRenewalCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_renewal_count.call(this, dwMaxRenewalCount)
    end
    def is_entitlement_token_present(this : IESFileExpiryDateEvent*, pfEntTokenPresent : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_entitlement_token_present.call(this, pfEntTokenPresent)
    end
    def does_expire_after_first_use(this : IESFileExpiryDateEvent*, pfExpireAfterFirstUse : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.does_expire_after_first_use.call(this, pfExpireAfterFirstUse)
    end

  end

  @[Extern]
  record IESEventServiceVtbl,
    query_interface : Proc(IESEventService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESEventService*, UInt32),
    release : Proc(IESEventService*, UInt32),
    fire_es_event : Proc(IESEventService*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ed89a619-4c06-4b2f-99eb-c7669b13047c")]
  record IESEventService, lpVtbl : IESEventServiceVtbl* do
    GUID = LibC::GUID.new(0xed89a619_u32, 0x4c06_u16, 0x4b2f_u16, StaticArray[0x99_u8, 0xeb_u8, 0xc7_u8, 0x66_u8, 0x9b_u8, 0x13_u8, 0x4_u8, 0x7c_u8])
    def query_interface(this : IESEventService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESEventService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESEventService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def fire_es_event(this : IESEventService*, pESEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.fire_es_event.call(this, pESEvent)
    end

  end

  @[Extern]
  record IESEventServiceConfigurationVtbl,
    query_interface : Proc(IESEventServiceConfiguration*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IESEventServiceConfiguration*, UInt32),
    release : Proc(IESEventServiceConfiguration*, UInt32),
    set_parent : Proc(IESEventServiceConfiguration*, Void*, Win32cr::Foundation::HRESULT),
    remove_parent : Proc(IESEventServiceConfiguration*, Win32cr::Foundation::HRESULT),
    set_owner : Proc(IESEventServiceConfiguration*, Void*, Win32cr::Foundation::HRESULT),
    remove_owner : Proc(IESEventServiceConfiguration*, Win32cr::Foundation::HRESULT),
    set_graph : Proc(IESEventServiceConfiguration*, Void*, Win32cr::Foundation::HRESULT),
    remove_graph : Proc(IESEventServiceConfiguration*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("33b9daae-9309-491d-a051-bcad2a70cd66")]
  record IESEventServiceConfiguration, lpVtbl : IESEventServiceConfigurationVtbl* do
    GUID = LibC::GUID.new(0x33b9daae_u32, 0x9309_u16, 0x491d_u16, StaticArray[0xa0_u8, 0x51_u8, 0xbc_u8, 0xad_u8, 0x2a_u8, 0x70_u8, 0xcd_u8, 0x66_u8])
    def query_interface(this : IESEventServiceConfiguration*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IESEventServiceConfiguration*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IESEventServiceConfiguration*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_parent(this : IESEventServiceConfiguration*, pEventService : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_parent.call(this, pEventService)
    end
    def remove_parent(this : IESEventServiceConfiguration*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_parent.call(this)
    end
    def set_owner(this : IESEventServiceConfiguration*, pESEvents : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_owner.call(this, pESEvents)
    end
    def remove_owner(this : IESEventServiceConfiguration*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_owner.call(this)
    end
    def set_graph(this : IESEventServiceConfiguration*, pGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_graph.call(this, pGraph)
    end
    def remove_graph(this : IESEventServiceConfiguration*, pGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_graph.call(this, pGraph)
    end

  end

  @[Extern]
  record IRegisterTunerVtbl,
    query_interface : Proc(IRegisterTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRegisterTuner*, UInt32),
    release : Proc(IRegisterTuner*, UInt32),
    register : Proc(IRegisterTuner*, Void*, Void*, Win32cr::Foundation::HRESULT),
    unregister : Proc(IRegisterTuner*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("359b3901-572c-4854-bb49-cdef66606a25")]
  record IRegisterTuner, lpVtbl : IRegisterTunerVtbl* do
    GUID = LibC::GUID.new(0x359b3901_u32, 0x572c_u16, 0x4854_u16, StaticArray[0xbb_u8, 0x49_u8, 0xcd_u8, 0xef_u8, 0x66_u8, 0x60_u8, 0x6a_u8, 0x25_u8])
    def query_interface(this : IRegisterTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRegisterTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRegisterTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register(this : IRegisterTuner*, pTuner : Void*, pGraph : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register.call(this, pTuner, pGraph)
    end
    def unregister(this : IRegisterTuner*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister.call(this)
    end

  end

  @[Extern]
  record IBDAComparableVtbl,
    query_interface : Proc(IBDAComparable*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDAComparable*, UInt32),
    release : Proc(IBDAComparable*, UInt32),
    compare_exact : Proc(IBDAComparable*, Void*, Int32*, Win32cr::Foundation::HRESULT),
    compare_equivalent : Proc(IBDAComparable*, Void*, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    hash_exact : Proc(IBDAComparable*, Int64*, Win32cr::Foundation::HRESULT),
    hash_exact_incremental : Proc(IBDAComparable*, Int64, Int64*, Win32cr::Foundation::HRESULT),
    hash_equivalent : Proc(IBDAComparable*, UInt32, Int64*, Win32cr::Foundation::HRESULT),
    hash_equivalent_incremental : Proc(IBDAComparable*, Int64, UInt32, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b34505e0-2f0e-497b-80bc-d43f3b24ed7f")]
  record IBDAComparable, lpVtbl : IBDAComparableVtbl* do
    GUID = LibC::GUID.new(0xb34505e0_u32, 0x2f0e_u16, 0x497b_u16, StaticArray[0x80_u8, 0xbc_u8, 0xd4_u8, 0x3f_u8, 0x3b_u8, 0x24_u8, 0xed_u8, 0x7f_u8])
    def query_interface(this : IBDAComparable*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDAComparable*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDAComparable*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def compare_exact(this : IBDAComparable*, compare_to : Void*, result : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_exact.call(this, compare_to, result)
    end
    def compare_equivalent(this : IBDAComparable*, compare_to : Void*, dwFlags : UInt32, result : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_equivalent.call(this, compare_to, dwFlags, result)
    end
    def hash_exact(this : IBDAComparable*, result : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hash_exact.call(this, result)
    end
    def hash_exact_incremental(this : IBDAComparable*, partial_result : Int64, result : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hash_exact_incremental.call(this, partial_result, result)
    end
    def hash_equivalent(this : IBDAComparable*, dwFlags : UInt32, result : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hash_equivalent.call(this, dwFlags, result)
    end
    def hash_equivalent_incremental(this : IBDAComparable*, partial_result : Int64, dwFlags : UInt32, result : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.hash_equivalent_incremental.call(this, partial_result, dwFlags, result)
    end

  end

  @[Extern]
  record IPersistTuneXmlVtbl,
    query_interface : Proc(IPersistTuneXml*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPersistTuneXml*, UInt32),
    release : Proc(IPersistTuneXml*, UInt32),
    get_class_id : Proc(IPersistTuneXml*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    init_new : Proc(IPersistTuneXml*, Win32cr::Foundation::HRESULT),
    load : Proc(IPersistTuneXml*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    save : Proc(IPersistTuneXml*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0754cd31-8d15-47a9-8215-d20064157244")]
  record IPersistTuneXml, lpVtbl : IPersistTuneXmlVtbl* do
    GUID = LibC::GUID.new(0x754cd31_u32, 0x8d15_u16, 0x47a9_u16, StaticArray[0x82_u8, 0x15_u8, 0xd2_u8, 0x0_u8, 0x64_u8, 0x15_u8, 0x72_u8, 0x44_u8])
    def query_interface(this : IPersistTuneXml*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPersistTuneXml*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPersistTuneXml*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IPersistTuneXml*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def init_new(this : IPersistTuneXml*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_new.call(this)
    end
    def load(this : IPersistTuneXml*, varValue : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, varValue)
    end
    def save(this : IPersistTuneXml*, pvarFragment : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save.call(this, pvarFragment)
    end

  end

  @[Extern]
  record IPersistTuneXmlUtilityVtbl,
    query_interface : Proc(IPersistTuneXmlUtility*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPersistTuneXmlUtility*, UInt32),
    release : Proc(IPersistTuneXmlUtility*, UInt32),
    deserialize : Proc(IPersistTuneXmlUtility*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("990237ae-ac11-4614-be8f-dd217a4cb4cb")]
  record IPersistTuneXmlUtility, lpVtbl : IPersistTuneXmlUtilityVtbl* do
    GUID = LibC::GUID.new(0x990237ae_u32, 0xac11_u16, 0x4614_u16, StaticArray[0xbe_u8, 0x8f_u8, 0xdd_u8, 0x21_u8, 0x7a_u8, 0x4c_u8, 0xb4_u8, 0xcb_u8])
    def query_interface(this : IPersistTuneXmlUtility*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPersistTuneXmlUtility*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPersistTuneXmlUtility*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def deserialize(this : IPersistTuneXmlUtility*, varValue : Win32cr::System::Com::VARIANT, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deserialize.call(this, varValue, ppObject)
    end

  end

  @[Extern]
  record IPersistTuneXmlUtility2Vtbl,
    query_interface : Proc(IPersistTuneXmlUtility2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPersistTuneXmlUtility2*, UInt32),
    release : Proc(IPersistTuneXmlUtility2*, UInt32),
    deserialize : Proc(IPersistTuneXmlUtility2*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    serialize : Proc(IPersistTuneXmlUtility2*, Void*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("992e165f-ea24-4b2f-9a1d-009d92120451")]
  record IPersistTuneXmlUtility2, lpVtbl : IPersistTuneXmlUtility2Vtbl* do
    GUID = LibC::GUID.new(0x992e165f_u32, 0xea24_u16, 0x4b2f_u16, StaticArray[0x9a_u8, 0x1d_u8, 0x0_u8, 0x9d_u8, 0x92_u8, 0x12_u8, 0x4_u8, 0x51_u8])
    def query_interface(this : IPersistTuneXmlUtility2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPersistTuneXmlUtility2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPersistTuneXmlUtility2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def deserialize(this : IPersistTuneXmlUtility2*, varValue : Win32cr::System::Com::VARIANT, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deserialize.call(this, varValue, ppObject)
    end
    def serialize(this : IPersistTuneXmlUtility2*, piTuneRequest : Void*, pString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.serialize.call(this, piTuneRequest, pString)
    end

  end

  @[Extern]
  record IBDACreateTuneRequestExVtbl,
    query_interface : Proc(IBDACreateTuneRequestEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDACreateTuneRequestEx*, UInt32),
    release : Proc(IBDACreateTuneRequestEx*, UInt32),
    create_tune_request_ex : Proc(IBDACreateTuneRequestEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c0a4a1d4-2b3c-491a-ba22-499fbadd4d12")]
  record IBDACreateTuneRequestEx, lpVtbl : IBDACreateTuneRequestExVtbl* do
    GUID = LibC::GUID.new(0xc0a4a1d4_u32, 0x2b3c_u16, 0x491a_u16, StaticArray[0xba_u8, 0x22_u8, 0x49_u8, 0x9f_u8, 0xba_u8, 0xdd_u8, 0x4d_u8, 0x12_u8])
    def query_interface(this : IBDACreateTuneRequestEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDACreateTuneRequestEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDACreateTuneRequestEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_tune_request_ex(this : IBDACreateTuneRequestEx*, tune_request_iid : LibC::GUID*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_tune_request_ex.call(this, tune_request_iid, tune_request)
    end

  end

  @[Extern]
  record IETFilterConfigVtbl,
    query_interface : Proc(IETFilterConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IETFilterConfig*, UInt32),
    release : Proc(IETFilterConfig*, UInt32),
    init_license : Proc(IETFilterConfig*, Int32, Win32cr::Foundation::HRESULT),
    get_secure_channel_object : Proc(IETFilterConfig*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4d1-0049-4e2b-98fb-9537f6ce516d")]
  record IETFilterConfig, lpVtbl : IETFilterConfigVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4d1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IETFilterConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IETFilterConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IETFilterConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init_license(this : IETFilterConfig*, license_id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_license.call(this, license_id)
    end
    def get_secure_channel_object(this : IETFilterConfig*, ppUnkDRMSecureChannel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_secure_channel_object.call(this, ppUnkDRMSecureChannel)
    end

  end

  @[Extern]
  record IDTFilterConfigVtbl,
    query_interface : Proc(IDTFilterConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDTFilterConfig*, UInt32),
    release : Proc(IDTFilterConfig*, UInt32),
    get_secure_channel_object : Proc(IDTFilterConfig*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4d2-0049-4e2b-98fb-9537f6ce516d")]
  record IDTFilterConfig, lpVtbl : IDTFilterConfigVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4d2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IDTFilterConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDTFilterConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDTFilterConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_secure_channel_object(this : IDTFilterConfig*, ppUnkDRMSecureChannel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_secure_channel_object.call(this, ppUnkDRMSecureChannel)
    end

  end

  @[Extern]
  record IXDSCodecConfigVtbl,
    query_interface : Proc(IXDSCodecConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXDSCodecConfig*, UInt32),
    release : Proc(IXDSCodecConfig*, UInt32),
    get_secure_channel_object : Proc(IXDSCodecConfig*, Void**, Win32cr::Foundation::HRESULT),
    set_pause_buffer_time : Proc(IXDSCodecConfig*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4d3-0049-4e2b-98fb-9537f6ce516d")]
  record IXDSCodecConfig, lpVtbl : IXDSCodecConfigVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4d3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IXDSCodecConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXDSCodecConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXDSCodecConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_secure_channel_object(this : IXDSCodecConfig*, ppUnkDRMSecureChannel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_secure_channel_object.call(this, ppUnkDRMSecureChannel)
    end
    def set_pause_buffer_time(this : IXDSCodecConfig*, dwPauseBufferTime : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pause_buffer_time.call(this, dwPauseBufferTime)
    end

  end

  @[Extern]
  record IDTFilterLicenseRenewalVtbl,
    query_interface : Proc(IDTFilterLicenseRenewal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDTFilterLicenseRenewal*, UInt32),
    release : Proc(IDTFilterLicenseRenewal*, UInt32),
    get_license_renewal_data : Proc(IDTFilterLicenseRenewal*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8a78b317-e405-4a43-994a-620d8f5ce25e")]
  record IDTFilterLicenseRenewal, lpVtbl : IDTFilterLicenseRenewalVtbl* do
    GUID = LibC::GUID.new(0x8a78b317_u32, 0xe405_u16, 0x4a43_u16, StaticArray[0x99_u8, 0x4a_u8, 0x62_u8, 0xd_u8, 0x8f_u8, 0x5c_u8, 0xe2_u8, 0x5e_u8])
    def query_interface(this : IDTFilterLicenseRenewal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDTFilterLicenseRenewal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDTFilterLicenseRenewal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_license_renewal_data(this : IDTFilterLicenseRenewal*, ppwszFileName : Win32cr::Foundation::PWSTR*, ppwszExpiredKid : Win32cr::Foundation::PWSTR*, ppwszTunerId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_license_renewal_data.call(this, ppwszFileName, ppwszExpiredKid, ppwszTunerId)
    end

  end

  @[Extern]
  record IPTFilterLicenseRenewalVtbl,
    query_interface : Proc(IPTFilterLicenseRenewal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPTFilterLicenseRenewal*, UInt32),
    release : Proc(IPTFilterLicenseRenewal*, UInt32),
    renew_licenses : Proc(IPTFilterLicenseRenewal*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    cancel_license_renewal : Proc(IPTFilterLicenseRenewal*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("26d836a5-0c15-44c7-ac59-b0da8728f240")]
  record IPTFilterLicenseRenewal, lpVtbl : IPTFilterLicenseRenewalVtbl* do
    GUID = LibC::GUID.new(0x26d836a5_u32, 0xc15_u16, 0x44c7_u16, StaticArray[0xac_u8, 0x59_u8, 0xb0_u8, 0xda_u8, 0x87_u8, 0x28_u8, 0xf2_u8, 0x40_u8])
    def query_interface(this : IPTFilterLicenseRenewal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPTFilterLicenseRenewal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPTFilterLicenseRenewal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def renew_licenses(this : IPTFilterLicenseRenewal*, wszFileName : Win32cr::Foundation::PWSTR, wszExpiredKid : Win32cr::Foundation::PWSTR, dwCallersId : UInt32, bHighPriority : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.renew_licenses.call(this, wszFileName, wszExpiredKid, dwCallersId, bHighPriority)
    end
    def cancel_license_renewal(this : IPTFilterLicenseRenewal*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_license_renewal.call(this)
    end

  end

  @[Extern]
  record IMceBurnerControlVtbl,
    query_interface : Proc(IMceBurnerControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMceBurnerControl*, UInt32),
    release : Proc(IMceBurnerControl*, UInt32),
    get_burner_no_decryption : Proc(IMceBurnerControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5a86b91a-e71e-46c1-88a9-9bb338710552")]
  record IMceBurnerControl, lpVtbl : IMceBurnerControlVtbl* do
    GUID = LibC::GUID.new(0x5a86b91a_u32, 0xe71e_u16, 0x46c1_u16, StaticArray[0x88_u8, 0xa9_u8, 0x9b_u8, 0xb3_u8, 0x38_u8, 0x71_u8, 0x5_u8, 0x52_u8])
    def query_interface(this : IMceBurnerControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMceBurnerControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMceBurnerControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_burner_no_decryption(this : IMceBurnerControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_burner_no_decryption.call(this)
    end

  end

  @[Extern]
  record IETFilterVtbl,
    query_interface : Proc(IETFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IETFilter*, UInt32),
    release : Proc(IETFilter*, UInt32),
    get_EvalRatObjOK : Proc(IETFilter*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_curr_rating : Proc(IETFilter*, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT),
    get_curr_license_exp_date : Proc(IETFilter*, Win32cr::Media::DirectShow::ProtType*, Int32*, Win32cr::Foundation::HRESULT),
    get_last_error_code : Proc(IETFilter*, Win32cr::Foundation::HRESULT),
    set_recording_on : Proc(IETFilter*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4b1-0049-4e2b-98fb-9537f6ce516d")]
  record IETFilter, lpVtbl : IETFilterVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4b1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IETFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IETFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IETFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_EvalRatObjOK(this : IETFilter*, pHrCoCreateRetVal : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EvalRatObjOK.call(this, pHrCoCreateRetVal)
    end
    def get_curr_rating(this : IETFilter*, pEnSystem : Win32cr::Media::DirectShow::EnTvRat_System*, pEnRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_rating.call(this, pEnSystem, pEnRating, plbfEnAttr)
    end
    def get_curr_license_exp_date(this : IETFilter*, protType : Win32cr::Media::DirectShow::ProtType*, lpDateTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_license_exp_date.call(this, protType, lpDateTime)
    end
    def get_last_error_code(this : IETFilter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_error_code.call(this)
    end
    def set_recording_on(this : IETFilter*, fRecState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_recording_on.call(this, fRecState)
    end

  end

  @[Extern]
  record IETFilterEventsVtbl,
    query_interface : Proc(IETFilterEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IETFilterEvents*, UInt32),
    release : Proc(IETFilterEvents*, UInt32),
    get_type_info_count : Proc(IETFilterEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IETFilterEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IETFilterEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IETFilterEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4c1-0049-4e2b-98fb-9537f6ce516d")]
  record IETFilterEvents, lpVtbl : IETFilterEventsVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4c1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IETFilterEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IETFilterEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IETFilterEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IETFilterEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IETFilterEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IETFilterEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IETFilterEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IDTFilterVtbl,
    query_interface : Proc(IDTFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDTFilter*, UInt32),
    release : Proc(IDTFilter*, UInt32),
    get_EvalRatObjOK : Proc(IDTFilter*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_curr_rating : Proc(IDTFilter*, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT),
    get_BlockedRatingAttributes : Proc(IDTFilter*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockedRatingAttributes : Proc(IDTFilter*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Foundation::HRESULT),
    get_BlockUnRated : Proc(IDTFilter*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_BlockUnRated : Proc(IDTFilter*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_BlockUnRatedDelay : Proc(IDTFilter*, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockUnRatedDelay : Proc(IDTFilter*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4b2-0049-4e2b-98fb-9537f6ce516d")]
  record IDTFilter, lpVtbl : IDTFilterVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4b2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IDTFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDTFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDTFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_EvalRatObjOK(this : IDTFilter*, pHrCoCreateRetVal : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EvalRatObjOK.call(this, pHrCoCreateRetVal)
    end
    def get_curr_rating(this : IDTFilter*, pEnSystem : Win32cr::Media::DirectShow::EnTvRat_System*, pEnRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_rating.call(this, pEnSystem, pEnRating, plbfEnAttr)
    end
    def get_BlockedRatingAttributes(this : IDTFilter*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockedRatingAttributes.call(this, enSystem, enLevel, plbfEnAttr)
    end
    def put_BlockedRatingAttributes(this : IDTFilter*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfAttrs : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockedRatingAttributes.call(this, enSystem, enLevel, lbfAttrs)
    end
    def get_BlockUnRated(this : IDTFilter*, pfBlockUnRatedShows : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockUnRated.call(this, pfBlockUnRatedShows)
    end
    def put_BlockUnRated(this : IDTFilter*, fBlockUnRatedShows : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnRated.call(this, fBlockUnRatedShows)
    end
    def get_BlockUnRatedDelay(this : IDTFilter*, pmsecsDelayBeforeBlock : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockUnRatedDelay.call(this, pmsecsDelayBeforeBlock)
    end
    def put_BlockUnRatedDelay(this : IDTFilter*, msecsDelayBeforeBlock : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnRatedDelay.call(this, msecsDelayBeforeBlock)
    end

  end

  @[Extern]
  record IDTFilter2Vtbl,
    query_interface : Proc(IDTFilter2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDTFilter2*, UInt32),
    release : Proc(IDTFilter2*, UInt32),
    get_EvalRatObjOK : Proc(IDTFilter2*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_curr_rating : Proc(IDTFilter2*, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT),
    get_BlockedRatingAttributes : Proc(IDTFilter2*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockedRatingAttributes : Proc(IDTFilter2*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Foundation::HRESULT),
    get_BlockUnRated : Proc(IDTFilter2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_BlockUnRated : Proc(IDTFilter2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_BlockUnRatedDelay : Proc(IDTFilter2*, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockUnRatedDelay : Proc(IDTFilter2*, Int32, Win32cr::Foundation::HRESULT),
    get_ChallengeUrl : Proc(IDTFilter2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_curr_license_exp_date : Proc(IDTFilter2*, Win32cr::Media::DirectShow::ProtType*, Int32*, Win32cr::Foundation::HRESULT),
    get_last_error_code : Proc(IDTFilter2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4b4-0049-4e2b-98fb-9537f6ce516d")]
  record IDTFilter2, lpVtbl : IDTFilter2Vtbl* do
    GUID = LibC::GUID.new(0xc4c4c4b4_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IDTFilter2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDTFilter2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDTFilter2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_EvalRatObjOK(this : IDTFilter2*, pHrCoCreateRetVal : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EvalRatObjOK.call(this, pHrCoCreateRetVal)
    end
    def get_curr_rating(this : IDTFilter2*, pEnSystem : Win32cr::Media::DirectShow::EnTvRat_System*, pEnRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_rating.call(this, pEnSystem, pEnRating, plbfEnAttr)
    end
    def get_BlockedRatingAttributes(this : IDTFilter2*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockedRatingAttributes.call(this, enSystem, enLevel, plbfEnAttr)
    end
    def put_BlockedRatingAttributes(this : IDTFilter2*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfAttrs : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockedRatingAttributes.call(this, enSystem, enLevel, lbfAttrs)
    end
    def get_BlockUnRated(this : IDTFilter2*, pfBlockUnRatedShows : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockUnRated.call(this, pfBlockUnRatedShows)
    end
    def put_BlockUnRated(this : IDTFilter2*, fBlockUnRatedShows : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnRated.call(this, fBlockUnRatedShows)
    end
    def get_BlockUnRatedDelay(this : IDTFilter2*, pmsecsDelayBeforeBlock : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockUnRatedDelay.call(this, pmsecsDelayBeforeBlock)
    end
    def put_BlockUnRatedDelay(this : IDTFilter2*, msecsDelayBeforeBlock : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnRatedDelay.call(this, msecsDelayBeforeBlock)
    end
    def get_ChallengeUrl(this : IDTFilter2*, pbstrChallengeUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChallengeUrl.call(this, pbstrChallengeUrl)
    end
    def get_curr_license_exp_date(this : IDTFilter2*, protType : Win32cr::Media::DirectShow::ProtType*, lpDateTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_license_exp_date.call(this, protType, lpDateTime)
    end
    def get_last_error_code(this : IDTFilter2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_error_code.call(this)
    end

  end

  @[Extern]
  record IDTFilter3Vtbl,
    query_interface : Proc(IDTFilter3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDTFilter3*, UInt32),
    release : Proc(IDTFilter3*, UInt32),
    get_EvalRatObjOK : Proc(IDTFilter3*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_curr_rating : Proc(IDTFilter3*, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT),
    get_BlockedRatingAttributes : Proc(IDTFilter3*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockedRatingAttributes : Proc(IDTFilter3*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Foundation::HRESULT),
    get_BlockUnRated : Proc(IDTFilter3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_BlockUnRated : Proc(IDTFilter3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_BlockUnRatedDelay : Proc(IDTFilter3*, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockUnRatedDelay : Proc(IDTFilter3*, Int32, Win32cr::Foundation::HRESULT),
    get_ChallengeUrl : Proc(IDTFilter3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_curr_license_exp_date : Proc(IDTFilter3*, Win32cr::Media::DirectShow::ProtType*, Int32*, Win32cr::Foundation::HRESULT),
    get_last_error_code : Proc(IDTFilter3*, Win32cr::Foundation::HRESULT),
    get_protection_type : Proc(IDTFilter3*, Win32cr::Media::DirectShow::ProtType*, Win32cr::Foundation::HRESULT),
    license_has_expiration_date : Proc(IDTFilter3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_rights : Proc(IDTFilter3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("513998cc-e929-4cdf-9fbd-bad1e0314866")]
  record IDTFilter3, lpVtbl : IDTFilter3Vtbl* do
    GUID = LibC::GUID.new(0x513998cc_u32, 0xe929_u16, 0x4cdf_u16, StaticArray[0x9f_u8, 0xbd_u8, 0xba_u8, 0xd1_u8, 0xe0_u8, 0x31_u8, 0x48_u8, 0x66_u8])
    def query_interface(this : IDTFilter3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDTFilter3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDTFilter3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_EvalRatObjOK(this : IDTFilter3*, pHrCoCreateRetVal : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EvalRatObjOK.call(this, pHrCoCreateRetVal)
    end
    def get_curr_rating(this : IDTFilter3*, pEnSystem : Win32cr::Media::DirectShow::EnTvRat_System*, pEnRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_rating.call(this, pEnSystem, pEnRating, plbfEnAttr)
    end
    def get_BlockedRatingAttributes(this : IDTFilter3*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockedRatingAttributes.call(this, enSystem, enLevel, plbfEnAttr)
    end
    def put_BlockedRatingAttributes(this : IDTFilter3*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfAttrs : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockedRatingAttributes.call(this, enSystem, enLevel, lbfAttrs)
    end
    def get_BlockUnRated(this : IDTFilter3*, pfBlockUnRatedShows : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockUnRated.call(this, pfBlockUnRatedShows)
    end
    def put_BlockUnRated(this : IDTFilter3*, fBlockUnRatedShows : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnRated.call(this, fBlockUnRatedShows)
    end
    def get_BlockUnRatedDelay(this : IDTFilter3*, pmsecsDelayBeforeBlock : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockUnRatedDelay.call(this, pmsecsDelayBeforeBlock)
    end
    def put_BlockUnRatedDelay(this : IDTFilter3*, msecsDelayBeforeBlock : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnRatedDelay.call(this, msecsDelayBeforeBlock)
    end
    def get_ChallengeUrl(this : IDTFilter3*, pbstrChallengeUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChallengeUrl.call(this, pbstrChallengeUrl)
    end
    def get_curr_license_exp_date(this : IDTFilter3*, protType : Win32cr::Media::DirectShow::ProtType*, lpDateTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_license_exp_date.call(this, protType, lpDateTime)
    end
    def get_last_error_code(this : IDTFilter3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_error_code.call(this)
    end
    def get_protection_type(this : IDTFilter3*, pProtectionType : Win32cr::Media::DirectShow::ProtType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protection_type.call(this, pProtectionType)
    end
    def license_has_expiration_date(this : IDTFilter3*, pfLicenseHasExpirationDate : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.license_has_expiration_date.call(this, pfLicenseHasExpirationDate)
    end
    def set_rights(this : IDTFilter3*, bstrRights : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rights.call(this, bstrRights)
    end

  end

  @[Extern]
  record IDTFilterEventsVtbl,
    query_interface : Proc(IDTFilterEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDTFilterEvents*, UInt32),
    release : Proc(IDTFilterEvents*, UInt32),
    get_type_info_count : Proc(IDTFilterEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDTFilterEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDTFilterEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDTFilterEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4c2-0049-4e2b-98fb-9537f6ce516d")]
  record IDTFilterEvents, lpVtbl : IDTFilterEventsVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4c2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IDTFilterEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDTFilterEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDTFilterEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDTFilterEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDTFilterEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDTFilterEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDTFilterEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IXDSCodecVtbl,
    query_interface : Proc(IXDSCodec*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXDSCodec*, UInt32),
    release : Proc(IXDSCodec*, UInt32),
    get_XDSToRatObjOK : Proc(IXDSCodec*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    put_CCSubstreamService : Proc(IXDSCodec*, Int32, Win32cr::Foundation::HRESULT),
    get_CCSubstreamService : Proc(IXDSCodec*, Int32*, Win32cr::Foundation::HRESULT),
    get_content_advisory_rating : Proc(IXDSCodec*, Int32*, Int32*, Int32*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_xds_packet : Proc(IXDSCodec*, Int32*, Int32*, Win32cr::Foundation::BSTR*, Int32*, Int32*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_curr_license_exp_date : Proc(IXDSCodec*, Win32cr::Media::DirectShow::ProtType*, Int32*, Win32cr::Foundation::HRESULT),
    get_last_error_code : Proc(IXDSCodec*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4b3-0049-4e2b-98fb-9537f6ce516d")]
  record IXDSCodec, lpVtbl : IXDSCodecVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4b3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IXDSCodec*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXDSCodec*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXDSCodec*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_XDSToRatObjOK(this : IXDSCodec*, pHrCoCreateRetVal : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_XDSToRatObjOK.call(this, pHrCoCreateRetVal)
    end
    def put_CCSubstreamService(this : IXDSCodec*, substream_mask : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CCSubstreamService.call(this, substream_mask)
    end
    def get_CCSubstreamService(this : IXDSCodec*, pSubstreamMask : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CCSubstreamService.call(this, pSubstreamMask)
    end
    def get_content_advisory_rating(this : IXDSCodec*, pRat : Int32*, pPktSeqID : Int32*, pCallSeqID : Int32*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_advisory_rating.call(this, pRat, pPktSeqID, pCallSeqID, pTimeStart, pTimeEnd)
    end
    def get_xds_packet(this : IXDSCodec*, pXDSClassPkt : Int32*, pXDSTypePkt : Int32*, pBstrXDSPkt : Win32cr::Foundation::BSTR*, pPktSeqID : Int32*, pCallSeqID : Int32*, pTimeStart : Int64*, pTimeEnd : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_xds_packet.call(this, pXDSClassPkt, pXDSTypePkt, pBstrXDSPkt, pPktSeqID, pCallSeqID, pTimeStart, pTimeEnd)
    end
    def get_curr_license_exp_date(this : IXDSCodec*, protType : Win32cr::Media::DirectShow::ProtType*, lpDateTime : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_curr_license_exp_date.call(this, protType, lpDateTime)
    end
    def get_last_error_code(this : IXDSCodec*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_error_code.call(this)
    end

  end

  @[Extern]
  record IXDSCodecEventsVtbl,
    query_interface : Proc(IXDSCodecEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXDSCodecEvents*, UInt32),
    release : Proc(IXDSCodecEvents*, UInt32),
    get_type_info_count : Proc(IXDSCodecEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXDSCodecEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXDSCodecEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXDSCodecEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c4c4c4c3-0049-4e2b-98fb-9537f6ce516d")]
  record IXDSCodecEvents, lpVtbl : IXDSCodecEventsVtbl* do
    GUID = LibC::GUID.new(0xc4c4c4c3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
    def query_interface(this : IXDSCodecEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXDSCodecEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXDSCodecEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXDSCodecEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXDSCodecEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXDSCodecEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXDSCodecEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IXDSToRatVtbl,
    query_interface : Proc(IXDSToRat*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IXDSToRat*, UInt32),
    release : Proc(IXDSToRat*, UInt32),
    get_type_info_count : Proc(IXDSToRat*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IXDSToRat*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IXDSToRat*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IXDSToRat*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    init : Proc(IXDSToRat*, Win32cr::Foundation::HRESULT),
    parse_xds_byte_pair : Proc(IXDSToRat*, UInt8, UInt8, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5c5c5b0-3abc-11d6-b25b-00c04fa0c026")]
  record IXDSToRat, lpVtbl : IXDSToRatVtbl* do
    GUID = LibC::GUID.new(0xc5c5c5b0_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
    def query_interface(this : IXDSToRat*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IXDSToRat*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IXDSToRat*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IXDSToRat*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IXDSToRat*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IXDSToRat*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IXDSToRat*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def init(this : IXDSToRat*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this)
    end
    def parse_xds_byte_pair(this : IXDSToRat*, byte1 : UInt8, byte2 : UInt8, pEnSystem : Win32cr::Media::DirectShow::EnTvRat_System*, pEnLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, plBfEnAttributes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_xds_byte_pair.call(this, byte1, byte2, pEnSystem, pEnLevel, plBfEnAttributes)
    end

  end

  @[Extern]
  record IEvalRatVtbl,
    query_interface : Proc(IEvalRat*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEvalRat*, UInt32),
    release : Proc(IEvalRat*, UInt32),
    get_type_info_count : Proc(IEvalRat*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IEvalRat*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IEvalRat*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IEvalRat*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_BlockedRatingAttributes : Proc(IEvalRat*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32*, Win32cr::Foundation::HRESULT),
    put_BlockedRatingAttributes : Proc(IEvalRat*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Foundation::HRESULT),
    get_BlockUnRated : Proc(IEvalRat*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    put_BlockUnRated : Proc(IEvalRat*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    most_restrictive_rating : Proc(IEvalRat*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT),
    test_rating : Proc(IEvalRat*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5c5c5b1-3abc-11d6-b25b-00c04fa0c026")]
  record IEvalRat, lpVtbl : IEvalRatVtbl* do
    GUID = LibC::GUID.new(0xc5c5c5b1_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
    def query_interface(this : IEvalRat*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEvalRat*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEvalRat*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IEvalRat*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IEvalRat*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IEvalRat*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IEvalRat*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_BlockedRatingAttributes(this : IEvalRat*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, plbfAttrs : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockedRatingAttributes.call(this, enSystem, enLevel, plbfAttrs)
    end
    def put_BlockedRatingAttributes(this : IEvalRat*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfAttrs : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockedRatingAttributes.call(this, enSystem, enLevel, lbfAttrs)
    end
    def get_BlockUnRated(this : IEvalRat*, pfBlockUnRatedShows : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockUnRated.call(this, pfBlockUnRatedShows)
    end
    def put_BlockUnRated(this : IEvalRat*, fBlockUnRatedShows : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnRated.call(this, fBlockUnRatedShows)
    end
    def most_restrictive_rating(this : IEvalRat*, enSystem1 : Win32cr::Media::DirectShow::EnTvRat_System, enEnLevel1 : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfEnAttr1 : Int32, enSystem2 : Win32cr::Media::DirectShow::EnTvRat_System, enEnLevel2 : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfEnAttr2 : Int32, penSystem : Win32cr::Media::DirectShow::EnTvRat_System*, penEnLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, plbfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.most_restrictive_rating.call(this, enSystem1, enEnLevel1, lbfEnAttr1, enSystem2, enEnLevel2, lbfEnAttr2, penSystem, penEnLevel, plbfEnAttr)
    end
    def test_rating(this : IEvalRat*, enShowSystem : Win32cr::Media::DirectShow::EnTvRat_System, enShowLevel : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfEnShowAttributes : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.test_rating.call(this, enShowSystem, enShowLevel, lbfEnShowAttributes)
    end

  end

  @[Extern]
  record IMSVidRectVtbl,
    query_interface : Proc(IMSVidRect*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidRect*, UInt32),
    release : Proc(IMSVidRect*, UInt32),
    get_type_info_count : Proc(IMSVidRect*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidRect*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidRect*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidRect*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Top : Proc(IMSVidRect*, Int32*, Win32cr::Foundation::HRESULT),
    put_Top : Proc(IMSVidRect*, Int32, Win32cr::Foundation::HRESULT),
    get_Left : Proc(IMSVidRect*, Int32*, Win32cr::Foundation::HRESULT),
    put_Left : Proc(IMSVidRect*, Int32, Win32cr::Foundation::HRESULT),
    get_Width : Proc(IMSVidRect*, Int32*, Win32cr::Foundation::HRESULT),
    put_Width : Proc(IMSVidRect*, Int32, Win32cr::Foundation::HRESULT),
    get_Height : Proc(IMSVidRect*, Int32*, Win32cr::Foundation::HRESULT),
    put_Height : Proc(IMSVidRect*, Int32, Win32cr::Foundation::HRESULT),
    get_HWnd : Proc(IMSVidRect*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    put_HWnd : Proc(IMSVidRect*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    put_Rect : Proc(IMSVidRect*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7f5000a6-a440-47ca-8acc-c0e75531a2c2")]
  record IMSVidRect, lpVtbl : IMSVidRectVtbl* do
    GUID = LibC::GUID.new(0x7f5000a6_u32, 0xa440_u16, 0x47ca_u16, StaticArray[0x8a_u8, 0xcc_u8, 0xc0_u8, 0xe7_u8, 0x55_u8, 0x31_u8, 0xa2_u8, 0xc2_u8])
    def query_interface(this : IMSVidRect*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidRect*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidRect*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidRect*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidRect*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidRect*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidRect*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Top(this : IMSVidRect*, top_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Top.call(this, top_val)
    end
    def put_Top(this : IMSVidRect*, top_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Top.call(this, top_val)
    end
    def get_Left(this : IMSVidRect*, left_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Left.call(this, left_val)
    end
    def put_Left(this : IMSVidRect*, left_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Left.call(this, left_val)
    end
    def get_Width(this : IMSVidRect*, width_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Width.call(this, width_val)
    end
    def put_Width(this : IMSVidRect*, width_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Width.call(this, width_val)
    end
    def get_Height(this : IMSVidRect*, height_val : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Height.call(this, height_val)
    end
    def put_Height(this : IMSVidRect*, height_val : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Height.call(this, height_val)
    end
    def get_HWnd(this : IMSVidRect*, h_wnd_val : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_HWnd.call(this, h_wnd_val)
    end
    def put_HWnd(this : IMSVidRect*, h_wnd_val : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_HWnd.call(this, h_wnd_val)
    end
    def put_Rect(this : IMSVidRect*, rect_val : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rect.call(this, rect_val)
    end

  end

  @[Extern]
  record IMSVidGraphSegmentContainerVtbl,
    query_interface : Proc(IMSVidGraphSegmentContainer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidGraphSegmentContainer*, UInt32),
    release : Proc(IMSVidGraphSegmentContainer*, UInt32),
    get_Graph : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_Input : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_Outputs : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_VideoRenderer : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_AudioRenderer : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_Features : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_Composites : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    get_ParentContainer : Proc(IMSVidGraphSegmentContainer*, Void**, Win32cr::Foundation::HRESULT),
    decompose : Proc(IMSVidGraphSegmentContainer*, Void*, Win32cr::Foundation::HRESULT),
    is_windowless : Proc(IMSVidGraphSegmentContainer*, Win32cr::Foundation::HRESULT),
    get_focus : Proc(IMSVidGraphSegmentContainer*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3dd2903d-e0aa-11d2-b63a-00c04f79498e")]
  record IMSVidGraphSegmentContainer, lpVtbl : IMSVidGraphSegmentContainerVtbl* do
    GUID = LibC::GUID.new(0x3dd2903d_u32, 0xe0aa_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x3a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidGraphSegmentContainer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidGraphSegmentContainer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidGraphSegmentContainer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Graph(this : IMSVidGraphSegmentContainer*, ppGraph : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Graph.call(this, ppGraph)
    end
    def get_Input(this : IMSVidGraphSegmentContainer*, ppInput : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Input.call(this, ppInput)
    end
    def get_Outputs(this : IMSVidGraphSegmentContainer*, ppOutputs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Outputs.call(this, ppOutputs)
    end
    def get_VideoRenderer(this : IMSVidGraphSegmentContainer*, ppVR : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoRenderer.call(this, ppVR)
    end
    def get_AudioRenderer(this : IMSVidGraphSegmentContainer*, ppAR : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioRenderer.call(this, ppAR)
    end
    def get_Features(this : IMSVidGraphSegmentContainer*, ppFeatures : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Features.call(this, ppFeatures)
    end
    def get_Composites(this : IMSVidGraphSegmentContainer*, ppComposites : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Composites.call(this, ppComposites)
    end
    def get_ParentContainer(this : IMSVidGraphSegmentContainer*, ppContainer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ParentContainer.call(this, ppContainer)
    end
    def decompose(this : IMSVidGraphSegmentContainer*, pSegment : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decompose.call(this, pSegment)
    end
    def is_windowless(this : IMSVidGraphSegmentContainer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_windowless.call(this)
    end
    def get_focus(this : IMSVidGraphSegmentContainer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_focus.call(this)
    end

  end

  @[Extern]
  record IMSVidGraphSegmentVtbl,
    query_interface : Proc(IMSVidGraphSegment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidGraphSegment*, UInt32),
    release : Proc(IMSVidGraphSegment*, UInt32),
    get_class_id : Proc(IMSVidGraphSegment*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_Init : Proc(IMSVidGraphSegment*, Void**, Win32cr::Foundation::HRESULT),
    put_Init : Proc(IMSVidGraphSegment*, Void*, Win32cr::Foundation::HRESULT),
    enum_filters : Proc(IMSVidGraphSegment*, Void**, Win32cr::Foundation::HRESULT),
    get_Container : Proc(IMSVidGraphSegment*, Void**, Win32cr::Foundation::HRESULT),
    put_Container : Proc(IMSVidGraphSegment*, Void*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IMSVidGraphSegment*, Win32cr::Media::DirectShow::MSVidSegmentType*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidGraphSegment*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    build : Proc(IMSVidGraphSegment*, Win32cr::Foundation::HRESULT),
    post_build : Proc(IMSVidGraphSegment*, Win32cr::Foundation::HRESULT),
    pre_run : Proc(IMSVidGraphSegment*, Win32cr::Foundation::HRESULT),
    post_run : Proc(IMSVidGraphSegment*, Win32cr::Foundation::HRESULT),
    pre_stop : Proc(IMSVidGraphSegment*, Win32cr::Foundation::HRESULT),
    post_stop : Proc(IMSVidGraphSegment*, Win32cr::Foundation::HRESULT),
    on_event_notify : Proc(IMSVidGraphSegment*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    decompose : Proc(IMSVidGraphSegment*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("238dec54-adeb-4005-a349-f772b9afebc4")]
  record IMSVidGraphSegment, lpVtbl : IMSVidGraphSegmentVtbl* do
    GUID = LibC::GUID.new(0x238dec54_u32, 0xadeb_u16, 0x4005_u16, StaticArray[0xa3_u8, 0x49_u8, 0xf7_u8, 0x72_u8, 0xb9_u8, 0xaf_u8, 0xeb_u8, 0xc4_u8])
    def query_interface(this : IMSVidGraphSegment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidGraphSegment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidGraphSegment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IMSVidGraphSegment*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def get_Init(this : IMSVidGraphSegment*, pInit : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Init.call(this, pInit)
    end
    def put_Init(this : IMSVidGraphSegment*, pInit : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Init.call(this, pInit)
    end
    def enum_filters(this : IMSVidGraphSegment*, pNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_filters.call(this, pNewEnum)
    end
    def get_Container(this : IMSVidGraphSegment*, ppCtl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Container.call(this, ppCtl)
    end
    def put_Container(this : IMSVidGraphSegment*, pCtl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Container.call(this, pCtl)
    end
    def get_Type(this : IMSVidGraphSegment*, pType : Win32cr::Media::DirectShow::MSVidSegmentType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pType)
    end
    def get_Category(this : IMSVidGraphSegment*, pGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, pGuid)
    end
    def build(this : IMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.build.call(this)
    end
    def post_build(this : IMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_build.call(this)
    end
    def pre_run(this : IMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_run.call(this)
    end
    def post_run(this : IMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_run.call(this)
    end
    def pre_stop(this : IMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_stop.call(this)
    end
    def post_stop(this : IMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_stop.call(this)
    end
    def on_event_notify(this : IMSVidGraphSegment*, lEventCode : Int32, lEventParm1 : LibC::IntPtrT, lEventParm2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event_notify.call(this, lEventCode, lEventParm1, lEventParm2)
    end
    def decompose(this : IMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decompose.call(this)
    end

  end

  @[Extern]
  record IMSVidGraphSegmentUserInputVtbl,
    query_interface : Proc(IMSVidGraphSegmentUserInput*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidGraphSegmentUserInput*, UInt32),
    release : Proc(IMSVidGraphSegmentUserInput*, UInt32),
    click : Proc(IMSVidGraphSegmentUserInput*, Win32cr::Foundation::HRESULT),
    dbl_click : Proc(IMSVidGraphSegmentUserInput*, Win32cr::Foundation::HRESULT),
    key_down : Proc(IMSVidGraphSegmentUserInput*, Int16*, Int16, Win32cr::Foundation::HRESULT),
    key_press : Proc(IMSVidGraphSegmentUserInput*, Int16*, Win32cr::Foundation::HRESULT),
    key_up : Proc(IMSVidGraphSegmentUserInput*, Int16*, Int16, Win32cr::Foundation::HRESULT),
    mouse_down : Proc(IMSVidGraphSegmentUserInput*, Int16, Int16, Int32, Int32, Win32cr::Foundation::HRESULT),
    mouse_move : Proc(IMSVidGraphSegmentUserInput*, Int16, Int16, Int32, Int32, Win32cr::Foundation::HRESULT),
    mouse_up : Proc(IMSVidGraphSegmentUserInput*, Int16, Int16, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("301c060e-20d9-4587-9b03-f82ed9a9943c")]
  record IMSVidGraphSegmentUserInput, lpVtbl : IMSVidGraphSegmentUserInputVtbl* do
    GUID = LibC::GUID.new(0x301c060e_u32, 0x20d9_u16, 0x4587_u16, StaticArray[0x9b_u8, 0x3_u8, 0xf8_u8, 0x2e_u8, 0xd9_u8, 0xa9_u8, 0x94_u8, 0x3c_u8])
    def query_interface(this : IMSVidGraphSegmentUserInput*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidGraphSegmentUserInput*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidGraphSegmentUserInput*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def click(this : IMSVidGraphSegmentUserInput*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.click.call(this)
    end
    def dbl_click(this : IMSVidGraphSegmentUserInput*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dbl_click.call(this)
    end
    def key_down(this : IMSVidGraphSegmentUserInput*, key_code : Int16*, shift_state : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.key_down.call(this, key_code, shift_state)
    end
    def key_press(this : IMSVidGraphSegmentUserInput*, key_ascii : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.key_press.call(this, key_ascii)
    end
    def key_up(this : IMSVidGraphSegmentUserInput*, key_code : Int16*, shift_state : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.key_up.call(this, key_code, shift_state)
    end
    def mouse_down(this : IMSVidGraphSegmentUserInput*, button_state : Int16, shift_state : Int16, x : Int32, y : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mouse_down.call(this, button_state, shift_state, x, y)
    end
    def mouse_move(this : IMSVidGraphSegmentUserInput*, button_state : Int16, shift_state : Int16, x : Int32, y : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mouse_move.call(this, button_state, shift_state, x, y)
    end
    def mouse_up(this : IMSVidGraphSegmentUserInput*, button_state : Int16, shift_state : Int16, x : Int32, y : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.mouse_up.call(this, button_state, shift_state, x, y)
    end

  end

  @[Extern]
  record IMSVidCompositionSegmentVtbl,
    query_interface : Proc(IMSVidCompositionSegment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidCompositionSegment*, UInt32),
    release : Proc(IMSVidCompositionSegment*, UInt32),
    get_class_id : Proc(IMSVidCompositionSegment*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_Init : Proc(IMSVidCompositionSegment*, Void**, Win32cr::Foundation::HRESULT),
    put_Init : Proc(IMSVidCompositionSegment*, Void*, Win32cr::Foundation::HRESULT),
    enum_filters : Proc(IMSVidCompositionSegment*, Void**, Win32cr::Foundation::HRESULT),
    get_Container : Proc(IMSVidCompositionSegment*, Void**, Win32cr::Foundation::HRESULT),
    put_Container : Proc(IMSVidCompositionSegment*, Void*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IMSVidCompositionSegment*, Win32cr::Media::DirectShow::MSVidSegmentType*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidCompositionSegment*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    build : Proc(IMSVidCompositionSegment*, Win32cr::Foundation::HRESULT),
    post_build : Proc(IMSVidCompositionSegment*, Win32cr::Foundation::HRESULT),
    pre_run : Proc(IMSVidCompositionSegment*, Win32cr::Foundation::HRESULT),
    post_run : Proc(IMSVidCompositionSegment*, Win32cr::Foundation::HRESULT),
    pre_stop : Proc(IMSVidCompositionSegment*, Win32cr::Foundation::HRESULT),
    post_stop : Proc(IMSVidCompositionSegment*, Win32cr::Foundation::HRESULT),
    on_event_notify : Proc(IMSVidCompositionSegment*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    decompose : Proc(IMSVidCompositionSegment*, Win32cr::Foundation::HRESULT),
    compose : Proc(IMSVidCompositionSegment*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_Up : Proc(IMSVidCompositionSegment*, Void**, Win32cr::Foundation::HRESULT),
    get_Down : Proc(IMSVidCompositionSegment*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d483-911d-11d2-b632-00c04f79498e")]
  record IMSVidCompositionSegment, lpVtbl : IMSVidCompositionSegmentVtbl* do
    GUID = LibC::GUID.new(0x1c15d483_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidCompositionSegment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidCompositionSegment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidCompositionSegment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IMSVidCompositionSegment*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def get_Init(this : IMSVidCompositionSegment*, pInit : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Init.call(this, pInit)
    end
    def put_Init(this : IMSVidCompositionSegment*, pInit : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Init.call(this, pInit)
    end
    def enum_filters(this : IMSVidCompositionSegment*, pNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_filters.call(this, pNewEnum)
    end
    def get_Container(this : IMSVidCompositionSegment*, ppCtl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Container.call(this, ppCtl)
    end
    def put_Container(this : IMSVidCompositionSegment*, pCtl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Container.call(this, pCtl)
    end
    def get_Type(this : IMSVidCompositionSegment*, pType : Win32cr::Media::DirectShow::MSVidSegmentType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pType)
    end
    def get_Category(this : IMSVidCompositionSegment*, pGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, pGuid)
    end
    def build(this : IMSVidCompositionSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.build.call(this)
    end
    def post_build(this : IMSVidCompositionSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_build.call(this)
    end
    def pre_run(this : IMSVidCompositionSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_run.call(this)
    end
    def post_run(this : IMSVidCompositionSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_run.call(this)
    end
    def pre_stop(this : IMSVidCompositionSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_stop.call(this)
    end
    def post_stop(this : IMSVidCompositionSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_stop.call(this)
    end
    def on_event_notify(this : IMSVidCompositionSegment*, lEventCode : Int32, lEventParm1 : LibC::IntPtrT, lEventParm2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event_notify.call(this, lEventCode, lEventParm1, lEventParm2)
    end
    def decompose(this : IMSVidCompositionSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decompose.call(this)
    end
    def compose(this : IMSVidCompositionSegment*, upstream : Void*, downstream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compose.call(this, upstream, downstream)
    end
    def get_Up(this : IMSVidCompositionSegment*, upstream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Up.call(this, upstream)
    end
    def get_Down(this : IMSVidCompositionSegment*, downstream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Down.call(this, downstream)
    end

  end

  @[Extern]
  record IEnumMSVidGraphSegmentVtbl,
    query_interface : Proc(IEnumMSVidGraphSegment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumMSVidGraphSegment*, UInt32),
    release : Proc(IEnumMSVidGraphSegment*, UInt32),
    next__ : Proc(IEnumMSVidGraphSegment*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumMSVidGraphSegment*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumMSVidGraphSegment*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumMSVidGraphSegment*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3dd2903e-e0aa-11d2-b63a-00c04f79498e")]
  record IEnumMSVidGraphSegment, lpVtbl : IEnumMSVidGraphSegmentVtbl* do
    GUID = LibC::GUID.new(0x3dd2903e_u32, 0xe0aa_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x3a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IEnumMSVidGraphSegment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumMSVidGraphSegment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumMSVidGraphSegment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumMSVidGraphSegment*, celt : UInt32, rgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumMSVidGraphSegment*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumMSVidGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumMSVidGraphSegment*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record IMSVidVRGraphSegmentVtbl,
    query_interface : Proc(IMSVidVRGraphSegment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVRGraphSegment*, UInt32),
    release : Proc(IMSVidVRGraphSegment*, UInt32),
    get_class_id : Proc(IMSVidVRGraphSegment*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_Init : Proc(IMSVidVRGraphSegment*, Void**, Win32cr::Foundation::HRESULT),
    put_Init : Proc(IMSVidVRGraphSegment*, Void*, Win32cr::Foundation::HRESULT),
    enum_filters : Proc(IMSVidVRGraphSegment*, Void**, Win32cr::Foundation::HRESULT),
    get_Container : Proc(IMSVidVRGraphSegment*, Void**, Win32cr::Foundation::HRESULT),
    put_Container : Proc(IMSVidVRGraphSegment*, Void*, Win32cr::Foundation::HRESULT),
    get_Type : Proc(IMSVidVRGraphSegment*, Win32cr::Media::DirectShow::MSVidSegmentType*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidVRGraphSegment*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    build : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    post_build : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    pre_run : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    post_run : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    pre_stop : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    post_stop : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    on_event_notify : Proc(IMSVidVRGraphSegment*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    decompose : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    put__VMRendererMode : Proc(IMSVidVRGraphSegment*, Int32, Win32cr::Foundation::HRESULT),
    put_Owner : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_Owner : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    get_UseOverlay : Proc(IMSVidVRGraphSegment*, Int16*, Win32cr::Foundation::HRESULT),
    put_UseOverlay : Proc(IMSVidVRGraphSegment*, Int16, Win32cr::Foundation::HRESULT),
    get_Visible : Proc(IMSVidVRGraphSegment*, Int16*, Win32cr::Foundation::HRESULT),
    put_Visible : Proc(IMSVidVRGraphSegment*, Int16, Win32cr::Foundation::HRESULT),
    get_ColorKey : Proc(IMSVidVRGraphSegment*, UInt32*, Win32cr::Foundation::HRESULT),
    put_ColorKey : Proc(IMSVidVRGraphSegment*, UInt32, Win32cr::Foundation::HRESULT),
    get_Source : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    put_Source : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::RECT, Win32cr::Foundation::HRESULT),
    get_Destination : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    put_Destination : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::RECT, Win32cr::Foundation::HRESULT),
    get_NativeSize : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    get_BorderColor : Proc(IMSVidVRGraphSegment*, UInt32*, Win32cr::Foundation::HRESULT),
    put_BorderColor : Proc(IMSVidVRGraphSegment*, UInt32, Win32cr::Foundation::HRESULT),
    get_MaintainAspectRatio : Proc(IMSVidVRGraphSegment*, Int16*, Win32cr::Foundation::HRESULT),
    put_MaintainAspectRatio : Proc(IMSVidVRGraphSegment*, Int16, Win32cr::Foundation::HRESULT),
    refresh : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    display_change : Proc(IMSVidVRGraphSegment*, Win32cr::Foundation::HRESULT),
    re_paint : Proc(IMSVidVRGraphSegment*, Win32cr::Graphics::Gdi::HDC, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dd47de3f-9874-4f7b-8b22-7cb2688461e7")]
  record IMSVidVRGraphSegment, lpVtbl : IMSVidVRGraphSegmentVtbl* do
    GUID = LibC::GUID.new(0xdd47de3f_u32, 0x9874_u16, 0x4f7b_u16, StaticArray[0x8b_u8, 0x22_u8, 0x7c_u8, 0xb2_u8, 0x68_u8, 0x84_u8, 0x61_u8, 0xe7_u8])
    def query_interface(this : IMSVidVRGraphSegment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVRGraphSegment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVRGraphSegment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_class_id(this : IMSVidVRGraphSegment*, pClassID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_class_id.call(this, pClassID)
    end
    def get_Init(this : IMSVidVRGraphSegment*, pInit : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Init.call(this, pInit)
    end
    def put_Init(this : IMSVidVRGraphSegment*, pInit : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Init.call(this, pInit)
    end
    def enum_filters(this : IMSVidVRGraphSegment*, pNewEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_filters.call(this, pNewEnum)
    end
    def get_Container(this : IMSVidVRGraphSegment*, ppCtl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Container.call(this, ppCtl)
    end
    def put_Container(this : IMSVidVRGraphSegment*, pCtl : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Container.call(this, pCtl)
    end
    def get_Type(this : IMSVidVRGraphSegment*, pType : Win32cr::Media::DirectShow::MSVidSegmentType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Type.call(this, pType)
    end
    def get_Category(this : IMSVidVRGraphSegment*, pGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, pGuid)
    end
    def build(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.build.call(this)
    end
    def post_build(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_build.call(this)
    end
    def pre_run(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_run.call(this)
    end
    def post_run(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_run.call(this)
    end
    def pre_stop(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pre_stop.call(this)
    end
    def post_stop(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.post_stop.call(this)
    end
    def on_event_notify(this : IMSVidVRGraphSegment*, lEventCode : Int32, lEventParm1 : LibC::IntPtrT, lEventParm2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event_notify.call(this, lEventCode, lEventParm1, lEventParm2)
    end
    def decompose(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decompose.call(this)
    end
    def put__VMRendererMode(this : IMSVidVRGraphSegment*, dwMode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__VMRendererMode.call(this, dwMode)
    end
    def put_Owner(this : IMSVidVRGraphSegment*, window : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Owner.call(this, window)
    end
    def get_Owner(this : IMSVidVRGraphSegment*, window : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Owner.call(this, window)
    end
    def get_UseOverlay(this : IMSVidVRGraphSegment*, use_overlay_val : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseOverlay.call(this, use_overlay_val)
    end
    def put_UseOverlay(this : IMSVidVRGraphSegment*, use_overlay_val : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseOverlay.call(this, use_overlay_val)
    end
    def get_Visible(this : IMSVidVRGraphSegment*, visible : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Visible.call(this, visible)
    end
    def put_Visible(this : IMSVidVRGraphSegment*, visible : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Visible.call(this, visible)
    end
    def get_ColorKey(this : IMSVidVRGraphSegment*, color_key : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ColorKey.call(this, color_key)
    end
    def put_ColorKey(this : IMSVidVRGraphSegment*, color_key : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ColorKey.call(this, color_key)
    end
    def get_Source(this : IMSVidVRGraphSegment*, r : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Source.call(this, r)
    end
    def put_Source(this : IMSVidVRGraphSegment*, r : Win32cr::Foundation::RECT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Source.call(this, r)
    end
    def get_Destination(this : IMSVidVRGraphSegment*, r : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Destination.call(this, r)
    end
    def put_Destination(this : IMSVidVRGraphSegment*, r : Win32cr::Foundation::RECT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Destination.call(this, r)
    end
    def get_NativeSize(this : IMSVidVRGraphSegment*, sizeval : Win32cr::Foundation::SIZE*, aspectratio : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NativeSize.call(this, sizeval, aspectratio)
    end
    def get_BorderColor(this : IMSVidVRGraphSegment*, color : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BorderColor.call(this, color)
    end
    def put_BorderColor(this : IMSVidVRGraphSegment*, color : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BorderColor.call(this, color)
    end
    def get_MaintainAspectRatio(this : IMSVidVRGraphSegment*, fMaintain : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaintainAspectRatio.call(this, fMaintain)
    end
    def put_MaintainAspectRatio(this : IMSVidVRGraphSegment*, fMaintain : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaintainAspectRatio.call(this, fMaintain)
    end
    def refresh(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh.call(this)
    end
    def display_change(this : IMSVidVRGraphSegment*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.display_change.call(this)
    end
    def re_paint(this : IMSVidVRGraphSegment*, hdc : Win32cr::Graphics::Gdi::HDC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.re_paint.call(this, hdc)
    end

  end

  @[Extern]
  record IMSVidDeviceVtbl,
    query_interface : Proc(IMSVidDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidDevice*, UInt32),
    release : Proc(IMSVidDevice*, UInt32),
    get_type_info_count : Proc(IMSVidDevice*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidDevice*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidDevice*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidDevice*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidDevice*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidDevice*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidDevice*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidDevice*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d47c-911d-11d2-b632-00c04f79498e")]
  record IMSVidDevice, lpVtbl : IMSVidDeviceVtbl* do
    GUID = LibC::GUID.new(0x1c15d47c_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidDevice*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidDevice*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidDevice*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidDevice*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidDevice*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidDevice*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidDevice*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidDevice*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidDevice*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidDevice*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidDevice*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidDevice*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidDevice*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end

  end

  @[Extern]
  record IMSVidDevice2Vtbl,
    query_interface : Proc(IMSVidDevice2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidDevice2*, UInt32),
    release : Proc(IMSVidDevice2*, UInt32),
    get_DevicePath : Proc(IMSVidDevice2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("87bd2783-ebc0-478c-b4a0-e8e7f43ab78e")]
  record IMSVidDevice2, lpVtbl : IMSVidDevice2Vtbl* do
    GUID = LibC::GUID.new(0x87bd2783_u32, 0xebc0_u16, 0x478c_u16, StaticArray[0xb4_u8, 0xa0_u8, 0xe8_u8, 0xe7_u8, 0xf4_u8, 0x3a_u8, 0xb7_u8, 0x8e_u8])
    def query_interface(this : IMSVidDevice2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidDevice2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidDevice2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_DevicePath(this : IMSVidDevice2*, dev_path : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DevicePath.call(this, dev_path)
    end

  end

  @[Extern]
  record IMSVidInputDeviceVtbl,
    query_interface : Proc(IMSVidInputDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidInputDevice*, UInt32),
    release : Proc(IMSVidInputDevice*, UInt32),
    get_type_info_count : Proc(IMSVidInputDevice*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidInputDevice*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidInputDevice*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidInputDevice*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidInputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidInputDevice*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidInputDevice*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidInputDevice*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidInputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidInputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidInputDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidInputDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidInputDevice*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidInputDevice*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidInputDevice*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b0353d-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidInputDevice, lpVtbl : IMSVidInputDeviceVtbl* do
    GUID = LibC::GUID.new(0x37b0353d_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidInputDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidInputDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidInputDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidInputDevice*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidInputDevice*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidInputDevice*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidInputDevice*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidInputDevice*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidInputDevice*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidInputDevice*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidInputDevice*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidInputDevice*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidInputDevice*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidInputDevice*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidInputDevice*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidInputDevice*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidInputDevice*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidInputDevice*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end

  end

  @[Extern]
  record IMSVidDeviceEventVtbl,
    query_interface : Proc(IMSVidDeviceEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidDeviceEvent*, UInt32),
    release : Proc(IMSVidDeviceEvent*, UInt32),
    get_type_info_count : Proc(IMSVidDeviceEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidDeviceEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidDeviceEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidDeviceEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidDeviceEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d480-911d-11d2-b632-00c04f79498e")]
  record IMSVidDeviceEvent, lpVtbl : IMSVidDeviceEventVtbl* do
    GUID = LibC::GUID.new(0x1c15d480_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidDeviceEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidDeviceEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidDeviceEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidDeviceEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidDeviceEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidDeviceEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidDeviceEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidDeviceEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end

  end

  @[Extern]
  record IMSVidInputDeviceEventVtbl,
    query_interface : Proc(IMSVidInputDeviceEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidInputDeviceEvent*, UInt32),
    release : Proc(IMSVidInputDeviceEvent*, UInt32),
    get_type_info_count : Proc(IMSVidInputDeviceEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidInputDeviceEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidInputDeviceEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidInputDeviceEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b0353e-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidInputDeviceEvent, lpVtbl : IMSVidInputDeviceEventVtbl* do
    GUID = LibC::GUID.new(0x37b0353e_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidInputDeviceEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidInputDeviceEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidInputDeviceEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidInputDeviceEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidInputDeviceEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidInputDeviceEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidInputDeviceEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IMSVidVideoInputDeviceVtbl,
    query_interface : Proc(IMSVidVideoInputDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVideoInputDevice*, UInt32),
    release : Proc(IMSVidVideoInputDevice*, UInt32),
    get_type_info_count : Proc(IMSVidVideoInputDevice*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidVideoInputDevice*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidVideoInputDevice*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidVideoInputDevice*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidVideoInputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidVideoInputDevice*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidVideoInputDevice*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidVideoInputDevice*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidVideoInputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidVideoInputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidVideoInputDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidVideoInputDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidVideoInputDevice*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidVideoInputDevice*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidVideoInputDevice*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d47f-911d-11d2-b632-00c04f79498e")]
  record IMSVidVideoInputDevice, lpVtbl : IMSVidVideoInputDeviceVtbl* do
    GUID = LibC::GUID.new(0x1c15d47f_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidVideoInputDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVideoInputDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVideoInputDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidVideoInputDevice*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidVideoInputDevice*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidVideoInputDevice*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidVideoInputDevice*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidVideoInputDevice*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidVideoInputDevice*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidVideoInputDevice*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidVideoInputDevice*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidVideoInputDevice*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidVideoInputDevice*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidVideoInputDevice*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidVideoInputDevice*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidVideoInputDevice*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidVideoInputDevice*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidVideoInputDevice*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end

  end

  @[Extern]
  record IMSVidPlaybackVtbl,
    query_interface : Proc(IMSVidPlayback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidPlayback*, UInt32),
    release : Proc(IMSVidPlayback*, UInt32),
    get_type_info_count : Proc(IMSVidPlayback*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidPlayback*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidPlayback*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidPlayback*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidPlayback*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidPlayback*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidPlayback*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidPlayback*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidPlayback*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidPlayback*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidPlayback*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidPlayback*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidPlayback*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidPlayback*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidPlayback*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnableResetOnStop : Proc(IMSVidPlayback*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableResetOnStop : Proc(IMSVidPlayback*, Int16, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidPlayback*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidPlayback*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidPlayback*, Win32cr::Foundation::HRESULT),
    get_CanStep : Proc(IMSVidPlayback*, Int16, Int16*, Win32cr::Foundation::HRESULT),
    step : Proc(IMSVidPlayback*, Int32, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMSVidPlayback*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMSVidPlayback*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMSVidPlayback*, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMSVidPlayback*, Int32*, Win32cr::Foundation::HRESULT),
    put_PositionMode : Proc(IMSVidPlayback*, Win32cr::Media::DirectShow::PositionModeList, Win32cr::Foundation::HRESULT),
    get_PositionMode : Proc(IMSVidPlayback*, Win32cr::Media::DirectShow::PositionModeList*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IMSVidPlayback*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b03538-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidPlayback, lpVtbl : IMSVidPlaybackVtbl* do
    GUID = LibC::GUID.new(0x37b03538_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidPlayback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidPlayback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidPlayback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidPlayback*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidPlayback*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidPlayback*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidPlayback*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidPlayback*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidPlayback*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidPlayback*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidPlayback*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidPlayback*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidPlayback*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidPlayback*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidPlayback*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidPlayback*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidPlayback*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidPlayback*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_EnableResetOnStop(this : IMSVidPlayback*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableResetOnStop.call(this, pVal)
    end
    def put_EnableResetOnStop(this : IMSVidPlayback*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableResetOnStop.call(this, newVal)
    end
    def run(this : IMSVidPlayback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMSVidPlayback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMSVidPlayback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_CanStep(this : IMSVidPlayback*, fBackwards : Int16, pfCan : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CanStep.call(this, fBackwards, pfCan)
    end
    def step(this : IMSVidPlayback*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def put_Rate(this : IMSVidPlayback*, plRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, plRate)
    end
    def get_Rate(this : IMSVidPlayback*, plRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, plRate)
    end
    def put_CurrentPosition(this : IMSVidPlayback*, lPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, lPosition)
    end
    def get_CurrentPosition(this : IMSVidPlayback*, lPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, lPosition)
    end
    def put_PositionMode(this : IMSVidPlayback*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PositionMode.call(this, lPositionMode)
    end
    def get_PositionMode(this : IMSVidPlayback*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PositionMode.call(this, lPositionMode)
    end
    def get_Length(this : IMSVidPlayback*, lLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, lLength)
    end

  end

  @[Extern]
  record IMSVidPlaybackEventVtbl,
    query_interface : Proc(IMSVidPlaybackEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidPlaybackEvent*, UInt32),
    release : Proc(IMSVidPlaybackEvent*, UInt32),
    get_type_info_count : Proc(IMSVidPlaybackEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidPlaybackEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidPlaybackEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidPlaybackEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_media : Proc(IMSVidPlaybackEvent*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b0353b-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidPlaybackEvent, lpVtbl : IMSVidPlaybackEventVtbl* do
    GUID = LibC::GUID.new(0x37b0353b_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidPlaybackEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidPlaybackEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidPlaybackEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidPlaybackEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidPlaybackEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidPlaybackEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidPlaybackEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def end_of_media(this : IMSVidPlaybackEvent*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_media.call(this, lpd)
    end

  end

  @[Extern]
  record IMSVidTunerVtbl,
    query_interface : Proc(IMSVidTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidTuner*, UInt32),
    release : Proc(IMSVidTuner*, UInt32),
    get_type_info_count : Proc(IMSVidTuner*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidTuner*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidTuner*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidTuner*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidTuner*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidTuner*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidTuner*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidTuner*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidTuner*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidTuner*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidTuner*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidTuner*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidTuner*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidTuner*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Tune : Proc(IMSVidTuner*, Void**, Win32cr::Foundation::HRESULT),
    put_Tune : Proc(IMSVidTuner*, Void*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IMSVidTuner*, Void**, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IMSVidTuner*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d47d-911d-11d2-b632-00c04f79498e")]
  record IMSVidTuner, lpVtbl : IMSVidTunerVtbl* do
    GUID = LibC::GUID.new(0x1c15d47d_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidTuner*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidTuner*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidTuner*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidTuner*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidTuner*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidTuner*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidTuner*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidTuner*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidTuner*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidTuner*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidTuner*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidTuner*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidTuner*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidTuner*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidTuner*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_Tune(this : IMSVidTuner*, ppTR : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Tune.call(this, ppTR)
    end
    def put_Tune(this : IMSVidTuner*, pTR : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Tune.call(this, pTR)
    end
    def get_TuningSpace(this : IMSVidTuner*, plTS : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, plTS)
    end
    def put_TuningSpace(this : IMSVidTuner*, plTS : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, plTS)
    end

  end

  @[Extern]
  record IMSVidTunerEventVtbl,
    query_interface : Proc(IMSVidTunerEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidTunerEvent*, UInt32),
    release : Proc(IMSVidTunerEvent*, UInt32),
    get_type_info_count : Proc(IMSVidTunerEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidTunerEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidTunerEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidTunerEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    tune_changed : Proc(IMSVidTunerEvent*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d485-911d-11d2-b632-00c04f79498e")]
  record IMSVidTunerEvent, lpVtbl : IMSVidTunerEventVtbl* do
    GUID = LibC::GUID.new(0x1c15d485_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidTunerEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidTunerEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidTunerEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidTunerEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidTunerEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidTunerEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidTunerEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def tune_changed(this : IMSVidTunerEvent*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tune_changed.call(this, lpd)
    end

  end

  @[Extern]
  record IMSVidAnalogTunerVtbl,
    query_interface : Proc(IMSVidAnalogTuner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidAnalogTuner*, UInt32),
    release : Proc(IMSVidAnalogTuner*, UInt32),
    get_type_info_count : Proc(IMSVidAnalogTuner*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidAnalogTuner*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidAnalogTuner*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidAnalogTuner*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidAnalogTuner*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidAnalogTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidAnalogTuner*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidAnalogTuner*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidAnalogTuner*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidAnalogTuner*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidAnalogTuner*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidAnalogTuner*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidAnalogTuner*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidAnalogTuner*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidAnalogTuner*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Tune : Proc(IMSVidAnalogTuner*, Void**, Win32cr::Foundation::HRESULT),
    put_Tune : Proc(IMSVidAnalogTuner*, Void*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IMSVidAnalogTuner*, Void**, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IMSVidAnalogTuner*, Void*, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IMSVidAnalogTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_Channel : Proc(IMSVidAnalogTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_VideoFrequency : Proc(IMSVidAnalogTuner*, Int32*, Win32cr::Foundation::HRESULT),
    get_AudioFrequency : Proc(IMSVidAnalogTuner*, Int32*, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IMSVidAnalogTuner*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IMSVidAnalogTuner*, Int32, Win32cr::Foundation::HRESULT),
    get_SAP : Proc(IMSVidAnalogTuner*, Int16*, Win32cr::Foundation::HRESULT),
    put_SAP : Proc(IMSVidAnalogTuner*, Int16, Win32cr::Foundation::HRESULT),
    channel_available : Proc(IMSVidAnalogTuner*, Int32, Int32*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d47e-911d-11d2-b632-00c04f79498e")]
  record IMSVidAnalogTuner, lpVtbl : IMSVidAnalogTunerVtbl* do
    GUID = LibC::GUID.new(0x1c15d47e_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidAnalogTuner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidAnalogTuner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidAnalogTuner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidAnalogTuner*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidAnalogTuner*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidAnalogTuner*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidAnalogTuner*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidAnalogTuner*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidAnalogTuner*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidAnalogTuner*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidAnalogTuner*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidAnalogTuner*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidAnalogTuner*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidAnalogTuner*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidAnalogTuner*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidAnalogTuner*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidAnalogTuner*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidAnalogTuner*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_Tune(this : IMSVidAnalogTuner*, ppTR : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Tune.call(this, ppTR)
    end
    def put_Tune(this : IMSVidAnalogTuner*, pTR : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Tune.call(this, pTR)
    end
    def get_TuningSpace(this : IMSVidAnalogTuner*, plTS : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, plTS)
    end
    def put_TuningSpace(this : IMSVidAnalogTuner*, plTS : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, plTS)
    end
    def get_Channel(this : IMSVidAnalogTuner*, channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, channel)
    end
    def put_Channel(this : IMSVidAnalogTuner*, channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, channel)
    end
    def get_VideoFrequency(this : IMSVidAnalogTuner*, lcc : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoFrequency.call(this, lcc)
    end
    def get_AudioFrequency(this : IMSVidAnalogTuner*, lcc : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioFrequency.call(this, lcc)
    end
    def get_CountryCode(this : IMSVidAnalogTuner*, lcc : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, lcc)
    end
    def put_CountryCode(this : IMSVidAnalogTuner*, lcc : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, lcc)
    end
    def get_SAP(this : IMSVidAnalogTuner*, pfSapOn : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAP.call(this, pfSapOn)
    end
    def put_SAP(this : IMSVidAnalogTuner*, fSapOn : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAP.call(this, fSapOn)
    end
    def channel_available(this : IMSVidAnalogTuner*, nChannel : Int32, signal_strength : Int32*, fSignalPresent : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.channel_available.call(this, nChannel, signal_strength, fSignalPresent)
    end

  end

  @[Extern]
  record IMSVidAnalogTuner2Vtbl,
    query_interface : Proc(IMSVidAnalogTuner2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidAnalogTuner2*, UInt32),
    release : Proc(IMSVidAnalogTuner2*, UInt32),
    get_type_info_count : Proc(IMSVidAnalogTuner2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidAnalogTuner2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidAnalogTuner2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidAnalogTuner2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidAnalogTuner2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidAnalogTuner2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidAnalogTuner2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidAnalogTuner2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidAnalogTuner2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidAnalogTuner2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidAnalogTuner2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidAnalogTuner2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidAnalogTuner2*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidAnalogTuner2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_Tune : Proc(IMSVidAnalogTuner2*, Void**, Win32cr::Foundation::HRESULT),
    put_Tune : Proc(IMSVidAnalogTuner2*, Void*, Win32cr::Foundation::HRESULT),
    get_TuningSpace : Proc(IMSVidAnalogTuner2*, Void**, Win32cr::Foundation::HRESULT),
    put_TuningSpace : Proc(IMSVidAnalogTuner2*, Void*, Win32cr::Foundation::HRESULT),
    get_Channel : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Channel : Proc(IMSVidAnalogTuner2*, Int32, Win32cr::Foundation::HRESULT),
    get_VideoFrequency : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT),
    get_AudioFrequency : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CountryCode : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CountryCode : Proc(IMSVidAnalogTuner2*, Int32, Win32cr::Foundation::HRESULT),
    get_SAP : Proc(IMSVidAnalogTuner2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SAP : Proc(IMSVidAnalogTuner2*, Int16, Win32cr::Foundation::HRESULT),
    channel_available : Proc(IMSVidAnalogTuner2*, Int32, Int32*, Int16*, Win32cr::Foundation::HRESULT),
    get_TVFormats : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT),
    get_TunerModes : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT),
    get_NumAuxInputs : Proc(IMSVidAnalogTuner2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37647bf7-3dde-4cc8-a4dc-0d534d3d0037")]
  record IMSVidAnalogTuner2, lpVtbl : IMSVidAnalogTuner2Vtbl* do
    GUID = LibC::GUID.new(0x37647bf7_u32, 0x3dde_u16, 0x4cc8_u16, StaticArray[0xa4_u8, 0xdc_u8, 0xd_u8, 0x53_u8, 0x4d_u8, 0x3d_u8, 0x0_u8, 0x37_u8])
    def query_interface(this : IMSVidAnalogTuner2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidAnalogTuner2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidAnalogTuner2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidAnalogTuner2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidAnalogTuner2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidAnalogTuner2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidAnalogTuner2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidAnalogTuner2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidAnalogTuner2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidAnalogTuner2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidAnalogTuner2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidAnalogTuner2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidAnalogTuner2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidAnalogTuner2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidAnalogTuner2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidAnalogTuner2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidAnalogTuner2*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidAnalogTuner2*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_Tune(this : IMSVidAnalogTuner2*, ppTR : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Tune.call(this, ppTR)
    end
    def put_Tune(this : IMSVidAnalogTuner2*, pTR : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Tune.call(this, pTR)
    end
    def get_TuningSpace(this : IMSVidAnalogTuner2*, plTS : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TuningSpace.call(this, plTS)
    end
    def put_TuningSpace(this : IMSVidAnalogTuner2*, plTS : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TuningSpace.call(this, plTS)
    end
    def get_Channel(this : IMSVidAnalogTuner2*, channel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Channel.call(this, channel)
    end
    def put_Channel(this : IMSVidAnalogTuner2*, channel : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Channel.call(this, channel)
    end
    def get_VideoFrequency(this : IMSVidAnalogTuner2*, lcc : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoFrequency.call(this, lcc)
    end
    def get_AudioFrequency(this : IMSVidAnalogTuner2*, lcc : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioFrequency.call(this, lcc)
    end
    def get_CountryCode(this : IMSVidAnalogTuner2*, lcc : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CountryCode.call(this, lcc)
    end
    def put_CountryCode(this : IMSVidAnalogTuner2*, lcc : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CountryCode.call(this, lcc)
    end
    def get_SAP(this : IMSVidAnalogTuner2*, pfSapOn : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SAP.call(this, pfSapOn)
    end
    def put_SAP(this : IMSVidAnalogTuner2*, fSapOn : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SAP.call(this, fSapOn)
    end
    def channel_available(this : IMSVidAnalogTuner2*, nChannel : Int32, signal_strength : Int32*, fSignalPresent : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.channel_available.call(this, nChannel, signal_strength, fSignalPresent)
    end
    def get_TVFormats(this : IMSVidAnalogTuner2*, formats : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TVFormats.call(this, formats)
    end
    def get_TunerModes(this : IMSVidAnalogTuner2*, modes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TunerModes.call(this, modes)
    end
    def get_NumAuxInputs(this : IMSVidAnalogTuner2*, inputs : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumAuxInputs.call(this, inputs)
    end

  end

  @[Extern]
  record IMSVidAnalogTunerEventVtbl,
    query_interface : Proc(IMSVidAnalogTunerEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidAnalogTunerEvent*, UInt32),
    release : Proc(IMSVidAnalogTunerEvent*, UInt32),
    get_type_info_count : Proc(IMSVidAnalogTunerEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidAnalogTunerEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidAnalogTunerEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidAnalogTunerEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    tune_changed : Proc(IMSVidAnalogTunerEvent*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c15d486-911d-11d2-b632-00c04f79498e")]
  record IMSVidAnalogTunerEvent, lpVtbl : IMSVidAnalogTunerEventVtbl* do
    GUID = LibC::GUID.new(0x1c15d486_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidAnalogTunerEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidAnalogTunerEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidAnalogTunerEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidAnalogTunerEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidAnalogTunerEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidAnalogTunerEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidAnalogTunerEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def tune_changed(this : IMSVidAnalogTunerEvent*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.tune_changed.call(this, lpd)
    end

  end

  @[Extern]
  record IMSVidFilePlaybackVtbl,
    query_interface : Proc(IMSVidFilePlayback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidFilePlayback*, UInt32),
    release : Proc(IMSVidFilePlayback*, UInt32),
    get_type_info_count : Proc(IMSVidFilePlayback*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidFilePlayback*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidFilePlayback*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidFilePlayback*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidFilePlayback*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidFilePlayback*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidFilePlayback*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidFilePlayback*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidFilePlayback*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidFilePlayback*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidFilePlayback*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidFilePlayback*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidFilePlayback*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidFilePlayback*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidFilePlayback*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnableResetOnStop : Proc(IMSVidFilePlayback*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableResetOnStop : Proc(IMSVidFilePlayback*, Int16, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidFilePlayback*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidFilePlayback*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidFilePlayback*, Win32cr::Foundation::HRESULT),
    get_CanStep : Proc(IMSVidFilePlayback*, Int16, Int16*, Win32cr::Foundation::HRESULT),
    step : Proc(IMSVidFilePlayback*, Int32, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMSVidFilePlayback*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMSVidFilePlayback*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMSVidFilePlayback*, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMSVidFilePlayback*, Int32*, Win32cr::Foundation::HRESULT),
    put_PositionMode : Proc(IMSVidFilePlayback*, Win32cr::Media::DirectShow::PositionModeList, Win32cr::Foundation::HRESULT),
    get_PositionMode : Proc(IMSVidFilePlayback*, Win32cr::Media::DirectShow::PositionModeList*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IMSVidFilePlayback*, Int32*, Win32cr::Foundation::HRESULT),
    get_FileName : Proc(IMSVidFilePlayback*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FileName : Proc(IMSVidFilePlayback*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b03539-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidFilePlayback, lpVtbl : IMSVidFilePlaybackVtbl* do
    GUID = LibC::GUID.new(0x37b03539_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidFilePlayback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidFilePlayback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidFilePlayback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidFilePlayback*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidFilePlayback*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidFilePlayback*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidFilePlayback*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidFilePlayback*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidFilePlayback*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidFilePlayback*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidFilePlayback*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidFilePlayback*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidFilePlayback*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidFilePlayback*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidFilePlayback*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidFilePlayback*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidFilePlayback*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidFilePlayback*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_EnableResetOnStop(this : IMSVidFilePlayback*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableResetOnStop.call(this, pVal)
    end
    def put_EnableResetOnStop(this : IMSVidFilePlayback*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableResetOnStop.call(this, newVal)
    end
    def run(this : IMSVidFilePlayback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMSVidFilePlayback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMSVidFilePlayback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_CanStep(this : IMSVidFilePlayback*, fBackwards : Int16, pfCan : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CanStep.call(this, fBackwards, pfCan)
    end
    def step(this : IMSVidFilePlayback*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def put_Rate(this : IMSVidFilePlayback*, plRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, plRate)
    end
    def get_Rate(this : IMSVidFilePlayback*, plRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, plRate)
    end
    def put_CurrentPosition(this : IMSVidFilePlayback*, lPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, lPosition)
    end
    def get_CurrentPosition(this : IMSVidFilePlayback*, lPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, lPosition)
    end
    def put_PositionMode(this : IMSVidFilePlayback*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PositionMode.call(this, lPositionMode)
    end
    def get_PositionMode(this : IMSVidFilePlayback*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PositionMode.call(this, lPositionMode)
    end
    def get_Length(this : IMSVidFilePlayback*, lLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, lLength)
    end
    def get_FileName(this : IMSVidFilePlayback*, file_name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileName.call(this, file_name)
    end
    def put_FileName(this : IMSVidFilePlayback*, file_name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileName.call(this, file_name)
    end

  end

  @[Extern]
  record IMSVidFilePlayback2Vtbl,
    query_interface : Proc(IMSVidFilePlayback2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidFilePlayback2*, UInt32),
    release : Proc(IMSVidFilePlayback2*, UInt32),
    get_type_info_count : Proc(IMSVidFilePlayback2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidFilePlayback2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidFilePlayback2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidFilePlayback2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidFilePlayback2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidFilePlayback2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidFilePlayback2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidFilePlayback2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidFilePlayback2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidFilePlayback2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidFilePlayback2*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidFilePlayback2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnableResetOnStop : Proc(IMSVidFilePlayback2*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableResetOnStop : Proc(IMSVidFilePlayback2*, Int16, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::HRESULT),
    get_CanStep : Proc(IMSVidFilePlayback2*, Int16, Int16*, Win32cr::Foundation::HRESULT),
    step : Proc(IMSVidFilePlayback2*, Int32, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMSVidFilePlayback2*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMSVidFilePlayback2*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMSVidFilePlayback2*, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMSVidFilePlayback2*, Int32*, Win32cr::Foundation::HRESULT),
    put_PositionMode : Proc(IMSVidFilePlayback2*, Win32cr::Media::DirectShow::PositionModeList, Win32cr::Foundation::HRESULT),
    get_PositionMode : Proc(IMSVidFilePlayback2*, Win32cr::Media::DirectShow::PositionModeList*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IMSVidFilePlayback2*, Int32*, Win32cr::Foundation::HRESULT),
    get_FileName : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FileName : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put__SourceFilter : Proc(IMSVidFilePlayback2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    put___SourceFilter : Proc(IMSVidFilePlayback2*, LibC::GUID, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2f7e44af-6e52-4660-bc08-d8d542587d72")]
  record IMSVidFilePlayback2, lpVtbl : IMSVidFilePlayback2Vtbl* do
    GUID = LibC::GUID.new(0x2f7e44af_u32, 0x6e52_u16, 0x4660_u16, StaticArray[0xbc_u8, 0x8_u8, 0xd8_u8, 0xd5_u8, 0x42_u8, 0x58_u8, 0x7d_u8, 0x72_u8])
    def query_interface(this : IMSVidFilePlayback2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidFilePlayback2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidFilePlayback2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidFilePlayback2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidFilePlayback2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidFilePlayback2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidFilePlayback2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidFilePlayback2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidFilePlayback2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidFilePlayback2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidFilePlayback2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidFilePlayback2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidFilePlayback2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidFilePlayback2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidFilePlayback2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidFilePlayback2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidFilePlayback2*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidFilePlayback2*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_EnableResetOnStop(this : IMSVidFilePlayback2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableResetOnStop.call(this, pVal)
    end
    def put_EnableResetOnStop(this : IMSVidFilePlayback2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableResetOnStop.call(this, newVal)
    end
    def run(this : IMSVidFilePlayback2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMSVidFilePlayback2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMSVidFilePlayback2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_CanStep(this : IMSVidFilePlayback2*, fBackwards : Int16, pfCan : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CanStep.call(this, fBackwards, pfCan)
    end
    def step(this : IMSVidFilePlayback2*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def put_Rate(this : IMSVidFilePlayback2*, plRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, plRate)
    end
    def get_Rate(this : IMSVidFilePlayback2*, plRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, plRate)
    end
    def put_CurrentPosition(this : IMSVidFilePlayback2*, lPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, lPosition)
    end
    def get_CurrentPosition(this : IMSVidFilePlayback2*, lPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, lPosition)
    end
    def put_PositionMode(this : IMSVidFilePlayback2*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PositionMode.call(this, lPositionMode)
    end
    def get_PositionMode(this : IMSVidFilePlayback2*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PositionMode.call(this, lPositionMode)
    end
    def get_Length(this : IMSVidFilePlayback2*, lLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, lLength)
    end
    def get_FileName(this : IMSVidFilePlayback2*, file_name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileName.call(this, file_name)
    end
    def put_FileName(this : IMSVidFilePlayback2*, file_name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileName.call(this, file_name)
    end
    def put__SourceFilter(this : IMSVidFilePlayback2*, file_name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__SourceFilter.call(this, file_name)
    end
    def put___SourceFilter(this : IMSVidFilePlayback2*, file_name : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put___SourceFilter.call(this, file_name)
    end

  end

  @[Extern]
  record IMSVidFilePlaybackEventVtbl,
    query_interface : Proc(IMSVidFilePlaybackEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidFilePlaybackEvent*, UInt32),
    release : Proc(IMSVidFilePlaybackEvent*, UInt32),
    get_type_info_count : Proc(IMSVidFilePlaybackEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidFilePlaybackEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidFilePlaybackEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidFilePlaybackEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_media : Proc(IMSVidFilePlaybackEvent*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b0353a-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidFilePlaybackEvent, lpVtbl : IMSVidFilePlaybackEventVtbl* do
    GUID = LibC::GUID.new(0x37b0353a_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidFilePlaybackEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidFilePlaybackEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidFilePlaybackEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidFilePlaybackEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidFilePlaybackEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidFilePlaybackEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidFilePlaybackEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def end_of_media(this : IMSVidFilePlaybackEvent*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_media.call(this, lpd)
    end

  end

  @[Extern]
  record IMSVidWebDVDVtbl,
    query_interface : Proc(IMSVidWebDVD*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidWebDVD*, UInt32),
    release : Proc(IMSVidWebDVD*, UInt32),
    get_type_info_count : Proc(IMSVidWebDVD*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidWebDVD*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidWebDVD*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidWebDVD*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidWebDVD*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidWebDVD*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidWebDVD*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidWebDVD*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidWebDVD*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidWebDVD*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidWebDVD*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnableResetOnStop : Proc(IMSVidWebDVD*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableResetOnStop : Proc(IMSVidWebDVD*, Int16, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    get_CanStep : Proc(IMSVidWebDVD*, Int16, Int16*, Win32cr::Foundation::HRESULT),
    step : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMSVidWebDVD*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMSVidWebDVD*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    put_PositionMode : Proc(IMSVidWebDVD*, Win32cr::Media::DirectShow::PositionModeList, Win32cr::Foundation::HRESULT),
    get_PositionMode : Proc(IMSVidWebDVD*, Win32cr::Media::DirectShow::PositionModeList*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    on_dvd_event : Proc(IMSVidWebDVD*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    play_title : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    play_chapter_in_title : Proc(IMSVidWebDVD*, Int32, Int32, Win32cr::Foundation::HRESULT),
    play_chapter : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    play_chapters_auto_stop : Proc(IMSVidWebDVD*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    play_at_time : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    play_at_time_in_title : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    play_period_in_title_auto_stop : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    replay_chapter : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    play_prev_chapter : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    play_next_chapter : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    still_off : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    get_AudioLanguage : Proc(IMSVidWebDVD*, Int32, Int16, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    show_menu : Proc(IMSVidWebDVD*, Win32cr::Media::DirectShow::DVDMenuIDConstants, Win32cr::Foundation::HRESULT),
    resume : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    return_from_submenu : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    get_ButtonsAvailable : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentButton : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    select_and_activate_button : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    activate_button : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    select_right_button : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    select_left_button : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    select_lower_button : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    select_upper_button : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    activate_at_position : Proc(IMSVidWebDVD*, Int32, Int32, Win32cr::Foundation::HRESULT),
    select_at_position : Proc(IMSVidWebDVD*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_ButtonAtPosition : Proc(IMSVidWebDVD*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberOfChapters : Proc(IMSVidWebDVD*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalTitleTime : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TitlesAvailable : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_VolumesAvailable : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentVolume : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentDiscSide : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentDomain : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentChapter : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentTitle : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentTime : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    dvd_time_code2bstr : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DVDDirectory : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DVDDirectory : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    is_subpicture_stream_enabled : Proc(IMSVidWebDVD*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    is_audio_stream_enabled : Proc(IMSVidWebDVD*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentSubpictureStream : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    put_CurrentSubpictureStream : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    get_SubpictureLanguage : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CurrentAudioStream : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    put_CurrentAudioStream : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    get_AudioStreamsAvailable : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_AnglesAvailable : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentAngle : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    put_CurrentAngle : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    get_SubpictureStreamsAvailable : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_SubpictureOn : Proc(IMSVidWebDVD*, Int16*, Win32cr::Foundation::HRESULT),
    put_SubpictureOn : Proc(IMSVidWebDVD*, Int16, Win32cr::Foundation::HRESULT),
    get_DVDUniqueID : Proc(IMSVidWebDVD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    accept_parental_level_change : Proc(IMSVidWebDVD*, Int16, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    notify_parental_level_change : Proc(IMSVidWebDVD*, Int16, Win32cr::Foundation::HRESULT),
    select_parental_country : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    select_parental_level : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TitleParentalLevels : Proc(IMSVidWebDVD*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_PlayerParentalCountry : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_PlayerParentalLevel : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    eject : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    uop_valid : Proc(IMSVidWebDVD*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    get_SPRM : Proc(IMSVidWebDVD*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    get_GPRM : Proc(IMSVidWebDVD*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    put_GPRM : Proc(IMSVidWebDVD*, Int32, Int16, Win32cr::Foundation::HRESULT),
    get_DVDTextStringType : Proc(IMSVidWebDVD*, Int32, Int32, Win32cr::Media::DirectShow::DVDTextStringType*, Win32cr::Foundation::HRESULT),
    get_DVDTextString : Proc(IMSVidWebDVD*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DVDTextNumberOfStrings : Proc(IMSVidWebDVD*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_DVDTextNumberOfLanguages : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_DVDTextLanguageLCID : Proc(IMSVidWebDVD*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    region_change : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    get_DVDAdm : Proc(IMSVidWebDVD*, Void**, Win32cr::Foundation::HRESULT),
    delete_bookmark : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    restore_bookmark : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    save_bookmark : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    select_default_audio_language : Proc(IMSVidWebDVD*, Int32, Int32, Win32cr::Foundation::HRESULT),
    select_default_subpicture_language : Proc(IMSVidWebDVD*, Int32, Win32cr::Media::DirectShow::DVDSPExt, Win32cr::Foundation::HRESULT),
    get_PreferredSubpictureStream : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_DefaultMenuLanguage : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultMenuLanguage : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    get_DefaultSubpictureLanguage : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_DefaultAudioLanguage : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_DefaultSubpictureLanguageExt : Proc(IMSVidWebDVD*, Win32cr::Media::DirectShow::DVDSPExt*, Win32cr::Foundation::HRESULT),
    get_DefaultAudioLanguageExt : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    get_LanguageFromLCID : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_KaraokeAudioPresentationMode : Proc(IMSVidWebDVD*, Int32*, Win32cr::Foundation::HRESULT),
    put_KaraokeAudioPresentationMode : Proc(IMSVidWebDVD*, Int32, Win32cr::Foundation::HRESULT),
    get_KaraokeChannelContent : Proc(IMSVidWebDVD*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_KaraokeChannelAssignment : Proc(IMSVidWebDVD*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    restore_preferred_settings : Proc(IMSVidWebDVD*, Win32cr::Foundation::HRESULT),
    get_ButtonRect : Proc(IMSVidWebDVD*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_DVDScreenInMouseCoordinates : Proc(IMSVidWebDVD*, Void**, Win32cr::Foundation::HRESULT),
    put_DVDScreenInMouseCoordinates : Proc(IMSVidWebDVD*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cf45f88b-ac56-4ee2-a73a-ed04e2885d3c")]
  record IMSVidWebDVD, lpVtbl : IMSVidWebDVDVtbl* do
    GUID = LibC::GUID.new(0xcf45f88b_u32, 0xac56_u16, 0x4ee2_u16, StaticArray[0xa7_u8, 0x3a_u8, 0xed_u8, 0x4_u8, 0xe2_u8, 0x88_u8, 0x5d_u8, 0x3c_u8])
    def query_interface(this : IMSVidWebDVD*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidWebDVD*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidWebDVD*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidWebDVD*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidWebDVD*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidWebDVD*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidWebDVD*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidWebDVD*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidWebDVD*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidWebDVD*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidWebDVD*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidWebDVD*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidWebDVD*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidWebDVD*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidWebDVD*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidWebDVD*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidWebDVD*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidWebDVD*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_EnableResetOnStop(this : IMSVidWebDVD*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableResetOnStop.call(this, pVal)
    end
    def put_EnableResetOnStop(this : IMSVidWebDVD*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableResetOnStop.call(this, newVal)
    end
    def run(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_CanStep(this : IMSVidWebDVD*, fBackwards : Int16, pfCan : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CanStep.call(this, fBackwards, pfCan)
    end
    def step(this : IMSVidWebDVD*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def put_Rate(this : IMSVidWebDVD*, plRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, plRate)
    end
    def get_Rate(this : IMSVidWebDVD*, plRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, plRate)
    end
    def put_CurrentPosition(this : IMSVidWebDVD*, lPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, lPosition)
    end
    def get_CurrentPosition(this : IMSVidWebDVD*, lPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, lPosition)
    end
    def put_PositionMode(this : IMSVidWebDVD*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PositionMode.call(this, lPositionMode)
    end
    def get_PositionMode(this : IMSVidWebDVD*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PositionMode.call(this, lPositionMode)
    end
    def get_Length(this : IMSVidWebDVD*, lLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, lLength)
    end
    def on_dvd_event(this : IMSVidWebDVD*, lEvent : Int32, lParam1 : LibC::IntPtrT, lParam2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_dvd_event.call(this, lEvent, lParam1, lParam2)
    end
    def play_title(this : IMSVidWebDVD*, lTitle : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_title.call(this, lTitle)
    end
    def play_chapter_in_title(this : IMSVidWebDVD*, lTitle : Int32, lChapter : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter_in_title.call(this, lTitle, lChapter)
    end
    def play_chapter(this : IMSVidWebDVD*, lChapter : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter.call(this, lChapter)
    end
    def play_chapters_auto_stop(this : IMSVidWebDVD*, lTitle : Int32, lstrChapter : Int32, lChapterCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapters_auto_stop.call(this, lTitle, lstrChapter, lChapterCount)
    end
    def play_at_time(this : IMSVidWebDVD*, strTime : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time.call(this, strTime)
    end
    def play_at_time_in_title(this : IMSVidWebDVD*, lTitle : Int32, strTime : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time_in_title.call(this, lTitle, strTime)
    end
    def play_period_in_title_auto_stop(this : IMSVidWebDVD*, lTitle : Int32, strStartTime : Win32cr::Foundation::BSTR, strEndTime : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_period_in_title_auto_stop.call(this, lTitle, strStartTime, strEndTime)
    end
    def replay_chapter(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replay_chapter.call(this)
    end
    def play_prev_chapter(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_prev_chapter.call(this)
    end
    def play_next_chapter(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_next_chapter.call(this)
    end
    def still_off(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.still_off.call(this)
    end
    def get_AudioLanguage(this : IMSVidWebDVD*, lStream : Int32, fFormat : Int16, strAudioLang : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioLanguage.call(this, lStream, fFormat, strAudioLang)
    end
    def show_menu(this : IMSVidWebDVD*, menu_id : Win32cr::Media::DirectShow::DVDMenuIDConstants) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_menu.call(this, menu_id)
    end
    def resume(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end
    def return_from_submenu(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_from_submenu.call(this)
    end
    def get_ButtonsAvailable(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonsAvailable.call(this, pVal)
    end
    def get_CurrentButton(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentButton.call(this, pVal)
    end
    def select_and_activate_button(this : IMSVidWebDVD*, lButton : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_and_activate_button.call(this, lButton)
    end
    def activate_button(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_button.call(this)
    end
    def select_right_button(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_right_button.call(this)
    end
    def select_left_button(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_left_button.call(this)
    end
    def select_lower_button(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_lower_button.call(this)
    end
    def select_upper_button(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_upper_button.call(this)
    end
    def activate_at_position(this : IMSVidWebDVD*, xPos : Int32, yPos : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_at_position.call(this, xPos, yPos)
    end
    def select_at_position(this : IMSVidWebDVD*, xPos : Int32, yPos : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_at_position.call(this, xPos, yPos)
    end
    def get_ButtonAtPosition(this : IMSVidWebDVD*, xPos : Int32, yPos : Int32, plButton : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonAtPosition.call(this, xPos, yPos, plButton)
    end
    def get_NumberOfChapters(this : IMSVidWebDVD*, lTitle : Int32, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfChapters.call(this, lTitle, pVal)
    end
    def get_TotalTitleTime(this : IMSVidWebDVD*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalTitleTime.call(this, pVal)
    end
    def get_TitlesAvailable(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TitlesAvailable.call(this, pVal)
    end
    def get_VolumesAvailable(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumesAvailable.call(this, pVal)
    end
    def get_CurrentVolume(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentVolume.call(this, pVal)
    end
    def get_CurrentDiscSide(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentDiscSide.call(this, pVal)
    end
    def get_CurrentDomain(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentDomain.call(this, pVal)
    end
    def get_CurrentChapter(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentChapter.call(this, pVal)
    end
    def get_CurrentTitle(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentTitle.call(this, pVal)
    end
    def get_CurrentTime(this : IMSVidWebDVD*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentTime.call(this, pVal)
    end
    def dvd_time_code2bstr(this : IMSVidWebDVD*, timeCode : Int32, pTimeStr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dvd_time_code2bstr.call(this, timeCode, pTimeStr)
    end
    def get_DVDDirectory(this : IMSVidWebDVD*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDDirectory.call(this, pVal)
    end
    def put_DVDDirectory(this : IMSVidWebDVD*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DVDDirectory.call(this, newVal)
    end
    def is_subpicture_stream_enabled(this : IMSVidWebDVD*, lstream : Int32, fEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_subpicture_stream_enabled.call(this, lstream, fEnabled)
    end
    def is_audio_stream_enabled(this : IMSVidWebDVD*, lstream : Int32, fEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_audio_stream_enabled.call(this, lstream, fEnabled)
    end
    def get_CurrentSubpictureStream(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentSubpictureStream.call(this, pVal)
    end
    def put_CurrentSubpictureStream(this : IMSVidWebDVD*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentSubpictureStream.call(this, newVal)
    end
    def get_SubpictureLanguage(this : IMSVidWebDVD*, lStream : Int32, strLanguage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubpictureLanguage.call(this, lStream, strLanguage)
    end
    def get_CurrentAudioStream(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentAudioStream.call(this, pVal)
    end
    def put_CurrentAudioStream(this : IMSVidWebDVD*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentAudioStream.call(this, newVal)
    end
    def get_AudioStreamsAvailable(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioStreamsAvailable.call(this, pVal)
    end
    def get_AnglesAvailable(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AnglesAvailable.call(this, pVal)
    end
    def get_CurrentAngle(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentAngle.call(this, pVal)
    end
    def put_CurrentAngle(this : IMSVidWebDVD*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentAngle.call(this, newVal)
    end
    def get_SubpictureStreamsAvailable(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubpictureStreamsAvailable.call(this, pVal)
    end
    def get_SubpictureOn(this : IMSVidWebDVD*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubpictureOn.call(this, pVal)
    end
    def put_SubpictureOn(this : IMSVidWebDVD*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SubpictureOn.call(this, newVal)
    end
    def get_DVDUniqueID(this : IMSVidWebDVD*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDUniqueID.call(this, pVal)
    end
    def accept_parental_level_change(this : IMSVidWebDVD*, fAccept : Int16, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.accept_parental_level_change.call(this, fAccept, strUserName, strPassword)
    end
    def notify_parental_level_change(this : IMSVidWebDVD*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_parental_level_change.call(this, newVal)
    end
    def select_parental_country(this : IMSVidWebDVD*, lCountry : Int32, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_parental_country.call(this, lCountry, strUserName, strPassword)
    end
    def select_parental_level(this : IMSVidWebDVD*, lParentalLevel : Int32, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_parental_level.call(this, lParentalLevel, strUserName, strPassword)
    end
    def get_TitleParentalLevels(this : IMSVidWebDVD*, lTitle : Int32, plParentalLevels : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TitleParentalLevels.call(this, lTitle, plParentalLevels)
    end
    def get_PlayerParentalCountry(this : IMSVidWebDVD*, plCountryCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlayerParentalCountry.call(this, plCountryCode)
    end
    def get_PlayerParentalLevel(this : IMSVidWebDVD*, plParentalLevel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlayerParentalLevel.call(this, plParentalLevel)
    end
    def eject(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.eject.call(this)
    end
    def uop_valid(this : IMSVidWebDVD*, lUOP : Int32, pfValid : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uop_valid.call(this, lUOP, pfValid)
    end
    def get_SPRM(this : IMSVidWebDVD*, lIndex : Int32, psSPRM : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPRM.call(this, lIndex, psSPRM)
    end
    def get_GPRM(this : IMSVidWebDVD*, lIndex : Int32, psSPRM : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GPRM.call(this, lIndex, psSPRM)
    end
    def put_GPRM(this : IMSVidWebDVD*, lIndex : Int32, sValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GPRM.call(this, lIndex, sValue)
    end
    def get_DVDTextStringType(this : IMSVidWebDVD*, lLangIndex : Int32, lStringIndex : Int32, pType : Win32cr::Media::DirectShow::DVDTextStringType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextStringType.call(this, lLangIndex, lStringIndex, pType)
    end
    def get_DVDTextString(this : IMSVidWebDVD*, lLangIndex : Int32, lStringIndex : Int32, pstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextString.call(this, lLangIndex, lStringIndex, pstrText)
    end
    def get_DVDTextNumberOfStrings(this : IMSVidWebDVD*, lLangIndex : Int32, plNumOfStrings : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextNumberOfStrings.call(this, lLangIndex, plNumOfStrings)
    end
    def get_DVDTextNumberOfLanguages(this : IMSVidWebDVD*, plNumOfLangs : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextNumberOfLanguages.call(this, plNumOfLangs)
    end
    def get_DVDTextLanguageLCID(this : IMSVidWebDVD*, lLangIndex : Int32, lcid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextLanguageLCID.call(this, lLangIndex, lcid)
    end
    def region_change(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.region_change.call(this)
    end
    def get_DVDAdm(this : IMSVidWebDVD*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDAdm.call(this, pVal)
    end
    def delete_bookmark(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_bookmark.call(this)
    end
    def restore_bookmark(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_bookmark.call(this)
    end
    def save_bookmark(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_bookmark.call(this)
    end
    def select_default_audio_language(this : IMSVidWebDVD*, lang : Int32, ext : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_default_audio_language.call(this, lang, ext)
    end
    def select_default_subpicture_language(this : IMSVidWebDVD*, lang : Int32, ext : Win32cr::Media::DirectShow::DVDSPExt) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_default_subpicture_language.call(this, lang, ext)
    end
    def get_PreferredSubpictureStream(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredSubpictureStream.call(this, pVal)
    end
    def get_DefaultMenuLanguage(this : IMSVidWebDVD*, lang : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultMenuLanguage.call(this, lang)
    end
    def put_DefaultMenuLanguage(this : IMSVidWebDVD*, lang : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultMenuLanguage.call(this, lang)
    end
    def get_DefaultSubpictureLanguage(this : IMSVidWebDVD*, lang : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultSubpictureLanguage.call(this, lang)
    end
    def get_DefaultAudioLanguage(this : IMSVidWebDVD*, lang : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultAudioLanguage.call(this, lang)
    end
    def get_DefaultSubpictureLanguageExt(this : IMSVidWebDVD*, ext : Win32cr::Media::DirectShow::DVDSPExt*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultSubpictureLanguageExt.call(this, ext)
    end
    def get_DefaultAudioLanguageExt(this : IMSVidWebDVD*, ext : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultAudioLanguageExt.call(this, ext)
    end
    def get_LanguageFromLCID(this : IMSVidWebDVD*, lcid : Int32, lang : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LanguageFromLCID.call(this, lcid, lang)
    end
    def get_KaraokeAudioPresentationMode(this : IMSVidWebDVD*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KaraokeAudioPresentationMode.call(this, pVal)
    end
    def put_KaraokeAudioPresentationMode(this : IMSVidWebDVD*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KaraokeAudioPresentationMode.call(this, newVal)
    end
    def get_KaraokeChannelContent(this : IMSVidWebDVD*, lStream : Int32, lChan : Int32, lContent : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KaraokeChannelContent.call(this, lStream, lChan, lContent)
    end
    def get_KaraokeChannelAssignment(this : IMSVidWebDVD*, lStream : Int32, lChannelAssignment : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KaraokeChannelAssignment.call(this, lStream, lChannelAssignment)
    end
    def restore_preferred_settings(this : IMSVidWebDVD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_preferred_settings.call(this)
    end
    def get_ButtonRect(this : IMSVidWebDVD*, lButton : Int32, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonRect.call(this, lButton, pRect)
    end
    def get_DVDScreenInMouseCoordinates(this : IMSVidWebDVD*, ppRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDScreenInMouseCoordinates.call(this, ppRect)
    end
    def put_DVDScreenInMouseCoordinates(this : IMSVidWebDVD*, pRect : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DVDScreenInMouseCoordinates.call(this, pRect)
    end

  end

  @[Extern]
  record IMSVidWebDVD2Vtbl,
    query_interface : Proc(IMSVidWebDVD2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidWebDVD2*, UInt32),
    release : Proc(IMSVidWebDVD2*, UInt32),
    get_type_info_count : Proc(IMSVidWebDVD2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidWebDVD2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidWebDVD2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidWebDVD2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidWebDVD2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidWebDVD2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidWebDVD2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidWebDVD2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidWebDVD2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidWebDVD2*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidWebDVD2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnableResetOnStop : Proc(IMSVidWebDVD2*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableResetOnStop : Proc(IMSVidWebDVD2*, Int16, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    get_CanStep : Proc(IMSVidWebDVD2*, Int16, Int16*, Win32cr::Foundation::HRESULT),
    step : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMSVidWebDVD2*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMSVidWebDVD2*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    put_PositionMode : Proc(IMSVidWebDVD2*, Win32cr::Media::DirectShow::PositionModeList, Win32cr::Foundation::HRESULT),
    get_PositionMode : Proc(IMSVidWebDVD2*, Win32cr::Media::DirectShow::PositionModeList*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    on_dvd_event : Proc(IMSVidWebDVD2*, Int32, LibC::IntPtrT, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    play_title : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    play_chapter_in_title : Proc(IMSVidWebDVD2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    play_chapter : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    play_chapters_auto_stop : Proc(IMSVidWebDVD2*, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    play_at_time : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    play_at_time_in_title : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    play_period_in_title_auto_stop : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    replay_chapter : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    play_prev_chapter : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    play_next_chapter : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    still_off : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    get_AudioLanguage : Proc(IMSVidWebDVD2*, Int32, Int16, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    show_menu : Proc(IMSVidWebDVD2*, Win32cr::Media::DirectShow::DVDMenuIDConstants, Win32cr::Foundation::HRESULT),
    resume : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    return_from_submenu : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    get_ButtonsAvailable : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentButton : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    select_and_activate_button : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    activate_button : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    select_right_button : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    select_left_button : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    select_lower_button : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    select_upper_button : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    activate_at_position : Proc(IMSVidWebDVD2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    select_at_position : Proc(IMSVidWebDVD2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_ButtonAtPosition : Proc(IMSVidWebDVD2*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_NumberOfChapters : Proc(IMSVidWebDVD2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalTitleTime : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_TitlesAvailable : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_VolumesAvailable : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentVolume : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentDiscSide : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentDomain : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentChapter : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentTitle : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentTime : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    dvd_time_code2bstr : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DVDDirectory : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_DVDDirectory : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    is_subpicture_stream_enabled : Proc(IMSVidWebDVD2*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    is_audio_stream_enabled : Proc(IMSVidWebDVD2*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentSubpictureStream : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CurrentSubpictureStream : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    get_SubpictureLanguage : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CurrentAudioStream : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CurrentAudioStream : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    get_AudioStreamsAvailable : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_AnglesAvailable : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentAngle : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    put_CurrentAngle : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    get_SubpictureStreamsAvailable : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_SubpictureOn : Proc(IMSVidWebDVD2*, Int16*, Win32cr::Foundation::HRESULT),
    put_SubpictureOn : Proc(IMSVidWebDVD2*, Int16, Win32cr::Foundation::HRESULT),
    get_DVDUniqueID : Proc(IMSVidWebDVD2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    accept_parental_level_change : Proc(IMSVidWebDVD2*, Int16, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    notify_parental_level_change : Proc(IMSVidWebDVD2*, Int16, Win32cr::Foundation::HRESULT),
    select_parental_country : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    select_parental_level : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_TitleParentalLevels : Proc(IMSVidWebDVD2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_PlayerParentalCountry : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_PlayerParentalLevel : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    eject : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    uop_valid : Proc(IMSVidWebDVD2*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    get_SPRM : Proc(IMSVidWebDVD2*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    get_GPRM : Proc(IMSVidWebDVD2*, Int32, Int16*, Win32cr::Foundation::HRESULT),
    put_GPRM : Proc(IMSVidWebDVD2*, Int32, Int16, Win32cr::Foundation::HRESULT),
    get_DVDTextStringType : Proc(IMSVidWebDVD2*, Int32, Int32, Win32cr::Media::DirectShow::DVDTextStringType*, Win32cr::Foundation::HRESULT),
    get_DVDTextString : Proc(IMSVidWebDVD2*, Int32, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DVDTextNumberOfStrings : Proc(IMSVidWebDVD2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_DVDTextNumberOfLanguages : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DVDTextLanguageLCID : Proc(IMSVidWebDVD2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    region_change : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    get_DVDAdm : Proc(IMSVidWebDVD2*, Void**, Win32cr::Foundation::HRESULT),
    delete_bookmark : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    restore_bookmark : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    save_bookmark : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    select_default_audio_language : Proc(IMSVidWebDVD2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    select_default_subpicture_language : Proc(IMSVidWebDVD2*, Int32, Win32cr::Media::DirectShow::DVDSPExt, Win32cr::Foundation::HRESULT),
    get_PreferredSubpictureStream : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DefaultMenuLanguage : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultMenuLanguage : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    get_DefaultSubpictureLanguage : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DefaultAudioLanguage : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DefaultSubpictureLanguageExt : Proc(IMSVidWebDVD2*, Win32cr::Media::DirectShow::DVDSPExt*, Win32cr::Foundation::HRESULT),
    get_DefaultAudioLanguageExt : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    get_LanguageFromLCID : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_KaraokeAudioPresentationMode : Proc(IMSVidWebDVD2*, Int32*, Win32cr::Foundation::HRESULT),
    put_KaraokeAudioPresentationMode : Proc(IMSVidWebDVD2*, Int32, Win32cr::Foundation::HRESULT),
    get_KaraokeChannelContent : Proc(IMSVidWebDVD2*, Int32, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_KaraokeChannelAssignment : Proc(IMSVidWebDVD2*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    restore_preferred_settings : Proc(IMSVidWebDVD2*, Win32cr::Foundation::HRESULT),
    get_ButtonRect : Proc(IMSVidWebDVD2*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_DVDScreenInMouseCoordinates : Proc(IMSVidWebDVD2*, Void**, Win32cr::Foundation::HRESULT),
    put_DVDScreenInMouseCoordinates : Proc(IMSVidWebDVD2*, Void*, Win32cr::Foundation::HRESULT),
    get_Bookmark : Proc(IMSVidWebDVD2*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    put_Bookmark : Proc(IMSVidWebDVD2*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7027212f-ee9a-4a7c-8b67-f023714cdaff")]
  record IMSVidWebDVD2, lpVtbl : IMSVidWebDVD2Vtbl* do
    GUID = LibC::GUID.new(0x7027212f_u32, 0xee9a_u16, 0x4a7c_u16, StaticArray[0x8b_u8, 0x67_u8, 0xf0_u8, 0x23_u8, 0x71_u8, 0x4c_u8, 0xda_u8, 0xff_u8])
    def query_interface(this : IMSVidWebDVD2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidWebDVD2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidWebDVD2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidWebDVD2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidWebDVD2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidWebDVD2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidWebDVD2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidWebDVD2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidWebDVD2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidWebDVD2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidWebDVD2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidWebDVD2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidWebDVD2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidWebDVD2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidWebDVD2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidWebDVD2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidWebDVD2*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidWebDVD2*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_EnableResetOnStop(this : IMSVidWebDVD2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableResetOnStop.call(this, pVal)
    end
    def put_EnableResetOnStop(this : IMSVidWebDVD2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableResetOnStop.call(this, newVal)
    end
    def run(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_CanStep(this : IMSVidWebDVD2*, fBackwards : Int16, pfCan : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CanStep.call(this, fBackwards, pfCan)
    end
    def step(this : IMSVidWebDVD2*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def put_Rate(this : IMSVidWebDVD2*, plRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, plRate)
    end
    def get_Rate(this : IMSVidWebDVD2*, plRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, plRate)
    end
    def put_CurrentPosition(this : IMSVidWebDVD2*, lPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, lPosition)
    end
    def get_CurrentPosition(this : IMSVidWebDVD2*, lPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, lPosition)
    end
    def put_PositionMode(this : IMSVidWebDVD2*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PositionMode.call(this, lPositionMode)
    end
    def get_PositionMode(this : IMSVidWebDVD2*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PositionMode.call(this, lPositionMode)
    end
    def get_Length(this : IMSVidWebDVD2*, lLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, lLength)
    end
    def on_dvd_event(this : IMSVidWebDVD2*, lEvent : Int32, lParam1 : LibC::IntPtrT, lParam2 : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_dvd_event.call(this, lEvent, lParam1, lParam2)
    end
    def play_title(this : IMSVidWebDVD2*, lTitle : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_title.call(this, lTitle)
    end
    def play_chapter_in_title(this : IMSVidWebDVD2*, lTitle : Int32, lChapter : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter_in_title.call(this, lTitle, lChapter)
    end
    def play_chapter(this : IMSVidWebDVD2*, lChapter : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter.call(this, lChapter)
    end
    def play_chapters_auto_stop(this : IMSVidWebDVD2*, lTitle : Int32, lstrChapter : Int32, lChapterCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapters_auto_stop.call(this, lTitle, lstrChapter, lChapterCount)
    end
    def play_at_time(this : IMSVidWebDVD2*, strTime : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time.call(this, strTime)
    end
    def play_at_time_in_title(this : IMSVidWebDVD2*, lTitle : Int32, strTime : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time_in_title.call(this, lTitle, strTime)
    end
    def play_period_in_title_auto_stop(this : IMSVidWebDVD2*, lTitle : Int32, strStartTime : Win32cr::Foundation::BSTR, strEndTime : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_period_in_title_auto_stop.call(this, lTitle, strStartTime, strEndTime)
    end
    def replay_chapter(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replay_chapter.call(this)
    end
    def play_prev_chapter(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_prev_chapter.call(this)
    end
    def play_next_chapter(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_next_chapter.call(this)
    end
    def still_off(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.still_off.call(this)
    end
    def get_AudioLanguage(this : IMSVidWebDVD2*, lStream : Int32, fFormat : Int16, strAudioLang : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioLanguage.call(this, lStream, fFormat, strAudioLang)
    end
    def show_menu(this : IMSVidWebDVD2*, menu_id : Win32cr::Media::DirectShow::DVDMenuIDConstants) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_menu.call(this, menu_id)
    end
    def resume(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this)
    end
    def return_from_submenu(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_from_submenu.call(this)
    end
    def get_ButtonsAvailable(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonsAvailable.call(this, pVal)
    end
    def get_CurrentButton(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentButton.call(this, pVal)
    end
    def select_and_activate_button(this : IMSVidWebDVD2*, lButton : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_and_activate_button.call(this, lButton)
    end
    def activate_button(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_button.call(this)
    end
    def select_right_button(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_right_button.call(this)
    end
    def select_left_button(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_left_button.call(this)
    end
    def select_lower_button(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_lower_button.call(this)
    end
    def select_upper_button(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_upper_button.call(this)
    end
    def activate_at_position(this : IMSVidWebDVD2*, xPos : Int32, yPos : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_at_position.call(this, xPos, yPos)
    end
    def select_at_position(this : IMSVidWebDVD2*, xPos : Int32, yPos : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_at_position.call(this, xPos, yPos)
    end
    def get_ButtonAtPosition(this : IMSVidWebDVD2*, xPos : Int32, yPos : Int32, plButton : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonAtPosition.call(this, xPos, yPos, plButton)
    end
    def get_NumberOfChapters(this : IMSVidWebDVD2*, lTitle : Int32, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfChapters.call(this, lTitle, pVal)
    end
    def get_TotalTitleTime(this : IMSVidWebDVD2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalTitleTime.call(this, pVal)
    end
    def get_TitlesAvailable(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TitlesAvailable.call(this, pVal)
    end
    def get_VolumesAvailable(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumesAvailable.call(this, pVal)
    end
    def get_CurrentVolume(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentVolume.call(this, pVal)
    end
    def get_CurrentDiscSide(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentDiscSide.call(this, pVal)
    end
    def get_CurrentDomain(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentDomain.call(this, pVal)
    end
    def get_CurrentChapter(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentChapter.call(this, pVal)
    end
    def get_CurrentTitle(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentTitle.call(this, pVal)
    end
    def get_CurrentTime(this : IMSVidWebDVD2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentTime.call(this, pVal)
    end
    def dvd_time_code2bstr(this : IMSVidWebDVD2*, timeCode : Int32, pTimeStr : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dvd_time_code2bstr.call(this, timeCode, pTimeStr)
    end
    def get_DVDDirectory(this : IMSVidWebDVD2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDDirectory.call(this, pVal)
    end
    def put_DVDDirectory(this : IMSVidWebDVD2*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DVDDirectory.call(this, newVal)
    end
    def is_subpicture_stream_enabled(this : IMSVidWebDVD2*, lstream : Int32, fEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_subpicture_stream_enabled.call(this, lstream, fEnabled)
    end
    def is_audio_stream_enabled(this : IMSVidWebDVD2*, lstream : Int32, fEnabled : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_audio_stream_enabled.call(this, lstream, fEnabled)
    end
    def get_CurrentSubpictureStream(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentSubpictureStream.call(this, pVal)
    end
    def put_CurrentSubpictureStream(this : IMSVidWebDVD2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentSubpictureStream.call(this, newVal)
    end
    def get_SubpictureLanguage(this : IMSVidWebDVD2*, lStream : Int32, strLanguage : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubpictureLanguage.call(this, lStream, strLanguage)
    end
    def get_CurrentAudioStream(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentAudioStream.call(this, pVal)
    end
    def put_CurrentAudioStream(this : IMSVidWebDVD2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentAudioStream.call(this, newVal)
    end
    def get_AudioStreamsAvailable(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioStreamsAvailable.call(this, pVal)
    end
    def get_AnglesAvailable(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AnglesAvailable.call(this, pVal)
    end
    def get_CurrentAngle(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentAngle.call(this, pVal)
    end
    def put_CurrentAngle(this : IMSVidWebDVD2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentAngle.call(this, newVal)
    end
    def get_SubpictureStreamsAvailable(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubpictureStreamsAvailable.call(this, pVal)
    end
    def get_SubpictureOn(this : IMSVidWebDVD2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SubpictureOn.call(this, pVal)
    end
    def put_SubpictureOn(this : IMSVidWebDVD2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SubpictureOn.call(this, newVal)
    end
    def get_DVDUniqueID(this : IMSVidWebDVD2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDUniqueID.call(this, pVal)
    end
    def accept_parental_level_change(this : IMSVidWebDVD2*, fAccept : Int16, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.accept_parental_level_change.call(this, fAccept, strUserName, strPassword)
    end
    def notify_parental_level_change(this : IMSVidWebDVD2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_parental_level_change.call(this, newVal)
    end
    def select_parental_country(this : IMSVidWebDVD2*, lCountry : Int32, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_parental_country.call(this, lCountry, strUserName, strPassword)
    end
    def select_parental_level(this : IMSVidWebDVD2*, lParentalLevel : Int32, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_parental_level.call(this, lParentalLevel, strUserName, strPassword)
    end
    def get_TitleParentalLevels(this : IMSVidWebDVD2*, lTitle : Int32, plParentalLevels : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TitleParentalLevels.call(this, lTitle, plParentalLevels)
    end
    def get_PlayerParentalCountry(this : IMSVidWebDVD2*, plCountryCode : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlayerParentalCountry.call(this, plCountryCode)
    end
    def get_PlayerParentalLevel(this : IMSVidWebDVD2*, plParentalLevel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlayerParentalLevel.call(this, plParentalLevel)
    end
    def eject(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.eject.call(this)
    end
    def uop_valid(this : IMSVidWebDVD2*, lUOP : Int32, pfValid : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uop_valid.call(this, lUOP, pfValid)
    end
    def get_SPRM(this : IMSVidWebDVD2*, lIndex : Int32, psSPRM : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SPRM.call(this, lIndex, psSPRM)
    end
    def get_GPRM(this : IMSVidWebDVD2*, lIndex : Int32, psSPRM : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_GPRM.call(this, lIndex, psSPRM)
    end
    def put_GPRM(this : IMSVidWebDVD2*, lIndex : Int32, sValue : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_GPRM.call(this, lIndex, sValue)
    end
    def get_DVDTextStringType(this : IMSVidWebDVD2*, lLangIndex : Int32, lStringIndex : Int32, pType : Win32cr::Media::DirectShow::DVDTextStringType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextStringType.call(this, lLangIndex, lStringIndex, pType)
    end
    def get_DVDTextString(this : IMSVidWebDVD2*, lLangIndex : Int32, lStringIndex : Int32, pstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextString.call(this, lLangIndex, lStringIndex, pstrText)
    end
    def get_DVDTextNumberOfStrings(this : IMSVidWebDVD2*, lLangIndex : Int32, plNumOfStrings : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextNumberOfStrings.call(this, lLangIndex, plNumOfStrings)
    end
    def get_DVDTextNumberOfLanguages(this : IMSVidWebDVD2*, plNumOfLangs : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextNumberOfLanguages.call(this, plNumOfLangs)
    end
    def get_DVDTextLanguageLCID(this : IMSVidWebDVD2*, lLangIndex : Int32, lcid : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDTextLanguageLCID.call(this, lLangIndex, lcid)
    end
    def region_change(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.region_change.call(this)
    end
    def get_DVDAdm(this : IMSVidWebDVD2*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDAdm.call(this, pVal)
    end
    def delete_bookmark(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_bookmark.call(this)
    end
    def restore_bookmark(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_bookmark.call(this)
    end
    def save_bookmark(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_bookmark.call(this)
    end
    def select_default_audio_language(this : IMSVidWebDVD2*, lang : Int32, ext : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_default_audio_language.call(this, lang, ext)
    end
    def select_default_subpicture_language(this : IMSVidWebDVD2*, lang : Int32, ext : Win32cr::Media::DirectShow::DVDSPExt) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_default_subpicture_language.call(this, lang, ext)
    end
    def get_PreferredSubpictureStream(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PreferredSubpictureStream.call(this, pVal)
    end
    def get_DefaultMenuLanguage(this : IMSVidWebDVD2*, lang : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultMenuLanguage.call(this, lang)
    end
    def put_DefaultMenuLanguage(this : IMSVidWebDVD2*, lang : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultMenuLanguage.call(this, lang)
    end
    def get_DefaultSubpictureLanguage(this : IMSVidWebDVD2*, lang : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultSubpictureLanguage.call(this, lang)
    end
    def get_DefaultAudioLanguage(this : IMSVidWebDVD2*, lang : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultAudioLanguage.call(this, lang)
    end
    def get_DefaultSubpictureLanguageExt(this : IMSVidWebDVD2*, ext : Win32cr::Media::DirectShow::DVDSPExt*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultSubpictureLanguageExt.call(this, ext)
    end
    def get_DefaultAudioLanguageExt(this : IMSVidWebDVD2*, ext : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultAudioLanguageExt.call(this, ext)
    end
    def get_LanguageFromLCID(this : IMSVidWebDVD2*, lcid : Int32, lang : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LanguageFromLCID.call(this, lcid, lang)
    end
    def get_KaraokeAudioPresentationMode(this : IMSVidWebDVD2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KaraokeAudioPresentationMode.call(this, pVal)
    end
    def put_KaraokeAudioPresentationMode(this : IMSVidWebDVD2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_KaraokeAudioPresentationMode.call(this, newVal)
    end
    def get_KaraokeChannelContent(this : IMSVidWebDVD2*, lStream : Int32, lChan : Int32, lContent : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KaraokeChannelContent.call(this, lStream, lChan, lContent)
    end
    def get_KaraokeChannelAssignment(this : IMSVidWebDVD2*, lStream : Int32, lChannelAssignment : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KaraokeChannelAssignment.call(this, lStream, lChannelAssignment)
    end
    def restore_preferred_settings(this : IMSVidWebDVD2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.restore_preferred_settings.call(this)
    end
    def get_ButtonRect(this : IMSVidWebDVD2*, lButton : Int32, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ButtonRect.call(this, lButton, pRect)
    end
    def get_DVDScreenInMouseCoordinates(this : IMSVidWebDVD2*, ppRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DVDScreenInMouseCoordinates.call(this, ppRect)
    end
    def put_DVDScreenInMouseCoordinates(this : IMSVidWebDVD2*, pRect : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DVDScreenInMouseCoordinates.call(this, pRect)
    end
    def get_Bookmark(this : IMSVidWebDVD2*, ppData : UInt8**, pDataLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Bookmark.call(this, ppData, pDataLength)
    end
    def put_Bookmark(this : IMSVidWebDVD2*, pData : UInt8*, dwDataLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Bookmark.call(this, pData, dwDataLength)
    end

  end

  @[Extern]
  record IMSVidWebDVDEventVtbl,
    query_interface : Proc(IMSVidWebDVDEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidWebDVDEvent*, UInt32),
    release : Proc(IMSVidWebDVDEvent*, UInt32),
    get_type_info_count : Proc(IMSVidWebDVDEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidWebDVDEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidWebDVDEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidWebDVDEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_media : Proc(IMSVidWebDVDEvent*, Void*, Win32cr::Foundation::HRESULT),
    dvd_notify : Proc(IMSVidWebDVDEvent*, Int32, Win32cr::System::Com::VARIANT, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    play_forwards : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_backwards : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    show_menu : Proc(IMSVidWebDVDEvent*, Win32cr::Media::DirectShow::DVDMenuIDConstants, Int16, Win32cr::Foundation::HRESULT),
    resume : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    select_or_activate_button : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    still_off : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    pause_on : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    change_current_audio_stream : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    change_current_subpicture_stream : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    change_current_angle : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_at_time_in_title : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_at_time : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_chapter_in_title : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_chapter : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    replay_chapter : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_next_chapter : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    return_from_submenu : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_title : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    play_prev_chapter : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    change_karaoke_pres_mode : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT),
    change_video_pres_mode : Proc(IMSVidWebDVDEvent*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b4f7a674-9b83-49cb-a357-c63b871be958")]
  record IMSVidWebDVDEvent, lpVtbl : IMSVidWebDVDEventVtbl* do
    GUID = LibC::GUID.new(0xb4f7a674_u32, 0x9b83_u16, 0x49cb_u16, StaticArray[0xa3_u8, 0x57_u8, 0xc6_u8, 0x3b_u8, 0x87_u8, 0x1b_u8, 0xe9_u8, 0x58_u8])
    def query_interface(this : IMSVidWebDVDEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidWebDVDEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidWebDVDEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidWebDVDEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidWebDVDEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidWebDVDEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidWebDVDEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def end_of_media(this : IMSVidWebDVDEvent*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_media.call(this, lpd)
    end
    def dvd_notify(this : IMSVidWebDVDEvent*, lEventCode : Int32, lParam1 : Win32cr::System::Com::VARIANT, lParam2 : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.dvd_notify.call(this, lEventCode, lParam1, lParam2)
    end
    def play_forwards(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_forwards.call(this, bEnabled)
    end
    def play_backwards(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_backwards.call(this, bEnabled)
    end
    def show_menu(this : IMSVidWebDVDEvent*, menu_id : Win32cr::Media::DirectShow::DVDMenuIDConstants, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.show_menu.call(this, menu_id, bEnabled)
    end
    def resume(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.resume.call(this, bEnabled)
    end
    def select_or_activate_button(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_or_activate_button.call(this, bEnabled)
    end
    def still_off(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.still_off.call(this, bEnabled)
    end
    def pause_on(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause_on.call(this, bEnabled)
    end
    def change_current_audio_stream(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_current_audio_stream.call(this, bEnabled)
    end
    def change_current_subpicture_stream(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_current_subpicture_stream.call(this, bEnabled)
    end
    def change_current_angle(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_current_angle.call(this, bEnabled)
    end
    def play_at_time_in_title(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time_in_title.call(this, bEnabled)
    end
    def play_at_time(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_at_time.call(this, bEnabled)
    end
    def play_chapter_in_title(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter_in_title.call(this, bEnabled)
    end
    def play_chapter(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_chapter.call(this, bEnabled)
    end
    def replay_chapter(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replay_chapter.call(this, bEnabled)
    end
    def play_next_chapter(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_next_chapter.call(this, bEnabled)
    end
    def stop(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this, bEnabled)
    end
    def return_from_submenu(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.return_from_submenu.call(this, bEnabled)
    end
    def play_title(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_title.call(this, bEnabled)
    end
    def play_prev_chapter(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play_prev_chapter.call(this, bEnabled)
    end
    def change_karaoke_pres_mode(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_karaoke_pres_mode.call(this, bEnabled)
    end
    def change_video_pres_mode(this : IMSVidWebDVDEvent*, bEnabled : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_video_pres_mode.call(this, bEnabled)
    end

  end

  @[Extern]
  record IMSVidWebDVDAdmVtbl,
    query_interface : Proc(IMSVidWebDVDAdm*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidWebDVDAdm*, UInt32),
    release : Proc(IMSVidWebDVDAdm*, UInt32),
    get_type_info_count : Proc(IMSVidWebDVDAdm*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidWebDVDAdm*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidWebDVDAdm*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidWebDVDAdm*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    change_password : Proc(IMSVidWebDVDAdm*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    save_parental_level : Proc(IMSVidWebDVDAdm*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    save_parental_country : Proc(IMSVidWebDVDAdm*, Int32, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    confirm_password : Proc(IMSVidWebDVDAdm*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int16*, Win32cr::Foundation::HRESULT),
    get_parental_level : Proc(IMSVidWebDVDAdm*, Int32*, Win32cr::Foundation::HRESULT),
    get_parental_country : Proc(IMSVidWebDVDAdm*, Int32*, Win32cr::Foundation::HRESULT),
    get_DefaultAudioLCID : Proc(IMSVidWebDVDAdm*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultAudioLCID : Proc(IMSVidWebDVDAdm*, Int32, Win32cr::Foundation::HRESULT),
    get_DefaultSubpictureLCID : Proc(IMSVidWebDVDAdm*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultSubpictureLCID : Proc(IMSVidWebDVDAdm*, Int32, Win32cr::Foundation::HRESULT),
    get_DefaultMenuLCID : Proc(IMSVidWebDVDAdm*, Int32*, Win32cr::Foundation::HRESULT),
    put_DefaultMenuLCID : Proc(IMSVidWebDVDAdm*, Int32, Win32cr::Foundation::HRESULT),
    get_BookmarkOnStop : Proc(IMSVidWebDVDAdm*, Int16*, Win32cr::Foundation::HRESULT),
    put_BookmarkOnStop : Proc(IMSVidWebDVDAdm*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b8be681a-eb2c-47f0-b415-94d5452f0e05")]
  record IMSVidWebDVDAdm, lpVtbl : IMSVidWebDVDAdmVtbl* do
    GUID = LibC::GUID.new(0xb8be681a_u32, 0xeb2c_u16, 0x47f0_u16, StaticArray[0xb4_u8, 0x15_u8, 0x94_u8, 0xd5_u8, 0x45_u8, 0x2f_u8, 0xe_u8, 0x5_u8])
    def query_interface(this : IMSVidWebDVDAdm*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidWebDVDAdm*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidWebDVDAdm*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidWebDVDAdm*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidWebDVDAdm*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidWebDVDAdm*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidWebDVDAdm*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def change_password(this : IMSVidWebDVDAdm*, strUserName : Win32cr::Foundation::BSTR, strOld : Win32cr::Foundation::BSTR, strNew : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.change_password.call(this, strUserName, strOld, strNew)
    end
    def save_parental_level(this : IMSVidWebDVDAdm*, level : Int32, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_parental_level.call(this, level, strUserName, strPassword)
    end
    def save_parental_country(this : IMSVidWebDVDAdm*, country : Int32, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_parental_country.call(this, country, strUserName, strPassword)
    end
    def confirm_password(this : IMSVidWebDVDAdm*, strUserName : Win32cr::Foundation::BSTR, strPassword : Win32cr::Foundation::BSTR, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.confirm_password.call(this, strUserName, strPassword, pVal)
    end
    def get_parental_level(this : IMSVidWebDVDAdm*, lLevel : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parental_level.call(this, lLevel)
    end
    def get_parental_country(this : IMSVidWebDVDAdm*, lCountry : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parental_country.call(this, lCountry)
    end
    def get_DefaultAudioLCID(this : IMSVidWebDVDAdm*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultAudioLCID.call(this, pVal)
    end
    def put_DefaultAudioLCID(this : IMSVidWebDVDAdm*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultAudioLCID.call(this, newVal)
    end
    def get_DefaultSubpictureLCID(this : IMSVidWebDVDAdm*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultSubpictureLCID.call(this, pVal)
    end
    def put_DefaultSubpictureLCID(this : IMSVidWebDVDAdm*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultSubpictureLCID.call(this, newVal)
    end
    def get_DefaultMenuLCID(this : IMSVidWebDVDAdm*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DefaultMenuLCID.call(this, pVal)
    end
    def put_DefaultMenuLCID(this : IMSVidWebDVDAdm*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DefaultMenuLCID.call(this, newVal)
    end
    def get_BookmarkOnStop(this : IMSVidWebDVDAdm*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BookmarkOnStop.call(this, pVal)
    end
    def put_BookmarkOnStop(this : IMSVidWebDVDAdm*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BookmarkOnStop.call(this, newVal)
    end

  end

  @[Extern]
  record IMSVidOutputDeviceVtbl,
    query_interface : Proc(IMSVidOutputDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidOutputDevice*, UInt32),
    release : Proc(IMSVidOutputDevice*, UInt32),
    get_type_info_count : Proc(IMSVidOutputDevice*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidOutputDevice*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidOutputDevice*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidOutputDevice*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidOutputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidOutputDevice*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidOutputDevice*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidOutputDevice*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidOutputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidOutputDevice*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidOutputDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidOutputDevice*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidOutputDevice*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b03546-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidOutputDevice, lpVtbl : IMSVidOutputDeviceVtbl* do
    GUID = LibC::GUID.new(0x37b03546_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidOutputDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidOutputDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidOutputDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidOutputDevice*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidOutputDevice*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidOutputDevice*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidOutputDevice*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidOutputDevice*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidOutputDevice*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidOutputDevice*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidOutputDevice*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidOutputDevice*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidOutputDevice*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidOutputDevice*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidOutputDevice*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidOutputDevice*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end

  end

  @[Extern]
  record IMSVidOutputDeviceEventVtbl,
    query_interface : Proc(IMSVidOutputDeviceEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidOutputDeviceEvent*, UInt32),
    release : Proc(IMSVidOutputDeviceEvent*, UInt32),
    get_type_info_count : Proc(IMSVidOutputDeviceEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidOutputDeviceEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidOutputDeviceEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidOutputDeviceEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidOutputDeviceEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2e6a14e2-571c-11d3-b652-00c04f79498e")]
  record IMSVidOutputDeviceEvent, lpVtbl : IMSVidOutputDeviceEventVtbl* do
    GUID = LibC::GUID.new(0x2e6a14e2_u32, 0x571c_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x52_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidOutputDeviceEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidOutputDeviceEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidOutputDeviceEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidOutputDeviceEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidOutputDeviceEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidOutputDeviceEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidOutputDeviceEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidOutputDeviceEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end

  end

  @[Extern]
  record IMSVidFeatureVtbl,
    query_interface : Proc(IMSVidFeature*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidFeature*, UInt32),
    release : Proc(IMSVidFeature*, UInt32),
    get_type_info_count : Proc(IMSVidFeature*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidFeature*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidFeature*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidFeature*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidFeature*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidFeature*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidFeature*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidFeature*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidFeature*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidFeature*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidFeature*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidFeature*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidFeature*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b03547-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidFeature, lpVtbl : IMSVidFeatureVtbl* do
    GUID = LibC::GUID.new(0x37b03547_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidFeature*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidFeature*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidFeature*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidFeature*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidFeature*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidFeature*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidFeature*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidFeature*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidFeature*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidFeature*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidFeature*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidFeature*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidFeature*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidFeature*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidFeature*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidFeature*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end

  end

  @[Extern]
  record IMSVidFeatureEventVtbl,
    query_interface : Proc(IMSVidFeatureEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidFeatureEvent*, UInt32),
    release : Proc(IMSVidFeatureEvent*, UInt32),
    get_type_info_count : Proc(IMSVidFeatureEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidFeatureEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidFeatureEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidFeatureEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidFeatureEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3dd2903c-e0aa-11d2-b63a-00c04f79498e")]
  record IMSVidFeatureEvent, lpVtbl : IMSVidFeatureEventVtbl* do
    GUID = LibC::GUID.new(0x3dd2903c_u32, 0xe0aa_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x3a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidFeatureEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidFeatureEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidFeatureEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidFeatureEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidFeatureEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidFeatureEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidFeatureEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidFeatureEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end

  end

  @[Extern]
  record IMSVidEncoderVtbl,
    query_interface : Proc(IMSVidEncoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidEncoder*, UInt32),
    release : Proc(IMSVidEncoder*, UInt32),
    get_type_info_count : Proc(IMSVidEncoder*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidEncoder*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidEncoder*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidEncoder*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidEncoder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidEncoder*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidEncoder*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidEncoder*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidEncoder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidEncoder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidEncoder*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidEncoder*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidEncoder*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_VideoEncoderInterface : Proc(IMSVidEncoder*, Void**, Win32cr::Foundation::HRESULT),
    get_AudioEncoderInterface : Proc(IMSVidEncoder*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c0020fd4-bee7-43d9-a495-9f213117103d")]
  record IMSVidEncoder, lpVtbl : IMSVidEncoderVtbl* do
    GUID = LibC::GUID.new(0xc0020fd4_u32, 0xbee7_u16, 0x43d9_u16, StaticArray[0xa4_u8, 0x95_u8, 0x9f_u8, 0x21_u8, 0x31_u8, 0x17_u8, 0x10_u8, 0x3d_u8])
    def query_interface(this : IMSVidEncoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidEncoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidEncoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidEncoder*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidEncoder*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidEncoder*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidEncoder*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidEncoder*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidEncoder*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidEncoder*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidEncoder*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidEncoder*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidEncoder*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidEncoder*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidEncoder*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidEncoder*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_VideoEncoderInterface(this : IMSVidEncoder*, ppEncInt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoEncoderInterface.call(this, ppEncInt)
    end
    def get_AudioEncoderInterface(this : IMSVidEncoder*, ppEncInt : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioEncoderInterface.call(this, ppEncInt)
    end

  end

  @[Extern]
  record IMSVidClosedCaptioningVtbl,
    query_interface : Proc(IMSVidClosedCaptioning*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidClosedCaptioning*, UInt32),
    release : Proc(IMSVidClosedCaptioning*, UInt32),
    get_type_info_count : Proc(IMSVidClosedCaptioning*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidClosedCaptioning*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidClosedCaptioning*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidClosedCaptioning*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidClosedCaptioning*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidClosedCaptioning*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidClosedCaptioning*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidClosedCaptioning*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidClosedCaptioning*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidClosedCaptioning*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidClosedCaptioning*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidClosedCaptioning*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidClosedCaptioning*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_Enable : Proc(IMSVidClosedCaptioning*, Int16*, Win32cr::Foundation::HRESULT),
    put_Enable : Proc(IMSVidClosedCaptioning*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("99652ea1-c1f7-414f-bb7b-1c967de75983")]
  record IMSVidClosedCaptioning, lpVtbl : IMSVidClosedCaptioningVtbl* do
    GUID = LibC::GUID.new(0x99652ea1_u32, 0xc1f7_u16, 0x414f_u16, StaticArray[0xbb_u8, 0x7b_u8, 0x1c_u8, 0x96_u8, 0x7d_u8, 0xe7_u8, 0x59_u8, 0x83_u8])
    def query_interface(this : IMSVidClosedCaptioning*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidClosedCaptioning*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidClosedCaptioning*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidClosedCaptioning*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidClosedCaptioning*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidClosedCaptioning*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidClosedCaptioning*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidClosedCaptioning*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidClosedCaptioning*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidClosedCaptioning*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidClosedCaptioning*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidClosedCaptioning*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidClosedCaptioning*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidClosedCaptioning*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidClosedCaptioning*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidClosedCaptioning*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_Enable(this : IMSVidClosedCaptioning*, on : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Enable.call(this, on)
    end
    def put_Enable(this : IMSVidClosedCaptioning*, on : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Enable.call(this, on)
    end

  end

  @[Extern]
  record IMSVidClosedCaptioning2Vtbl,
    query_interface : Proc(IMSVidClosedCaptioning2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidClosedCaptioning2*, UInt32),
    release : Proc(IMSVidClosedCaptioning2*, UInt32),
    get_type_info_count : Proc(IMSVidClosedCaptioning2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidClosedCaptioning2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidClosedCaptioning2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidClosedCaptioning2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidClosedCaptioning2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidClosedCaptioning2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidClosedCaptioning2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidClosedCaptioning2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidClosedCaptioning2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidClosedCaptioning2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidClosedCaptioning2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidClosedCaptioning2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidClosedCaptioning2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_Enable : Proc(IMSVidClosedCaptioning2*, Int16*, Win32cr::Foundation::HRESULT),
    put_Enable : Proc(IMSVidClosedCaptioning2*, Int16, Win32cr::Foundation::HRESULT),
    get_Service : Proc(IMSVidClosedCaptioning2*, Win32cr::Media::DirectShow::MSVidCCService*, Win32cr::Foundation::HRESULT),
    put_Service : Proc(IMSVidClosedCaptioning2*, Win32cr::Media::DirectShow::MSVidCCService, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e00cb864-a029-4310-9987-a873f5887d97")]
  record IMSVidClosedCaptioning2, lpVtbl : IMSVidClosedCaptioning2Vtbl* do
    GUID = LibC::GUID.new(0xe00cb864_u32, 0xa029_u16, 0x4310_u16, StaticArray[0x99_u8, 0x87_u8, 0xa8_u8, 0x73_u8, 0xf5_u8, 0x88_u8, 0x7d_u8, 0x97_u8])
    def query_interface(this : IMSVidClosedCaptioning2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidClosedCaptioning2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidClosedCaptioning2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidClosedCaptioning2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidClosedCaptioning2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidClosedCaptioning2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidClosedCaptioning2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidClosedCaptioning2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidClosedCaptioning2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidClosedCaptioning2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidClosedCaptioning2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidClosedCaptioning2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidClosedCaptioning2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidClosedCaptioning2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidClosedCaptioning2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidClosedCaptioning2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_Enable(this : IMSVidClosedCaptioning2*, on : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Enable.call(this, on)
    end
    def put_Enable(this : IMSVidClosedCaptioning2*, on : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Enable.call(this, on)
    end
    def get_Service(this : IMSVidClosedCaptioning2*, on : Win32cr::Media::DirectShow::MSVidCCService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Service.call(this, on)
    end
    def put_Service(this : IMSVidClosedCaptioning2*, on : Win32cr::Media::DirectShow::MSVidCCService) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Service.call(this, on)
    end

  end

  @[Extern]
  record IMSVidClosedCaptioning3Vtbl,
    query_interface : Proc(IMSVidClosedCaptioning3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidClosedCaptioning3*, UInt32),
    release : Proc(IMSVidClosedCaptioning3*, UInt32),
    get_type_info_count : Proc(IMSVidClosedCaptioning3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidClosedCaptioning3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidClosedCaptioning3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidClosedCaptioning3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidClosedCaptioning3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidClosedCaptioning3*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidClosedCaptioning3*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidClosedCaptioning3*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidClosedCaptioning3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidClosedCaptioning3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidClosedCaptioning3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidClosedCaptioning3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidClosedCaptioning3*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_Enable : Proc(IMSVidClosedCaptioning3*, Int16*, Win32cr::Foundation::HRESULT),
    put_Enable : Proc(IMSVidClosedCaptioning3*, Int16, Win32cr::Foundation::HRESULT),
    get_Service : Proc(IMSVidClosedCaptioning3*, Win32cr::Media::DirectShow::MSVidCCService*, Win32cr::Foundation::HRESULT),
    put_Service : Proc(IMSVidClosedCaptioning3*, Win32cr::Media::DirectShow::MSVidCCService, Win32cr::Foundation::HRESULT),
    get_TeleTextFilter : Proc(IMSVidClosedCaptioning3*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c8638e8a-7625-4c51-9366-2f40a9831fc0")]
  record IMSVidClosedCaptioning3, lpVtbl : IMSVidClosedCaptioning3Vtbl* do
    GUID = LibC::GUID.new(0xc8638e8a_u32, 0x7625_u16, 0x4c51_u16, StaticArray[0x93_u8, 0x66_u8, 0x2f_u8, 0x40_u8, 0xa9_u8, 0x83_u8, 0x1f_u8, 0xc0_u8])
    def query_interface(this : IMSVidClosedCaptioning3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidClosedCaptioning3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidClosedCaptioning3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidClosedCaptioning3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidClosedCaptioning3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidClosedCaptioning3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidClosedCaptioning3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidClosedCaptioning3*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidClosedCaptioning3*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidClosedCaptioning3*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidClosedCaptioning3*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidClosedCaptioning3*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidClosedCaptioning3*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidClosedCaptioning3*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidClosedCaptioning3*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidClosedCaptioning3*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_Enable(this : IMSVidClosedCaptioning3*, on : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Enable.call(this, on)
    end
    def put_Enable(this : IMSVidClosedCaptioning3*, on : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Enable.call(this, on)
    end
    def get_Service(this : IMSVidClosedCaptioning3*, on : Win32cr::Media::DirectShow::MSVidCCService*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Service.call(this, on)
    end
    def put_Service(this : IMSVidClosedCaptioning3*, on : Win32cr::Media::DirectShow::MSVidCCService) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Service.call(this, on)
    end
    def get_TeleTextFilter(this : IMSVidClosedCaptioning3*, punkTTFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TeleTextFilter.call(this, punkTTFilter)
    end

  end

  @[Extern]
  record IMSVidXDSVtbl,
    query_interface : Proc(IMSVidXDS*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidXDS*, UInt32),
    release : Proc(IMSVidXDS*, UInt32),
    get_type_info_count : Proc(IMSVidXDS*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidXDS*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidXDS*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidXDS*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidXDS*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidXDS*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidXDS*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidXDS*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidXDS*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidXDS*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidXDS*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidXDS*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidXDS*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_ChannelChangeInterface : Proc(IMSVidXDS*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("11ebc158-e712-4d1f-8bb3-01ed5274c4ce")]
  record IMSVidXDS, lpVtbl : IMSVidXDSVtbl* do
    GUID = LibC::GUID.new(0x11ebc158_u32, 0xe712_u16, 0x4d1f_u16, StaticArray[0x8b_u8, 0xb3_u8, 0x1_u8, 0xed_u8, 0x52_u8, 0x74_u8, 0xc4_u8, 0xce_u8])
    def query_interface(this : IMSVidXDS*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidXDS*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidXDS*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidXDS*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidXDS*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidXDS*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidXDS*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidXDS*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidXDS*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidXDS*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidXDS*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidXDS*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidXDS*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidXDS*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidXDS*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidXDS*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_ChannelChangeInterface(this : IMSVidXDS*, punkCC : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChannelChangeInterface.call(this, punkCC)
    end

  end

  @[Extern]
  record IMSVidXDSEventVtbl,
    query_interface : Proc(IMSVidXDSEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidXDSEvent*, UInt32),
    release : Proc(IMSVidXDSEvent*, UInt32),
    get_type_info_count : Proc(IMSVidXDSEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidXDSEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidXDSEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidXDSEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidXDSEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    rating_change : Proc(IMSVidXDSEvent*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Win32cr::Media::DirectShow::BfEnTvRat_GenericAttributes, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Win32cr::Media::DirectShow::BfEnTvRat_GenericAttributes, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6db2317d-3b23-41ec-ba4b-701f407eaf3a")]
  record IMSVidXDSEvent, lpVtbl : IMSVidXDSEventVtbl* do
    GUID = LibC::GUID.new(0x6db2317d_u32, 0x3b23_u16, 0x41ec_u16, StaticArray[0xba_u8, 0x4b_u8, 0x70_u8, 0x1f_u8, 0x40_u8, 0x7e_u8, 0xaf_u8, 0x3a_u8])
    def query_interface(this : IMSVidXDSEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidXDSEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidXDSEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidXDSEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidXDSEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidXDSEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidXDSEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidXDSEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def rating_change(this : IMSVidXDSEvent*, prev_rating_system : Win32cr::Media::DirectShow::EnTvRat_System, prev_level : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, prev_attributes : Win32cr::Media::DirectShow::BfEnTvRat_GenericAttributes, new_rating_system : Win32cr::Media::DirectShow::EnTvRat_System, new_level : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, new_attributes : Win32cr::Media::DirectShow::BfEnTvRat_GenericAttributes) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rating_change.call(this, prev_rating_system, prev_level, prev_attributes, new_rating_system, new_level, new_attributes)
    end

  end

  @[Extern]
  record IMSVidDataServicesVtbl,
    query_interface : Proc(IMSVidDataServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidDataServices*, UInt32),
    release : Proc(IMSVidDataServices*, UInt32),
    get_type_info_count : Proc(IMSVidDataServices*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidDataServices*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidDataServices*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidDataServices*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidDataServices*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidDataServices*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidDataServices*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidDataServices*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidDataServices*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidDataServices*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidDataServices*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidDataServices*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidDataServices*, Void*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("334125c1-77e5-11d3-b653-00c04f79498e")]
  record IMSVidDataServices, lpVtbl : IMSVidDataServicesVtbl* do
    GUID = LibC::GUID.new(0x334125c1_u32, 0x77e5_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidDataServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidDataServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidDataServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidDataServices*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidDataServices*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidDataServices*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidDataServices*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidDataServices*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidDataServices*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidDataServices*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidDataServices*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidDataServices*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidDataServices*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidDataServices*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidDataServices*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidDataServices*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end

  end

  @[Extern]
  record IMSVidDataServicesEventVtbl,
    query_interface : Proc(IMSVidDataServicesEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidDataServicesEvent*, UInt32),
    release : Proc(IMSVidDataServicesEvent*, UInt32),
    get_type_info_count : Proc(IMSVidDataServicesEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidDataServicesEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidDataServicesEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidDataServicesEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidDataServicesEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("334125c2-77e5-11d3-b653-00c04f79498e")]
  record IMSVidDataServicesEvent, lpVtbl : IMSVidDataServicesEventVtbl* do
    GUID = LibC::GUID.new(0x334125c2_u32, 0x77e5_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidDataServicesEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidDataServicesEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidDataServicesEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidDataServicesEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidDataServicesEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidDataServicesEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidDataServicesEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidDataServicesEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end

  end

  @[Extern]
  record IMSVidVideoRendererVtbl,
    query_interface : Proc(IMSVidVideoRenderer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVideoRenderer*, UInt32),
    release : Proc(IMSVidVideoRenderer*, UInt32),
    get_type_info_count : Proc(IMSVidVideoRenderer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidVideoRenderer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidVideoRenderer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidVideoRenderer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidVideoRenderer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidVideoRenderer*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidVideoRenderer*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidVideoRenderer*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidVideoRenderer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidVideoRenderer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidVideoRenderer*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidVideoRenderer*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidVideoRenderer*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_CustomCompositorClass : Proc(IMSVidVideoRenderer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CustomCompositorClass : Proc(IMSVidVideoRenderer*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__CustomCompositorClass : Proc(IMSVidVideoRenderer*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__CustomCompositorClass : Proc(IMSVidVideoRenderer*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__CustomCompositor : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    put__CustomCompositor : Proc(IMSVidVideoRenderer*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmap : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    get__MixerBitmap : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmap : Proc(IMSVidVideoRenderer*, Void*, Win32cr::Foundation::HRESULT),
    put__MixerBitmap : Proc(IMSVidVideoRenderer*, Win32cr::Media::DirectShow::VMRALPHABITMAP*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapPositionRect : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmapPositionRect : Proc(IMSVidVideoRenderer*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapOpacity : Proc(IMSVidVideoRenderer*, Int32*, Win32cr::Foundation::HRESULT),
    put_MixerBitmapOpacity : Proc(IMSVidVideoRenderer*, Int32, Win32cr::Foundation::HRESULT),
    setup_mixer_bitmap : Proc(IMSVidVideoRenderer*, Void*, Int32, Void*, Win32cr::Foundation::HRESULT),
    get_SourceSize : Proc(IMSVidVideoRenderer*, Win32cr::Media::DirectShow::SourceSizeList*, Win32cr::Foundation::HRESULT),
    put_SourceSize : Proc(IMSVidVideoRenderer*, Win32cr::Media::DirectShow::SourceSizeList, Win32cr::Foundation::HRESULT),
    get_OverScan : Proc(IMSVidVideoRenderer*, Int32*, Win32cr::Foundation::HRESULT),
    put_OverScan : Proc(IMSVidVideoRenderer*, Int32, Win32cr::Foundation::HRESULT),
    get_AvailableSourceRect : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    get_MaxVidRect : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    get_MinVidRect : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    get_ClippedSourceRect : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    put_ClippedSourceRect : Proc(IMSVidVideoRenderer*, Void*, Win32cr::Foundation::HRESULT),
    get_UsingOverlay : Proc(IMSVidVideoRenderer*, Int16*, Win32cr::Foundation::HRESULT),
    put_UsingOverlay : Proc(IMSVidVideoRenderer*, Int16, Win32cr::Foundation::HRESULT),
    capture : Proc(IMSVidVideoRenderer*, Void**, Win32cr::Foundation::HRESULT),
    get_FramesPerSecond : Proc(IMSVidVideoRenderer*, Int32*, Win32cr::Foundation::HRESULT),
    get_DecimateInput : Proc(IMSVidVideoRenderer*, Int16*, Win32cr::Foundation::HRESULT),
    put_DecimateInput : Proc(IMSVidVideoRenderer*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b03540-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidVideoRenderer, lpVtbl : IMSVidVideoRendererVtbl* do
    GUID = LibC::GUID.new(0x37b03540_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidVideoRenderer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVideoRenderer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVideoRenderer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidVideoRenderer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidVideoRenderer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidVideoRenderer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidVideoRenderer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidVideoRenderer*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidVideoRenderer*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidVideoRenderer*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidVideoRenderer*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidVideoRenderer*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidVideoRenderer*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidVideoRenderer*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidVideoRenderer*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidVideoRenderer*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_CustomCompositorClass(this : IMSVidVideoRenderer*, compositor_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CustomCompositorClass.call(this, compositor_clsid)
    end
    def put_CustomCompositorClass(this : IMSVidVideoRenderer*, compositor_clsid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositorClass(this : IMSVidVideoRenderer*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositorClass.call(this, compositor_clsid)
    end
    def put__CustomCompositorClass(this : IMSVidVideoRenderer*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositor(this : IMSVidVideoRenderer*, compositor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositor.call(this, compositor)
    end
    def put__CustomCompositor(this : IMSVidVideoRenderer*, compositor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositor.call(this, compositor)
    end
    def get_MixerBitmap(this : IMSVidVideoRenderer*, mixer_picture_disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmap.call(this, mixer_picture_disp)
    end
    def get__MixerBitmap(this : IMSVidVideoRenderer*, mixer_picture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MixerBitmap.call(this, mixer_picture)
    end
    def put_MixerBitmap(this : IMSVidVideoRenderer*, mixer_picture_disp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmap.call(this, mixer_picture_disp)
    end
    def put__MixerBitmap(this : IMSVidVideoRenderer*, mixer_picture : Win32cr::Media::DirectShow::VMRALPHABITMAP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MixerBitmap.call(this, mixer_picture)
    end
    def get_MixerBitmapPositionRect(this : IMSVidVideoRenderer*, rDest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapPositionRect.call(this, rDest)
    end
    def put_MixerBitmapPositionRect(this : IMSVidVideoRenderer*, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapPositionRect.call(this, rDest)
    end
    def get_MixerBitmapOpacity(this : IMSVidVideoRenderer*, opacity : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapOpacity.call(this, opacity)
    end
    def put_MixerBitmapOpacity(this : IMSVidVideoRenderer*, opacity : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapOpacity.call(this, opacity)
    end
    def setup_mixer_bitmap(this : IMSVidVideoRenderer*, mixer_picture_disp : Void*, opacity : Int32, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setup_mixer_bitmap.call(this, mixer_picture_disp, opacity, rDest)
    end
    def get_SourceSize(this : IMSVidVideoRenderer*, current_size : Win32cr::Media::DirectShow::SourceSizeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceSize.call(this, current_size)
    end
    def put_SourceSize(this : IMSVidVideoRenderer*, new_size : Win32cr::Media::DirectShow::SourceSizeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceSize.call(this, new_size)
    end
    def get_OverScan(this : IMSVidVideoRenderer*, plPercent : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OverScan.call(this, plPercent)
    end
    def put_OverScan(this : IMSVidVideoRenderer*, lPercent : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OverScan.call(this, lPercent)
    end
    def get_AvailableSourceRect(this : IMSVidVideoRenderer*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvailableSourceRect.call(this, pRect)
    end
    def get_MaxVidRect(this : IMSVidVideoRenderer*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxVidRect.call(this, ppVidRect)
    end
    def get_MinVidRect(this : IMSVidVideoRenderer*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinVidRect.call(this, ppVidRect)
    end
    def get_ClippedSourceRect(this : IMSVidVideoRenderer*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClippedSourceRect.call(this, pRect)
    end
    def put_ClippedSourceRect(this : IMSVidVideoRenderer*, pRect : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClippedSourceRect.call(this, pRect)
    end
    def get_UsingOverlay(this : IMSVidVideoRenderer*, use_overlay_val : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsingOverlay.call(this, use_overlay_val)
    end
    def put_UsingOverlay(this : IMSVidVideoRenderer*, use_overlay_val : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UsingOverlay.call(this, use_overlay_val)
    end
    def capture(this : IMSVidVideoRenderer*, currentImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.capture.call(this, currentImage)
    end
    def get_FramesPerSecond(this : IMSVidVideoRenderer*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FramesPerSecond.call(this, pVal)
    end
    def get_DecimateInput(this : IMSVidVideoRenderer*, pDeci : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DecimateInput.call(this, pDeci)
    end
    def put_DecimateInput(this : IMSVidVideoRenderer*, pDeci : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DecimateInput.call(this, pDeci)
    end

  end

  @[Extern]
  record IMSVidVideoRendererEventVtbl,
    query_interface : Proc(IMSVidVideoRendererEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVideoRendererEvent*, UInt32),
    release : Proc(IMSVidVideoRendererEvent*, UInt32),
    get_type_info_count : Proc(IMSVidVideoRendererEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidVideoRendererEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidVideoRendererEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidVideoRendererEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidVideoRendererEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    overlay_unavailable : Proc(IMSVidVideoRendererEvent*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b03545-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidVideoRendererEvent, lpVtbl : IMSVidVideoRendererEventVtbl* do
    GUID = LibC::GUID.new(0x37b03545_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidVideoRendererEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVideoRendererEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVideoRendererEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidVideoRendererEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidVideoRendererEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidVideoRendererEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidVideoRendererEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidVideoRendererEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def overlay_unavailable(this : IMSVidVideoRendererEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.overlay_unavailable.call(this)
    end

  end

  @[Extern]
  record IMSVidGenericSinkVtbl,
    query_interface : Proc(IMSVidGenericSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidGenericSink*, UInt32),
    release : Proc(IMSVidGenericSink*, UInt32),
    get_type_info_count : Proc(IMSVidGenericSink*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidGenericSink*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidGenericSink*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidGenericSink*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidGenericSink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidGenericSink*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidGenericSink*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidGenericSink*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidGenericSink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidGenericSink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidGenericSink*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidGenericSink*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidGenericSink*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    set_sink_filter : Proc(IMSVidGenericSink*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SinkStreams : Proc(IMSVidGenericSink*, Win32cr::Media::DirectShow::MSVidSinkStreams*, Win32cr::Foundation::HRESULT),
    put_SinkStreams : Proc(IMSVidGenericSink*, Win32cr::Media::DirectShow::MSVidSinkStreams, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6c29b41d-455b-4c33-963a-0d28e5e555ea")]
  record IMSVidGenericSink, lpVtbl : IMSVidGenericSinkVtbl* do
    GUID = LibC::GUID.new(0x6c29b41d_u32, 0x455b_u16, 0x4c33_u16, StaticArray[0x96_u8, 0x3a_u8, 0xd_u8, 0x28_u8, 0xe5_u8, 0xe5_u8, 0x55_u8, 0xea_u8])
    def query_interface(this : IMSVidGenericSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidGenericSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidGenericSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidGenericSink*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidGenericSink*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidGenericSink*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidGenericSink*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidGenericSink*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidGenericSink*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidGenericSink*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidGenericSink*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidGenericSink*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidGenericSink*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidGenericSink*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidGenericSink*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidGenericSink*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def set_sink_filter(this : IMSVidGenericSink*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sink_filter.call(this, bstrName)
    end
    def get_SinkStreams(this : IMSVidGenericSink*, pStreams : Win32cr::Media::DirectShow::MSVidSinkStreams*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SinkStreams.call(this, pStreams)
    end
    def put_SinkStreams(this : IMSVidGenericSink*, streams : Win32cr::Media::DirectShow::MSVidSinkStreams) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SinkStreams.call(this, streams)
    end

  end

  @[Extern]
  record IMSVidGenericSink2Vtbl,
    query_interface : Proc(IMSVidGenericSink2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidGenericSink2*, UInt32),
    release : Proc(IMSVidGenericSink2*, UInt32),
    get_type_info_count : Proc(IMSVidGenericSink2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidGenericSink2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidGenericSink2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidGenericSink2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidGenericSink2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidGenericSink2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidGenericSink2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidGenericSink2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidGenericSink2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidGenericSink2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidGenericSink2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidGenericSink2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidGenericSink2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    set_sink_filter : Proc(IMSVidGenericSink2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_SinkStreams : Proc(IMSVidGenericSink2*, Win32cr::Media::DirectShow::MSVidSinkStreams*, Win32cr::Foundation::HRESULT),
    put_SinkStreams : Proc(IMSVidGenericSink2*, Win32cr::Media::DirectShow::MSVidSinkStreams, Win32cr::Foundation::HRESULT),
    add_filter : Proc(IMSVidGenericSink2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    reset_filter_list : Proc(IMSVidGenericSink2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6b5a28f3-47f1-4092-b168-60cabec08f1c")]
  record IMSVidGenericSink2, lpVtbl : IMSVidGenericSink2Vtbl* do
    GUID = LibC::GUID.new(0x6b5a28f3_u32, 0x47f1_u16, 0x4092_u16, StaticArray[0xb1_u8, 0x68_u8, 0x60_u8, 0xca_u8, 0xbe_u8, 0xc0_u8, 0x8f_u8, 0x1c_u8])
    def query_interface(this : IMSVidGenericSink2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidGenericSink2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidGenericSink2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidGenericSink2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidGenericSink2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidGenericSink2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidGenericSink2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidGenericSink2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidGenericSink2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidGenericSink2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidGenericSink2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidGenericSink2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidGenericSink2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidGenericSink2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidGenericSink2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidGenericSink2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def set_sink_filter(this : IMSVidGenericSink2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sink_filter.call(this, bstrName)
    end
    def get_SinkStreams(this : IMSVidGenericSink2*, pStreams : Win32cr::Media::DirectShow::MSVidSinkStreams*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SinkStreams.call(this, pStreams)
    end
    def put_SinkStreams(this : IMSVidGenericSink2*, streams : Win32cr::Media::DirectShow::MSVidSinkStreams) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SinkStreams.call(this, streams)
    end
    def add_filter(this : IMSVidGenericSink2*, bstrName : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_filter.call(this, bstrName)
    end
    def reset_filter_list(this : IMSVidGenericSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_filter_list.call(this)
    end

  end

  @[Extern]
  record IMSVidStreamBufferRecordingControlVtbl,
    query_interface : Proc(IMSVidStreamBufferRecordingControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferRecordingControl*, UInt32),
    release : Proc(IMSVidStreamBufferRecordingControl*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferRecordingControl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferRecordingControl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferRecordingControl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferRecordingControl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StartTime : Proc(IMSVidStreamBufferRecordingControl*, Int32*, Win32cr::Foundation::HRESULT),
    put_StartTime : Proc(IMSVidStreamBufferRecordingControl*, Int32, Win32cr::Foundation::HRESULT),
    get_StopTime : Proc(IMSVidStreamBufferRecordingControl*, Int32*, Win32cr::Foundation::HRESULT),
    put_StopTime : Proc(IMSVidStreamBufferRecordingControl*, Int32, Win32cr::Foundation::HRESULT),
    get_RecordingStopped : Proc(IMSVidStreamBufferRecordingControl*, Int16*, Win32cr::Foundation::HRESULT),
    get_RecordingStarted : Proc(IMSVidStreamBufferRecordingControl*, Int16*, Win32cr::Foundation::HRESULT),
    get_RecordingType : Proc(IMSVidStreamBufferRecordingControl*, Win32cr::Media::DirectShow::RecordingType*, Win32cr::Foundation::HRESULT),
    get_RecordingAttribute : Proc(IMSVidStreamBufferRecordingControl*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("160621aa-bbbc-4326-a824-c395aebc6e74")]
  record IMSVidStreamBufferRecordingControl, lpVtbl : IMSVidStreamBufferRecordingControlVtbl* do
    GUID = LibC::GUID.new(0x160621aa_u32, 0xbbbc_u16, 0x4326_u16, StaticArray[0xa8_u8, 0x24_u8, 0xc3_u8, 0x95_u8, 0xae_u8, 0xbc_u8, 0x6e_u8, 0x74_u8])
    def query_interface(this : IMSVidStreamBufferRecordingControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferRecordingControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferRecordingControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferRecordingControl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferRecordingControl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferRecordingControl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferRecordingControl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StartTime(this : IMSVidStreamBufferRecordingControl*, rtStart : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartTime.call(this, rtStart)
    end
    def put_StartTime(this : IMSVidStreamBufferRecordingControl*, rtStart : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartTime.call(this, rtStart)
    end
    def get_StopTime(this : IMSVidStreamBufferRecordingControl*, rtStop : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StopTime.call(this, rtStop)
    end
    def put_StopTime(this : IMSVidStreamBufferRecordingControl*, rtStop : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StopTime.call(this, rtStop)
    end
    def get_RecordingStopped(this : IMSVidStreamBufferRecordingControl*, phResult : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecordingStopped.call(this, phResult)
    end
    def get_RecordingStarted(this : IMSVidStreamBufferRecordingControl*, phResult : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecordingStarted.call(this, phResult)
    end
    def get_RecordingType(this : IMSVidStreamBufferRecordingControl*, dwType : Win32cr::Media::DirectShow::RecordingType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecordingType.call(this, dwType)
    end
    def get_RecordingAttribute(this : IMSVidStreamBufferRecordingControl*, pRecordingAttribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecordingAttribute.call(this, pRecordingAttribute)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSinkVtbl,
    query_interface : Proc(IMSVidStreamBufferSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSink*, UInt32),
    release : Proc(IMSVidStreamBufferSink*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSink*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSink*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSink*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSink*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidStreamBufferSink*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidStreamBufferSink*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidStreamBufferSink*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidStreamBufferSink*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidStreamBufferSink*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidStreamBufferSink*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_ContentRecorder : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_ReferenceRecorder : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_SinkName : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SinkName : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    name_set_lock : Proc(IMSVidStreamBufferSink*, Win32cr::Foundation::HRESULT),
    get_SBESink : Proc(IMSVidStreamBufferSink*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("159dbb45-cd1b-4dab-83ea-5cb1f4f21d07")]
  record IMSVidStreamBufferSink, lpVtbl : IMSVidStreamBufferSinkVtbl* do
    GUID = LibC::GUID.new(0x159dbb45_u32, 0xcd1b_u16, 0x4dab_u16, StaticArray[0x83_u8, 0xea_u8, 0x5c_u8, 0xb1_u8, 0xf4_u8, 0xf2_u8, 0x1d_u8, 0x7_u8])
    def query_interface(this : IMSVidStreamBufferSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSink*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSink*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSink*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSink*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidStreamBufferSink*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidStreamBufferSink*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidStreamBufferSink*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidStreamBufferSink*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidStreamBufferSink*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidStreamBufferSink*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidStreamBufferSink*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidStreamBufferSink*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidStreamBufferSink*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_ContentRecorder(this : IMSVidStreamBufferSink*, pszFilename : Win32cr::Foundation::BSTR, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContentRecorder.call(this, pszFilename, pRecordingIUnknown)
    end
    def get_ReferenceRecorder(this : IMSVidStreamBufferSink*, pszFilename : Win32cr::Foundation::BSTR, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReferenceRecorder.call(this, pszFilename, pRecordingIUnknown)
    end
    def get_SinkName(this : IMSVidStreamBufferSink*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SinkName.call(this, pName)
    end
    def put_SinkName(this : IMSVidStreamBufferSink*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SinkName.call(this, name)
    end
    def name_set_lock(this : IMSVidStreamBufferSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name_set_lock.call(this)
    end
    def get_SBESink(this : IMSVidStreamBufferSink*, sbeConfig : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SBESink.call(this, sbeConfig)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSink2Vtbl,
    query_interface : Proc(IMSVidStreamBufferSink2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSink2*, UInt32),
    release : Proc(IMSVidStreamBufferSink2*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSink2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSink2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSink2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSink2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidStreamBufferSink2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidStreamBufferSink2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidStreamBufferSink2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidStreamBufferSink2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidStreamBufferSink2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidStreamBufferSink2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_ContentRecorder : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_ReferenceRecorder : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_SinkName : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SinkName : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    name_set_lock : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::HRESULT),
    get_SBESink : Proc(IMSVidStreamBufferSink2*, Void**, Win32cr::Foundation::HRESULT),
    unlock_profile : Proc(IMSVidStreamBufferSink2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2ca9fc63-c131-4e5a-955a-544a47c67146")]
  record IMSVidStreamBufferSink2, lpVtbl : IMSVidStreamBufferSink2Vtbl* do
    GUID = LibC::GUID.new(0x2ca9fc63_u32, 0xc131_u16, 0x4e5a_u16, StaticArray[0x95_u8, 0x5a_u8, 0x54_u8, 0x4a_u8, 0x47_u8, 0xc6_u8, 0x71_u8, 0x46_u8])
    def query_interface(this : IMSVidStreamBufferSink2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSink2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSink2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSink2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSink2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSink2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSink2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidStreamBufferSink2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidStreamBufferSink2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidStreamBufferSink2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidStreamBufferSink2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidStreamBufferSink2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidStreamBufferSink2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidStreamBufferSink2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidStreamBufferSink2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidStreamBufferSink2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_ContentRecorder(this : IMSVidStreamBufferSink2*, pszFilename : Win32cr::Foundation::BSTR, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContentRecorder.call(this, pszFilename, pRecordingIUnknown)
    end
    def get_ReferenceRecorder(this : IMSVidStreamBufferSink2*, pszFilename : Win32cr::Foundation::BSTR, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReferenceRecorder.call(this, pszFilename, pRecordingIUnknown)
    end
    def get_SinkName(this : IMSVidStreamBufferSink2*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SinkName.call(this, pName)
    end
    def put_SinkName(this : IMSVidStreamBufferSink2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SinkName.call(this, name)
    end
    def name_set_lock(this : IMSVidStreamBufferSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name_set_lock.call(this)
    end
    def get_SBESink(this : IMSVidStreamBufferSink2*, sbeConfig : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SBESink.call(this, sbeConfig)
    end
    def unlock_profile(this : IMSVidStreamBufferSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_profile.call(this)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSink3Vtbl,
    query_interface : Proc(IMSVidStreamBufferSink3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSink3*, UInt32),
    release : Proc(IMSVidStreamBufferSink3*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSink3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSink3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSink3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSink3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidStreamBufferSink3*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidStreamBufferSink3*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidStreamBufferSink3*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidStreamBufferSink3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidStreamBufferSink3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidStreamBufferSink3*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_ContentRecorder : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_ReferenceRecorder : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_SinkName : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_SinkName : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    name_set_lock : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::HRESULT),
    get_SBESink : Proc(IMSVidStreamBufferSink3*, Void**, Win32cr::Foundation::HRESULT),
    unlock_profile : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::HRESULT),
    set_min_seek : Proc(IMSVidStreamBufferSink3*, Int32*, Win32cr::Foundation::HRESULT),
    get_AudioCounter : Proc(IMSVidStreamBufferSink3*, Void**, Win32cr::Foundation::HRESULT),
    get_VideoCounter : Proc(IMSVidStreamBufferSink3*, Void**, Win32cr::Foundation::HRESULT),
    get_CCCounter : Proc(IMSVidStreamBufferSink3*, Void**, Win32cr::Foundation::HRESULT),
    get_WSTCounter : Proc(IMSVidStreamBufferSink3*, Void**, Win32cr::Foundation::HRESULT),
    put_AudioAnalysisFilter : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_AudioAnalysisFilter : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put__AudioAnalysisFilter : Proc(IMSVidStreamBufferSink3*, LibC::GUID, Win32cr::Foundation::HRESULT),
    get__AudioAnalysisFilter : Proc(IMSVidStreamBufferSink3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put_VideoAnalysisFilter : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_VideoAnalysisFilter : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put__VideoAnalysisFilter : Proc(IMSVidStreamBufferSink3*, LibC::GUID, Win32cr::Foundation::HRESULT),
    get__VideoAnalysisFilter : Proc(IMSVidStreamBufferSink3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put_DataAnalysisFilter : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DataAnalysisFilter : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put__DataAnalysisFilter : Proc(IMSVidStreamBufferSink3*, LibC::GUID, Win32cr::Foundation::HRESULT),
    get__DataAnalysisFilter : Proc(IMSVidStreamBufferSink3*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_LicenseErrorCode : Proc(IMSVidStreamBufferSink3*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4f8721d7-7d59-4d8b-99f5-a77775586bd5")]
  record IMSVidStreamBufferSink3, lpVtbl : IMSVidStreamBufferSink3Vtbl* do
    GUID = LibC::GUID.new(0x4f8721d7_u32, 0x7d59_u16, 0x4d8b_u16, StaticArray[0x99_u8, 0xf5_u8, 0xa7_u8, 0x77_u8, 0x75_u8, 0x58_u8, 0x6b_u8, 0xd5_u8])
    def query_interface(this : IMSVidStreamBufferSink3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSink3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSink3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSink3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSink3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSink3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSink3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidStreamBufferSink3*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidStreamBufferSink3*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidStreamBufferSink3*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidStreamBufferSink3*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidStreamBufferSink3*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidStreamBufferSink3*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidStreamBufferSink3*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidStreamBufferSink3*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidStreamBufferSink3*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_ContentRecorder(this : IMSVidStreamBufferSink3*, pszFilename : Win32cr::Foundation::BSTR, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ContentRecorder.call(this, pszFilename, pRecordingIUnknown)
    end
    def get_ReferenceRecorder(this : IMSVidStreamBufferSink3*, pszFilename : Win32cr::Foundation::BSTR, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ReferenceRecorder.call(this, pszFilename, pRecordingIUnknown)
    end
    def get_SinkName(this : IMSVidStreamBufferSink3*, pName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SinkName.call(this, pName)
    end
    def put_SinkName(this : IMSVidStreamBufferSink3*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SinkName.call(this, name)
    end
    def name_set_lock(this : IMSVidStreamBufferSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.name_set_lock.call(this)
    end
    def get_SBESink(this : IMSVidStreamBufferSink3*, sbeConfig : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SBESink.call(this, sbeConfig)
    end
    def unlock_profile(this : IMSVidStreamBufferSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_profile.call(this)
    end
    def set_min_seek(this : IMSVidStreamBufferSink3*, pdwMin : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_min_seek.call(this, pdwMin)
    end
    def get_AudioCounter(this : IMSVidStreamBufferSink3*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioCounter.call(this, ppUnk)
    end
    def get_VideoCounter(this : IMSVidStreamBufferSink3*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoCounter.call(this, ppUnk)
    end
    def get_CCCounter(this : IMSVidStreamBufferSink3*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CCCounter.call(this, ppUnk)
    end
    def get_WSTCounter(this : IMSVidStreamBufferSink3*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WSTCounter.call(this, ppUnk)
    end
    def put_AudioAnalysisFilter(this : IMSVidStreamBufferSink3*, szCLSID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AudioAnalysisFilter.call(this, szCLSID)
    end
    def get_AudioAnalysisFilter(this : IMSVidStreamBufferSink3*, pszCLSID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioAnalysisFilter.call(this, pszCLSID)
    end
    def put__AudioAnalysisFilter(this : IMSVidStreamBufferSink3*, guid : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__AudioAnalysisFilter.call(this, guid)
    end
    def get__AudioAnalysisFilter(this : IMSVidStreamBufferSink3*, pGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__AudioAnalysisFilter.call(this, pGuid)
    end
    def put_VideoAnalysisFilter(this : IMSVidStreamBufferSink3*, szCLSID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VideoAnalysisFilter.call(this, szCLSID)
    end
    def get_VideoAnalysisFilter(this : IMSVidStreamBufferSink3*, pszCLSID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoAnalysisFilter.call(this, pszCLSID)
    end
    def put__VideoAnalysisFilter(this : IMSVidStreamBufferSink3*, guid : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__VideoAnalysisFilter.call(this, guid)
    end
    def get__VideoAnalysisFilter(this : IMSVidStreamBufferSink3*, pGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__VideoAnalysisFilter.call(this, pGuid)
    end
    def put_DataAnalysisFilter(this : IMSVidStreamBufferSink3*, szCLSID : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DataAnalysisFilter.call(this, szCLSID)
    end
    def get_DataAnalysisFilter(this : IMSVidStreamBufferSink3*, pszCLSID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataAnalysisFilter.call(this, pszCLSID)
    end
    def put__DataAnalysisFilter(this : IMSVidStreamBufferSink3*, guid : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__DataAnalysisFilter.call(this, guid)
    end
    def get__DataAnalysisFilter(this : IMSVidStreamBufferSink3*, pGuid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__DataAnalysisFilter.call(this, pGuid)
    end
    def get_LicenseErrorCode(this : IMSVidStreamBufferSink3*, hres : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LicenseErrorCode.call(this, hres)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSinkEventVtbl,
    query_interface : Proc(IMSVidStreamBufferSinkEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSinkEvent*, UInt32),
    release : Proc(IMSVidStreamBufferSinkEvent*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSinkEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSinkEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidStreamBufferSinkEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent*, Win32cr::Foundation::HRESULT),
    certificate_success : Proc(IMSVidStreamBufferSinkEvent*, Win32cr::Foundation::HRESULT),
    write_failure : Proc(IMSVidStreamBufferSinkEvent*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f798a36b-b05b-4bbe-9703-eaea7d61cd51")]
  record IMSVidStreamBufferSinkEvent, lpVtbl : IMSVidStreamBufferSinkEventVtbl* do
    GUID = LibC::GUID.new(0xf798a36b_u32, 0xb05b_u16, 0x4bbe_u16, StaticArray[0x97_u8, 0x3_u8, 0xea_u8, 0xea_u8, 0x7d_u8, 0x61_u8, 0xcd_u8, 0x51_u8])
    def query_interface(this : IMSVidStreamBufferSinkEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSinkEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSinkEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSinkEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSinkEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSinkEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSinkEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidStreamBufferSinkEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def certificate_failure(this : IMSVidStreamBufferSinkEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_failure.call(this)
    end
    def certificate_success(this : IMSVidStreamBufferSinkEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_success.call(this)
    end
    def write_failure(this : IMSVidStreamBufferSinkEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_failure.call(this)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSinkEvent2Vtbl,
    query_interface : Proc(IMSVidStreamBufferSinkEvent2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSinkEvent2*, UInt32),
    release : Proc(IMSVidStreamBufferSinkEvent2*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSinkEvent2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSinkEvent2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidStreamBufferSinkEvent2*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent2*, Win32cr::Foundation::HRESULT),
    certificate_success : Proc(IMSVidStreamBufferSinkEvent2*, Win32cr::Foundation::HRESULT),
    write_failure : Proc(IMSVidStreamBufferSinkEvent2*, Win32cr::Foundation::HRESULT),
    encryption_on : Proc(IMSVidStreamBufferSinkEvent2*, Win32cr::Foundation::HRESULT),
    encryption_off : Proc(IMSVidStreamBufferSinkEvent2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3d7a5166-72d7-484b-a06f-286187b80ca1")]
  record IMSVidStreamBufferSinkEvent2, lpVtbl : IMSVidStreamBufferSinkEvent2Vtbl* do
    GUID = LibC::GUID.new(0x3d7a5166_u32, 0x72d7_u16, 0x484b_u16, StaticArray[0xa0_u8, 0x6f_u8, 0x28_u8, 0x61_u8, 0x87_u8, 0xb8_u8, 0xc_u8, 0xa1_u8])
    def query_interface(this : IMSVidStreamBufferSinkEvent2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSinkEvent2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSinkEvent2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSinkEvent2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSinkEvent2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSinkEvent2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSinkEvent2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidStreamBufferSinkEvent2*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def certificate_failure(this : IMSVidStreamBufferSinkEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_failure.call(this)
    end
    def certificate_success(this : IMSVidStreamBufferSinkEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_success.call(this)
    end
    def write_failure(this : IMSVidStreamBufferSinkEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_failure.call(this)
    end
    def encryption_on(this : IMSVidStreamBufferSinkEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encryption_on.call(this)
    end
    def encryption_off(this : IMSVidStreamBufferSinkEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encryption_off.call(this)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSinkEvent3Vtbl,
    query_interface : Proc(IMSVidStreamBufferSinkEvent3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSinkEvent3*, UInt32),
    release : Proc(IMSVidStreamBufferSinkEvent3*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSinkEvent3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSinkEvent3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidStreamBufferSinkEvent3*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent3*, Win32cr::Foundation::HRESULT),
    certificate_success : Proc(IMSVidStreamBufferSinkEvent3*, Win32cr::Foundation::HRESULT),
    write_failure : Proc(IMSVidStreamBufferSinkEvent3*, Win32cr::Foundation::HRESULT),
    encryption_on : Proc(IMSVidStreamBufferSinkEvent3*, Win32cr::Foundation::HRESULT),
    encryption_off : Proc(IMSVidStreamBufferSinkEvent3*, Win32cr::Foundation::HRESULT),
    license_change : Proc(IMSVidStreamBufferSinkEvent3*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("735ad8d5-c259-48e9-81e7-d27953665b23")]
  record IMSVidStreamBufferSinkEvent3, lpVtbl : IMSVidStreamBufferSinkEvent3Vtbl* do
    GUID = LibC::GUID.new(0x735ad8d5_u32, 0xc259_u16, 0x48e9_u16, StaticArray[0x81_u8, 0xe7_u8, 0xd2_u8, 0x79_u8, 0x53_u8, 0x66_u8, 0x5b_u8, 0x23_u8])
    def query_interface(this : IMSVidStreamBufferSinkEvent3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSinkEvent3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSinkEvent3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSinkEvent3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSinkEvent3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSinkEvent3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSinkEvent3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidStreamBufferSinkEvent3*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def certificate_failure(this : IMSVidStreamBufferSinkEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_failure.call(this)
    end
    def certificate_success(this : IMSVidStreamBufferSinkEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_success.call(this)
    end
    def write_failure(this : IMSVidStreamBufferSinkEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_failure.call(this)
    end
    def encryption_on(this : IMSVidStreamBufferSinkEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encryption_on.call(this)
    end
    def encryption_off(this : IMSVidStreamBufferSinkEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encryption_off.call(this)
    end
    def license_change(this : IMSVidStreamBufferSinkEvent3*, dwProt : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.license_change.call(this, dwProt)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSinkEvent4Vtbl,
    query_interface : Proc(IMSVidStreamBufferSinkEvent4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSinkEvent4*, UInt32),
    release : Proc(IMSVidStreamBufferSinkEvent4*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent4*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSinkEvent4*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent4*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSinkEvent4*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidStreamBufferSinkEvent4*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent4*, Win32cr::Foundation::HRESULT),
    certificate_success : Proc(IMSVidStreamBufferSinkEvent4*, Win32cr::Foundation::HRESULT),
    write_failure : Proc(IMSVidStreamBufferSinkEvent4*, Win32cr::Foundation::HRESULT),
    encryption_on : Proc(IMSVidStreamBufferSinkEvent4*, Win32cr::Foundation::HRESULT),
    encryption_off : Proc(IMSVidStreamBufferSinkEvent4*, Win32cr::Foundation::HRESULT),
    license_change : Proc(IMSVidStreamBufferSinkEvent4*, Int32, Win32cr::Foundation::HRESULT),
    write_failure_clear : Proc(IMSVidStreamBufferSinkEvent4*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1b01dcb0-daf0-412c-a5d1-590c7f62e2b8")]
  record IMSVidStreamBufferSinkEvent4, lpVtbl : IMSVidStreamBufferSinkEvent4Vtbl* do
    GUID = LibC::GUID.new(0x1b01dcb0_u32, 0xdaf0_u16, 0x412c_u16, StaticArray[0xa5_u8, 0xd1_u8, 0x59_u8, 0xc_u8, 0x7f_u8, 0x62_u8, 0xe2_u8, 0xb8_u8])
    def query_interface(this : IMSVidStreamBufferSinkEvent4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSinkEvent4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSinkEvent4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSinkEvent4*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSinkEvent4*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSinkEvent4*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSinkEvent4*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidStreamBufferSinkEvent4*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def certificate_failure(this : IMSVidStreamBufferSinkEvent4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_failure.call(this)
    end
    def certificate_success(this : IMSVidStreamBufferSinkEvent4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_success.call(this)
    end
    def write_failure(this : IMSVidStreamBufferSinkEvent4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_failure.call(this)
    end
    def encryption_on(this : IMSVidStreamBufferSinkEvent4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encryption_on.call(this)
    end
    def encryption_off(this : IMSVidStreamBufferSinkEvent4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encryption_off.call(this)
    end
    def license_change(this : IMSVidStreamBufferSinkEvent4*, dwProt : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.license_change.call(this, dwProt)
    end
    def write_failure_clear(this : IMSVidStreamBufferSinkEvent4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_failure_clear.call(this)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSourceVtbl,
    query_interface : Proc(IMSVidStreamBufferSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSource*, UInt32),
    release : Proc(IMSVidStreamBufferSource*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSource*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSource*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSource*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSource*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidStreamBufferSource*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidStreamBufferSource*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidStreamBufferSource*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidStreamBufferSource*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidStreamBufferSource*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidStreamBufferSource*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidStreamBufferSource*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidStreamBufferSource*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnableResetOnStop : Proc(IMSVidStreamBufferSource*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableResetOnStop : Proc(IMSVidStreamBufferSource*, Int16, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::HRESULT),
    get_CanStep : Proc(IMSVidStreamBufferSource*, Int16, Int16*, Win32cr::Foundation::HRESULT),
    step : Proc(IMSVidStreamBufferSource*, Int32, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMSVidStreamBufferSource*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMSVidStreamBufferSource*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMSVidStreamBufferSource*, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMSVidStreamBufferSource*, Int32*, Win32cr::Foundation::HRESULT),
    put_PositionMode : Proc(IMSVidStreamBufferSource*, Win32cr::Media::DirectShow::PositionModeList, Win32cr::Foundation::HRESULT),
    get_PositionMode : Proc(IMSVidStreamBufferSource*, Win32cr::Media::DirectShow::PositionModeList*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IMSVidStreamBufferSource*, Int32*, Win32cr::Foundation::HRESULT),
    get_FileName : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FileName : Proc(IMSVidStreamBufferSource*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Start : Proc(IMSVidStreamBufferSource*, Int32*, Win32cr::Foundation::HRESULT),
    get_RecordingAttribute : Proc(IMSVidStreamBufferSource*, Void**, Win32cr::Foundation::HRESULT),
    current_ratings : Proc(IMSVidStreamBufferSource*, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT),
    max_ratings_level : Proc(IMSVidStreamBufferSource*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Foundation::HRESULT),
    put_BlockUnrated : Proc(IMSVidStreamBufferSource*, Int16, Win32cr::Foundation::HRESULT),
    put_UnratedDelay : Proc(IMSVidStreamBufferSource*, Int32, Win32cr::Foundation::HRESULT),
    get_SBESource : Proc(IMSVidStreamBufferSource*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("eb0c8cf9-6950-4772-87b1-47d11cf3a02f")]
  record IMSVidStreamBufferSource, lpVtbl : IMSVidStreamBufferSourceVtbl* do
    GUID = LibC::GUID.new(0xeb0c8cf9_u32, 0x6950_u16, 0x4772_u16, StaticArray[0x87_u8, 0xb1_u8, 0x47_u8, 0xd1_u8, 0x1c_u8, 0xf3_u8, 0xa0_u8, 0x2f_u8])
    def query_interface(this : IMSVidStreamBufferSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSource*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSource*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSource*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSource*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidStreamBufferSource*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidStreamBufferSource*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidStreamBufferSource*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidStreamBufferSource*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidStreamBufferSource*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidStreamBufferSource*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidStreamBufferSource*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidStreamBufferSource*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidStreamBufferSource*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidStreamBufferSource*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidStreamBufferSource*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_EnableResetOnStop(this : IMSVidStreamBufferSource*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableResetOnStop.call(this, pVal)
    end
    def put_EnableResetOnStop(this : IMSVidStreamBufferSource*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableResetOnStop.call(this, newVal)
    end
    def run(this : IMSVidStreamBufferSource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMSVidStreamBufferSource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMSVidStreamBufferSource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_CanStep(this : IMSVidStreamBufferSource*, fBackwards : Int16, pfCan : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CanStep.call(this, fBackwards, pfCan)
    end
    def step(this : IMSVidStreamBufferSource*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def put_Rate(this : IMSVidStreamBufferSource*, plRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, plRate)
    end
    def get_Rate(this : IMSVidStreamBufferSource*, plRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, plRate)
    end
    def put_CurrentPosition(this : IMSVidStreamBufferSource*, lPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, lPosition)
    end
    def get_CurrentPosition(this : IMSVidStreamBufferSource*, lPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, lPosition)
    end
    def put_PositionMode(this : IMSVidStreamBufferSource*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PositionMode.call(this, lPositionMode)
    end
    def get_PositionMode(this : IMSVidStreamBufferSource*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PositionMode.call(this, lPositionMode)
    end
    def get_Length(this : IMSVidStreamBufferSource*, lLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, lLength)
    end
    def get_FileName(this : IMSVidStreamBufferSource*, file_name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileName.call(this, file_name)
    end
    def put_FileName(this : IMSVidStreamBufferSource*, file_name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileName.call(this, file_name)
    end
    def get_Start(this : IMSVidStreamBufferSource*, lStart : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Start.call(this, lStart)
    end
    def get_RecordingAttribute(this : IMSVidStreamBufferSource*, pRecordingAttribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecordingAttribute.call(this, pRecordingAttribute)
    end
    def current_ratings(this : IMSVidStreamBufferSource*, pEnSystem : Win32cr::Media::DirectShow::EnTvRat_System*, pEnRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, pBfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.current_ratings.call(this, pEnSystem, pEnRating, pBfEnAttr)
    end
    def max_ratings_level(this : IMSVidStreamBufferSource*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfEnAttr : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.max_ratings_level.call(this, enSystem, enRating, lbfEnAttr)
    end
    def put_BlockUnrated(this : IMSVidStreamBufferSource*, bBlock : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnrated.call(this, bBlock)
    end
    def put_UnratedDelay(this : IMSVidStreamBufferSource*, dwDelay : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UnratedDelay.call(this, dwDelay)
    end
    def get_SBESource(this : IMSVidStreamBufferSource*, sbeFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SBESource.call(this, sbeFilter)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSource2Vtbl,
    query_interface : Proc(IMSVidStreamBufferSource2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSource2*, UInt32),
    release : Proc(IMSVidStreamBufferSource2*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSource2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSource2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSource2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSource2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidStreamBufferSource2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidStreamBufferSource2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidStreamBufferSource2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidStreamBufferSource2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidStreamBufferSource2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidStreamBufferSource2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_viewable : Proc(IMSVidStreamBufferSource2*, Win32cr::System::Com::VARIANT*, Int16*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidStreamBufferSource2*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_EnableResetOnStop : Proc(IMSVidStreamBufferSource2*, Int16*, Win32cr::Foundation::HRESULT),
    put_EnableResetOnStop : Proc(IMSVidStreamBufferSource2*, Int16, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::HRESULT),
    get_CanStep : Proc(IMSVidStreamBufferSource2*, Int16, Int16*, Win32cr::Foundation::HRESULT),
    step : Proc(IMSVidStreamBufferSource2*, Int32, Win32cr::Foundation::HRESULT),
    put_Rate : Proc(IMSVidStreamBufferSource2*, Float64, Win32cr::Foundation::HRESULT),
    get_Rate : Proc(IMSVidStreamBufferSource2*, Float64*, Win32cr::Foundation::HRESULT),
    put_CurrentPosition : Proc(IMSVidStreamBufferSource2*, Int32, Win32cr::Foundation::HRESULT),
    get_CurrentPosition : Proc(IMSVidStreamBufferSource2*, Int32*, Win32cr::Foundation::HRESULT),
    put_PositionMode : Proc(IMSVidStreamBufferSource2*, Win32cr::Media::DirectShow::PositionModeList, Win32cr::Foundation::HRESULT),
    get_PositionMode : Proc(IMSVidStreamBufferSource2*, Win32cr::Media::DirectShow::PositionModeList*, Win32cr::Foundation::HRESULT),
    get_Length : Proc(IMSVidStreamBufferSource2*, Int32*, Win32cr::Foundation::HRESULT),
    get_FileName : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_FileName : Proc(IMSVidStreamBufferSource2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_Start : Proc(IMSVidStreamBufferSource2*, Int32*, Win32cr::Foundation::HRESULT),
    get_RecordingAttribute : Proc(IMSVidStreamBufferSource2*, Void**, Win32cr::Foundation::HRESULT),
    current_ratings : Proc(IMSVidStreamBufferSource2*, Win32cr::Media::DirectShow::EnTvRat_System*, Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, Int32*, Win32cr::Foundation::HRESULT),
    max_ratings_level : Proc(IMSVidStreamBufferSource2*, Win32cr::Media::DirectShow::EnTvRat_System, Win32cr::Media::DirectShow::EnTvRat_GenericLevel, Int32, Win32cr::Foundation::HRESULT),
    put_BlockUnrated : Proc(IMSVidStreamBufferSource2*, Int16, Win32cr::Foundation::HRESULT),
    put_UnratedDelay : Proc(IMSVidStreamBufferSource2*, Int32, Win32cr::Foundation::HRESULT),
    get_SBESource : Proc(IMSVidStreamBufferSource2*, Void**, Win32cr::Foundation::HRESULT),
    put_RateEx : Proc(IMSVidStreamBufferSource2*, Float64, UInt32, Win32cr::Foundation::HRESULT),
    get_AudioCounter : Proc(IMSVidStreamBufferSource2*, Void**, Win32cr::Foundation::HRESULT),
    get_VideoCounter : Proc(IMSVidStreamBufferSource2*, Void**, Win32cr::Foundation::HRESULT),
    get_CCCounter : Proc(IMSVidStreamBufferSource2*, Void**, Win32cr::Foundation::HRESULT),
    get_WSTCounter : Proc(IMSVidStreamBufferSource2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e4ba9059-b1ce-40d8-b9a0-d4ea4a9989d3")]
  record IMSVidStreamBufferSource2, lpVtbl : IMSVidStreamBufferSource2Vtbl* do
    GUID = LibC::GUID.new(0xe4ba9059_u32, 0xb1ce_u16, 0x40d8_u16, StaticArray[0xb9_u8, 0xa0_u8, 0xd4_u8, 0xea_u8, 0x4a_u8, 0x99_u8, 0x89_u8, 0xd3_u8])
    def query_interface(this : IMSVidStreamBufferSource2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSource2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSource2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSource2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSource2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSource2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSource2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidStreamBufferSource2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidStreamBufferSource2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidStreamBufferSource2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidStreamBufferSource2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidStreamBufferSource2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidStreamBufferSource2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidStreamBufferSource2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidStreamBufferSource2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidStreamBufferSource2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def is_viewable(this : IMSVidStreamBufferSource2*, v : Win32cr::System::Com::VARIANT*, pfViewable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_viewable.call(this, v, pfViewable)
    end
    def view(this : IMSVidStreamBufferSource2*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def get_EnableResetOnStop(this : IMSVidStreamBufferSource2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnableResetOnStop.call(this, pVal)
    end
    def put_EnableResetOnStop(this : IMSVidStreamBufferSource2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EnableResetOnStop.call(this, newVal)
    end
    def run(this : IMSVidStreamBufferSource2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def pause(this : IMSVidStreamBufferSource2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMSVidStreamBufferSource2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_CanStep(this : IMSVidStreamBufferSource2*, fBackwards : Int16, pfCan : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CanStep.call(this, fBackwards, pfCan)
    end
    def step(this : IMSVidStreamBufferSource2*, lStep : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.step.call(this, lStep)
    end
    def put_Rate(this : IMSVidStreamBufferSource2*, plRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Rate.call(this, plRate)
    end
    def get_Rate(this : IMSVidStreamBufferSource2*, plRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Rate.call(this, plRate)
    end
    def put_CurrentPosition(this : IMSVidStreamBufferSource2*, lPosition : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CurrentPosition.call(this, lPosition)
    end
    def get_CurrentPosition(this : IMSVidStreamBufferSource2*, lPosition : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPosition.call(this, lPosition)
    end
    def put_PositionMode(this : IMSVidStreamBufferSource2*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PositionMode.call(this, lPositionMode)
    end
    def get_PositionMode(this : IMSVidStreamBufferSource2*, lPositionMode : Win32cr::Media::DirectShow::PositionModeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PositionMode.call(this, lPositionMode)
    end
    def get_Length(this : IMSVidStreamBufferSource2*, lLength : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Length.call(this, lLength)
    end
    def get_FileName(this : IMSVidStreamBufferSource2*, file_name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileName.call(this, file_name)
    end
    def put_FileName(this : IMSVidStreamBufferSource2*, file_name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileName.call(this, file_name)
    end
    def get_Start(this : IMSVidStreamBufferSource2*, lStart : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Start.call(this, lStart)
    end
    def get_RecordingAttribute(this : IMSVidStreamBufferSource2*, pRecordingAttribute : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RecordingAttribute.call(this, pRecordingAttribute)
    end
    def current_ratings(this : IMSVidStreamBufferSource2*, pEnSystem : Win32cr::Media::DirectShow::EnTvRat_System*, pEnRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel*, pBfEnAttr : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.current_ratings.call(this, pEnSystem, pEnRating, pBfEnAttr)
    end
    def max_ratings_level(this : IMSVidStreamBufferSource2*, enSystem : Win32cr::Media::DirectShow::EnTvRat_System, enRating : Win32cr::Media::DirectShow::EnTvRat_GenericLevel, lbfEnAttr : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.max_ratings_level.call(this, enSystem, enRating, lbfEnAttr)
    end
    def put_BlockUnrated(this : IMSVidStreamBufferSource2*, bBlock : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BlockUnrated.call(this, bBlock)
    end
    def put_UnratedDelay(this : IMSVidStreamBufferSource2*, dwDelay : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UnratedDelay.call(this, dwDelay)
    end
    def get_SBESource(this : IMSVidStreamBufferSource2*, sbeFilter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SBESource.call(this, sbeFilter)
    end
    def put_RateEx(this : IMSVidStreamBufferSource2*, dwRate : Float64, dwFramesPerSecond : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RateEx.call(this, dwRate, dwFramesPerSecond)
    end
    def get_AudioCounter(this : IMSVidStreamBufferSource2*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioCounter.call(this, ppUnk)
    end
    def get_VideoCounter(this : IMSVidStreamBufferSource2*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoCounter.call(this, ppUnk)
    end
    def get_CCCounter(this : IMSVidStreamBufferSource2*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CCCounter.call(this, ppUnk)
    end
    def get_WSTCounter(this : IMSVidStreamBufferSource2*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WSTCounter.call(this, ppUnk)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSourceEventVtbl,
    query_interface : Proc(IMSVidStreamBufferSourceEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSourceEvent*, UInt32),
    release : Proc(IMSVidStreamBufferSourceEvent*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSourceEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSourceEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSourceEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSourceEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_media : Proc(IMSVidStreamBufferSourceEvent*, Void*, Win32cr::Foundation::HRESULT),
    certificate_failure : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT),
    certificate_success : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT),
    ratings_blocked : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT),
    ratings_unblocked : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT),
    ratings_changed : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT),
    time_hole : Proc(IMSVidStreamBufferSourceEvent*, Int32, Int32, Win32cr::Foundation::HRESULT),
    stale_data_read : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT),
    content_becoming_stale : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT),
    stale_file_deleted : Proc(IMSVidStreamBufferSourceEvent*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50ce8a7d-9c28-4da8-9042-cdfa7116f979")]
  record IMSVidStreamBufferSourceEvent, lpVtbl : IMSVidStreamBufferSourceEventVtbl* do
    GUID = LibC::GUID.new(0x50ce8a7d_u32, 0x9c28_u16, 0x4da8_u16, StaticArray[0x90_u8, 0x42_u8, 0xcd_u8, 0xfa_u8, 0x71_u8, 0x16_u8, 0xf9_u8, 0x79_u8])
    def query_interface(this : IMSVidStreamBufferSourceEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSourceEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSourceEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSourceEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSourceEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSourceEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSourceEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def end_of_media(this : IMSVidStreamBufferSourceEvent*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_media.call(this, lpd)
    end
    def certificate_failure(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_failure.call(this)
    end
    def certificate_success(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_success.call(this)
    end
    def ratings_blocked(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_blocked.call(this)
    end
    def ratings_unblocked(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_unblocked.call(this)
    end
    def ratings_changed(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_changed.call(this)
    end
    def time_hole(this : IMSVidStreamBufferSourceEvent*, stream_offset_ms : Int32, size_ms : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.time_hole.call(this, stream_offset_ms, size_ms)
    end
    def stale_data_read(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_data_read.call(this)
    end
    def content_becoming_stale(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.content_becoming_stale.call(this)
    end
    def stale_file_deleted(this : IMSVidStreamBufferSourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_file_deleted.call(this)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSourceEvent2Vtbl,
    query_interface : Proc(IMSVidStreamBufferSourceEvent2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSourceEvent2*, UInt32),
    release : Proc(IMSVidStreamBufferSourceEvent2*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSourceEvent2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSourceEvent2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSourceEvent2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSourceEvent2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_media : Proc(IMSVidStreamBufferSourceEvent2*, Void*, Win32cr::Foundation::HRESULT),
    certificate_failure : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    certificate_success : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    ratings_blocked : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    ratings_unblocked : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    ratings_changed : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    time_hole : Proc(IMSVidStreamBufferSourceEvent2*, Int32, Int32, Win32cr::Foundation::HRESULT),
    stale_data_read : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    content_becoming_stale : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    stale_file_deleted : Proc(IMSVidStreamBufferSourceEvent2*, Win32cr::Foundation::HRESULT),
    rate_change : Proc(IMSVidStreamBufferSourceEvent2*, Float64, Float64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7aef50ce-8e22-4ba8-bc06-a92a458b4ef2")]
  record IMSVidStreamBufferSourceEvent2, lpVtbl : IMSVidStreamBufferSourceEvent2Vtbl* do
    GUID = LibC::GUID.new(0x7aef50ce_u32, 0x8e22_u16, 0x4ba8_u16, StaticArray[0xbc_u8, 0x6_u8, 0xa9_u8, 0x2a_u8, 0x45_u8, 0x8b_u8, 0x4e_u8, 0xf2_u8])
    def query_interface(this : IMSVidStreamBufferSourceEvent2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSourceEvent2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSourceEvent2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSourceEvent2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSourceEvent2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSourceEvent2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSourceEvent2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def end_of_media(this : IMSVidStreamBufferSourceEvent2*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_media.call(this, lpd)
    end
    def certificate_failure(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_failure.call(this)
    end
    def certificate_success(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_success.call(this)
    end
    def ratings_blocked(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_blocked.call(this)
    end
    def ratings_unblocked(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_unblocked.call(this)
    end
    def ratings_changed(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_changed.call(this)
    end
    def time_hole(this : IMSVidStreamBufferSourceEvent2*, stream_offset_ms : Int32, size_ms : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.time_hole.call(this, stream_offset_ms, size_ms)
    end
    def stale_data_read(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_data_read.call(this)
    end
    def content_becoming_stale(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.content_becoming_stale.call(this)
    end
    def stale_file_deleted(this : IMSVidStreamBufferSourceEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_file_deleted.call(this)
    end
    def rate_change(this : IMSVidStreamBufferSourceEvent2*, qwNewRate : Float64, qwOldRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rate_change.call(this, qwNewRate, qwOldRate)
    end

  end

  @[Extern]
  record IMSVidStreamBufferSourceEvent3Vtbl,
    query_interface : Proc(IMSVidStreamBufferSourceEvent3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferSourceEvent3*, UInt32),
    release : Proc(IMSVidStreamBufferSourceEvent3*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferSourceEvent3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferSourceEvent3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferSourceEvent3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferSourceEvent3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_media : Proc(IMSVidStreamBufferSourceEvent3*, Void*, Win32cr::Foundation::HRESULT),
    certificate_failure : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    certificate_success : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    ratings_blocked : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    ratings_unblocked : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    ratings_changed : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    time_hole : Proc(IMSVidStreamBufferSourceEvent3*, Int32, Int32, Win32cr::Foundation::HRESULT),
    stale_data_read : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    content_becoming_stale : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    stale_file_deleted : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    rate_change : Proc(IMSVidStreamBufferSourceEvent3*, Float64, Float64, Win32cr::Foundation::HRESULT),
    broadcast_event : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    broadcast_event_ex : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::BSTR, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    copp_blocked : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    copp_unblocked : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT),
    content_primarily_audio : Proc(IMSVidStreamBufferSourceEvent3*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ceabd6ab-9b90-4570-adf1-3ce76e00a763")]
  record IMSVidStreamBufferSourceEvent3, lpVtbl : IMSVidStreamBufferSourceEvent3Vtbl* do
    GUID = LibC::GUID.new(0xceabd6ab_u32, 0x9b90_u16, 0x4570_u16, StaticArray[0xad_u8, 0xf1_u8, 0x3c_u8, 0xe7_u8, 0x6e_u8, 0x0_u8, 0xa7_u8, 0x63_u8])
    def query_interface(this : IMSVidStreamBufferSourceEvent3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferSourceEvent3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferSourceEvent3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferSourceEvent3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferSourceEvent3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferSourceEvent3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferSourceEvent3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def end_of_media(this : IMSVidStreamBufferSourceEvent3*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_media.call(this, lpd)
    end
    def certificate_failure(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_failure.call(this)
    end
    def certificate_success(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.certificate_success.call(this)
    end
    def ratings_blocked(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_blocked.call(this)
    end
    def ratings_unblocked(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_unblocked.call(this)
    end
    def ratings_changed(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_changed.call(this)
    end
    def time_hole(this : IMSVidStreamBufferSourceEvent3*, stream_offset_ms : Int32, size_ms : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.time_hole.call(this, stream_offset_ms, size_ms)
    end
    def stale_data_read(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_data_read.call(this)
    end
    def content_becoming_stale(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.content_becoming_stale.call(this)
    end
    def stale_file_deleted(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_file_deleted.call(this)
    end
    def rate_change(this : IMSVidStreamBufferSourceEvent3*, qwNewRate : Float64, qwOldRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rate_change.call(this, qwNewRate, qwOldRate)
    end
    def broadcast_event(this : IMSVidStreamBufferSourceEvent3*, guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.broadcast_event.call(this, guid)
    end
    def broadcast_event_ex(this : IMSVidStreamBufferSourceEvent3*, guid : Win32cr::Foundation::BSTR, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.broadcast_event_ex.call(this, guid, param1, param2, param3, param4)
    end
    def copp_blocked(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copp_blocked.call(this)
    end
    def copp_unblocked(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copp_unblocked.call(this)
    end
    def content_primarily_audio(this : IMSVidStreamBufferSourceEvent3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.content_primarily_audio.call(this)
    end

  end

  @[Extern]
  record IMSVidStreamBufferV2SourceEventVtbl,
    query_interface : Proc(IMSVidStreamBufferV2SourceEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32),
    release : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32),
    get_type_info_count : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidStreamBufferV2SourceEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidStreamBufferV2SourceEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    end_of_media : Proc(IMSVidStreamBufferV2SourceEvent*, Void*, Win32cr::Foundation::HRESULT),
    ratings_changed : Proc(IMSVidStreamBufferV2SourceEvent*, Win32cr::Foundation::HRESULT),
    time_hole : Proc(IMSVidStreamBufferV2SourceEvent*, Int32, Int32, Win32cr::Foundation::HRESULT),
    stale_data_read : Proc(IMSVidStreamBufferV2SourceEvent*, Win32cr::Foundation::HRESULT),
    content_becoming_stale : Proc(IMSVidStreamBufferV2SourceEvent*, Win32cr::Foundation::HRESULT),
    stale_file_deleted : Proc(IMSVidStreamBufferV2SourceEvent*, Win32cr::Foundation::HRESULT),
    rate_change : Proc(IMSVidStreamBufferV2SourceEvent*, Float64, Float64, Win32cr::Foundation::HRESULT),
    broadcast_event : Proc(IMSVidStreamBufferV2SourceEvent*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    broadcast_event_ex : Proc(IMSVidStreamBufferV2SourceEvent*, Win32cr::Foundation::BSTR, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    content_primarily_audio : Proc(IMSVidStreamBufferV2SourceEvent*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("49c771f9-41b2-4cf7-9f9a-a313a8f6027e")]
  record IMSVidStreamBufferV2SourceEvent, lpVtbl : IMSVidStreamBufferV2SourceEventVtbl* do
    GUID = LibC::GUID.new(0x49c771f9_u32, 0x41b2_u16, 0x4cf7_u16, StaticArray[0x9f_u8, 0x9a_u8, 0xa3_u8, 0x13_u8, 0xa8_u8, 0xf6_u8, 0x2_u8, 0x7e_u8])
    def query_interface(this : IMSVidStreamBufferV2SourceEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidStreamBufferV2SourceEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidStreamBufferV2SourceEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidStreamBufferV2SourceEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidStreamBufferV2SourceEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidStreamBufferV2SourceEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidStreamBufferV2SourceEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def end_of_media(this : IMSVidStreamBufferV2SourceEvent*, lpd : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_of_media.call(this, lpd)
    end
    def ratings_changed(this : IMSVidStreamBufferV2SourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.ratings_changed.call(this)
    end
    def time_hole(this : IMSVidStreamBufferV2SourceEvent*, stream_offset_ms : Int32, size_ms : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.time_hole.call(this, stream_offset_ms, size_ms)
    end
    def stale_data_read(this : IMSVidStreamBufferV2SourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_data_read.call(this)
    end
    def content_becoming_stale(this : IMSVidStreamBufferV2SourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.content_becoming_stale.call(this)
    end
    def stale_file_deleted(this : IMSVidStreamBufferV2SourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stale_file_deleted.call(this)
    end
    def rate_change(this : IMSVidStreamBufferV2SourceEvent*, qwNewRate : Float64, qwOldRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rate_change.call(this, qwNewRate, qwOldRate)
    end
    def broadcast_event(this : IMSVidStreamBufferV2SourceEvent*, guid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.broadcast_event.call(this, guid)
    end
    def broadcast_event_ex(this : IMSVidStreamBufferV2SourceEvent*, guid : Win32cr::Foundation::BSTR, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.broadcast_event_ex.call(this, guid, param1, param2, param3, param4)
    end
    def content_primarily_audio(this : IMSVidStreamBufferV2SourceEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.content_primarily_audio.call(this)
    end

  end

  @[Extern]
  record IMSVidVideoRenderer2Vtbl,
    query_interface : Proc(IMSVidVideoRenderer2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVideoRenderer2*, UInt32),
    release : Proc(IMSVidVideoRenderer2*, UInt32),
    get_type_info_count : Proc(IMSVidVideoRenderer2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidVideoRenderer2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidVideoRenderer2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidVideoRenderer2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidVideoRenderer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidVideoRenderer2*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidVideoRenderer2*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidVideoRenderer2*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidVideoRenderer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidVideoRenderer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidVideoRenderer2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidVideoRenderer2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidVideoRenderer2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_CustomCompositorClass : Proc(IMSVidVideoRenderer2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CustomCompositorClass : Proc(IMSVidVideoRenderer2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__CustomCompositorClass : Proc(IMSVidVideoRenderer2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__CustomCompositorClass : Proc(IMSVidVideoRenderer2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__CustomCompositor : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    put__CustomCompositor : Proc(IMSVidVideoRenderer2*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmap : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    get__MixerBitmap : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmap : Proc(IMSVidVideoRenderer2*, Void*, Win32cr::Foundation::HRESULT),
    put__MixerBitmap : Proc(IMSVidVideoRenderer2*, Win32cr::Media::DirectShow::VMRALPHABITMAP*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapPositionRect : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmapPositionRect : Proc(IMSVidVideoRenderer2*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapOpacity : Proc(IMSVidVideoRenderer2*, Int32*, Win32cr::Foundation::HRESULT),
    put_MixerBitmapOpacity : Proc(IMSVidVideoRenderer2*, Int32, Win32cr::Foundation::HRESULT),
    setup_mixer_bitmap : Proc(IMSVidVideoRenderer2*, Void*, Int32, Void*, Win32cr::Foundation::HRESULT),
    get_SourceSize : Proc(IMSVidVideoRenderer2*, Win32cr::Media::DirectShow::SourceSizeList*, Win32cr::Foundation::HRESULT),
    put_SourceSize : Proc(IMSVidVideoRenderer2*, Win32cr::Media::DirectShow::SourceSizeList, Win32cr::Foundation::HRESULT),
    get_OverScan : Proc(IMSVidVideoRenderer2*, Int32*, Win32cr::Foundation::HRESULT),
    put_OverScan : Proc(IMSVidVideoRenderer2*, Int32, Win32cr::Foundation::HRESULT),
    get_AvailableSourceRect : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    get_MaxVidRect : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    get_MinVidRect : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    get_ClippedSourceRect : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    put_ClippedSourceRect : Proc(IMSVidVideoRenderer2*, Void*, Win32cr::Foundation::HRESULT),
    get_UsingOverlay : Proc(IMSVidVideoRenderer2*, Int16*, Win32cr::Foundation::HRESULT),
    put_UsingOverlay : Proc(IMSVidVideoRenderer2*, Int16, Win32cr::Foundation::HRESULT),
    capture : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    get_FramesPerSecond : Proc(IMSVidVideoRenderer2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DecimateInput : Proc(IMSVidVideoRenderer2*, Int16*, Win32cr::Foundation::HRESULT),
    put_DecimateInput : Proc(IMSVidVideoRenderer2*, Int16, Win32cr::Foundation::HRESULT),
    get_Allocator : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    get__Allocator : Proc(IMSVidVideoRenderer2*, Void**, Win32cr::Foundation::HRESULT),
    get_Allocator_ID : Proc(IMSVidVideoRenderer2*, Int32*, Win32cr::Foundation::HRESULT),
    set_allocator : Proc(IMSVidVideoRenderer2*, Void*, Int32, Win32cr::Foundation::HRESULT),
    _set_allocator2 : Proc(IMSVidVideoRenderer2*, Void*, Int32, Win32cr::Foundation::HRESULT),
    put_SuppressEffects : Proc(IMSVidVideoRenderer2*, Int16, Win32cr::Foundation::HRESULT),
    get_SuppressEffects : Proc(IMSVidVideoRenderer2*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6bdd5c1e-2810-4159-94bc-05511ae8549b")]
  record IMSVidVideoRenderer2, lpVtbl : IMSVidVideoRenderer2Vtbl* do
    GUID = LibC::GUID.new(0x6bdd5c1e_u32, 0x2810_u16, 0x4159_u16, StaticArray[0x94_u8, 0xbc_u8, 0x5_u8, 0x51_u8, 0x1a_u8, 0xe8_u8, 0x54_u8, 0x9b_u8])
    def query_interface(this : IMSVidVideoRenderer2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVideoRenderer2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVideoRenderer2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidVideoRenderer2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidVideoRenderer2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidVideoRenderer2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidVideoRenderer2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidVideoRenderer2*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidVideoRenderer2*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidVideoRenderer2*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidVideoRenderer2*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidVideoRenderer2*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidVideoRenderer2*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidVideoRenderer2*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidVideoRenderer2*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidVideoRenderer2*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_CustomCompositorClass(this : IMSVidVideoRenderer2*, compositor_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CustomCompositorClass.call(this, compositor_clsid)
    end
    def put_CustomCompositorClass(this : IMSVidVideoRenderer2*, compositor_clsid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositorClass(this : IMSVidVideoRenderer2*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositorClass.call(this, compositor_clsid)
    end
    def put__CustomCompositorClass(this : IMSVidVideoRenderer2*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositor(this : IMSVidVideoRenderer2*, compositor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositor.call(this, compositor)
    end
    def put__CustomCompositor(this : IMSVidVideoRenderer2*, compositor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositor.call(this, compositor)
    end
    def get_MixerBitmap(this : IMSVidVideoRenderer2*, mixer_picture_disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmap.call(this, mixer_picture_disp)
    end
    def get__MixerBitmap(this : IMSVidVideoRenderer2*, mixer_picture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MixerBitmap.call(this, mixer_picture)
    end
    def put_MixerBitmap(this : IMSVidVideoRenderer2*, mixer_picture_disp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmap.call(this, mixer_picture_disp)
    end
    def put__MixerBitmap(this : IMSVidVideoRenderer2*, mixer_picture : Win32cr::Media::DirectShow::VMRALPHABITMAP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MixerBitmap.call(this, mixer_picture)
    end
    def get_MixerBitmapPositionRect(this : IMSVidVideoRenderer2*, rDest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapPositionRect.call(this, rDest)
    end
    def put_MixerBitmapPositionRect(this : IMSVidVideoRenderer2*, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapPositionRect.call(this, rDest)
    end
    def get_MixerBitmapOpacity(this : IMSVidVideoRenderer2*, opacity : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapOpacity.call(this, opacity)
    end
    def put_MixerBitmapOpacity(this : IMSVidVideoRenderer2*, opacity : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapOpacity.call(this, opacity)
    end
    def setup_mixer_bitmap(this : IMSVidVideoRenderer2*, mixer_picture_disp : Void*, opacity : Int32, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setup_mixer_bitmap.call(this, mixer_picture_disp, opacity, rDest)
    end
    def get_SourceSize(this : IMSVidVideoRenderer2*, current_size : Win32cr::Media::DirectShow::SourceSizeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceSize.call(this, current_size)
    end
    def put_SourceSize(this : IMSVidVideoRenderer2*, new_size : Win32cr::Media::DirectShow::SourceSizeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceSize.call(this, new_size)
    end
    def get_OverScan(this : IMSVidVideoRenderer2*, plPercent : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OverScan.call(this, plPercent)
    end
    def put_OverScan(this : IMSVidVideoRenderer2*, lPercent : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OverScan.call(this, lPercent)
    end
    def get_AvailableSourceRect(this : IMSVidVideoRenderer2*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvailableSourceRect.call(this, pRect)
    end
    def get_MaxVidRect(this : IMSVidVideoRenderer2*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxVidRect.call(this, ppVidRect)
    end
    def get_MinVidRect(this : IMSVidVideoRenderer2*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinVidRect.call(this, ppVidRect)
    end
    def get_ClippedSourceRect(this : IMSVidVideoRenderer2*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClippedSourceRect.call(this, pRect)
    end
    def put_ClippedSourceRect(this : IMSVidVideoRenderer2*, pRect : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClippedSourceRect.call(this, pRect)
    end
    def get_UsingOverlay(this : IMSVidVideoRenderer2*, use_overlay_val : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsingOverlay.call(this, use_overlay_val)
    end
    def put_UsingOverlay(this : IMSVidVideoRenderer2*, use_overlay_val : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UsingOverlay.call(this, use_overlay_val)
    end
    def capture(this : IMSVidVideoRenderer2*, currentImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.capture.call(this, currentImage)
    end
    def get_FramesPerSecond(this : IMSVidVideoRenderer2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FramesPerSecond.call(this, pVal)
    end
    def get_DecimateInput(this : IMSVidVideoRenderer2*, pDeci : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DecimateInput.call(this, pDeci)
    end
    def put_DecimateInput(this : IMSVidVideoRenderer2*, pDeci : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DecimateInput.call(this, pDeci)
    end
    def get_Allocator(this : IMSVidVideoRenderer2*, alloc_present : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Allocator.call(this, alloc_present)
    end
    def get__Allocator(this : IMSVidVideoRenderer2*, alloc_present : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Allocator.call(this, alloc_present)
    end
    def get_Allocator_ID(this : IMSVidVideoRenderer2*, id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Allocator_ID.call(this, id)
    end
    def set_allocator(this : IMSVidVideoRenderer2*, alloc_present : Void*, id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_allocator.call(this, alloc_present, id)
    end
    def _set_allocator2(this : IMSVidVideoRenderer2*, alloc_present : Void*, id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value._set_allocator2.call(this, alloc_present, id)
    end
    def put_SuppressEffects(this : IMSVidVideoRenderer2*, bSuppress : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressEffects.call(this, bSuppress)
    end
    def get_SuppressEffects(this : IMSVidVideoRenderer2*, bSuppress : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressEffects.call(this, bSuppress)
    end

  end

  @[Extern]
  record IMSVidVideoRendererEvent2Vtbl,
    query_interface : Proc(IMSVidVideoRendererEvent2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVideoRendererEvent2*, UInt32),
    release : Proc(IMSVidVideoRendererEvent2*, UInt32),
    get_type_info_count : Proc(IMSVidVideoRendererEvent2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidVideoRendererEvent2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidVideoRendererEvent2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidVideoRendererEvent2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidVideoRendererEvent2*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    overlay_unavailable : Proc(IMSVidVideoRendererEvent2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7145ed66-4730-4fdb-8a53-fde7508d3e5e")]
  record IMSVidVideoRendererEvent2, lpVtbl : IMSVidVideoRendererEvent2Vtbl* do
    GUID = LibC::GUID.new(0x7145ed66_u32, 0x4730_u16, 0x4fdb_u16, StaticArray[0x8a_u8, 0x53_u8, 0xfd_u8, 0xe7_u8, 0x50_u8, 0x8d_u8, 0x3e_u8, 0x5e_u8])
    def query_interface(this : IMSVidVideoRendererEvent2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVideoRendererEvent2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVideoRendererEvent2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidVideoRendererEvent2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidVideoRendererEvent2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidVideoRendererEvent2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidVideoRendererEvent2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidVideoRendererEvent2*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def overlay_unavailable(this : IMSVidVideoRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.overlay_unavailable.call(this)
    end

  end

  @[Extern]
  record IMSVidVMR9Vtbl,
    query_interface : Proc(IMSVidVMR9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVMR9*, UInt32),
    release : Proc(IMSVidVMR9*, UInt32),
    get_type_info_count : Proc(IMSVidVMR9*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidVMR9*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidVMR9*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidVMR9*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidVMR9*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidVMR9*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidVMR9*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidVMR9*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidVMR9*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidVMR9*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidVMR9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidVMR9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidVMR9*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_CustomCompositorClass : Proc(IMSVidVMR9*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CustomCompositorClass : Proc(IMSVidVMR9*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__CustomCompositorClass : Proc(IMSVidVMR9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__CustomCompositorClass : Proc(IMSVidVMR9*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__CustomCompositor : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    put__CustomCompositor : Proc(IMSVidVMR9*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmap : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    get__MixerBitmap : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmap : Proc(IMSVidVMR9*, Void*, Win32cr::Foundation::HRESULT),
    put__MixerBitmap : Proc(IMSVidVMR9*, Win32cr::Media::DirectShow::VMRALPHABITMAP*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapPositionRect : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmapPositionRect : Proc(IMSVidVMR9*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapOpacity : Proc(IMSVidVMR9*, Int32*, Win32cr::Foundation::HRESULT),
    put_MixerBitmapOpacity : Proc(IMSVidVMR9*, Int32, Win32cr::Foundation::HRESULT),
    setup_mixer_bitmap : Proc(IMSVidVMR9*, Void*, Int32, Void*, Win32cr::Foundation::HRESULT),
    get_SourceSize : Proc(IMSVidVMR9*, Win32cr::Media::DirectShow::SourceSizeList*, Win32cr::Foundation::HRESULT),
    put_SourceSize : Proc(IMSVidVMR9*, Win32cr::Media::DirectShow::SourceSizeList, Win32cr::Foundation::HRESULT),
    get_OverScan : Proc(IMSVidVMR9*, Int32*, Win32cr::Foundation::HRESULT),
    put_OverScan : Proc(IMSVidVMR9*, Int32, Win32cr::Foundation::HRESULT),
    get_AvailableSourceRect : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    get_MaxVidRect : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    get_MinVidRect : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    get_ClippedSourceRect : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    put_ClippedSourceRect : Proc(IMSVidVMR9*, Void*, Win32cr::Foundation::HRESULT),
    get_UsingOverlay : Proc(IMSVidVMR9*, Int16*, Win32cr::Foundation::HRESULT),
    put_UsingOverlay : Proc(IMSVidVMR9*, Int16, Win32cr::Foundation::HRESULT),
    capture : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT),
    get_FramesPerSecond : Proc(IMSVidVMR9*, Int32*, Win32cr::Foundation::HRESULT),
    get_DecimateInput : Proc(IMSVidVMR9*, Int16*, Win32cr::Foundation::HRESULT),
    put_DecimateInput : Proc(IMSVidVMR9*, Int16, Win32cr::Foundation::HRESULT),
    get_Allocator_ID : Proc(IMSVidVMR9*, Int32*, Win32cr::Foundation::HRESULT),
    set_allocator : Proc(IMSVidVMR9*, Void*, Int32, Win32cr::Foundation::HRESULT),
    put_SuppressEffects : Proc(IMSVidVMR9*, Int16, Win32cr::Foundation::HRESULT),
    get_SuppressEffects : Proc(IMSVidVMR9*, Int16*, Win32cr::Foundation::HRESULT),
    get_Allocator : Proc(IMSVidVMR9*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d58b0015-ebef-44bb-bbdd-3f3699d76ea1")]
  record IMSVidVMR9, lpVtbl : IMSVidVMR9Vtbl* do
    GUID = LibC::GUID.new(0xd58b0015_u32, 0xebef_u16, 0x44bb_u16, StaticArray[0xbb_u8, 0xdd_u8, 0x3f_u8, 0x36_u8, 0x99_u8, 0xd7_u8, 0x6e_u8, 0xa1_u8])
    def query_interface(this : IMSVidVMR9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVMR9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVMR9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidVMR9*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidVMR9*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidVMR9*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidVMR9*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidVMR9*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidVMR9*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidVMR9*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidVMR9*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidVMR9*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidVMR9*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidVMR9*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidVMR9*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidVMR9*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_CustomCompositorClass(this : IMSVidVMR9*, compositor_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CustomCompositorClass.call(this, compositor_clsid)
    end
    def put_CustomCompositorClass(this : IMSVidVMR9*, compositor_clsid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositorClass(this : IMSVidVMR9*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositorClass.call(this, compositor_clsid)
    end
    def put__CustomCompositorClass(this : IMSVidVMR9*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositor(this : IMSVidVMR9*, compositor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositor.call(this, compositor)
    end
    def put__CustomCompositor(this : IMSVidVMR9*, compositor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositor.call(this, compositor)
    end
    def get_MixerBitmap(this : IMSVidVMR9*, mixer_picture_disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmap.call(this, mixer_picture_disp)
    end
    def get__MixerBitmap(this : IMSVidVMR9*, mixer_picture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MixerBitmap.call(this, mixer_picture)
    end
    def put_MixerBitmap(this : IMSVidVMR9*, mixer_picture_disp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmap.call(this, mixer_picture_disp)
    end
    def put__MixerBitmap(this : IMSVidVMR9*, mixer_picture : Win32cr::Media::DirectShow::VMRALPHABITMAP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MixerBitmap.call(this, mixer_picture)
    end
    def get_MixerBitmapPositionRect(this : IMSVidVMR9*, rDest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapPositionRect.call(this, rDest)
    end
    def put_MixerBitmapPositionRect(this : IMSVidVMR9*, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapPositionRect.call(this, rDest)
    end
    def get_MixerBitmapOpacity(this : IMSVidVMR9*, opacity : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapOpacity.call(this, opacity)
    end
    def put_MixerBitmapOpacity(this : IMSVidVMR9*, opacity : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapOpacity.call(this, opacity)
    end
    def setup_mixer_bitmap(this : IMSVidVMR9*, mixer_picture_disp : Void*, opacity : Int32, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setup_mixer_bitmap.call(this, mixer_picture_disp, opacity, rDest)
    end
    def get_SourceSize(this : IMSVidVMR9*, current_size : Win32cr::Media::DirectShow::SourceSizeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceSize.call(this, current_size)
    end
    def put_SourceSize(this : IMSVidVMR9*, new_size : Win32cr::Media::DirectShow::SourceSizeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceSize.call(this, new_size)
    end
    def get_OverScan(this : IMSVidVMR9*, plPercent : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OverScan.call(this, plPercent)
    end
    def put_OverScan(this : IMSVidVMR9*, lPercent : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OverScan.call(this, lPercent)
    end
    def get_AvailableSourceRect(this : IMSVidVMR9*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvailableSourceRect.call(this, pRect)
    end
    def get_MaxVidRect(this : IMSVidVMR9*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxVidRect.call(this, ppVidRect)
    end
    def get_MinVidRect(this : IMSVidVMR9*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinVidRect.call(this, ppVidRect)
    end
    def get_ClippedSourceRect(this : IMSVidVMR9*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClippedSourceRect.call(this, pRect)
    end
    def put_ClippedSourceRect(this : IMSVidVMR9*, pRect : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClippedSourceRect.call(this, pRect)
    end
    def get_UsingOverlay(this : IMSVidVMR9*, use_overlay_val : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsingOverlay.call(this, use_overlay_val)
    end
    def put_UsingOverlay(this : IMSVidVMR9*, use_overlay_val : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UsingOverlay.call(this, use_overlay_val)
    end
    def capture(this : IMSVidVMR9*, currentImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.capture.call(this, currentImage)
    end
    def get_FramesPerSecond(this : IMSVidVMR9*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FramesPerSecond.call(this, pVal)
    end
    def get_DecimateInput(this : IMSVidVMR9*, pDeci : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DecimateInput.call(this, pDeci)
    end
    def put_DecimateInput(this : IMSVidVMR9*, pDeci : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DecimateInput.call(this, pDeci)
    end
    def get_Allocator_ID(this : IMSVidVMR9*, id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Allocator_ID.call(this, id)
    end
    def set_allocator(this : IMSVidVMR9*, alloc_present : Void*, id : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_allocator.call(this, alloc_present, id)
    end
    def put_SuppressEffects(this : IMSVidVMR9*, bSuppress : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressEffects.call(this, bSuppress)
    end
    def get_SuppressEffects(this : IMSVidVMR9*, bSuppress : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressEffects.call(this, bSuppress)
    end
    def get_Allocator(this : IMSVidVMR9*, alloc_present : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Allocator.call(this, alloc_present)
    end

  end

  @[Extern]
  record IMSVidEVRVtbl,
    query_interface : Proc(IMSVidEVR*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidEVR*, UInt32),
    release : Proc(IMSVidEVR*, UInt32),
    get_type_info_count : Proc(IMSVidEVR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidEVR*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidEVR*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidEVR*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidEVR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidEVR*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidEVR*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidEVR*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidEVR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidEVR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidEVR*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidEVR*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidEVR*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_CustomCompositorClass : Proc(IMSVidEVR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_CustomCompositorClass : Proc(IMSVidEVR*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get__CustomCompositorClass : Proc(IMSVidEVR*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    put__CustomCompositorClass : Proc(IMSVidEVR*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__CustomCompositor : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    put__CustomCompositor : Proc(IMSVidEVR*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmap : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    get__MixerBitmap : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmap : Proc(IMSVidEVR*, Void*, Win32cr::Foundation::HRESULT),
    put__MixerBitmap : Proc(IMSVidEVR*, Win32cr::Media::DirectShow::VMRALPHABITMAP*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapPositionRect : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    put_MixerBitmapPositionRect : Proc(IMSVidEVR*, Void*, Win32cr::Foundation::HRESULT),
    get_MixerBitmapOpacity : Proc(IMSVidEVR*, Int32*, Win32cr::Foundation::HRESULT),
    put_MixerBitmapOpacity : Proc(IMSVidEVR*, Int32, Win32cr::Foundation::HRESULT),
    setup_mixer_bitmap : Proc(IMSVidEVR*, Void*, Int32, Void*, Win32cr::Foundation::HRESULT),
    get_SourceSize : Proc(IMSVidEVR*, Win32cr::Media::DirectShow::SourceSizeList*, Win32cr::Foundation::HRESULT),
    put_SourceSize : Proc(IMSVidEVR*, Win32cr::Media::DirectShow::SourceSizeList, Win32cr::Foundation::HRESULT),
    get_OverScan : Proc(IMSVidEVR*, Int32*, Win32cr::Foundation::HRESULT),
    put_OverScan : Proc(IMSVidEVR*, Int32, Win32cr::Foundation::HRESULT),
    get_AvailableSourceRect : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    get_MaxVidRect : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    get_MinVidRect : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    get_ClippedSourceRect : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    put_ClippedSourceRect : Proc(IMSVidEVR*, Void*, Win32cr::Foundation::HRESULT),
    get_UsingOverlay : Proc(IMSVidEVR*, Int16*, Win32cr::Foundation::HRESULT),
    put_UsingOverlay : Proc(IMSVidEVR*, Int16, Win32cr::Foundation::HRESULT),
    capture : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    get_FramesPerSecond : Proc(IMSVidEVR*, Int32*, Win32cr::Foundation::HRESULT),
    get_DecimateInput : Proc(IMSVidEVR*, Int16*, Win32cr::Foundation::HRESULT),
    put_DecimateInput : Proc(IMSVidEVR*, Int16, Win32cr::Foundation::HRESULT),
    get_Presenter : Proc(IMSVidEVR*, Void**, Win32cr::Foundation::HRESULT),
    put_Presenter : Proc(IMSVidEVR*, Void*, Win32cr::Foundation::HRESULT),
    put_SuppressEffects : Proc(IMSVidEVR*, Int16, Win32cr::Foundation::HRESULT),
    get_SuppressEffects : Proc(IMSVidEVR*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("15e496ae-82a8-4cf9-a6b6-c561dc60398f")]
  record IMSVidEVR, lpVtbl : IMSVidEVRVtbl* do
    GUID = LibC::GUID.new(0x15e496ae_u32, 0x82a8_u16, 0x4cf9_u16, StaticArray[0xa6_u8, 0xb6_u8, 0xc5_u8, 0x61_u8, 0xdc_u8, 0x60_u8, 0x39_u8, 0x8f_u8])
    def query_interface(this : IMSVidEVR*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidEVR*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidEVR*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidEVR*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidEVR*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidEVR*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidEVR*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidEVR*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidEVR*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidEVR*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidEVR*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidEVR*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidEVR*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidEVR*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidEVR*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidEVR*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def get_CustomCompositorClass(this : IMSVidEVR*, compositor_clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CustomCompositorClass.call(this, compositor_clsid)
    end
    def put_CustomCompositorClass(this : IMSVidEVR*, compositor_clsid : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositorClass(this : IMSVidEVR*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositorClass.call(this, compositor_clsid)
    end
    def put__CustomCompositorClass(this : IMSVidEVR*, compositor_clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositorClass.call(this, compositor_clsid)
    end
    def get__CustomCompositor(this : IMSVidEVR*, compositor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__CustomCompositor.call(this, compositor)
    end
    def put__CustomCompositor(this : IMSVidEVR*, compositor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__CustomCompositor.call(this, compositor)
    end
    def get_MixerBitmap(this : IMSVidEVR*, mixer_picture_disp : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmap.call(this, mixer_picture_disp)
    end
    def get__MixerBitmap(this : IMSVidEVR*, mixer_picture : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__MixerBitmap.call(this, mixer_picture)
    end
    def put_MixerBitmap(this : IMSVidEVR*, mixer_picture_disp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmap.call(this, mixer_picture_disp)
    end
    def put__MixerBitmap(this : IMSVidEVR*, mixer_picture : Win32cr::Media::DirectShow::VMRALPHABITMAP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put__MixerBitmap.call(this, mixer_picture)
    end
    def get_MixerBitmapPositionRect(this : IMSVidEVR*, rDest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapPositionRect.call(this, rDest)
    end
    def put_MixerBitmapPositionRect(this : IMSVidEVR*, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapPositionRect.call(this, rDest)
    end
    def get_MixerBitmapOpacity(this : IMSVidEVR*, opacity : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MixerBitmapOpacity.call(this, opacity)
    end
    def put_MixerBitmapOpacity(this : IMSVidEVR*, opacity : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MixerBitmapOpacity.call(this, opacity)
    end
    def setup_mixer_bitmap(this : IMSVidEVR*, mixer_picture_disp : Void*, opacity : Int32, rDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setup_mixer_bitmap.call(this, mixer_picture_disp, opacity, rDest)
    end
    def get_SourceSize(this : IMSVidEVR*, current_size : Win32cr::Media::DirectShow::SourceSizeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SourceSize.call(this, current_size)
    end
    def put_SourceSize(this : IMSVidEVR*, new_size : Win32cr::Media::DirectShow::SourceSizeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SourceSize.call(this, new_size)
    end
    def get_OverScan(this : IMSVidEVR*, plPercent : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OverScan.call(this, plPercent)
    end
    def put_OverScan(this : IMSVidEVR*, lPercent : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OverScan.call(this, lPercent)
    end
    def get_AvailableSourceRect(this : IMSVidEVR*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AvailableSourceRect.call(this, pRect)
    end
    def get_MaxVidRect(this : IMSVidEVR*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaxVidRect.call(this, ppVidRect)
    end
    def get_MinVidRect(this : IMSVidEVR*, ppVidRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MinVidRect.call(this, ppVidRect)
    end
    def get_ClippedSourceRect(this : IMSVidEVR*, pRect : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClippedSourceRect.call(this, pRect)
    end
    def put_ClippedSourceRect(this : IMSVidEVR*, pRect : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClippedSourceRect.call(this, pRect)
    end
    def get_UsingOverlay(this : IMSVidEVR*, use_overlay_val : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsingOverlay.call(this, use_overlay_val)
    end
    def put_UsingOverlay(this : IMSVidEVR*, use_overlay_val : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UsingOverlay.call(this, use_overlay_val)
    end
    def capture(this : IMSVidEVR*, currentImage : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.capture.call(this, currentImage)
    end
    def get_FramesPerSecond(this : IMSVidEVR*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FramesPerSecond.call(this, pVal)
    end
    def get_DecimateInput(this : IMSVidEVR*, pDeci : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DecimateInput.call(this, pDeci)
    end
    def put_DecimateInput(this : IMSVidEVR*, pDeci : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DecimateInput.call(this, pDeci)
    end
    def get_Presenter(this : IMSVidEVR*, ppAllocPresent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Presenter.call(this, ppAllocPresent)
    end
    def put_Presenter(this : IMSVidEVR*, pAllocPresent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Presenter.call(this, pAllocPresent)
    end
    def put_SuppressEffects(this : IMSVidEVR*, bSuppress : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SuppressEffects.call(this, bSuppress)
    end
    def get_SuppressEffects(this : IMSVidEVR*, bSuppress : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SuppressEffects.call(this, bSuppress)
    end

  end

  @[Extern]
  record IMSVidEVREventVtbl,
    query_interface : Proc(IMSVidEVREvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidEVREvent*, UInt32),
    release : Proc(IMSVidEVREvent*, UInt32),
    get_type_info_count : Proc(IMSVidEVREvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidEVREvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidEVREvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidEVREvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidEVREvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    on_user_event : Proc(IMSVidEVREvent*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("349abb10-883c-4f22-8714-cecaeee45d62")]
  record IMSVidEVREvent, lpVtbl : IMSVidEVREventVtbl* do
    GUID = LibC::GUID.new(0x349abb10_u32, 0x883c_u16, 0x4f22_u16, StaticArray[0x87_u8, 0x14_u8, 0xce_u8, 0xca_u8, 0xee_u8, 0xe4_u8, 0x5d_u8, 0x62_u8])
    def query_interface(this : IMSVidEVREvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidEVREvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidEVREvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidEVREvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidEVREvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidEVREvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidEVREvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidEVREvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def on_user_event(this : IMSVidEVREvent*, lEventCode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_user_event.call(this, lEventCode)
    end

  end

  @[Extern]
  record IMSVidAudioRendererVtbl,
    query_interface : Proc(IMSVidAudioRenderer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidAudioRenderer*, UInt32),
    release : Proc(IMSVidAudioRenderer*, UInt32),
    get_type_info_count : Proc(IMSVidAudioRenderer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidAudioRenderer*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidAudioRenderer*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidAudioRenderer*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IMSVidAudioRenderer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Status : Proc(IMSVidAudioRenderer*, Int32*, Win32cr::Foundation::HRESULT),
    put_Power : Proc(IMSVidAudioRenderer*, Int16, Win32cr::Foundation::HRESULT),
    get_Power : Proc(IMSVidAudioRenderer*, Int16*, Win32cr::Foundation::HRESULT),
    get_Category : Proc(IMSVidAudioRenderer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ClassID : Proc(IMSVidAudioRenderer*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__Category : Proc(IMSVidAudioRenderer*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get__ClassID : Proc(IMSVidAudioRenderer*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_equal_device : Proc(IMSVidAudioRenderer*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    put_Volume : Proc(IMSVidAudioRenderer*, Int32, Win32cr::Foundation::HRESULT),
    get_Volume : Proc(IMSVidAudioRenderer*, Int32*, Win32cr::Foundation::HRESULT),
    put_Balance : Proc(IMSVidAudioRenderer*, Int32, Win32cr::Foundation::HRESULT),
    get_Balance : Proc(IMSVidAudioRenderer*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b0353f-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidAudioRenderer, lpVtbl : IMSVidAudioRendererVtbl* do
    GUID = LibC::GUID.new(0x37b0353f_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidAudioRenderer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidAudioRenderer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidAudioRenderer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidAudioRenderer*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidAudioRenderer*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidAudioRenderer*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidAudioRenderer*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IMSVidAudioRenderer*, name : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, name)
    end
    def get_Status(this : IMSVidAudioRenderer*, status : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Status.call(this, status)
    end
    def put_Power(this : IMSVidAudioRenderer*, power : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Power.call(this, power)
    end
    def get_Power(this : IMSVidAudioRenderer*, power : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Power.call(this, power)
    end
    def get_Category(this : IMSVidAudioRenderer*, guid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Category.call(this, guid)
    end
    def get_ClassID(this : IMSVidAudioRenderer*, clsid : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClassID.call(this, clsid)
    end
    def get__Category(this : IMSVidAudioRenderer*, guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__Category.call(this, guid)
    end
    def get__ClassID(this : IMSVidAudioRenderer*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__ClassID.call(this, clsid)
    end
    def is_equal_device(this : IMSVidAudioRenderer*, device : Void*, is_equal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal_device.call(this, device, is_equal)
    end
    def put_Volume(this : IMSVidAudioRenderer*, lVol : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Volume.call(this, lVol)
    end
    def get_Volume(this : IMSVidAudioRenderer*, lVol : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Volume.call(this, lVol)
    end
    def put_Balance(this : IMSVidAudioRenderer*, lBal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Balance.call(this, lBal)
    end
    def get_Balance(this : IMSVidAudioRenderer*, lBal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Balance.call(this, lBal)
    end

  end

  @[Extern]
  record IMSVidAudioRendererEventVtbl,
    query_interface : Proc(IMSVidAudioRendererEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidAudioRendererEvent*, UInt32),
    release : Proc(IMSVidAudioRendererEvent*, UInt32),
    get_type_info_count : Proc(IMSVidAudioRendererEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidAudioRendererEvent*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidAudioRendererEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidAudioRendererEvent*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidAudioRendererEvent*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("37b03541-a4c8-11d2-b634-00c04f79498e")]
  record IMSVidAudioRendererEvent, lpVtbl : IMSVidAudioRendererEventVtbl* do
    GUID = LibC::GUID.new(0x37b03541_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidAudioRendererEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidAudioRendererEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidAudioRendererEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidAudioRendererEvent*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidAudioRendererEvent*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidAudioRendererEvent*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidAudioRendererEvent*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidAudioRendererEvent*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end

  end

  @[Extern]
  record IMSVidAudioRendererEvent2Vtbl,
    query_interface : Proc(IMSVidAudioRendererEvent2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidAudioRendererEvent2*, UInt32),
    release : Proc(IMSVidAudioRendererEvent2*, UInt32),
    get_type_info_count : Proc(IMSVidAudioRendererEvent2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidAudioRendererEvent2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidAudioRendererEvent2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidAudioRendererEvent2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    state_change : Proc(IMSVidAudioRendererEvent2*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    av_dec_audio_dual_mono : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT),
    av_audio_sample_rate : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT),
    av_audio_channel_config : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT),
    av_audio_channel_count : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT),
    av_dec_common_mean_bit_rate : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT),
    avdd_surround_mode : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT),
    av_dec_common_input_format : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT),
    av_dec_common_output_format : Proc(IMSVidAudioRendererEvent2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e3f55729-353b-4c43-a028-50f79aa9a907")]
  record IMSVidAudioRendererEvent2, lpVtbl : IMSVidAudioRendererEvent2Vtbl* do
    GUID = LibC::GUID.new(0xe3f55729_u32, 0x353b_u16, 0x4c43_u16, StaticArray[0xa0_u8, 0x28_u8, 0x50_u8, 0xf7_u8, 0x9a_u8, 0xa9_u8, 0xa9_u8, 0x7_u8])
    def query_interface(this : IMSVidAudioRendererEvent2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidAudioRendererEvent2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidAudioRendererEvent2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidAudioRendererEvent2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidAudioRendererEvent2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidAudioRendererEvent2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidAudioRendererEvent2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def state_change(this : IMSVidAudioRendererEvent2*, lpd : Void*, oldState : Int32, newState : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.state_change.call(this, lpd, oldState, newState)
    end
    def av_dec_audio_dual_mono(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.av_dec_audio_dual_mono.call(this)
    end
    def av_audio_sample_rate(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.av_audio_sample_rate.call(this)
    end
    def av_audio_channel_config(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.av_audio_channel_config.call(this)
    end
    def av_audio_channel_count(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.av_audio_channel_count.call(this)
    end
    def av_dec_common_mean_bit_rate(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.av_dec_common_mean_bit_rate.call(this)
    end
    def avdd_surround_mode(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.avdd_surround_mode.call(this)
    end
    def av_dec_common_input_format(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.av_dec_common_input_format.call(this)
    end
    def av_dec_common_output_format(this : IMSVidAudioRendererEvent2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.av_dec_common_output_format.call(this)
    end

  end

  @[Extern]
  record IMSVidInputDevicesVtbl,
    query_interface : Proc(IMSVidInputDevices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidInputDevices*, UInt32),
    release : Proc(IMSVidInputDevices*, UInt32),
    get_type_info_count : Proc(IMSVidInputDevices*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidInputDevices*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidInputDevices*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidInputDevices*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMSVidInputDevices*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMSVidInputDevices*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMSVidInputDevices*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IMSVidInputDevices*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMSVidInputDevices*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5702cd1-9b79-11d3-b654-00c04f79498e")]
  record IMSVidInputDevices, lpVtbl : IMSVidInputDevicesVtbl* do
    GUID = LibC::GUID.new(0xc5702cd1_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidInputDevices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidInputDevices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidInputDevices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidInputDevices*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidInputDevices*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidInputDevices*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidInputDevices*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IMSVidInputDevices*, lCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, lCount)
    end
    def get__NewEnum(this : IMSVidInputDevices*, pD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pD)
    end
    def get_Item(this : IMSVidInputDevices*, v : Win32cr::System::Com::VARIANT, pDB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, v, pDB)
    end
    def add(this : IMSVidInputDevices*, pDB : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pDB)
    end
    def remove(this : IMSVidInputDevices*, v : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, v)
    end

  end

  @[Extern]
  record IMSVidOutputDevicesVtbl,
    query_interface : Proc(IMSVidOutputDevices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidOutputDevices*, UInt32),
    release : Proc(IMSVidOutputDevices*, UInt32),
    get_type_info_count : Proc(IMSVidOutputDevices*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidOutputDevices*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidOutputDevices*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidOutputDevices*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMSVidOutputDevices*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMSVidOutputDevices*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMSVidOutputDevices*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IMSVidOutputDevices*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMSVidOutputDevices*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5702cd2-9b79-11d3-b654-00c04f79498e")]
  record IMSVidOutputDevices, lpVtbl : IMSVidOutputDevicesVtbl* do
    GUID = LibC::GUID.new(0xc5702cd2_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidOutputDevices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidOutputDevices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidOutputDevices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidOutputDevices*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidOutputDevices*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidOutputDevices*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidOutputDevices*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IMSVidOutputDevices*, lCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, lCount)
    end
    def get__NewEnum(this : IMSVidOutputDevices*, pD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pD)
    end
    def get_Item(this : IMSVidOutputDevices*, v : Win32cr::System::Com::VARIANT, pDB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, v, pDB)
    end
    def add(this : IMSVidOutputDevices*, pDB : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pDB)
    end
    def remove(this : IMSVidOutputDevices*, v : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, v)
    end

  end

  @[Extern]
  record IMSVidVideoRendererDevicesVtbl,
    query_interface : Proc(IMSVidVideoRendererDevices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidVideoRendererDevices*, UInt32),
    release : Proc(IMSVidVideoRendererDevices*, UInt32),
    get_type_info_count : Proc(IMSVidVideoRendererDevices*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidVideoRendererDevices*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidVideoRendererDevices*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidVideoRendererDevices*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMSVidVideoRendererDevices*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMSVidVideoRendererDevices*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMSVidVideoRendererDevices*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IMSVidVideoRendererDevices*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMSVidVideoRendererDevices*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5702cd3-9b79-11d3-b654-00c04f79498e")]
  record IMSVidVideoRendererDevices, lpVtbl : IMSVidVideoRendererDevicesVtbl* do
    GUID = LibC::GUID.new(0xc5702cd3_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidVideoRendererDevices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidVideoRendererDevices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidVideoRendererDevices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidVideoRendererDevices*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidVideoRendererDevices*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidVideoRendererDevices*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidVideoRendererDevices*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IMSVidVideoRendererDevices*, lCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, lCount)
    end
    def get__NewEnum(this : IMSVidVideoRendererDevices*, pD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pD)
    end
    def get_Item(this : IMSVidVideoRendererDevices*, v : Win32cr::System::Com::VARIANT, pDB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, v, pDB)
    end
    def add(this : IMSVidVideoRendererDevices*, pDB : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pDB)
    end
    def remove(this : IMSVidVideoRendererDevices*, v : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, v)
    end

  end

  @[Extern]
  record IMSVidAudioRendererDevicesVtbl,
    query_interface : Proc(IMSVidAudioRendererDevices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidAudioRendererDevices*, UInt32),
    release : Proc(IMSVidAudioRendererDevices*, UInt32),
    get_type_info_count : Proc(IMSVidAudioRendererDevices*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidAudioRendererDevices*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidAudioRendererDevices*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidAudioRendererDevices*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMSVidAudioRendererDevices*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMSVidAudioRendererDevices*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMSVidAudioRendererDevices*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IMSVidAudioRendererDevices*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMSVidAudioRendererDevices*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5702cd4-9b79-11d3-b654-00c04f79498e")]
  record IMSVidAudioRendererDevices, lpVtbl : IMSVidAudioRendererDevicesVtbl* do
    GUID = LibC::GUID.new(0xc5702cd4_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidAudioRendererDevices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidAudioRendererDevices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidAudioRendererDevices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidAudioRendererDevices*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidAudioRendererDevices*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidAudioRendererDevices*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidAudioRendererDevices*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IMSVidAudioRendererDevices*, lCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, lCount)
    end
    def get__NewEnum(this : IMSVidAudioRendererDevices*, pD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pD)
    end
    def get_Item(this : IMSVidAudioRendererDevices*, v : Win32cr::System::Com::VARIANT, pDB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, v, pDB)
    end
    def add(this : IMSVidAudioRendererDevices*, pDB : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pDB)
    end
    def remove(this : IMSVidAudioRendererDevices*, v : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, v)
    end

  end

  @[Extern]
  record IMSVidFeaturesVtbl,
    query_interface : Proc(IMSVidFeatures*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidFeatures*, UInt32),
    release : Proc(IMSVidFeatures*, UInt32),
    get_type_info_count : Proc(IMSVidFeatures*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidFeatures*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidFeatures*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidFeatures*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IMSVidFeatures*, Int32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IMSVidFeatures*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IMSVidFeatures*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    add : Proc(IMSVidFeatures*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMSVidFeatures*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5702cd5-9b79-11d3-b654-00c04f79498e")]
  record IMSVidFeatures, lpVtbl : IMSVidFeaturesVtbl* do
    GUID = LibC::GUID.new(0xc5702cd5_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidFeatures*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidFeatures*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidFeatures*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidFeatures*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidFeatures*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidFeatures*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidFeatures*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Count(this : IMSVidFeatures*, lCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, lCount)
    end
    def get__NewEnum(this : IMSVidFeatures*, pD : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, pD)
    end
    def get_Item(this : IMSVidFeatures*, v : Win32cr::System::Com::VARIANT, pDB : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, v, pDB)
    end
    def add(this : IMSVidFeatures*, pDB : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, pDB)
    end
    def remove(this : IMSVidFeatures*, v : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, v)
    end

  end

  @[Extern]
  record IMSVidCtlVtbl,
    query_interface : Proc(IMSVidCtl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidCtl*, UInt32),
    release : Proc(IMSVidCtl*, UInt32),
    get_type_info_count : Proc(IMSVidCtl*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidCtl*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidCtl*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidCtl*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_AutoSize : Proc(IMSVidCtl*, Int16*, Win32cr::Foundation::HRESULT),
    put_AutoSize : Proc(IMSVidCtl*, Int16, Win32cr::Foundation::HRESULT),
    get_BackColor : Proc(IMSVidCtl*, UInt32*, Win32cr::Foundation::HRESULT),
    put_BackColor : Proc(IMSVidCtl*, UInt32, Win32cr::Foundation::HRESULT),
    get_Enabled : Proc(IMSVidCtl*, Int16*, Win32cr::Foundation::HRESULT),
    put_Enabled : Proc(IMSVidCtl*, Int16, Win32cr::Foundation::HRESULT),
    get_TabStop : Proc(IMSVidCtl*, Int16*, Win32cr::Foundation::HRESULT),
    put_TabStop : Proc(IMSVidCtl*, Int16, Win32cr::Foundation::HRESULT),
    get_Window : Proc(IMSVidCtl*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    refresh : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    get_DisplaySize : Proc(IMSVidCtl*, Win32cr::Media::DirectShow::DisplaySizeList*, Win32cr::Foundation::HRESULT),
    put_DisplaySize : Proc(IMSVidCtl*, Win32cr::Media::DirectShow::DisplaySizeList, Win32cr::Foundation::HRESULT),
    get_MaintainAspectRatio : Proc(IMSVidCtl*, Int16*, Win32cr::Foundation::HRESULT),
    put_MaintainAspectRatio : Proc(IMSVidCtl*, Int16, Win32cr::Foundation::HRESULT),
    get_ColorKey : Proc(IMSVidCtl*, UInt32*, Win32cr::Foundation::HRESULT),
    put_ColorKey : Proc(IMSVidCtl*, UInt32, Win32cr::Foundation::HRESULT),
    get_InputsAvailable : Proc(IMSVidCtl*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_OutputsAvailable : Proc(IMSVidCtl*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get__InputsAvailable : Proc(IMSVidCtl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get__OutputsAvailable : Proc(IMSVidCtl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_VideoRenderersAvailable : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    get_AudioRenderersAvailable : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    get_FeaturesAvailable : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    get_InputActive : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    put_InputActive : Proc(IMSVidCtl*, Void*, Win32cr::Foundation::HRESULT),
    get_OutputsActive : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    put_OutputsActive : Proc(IMSVidCtl*, Void*, Win32cr::Foundation::HRESULT),
    get_VideoRendererActive : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    put_VideoRendererActive : Proc(IMSVidCtl*, Void*, Win32cr::Foundation::HRESULT),
    get_AudioRendererActive : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    put_AudioRendererActive : Proc(IMSVidCtl*, Void*, Win32cr::Foundation::HRESULT),
    get_FeaturesActive : Proc(IMSVidCtl*, Void**, Win32cr::Foundation::HRESULT),
    put_FeaturesActive : Proc(IMSVidCtl*, Void*, Win32cr::Foundation::HRESULT),
    get_State : Proc(IMSVidCtl*, Win32cr::Media::DirectShow::MSVidCtlStateList*, Win32cr::Foundation::HRESULT),
    view : Proc(IMSVidCtl*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    build : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    run : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    decompose : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    disable_video : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    disable_audio : Proc(IMSVidCtl*, Win32cr::Foundation::HRESULT),
    view_next : Proc(IMSVidCtl*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b0edf162-910a-11d2-b632-00c04f79498e")]
  record IMSVidCtl, lpVtbl : IMSVidCtlVtbl* do
    GUID = LibC::GUID.new(0xb0edf162_u32, 0x910a_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidCtl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidCtl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidCtl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidCtl*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidCtl*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidCtl*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidCtl*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_AutoSize(this : IMSVidCtl*, pbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AutoSize.call(this, pbool)
    end
    def put_AutoSize(this : IMSVidCtl*, vbool : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AutoSize.call(this, vbool)
    end
    def get_BackColor(this : IMSVidCtl*, backcolor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BackColor.call(this, backcolor)
    end
    def put_BackColor(this : IMSVidCtl*, backcolor : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BackColor.call(this, backcolor)
    end
    def get_Enabled(this : IMSVidCtl*, pbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Enabled.call(this, pbool)
    end
    def put_Enabled(this : IMSVidCtl*, vbool : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Enabled.call(this, vbool)
    end
    def get_TabStop(this : IMSVidCtl*, pbool : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TabStop.call(this, pbool)
    end
    def put_TabStop(this : IMSVidCtl*, vbool : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_TabStop.call(this, vbool)
    end
    def get_Window(this : IMSVidCtl*, phwnd : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Window.call(this, phwnd)
    end
    def refresh(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh.call(this)
    end
    def get_DisplaySize(this : IMSVidCtl*, current_value : Win32cr::Media::DirectShow::DisplaySizeList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisplaySize.call(this, current_value)
    end
    def put_DisplaySize(this : IMSVidCtl*, new_value : Win32cr::Media::DirectShow::DisplaySizeList) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DisplaySize.call(this, new_value)
    end
    def get_MaintainAspectRatio(this : IMSVidCtl*, current_value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MaintainAspectRatio.call(this, current_value)
    end
    def put_MaintainAspectRatio(this : IMSVidCtl*, new_value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MaintainAspectRatio.call(this, new_value)
    end
    def get_ColorKey(this : IMSVidCtl*, current_value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ColorKey.call(this, current_value)
    end
    def put_ColorKey(this : IMSVidCtl*, new_value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ColorKey.call(this, new_value)
    end
    def get_InputsAvailable(this : IMSVidCtl*, category_guid : Win32cr::Foundation::BSTR, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InputsAvailable.call(this, category_guid, pVal)
    end
    def get_OutputsAvailable(this : IMSVidCtl*, category_guid : Win32cr::Foundation::BSTR, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OutputsAvailable.call(this, category_guid, pVal)
    end
    def get__InputsAvailable(this : IMSVidCtl*, category_guid : LibC::GUID*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__InputsAvailable.call(this, category_guid, pVal)
    end
    def get__OutputsAvailable(this : IMSVidCtl*, category_guid : LibC::GUID*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__OutputsAvailable.call(this, category_guid, pVal)
    end
    def get_VideoRenderersAvailable(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoRenderersAvailable.call(this, pVal)
    end
    def get_AudioRenderersAvailable(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioRenderersAvailable.call(this, pVal)
    end
    def get_FeaturesAvailable(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FeaturesAvailable.call(this, pVal)
    end
    def get_InputActive(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InputActive.call(this, pVal)
    end
    def put_InputActive(this : IMSVidCtl*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InputActive.call(this, pVal)
    end
    def get_OutputsActive(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_OutputsActive.call(this, pVal)
    end
    def put_OutputsActive(this : IMSVidCtl*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_OutputsActive.call(this, pVal)
    end
    def get_VideoRendererActive(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VideoRendererActive.call(this, pVal)
    end
    def put_VideoRendererActive(this : IMSVidCtl*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VideoRendererActive.call(this, pVal)
    end
    def get_AudioRendererActive(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioRendererActive.call(this, pVal)
    end
    def put_AudioRendererActive(this : IMSVidCtl*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AudioRendererActive.call(this, pVal)
    end
    def get_FeaturesActive(this : IMSVidCtl*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FeaturesActive.call(this, pVal)
    end
    def put_FeaturesActive(this : IMSVidCtl*, pVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FeaturesActive.call(this, pVal)
    end
    def get_State(this : IMSVidCtl*, lState : Win32cr::Media::DirectShow::MSVidCtlStateList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_State.call(this, lState)
    end
    def view(this : IMSVidCtl*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view.call(this, v)
    end
    def build(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.build.call(this)
    end
    def pause(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def run(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.run.call(this)
    end
    def stop(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def decompose(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decompose.call(this)
    end
    def disable_video(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disable_video.call(this)
    end
    def disable_audio(this : IMSVidCtl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disable_audio.call(this)
    end
    def view_next(this : IMSVidCtl*, v : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.view_next.call(this, v)
    end

  end

  @[Extern]
  record IMSEventBinderVtbl,
    query_interface : Proc(IMSEventBinder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSEventBinder*, UInt32),
    release : Proc(IMSEventBinder*, UInt32),
    get_type_info_count : Proc(IMSEventBinder*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSEventBinder*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSEventBinder*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSEventBinder*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    bind : Proc(IMSEventBinder*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Int32*, Win32cr::Foundation::HRESULT),
    unbind : Proc(IMSEventBinder*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c3a9f406-2222-436d-86d5-ba3229279efb")]
  record IMSEventBinder, lpVtbl : IMSEventBinderVtbl* do
    GUID = LibC::GUID.new(0xc3a9f406_u32, 0x2222_u16, 0x436d_u16, StaticArray[0x86_u8, 0xd5_u8, 0xba_u8, 0x32_u8, 0x29_u8, 0x27_u8, 0x9e_u8, 0xfb_u8])
    def query_interface(this : IMSEventBinder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSEventBinder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSEventBinder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSEventBinder*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSEventBinder*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSEventBinder*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSEventBinder*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def bind(this : IMSEventBinder*, pEventObject : Void*, event_name : Win32cr::Foundation::BSTR, event_handler : Win32cr::Foundation::BSTR, cancel_id : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind.call(this, pEventObject, event_name, event_handler, cancel_id)
    end
    def unbind(this : IMSEventBinder*, cancel_cookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unbind.call(this, cancel_cookie)
    end

  end

  @[Extern]
  record IMSVidCtlEvents_Vtbl,
    query_interface : Proc(IMSVidCtlEvents_*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMSVidCtlEvents_*, UInt32),
    release : Proc(IMSVidCtlEvents_*, UInt32),
    get_type_info_count : Proc(IMSVidCtlEvents_*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMSVidCtlEvents_*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMSVidCtlEvents_*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMSVidCtlEvents_*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b0edf164-910a-11d2-b632-00c04f79498e")]
  record IMSVidCtlEvents_, lpVtbl : IMSVidCtlEvents_Vtbl* do
    GUID = LibC::GUID.new(0xb0edf164_u32, 0x910a_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
    def query_interface(this : IMSVidCtlEvents_*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMSVidCtlEvents_*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMSVidCtlEvents_*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMSVidCtlEvents_*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMSVidCtlEvents_*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMSVidCtlEvents_*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMSVidCtlEvents_*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end

  end

  @[Extern]
  record IStreamBufferInitializeVtbl,
    query_interface : Proc(IStreamBufferInitialize*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferInitialize*, UInt32),
    release : Proc(IStreamBufferInitialize*, UInt32),
    set_hkey : Proc(IStreamBufferInitialize*, Win32cr::System::Registry::HKEY, Win32cr::Foundation::HRESULT),
    set_si_ds : Proc(IStreamBufferInitialize*, UInt32, Win32cr::Foundation::PSID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9ce50f2d-6ba7-40fb-a034-50b1a674ec78")]
  record IStreamBufferInitialize, lpVtbl : IStreamBufferInitializeVtbl* do
    GUID = LibC::GUID.new(0x9ce50f2d_u32, 0x6ba7_u16, 0x40fb_u16, StaticArray[0xa0_u8, 0x34_u8, 0x50_u8, 0xb1_u8, 0xa6_u8, 0x74_u8, 0xec_u8, 0x78_u8])
    def query_interface(this : IStreamBufferInitialize*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferInitialize*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferInitialize*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_hkey(this : IStreamBufferInitialize*, hkeyRoot : Win32cr::System::Registry::HKEY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_hkey.call(this, hkeyRoot)
    end
    def set_si_ds(this : IStreamBufferInitialize*, cSIDs : UInt32, ppSID : Win32cr::Foundation::PSID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_si_ds.call(this, cSIDs, ppSID)
    end

  end

  @[Extern]
  record IStreamBufferSinkVtbl,
    query_interface : Proc(IStreamBufferSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferSink*, UInt32),
    release : Proc(IStreamBufferSink*, UInt32),
    lock_profile : Proc(IStreamBufferSink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_recorder : Proc(IStreamBufferSink*, Win32cr::Foundation::PWSTR, UInt32, Void**, Win32cr::Foundation::HRESULT),
    is_profile_locked : Proc(IStreamBufferSink*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("afd1f242-7efd-45ee-ba4e-407a25c9a77a")]
  record IStreamBufferSink, lpVtbl : IStreamBufferSinkVtbl* do
    GUID = LibC::GUID.new(0xafd1f242_u32, 0x7efd_u16, 0x45ee_u16, StaticArray[0xba_u8, 0x4e_u8, 0x40_u8, 0x7a_u8, 0x25_u8, 0xc9_u8, 0xa7_u8, 0x7a_u8])
    def query_interface(this : IStreamBufferSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock_profile(this : IStreamBufferSink*, pszStreamBufferFilename : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_profile.call(this, pszStreamBufferFilename)
    end
    def create_recorder(this : IStreamBufferSink*, pszFilename : Win32cr::Foundation::PWSTR, dwRecordType : UInt32, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_recorder.call(this, pszFilename, dwRecordType, pRecordingIUnknown)
    end
    def is_profile_locked(this : IStreamBufferSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_profile_locked.call(this)
    end

  end

  @[Extern]
  record IStreamBufferSink2Vtbl,
    query_interface : Proc(IStreamBufferSink2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferSink2*, UInt32),
    release : Proc(IStreamBufferSink2*, UInt32),
    lock_profile : Proc(IStreamBufferSink2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_recorder : Proc(IStreamBufferSink2*, Win32cr::Foundation::PWSTR, UInt32, Void**, Win32cr::Foundation::HRESULT),
    is_profile_locked : Proc(IStreamBufferSink2*, Win32cr::Foundation::HRESULT),
    unlock_profile : Proc(IStreamBufferSink2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("db94a660-f4fb-4bfa-bcc6-fe159a4eea93")]
  record IStreamBufferSink2, lpVtbl : IStreamBufferSink2Vtbl* do
    GUID = LibC::GUID.new(0xdb94a660_u32, 0xf4fb_u16, 0x4bfa_u16, StaticArray[0xbc_u8, 0xc6_u8, 0xfe_u8, 0x15_u8, 0x9a_u8, 0x4e_u8, 0xea_u8, 0x93_u8])
    def query_interface(this : IStreamBufferSink2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferSink2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferSink2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock_profile(this : IStreamBufferSink2*, pszStreamBufferFilename : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_profile.call(this, pszStreamBufferFilename)
    end
    def create_recorder(this : IStreamBufferSink2*, pszFilename : Win32cr::Foundation::PWSTR, dwRecordType : UInt32, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_recorder.call(this, pszFilename, dwRecordType, pRecordingIUnknown)
    end
    def is_profile_locked(this : IStreamBufferSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_profile_locked.call(this)
    end
    def unlock_profile(this : IStreamBufferSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_profile.call(this)
    end

  end

  @[Extern]
  record IStreamBufferSink3Vtbl,
    query_interface : Proc(IStreamBufferSink3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferSink3*, UInt32),
    release : Proc(IStreamBufferSink3*, UInt32),
    lock_profile : Proc(IStreamBufferSink3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    create_recorder : Proc(IStreamBufferSink3*, Win32cr::Foundation::PWSTR, UInt32, Void**, Win32cr::Foundation::HRESULT),
    is_profile_locked : Proc(IStreamBufferSink3*, Win32cr::Foundation::HRESULT),
    unlock_profile : Proc(IStreamBufferSink3*, Win32cr::Foundation::HRESULT),
    set_available_filter : Proc(IStreamBufferSink3*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("974723f2-887a-4452-9366-2cff3057bc8f")]
  record IStreamBufferSink3, lpVtbl : IStreamBufferSink3Vtbl* do
    GUID = LibC::GUID.new(0x974723f2_u32, 0x887a_u16, 0x4452_u16, StaticArray[0x93_u8, 0x66_u8, 0x2c_u8, 0xff_u8, 0x30_u8, 0x57_u8, 0xbc_u8, 0x8f_u8])
    def query_interface(this : IStreamBufferSink3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferSink3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferSink3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock_profile(this : IStreamBufferSink3*, pszStreamBufferFilename : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_profile.call(this, pszStreamBufferFilename)
    end
    def create_recorder(this : IStreamBufferSink3*, pszFilename : Win32cr::Foundation::PWSTR, dwRecordType : UInt32, pRecordingIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_recorder.call(this, pszFilename, dwRecordType, pRecordingIUnknown)
    end
    def is_profile_locked(this : IStreamBufferSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_profile_locked.call(this)
    end
    def unlock_profile(this : IStreamBufferSink3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_profile.call(this)
    end
    def set_available_filter(this : IStreamBufferSink3*, prtMin : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_available_filter.call(this, prtMin)
    end

  end

  @[Extern]
  record IStreamBufferSourceVtbl,
    query_interface : Proc(IStreamBufferSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferSource*, UInt32),
    release : Proc(IStreamBufferSource*, UInt32),
    set_stream_sink : Proc(IStreamBufferSource*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c5bd776-6ced-4f44-8164-5eab0e98db12")]
  record IStreamBufferSource, lpVtbl : IStreamBufferSourceVtbl* do
    GUID = LibC::GUID.new(0x1c5bd776_u32, 0x6ced_u16, 0x4f44_u16, StaticArray[0x81_u8, 0x64_u8, 0x5e_u8, 0xab_u8, 0xe_u8, 0x98_u8, 0xdb_u8, 0x12_u8])
    def query_interface(this : IStreamBufferSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_stream_sink(this : IStreamBufferSource*, pIStreamBufferSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_sink.call(this, pIStreamBufferSink)
    end

  end

  @[Extern]
  record IStreamBufferRecordControlVtbl,
    query_interface : Proc(IStreamBufferRecordControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferRecordControl*, UInt32),
    release : Proc(IStreamBufferRecordControl*, UInt32),
    start : Proc(IStreamBufferRecordControl*, Int64*, Win32cr::Foundation::HRESULT),
    stop : Proc(IStreamBufferRecordControl*, Int64, Win32cr::Foundation::HRESULT),
    get_recording_status : Proc(IStreamBufferRecordControl*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ba9b6c99-f3c7-4ff2-92db-cfdd4851bf31")]
  record IStreamBufferRecordControl, lpVtbl : IStreamBufferRecordControlVtbl* do
    GUID = LibC::GUID.new(0xba9b6c99_u32, 0xf3c7_u16, 0x4ff2_u16, StaticArray[0x92_u8, 0xdb_u8, 0xcf_u8, 0xdd_u8, 0x48_u8, 0x51_u8, 0xbf_u8, 0x31_u8])
    def query_interface(this : IStreamBufferRecordControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferRecordControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferRecordControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start(this : IStreamBufferRecordControl*, prtStart : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, prtStart)
    end
    def stop(this : IStreamBufferRecordControl*, rtStop : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this, rtStop)
    end
    def get_recording_status(this : IStreamBufferRecordControl*, phResult : Win32cr::Foundation::HRESULT*, pbStarted : Win32cr::Foundation::BOOL*, pbStopped : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_recording_status.call(this, phResult, pbStarted, pbStopped)
    end

  end

  @[Extern]
  record IStreamBufferRecCompVtbl,
    query_interface : Proc(IStreamBufferRecComp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferRecComp*, UInt32),
    release : Proc(IStreamBufferRecComp*, UInt32),
    initialize__ : Proc(IStreamBufferRecComp*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append : Proc(IStreamBufferRecComp*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    append_ex : Proc(IStreamBufferRecComp*, Win32cr::Foundation::PWSTR, Int64, Int64, Win32cr::Foundation::HRESULT),
    get_current_length : Proc(IStreamBufferRecComp*, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(IStreamBufferRecComp*, Win32cr::Foundation::HRESULT),
    cancel : Proc(IStreamBufferRecComp*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9e259a9b-8815-42ae-b09f-221970b154fd")]
  record IStreamBufferRecComp, lpVtbl : IStreamBufferRecCompVtbl* do
    GUID = LibC::GUID.new(0x9e259a9b_u32, 0x8815_u16, 0x42ae_u16, StaticArray[0xb0_u8, 0x9f_u8, 0x22_u8, 0x19_u8, 0x70_u8, 0xb1_u8, 0x54_u8, 0xfd_u8])
    def query_interface(this : IStreamBufferRecComp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferRecComp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferRecComp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IStreamBufferRecComp*, pszTargetFilename : Win32cr::Foundation::PWSTR, pszSBRecProfileRef : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pszTargetFilename, pszSBRecProfileRef)
    end
    def append(this : IStreamBufferRecComp*, pszSBRecording : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append.call(this, pszSBRecording)
    end
    def append_ex(this : IStreamBufferRecComp*, pszSBRecording : Win32cr::Foundation::PWSTR, rtStart : Int64, rtStop : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_ex.call(this, pszSBRecording, rtStart, rtStop)
    end
    def get_current_length(this : IStreamBufferRecComp*, pcSeconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_length.call(this, pcSeconds)
    end
    def close(this : IStreamBufferRecComp*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def cancel(this : IStreamBufferRecComp*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end

  end

  @[Extern]
  record IStreamBufferRecordingAttributeVtbl,
    query_interface : Proc(IStreamBufferRecordingAttribute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferRecordingAttribute*, UInt32),
    release : Proc(IStreamBufferRecordingAttribute*, UInt32),
    set_attribute : Proc(IStreamBufferRecordingAttribute*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Media::DirectShow::STREAMBUFFER_ATTR_DATATYPE, UInt8*, UInt16, Win32cr::Foundation::HRESULT),
    get_attribute_count : Proc(IStreamBufferRecordingAttribute*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_attribute_by_name : Proc(IStreamBufferRecordingAttribute*, Win32cr::Foundation::PWSTR, UInt32*, Win32cr::Media::DirectShow::STREAMBUFFER_ATTR_DATATYPE*, UInt8*, UInt16*, Win32cr::Foundation::HRESULT),
    get_attribute_by_index : Proc(IStreamBufferRecordingAttribute*, UInt16, UInt32*, Win32cr::Foundation::PWSTR, UInt16*, Win32cr::Media::DirectShow::STREAMBUFFER_ATTR_DATATYPE*, UInt8*, UInt16*, Win32cr::Foundation::HRESULT),
    enum_attributes : Proc(IStreamBufferRecordingAttribute*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("16ca4e03-fe69-4705-bd41-5b7dfc0c95f3")]
  record IStreamBufferRecordingAttribute, lpVtbl : IStreamBufferRecordingAttributeVtbl* do
    GUID = LibC::GUID.new(0x16ca4e03_u32, 0xfe69_u16, 0x4705_u16, StaticArray[0xbd_u8, 0x41_u8, 0x5b_u8, 0x7d_u8, 0xfc_u8, 0xc_u8, 0x95_u8, 0xf3_u8])
    def query_interface(this : IStreamBufferRecordingAttribute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferRecordingAttribute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferRecordingAttribute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_attribute(this : IStreamBufferRecordingAttribute*, ulReserved : UInt32, pszAttributeName : Win32cr::Foundation::PWSTR, stream_buffer_attribute_type : Win32cr::Media::DirectShow::STREAMBUFFER_ATTR_DATATYPE, pbAttribute : UInt8*, cbAttributeLength : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_attribute.call(this, ulReserved, pszAttributeName, stream_buffer_attribute_type, pbAttribute, cbAttributeLength)
    end
    def get_attribute_count(this : IStreamBufferRecordingAttribute*, ulReserved : UInt32, pcAttributes : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_count.call(this, ulReserved, pcAttributes)
    end
    def get_attribute_by_name(this : IStreamBufferRecordingAttribute*, pszAttributeName : Win32cr::Foundation::PWSTR, pulReserved : UInt32*, pStreamBufferAttributeType : Win32cr::Media::DirectShow::STREAMBUFFER_ATTR_DATATYPE*, pbAttribute : UInt8*, pcbLength : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_by_name.call(this, pszAttributeName, pulReserved, pStreamBufferAttributeType, pbAttribute, pcbLength)
    end
    def get_attribute_by_index(this : IStreamBufferRecordingAttribute*, wIndex : UInt16, pulReserved : UInt32*, pszAttributeName : Win32cr::Foundation::PWSTR, pcchNameLength : UInt16*, pStreamBufferAttributeType : Win32cr::Media::DirectShow::STREAMBUFFER_ATTR_DATATYPE*, pbAttribute : UInt8*, pcbLength : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_by_index.call(this, wIndex, pulReserved, pszAttributeName, pcchNameLength, pStreamBufferAttributeType, pbAttribute, pcbLength)
    end
    def enum_attributes(this : IStreamBufferRecordingAttribute*, ppIEnumStreamBufferAttrib : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_attributes.call(this, ppIEnumStreamBufferAttrib)
    end

  end

  @[Extern]
  record IEnumStreamBufferRecordingAttribVtbl,
    query_interface : Proc(IEnumStreamBufferRecordingAttrib*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumStreamBufferRecordingAttrib*, UInt32),
    release : Proc(IEnumStreamBufferRecordingAttrib*, UInt32),
    next__ : Proc(IEnumStreamBufferRecordingAttrib*, UInt32, Win32cr::Media::DirectShow::STREAMBUFFER_ATTRIBUTE*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumStreamBufferRecordingAttrib*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumStreamBufferRecordingAttrib*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumStreamBufferRecordingAttrib*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c18a9162-1e82-4142-8c73-5690fa62fe33")]
  record IEnumStreamBufferRecordingAttrib, lpVtbl : IEnumStreamBufferRecordingAttribVtbl* do
    GUID = LibC::GUID.new(0xc18a9162_u32, 0x1e82_u16, 0x4142_u16, StaticArray[0x8c_u8, 0x73_u8, 0x56_u8, 0x90_u8, 0xfa_u8, 0x62_u8, 0xfe_u8, 0x33_u8])
    def query_interface(this : IEnumStreamBufferRecordingAttrib*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumStreamBufferRecordingAttrib*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumStreamBufferRecordingAttrib*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumStreamBufferRecordingAttrib*, cRequest : UInt32, pStreamBufferAttribute : Win32cr::Media::DirectShow::STREAMBUFFER_ATTRIBUTE*, pcReceived : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cRequest, pStreamBufferAttribute, pcReceived)
    end
    def skip(this : IEnumStreamBufferRecordingAttrib*, cRecords : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cRecords)
    end
    def reset(this : IEnumStreamBufferRecordingAttrib*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumStreamBufferRecordingAttrib*, ppIEnumStreamBufferAttrib : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIEnumStreamBufferAttrib)
    end

  end

  @[Extern]
  record IStreamBufferConfigureVtbl,
    query_interface : Proc(IStreamBufferConfigure*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferConfigure*, UInt32),
    release : Proc(IStreamBufferConfigure*, UInt32),
    set_directory : Proc(IStreamBufferConfigure*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_directory : Proc(IStreamBufferConfigure*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_backing_file_count : Proc(IStreamBufferConfigure*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_backing_file_count : Proc(IStreamBufferConfigure*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_backing_file_duration : Proc(IStreamBufferConfigure*, UInt32, Win32cr::Foundation::HRESULT),
    get_backing_file_duration : Proc(IStreamBufferConfigure*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ce14dfae-4098-4af7-bbf7-d6511f835414")]
  record IStreamBufferConfigure, lpVtbl : IStreamBufferConfigureVtbl* do
    GUID = LibC::GUID.new(0xce14dfae_u32, 0x4098_u16, 0x4af7_u16, StaticArray[0xbb_u8, 0xf7_u8, 0xd6_u8, 0x51_u8, 0x1f_u8, 0x83_u8, 0x54_u8, 0x14_u8])
    def query_interface(this : IStreamBufferConfigure*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferConfigure*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferConfigure*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_directory(this : IStreamBufferConfigure*, pszDirectoryName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_directory.call(this, pszDirectoryName)
    end
    def get_directory(this : IStreamBufferConfigure*, ppszDirectoryName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_directory.call(this, ppszDirectoryName)
    end
    def set_backing_file_count(this : IStreamBufferConfigure*, dwMin : UInt32, dwMax : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_backing_file_count.call(this, dwMin, dwMax)
    end
    def get_backing_file_count(this : IStreamBufferConfigure*, pdwMin : UInt32*, pdwMax : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_file_count.call(this, pdwMin, pdwMax)
    end
    def set_backing_file_duration(this : IStreamBufferConfigure*, dwSeconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_backing_file_duration.call(this, dwSeconds)
    end
    def get_backing_file_duration(this : IStreamBufferConfigure*, pdwSeconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_file_duration.call(this, pdwSeconds)
    end

  end

  @[Extern]
  record IStreamBufferConfigure2Vtbl,
    query_interface : Proc(IStreamBufferConfigure2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferConfigure2*, UInt32),
    release : Proc(IStreamBufferConfigure2*, UInt32),
    set_directory : Proc(IStreamBufferConfigure2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_directory : Proc(IStreamBufferConfigure2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_backing_file_count : Proc(IStreamBufferConfigure2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_backing_file_count : Proc(IStreamBufferConfigure2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_backing_file_duration : Proc(IStreamBufferConfigure2*, UInt32, Win32cr::Foundation::HRESULT),
    get_backing_file_duration : Proc(IStreamBufferConfigure2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_multiplexed_packet_size : Proc(IStreamBufferConfigure2*, UInt32, Win32cr::Foundation::HRESULT),
    get_multiplexed_packet_size : Proc(IStreamBufferConfigure2*, UInt32*, Win32cr::Foundation::HRESULT),
    set_ff_transition_rates : Proc(IStreamBufferConfigure2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_ff_transition_rates : Proc(IStreamBufferConfigure2*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("53e037bf-3992-4282-ae34-2487b4dae06b")]
  record IStreamBufferConfigure2, lpVtbl : IStreamBufferConfigure2Vtbl* do
    GUID = LibC::GUID.new(0x53e037bf_u32, 0x3992_u16, 0x4282_u16, StaticArray[0xae_u8, 0x34_u8, 0x24_u8, 0x87_u8, 0xb4_u8, 0xda_u8, 0xe0_u8, 0x6b_u8])
    def query_interface(this : IStreamBufferConfigure2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferConfigure2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferConfigure2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_directory(this : IStreamBufferConfigure2*, pszDirectoryName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_directory.call(this, pszDirectoryName)
    end
    def get_directory(this : IStreamBufferConfigure2*, ppszDirectoryName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_directory.call(this, ppszDirectoryName)
    end
    def set_backing_file_count(this : IStreamBufferConfigure2*, dwMin : UInt32, dwMax : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_backing_file_count.call(this, dwMin, dwMax)
    end
    def get_backing_file_count(this : IStreamBufferConfigure2*, pdwMin : UInt32*, pdwMax : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_file_count.call(this, pdwMin, pdwMax)
    end
    def set_backing_file_duration(this : IStreamBufferConfigure2*, dwSeconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_backing_file_duration.call(this, dwSeconds)
    end
    def get_backing_file_duration(this : IStreamBufferConfigure2*, pdwSeconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_file_duration.call(this, pdwSeconds)
    end
    def set_multiplexed_packet_size(this : IStreamBufferConfigure2*, cbBytesPerPacket : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_multiplexed_packet_size.call(this, cbBytesPerPacket)
    end
    def get_multiplexed_packet_size(this : IStreamBufferConfigure2*, pcbBytesPerPacket : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multiplexed_packet_size.call(this, pcbBytesPerPacket)
    end
    def set_ff_transition_rates(this : IStreamBufferConfigure2*, dwMaxFullFrameRate : UInt32, dwMaxNonSkippingRate : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ff_transition_rates.call(this, dwMaxFullFrameRate, dwMaxNonSkippingRate)
    end
    def get_ff_transition_rates(this : IStreamBufferConfigure2*, pdwMaxFullFrameRate : UInt32*, pdwMaxNonSkippingRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ff_transition_rates.call(this, pdwMaxFullFrameRate, pdwMaxNonSkippingRate)
    end

  end

  @[Extern]
  record IStreamBufferConfigure3Vtbl,
    query_interface : Proc(IStreamBufferConfigure3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferConfigure3*, UInt32),
    release : Proc(IStreamBufferConfigure3*, UInt32),
    set_directory : Proc(IStreamBufferConfigure3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_directory : Proc(IStreamBufferConfigure3*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_backing_file_count : Proc(IStreamBufferConfigure3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_backing_file_count : Proc(IStreamBufferConfigure3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_backing_file_duration : Proc(IStreamBufferConfigure3*, UInt32, Win32cr::Foundation::HRESULT),
    get_backing_file_duration : Proc(IStreamBufferConfigure3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_multiplexed_packet_size : Proc(IStreamBufferConfigure3*, UInt32, Win32cr::Foundation::HRESULT),
    get_multiplexed_packet_size : Proc(IStreamBufferConfigure3*, UInt32*, Win32cr::Foundation::HRESULT),
    set_ff_transition_rates : Proc(IStreamBufferConfigure3*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_ff_transition_rates : Proc(IStreamBufferConfigure3*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    set_start_rec_config : Proc(IStreamBufferConfigure3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_start_rec_config : Proc(IStreamBufferConfigure3*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_namespace : Proc(IStreamBufferConfigure3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_namespace : Proc(IStreamBufferConfigure3*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7e2d2a1e-7192-4bd7-80c1-061fd1d10402")]
  record IStreamBufferConfigure3, lpVtbl : IStreamBufferConfigure3Vtbl* do
    GUID = LibC::GUID.new(0x7e2d2a1e_u32, 0x7192_u16, 0x4bd7_u16, StaticArray[0x80_u8, 0xc1_u8, 0x6_u8, 0x1f_u8, 0xd1_u8, 0xd1_u8, 0x4_u8, 0x2_u8])
    def query_interface(this : IStreamBufferConfigure3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferConfigure3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferConfigure3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_directory(this : IStreamBufferConfigure3*, pszDirectoryName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_directory.call(this, pszDirectoryName)
    end
    def get_directory(this : IStreamBufferConfigure3*, ppszDirectoryName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_directory.call(this, ppszDirectoryName)
    end
    def set_backing_file_count(this : IStreamBufferConfigure3*, dwMin : UInt32, dwMax : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_backing_file_count.call(this, dwMin, dwMax)
    end
    def get_backing_file_count(this : IStreamBufferConfigure3*, pdwMin : UInt32*, pdwMax : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_file_count.call(this, pdwMin, pdwMax)
    end
    def set_backing_file_duration(this : IStreamBufferConfigure3*, dwSeconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_backing_file_duration.call(this, dwSeconds)
    end
    def get_backing_file_duration(this : IStreamBufferConfigure3*, pdwSeconds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_file_duration.call(this, pdwSeconds)
    end
    def set_multiplexed_packet_size(this : IStreamBufferConfigure3*, cbBytesPerPacket : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_multiplexed_packet_size.call(this, cbBytesPerPacket)
    end
    def get_multiplexed_packet_size(this : IStreamBufferConfigure3*, pcbBytesPerPacket : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multiplexed_packet_size.call(this, pcbBytesPerPacket)
    end
    def set_ff_transition_rates(this : IStreamBufferConfigure3*, dwMaxFullFrameRate : UInt32, dwMaxNonSkippingRate : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ff_transition_rates.call(this, dwMaxFullFrameRate, dwMaxNonSkippingRate)
    end
    def get_ff_transition_rates(this : IStreamBufferConfigure3*, pdwMaxFullFrameRate : UInt32*, pdwMaxNonSkippingRate : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ff_transition_rates.call(this, pdwMaxFullFrameRate, pdwMaxNonSkippingRate)
    end
    def set_start_rec_config(this : IStreamBufferConfigure3*, fStartStopsCur : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_start_rec_config.call(this, fStartStopsCur)
    end
    def get_start_rec_config(this : IStreamBufferConfigure3*, pfStartStopsCur : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_start_rec_config.call(this, pfStartStopsCur)
    end
    def set_namespace(this : IStreamBufferConfigure3*, pszNamespace : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_namespace.call(this, pszNamespace)
    end
    def get_namespace(this : IStreamBufferConfigure3*, ppszNamespace : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_namespace.call(this, ppszNamespace)
    end

  end

  @[Extern]
  record IStreamBufferMediaSeekingVtbl,
    query_interface : Proc(IStreamBufferMediaSeeking*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferMediaSeeking*, UInt32),
    release : Proc(IStreamBufferMediaSeeking*, UInt32),
    get_capabilities : Proc(IStreamBufferMediaSeeking*, UInt32*, Win32cr::Foundation::HRESULT),
    check_capabilities : Proc(IStreamBufferMediaSeeking*, UInt32*, Win32cr::Foundation::HRESULT),
    is_format_supported : Proc(IStreamBufferMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    query_preferred_format : Proc(IStreamBufferMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_time_format : Proc(IStreamBufferMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_using_time_format : Proc(IStreamBufferMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_time_format : Proc(IStreamBufferMediaSeeking*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IStreamBufferMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT),
    get_stop_position : Proc(IStreamBufferMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT),
    get_current_position : Proc(IStreamBufferMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT),
    convert_time_format : Proc(IStreamBufferMediaSeeking*, Int64*, LibC::GUID*, Int64, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_positions : Proc(IStreamBufferMediaSeeking*, Int64*, UInt32, Int64*, UInt32, Win32cr::Foundation::HRESULT),
    get_positions : Proc(IStreamBufferMediaSeeking*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_available : Proc(IStreamBufferMediaSeeking*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_rate : Proc(IStreamBufferMediaSeeking*, Float64, Win32cr::Foundation::HRESULT),
    get_rate : Proc(IStreamBufferMediaSeeking*, Float64*, Win32cr::Foundation::HRESULT),
    get_preroll : Proc(IStreamBufferMediaSeeking*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f61f5c26-863d-4afa-b0ba-2f81dc978596")]
  record IStreamBufferMediaSeeking, lpVtbl : IStreamBufferMediaSeekingVtbl* do
    GUID = LibC::GUID.new(0xf61f5c26_u32, 0x863d_u16, 0x4afa_u16, StaticArray[0xb0_u8, 0xba_u8, 0x2f_u8, 0x81_u8, 0xdc_u8, 0x97_u8, 0x85_u8, 0x96_u8])
    def query_interface(this : IStreamBufferMediaSeeking*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferMediaSeeking*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferMediaSeeking*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capabilities(this : IStreamBufferMediaSeeking*, pCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities.call(this, pCapabilities)
    end
    def check_capabilities(this : IStreamBufferMediaSeeking*, pCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_capabilities.call(this, pCapabilities)
    end
    def is_format_supported(this : IStreamBufferMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_format_supported.call(this, pFormat)
    end
    def query_preferred_format(this : IStreamBufferMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_preferred_format.call(this, pFormat)
    end
    def get_time_format(this : IStreamBufferMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_format.call(this, pFormat)
    end
    def is_using_time_format(this : IStreamBufferMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_time_format.call(this, pFormat)
    end
    def set_time_format(this : IStreamBufferMediaSeeking*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time_format.call(this, pFormat)
    end
    def get_duration(this : IStreamBufferMediaSeeking*, pDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def get_stop_position(this : IStreamBufferMediaSeeking*, pStop : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stop_position.call(this, pStop)
    end
    def get_current_position(this : IStreamBufferMediaSeeking*, pCurrent : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_position.call(this, pCurrent)
    end
    def convert_time_format(this : IStreamBufferMediaSeeking*, pTarget : Int64*, pTargetFormat : LibC::GUID*, source : Int64, pSourceFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_time_format.call(this, pTarget, pTargetFormat, source, pSourceFormat)
    end
    def set_positions(this : IStreamBufferMediaSeeking*, pCurrent : Int64*, dwCurrentFlags : UInt32, pStop : Int64*, dwStopFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_positions.call(this, pCurrent, dwCurrentFlags, pStop, dwStopFlags)
    end
    def get_positions(this : IStreamBufferMediaSeeking*, pCurrent : Int64*, pStop : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_positions.call(this, pCurrent, pStop)
    end
    def get_available(this : IStreamBufferMediaSeeking*, pEarliest : Int64*, pLatest : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available.call(this, pEarliest, pLatest)
    end
    def set_rate(this : IStreamBufferMediaSeeking*, dRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rate.call(this, dRate)
    end
    def get_rate(this : IStreamBufferMediaSeeking*, pdRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rate.call(this, pdRate)
    end
    def get_preroll(this : IStreamBufferMediaSeeking*, pllPreroll : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preroll.call(this, pllPreroll)
    end

  end

  @[Extern]
  record IStreamBufferMediaSeeking2Vtbl,
    query_interface : Proc(IStreamBufferMediaSeeking2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferMediaSeeking2*, UInt32),
    release : Proc(IStreamBufferMediaSeeking2*, UInt32),
    get_capabilities : Proc(IStreamBufferMediaSeeking2*, UInt32*, Win32cr::Foundation::HRESULT),
    check_capabilities : Proc(IStreamBufferMediaSeeking2*, UInt32*, Win32cr::Foundation::HRESULT),
    is_format_supported : Proc(IStreamBufferMediaSeeking2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    query_preferred_format : Proc(IStreamBufferMediaSeeking2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_time_format : Proc(IStreamBufferMediaSeeking2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_using_time_format : Proc(IStreamBufferMediaSeeking2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_time_format : Proc(IStreamBufferMediaSeeking2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IStreamBufferMediaSeeking2*, Int64*, Win32cr::Foundation::HRESULT),
    get_stop_position : Proc(IStreamBufferMediaSeeking2*, Int64*, Win32cr::Foundation::HRESULT),
    get_current_position : Proc(IStreamBufferMediaSeeking2*, Int64*, Win32cr::Foundation::HRESULT),
    convert_time_format : Proc(IStreamBufferMediaSeeking2*, Int64*, LibC::GUID*, Int64, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_positions : Proc(IStreamBufferMediaSeeking2*, Int64*, UInt32, Int64*, UInt32, Win32cr::Foundation::HRESULT),
    get_positions : Proc(IStreamBufferMediaSeeking2*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_available : Proc(IStreamBufferMediaSeeking2*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_rate : Proc(IStreamBufferMediaSeeking2*, Float64, Win32cr::Foundation::HRESULT),
    get_rate : Proc(IStreamBufferMediaSeeking2*, Float64*, Win32cr::Foundation::HRESULT),
    get_preroll : Proc(IStreamBufferMediaSeeking2*, Int64*, Win32cr::Foundation::HRESULT),
    set_rate_ex : Proc(IStreamBufferMediaSeeking2*, Float64, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3a439ab0-155f-470a-86a6-9ea54afd6eaf")]
  record IStreamBufferMediaSeeking2, lpVtbl : IStreamBufferMediaSeeking2Vtbl* do
    GUID = LibC::GUID.new(0x3a439ab0_u32, 0x155f_u16, 0x470a_u16, StaticArray[0x86_u8, 0xa6_u8, 0x9e_u8, 0xa5_u8, 0x4a_u8, 0xfd_u8, 0x6e_u8, 0xaf_u8])
    def query_interface(this : IStreamBufferMediaSeeking2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferMediaSeeking2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferMediaSeeking2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capabilities(this : IStreamBufferMediaSeeking2*, pCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities.call(this, pCapabilities)
    end
    def check_capabilities(this : IStreamBufferMediaSeeking2*, pCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_capabilities.call(this, pCapabilities)
    end
    def is_format_supported(this : IStreamBufferMediaSeeking2*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_format_supported.call(this, pFormat)
    end
    def query_preferred_format(this : IStreamBufferMediaSeeking2*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_preferred_format.call(this, pFormat)
    end
    def get_time_format(this : IStreamBufferMediaSeeking2*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_format.call(this, pFormat)
    end
    def is_using_time_format(this : IStreamBufferMediaSeeking2*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_using_time_format.call(this, pFormat)
    end
    def set_time_format(this : IStreamBufferMediaSeeking2*, pFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time_format.call(this, pFormat)
    end
    def get_duration(this : IStreamBufferMediaSeeking2*, pDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pDuration)
    end
    def get_stop_position(this : IStreamBufferMediaSeeking2*, pStop : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stop_position.call(this, pStop)
    end
    def get_current_position(this : IStreamBufferMediaSeeking2*, pCurrent : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_position.call(this, pCurrent)
    end
    def convert_time_format(this : IStreamBufferMediaSeeking2*, pTarget : Int64*, pTargetFormat : LibC::GUID*, source : Int64, pSourceFormat : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_time_format.call(this, pTarget, pTargetFormat, source, pSourceFormat)
    end
    def set_positions(this : IStreamBufferMediaSeeking2*, pCurrent : Int64*, dwCurrentFlags : UInt32, pStop : Int64*, dwStopFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_positions.call(this, pCurrent, dwCurrentFlags, pStop, dwStopFlags)
    end
    def get_positions(this : IStreamBufferMediaSeeking2*, pCurrent : Int64*, pStop : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_positions.call(this, pCurrent, pStop)
    end
    def get_available(this : IStreamBufferMediaSeeking2*, pEarliest : Int64*, pLatest : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available.call(this, pEarliest, pLatest)
    end
    def set_rate(this : IStreamBufferMediaSeeking2*, dRate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rate.call(this, dRate)
    end
    def get_rate(this : IStreamBufferMediaSeeking2*, pdRate : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rate.call(this, pdRate)
    end
    def get_preroll(this : IStreamBufferMediaSeeking2*, pllPreroll : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preroll.call(this, pllPreroll)
    end
    def set_rate_ex(this : IStreamBufferMediaSeeking2*, dRate : Float64, dwFramesPerSec : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rate_ex.call(this, dRate, dwFramesPerSec)
    end

  end

  @[Extern]
  record IStreamBufferDataCountersVtbl,
    query_interface : Proc(IStreamBufferDataCounters*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamBufferDataCounters*, UInt32),
    release : Proc(IStreamBufferDataCounters*, UInt32),
    get_data : Proc(IStreamBufferDataCounters*, Win32cr::Media::DirectShow::SBE_PIN_DATA*, Win32cr::Foundation::HRESULT),
    reset_data : Proc(IStreamBufferDataCounters*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9d2a2563-31ab-402e-9a6b-adb903489440")]
  record IStreamBufferDataCounters, lpVtbl : IStreamBufferDataCountersVtbl* do
    GUID = LibC::GUID.new(0x9d2a2563_u32, 0x31ab_u16, 0x402e_u16, StaticArray[0x9a_u8, 0x6b_u8, 0xad_u8, 0xb9_u8, 0x3_u8, 0x48_u8, 0x94_u8, 0x40_u8])
    def query_interface(this : IStreamBufferDataCounters*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamBufferDataCounters*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamBufferDataCounters*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data(this : IStreamBufferDataCounters*, pPinData : Win32cr::Media::DirectShow::SBE_PIN_DATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pPinData)
    end
    def reset_data(this : IStreamBufferDataCounters*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_data.call(this)
    end

  end

  @[Extern]
  record ISBE2GlobalEventVtbl,
    query_interface : Proc(ISBE2GlobalEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2GlobalEvent*, UInt32),
    release : Proc(ISBE2GlobalEvent*, UInt32),
    get_event : Proc(ISBE2GlobalEvent*, LibC::GUID*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::BOOL*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("caede759-b6b1-11db-a578-0018f3fa24c6")]
  record ISBE2GlobalEvent, lpVtbl : ISBE2GlobalEventVtbl* do
    GUID = LibC::GUID.new(0xcaede759_u32, 0xb6b1_u16, 0x11db_u16, StaticArray[0xa5_u8, 0x78_u8, 0x0_u8, 0x18_u8, 0xf3_u8, 0xfa_u8, 0x24_u8, 0xc6_u8])
    def query_interface(this : ISBE2GlobalEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2GlobalEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2GlobalEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : ISBE2GlobalEvent*, idEvt : LibC::GUID*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32, pSpanning : Win32cr::Foundation::BOOL*, pcb : UInt32*, pb : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, idEvt, param1, param2, param3, param4, pSpanning, pcb, pb)
    end

  end

  @[Extern]
  record ISBE2GlobalEvent2Vtbl,
    query_interface : Proc(ISBE2GlobalEvent2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2GlobalEvent2*, UInt32),
    release : Proc(ISBE2GlobalEvent2*, UInt32),
    get_event : Proc(ISBE2GlobalEvent2*, LibC::GUID*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::BOOL*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    get_event_ex : Proc(ISBE2GlobalEvent2*, LibC::GUID*, UInt32, UInt32, UInt32, UInt32, Win32cr::Foundation::BOOL*, UInt32*, UInt8*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d8309bf-00fe-4506-8b03-f8c65b5c9b39")]
  record ISBE2GlobalEvent2, lpVtbl : ISBE2GlobalEvent2Vtbl* do
    GUID = LibC::GUID.new(0x6d8309bf_u32, 0xfe_u16, 0x4506_u16, StaticArray[0x8b_u8, 0x3_u8, 0xf8_u8, 0xc6_u8, 0x5b_u8, 0x5c_u8, 0x9b_u8, 0x39_u8])
    def query_interface(this : ISBE2GlobalEvent2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2GlobalEvent2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2GlobalEvent2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : ISBE2GlobalEvent2*, idEvt : LibC::GUID*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32, pSpanning : Win32cr::Foundation::BOOL*, pcb : UInt32*, pb : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, idEvt, param1, param2, param3, param4, pSpanning, pcb, pb)
    end
    def get_event_ex(this : ISBE2GlobalEvent2*, idEvt : LibC::GUID*, param1 : UInt32, param2 : UInt32, param3 : UInt32, param4 : UInt32, pSpanning : Win32cr::Foundation::BOOL*, pcb : UInt32*, pb : UInt8*, pStreamTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_ex.call(this, idEvt, param1, param2, param3, param4, pSpanning, pcb, pb, pStreamTime)
    end

  end

  @[Extern]
  record ISBE2SpanningEventVtbl,
    query_interface : Proc(ISBE2SpanningEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2SpanningEvent*, UInt32),
    release : Proc(ISBE2SpanningEvent*, UInt32),
    get_event : Proc(ISBE2SpanningEvent*, LibC::GUID*, UInt32, UInt32*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("caede760-b6b1-11db-a578-0018f3fa24c6")]
  record ISBE2SpanningEvent, lpVtbl : ISBE2SpanningEventVtbl* do
    GUID = LibC::GUID.new(0xcaede760_u32, 0xb6b1_u16, 0x11db_u16, StaticArray[0xa5_u8, 0x78_u8, 0x0_u8, 0x18_u8, 0xf3_u8, 0xfa_u8, 0x24_u8, 0xc6_u8])
    def query_interface(this : ISBE2SpanningEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2SpanningEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2SpanningEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : ISBE2SpanningEvent*, idEvt : LibC::GUID*, streamId : UInt32, pcb : UInt32*, pb : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, idEvt, streamId, pcb, pb)
    end

  end

  @[Extern]
  record ISBE2CrossbarVtbl,
    query_interface : Proc(ISBE2Crossbar*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2Crossbar*, UInt32),
    release : Proc(ISBE2Crossbar*, UInt32),
    enable_default_mode : Proc(ISBE2Crossbar*, UInt32, Win32cr::Foundation::HRESULT),
    get_initial_profile : Proc(ISBE2Crossbar*, Void**, Win32cr::Foundation::HRESULT),
    set_output_profile : Proc(ISBE2Crossbar*, Void*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    enum_streams : Proc(ISBE2Crossbar*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("547b6d26-3226-487e-8253-8aa168749434")]
  record ISBE2Crossbar, lpVtbl : ISBE2CrossbarVtbl* do
    GUID = LibC::GUID.new(0x547b6d26_u32, 0x3226_u16, 0x487e_u16, StaticArray[0x82_u8, 0x53_u8, 0x8a_u8, 0xa1_u8, 0x68_u8, 0x74_u8, 0x94_u8, 0x34_u8])
    def query_interface(this : ISBE2Crossbar*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2Crossbar*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2Crossbar*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enable_default_mode(this : ISBE2Crossbar*, default_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_default_mode.call(this, default_flags)
    end
    def get_initial_profile(this : ISBE2Crossbar*, ppProfile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_initial_profile.call(this, ppProfile)
    end
    def set_output_profile(this : ISBE2Crossbar*, pProfile : Void*, pcOutputPins : UInt32*, ppOutputPins : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_profile.call(this, pProfile, pcOutputPins, ppOutputPins)
    end
    def enum_streams(this : ISBE2Crossbar*, ppStreams : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_streams.call(this, ppStreams)
    end

  end

  @[Extern]
  record ISBE2StreamMapVtbl,
    query_interface : Proc(ISBE2StreamMap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2StreamMap*, UInt32),
    release : Proc(ISBE2StreamMap*, UInt32),
    map_stream : Proc(ISBE2StreamMap*, UInt32, Win32cr::Foundation::HRESULT),
    unmap_stream : Proc(ISBE2StreamMap*, UInt32, Win32cr::Foundation::HRESULT),
    enum_mapped_streams : Proc(ISBE2StreamMap*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("667c7745-85b1-4c55-ae55-4e25056159fc")]
  record ISBE2StreamMap, lpVtbl : ISBE2StreamMapVtbl* do
    GUID = LibC::GUID.new(0x667c7745_u32, 0x85b1_u16, 0x4c55_u16, StaticArray[0xae_u8, 0x55_u8, 0x4e_u8, 0x25_u8, 0x5_u8, 0x61_u8, 0x59_u8, 0xfc_u8])
    def query_interface(this : ISBE2StreamMap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2StreamMap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2StreamMap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def map_stream(this : ISBE2StreamMap*, stream : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_stream.call(this, stream)
    end
    def unmap_stream(this : ISBE2StreamMap*, stream : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unmap_stream.call(this, stream)
    end
    def enum_mapped_streams(this : ISBE2StreamMap*, ppStreams : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_mapped_streams.call(this, ppStreams)
    end

  end

  @[Extern]
  record ISBE2EnumStreamVtbl,
    query_interface : Proc(ISBE2EnumStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2EnumStream*, UInt32),
    release : Proc(ISBE2EnumStream*, UInt32),
    next__ : Proc(ISBE2EnumStream*, UInt32, Win32cr::Media::DirectShow::SBE2_STREAM_DESC*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(ISBE2EnumStream*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(ISBE2EnumStream*, Win32cr::Foundation::HRESULT),
    clone : Proc(ISBE2EnumStream*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f7611092-9fbc-46ec-a7c7-548ea78b71a4")]
  record ISBE2EnumStream, lpVtbl : ISBE2EnumStreamVtbl* do
    GUID = LibC::GUID.new(0xf7611092_u32, 0x9fbc_u16, 0x46ec_u16, StaticArray[0xa7_u8, 0xc7_u8, 0x54_u8, 0x8e_u8, 0xa7_u8, 0x8b_u8, 0x71_u8, 0xa4_u8])
    def query_interface(this : ISBE2EnumStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2EnumStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2EnumStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : ISBE2EnumStream*, cRequest : UInt32, pStreamDesc : Win32cr::Media::DirectShow::SBE2_STREAM_DESC*, pcReceived : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cRequest, pStreamDesc, pcReceived)
    end
    def skip(this : ISBE2EnumStream*, cRecords : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cRecords)
    end
    def reset(this : ISBE2EnumStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : ISBE2EnumStream*, ppIEnumStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIEnumStream)
    end

  end

  @[Extern]
  record ISBE2MediaTypeProfileVtbl,
    query_interface : Proc(ISBE2MediaTypeProfile*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2MediaTypeProfile*, UInt32),
    release : Proc(ISBE2MediaTypeProfile*, UInt32),
    get_stream_count : Proc(ISBE2MediaTypeProfile*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream : Proc(ISBE2MediaTypeProfile*, UInt32, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**, Win32cr::Foundation::HRESULT),
    add_stream : Proc(ISBE2MediaTypeProfile*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    delete_stream : Proc(ISBE2MediaTypeProfile*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f238267d-4671-40d7-997e-25dc32cfed2a")]
  record ISBE2MediaTypeProfile, lpVtbl : ISBE2MediaTypeProfileVtbl* do
    GUID = LibC::GUID.new(0xf238267d_u32, 0x4671_u16, 0x40d7_u16, StaticArray[0x99_u8, 0x7e_u8, 0x25_u8, 0xdc_u8, 0x32_u8, 0xcf_u8, 0xed_u8, 0x2a_u8])
    def query_interface(this : ISBE2MediaTypeProfile*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2MediaTypeProfile*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2MediaTypeProfile*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_count(this : ISBE2MediaTypeProfile*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pCount)
    end
    def get_stream(this : ISBE2MediaTypeProfile*, index : UInt32, ppMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream.call(this, index, ppMediaType)
    end
    def add_stream(this : ISBE2MediaTypeProfile*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, pMediaType)
    end
    def delete_stream(this : ISBE2MediaTypeProfile*, index : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_stream.call(this, index)
    end

  end

  @[Extern]
  record ISBE2FileScanVtbl,
    query_interface : Proc(ISBE2FileScan*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISBE2FileScan*, UInt32),
    release : Proc(ISBE2FileScan*, UInt32),
    repair_file : Proc(ISBE2FileScan*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3e2bf5a5-4f96-4899-a1a3-75e8be9a5ac0")]
  record ISBE2FileScan, lpVtbl : ISBE2FileScanVtbl* do
    GUID = LibC::GUID.new(0x3e2bf5a5_u32, 0x4f96_u16, 0x4899_u16, StaticArray[0xa1_u8, 0xa3_u8, 0x75_u8, 0xe8_u8, 0xbe_u8, 0x9a_u8, 0x5a_u8, 0xc0_u8])
    def query_interface(this : ISBE2FileScan*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISBE2FileScan*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISBE2FileScan*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def repair_file(this : ISBE2FileScan*, filename : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.repair_file.call(this, filename)
    end

  end

  @[Extern]
  record IMpeg2TableFilterVtbl,
    query_interface : Proc(IMpeg2TableFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMpeg2TableFilter*, UInt32),
    release : Proc(IMpeg2TableFilter*, UInt32),
    add_pid : Proc(IMpeg2TableFilter*, UInt16, Win32cr::Foundation::HRESULT),
    add_table : Proc(IMpeg2TableFilter*, UInt16, UInt8, Win32cr::Foundation::HRESULT),
    add_extension : Proc(IMpeg2TableFilter*, UInt16, UInt8, UInt16, Win32cr::Foundation::HRESULT),
    remove_pid : Proc(IMpeg2TableFilter*, UInt16, Win32cr::Foundation::HRESULT),
    remove_table : Proc(IMpeg2TableFilter*, UInt16, UInt8, Win32cr::Foundation::HRESULT),
    remove_extension : Proc(IMpeg2TableFilter*, UInt16, UInt8, UInt16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bdcdd913-9ecd-4fb2-81ae-adf747ea75a5")]
  record IMpeg2TableFilter, lpVtbl : IMpeg2TableFilterVtbl* do
    GUID = LibC::GUID.new(0xbdcdd913_u32, 0x9ecd_u16, 0x4fb2_u16, StaticArray[0x81_u8, 0xae_u8, 0xad_u8, 0xf7_u8, 0x47_u8, 0xea_u8, 0x75_u8, 0xa5_u8])
    def query_interface(this : IMpeg2TableFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMpeg2TableFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMpeg2TableFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_pid(this : IMpeg2TableFilter*, p : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_pid.call(this, p)
    end
    def add_table(this : IMpeg2TableFilter*, p : UInt16, t : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_table.call(this, p, t)
    end
    def add_extension(this : IMpeg2TableFilter*, p : UInt16, t : UInt8, e : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_extension.call(this, p, t, e)
    end
    def remove_pid(this : IMpeg2TableFilter*, p : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_pid.call(this, p)
    end
    def remove_table(this : IMpeg2TableFilter*, p : UInt16, t : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_table.call(this, p, t)
    end
    def remove_extension(this : IMpeg2TableFilter*, p : UInt16, t : UInt8, e : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_extension.call(this, p, t, e)
    end

  end

  @[Extern]
  record IMpeg2DataVtbl,
    query_interface : Proc(IMpeg2Data*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMpeg2Data*, UInt32),
    release : Proc(IMpeg2Data*, UInt32),
    get_section : Proc(IMpeg2Data*, UInt16, UInt8, Win32cr::Media::DirectShow::MPEG2_FILTER*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table : Proc(IMpeg2Data*, UInt16, UInt8, Win32cr::Media::DirectShow::MPEG2_FILTER*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_stream_of_sections : Proc(IMpeg2Data*, UInt16, UInt8, Win32cr::Media::DirectShow::MPEG2_FILTER*, Win32cr::Foundation::HANDLE, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9b396d40-f380-4e3c-a514-1a82bf6ebfe6")]
  record IMpeg2Data, lpVtbl : IMpeg2DataVtbl* do
    GUID = LibC::GUID.new(0x9b396d40_u32, 0xf380_u16, 0x4e3c_u16, StaticArray[0xa5_u8, 0x14_u8, 0x1a_u8, 0x82_u8, 0xbf_u8, 0x6e_u8, 0xbf_u8, 0xe6_u8])
    def query_interface(this : IMpeg2Data*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMpeg2Data*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMpeg2Data*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_section(this : IMpeg2Data*, pid : UInt16, tid : UInt8, pFilter : Win32cr::Media::DirectShow::MPEG2_FILTER*, dwTimeout : UInt32, ppSectionList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_section.call(this, pid, tid, pFilter, dwTimeout, ppSectionList)
    end
    def get_table(this : IMpeg2Data*, pid : UInt16, tid : UInt8, pFilter : Win32cr::Media::DirectShow::MPEG2_FILTER*, dwTimeout : UInt32, ppSectionList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table.call(this, pid, tid, pFilter, dwTimeout, ppSectionList)
    end
    def get_stream_of_sections(this : IMpeg2Data*, pid : UInt16, tid : UInt8, pFilter : Win32cr::Media::DirectShow::MPEG2_FILTER*, hDataReadyEvent : Win32cr::Foundation::HANDLE, ppMpegStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_of_sections.call(this, pid, tid, pFilter, hDataReadyEvent, ppMpegStream)
    end

  end

  @[Extern]
  record ISectionListVtbl,
    query_interface : Proc(ISectionList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISectionList*, UInt32),
    release : Proc(ISectionList*, UInt32),
    initialize__ : Proc(ISectionList*, Win32cr::Media::DirectShow::MPEG_REQUEST_TYPE, Void*, Win32cr::Media::DirectShow::MPEG_CONTEXT*, UInt16, UInt8, Win32cr::Media::DirectShow::MPEG2_FILTER*, UInt32, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    initialize_with_raw_sections : Proc(ISectionList*, Win32cr::Media::DirectShow::MPEG_PACKET_LIST*, Win32cr::Foundation::HRESULT),
    cancel_pending_request : Proc(ISectionList*, Win32cr::Foundation::HRESULT),
    get_number_of_sections : Proc(ISectionList*, UInt16*, Win32cr::Foundation::HRESULT),
    get_section_data : Proc(ISectionList*, UInt16, UInt32*, Win32cr::Media::DirectShow::SECTION**, Win32cr::Foundation::HRESULT),
    get_program_identifier : Proc(ISectionList*, UInt16*, Win32cr::Foundation::HRESULT),
    get_table_identifier : Proc(ISectionList*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("afec1eb5-2a64-46c6-bf4b-ae3ccb6afdb0")]
  record ISectionList, lpVtbl : ISectionListVtbl* do
    GUID = LibC::GUID.new(0xafec1eb5_u32, 0x2a64_u16, 0x46c6_u16, StaticArray[0xbf_u8, 0x4b_u8, 0xae_u8, 0x3c_u8, 0xcb_u8, 0x6a_u8, 0xfd_u8, 0xb0_u8])
    def query_interface(this : ISectionList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISectionList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISectionList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : ISectionList*, requestType : Win32cr::Media::DirectShow::MPEG_REQUEST_TYPE, pMpeg2Data : Void*, pContext : Win32cr::Media::DirectShow::MPEG_CONTEXT*, pid : UInt16, tid : UInt8, pFilter : Win32cr::Media::DirectShow::MPEG2_FILTER*, timeout : UInt32, hDoneEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, requestType, pMpeg2Data, pContext, pid, tid, pFilter, timeout, hDoneEvent)
    end
    def initialize_with_raw_sections(this : ISectionList*, pmplSections : Win32cr::Media::DirectShow::MPEG_PACKET_LIST*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_with_raw_sections.call(this, pmplSections)
    end
    def cancel_pending_request(this : ISectionList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_pending_request.call(this)
    end
    def get_number_of_sections(this : ISectionList*, pCount : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_sections.call(this, pCount)
    end
    def get_section_data(this : ISectionList*, sectionNumber : UInt16, pdwRawPacketLength : UInt32*, ppSection : Win32cr::Media::DirectShow::SECTION**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_section_data.call(this, sectionNumber, pdwRawPacketLength, ppSection)
    end
    def get_program_identifier(this : ISectionList*, pPid : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_program_identifier.call(this, pPid)
    end
    def get_table_identifier(this : ISectionList*, pTableId : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_identifier.call(this, pTableId)
    end

  end

  @[Extern]
  record IMpeg2StreamVtbl,
    query_interface : Proc(IMpeg2Stream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMpeg2Stream*, UInt32),
    release : Proc(IMpeg2Stream*, UInt32),
    initialize__ : Proc(IMpeg2Stream*, Win32cr::Media::DirectShow::MPEG_REQUEST_TYPE, Void*, Win32cr::Media::DirectShow::MPEG_CONTEXT*, UInt16, UInt8, Win32cr::Media::DirectShow::MPEG2_FILTER*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    supply_data_buffer : Proc(IMpeg2Stream*, Win32cr::Media::DirectShow::MPEG_STREAM_BUFFER*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("400cc286-32a0-4ce4-9041-39571125a635")]
  record IMpeg2Stream, lpVtbl : IMpeg2StreamVtbl* do
    GUID = LibC::GUID.new(0x400cc286_u32, 0x32a0_u16, 0x4ce4_u16, StaticArray[0x90_u8, 0x41_u8, 0x39_u8, 0x57_u8, 0x11_u8, 0x25_u8, 0xa6_u8, 0x35_u8])
    def query_interface(this : IMpeg2Stream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMpeg2Stream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMpeg2Stream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IMpeg2Stream*, requestType : Win32cr::Media::DirectShow::MPEG_REQUEST_TYPE, pMpeg2Data : Void*, pContext : Win32cr::Media::DirectShow::MPEG_CONTEXT*, pid : UInt16, tid : UInt8, pFilter : Win32cr::Media::DirectShow::MPEG2_FILTER*, hDataReadyEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, requestType, pMpeg2Data, pContext, pid, tid, pFilter, hDataReadyEvent)
    end
    def supply_data_buffer(this : IMpeg2Stream*, pStreamBuffer : Win32cr::Media::DirectShow::MPEG_STREAM_BUFFER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.supply_data_buffer.call(this, pStreamBuffer)
    end

  end

  @[Extern]
  record IGenericDescriptorVtbl,
    query_interface : Proc(IGenericDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGenericDescriptor*, UInt32),
    release : Proc(IGenericDescriptor*, UInt32),
    initialize___1 : Proc(IGenericDescriptor*, UInt8*, Int32, Win32cr::Foundation::HRESULT),
    get_tag : Proc(IGenericDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length_1 : Proc(IGenericDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_body : Proc(IGenericDescriptor*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6a5918f8-a77a-4f61-aed0-5702bdcda3e6")]
  record IGenericDescriptor, lpVtbl : IGenericDescriptorVtbl* do
    GUID = LibC::GUID.new(0x6a5918f8_u32, 0xa77a_u16, 0x4f61_u16, StaticArray[0xae_u8, 0xd0_u8, 0x57_u8, 0x2_u8, 0xbd_u8, 0xcd_u8, 0xa3_u8, 0xe6_u8])
    def query_interface(this : IGenericDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGenericDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGenericDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize___1(this : IGenericDescriptor*, pbDesc : UInt8*, bCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize___1.call(this, pbDesc, bCount)
    end
    def get_tag(this : IGenericDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length_1(this : IGenericDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length_1.call(this, pbVal)
    end
    def get_body(this : IGenericDescriptor*, ppbVal : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_body.call(this, ppbVal)
    end

  end

  @[Extern]
  record IGenericDescriptor2Vtbl,
    query_interface : Proc(IGenericDescriptor2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGenericDescriptor2*, UInt32),
    release : Proc(IGenericDescriptor2*, UInt32),
    initialize___1 : Proc(IGenericDescriptor2*, UInt8*, Int32, Win32cr::Foundation::HRESULT),
    get_tag : Proc(IGenericDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length_1 : Proc(IGenericDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_body : Proc(IGenericDescriptor2*, UInt8**, Win32cr::Foundation::HRESULT),
    initialize___2 : Proc(IGenericDescriptor2*, UInt8*, UInt16, Win32cr::Foundation::HRESULT),
    get_length_2 : Proc(IGenericDescriptor2*, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bf02fb7e-9792-4e10-a68d-033a2cc246a5")]
  record IGenericDescriptor2, lpVtbl : IGenericDescriptor2Vtbl* do
    GUID = LibC::GUID.new(0xbf02fb7e_u32, 0x9792_u16, 0x4e10_u16, StaticArray[0xa6_u8, 0x8d_u8, 0x3_u8, 0x3a_u8, 0x2c_u8, 0xc2_u8, 0x46_u8, 0xa5_u8])
    def query_interface(this : IGenericDescriptor2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGenericDescriptor2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGenericDescriptor2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize___1(this : IGenericDescriptor2*, pbDesc : UInt8*, bCount : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize___1.call(this, pbDesc, bCount)
    end
    def get_tag(this : IGenericDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length_1(this : IGenericDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length_1.call(this, pbVal)
    end
    def get_body(this : IGenericDescriptor2*, ppbVal : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_body.call(this, ppbVal)
    end
    def initialize___2(this : IGenericDescriptor2*, pbDesc : UInt8*, wCount : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize___2.call(this, pbDesc, wCount)
    end
    def get_length_2(this : IGenericDescriptor2*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length_2.call(this, pwVal)
    end

  end

  @[Extern]
  record IPATVtbl,
    query_interface : Proc(IPAT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPAT*, UInt32),
    release : Proc(IPAT*, UInt32),
    initialize__ : Proc(IPAT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IPAT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IPAT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IPAT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_program_number : Proc(IPAT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_program_map_pid : Proc(IPAT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    find_record_program_map_pid : Proc(IPAT*, UInt16, UInt16*, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IPAT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IPAT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IPAT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IPAT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6623b511-4b5f-43c3-9a01-e8ff84188060")]
  record IPAT, lpVtbl : IPATVtbl* do
    GUID = LibC::GUID.new(0x6623b511_u32, 0x4b5f_u16, 0x43c3_u16, StaticArray[0x9a_u8, 0x1_u8, 0xe8_u8, 0xff_u8, 0x84_u8, 0x18_u8, 0x80_u8, 0x60_u8])
    def query_interface(this : IPAT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPAT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPAT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IPAT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_transport_stream_id(this : IPAT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_version_number(this : IPAT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_count_of_records(this : IPAT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_program_number(this : IPAT*, dwIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_program_number.call(this, dwIndex, pwVal)
    end
    def get_record_program_map_pid(this : IPAT*, dwIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_program_map_pid.call(this, dwIndex, pwVal)
    end
    def find_record_program_map_pid(this : IPAT*, wProgramNumber : UInt16, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_record_program_map_pid.call(this, wProgramNumber, pwVal)
    end
    def register_for_next_table(this : IPAT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IPAT*, ppPAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppPAT)
    end
    def register_for_when_current(this : IPAT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IPAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end

  end

  @[Extern]
  record ICATVtbl,
    query_interface : Proc(ICAT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICAT*, UInt32),
    release : Proc(ICAT*, UInt32),
    initialize__ : Proc(ICAT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(ICAT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(ICAT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(ICAT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(ICAT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(ICAT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(ICAT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(ICAT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(ICAT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7c6995fb-2a31-4bd7-953e-b1ad7fb7d31c")]
  record ICAT, lpVtbl : ICATVtbl* do
    GUID = LibC::GUID.new(0x7c6995fb_u32, 0x2a31_u16, 0x4bd7_u16, StaticArray[0x95_u8, 0x3e_u8, 0xb1_u8, 0xad_u8, 0x7f_u8, 0xb7_u8, 0xd3_u8, 0x1c_u8])
    def query_interface(this : ICAT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICAT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICAT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : ICAT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : ICAT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_count_of_table_descriptors(this : ICAT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : ICAT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : ICAT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : ICAT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : ICAT*, dwTimeout : UInt32, ppCAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, dwTimeout, ppCAT)
    end
    def register_for_when_current(this : ICAT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : ICAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end

  end

  @[Extern]
  record IPMTVtbl,
    query_interface : Proc(IPMT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPMT*, UInt32),
    release : Proc(IPMT*, UInt32),
    initialize__ : Proc(IPMT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_program_number : Proc(IPMT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IPMT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_pcr_pid : Proc(IPMT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IPMT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IPMT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IPMT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IPMT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_stream_type : Proc(IPMT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_elementary_pid : Proc(IPMT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IPMT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IPMT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IPMT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    query_service_gateway_info : Proc(IPMT*, Win32cr::Media::DirectShow::DSMCC_ELEMENT**, UInt32*, Win32cr::Foundation::HRESULT),
    query_mpe_info : Proc(IPMT*, Win32cr::Media::DirectShow::MPE_ELEMENT**, UInt32*, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IPMT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IPMT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IPMT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IPMT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("01f3b398-9527-4736-94db-5195878e97a8")]
  record IPMT, lpVtbl : IPMTVtbl* do
    GUID = LibC::GUID.new(0x1f3b398_u32, 0x9527_u16, 0x4736_u16, StaticArray[0x94_u8, 0xdb_u8, 0x51_u8, 0x95_u8, 0x87_u8, 0x8e_u8, 0x97_u8, 0xa8_u8])
    def query_interface(this : IPMT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPMT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPMT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IPMT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_program_number(this : IPMT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_program_number.call(this, pwVal)
    end
    def get_version_number(this : IPMT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_pcr_pid(this : IPMT*, pPidVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pcr_pid.call(this, pPidVal)
    end
    def get_count_of_table_descriptors(this : IPMT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IPMT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IPMT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def get_count_of_records(this : IPMT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pwVal)
    end
    def get_record_stream_type(this : IPMT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_stream_type.call(this, dwRecordIndex, pbVal)
    end
    def get_record_elementary_pid(this : IPMT*, dwRecordIndex : UInt32, pPidVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_elementary_pid.call(this, dwRecordIndex, pPidVal)
    end
    def get_record_count_of_descriptors(this : IPMT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IPMT*, dwRecordIndex : UInt32, dwDescIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwDescIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IPMT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def query_service_gateway_info(this : IPMT*, ppDSMCCList : Win32cr::Media::DirectShow::DSMCC_ELEMENT**, puiCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_service_gateway_info.call(this, ppDSMCCList, puiCount)
    end
    def query_mpe_info(this : IPMT*, ppMPEList : Win32cr::Media::DirectShow::MPE_ELEMENT**, puiCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_mpe_info.call(this, ppMPEList, puiCount)
    end
    def register_for_next_table(this : IPMT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IPMT*, ppPMT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppPMT)
    end
    def register_for_when_current(this : IPMT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IPMT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end

  end

  @[Extern]
  record ITSDTVtbl,
    query_interface : Proc(ITSDT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITSDT*, UInt32),
    release : Proc(ITSDT*, UInt32),
    initialize__ : Proc(ITSDT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(ITSDT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(ITSDT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(ITSDT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(ITSDT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(ITSDT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(ITSDT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(ITSDT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(ITSDT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d19bdb43-405b-4a7c-a791-c89110c33165")]
  record ITSDT, lpVtbl : ITSDTVtbl* do
    GUID = LibC::GUID.new(0xd19bdb43_u32, 0x405b_u16, 0x4a7c_u16, StaticArray[0xa7_u8, 0x91_u8, 0xc8_u8, 0x91_u8, 0x10_u8, 0xc3_u8, 0x31_u8, 0x65_u8])
    def query_interface(this : ITSDT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITSDT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITSDT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : ITSDT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : ITSDT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_count_of_table_descriptors(this : ITSDT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : ITSDT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : ITSDT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : ITSDT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : ITSDT*, ppTSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppTSDT)
    end
    def register_for_when_current(this : ITSDT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : ITSDT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end

  end

  @[Extern]
  record IPSITablesVtbl,
    query_interface : Proc(IPSITables*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPSITables*, UInt32),
    release : Proc(IPSITables*, UInt32),
    get_table : Proc(IPSITables*, UInt32, UInt32, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("919f24c5-7b14-42ac-a4b0-2ae08daf00ac")]
  record IPSITables, lpVtbl : IPSITablesVtbl* do
    GUID = LibC::GUID.new(0x919f24c5_u32, 0x7b14_u16, 0x42ac_u16, StaticArray[0xa4_u8, 0xb0_u8, 0x2a_u8, 0xe0_u8, 0x8d_u8, 0xaf_u8, 0x0_u8, 0xac_u8])
    def query_interface(this : IPSITables*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPSITables*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPSITables*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_table(this : IPSITables*, dwTSID : UInt32, dwTID_PID : UInt32, dwHashedVer : UInt32, dwPara4 : UInt32, ppIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table.call(this, dwTSID, dwTID_PID, dwHashedVer, dwPara4, ppIUnknown)
    end

  end

  @[Extern]
  record IAtscPsipParserVtbl,
    query_interface : Proc(IAtscPsipParser*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAtscPsipParser*, UInt32),
    release : Proc(IAtscPsipParser*, UInt32),
    initialize__ : Proc(IAtscPsipParser*, Void*, Win32cr::Foundation::HRESULT),
    get_pat : Proc(IAtscPsipParser*, Void**, Win32cr::Foundation::HRESULT),
    get_cat : Proc(IAtscPsipParser*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_pmt : Proc(IAtscPsipParser*, UInt16, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_tsdt : Proc(IAtscPsipParser*, Void**, Win32cr::Foundation::HRESULT),
    get_mgt : Proc(IAtscPsipParser*, Void**, Win32cr::Foundation::HRESULT),
    get_vct : Proc(IAtscPsipParser*, UInt8, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT),
    get_eit : Proc(IAtscPsipParser*, UInt16, UInt16*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_ett : Proc(IAtscPsipParser*, UInt16, UInt16*, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_stt : Proc(IAtscPsipParser*, Void**, Win32cr::Foundation::HRESULT),
    get_eas : Proc(IAtscPsipParser*, UInt16, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b2c98995-5eb2-4fb1-b406-f3e8e2026a9a")]
  record IAtscPsipParser, lpVtbl : IAtscPsipParserVtbl* do
    GUID = LibC::GUID.new(0xb2c98995_u32, 0x5eb2_u16, 0x4fb1_u16, StaticArray[0xb4_u8, 0x6_u8, 0xf3_u8, 0xe8_u8, 0xe2_u8, 0x2_u8, 0x6a_u8, 0x9a_u8])
    def query_interface(this : IAtscPsipParser*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAtscPsipParser*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAtscPsipParser*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IAtscPsipParser*, punkMpeg2Data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, punkMpeg2Data)
    end
    def get_pat(this : IAtscPsipParser*, ppPAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pat.call(this, ppPAT)
    end
    def get_cat(this : IAtscPsipParser*, dwTimeout : UInt32, ppCAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cat.call(this, dwTimeout, ppCAT)
    end
    def get_pmt(this : IAtscPsipParser*, pid : UInt16, pwProgramNumber : UInt16*, ppPMT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pmt.call(this, pid, pwProgramNumber, ppPMT)
    end
    def get_tsdt(this : IAtscPsipParser*, ppTSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tsdt.call(this, ppTSDT)
    end
    def get_mgt(this : IAtscPsipParser*, ppMGT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mgt.call(this, ppMGT)
    end
    def get_vct(this : IAtscPsipParser*, tableId : UInt8, fGetNextTable : Win32cr::Foundation::BOOL, ppVCT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vct.call(this, tableId, fGetNextTable, ppVCT)
    end
    def get_eit(this : IAtscPsipParser*, pid : UInt16, pwSourceId : UInt16*, dwTimeout : UInt32, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eit.call(this, pid, pwSourceId, dwTimeout, ppEIT)
    end
    def get_ett(this : IAtscPsipParser*, pid : UInt16, wSourceId : UInt16*, pwEventId : UInt16*, ppETT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ett.call(this, pid, wSourceId, pwEventId, ppETT)
    end
    def get_stt(this : IAtscPsipParser*, ppSTT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stt.call(this, ppSTT)
    end
    def get_eas(this : IAtscPsipParser*, pid : UInt16, ppEAS : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eas.call(this, pid, ppEAS)
    end

  end

  @[Extern]
  record IATSC_MGTVtbl,
    query_interface : Proc(IATSC_MGT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSC_MGT*, UInt32),
    release : Proc(IATSC_MGT*, UInt32),
    initialize__ : Proc(IATSC_MGT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IATSC_MGT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_protocol_version : Proc(IATSC_MGT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IATSC_MGT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_type : Proc(IATSC_MGT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_type_pid : Proc(IATSC_MGT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_version_number : Proc(IATSC_MGT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IATSC_MGT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IATSC_MGT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IATSC_MGT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IATSC_MGT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IATSC_MGT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IATSC_MGT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8877dabd-c137-4073-97e3-779407a5d87a")]
  record IATSC_MGT, lpVtbl : IATSC_MGTVtbl* do
    GUID = LibC::GUID.new(0x8877dabd_u32, 0xc137_u16, 0x4073_u16, StaticArray[0x97_u8, 0xe3_u8, 0x77_u8, 0x94_u8, 0x7_u8, 0xa5_u8, 0xd8_u8, 0x7a_u8])
    def query_interface(this : IATSC_MGT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSC_MGT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSC_MGT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IATSC_MGT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IATSC_MGT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_protocol_version(this : IATSC_MGT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protocol_version.call(this, pbVal)
    end
    def get_count_of_records(this : IATSC_MGT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_type(this : IATSC_MGT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_type.call(this, dwRecordIndex, pwVal)
    end
    def get_record_type_pid(this : IATSC_MGT*, dwRecordIndex : UInt32, ppidVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_type_pid.call(this, dwRecordIndex, ppidVal)
    end
    def get_record_version_number(this : IATSC_MGT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_version_number.call(this, dwRecordIndex, pbVal)
    end
    def get_record_count_of_descriptors(this : IATSC_MGT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IATSC_MGT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IATSC_MGT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def get_count_of_table_descriptors(this : IATSC_MGT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IATSC_MGT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IATSC_MGT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end

  end

  @[Extern]
  record IATSC_VCTVtbl,
    query_interface : Proc(IATSC_VCT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSC_VCT*, UInt32),
    release : Proc(IATSC_VCT*, UInt32),
    initialize__ : Proc(IATSC_VCT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IATSC_VCT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IATSC_VCT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_protocol_version : Proc(IATSC_VCT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IATSC_VCT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_name : Proc(IATSC_VCT*, UInt32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_record_major_channel_number : Proc(IATSC_VCT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_minor_channel_number : Proc(IATSC_VCT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_modulation_mode : Proc(IATSC_VCT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_carrier_frequency : Proc(IATSC_VCT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_transport_stream_id : Proc(IATSC_VCT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_program_number : Proc(IATSC_VCT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_etm_location : Proc(IATSC_VCT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_is_access_controlled_bit_set : Proc(IATSC_VCT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_is_hidden_bit_set : Proc(IATSC_VCT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_is_path_select_bit_set : Proc(IATSC_VCT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_is_out_of_band_bit_set : Proc(IATSC_VCT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_is_hide_guide_bit_set : Proc(IATSC_VCT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_service_type : Proc(IATSC_VCT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_source_id : Proc(IATSC_VCT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IATSC_VCT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IATSC_VCT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IATSC_VCT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IATSC_VCT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IATSC_VCT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IATSC_VCT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("26879a18-32f9-46c6-91f0-fb6479270e8c")]
  record IATSC_VCT, lpVtbl : IATSC_VCTVtbl* do
    GUID = LibC::GUID.new(0x26879a18_u32, 0x32f9_u16, 0x46c6_u16, StaticArray[0x91_u8, 0xf0_u8, 0xfb_u8, 0x64_u8, 0x79_u8, 0x27_u8, 0xe_u8, 0x8c_u8])
    def query_interface(this : IATSC_VCT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSC_VCT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSC_VCT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IATSC_VCT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IATSC_VCT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_transport_stream_id(this : IATSC_VCT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_protocol_version(this : IATSC_VCT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protocol_version.call(this, pbVal)
    end
    def get_count_of_records(this : IATSC_VCT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_name(this : IATSC_VCT*, dwRecordIndex : UInt32, pwsName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_name.call(this, dwRecordIndex, pwsName)
    end
    def get_record_major_channel_number(this : IATSC_VCT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_major_channel_number.call(this, dwRecordIndex, pwVal)
    end
    def get_record_minor_channel_number(this : IATSC_VCT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_minor_channel_number.call(this, dwRecordIndex, pwVal)
    end
    def get_record_modulation_mode(this : IATSC_VCT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_modulation_mode.call(this, dwRecordIndex, pbVal)
    end
    def get_record_carrier_frequency(this : IATSC_VCT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_carrier_frequency.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_transport_stream_id(this : IATSC_VCT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_transport_stream_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_program_number(this : IATSC_VCT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_program_number.call(this, dwRecordIndex, pwVal)
    end
    def get_record_etm_location(this : IATSC_VCT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_etm_location.call(this, dwRecordIndex, pbVal)
    end
    def get_record_is_access_controlled_bit_set(this : IATSC_VCT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_is_access_controlled_bit_set.call(this, dwRecordIndex, pfVal)
    end
    def get_record_is_hidden_bit_set(this : IATSC_VCT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_is_hidden_bit_set.call(this, dwRecordIndex, pfVal)
    end
    def get_record_is_path_select_bit_set(this : IATSC_VCT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_is_path_select_bit_set.call(this, dwRecordIndex, pfVal)
    end
    def get_record_is_out_of_band_bit_set(this : IATSC_VCT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_is_out_of_band_bit_set.call(this, dwRecordIndex, pfVal)
    end
    def get_record_is_hide_guide_bit_set(this : IATSC_VCT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_is_hide_guide_bit_set.call(this, dwRecordIndex, pfVal)
    end
    def get_record_service_type(this : IATSC_VCT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_type.call(this, dwRecordIndex, pbVal)
    end
    def get_record_source_id(this : IATSC_VCT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_source_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_count_of_descriptors(this : IATSC_VCT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IATSC_VCT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IATSC_VCT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def get_count_of_table_descriptors(this : IATSC_VCT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IATSC_VCT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IATSC_VCT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end

  end

  @[Extern]
  record IATSC_EITVtbl,
    query_interface : Proc(IATSC_EIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSC_EIT*, UInt32),
    release : Proc(IATSC_EIT*, UInt32),
    initialize__ : Proc(IATSC_EIT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IATSC_EIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_source_id : Proc(IATSC_EIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_protocol_version : Proc(IATSC_EIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IATSC_EIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_event_id : Proc(IATSC_EIT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_start_time : Proc(IATSC_EIT*, UInt32, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_record_etm_location : Proc(IATSC_EIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_duration : Proc(IATSC_EIT*, UInt32, Win32cr::Media::DirectShow::MPEG_TIME*, Win32cr::Foundation::HRESULT),
    get_record_title_text : Proc(IATSC_EIT*, UInt32, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IATSC_EIT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IATSC_EIT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IATSC_EIT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d7c212d7-76a2-4b4b-aa56-846879a80096")]
  record IATSC_EIT, lpVtbl : IATSC_EITVtbl* do
    GUID = LibC::GUID.new(0xd7c212d7_u32, 0x76a2_u16, 0x4b4b_u16, StaticArray[0xaa_u8, 0x56_u8, 0x84_u8, 0x68_u8, 0x79_u8, 0xa8_u8, 0x0_u8, 0x96_u8])
    def query_interface(this : IATSC_EIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSC_EIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSC_EIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IATSC_EIT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IATSC_EIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_source_id(this : IATSC_EIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_id.call(this, pwVal)
    end
    def get_protocol_version(this : IATSC_EIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protocol_version.call(this, pbVal)
    end
    def get_count_of_records(this : IATSC_EIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_event_id(this : IATSC_EIT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_event_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_start_time(this : IATSC_EIT*, dwRecordIndex : UInt32, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_start_time.call(this, dwRecordIndex, pmdtVal)
    end
    def get_record_etm_location(this : IATSC_EIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_etm_location.call(this, dwRecordIndex, pbVal)
    end
    def get_record_duration(this : IATSC_EIT*, dwRecordIndex : UInt32, pmdVal : Win32cr::Media::DirectShow::MPEG_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_duration.call(this, dwRecordIndex, pmdVal)
    end
    def get_record_title_text(this : IATSC_EIT*, dwRecordIndex : UInt32, pdwLength : UInt32*, ppText : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_title_text.call(this, dwRecordIndex, pdwLength, ppText)
    end
    def get_record_count_of_descriptors(this : IATSC_EIT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IATSC_EIT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IATSC_EIT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end

  end

  @[Extern]
  record IATSC_ETTVtbl,
    query_interface : Proc(IATSC_ETT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSC_ETT*, UInt32),
    release : Proc(IATSC_ETT*, UInt32),
    initialize__ : Proc(IATSC_ETT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IATSC_ETT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_protocol_version : Proc(IATSC_ETT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_etm_id : Proc(IATSC_ETT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_extended_message_text : Proc(IATSC_ETT*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5a142cc9-b8cf-4a86-a040-e9cadf3ef3e7")]
  record IATSC_ETT, lpVtbl : IATSC_ETTVtbl* do
    GUID = LibC::GUID.new(0x5a142cc9_u32, 0xb8cf_u16, 0x4a86_u16, StaticArray[0xa0_u8, 0x40_u8, 0xe9_u8, 0xca_u8, 0xdf_u8, 0x3e_u8, 0xf3_u8, 0xe7_u8])
    def query_interface(this : IATSC_ETT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSC_ETT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSC_ETT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IATSC_ETT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IATSC_ETT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_protocol_version(this : IATSC_ETT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protocol_version.call(this, pbVal)
    end
    def get_etm_id(this : IATSC_ETT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_etm_id.call(this, pdwVal)
    end
    def get_extended_message_text(this : IATSC_ETT*, pdwLength : UInt32*, ppText : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_message_text.call(this, pdwLength, ppText)
    end

  end

  @[Extern]
  record IATSC_STTVtbl,
    query_interface : Proc(IATSC_STT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IATSC_STT*, UInt32),
    release : Proc(IATSC_STT*, UInt32),
    initialize__ : Proc(IATSC_STT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_protocol_version : Proc(IATSC_STT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_system_time : Proc(IATSC_STT*, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_gps_utc_offset : Proc(IATSC_STT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_daylight_savings : Proc(IATSC_STT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IATSC_STT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IATSC_STT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IATSC_STT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6bf42423-217d-4d6f-81e1-3a7b360ec896")]
  record IATSC_STT, lpVtbl : IATSC_STTVtbl* do
    GUID = LibC::GUID.new(0x6bf42423_u32, 0x217d_u16, 0x4d6f_u16, StaticArray[0x81_u8, 0xe1_u8, 0x3a_u8, 0x7b_u8, 0x36_u8, 0xe_u8, 0xc8_u8, 0x96_u8])
    def query_interface(this : IATSC_STT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IATSC_STT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IATSC_STT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IATSC_STT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_protocol_version(this : IATSC_STT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protocol_version.call(this, pbVal)
    end
    def get_system_time(this : IATSC_STT*, pmdtSystemTime : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_system_time.call(this, pmdtSystemTime)
    end
    def get_gps_utc_offset(this : IATSC_STT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gps_utc_offset.call(this, pbVal)
    end
    def get_daylight_savings(this : IATSC_STT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_daylight_savings.call(this, pwVal)
    end
    def get_count_of_table_descriptors(this : IATSC_STT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IATSC_STT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IATSC_STT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end

  end

  @[Extern]
  record ISCTE_EASVtbl,
    query_interface : Proc(ISCTE_EAS*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISCTE_EAS*, UInt32),
    release : Proc(ISCTE_EAS*, UInt32),
    initialize__ : Proc(ISCTE_EAS*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_sequency_number : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_protocol_version : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_eas_event_id : Proc(ISCTE_EAS*, UInt16*, Win32cr::Foundation::HRESULT),
    get_originator_code : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_eas_event_code_len : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_eas_event_code : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_raw_nature_of_activation_text_len : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_raw_nature_of_activation_text : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_nature_of_activation_text : Proc(ISCTE_EAS*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_time_remaining : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_start_time : Proc(ISCTE_EAS*, UInt32*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(ISCTE_EAS*, UInt16*, Win32cr::Foundation::HRESULT),
    get_alert_priority : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_details_oob_source_id : Proc(ISCTE_EAS*, UInt16*, Win32cr::Foundation::HRESULT),
    get_details_major : Proc(ISCTE_EAS*, UInt16*, Win32cr::Foundation::HRESULT),
    get_details_minor : Proc(ISCTE_EAS*, UInt16*, Win32cr::Foundation::HRESULT),
    get_details_audio_oob_source_id : Proc(ISCTE_EAS*, UInt16*, Win32cr::Foundation::HRESULT),
    get_alert_text : Proc(ISCTE_EAS*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_raw_alert_text_len : Proc(ISCTE_EAS*, UInt16*, Win32cr::Foundation::HRESULT),
    get_raw_alert_text : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_location_count : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_location_codes : Proc(ISCTE_EAS*, UInt8, UInt8*, UInt8*, UInt16*, Win32cr::Foundation::HRESULT),
    get_exception_count : Proc(ISCTE_EAS*, UInt8*, Win32cr::Foundation::HRESULT),
    get_exception_service : Proc(ISCTE_EAS*, UInt8, UInt8*, UInt16*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(ISCTE_EAS*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(ISCTE_EAS*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(ISCTE_EAS*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1ff544d6-161d-4fae-9faa-4f9f492ae999")]
  record ISCTE_EAS, lpVtbl : ISCTE_EASVtbl* do
    GUID = LibC::GUID.new(0x1ff544d6_u32, 0x161d_u16, 0x4fae_u16, StaticArray[0x9f_u8, 0xaa_u8, 0x4f_u8, 0x9f_u8, 0x49_u8, 0x2a_u8, 0xe9_u8, 0x99_u8])
    def query_interface(this : ISCTE_EAS*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISCTE_EAS*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISCTE_EAS*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : ISCTE_EAS*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_sequency_number(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sequency_number.call(this, pbVal)
    end
    def get_protocol_version(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protocol_version.call(this, pbVal)
    end
    def get_eas_event_id(this : ISCTE_EAS*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eas_event_id.call(this, pwVal)
    end
    def get_originator_code(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_originator_code.call(this, pbVal)
    end
    def get_eas_event_code_len(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eas_event_code_len.call(this, pbVal)
    end
    def get_eas_event_code(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eas_event_code.call(this, pbVal)
    end
    def get_raw_nature_of_activation_text_len(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_nature_of_activation_text_len.call(this, pbVal)
    end
    def get_raw_nature_of_activation_text(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_nature_of_activation_text.call(this, pbVal)
    end
    def get_nature_of_activation_text(this : ISCTE_EAS*, bstrIS0639code : Win32cr::Foundation::BSTR, pbstrString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nature_of_activation_text.call(this, bstrIS0639code, pbstrString)
    end
    def get_time_remaining(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_remaining.call(this, pbVal)
    end
    def get_start_time(this : ISCTE_EAS*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_start_time.call(this, pdwVal)
    end
    def get_duration(this : ISCTE_EAS*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, pwVal)
    end
    def get_alert_priority(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alert_priority.call(this, pbVal)
    end
    def get_details_oob_source_id(this : ISCTE_EAS*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_details_oob_source_id.call(this, pwVal)
    end
    def get_details_major(this : ISCTE_EAS*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_details_major.call(this, pwVal)
    end
    def get_details_minor(this : ISCTE_EAS*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_details_minor.call(this, pwVal)
    end
    def get_details_audio_oob_source_id(this : ISCTE_EAS*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_details_audio_oob_source_id.call(this, pwVal)
    end
    def get_alert_text(this : ISCTE_EAS*, bstrIS0639code : Win32cr::Foundation::BSTR, pbstrString : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alert_text.call(this, bstrIS0639code, pbstrString)
    end
    def get_raw_alert_text_len(this : ISCTE_EAS*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_alert_text_len.call(this, pwVal)
    end
    def get_raw_alert_text(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_alert_text.call(this, pbVal)
    end
    def get_location_count(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location_count.call(this, pbVal)
    end
    def get_location_codes(this : ISCTE_EAS*, bIndex : UInt8, pbState : UInt8*, pbCountySubdivision : UInt8*, pwCounty : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_location_codes.call(this, bIndex, pbState, pbCountySubdivision, pwCounty)
    end
    def get_exception_count(this : ISCTE_EAS*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_count.call(this, pbVal)
    end
    def get_exception_service(this : ISCTE_EAS*, bIndex : UInt8, pbIBRef : UInt8*, pwFirst : UInt16*, pwSecond : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_exception_service.call(this, bIndex, pbIBRef, pwFirst, pwSecond)
    end
    def get_count_of_table_descriptors(this : ISCTE_EAS*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : ISCTE_EAS*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : ISCTE_EAS*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end

  end

  @[Extern]
  record IAtscContentAdvisoryDescriptorVtbl,
    query_interface : Proc(IAtscContentAdvisoryDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAtscContentAdvisoryDescriptor*, UInt32),
    release : Proc(IAtscContentAdvisoryDescriptor*, UInt32),
    get_tag : Proc(IAtscContentAdvisoryDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IAtscContentAdvisoryDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_rating_region_count : Proc(IAtscContentAdvisoryDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_rating_region : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_rated_dimensions : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_rating_dimension : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_rating_value : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_rating_description_text : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ff76e60c-0283-43ea-ba32-b422238547ee")]
  record IAtscContentAdvisoryDescriptor, lpVtbl : IAtscContentAdvisoryDescriptorVtbl* do
    GUID = LibC::GUID.new(0xff76e60c_u32, 0x283_u16, 0x43ea_u16, StaticArray[0xba_u8, 0x32_u8, 0xb4_u8, 0x22_u8, 0x23_u8, 0x85_u8, 0x47_u8, 0xee_u8])
    def query_interface(this : IAtscContentAdvisoryDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAtscContentAdvisoryDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAtscContentAdvisoryDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IAtscContentAdvisoryDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IAtscContentAdvisoryDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_rating_region_count(this : IAtscContentAdvisoryDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rating_region_count.call(this, pbVal)
    end
    def get_record_rating_region(this : IAtscContentAdvisoryDescriptor*, bIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_rating_region.call(this, bIndex, pbVal)
    end
    def get_record_rated_dimensions(this : IAtscContentAdvisoryDescriptor*, bIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_rated_dimensions.call(this, bIndex, pbVal)
    end
    def get_record_rating_dimension(this : IAtscContentAdvisoryDescriptor*, bIndexOuter : UInt8, bIndexInner : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_rating_dimension.call(this, bIndexOuter, bIndexInner, pbVal)
    end
    def get_record_rating_value(this : IAtscContentAdvisoryDescriptor*, bIndexOuter : UInt8, bIndexInner : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_rating_value.call(this, bIndexOuter, bIndexInner, pbVal)
    end
    def get_record_rating_description_text(this : IAtscContentAdvisoryDescriptor*, bIndex : UInt8, pbLength : UInt8*, ppText : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_rating_description_text.call(this, bIndex, pbLength, ppText)
    end

  end

  @[Extern]
  record ICaptionServiceDescriptorVtbl,
    query_interface : Proc(ICaptionServiceDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICaptionServiceDescriptor*, UInt32),
    release : Proc(ICaptionServiceDescriptor*, UInt32),
    get_number_of_services : Proc(ICaptionServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_language_code : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_caption_service_number : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_cc_type : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_easy_reader : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_wide_aspect_ratio : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("40834007-6834-46f0-bd45-d5f6a6be258c")]
  record ICaptionServiceDescriptor, lpVtbl : ICaptionServiceDescriptorVtbl* do
    GUID = LibC::GUID.new(0x40834007_u32, 0x6834_u16, 0x46f0_u16, StaticArray[0xbd_u8, 0x45_u8, 0xd5_u8, 0xf6_u8, 0xa6_u8, 0xbe_u8, 0x25_u8, 0x8c_u8])
    def query_interface(this : ICaptionServiceDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICaptionServiceDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICaptionServiceDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_of_services(this : ICaptionServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_services.call(this, pbVal)
    end
    def get_language_code(this : ICaptionServiceDescriptor*, bIndex : UInt8, lang_code : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_code.call(this, bIndex, lang_code)
    end
    def get_caption_service_number(this : ICaptionServiceDescriptor*, bIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_caption_service_number.call(this, bIndex, pbVal)
    end
    def get_cc_type(this : ICaptionServiceDescriptor*, bIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cc_type.call(this, bIndex, pbVal)
    end
    def get_easy_reader(this : ICaptionServiceDescriptor*, bIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_easy_reader.call(this, bIndex, pbVal)
    end
    def get_wide_aspect_ratio(this : ICaptionServiceDescriptor*, bIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_wide_aspect_ratio.call(this, bIndex, pbVal)
    end

  end

  @[Extern]
  record IServiceLocationDescriptorVtbl,
    query_interface : Proc(IServiceLocationDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IServiceLocationDescriptor*, UInt32),
    release : Proc(IServiceLocationDescriptor*, UInt32),
    get_pcr_pid : Proc(IServiceLocationDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_number_of_elements : Proc(IServiceLocationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_element_stream_type : Proc(IServiceLocationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_element_pid : Proc(IServiceLocationDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_element_language_code : Proc(IServiceLocationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("58c3c827-9d91-4215-bff3-820a49f0904c")]
  record IServiceLocationDescriptor, lpVtbl : IServiceLocationDescriptorVtbl* do
    GUID = LibC::GUID.new(0x58c3c827_u32, 0x9d91_u16, 0x4215_u16, StaticArray[0xbf_u8, 0xf3_u8, 0x82_u8, 0xa_u8, 0x49_u8, 0xf0_u8, 0x90_u8, 0x4c_u8])
    def query_interface(this : IServiceLocationDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IServiceLocationDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IServiceLocationDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_pcr_pid(this : IServiceLocationDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pcr_pid.call(this, pwVal)
    end
    def get_number_of_elements(this : IServiceLocationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_elements.call(this, pbVal)
    end
    def get_element_stream_type(this : IServiceLocationDescriptor*, bIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_element_stream_type.call(this, bIndex, pbVal)
    end
    def get_element_pid(this : IServiceLocationDescriptor*, bIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_element_pid.call(this, bIndex, pwVal)
    end
    def get_element_language_code(this : IServiceLocationDescriptor*, bIndex : UInt8, lang_code : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_element_language_code.call(this, bIndex, lang_code)
    end

  end

  @[Extern]
  record IAttributeSetVtbl,
    query_interface : Proc(IAttributeSet*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAttributeSet*, UInt32),
    release : Proc(IAttributeSet*, UInt32),
    set_attrib : Proc(IAttributeSet*, LibC::GUID, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("583ec3cc-4960-4857-982b-41a33ea0a006")]
  record IAttributeSet, lpVtbl : IAttributeSetVtbl* do
    GUID = LibC::GUID.new(0x583ec3cc_u32, 0x4960_u16, 0x4857_u16, StaticArray[0x98_u8, 0x2b_u8, 0x41_u8, 0xa3_u8, 0x3e_u8, 0xa0_u8, 0xa0_u8, 0x6_u8])
    def query_interface(this : IAttributeSet*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAttributeSet*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAttributeSet*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_attrib(this : IAttributeSet*, guidAttribute : LibC::GUID, pbAttribute : UInt8*, dwAttributeLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_attrib.call(this, guidAttribute, pbAttribute, dwAttributeLength)
    end

  end

  @[Extern]
  record IAttributeGetVtbl,
    query_interface : Proc(IAttributeGet*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAttributeGet*, UInt32),
    release : Proc(IAttributeGet*, UInt32),
    get_count : Proc(IAttributeGet*, Int32*, Win32cr::Foundation::HRESULT),
    get_attrib_indexed : Proc(IAttributeGet*, Int32, LibC::GUID*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_attrib : Proc(IAttributeGet*, LibC::GUID, UInt8*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("52dbd1ec-e48f-4528-9232-f442a68f0ae1")]
  record IAttributeGet, lpVtbl : IAttributeGetVtbl* do
    GUID = LibC::GUID.new(0x52dbd1ec_u32, 0xe48f_u16, 0x4528_u16, StaticArray[0x92_u8, 0x32_u8, 0xf4_u8, 0x42_u8, 0xa6_u8, 0x8f_u8, 0xa_u8, 0xe1_u8])
    def query_interface(this : IAttributeGet*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAttributeGet*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAttributeGet*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_count(this : IAttributeGet*, plCount : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, plCount)
    end
    def get_attrib_indexed(this : IAttributeGet*, lIndex : Int32, pguidAttribute : LibC::GUID*, pbAttribute : UInt8*, pdwAttributeLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attrib_indexed.call(this, lIndex, pguidAttribute, pbAttribute, pdwAttributeLength)
    end
    def get_attrib(this : IAttributeGet*, guidAttribute : LibC::GUID, pbAttribute : UInt8*, pdwAttributeLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attrib.call(this, guidAttribute, pbAttribute, pdwAttributeLength)
    end

  end

  @[Extern]
  record IDvbSiParserVtbl,
    query_interface : Proc(IDvbSiParser*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbSiParser*, UInt32),
    release : Proc(IDvbSiParser*, UInt32),
    initialize__ : Proc(IDvbSiParser*, Void*, Win32cr::Foundation::HRESULT),
    get_pat : Proc(IDvbSiParser*, Void**, Win32cr::Foundation::HRESULT),
    get_cat : Proc(IDvbSiParser*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_pmt : Proc(IDvbSiParser*, UInt16, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_tsdt : Proc(IDvbSiParser*, Void**, Win32cr::Foundation::HRESULT),
    get_nit : Proc(IDvbSiParser*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_sdt_1 : Proc(IDvbSiParser*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_eit : Proc(IDvbSiParser*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_bat : Proc(IDvbSiParser*, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_rst : Proc(IDvbSiParser*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_st : Proc(IDvbSiParser*, UInt16, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_tdt : Proc(IDvbSiParser*, Void**, Win32cr::Foundation::HRESULT),
    get_tot : Proc(IDvbSiParser*, Void**, Win32cr::Foundation::HRESULT),
    get_dit : Proc(IDvbSiParser*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_sit : Proc(IDvbSiParser*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b758a7bd-14dc-449d-b828-35909acb3b1e")]
  record IDvbSiParser, lpVtbl : IDvbSiParserVtbl* do
    GUID = LibC::GUID.new(0xb758a7bd_u32, 0x14dc_u16, 0x449d_u16, StaticArray[0xb8_u8, 0x28_u8, 0x35_u8, 0x90_u8, 0x9a_u8, 0xcb_u8, 0x3b_u8, 0x1e_u8])
    def query_interface(this : IDvbSiParser*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbSiParser*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbSiParser*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDvbSiParser*, punkMpeg2Data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, punkMpeg2Data)
    end
    def get_pat(this : IDvbSiParser*, ppPAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pat.call(this, ppPAT)
    end
    def get_cat(this : IDvbSiParser*, dwTimeout : UInt32, ppCAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cat.call(this, dwTimeout, ppCAT)
    end
    def get_pmt(this : IDvbSiParser*, pid : UInt16, pwProgramNumber : UInt16*, ppPMT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pmt.call(this, pid, pwProgramNumber, ppPMT)
    end
    def get_tsdt(this : IDvbSiParser*, ppTSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tsdt.call(this, ppTSDT)
    end
    def get_nit(this : IDvbSiParser*, tableId : UInt8, pwNetworkId : UInt16*, ppNIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nit.call(this, tableId, pwNetworkId, ppNIT)
    end
    def get_sdt_1(this : IDvbSiParser*, tableId : UInt8, pwTransportStreamId : UInt16*, ppSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sdt_1.call(this, tableId, pwTransportStreamId, ppSDT)
    end
    def get_eit(this : IDvbSiParser*, tableId : UInt8, pwServiceId : UInt16*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eit.call(this, tableId, pwServiceId, ppEIT)
    end
    def get_bat(this : IDvbSiParser*, pwBouquetId : UInt16*, ppBAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bat.call(this, pwBouquetId, ppBAT)
    end
    def get_rst(this : IDvbSiParser*, dwTimeout : UInt32, ppRST : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rst.call(this, dwTimeout, ppRST)
    end
    def get_st(this : IDvbSiParser*, pid : UInt16, dwTimeout : UInt32, ppST : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_st.call(this, pid, dwTimeout, ppST)
    end
    def get_tdt(this : IDvbSiParser*, ppTDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tdt.call(this, ppTDT)
    end
    def get_tot(this : IDvbSiParser*, ppTOT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tot.call(this, ppTOT)
    end
    def get_dit(this : IDvbSiParser*, dwTimeout : UInt32, ppDIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dit.call(this, dwTimeout, ppDIT)
    end
    def get_sit(this : IDvbSiParser*, dwTimeout : UInt32, ppSIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sit.call(this, dwTimeout, ppSIT)
    end

  end

  @[Extern]
  record IDvbSiParser2Vtbl,
    query_interface : Proc(IDvbSiParser2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbSiParser2*, UInt32),
    release : Proc(IDvbSiParser2*, UInt32),
    initialize__ : Proc(IDvbSiParser2*, Void*, Win32cr::Foundation::HRESULT),
    get_pat : Proc(IDvbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_cat : Proc(IDvbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_pmt : Proc(IDvbSiParser2*, UInt16, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_tsdt : Proc(IDvbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_nit : Proc(IDvbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_sdt_1 : Proc(IDvbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_eit : Proc(IDvbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_bat : Proc(IDvbSiParser2*, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_rst : Proc(IDvbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_st : Proc(IDvbSiParser2*, UInt16, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_tdt : Proc(IDvbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_tot : Proc(IDvbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_dit : Proc(IDvbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_sit : Proc(IDvbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_eit2 : Proc(IDvbSiParser2*, UInt8, UInt16*, UInt8*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0ac5525f-f816-42f4-93ba-4c0f32f46e54")]
  record IDvbSiParser2, lpVtbl : IDvbSiParser2Vtbl* do
    GUID = LibC::GUID.new(0xac5525f_u32, 0xf816_u16, 0x42f4_u16, StaticArray[0x93_u8, 0xba_u8, 0x4c_u8, 0xf_u8, 0x32_u8, 0xf4_u8, 0x6e_u8, 0x54_u8])
    def query_interface(this : IDvbSiParser2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbSiParser2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbSiParser2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDvbSiParser2*, punkMpeg2Data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, punkMpeg2Data)
    end
    def get_pat(this : IDvbSiParser2*, ppPAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pat.call(this, ppPAT)
    end
    def get_cat(this : IDvbSiParser2*, dwTimeout : UInt32, ppCAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cat.call(this, dwTimeout, ppCAT)
    end
    def get_pmt(this : IDvbSiParser2*, pid : UInt16, pwProgramNumber : UInt16*, ppPMT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pmt.call(this, pid, pwProgramNumber, ppPMT)
    end
    def get_tsdt(this : IDvbSiParser2*, ppTSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tsdt.call(this, ppTSDT)
    end
    def get_nit(this : IDvbSiParser2*, tableId : UInt8, pwNetworkId : UInt16*, ppNIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nit.call(this, tableId, pwNetworkId, ppNIT)
    end
    def get_sdt_1(this : IDvbSiParser2*, tableId : UInt8, pwTransportStreamId : UInt16*, ppSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sdt_1.call(this, tableId, pwTransportStreamId, ppSDT)
    end
    def get_eit(this : IDvbSiParser2*, tableId : UInt8, pwServiceId : UInt16*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eit.call(this, tableId, pwServiceId, ppEIT)
    end
    def get_bat(this : IDvbSiParser2*, pwBouquetId : UInt16*, ppBAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bat.call(this, pwBouquetId, ppBAT)
    end
    def get_rst(this : IDvbSiParser2*, dwTimeout : UInt32, ppRST : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rst.call(this, dwTimeout, ppRST)
    end
    def get_st(this : IDvbSiParser2*, pid : UInt16, dwTimeout : UInt32, ppST : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_st.call(this, pid, dwTimeout, ppST)
    end
    def get_tdt(this : IDvbSiParser2*, ppTDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tdt.call(this, ppTDT)
    end
    def get_tot(this : IDvbSiParser2*, ppTOT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tot.call(this, ppTOT)
    end
    def get_dit(this : IDvbSiParser2*, dwTimeout : UInt32, ppDIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dit.call(this, dwTimeout, ppDIT)
    end
    def get_sit(this : IDvbSiParser2*, dwTimeout : UInt32, ppSIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sit.call(this, dwTimeout, ppSIT)
    end
    def get_eit2(this : IDvbSiParser2*, tableId : UInt8, pwServiceId : UInt16*, pbSegment : UInt8*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eit2.call(this, tableId, pwServiceId, pbSegment, ppEIT)
    end

  end

  @[Extern]
  record IIsdbSiParser2Vtbl,
    query_interface : Proc(IIsdbSiParser2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbSiParser2*, UInt32),
    release : Proc(IIsdbSiParser2*, UInt32),
    initialize__ : Proc(IIsdbSiParser2*, Void*, Win32cr::Foundation::HRESULT),
    get_pat : Proc(IIsdbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_cat : Proc(IIsdbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_pmt : Proc(IIsdbSiParser2*, UInt16, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_tsdt : Proc(IIsdbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_nit : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_sdt_1 : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_eit : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_bat : Proc(IIsdbSiParser2*, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_rst : Proc(IIsdbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_st : Proc(IIsdbSiParser2*, UInt16, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_tdt : Proc(IIsdbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_tot : Proc(IIsdbSiParser2*, Void**, Win32cr::Foundation::HRESULT),
    get_dit : Proc(IIsdbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_sit : Proc(IIsdbSiParser2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_eit2 : Proc(IIsdbSiParser2*, UInt8, UInt16*, UInt8*, Void**, Win32cr::Foundation::HRESULT),
    get_sdt_2 : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_bit : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_nbit : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_ldt : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_sdtt : Proc(IIsdbSiParser2*, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_cdt : Proc(IIsdbSiParser2*, UInt8, UInt8, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_emm : Proc(IIsdbSiParser2*, UInt16, UInt16, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("900e4bb7-18cd-453f-98be-3be6aa211772")]
  record IIsdbSiParser2, lpVtbl : IIsdbSiParser2Vtbl* do
    GUID = LibC::GUID.new(0x900e4bb7_u32, 0x18cd_u16, 0x453f_u16, StaticArray[0x98_u8, 0xbe_u8, 0x3b_u8, 0xe6_u8, 0xaa_u8, 0x21_u8, 0x17_u8, 0x72_u8])
    def query_interface(this : IIsdbSiParser2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbSiParser2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbSiParser2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IIsdbSiParser2*, punkMpeg2Data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, punkMpeg2Data)
    end
    def get_pat(this : IIsdbSiParser2*, ppPAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pat.call(this, ppPAT)
    end
    def get_cat(this : IIsdbSiParser2*, dwTimeout : UInt32, ppCAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cat.call(this, dwTimeout, ppCAT)
    end
    def get_pmt(this : IIsdbSiParser2*, pid : UInt16, pwProgramNumber : UInt16*, ppPMT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pmt.call(this, pid, pwProgramNumber, ppPMT)
    end
    def get_tsdt(this : IIsdbSiParser2*, ppTSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tsdt.call(this, ppTSDT)
    end
    def get_nit(this : IIsdbSiParser2*, tableId : UInt8, pwNetworkId : UInt16*, ppNIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nit.call(this, tableId, pwNetworkId, ppNIT)
    end
    def get_sdt_1(this : IIsdbSiParser2*, tableId : UInt8, pwTransportStreamId : UInt16*, ppSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sdt_1.call(this, tableId, pwTransportStreamId, ppSDT)
    end
    def get_eit(this : IIsdbSiParser2*, tableId : UInt8, pwServiceId : UInt16*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eit.call(this, tableId, pwServiceId, ppEIT)
    end
    def get_bat(this : IIsdbSiParser2*, pwBouquetId : UInt16*, ppBAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bat.call(this, pwBouquetId, ppBAT)
    end
    def get_rst(this : IIsdbSiParser2*, dwTimeout : UInt32, ppRST : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rst.call(this, dwTimeout, ppRST)
    end
    def get_st(this : IIsdbSiParser2*, pid : UInt16, dwTimeout : UInt32, ppST : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_st.call(this, pid, dwTimeout, ppST)
    end
    def get_tdt(this : IIsdbSiParser2*, ppTDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tdt.call(this, ppTDT)
    end
    def get_tot(this : IIsdbSiParser2*, ppTOT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tot.call(this, ppTOT)
    end
    def get_dit(this : IIsdbSiParser2*, dwTimeout : UInt32, ppDIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dit.call(this, dwTimeout, ppDIT)
    end
    def get_sit(this : IIsdbSiParser2*, dwTimeout : UInt32, ppSIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sit.call(this, dwTimeout, ppSIT)
    end
    def get_eit2(this : IIsdbSiParser2*, tableId : UInt8, pwServiceId : UInt16*, pbSegment : UInt8*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eit2.call(this, tableId, pwServiceId, pbSegment, ppEIT)
    end
    def get_sdt_2(this : IIsdbSiParser2*, tableId : UInt8, pwTransportStreamId : UInt16*, ppSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sdt_2.call(this, tableId, pwTransportStreamId, ppSDT)
    end
    def get_bit(this : IIsdbSiParser2*, tableId : UInt8, pwOriginalNetworkId : UInt16*, ppBIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bit.call(this, tableId, pwOriginalNetworkId, ppBIT)
    end
    def get_nbit(this : IIsdbSiParser2*, tableId : UInt8, pwOriginalNetworkId : UInt16*, ppNBIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nbit.call(this, tableId, pwOriginalNetworkId, ppNBIT)
    end
    def get_ldt(this : IIsdbSiParser2*, tableId : UInt8, pwOriginalServiceId : UInt16*, ppLDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ldt.call(this, tableId, pwOriginalServiceId, ppLDT)
    end
    def get_sdtt(this : IIsdbSiParser2*, tableId : UInt8, pwTableIdExt : UInt16*, ppSDTT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sdtt.call(this, tableId, pwTableIdExt, ppSDTT)
    end
    def get_cdt(this : IIsdbSiParser2*, tableId : UInt8, bSectionNumber : UInt8, pwDownloadDataId : UInt16*, ppCDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cdt.call(this, tableId, bSectionNumber, pwDownloadDataId, ppCDT)
    end
    def get_emm(this : IIsdbSiParser2*, pid : UInt16, wTableIdExt : UInt16, ppEMM : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_emm.call(this, pid, wTableIdExt, ppEMM)
    end

  end

  @[Extern]
  record IDVB_NITVtbl,
    query_interface : Proc(IDVB_NIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_NIT*, UInt32),
    release : Proc(IDVB_NIT*, UInt32),
    initialize__ : Proc(IDVB_NIT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IDVB_NIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_network_id : Proc(IDVB_NIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IDVB_NIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IDVB_NIT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IDVB_NIT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDVB_NIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_transport_stream_id : Proc(IDVB_NIT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_original_network_id : Proc(IDVB_NIT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IDVB_NIT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IDVB_NIT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IDVB_NIT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IDVB_NIT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IDVB_NIT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IDVB_NIT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IDVB_NIT*, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IDVB_NIT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c64935f4-29e4-4e22-911a-63f7f55cb097")]
  record IDVB_NIT, lpVtbl : IDVB_NITVtbl* do
    GUID = LibC::GUID.new(0xc64935f4_u32, 0x29e4_u16, 0x4e22_u16, StaticArray[0x91_u8, 0x1a_u8, 0x63_u8, 0xf7_u8, 0xf5_u8, 0x5c_u8, 0xb0_u8, 0x97_u8])
    def query_interface(this : IDVB_NIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_NIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_NIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_NIT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IDVB_NIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_network_id(this : IDVB_NIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network_id.call(this, pwVal)
    end
    def get_count_of_table_descriptors(this : IDVB_NIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IDVB_NIT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IDVB_NIT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def get_count_of_records(this : IDVB_NIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_transport_stream_id(this : IDVB_NIT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_transport_stream_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_original_network_id(this : IDVB_NIT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_original_network_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_count_of_descriptors(this : IDVB_NIT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IDVB_NIT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IDVB_NIT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : IDVB_NIT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IDVB_NIT*, ppNIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppNIT)
    end
    def register_for_when_current(this : IDVB_NIT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IDVB_NIT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end
    def get_version_hash(this : IDVB_NIT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IDVB_SDTVtbl,
    query_interface : Proc(IDVB_SDT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_SDT*, UInt32),
    release : Proc(IDVB_SDT*, UInt32),
    initialize__ : Proc(IDVB_SDT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IDVB_SDT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IDVB_SDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IDVB_SDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDVB_SDT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDVB_SDT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_eit_schedule_flag : Proc(IDVB_SDT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_eit_present_following_flag : Proc(IDVB_SDT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_running_status : Proc(IDVB_SDT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_free_ca_mode : Proc(IDVB_SDT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IDVB_SDT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IDVB_SDT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IDVB_SDT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IDVB_SDT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IDVB_SDT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IDVB_SDT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IDVB_SDT*, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IDVB_SDT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("02cad8d3-fe43-48e2-90bd-450ed9a8a5fd")]
  record IDVB_SDT, lpVtbl : IDVB_SDTVtbl* do
    GUID = LibC::GUID.new(0x2cad8d3_u32, 0xfe43_u16, 0x48e2_u16, StaticArray[0x90_u8, 0xbd_u8, 0x45_u8, 0xe_u8, 0xd9_u8, 0xa8_u8, 0xa5_u8, 0xfd_u8])
    def query_interface(this : IDVB_SDT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_SDT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_SDT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_SDT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IDVB_SDT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_transport_stream_id(this : IDVB_SDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_original_network_id(this : IDVB_SDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_count_of_records(this : IDVB_SDT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_service_id(this : IDVB_SDT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_eit_schedule_flag(this : IDVB_SDT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_eit_schedule_flag.call(this, dwRecordIndex, pfVal)
    end
    def get_record_eit_present_following_flag(this : IDVB_SDT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_eit_present_following_flag.call(this, dwRecordIndex, pfVal)
    end
    def get_record_running_status(this : IDVB_SDT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_running_status.call(this, dwRecordIndex, pbVal)
    end
    def get_record_free_ca_mode(this : IDVB_SDT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_free_ca_mode.call(this, dwRecordIndex, pfVal)
    end
    def get_record_count_of_descriptors(this : IDVB_SDT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IDVB_SDT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IDVB_SDT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : IDVB_SDT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IDVB_SDT*, ppSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppSDT)
    end
    def register_for_when_current(this : IDVB_SDT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IDVB_SDT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end
    def get_version_hash(this : IDVB_SDT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IISDB_SDTVtbl,
    query_interface : Proc(IISDB_SDT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDB_SDT*, UInt32),
    release : Proc(IISDB_SDT*, UInt32),
    initialize__ : Proc(IISDB_SDT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IISDB_SDT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IISDB_SDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IISDB_SDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IISDB_SDT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IISDB_SDT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_eit_schedule_flag : Proc(IISDB_SDT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_eit_present_following_flag : Proc(IISDB_SDT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_running_status : Proc(IISDB_SDT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_free_ca_mode : Proc(IISDB_SDT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IISDB_SDT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IISDB_SDT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IISDB_SDT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IISDB_SDT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IISDB_SDT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IISDB_SDT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IISDB_SDT*, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IISDB_SDT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_eit_user_defined_flags : Proc(IISDB_SDT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3f3dc9a2-bb32-4fb9-ae9e-d856848927a3")]
  record IISDB_SDT, lpVtbl : IISDB_SDTVtbl* do
    GUID = LibC::GUID.new(0x3f3dc9a2_u32, 0xbb32_u16, 0x4fb9_u16, StaticArray[0xae_u8, 0x9e_u8, 0xd8_u8, 0x56_u8, 0x84_u8, 0x89_u8, 0x27_u8, 0xa3_u8])
    def query_interface(this : IISDB_SDT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDB_SDT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDB_SDT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IISDB_SDT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IISDB_SDT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_transport_stream_id(this : IISDB_SDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_original_network_id(this : IISDB_SDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_count_of_records(this : IISDB_SDT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_service_id(this : IISDB_SDT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_eit_schedule_flag(this : IISDB_SDT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_eit_schedule_flag.call(this, dwRecordIndex, pfVal)
    end
    def get_record_eit_present_following_flag(this : IISDB_SDT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_eit_present_following_flag.call(this, dwRecordIndex, pfVal)
    end
    def get_record_running_status(this : IISDB_SDT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_running_status.call(this, dwRecordIndex, pbVal)
    end
    def get_record_free_ca_mode(this : IISDB_SDT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_free_ca_mode.call(this, dwRecordIndex, pfVal)
    end
    def get_record_count_of_descriptors(this : IISDB_SDT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IISDB_SDT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IISDB_SDT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : IISDB_SDT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IISDB_SDT*, ppSDT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppSDT)
    end
    def register_for_when_current(this : IISDB_SDT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IISDB_SDT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end
    def get_version_hash(this : IISDB_SDT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end
    def get_record_eit_user_defined_flags(this : IISDB_SDT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_eit_user_defined_flags.call(this, dwRecordIndex, pbVal)
    end

  end

  @[Extern]
  record IDVB_EITVtbl,
    query_interface : Proc(IDVB_EIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_EIT*, UInt32),
    release : Proc(IDVB_EIT*, UInt32),
    initialize__ : Proc(IDVB_EIT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IDVB_EIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_id : Proc(IDVB_EIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IDVB_EIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IDVB_EIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_segment_last_section_number : Proc(IDVB_EIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_last_table_id : Proc(IDVB_EIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDVB_EIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_event_id : Proc(IDVB_EIT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_start_time : Proc(IDVB_EIT*, UInt32, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_record_duration : Proc(IDVB_EIT*, UInt32, Win32cr::Media::DirectShow::MPEG_TIME*, Win32cr::Foundation::HRESULT),
    get_record_running_status : Proc(IDVB_EIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_free_ca_mode : Proc(IDVB_EIT*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IDVB_EIT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IDVB_EIT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IDVB_EIT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IDVB_EIT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IDVB_EIT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IDVB_EIT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IDVB_EIT*, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IDVB_EIT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("442db029-02cb-4495-8b92-1c13375bce99")]
  record IDVB_EIT, lpVtbl : IDVB_EITVtbl* do
    GUID = LibC::GUID.new(0x442db029_u32, 0x2cb_u16, 0x4495_u16, StaticArray[0x8b_u8, 0x92_u8, 0x1c_u8, 0x13_u8, 0x37_u8, 0x5b_u8, 0xce_u8, 0x99_u8])
    def query_interface(this : IDVB_EIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_EIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_EIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_EIT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IDVB_EIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_service_id(this : IDVB_EIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_id.call(this, pwVal)
    end
    def get_transport_stream_id(this : IDVB_EIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_original_network_id(this : IDVB_EIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_segment_last_section_number(this : IDVB_EIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_segment_last_section_number.call(this, pbVal)
    end
    def get_last_table_id(this : IDVB_EIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_table_id.call(this, pbVal)
    end
    def get_count_of_records(this : IDVB_EIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_event_id(this : IDVB_EIT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_event_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_start_time(this : IDVB_EIT*, dwRecordIndex : UInt32, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_start_time.call(this, dwRecordIndex, pmdtVal)
    end
    def get_record_duration(this : IDVB_EIT*, dwRecordIndex : UInt32, pmdVal : Win32cr::Media::DirectShow::MPEG_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_duration.call(this, dwRecordIndex, pmdVal)
    end
    def get_record_running_status(this : IDVB_EIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_running_status.call(this, dwRecordIndex, pbVal)
    end
    def get_record_free_ca_mode(this : IDVB_EIT*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_free_ca_mode.call(this, dwRecordIndex, pfVal)
    end
    def get_record_count_of_descriptors(this : IDVB_EIT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IDVB_EIT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IDVB_EIT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : IDVB_EIT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IDVB_EIT*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppEIT)
    end
    def register_for_when_current(this : IDVB_EIT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IDVB_EIT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end
    def get_version_hash(this : IDVB_EIT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IDVB_EIT2Vtbl,
    query_interface : Proc(IDVB_EIT2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_EIT2*, UInt32),
    release : Proc(IDVB_EIT2*, UInt32),
    initialize__ : Proc(IDVB_EIT2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IDVB_EIT2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_id : Proc(IDVB_EIT2*, UInt16*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IDVB_EIT2*, UInt16*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IDVB_EIT2*, UInt16*, Win32cr::Foundation::HRESULT),
    get_segment_last_section_number : Proc(IDVB_EIT2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_last_table_id : Proc(IDVB_EIT2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDVB_EIT2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_event_id : Proc(IDVB_EIT2*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_start_time : Proc(IDVB_EIT2*, UInt32, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_record_duration : Proc(IDVB_EIT2*, UInt32, Win32cr::Media::DirectShow::MPEG_TIME*, Win32cr::Foundation::HRESULT),
    get_record_running_status : Proc(IDVB_EIT2*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_free_ca_mode : Proc(IDVB_EIT2*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IDVB_EIT2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IDVB_EIT2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IDVB_EIT2*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IDVB_EIT2*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IDVB_EIT2*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IDVB_EIT2*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IDVB_EIT2*, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IDVB_EIT2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_segment_info : Proc(IDVB_EIT2*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_section : Proc(IDVB_EIT2*, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("61a389e0-9b9e-4ba0-aeea-5ddd159820ea")]
  record IDVB_EIT2, lpVtbl : IDVB_EIT2Vtbl* do
    GUID = LibC::GUID.new(0x61a389e0_u32, 0x9b9e_u16, 0x4ba0_u16, StaticArray[0xae_u8, 0xea_u8, 0x5d_u8, 0xdd_u8, 0x15_u8, 0x98_u8, 0x20_u8, 0xea_u8])
    def query_interface(this : IDVB_EIT2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_EIT2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_EIT2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_EIT2*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IDVB_EIT2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_service_id(this : IDVB_EIT2*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_id.call(this, pwVal)
    end
    def get_transport_stream_id(this : IDVB_EIT2*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_original_network_id(this : IDVB_EIT2*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_segment_last_section_number(this : IDVB_EIT2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_segment_last_section_number.call(this, pbVal)
    end
    def get_last_table_id(this : IDVB_EIT2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_table_id.call(this, pbVal)
    end
    def get_count_of_records(this : IDVB_EIT2*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_event_id(this : IDVB_EIT2*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_event_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_start_time(this : IDVB_EIT2*, dwRecordIndex : UInt32, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_start_time.call(this, dwRecordIndex, pmdtVal)
    end
    def get_record_duration(this : IDVB_EIT2*, dwRecordIndex : UInt32, pmdVal : Win32cr::Media::DirectShow::MPEG_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_duration.call(this, dwRecordIndex, pmdVal)
    end
    def get_record_running_status(this : IDVB_EIT2*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_running_status.call(this, dwRecordIndex, pbVal)
    end
    def get_record_free_ca_mode(this : IDVB_EIT2*, dwRecordIndex : UInt32, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_free_ca_mode.call(this, dwRecordIndex, pfVal)
    end
    def get_record_count_of_descriptors(this : IDVB_EIT2*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IDVB_EIT2*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IDVB_EIT2*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : IDVB_EIT2*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IDVB_EIT2*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppEIT)
    end
    def register_for_when_current(this : IDVB_EIT2*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IDVB_EIT2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end
    def get_version_hash(this : IDVB_EIT2*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end
    def get_segment_info(this : IDVB_EIT2*, pbTid : UInt8*, pbSegment : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_segment_info.call(this, pbTid, pbSegment)
    end
    def get_record_section(this : IDVB_EIT2*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_section.call(this, dwRecordIndex, pbVal)
    end

  end

  @[Extern]
  record IDVB_BATVtbl,
    query_interface : Proc(IDVB_BAT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_BAT*, UInt32),
    release : Proc(IDVB_BAT*, UInt32),
    initialize__ : Proc(IDVB_BAT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IDVB_BAT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_bouquet_id : Proc(IDVB_BAT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IDVB_BAT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IDVB_BAT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IDVB_BAT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDVB_BAT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_transport_stream_id : Proc(IDVB_BAT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_original_network_id : Proc(IDVB_BAT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IDVB_BAT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IDVB_BAT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IDVB_BAT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IDVB_BAT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IDVB_BAT*, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IDVB_BAT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IDVB_BAT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ece9bb0c-43b6-4558-a0ec-1812c34cd6ca")]
  record IDVB_BAT, lpVtbl : IDVB_BATVtbl* do
    GUID = LibC::GUID.new(0xece9bb0c_u32, 0x43b6_u16, 0x4558_u16, StaticArray[0xa0_u8, 0xec_u8, 0x18_u8, 0x12_u8, 0xc3_u8, 0x4c_u8, 0xd6_u8, 0xca_u8])
    def query_interface(this : IDVB_BAT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_BAT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_BAT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_BAT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IDVB_BAT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_bouquet_id(this : IDVB_BAT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bouquet_id.call(this, pwVal)
    end
    def get_count_of_table_descriptors(this : IDVB_BAT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IDVB_BAT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IDVB_BAT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def get_count_of_records(this : IDVB_BAT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_transport_stream_id(this : IDVB_BAT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_transport_stream_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_original_network_id(this : IDVB_BAT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_original_network_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_count_of_descriptors(this : IDVB_BAT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IDVB_BAT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IDVB_BAT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : IDVB_BAT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IDVB_BAT*, ppBAT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, ppBAT)
    end
    def register_for_when_current(this : IDVB_BAT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IDVB_BAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end

  end

  @[Extern]
  record IDVB_RSTVtbl,
    query_interface : Proc(IDVB_RST*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_RST*, UInt32),
    release : Proc(IDVB_RST*, UInt32),
    initialize__ : Proc(IDVB_RST*, Void*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDVB_RST*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_transport_stream_id : Proc(IDVB_RST*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_original_network_id : Proc(IDVB_RST*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDVB_RST*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_event_id : Proc(IDVB_RST*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_running_status : Proc(IDVB_RST*, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f47dcd04-1e23-4fb7-9f96-b40eead10b2b")]
  record IDVB_RST, lpVtbl : IDVB_RSTVtbl* do
    GUID = LibC::GUID.new(0xf47dcd04_u32, 0x1e23_u16, 0x4fb7_u16, StaticArray[0x9f_u8, 0x96_u8, 0xb4_u8, 0xe_u8, 0xea_u8, 0xd1_u8, 0xb_u8, 0x2b_u8])
    def query_interface(this : IDVB_RST*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_RST*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_RST*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_RST*, pSectionList : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList)
    end
    def get_count_of_records(this : IDVB_RST*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_transport_stream_id(this : IDVB_RST*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_transport_stream_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_original_network_id(this : IDVB_RST*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_original_network_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_service_id(this : IDVB_RST*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_event_id(this : IDVB_RST*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_event_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_running_status(this : IDVB_RST*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_running_status.call(this, dwRecordIndex, pbVal)
    end

  end

  @[Extern]
  record IDVB_STVtbl,
    query_interface : Proc(IDVB_ST*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_ST*, UInt32),
    release : Proc(IDVB_ST*, UInt32),
    initialize__ : Proc(IDVB_ST*, Void*, Win32cr::Foundation::HRESULT),
    get_data_length : Proc(IDVB_ST*, UInt16*, Win32cr::Foundation::HRESULT),
    get_data : Proc(IDVB_ST*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4d5b9f23-2a02-45de-bcda-5d5dbfbfbe62")]
  record IDVB_ST, lpVtbl : IDVB_STVtbl* do
    GUID = LibC::GUID.new(0x4d5b9f23_u32, 0x2a02_u16, 0x45de_u16, StaticArray[0xbc_u8, 0xda_u8, 0x5d_u8, 0x5d_u8, 0xbf_u8, 0xbf_u8, 0xbe_u8, 0x62_u8])
    def query_interface(this : IDVB_ST*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_ST*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_ST*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_ST*, pSectionList : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList)
    end
    def get_data_length(this : IDVB_ST*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_length.call(this, pwVal)
    end
    def get_data(this : IDVB_ST*, ppData : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, ppData)
    end

  end

  @[Extern]
  record IDVB_TDTVtbl,
    query_interface : Proc(IDVB_TDT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_TDT*, UInt32),
    release : Proc(IDVB_TDT*, UInt32),
    initialize__ : Proc(IDVB_TDT*, Void*, Win32cr::Foundation::HRESULT),
    get_utc_time : Proc(IDVB_TDT*, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0780dc7d-d55c-4aef-97e6-6b75906e2796")]
  record IDVB_TDT, lpVtbl : IDVB_TDTVtbl* do
    GUID = LibC::GUID.new(0x780dc7d_u32, 0xd55c_u16, 0x4aef_u16, StaticArray[0x97_u8, 0xe6_u8, 0x6b_u8, 0x75_u8, 0x90_u8, 0x6e_u8, 0x27_u8, 0x96_u8])
    def query_interface(this : IDVB_TDT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_TDT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_TDT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_TDT*, pSectionList : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList)
    end
    def get_utc_time(this : IDVB_TDT*, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_utc_time.call(this, pmdtVal)
    end

  end

  @[Extern]
  record IDVB_TOTVtbl,
    query_interface : Proc(IDVB_TOT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_TOT*, UInt32),
    release : Proc(IDVB_TOT*, UInt32),
    initialize__ : Proc(IDVB_TOT*, Void*, Win32cr::Foundation::HRESULT),
    get_utc_time : Proc(IDVB_TOT*, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IDVB_TOT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IDVB_TOT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IDVB_TOT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83295d6a-faba-4ee1-9b15-8067696910ae")]
  record IDVB_TOT, lpVtbl : IDVB_TOTVtbl* do
    GUID = LibC::GUID.new(0x83295d6a_u32, 0xfaba_u16, 0x4ee1_u16, StaticArray[0x9b_u8, 0x15_u8, 0x80_u8, 0x67_u8, 0x69_u8, 0x69_u8, 0x10_u8, 0xae_u8])
    def query_interface(this : IDVB_TOT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_TOT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_TOT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_TOT*, pSectionList : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList)
    end
    def get_utc_time(this : IDVB_TOT*, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_utc_time.call(this, pmdtVal)
    end
    def get_count_of_table_descriptors(this : IDVB_TOT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IDVB_TOT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IDVB_TOT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end

  end

  @[Extern]
  record IDVB_DITVtbl,
    query_interface : Proc(IDVB_DIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_DIT*, UInt32),
    release : Proc(IDVB_DIT*, UInt32),
    initialize__ : Proc(IDVB_DIT*, Void*, Win32cr::Foundation::HRESULT),
    get_transition_flag : Proc(IDVB_DIT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("91bffdf9-9432-410f-86ef-1c228ed0ad70")]
  record IDVB_DIT, lpVtbl : IDVB_DITVtbl* do
    GUID = LibC::GUID.new(0x91bffdf9_u32, 0x9432_u16, 0x410f_u16, StaticArray[0x86_u8, 0xef_u8, 0x1c_u8, 0x22_u8, 0x8e_u8, 0xd0_u8, 0xad_u8, 0x70_u8])
    def query_interface(this : IDVB_DIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_DIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_DIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_DIT*, pSectionList : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList)
    end
    def get_transition_flag(this : IDVB_DIT*, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transition_flag.call(this, pfVal)
    end

  end

  @[Extern]
  record IDVB_SITVtbl,
    query_interface : Proc(IDVB_SIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDVB_SIT*, UInt32),
    release : Proc(IDVB_SIT*, UInt32),
    initialize__ : Proc(IDVB_SIT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IDVB_SIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IDVB_SIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IDVB_SIT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IDVB_SIT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDVB_SIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDVB_SIT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_running_status : Proc(IDVB_SIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IDVB_SIT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IDVB_SIT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IDVB_SIT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    register_for_next_table : Proc(IDVB_SIT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_next_table : Proc(IDVB_SIT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    register_for_when_current : Proc(IDVB_SIT*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    convert_next_to_current : Proc(IDVB_SIT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("68cdce53-8bea-45c2-9d9d-acf575a089b5")]
  record IDVB_SIT, lpVtbl : IDVB_SITVtbl* do
    GUID = LibC::GUID.new(0x68cdce53_u32, 0x8bea_u16, 0x45c2_u16, StaticArray[0x9d_u8, 0x9d_u8, 0xac_u8, 0xf5_u8, 0x75_u8, 0xa0_u8, 0x89_u8, 0xb5_u8])
    def query_interface(this : IDVB_SIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDVB_SIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDVB_SIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IDVB_SIT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IDVB_SIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_count_of_table_descriptors(this : IDVB_SIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IDVB_SIT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IDVB_SIT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def get_count_of_records(this : IDVB_SIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_service_id(this : IDVB_SIT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_running_status(this : IDVB_SIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_running_status.call(this, dwRecordIndex, pbVal)
    end
    def get_record_count_of_descriptors(this : IDVB_SIT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IDVB_SIT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IDVB_SIT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def register_for_next_table(this : IDVB_SIT*, hNextTableAvailable : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_next_table.call(this, hNextTableAvailable)
    end
    def get_next_table(this : IDVB_SIT*, dwTimeout : UInt32, ppSIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_table.call(this, dwTimeout, ppSIT)
    end
    def register_for_when_current(this : IDVB_SIT*, hNextTableIsCurrent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_when_current.call(this, hNextTableIsCurrent)
    end
    def convert_next_to_current(this : IDVB_SIT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_next_to_current.call(this)
    end

  end

  @[Extern]
  record IISDB_BITVtbl,
    query_interface : Proc(IISDB_BIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDB_BIT*, UInt32),
    release : Proc(IISDB_BIT*, UInt32),
    initialize__ : Proc(IISDB_BIT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IISDB_BIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IISDB_BIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_broadcast_view_propriety : Proc(IISDB_BIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IISDB_BIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IISDB_BIT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IISDB_BIT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IISDB_BIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_broadcaster_id : Proc(IISDB_BIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IISDB_BIT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IISDB_BIT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IISDB_BIT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IISDB_BIT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("537cd71e-0e46-4173-9001-ba043f3e49e2")]
  record IISDB_BIT, lpVtbl : IISDB_BITVtbl* do
    GUID = LibC::GUID.new(0x537cd71e_u32, 0xe46_u16, 0x4173_u16, StaticArray[0x90_u8, 0x1_u8, 0xba_u8, 0x4_u8, 0x3f_u8, 0x3e_u8, 0x49_u8, 0xe2_u8])
    def query_interface(this : IISDB_BIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDB_BIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDB_BIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IISDB_BIT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IISDB_BIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_original_network_id(this : IISDB_BIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_broadcast_view_propriety(this : IISDB_BIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_broadcast_view_propriety.call(this, pbVal)
    end
    def get_count_of_table_descriptors(this : IISDB_BIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IISDB_BIT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IISDB_BIT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def get_count_of_records(this : IISDB_BIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_broadcaster_id(this : IISDB_BIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_broadcaster_id.call(this, dwRecordIndex, pbVal)
    end
    def get_record_count_of_descriptors(this : IISDB_BIT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IISDB_BIT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IISDB_BIT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def get_version_hash(this : IISDB_BIT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IISDB_NBITVtbl,
    query_interface : Proc(IISDB_NBIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDB_NBIT*, UInt32),
    release : Proc(IISDB_NBIT*, UInt32),
    initialize__ : Proc(IISDB_NBIT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IISDB_NBIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IISDB_NBIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IISDB_NBIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_information_id : Proc(IISDB_NBIT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_information_type : Proc(IISDB_NBIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_description_body_location : Proc(IISDB_NBIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_message_section_number : Proc(IISDB_NBIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_user_defined : Proc(IISDB_NBIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_number_of_keys : Proc(IISDB_NBIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_keys : Proc(IISDB_NBIT*, UInt32, UInt8**, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IISDB_NBIT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IISDB_NBIT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IISDB_NBIT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IISDB_NBIT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1b1863ef-08f1-40b7-a559-3b1eff8cafa6")]
  record IISDB_NBIT, lpVtbl : IISDB_NBITVtbl* do
    GUID = LibC::GUID.new(0x1b1863ef_u32, 0x8f1_u16, 0x40b7_u16, StaticArray[0xa5_u8, 0x59_u8, 0x3b_u8, 0x1e_u8, 0xff_u8, 0x8c_u8, 0xaf_u8, 0xa6_u8])
    def query_interface(this : IISDB_NBIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDB_NBIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDB_NBIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IISDB_NBIT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IISDB_NBIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_original_network_id(this : IISDB_NBIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_count_of_records(this : IISDB_NBIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_information_id(this : IISDB_NBIT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_information_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_information_type(this : IISDB_NBIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_information_type.call(this, dwRecordIndex, pbVal)
    end
    def get_record_description_body_location(this : IISDB_NBIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_description_body_location.call(this, dwRecordIndex, pbVal)
    end
    def get_record_message_section_number(this : IISDB_NBIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_message_section_number.call(this, dwRecordIndex, pbVal)
    end
    def get_record_user_defined(this : IISDB_NBIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_user_defined.call(this, dwRecordIndex, pbVal)
    end
    def get_record_number_of_keys(this : IISDB_NBIT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_number_of_keys.call(this, dwRecordIndex, pbVal)
    end
    def get_record_keys(this : IISDB_NBIT*, dwRecordIndex : UInt32, pbKeys : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_keys.call(this, dwRecordIndex, pbKeys)
    end
    def get_record_count_of_descriptors(this : IISDB_NBIT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IISDB_NBIT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IISDB_NBIT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def get_version_hash(this : IISDB_NBIT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IISDB_LDTVtbl,
    query_interface : Proc(IISDB_LDT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDB_LDT*, UInt32),
    release : Proc(IISDB_LDT*, UInt32),
    initialize__ : Proc(IISDB_LDT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IISDB_LDT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_original_service_id : Proc(IISDB_LDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IISDB_LDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IISDB_LDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IISDB_LDT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_description_id : Proc(IISDB_LDT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IISDB_LDT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IISDB_LDT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IISDB_LDT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IISDB_LDT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("141a546b-02ff-4fb9-a3a3-2f074b74a9a9")]
  record IISDB_LDT, lpVtbl : IISDB_LDTVtbl* do
    GUID = LibC::GUID.new(0x141a546b_u32, 0x2ff_u16, 0x4fb9_u16, StaticArray[0xa3_u8, 0xa3_u8, 0x2f_u8, 0x7_u8, 0x4b_u8, 0x74_u8, 0xa9_u8, 0xa9_u8])
    def query_interface(this : IISDB_LDT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDB_LDT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDB_LDT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IISDB_LDT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IISDB_LDT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_original_service_id(this : IISDB_LDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_service_id.call(this, pwVal)
    end
    def get_transport_stream_id(this : IISDB_LDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_original_network_id(this : IISDB_LDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_count_of_records(this : IISDB_LDT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_description_id(this : IISDB_LDT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_description_id.call(this, dwRecordIndex, pwVal)
    end
    def get_record_count_of_descriptors(this : IISDB_LDT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IISDB_LDT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IISDB_LDT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def get_version_hash(this : IISDB_LDT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IISDB_SDTTVtbl,
    query_interface : Proc(IISDB_SDTT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDB_SDTT*, UInt32),
    release : Proc(IISDB_SDTT*, UInt32),
    initialize__ : Proc(IISDB_SDTT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IISDB_SDTT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_table_id_ext : Proc(IISDB_SDTT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_transport_stream_id : Proc(IISDB_SDTT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IISDB_SDTT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_service_id : Proc(IISDB_SDTT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IISDB_SDTT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_group : Proc(IISDB_SDTT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_target_version : Proc(IISDB_SDTT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_new_version : Proc(IISDB_SDTT*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_download_level : Proc(IISDB_SDTT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_version_indicator : Proc(IISDB_SDTT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_schedule_time_shift_information : Proc(IISDB_SDTT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_count_of_schedules : Proc(IISDB_SDTT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_start_time_by_index : Proc(IISDB_SDTT*, UInt32, UInt32, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_record_duration_by_index : Proc(IISDB_SDTT*, UInt32, UInt32, Win32cr::Media::DirectShow::MPEG_TIME*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IISDB_SDTT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IISDB_SDTT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IISDB_SDTT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IISDB_SDTT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee60ef2d-813a-4dc7-bf92-ea13dac85313")]
  record IISDB_SDTT, lpVtbl : IISDB_SDTTVtbl* do
    GUID = LibC::GUID.new(0xee60ef2d_u32, 0x813a_u16, 0x4dc7_u16, StaticArray[0xbf_u8, 0x92_u8, 0xea_u8, 0x13_u8, 0xda_u8, 0xc8_u8, 0x53_u8, 0x13_u8])
    def query_interface(this : IISDB_SDTT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDB_SDTT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDB_SDTT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IISDB_SDTT*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IISDB_SDTT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_table_id_ext(this : IISDB_SDTT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_id_ext.call(this, pwVal)
    end
    def get_transport_stream_id(this : IISDB_SDTT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transport_stream_id.call(this, pwVal)
    end
    def get_original_network_id(this : IISDB_SDTT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_service_id(this : IISDB_SDTT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_id.call(this, pwVal)
    end
    def get_count_of_records(this : IISDB_SDTT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_group(this : IISDB_SDTT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_group.call(this, dwRecordIndex, pbVal)
    end
    def get_record_target_version(this : IISDB_SDTT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_target_version.call(this, dwRecordIndex, pwVal)
    end
    def get_record_new_version(this : IISDB_SDTT*, dwRecordIndex : UInt32, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_new_version.call(this, dwRecordIndex, pwVal)
    end
    def get_record_download_level(this : IISDB_SDTT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_download_level.call(this, dwRecordIndex, pbVal)
    end
    def get_record_version_indicator(this : IISDB_SDTT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_version_indicator.call(this, dwRecordIndex, pbVal)
    end
    def get_record_schedule_time_shift_information(this : IISDB_SDTT*, dwRecordIndex : UInt32, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_schedule_time_shift_information.call(this, dwRecordIndex, pbVal)
    end
    def get_record_count_of_schedules(this : IISDB_SDTT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_schedules.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_start_time_by_index(this : IISDB_SDTT*, dwRecordIndex : UInt32, dwIndex : UInt32, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_start_time_by_index.call(this, dwRecordIndex, dwIndex, pmdtVal)
    end
    def get_record_duration_by_index(this : IISDB_SDTT*, dwRecordIndex : UInt32, dwIndex : UInt32, pmdVal : Win32cr::Media::DirectShow::MPEG_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_duration_by_index.call(this, dwRecordIndex, dwIndex, pmdVal)
    end
    def get_record_count_of_descriptors(this : IISDB_SDTT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IISDB_SDTT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IISDB_SDTT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end
    def get_version_hash(this : IISDB_SDTT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IISDB_CDTVtbl,
    query_interface : Proc(IISDB_CDT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDB_CDT*, UInt32),
    release : Proc(IISDB_CDT*, UInt32),
    initialize__ : Proc(IISDB_CDT*, Void*, Void*, UInt8, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IISDB_CDT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_download_data_id : Proc(IISDB_CDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_section_number : Proc(IISDB_CDT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_original_network_id : Proc(IISDB_CDT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_data_type : Proc(IISDB_CDT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_table_descriptors : Proc(IISDB_CDT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_index : Proc(IISDB_CDT*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_table_descriptor_by_tag : Proc(IISDB_CDT*, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    get_size_of_data_module : Proc(IISDB_CDT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_data_module : Proc(IISDB_CDT*, UInt8**, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IISDB_CDT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("25fa92c2-8b80-4787-a841-3a0e8f17984b")]
  record IISDB_CDT, lpVtbl : IISDB_CDTVtbl* do
    GUID = LibC::GUID.new(0x25fa92c2_u32, 0x8b80_u16, 0x4787_u16, StaticArray[0xa8_u8, 0x41_u8, 0x3a_u8, 0xe_u8, 0x8f_u8, 0x17_u8, 0x98_u8, 0x4b_u8])
    def query_interface(this : IISDB_CDT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDB_CDT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDB_CDT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IISDB_CDT*, pSectionList : Void*, pMPEGData : Void*, bSectionNumber : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData, bSectionNumber)
    end
    def get_version_number(this : IISDB_CDT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_download_data_id(this : IISDB_CDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_download_data_id.call(this, pwVal)
    end
    def get_section_number(this : IISDB_CDT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_section_number.call(this, pbVal)
    end
    def get_original_network_id(this : IISDB_CDT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_network_id.call(this, pwVal)
    end
    def get_data_type(this : IISDB_CDT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_type.call(this, pbVal)
    end
    def get_count_of_table_descriptors(this : IISDB_CDT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_table_descriptors.call(this, pdwVal)
    end
    def get_table_descriptor_by_index(this : IISDB_CDT*, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_index.call(this, dwIndex, ppDescriptor)
    end
    def get_table_descriptor_by_tag(this : IISDB_CDT*, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_descriptor_by_tag.call(this, bTag, pdwCookie, ppDescriptor)
    end
    def get_size_of_data_module(this : IISDB_CDT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_size_of_data_module.call(this, pdwVal)
    end
    def get_data_module(this : IISDB_CDT*, pbData : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_module.call(this, pbData)
    end
    def get_version_hash(this : IISDB_CDT*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IISDB_EMMVtbl,
    query_interface : Proc(IISDB_EMM*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IISDB_EMM*, UInt32),
    release : Proc(IISDB_EMM*, UInt32),
    initialize__ : Proc(IISDB_EMM*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IISDB_EMM*, UInt8*, Win32cr::Foundation::HRESULT),
    get_table_id_extension : Proc(IISDB_EMM*, UInt16*, Win32cr::Foundation::HRESULT),
    get_data_bytes : Proc(IISDB_EMM*, UInt16*, UInt8*, Win32cr::Foundation::HRESULT),
    get_shared_emm_message : Proc(IISDB_EMM*, UInt16*, UInt8**, Win32cr::Foundation::HRESULT),
    get_individual_emm_message : Proc(IISDB_EMM*, Void*, UInt16*, UInt8**, Win32cr::Foundation::HRESULT),
    get_version_hash : Proc(IISDB_EMM*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0edb556d-43ad-4938-9668-321b2ffecfd3")]
  record IISDB_EMM, lpVtbl : IISDB_EMMVtbl* do
    GUID = LibC::GUID.new(0xedb556d_u32, 0x43ad_u16, 0x4938_u16, StaticArray[0x96_u8, 0x68_u8, 0x32_u8, 0x1b_u8, 0x2f_u8, 0xfe_u8, 0xcf_u8, 0xd3_u8])
    def query_interface(this : IISDB_EMM*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IISDB_EMM*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IISDB_EMM*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IISDB_EMM*, pSectionList : Void*, pMPEGData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pSectionList, pMPEGData)
    end
    def get_version_number(this : IISDB_EMM*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pbVal)
    end
    def get_table_id_extension(this : IISDB_EMM*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_id_extension.call(this, pwVal)
    end
    def get_data_bytes(this : IISDB_EMM*, pwBufferLength : UInt16*, pbBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_bytes.call(this, pwBufferLength, pbBuffer)
    end
    def get_shared_emm_message(this : IISDB_EMM*, pwLength : UInt16*, ppbMessage : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_shared_emm_message.call(this, pwLength, ppbMessage)
    end
    def get_individual_emm_message(this : IISDB_EMM*, pUnknown : Void*, pwLength : UInt16*, ppbMessage : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_individual_emm_message.call(this, pUnknown, pwLength, ppbMessage)
    end
    def get_version_hash(this : IISDB_EMM*, pdwVersionHash : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_hash.call(this, pdwVersionHash)
    end

  end

  @[Extern]
  record IDvbServiceAttributeDescriptorVtbl,
    query_interface : Proc(IDvbServiceAttributeDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbServiceAttributeDescriptor*, UInt32),
    release : Proc(IDvbServiceAttributeDescriptor*, UInt32),
    get_tag : Proc(IDvbServiceAttributeDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbServiceAttributeDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbServiceAttributeDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDvbServiceAttributeDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_numeric_selection_flag : Proc(IDvbServiceAttributeDescriptor*, UInt8, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_record_visible_service_flag : Proc(IDvbServiceAttributeDescriptor*, UInt8, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0f37bd92-d6a1-4854-b950-3a969d27f30e")]
  record IDvbServiceAttributeDescriptor, lpVtbl : IDvbServiceAttributeDescriptorVtbl* do
    GUID = LibC::GUID.new(0xf37bd92_u32, 0xd6a1_u16, 0x4854_u16, StaticArray[0xb9_u8, 0x50_u8, 0x3a_u8, 0x96_u8, 0x9d_u8, 0x27_u8, 0xf3_u8, 0xe_u8])
    def query_interface(this : IDvbServiceAttributeDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbServiceAttributeDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbServiceAttributeDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbServiceAttributeDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbServiceAttributeDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbServiceAttributeDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_service_id(this : IDvbServiceAttributeDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, bRecordIndex, pwVal)
    end
    def get_record_numeric_selection_flag(this : IDvbServiceAttributeDescriptor*, bRecordIndex : UInt8, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_numeric_selection_flag.call(this, bRecordIndex, pfVal)
    end
    def get_record_visible_service_flag(this : IDvbServiceAttributeDescriptor*, bRecordIndex : UInt8, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_visible_service_flag.call(this, bRecordIndex, pfVal)
    end

  end

  @[Extern]
  record IDvbContentIdentifierDescriptorVtbl,
    query_interface : Proc(IDvbContentIdentifierDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbContentIdentifierDescriptor*, UInt32),
    release : Proc(IDvbContentIdentifierDescriptor*, UInt32),
    get_tag : Proc(IDvbContentIdentifierDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbContentIdentifierDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbContentIdentifierDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_crid : Proc(IDvbContentIdentifierDescriptor*, UInt8, UInt8*, UInt8*, UInt8*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("05e0c1ea-f661-4053-9fbf-d93b28359838")]
  record IDvbContentIdentifierDescriptor, lpVtbl : IDvbContentIdentifierDescriptorVtbl* do
    GUID = LibC::GUID.new(0x5e0c1ea_u32, 0xf661_u16, 0x4053_u16, StaticArray[0x9f_u8, 0xbf_u8, 0xd9_u8, 0x3b_u8, 0x28_u8, 0x35_u8, 0x98_u8, 0x38_u8])
    def query_interface(this : IDvbContentIdentifierDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbContentIdentifierDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbContentIdentifierDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbContentIdentifierDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbContentIdentifierDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbContentIdentifierDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_crid(this : IDvbContentIdentifierDescriptor*, bRecordIndex : UInt8, pbType : UInt8*, pbLocation : UInt8*, pbLength : UInt8*, ppbBytes : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_crid.call(this, bRecordIndex, pbType, pbLocation, pbLength, ppbBytes)
    end

  end

  @[Extern]
  record IDvbDefaultAuthorityDescriptorVtbl,
    query_interface : Proc(IDvbDefaultAuthorityDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbDefaultAuthorityDescriptor*, UInt32),
    release : Proc(IDvbDefaultAuthorityDescriptor*, UInt32),
    get_tag : Proc(IDvbDefaultAuthorityDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbDefaultAuthorityDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_default_authority : Proc(IDvbDefaultAuthorityDescriptor*, UInt8*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("05ec24d1-3a31-44e7-b408-67c60a352276")]
  record IDvbDefaultAuthorityDescriptor, lpVtbl : IDvbDefaultAuthorityDescriptorVtbl* do
    GUID = LibC::GUID.new(0x5ec24d1_u32, 0x3a31_u16, 0x44e7_u16, StaticArray[0xb4_u8, 0x8_u8, 0x67_u8, 0xc6_u8, 0xa_u8, 0x35_u8, 0x22_u8, 0x76_u8])
    def query_interface(this : IDvbDefaultAuthorityDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbDefaultAuthorityDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbDefaultAuthorityDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbDefaultAuthorityDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbDefaultAuthorityDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_default_authority(this : IDvbDefaultAuthorityDescriptor*, pbLength : UInt8*, ppbBytes : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_authority.call(this, pbLength, ppbBytes)
    end

  end

  @[Extern]
  record IDvbSatelliteDeliverySystemDescriptorVtbl,
    query_interface : Proc(IDvbSatelliteDeliverySystemDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32),
    release : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32),
    get_tag : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_frequency : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_orbital_position : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_west_east_flag : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_polarization : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_modulation : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_symbol_rate : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_fec_inner : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("02f2225a-805b-4ec5-a9a6-f9b5913cd470")]
  record IDvbSatelliteDeliverySystemDescriptor, lpVtbl : IDvbSatelliteDeliverySystemDescriptorVtbl* do
    GUID = LibC::GUID.new(0x2f2225a_u32, 0x805b_u16, 0x4ec5_u16, StaticArray[0xa9_u8, 0xa6_u8, 0xf9_u8, 0xb5_u8, 0x91_u8, 0x3c_u8, 0xd4_u8, 0x70_u8])
    def query_interface(this : IDvbSatelliteDeliverySystemDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbSatelliteDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbSatelliteDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbSatelliteDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbSatelliteDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_frequency(this : IDvbSatelliteDeliverySystemDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frequency.call(this, pdwVal)
    end
    def get_orbital_position(this : IDvbSatelliteDeliverySystemDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_orbital_position.call(this, pwVal)
    end
    def get_west_east_flag(this : IDvbSatelliteDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_west_east_flag.call(this, pbVal)
    end
    def get_polarization(this : IDvbSatelliteDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_polarization.call(this, pbVal)
    end
    def get_modulation(this : IDvbSatelliteDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_modulation.call(this, pbVal)
    end
    def get_symbol_rate(this : IDvbSatelliteDeliverySystemDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_rate.call(this, pdwVal)
    end
    def get_fec_inner(this : IDvbSatelliteDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fec_inner.call(this, pbVal)
    end

  end

  @[Extern]
  record IDvbCableDeliverySystemDescriptorVtbl,
    query_interface : Proc(IDvbCableDeliverySystemDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbCableDeliverySystemDescriptor*, UInt32),
    release : Proc(IDvbCableDeliverySystemDescriptor*, UInt32),
    get_tag : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_frequency : Proc(IDvbCableDeliverySystemDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_fec_outer : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_modulation : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_symbol_rate : Proc(IDvbCableDeliverySystemDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_fec_inner : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dfb98e36-9e1a-4862-9946-993a4e59017b")]
  record IDvbCableDeliverySystemDescriptor, lpVtbl : IDvbCableDeliverySystemDescriptorVtbl* do
    GUID = LibC::GUID.new(0xdfb98e36_u32, 0x9e1a_u16, 0x4862_u16, StaticArray[0x99_u8, 0x46_u8, 0x99_u8, 0x3a_u8, 0x4e_u8, 0x59_u8, 0x1_u8, 0x7b_u8])
    def query_interface(this : IDvbCableDeliverySystemDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbCableDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbCableDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbCableDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbCableDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_frequency(this : IDvbCableDeliverySystemDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frequency.call(this, pdwVal)
    end
    def get_fec_outer(this : IDvbCableDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fec_outer.call(this, pbVal)
    end
    def get_modulation(this : IDvbCableDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_modulation.call(this, pbVal)
    end
    def get_symbol_rate(this : IDvbCableDeliverySystemDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbol_rate.call(this, pdwVal)
    end
    def get_fec_inner(this : IDvbCableDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fec_inner.call(this, pbVal)
    end

  end

  @[Extern]
  record IDvbTerrestrialDeliverySystemDescriptorVtbl,
    query_interface : Proc(IDvbTerrestrialDeliverySystemDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt32),
    release : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt32),
    get_tag : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_centre_frequency : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_bandwidth : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_constellation : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_hierarchy_information : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_code_rate_hp_stream : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_code_rate_lp_stream : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_guard_interval : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_transmission_mode : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_other_frequency_flag : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ed7e1b91-d12e-420c-b41d-a49d84fe1823")]
  record IDvbTerrestrialDeliverySystemDescriptor, lpVtbl : IDvbTerrestrialDeliverySystemDescriptorVtbl* do
    GUID = LibC::GUID.new(0xed7e1b91_u32, 0xd12e_u16, 0x420c_u16, StaticArray[0xb4_u8, 0x1d_u8, 0xa4_u8, 0x9d_u8, 0x84_u8, 0xfe_u8, 0x18_u8, 0x23_u8])
    def query_interface(this : IDvbTerrestrialDeliverySystemDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbTerrestrialDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbTerrestrialDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_centre_frequency(this : IDvbTerrestrialDeliverySystemDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_centre_frequency.call(this, pdwVal)
    end
    def get_bandwidth(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bandwidth.call(this, pbVal)
    end
    def get_constellation(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constellation.call(this, pbVal)
    end
    def get_hierarchy_information(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hierarchy_information.call(this, pbVal)
    end
    def get_code_rate_hp_stream(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_rate_hp_stream.call(this, pbVal)
    end
    def get_code_rate_lp_stream(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_code_rate_lp_stream.call(this, pbVal)
    end
    def get_guard_interval(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guard_interval.call(this, pbVal)
    end
    def get_transmission_mode(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transmission_mode.call(this, pbVal)
    end
    def get_other_frequency_flag(this : IDvbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_frequency_flag.call(this, pbVal)
    end

  end

  @[Extern]
  record IDvbTerrestrial2DeliverySystemDescriptorVtbl,
    query_interface : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt32),
    release : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt32),
    get_tag : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_tag_extension : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_centre_frequency : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_plp_id : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_t2_system_id : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_multiple_input_mode : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_bandwidth : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_guard_interval : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_transmission_mode : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_cell_id : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_other_frequency_flag : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_tfs_flag : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("20ee9be9-cd57-49ab-8f6e-1d07aeb8e482")]
  record IDvbTerrestrial2DeliverySystemDescriptor, lpVtbl : IDvbTerrestrial2DeliverySystemDescriptorVtbl* do
    GUID = LibC::GUID.new(0x20ee9be9_u32, 0xcd57_u16, 0x49ab_u16, StaticArray[0x8f_u8, 0x6e_u8, 0x1d_u8, 0x7_u8, 0xae_u8, 0xb8_u8, 0xe4_u8, 0x82_u8])
    def query_interface(this : IDvbTerrestrial2DeliverySystemDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbTerrestrial2DeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbTerrestrial2DeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_tag_extension(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag_extension.call(this, pbVal)
    end
    def get_centre_frequency(this : IDvbTerrestrial2DeliverySystemDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_centre_frequency.call(this, pdwVal)
    end
    def get_plp_id(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_plp_id.call(this, pbVal)
    end
    def get_t2_system_id(this : IDvbTerrestrial2DeliverySystemDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_t2_system_id.call(this, pwVal)
    end
    def get_multiple_input_mode(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_multiple_input_mode.call(this, pbVal)
    end
    def get_bandwidth(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bandwidth.call(this, pbVal)
    end
    def get_guard_interval(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guard_interval.call(this, pbVal)
    end
    def get_transmission_mode(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transmission_mode.call(this, pbVal)
    end
    def get_cell_id(this : IDvbTerrestrial2DeliverySystemDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cell_id.call(this, pwVal)
    end
    def get_other_frequency_flag(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_other_frequency_flag.call(this, pbVal)
    end
    def get_tfs_flag(this : IDvbTerrestrial2DeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tfs_flag.call(this, pbVal)
    end

  end

  @[Extern]
  record IDvbFrequencyListDescriptorVtbl,
    query_interface : Proc(IDvbFrequencyListDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbFrequencyListDescriptor*, UInt32),
    release : Proc(IDvbFrequencyListDescriptor*, UInt32),
    get_tag : Proc(IDvbFrequencyListDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbFrequencyListDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_coding_type : Proc(IDvbFrequencyListDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbFrequencyListDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_centre_frequency : Proc(IDvbFrequencyListDescriptor*, UInt8, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1cadb613-e1dd-4512-afa8-bb7a007ef8b1")]
  record IDvbFrequencyListDescriptor, lpVtbl : IDvbFrequencyListDescriptorVtbl* do
    GUID = LibC::GUID.new(0x1cadb613_u32, 0xe1dd_u16, 0x4512_u16, StaticArray[0xaf_u8, 0xa8_u8, 0xbb_u8, 0x7a_u8, 0x0_u8, 0x7e_u8, 0xf8_u8, 0xb1_u8])
    def query_interface(this : IDvbFrequencyListDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbFrequencyListDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbFrequencyListDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbFrequencyListDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbFrequencyListDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_coding_type(this : IDvbFrequencyListDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_coding_type.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbFrequencyListDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_centre_frequency(this : IDvbFrequencyListDescriptor*, bRecordIndex : UInt8, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_centre_frequency.call(this, bRecordIndex, pdwVal)
    end

  end

  @[Extern]
  record IDvbPrivateDataSpecifierDescriptorVtbl,
    query_interface : Proc(IDvbPrivateDataSpecifierDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt32),
    release : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt32),
    get_tag : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_private_data_specifier : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5660a019-e75a-4b82-9b4c-ed2256d165a2")]
  record IDvbPrivateDataSpecifierDescriptor, lpVtbl : IDvbPrivateDataSpecifierDescriptorVtbl* do
    GUID = LibC::GUID.new(0x5660a019_u32, 0xe75a_u16, 0x4b82_u16, StaticArray[0x9b_u8, 0x4c_u8, 0xed_u8, 0x22_u8, 0x56_u8, 0xd1_u8, 0x65_u8, 0xa2_u8])
    def query_interface(this : IDvbPrivateDataSpecifierDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbPrivateDataSpecifierDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbPrivateDataSpecifierDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbPrivateDataSpecifierDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbPrivateDataSpecifierDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_private_data_specifier(this : IDvbPrivateDataSpecifierDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data_specifier.call(this, pdwVal)
    end

  end

  @[Extern]
  record IDvbLogicalChannelDescriptorVtbl,
    query_interface : Proc(IDvbLogicalChannelDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbLogicalChannelDescriptor*, UInt32),
    release : Proc(IDvbLogicalChannelDescriptor*, UInt32),
    get_tag : Proc(IDvbLogicalChannelDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbLogicalChannelDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbLogicalChannelDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDvbLogicalChannelDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_logical_channel_number : Proc(IDvbLogicalChannelDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cf1edaff-3ffd-4cf7-8201-35756acbf85f")]
  record IDvbLogicalChannelDescriptor, lpVtbl : IDvbLogicalChannelDescriptorVtbl* do
    GUID = LibC::GUID.new(0xcf1edaff_u32, 0x3ffd_u16, 0x4cf7_u16, StaticArray[0x82_u8, 0x1_u8, 0x35_u8, 0x75_u8, 0x6a_u8, 0xcb_u8, 0xf8_u8, 0x5f_u8])
    def query_interface(this : IDvbLogicalChannelDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbLogicalChannelDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbLogicalChannelDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbLogicalChannelDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbLogicalChannelDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbLogicalChannelDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_service_id(this : IDvbLogicalChannelDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, bRecordIndex, pwVal)
    end
    def get_record_logical_channel_number(this : IDvbLogicalChannelDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_logical_channel_number.call(this, bRecordIndex, pwVal)
    end

  end

  @[Extern]
  record IDvbLogicalChannelDescriptor2Vtbl,
    query_interface : Proc(IDvbLogicalChannelDescriptor2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbLogicalChannelDescriptor2*, UInt32),
    release : Proc(IDvbLogicalChannelDescriptor2*, UInt32),
    get_tag : Proc(IDvbLogicalChannelDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbLogicalChannelDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbLogicalChannelDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDvbLogicalChannelDescriptor2*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_logical_channel_number : Proc(IDvbLogicalChannelDescriptor2*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_logical_channel_and_visibility : Proc(IDvbLogicalChannelDescriptor2*, UInt8, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("43aca974-4be8-4b98-bc17-9eafd788b1d7")]
  record IDvbLogicalChannelDescriptor2, lpVtbl : IDvbLogicalChannelDescriptor2Vtbl* do
    GUID = LibC::GUID.new(0x43aca974_u32, 0x4be8_u16, 0x4b98_u16, StaticArray[0xbc_u8, 0x17_u8, 0x9e_u8, 0xaf_u8, 0xd7_u8, 0x88_u8, 0xb1_u8, 0xd7_u8])
    def query_interface(this : IDvbLogicalChannelDescriptor2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbLogicalChannelDescriptor2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbLogicalChannelDescriptor2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbLogicalChannelDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbLogicalChannelDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbLogicalChannelDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_service_id(this : IDvbLogicalChannelDescriptor2*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, bRecordIndex, pwVal)
    end
    def get_record_logical_channel_number(this : IDvbLogicalChannelDescriptor2*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_logical_channel_number.call(this, bRecordIndex, pwVal)
    end
    def get_record_logical_channel_and_visibility(this : IDvbLogicalChannelDescriptor2*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_logical_channel_and_visibility.call(this, bRecordIndex, pwVal)
    end

  end

  @[Extern]
  record IDvbLogicalChannel2DescriptorVtbl,
    query_interface : Proc(IDvbLogicalChannel2Descriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbLogicalChannel2Descriptor*, UInt32),
    release : Proc(IDvbLogicalChannel2Descriptor*, UInt32),
    get_tag : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_logical_channel_number : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_logical_channel_and_visibility : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_lists : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_list_id : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_list_name_w : Proc(IDvbLogicalChannel2Descriptor*, UInt8, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_list_country_code : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_list_count_of_records : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_list_record_service_id : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_list_record_logical_channel_number : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_list_record_logical_channel_and_visibility : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f69c3747-8a30-4980-998c-01fe7f0ba35a")]
  record IDvbLogicalChannel2Descriptor, lpVtbl : IDvbLogicalChannel2DescriptorVtbl* do
    GUID = LibC::GUID.new(0xf69c3747_u32, 0x8a30_u16, 0x4980_u16, StaticArray[0x99_u8, 0x8c_u8, 0x1_u8, 0xfe_u8, 0x7f_u8, 0xb_u8, 0xa3_u8, 0x5a_u8])
    def query_interface(this : IDvbLogicalChannel2Descriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbLogicalChannel2Descriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbLogicalChannel2Descriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbLogicalChannel2Descriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbLogicalChannel2Descriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbLogicalChannel2Descriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_service_id(this : IDvbLogicalChannel2Descriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, bRecordIndex, pwVal)
    end
    def get_record_logical_channel_number(this : IDvbLogicalChannel2Descriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_logical_channel_number.call(this, bRecordIndex, pwVal)
    end
    def get_record_logical_channel_and_visibility(this : IDvbLogicalChannel2Descriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_logical_channel_and_visibility.call(this, bRecordIndex, pwVal)
    end
    def get_count_of_lists(this : IDvbLogicalChannel2Descriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_lists.call(this, pbVal)
    end
    def get_list_id(this : IDvbLogicalChannel2Descriptor*, bListIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_id.call(this, bListIndex, pbVal)
    end
    def get_list_name_w(this : IDvbLogicalChannel2Descriptor*, bListIndex : UInt8, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_name_w.call(this, bListIndex, convMode, pbstrName)
    end
    def get_list_country_code(this : IDvbLogicalChannel2Descriptor*, bListIndex : UInt8, pszCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_country_code.call(this, bListIndex, pszCode)
    end
    def get_list_count_of_records(this : IDvbLogicalChannel2Descriptor*, bChannelListIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_count_of_records.call(this, bChannelListIndex, pbVal)
    end
    def get_list_record_service_id(this : IDvbLogicalChannel2Descriptor*, bListIndex : UInt8, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_record_service_id.call(this, bListIndex, bRecordIndex, pwVal)
    end
    def get_list_record_logical_channel_number(this : IDvbLogicalChannel2Descriptor*, bListIndex : UInt8, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_record_logical_channel_number.call(this, bListIndex, bRecordIndex, pwVal)
    end
    def get_list_record_logical_channel_and_visibility(this : IDvbLogicalChannel2Descriptor*, bListIndex : UInt8, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_list_record_logical_channel_and_visibility.call(this, bListIndex, bRecordIndex, pwVal)
    end

  end

  @[Extern]
  record IDvbHDSimulcastLogicalChannelDescriptorVtbl,
    query_interface : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt32),
    release : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt32),
    get_tag : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_logical_channel_number : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_logical_channel_and_visibility : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1ea8b738-a307-4680-9e26-d0a908c824f4")]
  record IDvbHDSimulcastLogicalChannelDescriptor, lpVtbl : IDvbHDSimulcastLogicalChannelDescriptorVtbl* do
    GUID = LibC::GUID.new(0x1ea8b738_u32, 0xa307_u16, 0x4680_u16, StaticArray[0x9e_u8, 0x26_u8, 0xd0_u8, 0xa9_u8, 0x8_u8, 0xc8_u8, 0x24_u8, 0xf4_u8])
    def query_interface(this : IDvbHDSimulcastLogicalChannelDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbHDSimulcastLogicalChannelDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbHDSimulcastLogicalChannelDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbHDSimulcastLogicalChannelDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbHDSimulcastLogicalChannelDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbHDSimulcastLogicalChannelDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_service_id(this : IDvbHDSimulcastLogicalChannelDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, bRecordIndex, pwVal)
    end
    def get_record_logical_channel_number(this : IDvbHDSimulcastLogicalChannelDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_logical_channel_number.call(this, bRecordIndex, pwVal)
    end
    def get_record_logical_channel_and_visibility(this : IDvbHDSimulcastLogicalChannelDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_logical_channel_and_visibility.call(this, bRecordIndex, pwVal)
    end

  end

  @[Extern]
  record IDvbDataBroadcastIDDescriptorVtbl,
    query_interface : Proc(IDvbDataBroadcastIDDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbDataBroadcastIDDescriptor*, UInt32),
    release : Proc(IDvbDataBroadcastIDDescriptor*, UInt32),
    get_tag : Proc(IDvbDataBroadcastIDDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbDataBroadcastIDDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_data_broadcast_id : Proc(IDvbDataBroadcastIDDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_id_selector_bytes : Proc(IDvbDataBroadcastIDDescriptor*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5f26f518-65c8-4048-91f2-9290f59f7b90")]
  record IDvbDataBroadcastIDDescriptor, lpVtbl : IDvbDataBroadcastIDDescriptorVtbl* do
    GUID = LibC::GUID.new(0x5f26f518_u32, 0x65c8_u16, 0x4048_u16, StaticArray[0x91_u8, 0xf2_u8, 0x92_u8, 0x90_u8, 0xf5_u8, 0x9f_u8, 0x7b_u8, 0x90_u8])
    def query_interface(this : IDvbDataBroadcastIDDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbDataBroadcastIDDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbDataBroadcastIDDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbDataBroadcastIDDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbDataBroadcastIDDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_data_broadcast_id(this : IDvbDataBroadcastIDDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_broadcast_id.call(this, pwVal)
    end
    def get_id_selector_bytes(this : IDvbDataBroadcastIDDescriptor*, pbLen : UInt8*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id_selector_bytes.call(this, pbLen, pbVal)
    end

  end

  @[Extern]
  record IDvbDataBroadcastDescriptorVtbl,
    query_interface : Proc(IDvbDataBroadcastDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbDataBroadcastDescriptor*, UInt32),
    release : Proc(IDvbDataBroadcastDescriptor*, UInt32),
    get_tag : Proc(IDvbDataBroadcastDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbDataBroadcastDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_data_broadcast_id : Proc(IDvbDataBroadcastDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_component_tag : Proc(IDvbDataBroadcastDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_selector_length : Proc(IDvbDataBroadcastDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_selector_bytes : Proc(IDvbDataBroadcastDescriptor*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT),
    get_lang_id : Proc(IDvbDataBroadcastDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_length : Proc(IDvbDataBroadcastDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_text : Proc(IDvbDataBroadcastDescriptor*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d1ebc1d6-8b60-4c20-9caf-e59382e7c400")]
  record IDvbDataBroadcastDescriptor, lpVtbl : IDvbDataBroadcastDescriptorVtbl* do
    GUID = LibC::GUID.new(0xd1ebc1d6_u32, 0x8b60_u16, 0x4c20_u16, StaticArray[0x9c_u8, 0xaf_u8, 0xe5_u8, 0x93_u8, 0x82_u8, 0xe7_u8, 0xc4_u8, 0x0_u8])
    def query_interface(this : IDvbDataBroadcastDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbDataBroadcastDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbDataBroadcastDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbDataBroadcastDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbDataBroadcastDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_data_broadcast_id(this : IDvbDataBroadcastDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_broadcast_id.call(this, pwVal)
    end
    def get_component_tag(this : IDvbDataBroadcastDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_tag.call(this, pbVal)
    end
    def get_selector_length(this : IDvbDataBroadcastDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selector_length.call(this, pbVal)
    end
    def get_selector_bytes(this : IDvbDataBroadcastDescriptor*, pbLen : UInt8*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selector_bytes.call(this, pbLen, pbVal)
    end
    def get_lang_id(this : IDvbDataBroadcastDescriptor*, pulVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lang_id.call(this, pulVal)
    end
    def get_text_length(this : IDvbDataBroadcastDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_length.call(this, pbVal)
    end
    def get_text(this : IDvbDataBroadcastDescriptor*, pbLen : UInt8*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, pbLen, pbVal)
    end

  end

  @[Extern]
  record IDvbLinkageDescriptorVtbl,
    query_interface : Proc(IDvbLinkageDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbLinkageDescriptor*, UInt32),
    release : Proc(IDvbLinkageDescriptor*, UInt32),
    get_tag : Proc(IDvbLinkageDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbLinkageDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_ts_id : Proc(IDvbLinkageDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_on_id : Proc(IDvbLinkageDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_service_id : Proc(IDvbLinkageDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_linkage_type : Proc(IDvbLinkageDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_private_data_length : Proc(IDvbLinkageDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IDvbLinkageDescriptor*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1cdf8b31-994a-46fc-acfd-6a6be8934dd5")]
  record IDvbLinkageDescriptor, lpVtbl : IDvbLinkageDescriptorVtbl* do
    GUID = LibC::GUID.new(0x1cdf8b31_u32, 0x994a_u16, 0x46fc_u16, StaticArray[0xac_u8, 0xfd_u8, 0x6a_u8, 0x6b_u8, 0xe8_u8, 0x93_u8, 0x4d_u8, 0xd5_u8])
    def query_interface(this : IDvbLinkageDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbLinkageDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbLinkageDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbLinkageDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbLinkageDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_ts_id(this : IDvbLinkageDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ts_id.call(this, pwVal)
    end
    def get_on_id(this : IDvbLinkageDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_on_id.call(this, pwVal)
    end
    def get_service_id(this : IDvbLinkageDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_id.call(this, pwVal)
    end
    def get_linkage_type(this : IDvbLinkageDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_linkage_type.call(this, pbVal)
    end
    def get_private_data_length(this : IDvbLinkageDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data_length.call(this, pbVal)
    end
    def get_private_data(this : IDvbLinkageDescriptor*, pbLen : UInt8*, pbData : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, pbLen, pbData)
    end

  end

  @[Extern]
  record IDvbTeletextDescriptorVtbl,
    query_interface : Proc(IDvbTeletextDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbTeletextDescriptor*, UInt32),
    release : Proc(IDvbTeletextDescriptor*, UInt32),
    get_tag : Proc(IDvbTeletextDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbTeletextDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbTeletextDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_lang_id : Proc(IDvbTeletextDescriptor*, UInt8, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_teletext_type : Proc(IDvbTeletextDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_magazine_number : Proc(IDvbTeletextDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_page_number : Proc(IDvbTeletextDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9cd29d47-69c6-4f92-98a9-210af1b7303a")]
  record IDvbTeletextDescriptor, lpVtbl : IDvbTeletextDescriptorVtbl* do
    GUID = LibC::GUID.new(0x9cd29d47_u32, 0x69c6_u16, 0x4f92_u16, StaticArray[0x98_u8, 0xa9_u8, 0x21_u8, 0xa_u8, 0xf1_u8, 0xb7_u8, 0x30_u8, 0x3a_u8])
    def query_interface(this : IDvbTeletextDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbTeletextDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbTeletextDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbTeletextDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbTeletextDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbTeletextDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_lang_id(this : IDvbTeletextDescriptor*, bRecordIndex : UInt8, pulVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_lang_id.call(this, bRecordIndex, pulVal)
    end
    def get_record_teletext_type(this : IDvbTeletextDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_teletext_type.call(this, bRecordIndex, pbVal)
    end
    def get_record_magazine_number(this : IDvbTeletextDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_magazine_number.call(this, bRecordIndex, pbVal)
    end
    def get_record_page_number(this : IDvbTeletextDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_page_number.call(this, bRecordIndex, pbVal)
    end

  end

  @[Extern]
  record IDvbSubtitlingDescriptorVtbl,
    query_interface : Proc(IDvbSubtitlingDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbSubtitlingDescriptor*, UInt32),
    release : Proc(IDvbSubtitlingDescriptor*, UInt32),
    get_tag : Proc(IDvbSubtitlingDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbSubtitlingDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbSubtitlingDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_lang_id : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_subtitling_type : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_composition_page_id : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_ancillary_page_id : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9b25fe1d-fa23-4e50-9784-6df8b26f8a49")]
  record IDvbSubtitlingDescriptor, lpVtbl : IDvbSubtitlingDescriptorVtbl* do
    GUID = LibC::GUID.new(0x9b25fe1d_u32, 0xfa23_u16, 0x4e50_u16, StaticArray[0x97_u8, 0x84_u8, 0x6d_u8, 0xf8_u8, 0xb2_u8, 0x6f_u8, 0x8a_u8, 0x49_u8])
    def query_interface(this : IDvbSubtitlingDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbSubtitlingDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbSubtitlingDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbSubtitlingDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbSubtitlingDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbSubtitlingDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_lang_id(this : IDvbSubtitlingDescriptor*, bRecordIndex : UInt8, pulVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_lang_id.call(this, bRecordIndex, pulVal)
    end
    def get_record_subtitling_type(this : IDvbSubtitlingDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_subtitling_type.call(this, bRecordIndex, pbVal)
    end
    def get_record_composition_page_id(this : IDvbSubtitlingDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_composition_page_id.call(this, bRecordIndex, pwVal)
    end
    def get_record_ancillary_page_id(this : IDvbSubtitlingDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_ancillary_page_id.call(this, bRecordIndex, pwVal)
    end

  end

  @[Extern]
  record IDvbServiceDescriptorVtbl,
    query_interface : Proc(IDvbServiceDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbServiceDescriptor*, UInt32),
    release : Proc(IDvbServiceDescriptor*, UInt32),
    get_tag : Proc(IDvbServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_type : Proc(IDvbServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_provider_name : Proc(IDvbServiceDescriptor*, UInt8**, Win32cr::Foundation::HRESULT),
    get_service_provider_name_w_1 : Proc(IDvbServiceDescriptor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_service_name : Proc(IDvbServiceDescriptor*, UInt8**, Win32cr::Foundation::HRESULT),
    get_processed_service_name : Proc(IDvbServiceDescriptor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_service_name_emphasized : Proc(IDvbServiceDescriptor*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f9c7fbcf-e2d6-464d-b32d-2ef526e49290")]
  record IDvbServiceDescriptor, lpVtbl : IDvbServiceDescriptorVtbl* do
    GUID = LibC::GUID.new(0xf9c7fbcf_u32, 0xe2d6_u16, 0x464d_u16, StaticArray[0xb3_u8, 0x2d_u8, 0x2e_u8, 0xf5_u8, 0x26_u8, 0xe4_u8, 0x92_u8, 0x90_u8])
    def query_interface(this : IDvbServiceDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbServiceDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbServiceDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_service_type(this : IDvbServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_type.call(this, pbVal)
    end
    def get_service_provider_name(this : IDvbServiceDescriptor*, pszName : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_provider_name.call(this, pszName)
    end
    def get_service_provider_name_w_1(this : IDvbServiceDescriptor*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_provider_name_w_1.call(this, pbstrName)
    end
    def get_service_name(this : IDvbServiceDescriptor*, pszName : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_name.call(this, pszName)
    end
    def get_processed_service_name(this : IDvbServiceDescriptor*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processed_service_name.call(this, pbstrName)
    end
    def get_service_name_emphasized(this : IDvbServiceDescriptor*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_name_emphasized.call(this, pbstrName)
    end

  end

  @[Extern]
  record IDvbServiceDescriptor2Vtbl,
    query_interface : Proc(IDvbServiceDescriptor2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbServiceDescriptor2*, UInt32),
    release : Proc(IDvbServiceDescriptor2*, UInt32),
    get_tag : Proc(IDvbServiceDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbServiceDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_type : Proc(IDvbServiceDescriptor2*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_provider_name : Proc(IDvbServiceDescriptor2*, UInt8**, Win32cr::Foundation::HRESULT),
    get_service_provider_name_w_1 : Proc(IDvbServiceDescriptor2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_service_name : Proc(IDvbServiceDescriptor2*, UInt8**, Win32cr::Foundation::HRESULT),
    get_processed_service_name : Proc(IDvbServiceDescriptor2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_service_name_emphasized : Proc(IDvbServiceDescriptor2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_service_provider_name_w_2 : Proc(IDvbServiceDescriptor2*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_service_name_w : Proc(IDvbServiceDescriptor2*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d6c76506-85ab-487c-9b2b-36416511e4a2")]
  record IDvbServiceDescriptor2, lpVtbl : IDvbServiceDescriptor2Vtbl* do
    GUID = LibC::GUID.new(0xd6c76506_u32, 0x85ab_u16, 0x487c_u16, StaticArray[0x9b_u8, 0x2b_u8, 0x36_u8, 0x41_u8, 0x65_u8, 0x11_u8, 0xe4_u8, 0xa2_u8])
    def query_interface(this : IDvbServiceDescriptor2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbServiceDescriptor2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbServiceDescriptor2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbServiceDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbServiceDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_service_type(this : IDvbServiceDescriptor2*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_type.call(this, pbVal)
    end
    def get_service_provider_name(this : IDvbServiceDescriptor2*, pszName : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_provider_name.call(this, pszName)
    end
    def get_service_provider_name_w_1(this : IDvbServiceDescriptor2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_provider_name_w_1.call(this, pbstrName)
    end
    def get_service_name(this : IDvbServiceDescriptor2*, pszName : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_name.call(this, pszName)
    end
    def get_processed_service_name(this : IDvbServiceDescriptor2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_processed_service_name.call(this, pbstrName)
    end
    def get_service_name_emphasized(this : IDvbServiceDescriptor2*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_name_emphasized.call(this, pbstrName)
    end
    def get_service_provider_name_w_2(this : IDvbServiceDescriptor2*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_provider_name_w_2.call(this, convMode, pbstrName)
    end
    def get_service_name_w(this : IDvbServiceDescriptor2*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_name_w.call(this, convMode, pbstrName)
    end

  end

  @[Extern]
  record IDvbServiceListDescriptorVtbl,
    query_interface : Proc(IDvbServiceListDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbServiceListDescriptor*, UInt32),
    release : Proc(IDvbServiceListDescriptor*, UInt32),
    get_tag : Proc(IDvbServiceListDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbServiceListDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbServiceListDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_service_id : Proc(IDvbServiceListDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_service_type : Proc(IDvbServiceListDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("05db0d8f-6008-491a-acd3-7090952707d0")]
  record IDvbServiceListDescriptor, lpVtbl : IDvbServiceListDescriptorVtbl* do
    GUID = LibC::GUID.new(0x5db0d8f_u32, 0x6008_u16, 0x491a_u16, StaticArray[0xac_u8, 0xd3_u8, 0x70_u8, 0x90_u8, 0x95_u8, 0x27_u8, 0x7_u8, 0xd0_u8])
    def query_interface(this : IDvbServiceListDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbServiceListDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbServiceListDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbServiceListDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbServiceListDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbServiceListDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_service_id(this : IDvbServiceListDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id.call(this, bRecordIndex, pwVal)
    end
    def get_record_service_type(this : IDvbServiceListDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_type.call(this, bRecordIndex, pbVal)
    end

  end

  @[Extern]
  record IDvbMultilingualServiceNameDescriptorVtbl,
    query_interface : Proc(IDvbMultilingualServiceNameDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbMultilingualServiceNameDescriptor*, UInt32),
    release : Proc(IDvbMultilingualServiceNameDescriptor*, UInt32),
    get_tag : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_lang_id : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_service_provider_name_w : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_record_service_name_w : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2d80433b-b32c-47ef-987f-e78ebb773e34")]
  record IDvbMultilingualServiceNameDescriptor, lpVtbl : IDvbMultilingualServiceNameDescriptorVtbl* do
    GUID = LibC::GUID.new(0x2d80433b_u32, 0xb32c_u16, 0x47ef_u16, StaticArray[0x98_u8, 0x7f_u8, 0xe7_u8, 0x8e_u8, 0xbb_u8, 0x77_u8, 0x3e_u8, 0x34_u8])
    def query_interface(this : IDvbMultilingualServiceNameDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbMultilingualServiceNameDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbMultilingualServiceNameDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbMultilingualServiceNameDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbMultilingualServiceNameDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbMultilingualServiceNameDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_lang_id(this : IDvbMultilingualServiceNameDescriptor*, bRecordIndex : UInt8, ulVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_lang_id.call(this, bRecordIndex, ulVal)
    end
    def get_record_service_provider_name_w(this : IDvbMultilingualServiceNameDescriptor*, bRecordIndex : UInt8, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_provider_name_w.call(this, bRecordIndex, convMode, pbstrName)
    end
    def get_record_service_name_w(this : IDvbMultilingualServiceNameDescriptor*, bRecordIndex : UInt8, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_name_w.call(this, bRecordIndex, convMode, pbstrName)
    end

  end

  @[Extern]
  record IDvbNetworkNameDescriptorVtbl,
    query_interface : Proc(IDvbNetworkNameDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbNetworkNameDescriptor*, UInt32),
    release : Proc(IDvbNetworkNameDescriptor*, UInt32),
    get_tag : Proc(IDvbNetworkNameDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbNetworkNameDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_network_name : Proc(IDvbNetworkNameDescriptor*, UInt8**, Win32cr::Foundation::HRESULT),
    get_network_name_w : Proc(IDvbNetworkNameDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5b2a80cf-35b9-446c-b3e4-048b761dbc51")]
  record IDvbNetworkNameDescriptor, lpVtbl : IDvbNetworkNameDescriptorVtbl* do
    GUID = LibC::GUID.new(0x5b2a80cf_u32, 0x35b9_u16, 0x446c_u16, StaticArray[0xb3_u8, 0xe4_u8, 0x4_u8, 0x8b_u8, 0x76_u8, 0x1d_u8, 0xbc_u8, 0x51_u8])
    def query_interface(this : IDvbNetworkNameDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbNetworkNameDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbNetworkNameDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbNetworkNameDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbNetworkNameDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_network_name(this : IDvbNetworkNameDescriptor*, pszName : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network_name.call(this, pszName)
    end
    def get_network_name_w(this : IDvbNetworkNameDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_network_name_w.call(this, convMode, pbstrName)
    end

  end

  @[Extern]
  record IDvbShortEventDescriptorVtbl,
    query_interface : Proc(IDvbShortEventDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbShortEventDescriptor*, UInt32),
    release : Proc(IDvbShortEventDescriptor*, UInt32),
    get_tag : Proc(IDvbShortEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbShortEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_language_code : Proc(IDvbShortEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_event_name_w : Proc(IDvbShortEventDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text_w : Proc(IDvbShortEventDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b170be92-5b75-458e-9c6e-b0008231491a")]
  record IDvbShortEventDescriptor, lpVtbl : IDvbShortEventDescriptorVtbl* do
    GUID = LibC::GUID.new(0xb170be92_u32, 0x5b75_u16, 0x458e_u16, StaticArray[0x9c_u8, 0x6e_u8, 0xb0_u8, 0x0_u8, 0x82_u8, 0x31_u8, 0x49_u8, 0x1a_u8])
    def query_interface(this : IDvbShortEventDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbShortEventDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbShortEventDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbShortEventDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbShortEventDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_language_code(this : IDvbShortEventDescriptor*, pszCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_code.call(this, pszCode)
    end
    def get_event_name_w(this : IDvbShortEventDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event_name_w.call(this, convMode, pbstrName)
    end
    def get_text_w(this : IDvbShortEventDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_w.call(this, convMode, pbstrText)
    end

  end

  @[Extern]
  record IDvbExtendedEventDescriptorVtbl,
    query_interface : Proc(IDvbExtendedEventDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbExtendedEventDescriptor*, UInt32),
    release : Proc(IDvbExtendedEventDescriptor*, UInt32),
    get_tag : Proc(IDvbExtendedEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbExtendedEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_descriptor_number : Proc(IDvbExtendedEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_last_descriptor_number : Proc(IDvbExtendedEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_language_code : Proc(IDvbExtendedEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbExtendedEventDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_item_w : Proc(IDvbExtendedEventDescriptor*, UInt8, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_concatenated_item_w : Proc(IDvbExtendedEventDescriptor*, Void*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_text_w : Proc(IDvbExtendedEventDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_concatenated_text_w : Proc(IDvbExtendedEventDescriptor*, Void*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_record_item_raw_bytes : Proc(IDvbExtendedEventDescriptor*, UInt8, UInt8**, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c9b22eca-85f4-499f-b1db-efa93a91ee57")]
  record IDvbExtendedEventDescriptor, lpVtbl : IDvbExtendedEventDescriptorVtbl* do
    GUID = LibC::GUID.new(0xc9b22eca_u32, 0x85f4_u16, 0x499f_u16, StaticArray[0xb1_u8, 0xdb_u8, 0xef_u8, 0xa9_u8, 0x3a_u8, 0x91_u8, 0xee_u8, 0x57_u8])
    def query_interface(this : IDvbExtendedEventDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbExtendedEventDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbExtendedEventDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbExtendedEventDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbExtendedEventDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_descriptor_number(this : IDvbExtendedEventDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_descriptor_number.call(this, pbVal)
    end
    def get_last_descriptor_number(this : IDvbExtendedEventDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_descriptor_number.call(this, pbVal)
    end
    def get_language_code(this : IDvbExtendedEventDescriptor*, pszCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_code.call(this, pszCode)
    end
    def get_count_of_records(this : IDvbExtendedEventDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_item_w(this : IDvbExtendedEventDescriptor*, bRecordIndex : UInt8, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrDesc : Win32cr::Foundation::BSTR*, pbstrItem : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_item_w.call(this, bRecordIndex, convMode, pbstrDesc, pbstrItem)
    end
    def get_concatenated_item_w(this : IDvbExtendedEventDescriptor*, pFollowingDescriptor : Void*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrDesc : Win32cr::Foundation::BSTR*, pbstrItem : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_concatenated_item_w.call(this, pFollowingDescriptor, convMode, pbstrDesc, pbstrItem)
    end
    def get_text_w(this : IDvbExtendedEventDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_w.call(this, convMode, pbstrText)
    end
    def get_concatenated_text_w(this : IDvbExtendedEventDescriptor*, following_descriptor : Void*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_concatenated_text_w.call(this, following_descriptor, convMode, pbstrText)
    end
    def get_record_item_raw_bytes(this : IDvbExtendedEventDescriptor*, bRecordIndex : UInt8, ppbRawItem : UInt8**, pbItemLength : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_item_raw_bytes.call(this, bRecordIndex, ppbRawItem, pbItemLength)
    end

  end

  @[Extern]
  record IDvbComponentDescriptorVtbl,
    query_interface : Proc(IDvbComponentDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbComponentDescriptor*, UInt32),
    release : Proc(IDvbComponentDescriptor*, UInt32),
    get_tag : Proc(IDvbComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_stream_content : Proc(IDvbComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_component_type : Proc(IDvbComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_component_tag : Proc(IDvbComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_language_code : Proc(IDvbComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_text_w : Proc(IDvbComponentDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("91e405cf-80e7-457f-9096-1b9d1ce32141")]
  record IDvbComponentDescriptor, lpVtbl : IDvbComponentDescriptorVtbl* do
    GUID = LibC::GUID.new(0x91e405cf_u32, 0x80e7_u16, 0x457f_u16, StaticArray[0x90_u8, 0x96_u8, 0x1b_u8, 0x9d_u8, 0x1c_u8, 0xe3_u8, 0x21_u8, 0x41_u8])
    def query_interface(this : IDvbComponentDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbComponentDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbComponentDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_stream_content(this : IDvbComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_content.call(this, pbVal)
    end
    def get_component_type(this : IDvbComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_type.call(this, pbVal)
    end
    def get_component_tag(this : IDvbComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_tag.call(this, pbVal)
    end
    def get_language_code(this : IDvbComponentDescriptor*, pszCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_code.call(this, pszCode)
    end
    def get_text_w(this : IDvbComponentDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_w.call(this, convMode, pbstrText)
    end

  end

  @[Extern]
  record IDvbContentDescriptorVtbl,
    query_interface : Proc(IDvbContentDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbContentDescriptor*, UInt32),
    release : Proc(IDvbContentDescriptor*, UInt32),
    get_tag : Proc(IDvbContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_content_nibbles : Proc(IDvbContentDescriptor*, UInt8, UInt8*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_user_nibbles : Proc(IDvbContentDescriptor*, UInt8, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2e883881-a467-412a-9d63-6f2b6da05bf0")]
  record IDvbContentDescriptor, lpVtbl : IDvbContentDescriptorVtbl* do
    GUID = LibC::GUID.new(0x2e883881_u32, 0xa467_u16, 0x412a_u16, StaticArray[0x9d_u8, 0x63_u8, 0x6f_u8, 0x2b_u8, 0x6d_u8, 0xa0_u8, 0x5b_u8, 0xf0_u8])
    def query_interface(this : IDvbContentDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbContentDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbContentDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_content_nibbles(this : IDvbContentDescriptor*, bRecordIndex : UInt8, pbValLevel1 : UInt8*, pbValLevel2 : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_content_nibbles.call(this, bRecordIndex, pbValLevel1, pbValLevel2)
    end
    def get_record_user_nibbles(this : IDvbContentDescriptor*, bRecordIndex : UInt8, pbVal1 : UInt8*, pbVal2 : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_user_nibbles.call(this, bRecordIndex, pbVal1, pbVal2)
    end

  end

  @[Extern]
  record IDvbParentalRatingDescriptorVtbl,
    query_interface : Proc(IDvbParentalRatingDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDvbParentalRatingDescriptor*, UInt32),
    release : Proc(IDvbParentalRatingDescriptor*, UInt32),
    get_tag : Proc(IDvbParentalRatingDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IDvbParentalRatingDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IDvbParentalRatingDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_rating : Proc(IDvbParentalRatingDescriptor*, UInt8, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3ad9dde1-fb1b-4186-937f-22e6b5a72a10")]
  record IDvbParentalRatingDescriptor, lpVtbl : IDvbParentalRatingDescriptorVtbl* do
    GUID = LibC::GUID.new(0x3ad9dde1_u32, 0xfb1b_u16, 0x4186_u16, StaticArray[0x93_u8, 0x7f_u8, 0x22_u8, 0xe6_u8, 0xb5_u8, 0xa7_u8, 0x2a_u8, 0x10_u8])
    def query_interface(this : IDvbParentalRatingDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDvbParentalRatingDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDvbParentalRatingDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IDvbParentalRatingDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IDvbParentalRatingDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IDvbParentalRatingDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_rating(this : IDvbParentalRatingDescriptor*, bRecordIndex : UInt8, pszCountryCode : UInt8*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_rating.call(this, bRecordIndex, pszCountryCode, pbVal)
    end

  end

  @[Extern]
  record IIsdbTerrestrialDeliverySystemDescriptorVtbl,
    query_interface : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt32),
    release : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt32),
    get_tag : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_area_code : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_guard_interval : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_transmission_mode : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_frequency : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("39fae0a6-d151-44dd-a28a-765de5991670")]
  record IIsdbTerrestrialDeliverySystemDescriptor, lpVtbl : IIsdbTerrestrialDeliverySystemDescriptorVtbl* do
    GUID = LibC::GUID.new(0x39fae0a6_u32, 0xd151_u16, 0x44dd_u16, StaticArray[0xa2_u8, 0x8a_u8, 0x76_u8, 0x5d_u8, 0xe5_u8, 0x99_u8, 0x16_u8, 0x70_u8])
    def query_interface(this : IIsdbTerrestrialDeliverySystemDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbTerrestrialDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbTerrestrialDeliverySystemDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_area_code(this : IIsdbTerrestrialDeliverySystemDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_area_code.call(this, pwVal)
    end
    def get_guard_interval(this : IIsdbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guard_interval.call(this, pbVal)
    end
    def get_transmission_mode(this : IIsdbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transmission_mode.call(this, pbVal)
    end
    def get_count_of_records(this : IIsdbTerrestrialDeliverySystemDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_frequency(this : IIsdbTerrestrialDeliverySystemDescriptor*, bRecordIndex : UInt8, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_frequency.call(this, bRecordIndex, pdwVal)
    end

  end

  @[Extern]
  record IIsdbTSInformationDescriptorVtbl,
    query_interface : Proc(IIsdbTSInformationDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbTSInformationDescriptor*, UInt32),
    release : Proc(IIsdbTSInformationDescriptor*, UInt32),
    get_tag : Proc(IIsdbTSInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbTSInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_remote_control_key_id : Proc(IIsdbTSInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_ts_name_w : Proc(IIsdbTSInformationDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbTSInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_transmission_type_info : Proc(IIsdbTSInformationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_number_of_services : Proc(IIsdbTSInformationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_service_id_by_index : Proc(IIsdbTSInformationDescriptor*, UInt8, UInt8, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d7ad183e-38f5-4210-b55f-ec8d601bbd47")]
  record IIsdbTSInformationDescriptor, lpVtbl : IIsdbTSInformationDescriptorVtbl* do
    GUID = LibC::GUID.new(0xd7ad183e_u32, 0x38f5_u16, 0x4210_u16, StaticArray[0xb5_u8, 0x5f_u8, 0xec_u8, 0x8d_u8, 0x60_u8, 0x1b_u8, 0xbd_u8, 0x47_u8])
    def query_interface(this : IIsdbTSInformationDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbTSInformationDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbTSInformationDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbTSInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbTSInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_remote_control_key_id(this : IIsdbTSInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_remote_control_key_id.call(this, pbVal)
    end
    def get_ts_name_w(this : IIsdbTSInformationDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ts_name_w.call(this, convMode, pbstrName)
    end
    def get_count_of_records(this : IIsdbTSInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_transmission_type_info(this : IIsdbTSInformationDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_transmission_type_info.call(this, bRecordIndex, pbVal)
    end
    def get_record_number_of_services(this : IIsdbTSInformationDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_number_of_services.call(this, bRecordIndex, pbVal)
    end
    def get_record_service_id_by_index(this : IIsdbTSInformationDescriptor*, bRecordIndex : UInt8, bServiceIndex : UInt8, pdwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_service_id_by_index.call(this, bRecordIndex, bServiceIndex, pdwVal)
    end

  end

  @[Extern]
  record IIsdbDigitalCopyControlDescriptorVtbl,
    query_interface : Proc(IIsdbDigitalCopyControlDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbDigitalCopyControlDescriptor*, UInt32),
    release : Proc(IIsdbDigitalCopyControlDescriptor*, UInt32),
    get_tag : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_copy_control : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, UInt8*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_copy_control : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8, UInt8*, UInt8*, UInt8*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1a28417e-266a-4bb8-a4bd-d782bcfb8161")]
  record IIsdbDigitalCopyControlDescriptor, lpVtbl : IIsdbDigitalCopyControlDescriptorVtbl* do
    GUID = LibC::GUID.new(0x1a28417e_u32, 0x266a_u16, 0x4bb8_u16, StaticArray[0xa4_u8, 0xbd_u8, 0xd7_u8, 0x82_u8, 0xbc_u8, 0xfb_u8, 0x81_u8, 0x61_u8])
    def query_interface(this : IIsdbDigitalCopyControlDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbDigitalCopyControlDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbDigitalCopyControlDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbDigitalCopyControlDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbDigitalCopyControlDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_copy_control(this : IIsdbDigitalCopyControlDescriptor*, pbDigitalRecordingControlData : UInt8*, pbCopyControlType : UInt8*, pbAPSControlData : UInt8*, pbMaximumBitrate : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_copy_control.call(this, pbDigitalRecordingControlData, pbCopyControlType, pbAPSControlData, pbMaximumBitrate)
    end
    def get_count_of_records(this : IIsdbDigitalCopyControlDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_copy_control(this : IIsdbDigitalCopyControlDescriptor*, bRecordIndex : UInt8, pbComponentTag : UInt8*, pbDigitalRecordingControlData : UInt8*, pbCopyControlType : UInt8*, pbAPSControlData : UInt8*, pbMaximumBitrate : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_copy_control.call(this, bRecordIndex, pbComponentTag, pbDigitalRecordingControlData, pbCopyControlType, pbAPSControlData, pbMaximumBitrate)
    end

  end

  @[Extern]
  record IIsdbAudioComponentDescriptorVtbl,
    query_interface : Proc(IIsdbAudioComponentDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbAudioComponentDescriptor*, UInt32),
    release : Proc(IIsdbAudioComponentDescriptor*, UInt32),
    get_tag : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_stream_content : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_component_type : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_component_tag : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_stream_type : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_simulcast_group_tag : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_es_multi_lingual_flag : Proc(IIsdbAudioComponentDescriptor*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_main_component_flag : Proc(IIsdbAudioComponentDescriptor*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_quality_indicator : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_sampling_rate : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_language_code : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_language_code2 : Proc(IIsdbAudioComponentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_text_w : Proc(IIsdbAudioComponentDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("679d2002-2425-4be4-a4c7-d6632a574f4d")]
  record IIsdbAudioComponentDescriptor, lpVtbl : IIsdbAudioComponentDescriptorVtbl* do
    GUID = LibC::GUID.new(0x679d2002_u32, 0x2425_u16, 0x4be4_u16, StaticArray[0xa4_u8, 0xc7_u8, 0xd6_u8, 0x63_u8, 0x2a_u8, 0x57_u8, 0x4f_u8, 0x4d_u8])
    def query_interface(this : IIsdbAudioComponentDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbAudioComponentDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbAudioComponentDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_stream_content(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_content.call(this, pbVal)
    end
    def get_component_type(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_type.call(this, pbVal)
    end
    def get_component_tag(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_tag.call(this, pbVal)
    end
    def get_stream_type(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_type.call(this, pbVal)
    end
    def get_simulcast_group_tag(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_simulcast_group_tag.call(this, pbVal)
    end
    def get_es_multi_lingual_flag(this : IIsdbAudioComponentDescriptor*, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_es_multi_lingual_flag.call(this, pfVal)
    end
    def get_main_component_flag(this : IIsdbAudioComponentDescriptor*, pfVal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_main_component_flag.call(this, pfVal)
    end
    def get_quality_indicator(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quality_indicator.call(this, pbVal)
    end
    def get_sampling_rate(this : IIsdbAudioComponentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sampling_rate.call(this, pbVal)
    end
    def get_language_code(this : IIsdbAudioComponentDescriptor*, pszCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_code.call(this, pszCode)
    end
    def get_language_code2(this : IIsdbAudioComponentDescriptor*, pszCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_code2.call(this, pszCode)
    end
    def get_text_w(this : IIsdbAudioComponentDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_w.call(this, convMode, pbstrText)
    end

  end

  @[Extern]
  record IIsdbDataContentDescriptorVtbl,
    query_interface : Proc(IIsdbDataContentDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbDataContentDescriptor*, UInt32),
    release : Proc(IIsdbDataContentDescriptor*, UInt32),
    get_tag : Proc(IIsdbDataContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbDataContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_data_component_id : Proc(IIsdbDataContentDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_entry_component : Proc(IIsdbDataContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_selector_length : Proc(IIsdbDataContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_selector_bytes : Proc(IIsdbDataContentDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbDataContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_component_ref : Proc(IIsdbDataContentDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_language_code : Proc(IIsdbDataContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_text_w : Proc(IIsdbDataContentDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a428100a-e646-4bd6-aa14-6087bdc08cd5")]
  record IIsdbDataContentDescriptor, lpVtbl : IIsdbDataContentDescriptorVtbl* do
    GUID = LibC::GUID.new(0xa428100a_u32, 0xe646_u16, 0x4bd6_u16, StaticArray[0xaa_u8, 0x14_u8, 0x60_u8, 0x87_u8, 0xbd_u8, 0xc0_u8, 0x8c_u8, 0xd5_u8])
    def query_interface(this : IIsdbDataContentDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbDataContentDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbDataContentDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbDataContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbDataContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_data_component_id(this : IIsdbDataContentDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_component_id.call(this, pwVal)
    end
    def get_entry_component(this : IIsdbDataContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entry_component.call(this, pbVal)
    end
    def get_selector_length(this : IIsdbDataContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selector_length.call(this, pbVal)
    end
    def get_selector_bytes(this : IIsdbDataContentDescriptor*, bBufLength : UInt8, pbBuf : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selector_bytes.call(this, bBufLength, pbBuf)
    end
    def get_count_of_records(this : IIsdbDataContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_component_ref(this : IIsdbDataContentDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_component_ref.call(this, bRecordIndex, pbVal)
    end
    def get_language_code(this : IIsdbDataContentDescriptor*, pszCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language_code.call(this, pszCode)
    end
    def get_text_w(this : IIsdbDataContentDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_w.call(this, convMode, pbstrText)
    end

  end

  @[Extern]
  record IIsdbCAContractInformationDescriptorVtbl,
    query_interface : Proc(IIsdbCAContractInformationDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbCAContractInformationDescriptor*, UInt32),
    release : Proc(IIsdbCAContractInformationDescriptor*, UInt32),
    get_tag : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_ca_system_id : Proc(IIsdbCAContractInformationDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_ca_unit_id : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_component_tag : Proc(IIsdbCAContractInformationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_contract_verification_info_length : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_contract_verification_info : Proc(IIsdbCAContractInformationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_fee_name_w : Proc(IIsdbCAContractInformationDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("08e18b25-a28f-4e92-821e-4fced5cc2291")]
  record IIsdbCAContractInformationDescriptor, lpVtbl : IIsdbCAContractInformationDescriptorVtbl* do
    GUID = LibC::GUID.new(0x8e18b25_u32, 0xa28f_u16, 0x4e92_u16, StaticArray[0x82_u8, 0x1e_u8, 0x4f_u8, 0xce_u8, 0xd5_u8, 0xcc_u8, 0x22_u8, 0x91_u8])
    def query_interface(this : IIsdbCAContractInformationDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbCAContractInformationDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbCAContractInformationDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbCAContractInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbCAContractInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_ca_system_id(this : IIsdbCAContractInformationDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_system_id.call(this, pwVal)
    end
    def get_ca_unit_id(this : IIsdbCAContractInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_unit_id.call(this, pbVal)
    end
    def get_count_of_records(this : IIsdbCAContractInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_component_tag(this : IIsdbCAContractInformationDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_component_tag.call(this, bRecordIndex, pbVal)
    end
    def get_contract_verification_info_length(this : IIsdbCAContractInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contract_verification_info_length.call(this, pbVal)
    end
    def get_contract_verification_info(this : IIsdbCAContractInformationDescriptor*, bBufLength : UInt8, pbBuf : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contract_verification_info.call(this, bBufLength, pbBuf)
    end
    def get_fee_name_w(this : IIsdbCAContractInformationDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fee_name_w.call(this, convMode, pbstrName)
    end

  end

  @[Extern]
  record IIsdbEventGroupDescriptorVtbl,
    query_interface : Proc(IIsdbEventGroupDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbEventGroupDescriptor*, UInt32),
    release : Proc(IIsdbEventGroupDescriptor*, UInt32),
    get_tag : Proc(IIsdbEventGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbEventGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_group_type : Proc(IIsdbEventGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbEventGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_event : Proc(IIsdbEventGroupDescriptor*, UInt8, UInt16*, UInt16*, Win32cr::Foundation::HRESULT),
    get_count_of_ref_records : Proc(IIsdbEventGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_ref_record_event : Proc(IIsdbEventGroupDescriptor*, UInt8, UInt16*, UInt16*, UInt16*, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("94b06780-2e2a-44dc-a966-cc56fdabc6c2")]
  record IIsdbEventGroupDescriptor, lpVtbl : IIsdbEventGroupDescriptorVtbl* do
    GUID = LibC::GUID.new(0x94b06780_u32, 0x2e2a_u16, 0x44dc_u16, StaticArray[0xa9_u8, 0x66_u8, 0xcc_u8, 0x56_u8, 0xfd_u8, 0xab_u8, 0xc6_u8, 0xc2_u8])
    def query_interface(this : IIsdbEventGroupDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbEventGroupDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbEventGroupDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbEventGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbEventGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_group_type(this : IIsdbEventGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_group_type.call(this, pbVal)
    end
    def get_count_of_records(this : IIsdbEventGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_event(this : IIsdbEventGroupDescriptor*, bRecordIndex : UInt8, pwServiceId : UInt16*, pwEventId : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_event.call(this, bRecordIndex, pwServiceId, pwEventId)
    end
    def get_count_of_ref_records(this : IIsdbEventGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_ref_records.call(this, pbVal)
    end
    def get_ref_record_event(this : IIsdbEventGroupDescriptor*, bRecordIndex : UInt8, pwOriginalNetworkId : UInt16*, pwTransportStreamId : UInt16*, pwServiceId : UInt16*, pwEventId : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ref_record_event.call(this, bRecordIndex, pwOriginalNetworkId, pwTransportStreamId, pwServiceId, pwEventId)
    end

  end

  @[Extern]
  record IIsdbComponentGroupDescriptorVtbl,
    query_interface : Proc(IIsdbComponentGroupDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbComponentGroupDescriptor*, UInt32),
    release : Proc(IIsdbComponentGroupDescriptor*, UInt32),
    get_tag : Proc(IIsdbComponentGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbComponentGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_component_group_type : Proc(IIsdbComponentGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbComponentGroupDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_group_id : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_number_of_ca_unit : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_ca_unit_ca_unit_id : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_ca_unit_number_of_components : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_ca_unit_component_tag : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_total_bit_rate : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_text_w : Proc(IIsdbComponentGroupDescriptor*, UInt8, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a494f17f-c592-47d8-8943-64c9a34be7b9")]
  record IIsdbComponentGroupDescriptor, lpVtbl : IIsdbComponentGroupDescriptorVtbl* do
    GUID = LibC::GUID.new(0xa494f17f_u32, 0xc592_u16, 0x47d8_u16, StaticArray[0x89_u8, 0x43_u8, 0x64_u8, 0xc9_u8, 0xa3_u8, 0x4b_u8, 0xe7_u8, 0xb9_u8])
    def query_interface(this : IIsdbComponentGroupDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbComponentGroupDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbComponentGroupDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbComponentGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbComponentGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_component_group_type(this : IIsdbComponentGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_group_type.call(this, pbVal)
    end
    def get_count_of_records(this : IIsdbComponentGroupDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_record_group_id(this : IIsdbComponentGroupDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_group_id.call(this, bRecordIndex, pbVal)
    end
    def get_record_number_of_ca_unit(this : IIsdbComponentGroupDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_number_of_ca_unit.call(this, bRecordIndex, pbVal)
    end
    def get_record_ca_unit_ca_unit_id(this : IIsdbComponentGroupDescriptor*, bRecordIndex : UInt8, bCAUnitIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_ca_unit_ca_unit_id.call(this, bRecordIndex, bCAUnitIndex, pbVal)
    end
    def get_record_ca_unit_number_of_components(this : IIsdbComponentGroupDescriptor*, bRecordIndex : UInt8, bCAUnitIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_ca_unit_number_of_components.call(this, bRecordIndex, bCAUnitIndex, pbVal)
    end
    def get_record_ca_unit_component_tag(this : IIsdbComponentGroupDescriptor*, bRecordIndex : UInt8, bCAUnitIndex : UInt8, bComponentIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_ca_unit_component_tag.call(this, bRecordIndex, bCAUnitIndex, bComponentIndex, pbVal)
    end
    def get_record_total_bit_rate(this : IIsdbComponentGroupDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_total_bit_rate.call(this, bRecordIndex, pbVal)
    end
    def get_record_text_w(this : IIsdbComponentGroupDescriptor*, bRecordIndex : UInt8, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrText : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_text_w.call(this, bRecordIndex, convMode, pbstrText)
    end

  end

  @[Extern]
  record IIsdbSeriesDescriptorVtbl,
    query_interface : Proc(IIsdbSeriesDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbSeriesDescriptor*, UInt32),
    release : Proc(IIsdbSeriesDescriptor*, UInt32),
    get_tag : Proc(IIsdbSeriesDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbSeriesDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_series_id : Proc(IIsdbSeriesDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_repeat_label : Proc(IIsdbSeriesDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_program_pattern : Proc(IIsdbSeriesDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_expire_date : Proc(IIsdbSeriesDescriptor*, Win32cr::Foundation::BOOL*, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_episode_number : Proc(IIsdbSeriesDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_last_episode_number : Proc(IIsdbSeriesDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_series_name_w : Proc(IIsdbSeriesDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("07ef6370-1660-4f26-87fc-614adab24b11")]
  record IIsdbSeriesDescriptor, lpVtbl : IIsdbSeriesDescriptorVtbl* do
    GUID = LibC::GUID.new(0x7ef6370_u32, 0x1660_u16, 0x4f26_u16, StaticArray[0x87_u8, 0xfc_u8, 0x61_u8, 0x4a_u8, 0xda_u8, 0xb2_u8, 0x4b_u8, 0x11_u8])
    def query_interface(this : IIsdbSeriesDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbSeriesDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbSeriesDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbSeriesDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbSeriesDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_series_id(this : IIsdbSeriesDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_series_id.call(this, pwVal)
    end
    def get_repeat_label(this : IIsdbSeriesDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_repeat_label.call(this, pbVal)
    end
    def get_program_pattern(this : IIsdbSeriesDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_program_pattern.call(this, pbVal)
    end
    def get_expire_date(this : IIsdbSeriesDescriptor*, pfValid : Win32cr::Foundation::BOOL*, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expire_date.call(this, pfValid, pmdtVal)
    end
    def get_episode_number(this : IIsdbSeriesDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_episode_number.call(this, pwVal)
    end
    def get_last_episode_number(this : IIsdbSeriesDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_episode_number.call(this, pwVal)
    end
    def get_series_name_w(this : IIsdbSeriesDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_series_name_w.call(this, convMode, pbstrName)
    end

  end

  @[Extern]
  record IIsdbDownloadContentDescriptorVtbl,
    query_interface : Proc(IIsdbDownloadContentDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbDownloadContentDescriptor*, UInt32),
    release : Proc(IIsdbDownloadContentDescriptor*, UInt32),
    get_tag : Proc(IIsdbDownloadContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbDownloadContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IIsdbDownloadContentDescriptor*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_component_size : Proc(IIsdbDownloadContentDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_download_id : Proc(IIsdbDownloadContentDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_time_out_value_dii : Proc(IIsdbDownloadContentDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_leak_rate : Proc(IIsdbDownloadContentDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_component_tag : Proc(IIsdbDownloadContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_compatiblity_descriptor_length : Proc(IIsdbDownloadContentDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_compatiblity_descriptor : Proc(IIsdbDownloadContentDescriptor*, UInt8**, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbDownloadContentDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_module_id : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt16*, Win32cr::Foundation::HRESULT),
    get_record_module_size : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_module_info_length : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt8*, Win32cr::Foundation::HRESULT),
    get_record_module_info : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt8**, Win32cr::Foundation::HRESULT),
    get_text_language_code : Proc(IIsdbDownloadContentDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_text_w : Proc(IIsdbDownloadContentDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5298661e-cb88-4f5f-a1de-5f440c185b92")]
  record IIsdbDownloadContentDescriptor, lpVtbl : IIsdbDownloadContentDescriptorVtbl* do
    GUID = LibC::GUID.new(0x5298661e_u32, 0xcb88_u16, 0x4f5f_u16, StaticArray[0xa1_u8, 0xde_u8, 0x5f_u8, 0x44_u8, 0xc_u8, 0x18_u8, 0x5b_u8, 0x92_u8])
    def query_interface(this : IIsdbDownloadContentDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbDownloadContentDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbDownloadContentDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbDownloadContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbDownloadContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_flags(this : IIsdbDownloadContentDescriptor*, pfReboot : Win32cr::Foundation::BOOL*, pfAddOn : Win32cr::Foundation::BOOL*, pfCompatibility : Win32cr::Foundation::BOOL*, pfModuleInfo : Win32cr::Foundation::BOOL*, pfTextInfo : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pfReboot, pfAddOn, pfCompatibility, pfModuleInfo, pfTextInfo)
    end
    def get_component_size(this : IIsdbDownloadContentDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_size.call(this, pdwVal)
    end
    def get_download_id(this : IIsdbDownloadContentDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_download_id.call(this, pdwVal)
    end
    def get_time_out_value_dii(this : IIsdbDownloadContentDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_out_value_dii.call(this, pdwVal)
    end
    def get_leak_rate(this : IIsdbDownloadContentDescriptor*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_leak_rate.call(this, pdwVal)
    end
    def get_component_tag(this : IIsdbDownloadContentDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_tag.call(this, pbVal)
    end
    def get_compatiblity_descriptor_length(this : IIsdbDownloadContentDescriptor*, pwLength : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_compatiblity_descriptor_length.call(this, pwLength)
    end
    def get_compatiblity_descriptor(this : IIsdbDownloadContentDescriptor*, ppbData : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_compatiblity_descriptor.call(this, ppbData)
    end
    def get_count_of_records(this : IIsdbDownloadContentDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pwVal)
    end
    def get_record_module_id(this : IIsdbDownloadContentDescriptor*, wRecordIndex : UInt16, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_module_id.call(this, wRecordIndex, pwVal)
    end
    def get_record_module_size(this : IIsdbDownloadContentDescriptor*, wRecordIndex : UInt16, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_module_size.call(this, wRecordIndex, pdwVal)
    end
    def get_record_module_info_length(this : IIsdbDownloadContentDescriptor*, wRecordIndex : UInt16, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_module_info_length.call(this, wRecordIndex, pbVal)
    end
    def get_record_module_info(this : IIsdbDownloadContentDescriptor*, wRecordIndex : UInt16, ppbData : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_module_info.call(this, wRecordIndex, ppbData)
    end
    def get_text_language_code(this : IIsdbDownloadContentDescriptor*, szCode : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_language_code.call(this, szCode)
    end
    def get_text_w(this : IIsdbDownloadContentDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_w.call(this, convMode, pbstrName)
    end

  end

  @[Extern]
  record IIsdbLogoTransmissionDescriptorVtbl,
    query_interface : Proc(IIsdbLogoTransmissionDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbLogoTransmissionDescriptor*, UInt32),
    release : Proc(IIsdbLogoTransmissionDescriptor*, UInt32),
    get_tag : Proc(IIsdbLogoTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbLogoTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_logo_transmission_type : Proc(IIsdbLogoTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_logo_id : Proc(IIsdbLogoTransmissionDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_logo_version : Proc(IIsdbLogoTransmissionDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_download_data_id : Proc(IIsdbLogoTransmissionDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_logo_char_w : Proc(IIsdbLogoTransmissionDescriptor*, Win32cr::Media::DirectShow::DVB_STRCONV_MODE, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e0103f49-4ae1-4f07-9098-756db1fa88cd")]
  record IIsdbLogoTransmissionDescriptor, lpVtbl : IIsdbLogoTransmissionDescriptorVtbl* do
    GUID = LibC::GUID.new(0xe0103f49_u32, 0x4ae1_u16, 0x4f07_u16, StaticArray[0x90_u8, 0x98_u8, 0x75_u8, 0x6d_u8, 0xb1_u8, 0xfa_u8, 0x88_u8, 0xcd_u8])
    def query_interface(this : IIsdbLogoTransmissionDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbLogoTransmissionDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbLogoTransmissionDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbLogoTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbLogoTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_logo_transmission_type(this : IIsdbLogoTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_logo_transmission_type.call(this, pbVal)
    end
    def get_logo_id(this : IIsdbLogoTransmissionDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_logo_id.call(this, pwVal)
    end
    def get_logo_version(this : IIsdbLogoTransmissionDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_logo_version.call(this, pwVal)
    end
    def get_download_data_id(this : IIsdbLogoTransmissionDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_download_data_id.call(this, pwVal)
    end
    def get_logo_char_w(this : IIsdbLogoTransmissionDescriptor*, convMode : Win32cr::Media::DirectShow::DVB_STRCONV_MODE, pbstrChar : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_logo_char_w.call(this, convMode, pbstrChar)
    end

  end

  @[Extern]
  record IIsdbSIParameterDescriptorVtbl,
    query_interface : Proc(IIsdbSIParameterDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbSIParameterDescriptor*, UInt32),
    release : Proc(IIsdbSIParameterDescriptor*, UInt32),
    get_tag : Proc(IIsdbSIParameterDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbSIParameterDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_parameter_version : Proc(IIsdbSIParameterDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_update_time : Proc(IIsdbSIParameterDescriptor*, Win32cr::Media::DirectShow::MPEG_DATE*, Win32cr::Foundation::HRESULT),
    get_record_number_of_table : Proc(IIsdbSIParameterDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_table_id : Proc(IIsdbSIParameterDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_table_description_length : Proc(IIsdbSIParameterDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_table_description_bytes : Proc(IIsdbSIParameterDescriptor*, UInt8, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f837dc36-867c-426a-9111-f62093951a45")]
  record IIsdbSIParameterDescriptor, lpVtbl : IIsdbSIParameterDescriptorVtbl* do
    GUID = LibC::GUID.new(0xf837dc36_u32, 0x867c_u16, 0x426a_u16, StaticArray[0x91_u8, 0x11_u8, 0xf6_u8, 0x20_u8, 0x93_u8, 0x95_u8, 0x1a_u8, 0x45_u8])
    def query_interface(this : IIsdbSIParameterDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbSIParameterDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbSIParameterDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbSIParameterDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbSIParameterDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_parameter_version(this : IIsdbSIParameterDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_version.call(this, pbVal)
    end
    def get_update_time(this : IIsdbSIParameterDescriptor*, pVal : Win32cr::Media::DirectShow::MPEG_DATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_update_time.call(this, pVal)
    end
    def get_record_number_of_table(this : IIsdbSIParameterDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_number_of_table.call(this, pbVal)
    end
    def get_table_id(this : IIsdbSIParameterDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_id.call(this, bRecordIndex, pbVal)
    end
    def get_table_description_length(this : IIsdbSIParameterDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_description_length.call(this, bRecordIndex, pbVal)
    end
    def get_table_description_bytes(this : IIsdbSIParameterDescriptor*, bRecordIndex : UInt8, pbBufferLength : UInt8*, pbBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_description_bytes.call(this, bRecordIndex, pbBufferLength, pbBuffer)
    end

  end

  @[Extern]
  record IIsdbEmergencyInformationDescriptorVtbl,
    query_interface : Proc(IIsdbEmergencyInformationDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbEmergencyInformationDescriptor*, UInt32),
    release : Proc(IIsdbEmergencyInformationDescriptor*, UInt32),
    get_tag : Proc(IIsdbEmergencyInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbEmergencyInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IIsdbEmergencyInformationDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_id : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt16*, Win32cr::Foundation::HRESULT),
    get_start_end_flag : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_signal_level : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt8*, Win32cr::Foundation::HRESULT),
    get_area_code : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt16**, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ba6fa681-b973-4da1-9207-ac3e7f0341eb")]
  record IIsdbEmergencyInformationDescriptor, lpVtbl : IIsdbEmergencyInformationDescriptorVtbl* do
    GUID = LibC::GUID.new(0xba6fa681_u32, 0xb973_u16, 0x4da1_u16, StaticArray[0x92_u8, 0x7_u8, 0xac_u8, 0x3e_u8, 0x7f_u8, 0x3_u8, 0x41_u8, 0xeb_u8])
    def query_interface(this : IIsdbEmergencyInformationDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbEmergencyInformationDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbEmergencyInformationDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbEmergencyInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbEmergencyInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_count_of_records(this : IIsdbEmergencyInformationDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pbVal)
    end
    def get_service_id(this : IIsdbEmergencyInformationDescriptor*, bRecordIndex : UInt8, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_id.call(this, bRecordIndex, pwVal)
    end
    def get_start_end_flag(this : IIsdbEmergencyInformationDescriptor*, bRecordIndex : UInt8, pVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_start_end_flag.call(this, bRecordIndex, pVal)
    end
    def get_signal_level(this : IIsdbEmergencyInformationDescriptor*, bRecordIndex : UInt8, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signal_level.call(this, bRecordIndex, pbVal)
    end
    def get_area_code(this : IIsdbEmergencyInformationDescriptor*, bRecordIndex : UInt8, ppwVal : UInt16**, pbNumAreaCodes : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_area_code.call(this, bRecordIndex, ppwVal, pbNumAreaCodes)
    end

  end

  @[Extern]
  record IIsdbCADescriptorVtbl,
    query_interface : Proc(IIsdbCADescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbCADescriptor*, UInt32),
    release : Proc(IIsdbCADescriptor*, UInt32),
    get_tag : Proc(IIsdbCADescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbCADescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_ca_system_id : Proc(IIsdbCADescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_reserved_bits : Proc(IIsdbCADescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_capid : Proc(IIsdbCADescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_private_data_bytes : Proc(IIsdbCADescriptor*, UInt8*, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0570aa47-52bc-42ae-8ca5-969f41e81aea")]
  record IIsdbCADescriptor, lpVtbl : IIsdbCADescriptorVtbl* do
    GUID = LibC::GUID.new(0x570aa47_u32, 0x52bc_u16, 0x42ae_u16, StaticArray[0x8c_u8, 0xa5_u8, 0x96_u8, 0x9f_u8, 0x41_u8, 0xe8_u8, 0x1a_u8, 0xea_u8])
    def query_interface(this : IIsdbCADescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbCADescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbCADescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbCADescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbCADescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_ca_system_id(this : IIsdbCADescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_system_id.call(this, pwVal)
    end
    def get_reserved_bits(this : IIsdbCADescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_reserved_bits.call(this, pbVal)
    end
    def get_capid(this : IIsdbCADescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capid.call(this, pwVal)
    end
    def get_private_data_bytes(this : IIsdbCADescriptor*, pbBufferLength : UInt8*, pbBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data_bytes.call(this, pbBufferLength, pbBuffer)
    end

  end

  @[Extern]
  record IIsdbCAServiceDescriptorVtbl,
    query_interface : Proc(IIsdbCAServiceDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbCAServiceDescriptor*, UInt32),
    release : Proc(IIsdbCAServiceDescriptor*, UInt32),
    get_tag : Proc(IIsdbCAServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbCAServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_ca_system_id : Proc(IIsdbCAServiceDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_ca_broadcaster_group_id : Proc(IIsdbCAServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_message_control : Proc(IIsdbCAServiceDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_service_ids : Proc(IIsdbCAServiceDescriptor*, UInt8*, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("39cbeb97-ff0b-42a7-9ab9-7b9cfe70a77a")]
  record IIsdbCAServiceDescriptor, lpVtbl : IIsdbCAServiceDescriptorVtbl* do
    GUID = LibC::GUID.new(0x39cbeb97_u32, 0xff0b_u16, 0x42a7_u16, StaticArray[0x9a_u8, 0xb9_u8, 0x7b_u8, 0x9c_u8, 0xfe_u8, 0x70_u8, 0xa7_u8, 0x7a_u8])
    def query_interface(this : IIsdbCAServiceDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbCAServiceDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbCAServiceDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbCAServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbCAServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_ca_system_id(this : IIsdbCAServiceDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_system_id.call(this, pwVal)
    end
    def get_ca_broadcaster_group_id(this : IIsdbCAServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ca_broadcaster_group_id.call(this, pbVal)
    end
    def get_message_control(this : IIsdbCAServiceDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_message_control.call(this, pbVal)
    end
    def get_service_ids(this : IIsdbCAServiceDescriptor*, pbNumServiceIds : UInt8*, pwServiceIds : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_ids.call(this, pbNumServiceIds, pwServiceIds)
    end

  end

  @[Extern]
  record IIsdbHierarchicalTransmissionDescriptorVtbl,
    query_interface : Proc(IIsdbHierarchicalTransmissionDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt32),
    release : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt32),
    get_tag : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_future_use1 : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_quality_level : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_future_use2 : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_reference_pid : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b7b3ae90-ee0b-446d-8769-f7e2aa266aa6")]
  record IIsdbHierarchicalTransmissionDescriptor, lpVtbl : IIsdbHierarchicalTransmissionDescriptorVtbl* do
    GUID = LibC::GUID.new(0xb7b3ae90_u32, 0xee0b_u16, 0x446d_u16, StaticArray[0x87_u8, 0x69_u8, 0xf7_u8, 0xe2_u8, 0xaa_u8, 0x26_u8, 0x6a_u8, 0xa6_u8])
    def query_interface(this : IIsdbHierarchicalTransmissionDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsdbHierarchicalTransmissionDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsdbHierarchicalTransmissionDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IIsdbHierarchicalTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IIsdbHierarchicalTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pbVal)
    end
    def get_future_use1(this : IIsdbHierarchicalTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_future_use1.call(this, pbVal)
    end
    def get_quality_level(this : IIsdbHierarchicalTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quality_level.call(this, pbVal)
    end
    def get_future_use2(this : IIsdbHierarchicalTransmissionDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_future_use2.call(this, pbVal)
    end
    def get_reference_pid(this : IIsdbHierarchicalTransmissionDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_reference_pid.call(this, pwVal)
    end

  end

  @[Extern]
  record IPBDASiParserVtbl,
    query_interface : Proc(IPBDASiParser*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPBDASiParser*, UInt32),
    release : Proc(IPBDASiParser*, UInt32),
    initialize__ : Proc(IPBDASiParser*, Void*, Win32cr::Foundation::HRESULT),
    get_eit : Proc(IPBDASiParser*, UInt32, UInt8*, Void**, Win32cr::Foundation::HRESULT),
    get_services : Proc(IPBDASiParser*, UInt32, UInt8*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9de49a74-aba2-4a18-93e1-21f17f95c3c3")]
  record IPBDASiParser, lpVtbl : IPBDASiParserVtbl* do
    GUID = LibC::GUID.new(0x9de49a74_u32, 0xaba2_u16, 0x4a18_u16, StaticArray[0x93_u8, 0xe1_u8, 0x21_u8, 0xf1_u8, 0x7f_u8, 0x95_u8, 0xc3_u8, 0xc3_u8])
    def query_interface(this : IPBDASiParser*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPBDASiParser*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPBDASiParser*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IPBDASiParser*, punk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, punk)
    end
    def get_eit(this : IPBDASiParser*, dwSize : UInt32, pBuffer : UInt8*, ppEIT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_eit.call(this, dwSize, pBuffer, ppEIT)
    end
    def get_services(this : IPBDASiParser*, dwSize : UInt32, pBuffer : UInt8*, ppServices : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_services.call(this, dwSize, pBuffer, ppServices)
    end

  end

  @[Extern]
  record IPBDA_EITVtbl,
    query_interface : Proc(IPBDA_EIT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPBDA_EIT*, UInt32),
    release : Proc(IPBDA_EIT*, UInt32),
    initialize__ : Proc(IPBDA_EIT*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_table_id : Proc(IPBDA_EIT*, UInt8*, Win32cr::Foundation::HRESULT),
    get_version_number : Proc(IPBDA_EIT*, UInt16*, Win32cr::Foundation::HRESULT),
    get_service_idx : Proc(IPBDA_EIT*, UInt64*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IPBDA_EIT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_event_id : Proc(IPBDA_EIT*, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    get_record_start_time : Proc(IPBDA_EIT*, UInt32, Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*, Win32cr::Foundation::HRESULT),
    get_record_duration : Proc(IPBDA_EIT*, UInt32, Win32cr::Media::DirectShow::MPEG_TIME*, Win32cr::Foundation::HRESULT),
    get_record_count_of_descriptors : Proc(IPBDA_EIT*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_index : Proc(IPBDA_EIT*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_record_descriptor_by_tag : Proc(IPBDA_EIT*, UInt32, UInt8, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a35f2dea-098f-4ebd-984c-2bd4c3c8ce0a")]
  record IPBDA_EIT, lpVtbl : IPBDA_EITVtbl* do
    GUID = LibC::GUID.new(0xa35f2dea_u32, 0x98f_u16, 0x4ebd_u16, StaticArray[0x98_u8, 0x4c_u8, 0x2b_u8, 0xd4_u8, 0xc3_u8, 0xc8_u8, 0xce_u8, 0xa_u8])
    def query_interface(this : IPBDA_EIT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPBDA_EIT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPBDA_EIT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IPBDA_EIT*, size : UInt32, pBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, size, pBuffer)
    end
    def get_table_id(this : IPBDA_EIT*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_table_id.call(this, pbVal)
    end
    def get_version_number(this : IPBDA_EIT*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_number.call(this, pwVal)
    end
    def get_service_idx(this : IPBDA_EIT*, plwVal : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_idx.call(this, plwVal)
    end
    def get_count_of_records(this : IPBDA_EIT*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_event_id(this : IPBDA_EIT*, dwRecordIndex : UInt32, plwVal : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_event_id.call(this, dwRecordIndex, plwVal)
    end
    def get_record_start_time(this : IPBDA_EIT*, dwRecordIndex : UInt32, pmdtVal : Win32cr::Media::DirectShow::MPEG_DATE_AND_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_start_time.call(this, dwRecordIndex, pmdtVal)
    end
    def get_record_duration(this : IPBDA_EIT*, dwRecordIndex : UInt32, pmdVal : Win32cr::Media::DirectShow::MPEG_TIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_duration.call(this, dwRecordIndex, pmdVal)
    end
    def get_record_count_of_descriptors(this : IPBDA_EIT*, dwRecordIndex : UInt32, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count_of_descriptors.call(this, dwRecordIndex, pdwVal)
    end
    def get_record_descriptor_by_index(this : IPBDA_EIT*, dwRecordIndex : UInt32, dwIndex : UInt32, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_index.call(this, dwRecordIndex, dwIndex, ppDescriptor)
    end
    def get_record_descriptor_by_tag(this : IPBDA_EIT*, dwRecordIndex : UInt32, bTag : UInt8, pdwCookie : UInt32*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_descriptor_by_tag.call(this, dwRecordIndex, bTag, pdwCookie, ppDescriptor)
    end

  end

  @[Extern]
  record IPBDA_ServicesVtbl,
    query_interface : Proc(IPBDA_Services*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPBDA_Services*, UInt32),
    release : Proc(IPBDA_Services*, UInt32),
    initialize__ : Proc(IPBDA_Services*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_count_of_records : Proc(IPBDA_Services*, UInt32*, Win32cr::Foundation::HRESULT),
    get_record_by_index : Proc(IPBDA_Services*, UInt32, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("944eab37-eed4-4850-afd2-77e7efeb4427")]
  record IPBDA_Services, lpVtbl : IPBDA_ServicesVtbl* do
    GUID = LibC::GUID.new(0x944eab37_u32, 0xeed4_u16, 0x4850_u16, StaticArray[0xaf_u8, 0xd2_u8, 0x77_u8, 0xe7_u8, 0xef_u8, 0xeb_u8, 0x44_u8, 0x27_u8])
    def query_interface(this : IPBDA_Services*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPBDA_Services*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPBDA_Services*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IPBDA_Services*, size : UInt32, pBuffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, size, pBuffer)
    end
    def get_count_of_records(this : IPBDA_Services*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count_of_records.call(this, pdwVal)
    end
    def get_record_by_index(this : IPBDA_Services*, dwRecordIndex : UInt32, pul64ServiceIdx : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_by_index.call(this, dwRecordIndex, pul64ServiceIdx)
    end

  end

  @[Extern]
  record IPBDAEntitlementDescriptorVtbl,
    query_interface : Proc(IPBDAEntitlementDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPBDAEntitlementDescriptor*, UInt32),
    release : Proc(IPBDAEntitlementDescriptor*, UInt32),
    get_tag : Proc(IPBDAEntitlementDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IPBDAEntitlementDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_token : Proc(IPBDAEntitlementDescriptor*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("22632497-0de3-4587-aadc-d8d99017e760")]
  record IPBDAEntitlementDescriptor, lpVtbl : IPBDAEntitlementDescriptorVtbl* do
    GUID = LibC::GUID.new(0x22632497_u32, 0xde3_u16, 0x4587_u16, StaticArray[0xaa_u8, 0xdc_u8, 0xd8_u8, 0xd9_u8, 0x90_u8, 0x17_u8, 0xe7_u8, 0x60_u8])
    def query_interface(this : IPBDAEntitlementDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPBDAEntitlementDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPBDAEntitlementDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IPBDAEntitlementDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IPBDAEntitlementDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pwVal)
    end
    def get_token(this : IPBDAEntitlementDescriptor*, ppbTokenBuffer : UInt8**, pdwTokenLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_token.call(this, ppbTokenBuffer, pdwTokenLength)
    end

  end

  @[Extern]
  record IPBDAAttributesDescriptorVtbl,
    query_interface : Proc(IPBDAAttributesDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPBDAAttributesDescriptor*, UInt32),
    release : Proc(IPBDAAttributesDescriptor*, UInt32),
    get_tag : Proc(IPBDAAttributesDescriptor*, UInt8*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IPBDAAttributesDescriptor*, UInt16*, Win32cr::Foundation::HRESULT),
    get_attribute_payload : Proc(IPBDAAttributesDescriptor*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("313b3620-3263-45a6-9533-968befbeac03")]
  record IPBDAAttributesDescriptor, lpVtbl : IPBDAAttributesDescriptorVtbl* do
    GUID = LibC::GUID.new(0x313b3620_u32, 0x3263_u16, 0x45a6_u16, StaticArray[0x95_u8, 0x33_u8, 0x96_u8, 0x8b_u8, 0xef_u8, 0xbe_u8, 0xac_u8, 0x3_u8])
    def query_interface(this : IPBDAAttributesDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPBDAAttributesDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPBDAAttributesDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_tag(this : IPBDAAttributesDescriptor*, pbVal : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tag.call(this, pbVal)
    end
    def get_length(this : IPBDAAttributesDescriptor*, pwVal : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pwVal)
    end
    def get_attribute_payload(this : IPBDAAttributesDescriptor*, ppbAttributeBuffer : UInt8**, pdwAttributeLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attribute_payload.call(this, ppbAttributeBuffer, pdwAttributeLength)
    end

  end

  @[Extern]
  record IBDA_TIF_REGISTRATIONVtbl,
    query_interface : Proc(IBDA_TIF_REGISTRATION*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBDA_TIF_REGISTRATION*, UInt32),
    release : Proc(IBDA_TIF_REGISTRATION*, UInt32),
    register_tif_ex : Proc(IBDA_TIF_REGISTRATION*, Void*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    unregister_tif : Proc(IBDA_TIF_REGISTRATION*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dfef4a68-ee61-415f-9ccb-cd95f2f98a3a")]
  record IBDA_TIF_REGISTRATION, lpVtbl : IBDA_TIF_REGISTRATIONVtbl* do
    GUID = LibC::GUID.new(0xdfef4a68_u32, 0xee61_u16, 0x415f_u16, StaticArray[0x9c_u8, 0xcb_u8, 0xcd_u8, 0x95_u8, 0xf2_u8, 0xf9_u8, 0x8a_u8, 0x3a_u8])
    def query_interface(this : IBDA_TIF_REGISTRATION*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBDA_TIF_REGISTRATION*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBDA_TIF_REGISTRATION*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_tif_ex(this : IBDA_TIF_REGISTRATION*, pTIFInputPin : Void*, ppvRegistrationContext : UInt32*, ppMpeg2DataControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_tif_ex.call(this, pTIFInputPin, ppvRegistrationContext, ppMpeg2DataControl)
    end
    def unregister_tif(this : IBDA_TIF_REGISTRATION*, pvRegistrationContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_tif.call(this, pvRegistrationContext)
    end

  end

  @[Extern]
  record IMPEG2_TIF_CONTROLVtbl,
    query_interface : Proc(IMPEG2_TIF_CONTROL*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMPEG2_TIF_CONTROL*, UInt32),
    release : Proc(IMPEG2_TIF_CONTROL*, UInt32),
    register_tif : Proc(IMPEG2_TIF_CONTROL*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unregister_tif : Proc(IMPEG2_TIF_CONTROL*, UInt32, Win32cr::Foundation::HRESULT),
    add_pi_ds : Proc(IMPEG2_TIF_CONTROL*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    delete_pi_ds : Proc(IMPEG2_TIF_CONTROL*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_pid_count : Proc(IMPEG2_TIF_CONTROL*, UInt32*, Win32cr::Foundation::HRESULT),
    get_pi_ds : Proc(IMPEG2_TIF_CONTROL*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f9bac2f9-4149-4916-b2ef-faa202326862")]
  record IMPEG2_TIF_CONTROL, lpVtbl : IMPEG2_TIF_CONTROLVtbl* do
    GUID = LibC::GUID.new(0xf9bac2f9_u32, 0x4149_u16, 0x4916_u16, StaticArray[0xb2_u8, 0xef_u8, 0xfa_u8, 0xa2_u8, 0x2_u8, 0x32_u8, 0x68_u8, 0x62_u8])
    def query_interface(this : IMPEG2_TIF_CONTROL*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMPEG2_TIF_CONTROL*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMPEG2_TIF_CONTROL*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_tif(this : IMPEG2_TIF_CONTROL*, pUnkTIF : Void*, ppvRegistrationContext : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_tif.call(this, pUnkTIF, ppvRegistrationContext)
    end
    def unregister_tif(this : IMPEG2_TIF_CONTROL*, pvRegistrationContext : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_tif.call(this, pvRegistrationContext)
    end
    def add_pi_ds(this : IMPEG2_TIF_CONTROL*, ulcPIDs : UInt32, pulPIDs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_pi_ds.call(this, ulcPIDs, pulPIDs)
    end
    def delete_pi_ds(this : IMPEG2_TIF_CONTROL*, ulcPIDs : UInt32, pulPIDs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_pi_ds.call(this, ulcPIDs, pulPIDs)
    end
    def get_pid_count(this : IMPEG2_TIF_CONTROL*, pulcPIDs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pid_count.call(this, pulcPIDs)
    end
    def get_pi_ds(this : IMPEG2_TIF_CONTROL*, pulcPIDs : UInt32*, pulPIDs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pi_ds.call(this, pulcPIDs, pulPIDs)
    end

  end

  @[Extern]
  record ITuneRequestInfoVtbl,
    query_interface : Proc(ITuneRequestInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITuneRequestInfo*, UInt32),
    release : Proc(ITuneRequestInfo*, UInt32),
    get_locator_data : Proc(ITuneRequestInfo*, Void*, Win32cr::Foundation::HRESULT),
    get_component_data : Proc(ITuneRequestInfo*, Void*, Win32cr::Foundation::HRESULT),
    create_component_list : Proc(ITuneRequestInfo*, Void*, Win32cr::Foundation::HRESULT),
    get_next_program : Proc(ITuneRequestInfo*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_previous_program : Proc(ITuneRequestInfo*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_next_locator : Proc(ITuneRequestInfo*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_previous_locator : Proc(ITuneRequestInfo*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a3b152df-7a90-4218-ac54-9830bee8c0b6")]
  record ITuneRequestInfo, lpVtbl : ITuneRequestInfoVtbl* do
    GUID = LibC::GUID.new(0xa3b152df_u32, 0x7a90_u16, 0x4218_u16, StaticArray[0xac_u8, 0x54_u8, 0x98_u8, 0x30_u8, 0xbe_u8, 0xe8_u8, 0xc0_u8, 0xb6_u8])
    def query_interface(this : ITuneRequestInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITuneRequestInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITuneRequestInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_locator_data(this : ITuneRequestInfo*, request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_locator_data.call(this, request)
    end
    def get_component_data(this : ITuneRequestInfo*, current_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_data.call(this, current_request)
    end
    def create_component_list(this : ITuneRequestInfo*, current_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_component_list.call(this, current_request)
    end
    def get_next_program(this : ITuneRequestInfo*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_program.call(this, current_request, tune_request)
    end
    def get_previous_program(this : ITuneRequestInfo*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previous_program.call(this, current_request, tune_request)
    end
    def get_next_locator(this : ITuneRequestInfo*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_locator.call(this, current_request, tune_request)
    end
    def get_previous_locator(this : ITuneRequestInfo*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previous_locator.call(this, current_request, tune_request)
    end

  end

  @[Extern]
  record ITuneRequestInfoExVtbl,
    query_interface : Proc(ITuneRequestInfoEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITuneRequestInfoEx*, UInt32),
    release : Proc(ITuneRequestInfoEx*, UInt32),
    get_locator_data : Proc(ITuneRequestInfoEx*, Void*, Win32cr::Foundation::HRESULT),
    get_component_data : Proc(ITuneRequestInfoEx*, Void*, Win32cr::Foundation::HRESULT),
    create_component_list : Proc(ITuneRequestInfoEx*, Void*, Win32cr::Foundation::HRESULT),
    get_next_program : Proc(ITuneRequestInfoEx*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_previous_program : Proc(ITuneRequestInfoEx*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_next_locator : Proc(ITuneRequestInfoEx*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_previous_locator : Proc(ITuneRequestInfoEx*, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_component_list_ex : Proc(ITuneRequestInfoEx*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ee957c52-b0d0-4e78-8dd1-b87a08bfd893")]
  record ITuneRequestInfoEx, lpVtbl : ITuneRequestInfoExVtbl* do
    GUID = LibC::GUID.new(0xee957c52_u32, 0xb0d0_u16, 0x4e78_u16, StaticArray[0x8d_u8, 0xd1_u8, 0xb8_u8, 0x7a_u8, 0x8_u8, 0xbf_u8, 0xd8_u8, 0x93_u8])
    def query_interface(this : ITuneRequestInfoEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITuneRequestInfoEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITuneRequestInfoEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_locator_data(this : ITuneRequestInfoEx*, request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_locator_data.call(this, request)
    end
    def get_component_data(this : ITuneRequestInfoEx*, current_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_component_data.call(this, current_request)
    end
    def create_component_list(this : ITuneRequestInfoEx*, current_request : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_component_list.call(this, current_request)
    end
    def get_next_program(this : ITuneRequestInfoEx*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_program.call(this, current_request, tune_request)
    end
    def get_previous_program(this : ITuneRequestInfoEx*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previous_program.call(this, current_request, tune_request)
    end
    def get_next_locator(this : ITuneRequestInfoEx*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_locator.call(this, current_request, tune_request)
    end
    def get_previous_locator(this : ITuneRequestInfoEx*, current_request : Void*, tune_request : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_previous_locator.call(this, current_request, tune_request)
    end
    def create_component_list_ex(this : ITuneRequestInfoEx*, current_request : Void*, ppCurPMT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_component_list_ex.call(this, current_request, ppCurPMT)
    end

  end

  @[Extern]
  record ISIInbandEPGEventVtbl,
    query_interface : Proc(ISIInbandEPGEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISIInbandEPGEvent*, UInt32),
    release : Proc(ISIInbandEPGEvent*, UInt32),
    si_object_event : Proc(ISIInbandEPGEvent*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7e47913a-5a89-423d-9a2b-e15168858934")]
  record ISIInbandEPGEvent, lpVtbl : ISIInbandEPGEventVtbl* do
    GUID = LibC::GUID.new(0x7e47913a_u32, 0x5a89_u16, 0x423d_u16, StaticArray[0x9a_u8, 0x2b_u8, 0xe1_u8, 0x51_u8, 0x68_u8, 0x85_u8, 0x89_u8, 0x34_u8])
    def query_interface(this : ISIInbandEPGEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISIInbandEPGEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISIInbandEPGEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def si_object_event(this : ISIInbandEPGEvent*, pIDVB_EIT : Void*, dwTable_ID : UInt32, dwService_ID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.si_object_event.call(this, pIDVB_EIT, dwTable_ID, dwService_ID)
    end

  end

  @[Extern]
  record ISIInbandEPGVtbl,
    query_interface : Proc(ISIInbandEPG*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISIInbandEPG*, UInt32),
    release : Proc(ISIInbandEPG*, UInt32),
    start_siepg_scan : Proc(ISIInbandEPG*, Win32cr::Foundation::HRESULT),
    stop_siepg_scan : Proc(ISIInbandEPG*, Win32cr::Foundation::HRESULT),
    is_siepg_scan_running : Proc(ISIInbandEPG*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f90ad9d0-b854-4b68-9cc1-b2cc96119d85")]
  record ISIInbandEPG, lpVtbl : ISIInbandEPGVtbl* do
    GUID = LibC::GUID.new(0xf90ad9d0_u32, 0xb854_u16, 0x4b68_u16, StaticArray[0x9c_u8, 0xc1_u8, 0xb2_u8, 0xcc_u8, 0x96_u8, 0x11_u8, 0x9d_u8, 0x85_u8])
    def query_interface(this : ISIInbandEPG*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISIInbandEPG*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISIInbandEPG*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_siepg_scan(this : ISIInbandEPG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_siepg_scan.call(this)
    end
    def stop_siepg_scan(this : ISIInbandEPG*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_siepg_scan.call(this)
    end
    def is_siepg_scan_running(this : ISIInbandEPG*, bRunning : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_siepg_scan_running.call(this, bRunning)
    end

  end

  @[Extern]
  record IGuideDataEventVtbl,
    query_interface : Proc(IGuideDataEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGuideDataEvent*, UInt32),
    release : Proc(IGuideDataEvent*, UInt32),
    guide_data_acquired : Proc(IGuideDataEvent*, Win32cr::Foundation::HRESULT),
    program_changed : Proc(IGuideDataEvent*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    service_changed : Proc(IGuideDataEvent*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    schedule_entry_changed : Proc(IGuideDataEvent*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    program_deleted : Proc(IGuideDataEvent*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    service_deleted : Proc(IGuideDataEvent*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT),
    schedule_deleted : Proc(IGuideDataEvent*, Win32cr::System::Com::VARIANT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("efda0c80-f395-42c3-9b3c-56b37dec7bb7")]
  record IGuideDataEvent, lpVtbl : IGuideDataEventVtbl* do
    GUID = LibC::GUID.new(0xefda0c80_u32, 0xf395_u16, 0x42c3_u16, StaticArray[0x9b_u8, 0x3c_u8, 0x56_u8, 0xb3_u8, 0x7d_u8, 0xec_u8, 0x7b_u8, 0xb7_u8])
    def query_interface(this : IGuideDataEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGuideDataEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGuideDataEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def guide_data_acquired(this : IGuideDataEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.guide_data_acquired.call(this)
    end
    def program_changed(this : IGuideDataEvent*, varProgramDescriptionID : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.program_changed.call(this, varProgramDescriptionID)
    end
    def service_changed(this : IGuideDataEvent*, varServiceDescriptionID : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.service_changed.call(this, varServiceDescriptionID)
    end
    def schedule_entry_changed(this : IGuideDataEvent*, varScheduleEntryDescriptionID : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.schedule_entry_changed.call(this, varScheduleEntryDescriptionID)
    end
    def program_deleted(this : IGuideDataEvent*, varProgramDescriptionID : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.program_deleted.call(this, varProgramDescriptionID)
    end
    def service_deleted(this : IGuideDataEvent*, varServiceDescriptionID : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.service_deleted.call(this, varServiceDescriptionID)
    end
    def schedule_deleted(this : IGuideDataEvent*, varScheduleEntryDescriptionID : Win32cr::System::Com::VARIANT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.schedule_deleted.call(this, varScheduleEntryDescriptionID)
    end

  end

  @[Extern]
  record IGuideDataPropertyVtbl,
    query_interface : Proc(IGuideDataProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGuideDataProperty*, UInt32),
    release : Proc(IGuideDataProperty*, UInt32),
    get_Name : Proc(IGuideDataProperty*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Language : Proc(IGuideDataProperty*, Int32*, Win32cr::Foundation::HRESULT),
    get_Value : Proc(IGuideDataProperty*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("88ec5e58-bb73-41d6-99ce-66c524b8b591")]
  record IGuideDataProperty, lpVtbl : IGuideDataPropertyVtbl* do
    GUID = LibC::GUID.new(0x88ec5e58_u32, 0xbb73_u16, 0x41d6_u16, StaticArray[0x99_u8, 0xce_u8, 0x66_u8, 0xc5_u8, 0x24_u8, 0xb8_u8, 0xb5_u8, 0x91_u8])
    def query_interface(this : IGuideDataProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGuideDataProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGuideDataProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Name(this : IGuideDataProperty*, pbstrName : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pbstrName)
    end
    def get_Language(this : IGuideDataProperty*, idLang : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Language.call(this, idLang)
    end
    def get_Value(this : IGuideDataProperty*, pvar : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Value.call(this, pvar)
    end

  end

  @[Extern]
  record IEnumGuideDataPropertiesVtbl,
    query_interface : Proc(IEnumGuideDataProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumGuideDataProperties*, UInt32),
    release : Proc(IEnumGuideDataProperties*, UInt32),
    next__ : Proc(IEnumGuideDataProperties*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumGuideDataProperties*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumGuideDataProperties*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumGuideDataProperties*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ae44423b-4571-475c-ad2c-f40a771d80ef")]
  record IEnumGuideDataProperties, lpVtbl : IEnumGuideDataPropertiesVtbl* do
    GUID = LibC::GUID.new(0xae44423b_u32, 0x4571_u16, 0x475c_u16, StaticArray[0xad_u8, 0x2c_u8, 0xf4_u8, 0xa_u8, 0x77_u8, 0x1d_u8, 0x80_u8, 0xef_u8])
    def query_interface(this : IEnumGuideDataProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumGuideDataProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumGuideDataProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumGuideDataProperties*, celt : UInt32, ppprop : Void**, pcelt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppprop, pcelt)
    end
    def skip(this : IEnumGuideDataProperties*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumGuideDataProperties*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumGuideDataProperties*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record IEnumTuneRequestsVtbl,
    query_interface : Proc(IEnumTuneRequests*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumTuneRequests*, UInt32),
    release : Proc(IEnumTuneRequests*, UInt32),
    next__ : Proc(IEnumTuneRequests*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumTuneRequests*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumTuneRequests*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumTuneRequests*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1993299c-ced6-4788-87a3-420067dce0c7")]
  record IEnumTuneRequests, lpVtbl : IEnumTuneRequestsVtbl* do
    GUID = LibC::GUID.new(0x1993299c_u32, 0xced6_u16, 0x4788_u16, StaticArray[0x87_u8, 0xa3_u8, 0x42_u8, 0x0_u8, 0x67_u8, 0xdc_u8, 0xe0_u8, 0xc7_u8])
    def query_interface(this : IEnumTuneRequests*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumTuneRequests*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumTuneRequests*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumTuneRequests*, celt : UInt32, ppprop : Void**, pcelt : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppprop, pcelt)
    end
    def skip(this : IEnumTuneRequests*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumTuneRequests*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumTuneRequests*, ppenum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppenum)
    end

  end

  @[Extern]
  record IGuideDataVtbl,
    query_interface : Proc(IGuideData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGuideData*, UInt32),
    release : Proc(IGuideData*, UInt32),
    get_services : Proc(IGuideData*, Void**, Win32cr::Foundation::HRESULT),
    get_service_properties : Proc(IGuideData*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_guide_program_i_ds : Proc(IGuideData*, Void**, Win32cr::Foundation::HRESULT),
    get_program_properties : Proc(IGuideData*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT),
    get_schedule_entry_i_ds : Proc(IGuideData*, Void**, Win32cr::Foundation::HRESULT),
    get_schedule_entry_properties : Proc(IGuideData*, Win32cr::System::Com::VARIANT, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("61571138-5b01-43cd-aeaf-60b784a0bf93")]
  record IGuideData, lpVtbl : IGuideDataVtbl* do
    GUID = LibC::GUID.new(0x61571138_u32, 0x5b01_u16, 0x43cd_u16, StaticArray[0xae_u8, 0xaf_u8, 0x60_u8, 0xb7_u8, 0x84_u8, 0xa0_u8, 0xbf_u8, 0x93_u8])
    def query_interface(this : IGuideData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGuideData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGuideData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_services(this : IGuideData*, ppEnumTuneRequests : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_services.call(this, ppEnumTuneRequests)
    end
    def get_service_properties(this : IGuideData*, pTuneRequest : Void*, ppEnumProperties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_properties.call(this, pTuneRequest, ppEnumProperties)
    end
    def get_guide_program_i_ds(this : IGuideData*, pEnumPrograms : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guide_program_i_ds.call(this, pEnumPrograms)
    end
    def get_program_properties(this : IGuideData*, varProgramDescriptionID : Win32cr::System::Com::VARIANT, ppEnumProperties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_program_properties.call(this, varProgramDescriptionID, ppEnumProperties)
    end
    def get_schedule_entry_i_ds(this : IGuideData*, pEnumScheduleEntries : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schedule_entry_i_ds.call(this, pEnumScheduleEntries)
    end
    def get_schedule_entry_properties(this : IGuideData*, varScheduleEntryDescriptionID : Win32cr::System::Com::VARIANT, ppEnumProperties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schedule_entry_properties.call(this, varScheduleEntryDescriptionID, ppEnumProperties)
    end

  end

  @[Extern]
  record IGuideDataLoaderVtbl,
    query_interface : Proc(IGuideDataLoader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IGuideDataLoader*, UInt32),
    release : Proc(IGuideDataLoader*, UInt32),
    init : Proc(IGuideDataLoader*, Void*, Win32cr::Foundation::HRESULT),
    terminate : Proc(IGuideDataLoader*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4764ff7c-fa95-4525-af4d-d32236db9e38")]
  record IGuideDataLoader, lpVtbl : IGuideDataLoaderVtbl* do
    GUID = LibC::GUID.new(0x4764ff7c_u32, 0xfa95_u16, 0x4525_u16, StaticArray[0xaf_u8, 0x4d_u8, 0xd3_u8, 0x22_u8, 0x36_u8, 0xdb_u8, 0x9e_u8, 0x38_u8])
    def query_interface(this : IGuideDataLoader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IGuideDataLoader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IGuideDataLoader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IGuideDataLoader*, pGuideStore : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, pGuideStore)
    end
    def terminate(this : IGuideDataLoader*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.terminate.call(this)
    end

  end

  @[Extern]
  record IWMCodecAMVideoAcceleratorVtbl,
    query_interface : Proc(IWMCodecAMVideoAccelerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMCodecAMVideoAccelerator*, UInt32),
    release : Proc(IWMCodecAMVideoAccelerator*, UInt32),
    set_accelerator_interface : Proc(IWMCodecAMVideoAccelerator*, Void*, Win32cr::Foundation::HRESULT),
    negotiate_connection : Proc(IWMCodecAMVideoAccelerator*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    set_player_notify : Proc(IWMCodecAMVideoAccelerator*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d98ee251-34e0-4a2d-9312-9b4c788d9fa1")]
  record IWMCodecAMVideoAccelerator, lpVtbl : IWMCodecAMVideoAcceleratorVtbl* do
    GUID = LibC::GUID.new(0xd98ee251_u32, 0x34e0_u16, 0x4a2d_u16, StaticArray[0x93_u8, 0x12_u8, 0x9b_u8, 0x4c_u8, 0x78_u8, 0x8d_u8, 0x9f_u8, 0xa1_u8])
    def query_interface(this : IWMCodecAMVideoAccelerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMCodecAMVideoAccelerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMCodecAMVideoAccelerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_accelerator_interface(this : IWMCodecAMVideoAccelerator*, pIAMVA : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_accelerator_interface.call(this, pIAMVA)
    end
    def negotiate_connection(this : IWMCodecAMVideoAccelerator*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.negotiate_connection.call(this, pMediaType)
    end
    def set_player_notify(this : IWMCodecAMVideoAccelerator*, pHook : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_player_notify.call(this, pHook)
    end

  end

  @[Extern]
  record IWMCodecVideoAcceleratorVtbl,
    query_interface : Proc(IWMCodecVideoAccelerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMCodecVideoAccelerator*, UInt32),
    release : Proc(IWMCodecVideoAccelerator*, UInt32),
    negotiate_connection : Proc(IWMCodecVideoAccelerator*, Void*, Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    set_player_notify : Proc(IWMCodecVideoAccelerator*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("990641b0-739f-4e94-a808-9888da8f75af")]
  record IWMCodecVideoAccelerator, lpVtbl : IWMCodecVideoAcceleratorVtbl* do
    GUID = LibC::GUID.new(0x990641b0_u32, 0x739f_u16, 0x4e94_u16, StaticArray[0xa8_u8, 0x8_u8, 0x98_u8, 0x88_u8, 0xda_u8, 0x8f_u8, 0x75_u8, 0xaf_u8])
    def query_interface(this : IWMCodecVideoAccelerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMCodecVideoAccelerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMCodecVideoAccelerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def negotiate_connection(this : IWMCodecVideoAccelerator*, pIAMVA : Void*, pMediaType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.negotiate_connection.call(this, pIAMVA, pMediaType)
    end
    def set_player_notify(this : IWMCodecVideoAccelerator*, pHook : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_player_notify.call(this, pHook)
    end

  end

  @[Link("quartz")]
  lib C
    fun AMGetErrorTextA(hr : Win32cr::Foundation::HRESULT, pbuffer : UInt8*, max_len : UInt32) : UInt32

    fun AMGetErrorTextW(hr : Win32cr::Foundation::HRESULT, pbuffer : UInt16*, max_len : UInt32) : UInt32

  end
end