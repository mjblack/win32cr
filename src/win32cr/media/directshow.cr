require "../foundation.cr"
require "../system/com.cr"
require "../media.cr"
require "../graphics/gdi.cr"
require "../system/com/structuredstorage.cr"
require "../system/registry.cr"
require "../graphics/directdraw.cr"
require "../media/audio/directsound.cr"
require "../media/kernelstreaming.cr"
require "../media/windowsmediaformat.cr"
require "../media/audio.cr"
require "../ui/windowsandmessaging.cr"
require "../graphics/direct3d9.cr"
require "../media/mediafoundation.cr"
require "../system/diagnostics/etw.cr"
require "../system/ole.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:quartz.dll")]
{% else %}
@[Link("quartz")]
{% end %}
lib LibWin32
  EC_SND_DEVICE_ERROR_BASE = 512_u32
  EC_SNDDEV_IN_ERROR = 512_u32
  EC_SNDDEV_OUT_ERROR = 513_u32
  EC_SYSTEMBASE = 0_u32
  EC_USER = 32768_u32
  EC_COMPLETE = 1_u32
  EC_USERABORT = 2_u32
  EC_ERRORABORT = 3_u32
  EC_TIME = 4_u32
  EC_REPAINT = 5_u32
  EC_STREAM_ERROR_STOPPED = 6_u32
  EC_STREAM_ERROR_STILLPLAYING = 7_u32
  EC_ERROR_STILLPLAYING = 8_u32
  EC_PALETTE_CHANGED = 9_u32
  EC_VIDEO_SIZE_CHANGED = 10_u32
  EC_QUALITY_CHANGE = 11_u32
  EC_SHUTTING_DOWN = 12_u32
  EC_CLOCK_CHANGED = 13_u32
  EC_PAUSED = 14_u32
  EC_OPENING_FILE = 16_u32
  EC_BUFFERING_DATA = 17_u32
  EC_FULLSCREEN_LOST = 18_u32
  EC_ACTIVATE = 19_u32
  EC_NEED_RESTART = 20_u32
  EC_WINDOW_DESTROYED = 21_u32
  EC_DISPLAY_CHANGED = 22_u32
  EC_STARVATION = 23_u32
  EC_OLE_EVENT = 24_u32
  EC_NOTIFY_WINDOW = 25_u32
  EC_STREAM_CONTROL_STOPPED = 26_u32
  EC_STREAM_CONTROL_STARTED = 27_u32
  EC_END_OF_SEGMENT = 28_u32
  EC_SEGMENT_STARTED = 29_u32
  EC_LENGTH_CHANGED = 30_u32
  EC_DEVICE_LOST = 31_u32
  EC_SAMPLE_NEEDED = 32_u32
  EC_PROCESSING_LATENCY = 33_u32
  EC_SAMPLE_LATENCY = 34_u32
  EC_SCRUB_TIME = 35_u32
  EC_STEP_COMPLETE = 36_u32
  EC_TIMECODE_AVAILABLE = 48_u32
  EC_EXTDEVICE_MODE_CHANGE = 49_u32
  EC_STATE_CHANGE = 50_u32
  EC_GRAPH_CHANGED = 80_u32
  EC_CLOCK_UNSET = 81_u32
  EC_VMR_RENDERDEVICE_SET = 83_u32
  VMR_RENDER_DEVICE_OVERLAY = 1_u32
  VMR_RENDER_DEVICE_VIDMEM = 2_u32
  VMR_RENDER_DEVICE_SYSMEM = 4_u32
  EC_VMR_SURFACE_FLIPPED = 84_u32
  EC_VMR_RECONNECTION_FAILED = 85_u32
  EC_PREPROCESS_COMPLETE = 86_u32
  EC_CODECAPI_EVENT = 87_u32
  EC_WMT_EVENT_BASE = 593_u32
  EC_WMT_INDEX_EVENT = 593_u32
  EC_WMT_EVENT = 594_u32
  EC_BUILT = 768_u32
  EC_UNBUILT = 769_u32
  EC_SKIP_FRAMES = 37_u32
  EC_PLEASE_REOPEN = 64_u32
  EC_STATUS = 65_u32
  EC_MARKER_HIT = 66_u32
  EC_LOADSTATUS = 67_u32
  EC_FILE_CLOSED = 68_u32
  EC_ERRORABORTEX = 69_u32
  AM_LOADSTATUS_CLOSED = 0_u32
  AM_LOADSTATUS_LOADINGDESCR = 1_u32
  AM_LOADSTATUS_LOADINGMCAST = 2_u32
  AM_LOADSTATUS_LOCATING = 3_u32
  AM_LOADSTATUS_CONNECTING = 4_u32
  AM_LOADSTATUS_OPENING = 5_u32
  AM_LOADSTATUS_OPEN = 6_u32
  EC_NEW_PIN = 32_u32
  EC_RENDER_FINISHED = 33_u32
  EC_EOS_SOON = 70_u32
  EC_CONTENTPROPERTY_CHANGED = 71_u32
  AM_CONTENTPROPERTY_TITLE = 1_u32
  AM_CONTENTPROPERTY_AUTHOR = 2_u32
  AM_CONTENTPROPERTY_COPYRIGHT = 4_u32
  AM_CONTENTPROPERTY_DESCRIPTION = 8_u32
  EC_BANDWIDTHCHANGE = 72_u32
  EC_VIDEOFRAMEREADY = 73_u32
  EC_DVDBASE = 256_u32
  EC_DVD_DOMAIN_CHANGE = 257_u32
  EC_DVD_TITLE_CHANGE = 258_u32
  EC_DVD_CHAPTER_START = 259_u32
  EC_DVD_AUDIO_STREAM_CHANGE = 260_u32
  EC_DVD_SUBPICTURE_STREAM_CHANGE = 261_u32
  EC_DVD_ANGLE_CHANGE = 262_u32
  EC_DVD_BUTTON_CHANGE = 263_u32
  EC_DVD_VALID_UOPS_CHANGE = 264_u32
  EC_DVD_STILL_ON = 265_u32
  EC_DVD_STILL_OFF = 266_u32
  EC_DVD_CURRENT_TIME = 267_u32
  EC_DVD_ERROR = 268_u32
  EC_DVD_WARNING = 269_u32
  EC_DVD_CHAPTER_AUTOSTOP = 270_u32
  EC_DVD_NO_FP_PGC = 271_u32
  EC_DVD_PLAYBACK_RATE_CHANGE = 272_u32
  EC_DVD_PARENTAL_LEVEL_CHANGE = 273_u32
  EC_DVD_PLAYBACK_STOPPED = 274_u32
  EC_DVD_ANGLES_AVAILABLE = 275_u32
  EC_DVD_PLAYPERIOD_AUTOSTOP = 276_u32
  EC_DVD_BUTTON_AUTO_ACTIVATED = 277_u32
  EC_DVD_CMD_START = 278_u32
  EC_DVD_CMD_END = 279_u32
  EC_DVD_DISC_EJECTED = 280_u32
  EC_DVD_DISC_INSERTED = 281_u32
  EC_DVD_CURRENT_HMSF_TIME = 282_u32
  EC_DVD_KARAOKE_MODE = 283_u32
  EC_DVD_PROGRAM_CELL_CHANGE = 284_u32
  EC_DVD_TITLE_SET_CHANGE = 285_u32
  EC_DVD_PROGRAM_CHAIN_CHANGE = 286_u32
  EC_DVD_VOBU_Offset = 287_u32
  EC_DVD_VOBU_Timestamp = 288_u32
  EC_DVD_GPRM_Change = 289_u32
  EC_DVD_SPRM_Change = 290_u32
  EC_DVD_BeginNavigationCommands = 291_u32
  EC_DVD_NavigationCommand = 292_u32
  AM_AC3_ALTERNATE_AUDIO_1 = 1_u32
  AM_AC3_ALTERNATE_AUDIO_2 = 2_u32
  AM_AC3_ALTERNATE_AUDIO_BOTH = 3_u32
  AM_AC3_SERVICE_MAIN_AUDIO = 0_u32
  AM_AC3_SERVICE_NO_DIALOG = 1_u32
  AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2_u32
  AM_AC3_SERVICE_HEARING_IMPAIRED = 3_u32
  AM_AC3_SERVICE_DIALOG_ONLY = 4_u32
  AM_AC3_SERVICE_COMMENTARY = 5_u32
  AM_AC3_SERVICE_EMERGENCY_FLASH = 6_u32
  AM_AC3_SERVICE_VOICE_OVER = 7_u32
  AM_UseNewCSSKey = 1_u32
  AM_ReverseBlockStart = 2_u32
  AM_ReverseBlockEnd = 4_u32
  AM_DVD_CGMS_RESERVED_MASK = 120_u32
  AM_DVD_CGMS_COPY_PROTECT_MASK = 24_u32
  AM_DVD_CGMS_COPY_PERMITTED = 0_u32
  AM_DVD_CGMS_COPY_ONCE = 16_u32
  AM_DVD_CGMS_NO_COPY = 24_u32
  AM_DVD_COPYRIGHT_MASK = 64_u32
  AM_DVD_NOT_COPYRIGHTED = 0_u32
  AM_DVD_COPYRIGHTED = 64_u32
  AM_DVD_SECTOR_PROTECT_MASK = 32_u32
  AM_DVD_SECTOR_NOT_PROTECTED = 0_u32
  AM_DVD_SECTOR_PROTECTED = 32_u32
  AMINTERLACE_IsInterlaced = 1_u32
  AMINTERLACE_1FieldPerSample = 2_u32
  AMINTERLACE_Field1First = 4_u32
  AMINTERLACE_UNUSED = 8_u32
  AMINTERLACE_FieldPatternMask = 48_u32
  AMINTERLACE_FieldPatField1Only = 0_u32
  AMINTERLACE_FieldPatField2Only = 16_u32
  AMINTERLACE_FieldPatBothRegular = 32_u32
  AMINTERLACE_FieldPatBothIrregular = 48_u32
  AMINTERLACE_DisplayModeMask = 192_u32
  AMINTERLACE_DisplayModeBobOnly = 0_u32
  AMINTERLACE_DisplayModeWeaveOnly = 64_u32
  AMINTERLACE_DisplayModeBobOrWeave = 128_u32
  AMCOPYPROTECT_RestrictDuplication = 1_u32
  AMCONTROL_USED = 1_u32
  AMCONTROL_PAD_TO_4x3 = 2_u32
  AMCONTROL_PAD_TO_16x9 = 4_u32
  AMCONTROL_COLORINFO_PRESENT = 128_u32
  AM_VIDEO_FLAG_FIELD_MASK = 3_i32
  AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0_i32
  AM_VIDEO_FLAG_FIELD1 = 1_i32
  AM_VIDEO_FLAG_FIELD2 = 2_i32
  AM_VIDEO_FLAG_FIELD1FIRST = 4_i32
  AM_VIDEO_FLAG_WEAVE = 8_i32
  AM_VIDEO_FLAG_IPB_MASK = 48_i32
  AM_VIDEO_FLAG_I_SAMPLE = 0_i32
  AM_VIDEO_FLAG_P_SAMPLE = 16_i32
  AM_VIDEO_FLAG_B_SAMPLE = 32_i32
  AM_VIDEO_FLAG_REPEAT_FIELD = 64_i32
  AVIF_HASINDEX = 16_u32
  AVIF_MUSTUSEINDEX = 32_u32
  AVIF_ISINTERLEAVED = 256_u32
  AVIF_TRUSTCKTYPE = 2048_u32
  AVIF_WASCAPTUREFILE = 65536_u32
  AVIF_COPYRIGHTED = 131072_u32
  AVI_HEADERSIZE = 2048_u32
  AVISF_DISABLED = 1_u32
  AVISF_VIDEO_PALCHANGES = 65536_u32
  AVIIF_LIST = 1_i32
  AVIIF_KEYFRAME = 16_i32
  AVIIF_FIRSTPART = 32_i32
  AVIIF_LASTPART = 64_i32
  AVIIF_NOTIME = 256_i32
  AVIIF_COMPUSE = 268369920_i32
  AVIIF_NO_TIME = 256_u32
  AVIIF_COMPRESSOR = 268369920_u32
  TIMECODE_RATE_30DROP = 0_u32
  TIMECODE_SMPTE_BINARY_GROUP = 7_u32
  TIMECODE_SMPTE_COLOR_FRAME = 8_u32
  AVI_INDEX_OF_INDEXES = 0_u32
  AVI_INDEX_OF_CHUNKS = 1_u32
  AVI_INDEX_OF_TIMED_CHUNKS = 2_u32
  AVI_INDEX_OF_SUB_2FIELD = 3_u32
  AVI_INDEX_IS_DATA = 128_u32
  AVI_INDEX_SUB_DEFAULT = 0_u32
  AVI_INDEX_SUB_2FIELD = 1_u32
  STDINDEXSIZE = 16384_u32
  AVISTDINDEX_DELTAFRAME = 2147483648_u32
  AMVA_TYPEINDEX_OUTPUTFRAME = 4294967295_u32
  AMVA_QUERYRENDERSTATUSF_READ = 1_u32
  MIN_DIMENSION = 1_u32
  BDA_PLP_ID_NOT_SET = -1_i32
  CDEF_CLASS_DEFAULT = 1_u32
  CDEF_BYPASS_CLASS_MANAGER = 2_u32
  CDEF_MERIT_ABOVE_DO_NOT_USE = 8_u32
  CDEF_DEVMON_CMGR_DEVICE = 16_u32
  CDEF_DEVMON_DMO = 32_u32
  CDEF_DEVMON_PNP_DEVICE = 64_u32
  CDEF_DEVMON_FILTER = 128_u32
  CDEF_DEVMON_SELECTIVE_MASK = 240_u32
  CHARS_IN_GUID = 39_u32
  MAX_PIN_NAME = 128_u32
  MAX_FILTER_NAME = 128_u32
  AM_GBF_PREVFRAMESKIPPED = 1_u32
  AM_GBF_NOTASYNCPOINT = 2_u32
  AM_GBF_NOWAIT = 4_u32
  AM_GBF_NODDSURFACELOCK = 8_u32
  AMF_AUTOMATICGAIN = "-1.0_f64"
  AnalogVideo_NTSC_Mask = 7_u32
  AnalogVideo_PAL_Mask = 1052656_u32
  AnalogVideo_SECAM_Mask = 1044480_u32
  MPEG2_PROGRAM_STREAM_MAP = 0_u32
  MPEG2_PROGRAM_ELEMENTARY_STREAM = 1_u32
  MPEG2_PROGRAM_DIRECTORY_PES_PACKET = 2_u32
  MPEG2_PROGRAM_PACK_HEADER = 3_u32
  MPEG2_PROGRAM_PES_STREAM = 4_u32
  MPEG2_PROGRAM_SYSTEM_HEADER = 5_u32
  SUBSTREAM_FILTER_VAL_NONE = 268435456_u32
  AM_GETDECODERCAP_QUERY_VMR_SUPPORT = 1_u32
  VMR_NOTSUPPORTED = 0_u32
  VMR_SUPPORTED = 1_u32
  AM_QUERY_DECODER_VMR_SUPPORT = 1_u32
  AM_QUERY_DECODER_DXVA_1_SUPPORT = 2_u32
  AM_QUERY_DECODER_DVD_SUPPORT = 3_u32
  AM_QUERY_DECODER_ATSC_SD_SUPPORT = 4_u32
  AM_QUERY_DECODER_ATSC_HD_SUPPORT = 5_u32
  AM_GETDECODERCAP_QUERY_VMR9_SUPPORT = 6_u32
  AM_GETDECODERCAP_QUERY_EVR_SUPPORT = 7_u32
  DECODER_CAP_NOTSUPPORTED = 0_u32
  DECODER_CAP_SUPPORTED = 1_u32
  VMRBITMAP_DISABLE = 1_u32
  VMRBITMAP_HDC = 2_u32
  VMRBITMAP_ENTIREDDS = 4_u32
  VMRBITMAP_SRCCOLORKEY = 8_u32
  VMRBITMAP_SRCRECT = 16_u32
  DVD_TITLE_MENU = 0_u32
  DVD_STREAM_DATA_CURRENT = 2048_u32
  DVD_STREAM_DATA_VMGM = 1024_u32
  DVD_STREAM_DATA_VTSM = 1025_u32
  DVD_DEFAULT_AUDIO_STREAM = 15_u32
  DVD_AUDIO_CAPS_AC3 = 1_u32
  DVD_AUDIO_CAPS_MPEG2 = 2_u32
  DVD_AUDIO_CAPS_LPCM = 4_u32
  DVD_AUDIO_CAPS_DTS = 8_u32
  DVD_AUDIO_CAPS_SDDS = 16_u32
  MEDIATYPE_MPEG2_PACK = "36523b13-8ee5-11d1-8ca3-0060b057664a"
  PBDA_AUX_CONNECTOR_TYPE_SVideo = "a0e905f4-24c9-4a54-b761-213355efc13a"
  PBDA_AUX_CONNECTOR_TYPE_Composite = "f6298b4c-c725-4d42-849b-410bbb14ea62"
  CLSID_PBDA_AUX_DATA_TYPE = "fd456373-3323-4090-adca-8ed45f55cf10"
  CLSID_PBDA_Encoder_DATA_TYPE = "728fd6bc-5546-4716-b103-f899f5a1fa68"
  PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0_u32
  PBDA_Encoder_Audio_AlgorithmType_AC3 = 1_u32
  PBDA_Encoder_Video_MPEG2PartII = 0_u32
  PBDA_Encoder_Video_MPEG4Part10 = 1_u32
  PBDA_Encoder_Video_AVC = 1_u32
  PBDA_Encoder_Video_H264 = 1_u32
  PBDA_Encoder_BitrateMode_Constant = 1_u32
  PBDA_Encoder_BitrateMode_Variable = 2_u32
  PBDA_Encoder_BitrateMode_Average = 3_u32
  CLSID_PBDA_FDC_DATA_TYPE = "e7dbf9a0-22ab-4047-8e67-ef9ad504e729"
  CLSID_PBDA_GDDS_DATA_TYPE = "c80c0df3-6052-4c16-9f56-c44c21f73c45"
  LIBID_QuartzNetTypeLib = "56a868b1-0ad4-11ce-b03a-0020af0ba770"
  LIBID_QuartzTypeLib = "56a868b0-0ad4-11ce-b03a-0020af0ba770"
  CLSID_AMMultiMediaStream = "49c47ce5-9ba4-11d0-8212-00c04fc32c45"
  CLSID_AMDirectDrawStream = "49c47ce4-9ba4-11d0-8212-00c04fc32c45"
  CLSID_AMAudioStream = "8496e040-af4c-11d0-8212-00c04fc32c45"
  CLSID_AMAudioData = "f2468580-af8a-11d0-8212-00c04fc32c45"
  CLSID_AMMediaTypeStream = "cf0f2f7c-f7bf-11d0-900d-00c04fd9189d"
  AMDDS_NONE = 0_u32
  AMDDS_DCIPS = 1_u32
  AMDDS_PS = 2_u32
  AMDDS_RGBOVR = 4_u32
  AMDDS_YUVOVR = 8_u32
  AMDDS_RGBOFF = 16_u32
  AMDDS_YUVOFF = 32_u32
  AMDDS_RGBFLP = 64_u32
  AMDDS_YUVFLP = 128_u32
  AMDDS_ALL = 255_u32
  AMDDS_DEFAULT = 255_u32
  MAX_SIZE_MPEG1_SEQUENCE_INFO = 140_u32
  CLSID_DMOWrapperFilter = "94297043-bd82-4dfd-b0de-8177739c6d20"
  CLSID_DMOFilterCategory = "bcd5796c-bd52-4d30-ab76-70f975b89199"
  AM_MPEG_AUDIO_DUAL_MERGE = 0_u32
  AM_MPEG_AUDIO_DUAL_LEFT = 1_u32
  AM_MPEG_AUDIO_DUAL_RIGHT = 2_u32
  VFW_FIRST_CODE = 512_u32
  MAX_ERROR_TEXT_LEN = 160_u32
  MPBOOL_TRUE = 1_u32
  MPBOOL_FALSE = 0_u32
  DWORD_ALLPARAMS = -1_i32
  GUID_TIME_REFERENCE = "93ad712b-daa0-4ffe-bc81-b0ce500fcdd9"
  GUID_TIME_MUSIC = "0574c49d-5b04-4b15-a542-ae282030117b"
  GUID_TIME_SAMPLES = "a8593d05-0c43-4984-9a63-97af9e02c4c0"
  MPF_ENVLP_STANDARD = 0_u32
  MPF_ENVLP_BEGIN_CURRENTVAL = 1_u32
  MPF_ENVLP_BEGIN_NEUTRALVAL = 2_u32
  MPF_PUNCHIN_REFTIME = 0_u32
  MPF_PUNCHIN_NOW = 1_u32
  MPF_PUNCHIN_STOPPED = 2_u32
  MSPID_PrimaryVideo = "a35ff56a-9fda-11d0-8fdf-00c04fd9189d"
  MSPID_PrimaryAudio = "a35ff56b-9fda-11d0-8fdf-00c04fd9189d"
  VFW_E_INVALIDMEDIATYPE = -2147220992_i32
  VFW_E_INVALIDSUBTYPE = -2147220991_i32
  VFW_E_NEED_OWNER = -2147220990_i32
  VFW_E_ENUM_OUT_OF_SYNC = -2147220989_i32
  VFW_E_ALREADY_CONNECTED = -2147220988_i32
  VFW_E_FILTER_ACTIVE = -2147220987_i32
  VFW_E_NO_TYPES = -2147220986_i32
  VFW_E_NO_ACCEPTABLE_TYPES = -2147220985_i32
  VFW_E_INVALID_DIRECTION = -2147220984_i32
  VFW_E_NOT_CONNECTED = -2147220983_i32
  VFW_E_NO_ALLOCATOR = -2147220982_i32
  VFW_E_RUNTIME_ERROR = -2147220981_i32
  VFW_E_BUFFER_NOTSET = -2147220980_i32
  VFW_E_BUFFER_OVERFLOW = -2147220979_i32
  VFW_E_BADALIGN = -2147220978_i32
  VFW_E_ALREADY_COMMITTED = -2147220977_i32
  VFW_E_BUFFERS_OUTSTANDING = -2147220976_i32
  VFW_E_NOT_COMMITTED = -2147220975_i32
  VFW_E_SIZENOTSET = -2147220974_i32
  VFW_E_NO_CLOCK = -2147220973_i32
  VFW_E_NO_SINK = -2147220972_i32
  VFW_E_NO_INTERFACE = -2147220971_i32
  VFW_E_NOT_FOUND = -2147220970_i32
  VFW_E_CANNOT_CONNECT = -2147220969_i32
  VFW_E_CANNOT_RENDER = -2147220968_i32
  VFW_E_CHANGING_FORMAT = -2147220967_i32
  VFW_E_NO_COLOR_KEY_SET = -2147220966_i32
  VFW_E_NOT_OVERLAY_CONNECTION = -2147220965_i32
  VFW_E_NOT_SAMPLE_CONNECTION = -2147220964_i32
  VFW_E_PALETTE_SET = -2147220963_i32
  VFW_E_COLOR_KEY_SET = -2147220962_i32
  VFW_E_NO_COLOR_KEY_FOUND = -2147220961_i32
  VFW_E_NO_PALETTE_AVAILABLE = -2147220960_i32
  VFW_E_NO_DISPLAY_PALETTE = -2147220959_i32
  VFW_E_TOO_MANY_COLORS = -2147220958_i32
  VFW_E_STATE_CHANGED = -2147220957_i32
  VFW_E_NOT_STOPPED = -2147220956_i32
  VFW_E_NOT_PAUSED = -2147220955_i32
  VFW_E_NOT_RUNNING = -2147220954_i32
  VFW_E_WRONG_STATE = -2147220953_i32
  VFW_E_START_TIME_AFTER_END = -2147220952_i32
  VFW_E_INVALID_RECT = -2147220951_i32
  VFW_E_TYPE_NOT_ACCEPTED = -2147220950_i32
  VFW_E_SAMPLE_REJECTED = -2147220949_i32
  VFW_E_SAMPLE_REJECTED_EOS = -2147220948_i32
  VFW_E_DUPLICATE_NAME = -2147220947_i32
  VFW_S_DUPLICATE_NAME = 262701_i32
  VFW_E_TIMEOUT = -2147220946_i32
  VFW_E_INVALID_FILE_FORMAT = -2147220945_i32
  VFW_E_ENUM_OUT_OF_RANGE = -2147220944_i32
  VFW_E_CIRCULAR_GRAPH = -2147220943_i32
  VFW_E_NOT_ALLOWED_TO_SAVE = -2147220942_i32
  VFW_E_TIME_ALREADY_PASSED = -2147220941_i32
  VFW_E_ALREADY_CANCELLED = -2147220940_i32
  VFW_E_CORRUPT_GRAPH_FILE = -2147220939_i32
  VFW_E_ADVISE_ALREADY_SET = -2147220938_i32
  VFW_S_STATE_INTERMEDIATE = 262711_i32
  VFW_E_NO_MODEX_AVAILABLE = -2147220936_i32
  VFW_E_NO_ADVISE_SET = -2147220935_i32
  VFW_E_NO_FULLSCREEN = -2147220934_i32
  VFW_E_IN_FULLSCREEN_MODE = -2147220933_i32
  VFW_E_UNKNOWN_FILE_TYPE = -2147220928_i32
  VFW_E_CANNOT_LOAD_SOURCE_FILTER = -2147220927_i32
  VFW_S_PARTIAL_RENDER = 262722_i32
  VFW_E_FILE_TOO_SHORT = -2147220925_i32
  VFW_E_INVALID_FILE_VERSION = -2147220924_i32
  VFW_S_SOME_DATA_IGNORED = 262725_i32
  VFW_S_CONNECTIONS_DEFERRED = 262726_i32
  VFW_E_INVALID_CLSID = -2147220921_i32
  VFW_E_INVALID_MEDIA_TYPE = -2147220920_i32
  VFW_E_BAD_KEY = -2147220494_i32
  VFW_S_NO_MORE_ITEMS = 262403_i32
  VFW_E_SAMPLE_TIME_NOT_SET = -2147220919_i32
  VFW_S_RESOURCE_NOT_NEEDED = 262736_i32
  VFW_E_MEDIA_TIME_NOT_SET = -2147220911_i32
  VFW_E_NO_TIME_FORMAT_SET = -2147220910_i32
  VFW_E_MONO_AUDIO_HW = -2147220909_i32
  VFW_S_MEDIA_TYPE_IGNORED = 262740_i32
  VFW_E_NO_DECOMPRESSOR = -2147220907_i32
  VFW_E_NO_AUDIO_HARDWARE = -2147220906_i32
  VFW_S_VIDEO_NOT_RENDERED = 262743_i32
  VFW_S_AUDIO_NOT_RENDERED = 262744_i32
  VFW_E_RPZA = -2147220903_i32
  VFW_S_RPZA = 262746_i32
  VFW_E_PROCESSOR_NOT_SUITABLE = -2147220901_i32
  VFW_E_UNSUPPORTED_AUDIO = -2147220900_i32
  VFW_E_UNSUPPORTED_VIDEO = -2147220899_i32
  VFW_E_MPEG_NOT_CONSTRAINED = -2147220898_i32
  VFW_E_NOT_IN_GRAPH = -2147220897_i32
  VFW_S_ESTIMATED = 262752_i32
  VFW_E_NO_TIME_FORMAT = -2147220895_i32
  VFW_E_READ_ONLY = -2147220894_i32
  VFW_S_RESERVED = 262755_i32
  VFW_E_BUFFER_UNDERFLOW = -2147220892_i32
  VFW_E_UNSUPPORTED_STREAM = -2147220891_i32
  VFW_E_NO_TRANSPORT = -2147220890_i32
  VFW_S_STREAM_OFF = 262759_i32
  VFW_S_CANT_CUE = 262760_i32
  VFW_E_BAD_VIDEOCD = -2147220887_i32
  VFW_S_NO_STOP_TIME = 262768_i32
  VFW_E_OUT_OF_VIDEO_MEMORY = -2147220879_i32
  VFW_E_VP_NEGOTIATION_FAILED = -2147220878_i32
  VFW_E_DDRAW_CAPS_NOT_SUITABLE = -2147220877_i32
  VFW_E_NO_VP_HARDWARE = -2147220876_i32
  VFW_E_NO_CAPTURE_HARDWARE = -2147220875_i32
  VFW_E_DVD_OPERATION_INHIBITED = -2147220874_i32
  VFW_E_DVD_INVALIDDOMAIN = -2147220873_i32
  VFW_E_DVD_NO_BUTTON = -2147220872_i32
  VFW_E_DVD_GRAPHNOTREADY = -2147220871_i32
  VFW_E_DVD_RENDERFAIL = -2147220870_i32
  VFW_E_DVD_DECNOTENOUGH = -2147220869_i32
  VFW_E_DDRAW_VERSION_NOT_SUITABLE = -2147220868_i32
  VFW_E_COPYPROT_FAILED = -2147220867_i32
  VFW_S_NOPREVIEWPIN = 262782_i32
  VFW_E_TIME_EXPIRED = -2147220865_i32
  VFW_S_DVD_NON_ONE_SEQUENTIAL = 262784_i32
  VFW_E_DVD_WRONG_SPEED = -2147220863_i32
  VFW_E_DVD_MENU_DOES_NOT_EXIST = -2147220862_i32
  VFW_E_DVD_CMD_CANCELLED = -2147220861_i32
  VFW_E_DVD_STATE_WRONG_VERSION = -2147220860_i32
  VFW_E_DVD_STATE_CORRUPT = -2147220859_i32
  VFW_E_DVD_STATE_WRONG_DISC = -2147220858_i32
  VFW_E_DVD_INCOMPATIBLE_REGION = -2147220857_i32
  VFW_E_DVD_NO_ATTRIBUTES = -2147220856_i32
  VFW_E_DVD_NO_GOUP_PGC = -2147220855_i32
  VFW_E_DVD_LOW_PARENTAL_LEVEL = -2147220854_i32
  VFW_E_DVD_NOT_IN_KARAOKE_MODE = -2147220853_i32
  VFW_S_DVD_CHANNEL_CONTENTS_NOT_AVAILABLE = 262796_i32
  VFW_S_DVD_NOT_ACCURATE = 262797_i32
  VFW_E_FRAME_STEP_UNSUPPORTED = -2147220850_i32
  VFW_E_DVD_STREAM_DISABLED = -2147220849_i32
  VFW_E_DVD_TITLE_UNKNOWN = -2147220848_i32
  VFW_E_DVD_INVALID_DISC = -2147220847_i32
  VFW_E_DVD_NO_RESUME_INFORMATION = -2147220846_i32
  VFW_E_PIN_ALREADY_BLOCKED_ON_THIS_THREAD = -2147220845_i32
  VFW_E_PIN_ALREADY_BLOCKED = -2147220844_i32
  VFW_E_CERTIFICATION_FAILURE = -2147220843_i32
  VFW_E_VMR_NOT_IN_MIXER_MODE = -2147220842_i32
  VFW_E_VMR_NO_AP_SUPPLIED = -2147220841_i32
  VFW_E_VMR_NO_DEINTERLACE_HW = -2147220840_i32
  VFW_E_VMR_NO_PROCAMP_HW = -2147220839_i32
  VFW_E_DVD_VMR9_INCOMPATIBLEDEC = -2147220838_i32
  VFW_E_NO_COPP_HW = -2147220837_i32
  VFW_E_DVD_NONBLOCKING = -2147220836_i32
  VFW_E_DVD_TOO_MANY_RENDERERS_IN_FILTER_GRAPH = -2147220835_i32
  VFW_E_DVD_NON_EVR_RENDERER_IN_FILTER_GRAPH = -2147220834_i32
  VFW_E_DVD_RESOLUTION_ERROR = -2147220833_i32
  E_PROP_SET_UNSUPPORTED = -2147023726_i32
  E_PROP_ID_UNSUPPORTED = -2147023728_i32
  VFW_E_CODECAPI_LINEAR_RANGE = -2147220720_i32
  VFW_E_CODECAPI_ENUMERATED = -2147220719_i32
  VFW_E_CODECAPI_NO_DEFAULT = -2147220717_i32
  VFW_E_CODECAPI_NO_CURRENT_VALUE = -2147220716_i32
  VFW_E_DVD_CHAPTER_DOES_NOT_EXIST = -2147220715_i32
  VFW_S_DVD_RENDER_STATUS = 262944_i32
  DXVA_ModeNone = "1b81be00-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH261_A = "1b81be01-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH261_B = "1b81be02-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_A = "1b81be03-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_B = "1b81be04-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_C = "1b81be05-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_D = "1b81be06-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_E = "1b81be07-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH263_F = "1b81be08-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG1_A = "1b81be09-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG1_VLD = "6f3ec719-3735-42cc-8063-65cc3cb36616"
  DXVA_ModeMPEG2_A = "1b81be0a-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_B = "1b81be0b-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_C = "1b81be0c-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2_D = "1b81be0d-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG2and1_VLD = "86695f12-340e-4f04-9fd3-9253dd327460"
  DXVA_ModeH264_A = "1b81be64-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_B = "1b81be65-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_C = "1b81be66-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_D = "1b81be67-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_E = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_F = "1b81be69-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeH264_VLD_WithFMOASO_NoFGT = "d5f04ff9-3418-45d8-9561-32a76aae2ddd"
  DXVA_ModeH264_VLD_Stereo_Progressive_NoFGT = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  DXVA_ModeH264_VLD_Stereo_NoFGT = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  DXVA_ModeH264_VLD_Multiview_NoFGT = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  DXVA_ModeWMV8_A = "1b81be80-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV8_B = "1b81be81-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_A = "1b81be90-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_B = "1b81be91-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeWMV9_C = "1b81be94-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_A = "1b81bea0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_B = "1b81bea1-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_C = "1b81bea2-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_D = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeVC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_ModeMPEG4pt2_VLD_Simple = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  DXVA_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  DXVA_ModeMPEG4pt2_VLD_AdvSimple_GMC = "ab998b5b-4258-44a9-9feb-94e597a6baae"
  DXVA_ModeHEVC_VLD_Main = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  DXVA_ModeHEVC_VLD_Main10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  DXVA_ModeVP9_VLD_Profile0 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  DXVA_ModeVP9_VLD_10bit_Profile2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  DXVA_ModeVP8_VLD = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  DXVA_ModeAV1_VLD_Profile0 = "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a"
  DXVA_ModeAV1_VLD_Profile1 = "6936ff0f-45b1-4163-9cc1-646ef6946108"
  DXVA_ModeAV1_VLD_Profile2 = "0c5f2aa1-e541-4089-bb7b-98110a19d7c8"
  DXVA_ModeAV1_VLD_12bit_Profile2 = "17127009-a00f-4ce1-994e-bf4081f6f3f0"
  DXVA_ModeAV1_VLD_12bit_Profile2_420 = "2d80bed6-9cac-4835-9e91-327bbc4f9ee8"
  DXVA_NoEncrypt = "1b81bed0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA_RESTRICTED_MODE_UNRESTRICTED = 65535_u32
  DXVA_RESTRICTED_MODE_H261_A = 1_u32
  DXVA_RESTRICTED_MODE_H261_B = 2_u32
  DXVA_RESTRICTED_MODE_H263_A = 3_u32
  DXVA_RESTRICTED_MODE_H263_B = 4_u32
  DXVA_RESTRICTED_MODE_H263_C = 5_u32
  DXVA_RESTRICTED_MODE_H263_D = 6_u32
  DXVA_RESTRICTED_MODE_H263_E = 7_u32
  DXVA_RESTRICTED_MODE_H263_F = 8_u32
  DXVA_RESTRICTED_MODE_MPEG1_A = 9_u32
  DXVA_RESTRICTED_MODE_MPEG2_A = 10_u32
  DXVA_RESTRICTED_MODE_MPEG2_B = 11_u32
  DXVA_RESTRICTED_MODE_MPEG2_C = 12_u32
  DXVA_RESTRICTED_MODE_MPEG2_D = 13_u32
  DXVA_RESTRICTED_MODE_MPEG1_VLD = 16_u32
  DXVA_RESTRICTED_MODE_MPEG2and1_VLD = 17_u32
  DXVA_RESTRICTED_MODE_H264_A = 100_u32
  DXVA_RESTRICTED_MODE_H264_B = 101_u32
  DXVA_RESTRICTED_MODE_H264_C = 102_u32
  DXVA_RESTRICTED_MODE_H264_D = 103_u32
  DXVA_RESTRICTED_MODE_H264_E = 104_u32
  DXVA_RESTRICTED_MODE_H264_F = 105_u32
  DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = 112_u32
  DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = 113_u32
  DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = 114_u32
  DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = 115_u32
  DXVA_RESTRICTED_MODE_WMV8_A = 128_u32
  DXVA_RESTRICTED_MODE_WMV8_B = 129_u32
  DXVA_RESTRICTED_MODE_WMV9_A = 144_u32
  DXVA_RESTRICTED_MODE_WMV9_B = 145_u32
  DXVA_RESTRICTED_MODE_WMV9_C = 148_u32
  DXVA_RESTRICTED_MODE_VC1_A = 160_u32
  DXVA_RESTRICTED_MODE_VC1_B = 161_u32
  DXVA_RESTRICTED_MODE_VC1_C = 162_u32
  DXVA_RESTRICTED_MODE_VC1_D = 163_u32
  DXVA_RESTRICTED_MODE_VC1_D2010 = 164_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = 176_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = 177_u32
  DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = 178_u32
  DXVA_RESTRICTED_MODE_WMV8_POSTPROC = 128_u32
  DXVA_RESTRICTED_MODE_WMV8_MOCOMP = 129_u32
  DXVA_RESTRICTED_MODE_WMV9_POSTPROC = 144_u32
  DXVA_RESTRICTED_MODE_WMV9_MOCOMP = 145_u32
  DXVA_RESTRICTED_MODE_WMV9_IDCT = 148_u32
  DXVA_RESTRICTED_MODE_VC1_POSTPROC = 160_u32
  DXVA_RESTRICTED_MODE_VC1_MOCOMP = 161_u32
  DXVA_RESTRICTED_MODE_VC1_IDCT = 162_u32
  DXVA_RESTRICTED_MODE_VC1_VLD = 163_u32
  DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = 100_u32
  DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = 101_u32
  DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = 102_u32
  DXVA_RESTRICTED_MODE_H264_IDCT_FGT = 103_u32
  DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = 104_u32
  DXVA_RESTRICTED_MODE_H264_VLD_FGT = 105_u32
  DXVA_COMPBUFFER_TYPE_THAT_IS_NOT_USED = 0_u32
  DXVA_PICTURE_DECODE_BUFFER = 1_u32
  DXVA_MACROBLOCK_CONTROL_BUFFER = 2_u32
  DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3_u32
  DXVA_DEBLOCKING_CONTROL_BUFFER = 4_u32
  DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5_u32
  DXVA_SLICE_CONTROL_BUFFER = 6_u32
  DXVA_BITSTREAM_DATA_BUFFER = 7_u32
  DXVA_AYUV_BUFFER = 8_u32
  DXVA_IA44_SURFACE_BUFFER = 9_u32
  DXVA_DPXD_SURFACE_BUFFER = 10_u32
  DXVA_HIGHLIGHT_BUFFER = 11_u32
  DXVA_DCCMD_SURFACE_BUFFER = 12_u32
  DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13_u32
  DXVA_PICTURE_RESAMPLE_BUFFER = 14_u32
  DXVA_READ_BACK_BUFFER = 15_u32
  DXVA_MOTION_VECTOR_BUFFER = 16_u32
  DXVA_FILM_GRAIN_BUFFER = 17_u32
  DXVA_NUM_TYPES_COMP_BUFFERS = 18_u32
  DXVA_PICTURE_DECODING_FUNCTION = 1_u32
  DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2_u32
  DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3_u32
  DXVA_PICTURE_RESAMPLE_FUNCTION = 4_u32
  DXVA_DEBLOCKING_FILTER_FUNCTION = 5_u32
  DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6_u32
  DXVA_STATUS_REPORTING_FUNCTION = 7_u32
  DXVA_EXECUTE_RETURN_OK = 0_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2_u32
  DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3_u32
  DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4_u32
  DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = 16777201_u32
  DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = 16777205_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = 16777208_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = 16777209_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = 16777212_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = 16777211_u32
  DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = 16777215_u32
  DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = 16776960_u32
  DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = 16776968_u32
  DXVA_CHROMA_FORMAT_420 = 1_u32
  DXVA_CHROMA_FORMAT_422 = 2_u32
  DXVA_CHROMA_FORMAT_444 = 3_u32
  DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1_u32
  DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2_u32
  DXVA_PICTURE_STRUCTURE_FRAME = 3_u32
  DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0_u32
  DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1_u32
  DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2_u32
  DXVA_SCAN_METHOD_ZIG_ZAG = 0_u32
  DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1_u32
  DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2_u32
  DXVA_SCAN_METHOD_ARBITRARY = 3_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2_u32
  DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2_u32
  DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3_u32
  DXVA_USUAL_BLOCK_WIDTH = 8_u32
  DXVA_USUAL_BLOCK_HEIGHT = 8_u32
  DXVA_NumMV_OBMC_off_BinPBwith4MV_off = 4_u32
  DXVA_NumMV_OBMC_off_BinPBwith4MV_on = 5_u32
  DXVA_NumMV_OBMC_on__BinPB_off = 10_u32
  DXVA_NumMV_OBMC_on__BinPB_on = 11_u32
  DXVA_CONFIG_DATA_TYPE_IA44 = 0_u32
  DXVA_CONFIG_DATA_TYPE_AI44 = 1_u32
  DXVA_CONFIG_DATA_TYPE_DPXD = 2_u32
  DXVA_CONFIG_DATA_TYPE_AYUV = 3_u32
  DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0_u32
  DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1_u32
  DXVA_ExtColorData_ShiftBase = 8_u32
  DXVA_DeinterlaceBobDevice = "335aa36e-7884-43a4-9c91-7f87faf3e37e"
  DXVA_DeinterlaceContainerDevice = "0e85cb93-3046-4ff0-aecc-d58cb5f035fd"
  MAX_DEINTERLACE_SURFACES = 32_u32
  DXVA_DeinterlaceBltFnCode = 1_u32
  DXVA_DeinterlaceBltExFnCode = 2_u32
  MAX_DEINTERLACE_DEVICE_GUIDS = 32_u32
  DXVA_DeinterlaceQueryAvailableModesFnCode = 1_u32
  DXVA_DeinterlaceQueryModeCapsFnCode = 2_u32
  DXVA_ProcAmpControlDevice = "9f200913-2ffd-4056-9f1e-e1b508f22dcf"
  DXVA_ProcAmpControlQueryCapsFnCode = 3_u32
  DXVA_ProcAmpControlQueryRangeFnCode = 4_u32
  DXVA_ProcAmpControlBltFnCode = 1_u32
  DXVA_COPPDevice = "d2457add-8999-45ed-8a8a-d1aa047ba4d5"
  DXVA_COPPGetCertificateLengthFnCode = 1_u32
  DXVA_COPPKeyExchangeFnCode = 2_u32
  DXVA_COPPSequenceStartFnCode = 3_u32
  DXVA_COPPCommandFnCode = 4_u32
  DXVA_COPPSetProtectionLevel = "9bb9327c-4eb5-4727-9f00-b42b0919c0da"
  COPP_NoProtectionLevelAvailable = -1_i32
  COPP_DefaultProtectionLevel = 0_u32
  DXVA_COPPSetSignaling = "09a631a5-d684-4c60-8e4d-d3bb0f0be3ee"
  COPP_ImageAspectRatio_EN300294_Mask = 7_u32
  DXVA_COPPQueryStatusFnCode = 5_u32
  DXVA_COPPQueryConnectorType = "81d0bfd5-6afe-48c2-99c0-95a08f97c5da"
  DXVA_COPPQueryProtectionType = "38f2a801-9a6c-48bb-9107-b6696e6f1797"
  DXVA_COPPQueryLocalProtectionLevel = "b2075857-3eda-4d5d-88db-748f8c1a0549"
  DXVA_COPPQueryGlobalProtectionLevel = "1957210a-7766-452a-b99a-d27aed54f03a"
  DXVA_COPPQueryDisplayData = "d7bf1ba3-ad13-4f8e-af98-0dcb3ca204cc"
  DXVA_COPPQueryHDCPKeyData = "0db59d74-a992-492e-a0bd-c23fda564e00"
  DXVA_COPPQueryBusData = "c6f4d673-6174-4184-8e35-f6db5200bcba"
  DXVA_COPPQuerySignaling = "6629a591-3b79-4cf3-924a-11e8e7811671"
  DXVA2Trace_Control = "a0386e75-f70c-464c-a9ce-33c44e091623"
  DXVA2Trace_DecodeDevCreated = "b4de17a1-c5b2-44fe-86d5-d97a648114ff"
  DXVA2Trace_DecodeDevDestroyed = "853ebdf2-4160-421d-8893-63dcea4f18bb"
  DXVA2Trace_DecodeDevBeginFrame = "9fd1acf6-44cb-4637-bc62-2c11a9608f90"
  DXVA2Trace_DecodeDevExecute = "850aeb4c-d19a-4609-b3b4-bcbf0e22121e"
  DXVA2Trace_DecodeDevGetBuffer = "57b128fb-72cb-4137-a575-d91fa3160897"
  DXVA2Trace_DecodeDevEndFrame = "9fb3cb33-47dc-4899-98c8-c0c6cd7cd3cb"
  DXVA2Trace_VideoProcessDevCreated = "895508c6-540d-4c87-98f8-8dcbf2dabb2a"
  DXVA2Trace_VideoProcessDevDestroyed = "f97f30b1-fb49-42c7-8ee8-88bdfa92d4e2"
  DXVA2Trace_VideoProcessBlt = "69089cc0-71ab-42d0-953a-2887bf05a8af"
  DTV_CardStatus_Inserted = 0_u32
  DTV_CardStatus_Removed = 1_u32
  DTV_CardStatus_Error = 2_u32
  DTV_CardStatus_FirmwareDownload = 3_u32
  OCUR_PAIRING_PROTOCOL_VERSION = 2_u32
  PBDA_PAIRING_PROTOCOL_VERSION = 3_u32
  DTV_MMIMessage_Open = 0_u32
  DTV_MMIMessage_Close = 1_u32
  DTV_Entitlement_CanDecrypt = 0_u32
  DTV_Entitlement_NotEntitled = 1_u32
  DTV_Entitlement_TechnicalFailure = 2_u32
  AudioType_Standard = 0_u32
  AudioType_Music_And_Effects = 1_u32
  AudioType_Visually_Impaired = 2_u32
  AudioType_Hearing_Impaired = 3_u32
  AudioType_Dialogue = 4_u32
  AudioType_Commentary = 5_u32
  AudioType_Emergency = 6_u32
  AudioType_Voiceover = 7_u32
  AudioType_Reserved = -1_i32
  MAX_COUNTRY_CODE_STRING = 3_u32
  PARENTAL_CONTROL_TIME_RANGE = 1_u32
  REQUIRED_PARENTAL_CONTROL_TIME_RANGE = 2_u32
  PARENTAL_CONTROL_CONTENT_RATING = 256_u32
  PARENTAL_CONTROL_ATTRIB_VIOLENCE = 512_u32
  PARENTAL_CONTROL_ATTRIB_LANGUAGE = 513_u32
  PARENTAL_CONTROL_ATTRIB_SEXUAL = 514_u32
  PARENTAL_CONTROL_ATTRIB_DIALOGUE = 515_u32
  PARENTAL_CONTROL_ATTRIB_FANTASY = 516_u32
  PARENTAL_CONTROL_VALUE_UNDEFINED = 0_u32
  MPEG2_FILTER_VERSION_1_SIZE = 124_u32
  MPEG2_FILTER_VERSION_2_SIZE = 133_u32
  SID_MSVidCtl_CurrentAudioEndpoint = "cf9a88f4-abcf-4ed8-9b74-7db33445459e"
  STREAMBUFFER_EC_BASE = 806_u32
  EVENTID_SBE2RecControlStarted = "8966a89e-f83e-4c0e-bc3b-bfa7649e04cb"
  EVENTID_SBE2RecControlStopped = "454b1ec8-0c9b-4caa-b1a1-1e7a2666f6c3"
  SBE2_STREAM_DESC_EVENT = "2313a4ed-bf2d-454f-ad8a-d95ba7f91fee"
  SBE2_V1_STREAMS_CREATION_EVENT = "000fcf09-97f5-46ac-9769-7a83b35384fb"
  SBE2_V2_STREAMS_CREATION_EVENT = "a72530a3-0344-4cab-a2d0-fe937dbdcab3"
  SBE2_STREAM_DESC_VERSION = 1_u32
  SID_DRMSecureServiceChannel = "c4c4c4c4-0049-4e2b-98fb-9537f6ce516d"
  CLSID_ETFilterEncProperties = "c4c4c481-0049-4e2b-98fb-9537f6ce516d"
  CLSID_ETFilterTagProperties = "c4c4c491-0049-4e2b-98fb-9537f6ce516d"
  CLSID_PTFilter = "9cd31617-b303-4f96-8330-2eb173ea4dc6"
  CLSID_DTFilterEncProperties = "c4c4c482-0049-4e2b-98fb-9537f6ce516d"
  CLSID_DTFilterTagProperties = "c4c4c492-0049-4e2b-98fb-9537f6ce516d"
  CLSID_XDSCodecProperties = "c4c4c483-0049-4e2b-98fb-9537f6ce516d"
  CLSID_XDSCodecTagProperties = "c4c4c493-0049-4e2b-98fb-9537f6ce516d"
  CLSID_CPCAFiltersCategory = "c4c4c4fc-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecNewXDSRating = "c4c4c4e0-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecDuplicateXDSRating = "c4c4c4df-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_XDSCodecNewXDSPacket = "c4c4c4e1-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingChange = "c4c4c4e2-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingsBlock = "c4c4c4e3-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterRatingsUnblock = "c4c4c4e4-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterXDSPacket = "c4c4c4e5-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterEncryptionOn = "c4c4c4e6-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterEncryptionOff = "c4c4c4e7-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterCOPPUnblock = "c4c4c4e8-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_EncDecFilterError = "c4c4c4e9-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterCOPPBlock = "c4c4c4ea-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterCopyOnce = "c4c4c4eb-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETFilterCopyNever = "c4c4c4f0-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterDataFormatOK = "c4c4c4ec-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_DTFilterDataFormatFailure = "c4c4c4ed-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETDTFilterLicenseOK = "c4c4c4ee-0049-4e2b-98fb-9537f6ce516d"
  EVENTID_ETDTFilterLicenseFailure = "c4c4c4ef-0049-4e2b-98fb-9537f6ce516d"
  MEDIASUBTYPE_ETDTFilter_Tagged = "c4c4c4d0-0049-4e2b-98fb-9537f6ce516d"
  FORMATTYPE_ETDTFilter_Tagged = "c4c4c4d1-0049-4e2b-98fb-9537f6ce516d"
  MEDIASUBTYPE_CPFilters_Processed = "46adbd28-6fd0-4796-93b2-155c51dc048d"
  FORMATTYPE_CPFilters_Processed = "6739b36f-1d5f-4ac2-8192-28bb0e73d16a"
  EVENTID_EncDecFilterEvent = "4a1b465b-0fb9-4159-afbd-e33006a0f9f4"
  EVENTID_FormatNotSupportedEvent = "24b2280a-b2aa-4777-bf65-63f35e7b024a"
  EVENTID_DemultiplexerFilterDiscontinuity = "16155770-aed5-475c-bb98-95a33070df0c"
  DSATTRIB_WMDRMProtectionInfo = "40749583-6b9d-4eec-b43c-67a1801e1a9b"
  DSATTRIB_BadSampleInfo = "e4846dda-5838-42b4-b897-6f7e5faa2f2f"
  MPEG_PAT_PID = 0_u32
  MPEG_PAT_TID = 0_u32
  MPEG_CAT_PID = 1_u32
  MPEG_CAT_TID = 1_u32
  MPEG_PMT_TID = 2_u32
  MPEG_TSDT_PID = 2_u32
  MPEG_TSDT_TID = 3_u32
  ATSC_MGT_PID = 8187_u32
  ATSC_MGT_TID = 199_u32
  ATSC_VCT_PID = 8187_u32
  ATSC_VCT_TERR_TID = 200_u32
  ATSC_VCT_CABL_TID = 201_u32
  ATSC_EIT_TID = 203_u32
  ATSC_ETT_TID = 204_u32
  ATSC_RRT_TID = 202_u32
  ATSC_RRT_PID = 8187_u32
  ATSC_STT_PID = 8187_u32
  ATSC_STT_TID = 205_u32
  ATSC_PIT_TID = 208_u32
  DVB_NIT_PID = 16_u32
  DVB_NIT_ACTUAL_TID = 64_u32
  DVB_NIT_OTHER_TID = 65_u32
  DVB_SDT_PID = 17_u32
  DVB_SDT_ACTUAL_TID = 66_u32
  DVB_SDT_OTHER_TID = 70_u32
  DVB_BAT_PID = 17_u32
  DVB_BAT_TID = 74_u32
  DVB_EIT_PID = 18_u32
  DVB_EIT_ACTUAL_TID = 78_u32
  DVB_EIT_OTHER_TID = 79_u32
  DVB_RST_PID = 19_u32
  DVB_RST_TID = 113_u32
  DVB_TDT_PID = 20_u32
  DVB_TDT_TID = 112_u32
  DVB_ST_PID_16 = 16_u32
  DVB_ST_PID_17 = 17_u32
  DVB_ST_PID_18 = 18_u32
  DVB_ST_PID_19 = 19_u32
  DVB_ST_PID_20 = 20_u32
  DVB_ST_TID = 114_u32
  ISDB_ST_TID = 114_u32
  DVB_TOT_PID = 20_u32
  DVB_TOT_TID = 115_u32
  DVB_DIT_PID = 30_u32
  DVB_DIT_TID = 126_u32
  DVB_SIT_PID = 31_u32
  DVB_SIT_TID = 127_u32
  ISDB_EMM_TID = 133_u32
  ISDB_BIT_PID = 36_u32
  ISDB_BIT_TID = 196_u32
  ISDB_NBIT_PID = 37_u32
  ISDB_NBIT_MSG_TID = 197_u32
  ISDB_NBIT_REF_TID = 198_u32
  ISDB_LDT_PID = 37_u32
  ISDB_LDT_TID = 199_u32
  ISDB_SDTT_PID = 35_u32
  ISDB_SDTT_ALT_PID = 40_u32
  ISDB_SDTT_TID = 195_u32
  ISDB_CDT_PID = 41_u32
  ISDB_CDT_TID = 200_u32
  SCTE_EAS_TID = 216_u32
  SCTE_EAS_IB_PID = 8187_u32
  SCTE_EAS_OOB_PID = 8188_u32
  CLSID_Mpeg2TableFilter = "752845f1-758f-4c83-a043-4270c593308e"
  ATSC_ETM_LOCATION_NOT_PRESENT = 0_u32
  ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = 1_u32
  ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = 2_u32
  ATSC_ETM_LOCATION_RESERVED = 3_u32
  SAMPLE_SEQ_SEQUENCE_HEADER = 1_u32
  SAMPLE_SEQ_GOP_HEADER = 2_u32
  SAMPLE_SEQ_PICTURE_HEADER = 3_u32
  SAMPLE_SEQ_SEQUENCE_START = 1_u32
  SAMPLE_SEQ_SEEK_POINT = 2_u32
  SAMPLE_SEQ_FRAME_START = 3_u32
  SAMPLE_SEQ_CONTENT_UNKNOWN = 0_u32
  SAMPLE_SEQ_CONTENT_I_FRAME = 1_u32
  SAMPLE_SEQ_CONTENT_P_FRAME = 2_u32
  SAMPLE_SEQ_CONTENT_B_FRAME = 3_u32
  SAMPLE_SEQ_CONTENT_STANDALONE_FRAME = 1_u32
  SAMPLE_SEQ_CONTENT_REF_FRAME = 2_u32
  SAMPLE_SEQ_CONTENT_NONREF_FRAME = 3_u32
  COMPONENT_TAG_CAPTION_MIN = 48_u32
  COMPONENT_TAG_CAPTION_MAX = 55_u32
  COMPONENT_TAG_SUPERIMPOSE_MIN = 56_u32
  COMPONENT_TAG_SUPERIMPOSE_MAX = 63_u32
  DVBS_SCAN_TABLE_MAX_SIZE = 400_u32
  G_wszexcludescriptstreamdeliverysynchronization = "ExcludeScriptStreamDeliverySynchronization"
  MPEG2_BASE = 512_u32
  MPEG2_S_MORE_DATA_AVAILABLE = 262656_i32
  MPEG2_S_NO_MORE_DATA_AVAILABLE = 262657_i32
  MPEG2_S_SG_INFO_FOUND = 262658_i32
  MPEG2_S_SG_INFO_NOT_FOUND = 262659_i32
  MPEG2_S_MPE_INFO_FOUND = 262660_i32
  MPEG2_S_MPE_INFO_NOT_FOUND = 262661_i32
  MPEG2_S_NEW_MODULE_VERSION = 262662_i32
  MPEG2_E_UNINITIALIZED = -2147220992_i32
  MPEG2_E_ALREADY_INITIALIZED = -2147220991_i32
  MPEG2_E_OUT_OF_BOUNDS = -2147220990_i32
  MPEG2_E_MALFORMED_TABLE = -2147220989_i32
  MPEG2_E_UNDEFINED = -2147220988_i32
  MPEG2_E_NOT_PRESENT = -2147220987_i32
  MPEG2_E_SECTION_NOT_FOUND = -2147220986_i32
  MPEG2_E_TX_STREAM_UNAVAILABLE = -2147220985_i32
  MPEG2_E_SERVICE_ID_NOT_FOUND = -2147220984_i32
  MPEG2_E_SERVICE_PMT_NOT_FOUND = -2147220983_i32
  MPEG2_E_DSI_NOT_FOUND = -2147220982_i32
  MPEG2_E_SERVER_UNAVAILABLE = -2147220981_i32
  MPEG2_E_INVALID_CAROUSEL_ID = -2147220980_i32
  MPEG2_E_MALFORMED_DSMCC_MESSAGE = -2147220979_i32
  MPEG2_E_INVALID_SG_OBJECT_KIND = -2147220978_i32
  MPEG2_E_OBJECT_NOT_FOUND = -2147220977_i32
  MPEG2_E_OBJECT_KIND_NOT_A_DIRECTORY = -2147220976_i32
  MPEG2_E_OBJECT_KIND_NOT_A_FILE = -2147220975_i32
  MPEG2_E_FILE_OFFSET_TOO_BIG = -2147220974_i32
  MPEG2_E_STREAM_STOPPED = -2147220973_i32
  MPEG2_E_REGISTRY_ACCESS_FAILED = -2147220972_i32
  MPEG2_E_INVALID_UDP_PORT = -2147220971_i32
  MPEG2_E_DATA_SOURCE_FAILED = -2147220970_i32
  MPEG2_E_DII_NOT_FOUND = -2147220969_i32
  MPEG2_E_DSHOW_PIN_NOT_FOUND = -2147220968_i32
  MPEG2_E_BUFFER_TOO_SMALL = -2147220967_i32
  MPEG2_E_MISSING_SECTIONS = -2147220966_i32
  MPEG2_E_TOO_MANY_SECTIONS = -2147220965_i32
  MPEG2_E_NEXT_TABLE_OPS_NOT_AVAILABLE = -2147220964_i32
  MPEG2_E_INCORRECT_DESCRIPTOR_TAG = -2147220963_i32
  MSDRI_S_MMI_PENDING = 2_i32
  MSDRI_S_PENDING = 1_i32
  BDA_E_FAILURE = -1073479679_i32
  BDA_E_NOT_IMPLEMENTED = -1073479678_i32
  BDA_E_NO_SUCH_COMMAND = -1073479677_i32
  BDA_E_OUT_OF_BOUNDS = -1073479676_i32
  BDA_E_INVALID_SCHEMA = -1073479675_i32
  BDA_E_INVALID_HANDLE = -1073479674_i32
  BDA_E_INVALID_TYPE = -1073479673_i32
  BDA_E_READ_ONLY = -1073479672_i32
  BDA_E_ACCESS_DENIED = -1073479671_i32
  BDA_E_NOT_FOUND = -1073479670_i32
  BDA_E_BUFFER_TOO_SMALL = -1073479669_i32
  BDA_E_OUT_OF_RESOURCES = -1073479668_i32
  BDA_E_OUT_OF_MEMORY = -1073479667_i32
  BDA_E_DISABLED = -1073479666_i32
  BDA_E_NO_HANDLER = -1073479665_i32
  BDA_E_INVALID_LANGUAGE = -1073479664_i32
  BDA_E_TIMEOUT_ELAPSED = -1073479663_i32
  BDA_E_NO_MORE_EVENTS = -1073475583_i32
  BDA_E_NO_MORE_DATA = -1073475582_i32
  BDA_E_TUNER_INITIALIZING = -1073467391_i32
  BDA_E_TUNER_REQUIRED = -1073467390_i32
  BDA_E_TUNER_CONFLICT = -1073467389_i32
  BDA_E_INVALID_TUNE_REQUEST = -1073467388_i32
  BDA_E_INVALID_ENTITLEMENT_TOKEN = -1073463295_i32
  BDA_E_INVALID_CAPTURE_TOKEN = -1073463294_i32
  BDA_E_WOULD_DISRUPT_STREAMING = -1073463293_i32
  BDA_E_INVALID_PURCHASE_TOKEN = -1073463292_i32
  BDA_E_IPNETWORK_ERROR = -1073459199_i32
  BDA_E_IPNETWORK_ADDRESS_NOT_FOUND = -1073459198_i32
  BDA_E_IPNETWORK_TIMEOUT = -1073459197_i32
  BDA_E_IPNETWORK_UNAVAILABLE = -1073459196_i32
  BDA_E_TUNE_FAILED_SDV01 = -1073455103_i32
  BDA_E_TUNE_FAILED_SDV02 = -1073455102_i32
  BDA_E_TUNE_FAILED_SDV03 = -1073455101_i32
  BDA_E_TUNE_FAILED_SDV04 = -1073455100_i32
  BDA_E_TUNE_FAILED_SDV05 = -1073455099_i32
  BDA_E_TUNE_FAILED_SDV06 = -1073455098_i32
  BDA_E_TUNE_FAILED_SDV07 = -1073455097_i32
  BDA_E_TUNE_FAILED_SDV08 = -1073455096_i32
  BDA_E_TUNE_FAILED_SDVFF = -1073454849_i32
  BDA_E_WMDRM_INVALID_SIGNATURE = -1073418239_i32
  BDA_E_WMDRM_INVALID_CERTIFICATE = -1073418238_i32
  BDA_E_WMDRM_INVALID_VERSION = -1073418236_i32
  BDA_E_WMDRM_INVALID_DATE = -1073418235_i32
  BDA_E_WMDRM_INVALID_PROXIMITY = -1073418234_i32
  BDA_E_WMDRM_KEY_ID_NOT_FOUND = -1073418232_i32
  SPECIFYPAGES_STATISTICS = "4c437b92-6e9e-11d1-a704-006097c4e476"
  G_wszstreambufferrecordingduration = "Duration"
  G_wszstreambufferrecordingbitrate = "Bitrate"
  G_wszstreambufferrecordingseekable = "Seekable"
  G_wszstreambufferrecordingstridable = "Stridable"
  G_wszstreambufferrecordingbroadcast = "Broadcast"
  G_wszstreambufferrecordingprotected = "Is_Protected"
  G_wszstreambufferrecordingtrusted = "Is_Trusted"
  G_wszstreambufferrecordingsignature_name = "Signature_Name"
  G_wszstreambufferrecordinghasaudio = "HasAudio"
  G_wszstreambufferrecordinghasimage = "HasImage"
  G_wszstreambufferrecordinghasscript = "HasScript"
  G_wszstreambufferrecordinghasvideo = "HasVideo"
  G_wszstreambufferrecordingcurrentbitrate = "CurrentBitrate"
  G_wszstreambufferrecordingoptimalbitrate = "OptimalBitrate"
  G_wszstreambufferrecordinghasattachedimages = "HasAttachedImages"
  G_wszstreambufferrecordingskipbackward = "Can_Skip_Backward"
  G_wszstreambufferrecordingskipforward = "Can_Skip_Forward"
  G_wszstreambufferrecordingnumberofframes = "NumberOfFrames"
  G_wszstreambufferrecordingfilesize = "FileSize"
  G_wszstreambufferrecordinghasarbitrarydatastream = "HasArbitraryDataStream"
  G_wszstreambufferrecordinghasfiletransferstream = "HasFileTransferStream"
  G_wszstreambufferrecordingtitle = "Title"
  G_wszstreambufferrecordingauthor = "Author"
  G_wszstreambufferrecordingdescription = "Description"
  G_wszstreambufferrecordingrating = "Rating"
  G_wszstreambufferrecordingcopyright = "Copyright"
  G_wszstreambufferrecordinguse_drm = "Use_DRM"
  G_wszstreambufferrecordingdrm_flags = "DRM_Flags"
  G_wszstreambufferrecordingdrm_level = "DRM_Level"
  G_wszstreambufferrecordingalbumtitle = "WM/AlbumTitle"
  G_wszstreambufferrecordingtrack = "WM/Track"
  G_wszstreambufferrecordingpromotionurl = "WM/PromotionURL"
  G_wszstreambufferrecordingalbumcoverurl = "WM/AlbumCoverURL"
  G_wszstreambufferrecordinggenre = "WM/Genre"
  G_wszstreambufferrecordingyear = "WM/Year"
  G_wszstreambufferrecordinggenreid = "WM/GenreID"
  G_wszstreambufferrecordingmcdi = "WM/MCDI"
  G_wszstreambufferrecordingcomposer = "WM/Composer"
  G_wszstreambufferrecordinglyrics = "WM/Lyrics"
  G_wszstreambufferrecordingtracknumber = "WM/TrackNumber"
  G_wszstreambufferrecordingtoolname = "WM/ToolName"
  G_wszstreambufferrecordingtoolversion = "WM/ToolVersion"
  G_wszstreambufferrecordingisvbr = "IsVBR"
  G_wszstreambufferrecordingalbumartist = "WM/AlbumArtist"
  G_wszstreambufferrecordingbannerimagetype = "BannerImageType"
  G_wszstreambufferrecordingbannerimagedata = "BannerImageData"
  G_wszstreambufferrecordingbannerimageurl = "BannerImageURL"
  G_wszstreambufferrecordingcopyrighturl = "CopyrightURL"
  G_wszstreambufferrecordingaspectratiox = "AspectRatioX"
  G_wszstreambufferrecordingaspectratioy = "AspectRatioY"
  G_wszstreambufferrecordingnscname = "NSC_Name"
  G_wszstreambufferrecordingnscaddress = "NSC_Address"
  G_wszstreambufferrecordingnscphone = "NSC_Phone"
  G_wszstreambufferrecordingnscemail = "NSC_Email"
  G_wszstreambufferrecordingnscdescription = "NSC_Description"
  STREAMBUFFER_EC_TIMEHOLE = 806_i32
  STREAMBUFFER_EC_STALE_DATA_READ = 807_i32
  STREAMBUFFER_EC_STALE_FILE_DELETED = 808_i32
  STREAMBUFFER_EC_CONTENT_BECOMING_STALE = 809_i32
  STREAMBUFFER_EC_WRITE_FAILURE = 810_i32
  STREAMBUFFER_EC_WRITE_FAILURE_CLEAR = 811_i32
  STREAMBUFFER_EC_READ_FAILURE = 812_i32
  STREAMBUFFER_EC_RATE_CHANGED = 813_i32
  STREAMBUFFER_EC_PRIMARY_AUDIO = 814_i32
  STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS = 815_i32
  STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE = 816_i32
  FilgraphManager = LibC::GUID.new(0xe436ebb3_u32, 0x524f_u16, 0x11ce_u16, StaticArray[0x9f_u8, 0x53_u8, 0x0_u8, 0x20_u8, 0xaf_u8, 0xb_u8, 0xa7_u8, 0x70_u8])
  SystemTuningSpaces = LibC::GUID.new(0xd02aac50_u32, 0x27e_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  TuningSpace = LibC::GUID.new(0x5ffdc5e6_u32, 0xb83a_u16, 0x4b55_u16, StaticArray[0xb6_u8, 0xe8_u8, 0xc6_u8, 0x9e_u8, 0x76_u8, 0x5f_u8, 0xe9_u8, 0xdb_u8])
  ChannelIDTuningSpace = LibC::GUID.new(0xcc829a2f_u32, 0x3365_u16, 0x463f_u16, StaticArray[0xaf_u8, 0x13_u8, 0x81_u8, 0xdb_u8, 0xb6_u8, 0xf3_u8, 0xa5_u8, 0x55_u8])
  ATSCTuningSpace = LibC::GUID.new(0xa2e30750_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  DigitalCableTuningSpace = LibC::GUID.new(0xd9bb4cee_u32, 0xb87a_u16, 0x47f1_u16, StaticArray[0xac_u8, 0x92_u8, 0xb0_u8, 0x8d_u8, 0x9c_u8, 0x78_u8, 0x13_u8, 0xfc_u8])
  AnalogRadioTuningSpace = LibC::GUID.new(0x8a674b4c_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  AuxInTuningSpace = LibC::GUID.new(0xf9769a06_u32, 0x7aca_u16, 0x4e39_u16, StaticArray[0x9c_u8, 0xfb_u8, 0x97_u8, 0xbb_u8, 0x35_u8, 0xf0_u8, 0xe7_u8, 0x7e_u8])
  AnalogTVTuningSpace = LibC::GUID.new(0x8a674b4d_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  DVBTuningSpace = LibC::GUID.new(0xc6b14b32_u32, 0x76aa_u16, 0x4a86_u16, StaticArray[0xa7_u8, 0xac_u8, 0x5c_u8, 0x79_u8, 0xaa_u8, 0xf5_u8, 0x8d_u8, 0xa7_u8])
  DVBSTuningSpace = LibC::GUID.new(0xb64016f3_u32, 0xc9a2_u16, 0x4066_u16, StaticArray[0x96_u8, 0xf0_u8, 0xbd_u8, 0x95_u8, 0x63_u8, 0x31_u8, 0x47_u8, 0x26_u8])
  ComponentTypes = LibC::GUID.new(0xa1a2b1c4_u32, 0xe3a_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  ComponentType = LibC::GUID.new(0x823535a0_u32, 0x318_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  LanguageComponentType = LibC::GUID.new(0x1be49f30_u32, 0xe1b_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  MPEG2ComponentType = LibC::GUID.new(0x418008f3_u32, 0xcf67_u16, 0x4668_u16, StaticArray[0x96_u8, 0x28_u8, 0x10_u8, 0xdc_u8, 0x52_u8, 0xbe_u8, 0x1d_u8, 0x8_u8])
  ATSCComponentType = LibC::GUID.new(0xa8dcf3d5_u32, 0x780_u16, 0x4ef4_u16, StaticArray[0x8a_u8, 0x83_u8, 0x2c_u8, 0xff_u8, 0xaa_u8, 0xcb_u8, 0x8a_u8, 0xce_u8])
  Components = LibC::GUID.new(0x809b6661_u32, 0x94c4_u16, 0x49e6_u16, StaticArray[0xb6_u8, 0xec_u8, 0x3f_u8, 0xf_u8, 0x86_u8, 0x22_u8, 0x15_u8, 0xaa_u8])
  Component = LibC::GUID.new(0x59dc47a8_u32, 0x116c_u16, 0x11d3_u16, StaticArray[0x9d_u8, 0x8e_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x72_u8, 0xd9_u8, 0x80_u8])
  MPEG2Component = LibC::GUID.new(0x55cb2d7_u32, 0x2969_u16, 0x45cd_u16, StaticArray[0x91_u8, 0x4b_u8, 0x76_u8, 0x89_u8, 0x7_u8, 0x22_u8, 0xf1_u8, 0x12_u8])
  AnalogAudioComponentType = LibC::GUID.new(0x28ab0005_u32, 0xe845_u16, 0x4ffa_u16, StaticArray[0xaa_u8, 0x9b_u8, 0xf4_u8, 0x66_u8, 0x52_u8, 0x36_u8, 0x14_u8, 0x1c_u8])
  TuneRequest = LibC::GUID.new(0xb46e0d38_u32, 0xab35_u16, 0x4a06_u16, StaticArray[0xa1_u8, 0x37_u8, 0x70_u8, 0x57_u8, 0x6b_u8, 0x1_u8, 0xb3_u8, 0x9f_u8])
  ChannelIDTuneRequest = LibC::GUID.new(0x3a9428a7_u32, 0x31a4_u16, 0x45e9_u16, StaticArray[0x9e_u8, 0xfb_u8, 0xe0_u8, 0x55_u8, 0xbf_u8, 0x7b_u8, 0xb3_u8, 0xdb_u8])
  ChannelTuneRequest = LibC::GUID.new(0x369b4e5_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  ATSCChannelTuneRequest = LibC::GUID.new(0x369b4e6_u32, 0x45b6_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  DigitalCableTuneRequest = LibC::GUID.new(0x26ec0b63_u32, 0xaa90_u16, 0x458a_u16, StaticArray[0x8d_u8, 0xf4_u8, 0x56_u8, 0x59_u8, 0xf2_u8, 0xc8_u8, 0xa1_u8, 0x8a_u8])
  MPEG2TuneRequest = LibC::GUID.new(0x955ac62_u32, 0xbf2e_u16, 0x4cba_u16, StaticArray[0xa2_u8, 0xb9_u8, 0xa6_u8, 0x3f_u8, 0x77_u8, 0x2d_u8, 0x46_u8, 0xcf_u8])
  MPEG2TuneRequestFactory = LibC::GUID.new(0x2c63e4eb_u32, 0x4cea_u16, 0x41b8_u16, StaticArray[0x91_u8, 0x9c_u8, 0xe9_u8, 0x47_u8, 0xea_u8, 0x19_u8, 0xa7_u8, 0x7c_u8])
  Locator = LibC::GUID.new(0x888c883_u32, 0xac4f_u16, 0x4943_u16, StaticArray[0xb5_u8, 0x16_u8, 0x2c_u8, 0x38_u8, 0xd9_u8, 0xb3_u8, 0x45_u8, 0x62_u8])
  DigitalLocator = LibC::GUID.new(0x6e50cc0d_u32, 0xc19b_u16, 0x4bf6_u16, StaticArray[0x81_u8, 0xb_u8, 0x5b_u8, 0xd6_u8, 0x7_u8, 0x61_u8, 0xf5_u8, 0xcc_u8])
  AnalogLocator = LibC::GUID.new(0x49638b91_u32, 0x48ab_u16, 0x48b7_u16, StaticArray[0xa4_u8, 0x7a_u8, 0x7d_u8, 0xe_u8, 0x75_u8, 0xa0_u8, 0x8e_u8, 0xde_u8])
  ATSCLocator = LibC::GUID.new(0x8872ff1b_u32, 0x98fa_u16, 0x4d7a_u16, StaticArray[0x8d_u8, 0x93_u8, 0xc9_u8, 0xf1_u8, 0x5_u8, 0x5f_u8, 0x85_u8, 0xbb_u8])
  DigitalCableLocator = LibC::GUID.new(0x3c06416_u32, 0xd127_u16, 0x407a_u16, StaticArray[0xab_u8, 0x4c_u8, 0xfd_u8, 0xd2_u8, 0x79_u8, 0xab_u8, 0xbe_u8, 0x5d_u8])
  DVBTLocator = LibC::GUID.new(0x9cd64701_u32, 0xbdf3_u16, 0x4d14_u16, StaticArray[0x8e_u8, 0x3_u8, 0xf1_u8, 0x29_u8, 0x83_u8, 0xd8_u8, 0x66_u8, 0x64_u8])
  DVBTLocator2 = LibC::GUID.new(0xefe3fa02_u32, 0x45d7_u16, 0x4920_u16, StaticArray[0xbe_u8, 0x96_u8, 0x53_u8, 0xfa_u8, 0x7f_u8, 0x35_u8, 0xb0_u8, 0xe6_u8])
  DVBSLocator = LibC::GUID.new(0x1df7d126_u32, 0x4050_u16, 0x47f0_u16, StaticArray[0xa7_u8, 0xcf_u8, 0x4c_u8, 0x4c_u8, 0xa9_u8, 0x24_u8, 0x13_u8, 0x33_u8])
  DVBCLocator = LibC::GUID.new(0xc531d9fd_u32, 0x9685_u16, 0x4028_u16, StaticArray[0x8b_u8, 0x68_u8, 0x6e_u8, 0x12_u8, 0x32_u8, 0x7_u8, 0x9f_u8, 0x1e_u8])
  ISDBSLocator = LibC::GUID.new(0x6504afed_u32, 0xa629_u16, 0x455c_u16, StaticArray[0xa7_u8, 0xf1_u8, 0x4_u8, 0x96_u8, 0x4d_u8, 0xea_u8, 0x5c_u8, 0xc4_u8])
  DVBTuneRequest = LibC::GUID.new(0x15d6504a_u32, 0x5494_u16, 0x499c_u16, StaticArray[0x88_u8, 0x6c_u8, 0x97_u8, 0x3c_u8, 0x9e_u8, 0x53_u8, 0xb9_u8, 0xf1_u8])
  CreatePropBagOnRegKey = LibC::GUID.new(0x8a674b49_u32, 0x1f63_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4c_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  BroadcastEventService = LibC::GUID.new(0xb3ffb92_u32, 0x919_u16, 0x4934_u16, StaticArray[0x9d_u8, 0x5b_u8, 0x61_u8, 0x9c_u8, 0x71_u8, 0x9d_u8, 0x2_u8, 0x2_u8])
  TunerMarshaler = LibC::GUID.new(0x6438570b_u32, 0xc08_u16, 0x4a25_u16, StaticArray[0x95_u8, 0x4_u8, 0x80_u8, 0x12_u8, 0xbb_u8, 0x4d_u8, 0x50_u8, 0xcf_u8])
  PersistTuneXmlUtility = LibC::GUID.new(0xe77026b0_u32, 0xb97f_u16, 0x4cbb_u16, StaticArray[0xb7_u8, 0xfb_u8, 0xf4_u8, 0xf0_u8, 0x3a_u8, 0xd6_u8, 0x9f_u8, 0x11_u8])
  ESEventService = LibC::GUID.new(0xc20447fc_u32, 0xec60_u16, 0x475e_u16, StaticArray[0x81_u8, 0x3f_u8, 0xd2_u8, 0xb0_u8, 0xa6_u8, 0xde_u8, 0xce_u8, 0xfe_u8])
  ESEventFactory = LibC::GUID.new(0x8e8a07da_u32, 0x71f8_u16, 0x40c1_u16, StaticArray[0xa9_u8, 0x29_u8, 0x5e_u8, 0x3a_u8, 0x86_u8, 0x8a_u8, 0xc2_u8, 0xc6_u8])
  XDSToRat = LibC::GUID.new(0xc5c5c5f0_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
  EvalRat = LibC::GUID.new(0xc5c5c5f1_u32, 0x3abc_u16, 0x11d6_u16, StaticArray[0xb2_u8, 0x5b_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa0_u8, 0xc0_u8, 0x26_u8])
  ETFilter = LibC::GUID.new(0xc4c4c4f1_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  DTFilter = LibC::GUID.new(0xc4c4c4f2_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  XDSCodec = LibC::GUID.new(0xc4c4c4f3_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  CXDSData = LibC::GUID.new(0xc4c4c4f4_u32, 0x49_u16, 0x4e2b_u16, StaticArray[0x98_u8, 0xfb_u8, 0x95_u8, 0x37_u8, 0xf6_u8, 0xce_u8, 0x51_u8, 0x6d_u8])
  MSVidAnalogTunerDevice = LibC::GUID.new(0x1c15d484_u32, 0x911d_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidBDATunerDevice = LibC::GUID.new(0xa2e3074e_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidFilePlaybackDevice = LibC::GUID.new(0x37b0353c_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidWebDVD = LibC::GUID.new(0x11b3619_u32, 0xfe63_u16, 0x4814_u16, StaticArray[0x8a_u8, 0x84_u8, 0x15_u8, 0xa1_u8, 0x94_u8, 0xce_u8, 0x9c_u8, 0xe3_u8])
  MSVidWebDVDAdm = LibC::GUID.new(0xfa7c375b_u32, 0x66a7_u16, 0x4280_u16, StaticArray[0x87_u8, 0x9d_u8, 0xfd_u8, 0x45_u8, 0x9c_u8, 0x84_u8, 0xbb_u8, 0x2_u8])
  MSVidVideoRenderer = LibC::GUID.new(0x37b03543_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidVMR9 = LibC::GUID.new(0x24dc3975_u32, 0x9bf_u16, 0x4231_u16, StaticArray[0x86_u8, 0x55_u8, 0x3e_u8, 0xe7_u8, 0x1f_u8, 0x43_u8, 0x83_u8, 0x7d_u8])
  MSVidEVR = LibC::GUID.new(0xc45268a2_u32, 0xfa81_u16, 0x4e19_u16, StaticArray[0xb1_u8, 0xe3_u8, 0x72_u8, 0xed_u8, 0xbd_u8, 0x60_u8, 0xae_u8, 0xda_u8])
  MSVidAudioRenderer = LibC::GUID.new(0x37b03544_u32, 0xa4c8_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x34_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidGenericSink = LibC::GUID.new(0x4a5869cf_u32, 0x929d_u16, 0x4040_u16, StaticArray[0xae_u8, 0x3_u8, 0xfc_u8, 0xaf_u8, 0xc5_u8, 0xb9_u8, 0xcd_u8, 0x42_u8])
  MSVidStreamBufferSink = LibC::GUID.new(0x9e77aac4_u32, 0x35e5_u16, 0x42a1_u16, StaticArray[0xbd_u8, 0xc2_u8, 0x8f_u8, 0x3f_u8, 0xf3_u8, 0x99_u8, 0x84_u8, 0x7c_u8])
  MSVidStreamBufferSource = LibC::GUID.new(0xad8e510d_u32, 0x217f_u16, 0x409b_u16, StaticArray[0x80_u8, 0x76_u8, 0x29_u8, 0xc5_u8, 0xe7_u8, 0x3b_u8, 0x98_u8, 0xe8_u8])
  MSVidStreamBufferV2Source = LibC::GUID.new(0xfd351ea1_u32, 0x4173_u16, 0x4af4_u16, StaticArray[0x82_u8, 0x1d_u8, 0x80_u8, 0xd4_u8, 0xae_u8, 0x97_u8, 0x90_u8, 0x48_u8])
  MSVidEncoder = LibC::GUID.new(0xbb530c63_u32, 0xd9df_u16, 0x4b49_u16, StaticArray[0x94_u8, 0x39_u8, 0x63_u8, 0x45_u8, 0x39_u8, 0x62_u8, 0xe5_u8, 0x98_u8])
  MSVidITVCapture = LibC::GUID.new(0x5740a302_u32, 0xef0b_u16, 0x45ce_u16, StaticArray[0xbf_u8, 0x3b_u8, 0x44_u8, 0x70_u8, 0xa1_u8, 0x4a_u8, 0x89_u8, 0x80_u8])
  MSVidITVPlayback = LibC::GUID.new(0x9e797ed0_u32, 0x5253_u16, 0x4243_u16, StaticArray[0xa9_u8, 0xb7_u8, 0xbd_u8, 0x6_u8, 0xc5_u8, 0x8f_u8, 0x8e_u8, 0xf3_u8])
  MSVidCCA = LibC::GUID.new(0x86151827_u32, 0xe47b_u16, 0x45ee_u16, StaticArray[0x84_u8, 0x21_u8, 0xd1_u8, 0xe_u8, 0x6e_u8, 0x69_u8, 0x9_u8, 0x79_u8])
  MSVidClosedCaptioning = LibC::GUID.new(0x7f9cb14d_u32, 0x48e4_u16, 0x43b6_u16, StaticArray[0x93_u8, 0x46_u8, 0x1a_u8, 0xeb_u8, 0xc3_u8, 0x9c_u8, 0x64_u8, 0xd3_u8])
  MSVidClosedCaptioningSI = LibC::GUID.new(0x92ed88bf_u32, 0x879e_u16, 0x448f_u16, StaticArray[0xb6_u8, 0xb6_u8, 0xa3_u8, 0x85_u8, 0xbc_u8, 0xeb_u8, 0x84_u8, 0x6d_u8])
  MSVidDataServices = LibC::GUID.new(0x334125c0_u32, 0x77e5_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidXDS = LibC::GUID.new(0x149eedf_u32, 0xd08f_u16, 0x4142_u16, StaticArray[0x8d_u8, 0x73_u8, 0xd2_u8, 0x39_u8, 0x3_u8, 0xd2_u8, 0x1e_u8, 0x90_u8])
  MSVidAnalogCaptureToDataServices = LibC::GUID.new(0xc5702cd6_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidDataServicesToStreamBufferSink = LibC::GUID.new(0x38f03426_u32, 0xe83b_u16, 0x4e68_u16, StaticArray[0xb6_u8, 0x5b_u8, 0xdc_u8, 0xae_u8, 0x73_u8, 0x30_u8, 0x48_u8, 0x38_u8])
  MSVidDataServicesToXDS = LibC::GUID.new(0x429ec6e_u32, 0x1144_u16, 0x4bed_u16, StaticArray[0xb8_u8, 0x8b_u8, 0x2f_u8, 0xb9_u8, 0x89_u8, 0x9a_u8, 0x4a_u8, 0x3d_u8])
  MSVidAnalogCaptureToXDS = LibC::GUID.new(0x3540d440_u32, 0x5b1d_u16, 0x49cb_u16, StaticArray[0x82_u8, 0x1a_u8, 0xe8_u8, 0x4b_u8, 0x8c_u8, 0xf0_u8, 0x65_u8, 0xa7_u8])
  MSVidCtl = LibC::GUID.new(0xb0edf163_u32, 0x910a_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidInputDevices = LibC::GUID.new(0xc5702ccc_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidOutputDevices = LibC::GUID.new(0xc5702ccd_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidVideoRendererDevices = LibC::GUID.new(0xc5702cce_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidAudioRendererDevices = LibC::GUID.new(0xc5702ccf_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidFeatures = LibC::GUID.new(0xc5702cd0_u32, 0x9b79_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x54_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidGenericComposite = LibC::GUID.new(0x2764bce5_u32, 0xcc39_u16, 0x11d2_u16, StaticArray[0xb6_u8, 0x39_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidAnalogCaptureToOverlayMixer = LibC::GUID.new(0xe18af75a_u32, 0x8af_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x4a_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  MSVidWebDVDToVideoRenderer = LibC::GUID.new(0x267db0b3_u32, 0x55e3_u16, 0x4902_u16, StaticArray[0x94_u8, 0x9b_u8, 0xdf_u8, 0x8f_u8, 0x5c_u8, 0xec_u8, 0x1_u8, 0x91_u8])
  MSVidWebDVDToAudioRenderer = LibC::GUID.new(0x8d04238e_u32, 0x9fd1_u16, 0x41c6_u16, StaticArray[0x8d_u8, 0xe3_u8, 0x9e_u8, 0x1e_u8, 0xe3_u8, 0x9_u8, 0xe9_u8, 0x35_u8])
  MSVidMPEG2DecoderToClosedCaptioning = LibC::GUID.new(0x6ad28ee1_u32, 0x5002_u16, 0x4e71_u16, StaticArray[0xaa_u8, 0xf7_u8, 0xbd_u8, 0x7_u8, 0x79_u8, 0x7_u8, 0xb1_u8, 0xa4_u8])
  MSVidAnalogCaptureToStreamBufferSink = LibC::GUID.new(0x9f50e8b1_u32, 0x9530_u16, 0x4ddc_u16, StaticArray[0x82_u8, 0x5e_u8, 0x1a_u8, 0xf8_u8, 0x1d_u8, 0x47_u8, 0xae_u8, 0xd6_u8])
  MSVidDigitalCaptureToStreamBufferSink = LibC::GUID.new(0xabe40035_u32, 0x27c3_u16, 0x4a2f_u16, StaticArray[0x81_u8, 0x53_u8, 0x66_u8, 0x24_u8, 0x47_u8, 0x16_u8, 0x8_u8, 0xaf_u8])
  MSVidITVToStreamBufferSink = LibC::GUID.new(0x92b94828_u32, 0x1af7_u16, 0x4e6e_u16, StaticArray[0x9e_u8, 0xbf_u8, 0x77_u8, 0x6_u8, 0x57_u8, 0xf7_u8, 0x7a_u8, 0xf5_u8])
  MSVidCCAToStreamBufferSink = LibC::GUID.new(0x3ef76d68_u32, 0x8661_u16, 0x4843_u16, StaticArray[0x8b_u8, 0x8f_u8, 0xc3_u8, 0x71_u8, 0x63_u8, 0xd8_u8, 0xc9_u8, 0xce_u8])
  MSVidEncoderToStreamBufferSink = LibC::GUID.new(0xa0b9b497_u32, 0xafbc_u16, 0x45ad_u16, StaticArray[0xa8_u8, 0xa6_u8, 0x9b_u8, 0x7_u8, 0x7c_u8, 0x40_u8, 0xd4_u8, 0xf2_u8])
  MSVidFilePlaybackToVideoRenderer = LibC::GUID.new(0xb401c5eb_u32, 0x8457_u16, 0x427f_u16, StaticArray[0x84_u8, 0xea_u8, 0xa4_u8, 0xd2_u8, 0x36_u8, 0x33_u8, 0x64_u8, 0xb0_u8])
  MSVidFilePlaybackToAudioRenderer = LibC::GUID.new(0xcc23f537_u32, 0x18d4_u16, 0x4ece_u16, StaticArray[0x93_u8, 0xbd_u8, 0x20_u8, 0x7a_u8, 0x84_u8, 0x72_u8, 0x69_u8, 0x79_u8])
  MSVidAnalogTVToEncoder = LibC::GUID.new(0x28953661_u32, 0x231_u16, 0x41db_u16, StaticArray[0x89_u8, 0x86_u8, 0x21_u8, 0xff_u8, 0x43_u8, 0x88_u8, 0xee_u8, 0x9b_u8])
  MSVidStreamBufferSourceToVideoRenderer = LibC::GUID.new(0x3c4708dc_u32, 0xb181_u16, 0x46a8_u16, StaticArray[0x8d_u8, 0xa8_u8, 0x4a_u8, 0xb0_u8, 0x37_u8, 0x17_u8, 0x58_u8, 0xcd_u8])
  MSVidAnalogCaptureToCCA = LibC::GUID.new(0x942b7909_u32, 0xa28e_u16, 0x49a1_u16, StaticArray[0xa2_u8, 0x7_u8, 0x34_u8, 0xeb_u8, 0xcb_u8, 0xcb_u8, 0x4b_u8, 0x3b_u8])
  MSVidDigitalCaptureToCCA = LibC::GUID.new(0x73d14237_u32, 0xb9db_u16, 0x4efa_u16, StaticArray[0xa6_u8, 0xdd_u8, 0x84_u8, 0x35_u8, 0x4_u8, 0x21_u8, 0xfb_u8, 0x2f_u8])
  MSVidDigitalCaptureToITV = LibC::GUID.new(0x5d8e73f7_u32, 0x4989_u16, 0x4ac8_u16, StaticArray[0x8a_u8, 0x98_u8, 0x39_u8, 0xba_u8, 0xd_u8, 0x32_u8, 0x53_u8, 0x2_u8])
  MSVidSBESourceToITV = LibC::GUID.new(0x2291478c_u32, 0x5ee3_u16, 0x4bef_u16, StaticArray[0xab_u8, 0x5d_u8, 0xb5_u8, 0xff_u8, 0x2c_u8, 0xf5_u8, 0x83_u8, 0x52_u8])
  MSVidSBESourceToCC = LibC::GUID.new(0x9193a8f9_u32, 0xcba_u16, 0x400e_u16, StaticArray[0xaa_u8, 0x97_u8, 0xeb_u8, 0x47_u8, 0x9_u8, 0x16_u8, 0x45_u8, 0x76_u8])
  MSVidSBESourceToGenericSink = LibC::GUID.new(0x991da7e5_u32, 0x953f_u16, 0x435b_u16, StaticArray[0xbe_u8, 0x5e_u8, 0xb9_u8, 0x2a_u8, 0x5_u8, 0xed_u8, 0xfc_u8, 0x42_u8])
  MSVidCCToVMR = LibC::GUID.new(0xc4bf2784_u32, 0xae00_u16, 0x41ba_u16, StaticArray[0x98_u8, 0x28_u8, 0x9c_u8, 0x95_u8, 0x3b_u8, 0xd3_u8, 0xc5_u8, 0x4a_u8])
  MSVidCCToAR = LibC::GUID.new(0xd76334ca_u32, 0xd89e_u16, 0x4baf_u16, StaticArray[0x86_u8, 0xab_u8, 0xdd_u8, 0xb5_u8, 0x93_u8, 0x72_u8, 0xaf_u8, 0xc2_u8])
  MSEventBinder = LibC::GUID.new(0x577faa18_u32, 0x4518_u16, 0x445e_u16, StaticArray[0x8f_u8, 0x70_u8, 0x14_u8, 0x73_u8, 0xf8_u8, 0xcf_u8, 0x4b_u8, 0xa4_u8])
  MSVidStreamBufferRecordingControl = LibC::GUID.new(0xcaafdd83_u32, 0xcefc_u16, 0x4e3d_u16, StaticArray[0xba_u8, 0x3_u8, 0x17_u8, 0x5f_u8, 0x17_u8, 0xa2_u8, 0x4f_u8, 0x91_u8])
  MSVidRect = LibC::GUID.new(0xcb4276e6_u32, 0x7d5f_u16, 0x4cf1_u16, StaticArray[0x97_u8, 0x27_u8, 0x62_u8, 0x9c_u8, 0x5e_u8, 0x6d_u8, 0xb6_u8, 0xae_u8])
  MSVidDevice = LibC::GUID.new(0x6e40476f_u32, 0x9c49_u16, 0x4c3e_u16, StaticArray[0x8b_u8, 0xb9_u8, 0x85_u8, 0x87_u8, 0x95_u8, 0x8e_u8, 0xff_u8, 0x74_u8])
  MSVidDevice2 = LibC::GUID.new(0x30997f7d_u32, 0xb3b5_u16, 0x4a1c_u16, StaticArray[0x98_u8, 0x3a_u8, 0x1f_u8, 0xe8_u8, 0x9_u8, 0x8c_u8, 0xb7_u8, 0x7d_u8])
  MSVidInputDevice = LibC::GUID.new(0xac1972f2_u32, 0x138a_u16, 0x4ca3_u16, StaticArray[0x90_u8, 0xda_u8, 0xae_u8, 0x51_u8, 0x11_u8, 0x2e_u8, 0xda_u8, 0x28_u8])
  MSVidVideoInputDevice = LibC::GUID.new(0x95f4820b_u32, 0xbb3a_u16, 0x4e2d_u16, StaticArray[0xbc_u8, 0x64_u8, 0x5b_u8, 0x81_u8, 0x7b_u8, 0xc2_u8, 0xc3_u8, 0xe_u8])
  MSVidVideoPlaybackDevice = LibC::GUID.new(0x1990d634_u32, 0x1a5e_u16, 0x4071_u16, StaticArray[0xa3_u8, 0x4a_u8, 0x53_u8, 0xaa_u8, 0xff_u8, 0xce_u8, 0x9f_u8, 0x36_u8])
  MSVidFeature = LibC::GUID.new(0x7748530b_u32, 0xc08a_u16, 0x47ea_u16, StaticArray[0xb2_u8, 0x4c_u8, 0xbe_u8, 0x86_u8, 0x95_u8, 0xff_u8, 0x40_u8, 0x5f_u8])
  MSVidOutput = LibC::GUID.new(0x87eb890d_u32, 0x3ad_u16, 0x4e9d_u16, StaticArray[0x98_u8, 0x66_u8, 0x37_u8, 0x6e_u8, 0x5e_u8, 0xc5_u8, 0x72_u8, 0xed_u8])
  SectionList = LibC::GUID.new(0x73da5d04_u32, 0x4347_u16, 0x45d3_u16, StaticArray[0xa9_u8, 0xdc_u8, 0xfa_u8, 0xe9_u8, 0xdd_u8, 0xbe_u8, 0x55_u8, 0x8d_u8])
  Mpeg2Stream = LibC::GUID.new(0xf91d96c7_u32, 0x8509_u16, 0x4d0b_u16, StaticArray[0xab_u8, 0x26_u8, 0xa0_u8, 0xdd_u8, 0x10_u8, 0x90_u8, 0x4b_u8, 0xb7_u8])
  Mpeg2Data = LibC::GUID.new(0xc666e115_u32, 0xbb62_u16, 0x4027_u16, StaticArray[0xa1_u8, 0x13_u8, 0x82_u8, 0xd6_u8, 0x43_u8, 0xfe_u8, 0x2d_u8, 0x99_u8])
  Mpeg2DataLib = LibC::GUID.new(0xdbaf6c1b_u32, 0xb6a4_u16, 0x4898_u16, StaticArray[0xae_u8, 0x65_u8, 0x20_u8, 0x4f_u8, 0xd_u8, 0x95_u8, 0x9_u8, 0xa1_u8])
  TIFLoad = LibC::GUID.new(0x14eb8748_u32, 0x1753_u16, 0x4393_u16, StaticArray[0x95_u8, 0xae_u8, 0x4f_u8, 0x7e_u8, 0x7a_u8, 0x87_u8, 0xaa_u8, 0xd6_u8])
  EVENTID_TuningChanging = LibC::GUID.new(0x83183c03_u32, 0xc09e_u16, 0x45c4_u16, StaticArray[0xa7_u8, 0x19_u8, 0x80_u8, 0x7a_u8, 0x94_u8, 0x95_u8, 0x2b_u8, 0xf9_u8])
  EVENTID_TuningChanged = LibC::GUID.new(0x9d7e6235_u32, 0x4b7d_u16, 0x425d_u16, StaticArray[0xa6_u8, 0xd1_u8, 0xd7_u8, 0x17_u8, 0xc3_u8, 0x3b_u8, 0x9c_u8, 0x4c_u8])
  EVENTID_CandidatePostTuneData = LibC::GUID.new(0x9f02d3d0_u32, 0x9f06_u16, 0x4369_u16, StaticArray[0x9f_u8, 0x1e_u8, 0x3a_u8, 0xd6_u8, 0xca_u8, 0x19_u8, 0x80_u8, 0x7e_u8])
  EVENTID_CADenialCountChanged = LibC::GUID.new(0x2a65c528_u32, 0x2249_u16, 0x4070_u16, StaticArray[0xac_u8, 0x16_u8, 0x0_u8, 0x39_u8, 0xc_u8, 0xdf_u8, 0xb2_u8, 0xdd_u8])
  EVENTID_SignalStatusChanged = LibC::GUID.new(0x6d9cfaf2_u32, 0x702d_u16, 0x4b01_u16, StaticArray[0x8d_u8, 0xff_u8, 0x68_u8, 0x92_u8, 0xad_u8, 0x20_u8, 0xd1_u8, 0x91_u8])
  EVENTID_NewSignalAcquired = LibC::GUID.new(0xc87ec52d_u32, 0xcd18_u16, 0x404a_u16, StaticArray[0xa0_u8, 0x76_u8, 0xc0_u8, 0x2a_u8, 0x27_u8, 0x3d_u8, 0x3d_u8, 0xe7_u8])
  EVENTID_EASMessageReceived = LibC::GUID.new(0xd10df9d5_u32, 0xc261_u16, 0x4b85_u16, StaticArray[0x9e_u8, 0x8a_u8, 0x51_u8, 0x7b_u8, 0x32_u8, 0x99_u8, 0xca_u8, 0xb2_u8])
  EVENTID_PSITable = LibC::GUID.new(0x1b9c3703_u32, 0xd447_u16, 0x4e16_u16, StaticArray[0x97_u8, 0xbb_u8, 0x1_u8, 0x79_u8, 0x9f_u8, 0xc0_u8, 0x31_u8, 0xed_u8])
  EVENTID_ServiceTerminated = LibC::GUID.new(0xa1d591c_u32, 0xe0d2_u16, 0x4f8e_u16, StaticArray[0x89_u8, 0x60_u8, 0x23_u8, 0x35_u8, 0xbe_u8, 0xf4_u8, 0x5c_u8, 0xcb_u8])
  EVENTID_CardStatusChanged = LibC::GUID.new(0xa265faea_u32, 0xf874_u16, 0x4b38_u16, StaticArray[0x9f_u8, 0xf7_u8, 0xc5_u8, 0x3d_u8, 0x2_u8, 0x96_u8, 0x99_u8, 0x96_u8])
  EVENTID_DRMParingStatusChanged = LibC::GUID.new(0x906f5_u32, 0xf0d1_u16, 0x41d6_u16, StaticArray[0xa7_u8, 0xdf_u8, 0x40_u8, 0x28_u8, 0x69_u8, 0x76_u8, 0x69_u8, 0xf6_u8])
  EVENTID_DRMParingStepComplete = LibC::GUID.new(0x5b2ebf78_u32, 0xb752_u16, 0x4420_u16, StaticArray[0xb4_u8, 0x1e_u8, 0xa4_u8, 0x72_u8, 0xdc_u8, 0x95_u8, 0x82_u8, 0x8e_u8])
  EVENTID_MMIMessage = LibC::GUID.new(0x52c29af_u32, 0x9a4_u16, 0x4b93_u16, StaticArray[0x89_u8, 0xf_u8, 0xbd_u8, 0x6a_u8, 0x34_u8, 0x89_u8, 0x68_u8, 0xa4_u8])
  EVENTID_EntitlementChanged = LibC::GUID.new(0x9071ad5d_u32, 0x2359_u16, 0x4c95_u16, StaticArray[0x86_u8, 0x94_u8, 0xaf_u8, 0xa8_u8, 0x1d_u8, 0x70_u8, 0xbf_u8, 0xd5_u8])
  EVENTID_STBChannelNumber = LibC::GUID.new(0x17c4d730_u32, 0xd0f0_u16, 0x413a_u16, StaticArray[0x8c_u8, 0x99_u8, 0x50_u8, 0x4_u8, 0x69_u8, 0xde_u8, 0x35_u8, 0xad_u8])
  EVENTID_BDAEventingServicePendingEvent = LibC::GUID.new(0x5ca51711_u32, 0x5ddc_u16, 0x41a6_u16, StaticArray[0x94_u8, 0x30_u8, 0xe4_u8, 0x1b_u8, 0x8b_u8, 0x3b_u8, 0xbc_u8, 0x5b_u8])
  EVENTID_BDAConditionalAccessTAG = LibC::GUID.new(0xefc3a459_u32, 0xae8b_u16, 0x4b4a_u16, StaticArray[0x8f_u8, 0xe9_u8, 0x79_u8, 0xa0_u8, 0xd0_u8, 0x97_u8, 0xf3_u8, 0xea_u8])
  EVENTTYPE_CASDescrambleFailureEvent = LibC::GUID.new(0xb2127d42_u32, 0x7be5_u16, 0x4f4b_u16, StaticArray[0x91_u8, 0x30_u8, 0x66_u8, 0x79_u8, 0x89_u8, 0x9f_u8, 0x4f_u8, 0x4b_u8])
  EVENTID_CASFailureSpanningEvent = LibC::GUID.new(0xead831ae_u32, 0x5529_u16, 0x4d1f_u16, StaticArray[0xaf_u8, 0xce_u8, 0xd_u8, 0x8c_u8, 0xd1_u8, 0x25_u8, 0x7d_u8, 0x30_u8])
  EVENTID_ChannelChangeSpanningEvent = LibC::GUID.new(0x9067c5e5_u32, 0x4c5c_u16, 0x4205_u16, StaticArray[0x86_u8, 0xc8_u8, 0x7a_u8, 0xfe_u8, 0x20_u8, 0xfe_u8, 0x1e_u8, 0xfa_u8])
  EVENTID_ChannelTypeSpanningEvent = LibC::GUID.new(0x72ab1d51_u32, 0x87d2_u16, 0x489b_u16, StaticArray[0xba_u8, 0x11_u8, 0xe_u8, 0x8_u8, 0xdc_u8, 0x21_u8, 0x2_u8, 0x43_u8])
  EVENTID_ChannelInfoSpanningEvent = LibC::GUID.new(0x41f36d80_u32, 0x4132_u16, 0x4cc2_u16, StaticArray[0xb1_u8, 0x21_u8, 0x1_u8, 0xa4_u8, 0x32_u8, 0x19_u8, 0xd8_u8, 0x1b_u8])
  EVENTID_RRTSpanningEvent = LibC::GUID.new(0xf6cfc8f4_u32, 0xda93_u16, 0x4f2f_u16, StaticArray[0xbf_u8, 0xf8_u8, 0xba_u8, 0x1e_u8, 0xe6_u8, 0xfc_u8, 0xa3_u8, 0xa2_u8])
  EVENTID_CSDescriptorSpanningEvent = LibC::GUID.new(0xefe779d9_u32, 0x97f0_u16, 0x4786_u16, StaticArray[0x80_u8, 0xd_u8, 0x95_u8, 0xcf_u8, 0x50_u8, 0x5d_u8, 0xdc_u8, 0x66_u8])
  EVENTID_CtxADescriptorSpanningEvent = LibC::GUID.new(0x3ab4a2e6_u32, 0x4247_u16, 0x4b34_u16, StaticArray[0x89_u8, 0x6c_u8, 0x30_u8, 0xaf_u8, 0xa5_u8, 0xd2_u8, 0x1c_u8, 0x24_u8])
  EVENTID_DVBScramblingControlSpanningEvent = LibC::GUID.new(0x4bd4e1c4_u32, 0x90a1_u16, 0x4109_u16, StaticArray[0x82_u8, 0x36_u8, 0x27_u8, 0xf0_u8, 0xe_u8, 0x7d_u8, 0xcc_u8, 0x5b_u8])
  EVENTID_SignalAndServiceStatusSpanningEvent = LibC::GUID.new(0x8068c5cb_u32, 0x3c04_u16, 0x492b_u16, StaticArray[0xb4_u8, 0x7d_u8, 0x3_u8, 0x8_u8, 0x82_u8, 0xd_u8, 0xce_u8, 0x51_u8])
  EVENTID_EmmMessageSpanningEvent = LibC::GUID.new(0x6bf00268_u32, 0x4f7e_u16, 0x4294_u16, StaticArray[0xaa_u8, 0x87_u8, 0xe9_u8, 0xe9_u8, 0x53_u8, 0xe4_u8, 0x3f_u8, 0x14_u8])
  EVENTID_AudioTypeSpanningEvent = LibC::GUID.new(0x501cbfbe_u32, 0xb849_u16, 0x42ce_u16, StaticArray[0x9b_u8, 0xe9_u8, 0x3d_u8, 0xb8_u8, 0x69_u8, 0xfb_u8, 0x82_u8, 0xb3_u8])
  EVENTID_StreamTypeSpanningEvent = LibC::GUID.new(0x82af2ebc_u32, 0x30a6_u16, 0x4264_u16, StaticArray[0xa8_u8, 0xb_u8, 0xad_u8, 0x2e_u8, 0x13_u8, 0x72_u8, 0xac_u8, 0x60_u8])
  EVENTID_ARIBcontentSpanningEvent = LibC::GUID.new(0x3a954083_u32, 0x93d0_u16, 0x463e_u16, StaticArray[0x90_u8, 0xb2_u8, 0x7_u8, 0x42_u8, 0xc4_u8, 0x96_u8, 0xed_u8, 0xf0_u8])
  EVENTID_LanguageSpanningEvent = LibC::GUID.new(0xe292666d_u32, 0x9c02_u16, 0x448d_u16, StaticArray[0xaa_u8, 0x8d_u8, 0x78_u8, 0x1a_u8, 0x93_u8, 0xfd_u8, 0xc3_u8, 0x95_u8])
  EVENTID_DualMonoSpanningEvent = LibC::GUID.new(0xa9a29b56_u32, 0xa84b_u16, 0x488c_u16, StaticArray[0x89_u8, 0xd5_u8, 0xd_u8, 0x4e_u8, 0x76_u8, 0x57_u8, 0xc8_u8, 0xce_u8])
  EVENTID_PIDListSpanningEvent = LibC::GUID.new(0x47fc8f65_u32, 0xe2bb_u16, 0x4634_u16, StaticArray[0x9c_u8, 0xef_u8, 0xfd_u8, 0xbf_u8, 0xe6_u8, 0x26_u8, 0x1d_u8, 0x5c_u8])
  EVENTID_AudioDescriptorSpanningEvent = LibC::GUID.new(0x107bd41c_u32, 0xa6da_u16, 0x4691_u16, StaticArray[0x83_u8, 0x69_u8, 0x11_u8, 0xb2_u8, 0xcd_u8, 0xaa_u8, 0x28_u8, 0x8e_u8])
  EVENTID_SubtitleSpanningEvent = LibC::GUID.new(0x5dcec048_u32, 0xd0b9_u16, 0x4163_u16, StaticArray[0x87_u8, 0x2c_u8, 0x4f_u8, 0x32_u8, 0x22_u8, 0x3b_u8, 0xe8_u8, 0x8a_u8])
  EVENTID_TeletextSpanningEvent = LibC::GUID.new(0x9599d950_u32, 0x5f33_u16, 0x4617_u16, StaticArray[0xaf_u8, 0x7c_u8, 0x1e_u8, 0x54_u8, 0xb5_u8, 0x10_u8, 0xda_u8, 0xa3_u8])
  EVENTID_StreamIDSpanningEvent = LibC::GUID.new(0xcaf1ab68_u32, 0xe153_u16, 0x4d41_u16, StaticArray[0xa6_u8, 0xb3_u8, 0xa7_u8, 0xc9_u8, 0x98_u8, 0xdb_u8, 0x75_u8, 0xee_u8])
  EVENTID_PBDAParentalControlEvent = LibC::GUID.new(0xf947aa85_u32, 0xfb52_u16, 0x48e8_u16, StaticArray[0xb9_u8, 0xc5_u8, 0xe1_u8, 0xe1_u8, 0xf4_u8, 0x11_u8, 0xa5_u8, 0x1a_u8])
  EVENTID_TuneFailureEvent = LibC::GUID.new(0xd97287b2_u32, 0x2dfd_u16, 0x436a_u16, StaticArray[0x94_u8, 0x85_u8, 0x99_u8, 0xd7_u8, 0xd4_u8, 0xab_u8, 0x5a_u8, 0x69_u8])
  EVENTID_TuneFailureSpanningEvent = LibC::GUID.new(0x6f8aa455_u32, 0x5ee1_u16, 0x48ab_u16, StaticArray[0xa2_u8, 0x7c_u8, 0x4c_u8, 0x8d_u8, 0x70_u8, 0xb9_u8, 0xae_u8, 0xba_u8])
  EVENTID_DvbParentalRatingDescriptor = LibC::GUID.new(0x2a67a58d_u32, 0xeca5_u16, 0x4eac_u16, StaticArray[0xab_u8, 0xcb_u8, 0xe7_u8, 0x34_u8, 0xd3_u8, 0x77_u8, 0x6d_u8, 0xa_u8])
  EVENTID_DFNWithNoActualAVData = LibC::GUID.new(0xf5689ffe_u32, 0x55f9_u16, 0x4bb3_u16, StaticArray[0x96_u8, 0xbe_u8, 0xae_u8, 0x97_u8, 0x1c_u8, 0x63_u8, 0xba_u8, 0xe0_u8])
  KSDATAFORMAT_TYPE_BDA_ANTENNA = LibC::GUID.new(0x71985f41_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSDATAFORMAT_SUBTYPE_BDA_MPEG2_TRANSPORT = LibC::GUID.new(0xf4aeb342_u32, 0x329_u16, 0x4fdd_u16, StaticArray[0xa8_u8, 0xfd_u8, 0x4a_u8, 0xff_u8, 0x49_u8, 0x26_u8, 0xc9_u8, 0x78_u8])
  KSDATAFORMAT_SPECIFIER_BDA_TRANSPORT = LibC::GUID.new(0x8deda6fd_u32, 0xac5f_u16, 0x4334_u16, StaticArray[0x8e_u8, 0xcf_u8, 0xa4_u8, 0xba_u8, 0x8f_u8, 0xa7_u8, 0xd0_u8, 0xf0_u8])
  KSDATAFORMAT_TYPE_BDA_IF_SIGNAL = LibC::GUID.new(0x61be0b47_u32, 0xa5eb_u16, 0x499b_u16, StaticArray[0x9a_u8, 0x85_u8, 0x5b_u8, 0x16_u8, 0xc0_u8, 0x7f_u8, 0x12_u8, 0x58_u8])
  KSDATAFORMAT_TYPE_MPEG2_SECTIONS = LibC::GUID.new(0x455f176c_u32, 0x4b06_u16, 0x47ce_u16, StaticArray[0x9a_u8, 0xef_u8, 0x8c_u8, 0xae_u8, 0xf7_u8, 0x3d_u8, 0xf7_u8, 0xb5_u8])
  KSDATAFORMAT_SUBTYPE_ATSC_SI = LibC::GUID.new(0xb3c7397c_u32, 0xd303_u16, 0x414d_u16, StaticArray[0xb3_u8, 0x3c_u8, 0x4e_u8, 0xd2_u8, 0xc9_u8, 0xd2_u8, 0x97_u8, 0x33_u8])
  KSDATAFORMAT_SUBTYPE_DVB_SI = LibC::GUID.new(0xe9dd31a3_u32, 0x221d_u16, 0x4adb_u16, StaticArray[0x85_u8, 0x32_u8, 0x9a_u8, 0xf3_u8, 0x9_u8, 0xc1_u8, 0xa4_u8, 0x8_u8])
  KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_PSIP = LibC::GUID.new(0x762e3f66_u32, 0x336f_u16, 0x48d1_u16, StaticArray[0xbf_u8, 0x83_u8, 0x2b_u8, 0x0_u8, 0x35_u8, 0x2c_u8, 0x11_u8, 0xf0_u8])
  KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_OOB_PSIP = LibC::GUID.new(0x951727db_u32, 0xd2ce_u16, 0x4528_u16, StaticArray[0x96_u8, 0xf6_u8, 0x33_u8, 0x1_u8, 0xfa_u8, 0xbb_u8, 0x2d_u8, 0xe0_u8])
  KSDATAFORMAT_SUBTYPE_ISDB_SI = LibC::GUID.new(0x4a2eeb99_u32, 0x6458_u16, 0x4538_u16, StaticArray[0xb1_u8, 0x87_u8, 0x4_u8, 0x1_u8, 0x7c_u8, 0x41_u8, 0x41_u8, 0x3f_u8])
  KSDATAFORMAT_SUBTYPE_PBDA_TRANSPORT_RAW = LibC::GUID.new(0xd7aed42_u32, 0xcb9a_u16, 0x11db_u16, StaticArray[0x97_u8, 0x5_u8, 0x0_u8, 0x50_u8, 0x56_u8, 0xc0_u8, 0x0_u8, 0x8_u8])
  PINNAME_BDA_TRANSPORT = LibC::GUID.new(0x78216a81_u32, 0xcfa8_u16, 0x493e_u16, StaticArray[0x97_u8, 0x11_u8, 0x36_u8, 0xa6_u8, 0x1c_u8, 0x8_u8, 0xbd_u8, 0x9d_u8])
  PINNAME_BDA_ANALOG_VIDEO = LibC::GUID.new(0x5c0c8281_u32, 0x5667_u16, 0x486c_u16, StaticArray[0x84_u8, 0x82_u8, 0x63_u8, 0xe3_u8, 0x1f_u8, 0x1_u8, 0xa6_u8, 0xe9_u8])
  PINNAME_BDA_ANALOG_AUDIO = LibC::GUID.new(0xd28a580a_u32, 0x9b1f_u16, 0x4b0c_u16, StaticArray[0x9c_u8, 0x33_u8, 0x9b_u8, 0xf0_u8, 0xa8_u8, 0xea_u8, 0x63_u8, 0x6b_u8])
  PINNAME_BDA_FM_RADIO = LibC::GUID.new(0xd2855fed_u32, 0xb2d3_u16, 0x4eeb_u16, StaticArray[0x9b_u8, 0xd0_u8, 0x19_u8, 0x34_u8, 0x36_u8, 0xa2_u8, 0xf8_u8, 0x90_u8])
  PINNAME_BDA_IF_PIN = LibC::GUID.new(0x1a9d4a42_u32, 0xf3cd_u16, 0x48a1_u16, StaticArray[0x9a_u8, 0xea_u8, 0x71_u8, 0xde_u8, 0x13_u8, 0x3c_u8, 0xbe_u8, 0x14_u8])
  PINNAME_BDA_OPENCABLE_PSIP_PIN = LibC::GUID.new(0x297bb104_u32, 0xe5c9_u16, 0x4ace_u16, StaticArray[0xb1_u8, 0x23_u8, 0x95_u8, 0xc3_u8, 0xcb_u8, 0xb2_u8, 0x4d_u8, 0x4f_u8])
  KSPROPSETID_BdaEthernetFilter = LibC::GUID.new(0x71985f43_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSPROPSETID_BdaIPv4Filter = LibC::GUID.new(0x71985f44_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSPROPSETID_BdaIPv6Filter = LibC::GUID.new(0xe1785a74_u32, 0x2a23_u16, 0x4fb3_u16, StaticArray[0x92_u8, 0x45_u8, 0xa8_u8, 0xf8_u8, 0x80_u8, 0x17_u8, 0xef_u8, 0x33_u8])
  KSPROPSETID_BdaSignalStats = LibC::GUID.new(0x1347d106_u32, 0xcf3a_u16, 0x428a_u16, StaticArray[0xa5_u8, 0xcb_u8, 0xac_u8, 0xd_u8, 0x9a_u8, 0x2a_u8, 0x43_u8, 0x38_u8])
  KSMETHODSETID_BdaChangeSync = LibC::GUID.new(0xfd0a5af3_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSMETHODSETID_BdaDeviceConfiguration = LibC::GUID.new(0x71985f45_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSPROPSETID_BdaTopology = LibC::GUID.new(0xa14ee835_u32, 0xa23_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc7_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSPROPSETID_BdaPinControl = LibC::GUID.new(0xded49d5_u32, 0xa8b7_u16, 0x4d5d_u16, StaticArray[0x97_u8, 0xa1_u8, 0x12_u8, 0xb0_u8, 0xc1_u8, 0x95_u8, 0x87_u8, 0x4d_u8])
  KSEVENTSETID_BdaPinEvent = LibC::GUID.new(0x104781cd_u32, 0x50bd_u16, 0x40d5_u16, StaticArray[0x95_u8, 0xfb_u8, 0x8_u8, 0x7e_u8, 0xe_u8, 0x86_u8, 0xa5_u8, 0x91_u8])
  KSPROPSETID_BdaVoidTransform = LibC::GUID.new(0x71985f46_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSPROPSETID_BdaNullTransform = LibC::GUID.new(0xddf15b0d_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSPROPSETID_BdaFrequencyFilter = LibC::GUID.new(0x71985f47_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSEVENTSETID_BdaTunerEvent = LibC::GUID.new(0xaab59e17_u32, 0x1c9_u16, 0x4ebf_u16, StaticArray[0x93_u8, 0xf2_u8, 0xfc_u8, 0x3b_u8, 0x79_u8, 0xb4_u8, 0x6f_u8, 0x91_u8])
  KSPROPSETID_BdaLNBInfo = LibC::GUID.new(0x992cf102_u32, 0x49f9_u16, 0x4719_u16, StaticArray[0xa6_u8, 0x64_u8, 0xc4_u8, 0xf2_u8, 0x3e_u8, 0x24_u8, 0x8_u8, 0xf4_u8])
  KSPROPSETID_BdaDiseqCommand = LibC::GUID.new(0xf84e2ab0_u32, 0x3c6b_u16, 0x45e3_u16, StaticArray[0xa0_u8, 0xfc_u8, 0x86_u8, 0x69_u8, 0xd4_u8, 0xb8_u8, 0x1f_u8, 0x11_u8])
  KSEVENTSETID_BdaDiseqCEvent = LibC::GUID.new(0x8b19bbf0_u32, 0x4184_u16, 0x43ac_u16, StaticArray[0xad_u8, 0x3c_u8, 0xc_u8, 0x88_u8, 0x9b_u8, 0xe4_u8, 0xc2_u8, 0x12_u8])
  KSPROPSETID_BdaDigitalDemodulator = LibC::GUID.new(0xef30f379_u32, 0x985b_u16, 0x4d10_u16, StaticArray[0xb6_u8, 0x40_u8, 0xa7_u8, 0x9d_u8, 0x5e_u8, 0x4_u8, 0xe1_u8, 0xe0_u8])
  KSPROPSETID_BdaAutodemodulate = LibC::GUID.new(0xddf15b12_u32, 0xbd25_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0xa0_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSPROPSETID_BdaTableSection = LibC::GUID.new(0x516b99c5_u32, 0x971c_u16, 0x4aaf_u16, StaticArray[0xb3_u8, 0xf3_u8, 0xd9_u8, 0xfd_u8, 0xa8_u8, 0xa1_u8, 0x5e_u8, 0x16_u8])
  KSPROPSETID_BdaPIDFilter = LibC::GUID.new(0xd0a67d65_u32, 0x8df_u16, 0x4fec_u16, StaticArray[0x85_u8, 0x33_u8, 0xe5_u8, 0xb5_u8, 0x50_u8, 0x41_u8, 0xb_u8, 0x85_u8])
  KSPROPSETID_BdaCA = LibC::GUID.new(0xb0693766_u32, 0x5278_u16, 0x4ec6_u16, StaticArray[0xb9_u8, 0xe1_u8, 0x3c_u8, 0xe4_u8, 0x5_u8, 0x60_u8, 0xef_u8, 0x5a_u8])
  KSEVENTSETID_BdaCAEvent = LibC::GUID.new(0x488c4ccc_u32, 0xb768_u16, 0x4129_u16, StaticArray[0x8e_u8, 0xb1_u8, 0xb0_u8, 0xa_u8, 0x7_u8, 0x1f_u8, 0x90_u8, 0x68_u8])
  KSMETHODSETID_BdaDrmService = LibC::GUID.new(0xbff6b5bb_u32, 0xb0ae_u16, 0x484c_u16, StaticArray[0x9d_u8, 0xca_u8, 0x73_u8, 0x52_u8, 0x8f_u8, 0xb0_u8, 0xb4_u8, 0x6e_u8])
  KSMETHODSETID_BdaWmdrmSession = LibC::GUID.new(0x4be6fa3d_u32, 0x7cd_u16, 0x4139_u16, StaticArray[0x8b_u8, 0x80_u8, 0x8c_u8, 0x18_u8, 0xba_u8, 0x3a_u8, 0xec_u8, 0x88_u8])
  KSMETHODSETID_BdaWmdrmTuner = LibC::GUID.new(0x86d979cf_u32, 0xa8a7_u16, 0x4f94_u16, StaticArray[0xb5_u8, 0xfb_u8, 0x14_u8, 0xc0_u8, 0xac_u8, 0xa6_u8, 0x8f_u8, 0xe6_u8])
  KSMETHODSETID_BdaEventing = LibC::GUID.new(0xf99492da_u32, 0x6193_u16, 0x4eb0_u16, StaticArray[0x86_u8, 0x90_u8, 0x66_u8, 0x86_u8, 0xcb_u8, 0xff_u8, 0x71_u8, 0x3e_u8])
  KSEVENTSETID_BdaEvent = LibC::GUID.new(0xae7e55b2_u32, 0x96d7_u16, 0x4e29_u16, StaticArray[0x90_u8, 0x8f_u8, 0x62_u8, 0xf9_u8, 0x5b_u8, 0x2a_u8, 0x16_u8, 0x79_u8])
  KSMETHODSETID_BdaDebug = LibC::GUID.new(0xd4a90ec_u32, 0xc69d_u16, 0x4ee2_u16, StaticArray[0x8c_u8, 0x5a_u8, 0xfb_u8, 0x1f_u8, 0x63_u8, 0xa5_u8, 0xd_u8, 0xa1_u8])
  KSMETHODSETID_BdaTuner = LibC::GUID.new(0xb774102f_u32, 0xac07_u16, 0x478a_u16, StaticArray[0x82_u8, 0x28_u8, 0x27_u8, 0x42_u8, 0xd9_u8, 0x61_u8, 0xfa_u8, 0x7e_u8])
  KSMETHODSETID_BdaNameValueA = LibC::GUID.new(0xc24096d_u32, 0x5ff5_u16, 0x47de_u16, StaticArray[0xa8_u8, 0x56_u8, 0x6_u8, 0x2e_u8, 0x58_u8, 0x7e_u8, 0x37_u8, 0x27_u8])
  KSMETHODSETID_BdaNameValue = LibC::GUID.new(0x36e07304_u32, 0x9f0d_u16, 0x4e88_u16, StaticArray[0x91_u8, 0x18_u8, 0xac_u8, 0xb_u8, 0xa3_u8, 0x17_u8, 0xb7_u8, 0xf2_u8])
  KSMETHODSETID_BdaMux = LibC::GUID.new(0x942aafec_u32, 0x4c05_u16, 0x4c74_u16, StaticArray[0xb8_u8, 0xeb_u8, 0x87_u8, 0x6_u8, 0xc2_u8, 0xa4_u8, 0x94_u8, 0x3f_u8])
  KSMETHODSETID_BdaScanning = LibC::GUID.new(0x12eb49df_u32, 0x6249_u16, 0x47f3_u16, StaticArray[0xb1_u8, 0x90_u8, 0xe2_u8, 0x1e_u8, 0x6e_u8, 0x2f_u8, 0x8a_u8, 0x9c_u8])
  KSMETHODSETID_BdaGuideDataDeliveryService = LibC::GUID.new(0x8d9d5562_u32, 0x1589_u16, 0x417d_u16, StaticArray[0x99_u8, 0xce_u8, 0xac_u8, 0x53_u8, 0x1d_u8, 0xda_u8, 0x19_u8, 0xf9_u8])
  KSMETHODSETID_BdaConditionalAccessService = LibC::GUID.new(0x10ced3b4_u32, 0x320b_u16, 0x41bf_u16, StaticArray[0x98_u8, 0x24_u8, 0x1b_u8, 0x2e_u8, 0x68_u8, 0xe7_u8, 0x1e_u8, 0xb9_u8])
  KSMETHODSETID_BdaIsdbConditionalAccess = LibC::GUID.new(0x5e68c627_u32, 0x16c2_u16, 0x4e6c_u16, StaticArray[0xb1_u8, 0xe2_u8, 0xd0_u8, 0x1_u8, 0x70_u8, 0xcd_u8, 0xaa_u8, 0xf_u8])
  KSMETHODSETID_BdaTSSelector = LibC::GUID.new(0x1dcfafe9_u32, 0xb45e_u16, 0x41b3_u16, StaticArray[0xbb_u8, 0x2a_u8, 0x56_u8, 0x1e_u8, 0xb1_u8, 0x29_u8, 0xae_u8, 0x98_u8])
  KSMETHODSETID_BdaUserActivity = LibC::GUID.new(0xeda5c834_u32, 0x4531_u16, 0x483c_u16, StaticArray[0xbe_u8, 0xa_u8, 0x94_u8, 0xe6_u8, 0xc9_u8, 0x6f_u8, 0xf3_u8, 0x96_u8])
  KSCATEGORY_BDA_RECEIVER_COMPONENT = LibC::GUID.new(0xfd0a5af4_u32, 0xb41d_u16, 0x11d2_u16, StaticArray[0x9c_u8, 0x95_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSCATEGORY_BDA_NETWORK_TUNER = LibC::GUID.new(0x71985f48_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSCATEGORY_BDA_NETWORK_EPG = LibC::GUID.new(0x71985f49_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSCATEGORY_BDA_IP_SINK = LibC::GUID.new(0x71985f4a_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSCATEGORY_BDA_NETWORK_PROVIDER = LibC::GUID.new(0x71985f4b_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSCATEGORY_BDA_TRANSPORT_INFORMATION = LibC::GUID.new(0xa2e3074f_u32, 0x6c3d_u16, 0x11d3_u16, StaticArray[0xb6_u8, 0x53_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x49_u8, 0x8e_u8])
  KSNODE_BDA_RF_TUNER = LibC::GUID.new(0x71985f4c_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSNODE_BDA_ANALOG_DEMODULATOR = LibC::GUID.new(0x634db199_u32, 0x27dd_u16, 0x46b8_u16, StaticArray[0xac_u8, 0xfb_u8, 0xec_u8, 0xc9_u8, 0x8e_u8, 0x61_u8, 0xa2_u8, 0xad_u8])
  KSNODE_BDA_QAM_DEMODULATOR = LibC::GUID.new(0x71985f4d_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSNODE_BDA_QPSK_DEMODULATOR = LibC::GUID.new(0x6390c905_u32, 0x27c1_u16, 0x4d67_u16, StaticArray[0xbd_u8, 0xb7_u8, 0x77_u8, 0xc5_u8, 0xd_u8, 0x7_u8, 0x93_u8, 0x0_u8])
  KSNODE_BDA_8VSB_DEMODULATOR = LibC::GUID.new(0x71985f4f_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSNODE_BDA_COFDM_DEMODULATOR = LibC::GUID.new(0x2dac6e05_u32, 0xedbe_u16, 0x4b9c_u16, StaticArray[0xb3_u8, 0x87_u8, 0x1b_u8, 0x6f_u8, 0xad_u8, 0x7d_u8, 0x64_u8, 0x95_u8])
  KSNODE_BDA_8PSK_DEMODULATOR = LibC::GUID.new(0xe957a0e7_u32, 0xdd98_u16, 0x4a3c_u16, StaticArray[0x81_u8, 0xb_u8, 0x35_u8, 0x25_u8, 0x15_u8, 0x7a_u8, 0xb6_u8, 0x2e_u8])
  KSNODE_BDA_ISDB_T_DEMODULATOR = LibC::GUID.new(0xfcea3ae3_u32, 0x2cb2_u16, 0x464d_u16, StaticArray[0x8f_u8, 0x5d_u8, 0x30_u8, 0x5c_u8, 0xb_u8, 0xb7_u8, 0x78_u8, 0xa2_u8])
  KSNODE_BDA_ISDB_S_DEMODULATOR = LibC::GUID.new(0xedde230a_u32, 0x9086_u16, 0x432d_u16, StaticArray[0xb8_u8, 0xa5_u8, 0x66_u8, 0x70_u8, 0x26_u8, 0x38_u8, 0x7_u8, 0xe9_u8])
  KSNODE_BDA_OPENCABLE_POD = LibC::GUID.new(0x345812a0_u32, 0xfb7c_u16, 0x4790_u16, StaticArray[0xaa_u8, 0x7e_u8, 0xb1_u8, 0xdb_u8, 0x88_u8, 0xac_u8, 0x19_u8, 0xc9_u8])
  KSNODE_BDA_COMMON_CA_POD = LibC::GUID.new(0xd83ef8fc_u32, 0xf3b8_u16, 0x45ab_u16, StaticArray[0x8b_u8, 0x71_u8, 0xec_u8, 0xf7_u8, 0xc3_u8, 0x39_u8, 0xde_u8, 0xb4_u8])
  KSNODE_BDA_PID_FILTER = LibC::GUID.new(0xf5412789_u32, 0xb0a0_u16, 0x44e1_u16, StaticArray[0xae_u8, 0x4f_u8, 0xee_u8, 0x99_u8, 0x9b_u8, 0x1b_u8, 0x7f_u8, 0xbe_u8])
  KSNODE_BDA_IP_SINK = LibC::GUID.new(0x71985f4e_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])
  KSNODE_BDA_VIDEO_ENCODER = LibC::GUID.new(0xd98429e3_u32, 0x65c9_u16, 0x4ac4_u16, StaticArray[0x93_u8, 0xaa_u8, 0x76_u8, 0x67_u8, 0x82_u8, 0x83_u8, 0x3b_u8, 0x7a_u8])
  KSNODE_BDA_PBDA_CAS = LibC::GUID.new(0xc026869f_u32, 0x7129_u16, 0x4e71_u16, StaticArray[0x86_u8, 0x96_u8, 0xec_u8, 0x8f_u8, 0x75_u8, 0x29_u8, 0x9b_u8, 0x77_u8])
  KSNODE_BDA_PBDA_ISDBCAS = LibC::GUID.new(0xf2cf2ab3_u32, 0x5b9d_u16, 0x40ae_u16, StaticArray[0xab_u8, 0x7c_u8, 0x4e_u8, 0x7a_u8, 0xd0_u8, 0xbd_u8, 0x1c_u8, 0x52_u8])
  KSNODE_BDA_PBDA_TUNER = LibC::GUID.new(0xaa5e8286_u32, 0x593c_u16, 0x4979_u16, StaticArray[0x94_u8, 0x94_u8, 0x46_u8, 0xa2_u8, 0xa9_u8, 0xdf_u8, 0xe0_u8, 0x76_u8])
  KSNODE_BDA_PBDA_MUX = LibC::GUID.new(0xf88c7787_u32, 0x6678_u16, 0x4f4b_u16, StaticArray[0xa1_u8, 0x3e_u8, 0xda_u8, 0x9_u8, 0x86_u8, 0x1d_u8, 0x68_u8, 0x2b_u8])
  KSNODE_BDA_PBDA_DRM = LibC::GUID.new(0x9eeebd03_u32, 0xeea1_u16, 0x450f_u16, StaticArray[0x96_u8, 0xae_u8, 0x63_u8, 0x3e_u8, 0x6d_u8, 0xe6_u8, 0x3c_u8, 0xce_u8])
  KSNODE_BDA_DRI_DRM = LibC::GUID.new(0x4f95ad74_u32, 0xcefb_u16, 0x42d2_u16, StaticArray[0x94_u8, 0xa9_u8, 0x68_u8, 0xc5_u8, 0xb2_u8, 0xc1_u8, 0xaa_u8, 0xbe_u8])
  KSNODE_BDA_TS_SELECTOR = LibC::GUID.new(0x5eddf185_u32, 0xfed1_u16, 0x4f45_u16, StaticArray[0x96_u8, 0x85_u8, 0xbb_u8, 0xb7_u8, 0x3c_u8, 0x32_u8, 0x3c_u8, 0xfc_u8])
  PINNAME_IPSINK_INPUT = LibC::GUID.new(0x3fdffa70_u32, 0xac9a_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x17_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  KSDATAFORMAT_TYPE_BDA_IP = LibC::GUID.new(0xe25f7b8e_u32, 0xcccc_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x25_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  KSDATAFORMAT_SUBTYPE_BDA_IP = LibC::GUID.new(0x5a9a213c_u32, 0xdb08_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  KSDATAFORMAT_SPECIFIER_BDA_IP = LibC::GUID.new(0x6b891420_u32, 0xdb09_u16, 0x11d2_u16, StaticArray[0x8f_u8, 0x32_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  KSDATAFORMAT_TYPE_BDA_IP_CONTROL = LibC::GUID.new(0xdadd5799_u32, 0x7d5b_u16, 0x4b63_u16, StaticArray[0x80_u8, 0xfb_u8, 0xd1_u8, 0x44_u8, 0x2f_u8, 0x26_u8, 0xb6_u8, 0x21_u8])
  KSDATAFORMAT_SUBTYPE_BDA_IP_CONTROL = LibC::GUID.new(0x499856e8_u32, 0xe85b_u16, 0x48ed_u16, StaticArray[0x9b_u8, 0xea_u8, 0x41_u8, 0xd_u8, 0xd_u8, 0xd4_u8, 0xef_u8, 0x81_u8])
  PINNAME_MPE = LibC::GUID.new(0xc1b06d73_u32, 0x1dbb_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x46_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  KSDATAFORMAT_TYPE_MPE = LibC::GUID.new(0x455f176c_u32, 0x4b06_u16, 0x47ce_u16, StaticArray[0x9a_u8, 0xef_u8, 0x8c_u8, 0xae_u8, 0xf7_u8, 0x3d_u8, 0xf7_u8, 0xb5_u8])
  DIGITAL_CABLE_NETWORK_TYPE = LibC::GUID.new(0x143827ab_u32, 0xf77b_u16, 0x498d_u16, StaticArray[0x81_u8, 0xca_u8, 0x5a_u8, 0x0_u8, 0x7a_u8, 0xec_u8, 0x28_u8, 0xbf_u8])
  ANALOG_TV_NETWORK_TYPE = LibC::GUID.new(0xb820d87e_u32, 0xe0e3_u16, 0x478f_u16, StaticArray[0x8a_u8, 0x38_u8, 0x4e_u8, 0x13_u8, 0xf7_u8, 0xb3_u8, 0xdf_u8, 0x42_u8])
  ANALOG_AUXIN_NETWORK_TYPE = LibC::GUID.new(0x742ef867_u32, 0x9e1_u16, 0x40a3_u16, StaticArray[0x82_u8, 0xd3_u8, 0x96_u8, 0x69_u8, 0xba_u8, 0x35_u8, 0x32_u8, 0x5f_u8])
  ANALOG_FM_NETWORK_TYPE = LibC::GUID.new(0x7728087b_u32, 0x2bb9_u16, 0x4e30_u16, StaticArray[0x80_u8, 0x78_u8, 0x44_u8, 0x94_u8, 0x76_u8, 0xe5_u8, 0x9d_u8, 0xbb_u8])
  ISDB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x95037f6f_u32, 0x3ac7_u16, 0x4452_u16, StaticArray[0xb6_u8, 0xc4_u8, 0x45_u8, 0xa9_u8, 0xce_u8, 0x92_u8, 0x92_u8, 0xa2_u8])
  ISDB_T_NETWORK_TYPE = LibC::GUID.new(0xfc3855a6_u32, 0xc901_u16, 0x4f2e_u16, StaticArray[0xab_u8, 0xa8_u8, 0x90_u8, 0x81_u8, 0x5a_u8, 0xfc_u8, 0x6c_u8, 0x83_u8])
  ISDB_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xb0a4e6a0_u32, 0x6a1a_u16, 0x4b83_u16, StaticArray[0xbb_u8, 0x5b_u8, 0x90_u8, 0x3e_u8, 0x1d_u8, 0x90_u8, 0xe6_u8, 0xb6_u8])
  ISDB_S_NETWORK_TYPE = LibC::GUID.new(0xa1e78202_u32, 0x1459_u16, 0x41b1_u16, StaticArray[0x9c_u8, 0xa9_u8, 0x2a_u8, 0x92_u8, 0x58_u8, 0x7a_u8, 0x42_u8, 0xcc_u8])
  ISDB_CABLE_TV_NETWORK_TYPE = LibC::GUID.new(0xc974ddb5_u32, 0x41fe_u16, 0x4b25_u16, StaticArray[0x97_u8, 0x41_u8, 0x92_u8, 0xf0_u8, 0x49_u8, 0xf1_u8, 0xd5_u8, 0xd1_u8])
  DIRECT_TV_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0x93b66fb5_u32, 0x93d4_u16, 0x4323_u16, StaticArray[0x92_u8, 0x1c_u8, 0xc1_u8, 0xf5_u8, 0x2d_u8, 0xf6_u8, 0x1d_u8, 0x3f_u8])
  ECHOSTAR_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xc4f6b31b_u32, 0xc6bf_u16, 0x4759_u16, StaticArray[0x88_u8, 0x6f_u8, 0xa7_u8, 0x38_u8, 0x6d_u8, 0xca_u8, 0x27_u8, 0xa0_u8])
  ATSC_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0xdad2fdd_u32, 0x5fd7_u16, 0x11d3_u16, StaticArray[0x8f_u8, 0x50_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe2_u8])
  DVB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x216c62df_u32, 0x6d7f_u16, 0x4e9a_u16, StaticArray[0x85_u8, 0x71_u8, 0x5_u8, 0xf1_u8, 0x4e_u8, 0xdb_u8, 0x76_u8, 0x6a_u8])
  BSKYB_TERRESTRIAL_TV_NETWORK_TYPE = LibC::GUID.new(0x9e9e46c6_u32, 0x3aba_u16, 0x4f08_u16, StaticArray[0xad_u8, 0xe_u8, 0xcc_u8, 0x5a_u8, 0xc8_u8, 0x14_u8, 0x8c_u8, 0x2b_u8])
  DVB_SATELLITE_TV_NETWORK_TYPE = LibC::GUID.new(0xfa4b375a_u32, 0x45b4_u16, 0x4d45_u16, StaticArray[0x84_u8, 0x40_u8, 0x26_u8, 0x39_u8, 0x57_u8, 0xb1_u8, 0x16_u8, 0x23_u8])
  DVB_CABLE_TV_NETWORK_TYPE = LibC::GUID.new(0xdc0c0fe7_u32, 0x485_u16, 0x4266_u16, StaticArray[0xb9_u8, 0x3f_u8, 0x68_u8, 0xfb_u8, 0xf8_u8, 0xe_u8, 0xd8_u8, 0x34_u8])
  BDA_DEBUG_DATA_AVAILABLE = LibC::GUID.new(0x69c24f54_u32, 0x9983_u16, 0x497e_u16, StaticArray[0xb4_u8, 0x15_u8, 0x28_u8, 0x2b_u8, 0xe4_u8, 0xc5_u8, 0x55_u8, 0xfb_u8])
  BDA_DEBUG_DATA_TYPE_STRING = LibC::GUID.new(0xa806e767_u32, 0xde5c_u16, 0x430c_u16, StaticArray[0x80_u8, 0xbf_u8, 0xa2_u8, 0x1e_u8, 0xbe_u8, 0x6_u8, 0xc7_u8, 0x48_u8])
  EVENTID_BDA_IsdbCASResponse = LibC::GUID.new(0xd4cb1966_u32, 0x41bc_u16, 0x4ced_u16, StaticArray[0x9a_u8, 0x20_u8, 0xfd_u8, 0xce_u8, 0xac_u8, 0x78_u8, 0xf7_u8, 0xd_u8])
  EVENTID_BDA_CASRequestTuner = LibC::GUID.new(0xcf39a9d8_u32, 0xf5d3_u16, 0x4685_u16, StaticArray[0xbe_u8, 0x57_u8, 0xed_u8, 0x81_u8, 0xdb_u8, 0xa4_u8, 0x6b_u8, 0x27_u8])
  EVENTID_BDA_CASReleaseTuner = LibC::GUID.new(0x20c1a16b_u32, 0x441f_u16, 0x49a5_u16, StaticArray[0xbb_u8, 0x5c_u8, 0xe9_u8, 0xa0_u8, 0x44_u8, 0x95_u8, 0xc6_u8, 0xc1_u8])
  EVENTID_BDA_CASOpenMMI = LibC::GUID.new(0x85dac915_u32, 0xe593_u16, 0x410d_u16, StaticArray[0x84_u8, 0x71_u8, 0xd6_u8, 0x81_u8, 0x21_u8, 0x5_u8, 0xf2_u8, 0x8e_u8])
  EVENTID_BDA_CASCloseMMI = LibC::GUID.new(0x5d0f550f_u32, 0xde2e_u16, 0x479d_u16, StaticArray[0x83_u8, 0x45_u8, 0xec_u8, 0xe_u8, 0x95_u8, 0x57_u8, 0xe8_u8, 0xa2_u8])
  EVENTID_BDA_CASBroadcastMMI = LibC::GUID.new(0x676876f0_u32, 0x1132_u16, 0x404c_u16, StaticArray[0xa7_u8, 0xca_u8, 0xe7_u8, 0x20_u8, 0x69_u8, 0xa9_u8, 0xd5_u8, 0x4f_u8])
  EVENTID_BDA_TunerSignalLock = LibC::GUID.new(0x1872e740_u32, 0xf573_u16, 0x429b_u16, StaticArray[0xa0_u8, 0xe_u8, 0xd9_u8, 0xc1_u8, 0xe4_u8, 0x8_u8, 0xaf_u8, 0x9_u8])
  EVENTID_BDA_TunerNoSignal = LibC::GUID.new(0xe29b382b_u32, 0x1edd_u16, 0x4930_u16, StaticArray[0xbc_u8, 0x46_u8, 0x68_u8, 0x2f_u8, 0xd7_u8, 0x2d_u8, 0x2d_u8, 0xfb_u8])
  EVENTID_BDA_GPNVValueUpdate = LibC::GUID.new(0xff75c68c_u32, 0xf416_u16, 0x4e7e_u16, StaticArray[0xbf_u8, 0x17_u8, 0x6d_u8, 0x55_u8, 0xc5_u8, 0xdf_u8, 0x15_u8, 0x75_u8])
  EVENTID_BDA_UpdateDrmStatus = LibC::GUID.new(0x65a6f681_u32, 0x1462_u16, 0x473b_u16, StaticArray[0x88_u8, 0xce_u8, 0xcb_u8, 0x73_u8, 0x14_u8, 0x27_u8, 0xbd_u8, 0xb5_u8])
  EVENTID_BDA_UpdateScanState = LibC::GUID.new(0x55702b50_u32, 0x7b49_u16, 0x42b8_u16, StaticArray[0xa8_u8, 0x2f_u8, 0x4a_u8, 0xfb_u8, 0x69_u8, 0x1b_u8, 0x6_u8, 0x28_u8])
  EVENTID_BDA_GuideDataAvailable = LibC::GUID.new(0x98db717a_u32, 0x478a_u16, 0x4cd4_u16, StaticArray[0x92_u8, 0xd0_u8, 0x95_u8, 0xf6_u8, 0x6b_u8, 0x89_u8, 0xe5_u8, 0xb1_u8])
  EVENTID_BDA_GuideServiceInformationUpdated = LibC::GUID.new(0xa1c3ea2b_u32, 0x175f_u16, 0x4458_u16, StaticArray[0xb7_u8, 0x35_u8, 0x50_u8, 0x7d_u8, 0x22_u8, 0xdb_u8, 0x23_u8, 0xa6_u8])
  EVENTID_BDA_GuideDataError = LibC::GUID.new(0xac33c448_u32, 0x6f73_u16, 0x4fd7_u16, StaticArray[0xb3_u8, 0x41_u8, 0x59_u8, 0x4c_u8, 0x36_u8, 0xd_u8, 0x8d_u8, 0x74_u8])
  EVENTID_BDA_DiseqCResponseAvailable = LibC::GUID.new(0xefa628f8_u32, 0x1f2c_u16, 0x4b67_u16, StaticArray[0x9e_u8, 0xa5_u8, 0xac_u8, 0xf6_u8, 0xfa_u8, 0x9a_u8, 0x1f_u8, 0x36_u8])
  EVENTID_BDA_LbigsOpenConnection = LibC::GUID.new(0x356207b2_u32, 0x6f31_u16, 0x4eb0_u16, StaticArray[0xa2_u8, 0x71_u8, 0xb3_u8, 0xfa_u8, 0x6b_u8, 0xb7_u8, 0x68_u8, 0xf_u8])
  EVENTID_BDA_LbigsSendData = LibC::GUID.new(0x1123277b_u32, 0xf1c6_u16, 0x4154_u16, StaticArray[0x8b_u8, 0xd_u8, 0x48_u8, 0xe6_u8, 0x15_u8, 0x70_u8, 0x59_u8, 0xaa_u8])
  EVENTID_BDA_LbigsCloseConnectionHandle = LibC::GUID.new(0xc2f08b99_u32, 0x65ef_u16, 0x4314_u16, StaticArray[0x96_u8, 0x71_u8, 0xe9_u8, 0x9d_u8, 0x4c_u8, 0xce_u8, 0xb_u8, 0xae_u8])
  EVENTID_BDA_EncoderSignalLock = LibC::GUID.new(0x5ec90eb9_u32, 0x39fa_u16, 0x4cfc_u16, StaticArray[0xb9_u8, 0x3f_u8, 0x0_u8, 0xbb_u8, 0x11_u8, 0x7_u8, 0x7f_u8, 0x5e_u8])
  EVENTID_BDA_FdcStatus = LibC::GUID.new(0x5f25366_u32, 0xd0eb_u16, 0x43d2_u16, StaticArray[0xbc_u8, 0x3c_u8, 0x68_u8, 0x2b_u8, 0x86_u8, 0x3d_u8, 0xf1_u8, 0x42_u8])
  EVENTID_BDA_FdcTableSection = LibC::GUID.new(0x6a0cd757_u32, 0x4ce3_u16, 0x4e5b_u16, StaticArray[0x94_u8, 0x44_u8, 0x71_u8, 0x87_u8, 0xb8_u8, 0x71_u8, 0x52_u8, 0xc5_u8])
  EVENTID_BDA_TransprtStreamSelectorInfo = LibC::GUID.new(0xc40f9f85_u32, 0x9d0_u16, 0x489c_u16, StaticArray[0x9e_u8, 0x9c_u8, 0xa_u8, 0xbb_u8, 0xb5_u8, 0x69_u8, 0x51_u8, 0xb0_u8])
  EVENTID_BDA_RatingPinReset = LibC::GUID.new(0xc6e048c0_u32, 0xc574_u16, 0x4c26_u16, StaticArray[0xbc_u8, 0xda_u8, 0x2f_u8, 0x4d_u8, 0x35_u8, 0xeb_u8, 0x5e_u8, 0x85_u8])
  PBDA_ALWAYS_TUNE_IN_MUX = LibC::GUID.new(0x1e1d7141_u32, 0x583f_u16, 0x4ac2_u16, StaticArray[0xb0_u8, 0x19_u8, 0x1f_u8, 0x43_u8, 0xe_u8, 0xda_u8, 0xf_u8, 0x4c_u8])
  BDANETWORKTYPE_ATSC = LibC::GUID.new(0x71985f51_u32, 0x1ca1_u16, 0x11d3_u16, StaticArray[0x9c_u8, 0xc8_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0x79_u8, 0x71_u8, 0xe0_u8])

  alias AMGETERRORTEXTPROCA = Proc(HRESULT, PSTR, UInt32, LibC::BOOL)
  alias AMGETERRORTEXTPROCW = Proc(HRESULT, LibC::LPWSTR, UInt32, LibC::BOOL)
  alias PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT = Proc(DXVA2_VideoDesc*, UInt32*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS = Proc(DXVA2_VideoDesc*, UInt32, D3DFORMAT*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORCAPS = Proc(DXVA2_VideoDesc*, D3DFORMAT, DXVA2_VideoProcessorCaps*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32*, HRESULT)
  alias PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32, D3DFORMAT*, HRESULT)
  alias PDXVA2SW_GETPROCAMPRANGE = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32, DXVA2_ValueRange*, HRESULT)
  alias PDXVA2SW_GETFILTERPROPERTYRANGE = Proc(DXVA2_VideoDesc*, D3DFORMAT, UInt32, DXVA2_ValueRange*, HRESULT)
  alias PDXVA2SW_CREATEVIDEOPROCESSDEVICE = Proc(IDirect3DDevice9, DXVA2_VideoDesc*, D3DFORMAT, UInt32, LibC::HANDLE*, HRESULT)
  alias PDXVA2SW_DESTROYVIDEOPROCESSDEVICE = Proc(LibC::HANDLE, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSBEGINFRAME = Proc(LibC::HANDLE, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSENDFRAME = Proc(LibC::HANDLE, LibC::HANDLE*, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSSETRENDERTARGET = Proc(LibC::HANDLE, IDirect3DSurface9, HRESULT)
  alias PDXVA2SW_VIDEOPROCESSBLT = Proc(LibC::HANDLE, DXVA2_VIDEOPROCESSBLT*, HRESULT)


  enum OA_BOOL : Int32
    OATRUE = -1
    OAFALSE = 0
  end

  enum MPEG2VIDEOINFO_FLAGS : UInt32
    AMMPEG2_DoPanScan = 1
    AMMPEG2_DVDLine21Field1 = 2
    AMMPEG2_DVDLine21Field2 = 4
    AMMPEG2_SourceIsLetterboxed = 8
    AMMPEG2_FilmCameraMode = 16
    AMMPEG2_LetterboxAnalogOut = 32
    AMMPEG2_DSS_UserData = 64
    AMMPEG2_DVB_UserData = 128
    AMMPEG2_27MhzTimebase = 256
    AMMPEG2_WidescreenAnalogOut = 512
  end

  enum MPEGLAYER3WAVEFORMAT_FLAGS : UInt32
    MPEGLAYER3_FLAG_PADDING_ISO = 0
    MPEGLAYER3_FLAG_PADDING_ON = 1
    MPEGLAYER3_FLAG_PADDING_OFF = 2
  end

  enum AMVP_SELECT_FORMAT_BY : Int32
    AMVP_DO_NOT_CARE = 0
    AMVP_BEST_BANDWIDTH = 1
    AMVP_INPUT_SAME_AS_OUTPUT = 2
  end

  enum AMVP_MODE : Int32
    AMVP_MODE_WEAVE = 0
    AMVP_MODE_BOBINTERLEAVED = 1
    AMVP_MODE_BOBNONINTERLEAVED = 2
    AMVP_MODE_SKIPEVEN = 3
    AMVP_MODE_SKIPODD = 4
  end

  enum PIN_DIRECTION : Int32
    PINDIR_INPUT = 0
    PINDIR_OUTPUT = 1
  end

  enum FILTER_STATE : Int32
    State_Stopped = 0
    State_Paused = 1
    State_Running = 2
  end

  enum AM_SAMPLE_PROPERTY_FLAGS : Int32
    AM_SAMPLE_SPLICEPOINT = 1
    AM_SAMPLE_PREROLL = 2
    AM_SAMPLE_DATADISCONTINUITY = 4
    AM_SAMPLE_TYPECHANGED = 8
    AM_SAMPLE_TIMEVALID = 16
    AM_SAMPLE_TIMEDISCONTINUITY = 64
    AM_SAMPLE_FLUSH_ON_PAUSE = 128
    AM_SAMPLE_STOPVALID = 256
    AM_SAMPLE_ENDOFSTREAM = 512
    AM_STREAM_MEDIA = 0
    AM_STREAM_CONTROL = 1
  end

  enum AM_SEEKING_SeekingFlags : Int32
    AM_SEEKING_NoPositioning = 0
    AM_SEEKING_AbsolutePositioning = 1
    AM_SEEKING_RelativePositioning = 2
    AM_SEEKING_IncrementalPositioning = 3
    AM_SEEKING_PositioningBitsMask = 3
    AM_SEEKING_SeekToKeyFrame = 4
    AM_SEEKING_ReturnTime = 8
    AM_SEEKING_Segment = 16
    AM_SEEKING_NoFlush = 32
  end

  enum AM_SEEKING_SEEKING_CAPABILITIES : Int32
    AM_SEEKING_CanSeekAbsolute = 1
    AM_SEEKING_CanSeekForwards = 2
    AM_SEEKING_CanSeekBackwards = 4
    AM_SEEKING_CanGetCurrentPos = 8
    AM_SEEKING_CanGetStopPos = 16
    AM_SEEKING_CanGetDuration = 32
    AM_SEEKING_CanPlayBackwards = 64
    AM_SEEKING_CanDoSegments = 128
    AM_SEEKING_Source = 256
  end

  enum AM_MEDIAEVENT_FLAGS : Int32
    AM_MEDIAEVENT_NONOTIFY = 1
  end

  enum IFILTERMAPPER_MERIT : Int32
    MERIT_PREFERRED = 8388608
    MERIT_NORMAL = 6291456
    MERIT_UNLIKELY = 4194304
    MERIT_DO_NOT_USE = 2097152
    MERIT_SW_COMPRESSOR = 1048576
    MERIT_HW_COMPRESSOR = 1048656
  end

  enum REG_PINFLAG : UInt32
    REG_PINFLAG_B_ZERO = 1
    REG_PINFLAG_B_RENDERER = 2
    REG_PINFLAG_B_MANY = 4
    REG_PINFLAG_B_OUTPUT = 8
  end

  enum QualityMessageType : Int32
    Famine = 0
    Flood = 1
  end

  enum COLORKEY_TYPE : Int32
    CK_NOCOLORKEY = 0
    CK_INDEX = 1
    CK_RGB = 2
  end

  enum ADVISE_TYPE : UInt32
    ADVISE_NONE = 0
    ADVISE_CLIPPING = 1
    ADVISE_PALETTE = 2
    ADVISE_COLORKEY = 4
    ADVISE_POSITION = 8
    ADVISE_DISPLAY_CHANGE = 16
  end

  enum AM_FILESINK_FLAGS : Int32
    AM_FILE_OVERWRITE = 1
  end

  enum AM_RENSDEREXFLAGS : Int32
    AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1
  end

  enum AM_STREAM_INFO_FLAGS : Int32
    AM_STREAM_INFO_START_DEFINED = 1
    AM_STREAM_INFO_STOP_DEFINED = 2
    AM_STREAM_INFO_DISCARDING = 4
    AM_STREAM_INFO_STOP_SEND_EXTRA = 16
  end

  enum InterleavingMode : Int32
    INTERLEAVE_NONE = 0
    INTERLEAVE_CAPTURE = 1
    INTERLEAVE_FULL = 2
    INTERLEAVE_NONE_BUFFERED = 3
  end

  enum CompressionCaps : Int32
    CompressionCaps_CanQuality = 1
    CompressionCaps_CanCrunch = 2
    CompressionCaps_CanKeyFrame = 4
    CompressionCaps_CanBFrame = 8
    CompressionCaps_CanWindow = 16
  end

  enum VfwCaptureDialogs : Int32
    VfwCaptureDialog_Source = 1
    VfwCaptureDialog_Format = 2
    VfwCaptureDialog_Display = 4
  end

  enum VfwCompressDialogs : Int32
    VfwCompressDialog_Config = 1
    VfwCompressDialog_About = 2
    VfwCompressDialog_QueryConfig = 4
    VfwCompressDialog_QueryAbout = 8
  end

  enum AnalogVideoStandard : Int32
    AnalogVideo_None = 0
    AnalogVideo_NTSC_M = 1
    AnalogVideo_NTSC_M_J = 2
    AnalogVideo_NTSC_433 = 4
    AnalogVideo_PAL_B = 16
    AnalogVideo_PAL_D = 32
    AnalogVideo_PAL_G = 64
    AnalogVideo_PAL_H = 128
    AnalogVideo_PAL_I = 256
    AnalogVideo_PAL_M = 512
    AnalogVideo_PAL_N = 1024
    AnalogVideo_PAL_60 = 2048
    AnalogVideo_SECAM_B = 4096
    AnalogVideo_SECAM_D = 8192
    AnalogVideo_SECAM_G = 16384
    AnalogVideo_SECAM_H = 32768
    AnalogVideo_SECAM_K = 65536
    AnalogVideo_SECAM_K1 = 131072
    AnalogVideo_SECAM_L = 262144
    AnalogVideo_SECAM_L1 = 524288
    AnalogVideo_PAL_N_COMBO = 1048576
    AnalogVideoMask_MCE_NTSC = 1052167
    AnalogVideoMask_MCE_PAL = 496
    AnalogVideoMask_MCE_SECAM = 1044480
  end

  enum TunerInputType : Int32
    TunerInputCable = 0
    TunerInputAntenna = 1
  end

  enum VideoCopyProtectionType : Int32
    VideoCopyProtectionMacrovisionBasic = 0
    VideoCopyProtectionMacrovisionCBI = 1
  end

  enum PhysicalConnectorType : Int32
    PhysConn_Video_Tuner = 1
    PhysConn_Video_Composite = 2
    PhysConn_Video_SVideo = 3
    PhysConn_Video_RGB = 4
    PhysConn_Video_YRYBY = 5
    PhysConn_Video_SerialDigital = 6
    PhysConn_Video_ParallelDigital = 7
    PhysConn_Video_SCSI = 8
    PhysConn_Video_AUX = 9
    PhysConn_Video_1394 = 10
    PhysConn_Video_USB = 11
    PhysConn_Video_VideoDecoder = 12
    PhysConn_Video_VideoEncoder = 13
    PhysConn_Video_SCART = 14
    PhysConn_Video_Black = 15
    PhysConn_Audio_Tuner = 4096
    PhysConn_Audio_Line = 4097
    PhysConn_Audio_Mic = 4098
    PhysConn_Audio_AESDigital = 4099
    PhysConn_Audio_SPDIFDigital = 4100
    PhysConn_Audio_SCSI = 4101
    PhysConn_Audio_AUX = 4102
    PhysConn_Audio_1394 = 4103
    PhysConn_Audio_USB = 4104
    PhysConn_Audio_AudioDecoder = 4105
  end

  enum VideoProcAmpProperty : Int32
    VideoProcAmp_Brightness = 0
    VideoProcAmp_Contrast = 1
    VideoProcAmp_Hue = 2
    VideoProcAmp_Saturation = 3
    VideoProcAmp_Sharpness = 4
    VideoProcAmp_Gamma = 5
    VideoProcAmp_ColorEnable = 6
    VideoProcAmp_WhiteBalance = 7
    VideoProcAmp_BacklightCompensation = 8
    VideoProcAmp_Gain = 9
  end

  enum VideoProcAmpFlags : Int32
    VideoProcAmp_Flags_Auto = 1
    VideoProcAmp_Flags_Manual = 2
  end

  enum CameraControlProperty : Int32
    CameraControl_Pan = 0
    CameraControl_Tilt = 1
    CameraControl_Roll = 2
    CameraControl_Zoom = 3
    CameraControl_Exposure = 4
    CameraControl_Iris = 5
    CameraControl_Focus = 6
  end

  enum CameraControlFlags : Int32
    CameraControl_Flags_Auto = 1
    CameraControl_Flags_Manual = 2
  end

  enum VideoControlFlags : Int32
    VideoControlFlag_FlipHorizontal = 1
    VideoControlFlag_FlipVertical = 2
    VideoControlFlag_ExternalTriggerEnable = 4
    VideoControlFlag_Trigger = 8
  end

  enum AMTunerSubChannel : Int32
    AMTUNER_SUBCHAN_NO_TUNE = -2
    AMTUNER_SUBCHAN_DEFAULT = -1
  end

  enum AMTunerSignalStrength : Int32
    AMTUNER_HASNOSIGNALSTRENGTH = -1
    AMTUNER_NOSIGNAL = 0
    AMTUNER_SIGNALPRESENT = 1
  end

  enum AMTunerModeType : Int32
    AMTUNER_MODE_DEFAULT = 0
    AMTUNER_MODE_TV = 1
    AMTUNER_MODE_FM_RADIO = 2
    AMTUNER_MODE_AM_RADIO = 4
    AMTUNER_MODE_DSS = 8
  end

  enum AMTunerEventType : Int32
    AMTUNER_EVENT_CHANGED = 1
  end

  enum TVAudioMode : Int32
    AMTVAUDIO_MODE_MONO = 1
    AMTVAUDIO_MODE_STEREO = 2
    AMTVAUDIO_MODE_LANG_A = 16
    AMTVAUDIO_MODE_LANG_B = 32
    AMTVAUDIO_MODE_LANG_C = 64
    AMTVAUDIO_PRESET_STEREO = 512
    AMTVAUDIO_PRESET_LANG_A = 4096
    AMTVAUDIO_PRESET_LANG_B = 8192
    AMTVAUDIO_PRESET_LANG_C = 16384
  end

  enum AMTVAudioEventType : Int32
    AMTVAUDIO_EVENT_CHANGED = 1
  end

  enum AMPROPERTY_PIN : Int32
    AMPROPERTY_PIN_CATEGORY = 0
    AMPROPERTY_PIN_MEDIUM = 1
  end

  enum AMSTREAMSELECTINFOFLAGS : Int32
    AMSTREAMSELECTINFO_ENABLED = 1
    AMSTREAMSELECTINFO_EXCLUSIVE = 2
  end

  enum AMSTREAMSELECTENABLEFLAGS : Int32
    AMSTREAMSELECTENABLE_ENABLE = 1
    AMSTREAMSELECTENABLE_ENABLEALL = 2
  end

  enum AMRESCTL_RESERVEFLAGS : Int32
    AMRESCTL_RESERVEFLAGS_RESERVE = 0
    AMRESCTL_RESERVEFLAGS_UNRESERVE = 1
  end

  enum AM_FILTER_MISC_FLAGS : Int32
    AM_FILTER_MISC_FLAGS_IS_RENDERER = 1
    AM_FILTER_MISC_FLAGS_IS_SOURCE = 2
  end

  enum DECIMATION_USAGE : Int32
    DECIMATION_LEGACY = 0
    DECIMATION_USE_DECODER_ONLY = 1
    DECIMATION_USE_VIDEOPORT_ONLY = 2
    DECIMATION_USE_OVERLAY_ONLY = 3
    DECIMATION_DEFAULT = 4
  end

  enum AM_PUSHSOURCE_FLAGS : Int32
    AM_PUSHSOURCECAPS_INTERNAL_RM = 1
    AM_PUSHSOURCECAPS_NOT_LIVE = 2
    AM_PUSHSOURCECAPS_PRIVATE_CLOCK = 4
    AM_PUSHSOURCEREQS_USE_STREAM_CLOCK = 65536
    AM_PUSHSOURCEREQS_USE_CLOCK_CHAIN = 131072
  end

  enum DVENCODERRESOLUTION : Int32
    DVENCODERRESOLUTION_720x480 = 2012
    DVENCODERRESOLUTION_360x240 = 2013
    DVENCODERRESOLUTION_180x120 = 2014
    DVENCODERRESOLUTION_88x60 = 2015
  end

  enum DVENCODERVIDEOFORMAT : Int32
    DVENCODERVIDEOFORMAT_NTSC = 2000
    DVENCODERVIDEOFORMAT_PAL = 2001
  end

  enum DVENCODERFORMAT : Int32
    DVENCODERFORMAT_DVSD = 2007
    DVENCODERFORMAT_DVHD = 2008
    DVENCODERFORMAT_DVSL = 2009
  end

  enum DVDECODERRESOLUTION : Int32
    DVDECODERRESOLUTION_720x480 = 1000
    DVDECODERRESOLUTION_360x240 = 1001
    DVDECODERRESOLUTION_180x120 = 1002
    DVDECODERRESOLUTION_88x60 = 1003
  end

  enum DVRESOLUTION : Int32
    DVRESOLUTION_FULL = 1000
    DVRESOLUTION_HALF = 1001
    DVRESOLUTION_QUARTER = 1002
    DVRESOLUTION_DC = 1003
  end

  enum AM_AUDIO_RENDERER_STAT_PARAM : Int32
    AM_AUDREND_STAT_PARAM_BREAK_COUNT = 1
    AM_AUDREND_STAT_PARAM_SLAVE_MODE = 2
    AM_AUDREND_STAT_PARAM_SILENCE_DUR = 3
    AM_AUDREND_STAT_PARAM_LAST_BUFFER_DUR = 4
    AM_AUDREND_STAT_PARAM_DISCONTINUITIES = 5
    AM_AUDREND_STAT_PARAM_SLAVE_RATE = 6
    AM_AUDREND_STAT_PARAM_SLAVE_DROPWRITE_DUR = 7
    AM_AUDREND_STAT_PARAM_SLAVE_HIGHLOWERROR = 8
    AM_AUDREND_STAT_PARAM_SLAVE_LASTHIGHLOWERROR = 9
    AM_AUDREND_STAT_PARAM_SLAVE_ACCUMERROR = 10
    AM_AUDREND_STAT_PARAM_BUFFERFULLNESS = 11
    AM_AUDREND_STAT_PARAM_JITTER = 12
  end

  enum AM_INTF_SEARCH_FLAGS : Int32
    AM_INTF_SEARCH_INPUT_PIN = 1
    AM_INTF_SEARCH_OUTPUT_PIN = 2
    AM_INTF_SEARCH_FILTER = 4
  end

  enum AMOVERLAYFX : Int32
    AMOVERFX_NOFX = 0
    AMOVERFX_MIRRORLEFTRIGHT = 2
    AMOVERFX_MIRRORUPDOWN = 4
    AMOVERFX_DEINTERLACE = 8
  end

  enum AM_PIN_FLOW_CONTROL_BLOCK_FLAGS : Int32
    AM_PIN_FLOW_CONTROL_BLOCK = 1
  end

  enum AM_GRAPH_CONFIG_RECONNECT_FLAGS : Int32
    AM_GRAPH_CONFIG_RECONNECT_DIRECTCONNECT = 1
    AM_GRAPH_CONFIG_RECONNECT_CACHE_REMOVED_FILTERS = 2
    AM_GRAPH_CONFIG_RECONNECT_USE_ONLY_CACHED_FILTERS = 4
  end

  enum REM_FILTER_FLAGS : Int32
    REMFILTERF_LEAVECONNECTED = 1
  end

  enum AM_FILTER_FLAGS : Int32
    AM_FILTER_FLAGS_REMOVABLE = 1
  end

  enum VMRPresentationFlags : Int32
    VMRSample_SyncPoint = 1
    VMRSample_Preroll = 2
    VMRSample_Discontinuity = 4
    VMRSample_TimeValid = 8
    VMRSample_SrcDstRectsValid = 16
  end

  enum VMRSurfaceAllocationFlags : Int32
    AMAP_PIXELFORMAT_VALID = 1
    AMAP_3D_TARGET = 2
    AMAP_ALLOW_SYSMEM = 4
    AMAP_FORCE_SYSMEM = 8
    AMAP_DIRECTED_FLIP = 16
    AMAP_DXVA_TARGET = 32
  end

  enum VMR_ASPECT_RATIO_MODE : Int32
    VMR_ARMODE_NONE = 0
    VMR_ARMODE_LETTER_BOX = 1
  end

  enum VMRMixerPrefs : Int32
    MixerPref_NoDecimation = 1
    MixerPref_DecimateOutput = 2
    MixerPref_ARAdjustXorY = 4
    MixerPref_DecimationReserved = 8
    MixerPref_DecimateMask = 15
    MixerPref_BiLinearFiltering = 16
    MixerPref_PointFiltering = 32
    MixerPref_FilteringMask = 240
    MixerPref_RenderTargetRGB = 256
    MixerPref_RenderTargetYUV = 4096
    MixerPref_RenderTargetYUV420 = 512
    MixerPref_RenderTargetYUV422 = 1024
    MixerPref_RenderTargetYUV444 = 2048
    MixerPref_RenderTargetReserved = 57344
    MixerPref_RenderTargetMask = 65280
    MixerPref_DynamicSwitchToBOB = 65536
    MixerPref_DynamicDecimateBy2 = 131072
    MixerPref_DynamicReserved = 786432
    MixerPref_DynamicMask = 983040
  end

  enum VMRRenderPrefs : Int32
    RenderPrefs_RestrictToInitialMonitor = 0
    RenderPrefs_ForceOffscreen = 1
    RenderPrefs_ForceOverlays = 2
    RenderPrefs_AllowOverlays = 0
    RenderPrefs_AllowOffscreen = 0
    RenderPrefs_DoNotRenderColorKeyAndBorder = 8
    RenderPrefs_Reserved = 16
    RenderPrefs_PreferAGPMemWhenMixing = 32
    RenderPrefs_Mask = 63
  end

  enum VMRMode : Int32
    VMRMode_Windowed = 1
    VMRMode_Windowless = 2
    VMRMode_Renderless = 4
    VMRMode_Mask = 7
  end

  enum STREAMIF_CONSTANTS : Int32
    MAX_NUMBER_OF_STREAMS = 16
  end

  enum VMRDeinterlacePrefs : Int32
    DeinterlacePref_NextBest = 1
    DeinterlacePref_BOB = 2
    DeinterlacePref_Weave = 4
    DeinterlacePref_Mask = 7
  end

  enum VMRDeinterlaceTech : Int32
    DeinterlaceTech_Unknown = 0
    DeinterlaceTech_BOBLineReplicate = 1
    DeinterlaceTech_BOBVerticalStretch = 2
    DeinterlaceTech_MedianFiltering = 4
    DeinterlaceTech_EdgeFiltering = 16
    DeinterlaceTech_FieldAdaptive = 32
    DeinterlaceTech_PixelAdaptive = 64
    DeinterlaceTech_MotionVectorSteered = 128
  end

  enum DVD_DOMAIN : Int32
    DVD_DOMAIN_FirstPlay = 1
    DVD_DOMAIN_VideoManagerMenu = 2
    DVD_DOMAIN_VideoTitleSetMenu = 3
    DVD_DOMAIN_Title = 4
    DVD_DOMAIN_Stop = 5
  end

  enum DVD_MENU_ID : Int32
    DVD_MENU_Title = 2
    DVD_MENU_Root = 3
    DVD_MENU_Subpicture = 4
    DVD_MENU_Audio = 5
    DVD_MENU_Angle = 6
    DVD_MENU_Chapter = 7
  end

  enum DVD_DISC_SIDE : Int32
    DVD_SIDE_A = 1
    DVD_SIDE_B = 2
  end

  enum DVD_PREFERRED_DISPLAY_MODE : Int32
    DISPLAY_CONTENT_DEFAULT = 0
    DISPLAY_16x9 = 1
    DISPLAY_4x3_PANSCAN_PREFERRED = 2
    DISPLAY_4x3_LETTERBOX_PREFERRED = 3
  end

  enum DVD_FRAMERATE : Int32
    DVD_FPS_25 = 1
    DVD_FPS_30NonDrop = 3
  end

  enum DVD_NavCmdType : Int32
    DVD_NavCmdType_Pre = 1
    DVD_NavCmdType_Post = 2
    DVD_NavCmdType_Cell = 3
    DVD_NavCmdType_Button = 4
  end

  enum DVD_TIMECODE_FLAGS : Int32
    DVD_TC_FLAG_25fps = 1
    DVD_TC_FLAG_30fps = 2
    DVD_TC_FLAG_DropFrame = 4
    DVD_TC_FLAG_Interpolated = 8
  end

  enum VALID_UOP_FLAG : Int32
    UOP_FLAG_Play_Title_Or_AtTime = 1
    UOP_FLAG_Play_Chapter = 2
    UOP_FLAG_Play_Title = 4
    UOP_FLAG_Stop = 8
    UOP_FLAG_ReturnFromSubMenu = 16
    UOP_FLAG_Play_Chapter_Or_AtTime = 32
    UOP_FLAG_PlayPrev_Or_Replay_Chapter = 64
    UOP_FLAG_PlayNext_Chapter = 128
    UOP_FLAG_Play_Forwards = 256
    UOP_FLAG_Play_Backwards = 512
    UOP_FLAG_ShowMenu_Title = 1024
    UOP_FLAG_ShowMenu_Root = 2048
    UOP_FLAG_ShowMenu_SubPic = 4096
    UOP_FLAG_ShowMenu_Audio = 8192
    UOP_FLAG_ShowMenu_Angle = 16384
    UOP_FLAG_ShowMenu_Chapter = 32768
    UOP_FLAG_Resume = 65536
    UOP_FLAG_Select_Or_Activate_Button = 131072
    UOP_FLAG_Still_Off = 262144
    UOP_FLAG_Pause_On = 524288
    UOP_FLAG_Select_Audio_Stream = 1048576
    UOP_FLAG_Select_SubPic_Stream = 2097152
    UOP_FLAG_Select_Angle = 4194304
    UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 8388608
    UOP_FLAG_Select_Video_Mode_Preference = 16777216
  end

  enum DVD_CMD_FLAGS : Int32
    DVD_CMD_FLAG_None = 0
    DVD_CMD_FLAG_Flush = 1
    DVD_CMD_FLAG_SendEvents = 2
    DVD_CMD_FLAG_Block = 4
    DVD_CMD_FLAG_StartWhenRendered = 8
    DVD_CMD_FLAG_EndAfterRendered = 16
  end

  enum DVD_OPTION_FLAG : Int32
    DVD_ResetOnStop = 1
    DVD_NotifyParentalLevelChange = 2
    DVD_HMSF_TimeCodeEvents = 3
    DVD_AudioDuringFFwdRew = 4
    DVD_EnableNonblockingAPIs = 5
    DVD_CacheSizeInMB = 6
    DVD_EnablePortableBookmarks = 7
    DVD_EnableExtendedCopyProtectErrors = 8
    DVD_NotifyPositionChange = 9
    DVD_IncreaseOutputControl = 10
    DVD_EnableStreaming = 11
    DVD_EnableESOutput = 12
    DVD_EnableTitleLength = 13
    DVD_DisableStillThrottle = 14
    DVD_EnableLoggingEvents = 15
    DVD_MaxReadBurstInKB = 16
    DVD_ReadBurstPeriodInMS = 17
    DVD_RestartDisc = 18
    DVD_EnableCC = 19
  end

  enum DVD_RELATIVE_BUTTON : Int32
    DVD_Relative_Upper = 1
    DVD_Relative_Lower = 2
    DVD_Relative_Left = 3
    DVD_Relative_Right = 4
  end

  enum DVD_PARENTAL_LEVEL : Int32
    DVD_PARENTAL_LEVEL_8 = 32768
    DVD_PARENTAL_LEVEL_7 = 16384
    DVD_PARENTAL_LEVEL_6 = 8192
    DVD_PARENTAL_LEVEL_5 = 4096
    DVD_PARENTAL_LEVEL_4 = 2048
    DVD_PARENTAL_LEVEL_3 = 1024
    DVD_PARENTAL_LEVEL_2 = 512
    DVD_PARENTAL_LEVEL_1 = 256
  end

  enum DVD_AUDIO_LANG_EXT : Int32
    DVD_AUD_EXT_NotSpecified = 0
    DVD_AUD_EXT_Captions = 1
    DVD_AUD_EXT_VisuallyImpaired = 2
    DVD_AUD_EXT_DirectorComments1 = 3
    DVD_AUD_EXT_DirectorComments2 = 4
  end

  enum DVD_SUBPICTURE_LANG_EXT : Int32
    DVD_SP_EXT_NotSpecified = 0
    DVD_SP_EXT_Caption_Normal = 1
    DVD_SP_EXT_Caption_Big = 2
    DVD_SP_EXT_Caption_Children = 3
    DVD_SP_EXT_CC_Normal = 5
    DVD_SP_EXT_CC_Big = 6
    DVD_SP_EXT_CC_Children = 7
    DVD_SP_EXT_Forced = 9
    DVD_SP_EXT_DirectorComments_Normal = 13
    DVD_SP_EXT_DirectorComments_Big = 14
    DVD_SP_EXT_DirectorComments_Children = 15
  end

  enum DVD_AUDIO_APPMODE : Int32
    DVD_AudioMode_None = 0
    DVD_AudioMode_Karaoke = 1
    DVD_AudioMode_Surround = 2
    DVD_AudioMode_Other = 3
  end

  enum DVD_AUDIO_FORMAT : Int32
    DVD_AudioFormat_AC3 = 0
    DVD_AudioFormat_MPEG1 = 1
    DVD_AudioFormat_MPEG1_DRC = 2
    DVD_AudioFormat_MPEG2 = 3
    DVD_AudioFormat_MPEG2_DRC = 4
    DVD_AudioFormat_LPCM = 5
    DVD_AudioFormat_DTS = 6
    DVD_AudioFormat_SDDS = 7
    DVD_AudioFormat_Other = 8
  end

  enum DVD_KARAOKE_DOWNMIX : Int32
    DVD_Mix_0to0 = 1
    DVD_Mix_1to0 = 2
    DVD_Mix_2to0 = 4
    DVD_Mix_3to0 = 8
    DVD_Mix_4to0 = 16
    DVD_Mix_Lto0 = 32
    DVD_Mix_Rto0 = 64
    DVD_Mix_0to1 = 256
    DVD_Mix_1to1 = 512
    DVD_Mix_2to1 = 1024
    DVD_Mix_3to1 = 2048
    DVD_Mix_4to1 = 4096
    DVD_Mix_Lto1 = 8192
    DVD_Mix_Rto1 = 16384
  end

  enum DVD_KARAOKE_CONTENTS : Int32
    DVD_Karaoke_GuideVocal1 = 1
    DVD_Karaoke_GuideVocal2 = 2
    DVD_Karaoke_GuideMelody1 = 4
    DVD_Karaoke_GuideMelody2 = 8
    DVD_Karaoke_GuideMelodyA = 16
    DVD_Karaoke_GuideMelodyB = 32
    DVD_Karaoke_SoundEffectA = 64
    DVD_Karaoke_SoundEffectB = 128
  end

  enum DVD_KARAOKE_ASSIGNMENT : Int32
    DVD_Assignment_reserved0 = 0
    DVD_Assignment_reserved1 = 1
    DVD_Assignment_LR = 2
    DVD_Assignment_LRM = 3
    DVD_Assignment_LR1 = 4
    DVD_Assignment_LRM1 = 5
    DVD_Assignment_LR12 = 6
    DVD_Assignment_LRM12 = 7
  end

  enum DVD_VIDEO_COMPRESSION : Int32
    DVD_VideoCompression_Other = 0
    DVD_VideoCompression_MPEG1 = 1
    DVD_VideoCompression_MPEG2 = 2
  end

  enum DVD_SUBPICTURE_TYPE : Int32
    DVD_SPType_NotSpecified = 0
    DVD_SPType_Language = 1
    DVD_SPType_Other = 2
  end

  enum DVD_SUBPICTURE_CODING : Int32
    DVD_SPCoding_RunLength = 0
    DVD_SPCoding_Extended = 1
    DVD_SPCoding_Other = 2
  end

  enum DVD_TITLE_APPMODE : Int32
    DVD_AppMode_Not_Specified = 0
    DVD_AppMode_Karaoke = 1
    DVD_AppMode_Other = 3
  end

  enum DVD_TextStringType : Int32
    DVD_Struct_Volume = 1
    DVD_Struct_Title = 2
    DVD_Struct_ParentalID = 3
    DVD_Struct_PartOfTitle = 4
    DVD_Struct_Cell = 5
    DVD_Stream_Audio = 16
    DVD_Stream_Subpicture = 17
    DVD_Stream_Angle = 18
    DVD_Channel_Audio = 32
    DVD_General_Name = 48
    DVD_General_Comments = 49
    DVD_Title_Series = 56
    DVD_Title_Movie = 57
    DVD_Title_Video = 58
    DVD_Title_Album = 59
    DVD_Title_Song = 60
    DVD_Title_Other = 63
    DVD_Title_Sub_Series = 64
    DVD_Title_Sub_Movie = 65
    DVD_Title_Sub_Video = 66
    DVD_Title_Sub_Album = 67
    DVD_Title_Sub_Song = 68
    DVD_Title_Sub_Other = 71
    DVD_Title_Orig_Series = 72
    DVD_Title_Orig_Movie = 73
    DVD_Title_Orig_Video = 74
    DVD_Title_Orig_Album = 75
    DVD_Title_Orig_Song = 76
    DVD_Title_Orig_Other = 79
    DVD_Other_Scene = 80
    DVD_Other_Cut = 81
    DVD_Other_Take = 82
  end

  enum DVD_TextCharSet : Int32
    DVD_CharSet_Unicode = 0
    DVD_CharSet_ISO646 = 1
    DVD_CharSet_JIS_Roman_Kanji = 2
    DVD_CharSet_ISO8859_1 = 3
    DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 4
  end

  enum AM_DVD_GRAPH_FLAGS : Int32
    AM_DVD_HWDEC_PREFER = 1
    AM_DVD_HWDEC_ONLY = 2
    AM_DVD_SWDEC_PREFER = 4
    AM_DVD_SWDEC_ONLY = 8
    AM_DVD_NOVPE = 256
    AM_DVD_DO_NOT_CLEAR = 512
    AM_DVD_VMR9_ONLY = 2048
    AM_DVD_EVR_ONLY = 4096
    AM_DVD_EVR_QOS = 8192
    AM_DVD_ADAPT_GRAPH = 16384
    AM_DVD_MASK = 65535
  end

  enum AM_DVD_STREAM_FLAGS : Int32
    AM_DVD_STREAM_VIDEO = 1
    AM_DVD_STREAM_AUDIO = 2
    AM_DVD_STREAM_SUBPIC = 4
  end

  enum AM_OVERLAY_NOTIFY_FLAGS : Int32
    AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 1
    AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 2
    AM_OVERLAY_NOTIFY_DEST_CHANGE = 4
  end

  enum BDA_EVENT_ID : Int32
    BDA_EVENT_SIGNAL_LOSS = 0
    BDA_EVENT_SIGNAL_LOCK = 1
    BDA_EVENT_DATA_START = 2
    BDA_EVENT_DATA_STOP = 3
    BDA_EVENT_CHANNEL_ACQUIRED = 4
    BDA_EVENT_CHANNEL_LOST = 5
    BDA_EVENT_CHANNEL_SOURCE_CHANGED = 6
    BDA_EVENT_CHANNEL_ACTIVATED = 7
    BDA_EVENT_CHANNEL_DEACTIVATED = 8
    BDA_EVENT_SUBCHANNEL_ACQUIRED = 9
    BDA_EVENT_SUBCHANNEL_LOST = 10
    BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED = 11
    BDA_EVENT_SUBCHANNEL_ACTIVATED = 12
    BDA_EVENT_SUBCHANNEL_DEACTIVATED = 13
    BDA_EVENT_ACCESS_GRANTED = 14
    BDA_EVENT_ACCESS_DENIED = 15
    BDA_EVENT_OFFER_EXTENDED = 16
    BDA_EVENT_PURCHASE_COMPLETED = 17
    BDA_EVENT_SMART_CARD_INSERTED = 18
    BDA_EVENT_SMART_CARD_REMOVED = 19
  end

  enum BDA_MULTICAST_MODE : Int32
    BDA_PROMISCUOUS_MULTICAST = 0
    BDA_FILTERED_MULTICAST = 1
    BDA_NO_MULTICAST = 2
  end

  enum BDA_SIGNAL_STATE : Int32
    BDA_SIGNAL_UNAVAILABLE = 0
    BDA_SIGNAL_INACTIVE = 1
    BDA_SIGNAL_ACTIVE = 2
  end

  enum BDA_CHANGE_STATE : Int32
    BDA_CHANGES_COMPLETE = 0
    BDA_CHANGES_PENDING = 1
  end

  enum MEDIA_SAMPLE_CONTENT : Int32
    MEDIA_TRANSPORT_PACKET = 0
    MEDIA_ELEMENTARY_STREAM = 1
    MEDIA_MPEG2_PSI = 2
    MEDIA_TRANSPORT_PAYLOAD = 3
  end

  enum ISDBCAS_REQUEST_ID : Int32
    ISDBCAS_REQUEST_ID_EMG = 56
    ISDBCAS_REQUEST_ID_EMD = 58
  end

  enum MUX_PID_TYPE : Int32
    PID_OTHER = -1
    PID_ELEMENTARY_STREAM = 0
    PID_MPEG2_SECTION_PSI_SI = 1
  end

  enum DVBSystemType : Int32
    DVB_Cable = 0
    DVB_Terrestrial = 1
    DVB_Satellite = 2
    ISDB_Terrestrial = 3
    ISDB_Satellite = 4
  end

  enum BDA_Channel : Int32
    BDA_UNDEFINED_CHANNEL = -1
  end

  enum ComponentCategory : Int32
    CategoryNotSet = -1
    CategoryOther = 0
    CategoryVideo = 1
    CategoryAudio = 2
    CategoryText = 3
    CategorySubtitles = 4
    CategoryCaptions = 5
    CategorySuperimpose = 6
    CategoryData = 7
    CATEGORY_COUNT = 8
  end

  enum ComponentStatus : Int32
    StatusActive = 0
    StatusInactive = 1
    StatusUnavailable = 2
  end

  enum MPEG2StreamType : Int32
    BDA_UNITIALIZED_MPEG2STREAMTYPE = -1
    Reserved1 = 0
    ISO_IEC_11172_2_VIDEO = 1
    ISO_IEC_13818_2_VIDEO = 2
    ISO_IEC_11172_3_AUDIO = 3
    ISO_IEC_13818_3_AUDIO = 4
    ISO_IEC_13818_1_PRIVATE_SECTION = 5
    ISO_IEC_13818_1_PES = 6
    ISO_IEC_13522_MHEG = 7
    ANNEX_A_DSM_CC = 8
    ITU_T_REC_H_222_1 = 9
    ISO_IEC_13818_6_TYPE_A = 10
    ISO_IEC_13818_6_TYPE_B = 11
    ISO_IEC_13818_6_TYPE_C = 12
    ISO_IEC_13818_6_TYPE_D = 13
    ISO_IEC_13818_1_AUXILIARY = 14
    ISO_IEC_13818_7_AUDIO = 15
    ISO_IEC_14496_2_VISUAL = 16
    ISO_IEC_14496_3_AUDIO = 17
    ISO_IEC_14496_1_IN_PES = 18
    ISO_IEC_14496_1_IN_SECTION = 19
    ISO_IEC_13818_6_DOWNLOAD = 20
    METADATA_IN_PES = 21
    METADATA_IN_SECTION = 22
    METADATA_IN_DATA_CAROUSEL = 23
    METADATA_IN_OBJECT_CAROUSEL = 24
    METADATA_IN_DOWNLOAD_PROTOCOL = 25
    IRPM_STREAMM = 26
    ITU_T_H264 = 27
    ISO_IEC_13818_1_RESERVED = 28
    USER_PRIVATE = 16
    HEVC_VIDEO_OR_TEMPORAL_VIDEO = 36
    HEVC_TEMPORAL_VIDEO_SUBSET = 37
    ISO_IEC_USER_PRIVATE = 128
    DOLBY_AC3_AUDIO = 129
    DOLBY_DIGITAL_PLUS_AUDIO_ATSC = 135
  end

  enum ATSCComponentTypeFlags : Int32
    ATSCCT_AC3 = 1
  end

  enum BinaryConvolutionCodeRate : Int32
    BDA_BCC_RATE_NOT_SET = -1
    BDA_BCC_RATE_NOT_DEFINED = 0
    BDA_BCC_RATE_1_2 = 1
    BDA_BCC_RATE_2_3 = 2
    BDA_BCC_RATE_3_4 = 3
    BDA_BCC_RATE_3_5 = 4
    BDA_BCC_RATE_4_5 = 5
    BDA_BCC_RATE_5_6 = 6
    BDA_BCC_RATE_5_11 = 7
    BDA_BCC_RATE_7_8 = 8
    BDA_BCC_RATE_1_4 = 9
    BDA_BCC_RATE_1_3 = 10
    BDA_BCC_RATE_2_5 = 11
    BDA_BCC_RATE_6_7 = 12
    BDA_BCC_RATE_8_9 = 13
    BDA_BCC_RATE_9_10 = 14
    BDA_BCC_RATE_MAX = 15
  end

  enum FECMethod : Int32
    BDA_FEC_METHOD_NOT_SET = -1
    BDA_FEC_METHOD_NOT_DEFINED = 0
    BDA_FEC_VITERBI = 1
    BDA_FEC_RS_204_188 = 2
    BDA_FEC_LDPC = 3
    BDA_FEC_BCH = 4
    BDA_FEC_RS_147_130 = 5
    BDA_FEC_MAX = 6
  end

  enum ModulationType : Int32
    BDA_MOD_NOT_SET = -1
    BDA_MOD_NOT_DEFINED = 0
    BDA_MOD_16QAM = 1
    BDA_MOD_32QAM = 2
    BDA_MOD_64QAM = 3
    BDA_MOD_80QAM = 4
    BDA_MOD_96QAM = 5
    BDA_MOD_112QAM = 6
    BDA_MOD_128QAM = 7
    BDA_MOD_160QAM = 8
    BDA_MOD_192QAM = 9
    BDA_MOD_224QAM = 10
    BDA_MOD_256QAM = 11
    BDA_MOD_320QAM = 12
    BDA_MOD_384QAM = 13
    BDA_MOD_448QAM = 14
    BDA_MOD_512QAM = 15
    BDA_MOD_640QAM = 16
    BDA_MOD_768QAM = 17
    BDA_MOD_896QAM = 18
    BDA_MOD_1024QAM = 19
    BDA_MOD_QPSK = 20
    BDA_MOD_BPSK = 21
    BDA_MOD_OQPSK = 22
    BDA_MOD_8VSB = 23
    BDA_MOD_16VSB = 24
    BDA_MOD_ANALOG_AMPLITUDE = 25
    BDA_MOD_ANALOG_FREQUENCY = 26
    BDA_MOD_8PSK = 27
    BDA_MOD_RF = 28
    BDA_MOD_16APSK = 29
    BDA_MOD_32APSK = 30
    BDA_MOD_NBC_QPSK = 31
    BDA_MOD_NBC_8PSK = 32
    BDA_MOD_DIRECTV = 33
    BDA_MOD_ISDB_T_TMCC = 34
    BDA_MOD_ISDB_S_TMCC = 35
    BDA_MOD_MAX = 36
  end

  enum ScanModulationTypes : Int32
    BDA_SCAN_MOD_16QAM = 1
    BDA_SCAN_MOD_32QAM = 2
    BDA_SCAN_MOD_64QAM = 4
    BDA_SCAN_MOD_80QAM = 8
    BDA_SCAN_MOD_96QAM = 16
    BDA_SCAN_MOD_112QAM = 32
    BDA_SCAN_MOD_128QAM = 64
    BDA_SCAN_MOD_160QAM = 128
    BDA_SCAN_MOD_192QAM = 256
    BDA_SCAN_MOD_224QAM = 512
    BDA_SCAN_MOD_256QAM = 1024
    BDA_SCAN_MOD_320QAM = 2048
    BDA_SCAN_MOD_384QAM = 4096
    BDA_SCAN_MOD_448QAM = 8192
    BDA_SCAN_MOD_512QAM = 16384
    BDA_SCAN_MOD_640QAM = 32768
    BDA_SCAN_MOD_768QAM = 65536
    BDA_SCAN_MOD_896QAM = 131072
    BDA_SCAN_MOD_1024QAM = 262144
    BDA_SCAN_MOD_QPSK = 524288
    BDA_SCAN_MOD_BPSK = 1048576
    BDA_SCAN_MOD_OQPSK = 2097152
    BDA_SCAN_MOD_8VSB = 4194304
    BDA_SCAN_MOD_16VSB = 8388608
    BDA_SCAN_MOD_AM_RADIO = 16777216
    BDA_SCAN_MOD_FM_RADIO = 33554432
    BDA_SCAN_MOD_8PSK = 67108864
    BDA_SCAN_MOD_RF = 134217728
    ScanModulationTypesMask_MCE_DigitalCable = 11
    ScanModulationTypesMask_MCE_TerrestrialATSC = 23
    ScanModulationTypesMask_MCE_AnalogTv = 28
    ScanModulationTypesMask_MCE_All_TV = -1
    ScanModulationTypesMask_DVBC = 75
    BDA_SCAN_MOD_16APSK = 268435456
    BDA_SCAN_MOD_32APSK = 536870912
  end

  enum SpectralInversion : Int32
    BDA_SPECTRAL_INVERSION_NOT_SET = -1
    BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0
    BDA_SPECTRAL_INVERSION_AUTOMATIC = 1
    BDA_SPECTRAL_INVERSION_NORMAL = 2
    BDA_SPECTRAL_INVERSION_INVERTED = 3
    BDA_SPECTRAL_INVERSION_MAX = 4
  end

  enum Polarisation : Int32
    BDA_POLARISATION_NOT_SET = -1
    BDA_POLARISATION_NOT_DEFINED = 0
    BDA_POLARISATION_LINEAR_H = 1
    BDA_POLARISATION_LINEAR_V = 2
    BDA_POLARISATION_CIRCULAR_L = 3
    BDA_POLARISATION_CIRCULAR_R = 4
    BDA_POLARISATION_MAX = 5
  end

  enum LNB_Source : Int32
    BDA_LNB_SOURCE_NOT_SET = -1
    BDA_LNB_SOURCE_NOT_DEFINED = 0
    BDA_LNB_SOURCE_A = 1
    BDA_LNB_SOURCE_B = 2
    BDA_LNB_SOURCE_C = 3
    BDA_LNB_SOURCE_D = 4
    BDA_LNB_SOURCE_MAX = 5
  end

  enum GuardInterval : Int32
    BDA_GUARD_NOT_SET = -1
    BDA_GUARD_NOT_DEFINED = 0
    BDA_GUARD_1_32 = 1
    BDA_GUARD_1_16 = 2
    BDA_GUARD_1_8 = 3
    BDA_GUARD_1_4 = 4
    BDA_GUARD_1_128 = 5
    BDA_GUARD_19_128 = 6
    BDA_GUARD_19_256 = 7
    BDA_GUARD_MAX = 8
  end

  enum HierarchyAlpha : Int32
    BDA_HALPHA_NOT_SET = -1
    BDA_HALPHA_NOT_DEFINED = 0
    BDA_HALPHA_1 = 1
    BDA_HALPHA_2 = 2
    BDA_HALPHA_4 = 3
    BDA_HALPHA_MAX = 4
  end

  enum TransmissionMode : Int32
    BDA_XMIT_MODE_NOT_SET = -1
    BDA_XMIT_MODE_NOT_DEFINED = 0
    BDA_XMIT_MODE_2K = 1
    BDA_XMIT_MODE_8K = 2
    BDA_XMIT_MODE_4K = 3
    BDA_XMIT_MODE_2K_INTERLEAVED = 4
    BDA_XMIT_MODE_4K_INTERLEAVED = 5
    BDA_XMIT_MODE_1K = 6
    BDA_XMIT_MODE_16K = 7
    BDA_XMIT_MODE_32K = 8
    BDA_XMIT_MODE_MAX = 9
  end

  enum RollOff : Int32
    BDA_ROLL_OFF_NOT_SET = -1
    BDA_ROLL_OFF_NOT_DEFINED = 0
    BDA_ROLL_OFF_20 = 1
    BDA_ROLL_OFF_25 = 2
    BDA_ROLL_OFF_35 = 3
    BDA_ROLL_OFF_MAX = 4
  end

  enum Pilot : Int32
    BDA_PILOT_NOT_SET = -1
    BDA_PILOT_NOT_DEFINED = 0
    BDA_PILOT_OFF = 1
    BDA_PILOT_ON = 2
    BDA_PILOT_MAX = 3
  end

  enum BDA_Frequency : Int32
    BDA_FREQUENCY_NOT_SET = -1
    BDA_FREQUENCY_NOT_DEFINED = 0
  end

  enum BDA_Range : Int32
    BDA_RANGE_NOT_SET = -1
    BDA_RANGE_NOT_DEFINED = 0
  end

  enum BDA_Channel_Bandwidth : Int32
    BDA_CHAN_BANDWITH_NOT_SET = -1
    BDA_CHAN_BANDWITH_NOT_DEFINED = 0
  end

  enum BDA_Frequency_Multiplier : Int32
    BDA_FREQUENCY_MULTIPLIER_NOT_SET = -1
    BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0
  end

  enum BDA_Comp_Flags : Int32
    BDACOMP_NOT_DEFINED = 0
    BDACOMP_EXCLUDE_TS_FROM_TR = 1
    BDACOMP_INCLUDE_LOCATOR_IN_TR = 2
    BDACOMP_INCLUDE_COMPONENTS_IN_TR = 4
  end

  enum ApplicationTypeType : Int32
    SCTE28_ConditionalAccess = 0
    SCTE28_POD_Host_Binding_Information = 1
    SCTE28_IPService = 2
    SCTE28_NetworkInterface_SCTE55_2 = 3
    SCTE28_NetworkInterface_SCTE55_1 = 4
    SCTE28_CopyProtection = 5
    SCTE28_Diagnostic = 6
    SCTE28_Undesignated = 7
    SCTE28_Reserved = 8
  end

  enum BDA_CONDITIONALACCESS_REQUESTTYPE : Int32
    CONDITIONALACCESS_ACCESS_UNSPECIFIED = 0
    CONDITIONALACCESS_ACCESS_NOT_POSSIBLE = 1
    CONDITIONALACCESS_ACCESS_POSSIBLE = 2
    CONDITIONALACCESS_ACCESS_POSSIBLE_NO_STREAMING_DISRUPTION = 3
  end

  enum BDA_CONDITIONALACCESS_MMICLOSEREASON : Int32
    CONDITIONALACCESS_UNSPECIFIED = 0
    CONDITIONALACCESS_CLOSED_ITSELF = 1
    CONDITIONALACCESS_TUNER_REQUESTED_CLOSE = 2
    CONDITIONALACCESS_DIALOG_TIMEOUT = 3
    CONDITIONALACCESS_DIALOG_FOCUS_CHANGE = 4
    CONDITIONALACCESS_DIALOG_USER_DISMISSED = 5
    CONDITIONALACCESS_DIALOG_USER_NOT_AVAILABLE = 6
  end

  enum BDA_CONDITIONALACCESS_SESSION_RESULT : Int32
    CONDITIONALACCESS_SUCCESSFULL = 0
    CONDITIONALACCESS_ENDED_NOCHANGE = 1
    CONDITIONALACCESS_ABORTED = 2
  end

  enum BDA_DISCOVERY_STATE : Int32
    BDA_DISCOVERY_UNSPECIFIED = 0
    BDA_DISCOVERY_REQUIRED = 1
    BDA_DISCOVERY_COMPLETE = 2
  end

  enum SmartCardStatusType : Int32
    CardInserted = 0
    CardRemoved = 1
    CardError = 2
    CardDataChanged = 3
    CardFirmwareUpgrade = 4
  end

  enum SmartCardAssociationType : Int32
    NotAssociated = 0
    Associated = 1
    AssociationUnknown = 2
  end

  enum LocationCodeSchemeType : Int32
    SCTE_18 = 0
  end

  enum EntitlementType : Int32
    Entitled = 0
    NotEntitled = 1
    TechnicalFailure = 2
  end

  enum UICloseReasonType : Int32
    NotReady = 0
    UserClosed = 1
    SystemClosed = 2
    DeviceClosed = 3
    ErrorClosed = 4
  end

  enum BDA_DrmPairingError : Int32
    BDA_DrmPairing_Succeeded = 0
    BDA_DrmPairing_HardwareFailure = 1
    BDA_DrmPairing_NeedRevocationData = 2
    BDA_DrmPairing_NeedIndiv = 3
    BDA_DrmPairing_Other = 4
    BDA_DrmPairing_DrmInitFailed = 5
    BDA_DrmPairing_DrmNotPaired = 6
    BDA_DrmPairing_DrmRePairSoon = 7
    BDA_DrmPairing_Aborted = 8
    BDA_DrmPairing_NeedSDKUpdate = 9
  end

  enum KSPROPERTY_IPSINK : UInt32
    KSPROPERTY_IPSINK_MULTICASTLIST = 0
    KSPROPERTY_IPSINK_ADAPTER_DESCRIPTION = 1
    KSPROPERTY_IPSINK_ADAPTER_ADDRESS = 2
  end

  enum AMExtendedSeekingCapabilities : Int32
    AM_EXSEEK_CANSEEK = 1
    AM_EXSEEK_CANSCAN = 2
    AM_EXSEEK_MARKERSEEK = 4
    AM_EXSEEK_SCANWITHOUTCLOCK = 8
    AM_EXSEEK_NOSTANDARDREPAINT = 16
    AM_EXSEEK_BUFFERING = 32
    AM_EXSEEK_SENDS_VIDEOFRAMEREADY = 64
  end

  enum AM_LINE21_CCLEVEL : Int32
    AM_L21_CCLEVEL_TC2 = 0
  end

  enum AM_LINE21_CCSERVICE : Int32
    AM_L21_CCSERVICE_None = 0
    AM_L21_CCSERVICE_Caption1 = 1
    AM_L21_CCSERVICE_Caption2 = 2
    AM_L21_CCSERVICE_Text1 = 3
    AM_L21_CCSERVICE_Text2 = 4
    AM_L21_CCSERVICE_XDS = 5
    AM_L21_CCSERVICE_DefChannel = 10
    AM_L21_CCSERVICE_Invalid = 11
  end

  enum AM_LINE21_CCSTATE : Int32
    AM_L21_CCSTATE_Off = 0
    AM_L21_CCSTATE_On = 1
  end

  enum AM_LINE21_CCSTYLE : Int32
    AM_L21_CCSTYLE_None = 0
    AM_L21_CCSTYLE_PopOn = 1
    AM_L21_CCSTYLE_PaintOn = 2
    AM_L21_CCSTYLE_RollUp = 3
  end

  enum AM_LINE21_DRAWBGMODE : Int32
    AM_L21_DRAWBGMODE_Opaque = 0
    AM_L21_DRAWBGMODE_Transparent = 1
  end

  enum AM_WST_LEVEL : Int32
    AM_WST_LEVEL_1_5 = 0
  end

  enum AM_WST_SERVICE : Int32
    AM_WST_SERVICE_None = 0
    AM_WST_SERVICE_Text = 1
    AM_WST_SERVICE_IDS = 2
    AM_WST_SERVICE_Invalid = 3
  end

  enum AM_WST_STATE : Int32
    AM_WST_STATE_Off = 0
    AM_WST_STATE_On = 1
  end

  enum AM_WST_STYLE : Int32
    AM_WST_STYLE_None = 0
    AM_WST_STYLE_Invers = 1
  end

  enum AM_WST_DRAWBGMODE : Int32
    AM_WST_DRAWBGMODE_Opaque = 0
    AM_WST_DRAWBGMODE_Transparent = 1
  end

  enum STREAM_TYPE : Int32
    STREAMTYPE_READ = 0
    STREAMTYPE_WRITE = 1
    STREAMTYPE_TRANSFORM = 2
  end

  enum STREAM_STATE : Int32
    STREAMSTATE_STOP = 0
    STREAMSTATE_RUN = 1
  end

  enum COMPLETION_STATUS_FLAGS : Int32
    COMPSTAT_NOUPDATEOK = 1
    COMPSTAT_WAIT = 2
    COMPSTAT_ABORT = 4
  end

  enum MMSSF_GET_INFORMATION_FLAGS : UInt32
    MMSSF_HASCLOCK = 1
    MMSSF_SUPPORTSEEK = 2
    MMSSF_ASYNCHRONOUS = 4
  end

  enum SSUPDATE_TYPE : Int32
    SSUPDATE_ASYNC = 1
    SSUPDATE_CONTINUOUS = 2
  end

  enum DDSFF_FLAGS : UInt32
    DDSFF_PROGRESSIVERENDER = 1
  end

  enum AMMSF_MMS_INIT_FLAGS : UInt32
    AMMSF_NOGRAPHTHREAD = 1
  end

  enum AMMSF_MS_FLAGS : UInt32
    AMMSF_ADDDEFAULTRENDERER = 1
    AMMSF_CREATEPEER = 2
    AMMSF_STOPIFNOSAMPLES = 4
    AMMSF_NOSTALL = 8
  end

  enum AMMSF_RENDER_FLAGS : UInt32
    AMMSF_RENDERTYPEMASK = 3
    AMMSF_RENDERTOEXISTING = 0
    AMMSF_RENDERALLSTREAMS = 1
    AMMSF_NORENDER = 2
    AMMSF_NOCLOCK = 4
    AMMSF_RUN = 8
  end

  enum OUTPUT_STATE : UInt32
    Disabled = 0
    ReadData = 1
    RenderData = 2
  end

  enum AM_PROPERTY_FRAMESTEP : Int32
    AM_PROPERTY_FRAMESTEP_STEP = 1
    AM_PROPERTY_FRAMESTEP_CANCEL = 2
    AM_PROPERTY_FRAMESTEP_CANSTEP = 3
    AM_PROPERTY_FRAMESTEP_CANSTEPMULTIPLE = 4
  end

  enum AM_ASPECT_RATIO_MODE : Int32
    AM_ARMODE_STRETCHED = 0
    AM_ARMODE_LETTER_BOX = 1
    AM_ARMODE_CROP = 2
    AM_ARMODE_STRETCHED_AS_PRIMARY = 3
  end

  enum VMR9PresentationFlags : Int32
    VMR9Sample_SyncPoint = 1
    VMR9Sample_Preroll = 2
    VMR9Sample_Discontinuity = 4
    VMR9Sample_TimeValid = 8
    VMR9Sample_SrcDstRectsValid = 16
  end

  enum VMR9SurfaceAllocationFlags : Int32
    VMR9AllocFlag_3DRenderTarget = 1
    VMR9AllocFlag_DXVATarget = 2
    VMR9AllocFlag_TextureSurface = 4
    VMR9AllocFlag_OffscreenSurface = 8
    VMR9AllocFlag_RGBDynamicSwitch = 16
    VMR9AllocFlag_UsageReserved = 224
    VMR9AllocFlag_UsageMask = 255
  end

  enum VMR9AspectRatioMode : Int32
    VMR9ARMode_None = 0
    VMR9ARMode_LetterBox = 1
  end

  enum VMR9MixerPrefs : Int32
    MixerPref9_NoDecimation = 1
    MixerPref9_DecimateOutput = 2
    MixerPref9_ARAdjustXorY = 4
    MixerPref9_NonSquareMixing = 8
    MixerPref9_DecimateMask = 15
    MixerPref9_BiLinearFiltering = 16
    MixerPref9_PointFiltering = 32
    MixerPref9_AnisotropicFiltering = 64
    MixerPref9_PyramidalQuadFiltering = 128
    MixerPref9_GaussianQuadFiltering = 256
    MixerPref9_FilteringReserved = 3584
    MixerPref9_FilteringMask = 4080
    MixerPref9_RenderTargetRGB = 4096
    MixerPref9_RenderTargetYUV = 8192
    MixerPref9_RenderTargetReserved = 1032192
    MixerPref9_RenderTargetMask = 1044480
    MixerPref9_DynamicSwitchToBOB = 1048576
    MixerPref9_DynamicDecimateBy2 = 2097152
    MixerPref9_DynamicReserved = 12582912
    MixerPref9_DynamicMask = 15728640
  end

  enum VMR9ProcAmpControlFlags : Int32
    ProcAmpControl9_Brightness = 1
    ProcAmpControl9_Contrast = 2
    ProcAmpControl9_Hue = 4
    ProcAmpControl9_Saturation = 8
    ProcAmpControl9_Mask = 15
  end

  enum VMR9AlphaBitmapFlags : Int32
    VMR9AlphaBitmap_Disable = 1
    VMR9AlphaBitmap_hDC = 2
    VMR9AlphaBitmap_EntireDDS = 4
    VMR9AlphaBitmap_SrcColorKey = 8
    VMR9AlphaBitmap_SrcRect = 16
    VMR9AlphaBitmap_FilterMode = 32
  end

  enum VMR9RenderPrefs : Int32
    RenderPrefs9_DoNotRenderBorder = 1
    RenderPrefs9_Mask = 1
  end

  enum VMR9Mode : Int32
    VMR9Mode_Windowed = 1
    VMR9Mode_Windowless = 2
    VMR9Mode_Renderless = 4
    VMR9Mode_Mask = 7
  end

  enum VMR9DeinterlacePrefs : Int32
    DeinterlacePref9_NextBest = 1
    DeinterlacePref9_BOB = 2
    DeinterlacePref9_Weave = 4
    DeinterlacePref9_Mask = 7
  end

  enum VMR9DeinterlaceTech : Int32
    DeinterlaceTech9_Unknown = 0
    DeinterlaceTech9_BOBLineReplicate = 1
    DeinterlaceTech9_BOBVerticalStretch = 2
    DeinterlaceTech9_MedianFiltering = 4
    DeinterlaceTech9_EdgeFiltering = 16
    DeinterlaceTech9_FieldAdaptive = 32
    DeinterlaceTech9_PixelAdaptive = 64
    DeinterlaceTech9_MotionVectorSteered = 128
  end

  enum VMR9_SampleFormat : Int32
    VMR9_SampleReserved = 1
    VMR9_SampleProgressiveFrame = 2
    VMR9_SampleFieldInterleavedEvenFirst = 3
    VMR9_SampleFieldInterleavedOddFirst = 4
    VMR9_SampleFieldSingleEven = 5
    VMR9_SampleFieldSingleOdd = 6
  end

  enum AM_PROPERTY_AC3 : Int32
    AM_PROPERTY_AC3_ERROR_CONCEALMENT = 1
    AM_PROPERTY_AC3_ALTERNATE_AUDIO = 2
    AM_PROPERTY_AC3_DOWNMIX = 3
    AM_PROPERTY_AC3_BIT_STREAM_MODE = 4
    AM_PROPERTY_AC3_DIALOGUE_LEVEL = 5
    AM_PROPERTY_AC3_LANGUAGE_CODE = 6
    AM_PROPERTY_AC3_ROOM_TYPE = 7
  end

  enum AM_PROPERTY_DVDSUBPIC : Int32
    AM_PROPERTY_DVDSUBPIC_PALETTE = 0
    AM_PROPERTY_DVDSUBPIC_HLI = 1
    AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 2
  end

  enum AM_PROPERTY_DVDCOPYPROT : Int32
    AM_PROPERTY_DVDCOPY_CHLG_KEY = 1
    AM_PROPERTY_DVDCOPY_DVD_KEY1 = 2
    AM_PROPERTY_DVDCOPY_DEC_KEY2 = 3
    AM_PROPERTY_DVDCOPY_TITLE_KEY = 4
    AM_PROPERTY_COPY_MACROVISION = 5
    AM_PROPERTY_DVDCOPY_REGION = 6
    AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 7
    AM_PROPERTY_COPY_ANALOG_COMPONENT = 8
    AM_PROPERTY_COPY_DIGITAL_CP = 9
    AM_PROPERTY_COPY_DVD_SRM = 10
    AM_PROPERTY_DVDCOPY_SUPPORTS_NEW_KEYCOUNT = 11
    AM_PROPERTY_DVDCOPY_DISC_KEY = 128
  end

  enum AM_DIGITAL_CP : Int32
    AM_DIGITAL_CP_OFF = 0
    AM_DIGITAL_CP_ON = 1
    AM_DIGITAL_CP_DVD_COMPLIANT = 2
  end

  enum AM_DVDCOPYSTATE : Int32
    AM_DVDCOPYSTATE_INITIALIZE = 0
    AM_DVDCOPYSTATE_INITIALIZE_TITLE = 1
    AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2
    AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3
    AM_DVDCOPYSTATE_DONE = 4
  end

  enum AM_COPY_MACROVISION_LEVEL : Int32
    AM_MACROVISION_DISABLED = 0
    AM_MACROVISION_LEVEL1 = 1
    AM_MACROVISION_LEVEL2 = 2
    AM_MACROVISION_LEVEL3 = 3
  end

  enum AM_MPEG2Level : Int32
    AM_MPEG2Level_Low = 1
    AM_MPEG2Level_Main = 2
    AM_MPEG2Level_High1440 = 3
    AM_MPEG2Level_High = 4
  end

  enum AM_MPEG2Profile : Int32
    AM_MPEG2Profile_Simple = 1
    AM_MPEG2Profile_Main = 2
    AM_MPEG2Profile_SNRScalable = 3
    AM_MPEG2Profile_SpatiallyScalable = 4
    AM_MPEG2Profile_High = 5
  end

  enum AM_PROPERTY_DVDKARAOKE : Int32
    AM_PROPERTY_DVDKARAOKE_ENABLE = 0
    AM_PROPERTY_DVDKARAOKE_DATA = 1
  end

  enum AM_PROPERTY_TS_RATE_CHANGE : Int32
    AM_RATE_SimpleRateChange = 1
    AM_RATE_ExactRateChange = 2
    AM_RATE_MaxFullDataRate = 3
    AM_RATE_Step = 4
    AM_RATE_UseRateVersion = 5
    AM_RATE_QueryFullFrameRate = 6
    AM_RATE_QueryLastRateSegPTS = 7
    AM_RATE_CorrectTS = 8
    AM_RATE_ReverseMaxFullDataRate = 9
    AM_RATE_ResetOnTimeDisc = 10
    AM_RATE_QueryMapping = 11
  end

  enum AM_PROPERTY_DVD_RATE_CHANGE : Int32
    AM_RATE_ChangeRate = 1
    AM_RATE_FullDataRateMax = 2
    AM_RATE_ReverseDecode = 3
    AM_RATE_DecoderPosition = 4
    AM_RATE_DecoderVersion = 5
  end

  enum DVD_PLAY_DIRECTION : Int32
    DVD_DIR_FORWARD = 0
    DVD_DIR_BACKWARD = 1
  end

  enum DVD_ERROR : Int32
    DVD_ERROR_Unexpected = 1
    DVD_ERROR_CopyProtectFail = 2
    DVD_ERROR_InvalidDVD1_0Disc = 3
    DVD_ERROR_InvalidDiscRegion = 4
    DVD_ERROR_LowParentalLevel = 5
    DVD_ERROR_MacrovisionFail = 6
    DVD_ERROR_IncompatibleSystemAndDecoderRegions = 7
    DVD_ERROR_IncompatibleDiscAndDecoderRegions = 8
    DVD_ERROR_CopyProtectOutputFail = 9
    DVD_ERROR_CopyProtectOutputNotSupported = 10
  end

  enum DVD_WARNING : Int32
    DVD_WARNING_InvalidDVD1_0Disc = 1
    DVD_WARNING_FormatNotSupported = 2
    DVD_WARNING_IllegalNavCommand = 3
    DVD_WARNING_Open = 4
    DVD_WARNING_Seek = 5
    DVD_WARNING_Read = 6
  end

  enum DVD_PB_STOPPED : Int32
    DVD_PB_STOPPED_Other = 0
    DVD_PB_STOPPED_NoBranch = 1
    DVD_PB_STOPPED_NoFirstPlayDomain = 2
    DVD_PB_STOPPED_StopCommand = 3
    DVD_PB_STOPPED_Reset = 4
    DVD_PB_STOPPED_DiscEjected = 5
    DVD_PB_STOPPED_IllegalNavCommand = 6
    DVD_PB_STOPPED_PlayPeriodAutoStop = 7
    DVD_PB_STOPPED_PlayChapterAutoStop = 8
    DVD_PB_STOPPED_ParentalFailure = 9
    DVD_PB_STOPPED_RegionFailure = 10
    DVD_PB_STOPPED_MacrovisionFailure = 11
    DVD_PB_STOPPED_DiscReadError = 12
    DVD_PB_STOPPED_CopyProtectFailure = 13
    DVD_PB_STOPPED_CopyProtectOutputFailure = 14
    DVD_PB_STOPPED_CopyProtectOutputNotSupported = 15
  end

  enum SNDDEV_ERR : Int32
    SNDDEV_ERROR_Open = 1
    SNDDEV_ERROR_Close = 2
    SNDDEV_ERROR_GetCaps = 3
    SNDDEV_ERROR_PrepareHeader = 4
    SNDDEV_ERROR_UnprepareHeader = 5
    SNDDEV_ERROR_Reset = 6
    SNDDEV_ERROR_Restart = 7
    SNDDEV_ERROR_GetPosition = 8
    SNDDEV_ERROR_Write = 9
    SNDDEV_ERROR_Pause = 10
    SNDDEV_ERROR_Stop = 11
    SNDDEV_ERROR_Start = 12
    SNDDEV_ERROR_AddBuffer = 13
    SNDDEV_ERROR_Query = 14
  end

  enum MP_TYPE : Int32
    MPT_INT = 0
    MPT_FLOAT = 1
    MPT_BOOL = 2
    MPT_ENUM = 3
    MPT_MAX = 4
  end

  enum MP_CURVE_TYPE : Int32
    MP_CURVE_JUMP = 1
    MP_CURVE_LINEAR = 2
    MP_CURVE_SQUARE = 4
    MP_CURVE_INVSQUARE = 8
    MP_CURVE_SINE = 16
  end

  enum DXVA2_SampleFlags : Int32
    DXVA2_SampleFlag_Palette_Changed = 1
    DXVA2_SampleFlag_SrcRect_Changed = 2
    DXVA2_SampleFlag_DstRect_Changed = 4
    DXVA2_SampleFlag_ColorData_Changed = 8
    DXVA2_SampleFlag_PlanarAlpha_Changed = 16
    DXVA2_SampleFlag_RFF = 65536
    DXVA2_SampleFlag_TFF = 131072
    DXVA2_SampleFlag_RFF_TFF_Present = 262144
    DXVA2_SampleFlagsMask = -65505
  end

  enum DXVA2_DestinationFlags : Int32
    DXVA2_DestinationFlag_Background_Changed = 1
    DXVA2_DestinationFlag_TargetRect_Changed = 2
    DXVA2_DestinationFlag_ColorData_Changed = 4
    DXVA2_DestinationFlag_Alpha_Changed = 8
    DXVA2_DestinationFlag_RFF = 65536
    DXVA2_DestinationFlag_TFF = 131072
    DXVA2_DestinationFlag_RFF_TFF_Present = 262144
    DXVA2_DestinationFlagMask = -65521
  end

  enum AMPlayListItemFlags : Int32
    AMPLAYLISTITEM_CANSKIP = 1
    AMPLAYLISTITEM_CANBIND = 2
  end

  enum AMPlayListFlags : Int32
    AMPLAYLIST_STARTINSCANMODE = 1
    AMPLAYLIST_FORCEBANNER = 2
  end

  enum AMPlayListEventFlags : Int32
    AMPLAYLISTEVENT_RESUME = 0
    AMPLAYLISTEVENT_BREAK = 1
    AMPLAYLISTEVENT_NEXT = 2
    AMPLAYLISTEVENT_MASK = 15
    AMPLAYLISTEVENT_REFRESH = 16
  end

  enum DISPID_TUNER : Int32
    DISPID_TUNER_TS_UNIQUENAME = 1
    DISPID_TUNER_TS_FRIENDLYNAME = 2
    DISPID_TUNER_TS_CLSID = 3
    DISPID_TUNER_TS_NETWORKTYPE = 4
    DISPID_TUNER_TS__NETWORKTYPE = 5
    DISPID_TUNER_TS_CREATETUNEREQUEST = 6
    DISPID_TUNER_TS_ENUMCATEGORYGUIDS = 7
    DISPID_TUNER_TS_ENUMDEVICEMONIKERS = 8
    DISPID_TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES = 9
    DISPID_TUNER_TS_FREQMAP = 10
    DISPID_TUNER_TS_DEFLOCATOR = 11
    DISPID_TUNER_TS_CLONE = 12
    DISPID_TUNER_TR_TUNINGSPACE = 1
    DISPID_TUNER_TR_COMPONENTS = 2
    DISPID_TUNER_TR_CLONE = 3
    DISPID_TUNER_TR_LOCATOR = 4
    DISPID_TUNER_CT_CATEGORY = 1
    DISPID_TUNER_CT_MEDIAMAJORTYPE = 2
    DISPID_TUNER_CT__MEDIAMAJORTYPE = 3
    DISPID_TUNER_CT_MEDIASUBTYPE = 4
    DISPID_TUNER_CT__MEDIASUBTYPE = 5
    DISPID_TUNER_CT_MEDIAFORMATTYPE = 6
    DISPID_TUNER_CT__MEDIAFORMATTYPE = 7
    DISPID_TUNER_CT_MEDIATYPE = 8
    DISPID_TUNER_CT_CLONE = 9
    DISPID_TUNER_LCT_LANGID = 100
    DISPID_TUNER_MP2CT_TYPE = 200
    DISPID_TUNER_ATSCCT_FLAGS = 300
    DISPID_TUNER_L_CARRFREQ = 1
    DISPID_TUNER_L_INNERFECMETHOD = 2
    DISPID_TUNER_L_INNERFECRATE = 3
    DISPID_TUNER_L_OUTERFECMETHOD = 4
    DISPID_TUNER_L_OUTERFECRATE = 5
    DISPID_TUNER_L_MOD = 6
    DISPID_TUNER_L_SYMRATE = 7
    DISPID_TUNER_L_CLONE = 8
    DISPID_TUNER_L_ATSC_PHYS_CHANNEL = 201
    DISPID_TUNER_L_ATSC_TSID = 202
    DISPID_TUNER_L_ATSC_MP2_PROGNO = 203
    DISPID_TUNER_L_DVBT_BANDWIDTH = 301
    DISPID_TUNER_L_DVBT_LPINNERFECMETHOD = 302
    DISPID_TUNER_L_DVBT_LPINNERFECRATE = 303
    DISPID_TUNER_L_DVBT_GUARDINTERVAL = 304
    DISPID_TUNER_L_DVBT_HALPHA = 305
    DISPID_TUNER_L_DVBT_TRANSMISSIONMODE = 306
    DISPID_TUNER_L_DVBT_INUSE = 307
    DISPID_TUNER_L_DVBT2_PHYSICALLAYERPIPEID = 351
    DISPID_TUNER_L_DVBS_POLARISATION = 401
    DISPID_TUNER_L_DVBS_WEST = 402
    DISPID_TUNER_L_DVBS_ORBITAL = 403
    DISPID_TUNER_L_DVBS_AZIMUTH = 404
    DISPID_TUNER_L_DVBS_ELEVATION = 405
    DISPID_TUNER_L_DVBS2_DISEQ_LNB_SOURCE = 406
    DISPID_TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE = 407
    DISPID_TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE = 408
    DISPID_TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE = 409
    DISPID_TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE = 410
    DISPID_TUNER_L_DVBS2_ROLLOFF = 411
    DISPID_TUNER_L_DVBS2_PILOT = 412
    DISPID_TUNER_L_ANALOG_STANDARD = 601
    DISPID_TUNER_L_DTV_O_MAJOR_CHANNEL = 701
    DISPID_TUNER_C_TYPE = 1
    DISPID_TUNER_C_STATUS = 2
    DISPID_TUNER_C_LANGID = 3
    DISPID_TUNER_C_DESCRIPTION = 4
    DISPID_TUNER_C_CLONE = 5
    DISPID_TUNER_C_MP2_PID = 101
    DISPID_TUNER_C_MP2_PCRPID = 102
    DISPID_TUNER_C_MP2_PROGNO = 103
    DISPID_TUNER_C_ANALOG_AUDIO = 201
    DISPID_TUNER_TS_DVB_SYSTEMTYPE = 101
    DISPID_TUNER_TS_DVB2_NETWORK_ID = 102
    DISPID_TUNER_TS_DVBS_LOW_OSC_FREQ = 1001
    DISPID_TUNER_TS_DVBS_HI_OSC_FREQ = 1002
    DISPID_TUNER_TS_DVBS_LNB_SWITCH_FREQ = 1003
    DISPID_TUNER_TS_DVBS_INPUT_RANGE = 1004
    DISPID_TUNER_TS_DVBS_SPECTRAL_INVERSION = 1005
    DISPID_TUNER_TS_AR_MINFREQUENCY = 101
    DISPID_TUNER_TS_AR_MAXFREQUENCY = 102
    DISPID_TUNER_TS_AR_STEP = 103
    DISPID_TUNER_TS_AR_COUNTRYCODE = 104
    DISPID_TUNER_TS_AUX_COUNTRYCODE = 101
    DISPID_TUNER_TS_ATV_MINCHANNEL = 101
    DISPID_TUNER_TS_ATV_MAXCHANNEL = 102
    DISPID_TUNER_TS_ATV_INPUTTYPE = 103
    DISPID_TUNER_TS_ATV_COUNTRYCODE = 104
    DISPID_TUNER_TS_ATSC_MINMINORCHANNEL = 201
    DISPID_TUNER_TS_ATSC_MAXMINORCHANNEL = 202
    DISPID_TUNER_TS_ATSC_MINPHYSCHANNEL = 203
    DISPID_TUNER_TS_ATSC_MAXPHYSCHANNEL = 204
    DISPID_TUNER_TS_DC_MINMAJORCHANNEL = 301
    DISPID_TUNER_TS_DC_MAXMAJORCHANNEL = 302
    DISPID_TUNER_TS_DC_MINSOURCEID = 303
    DISPID_TUNER_TS_DC_MAXSOURCEID = 304
    DISPID_CHTUNER_ATVAC_CHANNEL = 101
    DISPID_CHTUNER_ATVDC_SYSTEM = 101
    DISPID_CHTUNER_ATVDC_CONTENT = 102
    DISPID_CHTUNER_CIDTR_CHANNELID = 101
    DISPID_CHTUNER_CTR_CHANNEL = 101
    DISPID_CHTUNER_ACTR_MINOR_CHANNEL = 201
    DISPID_CHTUNER_DCTR_MAJOR_CHANNEL = 301
    DISPID_CHTUNER_DCTR_SRCID = 302
    DISPID_DVBTUNER_DVBC_ATTRIBUTESVALID = 101
    DISPID_DVBTUNER_DVBC_PID = 102
    DISPID_DVBTUNER_DVBC_TAG = 103
    DISPID_DVBTUNER_DVBC_COMPONENTTYPE = 104
    DISPID_DVBTUNER_ONID = 101
    DISPID_DVBTUNER_TSID = 102
    DISPID_DVBTUNER_SID = 103
    DISPID_MP2TUNER_TSID = 101
    DISPID_MP2TUNER_PROGNO = 102
    DISPID_MP2TUNERFACTORY_CREATETUNEREQUEST = 1
  end

  enum EnTvRat_System : Int32
    MPAA = 0
    US_TV = 1
    Canadian_English = 2
    Canadian_French = 3
    Reserved4 = 4
    System5 = 5
    System6 = 6
    Reserved7 = 7
    PBDA = 8
    AgeBased = 9
    TvRat_kSystems = 10
    TvRat_SystemDontKnow = 255
  end

  enum EnTvRat_GenericLevel : Int32
    TvRat_0 = 0
    TvRat_1 = 1
    TvRat_2 = 2
    TvRat_3 = 3
    TvRat_4 = 4
    TvRat_5 = 5
    TvRat_6 = 6
    TvRat_7 = 7
    TvRat_8 = 8
    TvRat_9 = 9
    TvRat_10 = 10
    TvRat_11 = 11
    TvRat_12 = 12
    TvRat_13 = 13
    TvRat_14 = 14
    TvRat_15 = 15
    TvRat_16 = 16
    TvRat_17 = 17
    TvRat_18 = 18
    TvRat_19 = 19
    TvRat_20 = 20
    TvRat_21 = 21
    TvRat_kLevels = 22
    TvRat_Unblock = -1
    TvRat_LevelDontKnow = 255
  end

  enum EnTvRat_MPAA : Int32
    MPAA_NotApplicable = 0
    MPAA_G = 1
    MPAA_PG = 2
    MPAA_PG13 = 3
    MPAA_R = 4
    MPAA_NC17 = 5
    MPAA_X = 6
    MPAA_NotRated = 7
  end

  enum EnTvRat_US_TV : Int32
    US_TV_None = 0
    US_TV_Y = 1
    US_TV_Y7 = 2
    US_TV_G = 3
    US_TV_PG = 4
    US_TV_14 = 5
    US_TV_MA = 6
    US_TV_None7 = 7
  end

  enum EnTvRat_CAE_TV : Int32
    CAE_TV_Exempt = 0
    CAE_TV_C = 1
    CAE_TV_C8 = 2
    CAE_TV_G = 3
    CAE_TV_PG = 4
    CAE_TV_14 = 5
    CAE_TV_18 = 6
    CAE_TV_Reserved = 7
  end

  enum EnTvRat_CAF_TV : Int32
    CAF_TV_Exempt = 0
    CAF_TV_G = 1
    CAF_TV_8 = 2
    CAF_TV_13 = 3
    CAF_TV_16 = 4
    CAF_TV_18 = 5
    CAF_TV_Reserved6 = 6
    CAF_TV_Reserved = 7
  end

  enum BfEnTvRat_GenericAttributes : Int32
    BfAttrNone = 0
    BfIsBlocked = 1
    BfIsAttr_1 = 2
    BfIsAttr_2 = 4
    BfIsAttr_3 = 8
    BfIsAttr_4 = 16
    BfIsAttr_5 = 32
    BfIsAttr_6 = 64
    BfIsAttr_7 = 128
    BfValidAttrSubmask = 255
  end

  enum BfEnTvRat_Attributes_US_TV : Int32
    US_TV_IsBlocked = 1
    US_TV_IsViolent = 2
    US_TV_IsSexualSituation = 4
    US_TV_IsAdultLanguage = 8
    US_TV_IsSexuallySuggestiveDialog = 16
    US_TV_ValidAttrSubmask = 31
  end

  enum BfEnTvRat_Attributes_MPAA : Int32
    MPAA_IsBlocked = 1
    MPAA_ValidAttrSubmask = 1
  end

  enum BfEnTvRat_Attributes_CAE_TV : Int32
    CAE_IsBlocked = 1
    CAE_ValidAttrSubmask = 1
  end

  enum BfEnTvRat_Attributes_CAF_TV : Int32
    CAF_IsBlocked = 1
    CAF_ValidAttrSubmask = 1
  end

  enum FormatNotSupportedEvents : Int32
    FORMATNOTSUPPORTED_CLEAR = 0
    FORMATNOTSUPPORTED_NOTSUPPORTED = 1
  end

  enum ProtType : Int32
    PROT_COPY_FREE = 1
    PROT_COPY_ONCE = 2
    PROT_COPY_NEVER = 3
    PROT_COPY_NEVER_REALLY = 4
    PROT_COPY_NO_MORE = 5
    PROT_COPY_FREE_CIT = 6
    PROT_COPY_BF = 7
    PROT_COPY_CN_RECORDING_STOP = 8
    PROT_COPY_FREE_SECURE = 9
    PROT_COPY_INVALID = 50
  end

  enum EncDecEvents : Int32
    ENCDEC_CPEVENT = 0
    ENCDEC_RECORDING_STATUS = 1
  end

  enum CPRecordingStatus : Int32
    RECORDING_STOPPED = 0
    RECORDING_STARTED = 1
  end

  enum CPEventBitShift : Int32
    CPEVENT_BITSHIFT_RATINGS = 0
    CPEVENT_BITSHIFT_COPP = 1
    CPEVENT_BITSHIFT_LICENSE = 2
    CPEVENT_BITSHIFT_ROLLBACK = 3
    CPEVENT_BITSHIFT_SAC = 4
    CPEVENT_BITSHIFT_DOWNRES = 5
    CPEVENT_BITSHIFT_STUBLIB = 6
    CPEVENT_BITSHIFT_UNTRUSTEDGRAPH = 7
    CPEVENT_BITSHIFT_PENDING_CERTIFICATE = 8
    CPEVENT_BITSHIFT_NO_PLAYREADY = 9
  end

  enum CPEvents : Int32
    CPEVENT_NONE = 0
    CPEVENT_RATINGS = 1
    CPEVENT_COPP = 2
    CPEVENT_LICENSE = 3
    CPEVENT_ROLLBACK = 4
    CPEVENT_SAC = 5
    CPEVENT_DOWNRES = 6
    CPEVENT_STUBLIB = 7
    CPEVENT_UNTRUSTEDGRAPH = 8
    CPEVENT_PROTECTWINDOWED = 9
  end

  enum RevokedComponent : Int32
    REVOKED_COPP = 0
    REVOKED_SAC = 1
    REVOKED_APP_STUB = 2
    REVOKED_SECURE_PIPELINE = 3
    REVOKED_MAX_TYPES = 4
  end

  enum EnTag_Mode : Int32
    EnTag_Remove = 0
    EnTag_Once = 1
    EnTag_Repeat = 2
  end

  enum COPPEventBlockReason : Int32
    COPP_Unknown = -1
    COPP_BadDriver = 0
    COPP_NoCardHDCPSupport = 1
    COPP_NoMonitorHDCPSupport = 2
    COPP_BadCertificate = 3
    COPP_InvalidBusProtection = 4
    COPP_AeroGlassOff = 5
    COPP_RogueApp = 6
    COPP_ForbiddenVideo = 7
    COPP_Activate = 8
    COPP_DigitalAudioUnprotected = 9
  end

  enum LicenseEventBlockReason : Int32
    LIC_BadLicense = 0
    LIC_NeedIndiv = 1
    LIC_Expired = 2
    LIC_NeedActivation = 3
    LIC_ExtenderBlocked = 4
  end

  enum DownResEventParam : Int32
    DOWNRES_Always = 0
    DOWNRES_InWindowOnly = 1
    DOWNRES_Undefined = 2
  end

  enum SegDispidList : Int32
    Dispidname = 0
    Dispidstatus = 1
    Dispiddevimagesourcewidth = 2
    Dispiddevimagesourceheight = 3
    Dispiddevcountrycode = 4
    Dispiddevoverscan = 5
    Dispidsegment = 6
    Dispiddevvolume = 7
    Dispiddevbalance = 8
    Dispiddevpower = 9
    Dispidtunechan = 10
    Dispiddevvideosubchannel = 11
    Dispiddevaudiosubchannel = 12
    Dispidchannelavailable = 13
    Dispiddevvideofrequency = 14
    Dispiddevaudiofrequency = 15
    Dispidcount = 16
    Dispiddevfilename = 17
    Dispidvisible = 18
    Dispidowner = 19
    Dispidmessagedrain = 20
    Dispidviewable = 21
    Dispiddevview = 22
    Dispidkscat = 23
    Dispidclsid = 24
    Dispid_kscat = 25
    Dispid_clsid = 26
    Dispidtune = 27
    Dispidts = 28
    Dispiddevsap = 29
    Dispidclip = 30
    Dispidrequestedcliprect = 31
    Dispidclippedsourcerect = 32
    Dispidavailablesourcerect = 33
    Dispidmediaposition = 34
    Dispiddevrun = 35
    Dispiddevpause = 36
    Dispiddevstop = 37
    Dispidccenable = 38
    Dispiddevstep = 39
    Dispiddevcanstep = 40
    Dispidsourcesize = 41
    Dispid_playtitle = 42
    Dispid_playchapterintitle = 43
    Dispid_playchapter = 44
    Dispid_playchaptersautostop = 45
    Dispid_playattime = 46
    Dispid_playattimeintitle = 47
    Dispid_playperiodintitleautostop = 48
    Dispid_replaychapter = 49
    Dispid_playprevchapter = 50
    Dispid_playnextchapter = 51
    Dispid_playforwards = 52
    Dispid_playbackwards = 53
    Dispid_stilloff = 54
    Dispid_audiolanguage = 55
    Dispid_showmenu = 56
    Dispid_resume = 57
    Dispid_returnfromsubmenu = 58
    Dispid_buttonsavailable = 59
    Dispid_currentbutton = 60
    Dispid_selectandactivatebutton = 61
    Dispid_activatebutton = 62
    Dispid_selectrightbutton = 63
    Dispid_selectleftbutton = 64
    Dispid_selectlowerbutton = 65
    Dispid_selectupperbutton = 66
    Dispid_activateatposition = 67
    Dispid_selectatposition = 68
    Dispid_buttonatposition = 69
    Dispid_numberofchapters = 70
    Dispid_totaltitletime = 71
    Dispid_titlesavailable = 72
    Dispid_volumesavailable = 73
    Dispid_currentvolume = 74
    Dispid_currentdiscside = 75
    Dispid_currentdomain = 76
    Dispid_currentchapter = 77
    Dispid_currenttitle = 78
    Dispid_currenttime = 79
    Dispid_framespersecond = 80
    Dispid_dvdtimecode2bstr = 81
    Dispid_dvddirectory = 82
    Dispid_issubpicturestreamenabled = 83
    Dispid_isaudiostreamenabled = 84
    Dispid_currentsubpicturestream = 85
    Dispid_subpicturelanguage = 86
    Dispid_currentaudiostream = 87
    Dispid_audiostreamsavailable = 88
    Dispid_anglesavailable = 89
    Dispid_currentangle = 90
    Dispid_ccactive = 91
    Dispid_currentccservice = 92
    Dispid_subpicturestreamsavailable = 93
    Dispid_subpictureon = 94
    Dispid_dvduniqueid = 95
    Dispid_enableresetonstop = 96
    Dispid_acceptparentallevelchange = 97
    Dispid_notifyparentallevelchange = 98
    Dispid_selectparentalcountry = 99
    Dispid_selectparentallevel = 100
    Dispid_titleparentallevels = 101
    Dispid_playerparentalcountry = 102
    Dispid_playerparentallevel = 103
    Dispid_eject = 104
    Dispid_uopvalid = 105
    Dispid_sprm = 106
    Dispid_gprm = 107
    Dispid_dvdtextstringtype = 108
    Dispid_dvdtextstring = 109
    Dispid_dvdtextnumberofstrings = 110
    Dispid_dvdtextnumberoflanguages = 111
    Dispid_dvdtextlanguagelcid = 112
    Dispid_regionchange = 113
    Dispid_dvdadm = 114
    Dispid_deletebookmark = 115
    Dispid_restorebookmark = 116
    Dispid_savebookmark = 117
    Dispid_selectdefaultaudiolanguage = 118
    Dispid_selectdefaultsubpicturelanguage = 119
    Dispid_preferredsubpicturestream = 120
    Dispid_defaultmenulanguage = 121
    Dispid_defaultsubpicturelanguage = 122
    Dispid_defaultaudiolanguage = 123
    Dispid_defaultsubpicturelanguageext = 124
    Dispid_defaultaudiolanguageext = 125
    Dispid_languagefromlcid = 126
    Dispid_karaokeaudiopresentationmode = 127
    Dispid_karaokechannelcontent = 128
    Dispid_karaokechannelassignment = 129
    Dispid_restorepreferredsettings = 130
    Dispid_buttonrect = 131
    Dispid_dvdscreeninmousecoordinates = 132
    Dispid_customcompositorclass = 133
    Dispidcustomcompositorclass = 134
    Dispid_customcompositor = 135
    Dispidmixerbitmap = 136
    Dispid_mixerbitmap = 137
    Dispidmixerbitmapopacity = 138
    Dispidmixerbitmaprect = 139
    Dispidsetupmixerbitmap = 140
    Dispidusingoverlay = 141
    Dispiddisplaychange = 142
    Dispidrepaint = 143
    Dispid_isequaldevice = 144
    Dispidrate = 145
    Dispidposition = 146
    Dispidpositionmode = 147
    Dispidlength = 148
    Dispidchangepassword = 149
    Dispidsaveparentallevel = 150
    Dispidsaveparentalcountry = 151
    Dispidconfirmpassword = 152
    Dispidgetparentallevel = 153
    Dispidgetparentalcountry = 154
    Dispiddefaultaudiolcid = 155
    Dispiddefaultsubpicturelcid = 156
    Dispiddefaultmenulcid = 157
    Dispidbookmarkonstop = 158
    Dispidmaxvidrect = 159
    Dispidminvidrect = 160
    Dispidcapture = 161
    Dispid_decimateinput = 162
    Dispidalloctor = 163
    Dispid_allocator = 164
    Dispidallocpresentid = 165
    Dispidsetallocator = 166
    Dispid_setallocator = 167
    Dispidstreambuffersinkname = 168
    Dispidstreambuffersourcename = 169
    Dispidstreambuffercontentrecording = 170
    Dispidstreambufferreferencerecording = 171
    Dispidstarttime = 172
    Dispidstoptime = 173
    Dispidrecordingstopped = 174
    Dispidrecordingstarted = 175
    Dispidnamesetlock = 176
    Dispidrecordingtype = 177
    Dispidstart = 178
    Dispidrecordingattribute = 179
    Dispid_recordingattribute = 180
    Dispidsbeconfigure = 181
    Dispid_currentratings = 182
    Dispid_maxratingslevel = 183
    Dispid_audioencoderint = 184
    Dispid_videoencoderint = 185
    Dispidservice = 186
    Dispid_blockunrated = 187
    Dispid_unrateddelay = 188
    Dispid_suppresseffects = 189
    Dispidsbesource = 190
    Dispidsetsinkfilter = 191
    Dispid_sinkstreams = 192
    Dispidtvformats = 193
    Dispidmodes = 194
    Dispidauxinputs = 195
    Dispidteletextfilter = 196
    Dispid_channelchangeint = 197
    Dispidunlockprofile = 198
    Dispid_addfilter = 199
    Dispidsetminseek = 200
    Dispidrateex = 201
    Dispidaudiocounter = 202
    Dispidvideocounter = 203
    Dispidcccounter = 204
    Dispidwstcounter = 205
    Dispid_audiocounter = 206
    Dispid_videocounter = 207
    Dispid_cccounter = 208
    Dispid_wstcounter = 209
    Dispidaudioanalysis = 210
    Dispidvideoanalysis = 211
    Dispiddataanalysis = 212
    Dispidaudio_analysis = 213
    Dispidvideo_analysis = 214
    Dispiddata_analysis = 215
    Dispid_resetfilterlist = 216
    Dispiddevicepath = 217
    Dispid_sourcefilter = 218
    Dispid__sourcefilter = 219
    Dispiduserevent = 220
    Dispid_bookmark = 221
    LastReservedDeviceDispid = 16383
  end

  enum SegEventidList : Int32
    Eventidstatechange = 0
    Eventidontunechanged = 1
    Eventidendofmedia = 2
    Eventiddvdnotify = 3
    Eventidplayforwards = 4
    Eventidplaybackwards = 5
    Eventidshowmenu = 6
    Eventidresume = 7
    Eventidselectoractivatebutton = 8
    Eventidstilloff = 9
    Eventidpauseon = 10
    Eventidchangecurrentaudiostream = 11
    Eventidchangecurrentsubpicturestream = 12
    Eventidchangecurrentangle = 13
    Eventidplayattimeintitle = 14
    Eventidplayattime = 15
    Eventidplaychapterintitle = 16
    Eventidplaychapter = 17
    Eventidreplaychapter = 18
    Eventidplaynextchapter = 19
    Eventidstop = 20
    Eventidreturnfromsubmenu = 21
    Eventidplaytitle = 22
    Eventidplayprevchapter = 23
    Eventidchangekaraokepresmode = 24
    Eventidchangevideopresmode = 25
    Eventidoverlayunavailable = 26
    Eventidsinkcertificatefailure = 27
    Eventidsinkcertificatesuccess = 28
    Eventidsourcecertificatefailure = 29
    Eventidsourcecertificatesuccess = 30
    Eventidratingsblocked = 31
    Eventidratingsunlocked = 32
    Eventidratingschanged = 33
    Eventidwritefailure = 34
    Eventidtimehole = 35
    Eventidstaledataread = 36
    Eventidcontentbecomingstale = 37
    Eventidstalefiledeleted = 38
    Eventidencryptionon = 39
    Eventidencryptionoff = 40
    Eventidratechange = 41
    Eventidlicensechange = 42
    Eventidcoppblocked = 43
    Eventidcoppunblocked = 44
    Dispidlicenseerrorcode = 45
    Eventidbroadcastevent = 46
    Eventidbroadcasteventex = 47
    Eventidcontentprimarilyaudio = 48
    Dispidavdecaudiodualmonoevent = 49
    Dispidavaudiosamplerateevent = 50
    Dispidavaudiochannelconfigevent = 51
    Dispidavaudiochannelcountevent = 52
    Dispidavdeccommonmeanbitrateevent = 53
    Dispidavddsurroundmodeevent = 54
    Dispidavdeccommoninputformatevent = 55
    Dispidavdeccommonoutputformatevent = 56
    Eventidwritefailureclear = 57
    LastReservedDeviceEvent = 16383
  end

  enum PositionModeList : Int32
    FrameMode = 0
    TenthsSecondsMode = 1
  end

  enum RecordingType : Int32
    CONTENT = 0
    REFERENCE = 1
  end

  enum MSVidCCService : Int32
    None = 0
    Caption1 = 1
    Caption2 = 2
    Text1 = 3
    Text2 = 4
    XDS = 5
  end

  enum MSVidSinkStreams : Int32
    MSVidSink_Video = 1
    MSVidSink_Audio = 2
    MSVidSink_Other = 4
  end

  enum MSVidSegmentType : Int32
    MSVidSEG_SOURCE = 0
    MSVidSEG_XFORM = 1
    MSVidSEG_DEST = 2
  end

  enum MSVidCtlButtonstate : Int32
    MSVIDCTL_LEFT_BUTTON = 1
    MSVIDCTL_RIGHT_BUTTON = 2
    MSVIDCTL_MIDDLE_BUTTON = 4
    MSVIDCTL_X_BUTTON1 = 8
    MSVIDCTL_X_BUTTON2 = 16
    MSVIDCTL_SHIFT = 1
    MSVIDCTL_CTRL = 2
    MSVIDCTL_ALT = 4
  end

  enum DVDMenuIDConstants : Int32
    Dvdmenu_title = 2
    Dvdmenu_root = 3
    Dvdmenu_subpicture = 4
    Dvdmenu_audio = 5
    Dvdmenu_angle = 6
    Dvdmenu_chapter = 7
  end

  enum DVDFilterState : Int32
    Dvdstate_undefined = -2
    Dvdstate_unitialized = -1
    Dvdstate_stopped = 0
    Dvdstate_paused = 1
    Dvdstate_running = 2
  end

  enum DVDTextStringType : Int32
    Dvdstruct_volume = 1
    Dvdstruct_title = 2
    Dvdstruct_parentalid = 3
    Dvdstruct_partoftitle = 4
    Dvdstruct_cell = 5
    Dvdstream_audio = 16
    Dvdstream_subpicture = 17
    Dvdstream_angle = 18
    Dvdchannel_audio = 32
    Dvdgeneral_name = 48
    Dvdgeneral_comments = 49
    Dvdtitle_series = 56
    Dvdtitle_movie = 57
    Dvdtitle_video = 58
    Dvdtitle_album = 59
    Dvdtitle_song = 60
    Dvdtitle_other = 63
    Dvdtitle_sub_series = 64
    Dvdtitle_sub_movie = 65
    Dvdtitle_sub_video = 66
    Dvdtitle_sub_album = 67
    Dvdtitle_sub_song = 68
    Dvdtitle_sub_other = 71
    Dvdtitle_orig_series = 72
    Dvdtitle_orig_movie = 73
    Dvdtitle_orig_video = 74
    Dvdtitle_orig_album = 75
    Dvdtitle_orig_song = 76
    Dvdtitle_orig_other = 79
    Dvdother_scene = 80
    Dvdother_cut = 81
    Dvdother_take = 82
  end

  enum DVDSPExt : Int32
    Dvdspext_notspecified = 0
    Dvdspext_caption_normal = 1
    Dvdspext_caption_big = 2
    Dvdspext_caption_children = 3
    Dvdspext_cc_normal = 5
    Dvdspext_cc_big = 6
    Dvdspext_cc_children = 7
    Dvdspext_forced = 9
    Dvdspext_directorcomments_normal = 13
    Dvdspext_directorcomments_big = 14
    Dvdspext_directorcomments_children = 15
  end

  enum SourceSizeList : Int32
    Sslfullsize = 0
    Sslclipbyoverscan = 1
    Sslclipbycliprect = 2
  end

  enum MSViddispidList : Int32
    Dispidinputs = 0
    Dispidoutputs = 1
    Dispid_inputs = 2
    Dispid_outputs = 3
    Dispidvideorenderers = 4
    Dispidaudiorenderers = 5
    Dispidfeatures = 6
    Dispidinput = 7
    Dispidoutput = 8
    Dispidvideorenderer = 9
    Dispidaudiorenderer = 10
    Dispidselectedfeatures = 11
    Dispidview = 12
    Dispidbuild = 13
    Dispidpause = 14
    Dispidrun = 15
    Dispidstop = 16
    Dispiddecompose = 17
    Dispiddisplaysize = 18
    Dispidmaintainaspectratio = 19
    Dispidcolorkey = 20
    Dispidstatechange = 21
    Dispidgetstate = 22
    Dispidunbind = 23
    Dispidbind = 24
    Dispiddisablevideo = 25
    Dispiddisableaudio = 26
    Dispidviewnext = 27
    Dispidservicep = 28
  end

  enum DisplaySizeList : Int32
    Dsldefaultsize = 0
    Dslsourcesize = 0
    Dslhalfsourcesize = 1
    Dsldoublesourcesize = 2
    Dslfullscreen = 3
    Dslhalfscreen = 4
    Dslquarterscreen = 5
    Dslsixteenthscreen = 6
  end

  enum MSVidCtlStateList : Int32
    STATE_UNBUILT = -1
    STATE_STOP = 0
    STATE_PAUSE = 1
    STATE_PLAY = 2
  end

  enum RECORDING_TYPE : Int32
    RECORDING_TYPE_CONTENT = 0
    RECORDING_TYPE_REFERENCE = 1
  end

  enum STREAMBUFFER_ATTR_DATATYPE : Int32
    STREAMBUFFER_TYPE_DWORD = 0
    STREAMBUFFER_TYPE_STRING = 1
    STREAMBUFFER_TYPE_BINARY = 2
    STREAMBUFFER_TYPE_BOOL = 3
    STREAMBUFFER_TYPE_QWORD = 4
    STREAMBUFFER_TYPE_WORD = 5
    STREAMBUFFER_TYPE_GUID = 6
  end

  enum CROSSBAR_DEFAULT_FLAGS : Int32
    DEF_MODE_PROFILE = 1
    DEF_MODE_STREAMS = 2
  end

  enum MPEG_CURRENT_NEXT_BIT : Int32
    MPEG_SECTION_IS_NEXT = 0
    MPEG_SECTION_IS_CURRENT = 1
  end

  enum MPEG_CONTEXT_TYPE : Int32
    MPEG_CONTEXT_BCS_DEMUX = 0
    MPEG_CONTEXT_WINSOCK = 1
  end

  enum MPEG_REQUEST_TYPE : Int32
    MPEG_RQST_UNKNOWN = 0
    MPEG_RQST_GET_SECTION = 1
    MPEG_RQST_GET_SECTION_ASYNC = 2
    MPEG_RQST_GET_TABLE = 3
    MPEG_RQST_GET_TABLE_ASYNC = 4
    MPEG_RQST_GET_SECTIONS_STREAM = 5
    MPEG_RQST_GET_PES_STREAM = 6
    MPEG_RQST_GET_TS_STREAM = 7
    MPEG_RQST_START_MPE_STREAM = 8
  end

  enum VA_VIDEO_FORMAT : Int32
    VA_VIDEO_COMPONENT = 0
    VA_VIDEO_PAL = 1
    VA_VIDEO_NTSC = 2
    VA_VIDEO_SECAM = 3
    VA_VIDEO_MAC = 4
    VA_VIDEO_UNSPECIFIED = 5
  end

  enum VA_COLOR_PRIMARIES : Int32
    VA_PRIMARIES_ITU_R_BT_709 = 1
    VA_PRIMARIES_UNSPECIFIED = 2
    VA_PRIMARIES_ITU_R_BT_470_SYSTEM_M = 4
    VA_PRIMARIES_ITU_R_BT_470_SYSTEM_B_G = 5
    VA_PRIMARIES_SMPTE_170M = 6
    VA_PRIMARIES_SMPTE_240M = 7
    VA_PRIMARIES_H264_GENERIC_FILM = 8
  end

  enum VA_TRANSFER_CHARACTERISTICS : Int32
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_709 = 1
    VA_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_M = 4
    VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_B_G = 5
    VA_TRANSFER_CHARACTERISTICS_SMPTE_170M = 6
    VA_TRANSFER_CHARACTERISTICS_SMPTE_240M = 7
    VA_TRANSFER_CHARACTERISTICS_LINEAR = 8
    VA_TRANSFER_CHARACTERISTICS_H264_LOG_100_TO_1 = 9
    VA_TRANSFER_CHARACTERISTICS_H264_LOG_316_TO_1 = 10
  end

  enum VA_MATRIX_COEFFICIENTS : Int32
    VA_MATRIX_COEFF_H264_RGB = 0
    VA_MATRIX_COEFF_ITU_R_BT_709 = 1
    VA_MATRIX_COEFF_UNSPECIFIED = 2
    VA_MATRIX_COEFF_FCC = 4
    VA_MATRIX_COEFF_ITU_R_BT_470_SYSTEM_B_G = 5
    VA_MATRIX_COEFF_SMPTE_170M = 6
    VA_MATRIX_COEFF_SMPTE_240M = 7
    VA_MATRIX_COEFF_H264_YCgCo = 8
  end

  enum DVB_STRCONV_MODE : Int32
    STRCONV_MODE_DVB = 0
    STRCONV_MODE_DVB_EMPHASIS = 1
    STRCONV_MODE_DVB_WITHOUT_EMPHASIS = 2
    STRCONV_MODE_ISDB = 3
  end

  enum CRID_LOCATION : Int32
    CRID_LOCATION_IN_DESCRIPTOR = 0
    CRID_LOCATION_IN_CIT = 1
    CRID_LOCATION_DVB_RESERVED1 = 2
    CRID_LOCATION_DVB_RESERVED2 = 3
  end

  enum DESC_LINKAGE_TYPE : Int32
    DESC_LINKAGE_RESERVED0 = 0
    DESC_LINKAGE_INFORMATION = 1
    DESC_LINKAGE_EPG = 2
    DESC_LINKAGE_CA_REPLACEMENT = 3
    DESC_LINKAGE_COMPLETE_NET_BOUQUET_SI = 4
    DESC_LINKAGE_REPLACEMENT = 5
    DESC_LINKAGE_DATA = 6
    DESC_LINKAGE_RESERVED1 = 7
    DESC_LINKAGE_USER = 8
    DESC_LINKAGE_RESERVED2 = 255
  end

  enum ChannelChangeSpanningEvent_State : Int32
    ChannelChangeSpanningEvent_Start = 0
    ChannelChangeSpanningEvent_End = 2
  end

  enum ChannelType : Int32
    ChannelTypeNone = 0
    ChannelTypeOther = 1
    ChannelTypeVideo = 2
    ChannelTypeAudio = 4
    ChannelTypeText = 8
    ChannelTypeSubtitles = 16
    ChannelTypeCaptions = 32
    ChannelTypeSuperimpose = 64
    ChannelTypeData = 128
  end

  enum SignalAndServiceStatusSpanningEvent_State : Int32
    SignalAndServiceStatusSpanningEvent_None = -1
    SignalAndServiceStatusSpanningEvent_Clear = 0
    SignalAndServiceStatusSpanningEvent_NoTVSignal = 1
    SignalAndServiceStatusSpanningEvent_ServiceOffAir = 2
    SignalAndServiceStatusSpanningEvent_WeakTVSignal = 3
    SignalAndServiceStatusSpanningEvent_NoSubscription = 4
    SignalAndServiceStatusSpanningEvent_AllAVScrambled = 5
  end

  enum KSPROPERTY_BDA_ETHERNET_FILTER : Int32
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE = 0
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST = 1
    KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE = 2
  end

  enum KSPROPERTY_BDA_IPv4_FILTER : Int32
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE = 0
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST = 1
    KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE = 2
  end

  enum KSPROPERTY_BDA_IPv6_FILTER : Int32
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE = 0
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST = 1
    KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE = 2
  end

  enum KSPROPERTY_BDA_SIGNAL_STATS : Int32
    KSPROPERTY_BDA_SIGNAL_STRENGTH = 0
    KSPROPERTY_BDA_SIGNAL_QUALITY = 1
    KSPROPERTY_BDA_SIGNAL_PRESENT = 2
    KSPROPERTY_BDA_SIGNAL_LOCKED = 3
    KSPROPERTY_BDA_SAMPLE_TIME = 4
    KSPROPERTY_BDA_SIGNAL_LOCK_CAPS = 5
    KSPROPERTY_BDA_SIGNAL_LOCK_TYPE = 6
  end

  enum BDA_LockType : Int32
    Bda_LockType_None = 0
    Bda_LockType_PLL = 1
    Bda_LockType_DecoderDemod = 2
    Bda_LockType_Complete = 128
  end

  enum KSMETHOD_BDA_CHANGE_SYNC : Int32
    KSMETHOD_BDA_START_CHANGES = 0
    KSMETHOD_BDA_CHECK_CHANGES = 1
    KSMETHOD_BDA_COMMIT_CHANGES = 2
    KSMETHOD_BDA_GET_CHANGE_STATE = 3
  end

  enum KSMETHOD_BDA_DEVICE_CONFIGURATION : Int32
    KSMETHOD_BDA_CREATE_PIN_FACTORY = 0
    KSMETHOD_BDA_DELETE_PIN_FACTORY = 1
    KSMETHOD_BDA_CREATE_TOPOLOGY = 2
  end

  enum KSPROPERTY_BDA_TOPOLOGY : Int32
    KSPROPERTY_BDA_NODE_TYPES = 0
    KSPROPERTY_BDA_PIN_TYPES = 1
    KSPROPERTY_BDA_TEMPLATE_CONNECTIONS = 2
    KSPROPERTY_BDA_NODE_METHODS = 3
    KSPROPERTY_BDA_NODE_PROPERTIES = 4
    KSPROPERTY_BDA_NODE_EVENTS = 5
    KSPROPERTY_BDA_CONTROLLING_PIN_ID = 6
    KSPROPERTY_BDA_NODE_DESCRIPTORS = 7
  end

  enum KSPROPERTY_BDA_PIN_CONTROL : Int32
    KSPROPERTY_BDA_PIN_ID = 0
    KSPROPERTY_BDA_PIN_TYPE = 1
  end

  enum KSPROPERTY_BDA_PIN_EVENT : Int32
    KSEVENT_BDA_PIN_CONNECTED = 0
    KSEVENT_BDA_PIN_DISCONNECTED = 1
  end

  enum KSPROPERTY_BDA_VOID_TRANSFORM : Int32
    KSPROPERTY_BDA_VOID_TRANSFORM_START = 0
    KSPROPERTY_BDA_VOID_TRANSFORM_STOP = 1
  end

  enum KSPROPERTY_BDA_NULL_TRANSFORM : Int32
    KSPROPERTY_BDA_NULL_TRANSFORM_START = 0
    KSPROPERTY_BDA_NULL_TRANSFORM_STOP = 1
  end

  enum KSPROPERTY_BDA_FREQUENCY_FILTER : Int32
    KSPROPERTY_BDA_RF_TUNER_FREQUENCY = 0
    KSPROPERTY_BDA_RF_TUNER_POLARITY = 1
    KSPROPERTY_BDA_RF_TUNER_RANGE = 2
    KSPROPERTY_BDA_RF_TUNER_TRANSPONDER = 3
    KSPROPERTY_BDA_RF_TUNER_BANDWIDTH = 4
    KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER = 5
    KSPROPERTY_BDA_RF_TUNER_CAPS = 6
    KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS = 7
    KSPROPERTY_BDA_RF_TUNER_STANDARD = 8
    KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE = 9
  end

  enum BDA_SignalType : Int32
    Bda_SignalType_Unknown = 0
    Bda_SignalType_Analog = 1
    Bda_SignalType_Digital = 2
  end

  enum BDA_DigitalSignalStandard : Int32
    Bda_DigitalStandard_None = 0
    Bda_DigitalStandard_DVB_T = 1
    Bda_DigitalStandard_DVB_S = 2
    Bda_DigitalStandard_DVB_C = 4
    Bda_DigitalStandard_ATSC = 8
    Bda_DigitalStandard_ISDB_T = 16
    Bda_DigitalStandard_ISDB_S = 32
    Bda_DigitalStandard_ISDB_C = 64
  end

  enum KSEVENT_BDA_TUNER : Int32
    KSEVENT_BDA_TUNER_SCAN = 0
  end

  enum KSPROPERTY_BDA_LNB_INFO : Int32
    KSPROPERTY_BDA_LNB_LOF_LOW_BAND = 0
    KSPROPERTY_BDA_LNB_LOF_HIGH_BAND = 1
    KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY = 2
  end

  enum KSPROPERTY_BDA_DISEQC_COMMAND : Int32
    KSPROPERTY_BDA_DISEQC_ENABLE = 0
    KSPROPERTY_BDA_DISEQC_LNB_SOURCE = 1
    KSPROPERTY_BDA_DISEQC_USETONEBURST = 2
    KSPROPERTY_BDA_DISEQC_REPEATS = 3
    KSPROPERTY_BDA_DISEQC_SEND = 4
    KSPROPERTY_BDA_DISEQC_RESPONSE = 5
  end

  enum KSPROPERTY_BDA_DISEQC_EVENT : Int32
    KSEVENT_BDA_DISEQC_DATA_RECEIVED = 0
  end

  enum KSPROPERTY_BDA_DIGITAL_DEMODULATOR : Int32
    KSPROPERTY_BDA_MODULATION_TYPE = 0
    KSPROPERTY_BDA_INNER_FEC_TYPE = 1
    KSPROPERTY_BDA_INNER_FEC_RATE = 2
    KSPROPERTY_BDA_OUTER_FEC_TYPE = 3
    KSPROPERTY_BDA_OUTER_FEC_RATE = 4
    KSPROPERTY_BDA_SYMBOL_RATE = 5
    KSPROPERTY_BDA_SPECTRAL_INVERSION = 6
    KSPROPERTY_BDA_GUARD_INTERVAL = 7
    KSPROPERTY_BDA_TRANSMISSION_MODE = 8
    KSPROPERTY_BDA_ROLL_OFF = 9
    KSPROPERTY_BDA_PILOT = 10
    KSPROPERTY_BDA_SIGNALTIMEOUTS = 11
    KSPROPERTY_BDA_PLP_NUMBER = 12
  end

  enum KSPROPERTY_BDA_AUTODEMODULATE : Int32
    KSPROPERTY_BDA_AUTODEMODULATE_START = 0
    KSPROPERTY_BDA_AUTODEMODULATE_STOP = 1
  end

  enum KSPROPERTY_IDS_BDA_TABLE : Int32
    KSPROPERTY_BDA_TABLE_SECTION = 0
  end

  enum KSPROPERTY_BDA_PIDFILTER : Int32
    KSPROPERTY_BDA_PIDFILTER_MAP_PIDS = 0
    KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS = 1
    KSPROPERTY_BDA_PIDFILTER_LIST_PIDS = 2
  end

  enum KSPROPERTY_BDA_CA : Int32
    KSPROPERTY_BDA_ECM_MAP_STATUS = 0
    KSPROPERTY_BDA_CA_MODULE_STATUS = 1
    KSPROPERTY_BDA_CA_SMART_CARD_STATUS = 2
    KSPROPERTY_BDA_CA_MODULE_UI = 3
    KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS = 4
    KSPROPERTY_BDA_CA_REMOVE_PROGRAM = 5
  end

  enum KSPROPERTY_BDA_CA_EVENT : Int32
    KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED = 0
    KSEVENT_BDA_CA_MODULE_STATUS_CHANGED = 1
    KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED = 2
    KSEVENT_BDA_CA_MODULE_UI_REQUESTED = 3
  end

  enum KSMETHOD_BDA_DRM : Int32
    KSMETHOD_BDA_DRM_CURRENT = 0
    KSMETHOD_BDA_DRM_DRMSTATUS = 1
  end

  enum KSMETHOD_BDA_WMDRM : Int32
    KSMETHOD_BDA_WMDRM_STATUS = 0
    KSMETHOD_BDA_WMDRM_REVINFO = 1
    KSMETHOD_BDA_WMDRM_CRL = 2
    KSMETHOD_BDA_WMDRM_MESSAGE = 3
    KSMETHOD_BDA_WMDRM_REISSUELICENSE = 4
    KSMETHOD_BDA_WMDRM_RENEWLICENSE = 5
    KSMETHOD_BDA_WMDRM_LICENSE = 6
    KSMETHOD_BDA_WMDRM_KEYINFO = 7
  end

  enum KSMETHOD_BDA_WMDRM_TUNER : Int32
    KSMETHOD_BDA_WMDRMTUNER_CANCELCAPTURETOKEN = 0
    KSMETHOD_BDA_WMDRMTUNER_SETPIDPROTECTION = 1
    KSMETHOD_BDA_WMDRMTUNER_GETPIDPROTECTION = 2
    KSMETHOD_BDA_WMDRMTUNER_SETSYNCVALUE = 3
    KSMETHOD_BDA_WMDRMTUNER_STARTCODEPROFILE = 4
    KSMETHOD_BDA_WMDRMTUNER_PURCHASE_ENTITLEMENT = 5
  end

  enum KSMETHOD_BDA_EVENTING_SERVICE : Int32
    KSMETHOD_BDA_EVENT_DATA = 0
    KSMETHOD_BDA_EVENT_COMPLETE = 1
  end

  enum KSEVENT_BDA_EVENT_TYPE : Int32
    KSEVENT_BDA_EVENT_PENDINGEVENT = 0
  end

  enum KSMETHOD_BDA_DEBUG_SERVICE : Int32
    KSMETHOD_BDA_DEBUG_LEVEL = 0
    KSMETHOD_BDA_DEBUG_DATA = 1
  end

  enum KSMETHOD_BDA_TUNER_SERVICE : Int32
    KSMETHOD_BDA_TUNER_SETTUNER = 0
    KSMETHOD_BDA_TUNER_GETTUNERSTATE = 1
    KSMETHOD_BDA_TUNER_SIGNALNOISERATIO = 2
  end

  enum KSMETHOD_BDA_GPNV_SERVICE : Int32
    KSMETHOD_BDA_GPNV_GETVALUE = 0
    KSMETHOD_BDA_GPNV_SETVALUE = 1
    KSMETHOD_BDA_GPNV_NAMEFROMINDEX = 2
    KSMETHOD_BDA_GPNV_GETVALUEUPDATENAME = 3
  end

  enum KSMETHOD_BDA_MUX_SERVICE : Int32
    KSMETHOD_BDA_MUX_GETPIDLIST = 0
    KSMETHOD_BDA_MUX_SETPIDLIST = 1
  end

  enum KSMETHOD_BDA_SCAN_SERVICE : Int32
    KSMETHOD_BDA_SCAN_CAPABILTIES = 0
    KSMETHOD_BDA_SCANNING_STATE = 1
    KSMETHOD_BDA_SCAN_FILTER = 2
    KSMETHOD_BDA_SCAN_START = 3
    KSMETHOD_BDA_SCAN_RESUME = 4
    KSMETHOD_BDA_SCAN_STOP = 5
  end

  enum KSMETHOD_BDA_GDDS_SERVICE : Int32
    KSMETHOD_BDA_GDDS_DATATYPE = 0
    KSMETHOD_BDA_GDDS_DATA = 1
    KSMETHOD_BDA_GDDS_TUNEXMLFROMIDX = 2
    KSMETHOD_BDA_GDDS_GETSERVICES = 3
    KSMETHOD_BDA_GDDS_SERVICEFROMTUNEXML = 4
    KSMETHOD_BDA_GDDS_DATAUPDATE = 5
  end

  enum KSMETHOD_BDA_CAS_SERVICE : Int32
    KSMETHOD_BDA_CAS_CHECKENTITLEMENTTOKEN = 0
    KSMETHOD_BDA_CAS_SETCAPTURETOKEN = 1
    KSMETHOD_BDA_CAS_OPENBROADCASTMMI = 2
    KSMETHOD_BDA_CAS_CLOSEMMIDIALOG = 3
  end

  enum KSMETHOD_BDA_ISDB_CAS : Int32
    KSMETHOD_BDA_ISDBCAS_SETREQUEST = 0
    KSMETHOD_BDA_ISDBCAS_RESPONSEDATA = 1
  end

  enum KSMETHOD_BDA_TS_SELECTOR : Int32
    KSMETHOD_BDA_TS_SELECTOR_SETTSID = 0
    KSMETHOD_BDA_TS_SELECTOR_GETTSINFORMATION = 1
  end

  enum KSMETHOD_BDA_USERACTIVITY_SERVICE : Int32
    KSMETHOD_BDA_USERACTIVITY_USEREASON = 0
    KSMETHOD_BDA_USERACTIVITY_INTERVAL = 1
    KSMETHOD_BDA_USERACTIVITY_DETECTED = 2
  end

  enum VIDEOENCODER_BITRATE_MODE : Int32
    ConstantBitRate = 0
    VariableBitRateAverage = 1
    VariableBitRatePeak = 2
  end

  enum COPP_HDCP_Protection_Level : Int32
    COPP_HDCP_Level0 = 0
    COPP_HDCP_LevelMin = 0
    COPP_HDCP_Level1 = 1
    COPP_HDCP_LevelMax = 1
    COPP_HDCP_ForceDWORD = 2147483647
  end

  enum COPP_CGMSA_Protection_Level : Int32
    COPP_CGMSA_Disabled = 0
    COPP_CGMSA_LevelMin = 0
    COPP_CGMSA_CopyFreely = 1
    COPP_CGMSA_CopyNoMore = 2
    COPP_CGMSA_CopyOneGeneration = 3
    COPP_CGMSA_CopyNever = 4
    COPP_CGMSA_RedistributionControlRequired = 8
    COPP_CGMSA_LevelMax = 12
    COPP_CGMSA_ForceDWORD = 2147483647
  end

  enum COPP_ACP_Protection_Level : Int32
    COPP_ACP_Level0 = 0
    COPP_ACP_LevelMin = 0
    COPP_ACP_Level1 = 1
    COPP_ACP_Level2 = 2
    COPP_ACP_Level3 = 3
    COPP_ACP_LevelMax = 3
    COPP_ACP_ForceDWORD = 2147483647
  end

  enum COPP_TVProtectionStandard : Int32
    COPP_ProtectionStandard_Unknown = -2147483648
    COPP_ProtectionStandard_None = 0
    COPP_ProtectionStandard_IEC61880_525i = 1
    COPP_ProtectionStandard_IEC61880_2_525i = 2
    COPP_ProtectionStandard_IEC62375_625p = 4
    COPP_ProtectionStandard_EIA608B_525 = 8
    COPP_ProtectionStandard_EN300294_625i = 16
    COPP_ProtectionStandard_CEA805A_TypeA_525p = 32
    COPP_ProtectionStandard_CEA805A_TypeA_750p = 64
    COPP_ProtectionStandard_CEA805A_TypeA_1125i = 128
    COPP_ProtectionStandard_CEA805A_TypeB_525p = 256
    COPP_ProtectionStandard_CEA805A_TypeB_750p = 512
    COPP_ProtectionStandard_CEA805A_TypeB_1125i = 1024
    COPP_ProtectionStandard_ARIBTRB15_525i = 2048
    COPP_ProtectionStandard_ARIBTRB15_525p = 4096
    COPP_ProtectionStandard_ARIBTRB15_750p = 8192
    COPP_ProtectionStandard_ARIBTRB15_1125i = 16384
    COPP_ProtectionStandard_Mask = -2147450881
    COPP_ProtectionStandard_Reserved = 2147450880
  end

  enum COPP_ImageAspectRatio_EN300294 : Int32
    COPP_AspectRatio_EN300294_FullFormat4by3 = 0
    COPP_AspectRatio_EN300294_Box14by9Center = 1
    COPP_AspectRatio_EN300294_Box14by9Top = 2
    COPP_AspectRatio_EN300294_Box16by9Center = 3
    COPP_AspectRatio_EN300294_Box16by9Top = 4
    COPP_AspectRatio_EN300294_BoxGT16by9Center = 5
    COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6
    COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7
    COPP_AspectRatio_ForceDWORD = 2147483647
  end

  enum COPP_StatusFlags : Int32
    COPP_StatusNormal = 0
    COPP_LinkLost = 1
    COPP_RenegotiationRequired = 2
    COPP_StatusFlagsReserved = -4
  end

  enum COPP_StatusHDCPFlags : Int32
    COPP_HDCPRepeater = 1
    COPP_HDCPFlagsReserved = -2
  end

  enum COPP_ConnectorType : Int32
    COPP_ConnectorType_Unknown = -1
    COPP_ConnectorType_VGA = 0
    COPP_ConnectorType_SVideo = 1
    COPP_ConnectorType_CompositeVideo = 2
    COPP_ConnectorType_ComponentVideo = 3
    COPP_ConnectorType_DVI = 4
    COPP_ConnectorType_HDMI = 5
    COPP_ConnectorType_LVDS = 6
    COPP_ConnectorType_TMDS = 7
    COPP_ConnectorType_D_JPN = 8
    COPP_ConnectorType_Internal = -2147483648
    COPP_ConnectorType_ForceDWORD = 2147483647
  end

  enum COPP_BusType : Int32
    COPP_BusType_Unknown = 0
    COPP_BusType_PCI = 1
    COPP_BusType_PCIX = 2
    COPP_BusType_PCIExpress = 3
    COPP_BusType_AGP = 4
    COPP_BusType_Integrated = -2147483648
    COPP_BusType_ForceDWORD = 2147483647
  end

  union REGFILTER2_Anonymous_e__Union
    anonymous1 : REGFILTER2_Anonymous_e__Union_Anonymous1_e__Struct
    anonymous2 : REGFILTER2_Anonymous_e__Union_Anonymous2_e__Struct
  end
  union DVD_TitleAttributes_Anonymous_e__Union
    app_mode : DVD_TITLE_APPMODE
    title_length : DVD_HMSF_TIMECODE
  end
  union VIDEOINFO_Anonymous_e__Union
    bmi_colors : RGBQUAD[256]*
    dw_bit_masks : UInt32[3]*
    true_color_info : TRUECOLORINFO
  end
  union VIDEOINFOHEADER2_Anonymous_e__Union
    dw_control_flags : UInt32
    dw_reserved1 : UInt32
  end
  union SECTION_Header_e__Union
    s : MPEG_HEADER_BITS_MIDL
    w : UInt16
  end
  union LONG_SECTION_Header_e__Union
    s : MPEG_HEADER_BITS_MIDL
    w : UInt16
  end
  union LONG_SECTION_Version_e__Union
    s : MPEG_HEADER_VERSION_BITS_MIDL
    b : UInt8
  end
  union DSMCC_SECTION_Header_e__Union
    s : MPEG_HEADER_BITS_MIDL
    w : UInt16
  end
  union DSMCC_SECTION_Version_e__Union
    s : MPEG_HEADER_VERSION_BITS_MIDL
    b : UInt8
  end
  union MPEG2_FILTER2_Anonymous_e__Union
    anonymous : MPEG2_FILTER2_Anonymous_e__Union_Anonymous_e__Struct
    b_version1_bytes : UInt8[124]*
  end
  union MPEG_CONTEXT_U_e__Union
    demux : MPEG_BCS_DEMUX
    winsock : MPEG_WINSOCK
  end
  union TRANSPORT_PROPERTIES_Fields_e__Union
    others : TRANSPORT_PROPERTIES_Fields_e__Union_Others
    value : Int64
  end
  union KSM_BDA_PIN_Anonymous_e__Union
    pin_id : UInt32
    pin_type : UInt32
  end
  union KSM_BDA_PIN_PAIR_Anonymous1_e__Union
    input_pin_id : UInt32
    input_pin_type : UInt32
  end
  union KSM_BDA_PIN_PAIR_Anonymous2_e__Union
    output_pin_id : UInt32
    output_pin_type : UInt32
  end
  union ChannelInfo_Anonymous_e__Union
    dvb : ChannelInfo_Anonymous_e__Union_DVB_e__Struct
    dc : ChannelInfo_Anonymous_e__Union_DC_e__Struct
    atsc : ChannelInfo_Anonymous_e__Union_ATSC_e__Struct
  end

  struct AMVPSIZE
    dw_width : UInt32
    dw_height : UInt32
  end
  struct AMVPDIMINFO
    dw_field_width : UInt32
    dw_field_height : UInt32
    dw_vbi_width : UInt32
    dw_vbi_height : UInt32
    rc_valid_region : RECT
  end
  struct AMVPDATAINFO
    dw_size : UInt32
    dw_microseconds_per_field : UInt32
    amvp_dim_info : AMVPDIMINFO
    dw_pict_aspect_ratio_x : UInt32
    dw_pict_aspect_ratio_y : UInt32
    b_enable_double_clock : LibC::BOOL
    b_enable_vact : LibC::BOOL
    b_data_is_interlaced : LibC::BOOL
    l_half_lines_odd : Int32
    b_field_polarity_inverted : LibC::BOOL
    dw_num_lines_in_vref : UInt32
    l_half_lines_even : Int32
    dw_reserved1 : UInt32
  end
  struct AM_MEDIA_TYPE
    majortype : Guid
    subtype : Guid
    b_fixed_size_samples : LibC::BOOL
    b_temporal_compression : LibC::BOOL
    l_sample_size : UInt32
    formattype : Guid
    p_unk : IUnknown
    cb_format : UInt32
    pb_format : UInt8*
  end
  struct ALLOCATOR_PROPERTIES
    c_buffers : Int32
    cb_buffer : Int32
    cb_align : Int32
    cb_prefix : Int32
  end
  struct PIN_INFO
    p_filter : IBaseFilter
    dir : PIN_DIRECTION
    ach_name : Char[128]*
  end
  struct FILTER_INFO
    ach_name : Char[128]*
    p_graph : IFilterGraph
  end
  struct AM_SAMPLE2_PROPERTIES
    cb_data : UInt32
    dw_type_specific_flags : UInt32
    dw_sample_flags : UInt32
    l_actual : Int32
    t_start : Int64
    t_stop : Int64
    dw_stream_id : UInt32
    p_media_type : AM_MEDIA_TYPE*
    pb_buffer : UInt8*
    cb_buffer : Int32
  end
  struct REGFILTER
    clsid : Guid
    name : LibC::LPWSTR
  end
  struct REGPINTYPES
    cls_major_type : Guid*
    cls_minor_type : Guid*
  end
  struct REGFILTERPINS
    str_name : LibC::LPWSTR
    b_rendered : LibC::BOOL
    b_output : LibC::BOOL
    b_zero : LibC::BOOL
    b_many : LibC::BOOL
    cls_connects_to_filter : Guid*
    str_connects_to_pin : LibC::LPWSTR
    n_media_types : UInt32
    lp_media_type : REGPINTYPES*
  end
  struct REGPINMEDIUM
    cls_medium : Guid
    dw1 : UInt32
    dw2 : UInt32
  end
  struct REGFILTERPINS2
    dw_flags : UInt32
    c_instances : UInt32
    n_media_types : UInt32
    lp_media_type : REGPINTYPES*
    n_mediums : UInt32
    lp_medium : REGPINMEDIUM*
    cls_pin_category : Guid*
  end
  struct REGFILTER2
    dw_version : UInt32
    dw_merit : UInt32
    anonymous : REGFILTER2_Anonymous_e__Union
  end
  struct REGFILTER2_Anonymous_e__Union_Anonymous1_e__Struct
    c_pins : UInt32
    rg_pins : REGFILTERPINS*
  end
  struct REGFILTER2_Anonymous_e__Union_Anonymous2_e__Struct
    c_pins2 : UInt32
    rg_pins2 : REGFILTERPINS2*
  end
  struct Quality
    type : QualityMessageType
    proportion : Int32
    late : Int64
    time_stamp : Int64
  end
  struct COLORKEY
    key_type : UInt32
    palette_index : UInt32
    low_color_value : UInt32
    high_color_value : UInt32
  end
  struct AM_STREAM_INFO
    t_start : Int64
    t_stop : Int64
    dw_start_cookie : UInt32
    dw_stop_cookie : UInt32
    dw_flags : UInt32
  end
  struct VIDEO_STREAM_CONFIG_CAPS
    guid : Guid
    video_standard : UInt32
    input_size : SIZE
    min_cropping_size : SIZE
    max_cropping_size : SIZE
    crop_granularity_x : Int32
    crop_granularity_y : Int32
    crop_align_x : Int32
    crop_align_y : Int32
    min_output_size : SIZE
    max_output_size : SIZE
    output_granularity_x : Int32
    output_granularity_y : Int32
    stretch_taps_x : Int32
    stretch_taps_y : Int32
    shrink_taps_x : Int32
    shrink_taps_y : Int32
    min_frame_interval : Int64
    max_frame_interval : Int64
    min_bits_per_second : Int32
    max_bits_per_second : Int32
  end
  struct AUDIO_STREAM_CONFIG_CAPS
    guid : Guid
    minimum_channels : UInt32
    maximum_channels : UInt32
    channels_granularity : UInt32
    minimum_bits_per_sample : UInt32
    maximum_bits_per_sample : UInt32
    bits_per_sample_granularity : UInt32
    minimum_sample_frequency : UInt32
    maximum_sample_frequency : UInt32
    sample_frequency_granularity : UInt32
  end
  struct DVINFO
    dw_dva_aux_src : UInt32
    dw_dva_aux_ctl : UInt32
    dw_dva_aux_src1 : UInt32
    dw_dva_aux_ctl1 : UInt32
    dw_dvv_aux_src : UInt32
    dw_dvv_aux_ctl : UInt32
    dw_dv_reserved : UInt32[2]*
  end
  struct STREAM_ID_MAP
    stream_id : UInt32
    dw_media_sample_content : UInt32
    ul_substream_filter_value : UInt32
    i_data_offset : Int32
  end
  struct AMCOPPSignature
    signature : UInt8[256]*
  end
  struct AMCOPPCommand
    mac_kdi : Guid
    guid_command_id : Guid
    dw_sequence : UInt32
    cb_size_data : UInt32
    command_data : UInt8[4056]*
  end
  struct AMCOPPStatusInput
    r_app : Guid
    guid_status_request_id : Guid
    dw_sequence : UInt32
    cb_size_data : UInt32
    status_data : UInt8[4056]*
  end
  struct AMCOPPStatusOutput
    mac_kdi : Guid
    cb_size_data : UInt32
    copp_status : UInt8[4076]*
  end
  struct VMRPRESENTATIONINFO
    dw_flags : UInt32
    lp_surf : IDirectDrawSurface7
    rt_start : Int64
    rt_end : Int64
    sz_aspect_ratio : SIZE
    rc_src : RECT
    rc_dst : RECT
    dw_type_specific_flags : UInt32
    dw_interlace_flags : UInt32
  end
  struct VMRALLOCATIONINFO
    dw_flags : UInt32
    lp_hdr : BITMAPINFOHEADER*
    lp_pix_fmt : DDPIXELFORMAT*
    sz_aspect_ratio : SIZE
    dw_min_buffers : UInt32
    dw_max_buffers : UInt32
    dw_interlace_flags : UInt32
    sz_native_size : SIZE
  end
  struct NORMALIZEDRECT
    left : Float32
    top : Float32
    right : Float32
    bottom : Float32
  end
  struct VMRGUID
    p_guid : Guid*
    guid : Guid
  end
  struct VMRMONITORINFO
    guid : VMRGUID
    rc_monitor : RECT
    h_mon : HMONITOR
    dw_flags : UInt32
    sz_device : Char[32]*
    sz_description : Char[256]*
    li_driver_version : LARGE_INTEGER
    dw_vendor_id : UInt32
    dw_device_id : UInt32
    dw_sub_sys_id : UInt32
    dw_revision : UInt32
  end
  struct VMRFrequency
    dw_numerator : UInt32
    dw_denominator : UInt32
  end
  struct VMRVideoDesc
    dw_size : UInt32
    dw_sample_width : UInt32
    dw_sample_height : UInt32
    single_field_per_sample : LibC::BOOL
    dw_four_cc : UInt32
    input_sample_freq : VMRFrequency
    output_frame_freq : VMRFrequency
  end
  struct VMRDeinterlaceCaps
    dw_size : UInt32
    dw_num_previous_output_frames : UInt32
    dw_num_forward_ref_samples : UInt32
    dw_num_backward_ref_samples : UInt32
    deinterlace_technology : VMRDeinterlaceTech
  end
  struct VMRALPHABITMAP
    dw_flags : UInt32
    hdc : HDC
    p_dds : IDirectDrawSurface7
    r_src : RECT
    r_dest : NORMALIZEDRECT
    f_alpha : Float32
    clr_src_key : UInt32
  end
  struct VMRVIDEOSTREAMINFO
    pdds_video_surface : IDirectDrawSurface7
    dw_width : UInt32
    dw_height : UInt32
    dw_strm_id : UInt32
    f_alpha : Float32
    dd_clr_key : DDCOLORKEY
    r_normal : NORMALIZEDRECT
  end
  struct DVD_ATR
    ul_cat : UInt32
    pb_atri : UInt8[768]*
  end
  struct DVD_TIMECODE
    _bitfield : UInt32
  end
  struct DVD_HMSF_TIMECODE
    b_hours : UInt8
    b_minutes : UInt8
    b_seconds : UInt8
    b_frames : UInt8
  end
  struct DVD_PLAYBACK_LOCATION2
    title_num : UInt32
    chapter_num : UInt32
    time_code : DVD_HMSF_TIMECODE
    time_code_flags : UInt32
  end
  struct DVD_PLAYBACK_LOCATION
    title_num : UInt32
    chapter_num : UInt32
    time_code : UInt32
  end
  struct DVD_AudioAttributes
    app_mode : DVD_AUDIO_APPMODE
    app_mode_data : UInt8
    audio_format : DVD_AUDIO_FORMAT
    language : UInt32
    language_extension : DVD_AUDIO_LANG_EXT
    f_has_multichannel_info : LibC::BOOL
    dw_frequency : UInt32
    b_quantization : UInt8
    b_number_of_channels : UInt8
    dw_reserved : UInt32[2]*
  end
  struct DVD_MUA_MixingInfo
    f_mix_to0 : LibC::BOOL
    f_mix_to1 : LibC::BOOL
    f_mix0_in_phase : LibC::BOOL
    f_mix1_in_phase : LibC::BOOL
    dw_speaker_position : UInt32
  end
  struct DVD_MUA_Coeff
    log2_alpha : Float64
    log2_beta : Float64
  end
  struct DVD_MultichannelAudioAttributes
    info : DVD_MUA_MixingInfo[8]*
    coeff : DVD_MUA_Coeff[8]*
  end
  struct DVD_KaraokeAttributes
    b_version : UInt8
    f_master_of_ceremonies_in_guide_vocal1 : LibC::BOOL
    f_duet : LibC::BOOL
    channel_assignment : DVD_KARAOKE_ASSIGNMENT
    w_channel_contents : UInt16[8]*
  end
  struct DVD_VideoAttributes
    f_panscan_permitted : LibC::BOOL
    f_letterbox_permitted : LibC::BOOL
    ul_aspect_x : UInt32
    ul_aspect_y : UInt32
    ul_frame_rate : UInt32
    ul_frame_height : UInt32
    compression : DVD_VIDEO_COMPRESSION
    f_line21_field1_in_gop : LibC::BOOL
    f_line21_field2_in_gop : LibC::BOOL
    ul_source_resolution_x : UInt32
    ul_source_resolution_y : UInt32
    f_is_source_letterboxed : LibC::BOOL
    f_is_film_mode : LibC::BOOL
  end
  struct DVD_SubpictureAttributes
    type : DVD_SUBPICTURE_TYPE
    coding_mode : DVD_SUBPICTURE_CODING
    language : UInt32
    language_extension : DVD_SUBPICTURE_LANG_EXT
  end
  struct DVD_TitleAttributes
    anonymous : DVD_TitleAttributes_Anonymous_e__Union
    video_attributes : DVD_VideoAttributes
    ul_number_of_audio_streams : UInt32
    audio_attributes : DVD_AudioAttributes[8]*
    multichannel_audio_attributes : DVD_MultichannelAudioAttributes[8]*
    ul_number_of_subpicture_streams : UInt32
    subpicture_attributes : DVD_SubpictureAttributes[32]*
  end
  struct DVD_MenuAttributes
    f_compatible_region : LibC::BOOL[8]*
    video_attributes : DVD_VideoAttributes
    f_audio_present : LibC::BOOL
    audio_attributes : DVD_AudioAttributes
    f_subpicture_present : LibC::BOOL
    subpicture_attributes : DVD_SubpictureAttributes
  end
  struct DVD_DECODER_CAPS
    dw_size : UInt32
    dw_audio_caps : UInt32
    d_fwd_max_rate_video : Float64
    d_fwd_max_rate_audio : Float64
    d_fwd_max_rate_sp : Float64
    d_bwd_max_rate_video : Float64
    d_bwd_max_rate_audio : Float64
    d_bwd_max_rate_sp : Float64
    dw_res1 : UInt32
    dw_res2 : UInt32
    dw_res3 : UInt32
    dw_res4 : UInt32
  end
  struct AM_DVD_RENDERSTATUS
    hr_vpe_status : HRESULT
    b_dvd_vol_invalid : LibC::BOOL
    b_dvd_vol_unknown : LibC::BOOL
    b_no_line21_in : LibC::BOOL
    b_no_line21_out : LibC::BOOL
    i_num_streams : Int32
    i_num_streams_failed : Int32
    dw_failed_streams_flag : UInt32
  end
  struct BDA_TEMPLATE_CONNECTION
    from_node_type : UInt32
    from_node_pin_type : UInt32
    to_node_type : UInt32
    to_node_pin_type : UInt32
  end
  struct BDA_TEMPLATE_PIN_JOINT
    uli_template_connection : UInt32
    ulc_instances_max : UInt32
  end
  struct KS_BDA_FRAME_INFO
    extended_header_size : UInt32
    dw_frame_flags : UInt32
    ul_event : UInt32
    ul_channel_number : UInt32
    ul_subchannel_number : UInt32
    ul_reason : UInt32
  end
  struct BDA_ETHERNET_ADDRESS
    rgb_address : UInt8[6]*
  end
  struct BDA_ETHERNET_ADDRESS_LIST
    ulc_addresses : UInt32
    rg_addressl : BDA_ETHERNET_ADDRESS[0]*
  end
  struct BDA_IPv4_ADDRESS
    rgb_address : UInt8[4]*
  end
  struct BDA_IPv4_ADDRESS_LIST
    ulc_addresses : UInt32
    rg_addressl : BDA_IPv4_ADDRESS[0]*
  end
  struct BDA_IPv6_ADDRESS
    rgb_address : UInt8[6]*
  end
  struct BDA_IPv6_ADDRESS_LIST
    ulc_addresses : UInt32
    rg_addressl : BDA_IPv6_ADDRESS[0]*
  end
  struct BDANODE_DESCRIPTOR
    ul_bda_node_type : UInt32
    guid_function : Guid
    guid_name : Guid
  end
  struct BDA_TABLE_SECTION
    ul_primary_section_id : UInt32
    ul_secondary_section_id : UInt32
    ulcb_section_length : UInt32
    argb_section_data : UInt32[0]*
  end
  struct BDA_DISEQC_SEND
    ul_request_id : UInt32
    ul_packet_length : UInt32
    argb_packet_data : UInt8[8]*
  end
  struct BDA_DISEQC_RESPONSE
    ul_request_id : UInt32
    ul_packet_length : UInt32
    argb_packet_data : UInt8[8]*
  end
  struct PID_MAP
    ul_pid : UInt32
    media_sample_content : MEDIA_SAMPLE_CONTENT
  end
  struct BDA_PID_MAP
    media_sample_content : MEDIA_SAMPLE_CONTENT
    ulc_pi_ds : UInt32
    aul_pi_ds : UInt32[0]*
  end
  struct BDA_PID_UNMAP
    ulc_pi_ds : UInt32
    aul_pi_ds : UInt32[0]*
  end
  struct BDA_CA_MODULE_UI
    ul_format : UInt32
    ulbc_desc : UInt32
    ul_desc : UInt32[0]*
  end
  struct BDA_PROGRAM_PID_LIST
    ul_program_number : UInt32
    ulc_pi_ds : UInt32
    ul_pid : UInt32[0]*
  end
  struct BDA_DRM_DRMSTATUS
    l_result : Int32
    dr_muuid : Guid
    ul_drm_uuid_list_string_size : UInt32
    argb_drm_uuid_list_string : Guid[0]*
  end
  struct BDA_WMDRM_STATUS
    l_result : Int32
    ul_max_capture_token_size : UInt32
    u_max_streaming_pid : UInt32
    ul_max_license : UInt32
    ul_min_security_level : UInt32
    ul_rev_info_sequence_number : UInt32
    ul_rev_info_issued_time : UInt64
    ul_rev_list_version : UInt32
    ul_rev_info_ttl : UInt32
    ul_state : UInt32
  end
  struct BDA_WMDRM_KEYINFOLIST
    l_result : Int32
    ul_keyuuid_buffer_len : UInt32
    arg_keyuuid_buffer : Guid[0]*
  end
  struct BDA_BUFFER
    l_result : Int32
    ul_buffer_size : UInt32
    argb_buffer : UInt8[0]*
  end
  struct BDA_WMDRM_RENEWLICENSE
    l_result : Int32
    ul_descramble_status : UInt32
    ul_xmr_license_output_length : UInt32
    argb_xmr_licence_output_buffer : UInt8[0]*
  end
  struct BDA_WMDRMTUNER_PIDPROTECTION
    l_result : Int32
    uuid_key_id : Guid
  end
  struct BDA_WMDRMTUNER_PURCHASEENTITLEMENT
    l_result : Int32
    ul_descramble_status : UInt32
    ul_capture_token_length : UInt32
    argb_capture_token_buffer : UInt8[0]*
  end
  struct BDA_TUNER_TUNERSTATE
    l_result : Int32
    ul_tune_length : UInt32
    argb_tune_data : UInt8[0]*
  end
  struct BDA_TUNER_DIAGNOSTICS
    l_result : Int32
    ul_signal_level : UInt32
    ul_signal_level_quality : UInt32
    ul_signal_noise_ratio : UInt32
  end
  struct BDA_STRING
    l_result : Int32
    ul_string_size : UInt32
    argb_string : UInt8[0]*
  end
  struct BDA_SCAN_CAPABILTIES
    l_result : Int32
    ul64_analog_standards_supported : UInt64
  end
  struct BDA_SCAN_STATE
    l_result : Int32
    ul_signal_lock : UInt32
    ul_seconds_left : UInt32
    ul_current_frequency : UInt32
  end
  struct BDA_SCAN_START
    l_result : Int32
    lower_frequency : UInt32
    higer_frequency : UInt32
  end
  struct BDA_GDDS_DATATYPE
    l_result : Int32
    uuid_data_type : Guid
  end
  struct BDA_GDDS_DATA
    l_result : Int32
    ul_data_length : UInt32
    ul_percentage_progress : UInt32
    argb_data : UInt8[0]*
  end
  struct BDA_USERACTIVITY_INTERVAL
    l_result : Int32
    ul_activity_interval : UInt32
  end
  struct BDA_CAS_CHECK_ENTITLEMENTTOKEN
    l_result : Int32
    ul_descramble_status : UInt32
  end
  struct BDA_CAS_CLOSE_MMIDIALOG
    l_result : Int32
    session_result : UInt32
  end
  struct BDA_CAS_REQUESTTUNERDATA
    uc_request_priority : UInt8
    uc_request_reason : UInt8
    uc_request_consequences : UInt8
    ul_estimated_time : UInt32
  end
  struct BDA_CAS_OPENMMIDATA
    ul_dialog_number : UInt32
    ul_dialog_request : UInt32
    uuid_dialog_type : Guid
    us_dialog_data_length : UInt16
    argb_dialog_data : UInt8[0]*
  end
  struct BDA_CAS_CLOSEMMIDATA
    ul_dialog_number : UInt32
  end
  struct BDA_ISDBCAS_REQUESTHEADER
    b_instruction : UInt8
    b_reserved : UInt8[3]*
    ul_data_length : UInt32
    argb_isdb_command : UInt8[0]*
  end
  struct BDA_ISDBCAS_RESPONSEDATA
    l_result : Int32
    ul_request_id : UInt32
    ul_isdb_status : UInt32
    ul_isdb_data_size : UInt32
    argb_isdb_command_data : UInt8[0]*
  end
  struct BDA_ISDBCAS_EMG_REQ
    b_cla : UInt8
    b_ins : UInt8
    b_p1 : UInt8
    b_p2 : UInt8
    b_lc : UInt8
    b_card_id : UInt8[6]*
    b_protocol : UInt8
    b_ca_broadcaster_group_id : UInt8
    b_message_control : UInt8
    b_message_code : UInt8[0]*
  end
  struct BDA_MUX_PIDLISTITEM
    us_pid_number : UInt16
    us_program_number : UInt16
    e_pid_type : MUX_PID_TYPE
  end
  struct BDA_TS_SELECTORINFO
    b_ts_infolength : UInt8
    b_reserved : UInt8[2]*
    guid_network_type : Guid
    b_tsid_count : UInt8
    us_tsid : UInt16[0]*
  end
  struct BDA_TS_SELECTORINFO_ISDBS_EXT
    b_tmcc : UInt8[48]*
  end
  struct BDA_DVBT2_L1_SIGNALLING_DATA
    l1_pre_type : UInt8
    l1_pre_bwt_s1_s2 : UInt8
    l1_pre_repetition_guard_papr : UInt8
    l1_pre_mod_cod_fec : UInt8
    l1_pre_postsize_info_pilot : UInt8[5]*
    l1_pre_tx_id_avail : UInt8
    l1_pre_cell_id : UInt8[2]*
    l1_pre_network_id : UInt8[2]*
    l1_pre_t2_system_id : UInt8[2]*
    l1_pre_num_t2_frames : UInt8
    l1_pre_num_data_regenflag_l1_postext : UInt8[2]*
    l1_pre_numrf_currentrf_reserved : UInt8[2]*
    l1_pre_crc32 : UInt8[4]*
    l1_post_data : UInt8[0]*
  end
  struct BDA_RATING_PINRESET
    b_pin_length : UInt8
    argb_new_pin : UInt8[0]*
  end
  struct MPEG2_TRANSPORT_STRIDE
    dw_offset : UInt32
    dw_packet_length : UInt32
    dw_stride : UInt32
  end
  struct BDA_SIGNAL_TIMEOUTS
    ul_carrier_timeout_ms : UInt32
    ul_scanning_timeout_ms : UInt32
    ul_tuning_timeout_ms : UInt32
  end
  struct EALocationCodeType
    location_code_scheme : LocationCodeSchemeType
    state_code : UInt8
    county_subdivision : UInt8
    county_code : UInt16
  end
  struct SmartCardApplication
    application_type : ApplicationTypeType
    application_version : UInt16
    pbstr_application_name : UInt8*
    pbstr_application_url : UInt8*
  end
  struct AMVAUncompBufferInfo
    dw_min_num_surfaces : UInt32
    dw_max_num_surfaces : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
  end
  struct AMVAUncompDataInfo
    dw_uncomp_width : UInt32
    dw_uncomp_height : UInt32
    dd_uncomp_pixel_format : DDPIXELFORMAT
  end
  struct AMVAInternalMemInfo
    dw_scratch_mem_alloc : UInt32
  end
  struct AMVACompBufferInfo
    dw_num_comp_buffers : UInt32
    dw_width_to_create : UInt32
    dw_height_to_create : UInt32
    dw_bytes_to_allocate : UInt32
    dd_comp_caps : DDSCAPS2
    dd_pixel_format : DDPIXELFORMAT
  end
  struct AMVABeginFrameInfo
    dw_dest_surface_index : UInt32
    p_input_data : Void*
    dw_size_input_data : UInt32
    p_output_data : Void*
    dw_size_output_data : UInt32
  end
  struct AMVAEndFrameInfo
    dw_size_misc_data : UInt32
    p_misc_data : Void*
  end
  struct AMVABUFFERINFO
    dw_type_index : UInt32
    dw_buffer_index : UInt32
    dw_data_offset : UInt32
    dw_data_size : UInt32
  end
  struct AM_WST_PAGE
    dw_page_nr : UInt32
    dw_sub_page_nr : UInt32
    puc_page_data : UInt8*
  end
  struct TRUECOLORINFO
    dw_bit_masks : UInt32[3]*
    bmi_colors : RGBQUAD[256]*
  end
  struct VIDEOINFOHEADER
    rc_source : RECT
    rc_target : RECT
    dw_bit_rate : UInt32
    dw_bit_error_rate : UInt32
    avg_time_per_frame : Int64
    bmi_header : BITMAPINFOHEADER
  end
  struct VIDEOINFO
    rc_source : RECT
    rc_target : RECT
    dw_bit_rate : UInt32
    dw_bit_error_rate : UInt32
    avg_time_per_frame : Int64
    bmi_header : BITMAPINFOHEADER
    anonymous : VIDEOINFO_Anonymous_e__Union
  end
  struct MPEG1VIDEOINFO
    hdr : VIDEOINFOHEADER
    dw_start_time_code : UInt32
    cb_sequence_header : UInt32
    b_sequence_header : UInt8[0]*
  end
  struct ANALOGVIDEOINFO
    rc_source : RECT
    rc_target : RECT
    dw_active_width : UInt32
    dw_active_height : UInt32
    avg_time_per_frame : Int64
  end
  struct AM_FRAMESTEP_STEP
    dw_frames_to_step : UInt32
  end
  struct AM_MPEGSTREAMTYPE
    dw_stream_id : UInt32
    dw_reserved : UInt32
    mt : AM_MEDIA_TYPE
    b_format : UInt8[0]*
  end
  struct AM_MPEGSYSTEMTYPE
    dw_bit_rate : UInt32
    c_streams : UInt32
    streams : AM_MPEGSTREAMTYPE[0]*
  end
  struct VMR9PresentationInfo
    dw_flags : UInt32
    lp_surf : IDirect3DSurface9
    rt_start : Int64
    rt_end : Int64
    sz_aspect_ratio : SIZE
    rc_src : RECT
    rc_dst : RECT
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
  end
  struct VMR9AllocationInfo
    dw_flags : UInt32
    dw_width : UInt32
    dw_height : UInt32
    format : D3DFORMAT
    pool : D3DPOOL
    min_buffers : UInt32
    sz_aspect_ratio : SIZE
    sz_native_size : SIZE
  end
  struct VMR9NormalizedRect
    left : Float32
    top : Float32
    right : Float32
    bottom : Float32
  end
  struct VMR9ProcAmpControl
    dw_size : UInt32
    dw_flags : UInt32
    brightness : Float32
    contrast : Float32
    hue : Float32
    saturation : Float32
  end
  struct VMR9ProcAmpControlRange
    dw_size : UInt32
    dw_property : VMR9ProcAmpControlFlags
    min_value : Float32
    max_value : Float32
    default_value : Float32
    step_size : Float32
  end
  struct VMR9AlphaBitmap
    dw_flags : UInt32
    hdc : HDC
    p_dds : IDirect3DSurface9
    r_src : RECT
    r_dest : VMR9NormalizedRect
    f_alpha : Float32
    clr_src_key : UInt32
    dw_filter_mode : UInt32
  end
  struct VMR9MonitorInfo
    u_dev_id : UInt32
    rc_monitor : RECT
    h_mon : HMONITOR
    dw_flags : UInt32
    sz_device : Char[32]*
    sz_description : Char[512]*
    li_driver_version : LARGE_INTEGER
    dw_vendor_id : UInt32
    dw_device_id : UInt32
    dw_sub_sys_id : UInt32
    dw_revision : UInt32
  end
  struct VMR9Frequency
    dw_numerator : UInt32
    dw_denominator : UInt32
  end
  struct VMR9VideoDesc
    dw_size : UInt32
    dw_sample_width : UInt32
    dw_sample_height : UInt32
    sample_format : VMR9_SampleFormat
    dw_four_cc : UInt32
    input_sample_freq : VMR9Frequency
    output_frame_freq : VMR9Frequency
  end
  struct VMR9DeinterlaceCaps
    dw_size : UInt32
    dw_num_previous_output_frames : UInt32
    dw_num_forward_ref_samples : UInt32
    dw_num_backward_ref_samples : UInt32
    deinterlace_technology : VMR9DeinterlaceTech
  end
  struct VMR9VideoStreamInfo
    pdds_video_surface : IDirect3DSurface9
    dw_width : UInt32
    dw_height : UInt32
    dw_strm_id : UInt32
    f_alpha : Float32
    r_normal : VMR9NormalizedRect
    rt_start : Int64
    rt_end : Int64
    sample_format : VMR9_SampleFormat
  end
  struct RIFFCHUNK
    fcc : UInt32
    cb : UInt32
  end
  struct RIFFLIST
    fcc : UInt32
    cb : UInt32
    fcc_list_type : UInt32
  end
  struct AVIMAINHEADER
    fcc : UInt32
    cb : UInt32
    dw_micro_sec_per_frame : UInt32
    dw_max_bytes_per_sec : UInt32
    dw_padding_granularity : UInt32
    dw_flags : UInt32
    dw_total_frames : UInt32
    dw_initial_frames : UInt32
    dw_streams : UInt32
    dw_suggested_buffer_size : UInt32
    dw_width : UInt32
    dw_height : UInt32
    dw_reserved : UInt32[4]*
  end
  struct AVIEXTHEADER
    fcc : UInt32
    cb : UInt32
    dw_grand_frames : UInt32
    dw_future : UInt32[61]*
  end
  struct AVISTREAMHEADER
    fcc : UInt32
    cb : UInt32
    fcc_type : UInt32
    fcc_handler : UInt32
    dw_flags : UInt32
    w_priority : UInt16
    w_language : UInt16
    dw_initial_frames : UInt32
    dw_scale : UInt32
    dw_rate : UInt32
    dw_start : UInt32
    dw_length : UInt32
    dw_suggested_buffer_size : UInt32
    dw_quality : UInt32
    dw_sample_size : UInt32
    rc_frame : AVISTREAMHEADER_rcFrame_e__Struct
  end
  struct AVISTREAMHEADER_rcFrame_e__Struct
    left : Int16
    top : Int16
    right : Int16
    bottom : Int16
  end
  struct AVIOLDINDEX
    fcc : UInt32
    cb : UInt32
    a_index : AVIOLDINDEX_avioldindex_entry[0]*
  end
  struct AVIOLDINDEX_avioldindex_entry
    dw_chunk_id : UInt32
    dw_flags : UInt32
    dw_offset : UInt32
    dw_size : UInt32
  end
  struct TIMECODEDATA
    time : TIMECODE
    dw_smpt_eflags : UInt32
    dw_user : UInt32
  end
  struct AVIMETAINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    adw_index : UInt32[0]*
  end
  struct AVISUPERINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    a_index : AVISUPERINDEX_avisuperindex_entry[1022]*
  end
  struct AVISUPERINDEX_avisuperindex_entry
    qw_offset : UInt64
    dw_size : UInt32
    dw_duration : UInt32
  end
  struct AVISTDINDEX_ENTRY
    dw_offset : UInt32
    dw_size : UInt32
  end
  struct AVISTDINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    qw_base_offset : UInt64
    dw_reserved_3 : UInt32
    a_index : AVISTDINDEX_ENTRY[2044]*
  end
  struct AVITIMEDINDEX_ENTRY
    dw_offset : UInt32
    dw_size : UInt32
    dw_duration : UInt32
  end
  struct Avitimedindex
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    qw_base_offset : UInt64
    dw_reserved_3 : UInt32
    a_index : AVITIMEDINDEX_ENTRY[1362]*
    adw_trailing_fill : UInt32[2734]*
  end
  struct AVITIMECODEINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    a_index : TIMECODEDATA[1022]*
  end
  struct AVITCDLINDEX_ENTRY
    dw_tick : UInt32
    time : TIMECODE
    dw_smpt_eflags : UInt32
    dw_user : UInt32
    sz_reel_id : Int8[12]*
  end
  struct Avitcdlindex
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    dw_reserved : UInt32[3]*
    a_index : AVITCDLINDEX_ENTRY[584]*
    adw_trailing_fill : UInt32[3512]*
  end
  struct AVIFIELDINDEX
    fcc : UInt32
    cb : UInt32
    w_longs_per_entry : UInt16
    b_index_sub_type : UInt8
    b_index_type : UInt8
    n_entries_in_use : UInt32
    dw_chunk_id : UInt32
    qw_base_offset : UInt64
    dw_reserved3 : UInt32
    a_index : AVIFIELDINDEX_avifieldindex_entry[0]*
  end
  struct AVIFIELDINDEX_avifieldindex_entry
    dw_offset : UInt32
    dw_size : UInt32
    dw_offset_field2 : UInt32
  end
  struct MainAVIHeader
    dw_micro_sec_per_frame : UInt32
    dw_max_bytes_per_sec : UInt32
    dw_padding_granularity : UInt32
    dw_flags : UInt32
    dw_total_frames : UInt32
    dw_initial_frames : UInt32
    dw_streams : UInt32
    dw_suggested_buffer_size : UInt32
    dw_width : UInt32
    dw_height : UInt32
    dw_reserved : UInt32[4]*
  end
  struct AVIStreamHeader
    fcc_type : UInt32
    fcc_handler : UInt32
    dw_flags : UInt32
    w_priority : UInt16
    w_language : UInt16
    dw_initial_frames : UInt32
    dw_scale : UInt32
    dw_rate : UInt32
    dw_start : UInt32
    dw_length : UInt32
    dw_suggested_buffer_size : UInt32
    dw_quality : UInt32
    dw_sample_size : UInt32
    rc_frame : RECT
  end
  struct AVIINDEXENTRY
    ckid : UInt32
    dw_flags : UInt32
    dw_chunk_offset : UInt32
    dw_chunk_length : UInt32
  end
  struct AVIPALCHANGE
    b_first_entry : UInt8
    b_num_entries : UInt8
    w_flags : UInt16
    pe_new : PALETTEENTRY[0]*
  end
  struct AM_AC3_ERROR_CONCEALMENT
    f_repeat_previous_block : LibC::BOOL
    f_error_in_current_block : LibC::BOOL
  end
  struct AM_AC3_ALTERNATE_AUDIO
    f_stereo : LibC::BOOL
    dual_mode : UInt32
  end
  struct AM_AC3_DOWNMIX
    f_down_mix : LibC::BOOL
    f_dolby_surround : LibC::BOOL
  end
  struct AM_AC3_BIT_STREAM_MODE
    bit_stream_mode : Int32
  end
  struct AM_AC3_DIALOGUE_LEVEL
    dialogue_level : UInt32
  end
  struct AM_AC3_ROOM_TYPE
    f_large_room : LibC::BOOL
  end
  struct AM_DVD_YUV
    reserved : UInt8
    y : UInt8
    u : UInt8
    v : UInt8
  end
  struct AM_PROPERTY_SPPAL
    sppal : AM_DVD_YUV[16]*
  end
  struct AM_COLCON
    _bitfield1 : UInt8
    _bitfield2 : UInt8
    _bitfield3 : UInt8
    _bitfield4 : UInt8
  end
  struct AM_PROPERTY_SPHLI
    hliss : UInt16
    reserved : UInt16
    start_ptm : UInt32
    end_ptm : UInt32
    start_x : UInt16
    start_y : UInt16
    stop_x : UInt16
    stop_y : UInt16
    col_con : AM_COLCON
  end
  struct AM_DVDCOPY_CHLGKEY
    chlg_key : UInt8[10]*
    reserved : UInt8[2]*
  end
  struct AM_DVDCOPY_BUSKEY
    bus_key : UInt8[5]*
    reserved : UInt8[0]*
  end
  struct AM_DVDCOPY_DISCKEY
    disc_key : UInt8[2048]*
  end
  struct AM_DVDCOPY_TITLEKEY
    key_flags : UInt32
    reserved1 : UInt32[2]*
    title_key : UInt8[6]*
    reserved2 : UInt8[2]*
  end
  struct AM_COPY_MACROVISION
    macrovision_level : UInt32
  end
  struct AM_DVDCOPY_SET_COPY_STATE
    dvd_copy_state : UInt32
  end
  struct DVD_REGION
    copy_system : UInt8
    region_data : UInt8
    system_region : UInt8
    reset_count : UInt8
  end
  struct VIDEOINFOHEADER2
    rc_source : RECT
    rc_target : RECT
    dw_bit_rate : UInt32
    dw_bit_error_rate : UInt32
    avg_time_per_frame : Int64
    dw_interlace_flags : UInt32
    dw_copy_protect_flags : UInt32
    dw_pict_aspect_ratio_x : UInt32
    dw_pict_aspect_ratio_y : UInt32
    anonymous : VIDEOINFOHEADER2_Anonymous_e__Union
    dw_reserved2 : UInt32
    bmi_header : BITMAPINFOHEADER
  end
  struct MPEG2VIDEOINFO
    hdr : VIDEOINFOHEADER2
    dw_start_time_code : UInt32
    cb_sequence_header : UInt32
    dw_profile : UInt32
    dw_level : UInt32
    dw_flags : MPEG2VIDEOINFO_FLAGS
    dw_sequence_header : UInt32[0]*
  end
  struct AM_DvdKaraokeData
    dw_downmix : UInt32
    dw_speaker_assignment : UInt32
  end
  struct AM_SimpleRateChange
    start_time : Int64
    rate : Int32
  end
  struct AM_QueryRate
    l_max_forward_full_frame : Int32
    l_max_reverse_full_frame : Int32
  end
  struct AM_ExactRateChange
    output_zero_time : Int64
    rate : Int32
  end
  struct AM_DVD_ChangeRate
    start_in_time : Int64
    start_out_time : Int64
    rate : Int32
  end
  struct MP_PARAMINFO
    mp_type : MP_TYPE
    mop_caps : UInt32
    mpd_min_value : Float32
    mpd_max_value : Float32
    mpd_neutral_value : Float32
    sz_unit_text : Char[32]*
    sz_label : Char[32]*
  end
  struct MP_ENVELOPE_SEGMENT
    rt_start : Int64
    rt_end : Int64
    val_start : Float32
    val_end : Float32
    i_curve : MP_CURVE_TYPE
    flags : UInt32
  end
  struct VFW_FILTERLIST
    c_filters : UInt32
    a_cls_id : Guid[0]*
  end
  struct DXVA2_VIDEOSAMPLE
    start : Int64
    rend : Int64
    sample_format : DXVA2_ExtendedFormat
    sample_flags : UInt32
    src_resource : Void*
    src_rect : RECT
    dst_rect : RECT
    pal : DXVA2_AYUVSample8[16]*
    planar_alpha : DXVA2_Fixed32
  end
  struct DXVA2_VIDEOPROCESSBLT
    target_frame : Int64
    target_rect : RECT
    constriction_size : SIZE
    streaming_flags : UInt32
    background_color : DXVA2_AYUVSample16
    dest_format : DXVA2_ExtendedFormat
    dest_flags : UInt32
    proc_amp_values : DXVA2_ProcAmpValues
    alpha : DXVA2_Fixed32
    noise_filter_luma : DXVA2_FilterValues
    noise_filter_chroma : DXVA2_FilterValues
    detail_filter_luma : DXVA2_FilterValues
    detail_filter_chroma : DXVA2_FilterValues
    p_src_surfaces : DXVA2_VIDEOSAMPLE*
    num_src_surfaces : UInt32
  end
  struct DXVA2SW_CALLBACKS
    size : UInt32
    get_video_processor_render_target_count : PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT
    get_video_processor_render_targets : PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS
    get_video_processor_caps : PDXVA2SW_GETVIDEOPROCESSORCAPS
    get_video_processor_sub_stream_format_count : PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT
    get_video_processor_sub_stream_formats : PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS
    get_proc_amp_range : PDXVA2SW_GETPROCAMPRANGE
    get_filter_property_range : PDXVA2SW_GETFILTERPROPERTYRANGE
    create_video_process_device : PDXVA2SW_CREATEVIDEOPROCESSDEVICE
    destroy_video_process_device : PDXVA2SW_DESTROYVIDEOPROCESSDEVICE
    video_process_begin_frame : PDXVA2SW_VIDEOPROCESSBEGINFRAME
    video_process_end_frame : PDXVA2SW_VIDEOPROCESSENDFRAME
    video_process_set_render_target : PDXVA2SW_VIDEOPROCESSSETRENDERTARGET
    video_process_blt : PDXVA2SW_VIDEOPROCESSBLT
  end
  struct DXVA2Trace_DecodeDevCreatedData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_d3_d_device : UInt64
    device_guid : Guid
    width : UInt32
    height : UInt32
    enter : LibC::BOOL
  end
  struct DXVA2Trace_DecodeDeviceData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    enter : LibC::BOOL
  end
  struct DXVA2Trace_DecodeDevBeginFrameData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_render_target : UInt64
    enter : LibC::BOOL
  end
  struct DXVA2Trace_DecodeDevGetBufferData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    buffer_type : UInt32
    enter : LibC::BOOL
  end
  struct DXVA2Trace_VideoProcessDevCreatedData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_d3_d_device : UInt64
    device_guid : Guid
    rt_four_cc : UInt32
    width : UInt32
    height : UInt32
    enter : LibC::BOOL
  end
  struct DXVA2Trace_VideoProcessDeviceData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    enter : LibC::BOOL
  end
  struct DXVA2TraceVideoProcessBltData
    wmi_header : EVENT_TRACE_HEADER
    p_object : UInt64
    p_render_target : UInt64
    target_frame_time : UInt64
    target_rect : RECT
    enter : LibC::BOOL
  end
  struct WMDRMProtectionInfo
    wsz_kid : UInt16[25]*
    qw_counter : UInt64
    qw_index : UInt64
    b_offset : UInt8
  end
  struct BadSampleInfo
    hr_reason : HRESULT
  end
  struct STREAMBUFFER_ATTRIBUTE
    psz_name : LibC::LPWSTR
    stream_buffer_attribute_type : STREAMBUFFER_ATTR_DATATYPE
    pb_attribute : UInt8*
    cb_length : UInt16
  end
  struct SBE_PIN_DATA
    c_data_bytes : UInt64
    c_samples_processed : UInt64
    c_discontinuities : UInt64
    c_sync_points : UInt64
    c_timestamps : UInt64
  end
  struct SBE2_STREAM_DESC
    version : UInt32
    stream_id : UInt32
    default : UInt32
    reserved : UInt32
  end
  struct DVR_STREAM_DESC
    version : UInt32
    stream_id : UInt32
    default : LibC::BOOL
    creation : LibC::BOOL
    reserved : UInt32
    guid_sub_media_type : Guid
    guid_format_type : Guid
    media_type : AM_MEDIA_TYPE
  end
  struct PID_BITS_MIDL
    bits : UInt16
  end
  struct MPEG_HEADER_BITS_MIDL
    bits : UInt16
  end
  struct MPEG_HEADER_VERSION_BITS_MIDL
    bits : UInt8
  end
  struct TID_EXTENSION
    w_tid_ext : UInt16
    w_count : UInt16
  end
  struct SECTION
    table_id : UInt8
    header : SECTION_Header_e__Union
    section_data : UInt8[0]*
  end
  struct LONG_SECTION
    table_id : UInt8
    header : LONG_SECTION_Header_e__Union
    table_id_extension : UInt16
    version : LONG_SECTION_Version_e__Union
    section_number : UInt8
    last_section_number : UInt8
    remaining_data : UInt8[0]*
  end
  struct DSMCC_SECTION
    table_id : UInt8
    header : DSMCC_SECTION_Header_e__Union
    table_id_extension : UInt16
    version : DSMCC_SECTION_Version_e__Union
    section_number : UInt8
    last_section_number : UInt8
    protocol_discriminator : UInt8
    dsmcc_type : UInt8
    message_id : UInt16
    transaction_id : UInt32
    reserved : UInt8
    adaptation_length : UInt8
    message_length : UInt16
    remaining_data : UInt8[0]*
  end
  struct MPEG_RQST_PACKET
    dw_length : UInt32
    p_section : SECTION*
  end
  struct MPEG_PACKET_LIST
    w_packet_count : UInt16
    packet_list : MPEG_RQST_PACKET[0]**
  end
  struct DSMCC_FILTER_OPTIONS
    f_specify_protocol : LibC::BOOL
    protocol : UInt8
    f_specify_type : LibC::BOOL
    type : UInt8
    f_specify_message_id : LibC::BOOL
    message_id : UInt16
    f_specify_transaction_id : LibC::BOOL
    f_use_trx_id_message_id_mask : LibC::BOOL
    transaction_id : UInt32
    f_specify_module_version : LibC::BOOL
    module_version : UInt8
    f_specify_block_number : LibC::BOOL
    block_number : UInt16
    f_get_module_call : LibC::BOOL
    number_of_blocks_in_module : UInt16
  end
  struct ATSC_FILTER_OPTIONS
    f_specify_etm_id : LibC::BOOL
    etm_id : UInt32
  end
  struct DVB_EIT_FILTER_OPTIONS
    f_specify_segment : LibC::BOOL
    b_segment : UInt8
  end
  struct MPEG2_FILTER
    b_version_number : UInt8
    w_filter_size : UInt16
    f_use_raw_filtering_bits : LibC::BOOL
    filter : UInt8[16]*
    mask : UInt8[16]*
    f_specify_table_id_extension : LibC::BOOL
    table_id_extension : UInt16
    f_specify_version : LibC::BOOL
    version : UInt8
    f_specify_section_number : LibC::BOOL
    section_number : UInt8
    f_specify_current_next : LibC::BOOL
    f_next : LibC::BOOL
    f_specify_dsmcc_options : LibC::BOOL
    dsmcc : DSMCC_FILTER_OPTIONS
    f_specify_atsc_options : LibC::BOOL
    atsc : ATSC_FILTER_OPTIONS
  end
  struct MPEG2_FILTER2
    anonymous : MPEG2_FILTER2_Anonymous_e__Union
    f_specify_dvb_eit_options : LibC::BOOL
    dvb_eit : DVB_EIT_FILTER_OPTIONS
  end
  struct MPEG2_FILTER2_Anonymous_e__Union_Anonymous_e__Struct
    b_version_number : UInt8
    w_filter_size : UInt16
    f_use_raw_filtering_bits : LibC::BOOL
    filter : UInt8[16]*
    mask : UInt8[16]*
    f_specify_table_id_extension : LibC::BOOL
    table_id_extension : UInt16
    f_specify_version : LibC::BOOL
    version : UInt8
    f_specify_section_number : LibC::BOOL
    section_number : UInt8
    f_specify_current_next : LibC::BOOL
    f_next : LibC::BOOL
    f_specify_dsmcc_options : LibC::BOOL
    dsmcc : DSMCC_FILTER_OPTIONS
    f_specify_atsc_options : LibC::BOOL
    atsc : ATSC_FILTER_OPTIONS
  end
  struct MPEG_STREAM_BUFFER
    hr : HRESULT
    dw_data_buffer_size : UInt32
    dw_size_of_data_read : UInt32
    p_data_buffer : UInt8*
  end
  struct MPEG_TIME
    hours : UInt8
    minutes : UInt8
    seconds : UInt8
  end
  struct MPEG_DATE
    date : UInt8
    month : UInt8
    year : UInt16
  end
  struct MPEG_DATE_AND_TIME
    d : MPEG_DATE
    t : MPEG_TIME
  end
  struct MPEG_BCS_DEMUX
    avm_graph_id : UInt32
  end
  struct MPEG_WINSOCK
    avm_graph_id : UInt32
  end
  struct MPEG_CONTEXT
    type : MPEG_CONTEXT_TYPE
    u : MPEG_CONTEXT_U_e__Union
  end
  struct MPEG_SERVICE_REQUEST
    type : MPEG_REQUEST_TYPE
    context : MPEG_CONTEXT
    pid : UInt16
    table_id : UInt8
    filter : MPEG2_FILTER
    flags : UInt32
  end
  struct MPEG_SERVICE_RESPONSE
    ip_address : UInt32
    port : UInt16
  end
  struct DSMCC_ELEMENT
    pid : UInt16
    b_component_tag : UInt8
    dw_carousel_id : UInt32
    dw_transaction_id : UInt32
    p_next : DSMCC_ELEMENT*
  end
  struct MPE_ELEMENT
    pid : UInt16
    b_component_tag : UInt8
    p_next : MPE_ELEMENT*
  end
  struct MPEG_STREAM_FILTER
    w_pid_value : UInt16
    dw_filter_size : UInt32
    f_crc_enabled : LibC::BOOL
    rgch_filter : UInt8[16]*
    rgch_mask : UInt8[16]*
  end
  struct Mpeg2TableSampleHdr
    section_count : UInt8
    reserved : UInt8[3]*
    section_offsets : Int32[0]*
  end
  struct ProgramElement
    w_program_number : UInt16
    w_program_map_pid : UInt16
  end
  struct UDCR_TAG
    b_version : UInt8
    kid : UInt8[25]*
    ull_base_counter : UInt64
    ull_base_counter_range : UInt64
    f_scrambled : LibC::BOOL
    b_stream_mark : UInt8
    dw_reserved1 : UInt32
    dw_reserved2 : UInt32
  end
  struct PIC_SEQ_SAMPLE
    _bitfield : UInt32
  end
  struct SAMPLE_SEQ_OFFSET
    _bitfield : UInt32
  end
  struct VA_OPTIONAL_VIDEO_PROPERTIES
    dw_picture_height : UInt16
    dw_picture_width : UInt16
    dw_aspect_ratio_x : UInt16
    dw_aspect_ratio_y : UInt16
    va_video_format : VA_VIDEO_FORMAT
    va_color_primaries : VA_COLOR_PRIMARIES
    va_transfer_characteristics : VA_TRANSFER_CHARACTERISTICS
    va_matrix_coefficients : VA_MATRIX_COEFFICIENTS
  end
  struct TRANSPORT_PROPERTIES
    pid : UInt32
    pcr : Int64
    fields : TRANSPORT_PROPERTIES_Fields_e__Union
  end
  struct TRANSPORT_PROPERTIES_Fields_e__Union_Others
    _bitfield : Int64
  end
  struct PBDA_TAG_ATTRIBUTE
    table_uu_id : Guid
    table_id : UInt8
    version_no : UInt16
    table_data_size : UInt32
    table_data : UInt8[0]*
  end
  struct CAPTURE_STREAMTIME
    stream_time : Int64
  end
  struct DSHOW_STREAM_DESC
    version_no : UInt32
    stream_id : UInt32
    default : LibC::BOOL
    creation : LibC::BOOL
    reserved : UInt32
  end
  struct SAMPLE_LIVE_STREAM_TIME
    qw_stream_time : UInt64
    qw_live_time : UInt64
  end
  struct KSP_BDA_NODE_PIN
    property : KSIDENTIFIER
    ul_node_type : UInt32
    ul_input_pin_id : UInt32
    ul_output_pin_id : UInt32
  end
  struct KSM_BDA_PIN
    method : KSIDENTIFIER
    anonymous : KSM_BDA_PIN_Anonymous_e__Union
    reserved : UInt32
  end
  struct KSM_BDA_PIN_PAIR
    method : KSIDENTIFIER
    anonymous1 : KSM_BDA_PIN_PAIR_Anonymous1_e__Union
    anonymous2 : KSM_BDA_PIN_PAIR_Anonymous2_e__Union
  end
  struct KSP_NODE_ESPID
    property : KSP_NODE
    es_pid : UInt32
  end
  struct KSM_BDA_DEBUG_LEVEL
    method : KSIDENTIFIER
    uc_debug_level : UInt8
    ul_debug_string_size : UInt32
    argb_debug_string : UInt8[0]*
  end
  struct BDA_DEBUG_DATA
    l_result : Int32
    uuid_debug_data_type : Guid
    ul_data_size : UInt32
    argb_debug_data : UInt8[0]*
  end
  struct BDA_EVENT_DATA
    l_result : Int32
    ul_event_id : UInt32
    uuid_event_type : Guid
    ul_event_data_length : UInt32
    argb_event_data : UInt8[0]*
  end
  struct KSM_BDA_EVENT_COMPLETE
    method : KSIDENTIFIER
    ul_event_id : UInt32
    ul_event_result : UInt32
  end
  struct KSM_BDA_DRM_SETDRM
    node_method : KSM_NODE
    new_dr_muuid : Guid
  end
  struct KSM_BDA_BUFFER
    node_method : KSM_NODE
    ul_buffer_size : UInt32
    argb_buffer : UInt8[0]*
  end
  struct KSM_BDA_WMDRM_LICENSE
    node_method : KSM_NODE
    uuid_key_id : Guid
  end
  struct KSM_BDA_WMDRM_RENEWLICENSE
    node_method : KSM_NODE
    ul_xmr_license_length : UInt32
    ul_entitlement_token_length : UInt32
    argb_data_buffer : UInt8[0]*
  end
  struct KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_purchase_token_length : UInt32
    argb_data_buffer : UInt8[0]*
  end
  struct KSM_BDA_WMDRMTUNER_SETPIDPROTECTION
    node_method : KSM_NODE
    ul_pid : UInt32
    uuid_key_id : Guid
  end
  struct KSM_BDA_WMDRMTUNER_GETPIDPROTECTION
    node_method : KSM_NODE
    ul_pid : UInt32
  end
  struct KSM_BDA_WMDRMTUNER_SYNCVALUE
    node_method : KSM_NODE
    ul_sync_value : UInt32
  end
  struct KSM_BDA_TUNER_TUNEREQUEST
    method : KSIDENTIFIER
    ul_tune_length : UInt32
    argb_tune_data : UInt8[0]*
  end
  struct KSM_BDA_GPNV_GETVALUE
    method : KSIDENTIFIER
    ul_name_length : UInt32
    c_language : CHAR[12]*
    argb_data : UInt8[0]*
  end
  struct KSM_BDA_GPNV_SETVALUE
    method : KSIDENTIFIER
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_name_length : UInt32
    ul_value_length : UInt32
    argb_name : UInt8[0]*
  end
  struct KSM_BDA_GPNV_NAMEINDEX
    method : KSIDENTIFIER
    ul_value_name_index : UInt32
  end
  struct KSM_BDA_SCAN_CAPABILTIES
    method : KSIDENTIFIER
    uuid_broadcast_standard : Guid
  end
  struct KSM_BDA_SCAN_FILTER
    method : KSIDENTIFIER
    ul_scan_modulation_type_size : UInt32
    analog_video_standards : UInt64
    argb_scan_modulation_types : UInt8[0]*
  end
  struct KSM_BDA_SCAN_START
    method : KSIDENTIFIER
    lower_frequency : UInt32
    higher_frequency : UInt32
  end
  struct KSM_BDA_GDDS_TUNEXMLFROMIDX
    method : KSIDENTIFIER
    ul_idx : UInt64
  end
  struct KSM_BDA_GDDS_SERVICEFROMTUNEXML
    method : KSIDENTIFIER
    ul_tune_xml_length : UInt32
    argb_tune_xml : UInt8[0]*
  end
  struct KSM_BDA_USERACTIVITY_USEREASON
    method : KSIDENTIFIER
    ul_use_reason : UInt32
  end
  struct KSM_BDA_CAS_ENTITLEMENTTOKEN
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_request_type : UInt32
    ul_entitlement_token_len : UInt32
    argb_entitlement_token : UInt8[0]*
  end
  struct KSM_BDA_CAS_CAPTURETOKEN
    node_method : KSM_NODE
    ul_token_length : UInt32
    argb_token : UInt8[0]*
  end
  struct KSM_BDA_CAS_OPENBROADCASTMMI
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_event_id : UInt32
  end
  struct KSM_BDA_CAS_CLOSEMMIDIALOG
    node_method : KSM_NODE
    ul_dialog_request : UInt32
    c_language : CHAR[12]*
    ul_dialog_number : UInt32
    ul_reason : UInt32
  end
  struct KSM_BDA_ISDBCAS_REQUEST
    node_method : KSM_NODE
    ul_request_id : UInt32
    ul_isdb_command_size : UInt32
    argb_isdb_command_data : UInt8[0]*
  end
  struct KSM_BDA_TS_SELECTOR_SETTSID
    node_method : KSM_NODE
    us_tsid : UInt16
  end
  struct KS_DATARANGE_BDA_ANTENNA
    data_range : KSDATAFORMAT
  end
  struct BDA_TRANSPORT_INFO
    ulcb_phyiscal_packet : UInt32
    ulcb_phyiscal_frame : UInt32
    ulcb_phyiscal_frame_alignment : UInt32
    avg_time_per_frame : Int64
  end
  struct KS_DATARANGE_BDA_TRANSPORT
    data_range : KSDATAFORMAT
    bda_transport_info : BDA_TRANSPORT_INFO
  end
  struct ChannelChangeInfo
    state : ChannelChangeSpanningEvent_State
    time_stamp : UInt64
  end
  struct ChannelTypeInfo
    channel_type : ChannelType
    time_stamp : UInt64
  end
  struct ChannelInfo
    l_frequency : Int32
    anonymous : ChannelInfo_Anonymous_e__Union
  end
  struct ChannelInfo_Anonymous_e__Union_DC_e__Struct
    l_prog_number : Int32
  end
  struct ChannelInfo_Anonymous_e__Union_DVB_e__Struct
    l_onid : Int32
    l_tsid : Int32
    l_sid : Int32
  end
  struct ChannelInfo_Anonymous_e__Union_ATSC_e__Struct
    l_prog_number : Int32
  end
  struct SpanningEventDescriptor
    w_data_len : UInt16
    w_prog_number : UInt16
    w_sid : UInt16
    b_descriptor : UInt8[0]*
  end
  struct DVBScramblingControlSpanningEvent
    ul_pid : UInt32
    f_scrambled : LibC::BOOL
  end
  struct SpanningEventEmmMessage
    b_c_abroadcaster_group_id : UInt8
    b_message_control : UInt8
    w_service_id : UInt16
    w_table_id_extension : UInt16
    b_deletion_status : UInt8
    b_displaying_duration1 : UInt8
    b_displaying_duration2 : UInt8
    b_displaying_duration3 : UInt8
    b_displaying_cycle : UInt8
    b_format_version : UInt8
    b_display_position : UInt8
    w_message_length : UInt16
    sz_message_area : Char[0]*
  end
  struct LanguageInfo
    lang_id : UInt16
    l_iso_lang_code : Int32
  end
  struct DualMonoInfo
    lang_id1 : UInt16
    lang_id2 : UInt16
    l_iso_lang_code1 : Int32
    l_iso_lang_code2 : Int32
  end
  struct PIDListSpanningEvent
    w_pid_count : UInt16
    pul_pi_ds : UInt32[0]*
  end
  struct RATING_ATTRIBUTE
    rating_attribute_id : UInt32
    rating_attribute_value : UInt32
  end
  struct RATING_SYSTEM
    rating_system_id : Guid
    _bitfield : UInt8
    country_code : UInt8[3]*
    rating_attribute_count : UInt32
    lpratingattrib : RATING_ATTRIBUTE*
  end
  struct RATING_INFO
    rating_system_count : UInt32
    lpratingsystem : RATING_SYSTEM*
  end
  struct PBDAParentalControl
    rating_system_count : UInt32
    rating_systems : RATING_SYSTEM*
  end
  struct DvbParentalRatingParam
    sz_country_code : CHAR[4]*
    b_rating : UInt8
  end
  struct DvbParentalRatingDescriptor
    ul_num_params : UInt32
    p_params : DvbParentalRatingParam[0]*
  end
  struct KSPROPERTY_BDA_RF_TUNER_CAPS_S
    property : KSP_NODE
    mode : UInt32
    analog_standards_supported : UInt32
    digital_standards_supported : UInt32
    min_frequency : UInt32
    max_frequency : UInt32
    settling_time : UInt32
    analog_sensing_range : UInt32
    digital_sensing_range : UInt32
    milli_seconds_per_m_hz : UInt32
  end
  struct KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S
    property : KSP_NODE
    current_frequency : UInt32
    frequency_range_min : UInt32
    frequency_range_max : UInt32
    milli_seconds_left : UInt32
  end
  struct KSPROPERTY_BDA_RF_TUNER_STANDARD_S
    property : KSP_NODE
    signal_type : BDA_SignalType
    signal_standard : UInt32
  end
  struct KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S
    property : KSP_NODE
    auto_detect : LibC::BOOL
  end
  struct KSEVENTDATA_BDA_RF_TUNER_SCAN_S
    event_data : KSEVENTDATA
    start_frequency : UInt32
    end_frequency : UInt32
    lock_requested : BDA_LockType
  end
  struct PID_BITS
    _bitfield : UInt16
  end
  struct MPEG_HEADER_BITS
    _bitfield : UInt16
  end
  struct MPEG_HEADER_VERSION_BITS
    _bitfield : UInt8
  end
  struct MPEG1WAVEFORMAT
    wfx : WAVEFORMATEX
    fw_head_layer : UInt16
    dw_head_bitrate : UInt32
    fw_head_mode : UInt16
    fw_head_mode_ext : UInt16
    w_head_emphasis : UInt16
    fw_head_flags : UInt16
    dw_pts_low : UInt32
    dw_pts_high : UInt32
  end
  struct MPEGLAYER3WAVEFORMAT
    wfx : WAVEFORMATEX
    w_id : UInt16
    fdw_flags : MPEGLAYER3WAVEFORMAT_FLAGS
    n_block_size : UInt16
    n_frames_per_block : UInt16
    n_codec_delay : UInt16
  end
  struct HEAACWAVEINFO
    wfx : WAVEFORMATEX
    w_payload_type : UInt16
    w_audio_profile_level_indication : UInt16
    w_struct_type : UInt16
    w_reserved1 : UInt16
    dw_reserved2 : UInt32
  end
  struct HEAACWAVEFORMAT
    wf_info : HEAACWAVEINFO
    pb_audio_specific_config : UInt8[0]*
  end
  struct DXVA_COPPSetProtectionLevelCmdData
    prot_type : UInt32
    prot_level : UInt32
    extended_info_change_mask : UInt32
    extended_info_data : UInt32
  end
  struct DXVA_COPPSetSignalingCmdData
    active_tv_protection_standard : UInt32
    aspect_ratio_change_mask1 : UInt32
    aspect_ratio_data1 : UInt32
    aspect_ratio_change_mask2 : UInt32
    aspect_ratio_data2 : UInt32
    aspect_ratio_change_mask3 : UInt32
    aspect_ratio_data3 : UInt32
    extended_info_change_mask : UInt32[4]*
    extended_info_data : UInt32[4]*
    reserved : UInt32
  end
  struct DXVA_COPPStatusData
    r_app : Guid
    dw_flags : UInt32
    dw_data : UInt32
    extended_info_valid_mask : UInt32
    extended_info_data : UInt32
  end
  struct DXVA_COPPStatusDisplayData
    r_app : Guid
    dw_flags : UInt32
    display_width : UInt32
    display_height : UInt32
    format : UInt32
    d3d_format : UInt32
    freq_numerator : UInt32
    freq_denominator : UInt32
  end
  struct DXVA_COPPStatusHDCPKeyData
    r_app : Guid
    dw_flags : UInt32
    dw_hdcp_flags : UInt32
    b_key : Guid
    reserved1 : Guid
    reserved2 : Guid
  end
  struct DXVA_COPPStatusSignalingCmdData
    r_app : Guid
    dw_flags : UInt32
    available_tv_protection_standards : UInt32
    active_tv_protection_standard : UInt32
    tv_type : UInt32
    aspect_ratio_valid_mask1 : UInt32
    aspect_ratio_data1 : UInt32
    aspect_ratio_valid_mask2 : UInt32
    aspect_ratio_data2 : UInt32
    aspect_ratio_valid_mask3 : UInt32
    aspect_ratio_data3 : UInt32
    extended_info_valid_mask : UInt32[4]*
    extended_info_data : UInt32[4]*
  end


  struct ICreateDevEnumVTbl
    query_interface : Proc(ICreateDevEnum*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICreateDevEnum*, UInt32)
    release : Proc(ICreateDevEnum*, UInt32)
    create_class_enumerator : Proc(ICreateDevEnum*, Guid*, IEnumMoniker*, UInt32, HRESULT)
  end

  ICreateDevEnum_GUID = LibC::GUID.new("29840822-5b84-11d0-bd3b-00a0c911ce86")
  CLSID_ICreateDevEnum = "29840822-5b84-11d0-bd3b-00a0c911ce86"
  struct ICreateDevEnum
    lpVtbl : ICreateDevEnumVTbl*
  end

  struct IPinVTbl
    query_interface : Proc(IPin*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPin*, UInt32)
    release : Proc(IPin*, UInt32)
    connect : Proc(IPin*, IPin, AM_MEDIA_TYPE*, HRESULT)
    receive_connection : Proc(IPin*, IPin, AM_MEDIA_TYPE*, HRESULT)
    disconnect : Proc(IPin*, HRESULT)
    connected_to : Proc(IPin*, IPin*, HRESULT)
    connection_media_type : Proc(IPin*, AM_MEDIA_TYPE*, HRESULT)
    query_pin_info : Proc(IPin*, PIN_INFO*, HRESULT)
    query_direction : Proc(IPin*, PIN_DIRECTION*, HRESULT)
    query_id : Proc(IPin*, LibC::LPWSTR*, HRESULT)
    query_accept : Proc(IPin*, AM_MEDIA_TYPE*, HRESULT)
    enum_media_types : Proc(IPin*, IEnumMediaTypes*, HRESULT)
    query_internal_connections : Proc(IPin*, IPin*, UInt32*, HRESULT)
    end_of_stream : Proc(IPin*, HRESULT)
    begin_flush : Proc(IPin*, HRESULT)
    end_flush : Proc(IPin*, HRESULT)
    new_segment : Proc(IPin*, Int64, Int64, Float64, HRESULT)
  end

  IPin_GUID = LibC::GUID.new("56a86891-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IPin = "56a86891-0ad4-11ce-b03a-0020af0ba770"
  struct IPin
    lpVtbl : IPinVTbl*
  end

  struct IEnumPinsVTbl
    query_interface : Proc(IEnumPins*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumPins*, UInt32)
    release : Proc(IEnumPins*, UInt32)
    next : Proc(IEnumPins*, UInt32, IPin*, UInt32*, HRESULT)
    skip : Proc(IEnumPins*, UInt32, HRESULT)
    reset : Proc(IEnumPins*, HRESULT)
    clone : Proc(IEnumPins*, IEnumPins*, HRESULT)
  end

  IEnumPins_GUID = LibC::GUID.new("56a86892-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IEnumPins = "56a86892-0ad4-11ce-b03a-0020af0ba770"
  struct IEnumPins
    lpVtbl : IEnumPinsVTbl*
  end

  struct IEnumMediaTypesVTbl
    query_interface : Proc(IEnumMediaTypes*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumMediaTypes*, UInt32)
    release : Proc(IEnumMediaTypes*, UInt32)
    next : Proc(IEnumMediaTypes*, UInt32, AM_MEDIA_TYPE**, UInt32*, HRESULT)
    skip : Proc(IEnumMediaTypes*, UInt32, HRESULT)
    reset : Proc(IEnumMediaTypes*, HRESULT)
    clone : Proc(IEnumMediaTypes*, IEnumMediaTypes*, HRESULT)
  end

  IEnumMediaTypes_GUID = LibC::GUID.new("89c31040-846b-11ce-97d3-00aa0055595a")
  CLSID_IEnumMediaTypes = "89c31040-846b-11ce-97d3-00aa0055595a"
  struct IEnumMediaTypes
    lpVtbl : IEnumMediaTypesVTbl*
  end

  struct IFilterGraphVTbl
    query_interface : Proc(IFilterGraph*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterGraph*, UInt32)
    release : Proc(IFilterGraph*, UInt32)
    add_filter : Proc(IFilterGraph*, IBaseFilter, LibC::LPWSTR, HRESULT)
    remove_filter : Proc(IFilterGraph*, IBaseFilter, HRESULT)
    enum_filters : Proc(IFilterGraph*, IEnumFilters*, HRESULT)
    find_filter_by_name : Proc(IFilterGraph*, LibC::LPWSTR, IBaseFilter*, HRESULT)
    connect_direct : Proc(IFilterGraph*, IPin, IPin, AM_MEDIA_TYPE*, HRESULT)
    reconnect : Proc(IFilterGraph*, IPin, HRESULT)
    disconnect : Proc(IFilterGraph*, IPin, HRESULT)
    set_default_sync_source : Proc(IFilterGraph*, HRESULT)
  end

  IFilterGraph_GUID = LibC::GUID.new("56a8689f-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IFilterGraph = "56a8689f-0ad4-11ce-b03a-0020af0ba770"
  struct IFilterGraph
    lpVtbl : IFilterGraphVTbl*
  end

  struct IEnumFiltersVTbl
    query_interface : Proc(IEnumFilters*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumFilters*, UInt32)
    release : Proc(IEnumFilters*, UInt32)
    next : Proc(IEnumFilters*, UInt32, IBaseFilter*, UInt32*, HRESULT)
    skip : Proc(IEnumFilters*, UInt32, HRESULT)
    reset : Proc(IEnumFilters*, HRESULT)
    clone : Proc(IEnumFilters*, IEnumFilters*, HRESULT)
  end

  IEnumFilters_GUID = LibC::GUID.new("56a86893-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IEnumFilters = "56a86893-0ad4-11ce-b03a-0020af0ba770"
  struct IEnumFilters
    lpVtbl : IEnumFiltersVTbl*
  end

  struct IMediaFilterVTbl
    query_interface : Proc(IMediaFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaFilter*, UInt32)
    release : Proc(IMediaFilter*, UInt32)
    get_class_id : Proc(IMediaFilter*, Guid*, HRESULT)
    stop : Proc(IMediaFilter*, HRESULT)
    pause : Proc(IMediaFilter*, HRESULT)
    run : Proc(IMediaFilter*, Int64, HRESULT)
    get_state : Proc(IMediaFilter*, UInt32, FILTER_STATE*, HRESULT)
    set_sync_source : Proc(IMediaFilter*, IReferenceClock, HRESULT)
    get_sync_source : Proc(IMediaFilter*, IReferenceClock*, HRESULT)
  end

  IMediaFilter_GUID = LibC::GUID.new("56a86899-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaFilter = "56a86899-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaFilter
    lpVtbl : IMediaFilterVTbl*
  end

  struct IBaseFilterVTbl
    query_interface : Proc(IBaseFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBaseFilter*, UInt32)
    release : Proc(IBaseFilter*, UInt32)
    get_class_id : Proc(IBaseFilter*, Guid*, HRESULT)
    stop : Proc(IBaseFilter*, HRESULT)
    pause : Proc(IBaseFilter*, HRESULT)
    run : Proc(IBaseFilter*, Int64, HRESULT)
    get_state : Proc(IBaseFilter*, UInt32, FILTER_STATE*, HRESULT)
    set_sync_source : Proc(IBaseFilter*, IReferenceClock, HRESULT)
    get_sync_source : Proc(IBaseFilter*, IReferenceClock*, HRESULT)
    enum_pins : Proc(IBaseFilter*, IEnumPins*, HRESULT)
    find_pin : Proc(IBaseFilter*, LibC::LPWSTR, IPin*, HRESULT)
    query_filter_info : Proc(IBaseFilter*, FILTER_INFO*, HRESULT)
    join_filter_graph : Proc(IBaseFilter*, IFilterGraph, LibC::LPWSTR, HRESULT)
    query_vendor_info : Proc(IBaseFilter*, LibC::LPWSTR*, HRESULT)
  end

  IBaseFilter_GUID = LibC::GUID.new("56a86895-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IBaseFilter = "56a86895-0ad4-11ce-b03a-0020af0ba770"
  struct IBaseFilter
    lpVtbl : IBaseFilterVTbl*
  end

  struct IMediaSampleVTbl
    query_interface : Proc(IMediaSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaSample*, UInt32)
    release : Proc(IMediaSample*, UInt32)
    get_pointer : Proc(IMediaSample*, UInt8**, HRESULT)
    get_size : Proc(IMediaSample*, Int32)
    get_time : Proc(IMediaSample*, Int64*, Int64*, HRESULT)
    set_time : Proc(IMediaSample*, Int64*, Int64*, HRESULT)
    is_sync_point : Proc(IMediaSample*, HRESULT)
    set_sync_point : Proc(IMediaSample*, LibC::BOOL, HRESULT)
    is_preroll : Proc(IMediaSample*, HRESULT)
    set_preroll : Proc(IMediaSample*, LibC::BOOL, HRESULT)
    get_actual_data_length : Proc(IMediaSample*, Int32)
    set_actual_data_length : Proc(IMediaSample*, Int32, HRESULT)
    get_media_type : Proc(IMediaSample*, AM_MEDIA_TYPE**, HRESULT)
    set_media_type : Proc(IMediaSample*, AM_MEDIA_TYPE*, HRESULT)
    is_discontinuity : Proc(IMediaSample*, HRESULT)
    set_discontinuity : Proc(IMediaSample*, LibC::BOOL, HRESULT)
    get_media_time : Proc(IMediaSample*, Int64*, Int64*, HRESULT)
    set_media_time : Proc(IMediaSample*, Int64*, Int64*, HRESULT)
  end

  IMediaSample_GUID = LibC::GUID.new("56a8689a-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaSample = "56a8689a-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaSample
    lpVtbl : IMediaSampleVTbl*
  end

  struct IMediaSample2VTbl
    query_interface : Proc(IMediaSample2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaSample2*, UInt32)
    release : Proc(IMediaSample2*, UInt32)
    get_pointer : Proc(IMediaSample2*, UInt8**, HRESULT)
    get_size : Proc(IMediaSample2*, Int32)
    get_time : Proc(IMediaSample2*, Int64*, Int64*, HRESULT)
    set_time : Proc(IMediaSample2*, Int64*, Int64*, HRESULT)
    is_sync_point : Proc(IMediaSample2*, HRESULT)
    set_sync_point : Proc(IMediaSample2*, LibC::BOOL, HRESULT)
    is_preroll : Proc(IMediaSample2*, HRESULT)
    set_preroll : Proc(IMediaSample2*, LibC::BOOL, HRESULT)
    get_actual_data_length : Proc(IMediaSample2*, Int32)
    set_actual_data_length : Proc(IMediaSample2*, Int32, HRESULT)
    get_media_type : Proc(IMediaSample2*, AM_MEDIA_TYPE**, HRESULT)
    set_media_type : Proc(IMediaSample2*, AM_MEDIA_TYPE*, HRESULT)
    is_discontinuity : Proc(IMediaSample2*, HRESULT)
    set_discontinuity : Proc(IMediaSample2*, LibC::BOOL, HRESULT)
    get_media_time : Proc(IMediaSample2*, Int64*, Int64*, HRESULT)
    set_media_time : Proc(IMediaSample2*, Int64*, Int64*, HRESULT)
    get_properties : Proc(IMediaSample2*, UInt32, UInt8*, HRESULT)
    set_properties : Proc(IMediaSample2*, UInt32, UInt8*, HRESULT)
  end

  IMediaSample2_GUID = LibC::GUID.new("36b73884-c2c8-11cf-8b46-00805f6cef60")
  CLSID_IMediaSample2 = "36b73884-c2c8-11cf-8b46-00805f6cef60"
  struct IMediaSample2
    lpVtbl : IMediaSample2VTbl*
  end

  struct IMediaSample2ConfigVTbl
    query_interface : Proc(IMediaSample2Config*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaSample2Config*, UInt32)
    release : Proc(IMediaSample2Config*, UInt32)
    get_surface : Proc(IMediaSample2Config*, IUnknown*, HRESULT)
  end

  IMediaSample2Config_GUID = LibC::GUID.new("68961e68-832b-41ea-bc91-63593f3e70e3")
  CLSID_IMediaSample2Config = "68961e68-832b-41ea-bc91-63593f3e70e3"
  struct IMediaSample2Config
    lpVtbl : IMediaSample2ConfigVTbl*
  end

  struct IMemAllocatorVTbl
    query_interface : Proc(IMemAllocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMemAllocator*, UInt32)
    release : Proc(IMemAllocator*, UInt32)
    set_properties : Proc(IMemAllocator*, ALLOCATOR_PROPERTIES*, ALLOCATOR_PROPERTIES*, HRESULT)
    get_properties : Proc(IMemAllocator*, ALLOCATOR_PROPERTIES*, HRESULT)
    commit : Proc(IMemAllocator*, HRESULT)
    decommit : Proc(IMemAllocator*, HRESULT)
    get_buffer : Proc(IMemAllocator*, IMediaSample*, Int64*, Int64*, UInt32, HRESULT)
    release_buffer : Proc(IMemAllocator*, IMediaSample, HRESULT)
  end

  IMemAllocator_GUID = LibC::GUID.new("56a8689c-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMemAllocator = "56a8689c-0ad4-11ce-b03a-0020af0ba770"
  struct IMemAllocator
    lpVtbl : IMemAllocatorVTbl*
  end

  struct IMemAllocatorCallbackTempVTbl
    query_interface : Proc(IMemAllocatorCallbackTemp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMemAllocatorCallbackTemp*, UInt32)
    release : Proc(IMemAllocatorCallbackTemp*, UInt32)
    set_properties : Proc(IMemAllocatorCallbackTemp*, ALLOCATOR_PROPERTIES*, ALLOCATOR_PROPERTIES*, HRESULT)
    get_properties : Proc(IMemAllocatorCallbackTemp*, ALLOCATOR_PROPERTIES*, HRESULT)
    commit : Proc(IMemAllocatorCallbackTemp*, HRESULT)
    decommit : Proc(IMemAllocatorCallbackTemp*, HRESULT)
    get_buffer : Proc(IMemAllocatorCallbackTemp*, IMediaSample*, Int64*, Int64*, UInt32, HRESULT)
    release_buffer : Proc(IMemAllocatorCallbackTemp*, IMediaSample, HRESULT)
    set_notify : Proc(IMemAllocatorCallbackTemp*, IMemAllocatorNotifyCallbackTemp, HRESULT)
    get_free_count : Proc(IMemAllocatorCallbackTemp*, Int32*, HRESULT)
  end

  IMemAllocatorCallbackTemp_GUID = LibC::GUID.new("379a0cf0-c1de-11d2-abf5-00a0c905f375")
  CLSID_IMemAllocatorCallbackTemp = "379a0cf0-c1de-11d2-abf5-00a0c905f375"
  struct IMemAllocatorCallbackTemp
    lpVtbl : IMemAllocatorCallbackTempVTbl*
  end

  struct IMemAllocatorNotifyCallbackTempVTbl
    query_interface : Proc(IMemAllocatorNotifyCallbackTemp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMemAllocatorNotifyCallbackTemp*, UInt32)
    release : Proc(IMemAllocatorNotifyCallbackTemp*, UInt32)
    notify_release : Proc(IMemAllocatorNotifyCallbackTemp*, HRESULT)
  end

  IMemAllocatorNotifyCallbackTemp_GUID = LibC::GUID.new("92980b30-c1de-11d2-abf5-00a0c905f375")
  CLSID_IMemAllocatorNotifyCallbackTemp = "92980b30-c1de-11d2-abf5-00a0c905f375"
  struct IMemAllocatorNotifyCallbackTemp
    lpVtbl : IMemAllocatorNotifyCallbackTempVTbl*
  end

  struct IMemInputPinVTbl
    query_interface : Proc(IMemInputPin*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMemInputPin*, UInt32)
    release : Proc(IMemInputPin*, UInt32)
    get_allocator : Proc(IMemInputPin*, IMemAllocator*, HRESULT)
    notify_allocator : Proc(IMemInputPin*, IMemAllocator, LibC::BOOL, HRESULT)
    get_allocator_requirements : Proc(IMemInputPin*, ALLOCATOR_PROPERTIES*, HRESULT)
    receive : Proc(IMemInputPin*, IMediaSample, HRESULT)
    receive_multiple : Proc(IMemInputPin*, IMediaSample*, Int32, Int32*, HRESULT)
    receive_can_block : Proc(IMemInputPin*, HRESULT)
  end

  IMemInputPin_GUID = LibC::GUID.new("56a8689d-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMemInputPin = "56a8689d-0ad4-11ce-b03a-0020af0ba770"
  struct IMemInputPin
    lpVtbl : IMemInputPinVTbl*
  end

  struct IAMovieSetupVTbl
    query_interface : Proc(IAMovieSetup*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMovieSetup*, UInt32)
    release : Proc(IAMovieSetup*, UInt32)
    register : Proc(IAMovieSetup*, HRESULT)
    unregister : Proc(IAMovieSetup*, HRESULT)
  end

  IAMovieSetup_GUID = LibC::GUID.new("a3d8cec0-7e5a-11cf-bbc5-00805f6cef20")
  CLSID_IAMovieSetup = "a3d8cec0-7e5a-11cf-bbc5-00805f6cef20"
  struct IAMovieSetup
    lpVtbl : IAMovieSetupVTbl*
  end

  struct IMediaSeekingVTbl
    query_interface : Proc(IMediaSeeking*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaSeeking*, UInt32)
    release : Proc(IMediaSeeking*, UInt32)
    get_capabilities : Proc(IMediaSeeking*, UInt32*, HRESULT)
    check_capabilities : Proc(IMediaSeeking*, UInt32*, HRESULT)
    is_format_supported : Proc(IMediaSeeking*, Guid*, HRESULT)
    query_preferred_format : Proc(IMediaSeeking*, Guid*, HRESULT)
    get_time_format : Proc(IMediaSeeking*, Guid*, HRESULT)
    is_using_time_format : Proc(IMediaSeeking*, Guid*, HRESULT)
    set_time_format : Proc(IMediaSeeking*, Guid*, HRESULT)
    get_duration : Proc(IMediaSeeking*, Int64*, HRESULT)
    get_stop_position : Proc(IMediaSeeking*, Int64*, HRESULT)
    get_current_position : Proc(IMediaSeeking*, Int64*, HRESULT)
    convert_time_format : Proc(IMediaSeeking*, Int64*, Guid*, Int64, Guid*, HRESULT)
    set_positions : Proc(IMediaSeeking*, Int64*, UInt32, Int64*, UInt32, HRESULT)
    get_positions : Proc(IMediaSeeking*, Int64*, Int64*, HRESULT)
    get_available : Proc(IMediaSeeking*, Int64*, Int64*, HRESULT)
    set_rate : Proc(IMediaSeeking*, Float64, HRESULT)
    get_rate : Proc(IMediaSeeking*, Float64*, HRESULT)
    get_preroll : Proc(IMediaSeeking*, Int64*, HRESULT)
  end

  IMediaSeeking_GUID = LibC::GUID.new("36b73880-c2c8-11cf-8b46-00805f6cef60")
  CLSID_IMediaSeeking = "36b73880-c2c8-11cf-8b46-00805f6cef60"
  struct IMediaSeeking
    lpVtbl : IMediaSeekingVTbl*
  end

  struct IEnumRegFiltersVTbl
    query_interface : Proc(IEnumRegFilters*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumRegFilters*, UInt32)
    release : Proc(IEnumRegFilters*, UInt32)
    next : Proc(IEnumRegFilters*, UInt32, REGFILTER**, UInt32*, HRESULT)
    skip : Proc(IEnumRegFilters*, UInt32, HRESULT)
    reset : Proc(IEnumRegFilters*, HRESULT)
    clone : Proc(IEnumRegFilters*, IEnumRegFilters*, HRESULT)
  end

  IEnumRegFilters_GUID = LibC::GUID.new("56a868a4-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IEnumRegFilters = "56a868a4-0ad4-11ce-b03a-0020af0ba770"
  struct IEnumRegFilters
    lpVtbl : IEnumRegFiltersVTbl*
  end

  struct IFilterMapperVTbl
    query_interface : Proc(IFilterMapper*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterMapper*, UInt32)
    release : Proc(IFilterMapper*, UInt32)
    register_filter : Proc(IFilterMapper*, Guid, LibC::LPWSTR, UInt32, HRESULT)
    register_filter_instance : Proc(IFilterMapper*, Guid, LibC::LPWSTR, Guid*, HRESULT)
    register_pin : Proc(IFilterMapper*, Guid, LibC::LPWSTR, LibC::BOOL, LibC::BOOL, LibC::BOOL, LibC::BOOL, Guid, LibC::LPWSTR, HRESULT)
    register_pin_type : Proc(IFilterMapper*, Guid, LibC::LPWSTR, Guid, Guid, HRESULT)
    unregister_filter : Proc(IFilterMapper*, Guid, HRESULT)
    unregister_filter_instance : Proc(IFilterMapper*, Guid, HRESULT)
    unregister_pin : Proc(IFilterMapper*, Guid, LibC::LPWSTR, HRESULT)
    enum_matching_filters : Proc(IFilterMapper*, IEnumRegFilters*, UInt32, LibC::BOOL, Guid, Guid, LibC::BOOL, LibC::BOOL, Guid, Guid, HRESULT)
  end

  IFilterMapper_GUID = LibC::GUID.new("56a868a3-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IFilterMapper = "56a868a3-0ad4-11ce-b03a-0020af0ba770"
  struct IFilterMapper
    lpVtbl : IFilterMapperVTbl*
  end

  struct IFilterMapper2VTbl
    query_interface : Proc(IFilterMapper2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterMapper2*, UInt32)
    release : Proc(IFilterMapper2*, UInt32)
    create_category : Proc(IFilterMapper2*, Guid*, UInt32, LibC::LPWSTR, HRESULT)
    unregister_filter : Proc(IFilterMapper2*, Guid*, LibC::LPWSTR, Guid*, HRESULT)
    register_filter : Proc(IFilterMapper2*, Guid*, LibC::LPWSTR, IMoniker*, Guid*, LibC::LPWSTR, REGFILTER2*, HRESULT)
    enum_matching_filters : Proc(IFilterMapper2*, IEnumMoniker*, UInt32, LibC::BOOL, UInt32, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, LibC::BOOL, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, HRESULT)
  end

  IFilterMapper2_GUID = LibC::GUID.new("b79bb0b0-33c1-11d1-abe1-00a0c905f375")
  CLSID_IFilterMapper2 = "b79bb0b0-33c1-11d1-abe1-00a0c905f375"
  struct IFilterMapper2
    lpVtbl : IFilterMapper2VTbl*
  end

  struct IFilterMapper3VTbl
    query_interface : Proc(IFilterMapper3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterMapper3*, UInt32)
    release : Proc(IFilterMapper3*, UInt32)
    create_category : Proc(IFilterMapper3*, Guid*, UInt32, LibC::LPWSTR, HRESULT)
    unregister_filter : Proc(IFilterMapper3*, Guid*, LibC::LPWSTR, Guid*, HRESULT)
    register_filter : Proc(IFilterMapper3*, Guid*, LibC::LPWSTR, IMoniker*, Guid*, LibC::LPWSTR, REGFILTER2*, HRESULT)
    enum_matching_filters : Proc(IFilterMapper3*, IEnumMoniker*, UInt32, LibC::BOOL, UInt32, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, LibC::BOOL, LibC::BOOL, UInt32, Guid*, REGPINMEDIUM*, Guid*, HRESULT)
    get_i_create_dev_enum : Proc(IFilterMapper3*, ICreateDevEnum*, HRESULT)
  end

  IFilterMapper3_GUID = LibC::GUID.new("b79bb0b1-33c1-11d1-abe1-00a0c905f375")
  CLSID_IFilterMapper3 = "b79bb0b1-33c1-11d1-abe1-00a0c905f375"
  struct IFilterMapper3
    lpVtbl : IFilterMapper3VTbl*
  end

  struct IQualityControlVTbl
    query_interface : Proc(IQualityControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQualityControl*, UInt32)
    release : Proc(IQualityControl*, UInt32)
    notify : Proc(IQualityControl*, IBaseFilter, Quality, HRESULT)
    set_sink : Proc(IQualityControl*, IQualityControl, HRESULT)
  end

  IQualityControl_GUID = LibC::GUID.new("56a868a5-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IQualityControl = "56a868a5-0ad4-11ce-b03a-0020af0ba770"
  struct IQualityControl
    lpVtbl : IQualityControlVTbl*
  end

  struct IOverlayNotifyVTbl
    query_interface : Proc(IOverlayNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOverlayNotify*, UInt32)
    release : Proc(IOverlayNotify*, UInt32)
    on_palette_change : Proc(IOverlayNotify*, UInt32, PALETTEENTRY*, HRESULT)
    on_clip_change : Proc(IOverlayNotify*, RECT*, RECT*, RGNDATA*, HRESULT)
    on_color_key_change : Proc(IOverlayNotify*, COLORKEY*, HRESULT)
    on_position_change : Proc(IOverlayNotify*, RECT*, RECT*, HRESULT)
  end

  IOverlayNotify_GUID = LibC::GUID.new("56a868a0-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IOverlayNotify = "56a868a0-0ad4-11ce-b03a-0020af0ba770"
  struct IOverlayNotify
    lpVtbl : IOverlayNotifyVTbl*
  end

  struct IOverlayNotify2VTbl
    query_interface : Proc(IOverlayNotify2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOverlayNotify2*, UInt32)
    release : Proc(IOverlayNotify2*, UInt32)
    on_palette_change : Proc(IOverlayNotify2*, UInt32, PALETTEENTRY*, HRESULT)
    on_clip_change : Proc(IOverlayNotify2*, RECT*, RECT*, RGNDATA*, HRESULT)
    on_color_key_change : Proc(IOverlayNotify2*, COLORKEY*, HRESULT)
    on_position_change : Proc(IOverlayNotify2*, RECT*, RECT*, HRESULT)
    on_display_change : Proc(IOverlayNotify2*, HMONITOR, HRESULT)
  end

  IOverlayNotify2_GUID = LibC::GUID.new("680efa10-d535-11d1-87c8-00a0c9223196")
  CLSID_IOverlayNotify2 = "680efa10-d535-11d1-87c8-00a0c9223196"
  struct IOverlayNotify2
    lpVtbl : IOverlayNotify2VTbl*
  end

  struct IOverlayVTbl
    query_interface : Proc(IOverlay*, Guid*, Void**, HRESULT)
    add_ref : Proc(IOverlay*, UInt32)
    release : Proc(IOverlay*, UInt32)
    get_palette : Proc(IOverlay*, UInt32*, PALETTEENTRY**, HRESULT)
    set_palette : Proc(IOverlay*, UInt32, PALETTEENTRY*, HRESULT)
    get_default_color_key : Proc(IOverlay*, COLORKEY*, HRESULT)
    get_color_key : Proc(IOverlay*, COLORKEY*, HRESULT)
    set_color_key : Proc(IOverlay*, COLORKEY*, HRESULT)
    get_window_handle : Proc(IOverlay*, HANDLE*, HRESULT)
    get_clip_list : Proc(IOverlay*, RECT*, RECT*, RGNDATA**, HRESULT)
    get_video_position : Proc(IOverlay*, RECT*, RECT*, HRESULT)
    advise : Proc(IOverlay*, IOverlayNotify, UInt32, HRESULT)
    unadvise : Proc(IOverlay*, HRESULT)
  end

  IOverlay_GUID = LibC::GUID.new("56a868a1-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IOverlay = "56a868a1-0ad4-11ce-b03a-0020af0ba770"
  struct IOverlay
    lpVtbl : IOverlayVTbl*
  end

  struct IMediaEventSinkVTbl
    query_interface : Proc(IMediaEventSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaEventSink*, UInt32)
    release : Proc(IMediaEventSink*, UInt32)
    notify : Proc(IMediaEventSink*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
  end

  IMediaEventSink_GUID = LibC::GUID.new("56a868a2-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaEventSink = "56a868a2-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaEventSink
    lpVtbl : IMediaEventSinkVTbl*
  end

  struct IFileSourceFilterVTbl
    query_interface : Proc(IFileSourceFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSourceFilter*, UInt32)
    release : Proc(IFileSourceFilter*, UInt32)
    load : Proc(IFileSourceFilter*, LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)
    get_cur_file : Proc(IFileSourceFilter*, LibC::LPWSTR*, AM_MEDIA_TYPE*, HRESULT)
  end

  IFileSourceFilter_GUID = LibC::GUID.new("56a868a6-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IFileSourceFilter = "56a868a6-0ad4-11ce-b03a-0020af0ba770"
  struct IFileSourceFilter
    lpVtbl : IFileSourceFilterVTbl*
  end

  struct IFileSinkFilterVTbl
    query_interface : Proc(IFileSinkFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSinkFilter*, UInt32)
    release : Proc(IFileSinkFilter*, UInt32)
    set_file_name : Proc(IFileSinkFilter*, LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)
    get_cur_file : Proc(IFileSinkFilter*, LibC::LPWSTR*, AM_MEDIA_TYPE*, HRESULT)
  end

  IFileSinkFilter_GUID = LibC::GUID.new("a2104830-7c70-11cf-8bce-00aa00a3f1a6")
  CLSID_IFileSinkFilter = "a2104830-7c70-11cf-8bce-00aa00a3f1a6"
  struct IFileSinkFilter
    lpVtbl : IFileSinkFilterVTbl*
  end

  struct IFileSinkFilter2VTbl
    query_interface : Proc(IFileSinkFilter2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFileSinkFilter2*, UInt32)
    release : Proc(IFileSinkFilter2*, UInt32)
    set_file_name : Proc(IFileSinkFilter2*, LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)
    get_cur_file : Proc(IFileSinkFilter2*, LibC::LPWSTR*, AM_MEDIA_TYPE*, HRESULT)
    set_mode : Proc(IFileSinkFilter2*, UInt32, HRESULT)
    get_mode : Proc(IFileSinkFilter2*, UInt32*, HRESULT)
  end

  IFileSinkFilter2_GUID = LibC::GUID.new("00855b90-ce1b-11d0-bd4f-00a0c911ce86")
  CLSID_IFileSinkFilter2 = "00855b90-ce1b-11d0-bd4f-00a0c911ce86"
  struct IFileSinkFilter2
    lpVtbl : IFileSinkFilter2VTbl*
  end

  struct IGraphBuilderVTbl
    query_interface : Proc(IGraphBuilder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGraphBuilder*, UInt32)
    release : Proc(IGraphBuilder*, UInt32)
    add_filter : Proc(IGraphBuilder*, IBaseFilter, LibC::LPWSTR, HRESULT)
    remove_filter : Proc(IGraphBuilder*, IBaseFilter, HRESULT)
    enum_filters : Proc(IGraphBuilder*, IEnumFilters*, HRESULT)
    find_filter_by_name : Proc(IGraphBuilder*, LibC::LPWSTR, IBaseFilter*, HRESULT)
    connect_direct : Proc(IGraphBuilder*, IPin, IPin, AM_MEDIA_TYPE*, HRESULT)
    reconnect : Proc(IGraphBuilder*, IPin, HRESULT)
    disconnect : Proc(IGraphBuilder*, IPin, HRESULT)
    set_default_sync_source : Proc(IGraphBuilder*, HRESULT)
    connect : Proc(IGraphBuilder*, IPin, IPin, HRESULT)
    render : Proc(IGraphBuilder*, IPin, HRESULT)
    render_file : Proc(IGraphBuilder*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    add_source_filter : Proc(IGraphBuilder*, LibC::LPWSTR, LibC::LPWSTR, IBaseFilter*, HRESULT)
    set_log_file : Proc(IGraphBuilder*, LibC::UINT_PTR, HRESULT)
    abort : Proc(IGraphBuilder*, HRESULT)
    should_operation_continue : Proc(IGraphBuilder*, HRESULT)
  end

  IGraphBuilder_GUID = LibC::GUID.new("56a868a9-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IGraphBuilder = "56a868a9-0ad4-11ce-b03a-0020af0ba770"
  struct IGraphBuilder
    lpVtbl : IGraphBuilderVTbl*
  end

  struct ICaptureGraphBuilderVTbl
    query_interface : Proc(ICaptureGraphBuilder*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICaptureGraphBuilder*, UInt32)
    release : Proc(ICaptureGraphBuilder*, UInt32)
    set_filtergraph : Proc(ICaptureGraphBuilder*, IGraphBuilder, HRESULT)
    get_filtergraph : Proc(ICaptureGraphBuilder*, IGraphBuilder*, HRESULT)
    set_output_file_name : Proc(ICaptureGraphBuilder*, Guid*, LibC::LPWSTR, IBaseFilter*, IFileSinkFilter*, HRESULT)
    find_interface : Proc(ICaptureGraphBuilder*, Guid*, IBaseFilter, Guid*, Void**, HRESULT)
    render_stream : Proc(ICaptureGraphBuilder*, Guid*, IUnknown, IBaseFilter, IBaseFilter, HRESULT)
    control_stream : Proc(ICaptureGraphBuilder*, Guid*, IBaseFilter, Int64*, Int64*, UInt16, UInt16, HRESULT)
    alloc_cap_file : Proc(ICaptureGraphBuilder*, LibC::LPWSTR, UInt64, HRESULT)
    copy_capture_file : Proc(ICaptureGraphBuilder*, LibC::LPWSTR, LibC::LPWSTR, Int32, IAMCopyCaptureFileProgress, HRESULT)
  end

  ICaptureGraphBuilder_GUID = LibC::GUID.new("bf87b6e0-8c27-11d0-b3f0-00aa003761c5")
  CLSID_ICaptureGraphBuilder = "bf87b6e0-8c27-11d0-b3f0-00aa003761c5"
  struct ICaptureGraphBuilder
    lpVtbl : ICaptureGraphBuilderVTbl*
  end

  struct IAMCopyCaptureFileProgressVTbl
    query_interface : Proc(IAMCopyCaptureFileProgress*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMCopyCaptureFileProgress*, UInt32)
    release : Proc(IAMCopyCaptureFileProgress*, UInt32)
    progress : Proc(IAMCopyCaptureFileProgress*, Int32, HRESULT)
  end

  IAMCopyCaptureFileProgress_GUID = LibC::GUID.new("670d1d20-a068-11d0-b3f0-00aa003761c5")
  CLSID_IAMCopyCaptureFileProgress = "670d1d20-a068-11d0-b3f0-00aa003761c5"
  struct IAMCopyCaptureFileProgress
    lpVtbl : IAMCopyCaptureFileProgressVTbl*
  end

  struct ICaptureGraphBuilder2VTbl
    query_interface : Proc(ICaptureGraphBuilder2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICaptureGraphBuilder2*, UInt32)
    release : Proc(ICaptureGraphBuilder2*, UInt32)
    set_filtergraph : Proc(ICaptureGraphBuilder2*, IGraphBuilder, HRESULT)
    get_filtergraph : Proc(ICaptureGraphBuilder2*, IGraphBuilder*, HRESULT)
    set_output_file_name : Proc(ICaptureGraphBuilder2*, Guid*, LibC::LPWSTR, IBaseFilter*, IFileSinkFilter*, HRESULT)
    find_interface : Proc(ICaptureGraphBuilder2*, Guid*, Guid*, IBaseFilter, Guid*, Void**, HRESULT)
    render_stream : Proc(ICaptureGraphBuilder2*, Guid*, Guid*, IUnknown, IBaseFilter, IBaseFilter, HRESULT)
    control_stream : Proc(ICaptureGraphBuilder2*, Guid*, Guid*, IBaseFilter, Int64*, Int64*, UInt16, UInt16, HRESULT)
    alloc_cap_file : Proc(ICaptureGraphBuilder2*, LibC::LPWSTR, UInt64, HRESULT)
    copy_capture_file : Proc(ICaptureGraphBuilder2*, LibC::LPWSTR, LibC::LPWSTR, Int32, IAMCopyCaptureFileProgress, HRESULT)
    find_pin : Proc(ICaptureGraphBuilder2*, IUnknown, PIN_DIRECTION, Guid*, Guid*, LibC::BOOL, Int32, IPin*, HRESULT)
  end

  ICaptureGraphBuilder2_GUID = LibC::GUID.new("93e5a4e0-2d50-11d2-abfa-00a0c9c6e38d")
  CLSID_ICaptureGraphBuilder2 = "93e5a4e0-2d50-11d2-abfa-00a0c9c6e38d"
  struct ICaptureGraphBuilder2
    lpVtbl : ICaptureGraphBuilder2VTbl*
  end

  struct IFilterGraph2VTbl
    query_interface : Proc(IFilterGraph2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterGraph2*, UInt32)
    release : Proc(IFilterGraph2*, UInt32)
    add_filter : Proc(IFilterGraph2*, IBaseFilter, LibC::LPWSTR, HRESULT)
    remove_filter : Proc(IFilterGraph2*, IBaseFilter, HRESULT)
    enum_filters : Proc(IFilterGraph2*, IEnumFilters*, HRESULT)
    find_filter_by_name : Proc(IFilterGraph2*, LibC::LPWSTR, IBaseFilter*, HRESULT)
    connect_direct : Proc(IFilterGraph2*, IPin, IPin, AM_MEDIA_TYPE*, HRESULT)
    reconnect : Proc(IFilterGraph2*, IPin, HRESULT)
    disconnect : Proc(IFilterGraph2*, IPin, HRESULT)
    set_default_sync_source : Proc(IFilterGraph2*, HRESULT)
    connect : Proc(IFilterGraph2*, IPin, IPin, HRESULT)
    render : Proc(IFilterGraph2*, IPin, HRESULT)
    render_file : Proc(IFilterGraph2*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    add_source_filter : Proc(IFilterGraph2*, LibC::LPWSTR, LibC::LPWSTR, IBaseFilter*, HRESULT)
    set_log_file : Proc(IFilterGraph2*, LibC::UINT_PTR, HRESULT)
    abort : Proc(IFilterGraph2*, HRESULT)
    should_operation_continue : Proc(IFilterGraph2*, HRESULT)
    add_source_filter_for_moniker : Proc(IFilterGraph2*, IMoniker, IBindCtx, LibC::LPWSTR, IBaseFilter*, HRESULT)
    reconnect_ex : Proc(IFilterGraph2*, IPin, AM_MEDIA_TYPE*, HRESULT)
    render_ex : Proc(IFilterGraph2*, IPin, UInt32, UInt32*, HRESULT)
  end

  IFilterGraph2_GUID = LibC::GUID.new("36b73882-c2c8-11cf-8b46-00805f6cef60")
  CLSID_IFilterGraph2 = "36b73882-c2c8-11cf-8b46-00805f6cef60"
  struct IFilterGraph2
    lpVtbl : IFilterGraph2VTbl*
  end

  struct IFilterGraph3VTbl
    query_interface : Proc(IFilterGraph3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterGraph3*, UInt32)
    release : Proc(IFilterGraph3*, UInt32)
    add_filter : Proc(IFilterGraph3*, IBaseFilter, LibC::LPWSTR, HRESULT)
    remove_filter : Proc(IFilterGraph3*, IBaseFilter, HRESULT)
    enum_filters : Proc(IFilterGraph3*, IEnumFilters*, HRESULT)
    find_filter_by_name : Proc(IFilterGraph3*, LibC::LPWSTR, IBaseFilter*, HRESULT)
    connect_direct : Proc(IFilterGraph3*, IPin, IPin, AM_MEDIA_TYPE*, HRESULT)
    reconnect : Proc(IFilterGraph3*, IPin, HRESULT)
    disconnect : Proc(IFilterGraph3*, IPin, HRESULT)
    set_default_sync_source : Proc(IFilterGraph3*, HRESULT)
    connect : Proc(IFilterGraph3*, IPin, IPin, HRESULT)
    render : Proc(IFilterGraph3*, IPin, HRESULT)
    render_file : Proc(IFilterGraph3*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    add_source_filter : Proc(IFilterGraph3*, LibC::LPWSTR, LibC::LPWSTR, IBaseFilter*, HRESULT)
    set_log_file : Proc(IFilterGraph3*, LibC::UINT_PTR, HRESULT)
    abort : Proc(IFilterGraph3*, HRESULT)
    should_operation_continue : Proc(IFilterGraph3*, HRESULT)
    add_source_filter_for_moniker : Proc(IFilterGraph3*, IMoniker, IBindCtx, LibC::LPWSTR, IBaseFilter*, HRESULT)
    reconnect_ex : Proc(IFilterGraph3*, IPin, AM_MEDIA_TYPE*, HRESULT)
    render_ex : Proc(IFilterGraph3*, IPin, UInt32, UInt32*, HRESULT)
    set_sync_source_ex : Proc(IFilterGraph3*, IReferenceClock, IReferenceClock, IBaseFilter, HRESULT)
  end

  IFilterGraph3_GUID = LibC::GUID.new("aaf38154-b80b-422f-91e6-b66467509a07")
  CLSID_IFilterGraph3 = "aaf38154-b80b-422f-91e6-b66467509a07"
  struct IFilterGraph3
    lpVtbl : IFilterGraph3VTbl*
  end

  struct IStreamBuilderVTbl
    query_interface : Proc(IStreamBuilder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBuilder*, UInt32)
    release : Proc(IStreamBuilder*, UInt32)
    render : Proc(IStreamBuilder*, IPin, IGraphBuilder, HRESULT)
    backout : Proc(IStreamBuilder*, IPin, IGraphBuilder, HRESULT)
  end

  IStreamBuilder_GUID = LibC::GUID.new("56a868bf-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IStreamBuilder = "56a868bf-0ad4-11ce-b03a-0020af0ba770"
  struct IStreamBuilder
    lpVtbl : IStreamBuilderVTbl*
  end

  struct IAsyncReaderVTbl
    query_interface : Proc(IAsyncReader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAsyncReader*, UInt32)
    release : Proc(IAsyncReader*, UInt32)
    request_allocator : Proc(IAsyncReader*, IMemAllocator, ALLOCATOR_PROPERTIES*, IMemAllocator*, HRESULT)
    request : Proc(IAsyncReader*, IMediaSample, LibC::UINT_PTR, HRESULT)
    wait_for_next : Proc(IAsyncReader*, UInt32, IMediaSample*, LibC::UINT_PTR*, HRESULT)
    sync_read_aligned : Proc(IAsyncReader*, IMediaSample, HRESULT)
    sync_read : Proc(IAsyncReader*, Int64, Int32, UInt8*, HRESULT)
    length : Proc(IAsyncReader*, Int64*, Int64*, HRESULT)
    begin_flush : Proc(IAsyncReader*, HRESULT)
    end_flush : Proc(IAsyncReader*, HRESULT)
  end

  IAsyncReader_GUID = LibC::GUID.new("56a868aa-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IAsyncReader = "56a868aa-0ad4-11ce-b03a-0020af0ba770"
  struct IAsyncReader
    lpVtbl : IAsyncReaderVTbl*
  end

  struct IGraphVersionVTbl
    query_interface : Proc(IGraphVersion*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGraphVersion*, UInt32)
    release : Proc(IGraphVersion*, UInt32)
    query_version : Proc(IGraphVersion*, Int32*, HRESULT)
  end

  IGraphVersion_GUID = LibC::GUID.new("56a868ab-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IGraphVersion = "56a868ab-0ad4-11ce-b03a-0020af0ba770"
  struct IGraphVersion
    lpVtbl : IGraphVersionVTbl*
  end

  struct IResourceConsumerVTbl
    query_interface : Proc(IResourceConsumer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IResourceConsumer*, UInt32)
    release : Proc(IResourceConsumer*, UInt32)
    acquire_resource : Proc(IResourceConsumer*, Int32, HRESULT)
    release_resource : Proc(IResourceConsumer*, Int32, HRESULT)
  end

  IResourceConsumer_GUID = LibC::GUID.new("56a868ad-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IResourceConsumer = "56a868ad-0ad4-11ce-b03a-0020af0ba770"
  struct IResourceConsumer
    lpVtbl : IResourceConsumerVTbl*
  end

  struct IResourceManagerVTbl
    query_interface : Proc(IResourceManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IResourceManager*, UInt32)
    release : Proc(IResourceManager*, UInt32)
    register : Proc(IResourceManager*, LibC::LPWSTR, Int32, Int32*, HRESULT)
    register_group : Proc(IResourceManager*, LibC::LPWSTR, Int32, Int32*, Int32*, HRESULT)
    request_resource : Proc(IResourceManager*, Int32, IUnknown, IResourceConsumer, HRESULT)
    notify_acquire : Proc(IResourceManager*, Int32, IResourceConsumer, HRESULT, HRESULT)
    notify_release : Proc(IResourceManager*, Int32, IResourceConsumer, LibC::BOOL, HRESULT)
    cancel_request : Proc(IResourceManager*, Int32, IResourceConsumer, HRESULT)
    set_focus : Proc(IResourceManager*, IUnknown, HRESULT)
    release_focus : Proc(IResourceManager*, IUnknown, HRESULT)
  end

  IResourceManager_GUID = LibC::GUID.new("56a868ac-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IResourceManager = "56a868ac-0ad4-11ce-b03a-0020af0ba770"
  struct IResourceManager
    lpVtbl : IResourceManagerVTbl*
  end

  struct IDistributorNotifyVTbl
    query_interface : Proc(IDistributorNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDistributorNotify*, UInt32)
    release : Proc(IDistributorNotify*, UInt32)
    stop : Proc(IDistributorNotify*, HRESULT)
    pause : Proc(IDistributorNotify*, HRESULT)
    run : Proc(IDistributorNotify*, Int64, HRESULT)
    set_sync_source : Proc(IDistributorNotify*, IReferenceClock, HRESULT)
    notify_graph_change : Proc(IDistributorNotify*, HRESULT)
  end

  IDistributorNotify_GUID = LibC::GUID.new("56a868af-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IDistributorNotify = "56a868af-0ad4-11ce-b03a-0020af0ba770"
  struct IDistributorNotify
    lpVtbl : IDistributorNotifyVTbl*
  end

  struct IAMStreamControlVTbl
    query_interface : Proc(IAMStreamControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMStreamControl*, UInt32)
    release : Proc(IAMStreamControl*, UInt32)
    start_at : Proc(IAMStreamControl*, Int64*, UInt32, HRESULT)
    stop_at : Proc(IAMStreamControl*, Int64*, LibC::BOOL, UInt32, HRESULT)
    get_info : Proc(IAMStreamControl*, AM_STREAM_INFO*, HRESULT)
  end

  IAMStreamControl_GUID = LibC::GUID.new("36b73881-c2c8-11cf-8b46-00805f6cef60")
  CLSID_IAMStreamControl = "36b73881-c2c8-11cf-8b46-00805f6cef60"
  struct IAMStreamControl
    lpVtbl : IAMStreamControlVTbl*
  end

  struct ISeekingPassThruVTbl
    query_interface : Proc(ISeekingPassThru*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISeekingPassThru*, UInt32)
    release : Proc(ISeekingPassThru*, UInt32)
    init : Proc(ISeekingPassThru*, LibC::BOOL, IPin, HRESULT)
  end

  ISeekingPassThru_GUID = LibC::GUID.new("36b73883-c2c8-11cf-8b46-00805f6cef60")
  CLSID_ISeekingPassThru = "36b73883-c2c8-11cf-8b46-00805f6cef60"
  struct ISeekingPassThru
    lpVtbl : ISeekingPassThruVTbl*
  end

  struct IAMStreamConfigVTbl
    query_interface : Proc(IAMStreamConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMStreamConfig*, UInt32)
    release : Proc(IAMStreamConfig*, UInt32)
    set_format : Proc(IAMStreamConfig*, AM_MEDIA_TYPE*, HRESULT)
    get_format : Proc(IAMStreamConfig*, AM_MEDIA_TYPE**, HRESULT)
    get_number_of_capabilities : Proc(IAMStreamConfig*, Int32*, Int32*, HRESULT)
    get_stream_caps : Proc(IAMStreamConfig*, Int32, AM_MEDIA_TYPE**, UInt8*, HRESULT)
  end

  IAMStreamConfig_GUID = LibC::GUID.new("c6e13340-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMStreamConfig = "c6e13340-30ac-11d0-a18c-00a0c9118956"
  struct IAMStreamConfig
    lpVtbl : IAMStreamConfigVTbl*
  end

  struct IConfigInterleavingVTbl
    query_interface : Proc(IConfigInterleaving*, Guid*, Void**, HRESULT)
    add_ref : Proc(IConfigInterleaving*, UInt32)
    release : Proc(IConfigInterleaving*, UInt32)
    put_mode : Proc(IConfigInterleaving*, InterleavingMode, HRESULT)
    get_mode : Proc(IConfigInterleaving*, InterleavingMode*, HRESULT)
    put_interleaving : Proc(IConfigInterleaving*, Int64*, Int64*, HRESULT)
    get_interleaving : Proc(IConfigInterleaving*, Int64*, Int64*, HRESULT)
  end

  IConfigInterleaving_GUID = LibC::GUID.new("bee3d220-157b-11d0-bd23-00a0c911ce86")
  CLSID_IConfigInterleaving = "bee3d220-157b-11d0-bd23-00a0c911ce86"
  struct IConfigInterleaving
    lpVtbl : IConfigInterleavingVTbl*
  end

  struct IConfigAviMuxVTbl
    query_interface : Proc(IConfigAviMux*, Guid*, Void**, HRESULT)
    add_ref : Proc(IConfigAviMux*, UInt32)
    release : Proc(IConfigAviMux*, UInt32)
    set_master_stream : Proc(IConfigAviMux*, Int32, HRESULT)
    get_master_stream : Proc(IConfigAviMux*, Int32*, HRESULT)
    set_output_compatibility_index : Proc(IConfigAviMux*, LibC::BOOL, HRESULT)
    get_output_compatibility_index : Proc(IConfigAviMux*, LibC::BOOL*, HRESULT)
  end

  IConfigAviMux_GUID = LibC::GUID.new("5acd6aa0-f482-11ce-8b67-00aa00a3f1a6")
  CLSID_IConfigAviMux = "5acd6aa0-f482-11ce-8b67-00aa00a3f1a6"
  struct IConfigAviMux
    lpVtbl : IConfigAviMuxVTbl*
  end

  struct IAMVideoCompressionVTbl
    query_interface : Proc(IAMVideoCompression*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVideoCompression*, UInt32)
    release : Proc(IAMVideoCompression*, UInt32)
    put_key_frame_rate : Proc(IAMVideoCompression*, Int32, HRESULT)
    get_key_frame_rate : Proc(IAMVideoCompression*, Int32*, HRESULT)
    put_p_frames_per_key_frame : Proc(IAMVideoCompression*, Int32, HRESULT)
    get_p_frames_per_key_frame : Proc(IAMVideoCompression*, Int32*, HRESULT)
    put_quality : Proc(IAMVideoCompression*, Float64, HRESULT)
    get_quality : Proc(IAMVideoCompression*, Float64*, HRESULT)
    put_window_size : Proc(IAMVideoCompression*, UInt64, HRESULT)
    get_window_size : Proc(IAMVideoCompression*, UInt64*, HRESULT)
    get_info : Proc(IAMVideoCompression*, LibC::LPWSTR, Int32*, LibC::LPWSTR, Int32*, Int32*, Int32*, Float64*, Int32*, HRESULT)
    override_key_frame : Proc(IAMVideoCompression*, Int32, HRESULT)
    override_frame_size : Proc(IAMVideoCompression*, Int32, Int32, HRESULT)
  end

  IAMVideoCompression_GUID = LibC::GUID.new("c6e13343-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMVideoCompression = "c6e13343-30ac-11d0-a18c-00a0c9118956"
  struct IAMVideoCompression
    lpVtbl : IAMVideoCompressionVTbl*
  end

  struct IAMVfwCaptureDialogsVTbl
    query_interface : Proc(IAMVfwCaptureDialogs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVfwCaptureDialogs*, UInt32)
    release : Proc(IAMVfwCaptureDialogs*, UInt32)
    has_dialog : Proc(IAMVfwCaptureDialogs*, Int32, HRESULT)
    show_dialog : Proc(IAMVfwCaptureDialogs*, Int32, LibC::HANDLE, HRESULT)
    send_driver_message : Proc(IAMVfwCaptureDialogs*, Int32, Int32, Int32, Int32, HRESULT)
  end

  IAMVfwCaptureDialogs_GUID = LibC::GUID.new("d8d715a0-6e5e-11d0-b3f0-00aa003761c5")
  CLSID_IAMVfwCaptureDialogs = "d8d715a0-6e5e-11d0-b3f0-00aa003761c5"
  struct IAMVfwCaptureDialogs
    lpVtbl : IAMVfwCaptureDialogsVTbl*
  end

  struct IAMVfwCompressDialogsVTbl
    query_interface : Proc(IAMVfwCompressDialogs*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVfwCompressDialogs*, UInt32)
    release : Proc(IAMVfwCompressDialogs*, UInt32)
    show_dialog : Proc(IAMVfwCompressDialogs*, Int32, LibC::HANDLE, HRESULT)
    get_state : Proc(IAMVfwCompressDialogs*, Void*, Int32*, HRESULT)
    set_state : Proc(IAMVfwCompressDialogs*, Void*, Int32, HRESULT)
    send_driver_message : Proc(IAMVfwCompressDialogs*, Int32, Int32, Int32, HRESULT)
  end

  IAMVfwCompressDialogs_GUID = LibC::GUID.new("d8d715a3-6e5e-11d0-b3f0-00aa003761c5")
  CLSID_IAMVfwCompressDialogs = "d8d715a3-6e5e-11d0-b3f0-00aa003761c5"
  struct IAMVfwCompressDialogs
    lpVtbl : IAMVfwCompressDialogsVTbl*
  end

  struct IAMDroppedFramesVTbl
    query_interface : Proc(IAMDroppedFrames*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMDroppedFrames*, UInt32)
    release : Proc(IAMDroppedFrames*, UInt32)
    get_num_dropped : Proc(IAMDroppedFrames*, Int32*, HRESULT)
    get_num_not_dropped : Proc(IAMDroppedFrames*, Int32*, HRESULT)
    get_dropped_info : Proc(IAMDroppedFrames*, Int32, Int32*, Int32*, HRESULT)
    get_average_frame_size : Proc(IAMDroppedFrames*, Int32*, HRESULT)
  end

  IAMDroppedFrames_GUID = LibC::GUID.new("c6e13344-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMDroppedFrames = "c6e13344-30ac-11d0-a18c-00a0c9118956"
  struct IAMDroppedFrames
    lpVtbl : IAMDroppedFramesVTbl*
  end

  struct IAMAudioInputMixerVTbl
    query_interface : Proc(IAMAudioInputMixer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMAudioInputMixer*, UInt32)
    release : Proc(IAMAudioInputMixer*, UInt32)
    put_enable : Proc(IAMAudioInputMixer*, LibC::BOOL, HRESULT)
    get_enable : Proc(IAMAudioInputMixer*, LibC::BOOL*, HRESULT)
    put_mono : Proc(IAMAudioInputMixer*, LibC::BOOL, HRESULT)
    get_mono : Proc(IAMAudioInputMixer*, LibC::BOOL*, HRESULT)
    put_mix_level : Proc(IAMAudioInputMixer*, Float64, HRESULT)
    get_mix_level : Proc(IAMAudioInputMixer*, Float64*, HRESULT)
    put_pan : Proc(IAMAudioInputMixer*, Float64, HRESULT)
    get_pan : Proc(IAMAudioInputMixer*, Float64*, HRESULT)
    put_loudness : Proc(IAMAudioInputMixer*, LibC::BOOL, HRESULT)
    get_loudness : Proc(IAMAudioInputMixer*, LibC::BOOL*, HRESULT)
    put_treble : Proc(IAMAudioInputMixer*, Float64, HRESULT)
    get_treble : Proc(IAMAudioInputMixer*, Float64*, HRESULT)
    get_treble_range : Proc(IAMAudioInputMixer*, Float64*, HRESULT)
    put_bass : Proc(IAMAudioInputMixer*, Float64, HRESULT)
    get_bass : Proc(IAMAudioInputMixer*, Float64*, HRESULT)
    get_bass_range : Proc(IAMAudioInputMixer*, Float64*, HRESULT)
  end

  IAMAudioInputMixer_GUID = LibC::GUID.new("54c39221-8380-11d0-b3f0-00aa003761c5")
  CLSID_IAMAudioInputMixer = "54c39221-8380-11d0-b3f0-00aa003761c5"
  struct IAMAudioInputMixer
    lpVtbl : IAMAudioInputMixerVTbl*
  end

  struct IAMBufferNegotiationVTbl
    query_interface : Proc(IAMBufferNegotiation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMBufferNegotiation*, UInt32)
    release : Proc(IAMBufferNegotiation*, UInt32)
    suggest_allocator_properties : Proc(IAMBufferNegotiation*, ALLOCATOR_PROPERTIES*, HRESULT)
    get_allocator_properties : Proc(IAMBufferNegotiation*, ALLOCATOR_PROPERTIES*, HRESULT)
  end

  IAMBufferNegotiation_GUID = LibC::GUID.new("56ed71a0-af5f-11d0-b3f0-00aa003761c5")
  CLSID_IAMBufferNegotiation = "56ed71a0-af5f-11d0-b3f0-00aa003761c5"
  struct IAMBufferNegotiation
    lpVtbl : IAMBufferNegotiationVTbl*
  end

  struct IAMAnalogVideoDecoderVTbl
    query_interface : Proc(IAMAnalogVideoDecoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMAnalogVideoDecoder*, UInt32)
    release : Proc(IAMAnalogVideoDecoder*, UInt32)
    get_available_tv_formats : Proc(IAMAnalogVideoDecoder*, Int32*, HRESULT)
    put_tv_format : Proc(IAMAnalogVideoDecoder*, Int32, HRESULT)
    get_tv_format : Proc(IAMAnalogVideoDecoder*, Int32*, HRESULT)
    get_horizontal_locked : Proc(IAMAnalogVideoDecoder*, Int32*, HRESULT)
    put_vcr_horizontal_locking : Proc(IAMAnalogVideoDecoder*, Int32, HRESULT)
    get_vcr_horizontal_locking : Proc(IAMAnalogVideoDecoder*, Int32*, HRESULT)
    get_number_of_lines : Proc(IAMAnalogVideoDecoder*, Int32*, HRESULT)
    put_output_enable : Proc(IAMAnalogVideoDecoder*, Int32, HRESULT)
    get_output_enable : Proc(IAMAnalogVideoDecoder*, Int32*, HRESULT)
  end

  IAMAnalogVideoDecoder_GUID = LibC::GUID.new("c6e13350-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMAnalogVideoDecoder = "c6e13350-30ac-11d0-a18c-00a0c9118956"
  struct IAMAnalogVideoDecoder
    lpVtbl : IAMAnalogVideoDecoderVTbl*
  end

  struct IAMVideoProcAmpVTbl
    query_interface : Proc(IAMVideoProcAmp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVideoProcAmp*, UInt32)
    release : Proc(IAMVideoProcAmp*, UInt32)
    get_range : Proc(IAMVideoProcAmp*, Int32, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    set : Proc(IAMVideoProcAmp*, Int32, Int32, Int32, HRESULT)
    get : Proc(IAMVideoProcAmp*, Int32, Int32*, Int32*, HRESULT)
  end

  IAMVideoProcAmp_GUID = LibC::GUID.new("c6e13360-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMVideoProcAmp = "c6e13360-30ac-11d0-a18c-00a0c9118956"
  struct IAMVideoProcAmp
    lpVtbl : IAMVideoProcAmpVTbl*
  end

  struct IAMCameraControlVTbl
    query_interface : Proc(IAMCameraControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMCameraControl*, UInt32)
    release : Proc(IAMCameraControl*, UInt32)
    get_range : Proc(IAMCameraControl*, Int32, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    set : Proc(IAMCameraControl*, Int32, Int32, Int32, HRESULT)
    get : Proc(IAMCameraControl*, Int32, Int32*, Int32*, HRESULT)
  end

  IAMCameraControl_GUID = LibC::GUID.new("c6e13370-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMCameraControl = "c6e13370-30ac-11d0-a18c-00a0c9118956"
  struct IAMCameraControl
    lpVtbl : IAMCameraControlVTbl*
  end

  struct IAMVideoControlVTbl
    query_interface : Proc(IAMVideoControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVideoControl*, UInt32)
    release : Proc(IAMVideoControl*, UInt32)
    get_caps : Proc(IAMVideoControl*, IPin, Int32*, HRESULT)
    set_mode : Proc(IAMVideoControl*, IPin, Int32, HRESULT)
    get_mode : Proc(IAMVideoControl*, IPin, Int32*, HRESULT)
    get_current_actual_frame_rate : Proc(IAMVideoControl*, IPin, Int64*, HRESULT)
    get_max_available_frame_rate : Proc(IAMVideoControl*, IPin, Int32, SIZE, Int64*, HRESULT)
    get_frame_rate_list : Proc(IAMVideoControl*, IPin, Int32, SIZE, Int32*, Int64**, HRESULT)
  end

  IAMVideoControl_GUID = LibC::GUID.new("6a2e0670-28e4-11d0-a18c-00a0c9118956")
  CLSID_IAMVideoControl = "6a2e0670-28e4-11d0-a18c-00a0c9118956"
  struct IAMVideoControl
    lpVtbl : IAMVideoControlVTbl*
  end

  struct IAMCrossbarVTbl
    query_interface : Proc(IAMCrossbar*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMCrossbar*, UInt32)
    release : Proc(IAMCrossbar*, UInt32)
    get_pin_counts : Proc(IAMCrossbar*, Int32*, Int32*, HRESULT)
    can_route : Proc(IAMCrossbar*, Int32, Int32, HRESULT)
    route : Proc(IAMCrossbar*, Int32, Int32, HRESULT)
    get_is_routed_to : Proc(IAMCrossbar*, Int32, Int32*, HRESULT)
    get_crossbar_pin_info : Proc(IAMCrossbar*, LibC::BOOL, Int32, Int32*, Int32*, HRESULT)
  end

  IAMCrossbar_GUID = LibC::GUID.new("c6e13380-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMCrossbar = "c6e13380-30ac-11d0-a18c-00a0c9118956"
  struct IAMCrossbar
    lpVtbl : IAMCrossbarVTbl*
  end

  struct IAMTunerVTbl
    query_interface : Proc(IAMTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTuner*, UInt32)
    release : Proc(IAMTuner*, UInt32)
    put_channel : Proc(IAMTuner*, Int32, Int32, Int32, HRESULT)
    get_channel : Proc(IAMTuner*, Int32*, Int32*, Int32*, HRESULT)
    channel_min_max : Proc(IAMTuner*, Int32*, Int32*, HRESULT)
    put_country_code : Proc(IAMTuner*, Int32, HRESULT)
    get_country_code : Proc(IAMTuner*, Int32*, HRESULT)
    put_tuning_space : Proc(IAMTuner*, Int32, HRESULT)
    get_tuning_space : Proc(IAMTuner*, Int32*, HRESULT)
    logon : Proc(IAMTuner*, LibC::HANDLE, HRESULT)
    logout : Proc(IAMTuner*, HRESULT)
    signal_present : Proc(IAMTuner*, Int32*, HRESULT)
    put_mode : Proc(IAMTuner*, AMTunerModeType, HRESULT)
    get_mode : Proc(IAMTuner*, AMTunerModeType*, HRESULT)
    get_available_modes : Proc(IAMTuner*, Int32*, HRESULT)
    register_notification_call_back : Proc(IAMTuner*, IAMTunerNotification, Int32, HRESULT)
    un_register_notification_call_back : Proc(IAMTuner*, IAMTunerNotification, HRESULT)
  end

  IAMTuner_GUID = LibC::GUID.new("211a8761-03ac-11d1-8d13-00aa00bd8339")
  CLSID_IAMTuner = "211a8761-03ac-11d1-8d13-00aa00bd8339"
  struct IAMTuner
    lpVtbl : IAMTunerVTbl*
  end

  struct IAMTunerNotificationVTbl
    query_interface : Proc(IAMTunerNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTunerNotification*, UInt32)
    release : Proc(IAMTunerNotification*, UInt32)
    on_event : Proc(IAMTunerNotification*, AMTunerEventType, HRESULT)
  end

  IAMTunerNotification_GUID = LibC::GUID.new("211a8760-03ac-11d1-8d13-00aa00bd8339")
  CLSID_IAMTunerNotification = "211a8760-03ac-11d1-8d13-00aa00bd8339"
  struct IAMTunerNotification
    lpVtbl : IAMTunerNotificationVTbl*
  end

  struct IAMTVTunerVTbl
    query_interface : Proc(IAMTVTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTVTuner*, UInt32)
    release : Proc(IAMTVTuner*, UInt32)
    put_channel : Proc(IAMTVTuner*, Int32, Int32, Int32, HRESULT)
    get_channel : Proc(IAMTVTuner*, Int32*, Int32*, Int32*, HRESULT)
    channel_min_max : Proc(IAMTVTuner*, Int32*, Int32*, HRESULT)
    put_country_code : Proc(IAMTVTuner*, Int32, HRESULT)
    get_country_code : Proc(IAMTVTuner*, Int32*, HRESULT)
    put_tuning_space : Proc(IAMTVTuner*, Int32, HRESULT)
    get_tuning_space : Proc(IAMTVTuner*, Int32*, HRESULT)
    logon : Proc(IAMTVTuner*, LibC::HANDLE, HRESULT)
    logout : Proc(IAMTVTuner*, HRESULT)
    signal_present : Proc(IAMTVTuner*, Int32*, HRESULT)
    put_mode : Proc(IAMTVTuner*, AMTunerModeType, HRESULT)
    get_mode : Proc(IAMTVTuner*, AMTunerModeType*, HRESULT)
    get_available_modes : Proc(IAMTVTuner*, Int32*, HRESULT)
    register_notification_call_back : Proc(IAMTVTuner*, IAMTunerNotification, Int32, HRESULT)
    un_register_notification_call_back : Proc(IAMTVTuner*, IAMTunerNotification, HRESULT)
    get_available_tv_formats : Proc(IAMTVTuner*, Int32*, HRESULT)
    get_tv_format : Proc(IAMTVTuner*, Int32*, HRESULT)
    auto_tune : Proc(IAMTVTuner*, Int32, Int32*, HRESULT)
    store_auto_tune : Proc(IAMTVTuner*, HRESULT)
    get_num_input_connections : Proc(IAMTVTuner*, Int32*, HRESULT)
    put_input_type : Proc(IAMTVTuner*, Int32, TunerInputType, HRESULT)
    get_input_type : Proc(IAMTVTuner*, Int32, TunerInputType*, HRESULT)
    put_connect_input : Proc(IAMTVTuner*, Int32, HRESULT)
    get_connect_input : Proc(IAMTVTuner*, Int32*, HRESULT)
    get_video_frequency : Proc(IAMTVTuner*, Int32*, HRESULT)
    get_audio_frequency : Proc(IAMTVTuner*, Int32*, HRESULT)
  end

  IAMTVTuner_GUID = LibC::GUID.new("211a8766-03ac-11d1-8d13-00aa00bd8339")
  CLSID_IAMTVTuner = "211a8766-03ac-11d1-8d13-00aa00bd8339"
  struct IAMTVTuner
    lpVtbl : IAMTVTunerVTbl*
  end

  struct IBPCSatelliteTunerVTbl
    query_interface : Proc(IBPCSatelliteTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBPCSatelliteTuner*, UInt32)
    release : Proc(IBPCSatelliteTuner*, UInt32)
    put_channel : Proc(IBPCSatelliteTuner*, Int32, Int32, Int32, HRESULT)
    get_channel : Proc(IBPCSatelliteTuner*, Int32*, Int32*, Int32*, HRESULT)
    channel_min_max : Proc(IBPCSatelliteTuner*, Int32*, Int32*, HRESULT)
    put_country_code : Proc(IBPCSatelliteTuner*, Int32, HRESULT)
    get_country_code : Proc(IBPCSatelliteTuner*, Int32*, HRESULT)
    put_tuning_space : Proc(IBPCSatelliteTuner*, Int32, HRESULT)
    get_tuning_space : Proc(IBPCSatelliteTuner*, Int32*, HRESULT)
    logon : Proc(IBPCSatelliteTuner*, LibC::HANDLE, HRESULT)
    logout : Proc(IBPCSatelliteTuner*, HRESULT)
    signal_present : Proc(IBPCSatelliteTuner*, Int32*, HRESULT)
    put_mode : Proc(IBPCSatelliteTuner*, AMTunerModeType, HRESULT)
    get_mode : Proc(IBPCSatelliteTuner*, AMTunerModeType*, HRESULT)
    get_available_modes : Proc(IBPCSatelliteTuner*, Int32*, HRESULT)
    register_notification_call_back : Proc(IBPCSatelliteTuner*, IAMTunerNotification, Int32, HRESULT)
    un_register_notification_call_back : Proc(IBPCSatelliteTuner*, IAMTunerNotification, HRESULT)
    get_default_sub_channel_types : Proc(IBPCSatelliteTuner*, Int32*, Int32*, HRESULT)
    put_default_sub_channel_types : Proc(IBPCSatelliteTuner*, Int32, Int32, HRESULT)
    is_taping_permitted : Proc(IBPCSatelliteTuner*, HRESULT)
  end

  IBPCSatelliteTuner_GUID = LibC::GUID.new("211a8765-03ac-11d1-8d13-00aa00bd8339")
  CLSID_IBPCSatelliteTuner = "211a8765-03ac-11d1-8d13-00aa00bd8339"
  struct IBPCSatelliteTuner
    lpVtbl : IBPCSatelliteTunerVTbl*
  end

  struct IAMTVAudioVTbl
    query_interface : Proc(IAMTVAudio*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTVAudio*, UInt32)
    release : Proc(IAMTVAudio*, UInt32)
    get_hardware_supported_tv_audio_modes : Proc(IAMTVAudio*, Int32*, HRESULT)
    get_available_tv_audio_modes : Proc(IAMTVAudio*, Int32*, HRESULT)
    get_tv_audio_mode : Proc(IAMTVAudio*, Int32*, HRESULT)
    put_tv_audio_mode : Proc(IAMTVAudio*, Int32, HRESULT)
    register_notification_call_back : Proc(IAMTVAudio*, IAMTunerNotification, Int32, HRESULT)
    un_register_notification_call_back : Proc(IAMTVAudio*, IAMTunerNotification, HRESULT)
  end

  IAMTVAudio_GUID = LibC::GUID.new("83ec1c30-23d1-11d1-99e6-00a0c9560266")
  CLSID_IAMTVAudio = "83ec1c30-23d1-11d1-99e6-00a0c9560266"
  struct IAMTVAudio
    lpVtbl : IAMTVAudioVTbl*
  end

  struct IAMTVAudioNotificationVTbl
    query_interface : Proc(IAMTVAudioNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTVAudioNotification*, UInt32)
    release : Proc(IAMTVAudioNotification*, UInt32)
    on_event : Proc(IAMTVAudioNotification*, AMTVAudioEventType, HRESULT)
  end

  IAMTVAudioNotification_GUID = LibC::GUID.new("83ec1c33-23d1-11d1-99e6-00a0c9560266")
  CLSID_IAMTVAudioNotification = "83ec1c33-23d1-11d1-99e6-00a0c9560266"
  struct IAMTVAudioNotification
    lpVtbl : IAMTVAudioNotificationVTbl*
  end

  struct IAMAnalogVideoEncoderVTbl
    query_interface : Proc(IAMAnalogVideoEncoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMAnalogVideoEncoder*, UInt32)
    release : Proc(IAMAnalogVideoEncoder*, UInt32)
    get_available_tv_formats : Proc(IAMAnalogVideoEncoder*, Int32*, HRESULT)
    put_tv_format : Proc(IAMAnalogVideoEncoder*, Int32, HRESULT)
    get_tv_format : Proc(IAMAnalogVideoEncoder*, Int32*, HRESULT)
    put_copy_protection : Proc(IAMAnalogVideoEncoder*, Int32, HRESULT)
    get_copy_protection : Proc(IAMAnalogVideoEncoder*, Int32*, HRESULT)
    put_cc_enable : Proc(IAMAnalogVideoEncoder*, Int32, HRESULT)
    get_cc_enable : Proc(IAMAnalogVideoEncoder*, Int32*, HRESULT)
  end

  IAMAnalogVideoEncoder_GUID = LibC::GUID.new("c6e133b0-30ac-11d0-a18c-00a0c9118956")
  CLSID_IAMAnalogVideoEncoder = "c6e133b0-30ac-11d0-a18c-00a0c9118956"
  struct IAMAnalogVideoEncoder
    lpVtbl : IAMAnalogVideoEncoderVTbl*
  end

  struct IMediaPropertyBagVTbl
    query_interface : Proc(IMediaPropertyBag*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaPropertyBag*, UInt32)
    release : Proc(IMediaPropertyBag*, UInt32)
    read : Proc(IMediaPropertyBag*, LibC::LPWSTR, VARIANT*, IErrorLog, HRESULT)
    write : Proc(IMediaPropertyBag*, LibC::LPWSTR, VARIANT*, HRESULT)
    enum_property : Proc(IMediaPropertyBag*, UInt32, VARIANT*, VARIANT*, HRESULT)
  end

  IMediaPropertyBag_GUID = LibC::GUID.new("6025a880-c0d5-11d0-bd4e-00a0c911ce86")
  CLSID_IMediaPropertyBag = "6025a880-c0d5-11d0-bd4e-00a0c911ce86"
  struct IMediaPropertyBag
    lpVtbl : IMediaPropertyBagVTbl*
  end

  struct IPersistMediaPropertyBagVTbl
    query_interface : Proc(IPersistMediaPropertyBag*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistMediaPropertyBag*, UInt32)
    release : Proc(IPersistMediaPropertyBag*, UInt32)
    get_class_id : Proc(IPersistMediaPropertyBag*, Guid*, HRESULT)
    init_new : Proc(IPersistMediaPropertyBag*, HRESULT)
    load : Proc(IPersistMediaPropertyBag*, IMediaPropertyBag, IErrorLog, HRESULT)
    save : Proc(IPersistMediaPropertyBag*, IMediaPropertyBag, LibC::BOOL, LibC::BOOL, HRESULT)
  end

  IPersistMediaPropertyBag_GUID = LibC::GUID.new("5738e040-b67f-11d0-bd4d-00a0c911ce86")
  CLSID_IPersistMediaPropertyBag = "5738e040-b67f-11d0-bd4d-00a0c911ce86"
  struct IPersistMediaPropertyBag
    lpVtbl : IPersistMediaPropertyBagVTbl*
  end

  struct IAMPhysicalPinInfoVTbl
    query_interface : Proc(IAMPhysicalPinInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMPhysicalPinInfo*, UInt32)
    release : Proc(IAMPhysicalPinInfo*, UInt32)
    get_physical_type : Proc(IAMPhysicalPinInfo*, Int32*, LibC::LPWSTR*, HRESULT)
  end

  IAMPhysicalPinInfo_GUID = LibC::GUID.new("f938c991-3029-11cf-8c44-00aa006b6814")
  CLSID_IAMPhysicalPinInfo = "f938c991-3029-11cf-8c44-00aa006b6814"
  struct IAMPhysicalPinInfo
    lpVtbl : IAMPhysicalPinInfoVTbl*
  end

  struct IAMExtDeviceVTbl
    query_interface : Proc(IAMExtDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMExtDevice*, UInt32)
    release : Proc(IAMExtDevice*, UInt32)
    get_capability : Proc(IAMExtDevice*, Int32, Int32*, Float64*, HRESULT)
    get_external_device_id : Proc(IAMExtDevice*, LibC::LPWSTR*, HRESULT)
    get_external_device_version : Proc(IAMExtDevice*, LibC::LPWSTR*, HRESULT)
    put_device_power : Proc(IAMExtDevice*, Int32, HRESULT)
    get_device_power : Proc(IAMExtDevice*, Int32*, HRESULT)
    calibrate : Proc(IAMExtDevice*, LibC::UINT_PTR, Int32, Int32*, HRESULT)
    put_device_port : Proc(IAMExtDevice*, Int32, HRESULT)
    get_device_port : Proc(IAMExtDevice*, Int32*, HRESULT)
  end

  IAMExtDevice_GUID = LibC::GUID.new("b5730a90-1a2c-11cf-8c23-00aa006b6814")
  CLSID_IAMExtDevice = "b5730a90-1a2c-11cf-8c23-00aa006b6814"
  struct IAMExtDevice
    lpVtbl : IAMExtDeviceVTbl*
  end

  struct IAMExtTransportVTbl
    query_interface : Proc(IAMExtTransport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMExtTransport*, UInt32)
    release : Proc(IAMExtTransport*, UInt32)
    get_capability : Proc(IAMExtTransport*, Int32, Int32*, Float64*, HRESULT)
    put_media_state : Proc(IAMExtTransport*, Int32, HRESULT)
    get_media_state : Proc(IAMExtTransport*, Int32*, HRESULT)
    put_local_control : Proc(IAMExtTransport*, Int32, HRESULT)
    get_local_control : Proc(IAMExtTransport*, Int32*, HRESULT)
    get_status : Proc(IAMExtTransport*, Int32, Int32*, HRESULT)
    get_transport_basic_parameters : Proc(IAMExtTransport*, Int32, Int32*, LibC::LPWSTR*, HRESULT)
    set_transport_basic_parameters : Proc(IAMExtTransport*, Int32, Int32, LibC::LPWSTR, HRESULT)
    get_transport_video_parameters : Proc(IAMExtTransport*, Int32, Int32*, HRESULT)
    set_transport_video_parameters : Proc(IAMExtTransport*, Int32, Int32, HRESULT)
    get_transport_audio_parameters : Proc(IAMExtTransport*, Int32, Int32*, HRESULT)
    set_transport_audio_parameters : Proc(IAMExtTransport*, Int32, Int32, HRESULT)
    put_mode : Proc(IAMExtTransport*, Int32, HRESULT)
    get_mode : Proc(IAMExtTransport*, Int32*, HRESULT)
    put_rate : Proc(IAMExtTransport*, Float64, HRESULT)
    get_rate : Proc(IAMExtTransport*, Float64*, HRESULT)
    get_chase : Proc(IAMExtTransport*, Int32*, Int32*, LibC::UINT_PTR*, HRESULT)
    set_chase : Proc(IAMExtTransport*, Int32, Int32, LibC::UINT_PTR, HRESULT)
    get_bump : Proc(IAMExtTransport*, Int32*, Int32*, HRESULT)
    set_bump : Proc(IAMExtTransport*, Int32, Int32, HRESULT)
    get_anti_clog_control : Proc(IAMExtTransport*, Int32*, HRESULT)
    put_anti_clog_control : Proc(IAMExtTransport*, Int32, HRESULT)
    get_edit_property_set : Proc(IAMExtTransport*, Int32, Int32*, HRESULT)
    set_edit_property_set : Proc(IAMExtTransport*, Int32*, Int32, HRESULT)
    get_edit_property : Proc(IAMExtTransport*, Int32, Int32, Int32*, HRESULT)
    set_edit_property : Proc(IAMExtTransport*, Int32, Int32, Int32, HRESULT)
    get_edit_start : Proc(IAMExtTransport*, Int32*, HRESULT)
    put_edit_start : Proc(IAMExtTransport*, Int32, HRESULT)
  end

  IAMExtTransport_GUID = LibC::GUID.new("a03cd5f0-3045-11cf-8c44-00aa006b6814")
  CLSID_IAMExtTransport = "a03cd5f0-3045-11cf-8c44-00aa006b6814"
  struct IAMExtTransport
    lpVtbl : IAMExtTransportVTbl*
  end

  struct IAMTimecodeReaderVTbl
    query_interface : Proc(IAMTimecodeReader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTimecodeReader*, UInt32)
    release : Proc(IAMTimecodeReader*, UInt32)
    get_tcr_mode : Proc(IAMTimecodeReader*, Int32, Int32*, HRESULT)
    set_tcr_mode : Proc(IAMTimecodeReader*, Int32, Int32, HRESULT)
    put_vitc_line : Proc(IAMTimecodeReader*, Int32, HRESULT)
    get_vitc_line : Proc(IAMTimecodeReader*, Int32*, HRESULT)
    get_timecode : Proc(IAMTimecodeReader*, TIMECODE_SAMPLE*, HRESULT)
  end

  IAMTimecodeReader_GUID = LibC::GUID.new("9b496ce1-811b-11cf-8c77-00aa006b6814")
  CLSID_IAMTimecodeReader = "9b496ce1-811b-11cf-8c77-00aa006b6814"
  struct IAMTimecodeReader
    lpVtbl : IAMTimecodeReaderVTbl*
  end

  struct IAMTimecodeGeneratorVTbl
    query_interface : Proc(IAMTimecodeGenerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTimecodeGenerator*, UInt32)
    release : Proc(IAMTimecodeGenerator*, UInt32)
    get_tcg_mode : Proc(IAMTimecodeGenerator*, Int32, Int32*, HRESULT)
    set_tcg_mode : Proc(IAMTimecodeGenerator*, Int32, Int32, HRESULT)
    put_vitc_line : Proc(IAMTimecodeGenerator*, Int32, HRESULT)
    get_vitc_line : Proc(IAMTimecodeGenerator*, Int32*, HRESULT)
    set_timecode : Proc(IAMTimecodeGenerator*, TIMECODE_SAMPLE*, HRESULT)
    get_timecode : Proc(IAMTimecodeGenerator*, TIMECODE_SAMPLE*, HRESULT)
  end

  IAMTimecodeGenerator_GUID = LibC::GUID.new("9b496ce0-811b-11cf-8c77-00aa006b6814")
  CLSID_IAMTimecodeGenerator = "9b496ce0-811b-11cf-8c77-00aa006b6814"
  struct IAMTimecodeGenerator
    lpVtbl : IAMTimecodeGeneratorVTbl*
  end

  struct IAMTimecodeDisplayVTbl
    query_interface : Proc(IAMTimecodeDisplay*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMTimecodeDisplay*, UInt32)
    release : Proc(IAMTimecodeDisplay*, UInt32)
    get_tc_display_enable : Proc(IAMTimecodeDisplay*, Int32*, HRESULT)
    set_tc_display_enable : Proc(IAMTimecodeDisplay*, Int32, HRESULT)
    get_tc_display : Proc(IAMTimecodeDisplay*, Int32, Int32*, HRESULT)
    set_tc_display : Proc(IAMTimecodeDisplay*, Int32, Int32, HRESULT)
  end

  IAMTimecodeDisplay_GUID = LibC::GUID.new("9b496ce2-811b-11cf-8c77-00aa006b6814")
  CLSID_IAMTimecodeDisplay = "9b496ce2-811b-11cf-8c77-00aa006b6814"
  struct IAMTimecodeDisplay
    lpVtbl : IAMTimecodeDisplayVTbl*
  end

  struct IAMDevMemoryAllocatorVTbl
    query_interface : Proc(IAMDevMemoryAllocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMDevMemoryAllocator*, UInt32)
    release : Proc(IAMDevMemoryAllocator*, UInt32)
    get_info : Proc(IAMDevMemoryAllocator*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    check_memory : Proc(IAMDevMemoryAllocator*, UInt8*, HRESULT)
    alloc : Proc(IAMDevMemoryAllocator*, UInt8**, UInt32*, HRESULT)
    free : Proc(IAMDevMemoryAllocator*, UInt8*, HRESULT)
    get_dev_memory_object : Proc(IAMDevMemoryAllocator*, IUnknown*, IUnknown, HRESULT)
  end

  IAMDevMemoryAllocator_GUID = LibC::GUID.new("c6545bf0-e76b-11d0-bd52-00a0c911ce86")
  CLSID_IAMDevMemoryAllocator = "c6545bf0-e76b-11d0-bd52-00a0c911ce86"
  struct IAMDevMemoryAllocator
    lpVtbl : IAMDevMemoryAllocatorVTbl*
  end

  struct IAMDevMemoryControlVTbl
    query_interface : Proc(IAMDevMemoryControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMDevMemoryControl*, UInt32)
    release : Proc(IAMDevMemoryControl*, UInt32)
    query_write_sync : Proc(IAMDevMemoryControl*, HRESULT)
    write_sync : Proc(IAMDevMemoryControl*, HRESULT)
    get_dev_id : Proc(IAMDevMemoryControl*, UInt32*, HRESULT)
  end

  IAMDevMemoryControl_GUID = LibC::GUID.new("c6545bf1-e76b-11d0-bd52-00a0c911ce86")
  CLSID_IAMDevMemoryControl = "c6545bf1-e76b-11d0-bd52-00a0c911ce86"
  struct IAMDevMemoryControl
    lpVtbl : IAMDevMemoryControlVTbl*
  end

  struct IAMStreamSelectVTbl
    query_interface : Proc(IAMStreamSelect*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMStreamSelect*, UInt32)
    release : Proc(IAMStreamSelect*, UInt32)
    count : Proc(IAMStreamSelect*, UInt32*, HRESULT)
    info : Proc(IAMStreamSelect*, Int32, AM_MEDIA_TYPE**, UInt32*, UInt32*, UInt32*, LibC::LPWSTR*, IUnknown*, IUnknown*, HRESULT)
    enable : Proc(IAMStreamSelect*, Int32, UInt32, HRESULT)
  end

  IAMStreamSelect_GUID = LibC::GUID.new("c1960960-17f5-11d1-abe1-00a0c905f375")
  CLSID_IAMStreamSelect = "c1960960-17f5-11d1-abe1-00a0c905f375"
  struct IAMStreamSelect
    lpVtbl : IAMStreamSelectVTbl*
  end

  struct IAMResourceControlVTbl
    query_interface : Proc(IAMResourceControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMResourceControl*, UInt32)
    release : Proc(IAMResourceControl*, UInt32)
    reserve : Proc(IAMResourceControl*, UInt32, Void*, HRESULT)
  end

  IAMResourceControl_GUID = LibC::GUID.new("8389d2d0-77d7-11d1-abe6-00a0c905f375")
  CLSID_IAMResourceControl = "8389d2d0-77d7-11d1-abe6-00a0c905f375"
  struct IAMResourceControl
    lpVtbl : IAMResourceControlVTbl*
  end

  struct IAMClockAdjustVTbl
    query_interface : Proc(IAMClockAdjust*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMClockAdjust*, UInt32)
    release : Proc(IAMClockAdjust*, UInt32)
    set_clock_delta : Proc(IAMClockAdjust*, Int64, HRESULT)
  end

  IAMClockAdjust_GUID = LibC::GUID.new("4d5466b0-a49c-11d1-abe8-00a0c905f375")
  CLSID_IAMClockAdjust = "4d5466b0-a49c-11d1-abe8-00a0c905f375"
  struct IAMClockAdjust
    lpVtbl : IAMClockAdjustVTbl*
  end

  struct IAMFilterMiscFlagsVTbl
    query_interface : Proc(IAMFilterMiscFlags*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMFilterMiscFlags*, UInt32)
    release : Proc(IAMFilterMiscFlags*, UInt32)
    get_misc_flags : Proc(IAMFilterMiscFlags*, UInt32)
  end

  IAMFilterMiscFlags_GUID = LibC::GUID.new("2dd74950-a890-11d1-abe8-00a0c905f375")
  CLSID_IAMFilterMiscFlags = "2dd74950-a890-11d1-abe8-00a0c905f375"
  struct IAMFilterMiscFlags
    lpVtbl : IAMFilterMiscFlagsVTbl*
  end

  struct IDrawVideoImageVTbl
    query_interface : Proc(IDrawVideoImage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDrawVideoImage*, UInt32)
    release : Proc(IDrawVideoImage*, UInt32)
    draw_video_image_begin : Proc(IDrawVideoImage*, HRESULT)
    draw_video_image_end : Proc(IDrawVideoImage*, HRESULT)
    draw_video_image_draw : Proc(IDrawVideoImage*, HDC, RECT*, RECT*, HRESULT)
  end

  IDrawVideoImage_GUID = LibC::GUID.new("48efb120-ab49-11d2-aed2-00a0c995e8d5")
  CLSID_IDrawVideoImage = "48efb120-ab49-11d2-aed2-00a0c995e8d5"
  struct IDrawVideoImage
    lpVtbl : IDrawVideoImageVTbl*
  end

  struct IDecimateVideoImageVTbl
    query_interface : Proc(IDecimateVideoImage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDecimateVideoImage*, UInt32)
    release : Proc(IDecimateVideoImage*, UInt32)
    set_decimation_image_size : Proc(IDecimateVideoImage*, Int32, Int32, HRESULT)
    reset_decimation_image_size : Proc(IDecimateVideoImage*, HRESULT)
  end

  IDecimateVideoImage_GUID = LibC::GUID.new("2e5ea3e0-e924-11d2-b6da-00a0c995e8df")
  CLSID_IDecimateVideoImage = "2e5ea3e0-e924-11d2-b6da-00a0c995e8df"
  struct IDecimateVideoImage
    lpVtbl : IDecimateVideoImageVTbl*
  end

  struct IAMVideoDecimationPropertiesVTbl
    query_interface : Proc(IAMVideoDecimationProperties*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVideoDecimationProperties*, UInt32)
    release : Proc(IAMVideoDecimationProperties*, UInt32)
    query_decimation_usage : Proc(IAMVideoDecimationProperties*, DECIMATION_USAGE*, HRESULT)
    set_decimation_usage : Proc(IAMVideoDecimationProperties*, DECIMATION_USAGE, HRESULT)
  end

  IAMVideoDecimationProperties_GUID = LibC::GUID.new("60d32930-13da-11d3-9ec6-c4fcaef5c7be")
  CLSID_IAMVideoDecimationProperties = "60d32930-13da-11d3-9ec6-c4fcaef5c7be"
  struct IAMVideoDecimationProperties
    lpVtbl : IAMVideoDecimationPropertiesVTbl*
  end

  struct IVideoFrameStepVTbl
    query_interface : Proc(IVideoFrameStep*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVideoFrameStep*, UInt32)
    release : Proc(IVideoFrameStep*, UInt32)
    step : Proc(IVideoFrameStep*, UInt32, IUnknown, HRESULT)
    can_step : Proc(IVideoFrameStep*, Int32, IUnknown, HRESULT)
    cancel_step : Proc(IVideoFrameStep*, HRESULT)
  end

  IVideoFrameStep_GUID = LibC::GUID.new("e46a9787-2b71-444d-a4b5-1fab7b708d6a")
  CLSID_IVideoFrameStep = "e46a9787-2b71-444d-a4b5-1fab7b708d6a"
  struct IVideoFrameStep
    lpVtbl : IVideoFrameStepVTbl*
  end

  struct IAMLatencyVTbl
    query_interface : Proc(IAMLatency*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMLatency*, UInt32)
    release : Proc(IAMLatency*, UInt32)
    get_latency : Proc(IAMLatency*, Int64*, HRESULT)
  end

  IAMLatency_GUID = LibC::GUID.new("62ea93ba-ec62-11d2-b770-00c04fb6bd3d")
  CLSID_IAMLatency = "62ea93ba-ec62-11d2-b770-00c04fb6bd3d"
  struct IAMLatency
    lpVtbl : IAMLatencyVTbl*
  end

  struct IAMPushSourceVTbl
    query_interface : Proc(IAMPushSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMPushSource*, UInt32)
    release : Proc(IAMPushSource*, UInt32)
    get_latency : Proc(IAMPushSource*, Int64*, HRESULT)
    get_push_source_flags : Proc(IAMPushSource*, UInt32*, HRESULT)
    set_push_source_flags : Proc(IAMPushSource*, UInt32, HRESULT)
    set_stream_offset : Proc(IAMPushSource*, Int64, HRESULT)
    get_stream_offset : Proc(IAMPushSource*, Int64*, HRESULT)
    get_max_stream_offset : Proc(IAMPushSource*, Int64*, HRESULT)
    set_max_stream_offset : Proc(IAMPushSource*, Int64, HRESULT)
  end

  IAMPushSource_GUID = LibC::GUID.new("f185fe76-e64e-11d2-b76e-00c04fb6bd3d")
  CLSID_IAMPushSource = "f185fe76-e64e-11d2-b76e-00c04fb6bd3d"
  struct IAMPushSource
    lpVtbl : IAMPushSourceVTbl*
  end

  struct IAMDeviceRemovalVTbl
    query_interface : Proc(IAMDeviceRemoval*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMDeviceRemoval*, UInt32)
    release : Proc(IAMDeviceRemoval*, UInt32)
    device_info : Proc(IAMDeviceRemoval*, Guid*, LibC::LPWSTR*, HRESULT)
    reassociate : Proc(IAMDeviceRemoval*, HRESULT)
    disassociate : Proc(IAMDeviceRemoval*, HRESULT)
  end

  IAMDeviceRemoval_GUID = LibC::GUID.new("f90a6130-b658-11d2-ae49-0000f8754b99")
  CLSID_IAMDeviceRemoval = "f90a6130-b658-11d2-ae49-0000f8754b99"
  struct IAMDeviceRemoval
    lpVtbl : IAMDeviceRemovalVTbl*
  end

  struct IDVEncVTbl
    query_interface : Proc(IDVEnc*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVEnc*, UInt32)
    release : Proc(IDVEnc*, UInt32)
    get_i_format_resolution : Proc(IDVEnc*, Int32*, Int32*, Int32*, UInt8, DVINFO*, HRESULT)
    put_i_format_resolution : Proc(IDVEnc*, Int32, Int32, Int32, UInt8, DVINFO*, HRESULT)
  end

  IDVEnc_GUID = LibC::GUID.new("d18e17a0-aacb-11d0-afb0-00aa00b67a42")
  CLSID_IDVEnc = "d18e17a0-aacb-11d0-afb0-00aa00b67a42"
  struct IDVEnc
    lpVtbl : IDVEncVTbl*
  end

  struct IIPDVDecVTbl
    query_interface : Proc(IIPDVDec*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIPDVDec*, UInt32)
    release : Proc(IIPDVDec*, UInt32)
    get_ip_display : Proc(IIPDVDec*, Int32*, HRESULT)
    put_ip_display : Proc(IIPDVDec*, Int32, HRESULT)
  end

  IIPDVDec_GUID = LibC::GUID.new("b8e8bd60-0bfe-11d0-af91-00aa00b67a42")
  CLSID_IIPDVDec = "b8e8bd60-0bfe-11d0-af91-00aa00b67a42"
  struct IIPDVDec
    lpVtbl : IIPDVDecVTbl*
  end

  struct IDVRGB219VTbl
    query_interface : Proc(IDVRGB219*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVRGB219*, UInt32)
    release : Proc(IDVRGB219*, UInt32)
    set_rgb219 : Proc(IDVRGB219*, LibC::BOOL, HRESULT)
  end

  IDVRGB219_GUID = LibC::GUID.new("58473a19-2bc8-4663-8012-25f81babddd1")
  CLSID_IDVRGB219 = "58473a19-2bc8-4663-8012-25f81babddd1"
  struct IDVRGB219
    lpVtbl : IDVRGB219VTbl*
  end

  struct IDVSplitterVTbl
    query_interface : Proc(IDVSplitter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVSplitter*, UInt32)
    release : Proc(IDVSplitter*, UInt32)
    discard_alternate_video_frames : Proc(IDVSplitter*, Int32, HRESULT)
  end

  IDVSplitter_GUID = LibC::GUID.new("92a3a302-da7c-4a1f-ba7e-1802bb5d2d02")
  CLSID_IDVSplitter = "92a3a302-da7c-4a1f-ba7e-1802bb5d2d02"
  struct IDVSplitter
    lpVtbl : IDVSplitterVTbl*
  end

  struct IAMAudioRendererStatsVTbl
    query_interface : Proc(IAMAudioRendererStats*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMAudioRendererStats*, UInt32)
    release : Proc(IAMAudioRendererStats*, UInt32)
    get_stat_param : Proc(IAMAudioRendererStats*, UInt32, UInt32*, UInt32*, HRESULT)
  end

  IAMAudioRendererStats_GUID = LibC::GUID.new("22320cb2-d41a-11d2-bf7c-d7cb9df0bf93")
  CLSID_IAMAudioRendererStats = "22320cb2-d41a-11d2-bf7c-d7cb9df0bf93"
  struct IAMAudioRendererStats
    lpVtbl : IAMAudioRendererStatsVTbl*
  end

  struct IAMGraphStreamsVTbl
    query_interface : Proc(IAMGraphStreams*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMGraphStreams*, UInt32)
    release : Proc(IAMGraphStreams*, UInt32)
    find_upstream_interface : Proc(IAMGraphStreams*, IPin, Guid*, Void**, UInt32, HRESULT)
    sync_using_stream_offset : Proc(IAMGraphStreams*, LibC::BOOL, HRESULT)
    set_max_graph_latency : Proc(IAMGraphStreams*, Int64, HRESULT)
  end

  IAMGraphStreams_GUID = LibC::GUID.new("632105fa-072e-11d3-8af9-00c04fb6bd3d")
  CLSID_IAMGraphStreams = "632105fa-072e-11d3-8af9-00c04fb6bd3d"
  struct IAMGraphStreams
    lpVtbl : IAMGraphStreamsVTbl*
  end

  struct IAMOverlayFXVTbl
    query_interface : Proc(IAMOverlayFX*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMOverlayFX*, UInt32)
    release : Proc(IAMOverlayFX*, UInt32)
    query_overlay_fx_caps : Proc(IAMOverlayFX*, UInt32*, HRESULT)
    set_overlay_fx : Proc(IAMOverlayFX*, UInt32, HRESULT)
    get_overlay_fx : Proc(IAMOverlayFX*, UInt32*, HRESULT)
  end

  IAMOverlayFX_GUID = LibC::GUID.new("62fae250-7e65-4460-bfc9-6398b322073c")
  CLSID_IAMOverlayFX = "62fae250-7e65-4460-bfc9-6398b322073c"
  struct IAMOverlayFX
    lpVtbl : IAMOverlayFXVTbl*
  end

  struct IAMOpenProgressVTbl
    query_interface : Proc(IAMOpenProgress*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMOpenProgress*, UInt32)
    release : Proc(IAMOpenProgress*, UInt32)
    query_progress : Proc(IAMOpenProgress*, Int64*, Int64*, HRESULT)
    abort_operation : Proc(IAMOpenProgress*, HRESULT)
  end

  IAMOpenProgress_GUID = LibC::GUID.new("8e1c39a1-de53-11cf-aa63-0080c744528d")
  CLSID_IAMOpenProgress = "8e1c39a1-de53-11cf-aa63-0080c744528d"
  struct IAMOpenProgress
    lpVtbl : IAMOpenProgressVTbl*
  end

  struct IMpeg2DemultiplexerVTbl
    query_interface : Proc(IMpeg2Demultiplexer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMpeg2Demultiplexer*, UInt32)
    release : Proc(IMpeg2Demultiplexer*, UInt32)
    create_output_pin : Proc(IMpeg2Demultiplexer*, AM_MEDIA_TYPE*, LibC::LPWSTR, IPin*, HRESULT)
    set_output_pin_media_type : Proc(IMpeg2Demultiplexer*, LibC::LPWSTR, AM_MEDIA_TYPE*, HRESULT)
    delete_output_pin : Proc(IMpeg2Demultiplexer*, LibC::LPWSTR, HRESULT)
  end

  IMpeg2Demultiplexer_GUID = LibC::GUID.new("436eee9c-264f-4242-90e1-4e330c107512")
  CLSID_IMpeg2Demultiplexer = "436eee9c-264f-4242-90e1-4e330c107512"
  struct IMpeg2Demultiplexer
    lpVtbl : IMpeg2DemultiplexerVTbl*
  end

  struct IEnumStreamIdMapVTbl
    query_interface : Proc(IEnumStreamIdMap*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumStreamIdMap*, UInt32)
    release : Proc(IEnumStreamIdMap*, UInt32)
    next : Proc(IEnumStreamIdMap*, UInt32, STREAM_ID_MAP*, UInt32*, HRESULT)
    skip : Proc(IEnumStreamIdMap*, UInt32, HRESULT)
    reset : Proc(IEnumStreamIdMap*, HRESULT)
    clone : Proc(IEnumStreamIdMap*, IEnumStreamIdMap*, HRESULT)
  end

  IEnumStreamIdMap_GUID = LibC::GUID.new("945c1566-6202-46fc-96c7-d87f289c6534")
  CLSID_IEnumStreamIdMap = "945c1566-6202-46fc-96c7-d87f289c6534"
  struct IEnumStreamIdMap
    lpVtbl : IEnumStreamIdMapVTbl*
  end

  struct IMPEG2StreamIdMapVTbl
    query_interface : Proc(IMPEG2StreamIdMap*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2StreamIdMap*, UInt32)
    release : Proc(IMPEG2StreamIdMap*, UInt32)
    map_stream_id : Proc(IMPEG2StreamIdMap*, UInt32, UInt32, UInt32, Int32, HRESULT)
    unmap_stream_id : Proc(IMPEG2StreamIdMap*, UInt32, UInt32*, HRESULT)
    enum_stream_id_map : Proc(IMPEG2StreamIdMap*, IEnumStreamIdMap*, HRESULT)
  end

  IMPEG2StreamIdMap_GUID = LibC::GUID.new("d0e04c47-25b8-4369-925a-362a01d95444")
  CLSID_IMPEG2StreamIdMap = "d0e04c47-25b8-4369-925a-362a01d95444"
  struct IMPEG2StreamIdMap
    lpVtbl : IMPEG2StreamIdMapVTbl*
  end

  struct IRegisterServiceProviderVTbl
    query_interface : Proc(IRegisterServiceProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRegisterServiceProvider*, UInt32)
    release : Proc(IRegisterServiceProvider*, UInt32)
    register_service : Proc(IRegisterServiceProvider*, Guid*, IUnknown, HRESULT)
  end

  IRegisterServiceProvider_GUID = LibC::GUID.new("7b3a2f01-0751-48dd-b556-004785171c54")
  CLSID_IRegisterServiceProvider = "7b3a2f01-0751-48dd-b556-004785171c54"
  struct IRegisterServiceProvider
    lpVtbl : IRegisterServiceProviderVTbl*
  end

  struct IAMClockSlaveVTbl
    query_interface : Proc(IAMClockSlave*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMClockSlave*, UInt32)
    release : Proc(IAMClockSlave*, UInt32)
    set_error_tolerance : Proc(IAMClockSlave*, UInt32, HRESULT)
    get_error_tolerance : Proc(IAMClockSlave*, UInt32*, HRESULT)
  end

  IAMClockSlave_GUID = LibC::GUID.new("9fd52741-176d-4b36-8f51-ca8f933223be")
  CLSID_IAMClockSlave = "9fd52741-176d-4b36-8f51-ca8f933223be"
  struct IAMClockSlave
    lpVtbl : IAMClockSlaveVTbl*
  end

  struct IAMGraphBuilderCallbackVTbl
    query_interface : Proc(IAMGraphBuilderCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMGraphBuilderCallback*, UInt32)
    release : Proc(IAMGraphBuilderCallback*, UInt32)
    selected_filter : Proc(IAMGraphBuilderCallback*, IMoniker, HRESULT)
    created_filter : Proc(IAMGraphBuilderCallback*, IBaseFilter, HRESULT)
  end

  IAMGraphBuilderCallback_GUID = LibC::GUID.new("4995f511-9ddb-4f12-bd3b-f04611807b79")
  CLSID_IAMGraphBuilderCallback = "4995f511-9ddb-4f12-bd3b-f04611807b79"
  struct IAMGraphBuilderCallback
    lpVtbl : IAMGraphBuilderCallbackVTbl*
  end

  struct IAMFilterGraphCallbackVTbl
    query_interface : Proc(IAMFilterGraphCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMFilterGraphCallback*, UInt32)
    release : Proc(IAMFilterGraphCallback*, UInt32)
    unable_to_render : Proc(IAMFilterGraphCallback*, IPin, HRESULT)
  end

  IAMFilterGraphCallback_GUID = LibC::GUID.new("56a868fd-0ad4-11ce-b0a3-0020af0ba770")
  CLSID_IAMFilterGraphCallback = "56a868fd-0ad4-11ce-b0a3-0020af0ba770"
  struct IAMFilterGraphCallback
    lpVtbl : IAMFilterGraphCallbackVTbl*
  end

  struct IGetCapabilitiesKeyVTbl
    query_interface : Proc(IGetCapabilitiesKey*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGetCapabilitiesKey*, UInt32)
    release : Proc(IGetCapabilitiesKey*, UInt32)
    get_capabilities_key : Proc(IGetCapabilitiesKey*, HKEY*, HRESULT)
  end

  IGetCapabilitiesKey_GUID = LibC::GUID.new("a8809222-07bb-48ea-951c-33158100625b")
  CLSID_IGetCapabilitiesKey = "a8809222-07bb-48ea-951c-33158100625b"
  struct IGetCapabilitiesKey
    lpVtbl : IGetCapabilitiesKeyVTbl*
  end

  struct IEncoderAPIVTbl
    query_interface : Proc(IEncoderAPI*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEncoderAPI*, UInt32)
    release : Proc(IEncoderAPI*, UInt32)
    is_supported : Proc(IEncoderAPI*, Guid*, HRESULT)
    is_available : Proc(IEncoderAPI*, Guid*, HRESULT)
    get_parameter_range : Proc(IEncoderAPI*, Guid*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    get_parameter_values : Proc(IEncoderAPI*, Guid*, VARIANT**, UInt32*, HRESULT)
    get_default_value : Proc(IEncoderAPI*, Guid*, VARIANT*, HRESULT)
    get_value : Proc(IEncoderAPI*, Guid*, VARIANT*, HRESULT)
    set_value : Proc(IEncoderAPI*, Guid*, VARIANT*, HRESULT)
  end

  IEncoderAPI_GUID = LibC::GUID.new("70423839-6acc-4b23-b079-21dbf08156a5")
  CLSID_IEncoderAPI = "70423839-6acc-4b23-b079-21dbf08156a5"
  struct IEncoderAPI
    lpVtbl : IEncoderAPIVTbl*
  end

  struct IVideoEncoderVTbl
    query_interface : Proc(IVideoEncoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVideoEncoder*, UInt32)
    release : Proc(IVideoEncoder*, UInt32)
    is_supported : Proc(IVideoEncoder*, Guid*, HRESULT)
    is_available : Proc(IVideoEncoder*, Guid*, HRESULT)
    get_parameter_range : Proc(IVideoEncoder*, Guid*, VARIANT*, VARIANT*, VARIANT*, HRESULT)
    get_parameter_values : Proc(IVideoEncoder*, Guid*, VARIANT**, UInt32*, HRESULT)
    get_default_value : Proc(IVideoEncoder*, Guid*, VARIANT*, HRESULT)
    get_value : Proc(IVideoEncoder*, Guid*, VARIANT*, HRESULT)
    set_value : Proc(IVideoEncoder*, Guid*, VARIANT*, HRESULT)
  end

  IVideoEncoder_GUID = LibC::GUID.new("02997c3b-8e1b-460e-9270-545e0de9563e")
  CLSID_IVideoEncoder = "02997c3b-8e1b-460e-9270-545e0de9563e"
  struct IVideoEncoder
    lpVtbl : IVideoEncoderVTbl*
  end

  struct IAMDecoderCapsVTbl
    query_interface : Proc(IAMDecoderCaps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMDecoderCaps*, UInt32)
    release : Proc(IAMDecoderCaps*, UInt32)
    get_decoder_caps : Proc(IAMDecoderCaps*, UInt32, UInt32*, HRESULT)
  end

  IAMDecoderCaps_GUID = LibC::GUID.new("c0dff467-d499-4986-972b-e1d9090fa941")
  CLSID_IAMDecoderCaps = "c0dff467-d499-4986-972b-e1d9090fa941"
  struct IAMDecoderCaps
    lpVtbl : IAMDecoderCapsVTbl*
  end

  struct IAMCertifiedOutputProtectionVTbl
    query_interface : Proc(IAMCertifiedOutputProtection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMCertifiedOutputProtection*, UInt32)
    release : Proc(IAMCertifiedOutputProtection*, UInt32)
    key_exchange : Proc(IAMCertifiedOutputProtection*, Guid*, UInt8**, UInt32*, HRESULT)
    session_sequence_start : Proc(IAMCertifiedOutputProtection*, AMCOPPSignature*, HRESULT)
    protection_command : Proc(IAMCertifiedOutputProtection*, AMCOPPCommand*, HRESULT)
    protection_status : Proc(IAMCertifiedOutputProtection*, AMCOPPStatusInput*, AMCOPPStatusOutput*, HRESULT)
  end

  IAMCertifiedOutputProtection_GUID = LibC::GUID.new("6feded3e-0ff1-4901-a2f1-43f7012c8515")
  CLSID_IAMCertifiedOutputProtection = "6feded3e-0ff1-4901-a2f1-43f7012c8515"
  struct IAMCertifiedOutputProtection
    lpVtbl : IAMCertifiedOutputProtectionVTbl*
  end

  struct IAMAsyncReaderTimestampScalingVTbl
    query_interface : Proc(IAMAsyncReaderTimestampScaling*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMAsyncReaderTimestampScaling*, UInt32)
    release : Proc(IAMAsyncReaderTimestampScaling*, UInt32)
    get_timestamp_mode : Proc(IAMAsyncReaderTimestampScaling*, LibC::BOOL*, HRESULT)
    set_timestamp_mode : Proc(IAMAsyncReaderTimestampScaling*, LibC::BOOL, HRESULT)
  end

  IAMAsyncReaderTimestampScaling_GUID = LibC::GUID.new("cf7b26fc-9a00-485b-8147-3e789d5e8f67")
  CLSID_IAMAsyncReaderTimestampScaling = "cf7b26fc-9a00-485b-8147-3e789d5e8f67"
  struct IAMAsyncReaderTimestampScaling
    lpVtbl : IAMAsyncReaderTimestampScalingVTbl*
  end

  struct IAMPluginControlVTbl
    query_interface : Proc(IAMPluginControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMPluginControl*, UInt32)
    release : Proc(IAMPluginControl*, UInt32)
    get_preferred_clsid : Proc(IAMPluginControl*, Guid*, Guid*, HRESULT)
    get_preferred_clsid_by_index : Proc(IAMPluginControl*, UInt32, Guid*, Guid*, HRESULT)
    set_preferred_clsid : Proc(IAMPluginControl*, Guid*, Guid*, HRESULT)
    is_disabled : Proc(IAMPluginControl*, Guid*, HRESULT)
    get_disabled_by_index : Proc(IAMPluginControl*, UInt32, Guid*, HRESULT)
    set_disabled : Proc(IAMPluginControl*, Guid*, LibC::BOOL, HRESULT)
    is_legacy_disabled : Proc(IAMPluginControl*, LibC::LPWSTR, HRESULT)
  end

  IAMPluginControl_GUID = LibC::GUID.new("0e26a181-f40c-4635-8786-976284b52981")
  CLSID_IAMPluginControl = "0e26a181-f40c-4635-8786-976284b52981"
  struct IAMPluginControl
    lpVtbl : IAMPluginControlVTbl*
  end

  struct IPinConnectionVTbl
    query_interface : Proc(IPinConnection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPinConnection*, UInt32)
    release : Proc(IPinConnection*, UInt32)
    dynamic_query_accept : Proc(IPinConnection*, AM_MEDIA_TYPE*, HRESULT)
    notify_end_of_stream : Proc(IPinConnection*, LibC::HANDLE, HRESULT)
    is_end_pin : Proc(IPinConnection*, HRESULT)
    dynamic_disconnect : Proc(IPinConnection*, HRESULT)
  end

  IPinConnection_GUID = LibC::GUID.new("4a9a62d3-27d4-403d-91e9-89f540e55534")
  CLSID_IPinConnection = "4a9a62d3-27d4-403d-91e9-89f540e55534"
  struct IPinConnection
    lpVtbl : IPinConnectionVTbl*
  end

  struct IPinFlowControlVTbl
    query_interface : Proc(IPinFlowControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPinFlowControl*, UInt32)
    release : Proc(IPinFlowControl*, UInt32)
    block : Proc(IPinFlowControl*, UInt32, LibC::HANDLE, HRESULT)
  end

  IPinFlowControl_GUID = LibC::GUID.new("c56e9858-dbf3-4f6b-8119-384af2060deb")
  CLSID_IPinFlowControl = "c56e9858-dbf3-4f6b-8119-384af2060deb"
  struct IPinFlowControl
    lpVtbl : IPinFlowControlVTbl*
  end

  struct IGraphConfigVTbl
    query_interface : Proc(IGraphConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGraphConfig*, UInt32)
    release : Proc(IGraphConfig*, UInt32)
    reconnect : Proc(IGraphConfig*, IPin, IPin, AM_MEDIA_TYPE*, IBaseFilter, LibC::HANDLE, UInt32, HRESULT)
    reconfigure : Proc(IGraphConfig*, IGraphConfigCallback, Void*, UInt32, LibC::HANDLE, HRESULT)
    add_filter_to_cache : Proc(IGraphConfig*, IBaseFilter, HRESULT)
    enum_cache_filter : Proc(IGraphConfig*, IEnumFilters*, HRESULT)
    remove_filter_from_cache : Proc(IGraphConfig*, IBaseFilter, HRESULT)
    get_start_time : Proc(IGraphConfig*, Int64*, HRESULT)
    push_through_data : Proc(IGraphConfig*, IPin, IPinConnection, LibC::HANDLE, HRESULT)
    set_filter_flags : Proc(IGraphConfig*, IBaseFilter, UInt32, HRESULT)
    get_filter_flags : Proc(IGraphConfig*, IBaseFilter, UInt32*, HRESULT)
    remove_filter_ex : Proc(IGraphConfig*, IBaseFilter, UInt32, HRESULT)
  end

  IGraphConfig_GUID = LibC::GUID.new("03a1eb8e-32bf-4245-8502-114d08a9cb88")
  CLSID_IGraphConfig = "03a1eb8e-32bf-4245-8502-114d08a9cb88"
  struct IGraphConfig
    lpVtbl : IGraphConfigVTbl*
  end

  struct IGraphConfigCallbackVTbl
    query_interface : Proc(IGraphConfigCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGraphConfigCallback*, UInt32)
    release : Proc(IGraphConfigCallback*, UInt32)
    reconfigure : Proc(IGraphConfigCallback*, Void*, UInt32, HRESULT)
  end

  IGraphConfigCallback_GUID = LibC::GUID.new("ade0fd60-d19d-11d2-abf6-00a0c905f375")
  CLSID_IGraphConfigCallback = "ade0fd60-d19d-11d2-abf6-00a0c905f375"
  struct IGraphConfigCallback
    lpVtbl : IGraphConfigCallbackVTbl*
  end

  struct IFilterChainVTbl
    query_interface : Proc(IFilterChain*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterChain*, UInt32)
    release : Proc(IFilterChain*, UInt32)
    start_chain : Proc(IFilterChain*, IBaseFilter, IBaseFilter, HRESULT)
    pause_chain : Proc(IFilterChain*, IBaseFilter, IBaseFilter, HRESULT)
    stop_chain : Proc(IFilterChain*, IBaseFilter, IBaseFilter, HRESULT)
    remove_chain : Proc(IFilterChain*, IBaseFilter, IBaseFilter, HRESULT)
  end

  IFilterChain_GUID = LibC::GUID.new("dcfbdcf6-0dc2-45f5-9ab2-7c330ea09c29")
  CLSID_IFilterChain = "dcfbdcf6-0dc2-45f5-9ab2-7c330ea09c29"
  struct IFilterChain
    lpVtbl : IFilterChainVTbl*
  end

  struct IVMRImagePresenterVTbl
    query_interface : Proc(IVMRImagePresenter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRImagePresenter*, UInt32)
    release : Proc(IVMRImagePresenter*, UInt32)
    start_presenting : Proc(IVMRImagePresenter*, LibC::UINT_PTR, HRESULT)
    stop_presenting : Proc(IVMRImagePresenter*, LibC::UINT_PTR, HRESULT)
    present_image : Proc(IVMRImagePresenter*, LibC::UINT_PTR, VMRPRESENTATIONINFO*, HRESULT)
  end

  IVMRImagePresenter_GUID = LibC::GUID.new("ce704fe7-e71e-41fb-baa2-c4403e1182f5")
  CLSID_IVMRImagePresenter = "ce704fe7-e71e-41fb-baa2-c4403e1182f5"
  struct IVMRImagePresenter
    lpVtbl : IVMRImagePresenterVTbl*
  end

  struct IVMRSurfaceAllocatorVTbl
    query_interface : Proc(IVMRSurfaceAllocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRSurfaceAllocator*, UInt32)
    release : Proc(IVMRSurfaceAllocator*, UInt32)
    allocate_surface : Proc(IVMRSurfaceAllocator*, LibC::UINT_PTR, VMRALLOCATIONINFO*, UInt32*, IDirectDrawSurface7*, HRESULT)
    free_surface : Proc(IVMRSurfaceAllocator*, LibC::UINT_PTR, HRESULT)
    prepare_surface : Proc(IVMRSurfaceAllocator*, LibC::UINT_PTR, IDirectDrawSurface7, UInt32, HRESULT)
    advise_notify : Proc(IVMRSurfaceAllocator*, IVMRSurfaceAllocatorNotify, HRESULT)
  end

  IVMRSurfaceAllocator_GUID = LibC::GUID.new("31ce832e-4484-458b-8cca-f4d7e3db0b52")
  CLSID_IVMRSurfaceAllocator = "31ce832e-4484-458b-8cca-f4d7e3db0b52"
  struct IVMRSurfaceAllocator
    lpVtbl : IVMRSurfaceAllocatorVTbl*
  end

  struct IVMRSurfaceAllocatorNotifyVTbl
    query_interface : Proc(IVMRSurfaceAllocatorNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRSurfaceAllocatorNotify*, UInt32)
    release : Proc(IVMRSurfaceAllocatorNotify*, UInt32)
    advise_surface_allocator : Proc(IVMRSurfaceAllocatorNotify*, LibC::UINT_PTR, IVMRSurfaceAllocator, HRESULT)
    set_d_draw_device : Proc(IVMRSurfaceAllocatorNotify*, IDirectDraw7, HMONITOR, HRESULT)
    change_d_draw_device : Proc(IVMRSurfaceAllocatorNotify*, IDirectDraw7, HMONITOR, HRESULT)
    restore_d_draw_surfaces : Proc(IVMRSurfaceAllocatorNotify*, HRESULT)
    notify_event : Proc(IVMRSurfaceAllocatorNotify*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    set_border_color : Proc(IVMRSurfaceAllocatorNotify*, UInt32, HRESULT)
  end

  IVMRSurfaceAllocatorNotify_GUID = LibC::GUID.new("aada05a8-5a4e-4729-af0b-cea27aed51e2")
  CLSID_IVMRSurfaceAllocatorNotify = "aada05a8-5a4e-4729-af0b-cea27aed51e2"
  struct IVMRSurfaceAllocatorNotify
    lpVtbl : IVMRSurfaceAllocatorNotifyVTbl*
  end

  struct IVMRWindowlessControlVTbl
    query_interface : Proc(IVMRWindowlessControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRWindowlessControl*, UInt32)
    release : Proc(IVMRWindowlessControl*, UInt32)
    get_native_video_size : Proc(IVMRWindowlessControl*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_min_ideal_video_size : Proc(IVMRWindowlessControl*, Int32*, Int32*, HRESULT)
    get_max_ideal_video_size : Proc(IVMRWindowlessControl*, Int32*, Int32*, HRESULT)
    set_video_position : Proc(IVMRWindowlessControl*, RECT*, RECT*, HRESULT)
    get_video_position : Proc(IVMRWindowlessControl*, RECT*, RECT*, HRESULT)
    get_aspect_ratio_mode : Proc(IVMRWindowlessControl*, UInt32*, HRESULT)
    set_aspect_ratio_mode : Proc(IVMRWindowlessControl*, UInt32, HRESULT)
    set_video_clipping_window : Proc(IVMRWindowlessControl*, LibC::HANDLE, HRESULT)
    repaint_video : Proc(IVMRWindowlessControl*, LibC::HANDLE, HDC, HRESULT)
    display_mode_changed : Proc(IVMRWindowlessControl*, HRESULT)
    get_current_image : Proc(IVMRWindowlessControl*, UInt8**, HRESULT)
    set_border_color : Proc(IVMRWindowlessControl*, UInt32, HRESULT)
    get_border_color : Proc(IVMRWindowlessControl*, UInt32*, HRESULT)
    set_color_key : Proc(IVMRWindowlessControl*, UInt32, HRESULT)
    get_color_key : Proc(IVMRWindowlessControl*, UInt32*, HRESULT)
  end

  IVMRWindowlessControl_GUID = LibC::GUID.new("0eb1088c-4dcd-46f0-878f-39dae86a51b7")
  CLSID_IVMRWindowlessControl = "0eb1088c-4dcd-46f0-878f-39dae86a51b7"
  struct IVMRWindowlessControl
    lpVtbl : IVMRWindowlessControlVTbl*
  end

  struct IVMRMixerControlVTbl
    query_interface : Proc(IVMRMixerControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRMixerControl*, UInt32)
    release : Proc(IVMRMixerControl*, UInt32)
    set_alpha : Proc(IVMRMixerControl*, UInt32, Float32, HRESULT)
    get_alpha : Proc(IVMRMixerControl*, UInt32, Float32*, HRESULT)
    set_z_order : Proc(IVMRMixerControl*, UInt32, UInt32, HRESULT)
    get_z_order : Proc(IVMRMixerControl*, UInt32, UInt32*, HRESULT)
    set_output_rect : Proc(IVMRMixerControl*, UInt32, NORMALIZEDRECT*, HRESULT)
    get_output_rect : Proc(IVMRMixerControl*, UInt32, NORMALIZEDRECT*, HRESULT)
    set_background_clr : Proc(IVMRMixerControl*, UInt32, HRESULT)
    get_background_clr : Proc(IVMRMixerControl*, UInt32*, HRESULT)
    set_mixing_prefs : Proc(IVMRMixerControl*, UInt32, HRESULT)
    get_mixing_prefs : Proc(IVMRMixerControl*, UInt32*, HRESULT)
  end

  IVMRMixerControl_GUID = LibC::GUID.new("1c1a17b0-bed0-415d-974b-dc6696131599")
  CLSID_IVMRMixerControl = "1c1a17b0-bed0-415d-974b-dc6696131599"
  struct IVMRMixerControl
    lpVtbl : IVMRMixerControlVTbl*
  end

  struct IVMRMonitorConfigVTbl
    query_interface : Proc(IVMRMonitorConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRMonitorConfig*, UInt32)
    release : Proc(IVMRMonitorConfig*, UInt32)
    set_monitor : Proc(IVMRMonitorConfig*, VMRGUID*, HRESULT)
    get_monitor : Proc(IVMRMonitorConfig*, VMRGUID*, HRESULT)
    set_default_monitor : Proc(IVMRMonitorConfig*, VMRGUID*, HRESULT)
    get_default_monitor : Proc(IVMRMonitorConfig*, VMRGUID*, HRESULT)
    get_available_monitors : Proc(IVMRMonitorConfig*, VMRMONITORINFO*, UInt32, UInt32*, HRESULT)
  end

  IVMRMonitorConfig_GUID = LibC::GUID.new("9cf0b1b6-fbaa-4b7f-88cf-cf1f130a0dce")
  CLSID_IVMRMonitorConfig = "9cf0b1b6-fbaa-4b7f-88cf-cf1f130a0dce"
  struct IVMRMonitorConfig
    lpVtbl : IVMRMonitorConfigVTbl*
  end

  struct IVMRFilterConfigVTbl
    query_interface : Proc(IVMRFilterConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRFilterConfig*, UInt32)
    release : Proc(IVMRFilterConfig*, UInt32)
    set_image_compositor : Proc(IVMRFilterConfig*, IVMRImageCompositor, HRESULT)
    set_number_of_streams : Proc(IVMRFilterConfig*, UInt32, HRESULT)
    get_number_of_streams : Proc(IVMRFilterConfig*, UInt32*, HRESULT)
    set_rendering_prefs : Proc(IVMRFilterConfig*, UInt32, HRESULT)
    get_rendering_prefs : Proc(IVMRFilterConfig*, UInt32*, HRESULT)
    set_rendering_mode : Proc(IVMRFilterConfig*, UInt32, HRESULT)
    get_rendering_mode : Proc(IVMRFilterConfig*, UInt32*, HRESULT)
  end

  IVMRFilterConfig_GUID = LibC::GUID.new("9e5530c5-7034-48b4-bb46-0b8a6efc8e36")
  CLSID_IVMRFilterConfig = "9e5530c5-7034-48b4-bb46-0b8a6efc8e36"
  struct IVMRFilterConfig
    lpVtbl : IVMRFilterConfigVTbl*
  end

  struct IVMRAspectRatioControlVTbl
    query_interface : Proc(IVMRAspectRatioControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRAspectRatioControl*, UInt32)
    release : Proc(IVMRAspectRatioControl*, UInt32)
    get_aspect_ratio_mode : Proc(IVMRAspectRatioControl*, UInt32*, HRESULT)
    set_aspect_ratio_mode : Proc(IVMRAspectRatioControl*, UInt32, HRESULT)
  end

  IVMRAspectRatioControl_GUID = LibC::GUID.new("ede80b5c-bad6-4623-b537-65586c9f8dfd")
  CLSID_IVMRAspectRatioControl = "ede80b5c-bad6-4623-b537-65586c9f8dfd"
  struct IVMRAspectRatioControl
    lpVtbl : IVMRAspectRatioControlVTbl*
  end

  struct IVMRDeinterlaceControlVTbl
    query_interface : Proc(IVMRDeinterlaceControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRDeinterlaceControl*, UInt32)
    release : Proc(IVMRDeinterlaceControl*, UInt32)
    get_number_of_deinterlace_modes : Proc(IVMRDeinterlaceControl*, VMRVideoDesc*, UInt32*, Guid*, HRESULT)
    get_deinterlace_mode_caps : Proc(IVMRDeinterlaceControl*, Guid*, VMRVideoDesc*, VMRDeinterlaceCaps*, HRESULT)
    get_deinterlace_mode : Proc(IVMRDeinterlaceControl*, UInt32, Guid*, HRESULT)
    set_deinterlace_mode : Proc(IVMRDeinterlaceControl*, UInt32, Guid*, HRESULT)
    get_deinterlace_prefs : Proc(IVMRDeinterlaceControl*, UInt32*, HRESULT)
    set_deinterlace_prefs : Proc(IVMRDeinterlaceControl*, UInt32, HRESULT)
    get_actual_deinterlace_mode : Proc(IVMRDeinterlaceControl*, UInt32, Guid*, HRESULT)
  end

  IVMRDeinterlaceControl_GUID = LibC::GUID.new("bb057577-0db8-4e6a-87a7-1a8c9a505a0f")
  CLSID_IVMRDeinterlaceControl = "bb057577-0db8-4e6a-87a7-1a8c9a505a0f"
  struct IVMRDeinterlaceControl
    lpVtbl : IVMRDeinterlaceControlVTbl*
  end

  struct IVMRMixerBitmapVTbl
    query_interface : Proc(IVMRMixerBitmap*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRMixerBitmap*, UInt32)
    release : Proc(IVMRMixerBitmap*, UInt32)
    set_alpha_bitmap : Proc(IVMRMixerBitmap*, VMRALPHABITMAP*, HRESULT)
    update_alpha_bitmap_parameters : Proc(IVMRMixerBitmap*, VMRALPHABITMAP*, HRESULT)
    get_alpha_bitmap_parameters : Proc(IVMRMixerBitmap*, VMRALPHABITMAP*, HRESULT)
  end

  IVMRMixerBitmap_GUID = LibC::GUID.new("1e673275-0257-40aa-af20-7c608d4a0428")
  CLSID_IVMRMixerBitmap = "1e673275-0257-40aa-af20-7c608d4a0428"
  struct IVMRMixerBitmap
    lpVtbl : IVMRMixerBitmapVTbl*
  end

  struct IVMRImageCompositorVTbl
    query_interface : Proc(IVMRImageCompositor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRImageCompositor*, UInt32)
    release : Proc(IVMRImageCompositor*, UInt32)
    init_composition_target : Proc(IVMRImageCompositor*, IUnknown, IDirectDrawSurface7, HRESULT)
    term_composition_target : Proc(IVMRImageCompositor*, IUnknown, IDirectDrawSurface7, HRESULT)
    set_stream_media_type : Proc(IVMRImageCompositor*, UInt32, AM_MEDIA_TYPE*, LibC::BOOL, HRESULT)
    composite_image : Proc(IVMRImageCompositor*, IUnknown, IDirectDrawSurface7, AM_MEDIA_TYPE*, Int64, Int64, UInt32, VMRVIDEOSTREAMINFO*, UInt32, HRESULT)
  end

  IVMRImageCompositor_GUID = LibC::GUID.new("7a4fb5af-479f-4074-bb40-ce6722e43c82")
  CLSID_IVMRImageCompositor = "7a4fb5af-479f-4074-bb40-ce6722e43c82"
  struct IVMRImageCompositor
    lpVtbl : IVMRImageCompositorVTbl*
  end

  struct IVMRVideoStreamControlVTbl
    query_interface : Proc(IVMRVideoStreamControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRVideoStreamControl*, UInt32)
    release : Proc(IVMRVideoStreamControl*, UInt32)
    set_color_key : Proc(IVMRVideoStreamControl*, DDCOLORKEY*, HRESULT)
    get_color_key : Proc(IVMRVideoStreamControl*, DDCOLORKEY*, HRESULT)
    set_stream_active_state : Proc(IVMRVideoStreamControl*, LibC::BOOL, HRESULT)
    get_stream_active_state : Proc(IVMRVideoStreamControl*, LibC::BOOL*, HRESULT)
  end

  IVMRVideoStreamControl_GUID = LibC::GUID.new("058d1f11-2a54-4bef-bd54-df706626b727")
  CLSID_IVMRVideoStreamControl = "058d1f11-2a54-4bef-bd54-df706626b727"
  struct IVMRVideoStreamControl
    lpVtbl : IVMRVideoStreamControlVTbl*
  end

  struct IVMRSurfaceVTbl
    query_interface : Proc(IVMRSurface*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRSurface*, UInt32)
    release : Proc(IVMRSurface*, UInt32)
    is_surface_locked : Proc(IVMRSurface*, HRESULT)
    lock_surface : Proc(IVMRSurface*, UInt8**, HRESULT)
    unlock_surface : Proc(IVMRSurface*, HRESULT)
    get_surface : Proc(IVMRSurface*, IDirectDrawSurface7*, HRESULT)
  end

  IVMRSurface_GUID = LibC::GUID.new("a9849bbe-9ec8-4263-b764-62730f0d15d0")
  CLSID_IVMRSurface = "a9849bbe-9ec8-4263-b764-62730f0d15d0"
  struct IVMRSurface
    lpVtbl : IVMRSurfaceVTbl*
  end

  struct IVMRImagePresenterConfigVTbl
    query_interface : Proc(IVMRImagePresenterConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRImagePresenterConfig*, UInt32)
    release : Proc(IVMRImagePresenterConfig*, UInt32)
    set_rendering_prefs : Proc(IVMRImagePresenterConfig*, UInt32, HRESULT)
    get_rendering_prefs : Proc(IVMRImagePresenterConfig*, UInt32*, HRESULT)
  end

  IVMRImagePresenterConfig_GUID = LibC::GUID.new("9f3a1c85-8555-49ba-935f-be5b5b29d178")
  CLSID_IVMRImagePresenterConfig = "9f3a1c85-8555-49ba-935f-be5b5b29d178"
  struct IVMRImagePresenterConfig
    lpVtbl : IVMRImagePresenterConfigVTbl*
  end

  struct IVMRImagePresenterExclModeConfigVTbl
    query_interface : Proc(IVMRImagePresenterExclModeConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRImagePresenterExclModeConfig*, UInt32)
    release : Proc(IVMRImagePresenterExclModeConfig*, UInt32)
    set_rendering_prefs : Proc(IVMRImagePresenterExclModeConfig*, UInt32, HRESULT)
    get_rendering_prefs : Proc(IVMRImagePresenterExclModeConfig*, UInt32*, HRESULT)
    set_xlc_mode_dd_obj_and_primary_surface : Proc(IVMRImagePresenterExclModeConfig*, IDirectDraw7, IDirectDrawSurface7, HRESULT)
    get_xlc_mode_dd_obj_and_primary_surface : Proc(IVMRImagePresenterExclModeConfig*, IDirectDraw7*, IDirectDrawSurface7*, HRESULT)
  end

  IVMRImagePresenterExclModeConfig_GUID = LibC::GUID.new("e6f7ce40-4673-44f1-8f77-5499d68cb4ea")
  CLSID_IVMRImagePresenterExclModeConfig = "e6f7ce40-4673-44f1-8f77-5499d68cb4ea"
  struct IVMRImagePresenterExclModeConfig
    lpVtbl : IVMRImagePresenterExclModeConfigVTbl*
  end

  struct IVPManagerVTbl
    query_interface : Proc(IVPManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPManager*, UInt32)
    release : Proc(IVPManager*, UInt32)
    set_video_port_index : Proc(IVPManager*, UInt32, HRESULT)
    get_video_port_index : Proc(IVPManager*, UInt32*, HRESULT)
  end

  IVPManager_GUID = LibC::GUID.new("aac18c18-e186-46d2-825d-a1f8dc8e395a")
  CLSID_IVPManager = "aac18c18-e186-46d2-825d-a1f8dc8e395a"
  struct IVPManager
    lpVtbl : IVPManagerVTbl*
  end

  struct IDvdControlVTbl
    query_interface : Proc(IDvdControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvdControl*, UInt32)
    release : Proc(IDvdControl*, UInt32)
    title_play : Proc(IDvdControl*, UInt32, HRESULT)
    chapter_play : Proc(IDvdControl*, UInt32, UInt32, HRESULT)
    time_play : Proc(IDvdControl*, UInt32, UInt32, HRESULT)
    stop_for_resume : Proc(IDvdControl*, HRESULT)
    go_up : Proc(IDvdControl*, HRESULT)
    time_search : Proc(IDvdControl*, UInt32, HRESULT)
    chapter_search : Proc(IDvdControl*, UInt32, HRESULT)
    prev_pg_search : Proc(IDvdControl*, HRESULT)
    top_pg_search : Proc(IDvdControl*, HRESULT)
    next_pg_search : Proc(IDvdControl*, HRESULT)
    forward_scan : Proc(IDvdControl*, Float64, HRESULT)
    backward_scan : Proc(IDvdControl*, Float64, HRESULT)
    menu_call : Proc(IDvdControl*, DVD_MENU_ID, HRESULT)
    resume : Proc(IDvdControl*, HRESULT)
    upper_button_select : Proc(IDvdControl*, HRESULT)
    lower_button_select : Proc(IDvdControl*, HRESULT)
    left_button_select : Proc(IDvdControl*, HRESULT)
    right_button_select : Proc(IDvdControl*, HRESULT)
    button_activate : Proc(IDvdControl*, HRESULT)
    button_select_and_activate : Proc(IDvdControl*, UInt32, HRESULT)
    still_off : Proc(IDvdControl*, HRESULT)
    pause_on : Proc(IDvdControl*, HRESULT)
    pause_off : Proc(IDvdControl*, HRESULT)
    menu_language_select : Proc(IDvdControl*, UInt32, HRESULT)
    audio_stream_change : Proc(IDvdControl*, UInt32, HRESULT)
    subpicture_stream_change : Proc(IDvdControl*, UInt32, LibC::BOOL, HRESULT)
    angle_change : Proc(IDvdControl*, UInt32, HRESULT)
    parental_level_select : Proc(IDvdControl*, UInt32, HRESULT)
    parental_country_select : Proc(IDvdControl*, UInt16, HRESULT)
    karaoke_audio_presentation_mode_change : Proc(IDvdControl*, UInt32, HRESULT)
    video_mode_preferrence : Proc(IDvdControl*, UInt32, HRESULT)
    set_root : Proc(IDvdControl*, LibC::LPWSTR, HRESULT)
    mouse_activate : Proc(IDvdControl*, POINT, HRESULT)
    mouse_select : Proc(IDvdControl*, POINT, HRESULT)
    chapter_play_auto_stop : Proc(IDvdControl*, UInt32, UInt32, UInt32, HRESULT)
  end

  IDvdControl_GUID = LibC::GUID.new("a70efe61-e2a3-11d0-a9be-00aa0061be93")
  CLSID_IDvdControl = "a70efe61-e2a3-11d0-a9be-00aa0061be93"
  struct IDvdControl
    lpVtbl : IDvdControlVTbl*
  end

  struct IDvdInfoVTbl
    query_interface : Proc(IDvdInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvdInfo*, UInt32)
    release : Proc(IDvdInfo*, UInt32)
    get_current_domain : Proc(IDvdInfo*, DVD_DOMAIN*, HRESULT)
    get_current_location : Proc(IDvdInfo*, DVD_PLAYBACK_LOCATION*, HRESULT)
    get_total_title_time : Proc(IDvdInfo*, UInt32*, HRESULT)
    get_current_button : Proc(IDvdInfo*, UInt32*, UInt32*, HRESULT)
    get_current_angle : Proc(IDvdInfo*, UInt32*, UInt32*, HRESULT)
    get_current_audio : Proc(IDvdInfo*, UInt32*, UInt32*, HRESULT)
    get_current_subpicture : Proc(IDvdInfo*, UInt32*, UInt32*, LibC::BOOL*, HRESULT)
    get_current_uops : Proc(IDvdInfo*, UInt32*, HRESULT)
    get_all_spr_ms : Proc(IDvdInfo*, UInt16**, HRESULT)
    get_all_gpr_ms : Proc(IDvdInfo*, UInt16**, HRESULT)
    get_audio_language : Proc(IDvdInfo*, UInt32, UInt32*, HRESULT)
    get_subpicture_language : Proc(IDvdInfo*, UInt32, UInt32*, HRESULT)
    get_title_attributes : Proc(IDvdInfo*, UInt32, DVD_ATR*, HRESULT)
    get_vmg_attributes : Proc(IDvdInfo*, DVD_ATR*, HRESULT)
    get_current_video_attributes : Proc(IDvdInfo*, UInt8**, HRESULT)
    get_current_audio_attributes : Proc(IDvdInfo*, UInt8**, HRESULT)
    get_current_subpicture_attributes : Proc(IDvdInfo*, UInt8**, HRESULT)
    get_current_volume_info : Proc(IDvdInfo*, UInt32*, UInt32*, DVD_DISC_SIDE*, UInt32*, HRESULT)
    get_dvd_text_info : Proc(IDvdInfo*, UInt8*, UInt32, UInt32*, HRESULT)
    get_player_parental_level : Proc(IDvdInfo*, UInt32*, UInt32*, HRESULT)
    get_number_of_chapters : Proc(IDvdInfo*, UInt32, UInt32*, HRESULT)
    get_title_parental_levels : Proc(IDvdInfo*, UInt32, UInt32*, HRESULT)
    get_root : Proc(IDvdInfo*, UInt8*, UInt32, UInt32*, HRESULT)
  end

  IDvdInfo_GUID = LibC::GUID.new("a70efe60-e2a3-11d0-a9be-00aa0061be93")
  CLSID_IDvdInfo = "a70efe60-e2a3-11d0-a9be-00aa0061be93"
  struct IDvdInfo
    lpVtbl : IDvdInfoVTbl*
  end

  struct IDvdCmdVTbl
    query_interface : Proc(IDvdCmd*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvdCmd*, UInt32)
    release : Proc(IDvdCmd*, UInt32)
    wait_for_start : Proc(IDvdCmd*, HRESULT)
    wait_for_end : Proc(IDvdCmd*, HRESULT)
  end

  IDvdCmd_GUID = LibC::GUID.new("5a4a97e4-94ee-4a55-9751-74b5643aa27d")
  CLSID_IDvdCmd = "5a4a97e4-94ee-4a55-9751-74b5643aa27d"
  struct IDvdCmd
    lpVtbl : IDvdCmdVTbl*
  end

  struct IDvdStateVTbl
    query_interface : Proc(IDvdState*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvdState*, UInt32)
    release : Proc(IDvdState*, UInt32)
    get_disc_id : Proc(IDvdState*, UInt64*, HRESULT)
    get_parental_level : Proc(IDvdState*, UInt32*, HRESULT)
  end

  IDvdState_GUID = LibC::GUID.new("86303d6d-1c4a-4087-ab42-f711167048ef")
  CLSID_IDvdState = "86303d6d-1c4a-4087-ab42-f711167048ef"
  struct IDvdState
    lpVtbl : IDvdStateVTbl*
  end

  struct IDvdControl2VTbl
    query_interface : Proc(IDvdControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvdControl2*, UInt32)
    release : Proc(IDvdControl2*, UInt32)
    play_title : Proc(IDvdControl2*, UInt32, UInt32, IDvdCmd*, HRESULT)
    play_chapter_in_title : Proc(IDvdControl2*, UInt32, UInt32, UInt32, IDvdCmd*, HRESULT)
    play_at_time_in_title : Proc(IDvdControl2*, UInt32, DVD_HMSF_TIMECODE*, UInt32, IDvdCmd*, HRESULT)
    stop : Proc(IDvdControl2*, HRESULT)
    return_from_submenu : Proc(IDvdControl2*, UInt32, IDvdCmd*, HRESULT)
    play_at_time : Proc(IDvdControl2*, DVD_HMSF_TIMECODE*, UInt32, IDvdCmd*, HRESULT)
    play_chapter : Proc(IDvdControl2*, UInt32, UInt32, IDvdCmd*, HRESULT)
    play_prev_chapter : Proc(IDvdControl2*, UInt32, IDvdCmd*, HRESULT)
    replay_chapter : Proc(IDvdControl2*, UInt32, IDvdCmd*, HRESULT)
    play_next_chapter : Proc(IDvdControl2*, UInt32, IDvdCmd*, HRESULT)
    play_forwards : Proc(IDvdControl2*, Float64, UInt32, IDvdCmd*, HRESULT)
    play_backwards : Proc(IDvdControl2*, Float64, UInt32, IDvdCmd*, HRESULT)
    show_menu : Proc(IDvdControl2*, DVD_MENU_ID, UInt32, IDvdCmd*, HRESULT)
    resume : Proc(IDvdControl2*, UInt32, IDvdCmd*, HRESULT)
    select_relative_button : Proc(IDvdControl2*, DVD_RELATIVE_BUTTON, HRESULT)
    activate_button : Proc(IDvdControl2*, HRESULT)
    select_button : Proc(IDvdControl2*, UInt32, HRESULT)
    select_and_activate_button : Proc(IDvdControl2*, UInt32, HRESULT)
    still_off : Proc(IDvdControl2*, HRESULT)
    pause : Proc(IDvdControl2*, LibC::BOOL, HRESULT)
    select_audio_stream : Proc(IDvdControl2*, UInt32, UInt32, IDvdCmd*, HRESULT)
    select_subpicture_stream : Proc(IDvdControl2*, UInt32, UInt32, IDvdCmd*, HRESULT)
    set_subpicture_state : Proc(IDvdControl2*, LibC::BOOL, UInt32, IDvdCmd*, HRESULT)
    select_angle : Proc(IDvdControl2*, UInt32, UInt32, IDvdCmd*, HRESULT)
    select_parental_level : Proc(IDvdControl2*, UInt32, HRESULT)
    select_parental_country : Proc(IDvdControl2*, UInt8*, HRESULT)
    select_karaoke_audio_presentation_mode : Proc(IDvdControl2*, UInt32, HRESULT)
    select_video_mode_preference : Proc(IDvdControl2*, UInt32, HRESULT)
    set_dvd_directory : Proc(IDvdControl2*, LibC::LPWSTR, HRESULT)
    activate_at_position : Proc(IDvdControl2*, POINT, HRESULT)
    select_at_position : Proc(IDvdControl2*, POINT, HRESULT)
    play_chapters_auto_stop : Proc(IDvdControl2*, UInt32, UInt32, UInt32, UInt32, IDvdCmd*, HRESULT)
    accept_parental_level_change : Proc(IDvdControl2*, LibC::BOOL, HRESULT)
    set_option : Proc(IDvdControl2*, DVD_OPTION_FLAG, LibC::BOOL, HRESULT)
    set_state : Proc(IDvdControl2*, IDvdState, UInt32, IDvdCmd*, HRESULT)
    play_period_in_title_auto_stop : Proc(IDvdControl2*, UInt32, DVD_HMSF_TIMECODE*, DVD_HMSF_TIMECODE*, UInt32, IDvdCmd*, HRESULT)
    set_gprm : Proc(IDvdControl2*, UInt32, UInt16, UInt32, IDvdCmd*, HRESULT)
    select_default_menu_language : Proc(IDvdControl2*, UInt32, HRESULT)
    select_default_audio_language : Proc(IDvdControl2*, UInt32, DVD_AUDIO_LANG_EXT, HRESULT)
    select_default_subpicture_language : Proc(IDvdControl2*, UInt32, DVD_SUBPICTURE_LANG_EXT, HRESULT)
  end

  IDvdControl2_GUID = LibC::GUID.new("33bc7430-eec0-11d2-8201-00a0c9d74842")
  CLSID_IDvdControl2 = "33bc7430-eec0-11d2-8201-00a0c9d74842"
  struct IDvdControl2
    lpVtbl : IDvdControl2VTbl*
  end

  struct IDvdInfo2VTbl
    query_interface : Proc(IDvdInfo2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvdInfo2*, UInt32)
    release : Proc(IDvdInfo2*, UInt32)
    get_current_domain : Proc(IDvdInfo2*, DVD_DOMAIN*, HRESULT)
    get_current_location : Proc(IDvdInfo2*, DVD_PLAYBACK_LOCATION2*, HRESULT)
    get_total_title_time : Proc(IDvdInfo2*, DVD_HMSF_TIMECODE*, UInt32*, HRESULT)
    get_current_button : Proc(IDvdInfo2*, UInt32*, UInt32*, HRESULT)
    get_current_angle : Proc(IDvdInfo2*, UInt32*, UInt32*, HRESULT)
    get_current_audio : Proc(IDvdInfo2*, UInt32*, UInt32*, HRESULT)
    get_current_subpicture : Proc(IDvdInfo2*, UInt32*, UInt32*, LibC::BOOL*, HRESULT)
    get_current_uops : Proc(IDvdInfo2*, UInt32*, HRESULT)
    get_all_spr_ms : Proc(IDvdInfo2*, UInt16**, HRESULT)
    get_all_gpr_ms : Proc(IDvdInfo2*, UInt16**, HRESULT)
    get_audio_language : Proc(IDvdInfo2*, UInt32, UInt32*, HRESULT)
    get_subpicture_language : Proc(IDvdInfo2*, UInt32, UInt32*, HRESULT)
    get_title_attributes : Proc(IDvdInfo2*, UInt32, DVD_MenuAttributes*, DVD_TitleAttributes*, HRESULT)
    get_vmg_attributes : Proc(IDvdInfo2*, DVD_MenuAttributes*, HRESULT)
    get_current_video_attributes : Proc(IDvdInfo2*, DVD_VideoAttributes*, HRESULT)
    get_audio_attributes : Proc(IDvdInfo2*, UInt32, DVD_AudioAttributes*, HRESULT)
    get_karaoke_attributes : Proc(IDvdInfo2*, UInt32, DVD_KaraokeAttributes*, HRESULT)
    get_subpicture_attributes : Proc(IDvdInfo2*, UInt32, DVD_SubpictureAttributes*, HRESULT)
    get_dvd_volume_info : Proc(IDvdInfo2*, UInt32*, UInt32*, DVD_DISC_SIDE*, UInt32*, HRESULT)
    get_dvd_text_number_of_languages : Proc(IDvdInfo2*, UInt32*, HRESULT)
    get_dvd_text_language_info : Proc(IDvdInfo2*, UInt32, UInt32*, UInt32*, DVD_TextCharSet*, HRESULT)
    get_dvd_text_string_as_native : Proc(IDvdInfo2*, UInt32, UInt32, UInt8*, UInt32, UInt32*, DVD_TextStringType*, HRESULT)
    get_dvd_text_string_as_unicode : Proc(IDvdInfo2*, UInt32, UInt32, LibC::LPWSTR, UInt32, UInt32*, DVD_TextStringType*, HRESULT)
    get_player_parental_level : Proc(IDvdInfo2*, UInt32*, UInt8*, HRESULT)
    get_number_of_chapters : Proc(IDvdInfo2*, UInt32, UInt32*, HRESULT)
    get_title_parental_levels : Proc(IDvdInfo2*, UInt32, UInt32*, HRESULT)
    get_dvd_directory : Proc(IDvdInfo2*, Char*, UInt32, UInt32*, HRESULT)
    is_audio_stream_enabled : Proc(IDvdInfo2*, UInt32, LibC::BOOL*, HRESULT)
    get_disc_id : Proc(IDvdInfo2*, LibC::LPWSTR, UInt64*, HRESULT)
    get_state : Proc(IDvdInfo2*, IDvdState*, HRESULT)
    get_menu_languages : Proc(IDvdInfo2*, UInt32*, UInt32, UInt32*, HRESULT)
    get_button_at_position : Proc(IDvdInfo2*, POINT, UInt32*, HRESULT)
    get_cmd_from_event : Proc(IDvdInfo2*, LibC::IntPtrT, IDvdCmd*, HRESULT)
    get_default_menu_language : Proc(IDvdInfo2*, UInt32*, HRESULT)
    get_default_audio_language : Proc(IDvdInfo2*, UInt32*, DVD_AUDIO_LANG_EXT*, HRESULT)
    get_default_subpicture_language : Proc(IDvdInfo2*, UInt32*, DVD_SUBPICTURE_LANG_EXT*, HRESULT)
    get_decoder_caps : Proc(IDvdInfo2*, DVD_DECODER_CAPS*, HRESULT)
    get_button_rect : Proc(IDvdInfo2*, UInt32, RECT*, HRESULT)
    is_subpicture_stream_enabled : Proc(IDvdInfo2*, UInt32, LibC::BOOL*, HRESULT)
  end

  IDvdInfo2_GUID = LibC::GUID.new("34151510-eec0-11d2-8201-00a0c9d74842")
  CLSID_IDvdInfo2 = "34151510-eec0-11d2-8201-00a0c9d74842"
  struct IDvdInfo2
    lpVtbl : IDvdInfo2VTbl*
  end

  struct IDvdGraphBuilderVTbl
    query_interface : Proc(IDvdGraphBuilder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvdGraphBuilder*, UInt32)
    release : Proc(IDvdGraphBuilder*, UInt32)
    get_filtergraph : Proc(IDvdGraphBuilder*, IGraphBuilder*, HRESULT)
    get_dvd_interface : Proc(IDvdGraphBuilder*, Guid*, Void**, HRESULT)
    render_dvd_video_volume : Proc(IDvdGraphBuilder*, LibC::LPWSTR, UInt32, AM_DVD_RENDERSTATUS*, HRESULT)
  end

  IDvdGraphBuilder_GUID = LibC::GUID.new("fcc152b6-f372-11d0-8e00-00c04fd7c08b")
  CLSID_IDvdGraphBuilder = "fcc152b6-f372-11d0-8e00-00c04fd7c08b"
  struct IDvdGraphBuilder
    lpVtbl : IDvdGraphBuilderVTbl*
  end

  struct IDDrawExclModeVideoVTbl
    query_interface : Proc(IDDrawExclModeVideo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDDrawExclModeVideo*, UInt32)
    release : Proc(IDDrawExclModeVideo*, UInt32)
    set_d_draw_object : Proc(IDDrawExclModeVideo*, IDirectDraw, HRESULT)
    get_d_draw_object : Proc(IDDrawExclModeVideo*, IDirectDraw*, LibC::BOOL*, HRESULT)
    set_d_draw_surface : Proc(IDDrawExclModeVideo*, IDirectDrawSurface, HRESULT)
    get_d_draw_surface : Proc(IDDrawExclModeVideo*, IDirectDrawSurface*, LibC::BOOL*, HRESULT)
    set_draw_parameters : Proc(IDDrawExclModeVideo*, RECT*, RECT*, HRESULT)
    get_native_video_props : Proc(IDDrawExclModeVideo*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    set_callback_interface : Proc(IDDrawExclModeVideo*, IDDrawExclModeVideoCallback, UInt32, HRESULT)
  end

  IDDrawExclModeVideo_GUID = LibC::GUID.new("153acc21-d83b-11d1-82bf-00a0c9696c8f")
  CLSID_IDDrawExclModeVideo = "153acc21-d83b-11d1-82bf-00a0c9696c8f"
  struct IDDrawExclModeVideo
    lpVtbl : IDDrawExclModeVideoVTbl*
  end

  struct IDDrawExclModeVideoCallbackVTbl
    query_interface : Proc(IDDrawExclModeVideoCallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDDrawExclModeVideoCallback*, UInt32)
    release : Proc(IDDrawExclModeVideoCallback*, UInt32)
    on_update_overlay : Proc(IDDrawExclModeVideoCallback*, LibC::BOOL, UInt32, LibC::BOOL, RECT*, RECT*, LibC::BOOL, RECT*, RECT*, HRESULT)
    on_update_color_key : Proc(IDDrawExclModeVideoCallback*, COLORKEY*, UInt32, HRESULT)
    on_update_size : Proc(IDDrawExclModeVideoCallback*, UInt32, UInt32, UInt32, UInt32, HRESULT)
  end

  IDDrawExclModeVideoCallback_GUID = LibC::GUID.new("913c24a0-20ab-11d2-9038-00a0c9697298")
  CLSID_IDDrawExclModeVideoCallback = "913c24a0-20ab-11d2-9038-00a0c9697298"
  struct IDDrawExclModeVideoCallback
    lpVtbl : IDDrawExclModeVideoCallbackVTbl*
  end

  struct IBDA_NetworkProviderVTbl
    query_interface : Proc(IBDA_NetworkProvider*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_NetworkProvider*, UInt32)
    release : Proc(IBDA_NetworkProvider*, UInt32)
    put_signal_source : Proc(IBDA_NetworkProvider*, UInt32, HRESULT)
    get_signal_source : Proc(IBDA_NetworkProvider*, UInt32*, HRESULT)
    get_network_type : Proc(IBDA_NetworkProvider*, Guid*, HRESULT)
    put_tuning_space : Proc(IBDA_NetworkProvider*, Guid*, HRESULT)
    get_tuning_space : Proc(IBDA_NetworkProvider*, Guid*, HRESULT)
    register_device_filter : Proc(IBDA_NetworkProvider*, IUnknown, UInt32*, HRESULT)
    un_register_device_filter : Proc(IBDA_NetworkProvider*, UInt32, HRESULT)
  end

  IBDA_NetworkProvider_GUID = LibC::GUID.new("fd501041-8ebe-11ce-8183-00aa00577da2")
  CLSID_IBDA_NetworkProvider = "fd501041-8ebe-11ce-8183-00aa00577da2"
  struct IBDA_NetworkProvider
    lpVtbl : IBDA_NetworkProviderVTbl*
  end

  struct IBDA_EthernetFilterVTbl
    query_interface : Proc(IBDA_EthernetFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_EthernetFilter*, UInt32)
    release : Proc(IBDA_EthernetFilter*, UInt32)
    get_multicast_list_size : Proc(IBDA_EthernetFilter*, UInt32*, HRESULT)
    put_multicast_list : Proc(IBDA_EthernetFilter*, UInt32, UInt8*, HRESULT)
    get_multicast_list : Proc(IBDA_EthernetFilter*, UInt32*, UInt8*, HRESULT)
    put_multicast_mode : Proc(IBDA_EthernetFilter*, UInt32, HRESULT)
    get_multicast_mode : Proc(IBDA_EthernetFilter*, UInt32*, HRESULT)
  end

  IBDA_EthernetFilter_GUID = LibC::GUID.new("71985f43-1ca1-11d3-9cc8-00c04f7971e0")
  CLSID_IBDA_EthernetFilter = "71985f43-1ca1-11d3-9cc8-00c04f7971e0"
  struct IBDA_EthernetFilter
    lpVtbl : IBDA_EthernetFilterVTbl*
  end

  struct IBDA_IPV4FilterVTbl
    query_interface : Proc(IBDA_IPV4Filter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_IPV4Filter*, UInt32)
    release : Proc(IBDA_IPV4Filter*, UInt32)
    get_multicast_list_size : Proc(IBDA_IPV4Filter*, UInt32*, HRESULT)
    put_multicast_list : Proc(IBDA_IPV4Filter*, UInt32, UInt8*, HRESULT)
    get_multicast_list : Proc(IBDA_IPV4Filter*, UInt32*, UInt8*, HRESULT)
    put_multicast_mode : Proc(IBDA_IPV4Filter*, UInt32, HRESULT)
    get_multicast_mode : Proc(IBDA_IPV4Filter*, UInt32*, HRESULT)
  end

  IBDA_IPV4Filter_GUID = LibC::GUID.new("71985f44-1ca1-11d3-9cc8-00c04f7971e0")
  CLSID_IBDA_IPV4Filter = "71985f44-1ca1-11d3-9cc8-00c04f7971e0"
  struct IBDA_IPV4Filter
    lpVtbl : IBDA_IPV4FilterVTbl*
  end

  struct IBDA_IPV6FilterVTbl
    query_interface : Proc(IBDA_IPV6Filter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_IPV6Filter*, UInt32)
    release : Proc(IBDA_IPV6Filter*, UInt32)
    get_multicast_list_size : Proc(IBDA_IPV6Filter*, UInt32*, HRESULT)
    put_multicast_list : Proc(IBDA_IPV6Filter*, UInt32, UInt8*, HRESULT)
    get_multicast_list : Proc(IBDA_IPV6Filter*, UInt32*, UInt8*, HRESULT)
    put_multicast_mode : Proc(IBDA_IPV6Filter*, UInt32, HRESULT)
    get_multicast_mode : Proc(IBDA_IPV6Filter*, UInt32*, HRESULT)
  end

  IBDA_IPV6Filter_GUID = LibC::GUID.new("e1785a74-2a23-4fb3-9245-a8f88017ef33")
  CLSID_IBDA_IPV6Filter = "e1785a74-2a23-4fb3-9245-a8f88017ef33"
  struct IBDA_IPV6Filter
    lpVtbl : IBDA_IPV6FilterVTbl*
  end

  struct IBDA_DeviceControlVTbl
    query_interface : Proc(IBDA_DeviceControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DeviceControl*, UInt32)
    release : Proc(IBDA_DeviceControl*, UInt32)
    start_changes : Proc(IBDA_DeviceControl*, HRESULT)
    check_changes : Proc(IBDA_DeviceControl*, HRESULT)
    commit_changes : Proc(IBDA_DeviceControl*, HRESULT)
    get_change_state : Proc(IBDA_DeviceControl*, UInt32*, HRESULT)
  end

  IBDA_DeviceControl_GUID = LibC::GUID.new("fd0a5af3-b41d-11d2-9c95-00c04f7971e0")
  CLSID_IBDA_DeviceControl = "fd0a5af3-b41d-11d2-9c95-00c04f7971e0"
  struct IBDA_DeviceControl
    lpVtbl : IBDA_DeviceControlVTbl*
  end

  struct IBDA_PinControlVTbl
    query_interface : Proc(IBDA_PinControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_PinControl*, UInt32)
    release : Proc(IBDA_PinControl*, UInt32)
    get_pin_id : Proc(IBDA_PinControl*, UInt32*, HRESULT)
    get_pin_type : Proc(IBDA_PinControl*, UInt32*, HRESULT)
    registration_context : Proc(IBDA_PinControl*, UInt32*, HRESULT)
  end

  IBDA_PinControl_GUID = LibC::GUID.new("0ded49d5-a8b7-4d5d-97a1-12b0c195874d")
  CLSID_IBDA_PinControl = "0ded49d5-a8b7-4d5d-97a1-12b0c195874d"
  struct IBDA_PinControl
    lpVtbl : IBDA_PinControlVTbl*
  end

  struct IBDA_SignalPropertiesVTbl
    query_interface : Proc(IBDA_SignalProperties*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_SignalProperties*, UInt32)
    release : Proc(IBDA_SignalProperties*, UInt32)
    put_network_type : Proc(IBDA_SignalProperties*, Guid*, HRESULT)
    get_network_type : Proc(IBDA_SignalProperties*, Guid*, HRESULT)
    put_signal_source : Proc(IBDA_SignalProperties*, UInt32, HRESULT)
    get_signal_source : Proc(IBDA_SignalProperties*, UInt32*, HRESULT)
    put_tuning_space : Proc(IBDA_SignalProperties*, Guid*, HRESULT)
    get_tuning_space : Proc(IBDA_SignalProperties*, Guid*, HRESULT)
  end

  IBDA_SignalProperties_GUID = LibC::GUID.new("d2f1644b-b409-11d2-bc69-00a0c9ee9e16")
  CLSID_IBDA_SignalProperties = "d2f1644b-b409-11d2-bc69-00a0c9ee9e16"
  struct IBDA_SignalProperties
    lpVtbl : IBDA_SignalPropertiesVTbl*
  end

  struct IBDA_SignalStatisticsVTbl
    query_interface : Proc(IBDA_SignalStatistics*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_SignalStatistics*, UInt32)
    release : Proc(IBDA_SignalStatistics*, UInt32)
    put_signal_strength : Proc(IBDA_SignalStatistics*, Int32, HRESULT)
    get_signal_strength : Proc(IBDA_SignalStatistics*, Int32*, HRESULT)
    put_signal_quality : Proc(IBDA_SignalStatistics*, Int32, HRESULT)
    get_signal_quality : Proc(IBDA_SignalStatistics*, Int32*, HRESULT)
    put_signal_present : Proc(IBDA_SignalStatistics*, BOOLEAN, HRESULT)
    get_signal_present : Proc(IBDA_SignalStatistics*, UInt8*, HRESULT)
    put_signal_locked : Proc(IBDA_SignalStatistics*, BOOLEAN, HRESULT)
    get_signal_locked : Proc(IBDA_SignalStatistics*, UInt8*, HRESULT)
    put_sample_time : Proc(IBDA_SignalStatistics*, Int32, HRESULT)
    get_sample_time : Proc(IBDA_SignalStatistics*, Int32*, HRESULT)
  end

  IBDA_SignalStatistics_GUID = LibC::GUID.new("1347d106-cf3a-428a-a5cb-ac0d9a2a4338")
  CLSID_IBDA_SignalStatistics = "1347d106-cf3a-428a-a5cb-ac0d9a2a4338"
  struct IBDA_SignalStatistics
    lpVtbl : IBDA_SignalStatisticsVTbl*
  end

  struct IBDA_TopologyVTbl
    query_interface : Proc(IBDA_Topology*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_Topology*, UInt32)
    release : Proc(IBDA_Topology*, UInt32)
    get_node_types : Proc(IBDA_Topology*, UInt32*, UInt32, UInt32*, HRESULT)
    get_node_descriptors : Proc(IBDA_Topology*, UInt32*, UInt32, BDANODE_DESCRIPTOR*, HRESULT)
    get_node_interfaces : Proc(IBDA_Topology*, UInt32, UInt32*, UInt32, Guid*, HRESULT)
    get_pin_types : Proc(IBDA_Topology*, UInt32*, UInt32, UInt32*, HRESULT)
    get_template_connections : Proc(IBDA_Topology*, UInt32*, UInt32, BDA_TEMPLATE_CONNECTION*, HRESULT)
    create_pin : Proc(IBDA_Topology*, UInt32, UInt32*, HRESULT)
    delete_pin : Proc(IBDA_Topology*, UInt32, HRESULT)
    set_media_type : Proc(IBDA_Topology*, UInt32, AM_MEDIA_TYPE*, HRESULT)
    set_medium : Proc(IBDA_Topology*, UInt32, REGPINMEDIUM*, HRESULT)
    create_topology : Proc(IBDA_Topology*, UInt32, UInt32, HRESULT)
    get_control_node : Proc(IBDA_Topology*, UInt32, UInt32, UInt32, IUnknown*, HRESULT)
  end

  IBDA_Topology_GUID = LibC::GUID.new("79b56888-7fea-4690-b45d-38fd3c7849be")
  CLSID_IBDA_Topology = "79b56888-7fea-4690-b45d-38fd3c7849be"
  struct IBDA_Topology
    lpVtbl : IBDA_TopologyVTbl*
  end

  struct IBDA_VoidTransformVTbl
    query_interface : Proc(IBDA_VoidTransform*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_VoidTransform*, UInt32)
    release : Proc(IBDA_VoidTransform*, UInt32)
    start : Proc(IBDA_VoidTransform*, HRESULT)
    stop : Proc(IBDA_VoidTransform*, HRESULT)
  end

  IBDA_VoidTransform_GUID = LibC::GUID.new("71985f46-1ca1-11d3-9cc8-00c04f7971e0")
  CLSID_IBDA_VoidTransform = "71985f46-1ca1-11d3-9cc8-00c04f7971e0"
  struct IBDA_VoidTransform
    lpVtbl : IBDA_VoidTransformVTbl*
  end

  struct IBDA_NullTransformVTbl
    query_interface : Proc(IBDA_NullTransform*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_NullTransform*, UInt32)
    release : Proc(IBDA_NullTransform*, UInt32)
    start : Proc(IBDA_NullTransform*, HRESULT)
    stop : Proc(IBDA_NullTransform*, HRESULT)
  end

  IBDA_NullTransform_GUID = LibC::GUID.new("ddf15b0d-bd25-11d2-9ca0-00c04f7971e0")
  CLSID_IBDA_NullTransform = "ddf15b0d-bd25-11d2-9ca0-00c04f7971e0"
  struct IBDA_NullTransform
    lpVtbl : IBDA_NullTransformVTbl*
  end

  struct IBDA_FrequencyFilterVTbl
    query_interface : Proc(IBDA_FrequencyFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_FrequencyFilter*, UInt32)
    release : Proc(IBDA_FrequencyFilter*, UInt32)
    put_autotune : Proc(IBDA_FrequencyFilter*, UInt32, HRESULT)
    get_autotune : Proc(IBDA_FrequencyFilter*, UInt32*, HRESULT)
    put_frequency : Proc(IBDA_FrequencyFilter*, UInt32, HRESULT)
    get_frequency : Proc(IBDA_FrequencyFilter*, UInt32*, HRESULT)
    put_polarity : Proc(IBDA_FrequencyFilter*, Polarisation, HRESULT)
    get_polarity : Proc(IBDA_FrequencyFilter*, Polarisation*, HRESULT)
    put_range : Proc(IBDA_FrequencyFilter*, UInt32, HRESULT)
    get_range : Proc(IBDA_FrequencyFilter*, UInt32*, HRESULT)
    put_bandwidth : Proc(IBDA_FrequencyFilter*, UInt32, HRESULT)
    get_bandwidth : Proc(IBDA_FrequencyFilter*, UInt32*, HRESULT)
    put_frequency_multiplier : Proc(IBDA_FrequencyFilter*, UInt32, HRESULT)
    get_frequency_multiplier : Proc(IBDA_FrequencyFilter*, UInt32*, HRESULT)
  end

  IBDA_FrequencyFilter_GUID = LibC::GUID.new("71985f47-1ca1-11d3-9cc8-00c04f7971e0")
  CLSID_IBDA_FrequencyFilter = "71985f47-1ca1-11d3-9cc8-00c04f7971e0"
  struct IBDA_FrequencyFilter
    lpVtbl : IBDA_FrequencyFilterVTbl*
  end

  struct IBDA_LNBInfoVTbl
    query_interface : Proc(IBDA_LNBInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_LNBInfo*, UInt32)
    release : Proc(IBDA_LNBInfo*, UInt32)
    put_local_oscilator_frequency_low_band : Proc(IBDA_LNBInfo*, UInt32, HRESULT)
    get_local_oscilator_frequency_low_band : Proc(IBDA_LNBInfo*, UInt32*, HRESULT)
    put_local_oscilator_frequency_high_band : Proc(IBDA_LNBInfo*, UInt32, HRESULT)
    get_local_oscilator_frequency_high_band : Proc(IBDA_LNBInfo*, UInt32*, HRESULT)
    put_high_low_switch_frequency : Proc(IBDA_LNBInfo*, UInt32, HRESULT)
    get_high_low_switch_frequency : Proc(IBDA_LNBInfo*, UInt32*, HRESULT)
  end

  IBDA_LNBInfo_GUID = LibC::GUID.new("992cf102-49f9-4719-a664-c4f23e2408f4")
  CLSID_IBDA_LNBInfo = "992cf102-49f9-4719-a664-c4f23e2408f4"
  struct IBDA_LNBInfo
    lpVtbl : IBDA_LNBInfoVTbl*
  end

  struct IBDA_DiseqCommandVTbl
    query_interface : Proc(IBDA_DiseqCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DiseqCommand*, UInt32)
    release : Proc(IBDA_DiseqCommand*, UInt32)
    put_enable_diseq_commands : Proc(IBDA_DiseqCommand*, BOOLEAN, HRESULT)
    put_diseq_lnb_source : Proc(IBDA_DiseqCommand*, UInt32, HRESULT)
    put_diseq_use_tone_burst : Proc(IBDA_DiseqCommand*, BOOLEAN, HRESULT)
    put_diseq_repeats : Proc(IBDA_DiseqCommand*, UInt32, HRESULT)
    put_diseq_send_command : Proc(IBDA_DiseqCommand*, UInt32, UInt32, UInt8*, HRESULT)
    get_diseq_response : Proc(IBDA_DiseqCommand*, UInt32, UInt32*, UInt8*, HRESULT)
  end

  IBDA_DiseqCommand_GUID = LibC::GUID.new("f84e2ab0-3c6b-45e3-a0fc-8669d4b81f11")
  CLSID_IBDA_DiseqCommand = "f84e2ab0-3c6b-45e3-a0fc-8669d4b81f11"
  struct IBDA_DiseqCommand
    lpVtbl : IBDA_DiseqCommandVTbl*
  end

  struct IBDA_AutoDemodulateVTbl
    query_interface : Proc(IBDA_AutoDemodulate*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_AutoDemodulate*, UInt32)
    release : Proc(IBDA_AutoDemodulate*, UInt32)
    put_auto_demodulate : Proc(IBDA_AutoDemodulate*, HRESULT)
  end

  IBDA_AutoDemodulate_GUID = LibC::GUID.new("ddf15b12-bd25-11d2-9ca0-00c04f7971e0")
  CLSID_IBDA_AutoDemodulate = "ddf15b12-bd25-11d2-9ca0-00c04f7971e0"
  struct IBDA_AutoDemodulate
    lpVtbl : IBDA_AutoDemodulateVTbl*
  end

  struct IBDA_AutoDemodulateExVTbl
    query_interface : Proc(IBDA_AutoDemodulateEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_AutoDemodulateEx*, UInt32)
    release : Proc(IBDA_AutoDemodulateEx*, UInt32)
    put_auto_demodulate : Proc(IBDA_AutoDemodulateEx*, HRESULT)
    get_supported_device_node_types : Proc(IBDA_AutoDemodulateEx*, UInt32, UInt32*, Guid*, HRESULT)
    get_supported_video_formats : Proc(IBDA_AutoDemodulateEx*, UInt32*, UInt32*, HRESULT)
    get_aux_input_count : Proc(IBDA_AutoDemodulateEx*, UInt32*, UInt32*, HRESULT)
  end

  IBDA_AutoDemodulateEx_GUID = LibC::GUID.new("34518d13-1182-48e6-b28f-b24987787326")
  CLSID_IBDA_AutoDemodulateEx = "34518d13-1182-48e6-b28f-b24987787326"
  struct IBDA_AutoDemodulateEx
    lpVtbl : IBDA_AutoDemodulateExVTbl*
  end

  struct IBDA_DigitalDemodulatorVTbl
    query_interface : Proc(IBDA_DigitalDemodulator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DigitalDemodulator*, UInt32)
    release : Proc(IBDA_DigitalDemodulator*, UInt32)
    put_modulation_type : Proc(IBDA_DigitalDemodulator*, ModulationType*, HRESULT)
    get_modulation_type : Proc(IBDA_DigitalDemodulator*, ModulationType*, HRESULT)
    put_inner_fec_method : Proc(IBDA_DigitalDemodulator*, FECMethod*, HRESULT)
    get_inner_fec_method : Proc(IBDA_DigitalDemodulator*, FECMethod*, HRESULT)
    put_inner_fec_rate : Proc(IBDA_DigitalDemodulator*, BinaryConvolutionCodeRate*, HRESULT)
    get_inner_fec_rate : Proc(IBDA_DigitalDemodulator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_method : Proc(IBDA_DigitalDemodulator*, FECMethod*, HRESULT)
    get_outer_fec_method : Proc(IBDA_DigitalDemodulator*, FECMethod*, HRESULT)
    put_outer_fec_rate : Proc(IBDA_DigitalDemodulator*, BinaryConvolutionCodeRate*, HRESULT)
    get_outer_fec_rate : Proc(IBDA_DigitalDemodulator*, BinaryConvolutionCodeRate*, HRESULT)
    put_symbol_rate : Proc(IBDA_DigitalDemodulator*, UInt32*, HRESULT)
    get_symbol_rate : Proc(IBDA_DigitalDemodulator*, UInt32*, HRESULT)
    put_spectral_inversion : Proc(IBDA_DigitalDemodulator*, SpectralInversion*, HRESULT)
    get_spectral_inversion : Proc(IBDA_DigitalDemodulator*, SpectralInversion*, HRESULT)
  end

  IBDA_DigitalDemodulator_GUID = LibC::GUID.new("ef30f379-985b-4d10-b640-a79d5e04e1e0")
  CLSID_IBDA_DigitalDemodulator = "ef30f379-985b-4d10-b640-a79d5e04e1e0"
  struct IBDA_DigitalDemodulator
    lpVtbl : IBDA_DigitalDemodulatorVTbl*
  end

  struct IBDA_DigitalDemodulator2VTbl
    query_interface : Proc(IBDA_DigitalDemodulator2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DigitalDemodulator2*, UInt32)
    release : Proc(IBDA_DigitalDemodulator2*, UInt32)
    put_modulation_type : Proc(IBDA_DigitalDemodulator2*, ModulationType*, HRESULT)
    get_modulation_type : Proc(IBDA_DigitalDemodulator2*, ModulationType*, HRESULT)
    put_inner_fec_method : Proc(IBDA_DigitalDemodulator2*, FECMethod*, HRESULT)
    get_inner_fec_method : Proc(IBDA_DigitalDemodulator2*, FECMethod*, HRESULT)
    put_inner_fec_rate : Proc(IBDA_DigitalDemodulator2*, BinaryConvolutionCodeRate*, HRESULT)
    get_inner_fec_rate : Proc(IBDA_DigitalDemodulator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_method : Proc(IBDA_DigitalDemodulator2*, FECMethod*, HRESULT)
    get_outer_fec_method : Proc(IBDA_DigitalDemodulator2*, FECMethod*, HRESULT)
    put_outer_fec_rate : Proc(IBDA_DigitalDemodulator2*, BinaryConvolutionCodeRate*, HRESULT)
    get_outer_fec_rate : Proc(IBDA_DigitalDemodulator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_symbol_rate : Proc(IBDA_DigitalDemodulator2*, UInt32*, HRESULT)
    get_symbol_rate : Proc(IBDA_DigitalDemodulator2*, UInt32*, HRESULT)
    put_spectral_inversion : Proc(IBDA_DigitalDemodulator2*, SpectralInversion*, HRESULT)
    get_spectral_inversion : Proc(IBDA_DigitalDemodulator2*, SpectralInversion*, HRESULT)
    put_guard_interval : Proc(IBDA_DigitalDemodulator2*, GuardInterval*, HRESULT)
    get_guard_interval : Proc(IBDA_DigitalDemodulator2*, GuardInterval*, HRESULT)
    put_transmission_mode : Proc(IBDA_DigitalDemodulator2*, TransmissionMode*, HRESULT)
    get_transmission_mode : Proc(IBDA_DigitalDemodulator2*, TransmissionMode*, HRESULT)
    put_roll_off : Proc(IBDA_DigitalDemodulator2*, RollOff*, HRESULT)
    get_roll_off : Proc(IBDA_DigitalDemodulator2*, RollOff*, HRESULT)
    put_pilot : Proc(IBDA_DigitalDemodulator2*, Pilot*, HRESULT)
    get_pilot : Proc(IBDA_DigitalDemodulator2*, Pilot*, HRESULT)
  end

  IBDA_DigitalDemodulator2_GUID = LibC::GUID.new("525ed3ee-5cf3-4e1e-9a06-5368a84f9a6e")
  CLSID_IBDA_DigitalDemodulator2 = "525ed3ee-5cf3-4e1e-9a06-5368a84f9a6e"
  struct IBDA_DigitalDemodulator2
    lpVtbl : IBDA_DigitalDemodulator2VTbl*
  end

  struct IBDA_DigitalDemodulator3VTbl
    query_interface : Proc(IBDA_DigitalDemodulator3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DigitalDemodulator3*, UInt32)
    release : Proc(IBDA_DigitalDemodulator3*, UInt32)
    put_modulation_type : Proc(IBDA_DigitalDemodulator3*, ModulationType*, HRESULT)
    get_modulation_type : Proc(IBDA_DigitalDemodulator3*, ModulationType*, HRESULT)
    put_inner_fec_method : Proc(IBDA_DigitalDemodulator3*, FECMethod*, HRESULT)
    get_inner_fec_method : Proc(IBDA_DigitalDemodulator3*, FECMethod*, HRESULT)
    put_inner_fec_rate : Proc(IBDA_DigitalDemodulator3*, BinaryConvolutionCodeRate*, HRESULT)
    get_inner_fec_rate : Proc(IBDA_DigitalDemodulator3*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_method : Proc(IBDA_DigitalDemodulator3*, FECMethod*, HRESULT)
    get_outer_fec_method : Proc(IBDA_DigitalDemodulator3*, FECMethod*, HRESULT)
    put_outer_fec_rate : Proc(IBDA_DigitalDemodulator3*, BinaryConvolutionCodeRate*, HRESULT)
    get_outer_fec_rate : Proc(IBDA_DigitalDemodulator3*, BinaryConvolutionCodeRate*, HRESULT)
    put_symbol_rate : Proc(IBDA_DigitalDemodulator3*, UInt32*, HRESULT)
    get_symbol_rate : Proc(IBDA_DigitalDemodulator3*, UInt32*, HRESULT)
    put_spectral_inversion : Proc(IBDA_DigitalDemodulator3*, SpectralInversion*, HRESULT)
    get_spectral_inversion : Proc(IBDA_DigitalDemodulator3*, SpectralInversion*, HRESULT)
    put_guard_interval : Proc(IBDA_DigitalDemodulator3*, GuardInterval*, HRESULT)
    get_guard_interval : Proc(IBDA_DigitalDemodulator3*, GuardInterval*, HRESULT)
    put_transmission_mode : Proc(IBDA_DigitalDemodulator3*, TransmissionMode*, HRESULT)
    get_transmission_mode : Proc(IBDA_DigitalDemodulator3*, TransmissionMode*, HRESULT)
    put_roll_off : Proc(IBDA_DigitalDemodulator3*, RollOff*, HRESULT)
    get_roll_off : Proc(IBDA_DigitalDemodulator3*, RollOff*, HRESULT)
    put_pilot : Proc(IBDA_DigitalDemodulator3*, Pilot*, HRESULT)
    get_pilot : Proc(IBDA_DigitalDemodulator3*, Pilot*, HRESULT)
    put_signal_timeouts : Proc(IBDA_DigitalDemodulator3*, BDA_SIGNAL_TIMEOUTS*, HRESULT)
    get_signal_timeouts : Proc(IBDA_DigitalDemodulator3*, BDA_SIGNAL_TIMEOUTS*, HRESULT)
    put_plp_number : Proc(IBDA_DigitalDemodulator3*, UInt32*, HRESULT)
    get_plp_number : Proc(IBDA_DigitalDemodulator3*, UInt32*, HRESULT)
  end

  IBDA_DigitalDemodulator3_GUID = LibC::GUID.new("13f19604-7d32-4359-93a2-a05205d90ac9")
  CLSID_IBDA_DigitalDemodulator3 = "13f19604-7d32-4359-93a2-a05205d90ac9"
  struct IBDA_DigitalDemodulator3
    lpVtbl : IBDA_DigitalDemodulator3VTbl*
  end

  struct ICCSubStreamFilteringVTbl
    query_interface : Proc(ICCSubStreamFiltering*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICCSubStreamFiltering*, UInt32)
    release : Proc(ICCSubStreamFiltering*, UInt32)
    get_substream_types : Proc(ICCSubStreamFiltering*, Int32*, HRESULT)
    put_substream_types : Proc(ICCSubStreamFiltering*, Int32, HRESULT)
  end

  ICCSubStreamFiltering_GUID = LibC::GUID.new("4b2bd7ea-8347-467b-8dbf-62f784929cc3")
  CLSID_ICCSubStreamFiltering = "4b2bd7ea-8347-467b-8dbf-62f784929cc3"
  struct ICCSubStreamFiltering
    lpVtbl : ICCSubStreamFilteringVTbl*
  end

  struct IBDA_IPSinkControlVTbl
    query_interface : Proc(IBDA_IPSinkControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_IPSinkControl*, UInt32)
    release : Proc(IBDA_IPSinkControl*, UInt32)
    get_multicast_list : Proc(IBDA_IPSinkControl*, UInt32*, UInt8**, HRESULT)
    get_adapter_ip_address : Proc(IBDA_IPSinkControl*, UInt32*, UInt8**, HRESULT)
  end

  IBDA_IPSinkControl_GUID = LibC::GUID.new("3f4dc8e2-4050-11d3-8f4b-00c04f7971e2")
  CLSID_IBDA_IPSinkControl = "3f4dc8e2-4050-11d3-8f4b-00c04f7971e2"
  struct IBDA_IPSinkControl
    lpVtbl : IBDA_IPSinkControlVTbl*
  end

  struct IBDA_IPSinkInfoVTbl
    query_interface : Proc(IBDA_IPSinkInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_IPSinkInfo*, UInt32)
    release : Proc(IBDA_IPSinkInfo*, UInt32)
    get_multicast_list : Proc(IBDA_IPSinkInfo*, UInt32*, UInt8**, HRESULT)
    get_adapter_ip_address : Proc(IBDA_IPSinkInfo*, UInt8**, HRESULT)
    get_adapter_description : Proc(IBDA_IPSinkInfo*, UInt8**, HRESULT)
  end

  IBDA_IPSinkInfo_GUID = LibC::GUID.new("a750108f-492e-4d51-95f7-649b23ff7ad7")
  CLSID_IBDA_IPSinkInfo = "a750108f-492e-4d51-95f7-649b23ff7ad7"
  struct IBDA_IPSinkInfo
    lpVtbl : IBDA_IPSinkInfoVTbl*
  end

  struct IEnumPIDMapVTbl
    query_interface : Proc(IEnumPIDMap*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumPIDMap*, UInt32)
    release : Proc(IEnumPIDMap*, UInt32)
    next : Proc(IEnumPIDMap*, UInt32, PID_MAP*, UInt32*, HRESULT)
    skip : Proc(IEnumPIDMap*, UInt32, HRESULT)
    reset : Proc(IEnumPIDMap*, HRESULT)
    clone : Proc(IEnumPIDMap*, IEnumPIDMap*, HRESULT)
  end

  IEnumPIDMap_GUID = LibC::GUID.new("afb6c2a2-2c41-11d3-8a60-0000f81e0e4a")
  CLSID_IEnumPIDMap = "afb6c2a2-2c41-11d3-8a60-0000f81e0e4a"
  struct IEnumPIDMap
    lpVtbl : IEnumPIDMapVTbl*
  end

  struct IMPEG2PIDMapVTbl
    query_interface : Proc(IMPEG2PIDMap*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2PIDMap*, UInt32)
    release : Proc(IMPEG2PIDMap*, UInt32)
    map_pid : Proc(IMPEG2PIDMap*, UInt32, UInt32*, MEDIA_SAMPLE_CONTENT, HRESULT)
    unmap_pid : Proc(IMPEG2PIDMap*, UInt32, UInt32*, HRESULT)
    enum_pid_map : Proc(IMPEG2PIDMap*, IEnumPIDMap*, HRESULT)
  end

  IMPEG2PIDMap_GUID = LibC::GUID.new("afb6c2a1-2c41-11d3-8a60-0000f81e0e4a")
  CLSID_IMPEG2PIDMap = "afb6c2a1-2c41-11d3-8a60-0000f81e0e4a"
  struct IMPEG2PIDMap
    lpVtbl : IMPEG2PIDMapVTbl*
  end

  struct IFrequencyMapVTbl
    query_interface : Proc(IFrequencyMap*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFrequencyMap*, UInt32)
    release : Proc(IFrequencyMap*, UInt32)
    get_frequency_mapping : Proc(IFrequencyMap*, UInt32*, UInt32**, HRESULT)
    put_frequency_mapping : Proc(IFrequencyMap*, UInt32, UInt32*, HRESULT)
    get_country_code : Proc(IFrequencyMap*, UInt32*, HRESULT)
    put_country_code : Proc(IFrequencyMap*, UInt32, HRESULT)
    get_default_frequency_mapping : Proc(IFrequencyMap*, UInt32, UInt32*, UInt32**, HRESULT)
    get_country_code_list : Proc(IFrequencyMap*, UInt32*, UInt32**, HRESULT)
  end

  IFrequencyMap_GUID = LibC::GUID.new("06fb45c1-693c-4ea7-b79f-7a6a54d8def2")
  CLSID_IFrequencyMap = "06fb45c1-693c-4ea7-b79f-7a6a54d8def2"
  struct IFrequencyMap
    lpVtbl : IFrequencyMapVTbl*
  end

  struct IBDA_EasMessageVTbl
    query_interface : Proc(IBDA_EasMessage*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_EasMessage*, UInt32)
    release : Proc(IBDA_EasMessage*, UInt32)
    get_eas_message : Proc(IBDA_EasMessage*, UInt32, IUnknown*, HRESULT)
  end

  IBDA_EasMessage_GUID = LibC::GUID.new("d806973d-3ebe-46de-8fbb-6358fe784208")
  CLSID_IBDA_EasMessage = "d806973d-3ebe-46de-8fbb-6358fe784208"
  struct IBDA_EasMessage
    lpVtbl : IBDA_EasMessageVTbl*
  end

  struct IBDA_TransportStreamInfoVTbl
    query_interface : Proc(IBDA_TransportStreamInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_TransportStreamInfo*, UInt32)
    release : Proc(IBDA_TransportStreamInfo*, UInt32)
    get_pat_table_tick_count : Proc(IBDA_TransportStreamInfo*, UInt32*, HRESULT)
  end

  IBDA_TransportStreamInfo_GUID = LibC::GUID.new("8e882535-5f86-47ab-86cf-c281a72a0549")
  CLSID_IBDA_TransportStreamInfo = "8e882535-5f86-47ab-86cf-c281a72a0549"
  struct IBDA_TransportStreamInfo
    lpVtbl : IBDA_TransportStreamInfoVTbl*
  end

  struct IBDA_ConditionalAccessVTbl
    query_interface : Proc(IBDA_ConditionalAccess*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_ConditionalAccess*, UInt32)
    release : Proc(IBDA_ConditionalAccess*, UInt32)
    get_smart_card_status : Proc(IBDA_ConditionalAccess*, SmartCardStatusType*, SmartCardAssociationType*, UInt8**, Int16*, HRESULT)
    get_smart_card_info : Proc(IBDA_ConditionalAccess*, UInt8**, UInt8**, Int16*, UInt8*, Int32*, UInt8**, EALocationCodeType*, HRESULT)
    get_smart_card_applications : Proc(IBDA_ConditionalAccess*, UInt32*, UInt32, SmartCardApplication*, HRESULT)
    get_entitlement : Proc(IBDA_ConditionalAccess*, UInt16, EntitlementType*, HRESULT)
    tune_by_channel : Proc(IBDA_ConditionalAccess*, UInt16, HRESULT)
    set_program : Proc(IBDA_ConditionalAccess*, UInt16, HRESULT)
    add_program : Proc(IBDA_ConditionalAccess*, UInt16, HRESULT)
    remove_program : Proc(IBDA_ConditionalAccess*, UInt16, HRESULT)
    get_module_ui : Proc(IBDA_ConditionalAccess*, UInt8, UInt8**, HRESULT)
    inform_ui_closed : Proc(IBDA_ConditionalAccess*, UInt8, UICloseReasonType, HRESULT)
  end

  IBDA_ConditionalAccess_GUID = LibC::GUID.new("cd51f1e0-7be9-4123-8482-a2a796c0a6b0")
  CLSID_IBDA_ConditionalAccess = "cd51f1e0-7be9-4123-8482-a2a796c0a6b0"
  struct IBDA_ConditionalAccess
    lpVtbl : IBDA_ConditionalAccessVTbl*
  end

  struct IBDA_DiagnosticPropertiesVTbl
    query_interface : Proc(IBDA_DiagnosticProperties*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DiagnosticProperties*, UInt32)
    release : Proc(IBDA_DiagnosticProperties*, UInt32)
    read : Proc(IBDA_DiagnosticProperties*, LibC::LPWSTR, VARIANT*, IErrorLog, HRESULT)
    write : Proc(IBDA_DiagnosticProperties*, LibC::LPWSTR, VARIANT*, HRESULT)
  end

  IBDA_DiagnosticProperties_GUID = LibC::GUID.new("20e80cb5-c543-4c1b-8eb3-49e719eee7d4")
  CLSID_IBDA_DiagnosticProperties = "20e80cb5-c543-4c1b-8eb3-49e719eee7d4"
  struct IBDA_DiagnosticProperties
    lpVtbl : IBDA_DiagnosticPropertiesVTbl*
  end

  struct IBDA_DRMVTbl
    query_interface : Proc(IBDA_DRM*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DRM*, UInt32)
    release : Proc(IBDA_DRM*, UInt32)
    get_drm_pairing_status : Proc(IBDA_DRM*, UInt32*, HRESULT*, HRESULT)
    perform_drm_pairing : Proc(IBDA_DRM*, LibC::BOOL, HRESULT)
  end

  IBDA_DRM_GUID = LibC::GUID.new("f98d88b0-1992-4cd6-a6d9-b9afab99330d")
  CLSID_IBDA_DRM = "f98d88b0-1992-4cd6-a6d9-b9afab99330d"
  struct IBDA_DRM
    lpVtbl : IBDA_DRMVTbl*
  end

  struct IBDA_NameValueServiceVTbl
    query_interface : Proc(IBDA_NameValueService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_NameValueService*, UInt32)
    release : Proc(IBDA_NameValueService*, UInt32)
    get_value_name_by_index : Proc(IBDA_NameValueService*, UInt32, UInt8**, HRESULT)
    get_value : Proc(IBDA_NameValueService*, UInt8*, UInt8*, UInt8**, HRESULT)
    set_value : Proc(IBDA_NameValueService*, UInt32, UInt8*, UInt8*, UInt8*, UInt32, HRESULT)
  end

  IBDA_NameValueService_GUID = LibC::GUID.new("7f0b3150-7b81-4ad4-98e3-7e9097094301")
  CLSID_IBDA_NameValueService = "7f0b3150-7b81-4ad4-98e3-7e9097094301"
  struct IBDA_NameValueService
    lpVtbl : IBDA_NameValueServiceVTbl*
  end

  struct IBDA_ConditionalAccessExVTbl
    query_interface : Proc(IBDA_ConditionalAccessEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_ConditionalAccessEx*, UInt32)
    release : Proc(IBDA_ConditionalAccessEx*, UInt32)
    check_entitlement_token : Proc(IBDA_ConditionalAccessEx*, UInt32, UInt8*, BDA_CONDITIONALACCESS_REQUESTTYPE, UInt32, UInt8*, UInt32*, HRESULT)
    set_capture_token : Proc(IBDA_ConditionalAccessEx*, UInt32, UInt8*, HRESULT)
    open_broadcast_mmi : Proc(IBDA_ConditionalAccessEx*, UInt32, UInt8*, UInt32, HRESULT)
    close_mmi_dialog : Proc(IBDA_ConditionalAccessEx*, UInt32, UInt8*, UInt32, BDA_CONDITIONALACCESS_MMICLOSEREASON, UInt32*, HRESULT)
    create_dialog_request_number : Proc(IBDA_ConditionalAccessEx*, UInt32*, HRESULT)
  end

  IBDA_ConditionalAccessEx_GUID = LibC::GUID.new("497c3418-23cb-44ba-bb62-769f506fcea7")
  CLSID_IBDA_ConditionalAccessEx = "497c3418-23cb-44ba-bb62-769f506fcea7"
  struct IBDA_ConditionalAccessEx
    lpVtbl : IBDA_ConditionalAccessExVTbl*
  end

  struct IBDA_ISDBConditionalAccessVTbl
    query_interface : Proc(IBDA_ISDBConditionalAccess*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_ISDBConditionalAccess*, UInt32)
    release : Proc(IBDA_ISDBConditionalAccess*, UInt32)
    set_isdb_cas_request : Proc(IBDA_ISDBConditionalAccess*, UInt32, UInt32, UInt8*, HRESULT)
  end

  IBDA_ISDBConditionalAccess_GUID = LibC::GUID.new("5e68c627-16c2-4e6c-b1e2-d00170cdaa0f")
  CLSID_IBDA_ISDBConditionalAccess = "5e68c627-16c2-4e6c-b1e2-d00170cdaa0f"
  struct IBDA_ISDBConditionalAccess
    lpVtbl : IBDA_ISDBConditionalAccessVTbl*
  end

  struct IBDA_EventingServiceVTbl
    query_interface : Proc(IBDA_EventingService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_EventingService*, UInt32)
    release : Proc(IBDA_EventingService*, UInt32)
    complete_event : Proc(IBDA_EventingService*, UInt32, UInt32, HRESULT)
  end

  IBDA_EventingService_GUID = LibC::GUID.new("207c413f-00dc-4c61-bad6-6fee1ff07064")
  CLSID_IBDA_EventingService = "207c413f-00dc-4c61-bad6-6fee1ff07064"
  struct IBDA_EventingService
    lpVtbl : IBDA_EventingServiceVTbl*
  end

  struct IBDA_AUXVTbl
    query_interface : Proc(IBDA_AUX*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_AUX*, UInt32)
    release : Proc(IBDA_AUX*, UInt32)
    query_capabilities : Proc(IBDA_AUX*, UInt32*, HRESULT)
    enum_capability : Proc(IBDA_AUX*, UInt32, UInt32*, Guid*, UInt32*, UInt32*, UInt64*, HRESULT)
  end

  IBDA_AUX_GUID = LibC::GUID.new("7def4c09-6e66-4567-a819-f0e17f4a81ab")
  CLSID_IBDA_AUX = "7def4c09-6e66-4567-a819-f0e17f4a81ab"
  struct IBDA_AUX
    lpVtbl : IBDA_AUXVTbl*
  end

  struct IBDA_EncoderVTbl
    query_interface : Proc(IBDA_Encoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_Encoder*, UInt32)
    release : Proc(IBDA_Encoder*, UInt32)
    query_capabilities : Proc(IBDA_Encoder*, UInt32*, UInt32*, HRESULT)
    enum_audio_capability : Proc(IBDA_Encoder*, UInt32, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    enum_video_capability : Proc(IBDA_Encoder*, UInt32, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    set_parameters : Proc(IBDA_Encoder*, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, HRESULT)
    get_state : Proc(IBDA_Encoder*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt64*, LibC::BOOL*, Int32*, UInt32*, HRESULT)
  end

  IBDA_Encoder_GUID = LibC::GUID.new("3a8bad59-59fe-4559-a0ba-396cfaa98ae3")
  CLSID_IBDA_Encoder = "3a8bad59-59fe-4559-a0ba-396cfaa98ae3"
  struct IBDA_Encoder
    lpVtbl : IBDA_EncoderVTbl*
  end

  struct IBDA_FDCVTbl
    query_interface : Proc(IBDA_FDC*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_FDC*, UInt32)
    release : Proc(IBDA_FDC*, UInt32)
    get_status : Proc(IBDA_FDC*, UInt32*, LibC::BOOL*, UInt32*, LibC::BOOL*, UInt8**, UInt8**, LibC::BOOL*, HRESULT)
    request_tables : Proc(IBDA_FDC*, UInt8*, HRESULT)
    add_pid : Proc(IBDA_FDC*, UInt8*, UInt32*, HRESULT)
    remove_pid : Proc(IBDA_FDC*, UInt8*, HRESULT)
    add_tid : Proc(IBDA_FDC*, UInt8*, UInt8**, HRESULT)
    remove_tid : Proc(IBDA_FDC*, UInt8*, HRESULT)
    get_table_section : Proc(IBDA_FDC*, UInt32*, UInt32, UInt32*, UInt8*, HRESULT)
  end

  IBDA_FDC_GUID = LibC::GUID.new("138adc7e-58ae-437f-b0b4-c9fe19d5b4ac")
  CLSID_IBDA_FDC = "138adc7e-58ae-437f-b0b4-c9fe19d5b4ac"
  struct IBDA_FDC
    lpVtbl : IBDA_FDCVTbl*
  end

  struct IBDA_GuideDataDeliveryServiceVTbl
    query_interface : Proc(IBDA_GuideDataDeliveryService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_GuideDataDeliveryService*, UInt32)
    release : Proc(IBDA_GuideDataDeliveryService*, UInt32)
    get_guide_data_type : Proc(IBDA_GuideDataDeliveryService*, Guid*, HRESULT)
    get_guide_data : Proc(IBDA_GuideDataDeliveryService*, UInt32*, UInt8*, UInt32*, HRESULT)
    request_guide_data_update : Proc(IBDA_GuideDataDeliveryService*, HRESULT)
    get_tune_xml_from_service_idx : Proc(IBDA_GuideDataDeliveryService*, UInt64, UInt8**, HRESULT)
    get_services : Proc(IBDA_GuideDataDeliveryService*, UInt32*, UInt8*, HRESULT)
    get_service_info_from_tune_xml : Proc(IBDA_GuideDataDeliveryService*, UInt8*, UInt8**, HRESULT)
  end

  IBDA_GuideDataDeliveryService_GUID = LibC::GUID.new("c0afcb73-23e7-4bc6-bafa-fdc167b4719f")
  CLSID_IBDA_GuideDataDeliveryService = "c0afcb73-23e7-4bc6-bafa-fdc167b4719f"
  struct IBDA_GuideDataDeliveryService
    lpVtbl : IBDA_GuideDataDeliveryServiceVTbl*
  end

  struct IBDA_DRMServiceVTbl
    query_interface : Proc(IBDA_DRMService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DRMService*, UInt32)
    release : Proc(IBDA_DRMService*, UInt32)
    set_drm : Proc(IBDA_DRMService*, Guid*, HRESULT)
    get_drm_status : Proc(IBDA_DRMService*, UInt8**, Guid*, HRESULT)
  end

  IBDA_DRMService_GUID = LibC::GUID.new("bff6b5bb-b0ae-484c-9dca-73528fb0b46e")
  CLSID_IBDA_DRMService = "bff6b5bb-b0ae-484c-9dca-73528fb0b46e"
  struct IBDA_DRMService
    lpVtbl : IBDA_DRMServiceVTbl*
  end

  struct IBDA_WMDRMSessionVTbl
    query_interface : Proc(IBDA_WMDRMSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_WMDRMSession*, UInt32)
    release : Proc(IBDA_WMDRMSession*, UInt32)
    get_status : Proc(IBDA_WMDRMSession*, UInt32*, UInt32*, UInt32*, UInt32*, UInt32*, UInt64*, UInt32*, UInt32*, UInt32*, HRESULT)
    set_rev_info : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, HRESULT)
    set_crl : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, HRESULT)
    transact_message : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, UInt32*, UInt8*, HRESULT)
    get_license : Proc(IBDA_WMDRMSession*, Guid*, UInt32*, UInt8*, HRESULT)
    reissue_license : Proc(IBDA_WMDRMSession*, Guid*, HRESULT)
    renew_license : Proc(IBDA_WMDRMSession*, UInt32, UInt8*, UInt32, UInt8*, UInt32*, UInt32*, UInt8*, HRESULT)
    get_key_info : Proc(IBDA_WMDRMSession*, UInt32*, UInt8*, HRESULT)
  end

  IBDA_WMDRMSession_GUID = LibC::GUID.new("4be6fa3d-07cd-4139-8b80-8c18ba3aec88")
  CLSID_IBDA_WMDRMSession = "4be6fa3d-07cd-4139-8b80-8c18ba3aec88"
  struct IBDA_WMDRMSession
    lpVtbl : IBDA_WMDRMSessionVTbl*
  end

  struct IBDA_WMDRMTunerVTbl
    query_interface : Proc(IBDA_WMDRMTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_WMDRMTuner*, UInt32)
    release : Proc(IBDA_WMDRMTuner*, UInt32)
    purchase_entitlement : Proc(IBDA_WMDRMTuner*, UInt32, UInt8*, UInt32, UInt8*, UInt32*, UInt32*, UInt8*, HRESULT)
    cancel_capture_token : Proc(IBDA_WMDRMTuner*, UInt32, UInt8*, HRESULT)
    set_pid_protection : Proc(IBDA_WMDRMTuner*, UInt32, Guid*, HRESULT)
    get_pid_protection : Proc(IBDA_WMDRMTuner*, UInt32, Guid*, HRESULT)
    set_sync_value : Proc(IBDA_WMDRMTuner*, UInt32, HRESULT)
    get_start_code_profile : Proc(IBDA_WMDRMTuner*, UInt32*, UInt8*, HRESULT)
  end

  IBDA_WMDRMTuner_GUID = LibC::GUID.new("86d979cf-a8a7-4f94-b5fb-14c0aca68fe6")
  CLSID_IBDA_WMDRMTuner = "86d979cf-a8a7-4f94-b5fb-14c0aca68fe6"
  struct IBDA_WMDRMTuner
    lpVtbl : IBDA_WMDRMTunerVTbl*
  end

  struct IBDA_DRIDRMServiceVTbl
    query_interface : Proc(IBDA_DRIDRMService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DRIDRMService*, UInt32)
    release : Proc(IBDA_DRIDRMService*, UInt32)
    set_drm : Proc(IBDA_DRIDRMService*, UInt8*, HRESULT)
    get_drm_status : Proc(IBDA_DRIDRMService*, UInt8**, Guid*, HRESULT)
    get_pairing_status : Proc(IBDA_DRIDRMService*, BDA_DrmPairingError*, HRESULT)
  end

  IBDA_DRIDRMService_GUID = LibC::GUID.new("1f9bc2a5-44a3-4c52-aab1-0bbce5a1381d")
  CLSID_IBDA_DRIDRMService = "1f9bc2a5-44a3-4c52-aab1-0bbce5a1381d"
  struct IBDA_DRIDRMService
    lpVtbl : IBDA_DRIDRMServiceVTbl*
  end

  struct IBDA_DRIWMDRMSessionVTbl
    query_interface : Proc(IBDA_DRIWMDRMSession*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_DRIWMDRMSession*, UInt32)
    release : Proc(IBDA_DRIWMDRMSession*, UInt32)
    acknowledge_license : Proc(IBDA_DRIWMDRMSession*, HRESULT, HRESULT)
    process_license_challenge : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, UInt8**, HRESULT)
    process_registration_challenge : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, UInt8**, HRESULT)
    set_rev_info : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, HRESULT)
    set_crl : Proc(IBDA_DRIWMDRMSession*, UInt32, UInt8*, UInt32*, HRESULT)
    get_hms_association_data : Proc(IBDA_DRIWMDRMSession*, HRESULT)
    get_last_cardea_error : Proc(IBDA_DRIWMDRMSession*, UInt32*, HRESULT)
  end

  IBDA_DRIWMDRMSession_GUID = LibC::GUID.new("05c690f8-56db-4bb2-b053-79c12098bb26")
  CLSID_IBDA_DRIWMDRMSession = "05c690f8-56db-4bb2-b053-79c12098bb26"
  struct IBDA_DRIWMDRMSession
    lpVtbl : IBDA_DRIWMDRMSessionVTbl*
  end

  struct IBDA_MUXVTbl
    query_interface : Proc(IBDA_MUX*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_MUX*, UInt32)
    release : Proc(IBDA_MUX*, UInt32)
    set_pid_list : Proc(IBDA_MUX*, UInt32, BDA_MUX_PIDLISTITEM*, HRESULT)
    get_pid_list : Proc(IBDA_MUX*, UInt32*, BDA_MUX_PIDLISTITEM*, HRESULT)
  end

  IBDA_MUX_GUID = LibC::GUID.new("942aafec-4c05-4c74-b8eb-8706c2a4943f")
  CLSID_IBDA_MUX = "942aafec-4c05-4c74-b8eb-8706c2a4943f"
  struct IBDA_MUX
    lpVtbl : IBDA_MUXVTbl*
  end

  struct IBDA_TransportStreamSelectorVTbl
    query_interface : Proc(IBDA_TransportStreamSelector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_TransportStreamSelector*, UInt32)
    release : Proc(IBDA_TransportStreamSelector*, UInt32)
    set_tsid : Proc(IBDA_TransportStreamSelector*, UInt16, HRESULT)
    get_ts_information : Proc(IBDA_TransportStreamSelector*, UInt32*, UInt8*, HRESULT)
  end

  IBDA_TransportStreamSelector_GUID = LibC::GUID.new("1dcfafe9-b45e-41b3-bb2a-561eb129ae98")
  CLSID_IBDA_TransportStreamSelector = "1dcfafe9-b45e-41b3-bb2a-561eb129ae98"
  struct IBDA_TransportStreamSelector
    lpVtbl : IBDA_TransportStreamSelectorVTbl*
  end

  struct IBDA_UserActivityServiceVTbl
    query_interface : Proc(IBDA_UserActivityService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_UserActivityService*, UInt32)
    release : Proc(IBDA_UserActivityService*, UInt32)
    set_current_tuner_use_reason : Proc(IBDA_UserActivityService*, UInt32, HRESULT)
    get_user_activity_interval : Proc(IBDA_UserActivityService*, UInt32*, HRESULT)
    user_activity_detected : Proc(IBDA_UserActivityService*, HRESULT)
  end

  IBDA_UserActivityService_GUID = LibC::GUID.new("53b14189-e478-4b7a-a1ff-506db4b99dfe")
  CLSID_IBDA_UserActivityService = "53b14189-e478-4b7a-a1ff-506db4b99dfe"
  struct IBDA_UserActivityService
    lpVtbl : IBDA_UserActivityServiceVTbl*
  end

  struct IESEventVTbl
    query_interface : Proc(IESEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESEvent*, UInt32)
    release : Proc(IESEvent*, UInt32)
    get_event_id : Proc(IESEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESEvent*, UInt32, HRESULT)
    get_data : Proc(IESEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESEvent*, UInt8**, HRESULT)
  end

  IESEvent_GUID = LibC::GUID.new("1f0e5357-af43-44e6-8547-654c645145d2")
  CLSID_IESEvent = "1f0e5357-af43-44e6-8547-654c645145d2"
  struct IESEvent
    lpVtbl : IESEventVTbl*
  end

  struct IESEventsVTbl
    query_interface : Proc(IESEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESEvents*, UInt32)
    release : Proc(IESEvents*, UInt32)
    on_es_event_received : Proc(IESEvents*, Guid, IESEvent, HRESULT)
  end

  IESEvents_GUID = LibC::GUID.new("abd414bf-cfe5-4e5e-af5b-4b4e49c5bfeb")
  CLSID_IESEvents = "abd414bf-cfe5-4e5e-af5b-4b4e49c5bfeb"
  struct IESEvents
    lpVtbl : IESEventsVTbl*
  end

  struct IBroadcastEventVTbl
    query_interface : Proc(IBroadcastEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBroadcastEvent*, UInt32)
    release : Proc(IBroadcastEvent*, UInt32)
    fire : Proc(IBroadcastEvent*, Guid, HRESULT)
  end

  IBroadcastEvent_GUID = LibC::GUID.new("3b21263f-26e8-489d-aac4-924f7efd9511")
  CLSID_IBroadcastEvent = "3b21263f-26e8-489d-aac4-924f7efd9511"
  struct IBroadcastEvent
    lpVtbl : IBroadcastEventVTbl*
  end

  struct IBroadcastEventExVTbl
    query_interface : Proc(IBroadcastEventEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBroadcastEventEx*, UInt32)
    release : Proc(IBroadcastEventEx*, UInt32)
    fire : Proc(IBroadcastEventEx*, Guid, HRESULT)
    fire_ex : Proc(IBroadcastEventEx*, Guid, UInt32, UInt32, UInt32, UInt32, HRESULT)
  end

  IBroadcastEventEx_GUID = LibC::GUID.new("3d9e3887-1929-423f-8021-43682de95448")
  CLSID_IBroadcastEventEx = "3d9e3887-1929-423f-8021-43682de95448"
  struct IBroadcastEventEx
    lpVtbl : IBroadcastEventExVTbl*
  end

  struct IAMNetShowConfigVTbl
    query_interface : Proc(IAMNetShowConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMNetShowConfig*, UInt32)
    release : Proc(IAMNetShowConfig*, UInt32)
    get_type_info_count : Proc(IAMNetShowConfig*, UInt32*, HRESULT)
    get_type_info : Proc(IAMNetShowConfig*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMNetShowConfig*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMNetShowConfig*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_buffering_time : Proc(IAMNetShowConfig*, Float64*, HRESULT)
    put_buffering_time : Proc(IAMNetShowConfig*, Float64, HRESULT)
    get_use_fixed_udp_port : Proc(IAMNetShowConfig*, Int16*, HRESULT)
    put_use_fixed_udp_port : Proc(IAMNetShowConfig*, Int16, HRESULT)
    get_fixed_udp_port : Proc(IAMNetShowConfig*, Int32*, HRESULT)
    put_fixed_udp_port : Proc(IAMNetShowConfig*, Int32, HRESULT)
    get_use_http_proxy : Proc(IAMNetShowConfig*, Int16*, HRESULT)
    put_use_http_proxy : Proc(IAMNetShowConfig*, Int16, HRESULT)
    get_enable_auto_proxy : Proc(IAMNetShowConfig*, Int16*, HRESULT)
    put_enable_auto_proxy : Proc(IAMNetShowConfig*, Int16, HRESULT)
    get_http_proxy_host : Proc(IAMNetShowConfig*, UInt8**, HRESULT)
    put_http_proxy_host : Proc(IAMNetShowConfig*, UInt8*, HRESULT)
    get_http_proxy_port : Proc(IAMNetShowConfig*, Int32*, HRESULT)
    put_http_proxy_port : Proc(IAMNetShowConfig*, Int32, HRESULT)
    get_enable_multicast : Proc(IAMNetShowConfig*, Int16*, HRESULT)
    put_enable_multicast : Proc(IAMNetShowConfig*, Int16, HRESULT)
    get_enable_udp : Proc(IAMNetShowConfig*, Int16*, HRESULT)
    put_enable_udp : Proc(IAMNetShowConfig*, Int16, HRESULT)
    get_enable_tcp : Proc(IAMNetShowConfig*, Int16*, HRESULT)
    put_enable_tcp : Proc(IAMNetShowConfig*, Int16, HRESULT)
    get_enable_http : Proc(IAMNetShowConfig*, Int16*, HRESULT)
    put_enable_http : Proc(IAMNetShowConfig*, Int16, HRESULT)
  end

  IAMNetShowConfig_GUID = LibC::GUID.new("fa2aa8f1-8b62-11d0-a520-000000000000")
  CLSID_IAMNetShowConfig = "fa2aa8f1-8b62-11d0-a520-000000000000"
  struct IAMNetShowConfig
    lpVtbl : IAMNetShowConfigVTbl*
  end

  struct IAMChannelInfoVTbl
    query_interface : Proc(IAMChannelInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMChannelInfo*, UInt32)
    release : Proc(IAMChannelInfo*, UInt32)
    get_type_info_count : Proc(IAMChannelInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IAMChannelInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMChannelInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMChannelInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_channel_name : Proc(IAMChannelInfo*, UInt8**, HRESULT)
    get_channel_description : Proc(IAMChannelInfo*, UInt8**, HRESULT)
    get_channel_url : Proc(IAMChannelInfo*, UInt8**, HRESULT)
    get_contact_address : Proc(IAMChannelInfo*, UInt8**, HRESULT)
    get_contact_phone : Proc(IAMChannelInfo*, UInt8**, HRESULT)
    get_contact_email : Proc(IAMChannelInfo*, UInt8**, HRESULT)
  end

  IAMChannelInfo_GUID = LibC::GUID.new("fa2aa8f2-8b62-11d0-a520-000000000000")
  CLSID_IAMChannelInfo = "fa2aa8f2-8b62-11d0-a520-000000000000"
  struct IAMChannelInfo
    lpVtbl : IAMChannelInfoVTbl*
  end

  struct IAMNetworkStatusVTbl
    query_interface : Proc(IAMNetworkStatus*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMNetworkStatus*, UInt32)
    release : Proc(IAMNetworkStatus*, UInt32)
    get_type_info_count : Proc(IAMNetworkStatus*, UInt32*, HRESULT)
    get_type_info : Proc(IAMNetworkStatus*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMNetworkStatus*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMNetworkStatus*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_received_packets : Proc(IAMNetworkStatus*, Int32*, HRESULT)
    get_recovered_packets : Proc(IAMNetworkStatus*, Int32*, HRESULT)
    get_lost_packets : Proc(IAMNetworkStatus*, Int32*, HRESULT)
    get_reception_quality : Proc(IAMNetworkStatus*, Int32*, HRESULT)
    get_buffering_count : Proc(IAMNetworkStatus*, Int32*, HRESULT)
    get_is_broadcast : Proc(IAMNetworkStatus*, Int16*, HRESULT)
    get_buffering_progress : Proc(IAMNetworkStatus*, Int32*, HRESULT)
  end

  IAMNetworkStatus_GUID = LibC::GUID.new("fa2aa8f3-8b62-11d0-a520-000000000000")
  CLSID_IAMNetworkStatus = "fa2aa8f3-8b62-11d0-a520-000000000000"
  struct IAMNetworkStatus
    lpVtbl : IAMNetworkStatusVTbl*
  end

  struct IAMExtendedSeekingVTbl
    query_interface : Proc(IAMExtendedSeeking*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMExtendedSeeking*, UInt32)
    release : Proc(IAMExtendedSeeking*, UInt32)
    get_type_info_count : Proc(IAMExtendedSeeking*, UInt32*, HRESULT)
    get_type_info : Proc(IAMExtendedSeeking*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMExtendedSeeking*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMExtendedSeeking*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_ex_seek_capabilities : Proc(IAMExtendedSeeking*, Int32*, HRESULT)
    get_marker_count : Proc(IAMExtendedSeeking*, Int32*, HRESULT)
    get_current_marker : Proc(IAMExtendedSeeking*, Int32*, HRESULT)
    get_marker_time : Proc(IAMExtendedSeeking*, Int32, Float64*, HRESULT)
    get_marker_name : Proc(IAMExtendedSeeking*, Int32, UInt8**, HRESULT)
    put_playback_speed : Proc(IAMExtendedSeeking*, Float64, HRESULT)
    get_playback_speed : Proc(IAMExtendedSeeking*, Float64*, HRESULT)
  end

  IAMExtendedSeeking_GUID = LibC::GUID.new("fa2aa8f9-8b62-11d0-a520-000000000000")
  CLSID_IAMExtendedSeeking = "fa2aa8f9-8b62-11d0-a520-000000000000"
  struct IAMExtendedSeeking
    lpVtbl : IAMExtendedSeekingVTbl*
  end

  struct IAMNetShowExPropsVTbl
    query_interface : Proc(IAMNetShowExProps*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMNetShowExProps*, UInt32)
    release : Proc(IAMNetShowExProps*, UInt32)
    get_type_info_count : Proc(IAMNetShowExProps*, UInt32*, HRESULT)
    get_type_info : Proc(IAMNetShowExProps*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMNetShowExProps*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMNetShowExProps*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_source_protocol : Proc(IAMNetShowExProps*, Int32*, HRESULT)
    get_bandwidth : Proc(IAMNetShowExProps*, Int32*, HRESULT)
    get_error_correction : Proc(IAMNetShowExProps*, UInt8**, HRESULT)
    get_codec_count : Proc(IAMNetShowExProps*, Int32*, HRESULT)
    get_codec_installed : Proc(IAMNetShowExProps*, Int32, Int16*, HRESULT)
    get_codec_description : Proc(IAMNetShowExProps*, Int32, UInt8**, HRESULT)
    get_codec_url : Proc(IAMNetShowExProps*, Int32, UInt8**, HRESULT)
    get_creation_date : Proc(IAMNetShowExProps*, Float64*, HRESULT)
    get_source_link : Proc(IAMNetShowExProps*, UInt8**, HRESULT)
  end

  IAMNetShowExProps_GUID = LibC::GUID.new("fa2aa8f5-8b62-11d0-a520-000000000000")
  CLSID_IAMNetShowExProps = "fa2aa8f5-8b62-11d0-a520-000000000000"
  struct IAMNetShowExProps
    lpVtbl : IAMNetShowExPropsVTbl*
  end

  struct IAMExtendedErrorInfoVTbl
    query_interface : Proc(IAMExtendedErrorInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMExtendedErrorInfo*, UInt32)
    release : Proc(IAMExtendedErrorInfo*, UInt32)
    get_type_info_count : Proc(IAMExtendedErrorInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IAMExtendedErrorInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMExtendedErrorInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMExtendedErrorInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_has_error : Proc(IAMExtendedErrorInfo*, Int16*, HRESULT)
    get_error_description : Proc(IAMExtendedErrorInfo*, UInt8**, HRESULT)
    get_error_code : Proc(IAMExtendedErrorInfo*, Int32*, HRESULT)
  end

  IAMExtendedErrorInfo_GUID = LibC::GUID.new("fa2aa8f6-8b62-11d0-a520-000000000000")
  CLSID_IAMExtendedErrorInfo = "fa2aa8f6-8b62-11d0-a520-000000000000"
  struct IAMExtendedErrorInfo
    lpVtbl : IAMExtendedErrorInfoVTbl*
  end

  struct IAMMediaContentVTbl
    query_interface : Proc(IAMMediaContent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMMediaContent*, UInt32)
    release : Proc(IAMMediaContent*, UInt32)
    get_type_info_count : Proc(IAMMediaContent*, UInt32*, HRESULT)
    get_type_info : Proc(IAMMediaContent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMMediaContent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMMediaContent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_author_name : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_title : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_rating : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_description : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_copyright : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_base_url : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_logo_url : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_logo_icon_url : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_watermark_url : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_more_info_url : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_more_info_banner_image : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_more_info_banner_url : Proc(IAMMediaContent*, UInt8**, HRESULT)
    get_more_info_text : Proc(IAMMediaContent*, UInt8**, HRESULT)
  end

  IAMMediaContent_GUID = LibC::GUID.new("fa2aa8f4-8b62-11d0-a520-000000000000")
  CLSID_IAMMediaContent = "fa2aa8f4-8b62-11d0-a520-000000000000"
  struct IAMMediaContent
    lpVtbl : IAMMediaContentVTbl*
  end

  struct IAMMediaContent2VTbl
    query_interface : Proc(IAMMediaContent2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMMediaContent2*, UInt32)
    release : Proc(IAMMediaContent2*, UInt32)
    get_type_info_count : Proc(IAMMediaContent2*, UInt32*, HRESULT)
    get_type_info : Proc(IAMMediaContent2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMMediaContent2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMMediaContent2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_media_parameter : Proc(IAMMediaContent2*, Int32, UInt8*, UInt8**, HRESULT)
    get_media_parameter_name : Proc(IAMMediaContent2*, Int32, Int32, UInt8**, HRESULT)
    get_playlist_count : Proc(IAMMediaContent2*, Int32*, HRESULT)
  end

  IAMMediaContent2_GUID = LibC::GUID.new("ce8f78c1-74d9-11d2-b09d-00a0c9a81117")
  CLSID_IAMMediaContent2 = "ce8f78c1-74d9-11d2-b09d-00a0c9a81117"
  struct IAMMediaContent2
    lpVtbl : IAMMediaContent2VTbl*
  end

  struct IAMNetShowPrerollVTbl
    query_interface : Proc(IAMNetShowPreroll*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMNetShowPreroll*, UInt32)
    release : Proc(IAMNetShowPreroll*, UInt32)
    get_type_info_count : Proc(IAMNetShowPreroll*, UInt32*, HRESULT)
    get_type_info : Proc(IAMNetShowPreroll*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMNetShowPreroll*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMNetShowPreroll*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_preroll : Proc(IAMNetShowPreroll*, Int16, HRESULT)
    get_preroll : Proc(IAMNetShowPreroll*, Int16*, HRESULT)
  end

  IAMNetShowPreroll_GUID = LibC::GUID.new("aae7e4e2-6388-11d1-8d93-006097c9a2b2")
  CLSID_IAMNetShowPreroll = "aae7e4e2-6388-11d1-8d93-006097c9a2b2"
  struct IAMNetShowPreroll
    lpVtbl : IAMNetShowPrerollVTbl*
  end

  struct IDShowPluginVTbl
    query_interface : Proc(IDShowPlugin*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDShowPlugin*, UInt32)
    release : Proc(IDShowPlugin*, UInt32)
    get_url : Proc(IDShowPlugin*, UInt8**, HRESULT)
    get_user_agent : Proc(IDShowPlugin*, UInt8**, HRESULT)
  end

  IDShowPlugin_GUID = LibC::GUID.new("4746b7c8-700e-11d1-becc-00c04fb6e937")
  CLSID_IDShowPlugin = "4746b7c8-700e-11d1-becc-00c04fb6e937"
  struct IDShowPlugin
    lpVtbl : IDShowPluginVTbl*
  end

  struct IAMDirectSoundVTbl
    query_interface : Proc(IAMDirectSound*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMDirectSound*, UInt32)
    release : Proc(IAMDirectSound*, UInt32)
    get_direct_sound_interface : Proc(IAMDirectSound*, IDirectSound*, HRESULT)
    get_primary_buffer_interface : Proc(IAMDirectSound*, IDirectSoundBuffer*, HRESULT)
    get_secondary_buffer_interface : Proc(IAMDirectSound*, IDirectSoundBuffer*, HRESULT)
    release_direct_sound_interface : Proc(IAMDirectSound*, IDirectSound, HRESULT)
    release_primary_buffer_interface : Proc(IAMDirectSound*, IDirectSoundBuffer, HRESULT)
    release_secondary_buffer_interface : Proc(IAMDirectSound*, IDirectSoundBuffer, HRESULT)
    set_focus_window : Proc(IAMDirectSound*, LibC::HANDLE, LibC::BOOL, HRESULT)
    get_focus_window : Proc(IAMDirectSound*, HANDLE*, LibC::BOOL*, HRESULT)
  end

  struct IAMDirectSound
    lpVtbl : IAMDirectSoundVTbl*
  end

  struct IAMLine21DecoderVTbl
    query_interface : Proc(IAMLine21Decoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMLine21Decoder*, UInt32)
    release : Proc(IAMLine21Decoder*, UInt32)
    get_decoder_level : Proc(IAMLine21Decoder*, AM_LINE21_CCLEVEL*, HRESULT)
    get_current_service : Proc(IAMLine21Decoder*, AM_LINE21_CCSERVICE*, HRESULT)
    set_current_service : Proc(IAMLine21Decoder*, AM_LINE21_CCSERVICE, HRESULT)
    get_service_state : Proc(IAMLine21Decoder*, AM_LINE21_CCSTATE*, HRESULT)
    set_service_state : Proc(IAMLine21Decoder*, AM_LINE21_CCSTATE, HRESULT)
    get_output_format : Proc(IAMLine21Decoder*, BITMAPINFOHEADER*, HRESULT)
    set_output_format : Proc(IAMLine21Decoder*, BITMAPINFO*, HRESULT)
    get_background_color : Proc(IAMLine21Decoder*, UInt32*, HRESULT)
    set_background_color : Proc(IAMLine21Decoder*, UInt32, HRESULT)
    get_redraw_always : Proc(IAMLine21Decoder*, Int32*, HRESULT)
    set_redraw_always : Proc(IAMLine21Decoder*, LibC::BOOL, HRESULT)
    get_draw_background_mode : Proc(IAMLine21Decoder*, AM_LINE21_DRAWBGMODE*, HRESULT)
    set_draw_background_mode : Proc(IAMLine21Decoder*, AM_LINE21_DRAWBGMODE, HRESULT)
  end

  struct IAMLine21Decoder
    lpVtbl : IAMLine21DecoderVTbl*
  end

  struct IAMParseVTbl
    query_interface : Proc(IAMParse*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMParse*, UInt32)
    release : Proc(IAMParse*, UInt32)
    get_parse_time : Proc(IAMParse*, Int64*, HRESULT)
    set_parse_time : Proc(IAMParse*, Int64, HRESULT)
    flush : Proc(IAMParse*, HRESULT)
  end

  IAMParse_GUID = LibC::GUID.new("c47a3420-005c-11d2-9038-00a0c9697298")
  CLSID_IAMParse = "c47a3420-005c-11d2-9038-00a0c9697298"
  struct IAMParse
    lpVtbl : IAMParseVTbl*
  end

  struct IAMCollectionVTbl
    query_interface : Proc(IAMCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMCollection*, UInt32)
    release : Proc(IAMCollection*, UInt32)
    get_type_info_count : Proc(IAMCollection*, UInt32*, HRESULT)
    get_type_info : Proc(IAMCollection*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMCollection*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMCollection*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IAMCollection*, Int32*, HRESULT)
    item : Proc(IAMCollection*, Int32, IUnknown*, HRESULT)
    get__new_enum : Proc(IAMCollection*, IUnknown*, HRESULT)
  end

  IAMCollection_GUID = LibC::GUID.new("56a868b9-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IAMCollection = "56a868b9-0ad4-11ce-b03a-0020af0ba770"
  struct IAMCollection
    lpVtbl : IAMCollectionVTbl*
  end

  struct IMediaControlVTbl
    query_interface : Proc(IMediaControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaControl*, UInt32)
    release : Proc(IMediaControl*, UInt32)
    get_type_info_count : Proc(IMediaControl*, UInt32*, HRESULT)
    get_type_info : Proc(IMediaControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMediaControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMediaControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    run : Proc(IMediaControl*, HRESULT)
    pause : Proc(IMediaControl*, HRESULT)
    stop : Proc(IMediaControl*, HRESULT)
    get_state : Proc(IMediaControl*, Int32, Int32*, HRESULT)
    render_file : Proc(IMediaControl*, UInt8*, HRESULT)
    add_source_filter : Proc(IMediaControl*, UInt8*, IDispatch*, HRESULT)
    get_filter_collection : Proc(IMediaControl*, IDispatch*, HRESULT)
    get_reg_filter_collection : Proc(IMediaControl*, IDispatch*, HRESULT)
    stop_when_ready : Proc(IMediaControl*, HRESULT)
  end

  IMediaControl_GUID = LibC::GUID.new("56a868b1-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaControl = "56a868b1-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaControl
    lpVtbl : IMediaControlVTbl*
  end

  struct IMediaEventVTbl
    query_interface : Proc(IMediaEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaEvent*, UInt32)
    release : Proc(IMediaEvent*, UInt32)
    get_type_info_count : Proc(IMediaEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMediaEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMediaEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMediaEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_event_handle : Proc(IMediaEvent*, LibC::IntPtrT*, HRESULT)
    get_event : Proc(IMediaEvent*, Int32*, LibC::IntPtrT*, LibC::IntPtrT*, Int32, HRESULT)
    wait_for_completion : Proc(IMediaEvent*, Int32, Int32*, HRESULT)
    cancel_default_handling : Proc(IMediaEvent*, Int32, HRESULT)
    restore_default_handling : Proc(IMediaEvent*, Int32, HRESULT)
    free_event_params : Proc(IMediaEvent*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
  end

  IMediaEvent_GUID = LibC::GUID.new("56a868b6-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaEvent = "56a868b6-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaEvent
    lpVtbl : IMediaEventVTbl*
  end

  struct IMediaEventExVTbl
    query_interface : Proc(IMediaEventEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaEventEx*, UInt32)
    release : Proc(IMediaEventEx*, UInt32)
    get_type_info_count : Proc(IMediaEventEx*, UInt32*, HRESULT)
    get_type_info : Proc(IMediaEventEx*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMediaEventEx*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMediaEventEx*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_event_handle : Proc(IMediaEventEx*, LibC::IntPtrT*, HRESULT)
    get_event : Proc(IMediaEventEx*, Int32*, LibC::IntPtrT*, LibC::IntPtrT*, Int32, HRESULT)
    wait_for_completion : Proc(IMediaEventEx*, Int32, Int32*, HRESULT)
    cancel_default_handling : Proc(IMediaEventEx*, Int32, HRESULT)
    restore_default_handling : Proc(IMediaEventEx*, Int32, HRESULT)
    free_event_params : Proc(IMediaEventEx*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    set_notify_window : Proc(IMediaEventEx*, LibC::IntPtrT, Int32, LibC::IntPtrT, HRESULT)
    set_notify_flags : Proc(IMediaEventEx*, Int32, HRESULT)
    get_notify_flags : Proc(IMediaEventEx*, Int32*, HRESULT)
  end

  IMediaEventEx_GUID = LibC::GUID.new("56a868c0-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaEventEx = "56a868c0-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaEventEx
    lpVtbl : IMediaEventExVTbl*
  end

  struct IMediaPositionVTbl
    query_interface : Proc(IMediaPosition*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaPosition*, UInt32)
    release : Proc(IMediaPosition*, UInt32)
    get_type_info_count : Proc(IMediaPosition*, UInt32*, HRESULT)
    get_type_info : Proc(IMediaPosition*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMediaPosition*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMediaPosition*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_duration : Proc(IMediaPosition*, Float64*, HRESULT)
    put_current_position : Proc(IMediaPosition*, Float64, HRESULT)
    get_current_position : Proc(IMediaPosition*, Float64*, HRESULT)
    get_stop_time : Proc(IMediaPosition*, Float64*, HRESULT)
    put_stop_time : Proc(IMediaPosition*, Float64, HRESULT)
    get_preroll_time : Proc(IMediaPosition*, Float64*, HRESULT)
    put_preroll_time : Proc(IMediaPosition*, Float64, HRESULT)
    put_rate : Proc(IMediaPosition*, Float64, HRESULT)
    get_rate : Proc(IMediaPosition*, Float64*, HRESULT)
    can_seek_forward : Proc(IMediaPosition*, Int32*, HRESULT)
    can_seek_backward : Proc(IMediaPosition*, Int32*, HRESULT)
  end

  IMediaPosition_GUID = LibC::GUID.new("56a868b2-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaPosition = "56a868b2-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaPosition
    lpVtbl : IMediaPositionVTbl*
  end

  struct IBasicAudioVTbl
    query_interface : Proc(IBasicAudio*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBasicAudio*, UInt32)
    release : Proc(IBasicAudio*, UInt32)
    get_type_info_count : Proc(IBasicAudio*, UInt32*, HRESULT)
    get_type_info : Proc(IBasicAudio*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IBasicAudio*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IBasicAudio*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_volume : Proc(IBasicAudio*, Int32, HRESULT)
    get_volume : Proc(IBasicAudio*, Int32*, HRESULT)
    put_balance : Proc(IBasicAudio*, Int32, HRESULT)
    get_balance : Proc(IBasicAudio*, Int32*, HRESULT)
  end

  IBasicAudio_GUID = LibC::GUID.new("56a868b3-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IBasicAudio = "56a868b3-0ad4-11ce-b03a-0020af0ba770"
  struct IBasicAudio
    lpVtbl : IBasicAudioVTbl*
  end

  struct IVideoWindowVTbl
    query_interface : Proc(IVideoWindow*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVideoWindow*, UInt32)
    release : Proc(IVideoWindow*, UInt32)
    get_type_info_count : Proc(IVideoWindow*, UInt32*, HRESULT)
    get_type_info : Proc(IVideoWindow*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IVideoWindow*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IVideoWindow*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    put_caption : Proc(IVideoWindow*, UInt8*, HRESULT)
    get_caption : Proc(IVideoWindow*, UInt8**, HRESULT)
    put_window_style : Proc(IVideoWindow*, Int32, HRESULT)
    get_window_style : Proc(IVideoWindow*, Int32*, HRESULT)
    put_window_style_ex : Proc(IVideoWindow*, Int32, HRESULT)
    get_window_style_ex : Proc(IVideoWindow*, Int32*, HRESULT)
    put_auto_show : Proc(IVideoWindow*, Int32, HRESULT)
    get_auto_show : Proc(IVideoWindow*, Int32*, HRESULT)
    put_window_state : Proc(IVideoWindow*, Int32, HRESULT)
    get_window_state : Proc(IVideoWindow*, Int32*, HRESULT)
    put_background_palette : Proc(IVideoWindow*, Int32, HRESULT)
    get_background_palette : Proc(IVideoWindow*, Int32*, HRESULT)
    put_visible : Proc(IVideoWindow*, Int32, HRESULT)
    get_visible : Proc(IVideoWindow*, Int32*, HRESULT)
    put_left : Proc(IVideoWindow*, Int32, HRESULT)
    get_left : Proc(IVideoWindow*, Int32*, HRESULT)
    put_width : Proc(IVideoWindow*, Int32, HRESULT)
    get_width : Proc(IVideoWindow*, Int32*, HRESULT)
    put_top : Proc(IVideoWindow*, Int32, HRESULT)
    get_top : Proc(IVideoWindow*, Int32*, HRESULT)
    put_height : Proc(IVideoWindow*, Int32, HRESULT)
    get_height : Proc(IVideoWindow*, Int32*, HRESULT)
    put_owner : Proc(IVideoWindow*, LibC::IntPtrT, HRESULT)
    get_owner : Proc(IVideoWindow*, LibC::IntPtrT*, HRESULT)
    put_message_drain : Proc(IVideoWindow*, LibC::IntPtrT, HRESULT)
    get_message_drain : Proc(IVideoWindow*, LibC::IntPtrT*, HRESULT)
    get_border_color : Proc(IVideoWindow*, Int32*, HRESULT)
    put_border_color : Proc(IVideoWindow*, Int32, HRESULT)
    get_full_screen_mode : Proc(IVideoWindow*, Int32*, HRESULT)
    put_full_screen_mode : Proc(IVideoWindow*, Int32, HRESULT)
    set_window_foreground : Proc(IVideoWindow*, Int32, HRESULT)
    notify_owner_message : Proc(IVideoWindow*, LibC::IntPtrT, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    set_window_position : Proc(IVideoWindow*, Int32, Int32, Int32, Int32, HRESULT)
    get_window_position : Proc(IVideoWindow*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_min_ideal_image_size : Proc(IVideoWindow*, Int32*, Int32*, HRESULT)
    get_max_ideal_image_size : Proc(IVideoWindow*, Int32*, Int32*, HRESULT)
    get_restore_position : Proc(IVideoWindow*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    hide_cursor : Proc(IVideoWindow*, OA_BOOL, HRESULT)
    is_cursor_hidden : Proc(IVideoWindow*, Int32*, HRESULT)
  end

  IVideoWindow_GUID = LibC::GUID.new("56a868b4-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IVideoWindow = "56a868b4-0ad4-11ce-b03a-0020af0ba770"
  struct IVideoWindow
    lpVtbl : IVideoWindowVTbl*
  end

  struct IBasicVideoVTbl
    query_interface : Proc(IBasicVideo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBasicVideo*, UInt32)
    release : Proc(IBasicVideo*, UInt32)
    get_type_info_count : Proc(IBasicVideo*, UInt32*, HRESULT)
    get_type_info : Proc(IBasicVideo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IBasicVideo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IBasicVideo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_avg_time_per_frame : Proc(IBasicVideo*, Float64*, HRESULT)
    get_bit_rate : Proc(IBasicVideo*, Int32*, HRESULT)
    get_bit_error_rate : Proc(IBasicVideo*, Int32*, HRESULT)
    get_video_width : Proc(IBasicVideo*, Int32*, HRESULT)
    get_video_height : Proc(IBasicVideo*, Int32*, HRESULT)
    put_source_left : Proc(IBasicVideo*, Int32, HRESULT)
    get_source_left : Proc(IBasicVideo*, Int32*, HRESULT)
    put_source_width : Proc(IBasicVideo*, Int32, HRESULT)
    get_source_width : Proc(IBasicVideo*, Int32*, HRESULT)
    put_source_top : Proc(IBasicVideo*, Int32, HRESULT)
    get_source_top : Proc(IBasicVideo*, Int32*, HRESULT)
    put_source_height : Proc(IBasicVideo*, Int32, HRESULT)
    get_source_height : Proc(IBasicVideo*, Int32*, HRESULT)
    put_destination_left : Proc(IBasicVideo*, Int32, HRESULT)
    get_destination_left : Proc(IBasicVideo*, Int32*, HRESULT)
    put_destination_width : Proc(IBasicVideo*, Int32, HRESULT)
    get_destination_width : Proc(IBasicVideo*, Int32*, HRESULT)
    put_destination_top : Proc(IBasicVideo*, Int32, HRESULT)
    get_destination_top : Proc(IBasicVideo*, Int32*, HRESULT)
    put_destination_height : Proc(IBasicVideo*, Int32, HRESULT)
    get_destination_height : Proc(IBasicVideo*, Int32*, HRESULT)
    set_source_position : Proc(IBasicVideo*, Int32, Int32, Int32, Int32, HRESULT)
    get_source_position : Proc(IBasicVideo*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    set_default_source_position : Proc(IBasicVideo*, HRESULT)
    set_destination_position : Proc(IBasicVideo*, Int32, Int32, Int32, Int32, HRESULT)
    get_destination_position : Proc(IBasicVideo*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    set_default_destination_position : Proc(IBasicVideo*, HRESULT)
    get_video_size : Proc(IBasicVideo*, Int32*, Int32*, HRESULT)
    get_video_palette_entries : Proc(IBasicVideo*, Int32, Int32, Int32*, Int32*, HRESULT)
    get_current_image : Proc(IBasicVideo*, Int32*, Int32*, HRESULT)
    is_using_default_source : Proc(IBasicVideo*, HRESULT)
    is_using_default_destination : Proc(IBasicVideo*, HRESULT)
  end

  IBasicVideo_GUID = LibC::GUID.new("56a868b5-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IBasicVideo = "56a868b5-0ad4-11ce-b03a-0020af0ba770"
  struct IBasicVideo
    lpVtbl : IBasicVideoVTbl*
  end

  struct IBasicVideo2VTbl
    query_interface : Proc(IBasicVideo2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBasicVideo2*, UInt32)
    release : Proc(IBasicVideo2*, UInt32)
    get_type_info_count : Proc(IBasicVideo2*, UInt32*, HRESULT)
    get_type_info : Proc(IBasicVideo2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IBasicVideo2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IBasicVideo2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_avg_time_per_frame : Proc(IBasicVideo2*, Float64*, HRESULT)
    get_bit_rate : Proc(IBasicVideo2*, Int32*, HRESULT)
    get_bit_error_rate : Proc(IBasicVideo2*, Int32*, HRESULT)
    get_video_width : Proc(IBasicVideo2*, Int32*, HRESULT)
    get_video_height : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_source_left : Proc(IBasicVideo2*, Int32, HRESULT)
    get_source_left : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_source_width : Proc(IBasicVideo2*, Int32, HRESULT)
    get_source_width : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_source_top : Proc(IBasicVideo2*, Int32, HRESULT)
    get_source_top : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_source_height : Proc(IBasicVideo2*, Int32, HRESULT)
    get_source_height : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_destination_left : Proc(IBasicVideo2*, Int32, HRESULT)
    get_destination_left : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_destination_width : Proc(IBasicVideo2*, Int32, HRESULT)
    get_destination_width : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_destination_top : Proc(IBasicVideo2*, Int32, HRESULT)
    get_destination_top : Proc(IBasicVideo2*, Int32*, HRESULT)
    put_destination_height : Proc(IBasicVideo2*, Int32, HRESULT)
    get_destination_height : Proc(IBasicVideo2*, Int32*, HRESULT)
    set_source_position : Proc(IBasicVideo2*, Int32, Int32, Int32, Int32, HRESULT)
    get_source_position : Proc(IBasicVideo2*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    set_default_source_position : Proc(IBasicVideo2*, HRESULT)
    set_destination_position : Proc(IBasicVideo2*, Int32, Int32, Int32, Int32, HRESULT)
    get_destination_position : Proc(IBasicVideo2*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    set_default_destination_position : Proc(IBasicVideo2*, HRESULT)
    get_video_size : Proc(IBasicVideo2*, Int32*, Int32*, HRESULT)
    get_video_palette_entries : Proc(IBasicVideo2*, Int32, Int32, Int32*, Int32*, HRESULT)
    get_current_image : Proc(IBasicVideo2*, Int32*, Int32*, HRESULT)
    is_using_default_source : Proc(IBasicVideo2*, HRESULT)
    is_using_default_destination : Proc(IBasicVideo2*, HRESULT)
    get_preferred_aspect_ratio : Proc(IBasicVideo2*, Int32*, Int32*, HRESULT)
  end

  IBasicVideo2_GUID = LibC::GUID.new("329bb360-f6ea-11d1-9038-00a0c9697298")
  CLSID_IBasicVideo2 = "329bb360-f6ea-11d1-9038-00a0c9697298"
  struct IBasicVideo2
    lpVtbl : IBasicVideo2VTbl*
  end

  struct IDeferredCommandVTbl
    query_interface : Proc(IDeferredCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeferredCommand*, UInt32)
    release : Proc(IDeferredCommand*, UInt32)
    cancel : Proc(IDeferredCommand*, HRESULT)
    confidence : Proc(IDeferredCommand*, Int32*, HRESULT)
    postpone : Proc(IDeferredCommand*, Float64, HRESULT)
    get_h_result : Proc(IDeferredCommand*, HRESULT*, HRESULT)
  end

  IDeferredCommand_GUID = LibC::GUID.new("56a868b8-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IDeferredCommand = "56a868b8-0ad4-11ce-b03a-0020af0ba770"
  struct IDeferredCommand
    lpVtbl : IDeferredCommandVTbl*
  end

  struct IQueueCommandVTbl
    query_interface : Proc(IQueueCommand*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQueueCommand*, UInt32)
    release : Proc(IQueueCommand*, UInt32)
    invoke_at_stream_time : Proc(IQueueCommand*, IDeferredCommand*, Float64, Guid*, Int32, Int16, Int32, VARIANT*, VARIANT*, Int16*, HRESULT)
    invoke_at_presentation_time : Proc(IQueueCommand*, IDeferredCommand*, Float64, Guid*, Int32, Int16, Int32, VARIANT*, VARIANT*, Int16*, HRESULT)
  end

  IQueueCommand_GUID = LibC::GUID.new("56a868b7-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IQueueCommand = "56a868b7-0ad4-11ce-b03a-0020af0ba770"
  struct IQueueCommand
    lpVtbl : IQueueCommandVTbl*
  end

  struct IFilterInfoVTbl
    query_interface : Proc(IFilterInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFilterInfo*, UInt32)
    release : Proc(IFilterInfo*, UInt32)
    get_type_info_count : Proc(IFilterInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IFilterInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IFilterInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IFilterInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    find_pin : Proc(IFilterInfo*, UInt8*, IDispatch*, HRESULT)
    get_name : Proc(IFilterInfo*, UInt8**, HRESULT)
    get_vendor_info : Proc(IFilterInfo*, UInt8**, HRESULT)
    get_filter : Proc(IFilterInfo*, IUnknown*, HRESULT)
    get_pins : Proc(IFilterInfo*, IDispatch*, HRESULT)
    get_is_file_source : Proc(IFilterInfo*, Int32*, HRESULT)
    get_filename : Proc(IFilterInfo*, UInt8**, HRESULT)
    put_filename : Proc(IFilterInfo*, UInt8*, HRESULT)
  end

  IFilterInfo_GUID = LibC::GUID.new("56a868ba-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IFilterInfo = "56a868ba-0ad4-11ce-b03a-0020af0ba770"
  struct IFilterInfo
    lpVtbl : IFilterInfoVTbl*
  end

  struct IRegFilterInfoVTbl
    query_interface : Proc(IRegFilterInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRegFilterInfo*, UInt32)
    release : Proc(IRegFilterInfo*, UInt32)
    get_type_info_count : Proc(IRegFilterInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IRegFilterInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IRegFilterInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IRegFilterInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IRegFilterInfo*, UInt8**, HRESULT)
    filter : Proc(IRegFilterInfo*, IDispatch*, HRESULT)
  end

  IRegFilterInfo_GUID = LibC::GUID.new("56a868bb-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IRegFilterInfo = "56a868bb-0ad4-11ce-b03a-0020af0ba770"
  struct IRegFilterInfo
    lpVtbl : IRegFilterInfoVTbl*
  end

  struct IMediaTypeInfoVTbl
    query_interface : Proc(IMediaTypeInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaTypeInfo*, UInt32)
    release : Proc(IMediaTypeInfo*, UInt32)
    get_type_info_count : Proc(IMediaTypeInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IMediaTypeInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMediaTypeInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMediaTypeInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IMediaTypeInfo*, UInt8**, HRESULT)
    get_subtype : Proc(IMediaTypeInfo*, UInt8**, HRESULT)
  end

  IMediaTypeInfo_GUID = LibC::GUID.new("56a868bc-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IMediaTypeInfo = "56a868bc-0ad4-11ce-b03a-0020af0ba770"
  struct IMediaTypeInfo
    lpVtbl : IMediaTypeInfoVTbl*
  end

  struct IPinInfoVTbl
    query_interface : Proc(IPinInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPinInfo*, UInt32)
    release : Proc(IPinInfo*, UInt32)
    get_type_info_count : Proc(IPinInfo*, UInt32*, HRESULT)
    get_type_info : Proc(IPinInfo*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IPinInfo*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IPinInfo*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_pin : Proc(IPinInfo*, IUnknown*, HRESULT)
    get_connected_to : Proc(IPinInfo*, IDispatch*, HRESULT)
    get_connection_media_type : Proc(IPinInfo*, IDispatch*, HRESULT)
    get_filter_info : Proc(IPinInfo*, IDispatch*, HRESULT)
    get_name : Proc(IPinInfo*, UInt8**, HRESULT)
    get_direction : Proc(IPinInfo*, Int32*, HRESULT)
    get_pin_id : Proc(IPinInfo*, UInt8**, HRESULT)
    get_media_types : Proc(IPinInfo*, IDispatch*, HRESULT)
    connect : Proc(IPinInfo*, IUnknown, HRESULT)
    connect_direct : Proc(IPinInfo*, IUnknown, HRESULT)
    connect_with_type : Proc(IPinInfo*, IUnknown, IDispatch, HRESULT)
    disconnect : Proc(IPinInfo*, HRESULT)
    render : Proc(IPinInfo*, HRESULT)
  end

  IPinInfo_GUID = LibC::GUID.new("56a868bd-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IPinInfo = "56a868bd-0ad4-11ce-b03a-0020af0ba770"
  struct IPinInfo
    lpVtbl : IPinInfoVTbl*
  end

  struct IAMStatsVTbl
    query_interface : Proc(IAMStats*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMStats*, UInt32)
    release : Proc(IAMStats*, UInt32)
    get_type_info_count : Proc(IAMStats*, UInt32*, HRESULT)
    get_type_info : Proc(IAMStats*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAMStats*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAMStats*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    reset : Proc(IAMStats*, HRESULT)
    get_count : Proc(IAMStats*, Int32*, HRESULT)
    get_value_by_index : Proc(IAMStats*, Int32, UInt8**, Int32*, Float64*, Float64*, Float64*, Float64*, Float64*, HRESULT)
    get_value_by_name : Proc(IAMStats*, UInt8*, Int32*, Int32*, Float64*, Float64*, Float64*, Float64*, Float64*, HRESULT)
    get_index : Proc(IAMStats*, UInt8*, Int32, Int32*, HRESULT)
    add_value : Proc(IAMStats*, Int32, Float64, HRESULT)
  end

  IAMStats_GUID = LibC::GUID.new("bc9bcf80-dcd2-11d2-abf6-00a0c905f375")
  CLSID_IAMStats = "bc9bcf80-dcd2-11d2-abf6-00a0c905f375"
  struct IAMStats
    lpVtbl : IAMStatsVTbl*
  end

  struct IAMVideoAcceleratorNotifyVTbl
    query_interface : Proc(IAMVideoAcceleratorNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVideoAcceleratorNotify*, UInt32)
    release : Proc(IAMVideoAcceleratorNotify*, UInt32)
    get_uncomp_surfaces_info : Proc(IAMVideoAcceleratorNotify*, Guid*, AMVAUncompBufferInfo*, HRESULT)
    set_uncomp_surfaces_info : Proc(IAMVideoAcceleratorNotify*, UInt32, HRESULT)
    get_create_video_accelerator_data : Proc(IAMVideoAcceleratorNotify*, Guid*, UInt32*, Void**, HRESULT)
  end

  IAMVideoAcceleratorNotify_GUID = LibC::GUID.new("256a6a21-fbad-11d1-82bf-00a0c9696c8f")
  CLSID_IAMVideoAcceleratorNotify = "256a6a21-fbad-11d1-82bf-00a0c9696c8f"
  struct IAMVideoAcceleratorNotify
    lpVtbl : IAMVideoAcceleratorNotifyVTbl*
  end

  struct IAMVideoAcceleratorVTbl
    query_interface : Proc(IAMVideoAccelerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMVideoAccelerator*, UInt32)
    release : Proc(IAMVideoAccelerator*, UInt32)
    get_video_accelerator_gui_ds : Proc(IAMVideoAccelerator*, UInt32*, Guid*, HRESULT)
    get_uncomp_formats_supported : Proc(IAMVideoAccelerator*, Guid*, UInt32*, DDPIXELFORMAT*, HRESULT)
    get_internal_mem_info : Proc(IAMVideoAccelerator*, Guid*, AMVAUncompDataInfo*, AMVAInternalMemInfo*, HRESULT)
    get_comp_buffer_info : Proc(IAMVideoAccelerator*, Guid*, AMVAUncompDataInfo*, UInt32*, AMVACompBufferInfo*, HRESULT)
    get_internal_comp_buffer_info : Proc(IAMVideoAccelerator*, UInt32*, AMVACompBufferInfo*, HRESULT)
    begin_frame : Proc(IAMVideoAccelerator*, AMVABeginFrameInfo*, HRESULT)
    end_frame : Proc(IAMVideoAccelerator*, AMVAEndFrameInfo*, HRESULT)
    get_buffer : Proc(IAMVideoAccelerator*, UInt32, UInt32, LibC::BOOL, Void**, Int32*, HRESULT)
    release_buffer : Proc(IAMVideoAccelerator*, UInt32, UInt32, HRESULT)
    execute : Proc(IAMVideoAccelerator*, UInt32, Void*, UInt32, Void*, UInt32, UInt32, AMVABUFFERINFO*, HRESULT)
    query_render_status : Proc(IAMVideoAccelerator*, UInt32, UInt32, UInt32, HRESULT)
    display_frame : Proc(IAMVideoAccelerator*, UInt32, IMediaSample, HRESULT)
  end

  IAMVideoAccelerator_GUID = LibC::GUID.new("256a6a22-fbad-11d1-82bf-00a0c9696c8f")
  CLSID_IAMVideoAccelerator = "256a6a22-fbad-11d1-82bf-00a0c9696c8f"
  struct IAMVideoAccelerator
    lpVtbl : IAMVideoAcceleratorVTbl*
  end

  struct IAMWstDecoderVTbl
    query_interface : Proc(IAMWstDecoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMWstDecoder*, UInt32)
    release : Proc(IAMWstDecoder*, UInt32)
    get_decoder_level : Proc(IAMWstDecoder*, AM_WST_LEVEL*, HRESULT)
    get_current_service : Proc(IAMWstDecoder*, AM_WST_SERVICE*, HRESULT)
    get_service_state : Proc(IAMWstDecoder*, AM_WST_STATE*, HRESULT)
    set_service_state : Proc(IAMWstDecoder*, AM_WST_STATE, HRESULT)
    get_output_format : Proc(IAMWstDecoder*, BITMAPINFOHEADER*, HRESULT)
    set_output_format : Proc(IAMWstDecoder*, BITMAPINFO*, HRESULT)
    get_background_color : Proc(IAMWstDecoder*, UInt32*, HRESULT)
    set_background_color : Proc(IAMWstDecoder*, UInt32, HRESULT)
    get_redraw_always : Proc(IAMWstDecoder*, Int32*, HRESULT)
    set_redraw_always : Proc(IAMWstDecoder*, LibC::BOOL, HRESULT)
    get_draw_background_mode : Proc(IAMWstDecoder*, AM_WST_DRAWBGMODE*, HRESULT)
    set_draw_background_mode : Proc(IAMWstDecoder*, AM_WST_DRAWBGMODE, HRESULT)
    set_answer_mode : Proc(IAMWstDecoder*, LibC::BOOL, HRESULT)
    get_answer_mode : Proc(IAMWstDecoder*, LibC::BOOL*, HRESULT)
    set_hold_page : Proc(IAMWstDecoder*, LibC::BOOL, HRESULT)
    get_hold_page : Proc(IAMWstDecoder*, LibC::BOOL*, HRESULT)
    get_current_page : Proc(IAMWstDecoder*, AM_WST_PAGE*, HRESULT)
    set_current_page : Proc(IAMWstDecoder*, AM_WST_PAGE, HRESULT)
  end

  struct IAMWstDecoder
    lpVtbl : IAMWstDecoderVTbl*
  end

  struct IKsTopologyInfoVTbl
    query_interface : Proc(IKsTopologyInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IKsTopologyInfo*, UInt32)
    release : Proc(IKsTopologyInfo*, UInt32)
    get_num_categories : Proc(IKsTopologyInfo*, UInt32*, HRESULT)
    get_category : Proc(IKsTopologyInfo*, UInt32, Guid*, HRESULT)
    get_num_connections : Proc(IKsTopologyInfo*, UInt32*, HRESULT)
    get_connection_info : Proc(IKsTopologyInfo*, UInt32, KSTOPOLOGY_CONNECTION*, HRESULT)
    get_node_name : Proc(IKsTopologyInfo*, UInt32, LibC::LPWSTR, UInt32, UInt32*, HRESULT)
    get_num_nodes : Proc(IKsTopologyInfo*, UInt32*, HRESULT)
    get_node_type : Proc(IKsTopologyInfo*, UInt32, Guid*, HRESULT)
    create_node_instance : Proc(IKsTopologyInfo*, UInt32, Guid*, Void**, HRESULT)
  end

  IKsTopologyInfo_GUID = LibC::GUID.new("720d4ac0-7533-11d0-a5d6-28db04c10000")
  CLSID_IKsTopologyInfo = "720d4ac0-7533-11d0-a5d6-28db04c10000"
  struct IKsTopologyInfo
    lpVtbl : IKsTopologyInfoVTbl*
  end

  struct ISelectorVTbl
    query_interface : Proc(ISelector*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISelector*, UInt32)
    release : Proc(ISelector*, UInt32)
    get_num_sources : Proc(ISelector*, UInt32*, HRESULT)
    get_source_node_id : Proc(ISelector*, UInt32*, HRESULT)
    put_source_node_id : Proc(ISelector*, UInt32, HRESULT)
  end

  ISelector_GUID = LibC::GUID.new("1abdaeca-68b6-4f83-9371-b413907c7b9f")
  CLSID_ISelector = "1abdaeca-68b6-4f83-9371-b413907c7b9f"
  struct ISelector
    lpVtbl : ISelectorVTbl*
  end

  struct ICameraControlVTbl
    query_interface : Proc(ICameraControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICameraControl*, UInt32)
    release : Proc(ICameraControl*, UInt32)
    get_exposure : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_exposure : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_exposure : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_focus : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_focus : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_focus : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_iris : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_iris : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_iris : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_zoom : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_zoom : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_zoom : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_focal_lengths : Proc(ICameraControl*, Int32*, Int32*, Int32*, HRESULT)
    get_pan : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_pan : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_pan : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_tilt : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_tilt : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_tilt : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_pan_tilt : Proc(ICameraControl*, Int32*, Int32*, Int32*, HRESULT)
    put_pan_tilt : Proc(ICameraControl*, Int32, Int32, Int32, HRESULT)
    get_roll : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_roll : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_roll : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_exposure_relative : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_exposure_relative : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_exposure_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_focus_relative : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_focus_relative : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_focus_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_iris_relative : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_iris_relative : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_iris_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_zoom_relative : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_zoom_relative : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_zoom_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_pan_relative : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_pan_relative : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_tilt_relative : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_tilt_relative : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_tilt_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_pan_tilt_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, HRESULT)
    put_pan_tilt_relative : Proc(ICameraControl*, Int32, Int32, Int32, HRESULT)
    get_range_pan_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_roll_relative : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_roll_relative : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_range_roll_relative : Proc(ICameraControl*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_scan_mode : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_scan_mode : Proc(ICameraControl*, Int32, Int32, HRESULT)
    get_privacy_mode : Proc(ICameraControl*, Int32*, Int32*, HRESULT)
    put_privacy_mode : Proc(ICameraControl*, Int32, Int32, HRESULT)
  end

  ICameraControl_GUID = LibC::GUID.new("2ba1785d-4d1b-44ef-85e8-c7f1d3f20184")
  CLSID_ICameraControl = "2ba1785d-4d1b-44ef-85e8-c7f1d3f20184"
  struct ICameraControl
    lpVtbl : ICameraControlVTbl*
  end

  struct IVideoProcAmpVTbl
    query_interface : Proc(IVideoProcAmp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVideoProcAmp*, UInt32)
    release : Proc(IVideoProcAmp*, UInt32)
    get_backlight_compensation : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_backlight_compensation : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_backlight_compensation : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_brightness : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_brightness : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_brightness : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_color_enable : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_color_enable : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_color_enable : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_contrast : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_contrast : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_contrast : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_gamma : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_gamma : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_gamma : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_saturation : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_saturation : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_saturation : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_sharpness : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_sharpness : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_sharpness : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_white_balance : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_white_balance : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_white_balance : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_gain : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_gain : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_gain : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_hue : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_hue : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_hue : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_digital_multiplier : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_digital_multiplier : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_digital_multiplier : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_powerline_frequency : Proc(IVideoProcAmp*, Int32*, Int32*, HRESULT)
    put_powerline_frequency : Proc(IVideoProcAmp*, Int32, Int32, HRESULT)
    get_range_powerline_frequency : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_white_balance_component : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, HRESULT)
    put_white_balance_component : Proc(IVideoProcAmp*, Int32, Int32, Int32, HRESULT)
    get_range_white_balance_component : Proc(IVideoProcAmp*, Int32*, Int32*, Int32*, Int32*, Int32*, HRESULT)
  end

  IVideoProcAmp_GUID = LibC::GUID.new("4050560e-42a7-413a-85c2-09269a2d0f44")
  CLSID_IVideoProcAmp = "4050560e-42a7-413a-85c2-09269a2d0f44"
  struct IVideoProcAmp
    lpVtbl : IVideoProcAmpVTbl*
  end

  struct IKsNodeControlVTbl
    query_interface : Proc(IKsNodeControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IKsNodeControl*, UInt32)
    release : Proc(IKsNodeControl*, UInt32)
    put_node_id : Proc(IKsNodeControl*, UInt32, HRESULT)
    put_ks_control : Proc(IKsNodeControl*, Void*, HRESULT)
  end

  IKsNodeControl_GUID = LibC::GUID.new("11737c14-24a7-4bb5-81a0-0d003813b0c4")
  CLSID_IKsNodeControl = "11737c14-24a7-4bb5-81a0-0d003813b0c4"
  struct IKsNodeControl
    lpVtbl : IKsNodeControlVTbl*
  end

  struct IConfigAsfWriterVTbl
    query_interface : Proc(IConfigAsfWriter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IConfigAsfWriter*, UInt32)
    release : Proc(IConfigAsfWriter*, UInt32)
    configure_filter_using_profile_id : Proc(IConfigAsfWriter*, UInt32, HRESULT)
    get_current_profile_id : Proc(IConfigAsfWriter*, UInt32*, HRESULT)
    configure_filter_using_profile_guid : Proc(IConfigAsfWriter*, Guid*, HRESULT)
    get_current_profile_guid : Proc(IConfigAsfWriter*, Guid*, HRESULT)
    configure_filter_using_profile : Proc(IConfigAsfWriter*, IWMProfile, HRESULT)
    get_current_profile : Proc(IConfigAsfWriter*, IWMProfile*, HRESULT)
    set_index_mode : Proc(IConfigAsfWriter*, LibC::BOOL, HRESULT)
    get_index_mode : Proc(IConfigAsfWriter*, LibC::BOOL*, HRESULT)
  end

  IConfigAsfWriter_GUID = LibC::GUID.new("45086030-f7e4-486a-b504-826bb5792a3b")
  CLSID_IConfigAsfWriter = "45086030-f7e4-486a-b504-826bb5792a3b"
  struct IConfigAsfWriter
    lpVtbl : IConfigAsfWriterVTbl*
  end

  struct IConfigAsfWriter2VTbl
    query_interface : Proc(IConfigAsfWriter2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IConfigAsfWriter2*, UInt32)
    release : Proc(IConfigAsfWriter2*, UInt32)
    configure_filter_using_profile_id : Proc(IConfigAsfWriter2*, UInt32, HRESULT)
    get_current_profile_id : Proc(IConfigAsfWriter2*, UInt32*, HRESULT)
    configure_filter_using_profile_guid : Proc(IConfigAsfWriter2*, Guid*, HRESULT)
    get_current_profile_guid : Proc(IConfigAsfWriter2*, Guid*, HRESULT)
    configure_filter_using_profile : Proc(IConfigAsfWriter2*, IWMProfile, HRESULT)
    get_current_profile : Proc(IConfigAsfWriter2*, IWMProfile*, HRESULT)
    set_index_mode : Proc(IConfigAsfWriter2*, LibC::BOOL, HRESULT)
    get_index_mode : Proc(IConfigAsfWriter2*, LibC::BOOL*, HRESULT)
    stream_num_from_pin : Proc(IConfigAsfWriter2*, IPin, UInt16*, HRESULT)
    set_param : Proc(IConfigAsfWriter2*, UInt32, UInt32, UInt32, HRESULT)
    get_param : Proc(IConfigAsfWriter2*, UInt32, UInt32*, UInt32*, HRESULT)
    reset_multi_pass_state : Proc(IConfigAsfWriter2*, HRESULT)
  end

  IConfigAsfWriter2_GUID = LibC::GUID.new("7989ccaa-53f0-44f0-884a-f3b03f6ae066")
  CLSID_IConfigAsfWriter2 = "7989ccaa-53f0-44f0-884a-f3b03f6ae066"
  struct IConfigAsfWriter2
    lpVtbl : IConfigAsfWriter2VTbl*
  end

  struct IMultiMediaStreamVTbl
    query_interface : Proc(IMultiMediaStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMultiMediaStream*, UInt32)
    release : Proc(IMultiMediaStream*, UInt32)
    get_information : Proc(IMultiMediaStream*, MMSSF_GET_INFORMATION_FLAGS*, STREAM_TYPE*, HRESULT)
    get_media_stream : Proc(IMultiMediaStream*, Guid*, IMediaStream*, HRESULT)
    enum_media_streams : Proc(IMultiMediaStream*, Int32, IMediaStream*, HRESULT)
    get_state : Proc(IMultiMediaStream*, STREAM_STATE*, HRESULT)
    set_state : Proc(IMultiMediaStream*, STREAM_STATE, HRESULT)
    get_time : Proc(IMultiMediaStream*, Int64*, HRESULT)
    get_duration : Proc(IMultiMediaStream*, Int64*, HRESULT)
    seek : Proc(IMultiMediaStream*, Int64, HRESULT)
    get_end_of_stream_event_handle : Proc(IMultiMediaStream*, LibC::HANDLE*, HRESULT)
  end

  IMultiMediaStream_GUID = LibC::GUID.new("b502d1bc-9a57-11d0-8fde-00c04fd9189d")
  CLSID_IMultiMediaStream = "b502d1bc-9a57-11d0-8fde-00c04fd9189d"
  struct IMultiMediaStream
    lpVtbl : IMultiMediaStreamVTbl*
  end

  struct IMediaStreamVTbl
    query_interface : Proc(IMediaStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaStream*, UInt32)
    release : Proc(IMediaStream*, UInt32)
    get_multi_media_stream : Proc(IMediaStream*, IMultiMediaStream*, HRESULT)
    get_information : Proc(IMediaStream*, Guid*, STREAM_TYPE*, HRESULT)
    set_same_format : Proc(IMediaStream*, IMediaStream, UInt32, HRESULT)
    allocate_sample : Proc(IMediaStream*, UInt32, IStreamSample*, HRESULT)
    create_shared_sample : Proc(IMediaStream*, IStreamSample, UInt32, IStreamSample*, HRESULT)
    send_end_of_stream : Proc(IMediaStream*, UInt32, HRESULT)
  end

  IMediaStream_GUID = LibC::GUID.new("b502d1bd-9a57-11d0-8fde-00c04fd9189d")
  CLSID_IMediaStream = "b502d1bd-9a57-11d0-8fde-00c04fd9189d"
  struct IMediaStream
    lpVtbl : IMediaStreamVTbl*
  end

  struct IStreamSampleVTbl
    query_interface : Proc(IStreamSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamSample*, UInt32)
    release : Proc(IStreamSample*, UInt32)
    get_media_stream : Proc(IStreamSample*, IMediaStream*, HRESULT)
    get_sample_times : Proc(IStreamSample*, Int64*, Int64*, Int64*, HRESULT)
    set_sample_times : Proc(IStreamSample*, Int64*, Int64*, HRESULT)
    update : Proc(IStreamSample*, UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)
    completion_status : Proc(IStreamSample*, UInt32, UInt32, HRESULT)
  end

  IStreamSample_GUID = LibC::GUID.new("b502d1be-9a57-11d0-8fde-00c04fd9189d")
  CLSID_IStreamSample = "b502d1be-9a57-11d0-8fde-00c04fd9189d"
  struct IStreamSample
    lpVtbl : IStreamSampleVTbl*
  end

  struct IDirectDrawMediaStreamVTbl
    query_interface : Proc(IDirectDrawMediaStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawMediaStream*, UInt32)
    release : Proc(IDirectDrawMediaStream*, UInt32)
    get_multi_media_stream : Proc(IDirectDrawMediaStream*, IMultiMediaStream*, HRESULT)
    get_information : Proc(IDirectDrawMediaStream*, Guid*, STREAM_TYPE*, HRESULT)
    set_same_format : Proc(IDirectDrawMediaStream*, IMediaStream, UInt32, HRESULT)
    allocate_sample : Proc(IDirectDrawMediaStream*, UInt32, IStreamSample*, HRESULT)
    create_shared_sample : Proc(IDirectDrawMediaStream*, IStreamSample, UInt32, IStreamSample*, HRESULT)
    send_end_of_stream : Proc(IDirectDrawMediaStream*, UInt32, HRESULT)
    get_format : Proc(IDirectDrawMediaStream*, DDSURFACEDESC*, IDirectDrawPalette*, DDSURFACEDESC*, UInt32*, HRESULT)
    set_format : Proc(IDirectDrawMediaStream*, DDSURFACEDESC*, IDirectDrawPalette, HRESULT)
    get_direct_draw : Proc(IDirectDrawMediaStream*, IDirectDraw*, HRESULT)
    set_direct_draw : Proc(IDirectDrawMediaStream*, IDirectDraw, HRESULT)
    create_sample : Proc(IDirectDrawMediaStream*, IDirectDrawSurface, RECT*, UInt32, IDirectDrawStreamSample*, HRESULT)
    get_time_per_frame : Proc(IDirectDrawMediaStream*, Int64*, HRESULT)
  end

  IDirectDrawMediaStream_GUID = LibC::GUID.new("f4104fce-9a70-11d0-8fde-00c04fd9189d")
  CLSID_IDirectDrawMediaStream = "f4104fce-9a70-11d0-8fde-00c04fd9189d"
  struct IDirectDrawMediaStream
    lpVtbl : IDirectDrawMediaStreamVTbl*
  end

  struct IDirectDrawStreamSampleVTbl
    query_interface : Proc(IDirectDrawStreamSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawStreamSample*, UInt32)
    release : Proc(IDirectDrawStreamSample*, UInt32)
    get_media_stream : Proc(IDirectDrawStreamSample*, IMediaStream*, HRESULT)
    get_sample_times : Proc(IDirectDrawStreamSample*, Int64*, Int64*, Int64*, HRESULT)
    set_sample_times : Proc(IDirectDrawStreamSample*, Int64*, Int64*, HRESULT)
    update : Proc(IDirectDrawStreamSample*, UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)
    completion_status : Proc(IDirectDrawStreamSample*, UInt32, UInt32, HRESULT)
    get_surface : Proc(IDirectDrawStreamSample*, IDirectDrawSurface*, RECT*, HRESULT)
    set_rect : Proc(IDirectDrawStreamSample*, RECT*, HRESULT)
  end

  IDirectDrawStreamSample_GUID = LibC::GUID.new("f4104fcf-9a70-11d0-8fde-00c04fd9189d")
  CLSID_IDirectDrawStreamSample = "f4104fcf-9a70-11d0-8fde-00c04fd9189d"
  struct IDirectDrawStreamSample
    lpVtbl : IDirectDrawStreamSampleVTbl*
  end

  struct IAudioMediaStreamVTbl
    query_interface : Proc(IAudioMediaStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioMediaStream*, UInt32)
    release : Proc(IAudioMediaStream*, UInt32)
    get_multi_media_stream : Proc(IAudioMediaStream*, IMultiMediaStream*, HRESULT)
    get_information : Proc(IAudioMediaStream*, Guid*, STREAM_TYPE*, HRESULT)
    set_same_format : Proc(IAudioMediaStream*, IMediaStream, UInt32, HRESULT)
    allocate_sample : Proc(IAudioMediaStream*, UInt32, IStreamSample*, HRESULT)
    create_shared_sample : Proc(IAudioMediaStream*, IStreamSample, UInt32, IStreamSample*, HRESULT)
    send_end_of_stream : Proc(IAudioMediaStream*, UInt32, HRESULT)
    get_format : Proc(IAudioMediaStream*, WAVEFORMATEX*, HRESULT)
    set_format : Proc(IAudioMediaStream*, WAVEFORMATEX*, HRESULT)
    create_sample : Proc(IAudioMediaStream*, IAudioData, UInt32, IAudioStreamSample*, HRESULT)
  end

  IAudioMediaStream_GUID = LibC::GUID.new("f7537560-a3be-11d0-8212-00c04fc32c45")
  CLSID_IAudioMediaStream = "f7537560-a3be-11d0-8212-00c04fc32c45"
  struct IAudioMediaStream
    lpVtbl : IAudioMediaStreamVTbl*
  end

  struct IAudioStreamSampleVTbl
    query_interface : Proc(IAudioStreamSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioStreamSample*, UInt32)
    release : Proc(IAudioStreamSample*, UInt32)
    get_media_stream : Proc(IAudioStreamSample*, IMediaStream*, HRESULT)
    get_sample_times : Proc(IAudioStreamSample*, Int64*, Int64*, Int64*, HRESULT)
    set_sample_times : Proc(IAudioStreamSample*, Int64*, Int64*, HRESULT)
    update : Proc(IAudioStreamSample*, UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)
    completion_status : Proc(IAudioStreamSample*, UInt32, UInt32, HRESULT)
    get_audio_data : Proc(IAudioStreamSample*, IAudioData*, HRESULT)
  end

  IAudioStreamSample_GUID = LibC::GUID.new("345fee00-aba5-11d0-8212-00c04fc32c45")
  CLSID_IAudioStreamSample = "345fee00-aba5-11d0-8212-00c04fc32c45"
  struct IAudioStreamSample
    lpVtbl : IAudioStreamSampleVTbl*
  end

  struct IMemoryDataVTbl
    query_interface : Proc(IMemoryData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMemoryData*, UInt32)
    release : Proc(IMemoryData*, UInt32)
    set_buffer : Proc(IMemoryData*, UInt32, UInt8*, UInt32, HRESULT)
    get_info : Proc(IMemoryData*, UInt32*, UInt8**, UInt32*, HRESULT)
    set_actual : Proc(IMemoryData*, UInt32, HRESULT)
  end

  IMemoryData_GUID = LibC::GUID.new("327fc560-af60-11d0-8212-00c04fc32c45")
  CLSID_IMemoryData = "327fc560-af60-11d0-8212-00c04fc32c45"
  struct IMemoryData
    lpVtbl : IMemoryDataVTbl*
  end

  struct IAudioDataVTbl
    query_interface : Proc(IAudioData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioData*, UInt32)
    release : Proc(IAudioData*, UInt32)
    set_buffer : Proc(IAudioData*, UInt32, UInt8*, UInt32, HRESULT)
    get_info : Proc(IAudioData*, UInt32*, UInt8**, UInt32*, HRESULT)
    set_actual : Proc(IAudioData*, UInt32, HRESULT)
    get_format : Proc(IAudioData*, WAVEFORMATEX*, HRESULT)
    set_format : Proc(IAudioData*, WAVEFORMATEX*, HRESULT)
  end

  IAudioData_GUID = LibC::GUID.new("54c719c0-af60-11d0-8212-00c04fc32c45")
  CLSID_IAudioData = "54c719c0-af60-11d0-8212-00c04fc32c45"
  struct IAudioData
    lpVtbl : IAudioDataVTbl*
  end

  struct IAMMultiMediaStreamVTbl
    query_interface : Proc(IAMMultiMediaStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMMultiMediaStream*, UInt32)
    release : Proc(IAMMultiMediaStream*, UInt32)
    get_information : Proc(IAMMultiMediaStream*, MMSSF_GET_INFORMATION_FLAGS*, STREAM_TYPE*, HRESULT)
    get_media_stream : Proc(IAMMultiMediaStream*, Guid*, IMediaStream*, HRESULT)
    enum_media_streams : Proc(IAMMultiMediaStream*, Int32, IMediaStream*, HRESULT)
    get_state : Proc(IAMMultiMediaStream*, STREAM_STATE*, HRESULT)
    set_state : Proc(IAMMultiMediaStream*, STREAM_STATE, HRESULT)
    get_time : Proc(IAMMultiMediaStream*, Int64*, HRESULT)
    get_duration : Proc(IAMMultiMediaStream*, Int64*, HRESULT)
    seek : Proc(IAMMultiMediaStream*, Int64, HRESULT)
    get_end_of_stream_event_handle : Proc(IAMMultiMediaStream*, LibC::HANDLE*, HRESULT)
    initialize : Proc(IAMMultiMediaStream*, STREAM_TYPE, AMMSF_MMS_INIT_FLAGS, IGraphBuilder, HRESULT)
    get_filter_graph : Proc(IAMMultiMediaStream*, IGraphBuilder*, HRESULT)
    get_filter : Proc(IAMMultiMediaStream*, IMediaStreamFilter*, HRESULT)
    add_media_stream : Proc(IAMMultiMediaStream*, IUnknown, Guid*, AMMSF_MS_FLAGS, IMediaStream*, HRESULT)
    open_file : Proc(IAMMultiMediaStream*, LibC::LPWSTR, UInt32, HRESULT)
    open_moniker : Proc(IAMMultiMediaStream*, IBindCtx, IMoniker, UInt32, HRESULT)
    render : Proc(IAMMultiMediaStream*, UInt32, HRESULT)
  end

  IAMMultiMediaStream_GUID = LibC::GUID.new("bebe595c-9a6f-11d0-8fde-00c04fd9189d")
  CLSID_IAMMultiMediaStream = "bebe595c-9a6f-11d0-8fde-00c04fd9189d"
  struct IAMMultiMediaStream
    lpVtbl : IAMMultiMediaStreamVTbl*
  end

  struct IAMMediaStreamVTbl
    query_interface : Proc(IAMMediaStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMMediaStream*, UInt32)
    release : Proc(IAMMediaStream*, UInt32)
    get_multi_media_stream : Proc(IAMMediaStream*, IMultiMediaStream*, HRESULT)
    get_information : Proc(IAMMediaStream*, Guid*, STREAM_TYPE*, HRESULT)
    set_same_format : Proc(IAMMediaStream*, IMediaStream, UInt32, HRESULT)
    allocate_sample : Proc(IAMMediaStream*, UInt32, IStreamSample*, HRESULT)
    create_shared_sample : Proc(IAMMediaStream*, IStreamSample, UInt32, IStreamSample*, HRESULT)
    send_end_of_stream : Proc(IAMMediaStream*, UInt32, HRESULT)
    initialize : Proc(IAMMediaStream*, IUnknown, UInt32, Guid*, STREAM_TYPE, HRESULT)
    set_state : Proc(IAMMediaStream*, FILTER_STATE, HRESULT)
    join_am_multi_media_stream : Proc(IAMMediaStream*, IAMMultiMediaStream, HRESULT)
    join_filter : Proc(IAMMediaStream*, IMediaStreamFilter, HRESULT)
    join_filter_graph : Proc(IAMMediaStream*, IFilterGraph, HRESULT)
  end

  IAMMediaStream_GUID = LibC::GUID.new("bebe595d-9a6f-11d0-8fde-00c04fd9189d")
  CLSID_IAMMediaStream = "bebe595d-9a6f-11d0-8fde-00c04fd9189d"
  struct IAMMediaStream
    lpVtbl : IAMMediaStreamVTbl*
  end

  struct IMediaStreamFilterVTbl
    query_interface : Proc(IMediaStreamFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaStreamFilter*, UInt32)
    release : Proc(IMediaStreamFilter*, UInt32)
    get_class_id : Proc(IMediaStreamFilter*, Guid*, HRESULT)
    stop : Proc(IMediaStreamFilter*, HRESULT)
    pause : Proc(IMediaStreamFilter*, HRESULT)
    run : Proc(IMediaStreamFilter*, Int64, HRESULT)
    get_state : Proc(IMediaStreamFilter*, UInt32, FILTER_STATE*, HRESULT)
    set_sync_source : Proc(IMediaStreamFilter*, IReferenceClock, HRESULT)
    get_sync_source : Proc(IMediaStreamFilter*, IReferenceClock*, HRESULT)
    enum_pins : Proc(IMediaStreamFilter*, IEnumPins*, HRESULT)
    find_pin : Proc(IMediaStreamFilter*, LibC::LPWSTR, IPin*, HRESULT)
    query_filter_info : Proc(IMediaStreamFilter*, FILTER_INFO*, HRESULT)
    join_filter_graph : Proc(IMediaStreamFilter*, IFilterGraph, LibC::LPWSTR, HRESULT)
    query_vendor_info : Proc(IMediaStreamFilter*, LibC::LPWSTR*, HRESULT)
    add_media_stream : Proc(IMediaStreamFilter*, IAMMediaStream, HRESULT)
    get_media_stream : Proc(IMediaStreamFilter*, Guid*, IMediaStream*, HRESULT)
    enum_media_streams : Proc(IMediaStreamFilter*, Int32, IMediaStream*, HRESULT)
    support_seeking : Proc(IMediaStreamFilter*, LibC::BOOL, HRESULT)
    reference_time_to_stream_time : Proc(IMediaStreamFilter*, Int64*, HRESULT)
    get_current_stream_time : Proc(IMediaStreamFilter*, Int64*, HRESULT)
    wait_until : Proc(IMediaStreamFilter*, Int64, HRESULT)
    flush : Proc(IMediaStreamFilter*, LibC::BOOL, HRESULT)
    end_of_stream : Proc(IMediaStreamFilter*, HRESULT)
  end

  IMediaStreamFilter_GUID = LibC::GUID.new("bebe595e-9a6f-11d0-8fde-00c04fd9189d")
  CLSID_IMediaStreamFilter = "bebe595e-9a6f-11d0-8fde-00c04fd9189d"
  struct IMediaStreamFilter
    lpVtbl : IMediaStreamFilterVTbl*
  end

  struct IDirectDrawMediaSampleAllocatorVTbl
    query_interface : Proc(IDirectDrawMediaSampleAllocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawMediaSampleAllocator*, UInt32)
    release : Proc(IDirectDrawMediaSampleAllocator*, UInt32)
    get_direct_draw : Proc(IDirectDrawMediaSampleAllocator*, IDirectDraw*, HRESULT)
  end

  IDirectDrawMediaSampleAllocator_GUID = LibC::GUID.new("ab6b4afc-f6e4-11d0-900d-00c04fd9189d")
  CLSID_IDirectDrawMediaSampleAllocator = "ab6b4afc-f6e4-11d0-900d-00c04fd9189d"
  struct IDirectDrawMediaSampleAllocator
    lpVtbl : IDirectDrawMediaSampleAllocatorVTbl*
  end

  struct IDirectDrawMediaSampleVTbl
    query_interface : Proc(IDirectDrawMediaSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawMediaSample*, UInt32)
    release : Proc(IDirectDrawMediaSample*, UInt32)
    get_surface_and_release_lock : Proc(IDirectDrawMediaSample*, IDirectDrawSurface*, RECT*, HRESULT)
    lock_media_sample_pointer : Proc(IDirectDrawMediaSample*, HRESULT)
  end

  IDirectDrawMediaSample_GUID = LibC::GUID.new("ab6b4afe-f6e4-11d0-900d-00c04fd9189d")
  CLSID_IDirectDrawMediaSample = "ab6b4afe-f6e4-11d0-900d-00c04fd9189d"
  struct IDirectDrawMediaSample
    lpVtbl : IDirectDrawMediaSampleVTbl*
  end

  struct IAMMediaTypeStreamVTbl
    query_interface : Proc(IAMMediaTypeStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMMediaTypeStream*, UInt32)
    release : Proc(IAMMediaTypeStream*, UInt32)
    get_multi_media_stream : Proc(IAMMediaTypeStream*, IMultiMediaStream*, HRESULT)
    get_information : Proc(IAMMediaTypeStream*, Guid*, STREAM_TYPE*, HRESULT)
    set_same_format : Proc(IAMMediaTypeStream*, IMediaStream, UInt32, HRESULT)
    allocate_sample : Proc(IAMMediaTypeStream*, UInt32, IStreamSample*, HRESULT)
    create_shared_sample : Proc(IAMMediaTypeStream*, IStreamSample, UInt32, IStreamSample*, HRESULT)
    send_end_of_stream : Proc(IAMMediaTypeStream*, UInt32, HRESULT)
    get_format : Proc(IAMMediaTypeStream*, AM_MEDIA_TYPE*, UInt32, HRESULT)
    set_format : Proc(IAMMediaTypeStream*, AM_MEDIA_TYPE*, UInt32, HRESULT)
    create_sample : Proc(IAMMediaTypeStream*, Int32, UInt8*, UInt32, IUnknown, IAMMediaTypeSample*, HRESULT)
    get_stream_allocator_requirements : Proc(IAMMediaTypeStream*, ALLOCATOR_PROPERTIES*, HRESULT)
    set_stream_allocator_requirements : Proc(IAMMediaTypeStream*, ALLOCATOR_PROPERTIES*, HRESULT)
  end

  IAMMediaTypeStream_GUID = LibC::GUID.new("ab6b4afa-f6e4-11d0-900d-00c04fd9189d")
  CLSID_IAMMediaTypeStream = "ab6b4afa-f6e4-11d0-900d-00c04fd9189d"
  struct IAMMediaTypeStream
    lpVtbl : IAMMediaTypeStreamVTbl*
  end

  struct IAMMediaTypeSampleVTbl
    query_interface : Proc(IAMMediaTypeSample*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMMediaTypeSample*, UInt32)
    release : Proc(IAMMediaTypeSample*, UInt32)
    get_media_stream : Proc(IAMMediaTypeSample*, IMediaStream*, HRESULT)
    get_sample_times : Proc(IAMMediaTypeSample*, Int64*, Int64*, Int64*, HRESULT)
    set_sample_times : Proc(IAMMediaTypeSample*, Int64*, Int64*, HRESULT)
    update : Proc(IAMMediaTypeSample*, UInt32, LibC::HANDLE, PAPCFUNC, LibC::UINT_PTR, HRESULT)
    completion_status : Proc(IAMMediaTypeSample*, UInt32, UInt32, HRESULT)
    set_pointer : Proc(IAMMediaTypeSample*, UInt8*, Int32, HRESULT)
    get_pointer : Proc(IAMMediaTypeSample*, UInt8**, HRESULT)
    get_size : Proc(IAMMediaTypeSample*, Int32)
    get_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, HRESULT)
    set_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, HRESULT)
    is_sync_point : Proc(IAMMediaTypeSample*, HRESULT)
    set_sync_point : Proc(IAMMediaTypeSample*, LibC::BOOL, HRESULT)
    is_preroll : Proc(IAMMediaTypeSample*, HRESULT)
    set_preroll : Proc(IAMMediaTypeSample*, LibC::BOOL, HRESULT)
    get_actual_data_length : Proc(IAMMediaTypeSample*, Int32)
    set_actual_data_length : Proc(IAMMediaTypeSample*, Int32, HRESULT)
    get_media_type : Proc(IAMMediaTypeSample*, AM_MEDIA_TYPE**, HRESULT)
    set_media_type : Proc(IAMMediaTypeSample*, AM_MEDIA_TYPE*, HRESULT)
    is_discontinuity : Proc(IAMMediaTypeSample*, HRESULT)
    set_discontinuity : Proc(IAMMediaTypeSample*, LibC::BOOL, HRESULT)
    get_media_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, HRESULT)
    set_media_time : Proc(IAMMediaTypeSample*, Int64*, Int64*, HRESULT)
  end

  IAMMediaTypeSample_GUID = LibC::GUID.new("ab6b4afb-f6e4-11d0-900d-00c04fd9189d")
  CLSID_IAMMediaTypeSample = "ab6b4afb-f6e4-11d0-900d-00c04fd9189d"
  struct IAMMediaTypeSample
    lpVtbl : IAMMediaTypeSampleVTbl*
  end

  struct IDirectDrawVideoVTbl
    query_interface : Proc(IDirectDrawVideo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDirectDrawVideo*, UInt32)
    release : Proc(IDirectDrawVideo*, UInt32)
    get_switches : Proc(IDirectDrawVideo*, UInt32*, HRESULT)
    set_switches : Proc(IDirectDrawVideo*, UInt32, HRESULT)
    get_caps : Proc(IDirectDrawVideo*, DDCAPS_DX7*, HRESULT)
    get_emulated_caps : Proc(IDirectDrawVideo*, DDCAPS_DX7*, HRESULT)
    get_surface_desc : Proc(IDirectDrawVideo*, DDSURFACEDESC*, HRESULT)
    get_four_cc_codes : Proc(IDirectDrawVideo*, UInt32*, UInt32*, HRESULT)
    set_direct_draw : Proc(IDirectDrawVideo*, IDirectDraw, HRESULT)
    get_direct_draw : Proc(IDirectDrawVideo*, IDirectDraw*, HRESULT)
    get_surface_type : Proc(IDirectDrawVideo*, UInt32*, HRESULT)
    set_default : Proc(IDirectDrawVideo*, HRESULT)
    use_scan_line : Proc(IDirectDrawVideo*, Int32, HRESULT)
    can_use_scan_line : Proc(IDirectDrawVideo*, Int32*, HRESULT)
    use_overlay_stretch : Proc(IDirectDrawVideo*, Int32, HRESULT)
    can_use_overlay_stretch : Proc(IDirectDrawVideo*, Int32*, HRESULT)
    use_when_full_screen : Proc(IDirectDrawVideo*, Int32, HRESULT)
    will_use_full_screen : Proc(IDirectDrawVideo*, Int32*, HRESULT)
  end

  struct IDirectDrawVideo
    lpVtbl : IDirectDrawVideoVTbl*
  end

  struct IQualPropVTbl
    query_interface : Proc(IQualProp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IQualProp*, UInt32)
    release : Proc(IQualProp*, UInt32)
    get_frames_dropped_in_renderer : Proc(IQualProp*, Int32*, HRESULT)
    get_frames_drawn : Proc(IQualProp*, Int32*, HRESULT)
    get_avg_frame_rate : Proc(IQualProp*, Int32*, HRESULT)
    get_jitter : Proc(IQualProp*, Int32*, HRESULT)
    get_avg_sync_offset : Proc(IQualProp*, Int32*, HRESULT)
    get_dev_sync_offset : Proc(IQualProp*, Int32*, HRESULT)
  end

  struct IQualProp
    lpVtbl : IQualPropVTbl*
  end

  struct IFullScreenVideoVTbl
    query_interface : Proc(IFullScreenVideo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFullScreenVideo*, UInt32)
    release : Proc(IFullScreenVideo*, UInt32)
    count_modes : Proc(IFullScreenVideo*, Int32*, HRESULT)
    get_mode_info : Proc(IFullScreenVideo*, Int32, Int32*, Int32*, Int32*, HRESULT)
    get_current_mode : Proc(IFullScreenVideo*, Int32*, HRESULT)
    is_mode_available : Proc(IFullScreenVideo*, Int32, HRESULT)
    is_mode_enabled : Proc(IFullScreenVideo*, Int32, HRESULT)
    set_enabled : Proc(IFullScreenVideo*, Int32, Int32, HRESULT)
    get_clip_factor : Proc(IFullScreenVideo*, Int32*, HRESULT)
    set_clip_factor : Proc(IFullScreenVideo*, Int32, HRESULT)
    set_message_drain : Proc(IFullScreenVideo*, LibC::HANDLE, HRESULT)
    get_message_drain : Proc(IFullScreenVideo*, HANDLE*, HRESULT)
    set_monitor : Proc(IFullScreenVideo*, Int32, HRESULT)
    get_monitor : Proc(IFullScreenVideo*, Int32*, HRESULT)
    hide_on_deactivate : Proc(IFullScreenVideo*, Int32, HRESULT)
    is_hide_on_deactivate : Proc(IFullScreenVideo*, HRESULT)
    set_caption : Proc(IFullScreenVideo*, UInt8*, HRESULT)
    get_caption : Proc(IFullScreenVideo*, UInt8**, HRESULT)
    set_default : Proc(IFullScreenVideo*, HRESULT)
  end

  struct IFullScreenVideo
    lpVtbl : IFullScreenVideoVTbl*
  end

  struct IFullScreenVideoExVTbl
    query_interface : Proc(IFullScreenVideoEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IFullScreenVideoEx*, UInt32)
    release : Proc(IFullScreenVideoEx*, UInt32)
    count_modes : Proc(IFullScreenVideoEx*, Int32*, HRESULT)
    get_mode_info : Proc(IFullScreenVideoEx*, Int32, Int32*, Int32*, Int32*, HRESULT)
    get_current_mode : Proc(IFullScreenVideoEx*, Int32*, HRESULT)
    is_mode_available : Proc(IFullScreenVideoEx*, Int32, HRESULT)
    is_mode_enabled : Proc(IFullScreenVideoEx*, Int32, HRESULT)
    set_enabled : Proc(IFullScreenVideoEx*, Int32, Int32, HRESULT)
    get_clip_factor : Proc(IFullScreenVideoEx*, Int32*, HRESULT)
    set_clip_factor : Proc(IFullScreenVideoEx*, Int32, HRESULT)
    set_message_drain : Proc(IFullScreenVideoEx*, LibC::HANDLE, HRESULT)
    get_message_drain : Proc(IFullScreenVideoEx*, HANDLE*, HRESULT)
    set_monitor : Proc(IFullScreenVideoEx*, Int32, HRESULT)
    get_monitor : Proc(IFullScreenVideoEx*, Int32*, HRESULT)
    hide_on_deactivate : Proc(IFullScreenVideoEx*, Int32, HRESULT)
    is_hide_on_deactivate : Proc(IFullScreenVideoEx*, HRESULT)
    set_caption : Proc(IFullScreenVideoEx*, UInt8*, HRESULT)
    get_caption : Proc(IFullScreenVideoEx*, UInt8**, HRESULT)
    set_default : Proc(IFullScreenVideoEx*, HRESULT)
    set_accelerator_table : Proc(IFullScreenVideoEx*, LibC::HANDLE, LibC::HANDLE, HRESULT)
    get_accelerator_table : Proc(IFullScreenVideoEx*, HANDLE*, HANDLE*, HRESULT)
    keep_pixel_aspect_ratio : Proc(IFullScreenVideoEx*, Int32, HRESULT)
    is_keep_pixel_aspect_ratio : Proc(IFullScreenVideoEx*, Int32*, HRESULT)
  end

  struct IFullScreenVideoEx
    lpVtbl : IFullScreenVideoExVTbl*
  end

  struct IBaseVideoMixerVTbl
    query_interface : Proc(IBaseVideoMixer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBaseVideoMixer*, UInt32)
    release : Proc(IBaseVideoMixer*, UInt32)
    set_lead_pin : Proc(IBaseVideoMixer*, Int32, HRESULT)
    get_lead_pin : Proc(IBaseVideoMixer*, Int32*, HRESULT)
    get_input_pin_count : Proc(IBaseVideoMixer*, Int32*, HRESULT)
    is_using_clock : Proc(IBaseVideoMixer*, Int32*, HRESULT)
    set_using_clock : Proc(IBaseVideoMixer*, Int32, HRESULT)
    get_clock_period : Proc(IBaseVideoMixer*, Int32*, HRESULT)
    set_clock_period : Proc(IBaseVideoMixer*, Int32, HRESULT)
  end

  struct IBaseVideoMixer
    lpVtbl : IBaseVideoMixerVTbl*
  end

  struct IDMOWrapperFilterVTbl
    query_interface : Proc(IDMOWrapperFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDMOWrapperFilter*, UInt32)
    release : Proc(IDMOWrapperFilter*, UInt32)
    init : Proc(IDMOWrapperFilter*, Guid*, Guid*, HRESULT)
  end

  IDMOWrapperFilter_GUID = LibC::GUID.new("52d6f586-9f0f-4824-8fc8-e32ca04930c2")
  CLSID_IDMOWrapperFilter = "52d6f586-9f0f-4824-8fc8-e32ca04930c2"
  struct IDMOWrapperFilter
    lpVtbl : IDMOWrapperFilterVTbl*
  end

  struct IMixerOCXNotifyVTbl
    query_interface : Proc(IMixerOCXNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMixerOCXNotify*, UInt32)
    release : Proc(IMixerOCXNotify*, UInt32)
    on_invalidate_rect : Proc(IMixerOCXNotify*, RECT*, HRESULT)
    on_status_change : Proc(IMixerOCXNotify*, UInt32, HRESULT)
    on_data_change : Proc(IMixerOCXNotify*, UInt32, HRESULT)
  end

  IMixerOCXNotify_GUID = LibC::GUID.new("81a3bd31-dee1-11d1-8508-00a0c91f9ca0")
  CLSID_IMixerOCXNotify = "81a3bd31-dee1-11d1-8508-00a0c91f9ca0"
  struct IMixerOCXNotify
    lpVtbl : IMixerOCXNotifyVTbl*
  end

  struct IMixerOCXVTbl
    query_interface : Proc(IMixerOCX*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMixerOCX*, UInt32)
    release : Proc(IMixerOCX*, UInt32)
    on_display_change : Proc(IMixerOCX*, UInt32, UInt32, UInt32, HRESULT)
    get_aspect_ratio : Proc(IMixerOCX*, UInt32*, UInt32*, HRESULT)
    get_video_size : Proc(IMixerOCX*, UInt32*, UInt32*, HRESULT)
    get_status : Proc(IMixerOCX*, UInt32**, HRESULT)
    on_draw : Proc(IMixerOCX*, HDC, RECT*, HRESULT)
    set_draw_region : Proc(IMixerOCX*, POINT*, RECT*, RECT*, HRESULT)
    advise : Proc(IMixerOCX*, IMixerOCXNotify, HRESULT)
    un_advise : Proc(IMixerOCX*, HRESULT)
  end

  IMixerOCX_GUID = LibC::GUID.new("81a3bd32-dee1-11d1-8508-00a0c91f9ca0")
  CLSID_IMixerOCX = "81a3bd32-dee1-11d1-8508-00a0c91f9ca0"
  struct IMixerOCX
    lpVtbl : IMixerOCXVTbl*
  end

  struct IMixerPinConfigVTbl
    query_interface : Proc(IMixerPinConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMixerPinConfig*, UInt32)
    release : Proc(IMixerPinConfig*, UInt32)
    set_relative_position : Proc(IMixerPinConfig*, UInt32, UInt32, UInt32, UInt32, HRESULT)
    get_relative_position : Proc(IMixerPinConfig*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    set_z_order : Proc(IMixerPinConfig*, UInt32, HRESULT)
    get_z_order : Proc(IMixerPinConfig*, UInt32*, HRESULT)
    set_color_key : Proc(IMixerPinConfig*, COLORKEY*, HRESULT)
    get_color_key : Proc(IMixerPinConfig*, COLORKEY*, UInt32*, HRESULT)
    set_blending_parameter : Proc(IMixerPinConfig*, UInt32, HRESULT)
    get_blending_parameter : Proc(IMixerPinConfig*, UInt32*, HRESULT)
    set_aspect_ratio_mode : Proc(IMixerPinConfig*, AM_ASPECT_RATIO_MODE, HRESULT)
    get_aspect_ratio_mode : Proc(IMixerPinConfig*, AM_ASPECT_RATIO_MODE*, HRESULT)
    set_stream_transparent : Proc(IMixerPinConfig*, LibC::BOOL, HRESULT)
    get_stream_transparent : Proc(IMixerPinConfig*, LibC::BOOL*, HRESULT)
  end

  struct IMixerPinConfig
    lpVtbl : IMixerPinConfigVTbl*
  end

  struct IMixerPinConfig2VTbl
    query_interface : Proc(IMixerPinConfig2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMixerPinConfig2*, UInt32)
    release : Proc(IMixerPinConfig2*, UInt32)
    set_relative_position : Proc(IMixerPinConfig2*, UInt32, UInt32, UInt32, UInt32, HRESULT)
    get_relative_position : Proc(IMixerPinConfig2*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    set_z_order : Proc(IMixerPinConfig2*, UInt32, HRESULT)
    get_z_order : Proc(IMixerPinConfig2*, UInt32*, HRESULT)
    set_color_key : Proc(IMixerPinConfig2*, COLORKEY*, HRESULT)
    get_color_key : Proc(IMixerPinConfig2*, COLORKEY*, UInt32*, HRESULT)
    set_blending_parameter : Proc(IMixerPinConfig2*, UInt32, HRESULT)
    get_blending_parameter : Proc(IMixerPinConfig2*, UInt32*, HRESULT)
    set_aspect_ratio_mode : Proc(IMixerPinConfig2*, AM_ASPECT_RATIO_MODE, HRESULT)
    get_aspect_ratio_mode : Proc(IMixerPinConfig2*, AM_ASPECT_RATIO_MODE*, HRESULT)
    set_stream_transparent : Proc(IMixerPinConfig2*, LibC::BOOL, HRESULT)
    get_stream_transparent : Proc(IMixerPinConfig2*, LibC::BOOL*, HRESULT)
    set_overlay_surface_color_controls : Proc(IMixerPinConfig2*, DDCOLORCONTROL*, HRESULT)
    get_overlay_surface_color_controls : Proc(IMixerPinConfig2*, DDCOLORCONTROL*, HRESULT)
  end

  struct IMixerPinConfig2
    lpVtbl : IMixerPinConfig2VTbl*
  end

  struct IMpegAudioDecoderVTbl
    query_interface : Proc(IMpegAudioDecoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMpegAudioDecoder*, UInt32)
    release : Proc(IMpegAudioDecoder*, UInt32)
    get_frequency_divider : Proc(IMpegAudioDecoder*, UInt32*, HRESULT)
    put_frequency_divider : Proc(IMpegAudioDecoder*, UInt32, HRESULT)
    get_decoder_accuracy : Proc(IMpegAudioDecoder*, UInt32*, HRESULT)
    put_decoder_accuracy : Proc(IMpegAudioDecoder*, UInt32, HRESULT)
    get_stereo : Proc(IMpegAudioDecoder*, UInt32*, HRESULT)
    put_stereo : Proc(IMpegAudioDecoder*, UInt32, HRESULT)
    get_decoder_word_size : Proc(IMpegAudioDecoder*, UInt32*, HRESULT)
    put_decoder_word_size : Proc(IMpegAudioDecoder*, UInt32, HRESULT)
    get_integer_decode : Proc(IMpegAudioDecoder*, UInt32*, HRESULT)
    put_integer_decode : Proc(IMpegAudioDecoder*, UInt32, HRESULT)
    get_dual_mode : Proc(IMpegAudioDecoder*, UInt32*, HRESULT)
    put_dual_mode : Proc(IMpegAudioDecoder*, UInt32, HRESULT)
    get_audio_format : Proc(IMpegAudioDecoder*, MPEG1WAVEFORMAT*, HRESULT)
  end

  struct IMpegAudioDecoder
    lpVtbl : IMpegAudioDecoderVTbl*
  end

  struct IVMRImagePresenter9VTbl
    query_interface : Proc(IVMRImagePresenter9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRImagePresenter9*, UInt32)
    release : Proc(IVMRImagePresenter9*, UInt32)
    start_presenting : Proc(IVMRImagePresenter9*, LibC::UINT_PTR, HRESULT)
    stop_presenting : Proc(IVMRImagePresenter9*, LibC::UINT_PTR, HRESULT)
    present_image : Proc(IVMRImagePresenter9*, LibC::UINT_PTR, VMR9PresentationInfo*, HRESULT)
  end

  IVMRImagePresenter9_GUID = LibC::GUID.new("69188c61-12a3-40f0-8ffc-342e7b433fd7")
  CLSID_IVMRImagePresenter9 = "69188c61-12a3-40f0-8ffc-342e7b433fd7"
  struct IVMRImagePresenter9
    lpVtbl : IVMRImagePresenter9VTbl*
  end

  struct IVMRSurfaceAllocator9VTbl
    query_interface : Proc(IVMRSurfaceAllocator9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRSurfaceAllocator9*, UInt32)
    release : Proc(IVMRSurfaceAllocator9*, UInt32)
    initialize_device : Proc(IVMRSurfaceAllocator9*, LibC::UINT_PTR, VMR9AllocationInfo*, UInt32*, HRESULT)
    terminate_device : Proc(IVMRSurfaceAllocator9*, LibC::UINT_PTR, HRESULT)
    get_surface : Proc(IVMRSurfaceAllocator9*, LibC::UINT_PTR, UInt32, UInt32, IDirect3DSurface9*, HRESULT)
    advise_notify : Proc(IVMRSurfaceAllocator9*, IVMRSurfaceAllocatorNotify9, HRESULT)
  end

  IVMRSurfaceAllocator9_GUID = LibC::GUID.new("8d5148ea-3f5d-46cf-9df1-d1b896eedb1f")
  CLSID_IVMRSurfaceAllocator9 = "8d5148ea-3f5d-46cf-9df1-d1b896eedb1f"
  struct IVMRSurfaceAllocator9
    lpVtbl : IVMRSurfaceAllocator9VTbl*
  end

  struct IVMRSurfaceAllocatorEx9VTbl
    query_interface : Proc(IVMRSurfaceAllocatorEx9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRSurfaceAllocatorEx9*, UInt32)
    release : Proc(IVMRSurfaceAllocatorEx9*, UInt32)
    initialize_device : Proc(IVMRSurfaceAllocatorEx9*, LibC::UINT_PTR, VMR9AllocationInfo*, UInt32*, HRESULT)
    terminate_device : Proc(IVMRSurfaceAllocatorEx9*, LibC::UINT_PTR, HRESULT)
    get_surface : Proc(IVMRSurfaceAllocatorEx9*, LibC::UINT_PTR, UInt32, UInt32, IDirect3DSurface9*, HRESULT)
    advise_notify : Proc(IVMRSurfaceAllocatorEx9*, IVMRSurfaceAllocatorNotify9, HRESULT)
    get_surface_ex : Proc(IVMRSurfaceAllocatorEx9*, LibC::UINT_PTR, UInt32, UInt32, IDirect3DSurface9*, RECT*, HRESULT)
  end

  IVMRSurfaceAllocatorEx9_GUID = LibC::GUID.new("6de9a68a-a928-4522-bf57-655ae3866456")
  CLSID_IVMRSurfaceAllocatorEx9 = "6de9a68a-a928-4522-bf57-655ae3866456"
  struct IVMRSurfaceAllocatorEx9
    lpVtbl : IVMRSurfaceAllocatorEx9VTbl*
  end

  struct IVMRSurfaceAllocatorNotify9VTbl
    query_interface : Proc(IVMRSurfaceAllocatorNotify9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRSurfaceAllocatorNotify9*, UInt32)
    release : Proc(IVMRSurfaceAllocatorNotify9*, UInt32)
    advise_surface_allocator : Proc(IVMRSurfaceAllocatorNotify9*, LibC::UINT_PTR, IVMRSurfaceAllocator9, HRESULT)
    set_d3_d_device : Proc(IVMRSurfaceAllocatorNotify9*, IDirect3DDevice9, HMONITOR, HRESULT)
    change_d3_d_device : Proc(IVMRSurfaceAllocatorNotify9*, IDirect3DDevice9, HMONITOR, HRESULT)
    allocate_surface_helper : Proc(IVMRSurfaceAllocatorNotify9*, VMR9AllocationInfo*, UInt32*, IDirect3DSurface9*, HRESULT)
    notify_event : Proc(IVMRSurfaceAllocatorNotify9*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
  end

  IVMRSurfaceAllocatorNotify9_GUID = LibC::GUID.new("dca3f5df-bb3a-4d03-bd81-84614bfbfa0c")
  CLSID_IVMRSurfaceAllocatorNotify9 = "dca3f5df-bb3a-4d03-bd81-84614bfbfa0c"
  struct IVMRSurfaceAllocatorNotify9
    lpVtbl : IVMRSurfaceAllocatorNotify9VTbl*
  end

  struct IVMRWindowlessControl9VTbl
    query_interface : Proc(IVMRWindowlessControl9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRWindowlessControl9*, UInt32)
    release : Proc(IVMRWindowlessControl9*, UInt32)
    get_native_video_size : Proc(IVMRWindowlessControl9*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_min_ideal_video_size : Proc(IVMRWindowlessControl9*, Int32*, Int32*, HRESULT)
    get_max_ideal_video_size : Proc(IVMRWindowlessControl9*, Int32*, Int32*, HRESULT)
    set_video_position : Proc(IVMRWindowlessControl9*, RECT*, RECT*, HRESULT)
    get_video_position : Proc(IVMRWindowlessControl9*, RECT*, RECT*, HRESULT)
    get_aspect_ratio_mode : Proc(IVMRWindowlessControl9*, UInt32*, HRESULT)
    set_aspect_ratio_mode : Proc(IVMRWindowlessControl9*, UInt32, HRESULT)
    set_video_clipping_window : Proc(IVMRWindowlessControl9*, LibC::HANDLE, HRESULT)
    repaint_video : Proc(IVMRWindowlessControl9*, LibC::HANDLE, HDC, HRESULT)
    display_mode_changed : Proc(IVMRWindowlessControl9*, HRESULT)
    get_current_image : Proc(IVMRWindowlessControl9*, UInt8**, HRESULT)
    set_border_color : Proc(IVMRWindowlessControl9*, UInt32, HRESULT)
    get_border_color : Proc(IVMRWindowlessControl9*, UInt32*, HRESULT)
  end

  IVMRWindowlessControl9_GUID = LibC::GUID.new("8f537d09-f85e-4414-b23b-502e54c79927")
  CLSID_IVMRWindowlessControl9 = "8f537d09-f85e-4414-b23b-502e54c79927"
  struct IVMRWindowlessControl9
    lpVtbl : IVMRWindowlessControl9VTbl*
  end

  struct IVMRMixerControl9VTbl
    query_interface : Proc(IVMRMixerControl9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRMixerControl9*, UInt32)
    release : Proc(IVMRMixerControl9*, UInt32)
    set_alpha : Proc(IVMRMixerControl9*, UInt32, Float32, HRESULT)
    get_alpha : Proc(IVMRMixerControl9*, UInt32, Float32*, HRESULT)
    set_z_order : Proc(IVMRMixerControl9*, UInt32, UInt32, HRESULT)
    get_z_order : Proc(IVMRMixerControl9*, UInt32, UInt32*, HRESULT)
    set_output_rect : Proc(IVMRMixerControl9*, UInt32, VMR9NormalizedRect*, HRESULT)
    get_output_rect : Proc(IVMRMixerControl9*, UInt32, VMR9NormalizedRect*, HRESULT)
    set_background_clr : Proc(IVMRMixerControl9*, UInt32, HRESULT)
    get_background_clr : Proc(IVMRMixerControl9*, UInt32*, HRESULT)
    set_mixing_prefs : Proc(IVMRMixerControl9*, UInt32, HRESULT)
    get_mixing_prefs : Proc(IVMRMixerControl9*, UInt32*, HRESULT)
    set_proc_amp_control : Proc(IVMRMixerControl9*, UInt32, VMR9ProcAmpControl*, HRESULT)
    get_proc_amp_control : Proc(IVMRMixerControl9*, UInt32, VMR9ProcAmpControl*, HRESULT)
    get_proc_amp_control_range : Proc(IVMRMixerControl9*, UInt32, VMR9ProcAmpControlRange*, HRESULT)
  end

  IVMRMixerControl9_GUID = LibC::GUID.new("1a777eaa-47c8-4930-b2c9-8fee1c1b0f3b")
  CLSID_IVMRMixerControl9 = "1a777eaa-47c8-4930-b2c9-8fee1c1b0f3b"
  struct IVMRMixerControl9
    lpVtbl : IVMRMixerControl9VTbl*
  end

  struct IVMRMixerBitmap9VTbl
    query_interface : Proc(IVMRMixerBitmap9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRMixerBitmap9*, UInt32)
    release : Proc(IVMRMixerBitmap9*, UInt32)
    set_alpha_bitmap : Proc(IVMRMixerBitmap9*, VMR9AlphaBitmap*, HRESULT)
    update_alpha_bitmap_parameters : Proc(IVMRMixerBitmap9*, VMR9AlphaBitmap*, HRESULT)
    get_alpha_bitmap_parameters : Proc(IVMRMixerBitmap9*, VMR9AlphaBitmap*, HRESULT)
  end

  IVMRMixerBitmap9_GUID = LibC::GUID.new("ced175e5-1935-4820-81bd-ff6ad00c9108")
  CLSID_IVMRMixerBitmap9 = "ced175e5-1935-4820-81bd-ff6ad00c9108"
  struct IVMRMixerBitmap9
    lpVtbl : IVMRMixerBitmap9VTbl*
  end

  struct IVMRSurface9VTbl
    query_interface : Proc(IVMRSurface9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRSurface9*, UInt32)
    release : Proc(IVMRSurface9*, UInt32)
    is_surface_locked : Proc(IVMRSurface9*, HRESULT)
    lock_surface : Proc(IVMRSurface9*, UInt8**, HRESULT)
    unlock_surface : Proc(IVMRSurface9*, HRESULT)
    get_surface : Proc(IVMRSurface9*, IDirect3DSurface9*, HRESULT)
  end

  IVMRSurface9_GUID = LibC::GUID.new("dfc581a1-6e1f-4c3a-8d0a-5e9792ea2afc")
  CLSID_IVMRSurface9 = "dfc581a1-6e1f-4c3a-8d0a-5e9792ea2afc"
  struct IVMRSurface9
    lpVtbl : IVMRSurface9VTbl*
  end

  struct IVMRImagePresenterConfig9VTbl
    query_interface : Proc(IVMRImagePresenterConfig9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRImagePresenterConfig9*, UInt32)
    release : Proc(IVMRImagePresenterConfig9*, UInt32)
    set_rendering_prefs : Proc(IVMRImagePresenterConfig9*, UInt32, HRESULT)
    get_rendering_prefs : Proc(IVMRImagePresenterConfig9*, UInt32*, HRESULT)
  end

  IVMRImagePresenterConfig9_GUID = LibC::GUID.new("45c15cab-6e22-420a-8043-ae1f0ac02c7d")
  CLSID_IVMRImagePresenterConfig9 = "45c15cab-6e22-420a-8043-ae1f0ac02c7d"
  struct IVMRImagePresenterConfig9
    lpVtbl : IVMRImagePresenterConfig9VTbl*
  end

  struct IVMRVideoStreamControl9VTbl
    query_interface : Proc(IVMRVideoStreamControl9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRVideoStreamControl9*, UInt32)
    release : Proc(IVMRVideoStreamControl9*, UInt32)
    set_stream_active_state : Proc(IVMRVideoStreamControl9*, LibC::BOOL, HRESULT)
    get_stream_active_state : Proc(IVMRVideoStreamControl9*, LibC::BOOL*, HRESULT)
  end

  IVMRVideoStreamControl9_GUID = LibC::GUID.new("d0cfe38b-93e7-4772-8957-0400c49a4485")
  CLSID_IVMRVideoStreamControl9 = "d0cfe38b-93e7-4772-8957-0400c49a4485"
  struct IVMRVideoStreamControl9
    lpVtbl : IVMRVideoStreamControl9VTbl*
  end

  struct IVMRFilterConfig9VTbl
    query_interface : Proc(IVMRFilterConfig9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRFilterConfig9*, UInt32)
    release : Proc(IVMRFilterConfig9*, UInt32)
    set_image_compositor : Proc(IVMRFilterConfig9*, IVMRImageCompositor9, HRESULT)
    set_number_of_streams : Proc(IVMRFilterConfig9*, UInt32, HRESULT)
    get_number_of_streams : Proc(IVMRFilterConfig9*, UInt32*, HRESULT)
    set_rendering_prefs : Proc(IVMRFilterConfig9*, UInt32, HRESULT)
    get_rendering_prefs : Proc(IVMRFilterConfig9*, UInt32*, HRESULT)
    set_rendering_mode : Proc(IVMRFilterConfig9*, UInt32, HRESULT)
    get_rendering_mode : Proc(IVMRFilterConfig9*, UInt32*, HRESULT)
  end

  IVMRFilterConfig9_GUID = LibC::GUID.new("5a804648-4f66-4867-9c43-4f5c822cf1b8")
  CLSID_IVMRFilterConfig9 = "5a804648-4f66-4867-9c43-4f5c822cf1b8"
  struct IVMRFilterConfig9
    lpVtbl : IVMRFilterConfig9VTbl*
  end

  struct IVMRAspectRatioControl9VTbl
    query_interface : Proc(IVMRAspectRatioControl9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRAspectRatioControl9*, UInt32)
    release : Proc(IVMRAspectRatioControl9*, UInt32)
    get_aspect_ratio_mode : Proc(IVMRAspectRatioControl9*, UInt32*, HRESULT)
    set_aspect_ratio_mode : Proc(IVMRAspectRatioControl9*, UInt32, HRESULT)
  end

  IVMRAspectRatioControl9_GUID = LibC::GUID.new("00d96c29-bbde-4efc-9901-bb5036392146")
  CLSID_IVMRAspectRatioControl9 = "00d96c29-bbde-4efc-9901-bb5036392146"
  struct IVMRAspectRatioControl9
    lpVtbl : IVMRAspectRatioControl9VTbl*
  end

  struct IVMRMonitorConfig9VTbl
    query_interface : Proc(IVMRMonitorConfig9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRMonitorConfig9*, UInt32)
    release : Proc(IVMRMonitorConfig9*, UInt32)
    set_monitor : Proc(IVMRMonitorConfig9*, UInt32, HRESULT)
    get_monitor : Proc(IVMRMonitorConfig9*, UInt32*, HRESULT)
    set_default_monitor : Proc(IVMRMonitorConfig9*, UInt32, HRESULT)
    get_default_monitor : Proc(IVMRMonitorConfig9*, UInt32*, HRESULT)
    get_available_monitors : Proc(IVMRMonitorConfig9*, VMR9MonitorInfo*, UInt32, UInt32*, HRESULT)
  end

  IVMRMonitorConfig9_GUID = LibC::GUID.new("46c2e457-8ba0-4eef-b80b-0680f0978749")
  CLSID_IVMRMonitorConfig9 = "46c2e457-8ba0-4eef-b80b-0680f0978749"
  struct IVMRMonitorConfig9
    lpVtbl : IVMRMonitorConfig9VTbl*
  end

  struct IVMRDeinterlaceControl9VTbl
    query_interface : Proc(IVMRDeinterlaceControl9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRDeinterlaceControl9*, UInt32)
    release : Proc(IVMRDeinterlaceControl9*, UInt32)
    get_number_of_deinterlace_modes : Proc(IVMRDeinterlaceControl9*, VMR9VideoDesc*, UInt32*, Guid*, HRESULT)
    get_deinterlace_mode_caps : Proc(IVMRDeinterlaceControl9*, Guid*, VMR9VideoDesc*, VMR9DeinterlaceCaps*, HRESULT)
    get_deinterlace_mode : Proc(IVMRDeinterlaceControl9*, UInt32, Guid*, HRESULT)
    set_deinterlace_mode : Proc(IVMRDeinterlaceControl9*, UInt32, Guid*, HRESULT)
    get_deinterlace_prefs : Proc(IVMRDeinterlaceControl9*, UInt32*, HRESULT)
    set_deinterlace_prefs : Proc(IVMRDeinterlaceControl9*, UInt32, HRESULT)
    get_actual_deinterlace_mode : Proc(IVMRDeinterlaceControl9*, UInt32, Guid*, HRESULT)
  end

  IVMRDeinterlaceControl9_GUID = LibC::GUID.new("a215fb8d-13c2-4f7f-993c-003d6271a459")
  CLSID_IVMRDeinterlaceControl9 = "a215fb8d-13c2-4f7f-993c-003d6271a459"
  struct IVMRDeinterlaceControl9
    lpVtbl : IVMRDeinterlaceControl9VTbl*
  end

  struct IVMRImageCompositor9VTbl
    query_interface : Proc(IVMRImageCompositor9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVMRImageCompositor9*, UInt32)
    release : Proc(IVMRImageCompositor9*, UInt32)
    init_composition_device : Proc(IVMRImageCompositor9*, IUnknown, HRESULT)
    term_composition_device : Proc(IVMRImageCompositor9*, IUnknown, HRESULT)
    set_stream_media_type : Proc(IVMRImageCompositor9*, UInt32, AM_MEDIA_TYPE*, LibC::BOOL, HRESULT)
    composite_image : Proc(IVMRImageCompositor9*, IUnknown, IDirect3DSurface9, AM_MEDIA_TYPE*, Int64, Int64, UInt32, VMR9VideoStreamInfo*, UInt32, HRESULT)
  end

  IVMRImageCompositor9_GUID = LibC::GUID.new("4a5c89eb-df51-4654-ac2a-e48e02bbabf6")
  CLSID_IVMRImageCompositor9 = "4a5c89eb-df51-4654-ac2a-e48e02bbabf6"
  struct IVMRImageCompositor9
    lpVtbl : IVMRImageCompositor9VTbl*
  end

  struct IVPBaseConfigVTbl
    query_interface : Proc(IVPBaseConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPBaseConfig*, UInt32)
    release : Proc(IVPBaseConfig*, UInt32)
    get_connect_info : Proc(IVPBaseConfig*, UInt32*, DDVIDEOPORTCONNECT*, HRESULT)
    set_connect_info : Proc(IVPBaseConfig*, UInt32, HRESULT)
    get_vp_data_info : Proc(IVPBaseConfig*, AMVPDATAINFO*, HRESULT)
    get_max_pixel_rate : Proc(IVPBaseConfig*, AMVPSIZE*, UInt32*, HRESULT)
    inform_vp_input_formats : Proc(IVPBaseConfig*, UInt32, DDPIXELFORMAT*, HRESULT)
    get_video_formats : Proc(IVPBaseConfig*, UInt32*, DDPIXELFORMAT*, HRESULT)
    set_video_format : Proc(IVPBaseConfig*, UInt32, HRESULT)
    set_invert_polarity : Proc(IVPBaseConfig*, HRESULT)
    get_overlay_surface : Proc(IVPBaseConfig*, IDirectDrawSurface*, HRESULT)
    set_direct_draw_kernel_handle : Proc(IVPBaseConfig*, LibC::UINT_PTR, HRESULT)
    set_video_port_id : Proc(IVPBaseConfig*, UInt32, HRESULT)
    set_dd_surface_kernel_handles : Proc(IVPBaseConfig*, UInt32, LibC::UINT_PTR*, HRESULT)
    set_surface_parameters : Proc(IVPBaseConfig*, UInt32, UInt32, UInt32, HRESULT)
  end

  struct IVPBaseConfig
    lpVtbl : IVPBaseConfigVTbl*
  end

  struct IVPConfigVTbl
    query_interface : Proc(IVPConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPConfig*, UInt32)
    release : Proc(IVPConfig*, UInt32)
    get_connect_info : Proc(IVPConfig*, UInt32*, DDVIDEOPORTCONNECT*, HRESULT)
    set_connect_info : Proc(IVPConfig*, UInt32, HRESULT)
    get_vp_data_info : Proc(IVPConfig*, AMVPDATAINFO*, HRESULT)
    get_max_pixel_rate : Proc(IVPConfig*, AMVPSIZE*, UInt32*, HRESULT)
    inform_vp_input_formats : Proc(IVPConfig*, UInt32, DDPIXELFORMAT*, HRESULT)
    get_video_formats : Proc(IVPConfig*, UInt32*, DDPIXELFORMAT*, HRESULT)
    set_video_format : Proc(IVPConfig*, UInt32, HRESULT)
    set_invert_polarity : Proc(IVPConfig*, HRESULT)
    get_overlay_surface : Proc(IVPConfig*, IDirectDrawSurface*, HRESULT)
    set_direct_draw_kernel_handle : Proc(IVPConfig*, LibC::UINT_PTR, HRESULT)
    set_video_port_id : Proc(IVPConfig*, UInt32, HRESULT)
    set_dd_surface_kernel_handles : Proc(IVPConfig*, UInt32, LibC::UINT_PTR*, HRESULT)
    set_surface_parameters : Proc(IVPConfig*, UInt32, UInt32, UInt32, HRESULT)
    is_vp_decimation_allowed : Proc(IVPConfig*, Int32*, HRESULT)
    set_scaling_factors : Proc(IVPConfig*, AMVPSIZE*, HRESULT)
  end

  struct IVPConfig
    lpVtbl : IVPConfigVTbl*
  end

  struct IVPVBIConfigVTbl
    query_interface : Proc(IVPVBIConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPVBIConfig*, UInt32)
    release : Proc(IVPVBIConfig*, UInt32)
    get_connect_info : Proc(IVPVBIConfig*, UInt32*, DDVIDEOPORTCONNECT*, HRESULT)
    set_connect_info : Proc(IVPVBIConfig*, UInt32, HRESULT)
    get_vp_data_info : Proc(IVPVBIConfig*, AMVPDATAINFO*, HRESULT)
    get_max_pixel_rate : Proc(IVPVBIConfig*, AMVPSIZE*, UInt32*, HRESULT)
    inform_vp_input_formats : Proc(IVPVBIConfig*, UInt32, DDPIXELFORMAT*, HRESULT)
    get_video_formats : Proc(IVPVBIConfig*, UInt32*, DDPIXELFORMAT*, HRESULT)
    set_video_format : Proc(IVPVBIConfig*, UInt32, HRESULT)
    set_invert_polarity : Proc(IVPVBIConfig*, HRESULT)
    get_overlay_surface : Proc(IVPVBIConfig*, IDirectDrawSurface*, HRESULT)
    set_direct_draw_kernel_handle : Proc(IVPVBIConfig*, LibC::UINT_PTR, HRESULT)
    set_video_port_id : Proc(IVPVBIConfig*, UInt32, HRESULT)
    set_dd_surface_kernel_handles : Proc(IVPVBIConfig*, UInt32, LibC::UINT_PTR*, HRESULT)
    set_surface_parameters : Proc(IVPVBIConfig*, UInt32, UInt32, UInt32, HRESULT)
  end

  struct IVPVBIConfig
    lpVtbl : IVPVBIConfigVTbl*
  end

  struct IVPBaseNotifyVTbl
    query_interface : Proc(IVPBaseNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPBaseNotify*, UInt32)
    release : Proc(IVPBaseNotify*, UInt32)
    renegotiate_vp_parameters : Proc(IVPBaseNotify*, HRESULT)
  end

  struct IVPBaseNotify
    lpVtbl : IVPBaseNotifyVTbl*
  end

  struct IVPNotifyVTbl
    query_interface : Proc(IVPNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPNotify*, UInt32)
    release : Proc(IVPNotify*, UInt32)
    renegotiate_vp_parameters : Proc(IVPNotify*, HRESULT)
    set_deinterlace_mode : Proc(IVPNotify*, AMVP_MODE, HRESULT)
    get_deinterlace_mode : Proc(IVPNotify*, AMVP_MODE*, HRESULT)
  end

  struct IVPNotify
    lpVtbl : IVPNotifyVTbl*
  end

  struct IVPNotify2VTbl
    query_interface : Proc(IVPNotify2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPNotify2*, UInt32)
    release : Proc(IVPNotify2*, UInt32)
    renegotiate_vp_parameters : Proc(IVPNotify2*, HRESULT)
    set_deinterlace_mode : Proc(IVPNotify2*, AMVP_MODE, HRESULT)
    get_deinterlace_mode : Proc(IVPNotify2*, AMVP_MODE*, HRESULT)
    set_vp_sync_master : Proc(IVPNotify2*, LibC::BOOL, HRESULT)
    get_vp_sync_master : Proc(IVPNotify2*, LibC::BOOL*, HRESULT)
  end

  struct IVPNotify2
    lpVtbl : IVPNotify2VTbl*
  end

  struct IVPVBINotifyVTbl
    query_interface : Proc(IVPVBINotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IVPVBINotify*, UInt32)
    release : Proc(IVPVBINotify*, UInt32)
    renegotiate_vp_parameters : Proc(IVPVBINotify*, HRESULT)
  end

  struct IVPVBINotify
    lpVtbl : IVPVBINotifyVTbl*
  end

  struct IMediaParamInfoVTbl
    query_interface : Proc(IMediaParamInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaParamInfo*, UInt32)
    release : Proc(IMediaParamInfo*, UInt32)
    get_param_count : Proc(IMediaParamInfo*, UInt32*, HRESULT)
    get_param_info : Proc(IMediaParamInfo*, UInt32, MP_PARAMINFO*, HRESULT)
    get_param_text : Proc(IMediaParamInfo*, UInt32, UInt16**, HRESULT)
    get_num_time_formats : Proc(IMediaParamInfo*, UInt32*, HRESULT)
    get_supported_time_format : Proc(IMediaParamInfo*, UInt32, Guid*, HRESULT)
    get_current_time_format : Proc(IMediaParamInfo*, Guid*, UInt32*, HRESULT)
  end

  IMediaParamInfo_GUID = LibC::GUID.new("6d6cbb60-a223-44aa-842f-a2f06750be6d")
  CLSID_IMediaParamInfo = "6d6cbb60-a223-44aa-842f-a2f06750be6d"
  struct IMediaParamInfo
    lpVtbl : IMediaParamInfoVTbl*
  end

  struct IMediaParamsVTbl
    query_interface : Proc(IMediaParams*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMediaParams*, UInt32)
    release : Proc(IMediaParams*, UInt32)
    get_param : Proc(IMediaParams*, UInt32, Float32*, HRESULT)
    set_param : Proc(IMediaParams*, UInt32, Float32, HRESULT)
    add_envelope : Proc(IMediaParams*, UInt32, UInt32, MP_ENVELOPE_SEGMENT*, HRESULT)
    flush_envelope : Proc(IMediaParams*, UInt32, Int64, Int64, HRESULT)
    set_time_format : Proc(IMediaParams*, Guid, UInt32, HRESULT)
  end

  IMediaParams_GUID = LibC::GUID.new("6d6cbb61-a223-44aa-842f-a2f06750be6e")
  CLSID_IMediaParams = "6d6cbb61-a223-44aa-842f-a2f06750be6e"
  struct IMediaParams
    lpVtbl : IMediaParamsVTbl*
  end

  struct IAMPlayListItemVTbl
    query_interface : Proc(IAMPlayListItem*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMPlayListItem*, UInt32)
    release : Proc(IAMPlayListItem*, UInt32)
    get_flags : Proc(IAMPlayListItem*, UInt32*, HRESULT)
    get_source_count : Proc(IAMPlayListItem*, UInt32*, HRESULT)
    get_source_url : Proc(IAMPlayListItem*, UInt32, UInt8**, HRESULT)
    get_source_start : Proc(IAMPlayListItem*, UInt32, Int64*, HRESULT)
    get_source_duration : Proc(IAMPlayListItem*, UInt32, Int64*, HRESULT)
    get_source_start_marker : Proc(IAMPlayListItem*, UInt32, UInt32*, HRESULT)
    get_source_end_marker : Proc(IAMPlayListItem*, UInt32, UInt32*, HRESULT)
    get_source_start_marker_name : Proc(IAMPlayListItem*, UInt32, UInt8**, HRESULT)
    get_source_end_marker_name : Proc(IAMPlayListItem*, UInt32, UInt8**, HRESULT)
    get_link_url : Proc(IAMPlayListItem*, UInt8**, HRESULT)
    get_scan_duration : Proc(IAMPlayListItem*, UInt32, Int64*, HRESULT)
  end

  IAMPlayListItem_GUID = LibC::GUID.new("56a868ff-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IAMPlayListItem = "56a868ff-0ad4-11ce-b03a-0020af0ba770"
  struct IAMPlayListItem
    lpVtbl : IAMPlayListItemVTbl*
  end

  struct IAMPlayListVTbl
    query_interface : Proc(IAMPlayList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMPlayList*, UInt32)
    release : Proc(IAMPlayList*, UInt32)
    get_flags : Proc(IAMPlayList*, UInt32*, HRESULT)
    get_item_count : Proc(IAMPlayList*, UInt32*, HRESULT)
    get_item : Proc(IAMPlayList*, UInt32, IAMPlayListItem*, HRESULT)
    get_named_event : Proc(IAMPlayList*, LibC::LPWSTR, UInt32, IAMPlayListItem*, UInt32*, HRESULT)
    get_repeat_info : Proc(IAMPlayList*, UInt32*, UInt32*, UInt32*, HRESULT)
  end

  IAMPlayList_GUID = LibC::GUID.new("56a868fe-0ad4-11ce-b03a-0020af0ba770")
  CLSID_IAMPlayList = "56a868fe-0ad4-11ce-b03a-0020af0ba770"
  struct IAMPlayList
    lpVtbl : IAMPlayListVTbl*
  end

  struct ISpecifyParticularPagesVTbl
    query_interface : Proc(ISpecifyParticularPages*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpecifyParticularPages*, UInt32)
    release : Proc(ISpecifyParticularPages*, UInt32)
    get_pages : Proc(ISpecifyParticularPages*, Guid*, CAUUID*, HRESULT)
  end

  ISpecifyParticularPages_GUID = LibC::GUID.new("4c437b91-6e9e-11d1-a704-006097c4e476")
  CLSID_ISpecifyParticularPages = "4c437b91-6e9e-11d1-a704-006097c4e476"
  struct ISpecifyParticularPages
    lpVtbl : ISpecifyParticularPagesVTbl*
  end

  struct IAMRebuildVTbl
    query_interface : Proc(IAMRebuild*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAMRebuild*, UInt32)
    release : Proc(IAMRebuild*, UInt32)
    rebuild_now : Proc(IAMRebuild*, HRESULT)
  end

  IAMRebuild_GUID = LibC::GUID.new("02ef04dd-7580-11d1-bece-00c04fb6e937")
  CLSID_IAMRebuild = "02ef04dd-7580-11d1-bece-00c04fb6e937"
  struct IAMRebuild
    lpVtbl : IAMRebuildVTbl*
  end

  struct IBufferingTimeVTbl
    query_interface : Proc(IBufferingTime*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBufferingTime*, UInt32)
    release : Proc(IBufferingTime*, UInt32)
    get_buffering_time : Proc(IBufferingTime*, UInt32*, HRESULT)
    set_buffering_time : Proc(IBufferingTime*, UInt32, HRESULT)
  end

  IBufferingTime_GUID = LibC::GUID.new("1e00486a-78dd-11d2-8dd3-006097c9a2b2")
  CLSID_IBufferingTime = "1e00486a-78dd-11d2-8dd3-006097c9a2b2"
  struct IBufferingTime
    lpVtbl : IBufferingTimeVTbl*
  end

  struct ICreatePropBagOnRegKeyVTbl
    query_interface : Proc(ICreatePropBagOnRegKey*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICreatePropBagOnRegKey*, UInt32)
    release : Proc(ICreatePropBagOnRegKey*, UInt32)
    create : Proc(ICreatePropBagOnRegKey*, HKEY, LibC::LPWSTR, UInt32, UInt32, Guid*, Void**, HRESULT)
  end

  ICreatePropBagOnRegKey_GUID = LibC::GUID.new("8a674b48-1f63-11d3-b64c-00c04f79498e")
  CLSID_ICreatePropBagOnRegKey = "8a674b48-1f63-11d3-b64c-00c04f79498e"
  struct ICreatePropBagOnRegKey
    lpVtbl : ICreatePropBagOnRegKeyVTbl*
  end

  struct ITuningSpacesVTbl
    query_interface : Proc(ITuningSpaces*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITuningSpaces*, UInt32)
    release : Proc(ITuningSpaces*, UInt32)
    get_type_info_count : Proc(ITuningSpaces*, UInt32*, HRESULT)
    get_type_info : Proc(ITuningSpaces*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITuningSpaces*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITuningSpaces*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ITuningSpaces*, Int32*, HRESULT)
    get__new_enum : Proc(ITuningSpaces*, IEnumVARIANT*, HRESULT)
    get_item : Proc(ITuningSpaces*, VARIANT, ITuningSpace*, HRESULT)
    get_enum_tuning_spaces : Proc(ITuningSpaces*, IEnumTuningSpaces*, HRESULT)
  end

  ITuningSpaces_GUID = LibC::GUID.new("901284e4-33fe-4b69-8d63-634a596f3756")
  CLSID_ITuningSpaces = "901284e4-33fe-4b69-8d63-634a596f3756"
  struct ITuningSpaces
    lpVtbl : ITuningSpacesVTbl*
  end

  struct ITuningSpaceContainerVTbl
    query_interface : Proc(ITuningSpaceContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITuningSpaceContainer*, UInt32)
    release : Proc(ITuningSpaceContainer*, UInt32)
    get_type_info_count : Proc(ITuningSpaceContainer*, UInt32*, HRESULT)
    get_type_info : Proc(ITuningSpaceContainer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITuningSpaceContainer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITuningSpaceContainer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(ITuningSpaceContainer*, Int32*, HRESULT)
    get__new_enum : Proc(ITuningSpaceContainer*, IEnumVARIANT*, HRESULT)
    get_item : Proc(ITuningSpaceContainer*, VARIANT, ITuningSpace*, HRESULT)
    put_item : Proc(ITuningSpaceContainer*, VARIANT, ITuningSpace, HRESULT)
    tuning_spaces_for_clsid : Proc(ITuningSpaceContainer*, UInt8*, ITuningSpaces*, HRESULT)
    _tuning_spaces_for_clsid2 : Proc(ITuningSpaceContainer*, Guid*, ITuningSpaces*, HRESULT)
    tuning_spaces_for_name : Proc(ITuningSpaceContainer*, UInt8*, ITuningSpaces*, HRESULT)
    find_id : Proc(ITuningSpaceContainer*, ITuningSpace, Int32*, HRESULT)
    add : Proc(ITuningSpaceContainer*, ITuningSpace, VARIANT*, HRESULT)
    get_enum_tuning_spaces : Proc(ITuningSpaceContainer*, IEnumTuningSpaces*, HRESULT)
    remove : Proc(ITuningSpaceContainer*, VARIANT, HRESULT)
    get_max_count : Proc(ITuningSpaceContainer*, Int32*, HRESULT)
    put_max_count : Proc(ITuningSpaceContainer*, Int32, HRESULT)
  end

  ITuningSpaceContainer_GUID = LibC::GUID.new("5b692e84-e2f1-11d2-9493-00c04f72d980")
  CLSID_ITuningSpaceContainer = "5b692e84-e2f1-11d2-9493-00c04f72d980"
  struct ITuningSpaceContainer
    lpVtbl : ITuningSpaceContainerVTbl*
  end

  struct ITuningSpaceVTbl
    query_interface : Proc(ITuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITuningSpace*, UInt32)
    release : Proc(ITuningSpace*, UInt32)
    get_type_info_count : Proc(ITuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(ITuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(ITuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(ITuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(ITuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(ITuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(ITuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(ITuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(ITuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(ITuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(ITuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(ITuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(ITuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(ITuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(ITuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(ITuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(ITuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(ITuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(ITuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(ITuningSpace*, ILocator, HRESULT)
    clone : Proc(ITuningSpace*, ITuningSpace*, HRESULT)
  end

  ITuningSpace_GUID = LibC::GUID.new("061c6e30-e622-11d2-9493-00c04f72d980")
  CLSID_ITuningSpace = "061c6e30-e622-11d2-9493-00c04f72d980"
  struct ITuningSpace
    lpVtbl : ITuningSpaceVTbl*
  end

  struct IEnumTuningSpacesVTbl
    query_interface : Proc(IEnumTuningSpaces*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumTuningSpaces*, UInt32)
    release : Proc(IEnumTuningSpaces*, UInt32)
    next : Proc(IEnumTuningSpaces*, UInt32, ITuningSpace*, UInt32*, HRESULT)
    skip : Proc(IEnumTuningSpaces*, UInt32, HRESULT)
    reset : Proc(IEnumTuningSpaces*, HRESULT)
    clone : Proc(IEnumTuningSpaces*, IEnumTuningSpaces*, HRESULT)
  end

  IEnumTuningSpaces_GUID = LibC::GUID.new("8b8eb248-fc2b-11d2-9d8c-00c04f72d980")
  CLSID_IEnumTuningSpaces = "8b8eb248-fc2b-11d2-9d8c-00c04f72d980"
  struct IEnumTuningSpaces
    lpVtbl : IEnumTuningSpacesVTbl*
  end

  struct IDVBTuningSpaceVTbl
    query_interface : Proc(IDVBTuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBTuningSpace*, UInt32)
    release : Proc(IDVBTuningSpace*, UInt32)
    get_type_info_count : Proc(IDVBTuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBTuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBTuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBTuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IDVBTuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(IDVBTuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(IDVBTuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(IDVBTuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(IDVBTuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(IDVBTuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(IDVBTuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(IDVBTuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(IDVBTuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(IDVBTuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IDVBTuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IDVBTuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IDVBTuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IDVBTuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IDVBTuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IDVBTuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(IDVBTuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(IDVBTuningSpace*, ILocator, HRESULT)
    clone : Proc(IDVBTuningSpace*, ITuningSpace*, HRESULT)
    get_system_type : Proc(IDVBTuningSpace*, DVBSystemType*, HRESULT)
    put_system_type : Proc(IDVBTuningSpace*, DVBSystemType, HRESULT)
  end

  IDVBTuningSpace_GUID = LibC::GUID.new("ada0b268-3b19-4e5b-acc4-49f852be13ba")
  CLSID_IDVBTuningSpace = "ada0b268-3b19-4e5b-acc4-49f852be13ba"
  struct IDVBTuningSpace
    lpVtbl : IDVBTuningSpaceVTbl*
  end

  struct IDVBTuningSpace2VTbl
    query_interface : Proc(IDVBTuningSpace2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBTuningSpace2*, UInt32)
    release : Proc(IDVBTuningSpace2*, UInt32)
    get_type_info_count : Proc(IDVBTuningSpace2*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBTuningSpace2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBTuningSpace2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBTuningSpace2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IDVBTuningSpace2*, UInt8**, HRESULT)
    put_unique_name : Proc(IDVBTuningSpace2*, UInt8*, HRESULT)
    get_friendly_name : Proc(IDVBTuningSpace2*, UInt8**, HRESULT)
    put_friendly_name : Proc(IDVBTuningSpace2*, UInt8*, HRESULT)
    get_clsid : Proc(IDVBTuningSpace2*, UInt8**, HRESULT)
    get_network_type : Proc(IDVBTuningSpace2*, UInt8**, HRESULT)
    put_network_type : Proc(IDVBTuningSpace2*, UInt8*, HRESULT)
    get__network_type : Proc(IDVBTuningSpace2*, Guid*, HRESULT)
    put__network_type : Proc(IDVBTuningSpace2*, Guid*, HRESULT)
    create_tune_request : Proc(IDVBTuningSpace2*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IDVBTuningSpace2*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IDVBTuningSpace2*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IDVBTuningSpace2*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IDVBTuningSpace2*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IDVBTuningSpace2*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IDVBTuningSpace2*, UInt8*, HRESULT)
    get_default_locator : Proc(IDVBTuningSpace2*, ILocator*, HRESULT)
    put_default_locator : Proc(IDVBTuningSpace2*, ILocator, HRESULT)
    clone : Proc(IDVBTuningSpace2*, ITuningSpace*, HRESULT)
    get_system_type : Proc(IDVBTuningSpace2*, DVBSystemType*, HRESULT)
    put_system_type : Proc(IDVBTuningSpace2*, DVBSystemType, HRESULT)
    get_network_id : Proc(IDVBTuningSpace2*, Int32*, HRESULT)
    put_network_id : Proc(IDVBTuningSpace2*, Int32, HRESULT)
  end

  IDVBTuningSpace2_GUID = LibC::GUID.new("843188b4-ce62-43db-966b-8145a094e040")
  CLSID_IDVBTuningSpace2 = "843188b4-ce62-43db-966b-8145a094e040"
  struct IDVBTuningSpace2
    lpVtbl : IDVBTuningSpace2VTbl*
  end

  struct IDVBSTuningSpaceVTbl
    query_interface : Proc(IDVBSTuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBSTuningSpace*, UInt32)
    release : Proc(IDVBSTuningSpace*, UInt32)
    get_type_info_count : Proc(IDVBSTuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBSTuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBSTuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBSTuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IDVBSTuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(IDVBSTuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(IDVBSTuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(IDVBSTuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(IDVBSTuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(IDVBSTuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(IDVBSTuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(IDVBSTuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(IDVBSTuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(IDVBSTuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IDVBSTuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IDVBSTuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IDVBSTuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IDVBSTuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IDVBSTuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IDVBSTuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(IDVBSTuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(IDVBSTuningSpace*, ILocator, HRESULT)
    clone : Proc(IDVBSTuningSpace*, ITuningSpace*, HRESULT)
    get_system_type : Proc(IDVBSTuningSpace*, DVBSystemType*, HRESULT)
    put_system_type : Proc(IDVBSTuningSpace*, DVBSystemType, HRESULT)
    get_network_id : Proc(IDVBSTuningSpace*, Int32*, HRESULT)
    put_network_id : Proc(IDVBSTuningSpace*, Int32, HRESULT)
    get_low_oscillator : Proc(IDVBSTuningSpace*, Int32*, HRESULT)
    put_low_oscillator : Proc(IDVBSTuningSpace*, Int32, HRESULT)
    get_high_oscillator : Proc(IDVBSTuningSpace*, Int32*, HRESULT)
    put_high_oscillator : Proc(IDVBSTuningSpace*, Int32, HRESULT)
    get_lnb_switch : Proc(IDVBSTuningSpace*, Int32*, HRESULT)
    put_lnb_switch : Proc(IDVBSTuningSpace*, Int32, HRESULT)
    get_input_range : Proc(IDVBSTuningSpace*, UInt8**, HRESULT)
    put_input_range : Proc(IDVBSTuningSpace*, UInt8*, HRESULT)
    get_spectral_inversion : Proc(IDVBSTuningSpace*, SpectralInversion*, HRESULT)
    put_spectral_inversion : Proc(IDVBSTuningSpace*, SpectralInversion, HRESULT)
  end

  IDVBSTuningSpace_GUID = LibC::GUID.new("cdf7be60-d954-42fd-a972-78971958e470")
  CLSID_IDVBSTuningSpace = "cdf7be60-d954-42fd-a972-78971958e470"
  struct IDVBSTuningSpace
    lpVtbl : IDVBSTuningSpaceVTbl*
  end

  struct IAuxInTuningSpaceVTbl
    query_interface : Proc(IAuxInTuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAuxInTuningSpace*, UInt32)
    release : Proc(IAuxInTuningSpace*, UInt32)
    get_type_info_count : Proc(IAuxInTuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IAuxInTuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAuxInTuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAuxInTuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IAuxInTuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(IAuxInTuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(IAuxInTuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(IAuxInTuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(IAuxInTuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(IAuxInTuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(IAuxInTuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(IAuxInTuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(IAuxInTuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(IAuxInTuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IAuxInTuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IAuxInTuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IAuxInTuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IAuxInTuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IAuxInTuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IAuxInTuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(IAuxInTuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(IAuxInTuningSpace*, ILocator, HRESULT)
    clone : Proc(IAuxInTuningSpace*, ITuningSpace*, HRESULT)
  end

  IAuxInTuningSpace_GUID = LibC::GUID.new("e48244b8-7e17-4f76-a763-5090ff1e2f30")
  CLSID_IAuxInTuningSpace = "e48244b8-7e17-4f76-a763-5090ff1e2f30"
  struct IAuxInTuningSpace
    lpVtbl : IAuxInTuningSpaceVTbl*
  end

  struct IAuxInTuningSpace2VTbl
    query_interface : Proc(IAuxInTuningSpace2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAuxInTuningSpace2*, UInt32)
    release : Proc(IAuxInTuningSpace2*, UInt32)
    get_type_info_count : Proc(IAuxInTuningSpace2*, UInt32*, HRESULT)
    get_type_info : Proc(IAuxInTuningSpace2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAuxInTuningSpace2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAuxInTuningSpace2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IAuxInTuningSpace2*, UInt8**, HRESULT)
    put_unique_name : Proc(IAuxInTuningSpace2*, UInt8*, HRESULT)
    get_friendly_name : Proc(IAuxInTuningSpace2*, UInt8**, HRESULT)
    put_friendly_name : Proc(IAuxInTuningSpace2*, UInt8*, HRESULT)
    get_clsid : Proc(IAuxInTuningSpace2*, UInt8**, HRESULT)
    get_network_type : Proc(IAuxInTuningSpace2*, UInt8**, HRESULT)
    put_network_type : Proc(IAuxInTuningSpace2*, UInt8*, HRESULT)
    get__network_type : Proc(IAuxInTuningSpace2*, Guid*, HRESULT)
    put__network_type : Proc(IAuxInTuningSpace2*, Guid*, HRESULT)
    create_tune_request : Proc(IAuxInTuningSpace2*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IAuxInTuningSpace2*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IAuxInTuningSpace2*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IAuxInTuningSpace2*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IAuxInTuningSpace2*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IAuxInTuningSpace2*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IAuxInTuningSpace2*, UInt8*, HRESULT)
    get_default_locator : Proc(IAuxInTuningSpace2*, ILocator*, HRESULT)
    put_default_locator : Proc(IAuxInTuningSpace2*, ILocator, HRESULT)
    clone : Proc(IAuxInTuningSpace2*, ITuningSpace*, HRESULT)
    get_country_code : Proc(IAuxInTuningSpace2*, Int32*, HRESULT)
    put_country_code : Proc(IAuxInTuningSpace2*, Int32, HRESULT)
  end

  IAuxInTuningSpace2_GUID = LibC::GUID.new("b10931ed-8bfe-4ab0-9dce-e469c29a9729")
  CLSID_IAuxInTuningSpace2 = "b10931ed-8bfe-4ab0-9dce-e469c29a9729"
  struct IAuxInTuningSpace2
    lpVtbl : IAuxInTuningSpace2VTbl*
  end

  struct IAnalogTVTuningSpaceVTbl
    query_interface : Proc(IAnalogTVTuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAnalogTVTuningSpace*, UInt32)
    release : Proc(IAnalogTVTuningSpace*, UInt32)
    get_type_info_count : Proc(IAnalogTVTuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IAnalogTVTuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAnalogTVTuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAnalogTVTuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IAnalogTVTuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(IAnalogTVTuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(IAnalogTVTuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(IAnalogTVTuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(IAnalogTVTuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(IAnalogTVTuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(IAnalogTVTuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(IAnalogTVTuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(IAnalogTVTuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(IAnalogTVTuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IAnalogTVTuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IAnalogTVTuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IAnalogTVTuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IAnalogTVTuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IAnalogTVTuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IAnalogTVTuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(IAnalogTVTuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(IAnalogTVTuningSpace*, ILocator, HRESULT)
    clone : Proc(IAnalogTVTuningSpace*, ITuningSpace*, HRESULT)
    get_min_channel : Proc(IAnalogTVTuningSpace*, Int32*, HRESULT)
    put_min_channel : Proc(IAnalogTVTuningSpace*, Int32, HRESULT)
    get_max_channel : Proc(IAnalogTVTuningSpace*, Int32*, HRESULT)
    put_max_channel : Proc(IAnalogTVTuningSpace*, Int32, HRESULT)
    get_input_type : Proc(IAnalogTVTuningSpace*, TunerInputType*, HRESULT)
    put_input_type : Proc(IAnalogTVTuningSpace*, TunerInputType, HRESULT)
    get_country_code : Proc(IAnalogTVTuningSpace*, Int32*, HRESULT)
    put_country_code : Proc(IAnalogTVTuningSpace*, Int32, HRESULT)
  end

  IAnalogTVTuningSpace_GUID = LibC::GUID.new("2a6e293c-2595-11d3-b64c-00c04f79498e")
  CLSID_IAnalogTVTuningSpace = "2a6e293c-2595-11d3-b64c-00c04f79498e"
  struct IAnalogTVTuningSpace
    lpVtbl : IAnalogTVTuningSpaceVTbl*
  end

  struct IATSCTuningSpaceVTbl
    query_interface : Proc(IATSCTuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSCTuningSpace*, UInt32)
    release : Proc(IATSCTuningSpace*, UInt32)
    get_type_info_count : Proc(IATSCTuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IATSCTuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IATSCTuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IATSCTuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IATSCTuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(IATSCTuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(IATSCTuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(IATSCTuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(IATSCTuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(IATSCTuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(IATSCTuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(IATSCTuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(IATSCTuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(IATSCTuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IATSCTuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IATSCTuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IATSCTuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IATSCTuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IATSCTuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IATSCTuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(IATSCTuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(IATSCTuningSpace*, ILocator, HRESULT)
    clone : Proc(IATSCTuningSpace*, ITuningSpace*, HRESULT)
    get_min_channel : Proc(IATSCTuningSpace*, Int32*, HRESULT)
    put_min_channel : Proc(IATSCTuningSpace*, Int32, HRESULT)
    get_max_channel : Proc(IATSCTuningSpace*, Int32*, HRESULT)
    put_max_channel : Proc(IATSCTuningSpace*, Int32, HRESULT)
    get_input_type : Proc(IATSCTuningSpace*, TunerInputType*, HRESULT)
    put_input_type : Proc(IATSCTuningSpace*, TunerInputType, HRESULT)
    get_country_code : Proc(IATSCTuningSpace*, Int32*, HRESULT)
    put_country_code : Proc(IATSCTuningSpace*, Int32, HRESULT)
    get_min_minor_channel : Proc(IATSCTuningSpace*, Int32*, HRESULT)
    put_min_minor_channel : Proc(IATSCTuningSpace*, Int32, HRESULT)
    get_max_minor_channel : Proc(IATSCTuningSpace*, Int32*, HRESULT)
    put_max_minor_channel : Proc(IATSCTuningSpace*, Int32, HRESULT)
    get_min_physical_channel : Proc(IATSCTuningSpace*, Int32*, HRESULT)
    put_min_physical_channel : Proc(IATSCTuningSpace*, Int32, HRESULT)
    get_max_physical_channel : Proc(IATSCTuningSpace*, Int32*, HRESULT)
    put_max_physical_channel : Proc(IATSCTuningSpace*, Int32, HRESULT)
  end

  IATSCTuningSpace_GUID = LibC::GUID.new("0369b4e2-45b6-11d3-b650-00c04f79498e")
  CLSID_IATSCTuningSpace = "0369b4e2-45b6-11d3-b650-00c04f79498e"
  struct IATSCTuningSpace
    lpVtbl : IATSCTuningSpaceVTbl*
  end

  struct IDigitalCableTuningSpaceVTbl
    query_interface : Proc(IDigitalCableTuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDigitalCableTuningSpace*, UInt32)
    release : Proc(IDigitalCableTuningSpace*, UInt32)
    get_type_info_count : Proc(IDigitalCableTuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IDigitalCableTuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDigitalCableTuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDigitalCableTuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IDigitalCableTuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(IDigitalCableTuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(IDigitalCableTuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(IDigitalCableTuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(IDigitalCableTuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(IDigitalCableTuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(IDigitalCableTuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(IDigitalCableTuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(IDigitalCableTuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(IDigitalCableTuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IDigitalCableTuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IDigitalCableTuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IDigitalCableTuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IDigitalCableTuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IDigitalCableTuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IDigitalCableTuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(IDigitalCableTuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(IDigitalCableTuningSpace*, ILocator, HRESULT)
    clone : Proc(IDigitalCableTuningSpace*, ITuningSpace*, HRESULT)
    get_min_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_min_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_max_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_max_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_input_type : Proc(IDigitalCableTuningSpace*, TunerInputType*, HRESULT)
    put_input_type : Proc(IDigitalCableTuningSpace*, TunerInputType, HRESULT)
    get_country_code : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_country_code : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_min_minor_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_min_minor_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_max_minor_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_max_minor_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_min_physical_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_min_physical_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_max_physical_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_max_physical_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_min_major_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_min_major_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_max_major_channel : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_max_major_channel : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_min_source_id : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_min_source_id : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
    get_max_source_id : Proc(IDigitalCableTuningSpace*, Int32*, HRESULT)
    put_max_source_id : Proc(IDigitalCableTuningSpace*, Int32, HRESULT)
  end

  IDigitalCableTuningSpace_GUID = LibC::GUID.new("013f9f9c-b449-4ec7-a6d2-9d4f2fc70ae5")
  CLSID_IDigitalCableTuningSpace = "013f9f9c-b449-4ec7-a6d2-9d4f2fc70ae5"
  struct IDigitalCableTuningSpace
    lpVtbl : IDigitalCableTuningSpaceVTbl*
  end

  struct IAnalogRadioTuningSpaceVTbl
    query_interface : Proc(IAnalogRadioTuningSpace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAnalogRadioTuningSpace*, UInt32)
    release : Proc(IAnalogRadioTuningSpace*, UInt32)
    get_type_info_count : Proc(IAnalogRadioTuningSpace*, UInt32*, HRESULT)
    get_type_info : Proc(IAnalogRadioTuningSpace*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAnalogRadioTuningSpace*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAnalogRadioTuningSpace*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IAnalogRadioTuningSpace*, UInt8**, HRESULT)
    put_unique_name : Proc(IAnalogRadioTuningSpace*, UInt8*, HRESULT)
    get_friendly_name : Proc(IAnalogRadioTuningSpace*, UInt8**, HRESULT)
    put_friendly_name : Proc(IAnalogRadioTuningSpace*, UInt8*, HRESULT)
    get_clsid : Proc(IAnalogRadioTuningSpace*, UInt8**, HRESULT)
    get_network_type : Proc(IAnalogRadioTuningSpace*, UInt8**, HRESULT)
    put_network_type : Proc(IAnalogRadioTuningSpace*, UInt8*, HRESULT)
    get__network_type : Proc(IAnalogRadioTuningSpace*, Guid*, HRESULT)
    put__network_type : Proc(IAnalogRadioTuningSpace*, Guid*, HRESULT)
    create_tune_request : Proc(IAnalogRadioTuningSpace*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IAnalogRadioTuningSpace*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IAnalogRadioTuningSpace*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IAnalogRadioTuningSpace*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IAnalogRadioTuningSpace*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IAnalogRadioTuningSpace*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IAnalogRadioTuningSpace*, UInt8*, HRESULT)
    get_default_locator : Proc(IAnalogRadioTuningSpace*, ILocator*, HRESULT)
    put_default_locator : Proc(IAnalogRadioTuningSpace*, ILocator, HRESULT)
    clone : Proc(IAnalogRadioTuningSpace*, ITuningSpace*, HRESULT)
    get_min_frequency : Proc(IAnalogRadioTuningSpace*, Int32*, HRESULT)
    put_min_frequency : Proc(IAnalogRadioTuningSpace*, Int32, HRESULT)
    get_max_frequency : Proc(IAnalogRadioTuningSpace*, Int32*, HRESULT)
    put_max_frequency : Proc(IAnalogRadioTuningSpace*, Int32, HRESULT)
    get_step : Proc(IAnalogRadioTuningSpace*, Int32*, HRESULT)
    put_step : Proc(IAnalogRadioTuningSpace*, Int32, HRESULT)
  end

  IAnalogRadioTuningSpace_GUID = LibC::GUID.new("2a6e293b-2595-11d3-b64c-00c04f79498e")
  CLSID_IAnalogRadioTuningSpace = "2a6e293b-2595-11d3-b64c-00c04f79498e"
  struct IAnalogRadioTuningSpace
    lpVtbl : IAnalogRadioTuningSpaceVTbl*
  end

  struct IAnalogRadioTuningSpace2VTbl
    query_interface : Proc(IAnalogRadioTuningSpace2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAnalogRadioTuningSpace2*, UInt32)
    release : Proc(IAnalogRadioTuningSpace2*, UInt32)
    get_type_info_count : Proc(IAnalogRadioTuningSpace2*, UInt32*, HRESULT)
    get_type_info : Proc(IAnalogRadioTuningSpace2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAnalogRadioTuningSpace2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAnalogRadioTuningSpace2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_unique_name : Proc(IAnalogRadioTuningSpace2*, UInt8**, HRESULT)
    put_unique_name : Proc(IAnalogRadioTuningSpace2*, UInt8*, HRESULT)
    get_friendly_name : Proc(IAnalogRadioTuningSpace2*, UInt8**, HRESULT)
    put_friendly_name : Proc(IAnalogRadioTuningSpace2*, UInt8*, HRESULT)
    get_clsid : Proc(IAnalogRadioTuningSpace2*, UInt8**, HRESULT)
    get_network_type : Proc(IAnalogRadioTuningSpace2*, UInt8**, HRESULT)
    put_network_type : Proc(IAnalogRadioTuningSpace2*, UInt8*, HRESULT)
    get__network_type : Proc(IAnalogRadioTuningSpace2*, Guid*, HRESULT)
    put__network_type : Proc(IAnalogRadioTuningSpace2*, Guid*, HRESULT)
    create_tune_request : Proc(IAnalogRadioTuningSpace2*, ITuneRequest*, HRESULT)
    enum_category_gui_ds : Proc(IAnalogRadioTuningSpace2*, IEnumGUID*, HRESULT)
    enum_device_monikers : Proc(IAnalogRadioTuningSpace2*, IEnumMoniker*, HRESULT)
    get_default_preferred_component_types : Proc(IAnalogRadioTuningSpace2*, IComponentTypes*, HRESULT)
    put_default_preferred_component_types : Proc(IAnalogRadioTuningSpace2*, IComponentTypes, HRESULT)
    get_frequency_mapping : Proc(IAnalogRadioTuningSpace2*, UInt8**, HRESULT)
    put_frequency_mapping : Proc(IAnalogRadioTuningSpace2*, UInt8*, HRESULT)
    get_default_locator : Proc(IAnalogRadioTuningSpace2*, ILocator*, HRESULT)
    put_default_locator : Proc(IAnalogRadioTuningSpace2*, ILocator, HRESULT)
    clone : Proc(IAnalogRadioTuningSpace2*, ITuningSpace*, HRESULT)
    get_min_frequency : Proc(IAnalogRadioTuningSpace2*, Int32*, HRESULT)
    put_min_frequency : Proc(IAnalogRadioTuningSpace2*, Int32, HRESULT)
    get_max_frequency : Proc(IAnalogRadioTuningSpace2*, Int32*, HRESULT)
    put_max_frequency : Proc(IAnalogRadioTuningSpace2*, Int32, HRESULT)
    get_step : Proc(IAnalogRadioTuningSpace2*, Int32*, HRESULT)
    put_step : Proc(IAnalogRadioTuningSpace2*, Int32, HRESULT)
    get_country_code : Proc(IAnalogRadioTuningSpace2*, Int32*, HRESULT)
    put_country_code : Proc(IAnalogRadioTuningSpace2*, Int32, HRESULT)
  end

  IAnalogRadioTuningSpace2_GUID = LibC::GUID.new("39dd45da-2da8-46ba-8a8a-87e2b73d983a")
  CLSID_IAnalogRadioTuningSpace2 = "39dd45da-2da8-46ba-8a8a-87e2b73d983a"
  struct IAnalogRadioTuningSpace2
    lpVtbl : IAnalogRadioTuningSpace2VTbl*
  end

  struct ITuneRequestVTbl
    query_interface : Proc(ITuneRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITuneRequest*, UInt32)
    release : Proc(ITuneRequest*, UInt32)
    get_type_info_count : Proc(ITuneRequest*, UInt32*, HRESULT)
    get_type_info : Proc(ITuneRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ITuneRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ITuneRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tuning_space : Proc(ITuneRequest*, ITuningSpace*, HRESULT)
    get_components : Proc(ITuneRequest*, IComponents*, HRESULT)
    clone : Proc(ITuneRequest*, ITuneRequest*, HRESULT)
    get_locator : Proc(ITuneRequest*, ILocator*, HRESULT)
    put_locator : Proc(ITuneRequest*, ILocator, HRESULT)
  end

  ITuneRequest_GUID = LibC::GUID.new("07ddc146-fc3d-11d2-9d8c-00c04f72d980")
  CLSID_ITuneRequest = "07ddc146-fc3d-11d2-9d8c-00c04f72d980"
  struct ITuneRequest
    lpVtbl : ITuneRequestVTbl*
  end

  struct IChannelIDTuneRequestVTbl
    query_interface : Proc(IChannelIDTuneRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IChannelIDTuneRequest*, UInt32)
    release : Proc(IChannelIDTuneRequest*, UInt32)
    get_type_info_count : Proc(IChannelIDTuneRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IChannelIDTuneRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IChannelIDTuneRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IChannelIDTuneRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tuning_space : Proc(IChannelIDTuneRequest*, ITuningSpace*, HRESULT)
    get_components : Proc(IChannelIDTuneRequest*, IComponents*, HRESULT)
    clone : Proc(IChannelIDTuneRequest*, ITuneRequest*, HRESULT)
    get_locator : Proc(IChannelIDTuneRequest*, ILocator*, HRESULT)
    put_locator : Proc(IChannelIDTuneRequest*, ILocator, HRESULT)
    get_channel_id : Proc(IChannelIDTuneRequest*, UInt8**, HRESULT)
    put_channel_id : Proc(IChannelIDTuneRequest*, UInt8*, HRESULT)
  end

  IChannelIDTuneRequest_GUID = LibC::GUID.new("156eff60-86f4-4e28-89fc-109799fd57ee")
  CLSID_IChannelIDTuneRequest = "156eff60-86f4-4e28-89fc-109799fd57ee"
  struct IChannelIDTuneRequest
    lpVtbl : IChannelIDTuneRequestVTbl*
  end

  struct IChannelTuneRequestVTbl
    query_interface : Proc(IChannelTuneRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IChannelTuneRequest*, UInt32)
    release : Proc(IChannelTuneRequest*, UInt32)
    get_type_info_count : Proc(IChannelTuneRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IChannelTuneRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IChannelTuneRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IChannelTuneRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tuning_space : Proc(IChannelTuneRequest*, ITuningSpace*, HRESULT)
    get_components : Proc(IChannelTuneRequest*, IComponents*, HRESULT)
    clone : Proc(IChannelTuneRequest*, ITuneRequest*, HRESULT)
    get_locator : Proc(IChannelTuneRequest*, ILocator*, HRESULT)
    put_locator : Proc(IChannelTuneRequest*, ILocator, HRESULT)
    get_channel : Proc(IChannelTuneRequest*, Int32*, HRESULT)
    put_channel : Proc(IChannelTuneRequest*, Int32, HRESULT)
  end

  IChannelTuneRequest_GUID = LibC::GUID.new("0369b4e0-45b6-11d3-b650-00c04f79498e")
  CLSID_IChannelTuneRequest = "0369b4e0-45b6-11d3-b650-00c04f79498e"
  struct IChannelTuneRequest
    lpVtbl : IChannelTuneRequestVTbl*
  end

  struct IATSCChannelTuneRequestVTbl
    query_interface : Proc(IATSCChannelTuneRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSCChannelTuneRequest*, UInt32)
    release : Proc(IATSCChannelTuneRequest*, UInt32)
    get_type_info_count : Proc(IATSCChannelTuneRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IATSCChannelTuneRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IATSCChannelTuneRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IATSCChannelTuneRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tuning_space : Proc(IATSCChannelTuneRequest*, ITuningSpace*, HRESULT)
    get_components : Proc(IATSCChannelTuneRequest*, IComponents*, HRESULT)
    clone : Proc(IATSCChannelTuneRequest*, ITuneRequest*, HRESULT)
    get_locator : Proc(IATSCChannelTuneRequest*, ILocator*, HRESULT)
    put_locator : Proc(IATSCChannelTuneRequest*, ILocator, HRESULT)
    get_channel : Proc(IATSCChannelTuneRequest*, Int32*, HRESULT)
    put_channel : Proc(IATSCChannelTuneRequest*, Int32, HRESULT)
    get_minor_channel : Proc(IATSCChannelTuneRequest*, Int32*, HRESULT)
    put_minor_channel : Proc(IATSCChannelTuneRequest*, Int32, HRESULT)
  end

  IATSCChannelTuneRequest_GUID = LibC::GUID.new("0369b4e1-45b6-11d3-b650-00c04f79498e")
  CLSID_IATSCChannelTuneRequest = "0369b4e1-45b6-11d3-b650-00c04f79498e"
  struct IATSCChannelTuneRequest
    lpVtbl : IATSCChannelTuneRequestVTbl*
  end

  struct IDigitalCableTuneRequestVTbl
    query_interface : Proc(IDigitalCableTuneRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDigitalCableTuneRequest*, UInt32)
    release : Proc(IDigitalCableTuneRequest*, UInt32)
    get_type_info_count : Proc(IDigitalCableTuneRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IDigitalCableTuneRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDigitalCableTuneRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDigitalCableTuneRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tuning_space : Proc(IDigitalCableTuneRequest*, ITuningSpace*, HRESULT)
    get_components : Proc(IDigitalCableTuneRequest*, IComponents*, HRESULT)
    clone : Proc(IDigitalCableTuneRequest*, ITuneRequest*, HRESULT)
    get_locator : Proc(IDigitalCableTuneRequest*, ILocator*, HRESULT)
    put_locator : Proc(IDigitalCableTuneRequest*, ILocator, HRESULT)
    get_channel : Proc(IDigitalCableTuneRequest*, Int32*, HRESULT)
    put_channel : Proc(IDigitalCableTuneRequest*, Int32, HRESULT)
    get_minor_channel : Proc(IDigitalCableTuneRequest*, Int32*, HRESULT)
    put_minor_channel : Proc(IDigitalCableTuneRequest*, Int32, HRESULT)
    get_major_channel : Proc(IDigitalCableTuneRequest*, Int32*, HRESULT)
    put_major_channel : Proc(IDigitalCableTuneRequest*, Int32, HRESULT)
    get_source_id : Proc(IDigitalCableTuneRequest*, Int32*, HRESULT)
    put_source_id : Proc(IDigitalCableTuneRequest*, Int32, HRESULT)
  end

  IDigitalCableTuneRequest_GUID = LibC::GUID.new("bad7753b-6b37-4810-ae57-3ce0c4a9e6cb")
  CLSID_IDigitalCableTuneRequest = "bad7753b-6b37-4810-ae57-3ce0c4a9e6cb"
  struct IDigitalCableTuneRequest
    lpVtbl : IDigitalCableTuneRequestVTbl*
  end

  struct IDVBTuneRequestVTbl
    query_interface : Proc(IDVBTuneRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBTuneRequest*, UInt32)
    release : Proc(IDVBTuneRequest*, UInt32)
    get_type_info_count : Proc(IDVBTuneRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBTuneRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBTuneRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBTuneRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tuning_space : Proc(IDVBTuneRequest*, ITuningSpace*, HRESULT)
    get_components : Proc(IDVBTuneRequest*, IComponents*, HRESULT)
    clone : Proc(IDVBTuneRequest*, ITuneRequest*, HRESULT)
    get_locator : Proc(IDVBTuneRequest*, ILocator*, HRESULT)
    put_locator : Proc(IDVBTuneRequest*, ILocator, HRESULT)
    get_onid : Proc(IDVBTuneRequest*, Int32*, HRESULT)
    put_onid : Proc(IDVBTuneRequest*, Int32, HRESULT)
    get_tsid : Proc(IDVBTuneRequest*, Int32*, HRESULT)
    put_tsid : Proc(IDVBTuneRequest*, Int32, HRESULT)
    get_sid : Proc(IDVBTuneRequest*, Int32*, HRESULT)
    put_sid : Proc(IDVBTuneRequest*, Int32, HRESULT)
  end

  IDVBTuneRequest_GUID = LibC::GUID.new("0d6f567e-a636-42bb-83ba-ce4c1704afa2")
  CLSID_IDVBTuneRequest = "0d6f567e-a636-42bb-83ba-ce4c1704afa2"
  struct IDVBTuneRequest
    lpVtbl : IDVBTuneRequestVTbl*
  end

  struct IMPEG2TuneRequestVTbl
    query_interface : Proc(IMPEG2TuneRequest*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2TuneRequest*, UInt32)
    release : Proc(IMPEG2TuneRequest*, UInt32)
    get_type_info_count : Proc(IMPEG2TuneRequest*, UInt32*, HRESULT)
    get_type_info : Proc(IMPEG2TuneRequest*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMPEG2TuneRequest*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMPEG2TuneRequest*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_tuning_space : Proc(IMPEG2TuneRequest*, ITuningSpace*, HRESULT)
    get_components : Proc(IMPEG2TuneRequest*, IComponents*, HRESULT)
    clone : Proc(IMPEG2TuneRequest*, ITuneRequest*, HRESULT)
    get_locator : Proc(IMPEG2TuneRequest*, ILocator*, HRESULT)
    put_locator : Proc(IMPEG2TuneRequest*, ILocator, HRESULT)
    get_tsid : Proc(IMPEG2TuneRequest*, Int32*, HRESULT)
    put_tsid : Proc(IMPEG2TuneRequest*, Int32, HRESULT)
    get_prog_no : Proc(IMPEG2TuneRequest*, Int32*, HRESULT)
    put_prog_no : Proc(IMPEG2TuneRequest*, Int32, HRESULT)
  end

  IMPEG2TuneRequest_GUID = LibC::GUID.new("eb7d987f-8a01-42ad-b8ae-574deee44d1a")
  CLSID_IMPEG2TuneRequest = "eb7d987f-8a01-42ad-b8ae-574deee44d1a"
  struct IMPEG2TuneRequest
    lpVtbl : IMPEG2TuneRequestVTbl*
  end

  struct IMPEG2TuneRequestFactoryVTbl
    query_interface : Proc(IMPEG2TuneRequestFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2TuneRequestFactory*, UInt32)
    release : Proc(IMPEG2TuneRequestFactory*, UInt32)
    get_type_info_count : Proc(IMPEG2TuneRequestFactory*, UInt32*, HRESULT)
    get_type_info : Proc(IMPEG2TuneRequestFactory*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMPEG2TuneRequestFactory*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMPEG2TuneRequestFactory*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    create_tune_request : Proc(IMPEG2TuneRequestFactory*, ITuningSpace, IMPEG2TuneRequest*, HRESULT)
  end

  IMPEG2TuneRequestFactory_GUID = LibC::GUID.new("14e11abd-ee37-4893-9ea1-6964de933e39")
  CLSID_IMPEG2TuneRequestFactory = "14e11abd-ee37-4893-9ea1-6964de933e39"
  struct IMPEG2TuneRequestFactory
    lpVtbl : IMPEG2TuneRequestFactoryVTbl*
  end

  struct IMPEG2TuneRequestSupportVTbl
    query_interface : Proc(IMPEG2TuneRequestSupport*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2TuneRequestSupport*, UInt32)
    release : Proc(IMPEG2TuneRequestSupport*, UInt32)
  end

  IMPEG2TuneRequestSupport_GUID = LibC::GUID.new("1b9d5fc3-5bbc-4b6c-bb18-b9d10e3eeebf")
  CLSID_IMPEG2TuneRequestSupport = "1b9d5fc3-5bbc-4b6c-bb18-b9d10e3eeebf"
  struct IMPEG2TuneRequestSupport
    lpVtbl : IMPEG2TuneRequestSupportVTbl*
  end

  struct ITunerCapVTbl
    query_interface : Proc(ITunerCap*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITunerCap*, UInt32)
    release : Proc(ITunerCap*, UInt32)
    get_supported_network_types : Proc(ITunerCap*, UInt32, UInt32*, Guid*, HRESULT)
    get_supported_video_formats : Proc(ITunerCap*, UInt32*, UInt32*, HRESULT)
    get_aux_input_count : Proc(ITunerCap*, UInt32*, UInt32*, HRESULT)
  end

  ITunerCap_GUID = LibC::GUID.new("e60dfa45-8d56-4e65-a8ab-d6be9412c249")
  CLSID_ITunerCap = "e60dfa45-8d56-4e65-a8ab-d6be9412c249"
  struct ITunerCap
    lpVtbl : ITunerCapVTbl*
  end

  struct ITunerCapExVTbl
    query_interface : Proc(ITunerCapEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITunerCapEx*, UInt32)
    release : Proc(ITunerCapEx*, UInt32)
    get_has608_708_caption : Proc(ITunerCapEx*, Int16*, HRESULT)
  end

  ITunerCapEx_GUID = LibC::GUID.new("ed3e0c66-18c8-4ea6-9300-f6841fdd35dc")
  CLSID_ITunerCapEx = "ed3e0c66-18c8-4ea6-9300-f6841fdd35dc"
  struct ITunerCapEx
    lpVtbl : ITunerCapExVTbl*
  end

  struct ITunerVTbl
    query_interface : Proc(ITuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITuner*, UInt32)
    release : Proc(ITuner*, UInt32)
    get_tuning_space : Proc(ITuner*, ITuningSpace*, HRESULT)
    put_tuning_space : Proc(ITuner*, ITuningSpace, HRESULT)
    enum_tuning_spaces : Proc(ITuner*, IEnumTuningSpaces*, HRESULT)
    get_tune_request : Proc(ITuner*, ITuneRequest*, HRESULT)
    put_tune_request : Proc(ITuner*, ITuneRequest, HRESULT)
    validate : Proc(ITuner*, ITuneRequest, HRESULT)
    get_preferred_component_types : Proc(ITuner*, IComponentTypes*, HRESULT)
    put_preferred_component_types : Proc(ITuner*, IComponentTypes, HRESULT)
    get_signal_strength : Proc(ITuner*, Int32*, HRESULT)
    trigger_signal_events : Proc(ITuner*, Int32, HRESULT)
  end

  ITuner_GUID = LibC::GUID.new("28c52640-018a-11d3-9d8e-00c04f72d980")
  CLSID_ITuner = "28c52640-018a-11d3-9d8e-00c04f72d980"
  struct ITuner
    lpVtbl : ITunerVTbl*
  end

  struct IScanningTunerVTbl
    query_interface : Proc(IScanningTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScanningTuner*, UInt32)
    release : Proc(IScanningTuner*, UInt32)
    get_tuning_space : Proc(IScanningTuner*, ITuningSpace*, HRESULT)
    put_tuning_space : Proc(IScanningTuner*, ITuningSpace, HRESULT)
    enum_tuning_spaces : Proc(IScanningTuner*, IEnumTuningSpaces*, HRESULT)
    get_tune_request : Proc(IScanningTuner*, ITuneRequest*, HRESULT)
    put_tune_request : Proc(IScanningTuner*, ITuneRequest, HRESULT)
    validate : Proc(IScanningTuner*, ITuneRequest, HRESULT)
    get_preferred_component_types : Proc(IScanningTuner*, IComponentTypes*, HRESULT)
    put_preferred_component_types : Proc(IScanningTuner*, IComponentTypes, HRESULT)
    get_signal_strength : Proc(IScanningTuner*, Int32*, HRESULT)
    trigger_signal_events : Proc(IScanningTuner*, Int32, HRESULT)
    seek_up : Proc(IScanningTuner*, HRESULT)
    seek_down : Proc(IScanningTuner*, HRESULT)
    scan_up : Proc(IScanningTuner*, Int32, HRESULT)
    scan_down : Proc(IScanningTuner*, Int32, HRESULT)
    auto_program : Proc(IScanningTuner*, HRESULT)
  end

  IScanningTuner_GUID = LibC::GUID.new("1dfd0a5c-0284-11d3-9d8e-00c04f72d980")
  CLSID_IScanningTuner = "1dfd0a5c-0284-11d3-9d8e-00c04f72d980"
  struct IScanningTuner
    lpVtbl : IScanningTunerVTbl*
  end

  struct IScanningTunerExVTbl
    query_interface : Proc(IScanningTunerEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IScanningTunerEx*, UInt32)
    release : Proc(IScanningTunerEx*, UInt32)
    get_tuning_space : Proc(IScanningTunerEx*, ITuningSpace*, HRESULT)
    put_tuning_space : Proc(IScanningTunerEx*, ITuningSpace, HRESULT)
    enum_tuning_spaces : Proc(IScanningTunerEx*, IEnumTuningSpaces*, HRESULT)
    get_tune_request : Proc(IScanningTunerEx*, ITuneRequest*, HRESULT)
    put_tune_request : Proc(IScanningTunerEx*, ITuneRequest, HRESULT)
    validate : Proc(IScanningTunerEx*, ITuneRequest, HRESULT)
    get_preferred_component_types : Proc(IScanningTunerEx*, IComponentTypes*, HRESULT)
    put_preferred_component_types : Proc(IScanningTunerEx*, IComponentTypes, HRESULT)
    get_signal_strength : Proc(IScanningTunerEx*, Int32*, HRESULT)
    trigger_signal_events : Proc(IScanningTunerEx*, Int32, HRESULT)
    seek_up : Proc(IScanningTunerEx*, HRESULT)
    seek_down : Proc(IScanningTunerEx*, HRESULT)
    scan_up : Proc(IScanningTunerEx*, Int32, HRESULT)
    scan_down : Proc(IScanningTunerEx*, Int32, HRESULT)
    auto_program : Proc(IScanningTunerEx*, HRESULT)
    get_current_locator : Proc(IScanningTunerEx*, ILocator*, HRESULT)
    perform_exhaustive_scan : Proc(IScanningTunerEx*, Int32, Int32, Int16, LibC::UINT_PTR, HRESULT)
    terminate_current_scan : Proc(IScanningTunerEx*, Int32*, HRESULT)
    resume_current_scan : Proc(IScanningTunerEx*, LibC::UINT_PTR, HRESULT)
    get_tuner_scanning_capability : Proc(IScanningTunerEx*, Int32*, Int32*, Guid*, HRESULT)
    get_tuner_status : Proc(IScanningTunerEx*, Int32*, Int32*, Int32*, Int32*, HRESULT)
    get_current_tuner_standard_capability : Proc(IScanningTunerEx*, Guid, Int32*, Int32*, HRESULT)
    set_scan_signal_type_filter : Proc(IScanningTunerEx*, Int32, Int32, HRESULT)
  end

  IScanningTunerEx_GUID = LibC::GUID.new("04bbd195-0e2d-4593-9bd5-4f908bc33cf5")
  CLSID_IScanningTunerEx = "04bbd195-0e2d-4593-9bd5-4f908bc33cf5"
  struct IScanningTunerEx
    lpVtbl : IScanningTunerExVTbl*
  end

  struct IComponentTypeVTbl
    query_interface : Proc(IComponentType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComponentType*, UInt32)
    release : Proc(IComponentType*, UInt32)
    get_type_info_count : Proc(IComponentType*, UInt32*, HRESULT)
    get_type_info : Proc(IComponentType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IComponentType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IComponentType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_category : Proc(IComponentType*, ComponentCategory*, HRESULT)
    put_category : Proc(IComponentType*, ComponentCategory, HRESULT)
    get_media_major_type : Proc(IComponentType*, UInt8**, HRESULT)
    put_media_major_type : Proc(IComponentType*, UInt8*, HRESULT)
    get__media_major_type : Proc(IComponentType*, Guid*, HRESULT)
    put__media_major_type : Proc(IComponentType*, Guid*, HRESULT)
    get_media_sub_type : Proc(IComponentType*, UInt8**, HRESULT)
    put_media_sub_type : Proc(IComponentType*, UInt8*, HRESULT)
    get__media_sub_type : Proc(IComponentType*, Guid*, HRESULT)
    put__media_sub_type : Proc(IComponentType*, Guid*, HRESULT)
    get_media_format_type : Proc(IComponentType*, UInt8**, HRESULT)
    put_media_format_type : Proc(IComponentType*, UInt8*, HRESULT)
    get__media_format_type : Proc(IComponentType*, Guid*, HRESULT)
    put__media_format_type : Proc(IComponentType*, Guid*, HRESULT)
    get_media_type : Proc(IComponentType*, AM_MEDIA_TYPE*, HRESULT)
    put_media_type : Proc(IComponentType*, AM_MEDIA_TYPE*, HRESULT)
    clone : Proc(IComponentType*, IComponentType*, HRESULT)
  end

  IComponentType_GUID = LibC::GUID.new("6a340dc0-0311-11d3-9d8e-00c04f72d980")
  CLSID_IComponentType = "6a340dc0-0311-11d3-9d8e-00c04f72d980"
  struct IComponentType
    lpVtbl : IComponentTypeVTbl*
  end

  struct ILanguageComponentTypeVTbl
    query_interface : Proc(ILanguageComponentType*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILanguageComponentType*, UInt32)
    release : Proc(ILanguageComponentType*, UInt32)
    get_type_info_count : Proc(ILanguageComponentType*, UInt32*, HRESULT)
    get_type_info : Proc(ILanguageComponentType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ILanguageComponentType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ILanguageComponentType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_category : Proc(ILanguageComponentType*, ComponentCategory*, HRESULT)
    put_category : Proc(ILanguageComponentType*, ComponentCategory, HRESULT)
    get_media_major_type : Proc(ILanguageComponentType*, UInt8**, HRESULT)
    put_media_major_type : Proc(ILanguageComponentType*, UInt8*, HRESULT)
    get__media_major_type : Proc(ILanguageComponentType*, Guid*, HRESULT)
    put__media_major_type : Proc(ILanguageComponentType*, Guid*, HRESULT)
    get_media_sub_type : Proc(ILanguageComponentType*, UInt8**, HRESULT)
    put_media_sub_type : Proc(ILanguageComponentType*, UInt8*, HRESULT)
    get__media_sub_type : Proc(ILanguageComponentType*, Guid*, HRESULT)
    put__media_sub_type : Proc(ILanguageComponentType*, Guid*, HRESULT)
    get_media_format_type : Proc(ILanguageComponentType*, UInt8**, HRESULT)
    put_media_format_type : Proc(ILanguageComponentType*, UInt8*, HRESULT)
    get__media_format_type : Proc(ILanguageComponentType*, Guid*, HRESULT)
    put__media_format_type : Proc(ILanguageComponentType*, Guid*, HRESULT)
    get_media_type : Proc(ILanguageComponentType*, AM_MEDIA_TYPE*, HRESULT)
    put_media_type : Proc(ILanguageComponentType*, AM_MEDIA_TYPE*, HRESULT)
    clone : Proc(ILanguageComponentType*, IComponentType*, HRESULT)
    get_lang_id : Proc(ILanguageComponentType*, Int32*, HRESULT)
    put_lang_id : Proc(ILanguageComponentType*, Int32, HRESULT)
  end

  ILanguageComponentType_GUID = LibC::GUID.new("b874c8ba-0fa2-11d3-9d8e-00c04f72d980")
  CLSID_ILanguageComponentType = "b874c8ba-0fa2-11d3-9d8e-00c04f72d980"
  struct ILanguageComponentType
    lpVtbl : ILanguageComponentTypeVTbl*
  end

  struct IMPEG2ComponentTypeVTbl
    query_interface : Proc(IMPEG2ComponentType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2ComponentType*, UInt32)
    release : Proc(IMPEG2ComponentType*, UInt32)
    get_type_info_count : Proc(IMPEG2ComponentType*, UInt32*, HRESULT)
    get_type_info : Proc(IMPEG2ComponentType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMPEG2ComponentType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMPEG2ComponentType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_category : Proc(IMPEG2ComponentType*, ComponentCategory*, HRESULT)
    put_category : Proc(IMPEG2ComponentType*, ComponentCategory, HRESULT)
    get_media_major_type : Proc(IMPEG2ComponentType*, UInt8**, HRESULT)
    put_media_major_type : Proc(IMPEG2ComponentType*, UInt8*, HRESULT)
    get__media_major_type : Proc(IMPEG2ComponentType*, Guid*, HRESULT)
    put__media_major_type : Proc(IMPEG2ComponentType*, Guid*, HRESULT)
    get_media_sub_type : Proc(IMPEG2ComponentType*, UInt8**, HRESULT)
    put_media_sub_type : Proc(IMPEG2ComponentType*, UInt8*, HRESULT)
    get__media_sub_type : Proc(IMPEG2ComponentType*, Guid*, HRESULT)
    put__media_sub_type : Proc(IMPEG2ComponentType*, Guid*, HRESULT)
    get_media_format_type : Proc(IMPEG2ComponentType*, UInt8**, HRESULT)
    put_media_format_type : Proc(IMPEG2ComponentType*, UInt8*, HRESULT)
    get__media_format_type : Proc(IMPEG2ComponentType*, Guid*, HRESULT)
    put__media_format_type : Proc(IMPEG2ComponentType*, Guid*, HRESULT)
    get_media_type : Proc(IMPEG2ComponentType*, AM_MEDIA_TYPE*, HRESULT)
    put_media_type : Proc(IMPEG2ComponentType*, AM_MEDIA_TYPE*, HRESULT)
    clone : Proc(IMPEG2ComponentType*, IComponentType*, HRESULT)
    get_lang_id : Proc(IMPEG2ComponentType*, Int32*, HRESULT)
    put_lang_id : Proc(IMPEG2ComponentType*, Int32, HRESULT)
    get_stream_type : Proc(IMPEG2ComponentType*, MPEG2StreamType*, HRESULT)
    put_stream_type : Proc(IMPEG2ComponentType*, MPEG2StreamType, HRESULT)
  end

  IMPEG2ComponentType_GUID = LibC::GUID.new("2c073d84-b51c-48c9-aa9f-68971e1f6e38")
  CLSID_IMPEG2ComponentType = "2c073d84-b51c-48c9-aa9f-68971e1f6e38"
  struct IMPEG2ComponentType
    lpVtbl : IMPEG2ComponentTypeVTbl*
  end

  struct IATSCComponentTypeVTbl
    query_interface : Proc(IATSCComponentType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSCComponentType*, UInt32)
    release : Proc(IATSCComponentType*, UInt32)
    get_type_info_count : Proc(IATSCComponentType*, UInt32*, HRESULT)
    get_type_info : Proc(IATSCComponentType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IATSCComponentType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IATSCComponentType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_category : Proc(IATSCComponentType*, ComponentCategory*, HRESULT)
    put_category : Proc(IATSCComponentType*, ComponentCategory, HRESULT)
    get_media_major_type : Proc(IATSCComponentType*, UInt8**, HRESULT)
    put_media_major_type : Proc(IATSCComponentType*, UInt8*, HRESULT)
    get__media_major_type : Proc(IATSCComponentType*, Guid*, HRESULT)
    put__media_major_type : Proc(IATSCComponentType*, Guid*, HRESULT)
    get_media_sub_type : Proc(IATSCComponentType*, UInt8**, HRESULT)
    put_media_sub_type : Proc(IATSCComponentType*, UInt8*, HRESULT)
    get__media_sub_type : Proc(IATSCComponentType*, Guid*, HRESULT)
    put__media_sub_type : Proc(IATSCComponentType*, Guid*, HRESULT)
    get_media_format_type : Proc(IATSCComponentType*, UInt8**, HRESULT)
    put_media_format_type : Proc(IATSCComponentType*, UInt8*, HRESULT)
    get__media_format_type : Proc(IATSCComponentType*, Guid*, HRESULT)
    put__media_format_type : Proc(IATSCComponentType*, Guid*, HRESULT)
    get_media_type : Proc(IATSCComponentType*, AM_MEDIA_TYPE*, HRESULT)
    put_media_type : Proc(IATSCComponentType*, AM_MEDIA_TYPE*, HRESULT)
    clone : Proc(IATSCComponentType*, IComponentType*, HRESULT)
    get_lang_id : Proc(IATSCComponentType*, Int32*, HRESULT)
    put_lang_id : Proc(IATSCComponentType*, Int32, HRESULT)
    get_stream_type : Proc(IATSCComponentType*, MPEG2StreamType*, HRESULT)
    put_stream_type : Proc(IATSCComponentType*, MPEG2StreamType, HRESULT)
    get_flags : Proc(IATSCComponentType*, Int32*, HRESULT)
    put_flags : Proc(IATSCComponentType*, Int32, HRESULT)
  end

  IATSCComponentType_GUID = LibC::GUID.new("fc189e4d-7bd4-4125-b3b3-3a76a332cc96")
  CLSID_IATSCComponentType = "fc189e4d-7bd4-4125-b3b3-3a76a332cc96"
  struct IATSCComponentType
    lpVtbl : IATSCComponentTypeVTbl*
  end

  struct IEnumComponentTypesVTbl
    query_interface : Proc(IEnumComponentTypes*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumComponentTypes*, UInt32)
    release : Proc(IEnumComponentTypes*, UInt32)
    next : Proc(IEnumComponentTypes*, UInt32, IComponentType*, UInt32*, HRESULT)
    skip : Proc(IEnumComponentTypes*, UInt32, HRESULT)
    reset : Proc(IEnumComponentTypes*, HRESULT)
    clone : Proc(IEnumComponentTypes*, IEnumComponentTypes*, HRESULT)
  end

  IEnumComponentTypes_GUID = LibC::GUID.new("8a674b4a-1f63-11d3-b64c-00c04f79498e")
  CLSID_IEnumComponentTypes = "8a674b4a-1f63-11d3-b64c-00c04f79498e"
  struct IEnumComponentTypes
    lpVtbl : IEnumComponentTypesVTbl*
  end

  struct IComponentTypesVTbl
    query_interface : Proc(IComponentTypes*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComponentTypes*, UInt32)
    release : Proc(IComponentTypes*, UInt32)
    get_type_info_count : Proc(IComponentTypes*, UInt32*, HRESULT)
    get_type_info : Proc(IComponentTypes*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IComponentTypes*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IComponentTypes*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IComponentTypes*, Int32*, HRESULT)
    get__new_enum : Proc(IComponentTypes*, IEnumVARIANT*, HRESULT)
    enum_component_types : Proc(IComponentTypes*, IEnumComponentTypes*, HRESULT)
    get_item : Proc(IComponentTypes*, VARIANT, IComponentType*, HRESULT)
    put_item : Proc(IComponentTypes*, VARIANT, IComponentType, HRESULT)
    add : Proc(IComponentTypes*, IComponentType, VARIANT*, HRESULT)
    remove : Proc(IComponentTypes*, VARIANT, HRESULT)
    clone : Proc(IComponentTypes*, IComponentTypes*, HRESULT)
  end

  IComponentTypes_GUID = LibC::GUID.new("0dc13d4a-0313-11d3-9d8e-00c04f72d980")
  CLSID_IComponentTypes = "0dc13d4a-0313-11d3-9d8e-00c04f72d980"
  struct IComponentTypes
    lpVtbl : IComponentTypesVTbl*
  end

  struct IComponentVTbl
    query_interface : Proc(IComponent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComponent*, UInt32)
    release : Proc(IComponent*, UInt32)
    get_type_info_count : Proc(IComponent*, UInt32*, HRESULT)
    get_type_info : Proc(IComponent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IComponent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IComponent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_type : Proc(IComponent*, IComponentType*, HRESULT)
    put_type : Proc(IComponent*, IComponentType, HRESULT)
    get_desc_lang_id : Proc(IComponent*, Int32*, HRESULT)
    put_desc_lang_id : Proc(IComponent*, Int32, HRESULT)
    get_status : Proc(IComponent*, ComponentStatus*, HRESULT)
    put_status : Proc(IComponent*, ComponentStatus, HRESULT)
    get_description : Proc(IComponent*, UInt8**, HRESULT)
    put_description : Proc(IComponent*, UInt8*, HRESULT)
    clone : Proc(IComponent*, IComponent*, HRESULT)
  end

  IComponent_GUID = LibC::GUID.new("1a5576fc-0e19-11d3-9d8e-00c04f72d980")
  CLSID_IComponent = "1a5576fc-0e19-11d3-9d8e-00c04f72d980"
  struct IComponent
    lpVtbl : IComponentVTbl*
  end

  struct IAnalogAudioComponentTypeVTbl
    query_interface : Proc(IAnalogAudioComponentType*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAnalogAudioComponentType*, UInt32)
    release : Proc(IAnalogAudioComponentType*, UInt32)
    get_type_info_count : Proc(IAnalogAudioComponentType*, UInt32*, HRESULT)
    get_type_info : Proc(IAnalogAudioComponentType*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAnalogAudioComponentType*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAnalogAudioComponentType*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_category : Proc(IAnalogAudioComponentType*, ComponentCategory*, HRESULT)
    put_category : Proc(IAnalogAudioComponentType*, ComponentCategory, HRESULT)
    get_media_major_type : Proc(IAnalogAudioComponentType*, UInt8**, HRESULT)
    put_media_major_type : Proc(IAnalogAudioComponentType*, UInt8*, HRESULT)
    get__media_major_type : Proc(IAnalogAudioComponentType*, Guid*, HRESULT)
    put__media_major_type : Proc(IAnalogAudioComponentType*, Guid*, HRESULT)
    get_media_sub_type : Proc(IAnalogAudioComponentType*, UInt8**, HRESULT)
    put_media_sub_type : Proc(IAnalogAudioComponentType*, UInt8*, HRESULT)
    get__media_sub_type : Proc(IAnalogAudioComponentType*, Guid*, HRESULT)
    put__media_sub_type : Proc(IAnalogAudioComponentType*, Guid*, HRESULT)
    get_media_format_type : Proc(IAnalogAudioComponentType*, UInt8**, HRESULT)
    put_media_format_type : Proc(IAnalogAudioComponentType*, UInt8*, HRESULT)
    get__media_format_type : Proc(IAnalogAudioComponentType*, Guid*, HRESULT)
    put__media_format_type : Proc(IAnalogAudioComponentType*, Guid*, HRESULT)
    get_media_type : Proc(IAnalogAudioComponentType*, AM_MEDIA_TYPE*, HRESULT)
    put_media_type : Proc(IAnalogAudioComponentType*, AM_MEDIA_TYPE*, HRESULT)
    clone : Proc(IAnalogAudioComponentType*, IComponentType*, HRESULT)
    get_analog_audio_mode : Proc(IAnalogAudioComponentType*, TVAudioMode*, HRESULT)
    put_analog_audio_mode : Proc(IAnalogAudioComponentType*, TVAudioMode, HRESULT)
  end

  IAnalogAudioComponentType_GUID = LibC::GUID.new("2cfeb2a8-1787-4a24-a941-c6eaec39c842")
  CLSID_IAnalogAudioComponentType = "2cfeb2a8-1787-4a24-a941-c6eaec39c842"
  struct IAnalogAudioComponentType
    lpVtbl : IAnalogAudioComponentTypeVTbl*
  end

  struct IMPEG2ComponentVTbl
    query_interface : Proc(IMPEG2Component*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2Component*, UInt32)
    release : Proc(IMPEG2Component*, UInt32)
    initialize : Proc(IMPEG2Component*, IConsole, HRESULT)
    notify : Proc(IMPEG2Component*, IDataObject, MMC_NOTIFY_TYPE, LPARAM, LPARAM, HRESULT)
    destroy : Proc(IMPEG2Component*, LibC::IntPtrT, HRESULT)
    query_data_object : Proc(IMPEG2Component*, LibC::IntPtrT, DATA_OBJECT_TYPES, IDataObject*, HRESULT)
    get_result_view_type : Proc(IMPEG2Component*, LibC::IntPtrT, LibC::LPWSTR*, Int32*, HRESULT)
    get_display_info : Proc(IMPEG2Component*, RESULTDATAITEM*, HRESULT)
    compare_objects : Proc(IMPEG2Component*, IDataObject, IDataObject, HRESULT)
    get_pid : Proc(IMPEG2Component*, Int32*, HRESULT)
    put_pid : Proc(IMPEG2Component*, Int32, HRESULT)
    get_pcrpid : Proc(IMPEG2Component*, Int32*, HRESULT)
    put_pcrpid : Proc(IMPEG2Component*, Int32, HRESULT)
    get_program_number : Proc(IMPEG2Component*, Int32*, HRESULT)
    put_program_number : Proc(IMPEG2Component*, Int32, HRESULT)
  end

  IMPEG2Component_GUID = LibC::GUID.new("1493e353-1eb6-473c-802d-8e6b8ec9d2a9")
  CLSID_IMPEG2Component = "1493e353-1eb6-473c-802d-8e6b8ec9d2a9"
  struct IMPEG2Component
    lpVtbl : IMPEG2ComponentVTbl*
  end

  struct IEnumComponentsVTbl
    query_interface : Proc(IEnumComponents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumComponents*, UInt32)
    release : Proc(IEnumComponents*, UInt32)
    next : Proc(IEnumComponents*, UInt32, IComponent*, UInt32*, HRESULT)
    skip : Proc(IEnumComponents*, UInt32, HRESULT)
    reset : Proc(IEnumComponents*, HRESULT)
    clone : Proc(IEnumComponents*, IEnumComponents*, HRESULT)
  end

  IEnumComponents_GUID = LibC::GUID.new("2a6e2939-2595-11d3-b64c-00c04f79498e")
  CLSID_IEnumComponents = "2a6e2939-2595-11d3-b64c-00c04f79498e"
  struct IEnumComponents
    lpVtbl : IEnumComponentsVTbl*
  end

  struct IComponentsVTbl
    query_interface : Proc(IComponents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComponents*, UInt32)
    release : Proc(IComponents*, UInt32)
    get_type_info_count : Proc(IComponents*, UInt32*, HRESULT)
    get_type_info : Proc(IComponents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IComponents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IComponents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IComponents*, Int32*, HRESULT)
    get__new_enum : Proc(IComponents*, IEnumVARIANT*, HRESULT)
    enum_components : Proc(IComponents*, IEnumComponents*, HRESULT)
    get_item : Proc(IComponents*, VARIANT, IComponent*, HRESULT)
    add : Proc(IComponents*, IComponent, VARIANT*, HRESULT)
    remove : Proc(IComponents*, VARIANT, HRESULT)
    clone : Proc(IComponents*, IComponents*, HRESULT)
    put_item : Proc(IComponents*, VARIANT, IComponent, HRESULT)
  end

  IComponents_GUID = LibC::GUID.new("39a48091-fffe-4182-a161-3ff802640e26")
  CLSID_IComponents = "39a48091-fffe-4182-a161-3ff802640e26"
  struct IComponents
    lpVtbl : IComponentsVTbl*
  end

  struct IComponentsOldVTbl
    query_interface : Proc(IComponentsOld*, Guid*, Void**, HRESULT)
    add_ref : Proc(IComponentsOld*, UInt32)
    release : Proc(IComponentsOld*, UInt32)
    get_type_info_count : Proc(IComponentsOld*, UInt32*, HRESULT)
    get_type_info : Proc(IComponentsOld*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IComponentsOld*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IComponentsOld*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IComponentsOld*, Int32*, HRESULT)
    get__new_enum : Proc(IComponentsOld*, IEnumVARIANT*, HRESULT)
    enum_components : Proc(IComponentsOld*, IEnumComponents*, HRESULT)
    get_item : Proc(IComponentsOld*, VARIANT, IComponent*, HRESULT)
    add : Proc(IComponentsOld*, IComponent, VARIANT*, HRESULT)
    remove : Proc(IComponentsOld*, VARIANT, HRESULT)
    clone : Proc(IComponentsOld*, IComponents*, HRESULT)
  end

  IComponentsOld_GUID = LibC::GUID.new("fcd01846-0e19-11d3-9d8e-00c04f72d980")
  CLSID_IComponentsOld = "fcd01846-0e19-11d3-9d8e-00c04f72d980"
  struct IComponentsOld
    lpVtbl : IComponentsOldVTbl*
  end

  struct ILocatorVTbl
    query_interface : Proc(ILocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(ILocator*, UInt32)
    release : Proc(ILocator*, UInt32)
    get_type_info_count : Proc(ILocator*, UInt32*, HRESULT)
    get_type_info : Proc(ILocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(ILocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(ILocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(ILocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(ILocator*, Int32, HRESULT)
    get_inner_fec : Proc(ILocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(ILocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(ILocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(ILocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(ILocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(ILocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(ILocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(ILocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(ILocator*, ModulationType*, HRESULT)
    put_modulation : Proc(ILocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(ILocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(ILocator*, Int32, HRESULT)
    clone : Proc(ILocator*, ILocator*, HRESULT)
  end

  ILocator_GUID = LibC::GUID.new("286d7f89-760c-4f89-80c4-66841d2507aa")
  CLSID_ILocator = "286d7f89-760c-4f89-80c4-66841d2507aa"
  struct ILocator
    lpVtbl : ILocatorVTbl*
  end

  struct IAnalogLocatorVTbl
    query_interface : Proc(IAnalogLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAnalogLocator*, UInt32)
    release : Proc(IAnalogLocator*, UInt32)
    get_type_info_count : Proc(IAnalogLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IAnalogLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IAnalogLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IAnalogLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IAnalogLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IAnalogLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IAnalogLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IAnalogLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IAnalogLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IAnalogLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IAnalogLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IAnalogLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IAnalogLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IAnalogLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IAnalogLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IAnalogLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IAnalogLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IAnalogLocator*, Int32, HRESULT)
    clone : Proc(IAnalogLocator*, ILocator*, HRESULT)
    get_video_standard : Proc(IAnalogLocator*, AnalogVideoStandard*, HRESULT)
    put_video_standard : Proc(IAnalogLocator*, AnalogVideoStandard, HRESULT)
  end

  IAnalogLocator_GUID = LibC::GUID.new("34d1f26b-e339-430d-abce-738cb48984dc")
  CLSID_IAnalogLocator = "34d1f26b-e339-430d-abce-738cb48984dc"
  struct IAnalogLocator
    lpVtbl : IAnalogLocatorVTbl*
  end

  struct IDigitalLocatorVTbl
    query_interface : Proc(IDigitalLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDigitalLocator*, UInt32)
    release : Proc(IDigitalLocator*, UInt32)
    get_type_info_count : Proc(IDigitalLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IDigitalLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDigitalLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDigitalLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IDigitalLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IDigitalLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IDigitalLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IDigitalLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IDigitalLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IDigitalLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IDigitalLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IDigitalLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IDigitalLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IDigitalLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IDigitalLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IDigitalLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IDigitalLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IDigitalLocator*, Int32, HRESULT)
    clone : Proc(IDigitalLocator*, ILocator*, HRESULT)
  end

  IDigitalLocator_GUID = LibC::GUID.new("19b595d8-839a-47f0-96df-4f194f3c768c")
  CLSID_IDigitalLocator = "19b595d8-839a-47f0-96df-4f194f3c768c"
  struct IDigitalLocator
    lpVtbl : IDigitalLocatorVTbl*
  end

  struct IATSCLocatorVTbl
    query_interface : Proc(IATSCLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSCLocator*, UInt32)
    release : Proc(IATSCLocator*, UInt32)
    get_type_info_count : Proc(IATSCLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IATSCLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IATSCLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IATSCLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IATSCLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IATSCLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IATSCLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IATSCLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IATSCLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IATSCLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IATSCLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IATSCLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IATSCLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IATSCLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IATSCLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IATSCLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IATSCLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IATSCLocator*, Int32, HRESULT)
    clone : Proc(IATSCLocator*, ILocator*, HRESULT)
    get_physical_channel : Proc(IATSCLocator*, Int32*, HRESULT)
    put_physical_channel : Proc(IATSCLocator*, Int32, HRESULT)
    get_tsid : Proc(IATSCLocator*, Int32*, HRESULT)
    put_tsid : Proc(IATSCLocator*, Int32, HRESULT)
  end

  IATSCLocator_GUID = LibC::GUID.new("bf8d986f-8c2b-4131-94d7-4d3d9fcc21ef")
  CLSID_IATSCLocator = "bf8d986f-8c2b-4131-94d7-4d3d9fcc21ef"
  struct IATSCLocator
    lpVtbl : IATSCLocatorVTbl*
  end

  struct IATSCLocator2VTbl
    query_interface : Proc(IATSCLocator2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSCLocator2*, UInt32)
    release : Proc(IATSCLocator2*, UInt32)
    get_type_info_count : Proc(IATSCLocator2*, UInt32*, HRESULT)
    get_type_info : Proc(IATSCLocator2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IATSCLocator2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IATSCLocator2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IATSCLocator2*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IATSCLocator2*, Int32, HRESULT)
    get_inner_fec : Proc(IATSCLocator2*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IATSCLocator2*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IATSCLocator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IATSCLocator2*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IATSCLocator2*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IATSCLocator2*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IATSCLocator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IATSCLocator2*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IATSCLocator2*, ModulationType*, HRESULT)
    put_modulation : Proc(IATSCLocator2*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IATSCLocator2*, Int32*, HRESULT)
    put_symbol_rate : Proc(IATSCLocator2*, Int32, HRESULT)
    clone : Proc(IATSCLocator2*, ILocator*, HRESULT)
    get_physical_channel : Proc(IATSCLocator2*, Int32*, HRESULT)
    put_physical_channel : Proc(IATSCLocator2*, Int32, HRESULT)
    get_tsid : Proc(IATSCLocator2*, Int32*, HRESULT)
    put_tsid : Proc(IATSCLocator2*, Int32, HRESULT)
    get_program_number : Proc(IATSCLocator2*, Int32*, HRESULT)
    put_program_number : Proc(IATSCLocator2*, Int32, HRESULT)
  end

  IATSCLocator2_GUID = LibC::GUID.new("612aa885-66cf-4090-ba0a-566f5312e4ca")
  CLSID_IATSCLocator2 = "612aa885-66cf-4090-ba0a-566f5312e4ca"
  struct IATSCLocator2
    lpVtbl : IATSCLocator2VTbl*
  end

  struct IDigitalCableLocatorVTbl
    query_interface : Proc(IDigitalCableLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDigitalCableLocator*, UInt32)
    release : Proc(IDigitalCableLocator*, UInt32)
    get_type_info_count : Proc(IDigitalCableLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IDigitalCableLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDigitalCableLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDigitalCableLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IDigitalCableLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IDigitalCableLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IDigitalCableLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IDigitalCableLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IDigitalCableLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IDigitalCableLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IDigitalCableLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IDigitalCableLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IDigitalCableLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IDigitalCableLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IDigitalCableLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IDigitalCableLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IDigitalCableLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IDigitalCableLocator*, Int32, HRESULT)
    clone : Proc(IDigitalCableLocator*, ILocator*, HRESULT)
    get_physical_channel : Proc(IDigitalCableLocator*, Int32*, HRESULT)
    put_physical_channel : Proc(IDigitalCableLocator*, Int32, HRESULT)
    get_tsid : Proc(IDigitalCableLocator*, Int32*, HRESULT)
    put_tsid : Proc(IDigitalCableLocator*, Int32, HRESULT)
    get_program_number : Proc(IDigitalCableLocator*, Int32*, HRESULT)
    put_program_number : Proc(IDigitalCableLocator*, Int32, HRESULT)
  end

  IDigitalCableLocator_GUID = LibC::GUID.new("48f66a11-171a-419a-9525-beeecd51584c")
  CLSID_IDigitalCableLocator = "48f66a11-171a-419a-9525-beeecd51584c"
  struct IDigitalCableLocator
    lpVtbl : IDigitalCableLocatorVTbl*
  end

  struct IDVBTLocatorVTbl
    query_interface : Proc(IDVBTLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBTLocator*, UInt32)
    release : Proc(IDVBTLocator*, UInt32)
    get_type_info_count : Proc(IDVBTLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBTLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBTLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBTLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IDVBTLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IDVBTLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IDVBTLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IDVBTLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IDVBTLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IDVBTLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IDVBTLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IDVBTLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IDVBTLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IDVBTLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IDVBTLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IDVBTLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IDVBTLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IDVBTLocator*, Int32, HRESULT)
    clone : Proc(IDVBTLocator*, ILocator*, HRESULT)
    get_bandwidth : Proc(IDVBTLocator*, Int32*, HRESULT)
    put_bandwidth : Proc(IDVBTLocator*, Int32, HRESULT)
    get_lp_inner_fec : Proc(IDVBTLocator*, FECMethod*, HRESULT)
    put_lp_inner_fec : Proc(IDVBTLocator*, FECMethod, HRESULT)
    get_lp_inner_fec_rate : Proc(IDVBTLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_lp_inner_fec_rate : Proc(IDVBTLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_h_alpha : Proc(IDVBTLocator*, HierarchyAlpha*, HRESULT)
    put_h_alpha : Proc(IDVBTLocator*, HierarchyAlpha, HRESULT)
    get_guard : Proc(IDVBTLocator*, GuardInterval*, HRESULT)
    put_guard : Proc(IDVBTLocator*, GuardInterval, HRESULT)
    get_mode : Proc(IDVBTLocator*, TransmissionMode*, HRESULT)
    put_mode : Proc(IDVBTLocator*, TransmissionMode, HRESULT)
    get_other_frequency_in_use : Proc(IDVBTLocator*, Int16*, HRESULT)
    put_other_frequency_in_use : Proc(IDVBTLocator*, Int16, HRESULT)
  end

  IDVBTLocator_GUID = LibC::GUID.new("8664da16-dda2-42ac-926a-c18f9127c302")
  CLSID_IDVBTLocator = "8664da16-dda2-42ac-926a-c18f9127c302"
  struct IDVBTLocator
    lpVtbl : IDVBTLocatorVTbl*
  end

  struct IDVBTLocator2VTbl
    query_interface : Proc(IDVBTLocator2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBTLocator2*, UInt32)
    release : Proc(IDVBTLocator2*, UInt32)
    get_type_info_count : Proc(IDVBTLocator2*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBTLocator2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBTLocator2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBTLocator2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IDVBTLocator2*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IDVBTLocator2*, Int32, HRESULT)
    get_inner_fec : Proc(IDVBTLocator2*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IDVBTLocator2*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IDVBTLocator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IDVBTLocator2*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IDVBTLocator2*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IDVBTLocator2*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IDVBTLocator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IDVBTLocator2*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IDVBTLocator2*, ModulationType*, HRESULT)
    put_modulation : Proc(IDVBTLocator2*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IDVBTLocator2*, Int32*, HRESULT)
    put_symbol_rate : Proc(IDVBTLocator2*, Int32, HRESULT)
    clone : Proc(IDVBTLocator2*, ILocator*, HRESULT)
    get_bandwidth : Proc(IDVBTLocator2*, Int32*, HRESULT)
    put_bandwidth : Proc(IDVBTLocator2*, Int32, HRESULT)
    get_lp_inner_fec : Proc(IDVBTLocator2*, FECMethod*, HRESULT)
    put_lp_inner_fec : Proc(IDVBTLocator2*, FECMethod, HRESULT)
    get_lp_inner_fec_rate : Proc(IDVBTLocator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_lp_inner_fec_rate : Proc(IDVBTLocator2*, BinaryConvolutionCodeRate, HRESULT)
    get_h_alpha : Proc(IDVBTLocator2*, HierarchyAlpha*, HRESULT)
    put_h_alpha : Proc(IDVBTLocator2*, HierarchyAlpha, HRESULT)
    get_guard : Proc(IDVBTLocator2*, GuardInterval*, HRESULT)
    put_guard : Proc(IDVBTLocator2*, GuardInterval, HRESULT)
    get_mode : Proc(IDVBTLocator2*, TransmissionMode*, HRESULT)
    put_mode : Proc(IDVBTLocator2*, TransmissionMode, HRESULT)
    get_other_frequency_in_use : Proc(IDVBTLocator2*, Int16*, HRESULT)
    put_other_frequency_in_use : Proc(IDVBTLocator2*, Int16, HRESULT)
    get_physical_layer_pipe_id : Proc(IDVBTLocator2*, Int32*, HRESULT)
    put_physical_layer_pipe_id : Proc(IDVBTLocator2*, Int32, HRESULT)
  end

  IDVBTLocator2_GUID = LibC::GUID.new("448a2edf-ae95-4b43-a3cc-747843c453d4")
  CLSID_IDVBTLocator2 = "448a2edf-ae95-4b43-a3cc-747843c453d4"
  struct IDVBTLocator2
    lpVtbl : IDVBTLocator2VTbl*
  end

  struct IDVBSLocatorVTbl
    query_interface : Proc(IDVBSLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBSLocator*, UInt32)
    release : Proc(IDVBSLocator*, UInt32)
    get_type_info_count : Proc(IDVBSLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBSLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBSLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBSLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IDVBSLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IDVBSLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IDVBSLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IDVBSLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IDVBSLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IDVBSLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IDVBSLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IDVBSLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IDVBSLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IDVBSLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IDVBSLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IDVBSLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IDVBSLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IDVBSLocator*, Int32, HRESULT)
    clone : Proc(IDVBSLocator*, ILocator*, HRESULT)
    get_signal_polarisation : Proc(IDVBSLocator*, Polarisation*, HRESULT)
    put_signal_polarisation : Proc(IDVBSLocator*, Polarisation, HRESULT)
    get_west_position : Proc(IDVBSLocator*, Int16*, HRESULT)
    put_west_position : Proc(IDVBSLocator*, Int16, HRESULT)
    get_orbital_position : Proc(IDVBSLocator*, Int32*, HRESULT)
    put_orbital_position : Proc(IDVBSLocator*, Int32, HRESULT)
    get_azimuth : Proc(IDVBSLocator*, Int32*, HRESULT)
    put_azimuth : Proc(IDVBSLocator*, Int32, HRESULT)
    get_elevation : Proc(IDVBSLocator*, Int32*, HRESULT)
    put_elevation : Proc(IDVBSLocator*, Int32, HRESULT)
  end

  IDVBSLocator_GUID = LibC::GUID.new("3d7c353c-0d04-45f1-a742-f97cc1188dc8")
  CLSID_IDVBSLocator = "3d7c353c-0d04-45f1-a742-f97cc1188dc8"
  struct IDVBSLocator
    lpVtbl : IDVBSLocatorVTbl*
  end

  struct IDVBSLocator2VTbl
    query_interface : Proc(IDVBSLocator2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBSLocator2*, UInt32)
    release : Proc(IDVBSLocator2*, UInt32)
    get_type_info_count : Proc(IDVBSLocator2*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBSLocator2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBSLocator2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBSLocator2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IDVBSLocator2*, Int32, HRESULT)
    get_inner_fec : Proc(IDVBSLocator2*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IDVBSLocator2*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IDVBSLocator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IDVBSLocator2*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IDVBSLocator2*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IDVBSLocator2*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IDVBSLocator2*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IDVBSLocator2*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IDVBSLocator2*, ModulationType*, HRESULT)
    put_modulation : Proc(IDVBSLocator2*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_symbol_rate : Proc(IDVBSLocator2*, Int32, HRESULT)
    clone : Proc(IDVBSLocator2*, ILocator*, HRESULT)
    get_signal_polarisation : Proc(IDVBSLocator2*, Polarisation*, HRESULT)
    put_signal_polarisation : Proc(IDVBSLocator2*, Polarisation, HRESULT)
    get_west_position : Proc(IDVBSLocator2*, Int16*, HRESULT)
    put_west_position : Proc(IDVBSLocator2*, Int16, HRESULT)
    get_orbital_position : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_orbital_position : Proc(IDVBSLocator2*, Int32, HRESULT)
    get_azimuth : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_azimuth : Proc(IDVBSLocator2*, Int32, HRESULT)
    get_elevation : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_elevation : Proc(IDVBSLocator2*, Int32, HRESULT)
    get_diseq_lnb_source : Proc(IDVBSLocator2*, LNB_Source*, HRESULT)
    put_diseq_lnb_source : Proc(IDVBSLocator2*, LNB_Source, HRESULT)
    get_local_oscillator_override_low : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_local_oscillator_override_low : Proc(IDVBSLocator2*, Int32, HRESULT)
    get_local_oscillator_override_high : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_local_oscillator_override_high : Proc(IDVBSLocator2*, Int32, HRESULT)
    get_local_lnb_switch_override : Proc(IDVBSLocator2*, Int32*, HRESULT)
    put_local_lnb_switch_override : Proc(IDVBSLocator2*, Int32, HRESULT)
    get_local_spectral_inversion_override : Proc(IDVBSLocator2*, SpectralInversion*, HRESULT)
    put_local_spectral_inversion_override : Proc(IDVBSLocator2*, SpectralInversion, HRESULT)
    get_signal_roll_off : Proc(IDVBSLocator2*, RollOff*, HRESULT)
    put_signal_roll_off : Proc(IDVBSLocator2*, RollOff, HRESULT)
    get_signal_pilot : Proc(IDVBSLocator2*, Pilot*, HRESULT)
    put_signal_pilot : Proc(IDVBSLocator2*, Pilot, HRESULT)
  end

  IDVBSLocator2_GUID = LibC::GUID.new("6044634a-1733-4f99-b982-5fb12afce4f0")
  CLSID_IDVBSLocator2 = "6044634a-1733-4f99-b982-5fb12afce4f0"
  struct IDVBSLocator2
    lpVtbl : IDVBSLocator2VTbl*
  end

  struct IDVBCLocatorVTbl
    query_interface : Proc(IDVBCLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVBCLocator*, UInt32)
    release : Proc(IDVBCLocator*, UInt32)
    get_type_info_count : Proc(IDVBCLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IDVBCLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDVBCLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDVBCLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IDVBCLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IDVBCLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IDVBCLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IDVBCLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IDVBCLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IDVBCLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IDVBCLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IDVBCLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IDVBCLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IDVBCLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IDVBCLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IDVBCLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IDVBCLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IDVBCLocator*, Int32, HRESULT)
    clone : Proc(IDVBCLocator*, ILocator*, HRESULT)
  end

  IDVBCLocator_GUID = LibC::GUID.new("6e42f36e-1dd2-43c4-9f78-69d25ae39034")
  CLSID_IDVBCLocator = "6e42f36e-1dd2-43c4-9f78-69d25ae39034"
  struct IDVBCLocator
    lpVtbl : IDVBCLocatorVTbl*
  end

  struct IISDBSLocatorVTbl
    query_interface : Proc(IISDBSLocator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDBSLocator*, UInt32)
    release : Proc(IISDBSLocator*, UInt32)
    get_type_info_count : Proc(IISDBSLocator*, UInt32*, HRESULT)
    get_type_info : Proc(IISDBSLocator*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IISDBSLocator*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IISDBSLocator*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_carrier_frequency : Proc(IISDBSLocator*, Int32*, HRESULT)
    put_carrier_frequency : Proc(IISDBSLocator*, Int32, HRESULT)
    get_inner_fec : Proc(IISDBSLocator*, FECMethod*, HRESULT)
    put_inner_fec : Proc(IISDBSLocator*, FECMethod, HRESULT)
    get_inner_fec_rate : Proc(IISDBSLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_inner_fec_rate : Proc(IISDBSLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_outer_fec : Proc(IISDBSLocator*, FECMethod*, HRESULT)
    put_outer_fec : Proc(IISDBSLocator*, FECMethod, HRESULT)
    get_outer_fec_rate : Proc(IISDBSLocator*, BinaryConvolutionCodeRate*, HRESULT)
    put_outer_fec_rate : Proc(IISDBSLocator*, BinaryConvolutionCodeRate, HRESULT)
    get_modulation : Proc(IISDBSLocator*, ModulationType*, HRESULT)
    put_modulation : Proc(IISDBSLocator*, ModulationType, HRESULT)
    get_symbol_rate : Proc(IISDBSLocator*, Int32*, HRESULT)
    put_symbol_rate : Proc(IISDBSLocator*, Int32, HRESULT)
    clone : Proc(IISDBSLocator*, ILocator*, HRESULT)
    get_signal_polarisation : Proc(IISDBSLocator*, Polarisation*, HRESULT)
    put_signal_polarisation : Proc(IISDBSLocator*, Polarisation, HRESULT)
    get_west_position : Proc(IISDBSLocator*, Int16*, HRESULT)
    put_west_position : Proc(IISDBSLocator*, Int16, HRESULT)
    get_orbital_position : Proc(IISDBSLocator*, Int32*, HRESULT)
    put_orbital_position : Proc(IISDBSLocator*, Int32, HRESULT)
    get_azimuth : Proc(IISDBSLocator*, Int32*, HRESULT)
    put_azimuth : Proc(IISDBSLocator*, Int32, HRESULT)
    get_elevation : Proc(IISDBSLocator*, Int32*, HRESULT)
    put_elevation : Proc(IISDBSLocator*, Int32, HRESULT)
  end

  IISDBSLocator_GUID = LibC::GUID.new("c9897087-e29c-473f-9e4b-7072123dea14")
  CLSID_IISDBSLocator = "c9897087-e29c-473f-9e4b-7072123dea14"
  struct IISDBSLocator
    lpVtbl : IISDBSLocatorVTbl*
  end

  struct IESOpenMmiEventVTbl
    query_interface : Proc(IESOpenMmiEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESOpenMmiEvent*, UInt32)
    release : Proc(IESOpenMmiEvent*, UInt32)
    get_event_id : Proc(IESOpenMmiEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESOpenMmiEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESOpenMmiEvent*, UInt32, HRESULT)
    get_data : Proc(IESOpenMmiEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESOpenMmiEvent*, UInt8**, HRESULT)
    get_dialog_number : Proc(IESOpenMmiEvent*, UInt32*, UInt32*, HRESULT)
    get_dialog_type : Proc(IESOpenMmiEvent*, Guid*, HRESULT)
    get_dialog_data : Proc(IESOpenMmiEvent*, SAFEARRAY**, HRESULT)
    get_dialog_string_data : Proc(IESOpenMmiEvent*, UInt8**, UInt8**, HRESULT)
  end

  IESOpenMmiEvent_GUID = LibC::GUID.new("ba4b6526-1a35-4635-8b56-3ec612746a8c")
  CLSID_IESOpenMmiEvent = "ba4b6526-1a35-4635-8b56-3ec612746a8c"
  struct IESOpenMmiEvent
    lpVtbl : IESOpenMmiEventVTbl*
  end

  struct IESCloseMmiEventVTbl
    query_interface : Proc(IESCloseMmiEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESCloseMmiEvent*, UInt32)
    release : Proc(IESCloseMmiEvent*, UInt32)
    get_event_id : Proc(IESCloseMmiEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESCloseMmiEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESCloseMmiEvent*, UInt32, HRESULT)
    get_data : Proc(IESCloseMmiEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESCloseMmiEvent*, UInt8**, HRESULT)
    get_dialog_number : Proc(IESCloseMmiEvent*, UInt32*, HRESULT)
  end

  IESCloseMmiEvent_GUID = LibC::GUID.new("6b80e96f-55e2-45aa-b754-0c23c8e7d5c1")
  CLSID_IESCloseMmiEvent = "6b80e96f-55e2-45aa-b754-0c23c8e7d5c1"
  struct IESCloseMmiEvent
    lpVtbl : IESCloseMmiEventVTbl*
  end

  struct IESValueUpdatedEventVTbl
    query_interface : Proc(IESValueUpdatedEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESValueUpdatedEvent*, UInt32)
    release : Proc(IESValueUpdatedEvent*, UInt32)
    get_event_id : Proc(IESValueUpdatedEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESValueUpdatedEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESValueUpdatedEvent*, UInt32, HRESULT)
    get_data : Proc(IESValueUpdatedEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESValueUpdatedEvent*, UInt8**, HRESULT)
    get_value_names : Proc(IESValueUpdatedEvent*, SAFEARRAY**, HRESULT)
  end

  IESValueUpdatedEvent_GUID = LibC::GUID.new("8a24c46e-bb63-4664-8602-5d9c718c146d")
  CLSID_IESValueUpdatedEvent = "8a24c46e-bb63-4664-8602-5d9c718c146d"
  struct IESValueUpdatedEvent
    lpVtbl : IESValueUpdatedEventVTbl*
  end

  struct IESRequestTunerEventVTbl
    query_interface : Proc(IESRequestTunerEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESRequestTunerEvent*, UInt32)
    release : Proc(IESRequestTunerEvent*, UInt32)
    get_event_id : Proc(IESRequestTunerEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESRequestTunerEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESRequestTunerEvent*, UInt32, HRESULT)
    get_data : Proc(IESRequestTunerEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESRequestTunerEvent*, UInt8**, HRESULT)
    get_priority : Proc(IESRequestTunerEvent*, UInt8*, HRESULT)
    get_reason : Proc(IESRequestTunerEvent*, UInt8*, HRESULT)
    get_consequences : Proc(IESRequestTunerEvent*, UInt8*, HRESULT)
    get_estimated_time : Proc(IESRequestTunerEvent*, UInt32*, HRESULT)
  end

  IESRequestTunerEvent_GUID = LibC::GUID.new("54c7a5e8-c3bb-4f51-af14-e0e2c0e34c6d")
  CLSID_IESRequestTunerEvent = "54c7a5e8-c3bb-4f51-af14-e0e2c0e34c6d"
  struct IESRequestTunerEvent
    lpVtbl : IESRequestTunerEventVTbl*
  end

  struct IESIsdbCasResponseEventVTbl
    query_interface : Proc(IESIsdbCasResponseEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESIsdbCasResponseEvent*, UInt32)
    release : Proc(IESIsdbCasResponseEvent*, UInt32)
    get_event_id : Proc(IESIsdbCasResponseEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESIsdbCasResponseEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESIsdbCasResponseEvent*, UInt32, HRESULT)
    get_data : Proc(IESIsdbCasResponseEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESIsdbCasResponseEvent*, UInt8**, HRESULT)
    get_request_id : Proc(IESIsdbCasResponseEvent*, UInt32*, HRESULT)
    get_status : Proc(IESIsdbCasResponseEvent*, UInt32*, HRESULT)
    get_data_length : Proc(IESIsdbCasResponseEvent*, UInt32*, HRESULT)
    get_response_data : Proc(IESIsdbCasResponseEvent*, SAFEARRAY**, HRESULT)
  end

  IESIsdbCasResponseEvent_GUID = LibC::GUID.new("2017cb03-dc0f-4c24-83ca-36307b2cd19f")
  CLSID_IESIsdbCasResponseEvent = "2017cb03-dc0f-4c24-83ca-36307b2cd19f"
  struct IESIsdbCasResponseEvent
    lpVtbl : IESIsdbCasResponseEventVTbl*
  end

  struct IGpnvsCommonBaseVTbl
    query_interface : Proc(IGpnvsCommonBase*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGpnvsCommonBase*, UInt32)
    release : Proc(IGpnvsCommonBase*, UInt32)
    get_value_update_name : Proc(IGpnvsCommonBase*, UInt8**, HRESULT)
  end

  IGpnvsCommonBase_GUID = LibC::GUID.new("907e0b5c-e42d-4f04-91f0-26f401f36907")
  CLSID_IGpnvsCommonBase = "907e0b5c-e42d-4f04-91f0-26f401f36907"
  struct IGpnvsCommonBase
    lpVtbl : IGpnvsCommonBaseVTbl*
  end

  struct IESEventFactoryVTbl
    query_interface : Proc(IESEventFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESEventFactory*, UInt32)
    release : Proc(IESEventFactory*, UInt32)
    create_es_event : Proc(IESEventFactory*, IUnknown, UInt32, Guid, UInt32, UInt8*, UInt8*, IUnknown, IESEvent*, HRESULT)
  end

  IESEventFactory_GUID = LibC::GUID.new("506a09b8-7f86-4e04-ac05-3303bfe8fc49")
  CLSID_IESEventFactory = "506a09b8-7f86-4e04-ac05-3303bfe8fc49"
  struct IESEventFactory
    lpVtbl : IESEventFactoryVTbl*
  end

  struct IESLicenseRenewalResultEventVTbl
    query_interface : Proc(IESLicenseRenewalResultEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESLicenseRenewalResultEvent*, UInt32)
    release : Proc(IESLicenseRenewalResultEvent*, UInt32)
    get_event_id : Proc(IESLicenseRenewalResultEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESLicenseRenewalResultEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESLicenseRenewalResultEvent*, UInt32, HRESULT)
    get_data : Proc(IESLicenseRenewalResultEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESLicenseRenewalResultEvent*, UInt8**, HRESULT)
    get_callers_id : Proc(IESLicenseRenewalResultEvent*, UInt32*, HRESULT)
    get_file_name : Proc(IESLicenseRenewalResultEvent*, UInt8**, HRESULT)
    is_renewal_successful : Proc(IESLicenseRenewalResultEvent*, LibC::BOOL*, HRESULT)
    is_check_entitlement_call_required : Proc(IESLicenseRenewalResultEvent*, LibC::BOOL*, HRESULT)
    get_descrambled_status : Proc(IESLicenseRenewalResultEvent*, UInt32*, HRESULT)
    get_renewal_result_code : Proc(IESLicenseRenewalResultEvent*, UInt32*, HRESULT)
    get_cas_failure_code : Proc(IESLicenseRenewalResultEvent*, UInt32*, HRESULT)
    get_renewal_h_result : Proc(IESLicenseRenewalResultEvent*, HRESULT*, HRESULT)
    get_entitlement_token_length : Proc(IESLicenseRenewalResultEvent*, UInt32*, HRESULT)
    get_entitlement_token : Proc(IESLicenseRenewalResultEvent*, SAFEARRAY**, HRESULT)
    get_expiry_date : Proc(IESLicenseRenewalResultEvent*, UInt64*, HRESULT)
  end

  IESLicenseRenewalResultEvent_GUID = LibC::GUID.new("d5a48ef5-a81b-4df0-acaa-5e35e7ea45d4")
  CLSID_IESLicenseRenewalResultEvent = "d5a48ef5-a81b-4df0-acaa-5e35e7ea45d4"
  struct IESLicenseRenewalResultEvent
    lpVtbl : IESLicenseRenewalResultEventVTbl*
  end

  struct IESFileExpiryDateEventVTbl
    query_interface : Proc(IESFileExpiryDateEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESFileExpiryDateEvent*, UInt32)
    release : Proc(IESFileExpiryDateEvent*, UInt32)
    get_event_id : Proc(IESFileExpiryDateEvent*, UInt32*, HRESULT)
    get_event_type : Proc(IESFileExpiryDateEvent*, Guid*, HRESULT)
    set_completion_status : Proc(IESFileExpiryDateEvent*, UInt32, HRESULT)
    get_data : Proc(IESFileExpiryDateEvent*, SAFEARRAY**, HRESULT)
    get_string_data : Proc(IESFileExpiryDateEvent*, UInt8**, HRESULT)
    get_tuner_id : Proc(IESFileExpiryDateEvent*, Guid*, HRESULT)
    get_expiry_date : Proc(IESFileExpiryDateEvent*, UInt64*, HRESULT)
    get_final_expiry_date : Proc(IESFileExpiryDateEvent*, UInt64*, HRESULT)
    get_max_renewal_count : Proc(IESFileExpiryDateEvent*, UInt32*, HRESULT)
    is_entitlement_token_present : Proc(IESFileExpiryDateEvent*, LibC::BOOL*, HRESULT)
    does_expire_after_first_use : Proc(IESFileExpiryDateEvent*, LibC::BOOL*, HRESULT)
  end

  IESFileExpiryDateEvent_GUID = LibC::GUID.new("ba9edcb6-4d36-4cfe-8c56-87a6b0ca48e1")
  CLSID_IESFileExpiryDateEvent = "ba9edcb6-4d36-4cfe-8c56-87a6b0ca48e1"
  struct IESFileExpiryDateEvent
    lpVtbl : IESFileExpiryDateEventVTbl*
  end

  struct IESEventServiceVTbl
    query_interface : Proc(IESEventService*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESEventService*, UInt32)
    release : Proc(IESEventService*, UInt32)
    fire_es_event : Proc(IESEventService*, IESEvent, HRESULT)
  end

  IESEventService_GUID = LibC::GUID.new("ed89a619-4c06-4b2f-99eb-c7669b13047c")
  CLSID_IESEventService = "ed89a619-4c06-4b2f-99eb-c7669b13047c"
  struct IESEventService
    lpVtbl : IESEventServiceVTbl*
  end

  struct IESEventServiceConfigurationVTbl
    query_interface : Proc(IESEventServiceConfiguration*, Guid*, Void**, HRESULT)
    add_ref : Proc(IESEventServiceConfiguration*, UInt32)
    release : Proc(IESEventServiceConfiguration*, UInt32)
    set_parent : Proc(IESEventServiceConfiguration*, IESEventService, HRESULT)
    remove_parent : Proc(IESEventServiceConfiguration*, HRESULT)
    set_owner : Proc(IESEventServiceConfiguration*, IESEvents, HRESULT)
    remove_owner : Proc(IESEventServiceConfiguration*, HRESULT)
    set_graph : Proc(IESEventServiceConfiguration*, IFilterGraph, HRESULT)
    remove_graph : Proc(IESEventServiceConfiguration*, IFilterGraph, HRESULT)
  end

  IESEventServiceConfiguration_GUID = LibC::GUID.new("33b9daae-9309-491d-a051-bcad2a70cd66")
  CLSID_IESEventServiceConfiguration = "33b9daae-9309-491d-a051-bcad2a70cd66"
  struct IESEventServiceConfiguration
    lpVtbl : IESEventServiceConfigurationVTbl*
  end

  struct IRegisterTunerVTbl
    query_interface : Proc(IRegisterTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IRegisterTuner*, UInt32)
    release : Proc(IRegisterTuner*, UInt32)
    register : Proc(IRegisterTuner*, ITuner, IGraphBuilder, HRESULT)
    unregister : Proc(IRegisterTuner*, HRESULT)
  end

  IRegisterTuner_GUID = LibC::GUID.new("359b3901-572c-4854-bb49-cdef66606a25")
  CLSID_IRegisterTuner = "359b3901-572c-4854-bb49-cdef66606a25"
  struct IRegisterTuner
    lpVtbl : IRegisterTunerVTbl*
  end

  struct IBDAComparableVTbl
    query_interface : Proc(IBDAComparable*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDAComparable*, UInt32)
    release : Proc(IBDAComparable*, UInt32)
    compare_exact : Proc(IBDAComparable*, IDispatch, Int32*, HRESULT)
    compare_equivalent : Proc(IBDAComparable*, IDispatch, UInt32, Int32*, HRESULT)
    hash_exact : Proc(IBDAComparable*, Int64*, HRESULT)
    hash_exact_incremental : Proc(IBDAComparable*, Int64, Int64*, HRESULT)
    hash_equivalent : Proc(IBDAComparable*, UInt32, Int64*, HRESULT)
    hash_equivalent_incremental : Proc(IBDAComparable*, Int64, UInt32, Int64*, HRESULT)
  end

  IBDAComparable_GUID = LibC::GUID.new("b34505e0-2f0e-497b-80bc-d43f3b24ed7f")
  CLSID_IBDAComparable = "b34505e0-2f0e-497b-80bc-d43f3b24ed7f"
  struct IBDAComparable
    lpVtbl : IBDAComparableVTbl*
  end

  struct IPersistTuneXmlVTbl
    query_interface : Proc(IPersistTuneXml*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistTuneXml*, UInt32)
    release : Proc(IPersistTuneXml*, UInt32)
    get_class_id : Proc(IPersistTuneXml*, Guid*, HRESULT)
    init_new : Proc(IPersistTuneXml*, HRESULT)
    load : Proc(IPersistTuneXml*, VARIANT, HRESULT)
    save : Proc(IPersistTuneXml*, VARIANT*, HRESULT)
  end

  IPersistTuneXml_GUID = LibC::GUID.new("0754cd31-8d15-47a9-8215-d20064157244")
  CLSID_IPersistTuneXml = "0754cd31-8d15-47a9-8215-d20064157244"
  struct IPersistTuneXml
    lpVtbl : IPersistTuneXmlVTbl*
  end

  struct IPersistTuneXmlUtilityVTbl
    query_interface : Proc(IPersistTuneXmlUtility*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistTuneXmlUtility*, UInt32)
    release : Proc(IPersistTuneXmlUtility*, UInt32)
    deserialize : Proc(IPersistTuneXmlUtility*, VARIANT, IUnknown*, HRESULT)
  end

  IPersistTuneXmlUtility_GUID = LibC::GUID.new("990237ae-ac11-4614-be8f-dd217a4cb4cb")
  CLSID_IPersistTuneXmlUtility = "990237ae-ac11-4614-be8f-dd217a4cb4cb"
  struct IPersistTuneXmlUtility
    lpVtbl : IPersistTuneXmlUtilityVTbl*
  end

  struct IPersistTuneXmlUtility2VTbl
    query_interface : Proc(IPersistTuneXmlUtility2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPersistTuneXmlUtility2*, UInt32)
    release : Proc(IPersistTuneXmlUtility2*, UInt32)
    deserialize : Proc(IPersistTuneXmlUtility2*, VARIANT, IUnknown*, HRESULT)
    serialize : Proc(IPersistTuneXmlUtility2*, ITuneRequest, UInt8**, HRESULT)
  end

  IPersistTuneXmlUtility2_GUID = LibC::GUID.new("992e165f-ea24-4b2f-9a1d-009d92120451")
  CLSID_IPersistTuneXmlUtility2 = "992e165f-ea24-4b2f-9a1d-009d92120451"
  struct IPersistTuneXmlUtility2
    lpVtbl : IPersistTuneXmlUtility2VTbl*
  end

  struct IBDACreateTuneRequestExVTbl
    query_interface : Proc(IBDACreateTuneRequestEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDACreateTuneRequestEx*, UInt32)
    release : Proc(IBDACreateTuneRequestEx*, UInt32)
    create_tune_request_ex : Proc(IBDACreateTuneRequestEx*, Guid*, ITuneRequest*, HRESULT)
  end

  IBDACreateTuneRequestEx_GUID = LibC::GUID.new("c0a4a1d4-2b3c-491a-ba22-499fbadd4d12")
  CLSID_IBDACreateTuneRequestEx = "c0a4a1d4-2b3c-491a-ba22-499fbadd4d12"
  struct IBDACreateTuneRequestEx
    lpVtbl : IBDACreateTuneRequestExVTbl*
  end

  struct IETFilterConfigVTbl
    query_interface : Proc(IETFilterConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IETFilterConfig*, UInt32)
    release : Proc(IETFilterConfig*, UInt32)
    init_license : Proc(IETFilterConfig*, Int32, HRESULT)
    get_secure_channel_object : Proc(IETFilterConfig*, IUnknown*, HRESULT)
  end

  IETFilterConfig_GUID = LibC::GUID.new("c4c4c4d1-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IETFilterConfig = "c4c4c4d1-0049-4e2b-98fb-9537f6ce516d"
  struct IETFilterConfig
    lpVtbl : IETFilterConfigVTbl*
  end

  struct IDTFilterConfigVTbl
    query_interface : Proc(IDTFilterConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDTFilterConfig*, UInt32)
    release : Proc(IDTFilterConfig*, UInt32)
    get_secure_channel_object : Proc(IDTFilterConfig*, IUnknown*, HRESULT)
  end

  IDTFilterConfig_GUID = LibC::GUID.new("c4c4c4d2-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IDTFilterConfig = "c4c4c4d2-0049-4e2b-98fb-9537f6ce516d"
  struct IDTFilterConfig
    lpVtbl : IDTFilterConfigVTbl*
  end

  struct IXDSCodecConfigVTbl
    query_interface : Proc(IXDSCodecConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXDSCodecConfig*, UInt32)
    release : Proc(IXDSCodecConfig*, UInt32)
    get_secure_channel_object : Proc(IXDSCodecConfig*, IUnknown*, HRESULT)
    set_pause_buffer_time : Proc(IXDSCodecConfig*, UInt32, HRESULT)
  end

  IXDSCodecConfig_GUID = LibC::GUID.new("c4c4c4d3-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IXDSCodecConfig = "c4c4c4d3-0049-4e2b-98fb-9537f6ce516d"
  struct IXDSCodecConfig
    lpVtbl : IXDSCodecConfigVTbl*
  end

  struct IDTFilterLicenseRenewalVTbl
    query_interface : Proc(IDTFilterLicenseRenewal*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDTFilterLicenseRenewal*, UInt32)
    release : Proc(IDTFilterLicenseRenewal*, UInt32)
    get_license_renewal_data : Proc(IDTFilterLicenseRenewal*, LibC::LPWSTR*, LibC::LPWSTR*, LibC::LPWSTR*, HRESULT)
  end

  IDTFilterLicenseRenewal_GUID = LibC::GUID.new("8a78b317-e405-4a43-994a-620d8f5ce25e")
  CLSID_IDTFilterLicenseRenewal = "8a78b317-e405-4a43-994a-620d8f5ce25e"
  struct IDTFilterLicenseRenewal
    lpVtbl : IDTFilterLicenseRenewalVTbl*
  end

  struct IPTFilterLicenseRenewalVTbl
    query_interface : Proc(IPTFilterLicenseRenewal*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPTFilterLicenseRenewal*, UInt32)
    release : Proc(IPTFilterLicenseRenewal*, UInt32)
    renew_licenses : Proc(IPTFilterLicenseRenewal*, LibC::LPWSTR, LibC::LPWSTR, UInt32, LibC::BOOL, HRESULT)
    cancel_license_renewal : Proc(IPTFilterLicenseRenewal*, HRESULT)
  end

  IPTFilterLicenseRenewal_GUID = LibC::GUID.new("26d836a5-0c15-44c7-ac59-b0da8728f240")
  CLSID_IPTFilterLicenseRenewal = "26d836a5-0c15-44c7-ac59-b0da8728f240"
  struct IPTFilterLicenseRenewal
    lpVtbl : IPTFilterLicenseRenewalVTbl*
  end

  struct IMceBurnerControlVTbl
    query_interface : Proc(IMceBurnerControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMceBurnerControl*, UInt32)
    release : Proc(IMceBurnerControl*, UInt32)
    get_burner_no_decryption : Proc(IMceBurnerControl*, HRESULT)
  end

  IMceBurnerControl_GUID = LibC::GUID.new("5a86b91a-e71e-46c1-88a9-9bb338710552")
  CLSID_IMceBurnerControl = "5a86b91a-e71e-46c1-88a9-9bb338710552"
  struct IMceBurnerControl
    lpVtbl : IMceBurnerControlVTbl*
  end

  struct IETFilterVTbl
    query_interface : Proc(IETFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IETFilter*, UInt32)
    release : Proc(IETFilter*, UInt32)
    get_eval_rat_obj_ok : Proc(IETFilter*, HRESULT*, HRESULT)
    get_curr_rating : Proc(IETFilter*, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
    get_curr_license_exp_date : Proc(IETFilter*, ProtType*, Int32*, HRESULT)
    get_last_error_code : Proc(IETFilter*, HRESULT)
    set_recording_on : Proc(IETFilter*, LibC::BOOL, HRESULT)
  end

  IETFilter_GUID = LibC::GUID.new("c4c4c4b1-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IETFilter = "c4c4c4b1-0049-4e2b-98fb-9537f6ce516d"
  struct IETFilter
    lpVtbl : IETFilterVTbl*
  end

  struct IETFilterEventsVTbl
    query_interface : Proc(IETFilterEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IETFilterEvents*, UInt32)
    release : Proc(IETFilterEvents*, UInt32)
    get_type_info_count : Proc(IETFilterEvents*, UInt32*, HRESULT)
    get_type_info : Proc(IETFilterEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IETFilterEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IETFilterEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IETFilterEvents_GUID = LibC::GUID.new("c4c4c4c1-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IETFilterEvents = "c4c4c4c1-0049-4e2b-98fb-9537f6ce516d"
  struct IETFilterEvents
    lpVtbl : IETFilterEventsVTbl*
  end

  struct IDTFilterVTbl
    query_interface : Proc(IDTFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDTFilter*, UInt32)
    release : Proc(IDTFilter*, UInt32)
    get_eval_rat_obj_ok : Proc(IDTFilter*, HRESULT*, HRESULT)
    get_curr_rating : Proc(IDTFilter*, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
    get_blocked_rating_attributes : Proc(IDTFilter*, EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)
    put_blocked_rating_attributes : Proc(IDTFilter*, EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)
    get_block_un_rated : Proc(IDTFilter*, LibC::BOOL*, HRESULT)
    put_block_un_rated : Proc(IDTFilter*, LibC::BOOL, HRESULT)
    get_block_un_rated_delay : Proc(IDTFilter*, Int32*, HRESULT)
    put_block_un_rated_delay : Proc(IDTFilter*, Int32, HRESULT)
  end

  IDTFilter_GUID = LibC::GUID.new("c4c4c4b2-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IDTFilter = "c4c4c4b2-0049-4e2b-98fb-9537f6ce516d"
  struct IDTFilter
    lpVtbl : IDTFilterVTbl*
  end

  struct IDTFilter2VTbl
    query_interface : Proc(IDTFilter2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDTFilter2*, UInt32)
    release : Proc(IDTFilter2*, UInt32)
    get_eval_rat_obj_ok : Proc(IDTFilter2*, HRESULT*, HRESULT)
    get_curr_rating : Proc(IDTFilter2*, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
    get_blocked_rating_attributes : Proc(IDTFilter2*, EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)
    put_blocked_rating_attributes : Proc(IDTFilter2*, EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)
    get_block_un_rated : Proc(IDTFilter2*, LibC::BOOL*, HRESULT)
    put_block_un_rated : Proc(IDTFilter2*, LibC::BOOL, HRESULT)
    get_block_un_rated_delay : Proc(IDTFilter2*, Int32*, HRESULT)
    put_block_un_rated_delay : Proc(IDTFilter2*, Int32, HRESULT)
    get_challenge_url : Proc(IDTFilter2*, UInt8**, HRESULT)
    get_curr_license_exp_date : Proc(IDTFilter2*, ProtType*, Int32*, HRESULT)
    get_last_error_code : Proc(IDTFilter2*, HRESULT)
  end

  IDTFilter2_GUID = LibC::GUID.new("c4c4c4b4-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IDTFilter2 = "c4c4c4b4-0049-4e2b-98fb-9537f6ce516d"
  struct IDTFilter2
    lpVtbl : IDTFilter2VTbl*
  end

  struct IDTFilter3VTbl
    query_interface : Proc(IDTFilter3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDTFilter3*, UInt32)
    release : Proc(IDTFilter3*, UInt32)
    get_eval_rat_obj_ok : Proc(IDTFilter3*, HRESULT*, HRESULT)
    get_curr_rating : Proc(IDTFilter3*, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
    get_blocked_rating_attributes : Proc(IDTFilter3*, EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)
    put_blocked_rating_attributes : Proc(IDTFilter3*, EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)
    get_block_un_rated : Proc(IDTFilter3*, LibC::BOOL*, HRESULT)
    put_block_un_rated : Proc(IDTFilter3*, LibC::BOOL, HRESULT)
    get_block_un_rated_delay : Proc(IDTFilter3*, Int32*, HRESULT)
    put_block_un_rated_delay : Proc(IDTFilter3*, Int32, HRESULT)
    get_challenge_url : Proc(IDTFilter3*, UInt8**, HRESULT)
    get_curr_license_exp_date : Proc(IDTFilter3*, ProtType*, Int32*, HRESULT)
    get_last_error_code : Proc(IDTFilter3*, HRESULT)
    get_protection_type : Proc(IDTFilter3*, ProtType*, HRESULT)
    license_has_expiration_date : Proc(IDTFilter3*, LibC::BOOL*, HRESULT)
    set_rights : Proc(IDTFilter3*, UInt8*, HRESULT)
  end

  IDTFilter3_GUID = LibC::GUID.new("513998cc-e929-4cdf-9fbd-bad1e0314866")
  CLSID_IDTFilter3 = "513998cc-e929-4cdf-9fbd-bad1e0314866"
  struct IDTFilter3
    lpVtbl : IDTFilter3VTbl*
  end

  struct IDTFilterEventsVTbl
    query_interface : Proc(IDTFilterEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDTFilterEvents*, UInt32)
    release : Proc(IDTFilterEvents*, UInt32)
    get_type_info_count : Proc(IDTFilterEvents*, UInt32*, HRESULT)
    get_type_info : Proc(IDTFilterEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IDTFilterEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IDTFilterEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IDTFilterEvents_GUID = LibC::GUID.new("c4c4c4c2-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IDTFilterEvents = "c4c4c4c2-0049-4e2b-98fb-9537f6ce516d"
  struct IDTFilterEvents
    lpVtbl : IDTFilterEventsVTbl*
  end

  struct IXDSCodecVTbl
    query_interface : Proc(IXDSCodec*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXDSCodec*, UInt32)
    release : Proc(IXDSCodec*, UInt32)
    get_xds_to_rat_obj_ok : Proc(IXDSCodec*, HRESULT*, HRESULT)
    put_cc_substream_service : Proc(IXDSCodec*, Int32, HRESULT)
    get_cc_substream_service : Proc(IXDSCodec*, Int32*, HRESULT)
    get_content_advisory_rating : Proc(IXDSCodec*, Int32*, Int32*, Int32*, Int64*, Int64*, HRESULT)
    get_xds_packet : Proc(IXDSCodec*, Int32*, Int32*, UInt8**, Int32*, Int32*, Int64*, Int64*, HRESULT)
    get_curr_license_exp_date : Proc(IXDSCodec*, ProtType*, Int32*, HRESULT)
    get_last_error_code : Proc(IXDSCodec*, HRESULT)
  end

  IXDSCodec_GUID = LibC::GUID.new("c4c4c4b3-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IXDSCodec = "c4c4c4b3-0049-4e2b-98fb-9537f6ce516d"
  struct IXDSCodec
    lpVtbl : IXDSCodecVTbl*
  end

  struct IXDSCodecEventsVTbl
    query_interface : Proc(IXDSCodecEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXDSCodecEvents*, UInt32)
    release : Proc(IXDSCodecEvents*, UInt32)
    get_type_info_count : Proc(IXDSCodecEvents*, UInt32*, HRESULT)
    get_type_info : Proc(IXDSCodecEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IXDSCodecEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IXDSCodecEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IXDSCodecEvents_GUID = LibC::GUID.new("c4c4c4c3-0049-4e2b-98fb-9537f6ce516d")
  CLSID_IXDSCodecEvents = "c4c4c4c3-0049-4e2b-98fb-9537f6ce516d"
  struct IXDSCodecEvents
    lpVtbl : IXDSCodecEventsVTbl*
  end

  struct IXDSToRatVTbl
    query_interface : Proc(IXDSToRat*, Guid*, Void**, HRESULT)
    add_ref : Proc(IXDSToRat*, UInt32)
    release : Proc(IXDSToRat*, UInt32)
    get_type_info_count : Proc(IXDSToRat*, UInt32*, HRESULT)
    get_type_info : Proc(IXDSToRat*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IXDSToRat*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IXDSToRat*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    init : Proc(IXDSToRat*, HRESULT)
    parse_xds_byte_pair : Proc(IXDSToRat*, UInt8, UInt8, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
  end

  IXDSToRat_GUID = LibC::GUID.new("c5c5c5b0-3abc-11d6-b25b-00c04fa0c026")
  CLSID_IXDSToRat = "c5c5c5b0-3abc-11d6-b25b-00c04fa0c026"
  struct IXDSToRat
    lpVtbl : IXDSToRatVTbl*
  end

  struct IEvalRatVTbl
    query_interface : Proc(IEvalRat*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEvalRat*, UInt32)
    release : Proc(IEvalRat*, UInt32)
    get_type_info_count : Proc(IEvalRat*, UInt32*, HRESULT)
    get_type_info : Proc(IEvalRat*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IEvalRat*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IEvalRat*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_blocked_rating_attributes : Proc(IEvalRat*, EnTvRat_System, EnTvRat_GenericLevel, Int32*, HRESULT)
    put_blocked_rating_attributes : Proc(IEvalRat*, EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)
    get_block_un_rated : Proc(IEvalRat*, LibC::BOOL*, HRESULT)
    put_block_un_rated : Proc(IEvalRat*, LibC::BOOL, HRESULT)
    most_restrictive_rating : Proc(IEvalRat*, EnTvRat_System, EnTvRat_GenericLevel, Int32, EnTvRat_System, EnTvRat_GenericLevel, Int32, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
    test_rating : Proc(IEvalRat*, EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)
  end

  IEvalRat_GUID = LibC::GUID.new("c5c5c5b1-3abc-11d6-b25b-00c04fa0c026")
  CLSID_IEvalRat = "c5c5c5b1-3abc-11d6-b25b-00c04fa0c026"
  struct IEvalRat
    lpVtbl : IEvalRatVTbl*
  end

  struct IMSVidRectVTbl
    query_interface : Proc(IMSVidRect*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidRect*, UInt32)
    release : Proc(IMSVidRect*, UInt32)
    get_type_info_count : Proc(IMSVidRect*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidRect*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidRect*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidRect*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_top : Proc(IMSVidRect*, Int32*, HRESULT)
    put_top : Proc(IMSVidRect*, Int32, HRESULT)
    get_left : Proc(IMSVidRect*, Int32*, HRESULT)
    put_left : Proc(IMSVidRect*, Int32, HRESULT)
    get_width : Proc(IMSVidRect*, Int32*, HRESULT)
    put_width : Proc(IMSVidRect*, Int32, HRESULT)
    get_height : Proc(IMSVidRect*, Int32*, HRESULT)
    put_height : Proc(IMSVidRect*, Int32, HRESULT)
    get_h_wnd : Proc(IMSVidRect*, HANDLE*, HRESULT)
    put_h_wnd : Proc(IMSVidRect*, LibC::HANDLE, HRESULT)
    put_rect : Proc(IMSVidRect*, IMSVidRect, HRESULT)
  end

  IMSVidRect_GUID = LibC::GUID.new("7f5000a6-a440-47ca-8acc-c0e75531a2c2")
  CLSID_IMSVidRect = "7f5000a6-a440-47ca-8acc-c0e75531a2c2"
  struct IMSVidRect
    lpVtbl : IMSVidRectVTbl*
  end

  struct IMSVidGraphSegmentContainerVTbl
    query_interface : Proc(IMSVidGraphSegmentContainer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidGraphSegmentContainer*, UInt32)
    release : Proc(IMSVidGraphSegmentContainer*, UInt32)
    get_graph : Proc(IMSVidGraphSegmentContainer*, IGraphBuilder*, HRESULT)
    get_input : Proc(IMSVidGraphSegmentContainer*, IMSVidGraphSegment*, HRESULT)
    get_outputs : Proc(IMSVidGraphSegmentContainer*, IEnumMSVidGraphSegment*, HRESULT)
    get_video_renderer : Proc(IMSVidGraphSegmentContainer*, IMSVidGraphSegment*, HRESULT)
    get_audio_renderer : Proc(IMSVidGraphSegmentContainer*, IMSVidGraphSegment*, HRESULT)
    get_features : Proc(IMSVidGraphSegmentContainer*, IEnumMSVidGraphSegment*, HRESULT)
    get_composites : Proc(IMSVidGraphSegmentContainer*, IEnumMSVidGraphSegment*, HRESULT)
    get_parent_container : Proc(IMSVidGraphSegmentContainer*, IUnknown*, HRESULT)
    decompose : Proc(IMSVidGraphSegmentContainer*, IMSVidGraphSegment, HRESULT)
    is_windowless : Proc(IMSVidGraphSegmentContainer*, HRESULT)
    get_focus : Proc(IMSVidGraphSegmentContainer*, HRESULT)
  end

  IMSVidGraphSegmentContainer_GUID = LibC::GUID.new("3dd2903d-e0aa-11d2-b63a-00c04f79498e")
  CLSID_IMSVidGraphSegmentContainer = "3dd2903d-e0aa-11d2-b63a-00c04f79498e"
  struct IMSVidGraphSegmentContainer
    lpVtbl : IMSVidGraphSegmentContainerVTbl*
  end

  struct IMSVidGraphSegmentVTbl
    query_interface : Proc(IMSVidGraphSegment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidGraphSegment*, UInt32)
    release : Proc(IMSVidGraphSegment*, UInt32)
    get_class_id : Proc(IMSVidGraphSegment*, Guid*, HRESULT)
    get_init : Proc(IMSVidGraphSegment*, IUnknown*, HRESULT)
    put_init : Proc(IMSVidGraphSegment*, IUnknown, HRESULT)
    enum_filters : Proc(IMSVidGraphSegment*, IEnumFilters*, HRESULT)
    get_container : Proc(IMSVidGraphSegment*, IMSVidGraphSegmentContainer*, HRESULT)
    put_container : Proc(IMSVidGraphSegment*, IMSVidGraphSegmentContainer, HRESULT)
    get_type : Proc(IMSVidGraphSegment*, MSVidSegmentType*, HRESULT)
    get_category : Proc(IMSVidGraphSegment*, Guid*, HRESULT)
    build : Proc(IMSVidGraphSegment*, HRESULT)
    post_build : Proc(IMSVidGraphSegment*, HRESULT)
    pre_run : Proc(IMSVidGraphSegment*, HRESULT)
    post_run : Proc(IMSVidGraphSegment*, HRESULT)
    pre_stop : Proc(IMSVidGraphSegment*, HRESULT)
    post_stop : Proc(IMSVidGraphSegment*, HRESULT)
    on_event_notify : Proc(IMSVidGraphSegment*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    decompose : Proc(IMSVidGraphSegment*, HRESULT)
  end

  IMSVidGraphSegment_GUID = LibC::GUID.new("238dec54-adeb-4005-a349-f772b9afebc4")
  CLSID_IMSVidGraphSegment = "238dec54-adeb-4005-a349-f772b9afebc4"
  struct IMSVidGraphSegment
    lpVtbl : IMSVidGraphSegmentVTbl*
  end

  struct IMSVidGraphSegmentUserInputVTbl
    query_interface : Proc(IMSVidGraphSegmentUserInput*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidGraphSegmentUserInput*, UInt32)
    release : Proc(IMSVidGraphSegmentUserInput*, UInt32)
    click : Proc(IMSVidGraphSegmentUserInput*, HRESULT)
    dbl_click : Proc(IMSVidGraphSegmentUserInput*, HRESULT)
    key_down : Proc(IMSVidGraphSegmentUserInput*, Int16*, Int16, HRESULT)
    key_press : Proc(IMSVidGraphSegmentUserInput*, Int16*, HRESULT)
    key_up : Proc(IMSVidGraphSegmentUserInput*, Int16*, Int16, HRESULT)
    mouse_down : Proc(IMSVidGraphSegmentUserInput*, Int16, Int16, Int32, Int32, HRESULT)
    mouse_move : Proc(IMSVidGraphSegmentUserInput*, Int16, Int16, Int32, Int32, HRESULT)
    mouse_up : Proc(IMSVidGraphSegmentUserInput*, Int16, Int16, Int32, Int32, HRESULT)
  end

  IMSVidGraphSegmentUserInput_GUID = LibC::GUID.new("301c060e-20d9-4587-9b03-f82ed9a9943c")
  CLSID_IMSVidGraphSegmentUserInput = "301c060e-20d9-4587-9b03-f82ed9a9943c"
  struct IMSVidGraphSegmentUserInput
    lpVtbl : IMSVidGraphSegmentUserInputVTbl*
  end

  struct IMSVidCompositionSegmentVTbl
    query_interface : Proc(IMSVidCompositionSegment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidCompositionSegment*, UInt32)
    release : Proc(IMSVidCompositionSegment*, UInt32)
    get_class_id : Proc(IMSVidCompositionSegment*, Guid*, HRESULT)
    get_init : Proc(IMSVidCompositionSegment*, IUnknown*, HRESULT)
    put_init : Proc(IMSVidCompositionSegment*, IUnknown, HRESULT)
    enum_filters : Proc(IMSVidCompositionSegment*, IEnumFilters*, HRESULT)
    get_container : Proc(IMSVidCompositionSegment*, IMSVidGraphSegmentContainer*, HRESULT)
    put_container : Proc(IMSVidCompositionSegment*, IMSVidGraphSegmentContainer, HRESULT)
    get_type : Proc(IMSVidCompositionSegment*, MSVidSegmentType*, HRESULT)
    get_category : Proc(IMSVidCompositionSegment*, Guid*, HRESULT)
    build : Proc(IMSVidCompositionSegment*, HRESULT)
    post_build : Proc(IMSVidCompositionSegment*, HRESULT)
    pre_run : Proc(IMSVidCompositionSegment*, HRESULT)
    post_run : Proc(IMSVidCompositionSegment*, HRESULT)
    pre_stop : Proc(IMSVidCompositionSegment*, HRESULT)
    post_stop : Proc(IMSVidCompositionSegment*, HRESULT)
    on_event_notify : Proc(IMSVidCompositionSegment*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    decompose : Proc(IMSVidCompositionSegment*, HRESULT)
    compose : Proc(IMSVidCompositionSegment*, IMSVidGraphSegment, IMSVidGraphSegment, HRESULT)
    get_up : Proc(IMSVidCompositionSegment*, IMSVidGraphSegment*, HRESULT)
    get_down : Proc(IMSVidCompositionSegment*, IMSVidGraphSegment*, HRESULT)
  end

  IMSVidCompositionSegment_GUID = LibC::GUID.new("1c15d483-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidCompositionSegment = "1c15d483-911d-11d2-b632-00c04f79498e"
  struct IMSVidCompositionSegment
    lpVtbl : IMSVidCompositionSegmentVTbl*
  end

  struct IEnumMSVidGraphSegmentVTbl
    query_interface : Proc(IEnumMSVidGraphSegment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumMSVidGraphSegment*, UInt32)
    release : Proc(IEnumMSVidGraphSegment*, UInt32)
    next : Proc(IEnumMSVidGraphSegment*, UInt32, IMSVidGraphSegment*, UInt32*, HRESULT)
    skip : Proc(IEnumMSVidGraphSegment*, UInt32, HRESULT)
    reset : Proc(IEnumMSVidGraphSegment*, HRESULT)
    clone : Proc(IEnumMSVidGraphSegment*, IEnumMSVidGraphSegment*, HRESULT)
  end

  IEnumMSVidGraphSegment_GUID = LibC::GUID.new("3dd2903e-e0aa-11d2-b63a-00c04f79498e")
  CLSID_IEnumMSVidGraphSegment = "3dd2903e-e0aa-11d2-b63a-00c04f79498e"
  struct IEnumMSVidGraphSegment
    lpVtbl : IEnumMSVidGraphSegmentVTbl*
  end

  struct IMSVidVRGraphSegmentVTbl
    query_interface : Proc(IMSVidVRGraphSegment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVRGraphSegment*, UInt32)
    release : Proc(IMSVidVRGraphSegment*, UInt32)
    get_class_id : Proc(IMSVidVRGraphSegment*, Guid*, HRESULT)
    get_init : Proc(IMSVidVRGraphSegment*, IUnknown*, HRESULT)
    put_init : Proc(IMSVidVRGraphSegment*, IUnknown, HRESULT)
    enum_filters : Proc(IMSVidVRGraphSegment*, IEnumFilters*, HRESULT)
    get_container : Proc(IMSVidVRGraphSegment*, IMSVidGraphSegmentContainer*, HRESULT)
    put_container : Proc(IMSVidVRGraphSegment*, IMSVidGraphSegmentContainer, HRESULT)
    get_type : Proc(IMSVidVRGraphSegment*, MSVidSegmentType*, HRESULT)
    get_category : Proc(IMSVidVRGraphSegment*, Guid*, HRESULT)
    build : Proc(IMSVidVRGraphSegment*, HRESULT)
    post_build : Proc(IMSVidVRGraphSegment*, HRESULT)
    pre_run : Proc(IMSVidVRGraphSegment*, HRESULT)
    post_run : Proc(IMSVidVRGraphSegment*, HRESULT)
    pre_stop : Proc(IMSVidVRGraphSegment*, HRESULT)
    post_stop : Proc(IMSVidVRGraphSegment*, HRESULT)
    on_event_notify : Proc(IMSVidVRGraphSegment*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    decompose : Proc(IMSVidVRGraphSegment*, HRESULT)
    put__vm_renderer_mode : Proc(IMSVidVRGraphSegment*, Int32, HRESULT)
    put_owner : Proc(IMSVidVRGraphSegment*, LibC::HANDLE, HRESULT)
    get_owner : Proc(IMSVidVRGraphSegment*, HANDLE*, HRESULT)
    get_use_overlay : Proc(IMSVidVRGraphSegment*, Int16*, HRESULT)
    put_use_overlay : Proc(IMSVidVRGraphSegment*, Int16, HRESULT)
    get_visible : Proc(IMSVidVRGraphSegment*, Int16*, HRESULT)
    put_visible : Proc(IMSVidVRGraphSegment*, Int16, HRESULT)
    get_color_key : Proc(IMSVidVRGraphSegment*, UInt32*, HRESULT)
    put_color_key : Proc(IMSVidVRGraphSegment*, UInt32, HRESULT)
    get_source : Proc(IMSVidVRGraphSegment*, RECT*, HRESULT)
    put_source : Proc(IMSVidVRGraphSegment*, RECT, HRESULT)
    get_destination : Proc(IMSVidVRGraphSegment*, RECT*, HRESULT)
    put_destination : Proc(IMSVidVRGraphSegment*, RECT, HRESULT)
    get_native_size : Proc(IMSVidVRGraphSegment*, SIZE*, SIZE*, HRESULT)
    get_border_color : Proc(IMSVidVRGraphSegment*, UInt32*, HRESULT)
    put_border_color : Proc(IMSVidVRGraphSegment*, UInt32, HRESULT)
    get_maintain_aspect_ratio : Proc(IMSVidVRGraphSegment*, Int16*, HRESULT)
    put_maintain_aspect_ratio : Proc(IMSVidVRGraphSegment*, Int16, HRESULT)
    refresh : Proc(IMSVidVRGraphSegment*, HRESULT)
    display_change : Proc(IMSVidVRGraphSegment*, HRESULT)
    re_paint : Proc(IMSVidVRGraphSegment*, HDC, HRESULT)
  end

  IMSVidVRGraphSegment_GUID = LibC::GUID.new("dd47de3f-9874-4f7b-8b22-7cb2688461e7")
  CLSID_IMSVidVRGraphSegment = "dd47de3f-9874-4f7b-8b22-7cb2688461e7"
  struct IMSVidVRGraphSegment
    lpVtbl : IMSVidVRGraphSegmentVTbl*
  end

  struct IMSVidDeviceVTbl
    query_interface : Proc(IMSVidDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidDevice*, UInt32)
    release : Proc(IMSVidDevice*, UInt32)
    get_type_info_count : Proc(IMSVidDevice*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidDevice*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidDevice*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidDevice*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidDevice*, UInt8**, HRESULT)
    get_status : Proc(IMSVidDevice*, Int32*, HRESULT)
    put_power : Proc(IMSVidDevice*, Int16, HRESULT)
    get_power : Proc(IMSVidDevice*, Int16*, HRESULT)
    get_category : Proc(IMSVidDevice*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidDevice*, UInt8**, HRESULT)
    get__category : Proc(IMSVidDevice*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidDevice*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidDevice*, IMSVidDevice, Int16*, HRESULT)
  end

  IMSVidDevice_GUID = LibC::GUID.new("1c15d47c-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidDevice = "1c15d47c-911d-11d2-b632-00c04f79498e"
  struct IMSVidDevice
    lpVtbl : IMSVidDeviceVTbl*
  end

  struct IMSVidDevice2VTbl
    query_interface : Proc(IMSVidDevice2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidDevice2*, UInt32)
    release : Proc(IMSVidDevice2*, UInt32)
    get_device_path : Proc(IMSVidDevice2*, UInt8**, HRESULT)
  end

  IMSVidDevice2_GUID = LibC::GUID.new("87bd2783-ebc0-478c-b4a0-e8e7f43ab78e")
  CLSID_IMSVidDevice2 = "87bd2783-ebc0-478c-b4a0-e8e7f43ab78e"
  struct IMSVidDevice2
    lpVtbl : IMSVidDevice2VTbl*
  end

  struct IMSVidInputDeviceVTbl
    query_interface : Proc(IMSVidInputDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidInputDevice*, UInt32)
    release : Proc(IMSVidInputDevice*, UInt32)
    get_type_info_count : Proc(IMSVidInputDevice*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidInputDevice*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidInputDevice*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidInputDevice*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidInputDevice*, UInt8**, HRESULT)
    get_status : Proc(IMSVidInputDevice*, Int32*, HRESULT)
    put_power : Proc(IMSVidInputDevice*, Int16, HRESULT)
    get_power : Proc(IMSVidInputDevice*, Int16*, HRESULT)
    get_category : Proc(IMSVidInputDevice*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidInputDevice*, UInt8**, HRESULT)
    get__category : Proc(IMSVidInputDevice*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidInputDevice*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidInputDevice*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidInputDevice*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidInputDevice*, VARIANT*, HRESULT)
  end

  IMSVidInputDevice_GUID = LibC::GUID.new("37b0353d-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidInputDevice = "37b0353d-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidInputDevice
    lpVtbl : IMSVidInputDeviceVTbl*
  end

  struct IMSVidDeviceEventVTbl
    query_interface : Proc(IMSVidDeviceEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidDeviceEvent*, UInt32)
    release : Proc(IMSVidDeviceEvent*, UInt32)
    get_type_info_count : Proc(IMSVidDeviceEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidDeviceEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidDeviceEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidDeviceEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidDeviceEvent*, IMSVidDevice, Int32, Int32, HRESULT)
  end

  IMSVidDeviceEvent_GUID = LibC::GUID.new("1c15d480-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidDeviceEvent = "1c15d480-911d-11d2-b632-00c04f79498e"
  struct IMSVidDeviceEvent
    lpVtbl : IMSVidDeviceEventVTbl*
  end

  struct IMSVidInputDeviceEventVTbl
    query_interface : Proc(IMSVidInputDeviceEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidInputDeviceEvent*, UInt32)
    release : Proc(IMSVidInputDeviceEvent*, UInt32)
    get_type_info_count : Proc(IMSVidInputDeviceEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidInputDeviceEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidInputDeviceEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidInputDeviceEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IMSVidInputDeviceEvent_GUID = LibC::GUID.new("37b0353e-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidInputDeviceEvent = "37b0353e-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidInputDeviceEvent
    lpVtbl : IMSVidInputDeviceEventVTbl*
  end

  struct IMSVidVideoInputDeviceVTbl
    query_interface : Proc(IMSVidVideoInputDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVideoInputDevice*, UInt32)
    release : Proc(IMSVidVideoInputDevice*, UInt32)
    get_type_info_count : Proc(IMSVidVideoInputDevice*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidVideoInputDevice*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidVideoInputDevice*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidVideoInputDevice*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidVideoInputDevice*, UInt8**, HRESULT)
    get_status : Proc(IMSVidVideoInputDevice*, Int32*, HRESULT)
    put_power : Proc(IMSVidVideoInputDevice*, Int16, HRESULT)
    get_power : Proc(IMSVidVideoInputDevice*, Int16*, HRESULT)
    get_category : Proc(IMSVidVideoInputDevice*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidVideoInputDevice*, UInt8**, HRESULT)
    get__category : Proc(IMSVidVideoInputDevice*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidVideoInputDevice*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidVideoInputDevice*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidVideoInputDevice*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidVideoInputDevice*, VARIANT*, HRESULT)
  end

  IMSVidVideoInputDevice_GUID = LibC::GUID.new("1c15d47f-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidVideoInputDevice = "1c15d47f-911d-11d2-b632-00c04f79498e"
  struct IMSVidVideoInputDevice
    lpVtbl : IMSVidVideoInputDeviceVTbl*
  end

  struct IMSVidPlaybackVTbl
    query_interface : Proc(IMSVidPlayback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidPlayback*, UInt32)
    release : Proc(IMSVidPlayback*, UInt32)
    get_type_info_count : Proc(IMSVidPlayback*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidPlayback*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidPlayback*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidPlayback*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidPlayback*, UInt8**, HRESULT)
    get_status : Proc(IMSVidPlayback*, Int32*, HRESULT)
    put_power : Proc(IMSVidPlayback*, Int16, HRESULT)
    get_power : Proc(IMSVidPlayback*, Int16*, HRESULT)
    get_category : Proc(IMSVidPlayback*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidPlayback*, UInt8**, HRESULT)
    get__category : Proc(IMSVidPlayback*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidPlayback*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidPlayback*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidPlayback*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidPlayback*, VARIANT*, HRESULT)
    get_enable_reset_on_stop : Proc(IMSVidPlayback*, Int16*, HRESULT)
    put_enable_reset_on_stop : Proc(IMSVidPlayback*, Int16, HRESULT)
    run : Proc(IMSVidPlayback*, HRESULT)
    pause : Proc(IMSVidPlayback*, HRESULT)
    stop : Proc(IMSVidPlayback*, HRESULT)
    get_can_step : Proc(IMSVidPlayback*, Int16, Int16*, HRESULT)
    step : Proc(IMSVidPlayback*, Int32, HRESULT)
    put_rate : Proc(IMSVidPlayback*, Float64, HRESULT)
    get_rate : Proc(IMSVidPlayback*, Float64*, HRESULT)
    put_current_position : Proc(IMSVidPlayback*, Int32, HRESULT)
    get_current_position : Proc(IMSVidPlayback*, Int32*, HRESULT)
    put_position_mode : Proc(IMSVidPlayback*, PositionModeList, HRESULT)
    get_position_mode : Proc(IMSVidPlayback*, PositionModeList*, HRESULT)
    get_length : Proc(IMSVidPlayback*, Int32*, HRESULT)
  end

  IMSVidPlayback_GUID = LibC::GUID.new("37b03538-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidPlayback = "37b03538-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidPlayback
    lpVtbl : IMSVidPlaybackVTbl*
  end

  struct IMSVidPlaybackEventVTbl
    query_interface : Proc(IMSVidPlaybackEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidPlaybackEvent*, UInt32)
    release : Proc(IMSVidPlaybackEvent*, UInt32)
    get_type_info_count : Proc(IMSVidPlaybackEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidPlaybackEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidPlaybackEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidPlaybackEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    end_of_media : Proc(IMSVidPlaybackEvent*, IMSVidPlayback, HRESULT)
  end

  IMSVidPlaybackEvent_GUID = LibC::GUID.new("37b0353b-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidPlaybackEvent = "37b0353b-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidPlaybackEvent
    lpVtbl : IMSVidPlaybackEventVTbl*
  end

  struct IMSVidTunerVTbl
    query_interface : Proc(IMSVidTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidTuner*, UInt32)
    release : Proc(IMSVidTuner*, UInt32)
    get_type_info_count : Proc(IMSVidTuner*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidTuner*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidTuner*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidTuner*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidTuner*, UInt8**, HRESULT)
    get_status : Proc(IMSVidTuner*, Int32*, HRESULT)
    put_power : Proc(IMSVidTuner*, Int16, HRESULT)
    get_power : Proc(IMSVidTuner*, Int16*, HRESULT)
    get_category : Proc(IMSVidTuner*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidTuner*, UInt8**, HRESULT)
    get__category : Proc(IMSVidTuner*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidTuner*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidTuner*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidTuner*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidTuner*, VARIANT*, HRESULT)
    get_tune : Proc(IMSVidTuner*, ITuneRequest*, HRESULT)
    put_tune : Proc(IMSVidTuner*, ITuneRequest, HRESULT)
    get_tuning_space : Proc(IMSVidTuner*, ITuningSpace*, HRESULT)
    put_tuning_space : Proc(IMSVidTuner*, ITuningSpace, HRESULT)
  end

  IMSVidTuner_GUID = LibC::GUID.new("1c15d47d-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidTuner = "1c15d47d-911d-11d2-b632-00c04f79498e"
  struct IMSVidTuner
    lpVtbl : IMSVidTunerVTbl*
  end

  struct IMSVidTunerEventVTbl
    query_interface : Proc(IMSVidTunerEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidTunerEvent*, UInt32)
    release : Proc(IMSVidTunerEvent*, UInt32)
    get_type_info_count : Proc(IMSVidTunerEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidTunerEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidTunerEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidTunerEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    tune_changed : Proc(IMSVidTunerEvent*, IMSVidTuner, HRESULT)
  end

  IMSVidTunerEvent_GUID = LibC::GUID.new("1c15d485-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidTunerEvent = "1c15d485-911d-11d2-b632-00c04f79498e"
  struct IMSVidTunerEvent
    lpVtbl : IMSVidTunerEventVTbl*
  end

  struct IMSVidAnalogTunerVTbl
    query_interface : Proc(IMSVidAnalogTuner*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidAnalogTuner*, UInt32)
    release : Proc(IMSVidAnalogTuner*, UInt32)
    get_type_info_count : Proc(IMSVidAnalogTuner*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidAnalogTuner*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidAnalogTuner*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidAnalogTuner*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidAnalogTuner*, UInt8**, HRESULT)
    get_status : Proc(IMSVidAnalogTuner*, Int32*, HRESULT)
    put_power : Proc(IMSVidAnalogTuner*, Int16, HRESULT)
    get_power : Proc(IMSVidAnalogTuner*, Int16*, HRESULT)
    get_category : Proc(IMSVidAnalogTuner*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidAnalogTuner*, UInt8**, HRESULT)
    get__category : Proc(IMSVidAnalogTuner*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidAnalogTuner*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidAnalogTuner*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidAnalogTuner*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidAnalogTuner*, VARIANT*, HRESULT)
    get_tune : Proc(IMSVidAnalogTuner*, ITuneRequest*, HRESULT)
    put_tune : Proc(IMSVidAnalogTuner*, ITuneRequest, HRESULT)
    get_tuning_space : Proc(IMSVidAnalogTuner*, ITuningSpace*, HRESULT)
    put_tuning_space : Proc(IMSVidAnalogTuner*, ITuningSpace, HRESULT)
    get_channel : Proc(IMSVidAnalogTuner*, Int32*, HRESULT)
    put_channel : Proc(IMSVidAnalogTuner*, Int32, HRESULT)
    get_video_frequency : Proc(IMSVidAnalogTuner*, Int32*, HRESULT)
    get_audio_frequency : Proc(IMSVidAnalogTuner*, Int32*, HRESULT)
    get_country_code : Proc(IMSVidAnalogTuner*, Int32*, HRESULT)
    put_country_code : Proc(IMSVidAnalogTuner*, Int32, HRESULT)
    get_sap : Proc(IMSVidAnalogTuner*, Int16*, HRESULT)
    put_sap : Proc(IMSVidAnalogTuner*, Int16, HRESULT)
    channel_available : Proc(IMSVidAnalogTuner*, Int32, Int32*, Int16*, HRESULT)
  end

  IMSVidAnalogTuner_GUID = LibC::GUID.new("1c15d47e-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidAnalogTuner = "1c15d47e-911d-11d2-b632-00c04f79498e"
  struct IMSVidAnalogTuner
    lpVtbl : IMSVidAnalogTunerVTbl*
  end

  struct IMSVidAnalogTuner2VTbl
    query_interface : Proc(IMSVidAnalogTuner2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidAnalogTuner2*, UInt32)
    release : Proc(IMSVidAnalogTuner2*, UInt32)
    get_type_info_count : Proc(IMSVidAnalogTuner2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidAnalogTuner2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidAnalogTuner2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidAnalogTuner2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidAnalogTuner2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
    put_power : Proc(IMSVidAnalogTuner2*, Int16, HRESULT)
    get_power : Proc(IMSVidAnalogTuner2*, Int16*, HRESULT)
    get_category : Proc(IMSVidAnalogTuner2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidAnalogTuner2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidAnalogTuner2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidAnalogTuner2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidAnalogTuner2*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidAnalogTuner2*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidAnalogTuner2*, VARIANT*, HRESULT)
    get_tune : Proc(IMSVidAnalogTuner2*, ITuneRequest*, HRESULT)
    put_tune : Proc(IMSVidAnalogTuner2*, ITuneRequest, HRESULT)
    get_tuning_space : Proc(IMSVidAnalogTuner2*, ITuningSpace*, HRESULT)
    put_tuning_space : Proc(IMSVidAnalogTuner2*, ITuningSpace, HRESULT)
    get_channel : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
    put_channel : Proc(IMSVidAnalogTuner2*, Int32, HRESULT)
    get_video_frequency : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
    get_audio_frequency : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
    get_country_code : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
    put_country_code : Proc(IMSVidAnalogTuner2*, Int32, HRESULT)
    get_sap : Proc(IMSVidAnalogTuner2*, Int16*, HRESULT)
    put_sap : Proc(IMSVidAnalogTuner2*, Int16, HRESULT)
    channel_available : Proc(IMSVidAnalogTuner2*, Int32, Int32*, Int16*, HRESULT)
    get_tv_formats : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
    get_tuner_modes : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
    get_num_aux_inputs : Proc(IMSVidAnalogTuner2*, Int32*, HRESULT)
  end

  IMSVidAnalogTuner2_GUID = LibC::GUID.new("37647bf7-3dde-4cc8-a4dc-0d534d3d0037")
  CLSID_IMSVidAnalogTuner2 = "37647bf7-3dde-4cc8-a4dc-0d534d3d0037"
  struct IMSVidAnalogTuner2
    lpVtbl : IMSVidAnalogTuner2VTbl*
  end

  struct IMSVidAnalogTunerEventVTbl
    query_interface : Proc(IMSVidAnalogTunerEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidAnalogTunerEvent*, UInt32)
    release : Proc(IMSVidAnalogTunerEvent*, UInt32)
    get_type_info_count : Proc(IMSVidAnalogTunerEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidAnalogTunerEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidAnalogTunerEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidAnalogTunerEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    tune_changed : Proc(IMSVidAnalogTunerEvent*, IMSVidTuner, HRESULT)
  end

  IMSVidAnalogTunerEvent_GUID = LibC::GUID.new("1c15d486-911d-11d2-b632-00c04f79498e")
  CLSID_IMSVidAnalogTunerEvent = "1c15d486-911d-11d2-b632-00c04f79498e"
  struct IMSVidAnalogTunerEvent
    lpVtbl : IMSVidAnalogTunerEventVTbl*
  end

  struct IMSVidFilePlaybackVTbl
    query_interface : Proc(IMSVidFilePlayback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidFilePlayback*, UInt32)
    release : Proc(IMSVidFilePlayback*, UInt32)
    get_type_info_count : Proc(IMSVidFilePlayback*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidFilePlayback*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidFilePlayback*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidFilePlayback*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidFilePlayback*, UInt8**, HRESULT)
    get_status : Proc(IMSVidFilePlayback*, Int32*, HRESULT)
    put_power : Proc(IMSVidFilePlayback*, Int16, HRESULT)
    get_power : Proc(IMSVidFilePlayback*, Int16*, HRESULT)
    get_category : Proc(IMSVidFilePlayback*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidFilePlayback*, UInt8**, HRESULT)
    get__category : Proc(IMSVidFilePlayback*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidFilePlayback*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidFilePlayback*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidFilePlayback*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidFilePlayback*, VARIANT*, HRESULT)
    get_enable_reset_on_stop : Proc(IMSVidFilePlayback*, Int16*, HRESULT)
    put_enable_reset_on_stop : Proc(IMSVidFilePlayback*, Int16, HRESULT)
    run : Proc(IMSVidFilePlayback*, HRESULT)
    pause : Proc(IMSVidFilePlayback*, HRESULT)
    stop : Proc(IMSVidFilePlayback*, HRESULT)
    get_can_step : Proc(IMSVidFilePlayback*, Int16, Int16*, HRESULT)
    step : Proc(IMSVidFilePlayback*, Int32, HRESULT)
    put_rate : Proc(IMSVidFilePlayback*, Float64, HRESULT)
    get_rate : Proc(IMSVidFilePlayback*, Float64*, HRESULT)
    put_current_position : Proc(IMSVidFilePlayback*, Int32, HRESULT)
    get_current_position : Proc(IMSVidFilePlayback*, Int32*, HRESULT)
    put_position_mode : Proc(IMSVidFilePlayback*, PositionModeList, HRESULT)
    get_position_mode : Proc(IMSVidFilePlayback*, PositionModeList*, HRESULT)
    get_length : Proc(IMSVidFilePlayback*, Int32*, HRESULT)
    get_file_name : Proc(IMSVidFilePlayback*, UInt8**, HRESULT)
    put_file_name : Proc(IMSVidFilePlayback*, UInt8*, HRESULT)
  end

  IMSVidFilePlayback_GUID = LibC::GUID.new("37b03539-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidFilePlayback = "37b03539-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidFilePlayback
    lpVtbl : IMSVidFilePlaybackVTbl*
  end

  struct IMSVidFilePlayback2VTbl
    query_interface : Proc(IMSVidFilePlayback2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidFilePlayback2*, UInt32)
    release : Proc(IMSVidFilePlayback2*, UInt32)
    get_type_info_count : Proc(IMSVidFilePlayback2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidFilePlayback2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidFilePlayback2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidFilePlayback2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidFilePlayback2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidFilePlayback2*, Int32*, HRESULT)
    put_power : Proc(IMSVidFilePlayback2*, Int16, HRESULT)
    get_power : Proc(IMSVidFilePlayback2*, Int16*, HRESULT)
    get_category : Proc(IMSVidFilePlayback2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidFilePlayback2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidFilePlayback2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidFilePlayback2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidFilePlayback2*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidFilePlayback2*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidFilePlayback2*, VARIANT*, HRESULT)
    get_enable_reset_on_stop : Proc(IMSVidFilePlayback2*, Int16*, HRESULT)
    put_enable_reset_on_stop : Proc(IMSVidFilePlayback2*, Int16, HRESULT)
    run : Proc(IMSVidFilePlayback2*, HRESULT)
    pause : Proc(IMSVidFilePlayback2*, HRESULT)
    stop : Proc(IMSVidFilePlayback2*, HRESULT)
    get_can_step : Proc(IMSVidFilePlayback2*, Int16, Int16*, HRESULT)
    step : Proc(IMSVidFilePlayback2*, Int32, HRESULT)
    put_rate : Proc(IMSVidFilePlayback2*, Float64, HRESULT)
    get_rate : Proc(IMSVidFilePlayback2*, Float64*, HRESULT)
    put_current_position : Proc(IMSVidFilePlayback2*, Int32, HRESULT)
    get_current_position : Proc(IMSVidFilePlayback2*, Int32*, HRESULT)
    put_position_mode : Proc(IMSVidFilePlayback2*, PositionModeList, HRESULT)
    get_position_mode : Proc(IMSVidFilePlayback2*, PositionModeList*, HRESULT)
    get_length : Proc(IMSVidFilePlayback2*, Int32*, HRESULT)
    get_file_name : Proc(IMSVidFilePlayback2*, UInt8**, HRESULT)
    put_file_name : Proc(IMSVidFilePlayback2*, UInt8*, HRESULT)
    put__source_filter : Proc(IMSVidFilePlayback2*, UInt8*, HRESULT)
    put___source_filter : Proc(IMSVidFilePlayback2*, Guid, HRESULT)
  end

  IMSVidFilePlayback2_GUID = LibC::GUID.new("2f7e44af-6e52-4660-bc08-d8d542587d72")
  CLSID_IMSVidFilePlayback2 = "2f7e44af-6e52-4660-bc08-d8d542587d72"
  struct IMSVidFilePlayback2
    lpVtbl : IMSVidFilePlayback2VTbl*
  end

  struct IMSVidFilePlaybackEventVTbl
    query_interface : Proc(IMSVidFilePlaybackEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidFilePlaybackEvent*, UInt32)
    release : Proc(IMSVidFilePlaybackEvent*, UInt32)
    get_type_info_count : Proc(IMSVidFilePlaybackEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidFilePlaybackEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidFilePlaybackEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidFilePlaybackEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    end_of_media : Proc(IMSVidFilePlaybackEvent*, IMSVidPlayback, HRESULT)
  end

  IMSVidFilePlaybackEvent_GUID = LibC::GUID.new("37b0353a-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidFilePlaybackEvent = "37b0353a-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidFilePlaybackEvent
    lpVtbl : IMSVidFilePlaybackEventVTbl*
  end

  struct IMSVidWebDVDVTbl
    query_interface : Proc(IMSVidWebDVD*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidWebDVD*, UInt32)
    release : Proc(IMSVidWebDVD*, UInt32)
    get_type_info_count : Proc(IMSVidWebDVD*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidWebDVD*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidWebDVD*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidWebDVD*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidWebDVD*, UInt8**, HRESULT)
    get_status : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    put_power : Proc(IMSVidWebDVD*, Int16, HRESULT)
    get_power : Proc(IMSVidWebDVD*, Int16*, HRESULT)
    get_category : Proc(IMSVidWebDVD*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidWebDVD*, UInt8**, HRESULT)
    get__category : Proc(IMSVidWebDVD*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidWebDVD*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidWebDVD*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidWebDVD*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidWebDVD*, VARIANT*, HRESULT)
    get_enable_reset_on_stop : Proc(IMSVidWebDVD*, Int16*, HRESULT)
    put_enable_reset_on_stop : Proc(IMSVidWebDVD*, Int16, HRESULT)
    run : Proc(IMSVidWebDVD*, HRESULT)
    pause : Proc(IMSVidWebDVD*, HRESULT)
    stop : Proc(IMSVidWebDVD*, HRESULT)
    get_can_step : Proc(IMSVidWebDVD*, Int16, Int16*, HRESULT)
    step : Proc(IMSVidWebDVD*, Int32, HRESULT)
    put_rate : Proc(IMSVidWebDVD*, Float64, HRESULT)
    get_rate : Proc(IMSVidWebDVD*, Float64*, HRESULT)
    put_current_position : Proc(IMSVidWebDVD*, Int32, HRESULT)
    get_current_position : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    put_position_mode : Proc(IMSVidWebDVD*, PositionModeList, HRESULT)
    get_position_mode : Proc(IMSVidWebDVD*, PositionModeList*, HRESULT)
    get_length : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    on_dvd_event : Proc(IMSVidWebDVD*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    play_title : Proc(IMSVidWebDVD*, Int32, HRESULT)
    play_chapter_in_title : Proc(IMSVidWebDVD*, Int32, Int32, HRESULT)
    play_chapter : Proc(IMSVidWebDVD*, Int32, HRESULT)
    play_chapters_auto_stop : Proc(IMSVidWebDVD*, Int32, Int32, Int32, HRESULT)
    play_at_time : Proc(IMSVidWebDVD*, UInt8*, HRESULT)
    play_at_time_in_title : Proc(IMSVidWebDVD*, Int32, UInt8*, HRESULT)
    play_period_in_title_auto_stop : Proc(IMSVidWebDVD*, Int32, UInt8*, UInt8*, HRESULT)
    replay_chapter : Proc(IMSVidWebDVD*, HRESULT)
    play_prev_chapter : Proc(IMSVidWebDVD*, HRESULT)
    play_next_chapter : Proc(IMSVidWebDVD*, HRESULT)
    still_off : Proc(IMSVidWebDVD*, HRESULT)
    get_audio_language : Proc(IMSVidWebDVD*, Int32, Int16, UInt8**, HRESULT)
    show_menu : Proc(IMSVidWebDVD*, DVDMenuIDConstants, HRESULT)
    resume : Proc(IMSVidWebDVD*, HRESULT)
    return_from_submenu : Proc(IMSVidWebDVD*, HRESULT)
    get_buttons_available : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_button : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    select_and_activate_button : Proc(IMSVidWebDVD*, Int32, HRESULT)
    activate_button : Proc(IMSVidWebDVD*, HRESULT)
    select_right_button : Proc(IMSVidWebDVD*, HRESULT)
    select_left_button : Proc(IMSVidWebDVD*, HRESULT)
    select_lower_button : Proc(IMSVidWebDVD*, HRESULT)
    select_upper_button : Proc(IMSVidWebDVD*, HRESULT)
    activate_at_position : Proc(IMSVidWebDVD*, Int32, Int32, HRESULT)
    select_at_position : Proc(IMSVidWebDVD*, Int32, Int32, HRESULT)
    get_button_at_position : Proc(IMSVidWebDVD*, Int32, Int32, Int32*, HRESULT)
    get_number_of_chapters : Proc(IMSVidWebDVD*, Int32, Int32*, HRESULT)
    get_total_title_time : Proc(IMSVidWebDVD*, UInt8**, HRESULT)
    get_titles_available : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_volumes_available : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_volume : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_disc_side : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_domain : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_chapter : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_title : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_time : Proc(IMSVidWebDVD*, UInt8**, HRESULT)
    dvd_time_code2bstr : Proc(IMSVidWebDVD*, Int32, UInt8**, HRESULT)
    get_dvd_directory : Proc(IMSVidWebDVD*, UInt8**, HRESULT)
    put_dvd_directory : Proc(IMSVidWebDVD*, UInt8*, HRESULT)
    is_subpicture_stream_enabled : Proc(IMSVidWebDVD*, Int32, Int16*, HRESULT)
    is_audio_stream_enabled : Proc(IMSVidWebDVD*, Int32, Int16*, HRESULT)
    get_current_subpicture_stream : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    put_current_subpicture_stream : Proc(IMSVidWebDVD*, Int32, HRESULT)
    get_subpicture_language : Proc(IMSVidWebDVD*, Int32, UInt8**, HRESULT)
    get_current_audio_stream : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    put_current_audio_stream : Proc(IMSVidWebDVD*, Int32, HRESULT)
    get_audio_streams_available : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_angles_available : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_current_angle : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    put_current_angle : Proc(IMSVidWebDVD*, Int32, HRESULT)
    get_subpicture_streams_available : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_subpicture_on : Proc(IMSVidWebDVD*, Int16*, HRESULT)
    put_subpicture_on : Proc(IMSVidWebDVD*, Int16, HRESULT)
    get_dvd_unique_id : Proc(IMSVidWebDVD*, UInt8**, HRESULT)
    accept_parental_level_change : Proc(IMSVidWebDVD*, Int16, UInt8*, UInt8*, HRESULT)
    notify_parental_level_change : Proc(IMSVidWebDVD*, Int16, HRESULT)
    select_parental_country : Proc(IMSVidWebDVD*, Int32, UInt8*, UInt8*, HRESULT)
    select_parental_level : Proc(IMSVidWebDVD*, Int32, UInt8*, UInt8*, HRESULT)
    get_title_parental_levels : Proc(IMSVidWebDVD*, Int32, Int32*, HRESULT)
    get_player_parental_country : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_player_parental_level : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    eject : Proc(IMSVidWebDVD*, HRESULT)
    uop_valid : Proc(IMSVidWebDVD*, Int32, Int16*, HRESULT)
    get_sprm : Proc(IMSVidWebDVD*, Int32, Int16*, HRESULT)
    get_gprm : Proc(IMSVidWebDVD*, Int32, Int16*, HRESULT)
    put_gprm : Proc(IMSVidWebDVD*, Int32, Int16, HRESULT)
    get_dvd_text_string_type : Proc(IMSVidWebDVD*, Int32, Int32, DVDTextStringType*, HRESULT)
    get_dvd_text_string : Proc(IMSVidWebDVD*, Int32, Int32, UInt8**, HRESULT)
    get_dvd_text_number_of_strings : Proc(IMSVidWebDVD*, Int32, Int32*, HRESULT)
    get_dvd_text_number_of_languages : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_dvd_text_language_lcid : Proc(IMSVidWebDVD*, Int32, Int32*, HRESULT)
    region_change : Proc(IMSVidWebDVD*, HRESULT)
    get_dvd_adm : Proc(IMSVidWebDVD*, IDispatch*, HRESULT)
    delete_bookmark : Proc(IMSVidWebDVD*, HRESULT)
    restore_bookmark : Proc(IMSVidWebDVD*, HRESULT)
    save_bookmark : Proc(IMSVidWebDVD*, HRESULT)
    select_default_audio_language : Proc(IMSVidWebDVD*, Int32, Int32, HRESULT)
    select_default_subpicture_language : Proc(IMSVidWebDVD*, Int32, DVDSPExt, HRESULT)
    get_preferred_subpicture_stream : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_default_menu_language : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    put_default_menu_language : Proc(IMSVidWebDVD*, Int32, HRESULT)
    get_default_subpicture_language : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_default_audio_language : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_default_subpicture_language_ext : Proc(IMSVidWebDVD*, DVDSPExt*, HRESULT)
    get_default_audio_language_ext : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    get_language_from_lcid : Proc(IMSVidWebDVD*, Int32, UInt8**, HRESULT)
    get_karaoke_audio_presentation_mode : Proc(IMSVidWebDVD*, Int32*, HRESULT)
    put_karaoke_audio_presentation_mode : Proc(IMSVidWebDVD*, Int32, HRESULT)
    get_karaoke_channel_content : Proc(IMSVidWebDVD*, Int32, Int32, Int32*, HRESULT)
    get_karaoke_channel_assignment : Proc(IMSVidWebDVD*, Int32, Int32*, HRESULT)
    restore_preferred_settings : Proc(IMSVidWebDVD*, HRESULT)
    get_button_rect : Proc(IMSVidWebDVD*, Int32, IMSVidRect*, HRESULT)
    get_dvd_screen_in_mouse_coordinates : Proc(IMSVidWebDVD*, IMSVidRect*, HRESULT)
    put_dvd_screen_in_mouse_coordinates : Proc(IMSVidWebDVD*, IMSVidRect, HRESULT)
  end

  IMSVidWebDVD_GUID = LibC::GUID.new("cf45f88b-ac56-4ee2-a73a-ed04e2885d3c")
  CLSID_IMSVidWebDVD = "cf45f88b-ac56-4ee2-a73a-ed04e2885d3c"
  struct IMSVidWebDVD
    lpVtbl : IMSVidWebDVDVTbl*
  end

  struct IMSVidWebDVD2VTbl
    query_interface : Proc(IMSVidWebDVD2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidWebDVD2*, UInt32)
    release : Proc(IMSVidWebDVD2*, UInt32)
    get_type_info_count : Proc(IMSVidWebDVD2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidWebDVD2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidWebDVD2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidWebDVD2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidWebDVD2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    put_power : Proc(IMSVidWebDVD2*, Int16, HRESULT)
    get_power : Proc(IMSVidWebDVD2*, Int16*, HRESULT)
    get_category : Proc(IMSVidWebDVD2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidWebDVD2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidWebDVD2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidWebDVD2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidWebDVD2*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidWebDVD2*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidWebDVD2*, VARIANT*, HRESULT)
    get_enable_reset_on_stop : Proc(IMSVidWebDVD2*, Int16*, HRESULT)
    put_enable_reset_on_stop : Proc(IMSVidWebDVD2*, Int16, HRESULT)
    run : Proc(IMSVidWebDVD2*, HRESULT)
    pause : Proc(IMSVidWebDVD2*, HRESULT)
    stop : Proc(IMSVidWebDVD2*, HRESULT)
    get_can_step : Proc(IMSVidWebDVD2*, Int16, Int16*, HRESULT)
    step : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    put_rate : Proc(IMSVidWebDVD2*, Float64, HRESULT)
    get_rate : Proc(IMSVidWebDVD2*, Float64*, HRESULT)
    put_current_position : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    get_current_position : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    put_position_mode : Proc(IMSVidWebDVD2*, PositionModeList, HRESULT)
    get_position_mode : Proc(IMSVidWebDVD2*, PositionModeList*, HRESULT)
    get_length : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    on_dvd_event : Proc(IMSVidWebDVD2*, Int32, LibC::IntPtrT, LibC::IntPtrT, HRESULT)
    play_title : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    play_chapter_in_title : Proc(IMSVidWebDVD2*, Int32, Int32, HRESULT)
    play_chapter : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    play_chapters_auto_stop : Proc(IMSVidWebDVD2*, Int32, Int32, Int32, HRESULT)
    play_at_time : Proc(IMSVidWebDVD2*, UInt8*, HRESULT)
    play_at_time_in_title : Proc(IMSVidWebDVD2*, Int32, UInt8*, HRESULT)
    play_period_in_title_auto_stop : Proc(IMSVidWebDVD2*, Int32, UInt8*, UInt8*, HRESULT)
    replay_chapter : Proc(IMSVidWebDVD2*, HRESULT)
    play_prev_chapter : Proc(IMSVidWebDVD2*, HRESULT)
    play_next_chapter : Proc(IMSVidWebDVD2*, HRESULT)
    still_off : Proc(IMSVidWebDVD2*, HRESULT)
    get_audio_language : Proc(IMSVidWebDVD2*, Int32, Int16, UInt8**, HRESULT)
    show_menu : Proc(IMSVidWebDVD2*, DVDMenuIDConstants, HRESULT)
    resume : Proc(IMSVidWebDVD2*, HRESULT)
    return_from_submenu : Proc(IMSVidWebDVD2*, HRESULT)
    get_buttons_available : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_button : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    select_and_activate_button : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    activate_button : Proc(IMSVidWebDVD2*, HRESULT)
    select_right_button : Proc(IMSVidWebDVD2*, HRESULT)
    select_left_button : Proc(IMSVidWebDVD2*, HRESULT)
    select_lower_button : Proc(IMSVidWebDVD2*, HRESULT)
    select_upper_button : Proc(IMSVidWebDVD2*, HRESULT)
    activate_at_position : Proc(IMSVidWebDVD2*, Int32, Int32, HRESULT)
    select_at_position : Proc(IMSVidWebDVD2*, Int32, Int32, HRESULT)
    get_button_at_position : Proc(IMSVidWebDVD2*, Int32, Int32, Int32*, HRESULT)
    get_number_of_chapters : Proc(IMSVidWebDVD2*, Int32, Int32*, HRESULT)
    get_total_title_time : Proc(IMSVidWebDVD2*, UInt8**, HRESULT)
    get_titles_available : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_volumes_available : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_volume : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_disc_side : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_domain : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_chapter : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_title : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_time : Proc(IMSVidWebDVD2*, UInt8**, HRESULT)
    dvd_time_code2bstr : Proc(IMSVidWebDVD2*, Int32, UInt8**, HRESULT)
    get_dvd_directory : Proc(IMSVidWebDVD2*, UInt8**, HRESULT)
    put_dvd_directory : Proc(IMSVidWebDVD2*, UInt8*, HRESULT)
    is_subpicture_stream_enabled : Proc(IMSVidWebDVD2*, Int32, Int16*, HRESULT)
    is_audio_stream_enabled : Proc(IMSVidWebDVD2*, Int32, Int16*, HRESULT)
    get_current_subpicture_stream : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    put_current_subpicture_stream : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    get_subpicture_language : Proc(IMSVidWebDVD2*, Int32, UInt8**, HRESULT)
    get_current_audio_stream : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    put_current_audio_stream : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    get_audio_streams_available : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_angles_available : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_current_angle : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    put_current_angle : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    get_subpicture_streams_available : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_subpicture_on : Proc(IMSVidWebDVD2*, Int16*, HRESULT)
    put_subpicture_on : Proc(IMSVidWebDVD2*, Int16, HRESULT)
    get_dvd_unique_id : Proc(IMSVidWebDVD2*, UInt8**, HRESULT)
    accept_parental_level_change : Proc(IMSVidWebDVD2*, Int16, UInt8*, UInt8*, HRESULT)
    notify_parental_level_change : Proc(IMSVidWebDVD2*, Int16, HRESULT)
    select_parental_country : Proc(IMSVidWebDVD2*, Int32, UInt8*, UInt8*, HRESULT)
    select_parental_level : Proc(IMSVidWebDVD2*, Int32, UInt8*, UInt8*, HRESULT)
    get_title_parental_levels : Proc(IMSVidWebDVD2*, Int32, Int32*, HRESULT)
    get_player_parental_country : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_player_parental_level : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    eject : Proc(IMSVidWebDVD2*, HRESULT)
    uop_valid : Proc(IMSVidWebDVD2*, Int32, Int16*, HRESULT)
    get_sprm : Proc(IMSVidWebDVD2*, Int32, Int16*, HRESULT)
    get_gprm : Proc(IMSVidWebDVD2*, Int32, Int16*, HRESULT)
    put_gprm : Proc(IMSVidWebDVD2*, Int32, Int16, HRESULT)
    get_dvd_text_string_type : Proc(IMSVidWebDVD2*, Int32, Int32, DVDTextStringType*, HRESULT)
    get_dvd_text_string : Proc(IMSVidWebDVD2*, Int32, Int32, UInt8**, HRESULT)
    get_dvd_text_number_of_strings : Proc(IMSVidWebDVD2*, Int32, Int32*, HRESULT)
    get_dvd_text_number_of_languages : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_dvd_text_language_lcid : Proc(IMSVidWebDVD2*, Int32, Int32*, HRESULT)
    region_change : Proc(IMSVidWebDVD2*, HRESULT)
    get_dvd_adm : Proc(IMSVidWebDVD2*, IDispatch*, HRESULT)
    delete_bookmark : Proc(IMSVidWebDVD2*, HRESULT)
    restore_bookmark : Proc(IMSVidWebDVD2*, HRESULT)
    save_bookmark : Proc(IMSVidWebDVD2*, HRESULT)
    select_default_audio_language : Proc(IMSVidWebDVD2*, Int32, Int32, HRESULT)
    select_default_subpicture_language : Proc(IMSVidWebDVD2*, Int32, DVDSPExt, HRESULT)
    get_preferred_subpicture_stream : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_default_menu_language : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    put_default_menu_language : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    get_default_subpicture_language : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_default_audio_language : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_default_subpicture_language_ext : Proc(IMSVidWebDVD2*, DVDSPExt*, HRESULT)
    get_default_audio_language_ext : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    get_language_from_lcid : Proc(IMSVidWebDVD2*, Int32, UInt8**, HRESULT)
    get_karaoke_audio_presentation_mode : Proc(IMSVidWebDVD2*, Int32*, HRESULT)
    put_karaoke_audio_presentation_mode : Proc(IMSVidWebDVD2*, Int32, HRESULT)
    get_karaoke_channel_content : Proc(IMSVidWebDVD2*, Int32, Int32, Int32*, HRESULT)
    get_karaoke_channel_assignment : Proc(IMSVidWebDVD2*, Int32, Int32*, HRESULT)
    restore_preferred_settings : Proc(IMSVidWebDVD2*, HRESULT)
    get_button_rect : Proc(IMSVidWebDVD2*, Int32, IMSVidRect*, HRESULT)
    get_dvd_screen_in_mouse_coordinates : Proc(IMSVidWebDVD2*, IMSVidRect*, HRESULT)
    put_dvd_screen_in_mouse_coordinates : Proc(IMSVidWebDVD2*, IMSVidRect, HRESULT)
    get_bookmark : Proc(IMSVidWebDVD2*, UInt8**, UInt32*, HRESULT)
    put_bookmark : Proc(IMSVidWebDVD2*, UInt8*, UInt32, HRESULT)
  end

  IMSVidWebDVD2_GUID = LibC::GUID.new("7027212f-ee9a-4a7c-8b67-f023714cdaff")
  CLSID_IMSVidWebDVD2 = "7027212f-ee9a-4a7c-8b67-f023714cdaff"
  struct IMSVidWebDVD2
    lpVtbl : IMSVidWebDVD2VTbl*
  end

  struct IMSVidWebDVDEventVTbl
    query_interface : Proc(IMSVidWebDVDEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidWebDVDEvent*, UInt32)
    release : Proc(IMSVidWebDVDEvent*, UInt32)
    get_type_info_count : Proc(IMSVidWebDVDEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidWebDVDEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidWebDVDEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidWebDVDEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    end_of_media : Proc(IMSVidWebDVDEvent*, IMSVidPlayback, HRESULT)
    dvd_notify : Proc(IMSVidWebDVDEvent*, Int32, VARIANT, VARIANT, HRESULT)
    play_forwards : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_backwards : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    show_menu : Proc(IMSVidWebDVDEvent*, DVDMenuIDConstants, Int16, HRESULT)
    resume : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    select_or_activate_button : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    still_off : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    pause_on : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    change_current_audio_stream : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    change_current_subpicture_stream : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    change_current_angle : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_at_time_in_title : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_at_time : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_chapter_in_title : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_chapter : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    replay_chapter : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_next_chapter : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    stop : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    return_from_submenu : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_title : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    play_prev_chapter : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    change_karaoke_pres_mode : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
    change_video_pres_mode : Proc(IMSVidWebDVDEvent*, Int16, HRESULT)
  end

  IMSVidWebDVDEvent_GUID = LibC::GUID.new("b4f7a674-9b83-49cb-a357-c63b871be958")
  CLSID_IMSVidWebDVDEvent = "b4f7a674-9b83-49cb-a357-c63b871be958"
  struct IMSVidWebDVDEvent
    lpVtbl : IMSVidWebDVDEventVTbl*
  end

  struct IMSVidWebDVDAdmVTbl
    query_interface : Proc(IMSVidWebDVDAdm*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidWebDVDAdm*, UInt32)
    release : Proc(IMSVidWebDVDAdm*, UInt32)
    get_type_info_count : Proc(IMSVidWebDVDAdm*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidWebDVDAdm*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidWebDVDAdm*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidWebDVDAdm*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    change_password : Proc(IMSVidWebDVDAdm*, UInt8*, UInt8*, UInt8*, HRESULT)
    save_parental_level : Proc(IMSVidWebDVDAdm*, Int32, UInt8*, UInt8*, HRESULT)
    save_parental_country : Proc(IMSVidWebDVDAdm*, Int32, UInt8*, UInt8*, HRESULT)
    confirm_password : Proc(IMSVidWebDVDAdm*, UInt8*, UInt8*, Int16*, HRESULT)
    get_parental_level : Proc(IMSVidWebDVDAdm*, Int32*, HRESULT)
    get_parental_country : Proc(IMSVidWebDVDAdm*, Int32*, HRESULT)
    get_default_audio_lcid : Proc(IMSVidWebDVDAdm*, Int32*, HRESULT)
    put_default_audio_lcid : Proc(IMSVidWebDVDAdm*, Int32, HRESULT)
    get_default_subpicture_lcid : Proc(IMSVidWebDVDAdm*, Int32*, HRESULT)
    put_default_subpicture_lcid : Proc(IMSVidWebDVDAdm*, Int32, HRESULT)
    get_default_menu_lcid : Proc(IMSVidWebDVDAdm*, Int32*, HRESULT)
    put_default_menu_lcid : Proc(IMSVidWebDVDAdm*, Int32, HRESULT)
    get_bookmark_on_stop : Proc(IMSVidWebDVDAdm*, Int16*, HRESULT)
    put_bookmark_on_stop : Proc(IMSVidWebDVDAdm*, Int16, HRESULT)
  end

  IMSVidWebDVDAdm_GUID = LibC::GUID.new("b8be681a-eb2c-47f0-b415-94d5452f0e05")
  CLSID_IMSVidWebDVDAdm = "b8be681a-eb2c-47f0-b415-94d5452f0e05"
  struct IMSVidWebDVDAdm
    lpVtbl : IMSVidWebDVDAdmVTbl*
  end

  struct IMSVidOutputDeviceVTbl
    query_interface : Proc(IMSVidOutputDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidOutputDevice*, UInt32)
    release : Proc(IMSVidOutputDevice*, UInt32)
    get_type_info_count : Proc(IMSVidOutputDevice*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidOutputDevice*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidOutputDevice*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidOutputDevice*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidOutputDevice*, UInt8**, HRESULT)
    get_status : Proc(IMSVidOutputDevice*, Int32*, HRESULT)
    put_power : Proc(IMSVidOutputDevice*, Int16, HRESULT)
    get_power : Proc(IMSVidOutputDevice*, Int16*, HRESULT)
    get_category : Proc(IMSVidOutputDevice*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidOutputDevice*, UInt8**, HRESULT)
    get__category : Proc(IMSVidOutputDevice*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidOutputDevice*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidOutputDevice*, IMSVidDevice, Int16*, HRESULT)
  end

  IMSVidOutputDevice_GUID = LibC::GUID.new("37b03546-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidOutputDevice = "37b03546-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidOutputDevice
    lpVtbl : IMSVidOutputDeviceVTbl*
  end

  struct IMSVidOutputDeviceEventVTbl
    query_interface : Proc(IMSVidOutputDeviceEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidOutputDeviceEvent*, UInt32)
    release : Proc(IMSVidOutputDeviceEvent*, UInt32)
    get_type_info_count : Proc(IMSVidOutputDeviceEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidOutputDeviceEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidOutputDeviceEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidOutputDeviceEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidOutputDeviceEvent*, IMSVidDevice, Int32, Int32, HRESULT)
  end

  IMSVidOutputDeviceEvent_GUID = LibC::GUID.new("2e6a14e2-571c-11d3-b652-00c04f79498e")
  CLSID_IMSVidOutputDeviceEvent = "2e6a14e2-571c-11d3-b652-00c04f79498e"
  struct IMSVidOutputDeviceEvent
    lpVtbl : IMSVidOutputDeviceEventVTbl*
  end

  struct IMSVidFeatureVTbl
    query_interface : Proc(IMSVidFeature*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidFeature*, UInt32)
    release : Proc(IMSVidFeature*, UInt32)
    get_type_info_count : Proc(IMSVidFeature*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidFeature*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidFeature*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidFeature*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidFeature*, UInt8**, HRESULT)
    get_status : Proc(IMSVidFeature*, Int32*, HRESULT)
    put_power : Proc(IMSVidFeature*, Int16, HRESULT)
    get_power : Proc(IMSVidFeature*, Int16*, HRESULT)
    get_category : Proc(IMSVidFeature*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidFeature*, UInt8**, HRESULT)
    get__category : Proc(IMSVidFeature*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidFeature*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidFeature*, IMSVidDevice, Int16*, HRESULT)
  end

  IMSVidFeature_GUID = LibC::GUID.new("37b03547-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidFeature = "37b03547-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidFeature
    lpVtbl : IMSVidFeatureVTbl*
  end

  struct IMSVidFeatureEventVTbl
    query_interface : Proc(IMSVidFeatureEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidFeatureEvent*, UInt32)
    release : Proc(IMSVidFeatureEvent*, UInt32)
    get_type_info_count : Proc(IMSVidFeatureEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidFeatureEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidFeatureEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidFeatureEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidFeatureEvent*, IMSVidDevice, Int32, Int32, HRESULT)
  end

  IMSVidFeatureEvent_GUID = LibC::GUID.new("3dd2903c-e0aa-11d2-b63a-00c04f79498e")
  CLSID_IMSVidFeatureEvent = "3dd2903c-e0aa-11d2-b63a-00c04f79498e"
  struct IMSVidFeatureEvent
    lpVtbl : IMSVidFeatureEventVTbl*
  end

  struct IMSVidEncoderVTbl
    query_interface : Proc(IMSVidEncoder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidEncoder*, UInt32)
    release : Proc(IMSVidEncoder*, UInt32)
    get_type_info_count : Proc(IMSVidEncoder*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidEncoder*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidEncoder*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidEncoder*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidEncoder*, UInt8**, HRESULT)
    get_status : Proc(IMSVidEncoder*, Int32*, HRESULT)
    put_power : Proc(IMSVidEncoder*, Int16, HRESULT)
    get_power : Proc(IMSVidEncoder*, Int16*, HRESULT)
    get_category : Proc(IMSVidEncoder*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidEncoder*, UInt8**, HRESULT)
    get__category : Proc(IMSVidEncoder*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidEncoder*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidEncoder*, IMSVidDevice, Int16*, HRESULT)
    get_video_encoder_interface : Proc(IMSVidEncoder*, IUnknown*, HRESULT)
    get_audio_encoder_interface : Proc(IMSVidEncoder*, IUnknown*, HRESULT)
  end

  IMSVidEncoder_GUID = LibC::GUID.new("c0020fd4-bee7-43d9-a495-9f213117103d")
  CLSID_IMSVidEncoder = "c0020fd4-bee7-43d9-a495-9f213117103d"
  struct IMSVidEncoder
    lpVtbl : IMSVidEncoderVTbl*
  end

  struct IMSVidClosedCaptioningVTbl
    query_interface : Proc(IMSVidClosedCaptioning*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidClosedCaptioning*, UInt32)
    release : Proc(IMSVidClosedCaptioning*, UInt32)
    get_type_info_count : Proc(IMSVidClosedCaptioning*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidClosedCaptioning*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidClosedCaptioning*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidClosedCaptioning*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidClosedCaptioning*, UInt8**, HRESULT)
    get_status : Proc(IMSVidClosedCaptioning*, Int32*, HRESULT)
    put_power : Proc(IMSVidClosedCaptioning*, Int16, HRESULT)
    get_power : Proc(IMSVidClosedCaptioning*, Int16*, HRESULT)
    get_category : Proc(IMSVidClosedCaptioning*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidClosedCaptioning*, UInt8**, HRESULT)
    get__category : Proc(IMSVidClosedCaptioning*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidClosedCaptioning*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidClosedCaptioning*, IMSVidDevice, Int16*, HRESULT)
    get_enable : Proc(IMSVidClosedCaptioning*, Int16*, HRESULT)
    put_enable : Proc(IMSVidClosedCaptioning*, Int16, HRESULT)
  end

  IMSVidClosedCaptioning_GUID = LibC::GUID.new("99652ea1-c1f7-414f-bb7b-1c967de75983")
  CLSID_IMSVidClosedCaptioning = "99652ea1-c1f7-414f-bb7b-1c967de75983"
  struct IMSVidClosedCaptioning
    lpVtbl : IMSVidClosedCaptioningVTbl*
  end

  struct IMSVidClosedCaptioning2VTbl
    query_interface : Proc(IMSVidClosedCaptioning2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidClosedCaptioning2*, UInt32)
    release : Proc(IMSVidClosedCaptioning2*, UInt32)
    get_type_info_count : Proc(IMSVidClosedCaptioning2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidClosedCaptioning2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidClosedCaptioning2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidClosedCaptioning2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidClosedCaptioning2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidClosedCaptioning2*, Int32*, HRESULT)
    put_power : Proc(IMSVidClosedCaptioning2*, Int16, HRESULT)
    get_power : Proc(IMSVidClosedCaptioning2*, Int16*, HRESULT)
    get_category : Proc(IMSVidClosedCaptioning2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidClosedCaptioning2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidClosedCaptioning2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidClosedCaptioning2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidClosedCaptioning2*, IMSVidDevice, Int16*, HRESULT)
    get_enable : Proc(IMSVidClosedCaptioning2*, Int16*, HRESULT)
    put_enable : Proc(IMSVidClosedCaptioning2*, Int16, HRESULT)
    get_service : Proc(IMSVidClosedCaptioning2*, MSVidCCService*, HRESULT)
    put_service : Proc(IMSVidClosedCaptioning2*, MSVidCCService, HRESULT)
  end

  IMSVidClosedCaptioning2_GUID = LibC::GUID.new("e00cb864-a029-4310-9987-a873f5887d97")
  CLSID_IMSVidClosedCaptioning2 = "e00cb864-a029-4310-9987-a873f5887d97"
  struct IMSVidClosedCaptioning2
    lpVtbl : IMSVidClosedCaptioning2VTbl*
  end

  struct IMSVidClosedCaptioning3VTbl
    query_interface : Proc(IMSVidClosedCaptioning3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidClosedCaptioning3*, UInt32)
    release : Proc(IMSVidClosedCaptioning3*, UInt32)
    get_type_info_count : Proc(IMSVidClosedCaptioning3*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidClosedCaptioning3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidClosedCaptioning3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidClosedCaptioning3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidClosedCaptioning3*, UInt8**, HRESULT)
    get_status : Proc(IMSVidClosedCaptioning3*, Int32*, HRESULT)
    put_power : Proc(IMSVidClosedCaptioning3*, Int16, HRESULT)
    get_power : Proc(IMSVidClosedCaptioning3*, Int16*, HRESULT)
    get_category : Proc(IMSVidClosedCaptioning3*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidClosedCaptioning3*, UInt8**, HRESULT)
    get__category : Proc(IMSVidClosedCaptioning3*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidClosedCaptioning3*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidClosedCaptioning3*, IMSVidDevice, Int16*, HRESULT)
    get_enable : Proc(IMSVidClosedCaptioning3*, Int16*, HRESULT)
    put_enable : Proc(IMSVidClosedCaptioning3*, Int16, HRESULT)
    get_service : Proc(IMSVidClosedCaptioning3*, MSVidCCService*, HRESULT)
    put_service : Proc(IMSVidClosedCaptioning3*, MSVidCCService, HRESULT)
    get_tele_text_filter : Proc(IMSVidClosedCaptioning3*, IUnknown*, HRESULT)
  end

  IMSVidClosedCaptioning3_GUID = LibC::GUID.new("c8638e8a-7625-4c51-9366-2f40a9831fc0")
  CLSID_IMSVidClosedCaptioning3 = "c8638e8a-7625-4c51-9366-2f40a9831fc0"
  struct IMSVidClosedCaptioning3
    lpVtbl : IMSVidClosedCaptioning3VTbl*
  end

  struct IMSVidXDSVTbl
    query_interface : Proc(IMSVidXDS*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidXDS*, UInt32)
    release : Proc(IMSVidXDS*, UInt32)
    get_type_info_count : Proc(IMSVidXDS*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidXDS*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidXDS*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidXDS*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidXDS*, UInt8**, HRESULT)
    get_status : Proc(IMSVidXDS*, Int32*, HRESULT)
    put_power : Proc(IMSVidXDS*, Int16, HRESULT)
    get_power : Proc(IMSVidXDS*, Int16*, HRESULT)
    get_category : Proc(IMSVidXDS*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidXDS*, UInt8**, HRESULT)
    get__category : Proc(IMSVidXDS*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidXDS*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidXDS*, IMSVidDevice, Int16*, HRESULT)
    get_channel_change_interface : Proc(IMSVidXDS*, IUnknown*, HRESULT)
  end

  IMSVidXDS_GUID = LibC::GUID.new("11ebc158-e712-4d1f-8bb3-01ed5274c4ce")
  CLSID_IMSVidXDS = "11ebc158-e712-4d1f-8bb3-01ed5274c4ce"
  struct IMSVidXDS
    lpVtbl : IMSVidXDSVTbl*
  end

  struct IMSVidXDSEventVTbl
    query_interface : Proc(IMSVidXDSEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidXDSEvent*, UInt32)
    release : Proc(IMSVidXDSEvent*, UInt32)
    get_type_info_count : Proc(IMSVidXDSEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidXDSEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidXDSEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidXDSEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidXDSEvent*, IMSVidDevice, Int32, Int32, HRESULT)
    rating_change : Proc(IMSVidXDSEvent*, EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, EnTvRat_System, EnTvRat_GenericLevel, BfEnTvRat_GenericAttributes, HRESULT)
  end

  IMSVidXDSEvent_GUID = LibC::GUID.new("6db2317d-3b23-41ec-ba4b-701f407eaf3a")
  CLSID_IMSVidXDSEvent = "6db2317d-3b23-41ec-ba4b-701f407eaf3a"
  struct IMSVidXDSEvent
    lpVtbl : IMSVidXDSEventVTbl*
  end

  struct IMSVidDataServicesVTbl
    query_interface : Proc(IMSVidDataServices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidDataServices*, UInt32)
    release : Proc(IMSVidDataServices*, UInt32)
    get_type_info_count : Proc(IMSVidDataServices*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidDataServices*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidDataServices*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidDataServices*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidDataServices*, UInt8**, HRESULT)
    get_status : Proc(IMSVidDataServices*, Int32*, HRESULT)
    put_power : Proc(IMSVidDataServices*, Int16, HRESULT)
    get_power : Proc(IMSVidDataServices*, Int16*, HRESULT)
    get_category : Proc(IMSVidDataServices*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidDataServices*, UInt8**, HRESULT)
    get__category : Proc(IMSVidDataServices*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidDataServices*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidDataServices*, IMSVidDevice, Int16*, HRESULT)
  end

  IMSVidDataServices_GUID = LibC::GUID.new("334125c1-77e5-11d3-b653-00c04f79498e")
  CLSID_IMSVidDataServices = "334125c1-77e5-11d3-b653-00c04f79498e"
  struct IMSVidDataServices
    lpVtbl : IMSVidDataServicesVTbl*
  end

  struct IMSVidDataServicesEventVTbl
    query_interface : Proc(IMSVidDataServicesEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidDataServicesEvent*, UInt32)
    release : Proc(IMSVidDataServicesEvent*, UInt32)
    get_type_info_count : Proc(IMSVidDataServicesEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidDataServicesEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidDataServicesEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidDataServicesEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidDataServicesEvent*, IMSVidDevice, Int32, Int32, HRESULT)
  end

  IMSVidDataServicesEvent_GUID = LibC::GUID.new("334125c2-77e5-11d3-b653-00c04f79498e")
  CLSID_IMSVidDataServicesEvent = "334125c2-77e5-11d3-b653-00c04f79498e"
  struct IMSVidDataServicesEvent
    lpVtbl : IMSVidDataServicesEventVTbl*
  end

  struct IMSVidVideoRendererVTbl
    query_interface : Proc(IMSVidVideoRenderer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVideoRenderer*, UInt32)
    release : Proc(IMSVidVideoRenderer*, UInt32)
    get_type_info_count : Proc(IMSVidVideoRenderer*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidVideoRenderer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidVideoRenderer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidVideoRenderer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidVideoRenderer*, UInt8**, HRESULT)
    get_status : Proc(IMSVidVideoRenderer*, Int32*, HRESULT)
    put_power : Proc(IMSVidVideoRenderer*, Int16, HRESULT)
    get_power : Proc(IMSVidVideoRenderer*, Int16*, HRESULT)
    get_category : Proc(IMSVidVideoRenderer*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidVideoRenderer*, UInt8**, HRESULT)
    get__category : Proc(IMSVidVideoRenderer*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidVideoRenderer*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidVideoRenderer*, IMSVidDevice, Int16*, HRESULT)
    get_custom_compositor_class : Proc(IMSVidVideoRenderer*, UInt8**, HRESULT)
    put_custom_compositor_class : Proc(IMSVidVideoRenderer*, UInt8*, HRESULT)
    get__custom_compositor_class : Proc(IMSVidVideoRenderer*, Guid*, HRESULT)
    put__custom_compositor_class : Proc(IMSVidVideoRenderer*, Guid*, HRESULT)
    get__custom_compositor : Proc(IMSVidVideoRenderer*, IVMRImageCompositor*, HRESULT)
    put__custom_compositor : Proc(IMSVidVideoRenderer*, IVMRImageCompositor, HRESULT)
    get_mixer_bitmap : Proc(IMSVidVideoRenderer*, IPictureDisp*, HRESULT)
    get__mixer_bitmap : Proc(IMSVidVideoRenderer*, IVMRMixerBitmap*, HRESULT)
    put_mixer_bitmap : Proc(IMSVidVideoRenderer*, IPictureDisp, HRESULT)
    put__mixer_bitmap : Proc(IMSVidVideoRenderer*, VMRALPHABITMAP*, HRESULT)
    get_mixer_bitmap_position_rect : Proc(IMSVidVideoRenderer*, IMSVidRect*, HRESULT)
    put_mixer_bitmap_position_rect : Proc(IMSVidVideoRenderer*, IMSVidRect, HRESULT)
    get_mixer_bitmap_opacity : Proc(IMSVidVideoRenderer*, Int32*, HRESULT)
    put_mixer_bitmap_opacity : Proc(IMSVidVideoRenderer*, Int32, HRESULT)
    setup_mixer_bitmap : Proc(IMSVidVideoRenderer*, IPictureDisp, Int32, IMSVidRect, HRESULT)
    get_source_size : Proc(IMSVidVideoRenderer*, SourceSizeList*, HRESULT)
    put_source_size : Proc(IMSVidVideoRenderer*, SourceSizeList, HRESULT)
    get_over_scan : Proc(IMSVidVideoRenderer*, Int32*, HRESULT)
    put_over_scan : Proc(IMSVidVideoRenderer*, Int32, HRESULT)
    get_available_source_rect : Proc(IMSVidVideoRenderer*, IMSVidRect*, HRESULT)
    get_max_vid_rect : Proc(IMSVidVideoRenderer*, IMSVidRect*, HRESULT)
    get_min_vid_rect : Proc(IMSVidVideoRenderer*, IMSVidRect*, HRESULT)
    get_clipped_source_rect : Proc(IMSVidVideoRenderer*, IMSVidRect*, HRESULT)
    put_clipped_source_rect : Proc(IMSVidVideoRenderer*, IMSVidRect, HRESULT)
    get_using_overlay : Proc(IMSVidVideoRenderer*, Int16*, HRESULT)
    put_using_overlay : Proc(IMSVidVideoRenderer*, Int16, HRESULT)
    capture : Proc(IMSVidVideoRenderer*, IPictureDisp*, HRESULT)
    get_frames_per_second : Proc(IMSVidVideoRenderer*, Int32*, HRESULT)
    get_decimate_input : Proc(IMSVidVideoRenderer*, Int16*, HRESULT)
    put_decimate_input : Proc(IMSVidVideoRenderer*, Int16, HRESULT)
  end

  IMSVidVideoRenderer_GUID = LibC::GUID.new("37b03540-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidVideoRenderer = "37b03540-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidVideoRenderer
    lpVtbl : IMSVidVideoRendererVTbl*
  end

  struct IMSVidVideoRendererEventVTbl
    query_interface : Proc(IMSVidVideoRendererEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVideoRendererEvent*, UInt32)
    release : Proc(IMSVidVideoRendererEvent*, UInt32)
    get_type_info_count : Proc(IMSVidVideoRendererEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidVideoRendererEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidVideoRendererEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidVideoRendererEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidVideoRendererEvent*, IMSVidDevice, Int32, Int32, HRESULT)
    overlay_unavailable : Proc(IMSVidVideoRendererEvent*, HRESULT)
  end

  IMSVidVideoRendererEvent_GUID = LibC::GUID.new("37b03545-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidVideoRendererEvent = "37b03545-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidVideoRendererEvent
    lpVtbl : IMSVidVideoRendererEventVTbl*
  end

  struct IMSVidGenericSinkVTbl
    query_interface : Proc(IMSVidGenericSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidGenericSink*, UInt32)
    release : Proc(IMSVidGenericSink*, UInt32)
    get_type_info_count : Proc(IMSVidGenericSink*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidGenericSink*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidGenericSink*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidGenericSink*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidGenericSink*, UInt8**, HRESULT)
    get_status : Proc(IMSVidGenericSink*, Int32*, HRESULT)
    put_power : Proc(IMSVidGenericSink*, Int16, HRESULT)
    get_power : Proc(IMSVidGenericSink*, Int16*, HRESULT)
    get_category : Proc(IMSVidGenericSink*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidGenericSink*, UInt8**, HRESULT)
    get__category : Proc(IMSVidGenericSink*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidGenericSink*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidGenericSink*, IMSVidDevice, Int16*, HRESULT)
    set_sink_filter : Proc(IMSVidGenericSink*, UInt8*, HRESULT)
    get_sink_streams : Proc(IMSVidGenericSink*, MSVidSinkStreams*, HRESULT)
    put_sink_streams : Proc(IMSVidGenericSink*, MSVidSinkStreams, HRESULT)
  end

  IMSVidGenericSink_GUID = LibC::GUID.new("6c29b41d-455b-4c33-963a-0d28e5e555ea")
  CLSID_IMSVidGenericSink = "6c29b41d-455b-4c33-963a-0d28e5e555ea"
  struct IMSVidGenericSink
    lpVtbl : IMSVidGenericSinkVTbl*
  end

  struct IMSVidGenericSink2VTbl
    query_interface : Proc(IMSVidGenericSink2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidGenericSink2*, UInt32)
    release : Proc(IMSVidGenericSink2*, UInt32)
    get_type_info_count : Proc(IMSVidGenericSink2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidGenericSink2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidGenericSink2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidGenericSink2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidGenericSink2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidGenericSink2*, Int32*, HRESULT)
    put_power : Proc(IMSVidGenericSink2*, Int16, HRESULT)
    get_power : Proc(IMSVidGenericSink2*, Int16*, HRESULT)
    get_category : Proc(IMSVidGenericSink2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidGenericSink2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidGenericSink2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidGenericSink2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidGenericSink2*, IMSVidDevice, Int16*, HRESULT)
    set_sink_filter : Proc(IMSVidGenericSink2*, UInt8*, HRESULT)
    get_sink_streams : Proc(IMSVidGenericSink2*, MSVidSinkStreams*, HRESULT)
    put_sink_streams : Proc(IMSVidGenericSink2*, MSVidSinkStreams, HRESULT)
    add_filter : Proc(IMSVidGenericSink2*, UInt8*, HRESULT)
    reset_filter_list : Proc(IMSVidGenericSink2*, HRESULT)
  end

  IMSVidGenericSink2_GUID = LibC::GUID.new("6b5a28f3-47f1-4092-b168-60cabec08f1c")
  CLSID_IMSVidGenericSink2 = "6b5a28f3-47f1-4092-b168-60cabec08f1c"
  struct IMSVidGenericSink2
    lpVtbl : IMSVidGenericSink2VTbl*
  end

  struct IMSVidStreamBufferRecordingControlVTbl
    query_interface : Proc(IMSVidStreamBufferRecordingControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferRecordingControl*, UInt32)
    release : Proc(IMSVidStreamBufferRecordingControl*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferRecordingControl*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferRecordingControl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferRecordingControl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferRecordingControl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_start_time : Proc(IMSVidStreamBufferRecordingControl*, Int32*, HRESULT)
    put_start_time : Proc(IMSVidStreamBufferRecordingControl*, Int32, HRESULT)
    get_stop_time : Proc(IMSVidStreamBufferRecordingControl*, Int32*, HRESULT)
    put_stop_time : Proc(IMSVidStreamBufferRecordingControl*, Int32, HRESULT)
    get_recording_stopped : Proc(IMSVidStreamBufferRecordingControl*, Int16*, HRESULT)
    get_recording_started : Proc(IMSVidStreamBufferRecordingControl*, Int16*, HRESULT)
    get_recording_type : Proc(IMSVidStreamBufferRecordingControl*, RecordingType*, HRESULT)
    get_recording_attribute : Proc(IMSVidStreamBufferRecordingControl*, IUnknown*, HRESULT)
  end

  IMSVidStreamBufferRecordingControl_GUID = LibC::GUID.new("160621aa-bbbc-4326-a824-c395aebc6e74")
  CLSID_IMSVidStreamBufferRecordingControl = "160621aa-bbbc-4326-a824-c395aebc6e74"
  struct IMSVidStreamBufferRecordingControl
    lpVtbl : IMSVidStreamBufferRecordingControlVTbl*
  end

  struct IMSVidStreamBufferSinkVTbl
    query_interface : Proc(IMSVidStreamBufferSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSink*, UInt32)
    release : Proc(IMSVidStreamBufferSink*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSink*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSink*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSink*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSink*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidStreamBufferSink*, UInt8**, HRESULT)
    get_status : Proc(IMSVidStreamBufferSink*, Int32*, HRESULT)
    put_power : Proc(IMSVidStreamBufferSink*, Int16, HRESULT)
    get_power : Proc(IMSVidStreamBufferSink*, Int16*, HRESULT)
    get_category : Proc(IMSVidStreamBufferSink*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidStreamBufferSink*, UInt8**, HRESULT)
    get__category : Proc(IMSVidStreamBufferSink*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidStreamBufferSink*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidStreamBufferSink*, IMSVidDevice, Int16*, HRESULT)
    get_content_recorder : Proc(IMSVidStreamBufferSink*, UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)
    get_reference_recorder : Proc(IMSVidStreamBufferSink*, UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)
    get_sink_name : Proc(IMSVidStreamBufferSink*, UInt8**, HRESULT)
    put_sink_name : Proc(IMSVidStreamBufferSink*, UInt8*, HRESULT)
    name_set_lock : Proc(IMSVidStreamBufferSink*, HRESULT)
    get_sbe_sink : Proc(IMSVidStreamBufferSink*, IUnknown*, HRESULT)
  end

  IMSVidStreamBufferSink_GUID = LibC::GUID.new("159dbb45-cd1b-4dab-83ea-5cb1f4f21d07")
  CLSID_IMSVidStreamBufferSink = "159dbb45-cd1b-4dab-83ea-5cb1f4f21d07"
  struct IMSVidStreamBufferSink
    lpVtbl : IMSVidStreamBufferSinkVTbl*
  end

  struct IMSVidStreamBufferSink2VTbl
    query_interface : Proc(IMSVidStreamBufferSink2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSink2*, UInt32)
    release : Proc(IMSVidStreamBufferSink2*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSink2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSink2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSink2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSink2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidStreamBufferSink2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidStreamBufferSink2*, Int32*, HRESULT)
    put_power : Proc(IMSVidStreamBufferSink2*, Int16, HRESULT)
    get_power : Proc(IMSVidStreamBufferSink2*, Int16*, HRESULT)
    get_category : Proc(IMSVidStreamBufferSink2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidStreamBufferSink2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidStreamBufferSink2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidStreamBufferSink2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidStreamBufferSink2*, IMSVidDevice, Int16*, HRESULT)
    get_content_recorder : Proc(IMSVidStreamBufferSink2*, UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)
    get_reference_recorder : Proc(IMSVidStreamBufferSink2*, UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)
    get_sink_name : Proc(IMSVidStreamBufferSink2*, UInt8**, HRESULT)
    put_sink_name : Proc(IMSVidStreamBufferSink2*, UInt8*, HRESULT)
    name_set_lock : Proc(IMSVidStreamBufferSink2*, HRESULT)
    get_sbe_sink : Proc(IMSVidStreamBufferSink2*, IUnknown*, HRESULT)
    unlock_profile : Proc(IMSVidStreamBufferSink2*, HRESULT)
  end

  IMSVidStreamBufferSink2_GUID = LibC::GUID.new("2ca9fc63-c131-4e5a-955a-544a47c67146")
  CLSID_IMSVidStreamBufferSink2 = "2ca9fc63-c131-4e5a-955a-544a47c67146"
  struct IMSVidStreamBufferSink2
    lpVtbl : IMSVidStreamBufferSink2VTbl*
  end

  struct IMSVidStreamBufferSink3VTbl
    query_interface : Proc(IMSVidStreamBufferSink3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSink3*, UInt32)
    release : Proc(IMSVidStreamBufferSink3*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSink3*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSink3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSink3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSink3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidStreamBufferSink3*, UInt8**, HRESULT)
    get_status : Proc(IMSVidStreamBufferSink3*, Int32*, HRESULT)
    put_power : Proc(IMSVidStreamBufferSink3*, Int16, HRESULT)
    get_power : Proc(IMSVidStreamBufferSink3*, Int16*, HRESULT)
    get_category : Proc(IMSVidStreamBufferSink3*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidStreamBufferSink3*, UInt8**, HRESULT)
    get__category : Proc(IMSVidStreamBufferSink3*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidStreamBufferSink3*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidStreamBufferSink3*, IMSVidDevice, Int16*, HRESULT)
    get_content_recorder : Proc(IMSVidStreamBufferSink3*, UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)
    get_reference_recorder : Proc(IMSVidStreamBufferSink3*, UInt8*, IMSVidStreamBufferRecordingControl*, HRESULT)
    get_sink_name : Proc(IMSVidStreamBufferSink3*, UInt8**, HRESULT)
    put_sink_name : Proc(IMSVidStreamBufferSink3*, UInt8*, HRESULT)
    name_set_lock : Proc(IMSVidStreamBufferSink3*, HRESULT)
    get_sbe_sink : Proc(IMSVidStreamBufferSink3*, IUnknown*, HRESULT)
    unlock_profile : Proc(IMSVidStreamBufferSink3*, HRESULT)
    set_min_seek : Proc(IMSVidStreamBufferSink3*, Int32*, HRESULT)
    get_audio_counter : Proc(IMSVidStreamBufferSink3*, IUnknown*, HRESULT)
    get_video_counter : Proc(IMSVidStreamBufferSink3*, IUnknown*, HRESULT)
    get_cc_counter : Proc(IMSVidStreamBufferSink3*, IUnknown*, HRESULT)
    get_wst_counter : Proc(IMSVidStreamBufferSink3*, IUnknown*, HRESULT)
    put_audio_analysis_filter : Proc(IMSVidStreamBufferSink3*, UInt8*, HRESULT)
    get_audio_analysis_filter : Proc(IMSVidStreamBufferSink3*, UInt8**, HRESULT)
    put__audio_analysis_filter : Proc(IMSVidStreamBufferSink3*, Guid, HRESULT)
    get__audio_analysis_filter : Proc(IMSVidStreamBufferSink3*, Guid*, HRESULT)
    put_video_analysis_filter : Proc(IMSVidStreamBufferSink3*, UInt8*, HRESULT)
    get_video_analysis_filter : Proc(IMSVidStreamBufferSink3*, UInt8**, HRESULT)
    put__video_analysis_filter : Proc(IMSVidStreamBufferSink3*, Guid, HRESULT)
    get__video_analysis_filter : Proc(IMSVidStreamBufferSink3*, Guid*, HRESULT)
    put_data_analysis_filter : Proc(IMSVidStreamBufferSink3*, UInt8*, HRESULT)
    get_data_analysis_filter : Proc(IMSVidStreamBufferSink3*, UInt8**, HRESULT)
    put__data_analysis_filter : Proc(IMSVidStreamBufferSink3*, Guid, HRESULT)
    get__data_analysis_filter : Proc(IMSVidStreamBufferSink3*, Guid*, HRESULT)
    get_license_error_code : Proc(IMSVidStreamBufferSink3*, HRESULT*, HRESULT)
  end

  IMSVidStreamBufferSink3_GUID = LibC::GUID.new("4f8721d7-7d59-4d8b-99f5-a77775586bd5")
  CLSID_IMSVidStreamBufferSink3 = "4f8721d7-7d59-4d8b-99f5-a77775586bd5"
  struct IMSVidStreamBufferSink3
    lpVtbl : IMSVidStreamBufferSink3VTbl*
  end

  struct IMSVidStreamBufferSinkEventVTbl
    query_interface : Proc(IMSVidStreamBufferSinkEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSinkEvent*, UInt32)
    release : Proc(IMSVidStreamBufferSinkEvent*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSinkEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSinkEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidStreamBufferSinkEvent*, IMSVidDevice, Int32, Int32, HRESULT)
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent*, HRESULT)
    certificate_success : Proc(IMSVidStreamBufferSinkEvent*, HRESULT)
    write_failure : Proc(IMSVidStreamBufferSinkEvent*, HRESULT)
  end

  IMSVidStreamBufferSinkEvent_GUID = LibC::GUID.new("f798a36b-b05b-4bbe-9703-eaea7d61cd51")
  CLSID_IMSVidStreamBufferSinkEvent = "f798a36b-b05b-4bbe-9703-eaea7d61cd51"
  struct IMSVidStreamBufferSinkEvent
    lpVtbl : IMSVidStreamBufferSinkEventVTbl*
  end

  struct IMSVidStreamBufferSinkEvent2VTbl
    query_interface : Proc(IMSVidStreamBufferSinkEvent2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSinkEvent2*, UInt32)
    release : Proc(IMSVidStreamBufferSinkEvent2*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSinkEvent2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSinkEvent2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidStreamBufferSinkEvent2*, IMSVidDevice, Int32, Int32, HRESULT)
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent2*, HRESULT)
    certificate_success : Proc(IMSVidStreamBufferSinkEvent2*, HRESULT)
    write_failure : Proc(IMSVidStreamBufferSinkEvent2*, HRESULT)
    encryption_on : Proc(IMSVidStreamBufferSinkEvent2*, HRESULT)
    encryption_off : Proc(IMSVidStreamBufferSinkEvent2*, HRESULT)
  end

  IMSVidStreamBufferSinkEvent2_GUID = LibC::GUID.new("3d7a5166-72d7-484b-a06f-286187b80ca1")
  CLSID_IMSVidStreamBufferSinkEvent2 = "3d7a5166-72d7-484b-a06f-286187b80ca1"
  struct IMSVidStreamBufferSinkEvent2
    lpVtbl : IMSVidStreamBufferSinkEvent2VTbl*
  end

  struct IMSVidStreamBufferSinkEvent3VTbl
    query_interface : Proc(IMSVidStreamBufferSinkEvent3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSinkEvent3*, UInt32)
    release : Proc(IMSVidStreamBufferSinkEvent3*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent3*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSinkEvent3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSinkEvent3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidStreamBufferSinkEvent3*, IMSVidDevice, Int32, Int32, HRESULT)
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent3*, HRESULT)
    certificate_success : Proc(IMSVidStreamBufferSinkEvent3*, HRESULT)
    write_failure : Proc(IMSVidStreamBufferSinkEvent3*, HRESULT)
    encryption_on : Proc(IMSVidStreamBufferSinkEvent3*, HRESULT)
    encryption_off : Proc(IMSVidStreamBufferSinkEvent3*, HRESULT)
    license_change : Proc(IMSVidStreamBufferSinkEvent3*, Int32, HRESULT)
  end

  IMSVidStreamBufferSinkEvent3_GUID = LibC::GUID.new("735ad8d5-c259-48e9-81e7-d27953665b23")
  CLSID_IMSVidStreamBufferSinkEvent3 = "735ad8d5-c259-48e9-81e7-d27953665b23"
  struct IMSVidStreamBufferSinkEvent3
    lpVtbl : IMSVidStreamBufferSinkEvent3VTbl*
  end

  struct IMSVidStreamBufferSinkEvent4VTbl
    query_interface : Proc(IMSVidStreamBufferSinkEvent4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSinkEvent4*, UInt32)
    release : Proc(IMSVidStreamBufferSinkEvent4*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSinkEvent4*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSinkEvent4*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSinkEvent4*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSinkEvent4*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidStreamBufferSinkEvent4*, IMSVidDevice, Int32, Int32, HRESULT)
    certificate_failure : Proc(IMSVidStreamBufferSinkEvent4*, HRESULT)
    certificate_success : Proc(IMSVidStreamBufferSinkEvent4*, HRESULT)
    write_failure : Proc(IMSVidStreamBufferSinkEvent4*, HRESULT)
    encryption_on : Proc(IMSVidStreamBufferSinkEvent4*, HRESULT)
    encryption_off : Proc(IMSVidStreamBufferSinkEvent4*, HRESULT)
    license_change : Proc(IMSVidStreamBufferSinkEvent4*, Int32, HRESULT)
    write_failure_clear : Proc(IMSVidStreamBufferSinkEvent4*, HRESULT)
  end

  IMSVidStreamBufferSinkEvent4_GUID = LibC::GUID.new("1b01dcb0-daf0-412c-a5d1-590c7f62e2b8")
  CLSID_IMSVidStreamBufferSinkEvent4 = "1b01dcb0-daf0-412c-a5d1-590c7f62e2b8"
  struct IMSVidStreamBufferSinkEvent4
    lpVtbl : IMSVidStreamBufferSinkEvent4VTbl*
  end

  struct IMSVidStreamBufferSourceVTbl
    query_interface : Proc(IMSVidStreamBufferSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSource*, UInt32)
    release : Proc(IMSVidStreamBufferSource*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSource*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSource*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSource*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSource*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidStreamBufferSource*, UInt8**, HRESULT)
    get_status : Proc(IMSVidStreamBufferSource*, Int32*, HRESULT)
    put_power : Proc(IMSVidStreamBufferSource*, Int16, HRESULT)
    get_power : Proc(IMSVidStreamBufferSource*, Int16*, HRESULT)
    get_category : Proc(IMSVidStreamBufferSource*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidStreamBufferSource*, UInt8**, HRESULT)
    get__category : Proc(IMSVidStreamBufferSource*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidStreamBufferSource*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidStreamBufferSource*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidStreamBufferSource*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidStreamBufferSource*, VARIANT*, HRESULT)
    get_enable_reset_on_stop : Proc(IMSVidStreamBufferSource*, Int16*, HRESULT)
    put_enable_reset_on_stop : Proc(IMSVidStreamBufferSource*, Int16, HRESULT)
    run : Proc(IMSVidStreamBufferSource*, HRESULT)
    pause : Proc(IMSVidStreamBufferSource*, HRESULT)
    stop : Proc(IMSVidStreamBufferSource*, HRESULT)
    get_can_step : Proc(IMSVidStreamBufferSource*, Int16, Int16*, HRESULT)
    step : Proc(IMSVidStreamBufferSource*, Int32, HRESULT)
    put_rate : Proc(IMSVidStreamBufferSource*, Float64, HRESULT)
    get_rate : Proc(IMSVidStreamBufferSource*, Float64*, HRESULT)
    put_current_position : Proc(IMSVidStreamBufferSource*, Int32, HRESULT)
    get_current_position : Proc(IMSVidStreamBufferSource*, Int32*, HRESULT)
    put_position_mode : Proc(IMSVidStreamBufferSource*, PositionModeList, HRESULT)
    get_position_mode : Proc(IMSVidStreamBufferSource*, PositionModeList*, HRESULT)
    get_length : Proc(IMSVidStreamBufferSource*, Int32*, HRESULT)
    get_file_name : Proc(IMSVidStreamBufferSource*, UInt8**, HRESULT)
    put_file_name : Proc(IMSVidStreamBufferSource*, UInt8*, HRESULT)
    get_start : Proc(IMSVidStreamBufferSource*, Int32*, HRESULT)
    get_recording_attribute : Proc(IMSVidStreamBufferSource*, IUnknown*, HRESULT)
    current_ratings : Proc(IMSVidStreamBufferSource*, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
    max_ratings_level : Proc(IMSVidStreamBufferSource*, EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)
    put_block_unrated : Proc(IMSVidStreamBufferSource*, Int16, HRESULT)
    put_unrated_delay : Proc(IMSVidStreamBufferSource*, Int32, HRESULT)
    get_sbe_source : Proc(IMSVidStreamBufferSource*, IUnknown*, HRESULT)
  end

  IMSVidStreamBufferSource_GUID = LibC::GUID.new("eb0c8cf9-6950-4772-87b1-47d11cf3a02f")
  CLSID_IMSVidStreamBufferSource = "eb0c8cf9-6950-4772-87b1-47d11cf3a02f"
  struct IMSVidStreamBufferSource
    lpVtbl : IMSVidStreamBufferSourceVTbl*
  end

  struct IMSVidStreamBufferSource2VTbl
    query_interface : Proc(IMSVidStreamBufferSource2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSource2*, UInt32)
    release : Proc(IMSVidStreamBufferSource2*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSource2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSource2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSource2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSource2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidStreamBufferSource2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidStreamBufferSource2*, Int32*, HRESULT)
    put_power : Proc(IMSVidStreamBufferSource2*, Int16, HRESULT)
    get_power : Proc(IMSVidStreamBufferSource2*, Int16*, HRESULT)
    get_category : Proc(IMSVidStreamBufferSource2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidStreamBufferSource2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidStreamBufferSource2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidStreamBufferSource2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidStreamBufferSource2*, IMSVidDevice, Int16*, HRESULT)
    is_viewable : Proc(IMSVidStreamBufferSource2*, VARIANT*, Int16*, HRESULT)
    view : Proc(IMSVidStreamBufferSource2*, VARIANT*, HRESULT)
    get_enable_reset_on_stop : Proc(IMSVidStreamBufferSource2*, Int16*, HRESULT)
    put_enable_reset_on_stop : Proc(IMSVidStreamBufferSource2*, Int16, HRESULT)
    run : Proc(IMSVidStreamBufferSource2*, HRESULT)
    pause : Proc(IMSVidStreamBufferSource2*, HRESULT)
    stop : Proc(IMSVidStreamBufferSource2*, HRESULT)
    get_can_step : Proc(IMSVidStreamBufferSource2*, Int16, Int16*, HRESULT)
    step : Proc(IMSVidStreamBufferSource2*, Int32, HRESULT)
    put_rate : Proc(IMSVidStreamBufferSource2*, Float64, HRESULT)
    get_rate : Proc(IMSVidStreamBufferSource2*, Float64*, HRESULT)
    put_current_position : Proc(IMSVidStreamBufferSource2*, Int32, HRESULT)
    get_current_position : Proc(IMSVidStreamBufferSource2*, Int32*, HRESULT)
    put_position_mode : Proc(IMSVidStreamBufferSource2*, PositionModeList, HRESULT)
    get_position_mode : Proc(IMSVidStreamBufferSource2*, PositionModeList*, HRESULT)
    get_length : Proc(IMSVidStreamBufferSource2*, Int32*, HRESULT)
    get_file_name : Proc(IMSVidStreamBufferSource2*, UInt8**, HRESULT)
    put_file_name : Proc(IMSVidStreamBufferSource2*, UInt8*, HRESULT)
    get_start : Proc(IMSVidStreamBufferSource2*, Int32*, HRESULT)
    get_recording_attribute : Proc(IMSVidStreamBufferSource2*, IUnknown*, HRESULT)
    current_ratings : Proc(IMSVidStreamBufferSource2*, EnTvRat_System*, EnTvRat_GenericLevel*, Int32*, HRESULT)
    max_ratings_level : Proc(IMSVidStreamBufferSource2*, EnTvRat_System, EnTvRat_GenericLevel, Int32, HRESULT)
    put_block_unrated : Proc(IMSVidStreamBufferSource2*, Int16, HRESULT)
    put_unrated_delay : Proc(IMSVidStreamBufferSource2*, Int32, HRESULT)
    get_sbe_source : Proc(IMSVidStreamBufferSource2*, IUnknown*, HRESULT)
    put_rate_ex : Proc(IMSVidStreamBufferSource2*, Float64, UInt32, HRESULT)
    get_audio_counter : Proc(IMSVidStreamBufferSource2*, IUnknown*, HRESULT)
    get_video_counter : Proc(IMSVidStreamBufferSource2*, IUnknown*, HRESULT)
    get_cc_counter : Proc(IMSVidStreamBufferSource2*, IUnknown*, HRESULT)
    get_wst_counter : Proc(IMSVidStreamBufferSource2*, IUnknown*, HRESULT)
  end

  IMSVidStreamBufferSource2_GUID = LibC::GUID.new("e4ba9059-b1ce-40d8-b9a0-d4ea4a9989d3")
  CLSID_IMSVidStreamBufferSource2 = "e4ba9059-b1ce-40d8-b9a0-d4ea4a9989d3"
  struct IMSVidStreamBufferSource2
    lpVtbl : IMSVidStreamBufferSource2VTbl*
  end

  struct IMSVidStreamBufferSourceEventVTbl
    query_interface : Proc(IMSVidStreamBufferSourceEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSourceEvent*, UInt32)
    release : Proc(IMSVidStreamBufferSourceEvent*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSourceEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSourceEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSourceEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSourceEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    end_of_media : Proc(IMSVidStreamBufferSourceEvent*, IMSVidPlayback, HRESULT)
    certificate_failure : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
    certificate_success : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
    ratings_blocked : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
    ratings_unblocked : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
    ratings_changed : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
    time_hole : Proc(IMSVidStreamBufferSourceEvent*, Int32, Int32, HRESULT)
    stale_data_read : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
    content_becoming_stale : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
    stale_file_deleted : Proc(IMSVidStreamBufferSourceEvent*, HRESULT)
  end

  IMSVidStreamBufferSourceEvent_GUID = LibC::GUID.new("50ce8a7d-9c28-4da8-9042-cdfa7116f979")
  CLSID_IMSVidStreamBufferSourceEvent = "50ce8a7d-9c28-4da8-9042-cdfa7116f979"
  struct IMSVidStreamBufferSourceEvent
    lpVtbl : IMSVidStreamBufferSourceEventVTbl*
  end

  struct IMSVidStreamBufferSourceEvent2VTbl
    query_interface : Proc(IMSVidStreamBufferSourceEvent2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSourceEvent2*, UInt32)
    release : Proc(IMSVidStreamBufferSourceEvent2*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSourceEvent2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSourceEvent2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSourceEvent2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSourceEvent2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    end_of_media : Proc(IMSVidStreamBufferSourceEvent2*, IMSVidPlayback, HRESULT)
    certificate_failure : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    certificate_success : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    ratings_blocked : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    ratings_unblocked : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    ratings_changed : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    time_hole : Proc(IMSVidStreamBufferSourceEvent2*, Int32, Int32, HRESULT)
    stale_data_read : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    content_becoming_stale : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    stale_file_deleted : Proc(IMSVidStreamBufferSourceEvent2*, HRESULT)
    rate_change : Proc(IMSVidStreamBufferSourceEvent2*, Float64, Float64, HRESULT)
  end

  IMSVidStreamBufferSourceEvent2_GUID = LibC::GUID.new("7aef50ce-8e22-4ba8-bc06-a92a458b4ef2")
  CLSID_IMSVidStreamBufferSourceEvent2 = "7aef50ce-8e22-4ba8-bc06-a92a458b4ef2"
  struct IMSVidStreamBufferSourceEvent2
    lpVtbl : IMSVidStreamBufferSourceEvent2VTbl*
  end

  struct IMSVidStreamBufferSourceEvent3VTbl
    query_interface : Proc(IMSVidStreamBufferSourceEvent3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferSourceEvent3*, UInt32)
    release : Proc(IMSVidStreamBufferSourceEvent3*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferSourceEvent3*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferSourceEvent3*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferSourceEvent3*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferSourceEvent3*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    end_of_media : Proc(IMSVidStreamBufferSourceEvent3*, IMSVidPlayback, HRESULT)
    certificate_failure : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    certificate_success : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    ratings_blocked : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    ratings_unblocked : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    ratings_changed : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    time_hole : Proc(IMSVidStreamBufferSourceEvent3*, Int32, Int32, HRESULT)
    stale_data_read : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    content_becoming_stale : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    stale_file_deleted : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    rate_change : Proc(IMSVidStreamBufferSourceEvent3*, Float64, Float64, HRESULT)
    broadcast_event : Proc(IMSVidStreamBufferSourceEvent3*, UInt8*, HRESULT)
    broadcast_event_ex : Proc(IMSVidStreamBufferSourceEvent3*, UInt8*, UInt32, UInt32, UInt32, UInt32, HRESULT)
    copp_blocked : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    copp_unblocked : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
    content_primarily_audio : Proc(IMSVidStreamBufferSourceEvent3*, HRESULT)
  end

  IMSVidStreamBufferSourceEvent3_GUID = LibC::GUID.new("ceabd6ab-9b90-4570-adf1-3ce76e00a763")
  CLSID_IMSVidStreamBufferSourceEvent3 = "ceabd6ab-9b90-4570-adf1-3ce76e00a763"
  struct IMSVidStreamBufferSourceEvent3
    lpVtbl : IMSVidStreamBufferSourceEvent3VTbl*
  end

  struct IMSVidStreamBufferV2SourceEventVTbl
    query_interface : Proc(IMSVidStreamBufferV2SourceEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32)
    release : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32)
    get_type_info_count : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidStreamBufferV2SourceEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidStreamBufferV2SourceEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidStreamBufferV2SourceEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    end_of_media : Proc(IMSVidStreamBufferV2SourceEvent*, IMSVidPlayback, HRESULT)
    ratings_changed : Proc(IMSVidStreamBufferV2SourceEvent*, HRESULT)
    time_hole : Proc(IMSVidStreamBufferV2SourceEvent*, Int32, Int32, HRESULT)
    stale_data_read : Proc(IMSVidStreamBufferV2SourceEvent*, HRESULT)
    content_becoming_stale : Proc(IMSVidStreamBufferV2SourceEvent*, HRESULT)
    stale_file_deleted : Proc(IMSVidStreamBufferV2SourceEvent*, HRESULT)
    rate_change : Proc(IMSVidStreamBufferV2SourceEvent*, Float64, Float64, HRESULT)
    broadcast_event : Proc(IMSVidStreamBufferV2SourceEvent*, UInt8*, HRESULT)
    broadcast_event_ex : Proc(IMSVidStreamBufferV2SourceEvent*, UInt8*, UInt32, UInt32, UInt32, UInt32, HRESULT)
    content_primarily_audio : Proc(IMSVidStreamBufferV2SourceEvent*, HRESULT)
  end

  IMSVidStreamBufferV2SourceEvent_GUID = LibC::GUID.new("49c771f9-41b2-4cf7-9f9a-a313a8f6027e")
  CLSID_IMSVidStreamBufferV2SourceEvent = "49c771f9-41b2-4cf7-9f9a-a313a8f6027e"
  struct IMSVidStreamBufferV2SourceEvent
    lpVtbl : IMSVidStreamBufferV2SourceEventVTbl*
  end

  struct IMSVidVideoRenderer2VTbl
    query_interface : Proc(IMSVidVideoRenderer2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVideoRenderer2*, UInt32)
    release : Proc(IMSVidVideoRenderer2*, UInt32)
    get_type_info_count : Proc(IMSVidVideoRenderer2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidVideoRenderer2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidVideoRenderer2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidVideoRenderer2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidVideoRenderer2*, UInt8**, HRESULT)
    get_status : Proc(IMSVidVideoRenderer2*, Int32*, HRESULT)
    put_power : Proc(IMSVidVideoRenderer2*, Int16, HRESULT)
    get_power : Proc(IMSVidVideoRenderer2*, Int16*, HRESULT)
    get_category : Proc(IMSVidVideoRenderer2*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidVideoRenderer2*, UInt8**, HRESULT)
    get__category : Proc(IMSVidVideoRenderer2*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidVideoRenderer2*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidVideoRenderer2*, IMSVidDevice, Int16*, HRESULT)
    get_custom_compositor_class : Proc(IMSVidVideoRenderer2*, UInt8**, HRESULT)
    put_custom_compositor_class : Proc(IMSVidVideoRenderer2*, UInt8*, HRESULT)
    get__custom_compositor_class : Proc(IMSVidVideoRenderer2*, Guid*, HRESULT)
    put__custom_compositor_class : Proc(IMSVidVideoRenderer2*, Guid*, HRESULT)
    get__custom_compositor : Proc(IMSVidVideoRenderer2*, IVMRImageCompositor*, HRESULT)
    put__custom_compositor : Proc(IMSVidVideoRenderer2*, IVMRImageCompositor, HRESULT)
    get_mixer_bitmap : Proc(IMSVidVideoRenderer2*, IPictureDisp*, HRESULT)
    get__mixer_bitmap : Proc(IMSVidVideoRenderer2*, IVMRMixerBitmap*, HRESULT)
    put_mixer_bitmap : Proc(IMSVidVideoRenderer2*, IPictureDisp, HRESULT)
    put__mixer_bitmap : Proc(IMSVidVideoRenderer2*, VMRALPHABITMAP*, HRESULT)
    get_mixer_bitmap_position_rect : Proc(IMSVidVideoRenderer2*, IMSVidRect*, HRESULT)
    put_mixer_bitmap_position_rect : Proc(IMSVidVideoRenderer2*, IMSVidRect, HRESULT)
    get_mixer_bitmap_opacity : Proc(IMSVidVideoRenderer2*, Int32*, HRESULT)
    put_mixer_bitmap_opacity : Proc(IMSVidVideoRenderer2*, Int32, HRESULT)
    setup_mixer_bitmap : Proc(IMSVidVideoRenderer2*, IPictureDisp, Int32, IMSVidRect, HRESULT)
    get_source_size : Proc(IMSVidVideoRenderer2*, SourceSizeList*, HRESULT)
    put_source_size : Proc(IMSVidVideoRenderer2*, SourceSizeList, HRESULT)
    get_over_scan : Proc(IMSVidVideoRenderer2*, Int32*, HRESULT)
    put_over_scan : Proc(IMSVidVideoRenderer2*, Int32, HRESULT)
    get_available_source_rect : Proc(IMSVidVideoRenderer2*, IMSVidRect*, HRESULT)
    get_max_vid_rect : Proc(IMSVidVideoRenderer2*, IMSVidRect*, HRESULT)
    get_min_vid_rect : Proc(IMSVidVideoRenderer2*, IMSVidRect*, HRESULT)
    get_clipped_source_rect : Proc(IMSVidVideoRenderer2*, IMSVidRect*, HRESULT)
    put_clipped_source_rect : Proc(IMSVidVideoRenderer2*, IMSVidRect, HRESULT)
    get_using_overlay : Proc(IMSVidVideoRenderer2*, Int16*, HRESULT)
    put_using_overlay : Proc(IMSVidVideoRenderer2*, Int16, HRESULT)
    capture : Proc(IMSVidVideoRenderer2*, IPictureDisp*, HRESULT)
    get_frames_per_second : Proc(IMSVidVideoRenderer2*, Int32*, HRESULT)
    get_decimate_input : Proc(IMSVidVideoRenderer2*, Int16*, HRESULT)
    put_decimate_input : Proc(IMSVidVideoRenderer2*, Int16, HRESULT)
    get_allocator : Proc(IMSVidVideoRenderer2*, IUnknown*, HRESULT)
    get__allocator : Proc(IMSVidVideoRenderer2*, IVMRSurfaceAllocator*, HRESULT)
    get_allocator_id : Proc(IMSVidVideoRenderer2*, Int32*, HRESULT)
    set_allocator : Proc(IMSVidVideoRenderer2*, IUnknown, Int32, HRESULT)
    _set_allocator2 : Proc(IMSVidVideoRenderer2*, IVMRSurfaceAllocator, Int32, HRESULT)
    put_suppress_effects : Proc(IMSVidVideoRenderer2*, Int16, HRESULT)
    get_suppress_effects : Proc(IMSVidVideoRenderer2*, Int16*, HRESULT)
  end

  IMSVidVideoRenderer2_GUID = LibC::GUID.new("6bdd5c1e-2810-4159-94bc-05511ae8549b")
  CLSID_IMSVidVideoRenderer2 = "6bdd5c1e-2810-4159-94bc-05511ae8549b"
  struct IMSVidVideoRenderer2
    lpVtbl : IMSVidVideoRenderer2VTbl*
  end

  struct IMSVidVideoRendererEvent2VTbl
    query_interface : Proc(IMSVidVideoRendererEvent2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVideoRendererEvent2*, UInt32)
    release : Proc(IMSVidVideoRendererEvent2*, UInt32)
    get_type_info_count : Proc(IMSVidVideoRendererEvent2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidVideoRendererEvent2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidVideoRendererEvent2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidVideoRendererEvent2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidVideoRendererEvent2*, IMSVidDevice, Int32, Int32, HRESULT)
    overlay_unavailable : Proc(IMSVidVideoRendererEvent2*, HRESULT)
  end

  IMSVidVideoRendererEvent2_GUID = LibC::GUID.new("7145ed66-4730-4fdb-8a53-fde7508d3e5e")
  CLSID_IMSVidVideoRendererEvent2 = "7145ed66-4730-4fdb-8a53-fde7508d3e5e"
  struct IMSVidVideoRendererEvent2
    lpVtbl : IMSVidVideoRendererEvent2VTbl*
  end

  struct IMSVidVMR9VTbl
    query_interface : Proc(IMSVidVMR9*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVMR9*, UInt32)
    release : Proc(IMSVidVMR9*, UInt32)
    get_type_info_count : Proc(IMSVidVMR9*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidVMR9*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidVMR9*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidVMR9*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidVMR9*, UInt8**, HRESULT)
    get_status : Proc(IMSVidVMR9*, Int32*, HRESULT)
    put_power : Proc(IMSVidVMR9*, Int16, HRESULT)
    get_power : Proc(IMSVidVMR9*, Int16*, HRESULT)
    get_category : Proc(IMSVidVMR9*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidVMR9*, UInt8**, HRESULT)
    get__category : Proc(IMSVidVMR9*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidVMR9*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidVMR9*, IMSVidDevice, Int16*, HRESULT)
    get_custom_compositor_class : Proc(IMSVidVMR9*, UInt8**, HRESULT)
    put_custom_compositor_class : Proc(IMSVidVMR9*, UInt8*, HRESULT)
    get__custom_compositor_class : Proc(IMSVidVMR9*, Guid*, HRESULT)
    put__custom_compositor_class : Proc(IMSVidVMR9*, Guid*, HRESULT)
    get__custom_compositor : Proc(IMSVidVMR9*, IVMRImageCompositor*, HRESULT)
    put__custom_compositor : Proc(IMSVidVMR9*, IVMRImageCompositor, HRESULT)
    get_mixer_bitmap : Proc(IMSVidVMR9*, IPictureDisp*, HRESULT)
    get__mixer_bitmap : Proc(IMSVidVMR9*, IVMRMixerBitmap*, HRESULT)
    put_mixer_bitmap : Proc(IMSVidVMR9*, IPictureDisp, HRESULT)
    put__mixer_bitmap : Proc(IMSVidVMR9*, VMRALPHABITMAP*, HRESULT)
    get_mixer_bitmap_position_rect : Proc(IMSVidVMR9*, IMSVidRect*, HRESULT)
    put_mixer_bitmap_position_rect : Proc(IMSVidVMR9*, IMSVidRect, HRESULT)
    get_mixer_bitmap_opacity : Proc(IMSVidVMR9*, Int32*, HRESULT)
    put_mixer_bitmap_opacity : Proc(IMSVidVMR9*, Int32, HRESULT)
    setup_mixer_bitmap : Proc(IMSVidVMR9*, IPictureDisp, Int32, IMSVidRect, HRESULT)
    get_source_size : Proc(IMSVidVMR9*, SourceSizeList*, HRESULT)
    put_source_size : Proc(IMSVidVMR9*, SourceSizeList, HRESULT)
    get_over_scan : Proc(IMSVidVMR9*, Int32*, HRESULT)
    put_over_scan : Proc(IMSVidVMR9*, Int32, HRESULT)
    get_available_source_rect : Proc(IMSVidVMR9*, IMSVidRect*, HRESULT)
    get_max_vid_rect : Proc(IMSVidVMR9*, IMSVidRect*, HRESULT)
    get_min_vid_rect : Proc(IMSVidVMR9*, IMSVidRect*, HRESULT)
    get_clipped_source_rect : Proc(IMSVidVMR9*, IMSVidRect*, HRESULT)
    put_clipped_source_rect : Proc(IMSVidVMR9*, IMSVidRect, HRESULT)
    get_using_overlay : Proc(IMSVidVMR9*, Int16*, HRESULT)
    put_using_overlay : Proc(IMSVidVMR9*, Int16, HRESULT)
    capture : Proc(IMSVidVMR9*, IPictureDisp*, HRESULT)
    get_frames_per_second : Proc(IMSVidVMR9*, Int32*, HRESULT)
    get_decimate_input : Proc(IMSVidVMR9*, Int16*, HRESULT)
    put_decimate_input : Proc(IMSVidVMR9*, Int16, HRESULT)
    get_allocator_id : Proc(IMSVidVMR9*, Int32*, HRESULT)
    set_allocator : Proc(IMSVidVMR9*, IUnknown, Int32, HRESULT)
    put_suppress_effects : Proc(IMSVidVMR9*, Int16, HRESULT)
    get_suppress_effects : Proc(IMSVidVMR9*, Int16*, HRESULT)
    get_allocator : Proc(IMSVidVMR9*, IUnknown*, HRESULT)
  end

  IMSVidVMR9_GUID = LibC::GUID.new("d58b0015-ebef-44bb-bbdd-3f3699d76ea1")
  CLSID_IMSVidVMR9 = "d58b0015-ebef-44bb-bbdd-3f3699d76ea1"
  struct IMSVidVMR9
    lpVtbl : IMSVidVMR9VTbl*
  end

  struct IMSVidEVRVTbl
    query_interface : Proc(IMSVidEVR*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidEVR*, UInt32)
    release : Proc(IMSVidEVR*, UInt32)
    get_type_info_count : Proc(IMSVidEVR*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidEVR*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidEVR*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidEVR*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidEVR*, UInt8**, HRESULT)
    get_status : Proc(IMSVidEVR*, Int32*, HRESULT)
    put_power : Proc(IMSVidEVR*, Int16, HRESULT)
    get_power : Proc(IMSVidEVR*, Int16*, HRESULT)
    get_category : Proc(IMSVidEVR*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidEVR*, UInt8**, HRESULT)
    get__category : Proc(IMSVidEVR*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidEVR*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidEVR*, IMSVidDevice, Int16*, HRESULT)
    get_custom_compositor_class : Proc(IMSVidEVR*, UInt8**, HRESULT)
    put_custom_compositor_class : Proc(IMSVidEVR*, UInt8*, HRESULT)
    get__custom_compositor_class : Proc(IMSVidEVR*, Guid*, HRESULT)
    put__custom_compositor_class : Proc(IMSVidEVR*, Guid*, HRESULT)
    get__custom_compositor : Proc(IMSVidEVR*, IVMRImageCompositor*, HRESULT)
    put__custom_compositor : Proc(IMSVidEVR*, IVMRImageCompositor, HRESULT)
    get_mixer_bitmap : Proc(IMSVidEVR*, IPictureDisp*, HRESULT)
    get__mixer_bitmap : Proc(IMSVidEVR*, IVMRMixerBitmap*, HRESULT)
    put_mixer_bitmap : Proc(IMSVidEVR*, IPictureDisp, HRESULT)
    put__mixer_bitmap : Proc(IMSVidEVR*, VMRALPHABITMAP*, HRESULT)
    get_mixer_bitmap_position_rect : Proc(IMSVidEVR*, IMSVidRect*, HRESULT)
    put_mixer_bitmap_position_rect : Proc(IMSVidEVR*, IMSVidRect, HRESULT)
    get_mixer_bitmap_opacity : Proc(IMSVidEVR*, Int32*, HRESULT)
    put_mixer_bitmap_opacity : Proc(IMSVidEVR*, Int32, HRESULT)
    setup_mixer_bitmap : Proc(IMSVidEVR*, IPictureDisp, Int32, IMSVidRect, HRESULT)
    get_source_size : Proc(IMSVidEVR*, SourceSizeList*, HRESULT)
    put_source_size : Proc(IMSVidEVR*, SourceSizeList, HRESULT)
    get_over_scan : Proc(IMSVidEVR*, Int32*, HRESULT)
    put_over_scan : Proc(IMSVidEVR*, Int32, HRESULT)
    get_available_source_rect : Proc(IMSVidEVR*, IMSVidRect*, HRESULT)
    get_max_vid_rect : Proc(IMSVidEVR*, IMSVidRect*, HRESULT)
    get_min_vid_rect : Proc(IMSVidEVR*, IMSVidRect*, HRESULT)
    get_clipped_source_rect : Proc(IMSVidEVR*, IMSVidRect*, HRESULT)
    put_clipped_source_rect : Proc(IMSVidEVR*, IMSVidRect, HRESULT)
    get_using_overlay : Proc(IMSVidEVR*, Int16*, HRESULT)
    put_using_overlay : Proc(IMSVidEVR*, Int16, HRESULT)
    capture : Proc(IMSVidEVR*, IPictureDisp*, HRESULT)
    get_frames_per_second : Proc(IMSVidEVR*, Int32*, HRESULT)
    get_decimate_input : Proc(IMSVidEVR*, Int16*, HRESULT)
    put_decimate_input : Proc(IMSVidEVR*, Int16, HRESULT)
    get_presenter : Proc(IMSVidEVR*, IMFVideoPresenter*, HRESULT)
    put_presenter : Proc(IMSVidEVR*, IMFVideoPresenter, HRESULT)
    put_suppress_effects : Proc(IMSVidEVR*, Int16, HRESULT)
    get_suppress_effects : Proc(IMSVidEVR*, Int16*, HRESULT)
  end

  IMSVidEVR_GUID = LibC::GUID.new("15e496ae-82a8-4cf9-a6b6-c561dc60398f")
  CLSID_IMSVidEVR = "15e496ae-82a8-4cf9-a6b6-c561dc60398f"
  struct IMSVidEVR
    lpVtbl : IMSVidEVRVTbl*
  end

  struct IMSVidEVREventVTbl
    query_interface : Proc(IMSVidEVREvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidEVREvent*, UInt32)
    release : Proc(IMSVidEVREvent*, UInt32)
    get_type_info_count : Proc(IMSVidEVREvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidEVREvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidEVREvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidEVREvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidEVREvent*, IMSVidDevice, Int32, Int32, HRESULT)
    on_user_event : Proc(IMSVidEVREvent*, Int32, HRESULT)
  end

  IMSVidEVREvent_GUID = LibC::GUID.new("349abb10-883c-4f22-8714-cecaeee45d62")
  CLSID_IMSVidEVREvent = "349abb10-883c-4f22-8714-cecaeee45d62"
  struct IMSVidEVREvent
    lpVtbl : IMSVidEVREventVTbl*
  end

  struct IMSVidAudioRendererVTbl
    query_interface : Proc(IMSVidAudioRenderer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidAudioRenderer*, UInt32)
    release : Proc(IMSVidAudioRenderer*, UInt32)
    get_type_info_count : Proc(IMSVidAudioRenderer*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidAudioRenderer*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidAudioRenderer*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidAudioRenderer*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_name : Proc(IMSVidAudioRenderer*, UInt8**, HRESULT)
    get_status : Proc(IMSVidAudioRenderer*, Int32*, HRESULT)
    put_power : Proc(IMSVidAudioRenderer*, Int16, HRESULT)
    get_power : Proc(IMSVidAudioRenderer*, Int16*, HRESULT)
    get_category : Proc(IMSVidAudioRenderer*, UInt8**, HRESULT)
    get_class_id : Proc(IMSVidAudioRenderer*, UInt8**, HRESULT)
    get__category : Proc(IMSVidAudioRenderer*, Guid*, HRESULT)
    get__class_id : Proc(IMSVidAudioRenderer*, Guid*, HRESULT)
    is_equal_device : Proc(IMSVidAudioRenderer*, IMSVidDevice, Int16*, HRESULT)
    put_volume : Proc(IMSVidAudioRenderer*, Int32, HRESULT)
    get_volume : Proc(IMSVidAudioRenderer*, Int32*, HRESULT)
    put_balance : Proc(IMSVidAudioRenderer*, Int32, HRESULT)
    get_balance : Proc(IMSVidAudioRenderer*, Int32*, HRESULT)
  end

  IMSVidAudioRenderer_GUID = LibC::GUID.new("37b0353f-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidAudioRenderer = "37b0353f-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidAudioRenderer
    lpVtbl : IMSVidAudioRendererVTbl*
  end

  struct IMSVidAudioRendererEventVTbl
    query_interface : Proc(IMSVidAudioRendererEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidAudioRendererEvent*, UInt32)
    release : Proc(IMSVidAudioRendererEvent*, UInt32)
    get_type_info_count : Proc(IMSVidAudioRendererEvent*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidAudioRendererEvent*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidAudioRendererEvent*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidAudioRendererEvent*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidAudioRendererEvent*, IMSVidDevice, Int32, Int32, HRESULT)
  end

  IMSVidAudioRendererEvent_GUID = LibC::GUID.new("37b03541-a4c8-11d2-b634-00c04f79498e")
  CLSID_IMSVidAudioRendererEvent = "37b03541-a4c8-11d2-b634-00c04f79498e"
  struct IMSVidAudioRendererEvent
    lpVtbl : IMSVidAudioRendererEventVTbl*
  end

  struct IMSVidAudioRendererEvent2VTbl
    query_interface : Proc(IMSVidAudioRendererEvent2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidAudioRendererEvent2*, UInt32)
    release : Proc(IMSVidAudioRendererEvent2*, UInt32)
    get_type_info_count : Proc(IMSVidAudioRendererEvent2*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidAudioRendererEvent2*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidAudioRendererEvent2*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidAudioRendererEvent2*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    state_change : Proc(IMSVidAudioRendererEvent2*, IMSVidDevice, Int32, Int32, HRESULT)
    av_dec_audio_dual_mono : Proc(IMSVidAudioRendererEvent2*, HRESULT)
    av_audio_sample_rate : Proc(IMSVidAudioRendererEvent2*, HRESULT)
    av_audio_channel_config : Proc(IMSVidAudioRendererEvent2*, HRESULT)
    av_audio_channel_count : Proc(IMSVidAudioRendererEvent2*, HRESULT)
    av_dec_common_mean_bit_rate : Proc(IMSVidAudioRendererEvent2*, HRESULT)
    avdd_surround_mode : Proc(IMSVidAudioRendererEvent2*, HRESULT)
    av_dec_common_input_format : Proc(IMSVidAudioRendererEvent2*, HRESULT)
    av_dec_common_output_format : Proc(IMSVidAudioRendererEvent2*, HRESULT)
  end

  IMSVidAudioRendererEvent2_GUID = LibC::GUID.new("e3f55729-353b-4c43-a028-50f79aa9a907")
  CLSID_IMSVidAudioRendererEvent2 = "e3f55729-353b-4c43-a028-50f79aa9a907"
  struct IMSVidAudioRendererEvent2
    lpVtbl : IMSVidAudioRendererEvent2VTbl*
  end

  struct IMSVidInputDevicesVTbl
    query_interface : Proc(IMSVidInputDevices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidInputDevices*, UInt32)
    release : Proc(IMSVidInputDevices*, UInt32)
    get_type_info_count : Proc(IMSVidInputDevices*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidInputDevices*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidInputDevices*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidInputDevices*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IMSVidInputDevices*, Int32*, HRESULT)
    get__new_enum : Proc(IMSVidInputDevices*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IMSVidInputDevices*, VARIANT, IMSVidInputDevice*, HRESULT)
    add : Proc(IMSVidInputDevices*, IMSVidInputDevice, HRESULT)
    remove : Proc(IMSVidInputDevices*, VARIANT, HRESULT)
  end

  IMSVidInputDevices_GUID = LibC::GUID.new("c5702cd1-9b79-11d3-b654-00c04f79498e")
  CLSID_IMSVidInputDevices = "c5702cd1-9b79-11d3-b654-00c04f79498e"
  struct IMSVidInputDevices
    lpVtbl : IMSVidInputDevicesVTbl*
  end

  struct IMSVidOutputDevicesVTbl
    query_interface : Proc(IMSVidOutputDevices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidOutputDevices*, UInt32)
    release : Proc(IMSVidOutputDevices*, UInt32)
    get_type_info_count : Proc(IMSVidOutputDevices*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidOutputDevices*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidOutputDevices*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidOutputDevices*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IMSVidOutputDevices*, Int32*, HRESULT)
    get__new_enum : Proc(IMSVidOutputDevices*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IMSVidOutputDevices*, VARIANT, IMSVidOutputDevice*, HRESULT)
    add : Proc(IMSVidOutputDevices*, IMSVidOutputDevice, HRESULT)
    remove : Proc(IMSVidOutputDevices*, VARIANT, HRESULT)
  end

  IMSVidOutputDevices_GUID = LibC::GUID.new("c5702cd2-9b79-11d3-b654-00c04f79498e")
  CLSID_IMSVidOutputDevices = "c5702cd2-9b79-11d3-b654-00c04f79498e"
  struct IMSVidOutputDevices
    lpVtbl : IMSVidOutputDevicesVTbl*
  end

  struct IMSVidVideoRendererDevicesVTbl
    query_interface : Proc(IMSVidVideoRendererDevices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidVideoRendererDevices*, UInt32)
    release : Proc(IMSVidVideoRendererDevices*, UInt32)
    get_type_info_count : Proc(IMSVidVideoRendererDevices*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidVideoRendererDevices*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidVideoRendererDevices*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidVideoRendererDevices*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IMSVidVideoRendererDevices*, Int32*, HRESULT)
    get__new_enum : Proc(IMSVidVideoRendererDevices*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IMSVidVideoRendererDevices*, VARIANT, IMSVidVideoRenderer*, HRESULT)
    add : Proc(IMSVidVideoRendererDevices*, IMSVidVideoRenderer, HRESULT)
    remove : Proc(IMSVidVideoRendererDevices*, VARIANT, HRESULT)
  end

  IMSVidVideoRendererDevices_GUID = LibC::GUID.new("c5702cd3-9b79-11d3-b654-00c04f79498e")
  CLSID_IMSVidVideoRendererDevices = "c5702cd3-9b79-11d3-b654-00c04f79498e"
  struct IMSVidVideoRendererDevices
    lpVtbl : IMSVidVideoRendererDevicesVTbl*
  end

  struct IMSVidAudioRendererDevicesVTbl
    query_interface : Proc(IMSVidAudioRendererDevices*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidAudioRendererDevices*, UInt32)
    release : Proc(IMSVidAudioRendererDevices*, UInt32)
    get_type_info_count : Proc(IMSVidAudioRendererDevices*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidAudioRendererDevices*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidAudioRendererDevices*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidAudioRendererDevices*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IMSVidAudioRendererDevices*, Int32*, HRESULT)
    get__new_enum : Proc(IMSVidAudioRendererDevices*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IMSVidAudioRendererDevices*, VARIANT, IMSVidAudioRenderer*, HRESULT)
    add : Proc(IMSVidAudioRendererDevices*, IMSVidAudioRenderer, HRESULT)
    remove : Proc(IMSVidAudioRendererDevices*, VARIANT, HRESULT)
  end

  IMSVidAudioRendererDevices_GUID = LibC::GUID.new("c5702cd4-9b79-11d3-b654-00c04f79498e")
  CLSID_IMSVidAudioRendererDevices = "c5702cd4-9b79-11d3-b654-00c04f79498e"
  struct IMSVidAudioRendererDevices
    lpVtbl : IMSVidAudioRendererDevicesVTbl*
  end

  struct IMSVidFeaturesVTbl
    query_interface : Proc(IMSVidFeatures*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidFeatures*, UInt32)
    release : Proc(IMSVidFeatures*, UInt32)
    get_type_info_count : Proc(IMSVidFeatures*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidFeatures*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidFeatures*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidFeatures*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_count : Proc(IMSVidFeatures*, Int32*, HRESULT)
    get__new_enum : Proc(IMSVidFeatures*, IEnumVARIANT*, HRESULT)
    get_item : Proc(IMSVidFeatures*, VARIANT, IMSVidFeature*, HRESULT)
    add : Proc(IMSVidFeatures*, IMSVidFeature, HRESULT)
    remove : Proc(IMSVidFeatures*, VARIANT, HRESULT)
  end

  IMSVidFeatures_GUID = LibC::GUID.new("c5702cd5-9b79-11d3-b654-00c04f79498e")
  CLSID_IMSVidFeatures = "c5702cd5-9b79-11d3-b654-00c04f79498e"
  struct IMSVidFeatures
    lpVtbl : IMSVidFeaturesVTbl*
  end

  struct IMSVidCtlVTbl
    query_interface : Proc(IMSVidCtl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSVidCtl*, UInt32)
    release : Proc(IMSVidCtl*, UInt32)
    get_type_info_count : Proc(IMSVidCtl*, UInt32*, HRESULT)
    get_type_info : Proc(IMSVidCtl*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSVidCtl*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSVidCtl*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    get_auto_size : Proc(IMSVidCtl*, Int16*, HRESULT)
    put_auto_size : Proc(IMSVidCtl*, Int16, HRESULT)
    get_back_color : Proc(IMSVidCtl*, UInt32*, HRESULT)
    put_back_color : Proc(IMSVidCtl*, UInt32, HRESULT)
    get_enabled : Proc(IMSVidCtl*, Int16*, HRESULT)
    put_enabled : Proc(IMSVidCtl*, Int16, HRESULT)
    get_tab_stop : Proc(IMSVidCtl*, Int16*, HRESULT)
    put_tab_stop : Proc(IMSVidCtl*, Int16, HRESULT)
    get_window : Proc(IMSVidCtl*, HANDLE*, HRESULT)
    refresh : Proc(IMSVidCtl*, HRESULT)
    get_display_size : Proc(IMSVidCtl*, DisplaySizeList*, HRESULT)
    put_display_size : Proc(IMSVidCtl*, DisplaySizeList, HRESULT)
    get_maintain_aspect_ratio : Proc(IMSVidCtl*, Int16*, HRESULT)
    put_maintain_aspect_ratio : Proc(IMSVidCtl*, Int16, HRESULT)
    get_color_key : Proc(IMSVidCtl*, UInt32*, HRESULT)
    put_color_key : Proc(IMSVidCtl*, UInt32, HRESULT)
    get_inputs_available : Proc(IMSVidCtl*, UInt8*, IMSVidInputDevices*, HRESULT)
    get_outputs_available : Proc(IMSVidCtl*, UInt8*, IMSVidOutputDevices*, HRESULT)
    get__inputs_available : Proc(IMSVidCtl*, Guid*, IMSVidInputDevices*, HRESULT)
    get__outputs_available : Proc(IMSVidCtl*, Guid*, IMSVidOutputDevices*, HRESULT)
    get_video_renderers_available : Proc(IMSVidCtl*, IMSVidVideoRendererDevices*, HRESULT)
    get_audio_renderers_available : Proc(IMSVidCtl*, IMSVidAudioRendererDevices*, HRESULT)
    get_features_available : Proc(IMSVidCtl*, IMSVidFeatures*, HRESULT)
    get_input_active : Proc(IMSVidCtl*, IMSVidInputDevice*, HRESULT)
    put_input_active : Proc(IMSVidCtl*, IMSVidInputDevice, HRESULT)
    get_outputs_active : Proc(IMSVidCtl*, IMSVidOutputDevices*, HRESULT)
    put_outputs_active : Proc(IMSVidCtl*, IMSVidOutputDevices, HRESULT)
    get_video_renderer_active : Proc(IMSVidCtl*, IMSVidVideoRenderer*, HRESULT)
    put_video_renderer_active : Proc(IMSVidCtl*, IMSVidVideoRenderer, HRESULT)
    get_audio_renderer_active : Proc(IMSVidCtl*, IMSVidAudioRenderer*, HRESULT)
    put_audio_renderer_active : Proc(IMSVidCtl*, IMSVidAudioRenderer, HRESULT)
    get_features_active : Proc(IMSVidCtl*, IMSVidFeatures*, HRESULT)
    put_features_active : Proc(IMSVidCtl*, IMSVidFeatures, HRESULT)
    get_state : Proc(IMSVidCtl*, MSVidCtlStateList*, HRESULT)
    view : Proc(IMSVidCtl*, VARIANT*, HRESULT)
    build : Proc(IMSVidCtl*, HRESULT)
    pause : Proc(IMSVidCtl*, HRESULT)
    run : Proc(IMSVidCtl*, HRESULT)
    stop : Proc(IMSVidCtl*, HRESULT)
    decompose : Proc(IMSVidCtl*, HRESULT)
    disable_video : Proc(IMSVidCtl*, HRESULT)
    disable_audio : Proc(IMSVidCtl*, HRESULT)
    view_next : Proc(IMSVidCtl*, VARIANT*, HRESULT)
  end

  IMSVidCtl_GUID = LibC::GUID.new("b0edf162-910a-11d2-b632-00c04f79498e")
  CLSID_IMSVidCtl = "b0edf162-910a-11d2-b632-00c04f79498e"
  struct IMSVidCtl
    lpVtbl : IMSVidCtlVTbl*
  end

  struct IMSEventBinderVTbl
    query_interface : Proc(IMSEventBinder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMSEventBinder*, UInt32)
    release : Proc(IMSEventBinder*, UInt32)
    get_type_info_count : Proc(IMSEventBinder*, UInt32*, HRESULT)
    get_type_info : Proc(IMSEventBinder*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IMSEventBinder*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IMSEventBinder*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
    bind : Proc(IMSEventBinder*, IDispatch, UInt8*, UInt8*, Int32*, HRESULT)
    unbind : Proc(IMSEventBinder*, UInt32, HRESULT)
  end

  IMSEventBinder_GUID = LibC::GUID.new("c3a9f406-2222-436d-86d5-ba3229279efb")
  CLSID_IMSEventBinder = "c3a9f406-2222-436d-86d5-ba3229279efb"
  struct IMSEventBinder
    lpVtbl : IMSEventBinderVTbl*
  end

  struct IIMSVidCtlEventsVTbl
    query_interface : Proc(IIMSVidCtlEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIMSVidCtlEvents*, UInt32)
    release : Proc(IIMSVidCtlEvents*, UInt32)
    get_type_info_count : Proc(IIMSVidCtlEvents*, UInt32*, HRESULT)
    get_type_info : Proc(IIMSVidCtlEvents*, UInt32, UInt32, ITypeInfo*, HRESULT)
    get_i_ds_of_names : Proc(IIMSVidCtlEvents*, Guid*, LibC::LPWSTR*, UInt32, UInt32, Int32*, HRESULT)
    invoke : Proc(IIMSVidCtlEvents*, Int32, Guid*, UInt32, UInt16, DISPPARAMS*, VARIANT*, EXCEPINFO*, UInt32*, HRESULT)
  end

  IIMSVidCtlEvents_GUID = LibC::GUID.new("b0edf164-910a-11d2-b632-00c04f79498e")
  CLSID_IIMSVidCtlEvents = "b0edf164-910a-11d2-b632-00c04f79498e"
  struct IIMSVidCtlEvents
    lpVtbl : IIMSVidCtlEventsVTbl*
  end

  struct IStreamBufferInitializeVTbl
    query_interface : Proc(IStreamBufferInitialize*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferInitialize*, UInt32)
    release : Proc(IStreamBufferInitialize*, UInt32)
    set_hkey : Proc(IStreamBufferInitialize*, HKEY, HRESULT)
    set_si_ds : Proc(IStreamBufferInitialize*, UInt32, PSID*, HRESULT)
  end

  IStreamBufferInitialize_GUID = LibC::GUID.new("9ce50f2d-6ba7-40fb-a034-50b1a674ec78")
  CLSID_IStreamBufferInitialize = "9ce50f2d-6ba7-40fb-a034-50b1a674ec78"
  struct IStreamBufferInitialize
    lpVtbl : IStreamBufferInitializeVTbl*
  end

  struct IStreamBufferSinkVTbl
    query_interface : Proc(IStreamBufferSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferSink*, UInt32)
    release : Proc(IStreamBufferSink*, UInt32)
    lock_profile : Proc(IStreamBufferSink*, LibC::LPWSTR, HRESULT)
    create_recorder : Proc(IStreamBufferSink*, LibC::LPWSTR, UInt32, IUnknown*, HRESULT)
    is_profile_locked : Proc(IStreamBufferSink*, HRESULT)
  end

  IStreamBufferSink_GUID = LibC::GUID.new("afd1f242-7efd-45ee-ba4e-407a25c9a77a")
  CLSID_IStreamBufferSink = "afd1f242-7efd-45ee-ba4e-407a25c9a77a"
  struct IStreamBufferSink
    lpVtbl : IStreamBufferSinkVTbl*
  end

  struct IStreamBufferSink2VTbl
    query_interface : Proc(IStreamBufferSink2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferSink2*, UInt32)
    release : Proc(IStreamBufferSink2*, UInt32)
    lock_profile : Proc(IStreamBufferSink2*, LibC::LPWSTR, HRESULT)
    create_recorder : Proc(IStreamBufferSink2*, LibC::LPWSTR, UInt32, IUnknown*, HRESULT)
    is_profile_locked : Proc(IStreamBufferSink2*, HRESULT)
    unlock_profile : Proc(IStreamBufferSink2*, HRESULT)
  end

  IStreamBufferSink2_GUID = LibC::GUID.new("db94a660-f4fb-4bfa-bcc6-fe159a4eea93")
  CLSID_IStreamBufferSink2 = "db94a660-f4fb-4bfa-bcc6-fe159a4eea93"
  struct IStreamBufferSink2
    lpVtbl : IStreamBufferSink2VTbl*
  end

  struct IStreamBufferSink3VTbl
    query_interface : Proc(IStreamBufferSink3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferSink3*, UInt32)
    release : Proc(IStreamBufferSink3*, UInt32)
    lock_profile : Proc(IStreamBufferSink3*, LibC::LPWSTR, HRESULT)
    create_recorder : Proc(IStreamBufferSink3*, LibC::LPWSTR, UInt32, IUnknown*, HRESULT)
    is_profile_locked : Proc(IStreamBufferSink3*, HRESULT)
    unlock_profile : Proc(IStreamBufferSink3*, HRESULT)
    set_available_filter : Proc(IStreamBufferSink3*, Int64*, HRESULT)
  end

  IStreamBufferSink3_GUID = LibC::GUID.new("974723f2-887a-4452-9366-2cff3057bc8f")
  CLSID_IStreamBufferSink3 = "974723f2-887a-4452-9366-2cff3057bc8f"
  struct IStreamBufferSink3
    lpVtbl : IStreamBufferSink3VTbl*
  end

  struct IStreamBufferSourceVTbl
    query_interface : Proc(IStreamBufferSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferSource*, UInt32)
    release : Proc(IStreamBufferSource*, UInt32)
    set_stream_sink : Proc(IStreamBufferSource*, IStreamBufferSink, HRESULT)
  end

  IStreamBufferSource_GUID = LibC::GUID.new("1c5bd776-6ced-4f44-8164-5eab0e98db12")
  CLSID_IStreamBufferSource = "1c5bd776-6ced-4f44-8164-5eab0e98db12"
  struct IStreamBufferSource
    lpVtbl : IStreamBufferSourceVTbl*
  end

  struct IStreamBufferRecordControlVTbl
    query_interface : Proc(IStreamBufferRecordControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferRecordControl*, UInt32)
    release : Proc(IStreamBufferRecordControl*, UInt32)
    start : Proc(IStreamBufferRecordControl*, Int64*, HRESULT)
    stop : Proc(IStreamBufferRecordControl*, Int64, HRESULT)
    get_recording_status : Proc(IStreamBufferRecordControl*, HRESULT*, LibC::BOOL*, LibC::BOOL*, HRESULT)
  end

  IStreamBufferRecordControl_GUID = LibC::GUID.new("ba9b6c99-f3c7-4ff2-92db-cfdd4851bf31")
  CLSID_IStreamBufferRecordControl = "ba9b6c99-f3c7-4ff2-92db-cfdd4851bf31"
  struct IStreamBufferRecordControl
    lpVtbl : IStreamBufferRecordControlVTbl*
  end

  struct IStreamBufferRecCompVTbl
    query_interface : Proc(IStreamBufferRecComp*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferRecComp*, UInt32)
    release : Proc(IStreamBufferRecComp*, UInt32)
    initialize : Proc(IStreamBufferRecComp*, LibC::LPWSTR, LibC::LPWSTR, HRESULT)
    append : Proc(IStreamBufferRecComp*, LibC::LPWSTR, HRESULT)
    append_ex : Proc(IStreamBufferRecComp*, LibC::LPWSTR, Int64, Int64, HRESULT)
    get_current_length : Proc(IStreamBufferRecComp*, UInt32*, HRESULT)
    close : Proc(IStreamBufferRecComp*, HRESULT)
    cancel : Proc(IStreamBufferRecComp*, HRESULT)
  end

  IStreamBufferRecComp_GUID = LibC::GUID.new("9e259a9b-8815-42ae-b09f-221970b154fd")
  CLSID_IStreamBufferRecComp = "9e259a9b-8815-42ae-b09f-221970b154fd"
  struct IStreamBufferRecComp
    lpVtbl : IStreamBufferRecCompVTbl*
  end

  struct IStreamBufferRecordingAttributeVTbl
    query_interface : Proc(IStreamBufferRecordingAttribute*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferRecordingAttribute*, UInt32)
    release : Proc(IStreamBufferRecordingAttribute*, UInt32)
    set_attribute : Proc(IStreamBufferRecordingAttribute*, UInt32, LibC::LPWSTR, STREAMBUFFER_ATTR_DATATYPE, UInt8*, UInt16, HRESULT)
    get_attribute_count : Proc(IStreamBufferRecordingAttribute*, UInt32, UInt16*, HRESULT)
    get_attribute_by_name : Proc(IStreamBufferRecordingAttribute*, LibC::LPWSTR, UInt32*, STREAMBUFFER_ATTR_DATATYPE*, UInt8*, UInt16*, HRESULT)
    get_attribute_by_index : Proc(IStreamBufferRecordingAttribute*, UInt16, UInt32*, LibC::LPWSTR, UInt16*, STREAMBUFFER_ATTR_DATATYPE*, UInt8*, UInt16*, HRESULT)
    enum_attributes : Proc(IStreamBufferRecordingAttribute*, IEnumStreamBufferRecordingAttrib*, HRESULT)
  end

  IStreamBufferRecordingAttribute_GUID = LibC::GUID.new("16ca4e03-fe69-4705-bd41-5b7dfc0c95f3")
  CLSID_IStreamBufferRecordingAttribute = "16ca4e03-fe69-4705-bd41-5b7dfc0c95f3"
  struct IStreamBufferRecordingAttribute
    lpVtbl : IStreamBufferRecordingAttributeVTbl*
  end

  struct IEnumStreamBufferRecordingAttribVTbl
    query_interface : Proc(IEnumStreamBufferRecordingAttrib*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumStreamBufferRecordingAttrib*, UInt32)
    release : Proc(IEnumStreamBufferRecordingAttrib*, UInt32)
    next : Proc(IEnumStreamBufferRecordingAttrib*, UInt32, STREAMBUFFER_ATTRIBUTE*, UInt32*, HRESULT)
    skip : Proc(IEnumStreamBufferRecordingAttrib*, UInt32, HRESULT)
    reset : Proc(IEnumStreamBufferRecordingAttrib*, HRESULT)
    clone : Proc(IEnumStreamBufferRecordingAttrib*, IEnumStreamBufferRecordingAttrib*, HRESULT)
  end

  IEnumStreamBufferRecordingAttrib_GUID = LibC::GUID.new("c18a9162-1e82-4142-8c73-5690fa62fe33")
  CLSID_IEnumStreamBufferRecordingAttrib = "c18a9162-1e82-4142-8c73-5690fa62fe33"
  struct IEnumStreamBufferRecordingAttrib
    lpVtbl : IEnumStreamBufferRecordingAttribVTbl*
  end

  struct IStreamBufferConfigureVTbl
    query_interface : Proc(IStreamBufferConfigure*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferConfigure*, UInt32)
    release : Proc(IStreamBufferConfigure*, UInt32)
    set_directory : Proc(IStreamBufferConfigure*, LibC::LPWSTR, HRESULT)
    get_directory : Proc(IStreamBufferConfigure*, LibC::LPWSTR*, HRESULT)
    set_backing_file_count : Proc(IStreamBufferConfigure*, UInt32, UInt32, HRESULT)
    get_backing_file_count : Proc(IStreamBufferConfigure*, UInt32*, UInt32*, HRESULT)
    set_backing_file_duration : Proc(IStreamBufferConfigure*, UInt32, HRESULT)
    get_backing_file_duration : Proc(IStreamBufferConfigure*, UInt32*, HRESULT)
  end

  IStreamBufferConfigure_GUID = LibC::GUID.new("ce14dfae-4098-4af7-bbf7-d6511f835414")
  CLSID_IStreamBufferConfigure = "ce14dfae-4098-4af7-bbf7-d6511f835414"
  struct IStreamBufferConfigure
    lpVtbl : IStreamBufferConfigureVTbl*
  end

  struct IStreamBufferConfigure2VTbl
    query_interface : Proc(IStreamBufferConfigure2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferConfigure2*, UInt32)
    release : Proc(IStreamBufferConfigure2*, UInt32)
    set_directory : Proc(IStreamBufferConfigure2*, LibC::LPWSTR, HRESULT)
    get_directory : Proc(IStreamBufferConfigure2*, LibC::LPWSTR*, HRESULT)
    set_backing_file_count : Proc(IStreamBufferConfigure2*, UInt32, UInt32, HRESULT)
    get_backing_file_count : Proc(IStreamBufferConfigure2*, UInt32*, UInt32*, HRESULT)
    set_backing_file_duration : Proc(IStreamBufferConfigure2*, UInt32, HRESULT)
    get_backing_file_duration : Proc(IStreamBufferConfigure2*, UInt32*, HRESULT)
    set_multiplexed_packet_size : Proc(IStreamBufferConfigure2*, UInt32, HRESULT)
    get_multiplexed_packet_size : Proc(IStreamBufferConfigure2*, UInt32*, HRESULT)
    set_ff_transition_rates : Proc(IStreamBufferConfigure2*, UInt32, UInt32, HRESULT)
    get_ff_transition_rates : Proc(IStreamBufferConfigure2*, UInt32*, UInt32*, HRESULT)
  end

  IStreamBufferConfigure2_GUID = LibC::GUID.new("53e037bf-3992-4282-ae34-2487b4dae06b")
  CLSID_IStreamBufferConfigure2 = "53e037bf-3992-4282-ae34-2487b4dae06b"
  struct IStreamBufferConfigure2
    lpVtbl : IStreamBufferConfigure2VTbl*
  end

  struct IStreamBufferConfigure3VTbl
    query_interface : Proc(IStreamBufferConfigure3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferConfigure3*, UInt32)
    release : Proc(IStreamBufferConfigure3*, UInt32)
    set_directory : Proc(IStreamBufferConfigure3*, LibC::LPWSTR, HRESULT)
    get_directory : Proc(IStreamBufferConfigure3*, LibC::LPWSTR*, HRESULT)
    set_backing_file_count : Proc(IStreamBufferConfigure3*, UInt32, UInt32, HRESULT)
    get_backing_file_count : Proc(IStreamBufferConfigure3*, UInt32*, UInt32*, HRESULT)
    set_backing_file_duration : Proc(IStreamBufferConfigure3*, UInt32, HRESULT)
    get_backing_file_duration : Proc(IStreamBufferConfigure3*, UInt32*, HRESULT)
    set_multiplexed_packet_size : Proc(IStreamBufferConfigure3*, UInt32, HRESULT)
    get_multiplexed_packet_size : Proc(IStreamBufferConfigure3*, UInt32*, HRESULT)
    set_ff_transition_rates : Proc(IStreamBufferConfigure3*, UInt32, UInt32, HRESULT)
    get_ff_transition_rates : Proc(IStreamBufferConfigure3*, UInt32*, UInt32*, HRESULT)
    set_start_rec_config : Proc(IStreamBufferConfigure3*, LibC::BOOL, HRESULT)
    get_start_rec_config : Proc(IStreamBufferConfigure3*, LibC::BOOL*, HRESULT)
    set_namespace : Proc(IStreamBufferConfigure3*, LibC::LPWSTR, HRESULT)
    get_namespace : Proc(IStreamBufferConfigure3*, LibC::LPWSTR*, HRESULT)
  end

  IStreamBufferConfigure3_GUID = LibC::GUID.new("7e2d2a1e-7192-4bd7-80c1-061fd1d10402")
  CLSID_IStreamBufferConfigure3 = "7e2d2a1e-7192-4bd7-80c1-061fd1d10402"
  struct IStreamBufferConfigure3
    lpVtbl : IStreamBufferConfigure3VTbl*
  end

  struct IStreamBufferMediaSeekingVTbl
    query_interface : Proc(IStreamBufferMediaSeeking*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferMediaSeeking*, UInt32)
    release : Proc(IStreamBufferMediaSeeking*, UInt32)
    get_capabilities : Proc(IStreamBufferMediaSeeking*, UInt32*, HRESULT)
    check_capabilities : Proc(IStreamBufferMediaSeeking*, UInt32*, HRESULT)
    is_format_supported : Proc(IStreamBufferMediaSeeking*, Guid*, HRESULT)
    query_preferred_format : Proc(IStreamBufferMediaSeeking*, Guid*, HRESULT)
    get_time_format : Proc(IStreamBufferMediaSeeking*, Guid*, HRESULT)
    is_using_time_format : Proc(IStreamBufferMediaSeeking*, Guid*, HRESULT)
    set_time_format : Proc(IStreamBufferMediaSeeking*, Guid*, HRESULT)
    get_duration : Proc(IStreamBufferMediaSeeking*, Int64*, HRESULT)
    get_stop_position : Proc(IStreamBufferMediaSeeking*, Int64*, HRESULT)
    get_current_position : Proc(IStreamBufferMediaSeeking*, Int64*, HRESULT)
    convert_time_format : Proc(IStreamBufferMediaSeeking*, Int64*, Guid*, Int64, Guid*, HRESULT)
    set_positions : Proc(IStreamBufferMediaSeeking*, Int64*, UInt32, Int64*, UInt32, HRESULT)
    get_positions : Proc(IStreamBufferMediaSeeking*, Int64*, Int64*, HRESULT)
    get_available : Proc(IStreamBufferMediaSeeking*, Int64*, Int64*, HRESULT)
    set_rate : Proc(IStreamBufferMediaSeeking*, Float64, HRESULT)
    get_rate : Proc(IStreamBufferMediaSeeking*, Float64*, HRESULT)
    get_preroll : Proc(IStreamBufferMediaSeeking*, Int64*, HRESULT)
  end

  IStreamBufferMediaSeeking_GUID = LibC::GUID.new("f61f5c26-863d-4afa-b0ba-2f81dc978596")
  CLSID_IStreamBufferMediaSeeking = "f61f5c26-863d-4afa-b0ba-2f81dc978596"
  struct IStreamBufferMediaSeeking
    lpVtbl : IStreamBufferMediaSeekingVTbl*
  end

  struct IStreamBufferMediaSeeking2VTbl
    query_interface : Proc(IStreamBufferMediaSeeking2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferMediaSeeking2*, UInt32)
    release : Proc(IStreamBufferMediaSeeking2*, UInt32)
    get_capabilities : Proc(IStreamBufferMediaSeeking2*, UInt32*, HRESULT)
    check_capabilities : Proc(IStreamBufferMediaSeeking2*, UInt32*, HRESULT)
    is_format_supported : Proc(IStreamBufferMediaSeeking2*, Guid*, HRESULT)
    query_preferred_format : Proc(IStreamBufferMediaSeeking2*, Guid*, HRESULT)
    get_time_format : Proc(IStreamBufferMediaSeeking2*, Guid*, HRESULT)
    is_using_time_format : Proc(IStreamBufferMediaSeeking2*, Guid*, HRESULT)
    set_time_format : Proc(IStreamBufferMediaSeeking2*, Guid*, HRESULT)
    get_duration : Proc(IStreamBufferMediaSeeking2*, Int64*, HRESULT)
    get_stop_position : Proc(IStreamBufferMediaSeeking2*, Int64*, HRESULT)
    get_current_position : Proc(IStreamBufferMediaSeeking2*, Int64*, HRESULT)
    convert_time_format : Proc(IStreamBufferMediaSeeking2*, Int64*, Guid*, Int64, Guid*, HRESULT)
    set_positions : Proc(IStreamBufferMediaSeeking2*, Int64*, UInt32, Int64*, UInt32, HRESULT)
    get_positions : Proc(IStreamBufferMediaSeeking2*, Int64*, Int64*, HRESULT)
    get_available : Proc(IStreamBufferMediaSeeking2*, Int64*, Int64*, HRESULT)
    set_rate : Proc(IStreamBufferMediaSeeking2*, Float64, HRESULT)
    get_rate : Proc(IStreamBufferMediaSeeking2*, Float64*, HRESULT)
    get_preroll : Proc(IStreamBufferMediaSeeking2*, Int64*, HRESULT)
    set_rate_ex : Proc(IStreamBufferMediaSeeking2*, Float64, UInt32, HRESULT)
  end

  IStreamBufferMediaSeeking2_GUID = LibC::GUID.new("3a439ab0-155f-470a-86a6-9ea54afd6eaf")
  CLSID_IStreamBufferMediaSeeking2 = "3a439ab0-155f-470a-86a6-9ea54afd6eaf"
  struct IStreamBufferMediaSeeking2
    lpVtbl : IStreamBufferMediaSeeking2VTbl*
  end

  struct IStreamBufferDataCountersVTbl
    query_interface : Proc(IStreamBufferDataCounters*, Guid*, Void**, HRESULT)
    add_ref : Proc(IStreamBufferDataCounters*, UInt32)
    release : Proc(IStreamBufferDataCounters*, UInt32)
    get_data : Proc(IStreamBufferDataCounters*, SBE_PIN_DATA*, HRESULT)
    reset_data : Proc(IStreamBufferDataCounters*, HRESULT)
  end

  IStreamBufferDataCounters_GUID = LibC::GUID.new("9d2a2563-31ab-402e-9a6b-adb903489440")
  CLSID_IStreamBufferDataCounters = "9d2a2563-31ab-402e-9a6b-adb903489440"
  struct IStreamBufferDataCounters
    lpVtbl : IStreamBufferDataCountersVTbl*
  end

  struct ISBE2GlobalEventVTbl
    query_interface : Proc(ISBE2GlobalEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2GlobalEvent*, UInt32)
    release : Proc(ISBE2GlobalEvent*, UInt32)
    get_event : Proc(ISBE2GlobalEvent*, Guid*, UInt32, UInt32, UInt32, UInt32, LibC::BOOL*, UInt32*, UInt8*, HRESULT)
  end

  ISBE2GlobalEvent_GUID = LibC::GUID.new("caede759-b6b1-11db-a578-0018f3fa24c6")
  CLSID_ISBE2GlobalEvent = "caede759-b6b1-11db-a578-0018f3fa24c6"
  struct ISBE2GlobalEvent
    lpVtbl : ISBE2GlobalEventVTbl*
  end

  struct ISBE2GlobalEvent2VTbl
    query_interface : Proc(ISBE2GlobalEvent2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2GlobalEvent2*, UInt32)
    release : Proc(ISBE2GlobalEvent2*, UInt32)
    get_event : Proc(ISBE2GlobalEvent2*, Guid*, UInt32, UInt32, UInt32, UInt32, LibC::BOOL*, UInt32*, UInt8*, HRESULT)
    get_event_ex : Proc(ISBE2GlobalEvent2*, Guid*, UInt32, UInt32, UInt32, UInt32, LibC::BOOL*, UInt32*, UInt8*, Int64*, HRESULT)
  end

  ISBE2GlobalEvent2_GUID = LibC::GUID.new("6d8309bf-00fe-4506-8b03-f8c65b5c9b39")
  CLSID_ISBE2GlobalEvent2 = "6d8309bf-00fe-4506-8b03-f8c65b5c9b39"
  struct ISBE2GlobalEvent2
    lpVtbl : ISBE2GlobalEvent2VTbl*
  end

  struct ISBE2SpanningEventVTbl
    query_interface : Proc(ISBE2SpanningEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2SpanningEvent*, UInt32)
    release : Proc(ISBE2SpanningEvent*, UInt32)
    get_event : Proc(ISBE2SpanningEvent*, Guid*, UInt32, UInt32*, UInt8*, HRESULT)
  end

  ISBE2SpanningEvent_GUID = LibC::GUID.new("caede760-b6b1-11db-a578-0018f3fa24c6")
  CLSID_ISBE2SpanningEvent = "caede760-b6b1-11db-a578-0018f3fa24c6"
  struct ISBE2SpanningEvent
    lpVtbl : ISBE2SpanningEventVTbl*
  end

  struct ISBE2CrossbarVTbl
    query_interface : Proc(ISBE2Crossbar*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2Crossbar*, UInt32)
    release : Proc(ISBE2Crossbar*, UInt32)
    enable_default_mode : Proc(ISBE2Crossbar*, UInt32, HRESULT)
    get_initial_profile : Proc(ISBE2Crossbar*, ISBE2MediaTypeProfile*, HRESULT)
    set_output_profile : Proc(ISBE2Crossbar*, ISBE2MediaTypeProfile, UInt32*, IPin*, HRESULT)
    enum_streams : Proc(ISBE2Crossbar*, ISBE2EnumStream*, HRESULT)
  end

  ISBE2Crossbar_GUID = LibC::GUID.new("547b6d26-3226-487e-8253-8aa168749434")
  CLSID_ISBE2Crossbar = "547b6d26-3226-487e-8253-8aa168749434"
  struct ISBE2Crossbar
    lpVtbl : ISBE2CrossbarVTbl*
  end

  struct ISBE2StreamMapVTbl
    query_interface : Proc(ISBE2StreamMap*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2StreamMap*, UInt32)
    release : Proc(ISBE2StreamMap*, UInt32)
    map_stream : Proc(ISBE2StreamMap*, UInt32, HRESULT)
    unmap_stream : Proc(ISBE2StreamMap*, UInt32, HRESULT)
    enum_mapped_streams : Proc(ISBE2StreamMap*, ISBE2EnumStream*, HRESULT)
  end

  ISBE2StreamMap_GUID = LibC::GUID.new("667c7745-85b1-4c55-ae55-4e25056159fc")
  CLSID_ISBE2StreamMap = "667c7745-85b1-4c55-ae55-4e25056159fc"
  struct ISBE2StreamMap
    lpVtbl : ISBE2StreamMapVTbl*
  end

  struct ISBE2EnumStreamVTbl
    query_interface : Proc(ISBE2EnumStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2EnumStream*, UInt32)
    release : Proc(ISBE2EnumStream*, UInt32)
    next : Proc(ISBE2EnumStream*, UInt32, SBE2_STREAM_DESC*, UInt32*, HRESULT)
    skip : Proc(ISBE2EnumStream*, UInt32, HRESULT)
    reset : Proc(ISBE2EnumStream*, HRESULT)
    clone : Proc(ISBE2EnumStream*, ISBE2EnumStream*, HRESULT)
  end

  ISBE2EnumStream_GUID = LibC::GUID.new("f7611092-9fbc-46ec-a7c7-548ea78b71a4")
  CLSID_ISBE2EnumStream = "f7611092-9fbc-46ec-a7c7-548ea78b71a4"
  struct ISBE2EnumStream
    lpVtbl : ISBE2EnumStreamVTbl*
  end

  struct ISBE2MediaTypeProfileVTbl
    query_interface : Proc(ISBE2MediaTypeProfile*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2MediaTypeProfile*, UInt32)
    release : Proc(ISBE2MediaTypeProfile*, UInt32)
    get_stream_count : Proc(ISBE2MediaTypeProfile*, UInt32*, HRESULT)
    get_stream : Proc(ISBE2MediaTypeProfile*, UInt32, AM_MEDIA_TYPE**, HRESULT)
    add_stream : Proc(ISBE2MediaTypeProfile*, AM_MEDIA_TYPE*, HRESULT)
    delete_stream : Proc(ISBE2MediaTypeProfile*, UInt32, HRESULT)
  end

  ISBE2MediaTypeProfile_GUID = LibC::GUID.new("f238267d-4671-40d7-997e-25dc32cfed2a")
  CLSID_ISBE2MediaTypeProfile = "f238267d-4671-40d7-997e-25dc32cfed2a"
  struct ISBE2MediaTypeProfile
    lpVtbl : ISBE2MediaTypeProfileVTbl*
  end

  struct ISBE2FileScanVTbl
    query_interface : Proc(ISBE2FileScan*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISBE2FileScan*, UInt32)
    release : Proc(ISBE2FileScan*, UInt32)
    repair_file : Proc(ISBE2FileScan*, LibC::LPWSTR, HRESULT)
  end

  ISBE2FileScan_GUID = LibC::GUID.new("3e2bf5a5-4f96-4899-a1a3-75e8be9a5ac0")
  CLSID_ISBE2FileScan = "3e2bf5a5-4f96-4899-a1a3-75e8be9a5ac0"
  struct ISBE2FileScan
    lpVtbl : ISBE2FileScanVTbl*
  end

  struct IMpeg2TableFilterVTbl
    query_interface : Proc(IMpeg2TableFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMpeg2TableFilter*, UInt32)
    release : Proc(IMpeg2TableFilter*, UInt32)
    add_pid : Proc(IMpeg2TableFilter*, UInt16, HRESULT)
    add_table : Proc(IMpeg2TableFilter*, UInt16, UInt8, HRESULT)
    add_extension : Proc(IMpeg2TableFilter*, UInt16, UInt8, UInt16, HRESULT)
    remove_pid : Proc(IMpeg2TableFilter*, UInt16, HRESULT)
    remove_table : Proc(IMpeg2TableFilter*, UInt16, UInt8, HRESULT)
    remove_extension : Proc(IMpeg2TableFilter*, UInt16, UInt8, UInt16, HRESULT)
  end

  IMpeg2TableFilter_GUID = LibC::GUID.new("bdcdd913-9ecd-4fb2-81ae-adf747ea75a5")
  CLSID_IMpeg2TableFilter = "bdcdd913-9ecd-4fb2-81ae-adf747ea75a5"
  struct IMpeg2TableFilter
    lpVtbl : IMpeg2TableFilterVTbl*
  end

  struct IMpeg2DataVTbl
    query_interface : Proc(IMpeg2Data*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMpeg2Data*, UInt32)
    release : Proc(IMpeg2Data*, UInt32)
    get_section : Proc(IMpeg2Data*, UInt16, UInt8, MPEG2_FILTER*, UInt32, ISectionList*, HRESULT)
    get_table : Proc(IMpeg2Data*, UInt16, UInt8, MPEG2_FILTER*, UInt32, ISectionList*, HRESULT)
    get_stream_of_sections : Proc(IMpeg2Data*, UInt16, UInt8, MPEG2_FILTER*, LibC::HANDLE, IMpeg2Stream*, HRESULT)
  end

  IMpeg2Data_GUID = LibC::GUID.new("9b396d40-f380-4e3c-a514-1a82bf6ebfe6")
  CLSID_IMpeg2Data = "9b396d40-f380-4e3c-a514-1a82bf6ebfe6"
  struct IMpeg2Data
    lpVtbl : IMpeg2DataVTbl*
  end

  struct ISectionListVTbl
    query_interface : Proc(ISectionList*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISectionList*, UInt32)
    release : Proc(ISectionList*, UInt32)
    initialize : Proc(ISectionList*, MPEG_REQUEST_TYPE, IMpeg2Data, MPEG_CONTEXT*, UInt16, UInt8, MPEG2_FILTER*, UInt32, LibC::HANDLE, HRESULT)
    initialize_with_raw_sections : Proc(ISectionList*, MPEG_PACKET_LIST*, HRESULT)
    cancel_pending_request : Proc(ISectionList*, HRESULT)
    get_number_of_sections : Proc(ISectionList*, UInt16*, HRESULT)
    get_section_data : Proc(ISectionList*, UInt16, UInt32*, SECTION**, HRESULT)
    get_program_identifier : Proc(ISectionList*, UInt16*, HRESULT)
    get_table_identifier : Proc(ISectionList*, UInt8*, HRESULT)
  end

  ISectionList_GUID = LibC::GUID.new("afec1eb5-2a64-46c6-bf4b-ae3ccb6afdb0")
  CLSID_ISectionList = "afec1eb5-2a64-46c6-bf4b-ae3ccb6afdb0"
  struct ISectionList
    lpVtbl : ISectionListVTbl*
  end

  struct IMpeg2StreamVTbl
    query_interface : Proc(IMpeg2Stream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMpeg2Stream*, UInt32)
    release : Proc(IMpeg2Stream*, UInt32)
    initialize : Proc(IMpeg2Stream*, MPEG_REQUEST_TYPE, IMpeg2Data, MPEG_CONTEXT*, UInt16, UInt8, MPEG2_FILTER*, LibC::HANDLE, HRESULT)
    supply_data_buffer : Proc(IMpeg2Stream*, MPEG_STREAM_BUFFER*, HRESULT)
  end

  IMpeg2Stream_GUID = LibC::GUID.new("400cc286-32a0-4ce4-9041-39571125a635")
  CLSID_IMpeg2Stream = "400cc286-32a0-4ce4-9041-39571125a635"
  struct IMpeg2Stream
    lpVtbl : IMpeg2StreamVTbl*
  end

  struct IGenericDescriptorVTbl
    query_interface : Proc(IGenericDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGenericDescriptor*, UInt32)
    release : Proc(IGenericDescriptor*, UInt32)
    initialize : Proc(IGenericDescriptor*, UInt8*, Int32, HRESULT)
    get_tag : Proc(IGenericDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IGenericDescriptor*, UInt8*, HRESULT)
    get_body : Proc(IGenericDescriptor*, UInt8**, HRESULT)
  end

  IGenericDescriptor_GUID = LibC::GUID.new("6a5918f8-a77a-4f61-aed0-5702bdcda3e6")
  CLSID_IGenericDescriptor = "6a5918f8-a77a-4f61-aed0-5702bdcda3e6"
  struct IGenericDescriptor
    lpVtbl : IGenericDescriptorVTbl*
  end

  struct IGenericDescriptor2VTbl
    query_interface : Proc(IGenericDescriptor2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGenericDescriptor2*, UInt32)
    release : Proc(IGenericDescriptor2*, UInt32)
    initialize : Proc(IGenericDescriptor2*, UInt8*, Int32, HRESULT)
    get_tag : Proc(IGenericDescriptor2*, UInt8*, HRESULT)
    get_length : Proc(IGenericDescriptor2*, UInt8*, HRESULT)
    get_body : Proc(IGenericDescriptor2*, UInt8**, HRESULT)
    initialize2 : Proc(IGenericDescriptor2*, UInt8*, UInt16, HRESULT)
    get_length2 : Proc(IGenericDescriptor2*, UInt16*, HRESULT)
  end

  IGenericDescriptor2_GUID = LibC::GUID.new("bf02fb7e-9792-4e10-a68d-033a2cc246a5")
  CLSID_IGenericDescriptor2 = "bf02fb7e-9792-4e10-a68d-033a2cc246a5"
  struct IGenericDescriptor2
    lpVtbl : IGenericDescriptor2VTbl*
  end

  struct IPATVTbl
    query_interface : Proc(IPAT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPAT*, UInt32)
    release : Proc(IPAT*, UInt32)
    initialize : Proc(IPAT*, ISectionList, IMpeg2Data, HRESULT)
    get_transport_stream_id : Proc(IPAT*, UInt16*, HRESULT)
    get_version_number : Proc(IPAT*, UInt8*, HRESULT)
    get_count_of_records : Proc(IPAT*, UInt32*, HRESULT)
    get_record_program_number : Proc(IPAT*, UInt32, UInt16*, HRESULT)
    get_record_program_map_pid : Proc(IPAT*, UInt32, UInt16*, HRESULT)
    find_record_program_map_pid : Proc(IPAT*, UInt16, UInt16*, HRESULT)
    register_for_next_table : Proc(IPAT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IPAT*, IPAT*, HRESULT)
    register_for_when_current : Proc(IPAT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IPAT*, HRESULT)
  end

  IPAT_GUID = LibC::GUID.new("6623b511-4b5f-43c3-9a01-e8ff84188060")
  CLSID_IPAT = "6623b511-4b5f-43c3-9a01-e8ff84188060"
  struct IPAT
    lpVtbl : IPATVTbl*
  end

  struct ICATVTbl
    query_interface : Proc(ICAT*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICAT*, UInt32)
    release : Proc(ICAT*, UInt32)
    initialize : Proc(ICAT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(ICAT*, UInt8*, HRESULT)
    get_count_of_table_descriptors : Proc(ICAT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(ICAT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(ICAT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(ICAT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(ICAT*, UInt32, ICAT*, HRESULT)
    register_for_when_current : Proc(ICAT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(ICAT*, HRESULT)
  end

  ICAT_GUID = LibC::GUID.new("7c6995fb-2a31-4bd7-953e-b1ad7fb7d31c")
  CLSID_ICAT = "7c6995fb-2a31-4bd7-953e-b1ad7fb7d31c"
  struct ICAT
    lpVtbl : ICATVTbl*
  end

  struct IPMTVTbl
    query_interface : Proc(IPMT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPMT*, UInt32)
    release : Proc(IPMT*, UInt32)
    initialize : Proc(IPMT*, ISectionList, IMpeg2Data, HRESULT)
    get_program_number : Proc(IPMT*, UInt16*, HRESULT)
    get_version_number : Proc(IPMT*, UInt8*, HRESULT)
    get_pcr_pid : Proc(IPMT*, UInt16*, HRESULT)
    get_count_of_table_descriptors : Proc(IPMT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IPMT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IPMT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_count_of_records : Proc(IPMT*, UInt16*, HRESULT)
    get_record_stream_type : Proc(IPMT*, UInt32, UInt8*, HRESULT)
    get_record_elementary_pid : Proc(IPMT*, UInt32, UInt16*, HRESULT)
    get_record_count_of_descriptors : Proc(IPMT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IPMT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IPMT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    query_service_gateway_info : Proc(IPMT*, DSMCC_ELEMENT**, UInt32*, HRESULT)
    query_mpe_info : Proc(IPMT*, MPE_ELEMENT**, UInt32*, HRESULT)
    register_for_next_table : Proc(IPMT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IPMT*, IPMT*, HRESULT)
    register_for_when_current : Proc(IPMT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IPMT*, HRESULT)
  end

  IPMT_GUID = LibC::GUID.new("01f3b398-9527-4736-94db-5195878e97a8")
  CLSID_IPMT = "01f3b398-9527-4736-94db-5195878e97a8"
  struct IPMT
    lpVtbl : IPMTVTbl*
  end

  struct ITSDTVTbl
    query_interface : Proc(ITSDT*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITSDT*, UInt32)
    release : Proc(ITSDT*, UInt32)
    initialize : Proc(ITSDT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(ITSDT*, UInt8*, HRESULT)
    get_count_of_table_descriptors : Proc(ITSDT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(ITSDT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(ITSDT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(ITSDT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(ITSDT*, ITSDT*, HRESULT)
    register_for_when_current : Proc(ITSDT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(ITSDT*, HRESULT)
  end

  ITSDT_GUID = LibC::GUID.new("d19bdb43-405b-4a7c-a791-c89110c33165")
  CLSID_ITSDT = "d19bdb43-405b-4a7c-a791-c89110c33165"
  struct ITSDT
    lpVtbl : ITSDTVTbl*
  end

  struct IPSITablesVTbl
    query_interface : Proc(IPSITables*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPSITables*, UInt32)
    release : Proc(IPSITables*, UInt32)
    get_table : Proc(IPSITables*, UInt32, UInt32, UInt32, UInt32, IUnknown*, HRESULT)
  end

  IPSITables_GUID = LibC::GUID.new("919f24c5-7b14-42ac-a4b0-2ae08daf00ac")
  CLSID_IPSITables = "919f24c5-7b14-42ac-a4b0-2ae08daf00ac"
  struct IPSITables
    lpVtbl : IPSITablesVTbl*
  end

  struct IAtscPsipParserVTbl
    query_interface : Proc(IAtscPsipParser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAtscPsipParser*, UInt32)
    release : Proc(IAtscPsipParser*, UInt32)
    initialize : Proc(IAtscPsipParser*, IUnknown, HRESULT)
    get_pat : Proc(IAtscPsipParser*, IPAT*, HRESULT)
    get_cat : Proc(IAtscPsipParser*, UInt32, ICAT*, HRESULT)
    get_pmt : Proc(IAtscPsipParser*, UInt16, UInt16*, IPMT*, HRESULT)
    get_tsdt : Proc(IAtscPsipParser*, ITSDT*, HRESULT)
    get_mgt : Proc(IAtscPsipParser*, IATSC_MGT*, HRESULT)
    get_vct : Proc(IAtscPsipParser*, UInt8, LibC::BOOL, IATSC_VCT*, HRESULT)
    get_eit : Proc(IAtscPsipParser*, UInt16, UInt16*, UInt32, IATSC_EIT*, HRESULT)
    get_ett : Proc(IAtscPsipParser*, UInt16, UInt16*, UInt16*, IATSC_ETT*, HRESULT)
    get_stt : Proc(IAtscPsipParser*, IATSC_STT*, HRESULT)
    get_eas : Proc(IAtscPsipParser*, UInt16, ISCTE_EAS*, HRESULT)
  end

  IAtscPsipParser_GUID = LibC::GUID.new("b2c98995-5eb2-4fb1-b406-f3e8e2026a9a")
  CLSID_IAtscPsipParser = "b2c98995-5eb2-4fb1-b406-f3e8e2026a9a"
  struct IAtscPsipParser
    lpVtbl : IAtscPsipParserVTbl*
  end

  struct IATSC_MGTVTbl
    query_interface : Proc(IATSC_MGT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSC_MGT*, UInt32)
    release : Proc(IATSC_MGT*, UInt32)
    initialize : Proc(IATSC_MGT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IATSC_MGT*, UInt8*, HRESULT)
    get_protocol_version : Proc(IATSC_MGT*, UInt8*, HRESULT)
    get_count_of_records : Proc(IATSC_MGT*, UInt32*, HRESULT)
    get_record_type : Proc(IATSC_MGT*, UInt32, UInt16*, HRESULT)
    get_record_type_pid : Proc(IATSC_MGT*, UInt32, UInt16*, HRESULT)
    get_record_version_number : Proc(IATSC_MGT*, UInt32, UInt8*, HRESULT)
    get_record_count_of_descriptors : Proc(IATSC_MGT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IATSC_MGT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IATSC_MGT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_count_of_table_descriptors : Proc(IATSC_MGT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IATSC_MGT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IATSC_MGT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
  end

  IATSC_MGT_GUID = LibC::GUID.new("8877dabd-c137-4073-97e3-779407a5d87a")
  CLSID_IATSC_MGT = "8877dabd-c137-4073-97e3-779407a5d87a"
  struct IATSC_MGT
    lpVtbl : IATSC_MGTVTbl*
  end

  struct IATSC_VCTVTbl
    query_interface : Proc(IATSC_VCT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSC_VCT*, UInt32)
    release : Proc(IATSC_VCT*, UInt32)
    initialize : Proc(IATSC_VCT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IATSC_VCT*, UInt8*, HRESULT)
    get_transport_stream_id : Proc(IATSC_VCT*, UInt16*, HRESULT)
    get_protocol_version : Proc(IATSC_VCT*, UInt8*, HRESULT)
    get_count_of_records : Proc(IATSC_VCT*, UInt32*, HRESULT)
    get_record_name : Proc(IATSC_VCT*, UInt32, LibC::LPWSTR*, HRESULT)
    get_record_major_channel_number : Proc(IATSC_VCT*, UInt32, UInt16*, HRESULT)
    get_record_minor_channel_number : Proc(IATSC_VCT*, UInt32, UInt16*, HRESULT)
    get_record_modulation_mode : Proc(IATSC_VCT*, UInt32, UInt8*, HRESULT)
    get_record_carrier_frequency : Proc(IATSC_VCT*, UInt32, UInt32*, HRESULT)
    get_record_transport_stream_id : Proc(IATSC_VCT*, UInt32, UInt16*, HRESULT)
    get_record_program_number : Proc(IATSC_VCT*, UInt32, UInt16*, HRESULT)
    get_record_etm_location : Proc(IATSC_VCT*, UInt32, UInt8*, HRESULT)
    get_record_is_access_controlled_bit_set : Proc(IATSC_VCT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_is_hidden_bit_set : Proc(IATSC_VCT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_is_path_select_bit_set : Proc(IATSC_VCT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_is_out_of_band_bit_set : Proc(IATSC_VCT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_is_hide_guide_bit_set : Proc(IATSC_VCT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_service_type : Proc(IATSC_VCT*, UInt32, UInt8*, HRESULT)
    get_record_source_id : Proc(IATSC_VCT*, UInt32, UInt16*, HRESULT)
    get_record_count_of_descriptors : Proc(IATSC_VCT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IATSC_VCT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IATSC_VCT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_count_of_table_descriptors : Proc(IATSC_VCT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IATSC_VCT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IATSC_VCT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
  end

  IATSC_VCT_GUID = LibC::GUID.new("26879a18-32f9-46c6-91f0-fb6479270e8c")
  CLSID_IATSC_VCT = "26879a18-32f9-46c6-91f0-fb6479270e8c"
  struct IATSC_VCT
    lpVtbl : IATSC_VCTVTbl*
  end

  struct IATSC_EITVTbl
    query_interface : Proc(IATSC_EIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSC_EIT*, UInt32)
    release : Proc(IATSC_EIT*, UInt32)
    initialize : Proc(IATSC_EIT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IATSC_EIT*, UInt8*, HRESULT)
    get_source_id : Proc(IATSC_EIT*, UInt16*, HRESULT)
    get_protocol_version : Proc(IATSC_EIT*, UInt8*, HRESULT)
    get_count_of_records : Proc(IATSC_EIT*, UInt32*, HRESULT)
    get_record_event_id : Proc(IATSC_EIT*, UInt32, UInt16*, HRESULT)
    get_record_start_time : Proc(IATSC_EIT*, UInt32, MPEG_DATE_AND_TIME*, HRESULT)
    get_record_etm_location : Proc(IATSC_EIT*, UInt32, UInt8*, HRESULT)
    get_record_duration : Proc(IATSC_EIT*, UInt32, MPEG_TIME*, HRESULT)
    get_record_title_text : Proc(IATSC_EIT*, UInt32, UInt32*, UInt8**, HRESULT)
    get_record_count_of_descriptors : Proc(IATSC_EIT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IATSC_EIT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IATSC_EIT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
  end

  IATSC_EIT_GUID = LibC::GUID.new("d7c212d7-76a2-4b4b-aa56-846879a80096")
  CLSID_IATSC_EIT = "d7c212d7-76a2-4b4b-aa56-846879a80096"
  struct IATSC_EIT
    lpVtbl : IATSC_EITVTbl*
  end

  struct IATSC_ETTVTbl
    query_interface : Proc(IATSC_ETT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSC_ETT*, UInt32)
    release : Proc(IATSC_ETT*, UInt32)
    initialize : Proc(IATSC_ETT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IATSC_ETT*, UInt8*, HRESULT)
    get_protocol_version : Proc(IATSC_ETT*, UInt8*, HRESULT)
    get_etm_id : Proc(IATSC_ETT*, UInt32*, HRESULT)
    get_extended_message_text : Proc(IATSC_ETT*, UInt32*, UInt8**, HRESULT)
  end

  IATSC_ETT_GUID = LibC::GUID.new("5a142cc9-b8cf-4a86-a040-e9cadf3ef3e7")
  CLSID_IATSC_ETT = "5a142cc9-b8cf-4a86-a040-e9cadf3ef3e7"
  struct IATSC_ETT
    lpVtbl : IATSC_ETTVTbl*
  end

  struct IATSC_STTVTbl
    query_interface : Proc(IATSC_STT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IATSC_STT*, UInt32)
    release : Proc(IATSC_STT*, UInt32)
    initialize : Proc(IATSC_STT*, ISectionList, IMpeg2Data, HRESULT)
    get_protocol_version : Proc(IATSC_STT*, UInt8*, HRESULT)
    get_system_time : Proc(IATSC_STT*, MPEG_DATE_AND_TIME*, HRESULT)
    get_gps_utc_offset : Proc(IATSC_STT*, UInt8*, HRESULT)
    get_daylight_savings : Proc(IATSC_STT*, UInt16*, HRESULT)
    get_count_of_table_descriptors : Proc(IATSC_STT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IATSC_STT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IATSC_STT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
  end

  IATSC_STT_GUID = LibC::GUID.new("6bf42423-217d-4d6f-81e1-3a7b360ec896")
  CLSID_IATSC_STT = "6bf42423-217d-4d6f-81e1-3a7b360ec896"
  struct IATSC_STT
    lpVtbl : IATSC_STTVTbl*
  end

  struct ISCTE_EASVTbl
    query_interface : Proc(ISCTE_EAS*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISCTE_EAS*, UInt32)
    release : Proc(ISCTE_EAS*, UInt32)
    initialize : Proc(ISCTE_EAS*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_sequency_number : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_protocol_version : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_eas_event_id : Proc(ISCTE_EAS*, UInt16*, HRESULT)
    get_originator_code : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_eas_event_code_len : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_eas_event_code : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_raw_nature_of_activation_text_len : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_raw_nature_of_activation_text : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_nature_of_activation_text : Proc(ISCTE_EAS*, UInt8*, UInt8**, HRESULT)
    get_time_remaining : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_start_time : Proc(ISCTE_EAS*, UInt32*, HRESULT)
    get_duration : Proc(ISCTE_EAS*, UInt16*, HRESULT)
    get_alert_priority : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_details_oob_source_id : Proc(ISCTE_EAS*, UInt16*, HRESULT)
    get_details_major : Proc(ISCTE_EAS*, UInt16*, HRESULT)
    get_details_minor : Proc(ISCTE_EAS*, UInt16*, HRESULT)
    get_details_audio_oob_source_id : Proc(ISCTE_EAS*, UInt16*, HRESULT)
    get_alert_text : Proc(ISCTE_EAS*, UInt8*, UInt8**, HRESULT)
    get_raw_alert_text_len : Proc(ISCTE_EAS*, UInt16*, HRESULT)
    get_raw_alert_text : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_location_count : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_location_codes : Proc(ISCTE_EAS*, UInt8, UInt8*, UInt8*, UInt16*, HRESULT)
    get_exception_count : Proc(ISCTE_EAS*, UInt8*, HRESULT)
    get_exception_service : Proc(ISCTE_EAS*, UInt8, UInt8*, UInt16*, UInt16*, HRESULT)
    get_count_of_table_descriptors : Proc(ISCTE_EAS*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(ISCTE_EAS*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(ISCTE_EAS*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
  end

  ISCTE_EAS_GUID = LibC::GUID.new("1ff544d6-161d-4fae-9faa-4f9f492ae999")
  CLSID_ISCTE_EAS = "1ff544d6-161d-4fae-9faa-4f9f492ae999"
  struct ISCTE_EAS
    lpVtbl : ISCTE_EASVTbl*
  end

  struct IAtscContentAdvisoryDescriptorVTbl
    query_interface : Proc(IAtscContentAdvisoryDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAtscContentAdvisoryDescriptor*, UInt32)
    release : Proc(IAtscContentAdvisoryDescriptor*, UInt32)
    get_tag : Proc(IAtscContentAdvisoryDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IAtscContentAdvisoryDescriptor*, UInt8*, HRESULT)
    get_rating_region_count : Proc(IAtscContentAdvisoryDescriptor*, UInt8*, HRESULT)
    get_record_rating_region : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_rated_dimensions : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_rating_dimension : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8, UInt8*, HRESULT)
    get_record_rating_value : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8, UInt8*, HRESULT)
    get_record_rating_description_text : Proc(IAtscContentAdvisoryDescriptor*, UInt8, UInt8*, UInt8**, HRESULT)
  end

  IAtscContentAdvisoryDescriptor_GUID = LibC::GUID.new("ff76e60c-0283-43ea-ba32-b422238547ee")
  CLSID_IAtscContentAdvisoryDescriptor = "ff76e60c-0283-43ea-ba32-b422238547ee"
  struct IAtscContentAdvisoryDescriptor
    lpVtbl : IAtscContentAdvisoryDescriptorVTbl*
  end

  struct ICaptionServiceDescriptorVTbl
    query_interface : Proc(ICaptionServiceDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(ICaptionServiceDescriptor*, UInt32)
    release : Proc(ICaptionServiceDescriptor*, UInt32)
    get_number_of_services : Proc(ICaptionServiceDescriptor*, UInt8*, HRESULT)
    get_language_code : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, HRESULT)
    get_caption_service_number : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, HRESULT)
    get_cc_type : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, HRESULT)
    get_easy_reader : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, HRESULT)
    get_wide_aspect_ratio : Proc(ICaptionServiceDescriptor*, UInt8, UInt8*, HRESULT)
  end

  ICaptionServiceDescriptor_GUID = LibC::GUID.new("40834007-6834-46f0-bd45-d5f6a6be258c")
  CLSID_ICaptionServiceDescriptor = "40834007-6834-46f0-bd45-d5f6a6be258c"
  struct ICaptionServiceDescriptor
    lpVtbl : ICaptionServiceDescriptorVTbl*
  end

  struct IServiceLocationDescriptorVTbl
    query_interface : Proc(IServiceLocationDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IServiceLocationDescriptor*, UInt32)
    release : Proc(IServiceLocationDescriptor*, UInt32)
    get_pcr_pid : Proc(IServiceLocationDescriptor*, UInt16*, HRESULT)
    get_number_of_elements : Proc(IServiceLocationDescriptor*, UInt8*, HRESULT)
    get_element_stream_type : Proc(IServiceLocationDescriptor*, UInt8, UInt8*, HRESULT)
    get_element_pid : Proc(IServiceLocationDescriptor*, UInt8, UInt16*, HRESULT)
    get_element_language_code : Proc(IServiceLocationDescriptor*, UInt8, UInt8*, HRESULT)
  end

  IServiceLocationDescriptor_GUID = LibC::GUID.new("58c3c827-9d91-4215-bff3-820a49f0904c")
  CLSID_IServiceLocationDescriptor = "58c3c827-9d91-4215-bff3-820a49f0904c"
  struct IServiceLocationDescriptor
    lpVtbl : IServiceLocationDescriptorVTbl*
  end

  struct IAttributeSetVTbl
    query_interface : Proc(IAttributeSet*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAttributeSet*, UInt32)
    release : Proc(IAttributeSet*, UInt32)
    set_attrib : Proc(IAttributeSet*, Guid, UInt8*, UInt32, HRESULT)
  end

  IAttributeSet_GUID = LibC::GUID.new("583ec3cc-4960-4857-982b-41a33ea0a006")
  CLSID_IAttributeSet = "583ec3cc-4960-4857-982b-41a33ea0a006"
  struct IAttributeSet
    lpVtbl : IAttributeSetVTbl*
  end

  struct IAttributeGetVTbl
    query_interface : Proc(IAttributeGet*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAttributeGet*, UInt32)
    release : Proc(IAttributeGet*, UInt32)
    get_count : Proc(IAttributeGet*, Int32*, HRESULT)
    get_attrib_indexed : Proc(IAttributeGet*, Int32, Guid*, UInt8*, UInt32*, HRESULT)
    get_attrib : Proc(IAttributeGet*, Guid, UInt8*, UInt32*, HRESULT)
  end

  IAttributeGet_GUID = LibC::GUID.new("52dbd1ec-e48f-4528-9232-f442a68f0ae1")
  CLSID_IAttributeGet = "52dbd1ec-e48f-4528-9232-f442a68f0ae1"
  struct IAttributeGet
    lpVtbl : IAttributeGetVTbl*
  end

  struct IDvbSiParserVTbl
    query_interface : Proc(IDvbSiParser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbSiParser*, UInt32)
    release : Proc(IDvbSiParser*, UInt32)
    initialize : Proc(IDvbSiParser*, IUnknown, HRESULT)
    get_pat : Proc(IDvbSiParser*, IPAT*, HRESULT)
    get_cat : Proc(IDvbSiParser*, UInt32, ICAT*, HRESULT)
    get_pmt : Proc(IDvbSiParser*, UInt16, UInt16*, IPMT*, HRESULT)
    get_tsdt : Proc(IDvbSiParser*, ITSDT*, HRESULT)
    get_nit : Proc(IDvbSiParser*, UInt8, UInt16*, IDVB_NIT*, HRESULT)
    get_sdt : Proc(IDvbSiParser*, UInt8, UInt16*, IDVB_SDT*, HRESULT)
    get_eit : Proc(IDvbSiParser*, UInt8, UInt16*, IDVB_EIT*, HRESULT)
    get_bat : Proc(IDvbSiParser*, UInt16*, IDVB_BAT*, HRESULT)
    get_rst : Proc(IDvbSiParser*, UInt32, IDVB_RST*, HRESULT)
    get_st : Proc(IDvbSiParser*, UInt16, UInt32, IDVB_ST*, HRESULT)
    get_tdt : Proc(IDvbSiParser*, IDVB_TDT*, HRESULT)
    get_tot : Proc(IDvbSiParser*, IDVB_TOT*, HRESULT)
    get_dit : Proc(IDvbSiParser*, UInt32, IDVB_DIT*, HRESULT)
    get_sit : Proc(IDvbSiParser*, UInt32, IDVB_SIT*, HRESULT)
  end

  IDvbSiParser_GUID = LibC::GUID.new("b758a7bd-14dc-449d-b828-35909acb3b1e")
  CLSID_IDvbSiParser = "b758a7bd-14dc-449d-b828-35909acb3b1e"
  struct IDvbSiParser
    lpVtbl : IDvbSiParserVTbl*
  end

  struct IDvbSiParser2VTbl
    query_interface : Proc(IDvbSiParser2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbSiParser2*, UInt32)
    release : Proc(IDvbSiParser2*, UInt32)
    initialize : Proc(IDvbSiParser2*, IUnknown, HRESULT)
    get_pat : Proc(IDvbSiParser2*, IPAT*, HRESULT)
    get_cat : Proc(IDvbSiParser2*, UInt32, ICAT*, HRESULT)
    get_pmt : Proc(IDvbSiParser2*, UInt16, UInt16*, IPMT*, HRESULT)
    get_tsdt : Proc(IDvbSiParser2*, ITSDT*, HRESULT)
    get_nit : Proc(IDvbSiParser2*, UInt8, UInt16*, IDVB_NIT*, HRESULT)
    get_sdt : Proc(IDvbSiParser2*, UInt8, UInt16*, IDVB_SDT*, HRESULT)
    get_eit : Proc(IDvbSiParser2*, UInt8, UInt16*, IDVB_EIT*, HRESULT)
    get_bat : Proc(IDvbSiParser2*, UInt16*, IDVB_BAT*, HRESULT)
    get_rst : Proc(IDvbSiParser2*, UInt32, IDVB_RST*, HRESULT)
    get_st : Proc(IDvbSiParser2*, UInt16, UInt32, IDVB_ST*, HRESULT)
    get_tdt : Proc(IDvbSiParser2*, IDVB_TDT*, HRESULT)
    get_tot : Proc(IDvbSiParser2*, IDVB_TOT*, HRESULT)
    get_dit : Proc(IDvbSiParser2*, UInt32, IDVB_DIT*, HRESULT)
    get_sit : Proc(IDvbSiParser2*, UInt32, IDVB_SIT*, HRESULT)
    get_eit2 : Proc(IDvbSiParser2*, UInt8, UInt16*, UInt8*, IDVB_EIT2*, HRESULT)
  end

  IDvbSiParser2_GUID = LibC::GUID.new("0ac5525f-f816-42f4-93ba-4c0f32f46e54")
  CLSID_IDvbSiParser2 = "0ac5525f-f816-42f4-93ba-4c0f32f46e54"
  struct IDvbSiParser2
    lpVtbl : IDvbSiParser2VTbl*
  end

  struct IIsdbSiParser2VTbl
    query_interface : Proc(IIsdbSiParser2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbSiParser2*, UInt32)
    release : Proc(IIsdbSiParser2*, UInt32)
    initialize : Proc(IIsdbSiParser2*, IUnknown, HRESULT)
    get_pat : Proc(IIsdbSiParser2*, IPAT*, HRESULT)
    get_cat : Proc(IIsdbSiParser2*, UInt32, ICAT*, HRESULT)
    get_pmt : Proc(IIsdbSiParser2*, UInt16, UInt16*, IPMT*, HRESULT)
    get_tsdt : Proc(IIsdbSiParser2*, ITSDT*, HRESULT)
    get_nit : Proc(IIsdbSiParser2*, UInt8, UInt16*, IDVB_NIT*, HRESULT)
    get_sdt : Proc(IIsdbSiParser2*, UInt8, UInt16*, IDVB_SDT*, HRESULT)
    get_eit : Proc(IIsdbSiParser2*, UInt8, UInt16*, IDVB_EIT*, HRESULT)
    get_bat : Proc(IIsdbSiParser2*, UInt16*, IDVB_BAT*, HRESULT)
    get_rst : Proc(IIsdbSiParser2*, UInt32, IDVB_RST*, HRESULT)
    get_st : Proc(IIsdbSiParser2*, UInt16, UInt32, IDVB_ST*, HRESULT)
    get_tdt : Proc(IIsdbSiParser2*, IDVB_TDT*, HRESULT)
    get_tot : Proc(IIsdbSiParser2*, IDVB_TOT*, HRESULT)
    get_dit : Proc(IIsdbSiParser2*, UInt32, IDVB_DIT*, HRESULT)
    get_sit : Proc(IIsdbSiParser2*, UInt32, IDVB_SIT*, HRESULT)
    get_eit2 : Proc(IIsdbSiParser2*, UInt8, UInt16*, UInt8*, IDVB_EIT2*, HRESULT)
    get_sdt2 : Proc(IIsdbSiParser2*, UInt8, UInt16*, IISDB_SDT*, HRESULT)
    get_bit : Proc(IIsdbSiParser2*, UInt8, UInt16*, IISDB_BIT*, HRESULT)
    get_nbit : Proc(IIsdbSiParser2*, UInt8, UInt16*, IISDB_NBIT*, HRESULT)
    get_ldt : Proc(IIsdbSiParser2*, UInt8, UInt16*, IISDB_LDT*, HRESULT)
    get_sdtt : Proc(IIsdbSiParser2*, UInt8, UInt16*, IISDB_SDTT*, HRESULT)
    get_cdt : Proc(IIsdbSiParser2*, UInt8, UInt8, UInt16*, IISDB_CDT*, HRESULT)
    get_emm : Proc(IIsdbSiParser2*, UInt16, UInt16, IISDB_EMM*, HRESULT)
  end

  IIsdbSiParser2_GUID = LibC::GUID.new("900e4bb7-18cd-453f-98be-3be6aa211772")
  CLSID_IIsdbSiParser2 = "900e4bb7-18cd-453f-98be-3be6aa211772"
  struct IIsdbSiParser2
    lpVtbl : IIsdbSiParser2VTbl*
  end

  struct IDVB_NITVTbl
    query_interface : Proc(IDVB_NIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_NIT*, UInt32)
    release : Proc(IDVB_NIT*, UInt32)
    initialize : Proc(IDVB_NIT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IDVB_NIT*, UInt8*, HRESULT)
    get_network_id : Proc(IDVB_NIT*, UInt16*, HRESULT)
    get_count_of_table_descriptors : Proc(IDVB_NIT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IDVB_NIT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IDVB_NIT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_count_of_records : Proc(IDVB_NIT*, UInt32*, HRESULT)
    get_record_transport_stream_id : Proc(IDVB_NIT*, UInt32, UInt16*, HRESULT)
    get_record_original_network_id : Proc(IDVB_NIT*, UInt32, UInt16*, HRESULT)
    get_record_count_of_descriptors : Proc(IDVB_NIT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IDVB_NIT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IDVB_NIT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(IDVB_NIT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IDVB_NIT*, IDVB_NIT*, HRESULT)
    register_for_when_current : Proc(IDVB_NIT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IDVB_NIT*, HRESULT)
    get_version_hash : Proc(IDVB_NIT*, UInt32*, HRESULT)
  end

  IDVB_NIT_GUID = LibC::GUID.new("c64935f4-29e4-4e22-911a-63f7f55cb097")
  CLSID_IDVB_NIT = "c64935f4-29e4-4e22-911a-63f7f55cb097"
  struct IDVB_NIT
    lpVtbl : IDVB_NITVTbl*
  end

  struct IDVB_SDTVTbl
    query_interface : Proc(IDVB_SDT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_SDT*, UInt32)
    release : Proc(IDVB_SDT*, UInt32)
    initialize : Proc(IDVB_SDT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IDVB_SDT*, UInt8*, HRESULT)
    get_transport_stream_id : Proc(IDVB_SDT*, UInt16*, HRESULT)
    get_original_network_id : Proc(IDVB_SDT*, UInt16*, HRESULT)
    get_count_of_records : Proc(IDVB_SDT*, UInt32*, HRESULT)
    get_record_service_id : Proc(IDVB_SDT*, UInt32, UInt16*, HRESULT)
    get_record_eit_schedule_flag : Proc(IDVB_SDT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_eit_present_following_flag : Proc(IDVB_SDT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_running_status : Proc(IDVB_SDT*, UInt32, UInt8*, HRESULT)
    get_record_free_ca_mode : Proc(IDVB_SDT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_count_of_descriptors : Proc(IDVB_SDT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IDVB_SDT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IDVB_SDT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(IDVB_SDT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IDVB_SDT*, IDVB_SDT*, HRESULT)
    register_for_when_current : Proc(IDVB_SDT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IDVB_SDT*, HRESULT)
    get_version_hash : Proc(IDVB_SDT*, UInt32*, HRESULT)
  end

  IDVB_SDT_GUID = LibC::GUID.new("02cad8d3-fe43-48e2-90bd-450ed9a8a5fd")
  CLSID_IDVB_SDT = "02cad8d3-fe43-48e2-90bd-450ed9a8a5fd"
  struct IDVB_SDT
    lpVtbl : IDVB_SDTVTbl*
  end

  struct IISDB_SDTVTbl
    query_interface : Proc(IISDB_SDT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDB_SDT*, UInt32)
    release : Proc(IISDB_SDT*, UInt32)
    initialize : Proc(IISDB_SDT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IISDB_SDT*, UInt8*, HRESULT)
    get_transport_stream_id : Proc(IISDB_SDT*, UInt16*, HRESULT)
    get_original_network_id : Proc(IISDB_SDT*, UInt16*, HRESULT)
    get_count_of_records : Proc(IISDB_SDT*, UInt32*, HRESULT)
    get_record_service_id : Proc(IISDB_SDT*, UInt32, UInt16*, HRESULT)
    get_record_eit_schedule_flag : Proc(IISDB_SDT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_eit_present_following_flag : Proc(IISDB_SDT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_running_status : Proc(IISDB_SDT*, UInt32, UInt8*, HRESULT)
    get_record_free_ca_mode : Proc(IISDB_SDT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_count_of_descriptors : Proc(IISDB_SDT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IISDB_SDT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IISDB_SDT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(IISDB_SDT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IISDB_SDT*, IDVB_SDT*, HRESULT)
    register_for_when_current : Proc(IISDB_SDT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IISDB_SDT*, HRESULT)
    get_version_hash : Proc(IISDB_SDT*, UInt32*, HRESULT)
    get_record_eit_user_defined_flags : Proc(IISDB_SDT*, UInt32, UInt8*, HRESULT)
  end

  IISDB_SDT_GUID = LibC::GUID.new("3f3dc9a2-bb32-4fb9-ae9e-d856848927a3")
  CLSID_IISDB_SDT = "3f3dc9a2-bb32-4fb9-ae9e-d856848927a3"
  struct IISDB_SDT
    lpVtbl : IISDB_SDTVTbl*
  end

  struct IDVB_EITVTbl
    query_interface : Proc(IDVB_EIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_EIT*, UInt32)
    release : Proc(IDVB_EIT*, UInt32)
    initialize : Proc(IDVB_EIT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IDVB_EIT*, UInt8*, HRESULT)
    get_service_id : Proc(IDVB_EIT*, UInt16*, HRESULT)
    get_transport_stream_id : Proc(IDVB_EIT*, UInt16*, HRESULT)
    get_original_network_id : Proc(IDVB_EIT*, UInt16*, HRESULT)
    get_segment_last_section_number : Proc(IDVB_EIT*, UInt8*, HRESULT)
    get_last_table_id : Proc(IDVB_EIT*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDVB_EIT*, UInt32*, HRESULT)
    get_record_event_id : Proc(IDVB_EIT*, UInt32, UInt16*, HRESULT)
    get_record_start_time : Proc(IDVB_EIT*, UInt32, MPEG_DATE_AND_TIME*, HRESULT)
    get_record_duration : Proc(IDVB_EIT*, UInt32, MPEG_TIME*, HRESULT)
    get_record_running_status : Proc(IDVB_EIT*, UInt32, UInt8*, HRESULT)
    get_record_free_ca_mode : Proc(IDVB_EIT*, UInt32, LibC::BOOL*, HRESULT)
    get_record_count_of_descriptors : Proc(IDVB_EIT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IDVB_EIT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IDVB_EIT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(IDVB_EIT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IDVB_EIT*, IDVB_EIT*, HRESULT)
    register_for_when_current : Proc(IDVB_EIT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IDVB_EIT*, HRESULT)
    get_version_hash : Proc(IDVB_EIT*, UInt32*, HRESULT)
  end

  IDVB_EIT_GUID = LibC::GUID.new("442db029-02cb-4495-8b92-1c13375bce99")
  CLSID_IDVB_EIT = "442db029-02cb-4495-8b92-1c13375bce99"
  struct IDVB_EIT
    lpVtbl : IDVB_EITVTbl*
  end

  struct IDVB_EIT2VTbl
    query_interface : Proc(IDVB_EIT2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_EIT2*, UInt32)
    release : Proc(IDVB_EIT2*, UInt32)
    initialize : Proc(IDVB_EIT2*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IDVB_EIT2*, UInt8*, HRESULT)
    get_service_id : Proc(IDVB_EIT2*, UInt16*, HRESULT)
    get_transport_stream_id : Proc(IDVB_EIT2*, UInt16*, HRESULT)
    get_original_network_id : Proc(IDVB_EIT2*, UInt16*, HRESULT)
    get_segment_last_section_number : Proc(IDVB_EIT2*, UInt8*, HRESULT)
    get_last_table_id : Proc(IDVB_EIT2*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDVB_EIT2*, UInt32*, HRESULT)
    get_record_event_id : Proc(IDVB_EIT2*, UInt32, UInt16*, HRESULT)
    get_record_start_time : Proc(IDVB_EIT2*, UInt32, MPEG_DATE_AND_TIME*, HRESULT)
    get_record_duration : Proc(IDVB_EIT2*, UInt32, MPEG_TIME*, HRESULT)
    get_record_running_status : Proc(IDVB_EIT2*, UInt32, UInt8*, HRESULT)
    get_record_free_ca_mode : Proc(IDVB_EIT2*, UInt32, LibC::BOOL*, HRESULT)
    get_record_count_of_descriptors : Proc(IDVB_EIT2*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IDVB_EIT2*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IDVB_EIT2*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(IDVB_EIT2*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IDVB_EIT2*, IDVB_EIT*, HRESULT)
    register_for_when_current : Proc(IDVB_EIT2*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IDVB_EIT2*, HRESULT)
    get_version_hash : Proc(IDVB_EIT2*, UInt32*, HRESULT)
    get_segment_info : Proc(IDVB_EIT2*, UInt8*, UInt8*, HRESULT)
    get_record_section : Proc(IDVB_EIT2*, UInt32, UInt8*, HRESULT)
  end

  IDVB_EIT2_GUID = LibC::GUID.new("61a389e0-9b9e-4ba0-aeea-5ddd159820ea")
  CLSID_IDVB_EIT2 = "61a389e0-9b9e-4ba0-aeea-5ddd159820ea"
  struct IDVB_EIT2
    lpVtbl : IDVB_EIT2VTbl*
  end

  struct IDVB_BATVTbl
    query_interface : Proc(IDVB_BAT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_BAT*, UInt32)
    release : Proc(IDVB_BAT*, UInt32)
    initialize : Proc(IDVB_BAT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IDVB_BAT*, UInt8*, HRESULT)
    get_bouquet_id : Proc(IDVB_BAT*, UInt16*, HRESULT)
    get_count_of_table_descriptors : Proc(IDVB_BAT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IDVB_BAT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IDVB_BAT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_count_of_records : Proc(IDVB_BAT*, UInt32*, HRESULT)
    get_record_transport_stream_id : Proc(IDVB_BAT*, UInt32, UInt16*, HRESULT)
    get_record_original_network_id : Proc(IDVB_BAT*, UInt32, UInt16*, HRESULT)
    get_record_count_of_descriptors : Proc(IDVB_BAT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IDVB_BAT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IDVB_BAT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(IDVB_BAT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IDVB_BAT*, IDVB_BAT*, HRESULT)
    register_for_when_current : Proc(IDVB_BAT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IDVB_BAT*, HRESULT)
  end

  IDVB_BAT_GUID = LibC::GUID.new("ece9bb0c-43b6-4558-a0ec-1812c34cd6ca")
  CLSID_IDVB_BAT = "ece9bb0c-43b6-4558-a0ec-1812c34cd6ca"
  struct IDVB_BAT
    lpVtbl : IDVB_BATVTbl*
  end

  struct IDVB_RSTVTbl
    query_interface : Proc(IDVB_RST*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_RST*, UInt32)
    release : Proc(IDVB_RST*, UInt32)
    initialize : Proc(IDVB_RST*, ISectionList, HRESULT)
    get_count_of_records : Proc(IDVB_RST*, UInt32*, HRESULT)
    get_record_transport_stream_id : Proc(IDVB_RST*, UInt32, UInt16*, HRESULT)
    get_record_original_network_id : Proc(IDVB_RST*, UInt32, UInt16*, HRESULT)
    get_record_service_id : Proc(IDVB_RST*, UInt32, UInt16*, HRESULT)
    get_record_event_id : Proc(IDVB_RST*, UInt32, UInt16*, HRESULT)
    get_record_running_status : Proc(IDVB_RST*, UInt32, UInt8*, HRESULT)
  end

  IDVB_RST_GUID = LibC::GUID.new("f47dcd04-1e23-4fb7-9f96-b40eead10b2b")
  CLSID_IDVB_RST = "f47dcd04-1e23-4fb7-9f96-b40eead10b2b"
  struct IDVB_RST
    lpVtbl : IDVB_RSTVTbl*
  end

  struct IDVB_STVTbl
    query_interface : Proc(IDVB_ST*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_ST*, UInt32)
    release : Proc(IDVB_ST*, UInt32)
    initialize : Proc(IDVB_ST*, ISectionList, HRESULT)
    get_data_length : Proc(IDVB_ST*, UInt16*, HRESULT)
    get_data : Proc(IDVB_ST*, UInt8**, HRESULT)
  end

  IDVB_ST_GUID = LibC::GUID.new("4d5b9f23-2a02-45de-bcda-5d5dbfbfbe62")
  CLSID_IDVB_ST = "4d5b9f23-2a02-45de-bcda-5d5dbfbfbe62"
  struct IDVB_ST
    lpVtbl : IDVB_STVTbl*
  end

  struct IDVB_TDTVTbl
    query_interface : Proc(IDVB_TDT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_TDT*, UInt32)
    release : Proc(IDVB_TDT*, UInt32)
    initialize : Proc(IDVB_TDT*, ISectionList, HRESULT)
    get_utc_time : Proc(IDVB_TDT*, MPEG_DATE_AND_TIME*, HRESULT)
  end

  IDVB_TDT_GUID = LibC::GUID.new("0780dc7d-d55c-4aef-97e6-6b75906e2796")
  CLSID_IDVB_TDT = "0780dc7d-d55c-4aef-97e6-6b75906e2796"
  struct IDVB_TDT
    lpVtbl : IDVB_TDTVTbl*
  end

  struct IDVB_TOTVTbl
    query_interface : Proc(IDVB_TOT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_TOT*, UInt32)
    release : Proc(IDVB_TOT*, UInt32)
    initialize : Proc(IDVB_TOT*, ISectionList, HRESULT)
    get_utc_time : Proc(IDVB_TOT*, MPEG_DATE_AND_TIME*, HRESULT)
    get_count_of_table_descriptors : Proc(IDVB_TOT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IDVB_TOT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IDVB_TOT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
  end

  IDVB_TOT_GUID = LibC::GUID.new("83295d6a-faba-4ee1-9b15-8067696910ae")
  CLSID_IDVB_TOT = "83295d6a-faba-4ee1-9b15-8067696910ae"
  struct IDVB_TOT
    lpVtbl : IDVB_TOTVTbl*
  end

  struct IDVB_DITVTbl
    query_interface : Proc(IDVB_DIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_DIT*, UInt32)
    release : Proc(IDVB_DIT*, UInt32)
    initialize : Proc(IDVB_DIT*, ISectionList, HRESULT)
    get_transition_flag : Proc(IDVB_DIT*, LibC::BOOL*, HRESULT)
  end

  IDVB_DIT_GUID = LibC::GUID.new("91bffdf9-9432-410f-86ef-1c228ed0ad70")
  CLSID_IDVB_DIT = "91bffdf9-9432-410f-86ef-1c228ed0ad70"
  struct IDVB_DIT
    lpVtbl : IDVB_DITVTbl*
  end

  struct IDVB_SITVTbl
    query_interface : Proc(IDVB_SIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDVB_SIT*, UInt32)
    release : Proc(IDVB_SIT*, UInt32)
    initialize : Proc(IDVB_SIT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IDVB_SIT*, UInt8*, HRESULT)
    get_count_of_table_descriptors : Proc(IDVB_SIT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IDVB_SIT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IDVB_SIT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_count_of_records : Proc(IDVB_SIT*, UInt32*, HRESULT)
    get_record_service_id : Proc(IDVB_SIT*, UInt32, UInt16*, HRESULT)
    get_record_running_status : Proc(IDVB_SIT*, UInt32, UInt8*, HRESULT)
    get_record_count_of_descriptors : Proc(IDVB_SIT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IDVB_SIT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IDVB_SIT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    register_for_next_table : Proc(IDVB_SIT*, LibC::HANDLE, HRESULT)
    get_next_table : Proc(IDVB_SIT*, UInt32, IDVB_SIT*, HRESULT)
    register_for_when_current : Proc(IDVB_SIT*, LibC::HANDLE, HRESULT)
    convert_next_to_current : Proc(IDVB_SIT*, HRESULT)
  end

  IDVB_SIT_GUID = LibC::GUID.new("68cdce53-8bea-45c2-9d9d-acf575a089b5")
  CLSID_IDVB_SIT = "68cdce53-8bea-45c2-9d9d-acf575a089b5"
  struct IDVB_SIT
    lpVtbl : IDVB_SITVTbl*
  end

  struct IISDB_BITVTbl
    query_interface : Proc(IISDB_BIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDB_BIT*, UInt32)
    release : Proc(IISDB_BIT*, UInt32)
    initialize : Proc(IISDB_BIT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IISDB_BIT*, UInt8*, HRESULT)
    get_original_network_id : Proc(IISDB_BIT*, UInt16*, HRESULT)
    get_broadcast_view_propriety : Proc(IISDB_BIT*, UInt8*, HRESULT)
    get_count_of_table_descriptors : Proc(IISDB_BIT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IISDB_BIT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IISDB_BIT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_count_of_records : Proc(IISDB_BIT*, UInt32*, HRESULT)
    get_record_broadcaster_id : Proc(IISDB_BIT*, UInt32, UInt8*, HRESULT)
    get_record_count_of_descriptors : Proc(IISDB_BIT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IISDB_BIT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IISDB_BIT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_version_hash : Proc(IISDB_BIT*, UInt32*, HRESULT)
  end

  IISDB_BIT_GUID = LibC::GUID.new("537cd71e-0e46-4173-9001-ba043f3e49e2")
  CLSID_IISDB_BIT = "537cd71e-0e46-4173-9001-ba043f3e49e2"
  struct IISDB_BIT
    lpVtbl : IISDB_BITVTbl*
  end

  struct IISDB_NBITVTbl
    query_interface : Proc(IISDB_NBIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDB_NBIT*, UInt32)
    release : Proc(IISDB_NBIT*, UInt32)
    initialize : Proc(IISDB_NBIT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IISDB_NBIT*, UInt8*, HRESULT)
    get_original_network_id : Proc(IISDB_NBIT*, UInt16*, HRESULT)
    get_count_of_records : Proc(IISDB_NBIT*, UInt32*, HRESULT)
    get_record_information_id : Proc(IISDB_NBIT*, UInt32, UInt16*, HRESULT)
    get_record_information_type : Proc(IISDB_NBIT*, UInt32, UInt8*, HRESULT)
    get_record_description_body_location : Proc(IISDB_NBIT*, UInt32, UInt8*, HRESULT)
    get_record_message_section_number : Proc(IISDB_NBIT*, UInt32, UInt8*, HRESULT)
    get_record_user_defined : Proc(IISDB_NBIT*, UInt32, UInt8*, HRESULT)
    get_record_number_of_keys : Proc(IISDB_NBIT*, UInt32, UInt8*, HRESULT)
    get_record_keys : Proc(IISDB_NBIT*, UInt32, UInt8**, HRESULT)
    get_record_count_of_descriptors : Proc(IISDB_NBIT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IISDB_NBIT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IISDB_NBIT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_version_hash : Proc(IISDB_NBIT*, UInt32*, HRESULT)
  end

  IISDB_NBIT_GUID = LibC::GUID.new("1b1863ef-08f1-40b7-a559-3b1eff8cafa6")
  CLSID_IISDB_NBIT = "1b1863ef-08f1-40b7-a559-3b1eff8cafa6"
  struct IISDB_NBIT
    lpVtbl : IISDB_NBITVTbl*
  end

  struct IISDB_LDTVTbl
    query_interface : Proc(IISDB_LDT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDB_LDT*, UInt32)
    release : Proc(IISDB_LDT*, UInt32)
    initialize : Proc(IISDB_LDT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IISDB_LDT*, UInt8*, HRESULT)
    get_original_service_id : Proc(IISDB_LDT*, UInt16*, HRESULT)
    get_transport_stream_id : Proc(IISDB_LDT*, UInt16*, HRESULT)
    get_original_network_id : Proc(IISDB_LDT*, UInt16*, HRESULT)
    get_count_of_records : Proc(IISDB_LDT*, UInt32*, HRESULT)
    get_record_description_id : Proc(IISDB_LDT*, UInt32, UInt16*, HRESULT)
    get_record_count_of_descriptors : Proc(IISDB_LDT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IISDB_LDT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IISDB_LDT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_version_hash : Proc(IISDB_LDT*, UInt32*, HRESULT)
  end

  IISDB_LDT_GUID = LibC::GUID.new("141a546b-02ff-4fb9-a3a3-2f074b74a9a9")
  CLSID_IISDB_LDT = "141a546b-02ff-4fb9-a3a3-2f074b74a9a9"
  struct IISDB_LDT
    lpVtbl : IISDB_LDTVTbl*
  end

  struct IISDB_SDTTVTbl
    query_interface : Proc(IISDB_SDTT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDB_SDTT*, UInt32)
    release : Proc(IISDB_SDTT*, UInt32)
    initialize : Proc(IISDB_SDTT*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IISDB_SDTT*, UInt8*, HRESULT)
    get_table_id_ext : Proc(IISDB_SDTT*, UInt16*, HRESULT)
    get_transport_stream_id : Proc(IISDB_SDTT*, UInt16*, HRESULT)
    get_original_network_id : Proc(IISDB_SDTT*, UInt16*, HRESULT)
    get_service_id : Proc(IISDB_SDTT*, UInt16*, HRESULT)
    get_count_of_records : Proc(IISDB_SDTT*, UInt32*, HRESULT)
    get_record_group : Proc(IISDB_SDTT*, UInt32, UInt8*, HRESULT)
    get_record_target_version : Proc(IISDB_SDTT*, UInt32, UInt16*, HRESULT)
    get_record_new_version : Proc(IISDB_SDTT*, UInt32, UInt16*, HRESULT)
    get_record_download_level : Proc(IISDB_SDTT*, UInt32, UInt8*, HRESULT)
    get_record_version_indicator : Proc(IISDB_SDTT*, UInt32, UInt8*, HRESULT)
    get_record_schedule_time_shift_information : Proc(IISDB_SDTT*, UInt32, UInt8*, HRESULT)
    get_record_count_of_schedules : Proc(IISDB_SDTT*, UInt32, UInt32*, HRESULT)
    get_record_start_time_by_index : Proc(IISDB_SDTT*, UInt32, UInt32, MPEG_DATE_AND_TIME*, HRESULT)
    get_record_duration_by_index : Proc(IISDB_SDTT*, UInt32, UInt32, MPEG_TIME*, HRESULT)
    get_record_count_of_descriptors : Proc(IISDB_SDTT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IISDB_SDTT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IISDB_SDTT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_version_hash : Proc(IISDB_SDTT*, UInt32*, HRESULT)
  end

  IISDB_SDTT_GUID = LibC::GUID.new("ee60ef2d-813a-4dc7-bf92-ea13dac85313")
  CLSID_IISDB_SDTT = "ee60ef2d-813a-4dc7-bf92-ea13dac85313"
  struct IISDB_SDTT
    lpVtbl : IISDB_SDTTVTbl*
  end

  struct IISDB_CDTVTbl
    query_interface : Proc(IISDB_CDT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDB_CDT*, UInt32)
    release : Proc(IISDB_CDT*, UInt32)
    initialize : Proc(IISDB_CDT*, ISectionList, IMpeg2Data, UInt8, HRESULT)
    get_version_number : Proc(IISDB_CDT*, UInt8*, HRESULT)
    get_download_data_id : Proc(IISDB_CDT*, UInt16*, HRESULT)
    get_section_number : Proc(IISDB_CDT*, UInt8*, HRESULT)
    get_original_network_id : Proc(IISDB_CDT*, UInt16*, HRESULT)
    get_data_type : Proc(IISDB_CDT*, UInt8*, HRESULT)
    get_count_of_table_descriptors : Proc(IISDB_CDT*, UInt32*, HRESULT)
    get_table_descriptor_by_index : Proc(IISDB_CDT*, UInt32, IGenericDescriptor*, HRESULT)
    get_table_descriptor_by_tag : Proc(IISDB_CDT*, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
    get_size_of_data_module : Proc(IISDB_CDT*, UInt32*, HRESULT)
    get_data_module : Proc(IISDB_CDT*, UInt8**, HRESULT)
    get_version_hash : Proc(IISDB_CDT*, UInt32*, HRESULT)
  end

  IISDB_CDT_GUID = LibC::GUID.new("25fa92c2-8b80-4787-a841-3a0e8f17984b")
  CLSID_IISDB_CDT = "25fa92c2-8b80-4787-a841-3a0e8f17984b"
  struct IISDB_CDT
    lpVtbl : IISDB_CDTVTbl*
  end

  struct IISDB_EMMVTbl
    query_interface : Proc(IISDB_EMM*, Guid*, Void**, HRESULT)
    add_ref : Proc(IISDB_EMM*, UInt32)
    release : Proc(IISDB_EMM*, UInt32)
    initialize : Proc(IISDB_EMM*, ISectionList, IMpeg2Data, HRESULT)
    get_version_number : Proc(IISDB_EMM*, UInt8*, HRESULT)
    get_table_id_extension : Proc(IISDB_EMM*, UInt16*, HRESULT)
    get_data_bytes : Proc(IISDB_EMM*, UInt16*, UInt8*, HRESULT)
    get_shared_emm_message : Proc(IISDB_EMM*, UInt16*, UInt8**, HRESULT)
    get_individual_emm_message : Proc(IISDB_EMM*, IUnknown, UInt16*, UInt8**, HRESULT)
    get_version_hash : Proc(IISDB_EMM*, UInt32*, HRESULT)
  end

  IISDB_EMM_GUID = LibC::GUID.new("0edb556d-43ad-4938-9668-321b2ffecfd3")
  CLSID_IISDB_EMM = "0edb556d-43ad-4938-9668-321b2ffecfd3"
  struct IISDB_EMM
    lpVtbl : IISDB_EMMVTbl*
  end

  struct IDvbServiceAttributeDescriptorVTbl
    query_interface : Proc(IDvbServiceAttributeDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbServiceAttributeDescriptor*, UInt32)
    release : Proc(IDvbServiceAttributeDescriptor*, UInt32)
    get_tag : Proc(IDvbServiceAttributeDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbServiceAttributeDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbServiceAttributeDescriptor*, UInt8*, HRESULT)
    get_record_service_id : Proc(IDvbServiceAttributeDescriptor*, UInt8, UInt16*, HRESULT)
    get_record_numeric_selection_flag : Proc(IDvbServiceAttributeDescriptor*, UInt8, LibC::BOOL*, HRESULT)
    get_record_visible_service_flag : Proc(IDvbServiceAttributeDescriptor*, UInt8, LibC::BOOL*, HRESULT)
  end

  IDvbServiceAttributeDescriptor_GUID = LibC::GUID.new("0f37bd92-d6a1-4854-b950-3a969d27f30e")
  CLSID_IDvbServiceAttributeDescriptor = "0f37bd92-d6a1-4854-b950-3a969d27f30e"
  struct IDvbServiceAttributeDescriptor
    lpVtbl : IDvbServiceAttributeDescriptorVTbl*
  end

  struct IDvbContentIdentifierDescriptorVTbl
    query_interface : Proc(IDvbContentIdentifierDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbContentIdentifierDescriptor*, UInt32)
    release : Proc(IDvbContentIdentifierDescriptor*, UInt32)
    get_tag : Proc(IDvbContentIdentifierDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbContentIdentifierDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbContentIdentifierDescriptor*, UInt8*, HRESULT)
    get_record_crid : Proc(IDvbContentIdentifierDescriptor*, UInt8, UInt8*, UInt8*, UInt8*, UInt8**, HRESULT)
  end

  IDvbContentIdentifierDescriptor_GUID = LibC::GUID.new("05e0c1ea-f661-4053-9fbf-d93b28359838")
  CLSID_IDvbContentIdentifierDescriptor = "05e0c1ea-f661-4053-9fbf-d93b28359838"
  struct IDvbContentIdentifierDescriptor
    lpVtbl : IDvbContentIdentifierDescriptorVTbl*
  end

  struct IDvbDefaultAuthorityDescriptorVTbl
    query_interface : Proc(IDvbDefaultAuthorityDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbDefaultAuthorityDescriptor*, UInt32)
    release : Proc(IDvbDefaultAuthorityDescriptor*, UInt32)
    get_tag : Proc(IDvbDefaultAuthorityDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbDefaultAuthorityDescriptor*, UInt8*, HRESULT)
    get_default_authority : Proc(IDvbDefaultAuthorityDescriptor*, UInt8*, UInt8**, HRESULT)
  end

  IDvbDefaultAuthorityDescriptor_GUID = LibC::GUID.new("05ec24d1-3a31-44e7-b408-67c60a352276")
  CLSID_IDvbDefaultAuthorityDescriptor = "05ec24d1-3a31-44e7-b408-67c60a352276"
  struct IDvbDefaultAuthorityDescriptor
    lpVtbl : IDvbDefaultAuthorityDescriptorVTbl*
  end

  struct IDvbSatelliteDeliverySystemDescriptorVTbl
    query_interface : Proc(IDvbSatelliteDeliverySystemDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32)
    release : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32)
    get_tag : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_frequency : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32*, HRESULT)
    get_orbital_position : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt16*, HRESULT)
    get_west_east_flag : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_polarization : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_modulation : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_symbol_rate : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt32*, HRESULT)
    get_fec_inner : Proc(IDvbSatelliteDeliverySystemDescriptor*, UInt8*, HRESULT)
  end

  IDvbSatelliteDeliverySystemDescriptor_GUID = LibC::GUID.new("02f2225a-805b-4ec5-a9a6-f9b5913cd470")
  CLSID_IDvbSatelliteDeliverySystemDescriptor = "02f2225a-805b-4ec5-a9a6-f9b5913cd470"
  struct IDvbSatelliteDeliverySystemDescriptor
    lpVtbl : IDvbSatelliteDeliverySystemDescriptorVTbl*
  end

  struct IDvbCableDeliverySystemDescriptorVTbl
    query_interface : Proc(IDvbCableDeliverySystemDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbCableDeliverySystemDescriptor*, UInt32)
    release : Proc(IDvbCableDeliverySystemDescriptor*, UInt32)
    get_tag : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_frequency : Proc(IDvbCableDeliverySystemDescriptor*, UInt32*, HRESULT)
    get_fec_outer : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_modulation : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_symbol_rate : Proc(IDvbCableDeliverySystemDescriptor*, UInt32*, HRESULT)
    get_fec_inner : Proc(IDvbCableDeliverySystemDescriptor*, UInt8*, HRESULT)
  end

  IDvbCableDeliverySystemDescriptor_GUID = LibC::GUID.new("dfb98e36-9e1a-4862-9946-993a4e59017b")
  CLSID_IDvbCableDeliverySystemDescriptor = "dfb98e36-9e1a-4862-9946-993a4e59017b"
  struct IDvbCableDeliverySystemDescriptor
    lpVtbl : IDvbCableDeliverySystemDescriptorVTbl*
  end

  struct IDvbTerrestrialDeliverySystemDescriptorVTbl
    query_interface : Proc(IDvbTerrestrialDeliverySystemDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt32)
    release : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt32)
    get_tag : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_centre_frequency : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt32*, HRESULT)
    get_bandwidth : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_constellation : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_hierarchy_information : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_code_rate_hp_stream : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_code_rate_lp_stream : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_guard_interval : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_transmission_mode : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_other_frequency_flag : Proc(IDvbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
  end

  IDvbTerrestrialDeliverySystemDescriptor_GUID = LibC::GUID.new("ed7e1b91-d12e-420c-b41d-a49d84fe1823")
  CLSID_IDvbTerrestrialDeliverySystemDescriptor = "ed7e1b91-d12e-420c-b41d-a49d84fe1823"
  struct IDvbTerrestrialDeliverySystemDescriptor
    lpVtbl : IDvbTerrestrialDeliverySystemDescriptorVTbl*
  end

  struct IDvbTerrestrial2DeliverySystemDescriptorVTbl
    query_interface : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt32)
    release : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt32)
    get_tag : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_tag_extension : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_centre_frequency : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt32*, HRESULT)
    get_plp_id : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_t2_system_id : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt16*, HRESULT)
    get_multiple_input_mode : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_bandwidth : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_guard_interval : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_transmission_mode : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_cell_id : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt16*, HRESULT)
    get_other_frequency_flag : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
    get_tfs_flag : Proc(IDvbTerrestrial2DeliverySystemDescriptor*, UInt8*, HRESULT)
  end

  IDvbTerrestrial2DeliverySystemDescriptor_GUID = LibC::GUID.new("20ee9be9-cd57-49ab-8f6e-1d07aeb8e482")
  CLSID_IDvbTerrestrial2DeliverySystemDescriptor = "20ee9be9-cd57-49ab-8f6e-1d07aeb8e482"
  struct IDvbTerrestrial2DeliverySystemDescriptor
    lpVtbl : IDvbTerrestrial2DeliverySystemDescriptorVTbl*
  end

  struct IDvbFrequencyListDescriptorVTbl
    query_interface : Proc(IDvbFrequencyListDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbFrequencyListDescriptor*, UInt32)
    release : Proc(IDvbFrequencyListDescriptor*, UInt32)
    get_tag : Proc(IDvbFrequencyListDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbFrequencyListDescriptor*, UInt8*, HRESULT)
    get_coding_type : Proc(IDvbFrequencyListDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbFrequencyListDescriptor*, UInt8*, HRESULT)
    get_record_centre_frequency : Proc(IDvbFrequencyListDescriptor*, UInt8, UInt32*, HRESULT)
  end

  IDvbFrequencyListDescriptor_GUID = LibC::GUID.new("1cadb613-e1dd-4512-afa8-bb7a007ef8b1")
  CLSID_IDvbFrequencyListDescriptor = "1cadb613-e1dd-4512-afa8-bb7a007ef8b1"
  struct IDvbFrequencyListDescriptor
    lpVtbl : IDvbFrequencyListDescriptorVTbl*
  end

  struct IDvbPrivateDataSpecifierDescriptorVTbl
    query_interface : Proc(IDvbPrivateDataSpecifierDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt32)
    release : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt32)
    get_tag : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt8*, HRESULT)
    get_private_data_specifier : Proc(IDvbPrivateDataSpecifierDescriptor*, UInt32*, HRESULT)
  end

  IDvbPrivateDataSpecifierDescriptor_GUID = LibC::GUID.new("5660a019-e75a-4b82-9b4c-ed2256d165a2")
  CLSID_IDvbPrivateDataSpecifierDescriptor = "5660a019-e75a-4b82-9b4c-ed2256d165a2"
  struct IDvbPrivateDataSpecifierDescriptor
    lpVtbl : IDvbPrivateDataSpecifierDescriptorVTbl*
  end

  struct IDvbLogicalChannelDescriptorVTbl
    query_interface : Proc(IDvbLogicalChannelDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbLogicalChannelDescriptor*, UInt32)
    release : Proc(IDvbLogicalChannelDescriptor*, UInt32)
    get_tag : Proc(IDvbLogicalChannelDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbLogicalChannelDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbLogicalChannelDescriptor*, UInt8*, HRESULT)
    get_record_service_id : Proc(IDvbLogicalChannelDescriptor*, UInt8, UInt16*, HRESULT)
    get_record_logical_channel_number : Proc(IDvbLogicalChannelDescriptor*, UInt8, UInt16*, HRESULT)
  end

  IDvbLogicalChannelDescriptor_GUID = LibC::GUID.new("cf1edaff-3ffd-4cf7-8201-35756acbf85f")
  CLSID_IDvbLogicalChannelDescriptor = "cf1edaff-3ffd-4cf7-8201-35756acbf85f"
  struct IDvbLogicalChannelDescriptor
    lpVtbl : IDvbLogicalChannelDescriptorVTbl*
  end

  struct IDvbLogicalChannelDescriptor2VTbl
    query_interface : Proc(IDvbLogicalChannelDescriptor2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbLogicalChannelDescriptor2*, UInt32)
    release : Proc(IDvbLogicalChannelDescriptor2*, UInt32)
    get_tag : Proc(IDvbLogicalChannelDescriptor2*, UInt8*, HRESULT)
    get_length : Proc(IDvbLogicalChannelDescriptor2*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbLogicalChannelDescriptor2*, UInt8*, HRESULT)
    get_record_service_id : Proc(IDvbLogicalChannelDescriptor2*, UInt8, UInt16*, HRESULT)
    get_record_logical_channel_number : Proc(IDvbLogicalChannelDescriptor2*, UInt8, UInt16*, HRESULT)
    get_record_logical_channel_and_visibility : Proc(IDvbLogicalChannelDescriptor2*, UInt8, UInt16*, HRESULT)
  end

  IDvbLogicalChannelDescriptor2_GUID = LibC::GUID.new("43aca974-4be8-4b98-bc17-9eafd788b1d7")
  CLSID_IDvbLogicalChannelDescriptor2 = "43aca974-4be8-4b98-bc17-9eafd788b1d7"
  struct IDvbLogicalChannelDescriptor2
    lpVtbl : IDvbLogicalChannelDescriptor2VTbl*
  end

  struct IDvbLogicalChannel2DescriptorVTbl
    query_interface : Proc(IDvbLogicalChannel2Descriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbLogicalChannel2Descriptor*, UInt32)
    release : Proc(IDvbLogicalChannel2Descriptor*, UInt32)
    get_tag : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, HRESULT)
    get_record_service_id : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt16*, HRESULT)
    get_record_logical_channel_number : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt16*, HRESULT)
    get_record_logical_channel_and_visibility : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt16*, HRESULT)
    get_count_of_lists : Proc(IDvbLogicalChannel2Descriptor*, UInt8*, HRESULT)
    get_list_id : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8*, HRESULT)
    get_list_name_w : Proc(IDvbLogicalChannel2Descriptor*, UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)
    get_list_country_code : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8*, HRESULT)
    get_list_count_of_records : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8*, HRESULT)
    get_list_record_service_id : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8, UInt16*, HRESULT)
    get_list_record_logical_channel_number : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8, UInt16*, HRESULT)
    get_list_record_logical_channel_and_visibility : Proc(IDvbLogicalChannel2Descriptor*, UInt8, UInt8, UInt16*, HRESULT)
  end

  IDvbLogicalChannel2Descriptor_GUID = LibC::GUID.new("f69c3747-8a30-4980-998c-01fe7f0ba35a")
  CLSID_IDvbLogicalChannel2Descriptor = "f69c3747-8a30-4980-998c-01fe7f0ba35a"
  struct IDvbLogicalChannel2Descriptor
    lpVtbl : IDvbLogicalChannel2DescriptorVTbl*
  end

  struct IDvbHDSimulcastLogicalChannelDescriptorVTbl
    query_interface : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt32)
    release : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt32)
    get_tag : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8*, HRESULT)
    get_record_service_id : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8, UInt16*, HRESULT)
    get_record_logical_channel_number : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8, UInt16*, HRESULT)
    get_record_logical_channel_and_visibility : Proc(IDvbHDSimulcastLogicalChannelDescriptor*, UInt8, UInt16*, HRESULT)
  end

  IDvbHDSimulcastLogicalChannelDescriptor_GUID = LibC::GUID.new("1ea8b738-a307-4680-9e26-d0a908c824f4")
  CLSID_IDvbHDSimulcastLogicalChannelDescriptor = "1ea8b738-a307-4680-9e26-d0a908c824f4"
  struct IDvbHDSimulcastLogicalChannelDescriptor
    lpVtbl : IDvbHDSimulcastLogicalChannelDescriptorVTbl*
  end

  struct IDvbDataBroadcastIDDescriptorVTbl
    query_interface : Proc(IDvbDataBroadcastIDDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbDataBroadcastIDDescriptor*, UInt32)
    release : Proc(IDvbDataBroadcastIDDescriptor*, UInt32)
    get_tag : Proc(IDvbDataBroadcastIDDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbDataBroadcastIDDescriptor*, UInt8*, HRESULT)
    get_data_broadcast_id : Proc(IDvbDataBroadcastIDDescriptor*, UInt16*, HRESULT)
    get_id_selector_bytes : Proc(IDvbDataBroadcastIDDescriptor*, UInt8*, UInt8*, HRESULT)
  end

  IDvbDataBroadcastIDDescriptor_GUID = LibC::GUID.new("5f26f518-65c8-4048-91f2-9290f59f7b90")
  CLSID_IDvbDataBroadcastIDDescriptor = "5f26f518-65c8-4048-91f2-9290f59f7b90"
  struct IDvbDataBroadcastIDDescriptor
    lpVtbl : IDvbDataBroadcastIDDescriptorVTbl*
  end

  struct IDvbDataBroadcastDescriptorVTbl
    query_interface : Proc(IDvbDataBroadcastDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbDataBroadcastDescriptor*, UInt32)
    release : Proc(IDvbDataBroadcastDescriptor*, UInt32)
    get_tag : Proc(IDvbDataBroadcastDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbDataBroadcastDescriptor*, UInt8*, HRESULT)
    get_data_broadcast_id : Proc(IDvbDataBroadcastDescriptor*, UInt16*, HRESULT)
    get_component_tag : Proc(IDvbDataBroadcastDescriptor*, UInt8*, HRESULT)
    get_selector_length : Proc(IDvbDataBroadcastDescriptor*, UInt8*, HRESULT)
    get_selector_bytes : Proc(IDvbDataBroadcastDescriptor*, UInt8*, UInt8*, HRESULT)
    get_lang_id : Proc(IDvbDataBroadcastDescriptor*, UInt32*, HRESULT)
    get_text_length : Proc(IDvbDataBroadcastDescriptor*, UInt8*, HRESULT)
    get_text : Proc(IDvbDataBroadcastDescriptor*, UInt8*, UInt8*, HRESULT)
  end

  IDvbDataBroadcastDescriptor_GUID = LibC::GUID.new("d1ebc1d6-8b60-4c20-9caf-e59382e7c400")
  CLSID_IDvbDataBroadcastDescriptor = "d1ebc1d6-8b60-4c20-9caf-e59382e7c400"
  struct IDvbDataBroadcastDescriptor
    lpVtbl : IDvbDataBroadcastDescriptorVTbl*
  end

  struct IDvbLinkageDescriptorVTbl
    query_interface : Proc(IDvbLinkageDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbLinkageDescriptor*, UInt32)
    release : Proc(IDvbLinkageDescriptor*, UInt32)
    get_tag : Proc(IDvbLinkageDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbLinkageDescriptor*, UInt8*, HRESULT)
    get_ts_id : Proc(IDvbLinkageDescriptor*, UInt16*, HRESULT)
    get_on_id : Proc(IDvbLinkageDescriptor*, UInt16*, HRESULT)
    get_service_id : Proc(IDvbLinkageDescriptor*, UInt16*, HRESULT)
    get_linkage_type : Proc(IDvbLinkageDescriptor*, UInt8*, HRESULT)
    get_private_data_length : Proc(IDvbLinkageDescriptor*, UInt8*, HRESULT)
    get_private_data : Proc(IDvbLinkageDescriptor*, UInt8*, UInt8*, HRESULT)
  end

  IDvbLinkageDescriptor_GUID = LibC::GUID.new("1cdf8b31-994a-46fc-acfd-6a6be8934dd5")
  CLSID_IDvbLinkageDescriptor = "1cdf8b31-994a-46fc-acfd-6a6be8934dd5"
  struct IDvbLinkageDescriptor
    lpVtbl : IDvbLinkageDescriptorVTbl*
  end

  struct IDvbTeletextDescriptorVTbl
    query_interface : Proc(IDvbTeletextDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbTeletextDescriptor*, UInt32)
    release : Proc(IDvbTeletextDescriptor*, UInt32)
    get_tag : Proc(IDvbTeletextDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbTeletextDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbTeletextDescriptor*, UInt8*, HRESULT)
    get_record_lang_id : Proc(IDvbTeletextDescriptor*, UInt8, UInt32*, HRESULT)
    get_record_teletext_type : Proc(IDvbTeletextDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_magazine_number : Proc(IDvbTeletextDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_page_number : Proc(IDvbTeletextDescriptor*, UInt8, UInt8*, HRESULT)
  end

  IDvbTeletextDescriptor_GUID = LibC::GUID.new("9cd29d47-69c6-4f92-98a9-210af1b7303a")
  CLSID_IDvbTeletextDescriptor = "9cd29d47-69c6-4f92-98a9-210af1b7303a"
  struct IDvbTeletextDescriptor
    lpVtbl : IDvbTeletextDescriptorVTbl*
  end

  struct IDvbSubtitlingDescriptorVTbl
    query_interface : Proc(IDvbSubtitlingDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbSubtitlingDescriptor*, UInt32)
    release : Proc(IDvbSubtitlingDescriptor*, UInt32)
    get_tag : Proc(IDvbSubtitlingDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbSubtitlingDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbSubtitlingDescriptor*, UInt8*, HRESULT)
    get_record_lang_id : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt32*, HRESULT)
    get_record_subtitling_type : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_composition_page_id : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt16*, HRESULT)
    get_record_ancillary_page_id : Proc(IDvbSubtitlingDescriptor*, UInt8, UInt16*, HRESULT)
  end

  IDvbSubtitlingDescriptor_GUID = LibC::GUID.new("9b25fe1d-fa23-4e50-9784-6df8b26f8a49")
  CLSID_IDvbSubtitlingDescriptor = "9b25fe1d-fa23-4e50-9784-6df8b26f8a49"
  struct IDvbSubtitlingDescriptor
    lpVtbl : IDvbSubtitlingDescriptorVTbl*
  end

  struct IDvbServiceDescriptorVTbl
    query_interface : Proc(IDvbServiceDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbServiceDescriptor*, UInt32)
    release : Proc(IDvbServiceDescriptor*, UInt32)
    get_tag : Proc(IDvbServiceDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbServiceDescriptor*, UInt8*, HRESULT)
    get_service_type : Proc(IDvbServiceDescriptor*, UInt8*, HRESULT)
    get_service_provider_name : Proc(IDvbServiceDescriptor*, UInt8**, HRESULT)
    get_service_provider_name_w : Proc(IDvbServiceDescriptor*, UInt8**, HRESULT)
    get_service_name : Proc(IDvbServiceDescriptor*, UInt8**, HRESULT)
    get_processed_service_name : Proc(IDvbServiceDescriptor*, UInt8**, HRESULT)
    get_service_name_emphasized : Proc(IDvbServiceDescriptor*, UInt8**, HRESULT)
  end

  IDvbServiceDescriptor_GUID = LibC::GUID.new("f9c7fbcf-e2d6-464d-b32d-2ef526e49290")
  CLSID_IDvbServiceDescriptor = "f9c7fbcf-e2d6-464d-b32d-2ef526e49290"
  struct IDvbServiceDescriptor
    lpVtbl : IDvbServiceDescriptorVTbl*
  end

  struct IDvbServiceDescriptor2VTbl
    query_interface : Proc(IDvbServiceDescriptor2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbServiceDescriptor2*, UInt32)
    release : Proc(IDvbServiceDescriptor2*, UInt32)
    get_tag : Proc(IDvbServiceDescriptor2*, UInt8*, HRESULT)
    get_length : Proc(IDvbServiceDescriptor2*, UInt8*, HRESULT)
    get_service_type : Proc(IDvbServiceDescriptor2*, UInt8*, HRESULT)
    get_service_provider_name : Proc(IDvbServiceDescriptor2*, UInt8**, HRESULT)
    get_service_provider_name_w : Proc(IDvbServiceDescriptor2*, UInt8**, HRESULT)
    get_service_name : Proc(IDvbServiceDescriptor2*, UInt8**, HRESULT)
    get_processed_service_name : Proc(IDvbServiceDescriptor2*, UInt8**, HRESULT)
    get_service_name_emphasized : Proc(IDvbServiceDescriptor2*, UInt8**, HRESULT)
    get_service_provider_name_w2 : Proc(IDvbServiceDescriptor2*, DVB_STRCONV_MODE, UInt8**, HRESULT)
    get_service_name_w : Proc(IDvbServiceDescriptor2*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IDvbServiceDescriptor2_GUID = LibC::GUID.new("d6c76506-85ab-487c-9b2b-36416511e4a2")
  CLSID_IDvbServiceDescriptor2 = "d6c76506-85ab-487c-9b2b-36416511e4a2"
  struct IDvbServiceDescriptor2
    lpVtbl : IDvbServiceDescriptor2VTbl*
  end

  struct IDvbServiceListDescriptorVTbl
    query_interface : Proc(IDvbServiceListDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbServiceListDescriptor*, UInt32)
    release : Proc(IDvbServiceListDescriptor*, UInt32)
    get_tag : Proc(IDvbServiceListDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbServiceListDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbServiceListDescriptor*, UInt8*, HRESULT)
    get_record_service_id : Proc(IDvbServiceListDescriptor*, UInt8, UInt16*, HRESULT)
    get_record_service_type : Proc(IDvbServiceListDescriptor*, UInt8, UInt8*, HRESULT)
  end

  IDvbServiceListDescriptor_GUID = LibC::GUID.new("05db0d8f-6008-491a-acd3-7090952707d0")
  CLSID_IDvbServiceListDescriptor = "05db0d8f-6008-491a-acd3-7090952707d0"
  struct IDvbServiceListDescriptor
    lpVtbl : IDvbServiceListDescriptorVTbl*
  end

  struct IDvbMultilingualServiceNameDescriptorVTbl
    query_interface : Proc(IDvbMultilingualServiceNameDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbMultilingualServiceNameDescriptor*, UInt32)
    release : Proc(IDvbMultilingualServiceNameDescriptor*, UInt32)
    get_tag : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8*, HRESULT)
    get_record_lang_id : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8, UInt32*, HRESULT)
    get_record_service_provider_name_w : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)
    get_record_service_name_w : Proc(IDvbMultilingualServiceNameDescriptor*, UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IDvbMultilingualServiceNameDescriptor_GUID = LibC::GUID.new("2d80433b-b32c-47ef-987f-e78ebb773e34")
  CLSID_IDvbMultilingualServiceNameDescriptor = "2d80433b-b32c-47ef-987f-e78ebb773e34"
  struct IDvbMultilingualServiceNameDescriptor
    lpVtbl : IDvbMultilingualServiceNameDescriptorVTbl*
  end

  struct IDvbNetworkNameDescriptorVTbl
    query_interface : Proc(IDvbNetworkNameDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbNetworkNameDescriptor*, UInt32)
    release : Proc(IDvbNetworkNameDescriptor*, UInt32)
    get_tag : Proc(IDvbNetworkNameDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbNetworkNameDescriptor*, UInt8*, HRESULT)
    get_network_name : Proc(IDvbNetworkNameDescriptor*, UInt8**, HRESULT)
    get_network_name_w : Proc(IDvbNetworkNameDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IDvbNetworkNameDescriptor_GUID = LibC::GUID.new("5b2a80cf-35b9-446c-b3e4-048b761dbc51")
  CLSID_IDvbNetworkNameDescriptor = "5b2a80cf-35b9-446c-b3e4-048b761dbc51"
  struct IDvbNetworkNameDescriptor
    lpVtbl : IDvbNetworkNameDescriptorVTbl*
  end

  struct IDvbShortEventDescriptorVTbl
    query_interface : Proc(IDvbShortEventDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbShortEventDescriptor*, UInt32)
    release : Proc(IDvbShortEventDescriptor*, UInt32)
    get_tag : Proc(IDvbShortEventDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbShortEventDescriptor*, UInt8*, HRESULT)
    get_language_code : Proc(IDvbShortEventDescriptor*, UInt8*, HRESULT)
    get_event_name_w : Proc(IDvbShortEventDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
    get_text_w : Proc(IDvbShortEventDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IDvbShortEventDescriptor_GUID = LibC::GUID.new("b170be92-5b75-458e-9c6e-b0008231491a")
  CLSID_IDvbShortEventDescriptor = "b170be92-5b75-458e-9c6e-b0008231491a"
  struct IDvbShortEventDescriptor
    lpVtbl : IDvbShortEventDescriptorVTbl*
  end

  struct IDvbExtendedEventDescriptorVTbl
    query_interface : Proc(IDvbExtendedEventDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbExtendedEventDescriptor*, UInt32)
    release : Proc(IDvbExtendedEventDescriptor*, UInt32)
    get_tag : Proc(IDvbExtendedEventDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbExtendedEventDescriptor*, UInt8*, HRESULT)
    get_descriptor_number : Proc(IDvbExtendedEventDescriptor*, UInt8*, HRESULT)
    get_last_descriptor_number : Proc(IDvbExtendedEventDescriptor*, UInt8*, HRESULT)
    get_language_code : Proc(IDvbExtendedEventDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbExtendedEventDescriptor*, UInt8*, HRESULT)
    get_record_item_w : Proc(IDvbExtendedEventDescriptor*, UInt8, DVB_STRCONV_MODE, UInt8**, UInt8**, HRESULT)
    get_concatenated_item_w : Proc(IDvbExtendedEventDescriptor*, IDvbExtendedEventDescriptor, DVB_STRCONV_MODE, UInt8**, UInt8**, HRESULT)
    get_text_w : Proc(IDvbExtendedEventDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
    get_concatenated_text_w : Proc(IDvbExtendedEventDescriptor*, IDvbExtendedEventDescriptor, DVB_STRCONV_MODE, UInt8**, HRESULT)
    get_record_item_raw_bytes : Proc(IDvbExtendedEventDescriptor*, UInt8, UInt8**, UInt8*, HRESULT)
  end

  IDvbExtendedEventDescriptor_GUID = LibC::GUID.new("c9b22eca-85f4-499f-b1db-efa93a91ee57")
  CLSID_IDvbExtendedEventDescriptor = "c9b22eca-85f4-499f-b1db-efa93a91ee57"
  struct IDvbExtendedEventDescriptor
    lpVtbl : IDvbExtendedEventDescriptorVTbl*
  end

  struct IDvbComponentDescriptorVTbl
    query_interface : Proc(IDvbComponentDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbComponentDescriptor*, UInt32)
    release : Proc(IDvbComponentDescriptor*, UInt32)
    get_tag : Proc(IDvbComponentDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbComponentDescriptor*, UInt8*, HRESULT)
    get_stream_content : Proc(IDvbComponentDescriptor*, UInt8*, HRESULT)
    get_component_type : Proc(IDvbComponentDescriptor*, UInt8*, HRESULT)
    get_component_tag : Proc(IDvbComponentDescriptor*, UInt8*, HRESULT)
    get_language_code : Proc(IDvbComponentDescriptor*, UInt8*, HRESULT)
    get_text_w : Proc(IDvbComponentDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IDvbComponentDescriptor_GUID = LibC::GUID.new("91e405cf-80e7-457f-9096-1b9d1ce32141")
  CLSID_IDvbComponentDescriptor = "91e405cf-80e7-457f-9096-1b9d1ce32141"
  struct IDvbComponentDescriptor
    lpVtbl : IDvbComponentDescriptorVTbl*
  end

  struct IDvbContentDescriptorVTbl
    query_interface : Proc(IDvbContentDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbContentDescriptor*, UInt32)
    release : Proc(IDvbContentDescriptor*, UInt32)
    get_tag : Proc(IDvbContentDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbContentDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbContentDescriptor*, UInt8*, HRESULT)
    get_record_content_nibbles : Proc(IDvbContentDescriptor*, UInt8, UInt8*, UInt8*, HRESULT)
    get_record_user_nibbles : Proc(IDvbContentDescriptor*, UInt8, UInt8*, UInt8*, HRESULT)
  end

  IDvbContentDescriptor_GUID = LibC::GUID.new("2e883881-a467-412a-9d63-6f2b6da05bf0")
  CLSID_IDvbContentDescriptor = "2e883881-a467-412a-9d63-6f2b6da05bf0"
  struct IDvbContentDescriptor
    lpVtbl : IDvbContentDescriptorVTbl*
  end

  struct IDvbParentalRatingDescriptorVTbl
    query_interface : Proc(IDvbParentalRatingDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDvbParentalRatingDescriptor*, UInt32)
    release : Proc(IDvbParentalRatingDescriptor*, UInt32)
    get_tag : Proc(IDvbParentalRatingDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IDvbParentalRatingDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IDvbParentalRatingDescriptor*, UInt8*, HRESULT)
    get_record_rating : Proc(IDvbParentalRatingDescriptor*, UInt8, UInt8*, UInt8*, HRESULT)
  end

  IDvbParentalRatingDescriptor_GUID = LibC::GUID.new("3ad9dde1-fb1b-4186-937f-22e6b5a72a10")
  CLSID_IDvbParentalRatingDescriptor = "3ad9dde1-fb1b-4186-937f-22e6b5a72a10"
  struct IDvbParentalRatingDescriptor
    lpVtbl : IDvbParentalRatingDescriptorVTbl*
  end

  struct IIsdbTerrestrialDeliverySystemDescriptorVTbl
    query_interface : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt32)
    release : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt32)
    get_tag : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_area_code : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt16*, HRESULT)
    get_guard_interval : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_transmission_mode : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8*, HRESULT)
    get_record_frequency : Proc(IIsdbTerrestrialDeliverySystemDescriptor*, UInt8, UInt32*, HRESULT)
  end

  IIsdbTerrestrialDeliverySystemDescriptor_GUID = LibC::GUID.new("39fae0a6-d151-44dd-a28a-765de5991670")
  CLSID_IIsdbTerrestrialDeliverySystemDescriptor = "39fae0a6-d151-44dd-a28a-765de5991670"
  struct IIsdbTerrestrialDeliverySystemDescriptor
    lpVtbl : IIsdbTerrestrialDeliverySystemDescriptorVTbl*
  end

  struct IIsdbTSInformationDescriptorVTbl
    query_interface : Proc(IIsdbTSInformationDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbTSInformationDescriptor*, UInt32)
    release : Proc(IIsdbTSInformationDescriptor*, UInt32)
    get_tag : Proc(IIsdbTSInformationDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbTSInformationDescriptor*, UInt8*, HRESULT)
    get_remote_control_key_id : Proc(IIsdbTSInformationDescriptor*, UInt8*, HRESULT)
    get_ts_name_w : Proc(IIsdbTSInformationDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
    get_count_of_records : Proc(IIsdbTSInformationDescriptor*, UInt8*, HRESULT)
    get_record_transmission_type_info : Proc(IIsdbTSInformationDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_number_of_services : Proc(IIsdbTSInformationDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_service_id_by_index : Proc(IIsdbTSInformationDescriptor*, UInt8, UInt8, UInt16*, HRESULT)
  end

  IIsdbTSInformationDescriptor_GUID = LibC::GUID.new("d7ad183e-38f5-4210-b55f-ec8d601bbd47")
  CLSID_IIsdbTSInformationDescriptor = "d7ad183e-38f5-4210-b55f-ec8d601bbd47"
  struct IIsdbTSInformationDescriptor
    lpVtbl : IIsdbTSInformationDescriptorVTbl*
  end

  struct IIsdbDigitalCopyControlDescriptorVTbl
    query_interface : Proc(IIsdbDigitalCopyControlDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbDigitalCopyControlDescriptor*, UInt32)
    release : Proc(IIsdbDigitalCopyControlDescriptor*, UInt32)
    get_tag : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, HRESULT)
    get_copy_control : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)
    get_count_of_records : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8*, HRESULT)
    get_record_copy_control : Proc(IIsdbDigitalCopyControlDescriptor*, UInt8, UInt8*, UInt8*, UInt8*, UInt8*, UInt8*, HRESULT)
  end

  IIsdbDigitalCopyControlDescriptor_GUID = LibC::GUID.new("1a28417e-266a-4bb8-a4bd-d782bcfb8161")
  CLSID_IIsdbDigitalCopyControlDescriptor = "1a28417e-266a-4bb8-a4bd-d782bcfb8161"
  struct IIsdbDigitalCopyControlDescriptor
    lpVtbl : IIsdbDigitalCopyControlDescriptorVTbl*
  end

  struct IIsdbAudioComponentDescriptorVTbl
    query_interface : Proc(IIsdbAudioComponentDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbAudioComponentDescriptor*, UInt32)
    release : Proc(IIsdbAudioComponentDescriptor*, UInt32)
    get_tag : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_stream_content : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_component_type : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_component_tag : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_stream_type : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_simulcast_group_tag : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_es_multi_lingual_flag : Proc(IIsdbAudioComponentDescriptor*, LibC::BOOL*, HRESULT)
    get_main_component_flag : Proc(IIsdbAudioComponentDescriptor*, LibC::BOOL*, HRESULT)
    get_quality_indicator : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_sampling_rate : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_language_code : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_language_code2 : Proc(IIsdbAudioComponentDescriptor*, UInt8*, HRESULT)
    get_text_w : Proc(IIsdbAudioComponentDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IIsdbAudioComponentDescriptor_GUID = LibC::GUID.new("679d2002-2425-4be4-a4c7-d6632a574f4d")
  CLSID_IIsdbAudioComponentDescriptor = "679d2002-2425-4be4-a4c7-d6632a574f4d"
  struct IIsdbAudioComponentDescriptor
    lpVtbl : IIsdbAudioComponentDescriptorVTbl*
  end

  struct IIsdbDataContentDescriptorVTbl
    query_interface : Proc(IIsdbDataContentDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbDataContentDescriptor*, UInt32)
    release : Proc(IIsdbDataContentDescriptor*, UInt32)
    get_tag : Proc(IIsdbDataContentDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbDataContentDescriptor*, UInt8*, HRESULT)
    get_data_component_id : Proc(IIsdbDataContentDescriptor*, UInt16*, HRESULT)
    get_entry_component : Proc(IIsdbDataContentDescriptor*, UInt8*, HRESULT)
    get_selector_length : Proc(IIsdbDataContentDescriptor*, UInt8*, HRESULT)
    get_selector_bytes : Proc(IIsdbDataContentDescriptor*, UInt8, UInt8*, HRESULT)
    get_count_of_records : Proc(IIsdbDataContentDescriptor*, UInt8*, HRESULT)
    get_record_component_ref : Proc(IIsdbDataContentDescriptor*, UInt8, UInt8*, HRESULT)
    get_language_code : Proc(IIsdbDataContentDescriptor*, UInt8*, HRESULT)
    get_text_w : Proc(IIsdbDataContentDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IIsdbDataContentDescriptor_GUID = LibC::GUID.new("a428100a-e646-4bd6-aa14-6087bdc08cd5")
  CLSID_IIsdbDataContentDescriptor = "a428100a-e646-4bd6-aa14-6087bdc08cd5"
  struct IIsdbDataContentDescriptor
    lpVtbl : IIsdbDataContentDescriptorVTbl*
  end

  struct IIsdbCAContractInformationDescriptorVTbl
    query_interface : Proc(IIsdbCAContractInformationDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbCAContractInformationDescriptor*, UInt32)
    release : Proc(IIsdbCAContractInformationDescriptor*, UInt32)
    get_tag : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, HRESULT)
    get_ca_system_id : Proc(IIsdbCAContractInformationDescriptor*, UInt16*, HRESULT)
    get_ca_unit_id : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, HRESULT)
    get_record_component_tag : Proc(IIsdbCAContractInformationDescriptor*, UInt8, UInt8*, HRESULT)
    get_contract_verification_info_length : Proc(IIsdbCAContractInformationDescriptor*, UInt8*, HRESULT)
    get_contract_verification_info : Proc(IIsdbCAContractInformationDescriptor*, UInt8, UInt8*, HRESULT)
    get_fee_name_w : Proc(IIsdbCAContractInformationDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IIsdbCAContractInformationDescriptor_GUID = LibC::GUID.new("08e18b25-a28f-4e92-821e-4fced5cc2291")
  CLSID_IIsdbCAContractInformationDescriptor = "08e18b25-a28f-4e92-821e-4fced5cc2291"
  struct IIsdbCAContractInformationDescriptor
    lpVtbl : IIsdbCAContractInformationDescriptorVTbl*
  end

  struct IIsdbEventGroupDescriptorVTbl
    query_interface : Proc(IIsdbEventGroupDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbEventGroupDescriptor*, UInt32)
    release : Proc(IIsdbEventGroupDescriptor*, UInt32)
    get_tag : Proc(IIsdbEventGroupDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbEventGroupDescriptor*, UInt8*, HRESULT)
    get_group_type : Proc(IIsdbEventGroupDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IIsdbEventGroupDescriptor*, UInt8*, HRESULT)
    get_record_event : Proc(IIsdbEventGroupDescriptor*, UInt8, UInt16*, UInt16*, HRESULT)
    get_count_of_ref_records : Proc(IIsdbEventGroupDescriptor*, UInt8*, HRESULT)
    get_ref_record_event : Proc(IIsdbEventGroupDescriptor*, UInt8, UInt16*, UInt16*, UInt16*, UInt16*, HRESULT)
  end

  IIsdbEventGroupDescriptor_GUID = LibC::GUID.new("94b06780-2e2a-44dc-a966-cc56fdabc6c2")
  CLSID_IIsdbEventGroupDescriptor = "94b06780-2e2a-44dc-a966-cc56fdabc6c2"
  struct IIsdbEventGroupDescriptor
    lpVtbl : IIsdbEventGroupDescriptorVTbl*
  end

  struct IIsdbComponentGroupDescriptorVTbl
    query_interface : Proc(IIsdbComponentGroupDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbComponentGroupDescriptor*, UInt32)
    release : Proc(IIsdbComponentGroupDescriptor*, UInt32)
    get_tag : Proc(IIsdbComponentGroupDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbComponentGroupDescriptor*, UInt8*, HRESULT)
    get_component_group_type : Proc(IIsdbComponentGroupDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IIsdbComponentGroupDescriptor*, UInt8*, HRESULT)
    get_record_group_id : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_number_of_ca_unit : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_ca_unit_ca_unit_id : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8, UInt8*, HRESULT)
    get_record_ca_unit_number_of_components : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8, UInt8*, HRESULT)
    get_record_ca_unit_component_tag : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8, UInt8, UInt8*, HRESULT)
    get_record_total_bit_rate : Proc(IIsdbComponentGroupDescriptor*, UInt8, UInt8*, HRESULT)
    get_record_text_w : Proc(IIsdbComponentGroupDescriptor*, UInt8, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IIsdbComponentGroupDescriptor_GUID = LibC::GUID.new("a494f17f-c592-47d8-8943-64c9a34be7b9")
  CLSID_IIsdbComponentGroupDescriptor = "a494f17f-c592-47d8-8943-64c9a34be7b9"
  struct IIsdbComponentGroupDescriptor
    lpVtbl : IIsdbComponentGroupDescriptorVTbl*
  end

  struct IIsdbSeriesDescriptorVTbl
    query_interface : Proc(IIsdbSeriesDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbSeriesDescriptor*, UInt32)
    release : Proc(IIsdbSeriesDescriptor*, UInt32)
    get_tag : Proc(IIsdbSeriesDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbSeriesDescriptor*, UInt8*, HRESULT)
    get_series_id : Proc(IIsdbSeriesDescriptor*, UInt16*, HRESULT)
    get_repeat_label : Proc(IIsdbSeriesDescriptor*, UInt8*, HRESULT)
    get_program_pattern : Proc(IIsdbSeriesDescriptor*, UInt8*, HRESULT)
    get_expire_date : Proc(IIsdbSeriesDescriptor*, LibC::BOOL*, MPEG_DATE_AND_TIME*, HRESULT)
    get_episode_number : Proc(IIsdbSeriesDescriptor*, UInt16*, HRESULT)
    get_last_episode_number : Proc(IIsdbSeriesDescriptor*, UInt16*, HRESULT)
    get_series_name_w : Proc(IIsdbSeriesDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IIsdbSeriesDescriptor_GUID = LibC::GUID.new("07ef6370-1660-4f26-87fc-614adab24b11")
  CLSID_IIsdbSeriesDescriptor = "07ef6370-1660-4f26-87fc-614adab24b11"
  struct IIsdbSeriesDescriptor
    lpVtbl : IIsdbSeriesDescriptorVTbl*
  end

  struct IIsdbDownloadContentDescriptorVTbl
    query_interface : Proc(IIsdbDownloadContentDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbDownloadContentDescriptor*, UInt32)
    release : Proc(IIsdbDownloadContentDescriptor*, UInt32)
    get_tag : Proc(IIsdbDownloadContentDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbDownloadContentDescriptor*, UInt8*, HRESULT)
    get_flags : Proc(IIsdbDownloadContentDescriptor*, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, LibC::BOOL*, HRESULT)
    get_component_size : Proc(IIsdbDownloadContentDescriptor*, UInt32*, HRESULT)
    get_download_id : Proc(IIsdbDownloadContentDescriptor*, UInt32*, HRESULT)
    get_time_out_value_dii : Proc(IIsdbDownloadContentDescriptor*, UInt32*, HRESULT)
    get_leak_rate : Proc(IIsdbDownloadContentDescriptor*, UInt32*, HRESULT)
    get_component_tag : Proc(IIsdbDownloadContentDescriptor*, UInt8*, HRESULT)
    get_compatiblity_descriptor_length : Proc(IIsdbDownloadContentDescriptor*, UInt16*, HRESULT)
    get_compatiblity_descriptor : Proc(IIsdbDownloadContentDescriptor*, UInt8**, HRESULT)
    get_count_of_records : Proc(IIsdbDownloadContentDescriptor*, UInt16*, HRESULT)
    get_record_module_id : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt16*, HRESULT)
    get_record_module_size : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt32*, HRESULT)
    get_record_module_info_length : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt8*, HRESULT)
    get_record_module_info : Proc(IIsdbDownloadContentDescriptor*, UInt16, UInt8**, HRESULT)
    get_text_language_code : Proc(IIsdbDownloadContentDescriptor*, UInt8*, HRESULT)
    get_text_w : Proc(IIsdbDownloadContentDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IIsdbDownloadContentDescriptor_GUID = LibC::GUID.new("5298661e-cb88-4f5f-a1de-5f440c185b92")
  CLSID_IIsdbDownloadContentDescriptor = "5298661e-cb88-4f5f-a1de-5f440c185b92"
  struct IIsdbDownloadContentDescriptor
    lpVtbl : IIsdbDownloadContentDescriptorVTbl*
  end

  struct IIsdbLogoTransmissionDescriptorVTbl
    query_interface : Proc(IIsdbLogoTransmissionDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbLogoTransmissionDescriptor*, UInt32)
    release : Proc(IIsdbLogoTransmissionDescriptor*, UInt32)
    get_tag : Proc(IIsdbLogoTransmissionDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbLogoTransmissionDescriptor*, UInt8*, HRESULT)
    get_logo_transmission_type : Proc(IIsdbLogoTransmissionDescriptor*, UInt8*, HRESULT)
    get_logo_id : Proc(IIsdbLogoTransmissionDescriptor*, UInt16*, HRESULT)
    get_logo_version : Proc(IIsdbLogoTransmissionDescriptor*, UInt16*, HRESULT)
    get_download_data_id : Proc(IIsdbLogoTransmissionDescriptor*, UInt16*, HRESULT)
    get_logo_char_w : Proc(IIsdbLogoTransmissionDescriptor*, DVB_STRCONV_MODE, UInt8**, HRESULT)
  end

  IIsdbLogoTransmissionDescriptor_GUID = LibC::GUID.new("e0103f49-4ae1-4f07-9098-756db1fa88cd")
  CLSID_IIsdbLogoTransmissionDescriptor = "e0103f49-4ae1-4f07-9098-756db1fa88cd"
  struct IIsdbLogoTransmissionDescriptor
    lpVtbl : IIsdbLogoTransmissionDescriptorVTbl*
  end

  struct IIsdbSIParameterDescriptorVTbl
    query_interface : Proc(IIsdbSIParameterDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbSIParameterDescriptor*, UInt32)
    release : Proc(IIsdbSIParameterDescriptor*, UInt32)
    get_tag : Proc(IIsdbSIParameterDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbSIParameterDescriptor*, UInt8*, HRESULT)
    get_parameter_version : Proc(IIsdbSIParameterDescriptor*, UInt8*, HRESULT)
    get_update_time : Proc(IIsdbSIParameterDescriptor*, MPEG_DATE*, HRESULT)
    get_record_number_of_table : Proc(IIsdbSIParameterDescriptor*, UInt8*, HRESULT)
    get_table_id : Proc(IIsdbSIParameterDescriptor*, UInt8, UInt8*, HRESULT)
    get_table_description_length : Proc(IIsdbSIParameterDescriptor*, UInt8, UInt8*, HRESULT)
    get_table_description_bytes : Proc(IIsdbSIParameterDescriptor*, UInt8, UInt8*, UInt8*, HRESULT)
  end

  IIsdbSIParameterDescriptor_GUID = LibC::GUID.new("f837dc36-867c-426a-9111-f62093951a45")
  CLSID_IIsdbSIParameterDescriptor = "f837dc36-867c-426a-9111-f62093951a45"
  struct IIsdbSIParameterDescriptor
    lpVtbl : IIsdbSIParameterDescriptorVTbl*
  end

  struct IIsdbEmergencyInformationDescriptorVTbl
    query_interface : Proc(IIsdbEmergencyInformationDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbEmergencyInformationDescriptor*, UInt32)
    release : Proc(IIsdbEmergencyInformationDescriptor*, UInt32)
    get_tag : Proc(IIsdbEmergencyInformationDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbEmergencyInformationDescriptor*, UInt8*, HRESULT)
    get_count_of_records : Proc(IIsdbEmergencyInformationDescriptor*, UInt8*, HRESULT)
    get_service_id : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt16*, HRESULT)
    get_start_end_flag : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt8*, HRESULT)
    get_signal_level : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt8*, HRESULT)
    get_area_code : Proc(IIsdbEmergencyInformationDescriptor*, UInt8, UInt16**, UInt8*, HRESULT)
  end

  IIsdbEmergencyInformationDescriptor_GUID = LibC::GUID.new("ba6fa681-b973-4da1-9207-ac3e7f0341eb")
  CLSID_IIsdbEmergencyInformationDescriptor = "ba6fa681-b973-4da1-9207-ac3e7f0341eb"
  struct IIsdbEmergencyInformationDescriptor
    lpVtbl : IIsdbEmergencyInformationDescriptorVTbl*
  end

  struct IIsdbCADescriptorVTbl
    query_interface : Proc(IIsdbCADescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbCADescriptor*, UInt32)
    release : Proc(IIsdbCADescriptor*, UInt32)
    get_tag : Proc(IIsdbCADescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbCADescriptor*, UInt8*, HRESULT)
    get_ca_system_id : Proc(IIsdbCADescriptor*, UInt16*, HRESULT)
    get_reserved_bits : Proc(IIsdbCADescriptor*, UInt8*, HRESULT)
    get_capid : Proc(IIsdbCADescriptor*, UInt16*, HRESULT)
    get_private_data_bytes : Proc(IIsdbCADescriptor*, UInt8*, UInt8*, HRESULT)
  end

  IIsdbCADescriptor_GUID = LibC::GUID.new("0570aa47-52bc-42ae-8ca5-969f41e81aea")
  CLSID_IIsdbCADescriptor = "0570aa47-52bc-42ae-8ca5-969f41e81aea"
  struct IIsdbCADescriptor
    lpVtbl : IIsdbCADescriptorVTbl*
  end

  struct IIsdbCAServiceDescriptorVTbl
    query_interface : Proc(IIsdbCAServiceDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbCAServiceDescriptor*, UInt32)
    release : Proc(IIsdbCAServiceDescriptor*, UInt32)
    get_tag : Proc(IIsdbCAServiceDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbCAServiceDescriptor*, UInt8*, HRESULT)
    get_ca_system_id : Proc(IIsdbCAServiceDescriptor*, UInt16*, HRESULT)
    get_ca_broadcaster_group_id : Proc(IIsdbCAServiceDescriptor*, UInt8*, HRESULT)
    get_message_control : Proc(IIsdbCAServiceDescriptor*, UInt8*, HRESULT)
    get_service_ids : Proc(IIsdbCAServiceDescriptor*, UInt8*, UInt16*, HRESULT)
  end

  IIsdbCAServiceDescriptor_GUID = LibC::GUID.new("39cbeb97-ff0b-42a7-9ab9-7b9cfe70a77a")
  CLSID_IIsdbCAServiceDescriptor = "39cbeb97-ff0b-42a7-9ab9-7b9cfe70a77a"
  struct IIsdbCAServiceDescriptor
    lpVtbl : IIsdbCAServiceDescriptorVTbl*
  end

  struct IIsdbHierarchicalTransmissionDescriptorVTbl
    query_interface : Proc(IIsdbHierarchicalTransmissionDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt32)
    release : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt32)
    get_tag : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, HRESULT)
    get_future_use1 : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, HRESULT)
    get_quality_level : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, HRESULT)
    get_future_use2 : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt8*, HRESULT)
    get_reference_pid : Proc(IIsdbHierarchicalTransmissionDescriptor*, UInt16*, HRESULT)
  end

  IIsdbHierarchicalTransmissionDescriptor_GUID = LibC::GUID.new("b7b3ae90-ee0b-446d-8769-f7e2aa266aa6")
  CLSID_IIsdbHierarchicalTransmissionDescriptor = "b7b3ae90-ee0b-446d-8769-f7e2aa266aa6"
  struct IIsdbHierarchicalTransmissionDescriptor
    lpVtbl : IIsdbHierarchicalTransmissionDescriptorVTbl*
  end

  struct IPBDASiParserVTbl
    query_interface : Proc(IPBDASiParser*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPBDASiParser*, UInt32)
    release : Proc(IPBDASiParser*, UInt32)
    initialize : Proc(IPBDASiParser*, IUnknown, HRESULT)
    get_eit : Proc(IPBDASiParser*, UInt32, UInt8*, IPBDA_EIT*, HRESULT)
    get_services : Proc(IPBDASiParser*, UInt32, UInt8*, IPBDA_Services*, HRESULT)
  end

  IPBDASiParser_GUID = LibC::GUID.new("9de49a74-aba2-4a18-93e1-21f17f95c3c3")
  CLSID_IPBDASiParser = "9de49a74-aba2-4a18-93e1-21f17f95c3c3"
  struct IPBDASiParser
    lpVtbl : IPBDASiParserVTbl*
  end

  struct IPBDA_EITVTbl
    query_interface : Proc(IPBDA_EIT*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPBDA_EIT*, UInt32)
    release : Proc(IPBDA_EIT*, UInt32)
    initialize : Proc(IPBDA_EIT*, UInt32, UInt8*, HRESULT)
    get_table_id : Proc(IPBDA_EIT*, UInt8*, HRESULT)
    get_version_number : Proc(IPBDA_EIT*, UInt16*, HRESULT)
    get_service_idx : Proc(IPBDA_EIT*, UInt64*, HRESULT)
    get_count_of_records : Proc(IPBDA_EIT*, UInt32*, HRESULT)
    get_record_event_id : Proc(IPBDA_EIT*, UInt32, UInt64*, HRESULT)
    get_record_start_time : Proc(IPBDA_EIT*, UInt32, MPEG_DATE_AND_TIME*, HRESULT)
    get_record_duration : Proc(IPBDA_EIT*, UInt32, MPEG_TIME*, HRESULT)
    get_record_count_of_descriptors : Proc(IPBDA_EIT*, UInt32, UInt32*, HRESULT)
    get_record_descriptor_by_index : Proc(IPBDA_EIT*, UInt32, UInt32, IGenericDescriptor*, HRESULT)
    get_record_descriptor_by_tag : Proc(IPBDA_EIT*, UInt32, UInt8, UInt32*, IGenericDescriptor*, HRESULT)
  end

  IPBDA_EIT_GUID = LibC::GUID.new("a35f2dea-098f-4ebd-984c-2bd4c3c8ce0a")
  CLSID_IPBDA_EIT = "a35f2dea-098f-4ebd-984c-2bd4c3c8ce0a"
  struct IPBDA_EIT
    lpVtbl : IPBDA_EITVTbl*
  end

  struct IPBDA_ServicesVTbl
    query_interface : Proc(IPBDA_Services*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPBDA_Services*, UInt32)
    release : Proc(IPBDA_Services*, UInt32)
    initialize : Proc(IPBDA_Services*, UInt32, UInt8*, HRESULT)
    get_count_of_records : Proc(IPBDA_Services*, UInt32*, HRESULT)
    get_record_by_index : Proc(IPBDA_Services*, UInt32, UInt64*, HRESULT)
  end

  IPBDA_Services_GUID = LibC::GUID.new("944eab37-eed4-4850-afd2-77e7efeb4427")
  CLSID_IPBDA_Services = "944eab37-eed4-4850-afd2-77e7efeb4427"
  struct IPBDA_Services
    lpVtbl : IPBDA_ServicesVTbl*
  end

  struct IPBDAEntitlementDescriptorVTbl
    query_interface : Proc(IPBDAEntitlementDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPBDAEntitlementDescriptor*, UInt32)
    release : Proc(IPBDAEntitlementDescriptor*, UInt32)
    get_tag : Proc(IPBDAEntitlementDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IPBDAEntitlementDescriptor*, UInt16*, HRESULT)
    get_token : Proc(IPBDAEntitlementDescriptor*, UInt8**, UInt32*, HRESULT)
  end

  IPBDAEntitlementDescriptor_GUID = LibC::GUID.new("22632497-0de3-4587-aadc-d8d99017e760")
  CLSID_IPBDAEntitlementDescriptor = "22632497-0de3-4587-aadc-d8d99017e760"
  struct IPBDAEntitlementDescriptor
    lpVtbl : IPBDAEntitlementDescriptorVTbl*
  end

  struct IPBDAAttributesDescriptorVTbl
    query_interface : Proc(IPBDAAttributesDescriptor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPBDAAttributesDescriptor*, UInt32)
    release : Proc(IPBDAAttributesDescriptor*, UInt32)
    get_tag : Proc(IPBDAAttributesDescriptor*, UInt8*, HRESULT)
    get_length : Proc(IPBDAAttributesDescriptor*, UInt16*, HRESULT)
    get_attribute_payload : Proc(IPBDAAttributesDescriptor*, UInt8**, UInt32*, HRESULT)
  end

  IPBDAAttributesDescriptor_GUID = LibC::GUID.new("313b3620-3263-45a6-9533-968befbeac03")
  CLSID_IPBDAAttributesDescriptor = "313b3620-3263-45a6-9533-968befbeac03"
  struct IPBDAAttributesDescriptor
    lpVtbl : IPBDAAttributesDescriptorVTbl*
  end

  struct IBDA_TIF_REGISTRATIONVTbl
    query_interface : Proc(IBDA_TIF_REGISTRATION*, Guid*, Void**, HRESULT)
    add_ref : Proc(IBDA_TIF_REGISTRATION*, UInt32)
    release : Proc(IBDA_TIF_REGISTRATION*, UInt32)
    register_tif_ex : Proc(IBDA_TIF_REGISTRATION*, IPin, UInt32*, IUnknown*, HRESULT)
    unregister_tif : Proc(IBDA_TIF_REGISTRATION*, UInt32, HRESULT)
  end

  IBDA_TIF_REGISTRATION_GUID = LibC::GUID.new("dfef4a68-ee61-415f-9ccb-cd95f2f98a3a")
  CLSID_IBDA_TIF_REGISTRATION = "dfef4a68-ee61-415f-9ccb-cd95f2f98a3a"
  struct IBDA_TIF_REGISTRATION
    lpVtbl : IBDA_TIF_REGISTRATIONVTbl*
  end

  struct IMPEG2_TIF_CONTROLVTbl
    query_interface : Proc(IMPEG2_TIF_CONTROL*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMPEG2_TIF_CONTROL*, UInt32)
    release : Proc(IMPEG2_TIF_CONTROL*, UInt32)
    register_tif : Proc(IMPEG2_TIF_CONTROL*, IUnknown, UInt32*, HRESULT)
    unregister_tif : Proc(IMPEG2_TIF_CONTROL*, UInt32, HRESULT)
    add_pi_ds : Proc(IMPEG2_TIF_CONTROL*, UInt32, UInt32*, HRESULT)
    delete_pi_ds : Proc(IMPEG2_TIF_CONTROL*, UInt32, UInt32*, HRESULT)
    get_pid_count : Proc(IMPEG2_TIF_CONTROL*, UInt32*, HRESULT)
    get_pi_ds : Proc(IMPEG2_TIF_CONTROL*, UInt32*, UInt32*, HRESULT)
  end

  IMPEG2_TIF_CONTROL_GUID = LibC::GUID.new("f9bac2f9-4149-4916-b2ef-faa202326862")
  CLSID_IMPEG2_TIF_CONTROL = "f9bac2f9-4149-4916-b2ef-faa202326862"
  struct IMPEG2_TIF_CONTROL
    lpVtbl : IMPEG2_TIF_CONTROLVTbl*
  end

  struct ITuneRequestInfoVTbl
    query_interface : Proc(ITuneRequestInfo*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITuneRequestInfo*, UInt32)
    release : Proc(ITuneRequestInfo*, UInt32)
    get_locator_data : Proc(ITuneRequestInfo*, ITuneRequest, HRESULT)
    get_component_data : Proc(ITuneRequestInfo*, ITuneRequest, HRESULT)
    create_component_list : Proc(ITuneRequestInfo*, ITuneRequest, HRESULT)
    get_next_program : Proc(ITuneRequestInfo*, ITuneRequest, ITuneRequest*, HRESULT)
    get_previous_program : Proc(ITuneRequestInfo*, ITuneRequest, ITuneRequest*, HRESULT)
    get_next_locator : Proc(ITuneRequestInfo*, ITuneRequest, ITuneRequest*, HRESULT)
    get_previous_locator : Proc(ITuneRequestInfo*, ITuneRequest, ITuneRequest*, HRESULT)
  end

  ITuneRequestInfo_GUID = LibC::GUID.new("a3b152df-7a90-4218-ac54-9830bee8c0b6")
  CLSID_ITuneRequestInfo = "a3b152df-7a90-4218-ac54-9830bee8c0b6"
  struct ITuneRequestInfo
    lpVtbl : ITuneRequestInfoVTbl*
  end

  struct ITuneRequestInfoExVTbl
    query_interface : Proc(ITuneRequestInfoEx*, Guid*, Void**, HRESULT)
    add_ref : Proc(ITuneRequestInfoEx*, UInt32)
    release : Proc(ITuneRequestInfoEx*, UInt32)
    get_locator_data : Proc(ITuneRequestInfoEx*, ITuneRequest, HRESULT)
    get_component_data : Proc(ITuneRequestInfoEx*, ITuneRequest, HRESULT)
    create_component_list : Proc(ITuneRequestInfoEx*, ITuneRequest, HRESULT)
    get_next_program : Proc(ITuneRequestInfoEx*, ITuneRequest, ITuneRequest*, HRESULT)
    get_previous_program : Proc(ITuneRequestInfoEx*, ITuneRequest, ITuneRequest*, HRESULT)
    get_next_locator : Proc(ITuneRequestInfoEx*, ITuneRequest, ITuneRequest*, HRESULT)
    get_previous_locator : Proc(ITuneRequestInfoEx*, ITuneRequest, ITuneRequest*, HRESULT)
    create_component_list_ex : Proc(ITuneRequestInfoEx*, ITuneRequest, IUnknown*, HRESULT)
  end

  ITuneRequestInfoEx_GUID = LibC::GUID.new("ee957c52-b0d0-4e78-8dd1-b87a08bfd893")
  CLSID_ITuneRequestInfoEx = "ee957c52-b0d0-4e78-8dd1-b87a08bfd893"
  struct ITuneRequestInfoEx
    lpVtbl : ITuneRequestInfoExVTbl*
  end

  struct ISIInbandEPGEventVTbl
    query_interface : Proc(ISIInbandEPGEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISIInbandEPGEvent*, UInt32)
    release : Proc(ISIInbandEPGEvent*, UInt32)
    si_object_event : Proc(ISIInbandEPGEvent*, IDVB_EIT2, UInt32, UInt32, HRESULT)
  end

  ISIInbandEPGEvent_GUID = LibC::GUID.new("7e47913a-5a89-423d-9a2b-e15168858934")
  CLSID_ISIInbandEPGEvent = "7e47913a-5a89-423d-9a2b-e15168858934"
  struct ISIInbandEPGEvent
    lpVtbl : ISIInbandEPGEventVTbl*
  end

  struct ISIInbandEPGVTbl
    query_interface : Proc(ISIInbandEPG*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISIInbandEPG*, UInt32)
    release : Proc(ISIInbandEPG*, UInt32)
    start_siepg_scan : Proc(ISIInbandEPG*, HRESULT)
    stop_siepg_scan : Proc(ISIInbandEPG*, HRESULT)
    is_siepg_scan_running : Proc(ISIInbandEPG*, LibC::BOOL*, HRESULT)
  end

  ISIInbandEPG_GUID = LibC::GUID.new("f90ad9d0-b854-4b68-9cc1-b2cc96119d85")
  CLSID_ISIInbandEPG = "f90ad9d0-b854-4b68-9cc1-b2cc96119d85"
  struct ISIInbandEPG
    lpVtbl : ISIInbandEPGVTbl*
  end

  struct IGuideDataEventVTbl
    query_interface : Proc(IGuideDataEvent*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGuideDataEvent*, UInt32)
    release : Proc(IGuideDataEvent*, UInt32)
    guide_data_acquired : Proc(IGuideDataEvent*, HRESULT)
    program_changed : Proc(IGuideDataEvent*, VARIANT, HRESULT)
    service_changed : Proc(IGuideDataEvent*, VARIANT, HRESULT)
    schedule_entry_changed : Proc(IGuideDataEvent*, VARIANT, HRESULT)
    program_deleted : Proc(IGuideDataEvent*, VARIANT, HRESULT)
    service_deleted : Proc(IGuideDataEvent*, VARIANT, HRESULT)
    schedule_deleted : Proc(IGuideDataEvent*, VARIANT, HRESULT)
  end

  IGuideDataEvent_GUID = LibC::GUID.new("efda0c80-f395-42c3-9b3c-56b37dec7bb7")
  CLSID_IGuideDataEvent = "efda0c80-f395-42c3-9b3c-56b37dec7bb7"
  struct IGuideDataEvent
    lpVtbl : IGuideDataEventVTbl*
  end

  struct IGuideDataPropertyVTbl
    query_interface : Proc(IGuideDataProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGuideDataProperty*, UInt32)
    release : Proc(IGuideDataProperty*, UInt32)
    get_name : Proc(IGuideDataProperty*, UInt8**, HRESULT)
    get_language : Proc(IGuideDataProperty*, Int32*, HRESULT)
    get_value : Proc(IGuideDataProperty*, VARIANT*, HRESULT)
  end

  IGuideDataProperty_GUID = LibC::GUID.new("88ec5e58-bb73-41d6-99ce-66c524b8b591")
  CLSID_IGuideDataProperty = "88ec5e58-bb73-41d6-99ce-66c524b8b591"
  struct IGuideDataProperty
    lpVtbl : IGuideDataPropertyVTbl*
  end

  struct IEnumGuideDataPropertiesVTbl
    query_interface : Proc(IEnumGuideDataProperties*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumGuideDataProperties*, UInt32)
    release : Proc(IEnumGuideDataProperties*, UInt32)
    next : Proc(IEnumGuideDataProperties*, UInt32, IGuideDataProperty*, UInt32*, HRESULT)
    skip : Proc(IEnumGuideDataProperties*, UInt32, HRESULT)
    reset : Proc(IEnumGuideDataProperties*, HRESULT)
    clone : Proc(IEnumGuideDataProperties*, IEnumGuideDataProperties*, HRESULT)
  end

  IEnumGuideDataProperties_GUID = LibC::GUID.new("ae44423b-4571-475c-ad2c-f40a771d80ef")
  CLSID_IEnumGuideDataProperties = "ae44423b-4571-475c-ad2c-f40a771d80ef"
  struct IEnumGuideDataProperties
    lpVtbl : IEnumGuideDataPropertiesVTbl*
  end

  struct IEnumTuneRequestsVTbl
    query_interface : Proc(IEnumTuneRequests*, Guid*, Void**, HRESULT)
    add_ref : Proc(IEnumTuneRequests*, UInt32)
    release : Proc(IEnumTuneRequests*, UInt32)
    next : Proc(IEnumTuneRequests*, UInt32, ITuneRequest*, UInt32*, HRESULT)
    skip : Proc(IEnumTuneRequests*, UInt32, HRESULT)
    reset : Proc(IEnumTuneRequests*, HRESULT)
    clone : Proc(IEnumTuneRequests*, IEnumTuneRequests*, HRESULT)
  end

  IEnumTuneRequests_GUID = LibC::GUID.new("1993299c-ced6-4788-87a3-420067dce0c7")
  CLSID_IEnumTuneRequests = "1993299c-ced6-4788-87a3-420067dce0c7"
  struct IEnumTuneRequests
    lpVtbl : IEnumTuneRequestsVTbl*
  end

  struct IGuideDataVTbl
    query_interface : Proc(IGuideData*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGuideData*, UInt32)
    release : Proc(IGuideData*, UInt32)
    get_services : Proc(IGuideData*, IEnumTuneRequests*, HRESULT)
    get_service_properties : Proc(IGuideData*, ITuneRequest, IEnumGuideDataProperties*, HRESULT)
    get_guide_program_i_ds : Proc(IGuideData*, IEnumVARIANT*, HRESULT)
    get_program_properties : Proc(IGuideData*, VARIANT, IEnumGuideDataProperties*, HRESULT)
    get_schedule_entry_i_ds : Proc(IGuideData*, IEnumVARIANT*, HRESULT)
    get_schedule_entry_properties : Proc(IGuideData*, VARIANT, IEnumGuideDataProperties*, HRESULT)
  end

  IGuideData_GUID = LibC::GUID.new("61571138-5b01-43cd-aeaf-60b784a0bf93")
  CLSID_IGuideData = "61571138-5b01-43cd-aeaf-60b784a0bf93"
  struct IGuideData
    lpVtbl : IGuideDataVTbl*
  end

  struct IGuideDataLoaderVTbl
    query_interface : Proc(IGuideDataLoader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IGuideDataLoader*, UInt32)
    release : Proc(IGuideDataLoader*, UInt32)
    init : Proc(IGuideDataLoader*, IGuideData, HRESULT)
    terminate : Proc(IGuideDataLoader*, HRESULT)
  end

  IGuideDataLoader_GUID = LibC::GUID.new("4764ff7c-fa95-4525-af4d-d32236db9e38")
  CLSID_IGuideDataLoader = "4764ff7c-fa95-4525-af4d-d32236db9e38"
  struct IGuideDataLoader
    lpVtbl : IGuideDataLoaderVTbl*
  end


  # Params # hr : HRESULT [In],pbuffer : UInt8* [In],maxlen : UInt32 [In]
  fun AMGetErrorTextA(hr : HRESULT, pbuffer : UInt8*, maxlen : UInt32) : UInt32

  # Params # hr : HRESULT [In],pbuffer : Char* [In],maxlen : UInt32 [In]
  fun AMGetErrorTextW(hr : HRESULT, pbuffer : Char*, maxlen : UInt32) : UInt32
end
