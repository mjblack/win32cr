require "./../foundation.cr"
require "./../system/com.cr"
require "./../graphics/gdi.cr"
require "./../graphics/direct3_d9.cr"
require "./../graphics/dxgi/common.cr"
require "./../graphics/direct3_d12.cr"
require "./dx_media_objects.cr"
require "./../system/com/structured_storage.cr"
require "./audio.cr"
require "./../ui/shell/properties_system.cr"
require "./../system/win_rt.cr"
require "./../devices/properties.cr"

module Win32cr::Media::MediaFoundation
  alias PDXVAHDSW_CreateDevice = Proc(Void*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_ProposeVideoPrivateFormat = Proc(Win32cr::Foundation::HANDLE, Win32cr::Graphics::Direct3D9::D3DFORMAT*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessorDeviceCaps = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Win32cr::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, Win32cr::Media::MediaFoundation::DXVAHD_VPDEVCAPS*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessorOutputFormats = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Win32cr::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessorInputFormats = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Win32cr::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessorCaps = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Win32cr::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_VPCAPS*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessorCustomRates = Proc(Win32cr::Foundation::HANDLE, LibC::GUID*, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_CUSTOM_RATE_DATA*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessorFilterRange = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::MediaFoundation::DXVAHD_FILTER, Win32cr::Media::MediaFoundation::DXVAHD_FILTER_RANGE_DATA*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_DestroyDevice = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_CreateVideoProcessor = Proc(Win32cr::Foundation::HANDLE, LibC::GUID*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_SetVideoProcessBltState = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::MediaFoundation::DXVAHD_BLT_STATE, UInt32, Void*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessBltStatePrivate = Proc(Win32cr::Foundation::HANDLE, Win32cr::Media::MediaFoundation::DXVAHD_BLT_STATE_PRIVATE_DATA*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_SetVideoProcessStreamState = Proc(Win32cr::Foundation::HANDLE, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_STREAM_STATE, UInt32, Void*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_GetVideoProcessStreamStatePrivate = Proc(Win32cr::Foundation::HANDLE, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_STREAM_STATE_PRIVATE_DATA*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_VideoProcessBltHD = Proc(Win32cr::Foundation::HANDLE, Void*, UInt32, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_STREAM_DATA*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_DestroyVideoProcessor = Proc(Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT)*

  alias PDXVAHDSW_Plugin = Proc(UInt32, Void*, Win32cr::Foundation::HRESULT)*

  alias PDXVAHD_CreateDevice = Proc(Void*, Win32cr::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Win32cr::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, Win32cr::Media::MediaFoundation::PDXVAHDSW_Plugin, Void**, Win32cr::Foundation::HRESULT)*

  alias MFPERIODICCALLBACK = Proc(Void*, Void)*

  MEDIASUBTYPE_None = "e436eb8e-524f-11ce-9f53-0020af0ba770"
  MEDIATYPE_Video = "73646976-0000-0010-8000-00aa00389b71"
  MEDIATYPE_Audio = "73647561-0000-0010-8000-00aa00389b71"
  MEDIATYPE_Text = "73747874-0000-0010-8000-00aa00389b71"
  MEDIATYPE_Midi = "7364696d-0000-0010-8000-00aa00389b71"
  MEDIATYPE_Stream = "e436eb83-524f-11ce-9f53-0020af0ba770"
  MEDIATYPE_Interleaved = "73766169-0000-0010-8000-00aa00389b71"
  MEDIATYPE_File = "656c6966-0000-0010-8000-00aa00389b71"
  MEDIATYPE_ScriptCommand = "73636d64-0000-0010-8000-00aa00389b71"
  MEDIATYPE_AUXLine21Data = "670aea80-3a82-11d0-b79b-00aa003767a7"
  MEDIATYPE_AUXTeletextPage = "11264acb-37de-4eba-8c35-7f04a1a68332"
  MEDIATYPE_CC_CONTAINER = "aeb312e9-3357-43ca-b701-97ec198e2b62"
  MEDIATYPE_DTVCCData = "fb77e152-53b2-499c-b46b-509fc33edfd7"
  MEDIATYPE_MSTVCaption = "b88b8a89-b049-4c80-adcf-5898985e22c1"
  MEDIATYPE_VBI = "f72a76e1-eb0a-11d0-ace4-0000c0cc16ba"
  MEDIASUBTYPE_DVB_SUBTITLES = "34ffcbc3-d5b3-4171-9002-d4c60301697f"
  MEDIASUBTYPE_ISDB_CAPTIONS = "059dd67d-2e55-4d41-8d1b-01f5e4f50607"
  MEDIASUBTYPE_ISDB_SUPERIMPOSE = "36dc6d28-f1a6-4216-9048-9cfcefeb5eba"
  MEDIATYPE_Timecode = "0482dee3-7817-11cf-8a03-00aa006ecb65"
  MEDIATYPE_LMRT = "74726c6d-0000-0010-8000-00aa00389b71"
  MEDIATYPE_URL_STREAM = "736c7275-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_CLPL = "4c504c43-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_YUYV = "56595559-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IYUV = "56555949-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_YVU9 = "39555659-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Y411 = "31313459-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Y41P = "50313459-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_YUY2 = "32595559-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_YVYU = "55595659-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_UYVY = "59565955-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Y211 = "31313259-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_CLJR = "524a4c43-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IF09 = "39304649-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_CPLA = "414c5043-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MJPG = "47504a4d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_TVMJ = "4a4d5654-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WAKE = "454b4157-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_CFCC = "43434643-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IJPG = "47504a49-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Plum = "6d756c50-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DVCS = "53435644-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_H264 = "34363248-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DVSD = "44535644-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MDVF = "4656444d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RGB1 = "e436eb78-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_RGB4 = "e436eb79-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_RGB8 = "e436eb7a-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_RGB565 = "e436eb7b-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_RGB555 = "e436eb7c-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_RGB24 = "e436eb7d-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_RGB32 = "e436eb7e-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_ARGB1555 = "297c55af-e209-4cb3-b757-c76d6b9c88a8"
  MEDIASUBTYPE_ARGB4444 = "6e6415e6-5c24-425f-93cd-80102b3d1cca"
  MEDIASUBTYPE_ARGB32 = "773c9ac0-3274-11d0-b724-00aa006c1a01"
  MEDIASUBTYPE_A2R10G10B10 = "2f8bb76d-b644-4550-acf3-d30caa65d5c5"
  MEDIASUBTYPE_A2B10G10R10 = "576f7893-bdf6-48c4-875f-ae7b81834567"
  MEDIASUBTYPE_AYUV = "56555941-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_AI44 = "34344941-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IA44 = "34344149-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RGB32_D3D_DX7_RT = "32335237-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RGB16_D3D_DX7_RT = "36315237-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_ARGB32_D3D_DX7_RT = "38384137-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_ARGB4444_D3D_DX7_RT = "34344137-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_ARGB1555_D3D_DX7_RT = "35314137-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RGB32_D3D_DX9_RT = "32335239-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RGB16_D3D_DX9_RT = "36315239-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_ARGB32_D3D_DX9_RT = "38384139-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_ARGB4444_D3D_DX9_RT = "34344139-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_ARGB1555_D3D_DX9_RT = "35314139-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_YV12 = "32315659-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NV12 = "3231564e-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NV11 = "3131564e-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NV24 = "3432564e-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_420O = "4f303234-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IMC1 = "31434d49-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IMC2 = "32434d49-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IMC3 = "33434d49-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IMC4 = "34434d49-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_S340 = "30343353-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_S342 = "32343353-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Overlay = "e436eb7f-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_MPEG1Packet = "e436eb80-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_MPEG1Payload = "e436eb81-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_MPEG1AudioPayload = "00000050-0000-0010-8000-00aa00389b71"
  MEDIATYPE_MPEG1SystemStream = "e436eb82-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_MPEG1System = "e436eb84-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_MPEG1VideoCD = "e436eb85-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_MPEG1Video = "e436eb86-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_MPEG1Audio = "e436eb87-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_Avi = "e436eb88-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_Asf = "3db80f90-9412-11d1-aded-0000f8754b99"
  MEDIASUBTYPE_QTMovie = "e436eb89-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_QTRpza = "617a7072-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_QTSmc = "20636d73-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_QTRle = "20656c72-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_QTJpeg = "6765706a-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_PCMAudio_Obsolete = "e436eb8a-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_PCM = "00000001-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WAVE = "e436eb8b-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_AU = "e436eb8c-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_AIFF = "e436eb8d-524f-11ce-9f53-0020af0ba770"
  MEDIASUBTYPE_dvsd = "64737664-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_dvhd = "64687664-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_dvsl = "6c737664-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_dv25 = "35327664-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_dv50 = "30357664-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_dvh1 = "31687664-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Line21_BytePair = "6e8d4a22-310c-11d0-b79a-00aa003767a7"
  MEDIASUBTYPE_Line21_GOPPacket = "6e8d4a23-310c-11d0-b79a-00aa003767a7"
  MEDIASUBTYPE_Line21_VBIRawData = "6e8d4a24-310c-11d0-b79a-00aa003767a7"
  MEDIASUBTYPE_708_608Data = "0af414bc-4ed2-445e-9839-8f095568ab3c"
  MEDIASUBTYPE_DtvCcData = "f52addaa-36f0-43f5-95ea-6d866484262a"
  MEDIASUBTYPE_CC_CONTAINER = "7ea626db-54da-437b-be9f-f73073adfa3c"
  MEDIASUBTYPE_TELETEXT = "f72a76e3-eb0a-11d0-ace4-0000c0cc16ba"
  MEDIASUBTYPE_VBI = "663da43c-03e8-4e9a-9cd5-bf11ed0def76"
  MEDIASUBTYPE_WSS = "2791d576-8e7a-466f-9e90-5d3f3083738b"
  MEDIASUBTYPE_XDS = "01ca73e3-dce6-4575-afe1-2bf1c902caf3"
  MEDIASUBTYPE_VPS = "a1b3f620-9792-4d8d-81a4-86af25772090"
  MEDIASUBTYPE_DRM_Audio = "00000009-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_IEEE_FLOAT = "00000003-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DOLBY_AC3_SPDIF = "00000092-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RAW_SPORT = "00000240-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_SPDIF_TAG_241h = "00000241-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DssVideo = "a0af4f81-e163-11d0-bad9-00609744111a"
  MEDIASUBTYPE_DssAudio = "a0af4f82-e163-11d0-bad9-00609744111a"
  MEDIASUBTYPE_VPVideo = "5a9b6a40-1a22-11d1-bad9-00609744111a"
  MEDIASUBTYPE_VPVBI = "5a9b6a41-1a22-11d1-bad9-00609744111a"
  CLSID_CaptureGraphBuilder = "bf87b6e0-8c27-11d0-b3f0-00aa003761c5"
  CLSID_CaptureGraphBuilder2 = "bf87b6e1-8c27-11d0-b3f0-00aa003761c5"
  CLSID_ProtoFilterGraph = "e436ebb0-524f-11ce-9f53-0020af0ba770"
  CLSID_SystemClock = "e436ebb1-524f-11ce-9f53-0020af0ba770"
  CLSID_FilterMapper = "e436ebb2-524f-11ce-9f53-0020af0ba770"
  CLSID_FilterGraph = "e436ebb3-524f-11ce-9f53-0020af0ba770"
  CLSID_FilterGraphNoThread = "e436ebb8-524f-11ce-9f53-0020af0ba770"
  CLSID_FilterGraphPrivateThread = "a3ecbc41-581a-4476-b693-a63340462d8b"
  CLSID_MPEG1Doc = "e4bbd160-4269-11ce-838d-00aa0055595a"
  CLSID_FileSource = "701722e0-8ae3-11ce-a85c-00aa002feab5"
  CLSID_MPEG1PacketPlayer = "26c25940-4ca9-11ce-a828-00aa002feab5"
  CLSID_MPEG1Splitter = "336475d0-942a-11ce-a870-00aa002feab5"
  CLSID_CMpegVideoCodec = "feb50740-7bef-11ce-9bd9-0000e202599c"
  CLSID_CMpegAudioCodec = "4a2286e0-7bef-11ce-9bd9-0000e202599c"
  CLSID_TextRender = "e30629d3-27e5-11ce-875d-00608cb78066"
  CLSID_InfTee = "f8388a40-d5bb-11d0-be5a-0080c706568e"
  CLSID_AviSplitter = "1b544c20-fd0b-11ce-8c63-00aa0044b51e"
  CLSID_AviReader = "1b544c21-fd0b-11ce-8c63-00aa0044b51e"
  CLSID_VfwCapture = "1b544c22-fd0b-11ce-8c63-00aa0044b51e"
  CLSID_CaptureProperties = "1b544c22-fd0b-11ce-8c63-00aa0044b51f"
  CLSID_FGControl = "e436ebb4-524f-11ce-9f53-0020af0ba770"
  CLSID_MOVReader = "44584800-f8ee-11ce-b2d4-00dd01101b85"
  CLSID_QuickTimeParser = "d51bd5a0-7548-11cf-a520-0080c77ef58a"
  CLSID_QTDec = "fdfe9681-74a3-11d0-afa7-00aa00b67a42"
  CLSID_AVIDoc = "d3588ab0-0781-11ce-b03a-0020af0ba770"
  CLSID_VideoRenderer = "70e102b0-5556-11ce-97c0-00aa0055595a"
  CLSID_Colour = "1643e180-90f5-11ce-97d5-00aa0055595a"
  CLSID_Dither = "1da08500-9edc-11cf-bc10-00aa00ac74f6"
  CLSID_ModexRenderer = "07167665-5011-11cf-bf33-00aa0055595a"
  CLSID_AudioRender = "e30629d1-27e5-11ce-875d-00608cb78066"
  CLSID_AudioProperties = "05589faf-c356-11ce-bf01-00aa0055595a"
  CLSID_DSoundRender = "79376820-07d0-11cf-a24d-0020afd79767"
  CLSID_AudioRecord = "e30629d2-27e5-11ce-875d-00608cb78066"
  CLSID_AudioInputMixerProperties = "2ca8ca52-3c3f-11d2-b73d-00c04fb6bd3d"
  CLSID_AVIDec = "cf49d4e0-1115-11ce-b03a-0020af0ba770"
  CLSID_AVIDraw = "a888df60-1e90-11cf-ac98-00aa004c0fa9"
  CLSID_ACMWrapper = "6a08cf80-0e18-11cf-a24d-0020afd79767"
  CLSID_AsyncReader = "e436ebb5-524f-11ce-9f53-0020af0ba770"
  CLSID_URLReader = "e436ebb6-524f-11ce-9f53-0020af0ba770"
  CLSID_PersistMonikerPID = "e436ebb7-524f-11ce-9f53-0020af0ba770"
  CLSID_AVICo = "d76e2820-1563-11cf-ac98-00aa004c0fa9"
  CLSID_FileWriter = "8596e5f0-0da5-11d0-bd21-00a0c911ce86"
  CLSID_AviDest = "e2510970-f137-11ce-8b67-00aa00a3f1a6"
  CLSID_AviMuxProptyPage = "c647b5c0-157c-11d0-bd23-00a0c911ce86"
  CLSID_AviMuxProptyPage1 = "0a9ae910-85c0-11d0-bd42-00a0c911ce86"
  CLSID_AVIMIDIRender = "07b65360-c445-11ce-afde-00aa006c14f4"
  CLSID_WMAsfReader = "187463a0-5bb7-11d3-acbe-0080c75e246e"
  CLSID_WMAsfWriter = "7c23220e-55bb-11d3-8b16-00c04fb6bd3d"
  CLSID_MPEG2Demultiplexer = "afb6c280-2c41-11d3-8a60-0000f81e0e4a"
  CLSID_MPEG2Demultiplexer_NoClock = "687d3367-3644-467a-adfe-6cd7a85c4a2c"
  CLSID_MMSPLITTER = "3ae86b20-7be8-11d1-abe6-00a0c905f375"
  CLSID_StreamBufferSink = "2db47ae5-cf39-43c2-b4d6-0cd8d90946f4"
  CLSID_SBE2Sink = "e2448508-95da-4205-9a27-7ec81e723b1a"
  CLSID_StreamBufferSource = "c9f5fe02-f851-4eb5-99ee-ad602af1e619"
  CLSID_StreamBufferConfig = "fa8a68b2-c864-4ba2-ad53-d3876a87494b"
  CLSID_StreamBufferPropertyHandler = "e37a73f8-fb01-43dc-914e-aaee76095ab9"
  CLSID_StreamBufferThumbnailHandler = "713790ee-5ee1-45ba-8070-a1337d2762fa"
  CLSID_Mpeg2VideoStreamAnalyzer = "6cfad761-735d-4aa5-8afc-af91a7d61eba"
  CLSID_StreamBufferRecordingAttributes = "ccaa63ac-1057-4778-ae92-1206ab9acee6"
  CLSID_StreamBufferComposeRecording = "d682c4ba-a90a-42fe-b9e1-03109849c423"
  CLSID_SBE2File = "93a094d7-51e8-485b-904a-8d6b97dc6b39"
  CLSID_DVVideoCodec = "b1b77c00-c3e4-11cf-af79-00aa00b67a42"
  CLSID_DVVideoEnc = "13aa3650-bb6f-11d0-afb9-00aa00b67a42"
  CLSID_DVSplitter = "4eb31670-9fc6-11cf-af6e-00aa00b67a42"
  CLSID_DVMux = "129d7e40-c10d-11d0-afb9-00aa00b67a42"
  CLSID_SeekingPassThru = "060af76c-68dd-11d0-8fc1-00c04fd9189d"
  CLSID_Line21Decoder = "6e8d4a20-310c-11d0-b79a-00aa003767a7"
  CLSID_Line21Decoder2 = "e4206432-01a1-4bee-b3e1-3702c8edc574"
  CLSID_CCAFilter = "3d07a539-35ca-447c-9b05-8d85ce924f9e"
  CLSID_OverlayMixer = "cd8743a1-3736-11d0-9e69-00c04fd7c15b"
  CLSID_VBISurfaces = "814b9800-1c88-11d1-bad9-00609744111a"
  CLSID_WSTDecoder = "70bc06e0-5666-11d3-a184-00105aef9f33"
  CLSID_MjpegDec = "301056d0-6dff-11d2-9eeb-006008039e37"
  CLSID_MJPGEnc = "b80ab0a0-7416-11d2-9eeb-006008039e37"
  CLSID_SystemDeviceEnum = "62be5d10-60eb-11d0-bd3b-00a0c911ce86"
  CLSID_CDeviceMoniker = "4315d437-5b8c-11d0-bd3b-00a0c911ce86"
  CLSID_VideoInputDeviceCategory = "860bb310-5d01-11d0-bd3b-00a0c911ce86"
  CLSID_CVidCapClassManager = "860bb310-5d01-11d0-bd3b-00a0c911ce86"
  CLSID_LegacyAmFilterCategory = "083863f1-70de-11d0-bd40-00a0c911ce86"
  CLSID_CQzFilterClassManager = "083863f1-70de-11d0-bd40-00a0c911ce86"
  CLSID_VideoCompressorCategory = "33d9a760-90c8-11d0-bd43-00a0c911ce86"
  CLSID_CIcmCoClassManager = "33d9a760-90c8-11d0-bd43-00a0c911ce86"
  CLSID_AudioCompressorCategory = "33d9a761-90c8-11d0-bd43-00a0c911ce86"
  CLSID_CAcmCoClassManager = "33d9a761-90c8-11d0-bd43-00a0c911ce86"
  CLSID_AudioInputDeviceCategory = "33d9a762-90c8-11d0-bd43-00a0c911ce86"
  CLSID_CWaveinClassManager = "33d9a762-90c8-11d0-bd43-00a0c911ce86"
  CLSID_AudioRendererCategory = "e0f158e1-cb04-11d0-bd4e-00a0c911ce86"
  CLSID_CWaveOutClassManager = "e0f158e1-cb04-11d0-bd4e-00a0c911ce86"
  CLSID_MidiRendererCategory = "4efe2452-168a-11d1-bc76-00c04fb9453b"
  CLSID_CMidiOutClassManager = "4efe2452-168a-11d1-bc76-00c04fb9453b"
  CLSID_TransmitCategory = "cc7bfb41-f175-11d1-a392-00e0291f3959"
  CLSID_DeviceControlCategory = "cc7bfb46-f175-11d1-a392-00e0291f3959"
  CLSID_ActiveMovieCategories = "da4e3da0-d07d-11d0-bd50-00a0c911ce86"
  CLSID_DVDHWDecodersCategory = "2721ae20-7e70-11d0-a5d6-28db04c10000"
  CLSID_MediaEncoderCategory = "7d22e920-5ca9-4787-8c2b-a6779bd11781"
  CLSID_MediaMultiplexerCategory = "236c9559-adce-4736-bf72-bab34e392196"
  CLSID_FilterMapper2 = "cda42200-bd88-11d0-bd4e-00a0c911ce86"
  CLSID_MemoryAllocator = "1e651cc0-b199-11d0-8212-00c04fc32c45"
  CLSID_MediaPropertyBag = "cdbd8d00-c193-11d0-bd4e-00a0c911ce86"
  CLSID_DvdGraphBuilder = "fcc152b7-f372-11d0-8e00-00c04fd7c08b"
  CLSID_DVDNavigator = "9b8c4620-2c1a-11d0-8493-00a02438ad48"
  CLSID_DVDState = "f963c5cf-a659-4a93-9638-caf3cd277d13"
  CLSID_SmartTee = "cc58e280-8aa1-11d1-b3f1-00aa003761c5"
  CLSID_DtvCcFilter = "fb056ba0-2502-45b9-8e86-2b40de84ad29"
  CLSID_CaptionsFilter = "2f7ee4b6-6ff5-4eb4-b24a-2bfc41117171"
  CLSID_SubtitlesFilter = "9f22cfea-ce07-41ab-8ba0-c7364af90af9"
  CLSID_DirectShowPluginControl = "8670c736-f614-427b-8ada-bbadc587194b"
  FORMAT_None = "0f6417d6-c318-11d0-a43f-00a0c9223196"
  FORMAT_VideoInfo = "05589f80-c356-11ce-bf01-00aa0055595a"
  FORMAT_VideoInfo2 = "f72a76a0-eb0a-11d0-ace4-0000c0cc16ba"
  FORMAT_WaveFormatEx = "05589f81-c356-11ce-bf01-00aa0055595a"
  FORMAT_MPEGVideo = "05589f82-c356-11ce-bf01-00aa0055595a"
  FORMAT_MPEGStreams = "05589f83-c356-11ce-bf01-00aa0055595a"
  FORMAT_DvInfo = "05589f84-c356-11ce-bf01-00aa0055595a"
  FORMAT_525WSS = "c7ecf04d-4582-4869-9abb-bfb523b62edf"
  CLSID_DirectDrawProperties = "944d4c00-dd52-11ce-bf0e-00aa0055595a"
  CLSID_PerformanceProperties = "59ce6880-acf8-11cf-b56e-0080c7c4b68a"
  CLSID_QualityProperties = "418afb70-f8b8-11ce-aac6-0020af0b99a3"
  CLSID_VPObject = "ce292861-fc88-11d0-9e69-00c04fd7c15b"
  CLSID_VPVBIObject = "814b9801-1c88-11d1-bad9-00609744111a"
  CLSID_DVDecPropertiesPage = "101193c0-0bfe-11d0-af91-00aa00b67a42"
  CLSID_DVEncPropertiesPage = "4150f050-bb6f-11d0-afb9-00aa00b67a42"
  CLSID_DVMuxPropertyPage = "4db880e0-c10d-11d0-afb9-00aa00b67a42"
  CLSID_WstDecoderPropertyPage = "04e27f80-91e4-11d3-a184-00105aef9f33"
  FORMAT_AnalogVideo = "0482dde0-7817-11cf-8a03-00aa006ecb65"
  MEDIATYPE_AnalogVideo = "0482dde1-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_NTSC_M = "0482dde2-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_B = "0482dde5-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_D = "0482dde6-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_G = "0482dde7-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_H = "0482dde8-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_I = "0482dde9-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_M = "0482ddea-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_N = "0482ddeb-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_PAL_N_COMBO = "0482ddec-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_SECAM_B = "0482ddf0-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_SECAM_D = "0482ddf1-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_SECAM_G = "0482ddf2-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_SECAM_H = "0482ddf3-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_SECAM_K = "0482ddf4-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_SECAM_K1 = "0482ddf5-7817-11cf-8a03-00aa006ecb65"
  MEDIASUBTYPE_AnalogVideo_SECAM_L = "0482ddf6-7817-11cf-8a03-00aa006ecb65"
  MEDIATYPE_AnalogAudio = "0482dee1-7817-11cf-8a03-00aa006ecb65"
  FORMAT_CAPTIONED_H264VIDEO = "a4efc024-873e-4da3-898b-474ddbd79fd0"
  FORMAT_CC_CONTAINER = "50997a4a-e508-4054-a2b2-10ff0ac1a69a"
  CAPTION_FORMAT_ATSC = "3ed9cb31-fd10-4ade-bccc-fb9105d2f3ef"
  CAPTION_FORMAT_DVB = "12230db4-ff2a-447e-bb88-6841c416d068"
  CAPTION_FORMAT_DIRECTV = "e9ca1ce7-915e-47be-9bb9-bf1d8a13a5ec"
  CAPTION_FORMAT_ECHOSTAR = "ebb1a262-1158-4b99-ae80-92ac776952c4"
  FORMAT_CAPTIONED_MPEG2VIDEO = "7ab2ada2-81b6-4f14-b3c8-d0c486393b67"
  TIME_FORMAT_NONE = "00000000-0000-0000-0000-000000000000"
  TIME_FORMAT_FRAME = "7b785570-8c82-11cf-bc0c-00aa00ac74f6"
  TIME_FORMAT_BYTE = "7b785571-8c82-11cf-bc0c-00aa00ac74f6"
  TIME_FORMAT_SAMPLE = "7b785572-8c82-11cf-bc0c-00aa00ac74f6"
  TIME_FORMAT_FIELD = "7b785573-8c82-11cf-bc0c-00aa00ac74f6"
  TIME_FORMAT_MEDIA_TIME = "7b785574-8c82-11cf-bc0c-00aa00ac74f6"
  AMPROPSETID_Pin = "9b00f101-1567-11d1-b3f1-00aa003761c5"
  PIN_CATEGORY_CAPTURE = "fb6c4281-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_PREVIEW = "fb6c4282-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_ANALOGVIDEOIN = "fb6c4283-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_VBI = "fb6c4284-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_VIDEOPORT = "fb6c4285-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_NABTS = "fb6c4286-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_EDS = "fb6c4287-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_TELETEXT = "fb6c4288-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_CC = "fb6c4289-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_STILL = "fb6c428a-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_TIMECODE = "fb6c428b-0353-11d1-905f-0000c0cc16ba"
  PIN_CATEGORY_VIDEOPORT_VBI = "fb6c428c-0353-11d1-905f-0000c0cc16ba"
  LOOK_UPSTREAM_ONLY = "ac798be0-98e3-11d1-b3f1-00aa003761c5"
  LOOK_DOWNSTREAM_ONLY = "ac798be1-98e3-11d1-b3f1-00aa003761c5"
  CLSID_TVTunerFilterPropertyPage = "266eee41-6c63-11cf-8a03-00aa006ecb65"
  CLSID_CrossbarFilterPropertyPage = "71f96461-78f3-11d0-a18c-00a0c9118956"
  CLSID_TVAudioFilterPropertyPage = "71f96463-78f3-11d0-a18c-00a0c9118956"
  CLSID_VideoProcAmpPropertyPage = "71f96464-78f3-11d0-a18c-00a0c9118956"
  CLSID_CameraControlPropertyPage = "71f96465-78f3-11d0-a18c-00a0c9118956"
  CLSID_AnalogVideoDecoderPropertyPage = "71f96466-78f3-11d0-a18c-00a0c9118956"
  CLSID_VideoStreamConfigPropertyPage = "71f96467-78f3-11d0-a18c-00a0c9118956"
  CLSID_AudioRendererAdvancedProperties = "37e92a92-d9aa-11d2-bf84-8ef2b1555aed"
  CLSID_VideoMixingRenderer = "b87beb7b-8d29-423f-ae4d-6582c10175ac"
  CLSID_VideoRendererDefault = "6bc1cffa-8fc1-4261-ac22-cfb4cc38db50"
  CLSID_AllocPresenter = "99d54f63-1a69-41ae-aa4d-c976eb3f0713"
  CLSID_AllocPresenterDDXclMode = "4444ac9e-242e-471b-a3c7-45dcd46352bc"
  CLSID_VideoPortManager = "6f26a6cd-967b-47fd-874a-7aed2c9d25a2"
  CLSID_VideoMixingRenderer9 = "51b4abf3-748f-4e3b-a276-c828330e926a"
  CLSID_EnhancedVideoRenderer = "fa10746c-9b63-4b6c-bc49-fc300ea5f256"
  CLSID_MFVideoMixer9 = "e474e05a-ab65-4f6a-827c-218b1baaf31f"
  CLSID_MFVideoPresenter9 = "98455561-5136-4d28-ab08-4cee40ea2781"
  CLSID_EVRTearlessWindowPresenter9 = "a0a7a57b-59b2-4919-a694-add0a526c373"
  CLSID_EVRPlaybackPipelineOptimizer = "62079164-233b-41f8-a80f-f01705f514a8"
  EVRConfig_ForceBob = "e447df01-10ca-4d17-b17e-6a840f8a3a4c"
  EVRConfig_ForceThrottle = "e447df03-10ca-4d17-b17e-6a840f8a3a4c"
  EVRConfig_ForceHalfInterlace = "e447df05-10ca-4d17-b17e-6a840f8a3a4c"
  EVRConfig_ForceScaling = "e447df07-10ca-4d17-b17e-6a840f8a3a4c"
  EVRConfig_ForceBatching = "e447df09-10ca-4d17-b17e-6a840f8a3a4c"
  CLSID_NetworkProvider = "b2f3a67c-29da-4c78-8831-091ed509a475"
  CLSID_ATSCNetworkProvider = "0dad2fdd-5fd7-11d3-8f50-00c04f7971e2"
  CLSID_ATSCNetworkPropertyPage = "e3444d16-5ac4-4386-88df-13fd230e1dda"
  CLSID_DVBSNetworkProvider = "fa4b375a-45b4-4d45-8440-263957b11623"
  CLSID_DVBTNetworkProvider = "216c62df-6d7f-4e9a-8571-05f14edb766a"
  CLSID_DVBCNetworkProvider = "dc0c0fe7-0485-4266-b93f-68fbf80ed834"
  DSATTRIB_UDCRTag = "eb7836ca-14ff-4919-bce7-3af12319e50c"
  DSATTRIB_PicSampleSeq = "2f5bae02-7b8f-4f60-82d6-e4ea2f1f4c99"
  DSATTRIB_OptionalVideoAttributes = "5a5f08ca-55c2-4033-92ab-55db8f781226"
  DSATTRIB_CC_CONTAINER_INFO = "e7e050fb-dd5d-40dd-9915-35dcb81bdc8a"
  DSATTRIB_TRANSPORT_PROPERTIES = "b622f612-47ad-4671-ad6c-05a98e65de3a"
  DSATTRIB_PBDATAG_ATTRIBUTE = "e0b56679-12b9-43cc-b7df-578caa5a7b63"
  DSATTRIB_CAPTURE_STREAMTIME = "0c1a5614-30cd-4f40-bcbf-d03e52306207"
  DSATTRIB_DSHOW_STREAM_DESC = "5fb5673b-0a2a-4565-827b-6853fd75e611"
  DSATTRIB_SAMPLE_LIVE_STREAM_TIME = "892cd111-72f3-411d-8b91-a9e9123ac29a"
  UUID_UdriTagTables = "e1b98d74-9778-4878-b664-eb2020364d88"
  UUID_WMDRMTagTables = "5dcd1101-9263-45bb-a4d5-c415ab8c589c"
  CLSID_DShowTVEFilter = "05500280-faa5-4df9-8246-bfc23ac5cea8"
  CLSID_TVEFilterTuneProperties = "05500281-faa5-4df9-8246-bfc23ac5cea8"
  CLSID_TVEFilterCCProperties = "05500282-faa5-4df9-8246-bfc23ac5cea8"
  CLSID_TVEFilterStatsProperties = "05500283-faa5-4df9-8246-bfc23ac5cea8"
  CLSID_IVideoEncoderProxy = "b43c4eec-8c32-4791-9102-508ada5ee8e7"
  CLSID_ICodecAPIProxy = "7ff0997a-1999-4286-a73c-622b8814e7eb"
  CLSID_IVideoEncoderCodecAPIProxy = "b05dabd9-56e5-4fdc-afa4-8a47e91f1c9c"
  ENCAPIPARAM_SAP_MODE = "0c0171db-fefc-4af7-9991-a5657c191cd1"
  CLSID_SBE2MediaTypeProfile = "1f26a602-2b5c-4b63-b8e8-9ea5c1a7dc2e"
  CLSID_SBE2FileScan = "3e458037-0ca6-41aa-a594-2aa6c02d709b"
  CODECAPI_AVDecMmcssClass = "e0ad4828-df66-4893-9f33-788aa4ec4082"
  AVENC_H263V_LEVELCOUNT = 8_u32
  AVENC_H264V_LEVELCOUNT = 16_u32
  AVENC_H264V_MAX_MBBITS = 3200_u32
  D3D12_VIDEO_DECODE_PROFILE_MPEG2 = "ee27417f-5e28-4e65-beea-1d26b508adc9"
  D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2 = "86695f12-340e-4f04-9fd3-9253dd327460"
  D3D12_VIDEO_DECODE_PROFILE_H264 = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  D3D12_VIDEO_DECODE_PROFILE_H264_STEREO = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  D3D12_VIDEO_DECODE_PROFILE_VC1 = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  D3D12_VIDEO_DECODE_PROFILE_VC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  D3D12_VIDEO_DECODE_PROFILE_VP9 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  D3D12_VIDEO_DECODE_PROFILE_VP8 = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0 = "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a"
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1 = "6936ff0f-45b1-4163-9cc1-646ef6946108"
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2 = "0c5f2aa1-e541-4089-bb7b-98110a19d7c8"
  D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2 = "17127009-a00f-4ce1-994e-bf4081f6f3f0"
  D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420 = "2d80bed6-9cac-4835-9e91-327bbc4f9ee8"
  DXVA2_ModeMPEG2_MoComp = "e6a9f44b-61b0-4563-9ea4-63d2a3c6fe66"
  DXVA2_ModeMPEG2_IDCT = "bf22ad00-03ea-4690-8077-473346209b7e"
  DXVA2_ModeMPEG2_VLD = "ee27417f-5e28-4e65-beea-1d26b508adc9"
  DXVA2_ModeMPEG1_VLD = "6f3ec719-3735-42cc-8063-65cc3cb36616"
  DXVA2_ModeMPEG2and1_VLD = "86695f12-340e-4f04-9fd3-9253dd327460"
  DXVA2_ModeH264_A = "1b81be64-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_B = "1b81be65-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_C = "1b81be66-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_D = "1b81be67-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_E = "1b81be68-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_F = "1b81be69-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeH264_VLD_WithFMOASO_NoFGT = "d5f04ff9-3418-45d8-9561-32a76aae2ddd"
  DXVA2_ModeH264_VLD_Stereo_Progressive_NoFGT = "d79be8da-0cf1-4c81-b82a-69a4e236f43d"
  DXVA2_ModeH264_VLD_Stereo_NoFGT = "f9aaccbb-c2b6-4cfc-8779-5707b1760552"
  DXVA2_ModeH264_VLD_Multiview_NoFGT = "705b9d82-76cf-49d6-b7e6-ac8872db013c"
  DXVA2_ModeWMV8_A = "1b81be80-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV8_B = "1b81be81-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV9_A = "1b81be90-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV9_B = "1b81be91-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeWMV9_C = "1b81be94-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_A = "1b81bea0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_B = "1b81bea1-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_C = "1b81bea2-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_D = "1b81bea3-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_ModeVC1_D2010 = "1b81bea4-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_NoEncrypt = "1b81bed0-a0c7-11d3-b984-00c04f2e73c5"
  DXVA2_VideoProcProgressiveDevice = "5a54a0c9-c7ec-4bd9-8ede-f3c75dc4393b"
  DXVA2_VideoProcBobDevice = "335aa36e-7884-43a4-9c91-7f87faf3e37e"
  DXVA2_VideoProcSoftwareDevice = "4553d47f-ee7e-4e3f-9475-dbf1376c4810"
  DXVA2_ModeMPEG4pt2_VLD_Simple = "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319"
  DXVA2_ModeMPEG4pt2_VLD_AdvSimple_NoGMC = "ed418a9f-010d-4eda-9ae3-9a65358d8d2e"
  DXVA2_ModeMPEG4pt2_VLD_AdvSimple_GMC = "ab998b5b-4258-44a9-9feb-94e597a6baae"
  DXVA2_ModeHEVC_VLD_Main = "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0"
  DXVA2_ModeHEVC_VLD_Main10 = "107af0e0-ef1a-4d19-aba8-67a163073d13"
  DXVA2_ModeVP9_VLD_Profile0 = "463707f8-a1d0-4585-876d-83aa6d60b89e"
  DXVA2_ModeVP9_VLD_10bit_Profile2 = "a4c749ef-6ecf-48aa-8448-50a7a1165ff7"
  DXVA2_ModeVP8_VLD = "90b899ea-3a62-4705-88b3-8df04b2744e7"
  DXVA2_E_NOT_INITIALIZED = -2147217408_i32
  DXVA2_E_NEW_VIDEO_DEVICE = -2147217407_i32
  DXVA2_E_VIDEO_DEVICE_LOCKED = -2147217406_i32
  DXVA2_E_NOT_AVAILABLE = -2147217405_i32
  MAX_SUBSTREAMS = 15_u32
  DXVA2_DECODE_GET_DRIVER_HANDLE = 1829_u32
  DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = 1828_u32
  DXVAp_ModeMPEG2_A = "1b81be0a-a0c7-11d3-b984-00c04f2e73c5"
  DXVAp_ModeMPEG2_C = "1b81be0c-a0c7-11d3-b984-00c04f2e73c5"
  DXVAp_NoEncrypt = "1b81bed0-a0c7-11d3-b984-00c04f2e73c5"
  DXVAp_DeinterlaceBobDevice = "335aa36e-7884-43a4-9c91-7f87faf3e37e"
  DXVAp_DeinterlaceContainerDevice = "0e85cb93-3046-4ff0-aecc-d58cb5f035fd"
  DXVAHD_STREAM_STATE_PRIVATE_IVTC = "9c601e3c-0f33-414c-a739-99540ee42da5"
  DXVAHDControlGuid = "a0386e75-f70c-464c-a9ce-33c44e091623"
  DXVAHDETWGUID_CREATEVIDEOPROCESSOR = "681e3d1e-5674-4fb3-a503-2f2055e91f60"
  DXVAHDETWGUID_VIDEOPROCESSBLTSTATE = "76c94b5a-193f-4692-9484-a4d999da81a8"
  DXVAHDETWGUID_VIDEOPROCESSSTREAMSTATE = "262c0b02-209d-47ed-94d8-82ae02b84aa7"
  DXVAHDETWGUID_VIDEOPROCESSBLTHD = "bef3d435-78c7-4de3-9707-cd1b083b160a"
  DXVAHDETWGUID_VIDEOPROCESSBLTHD_STREAM = "27ae473e-a5fc-4be5-b4e3-f24994d3c495"
  DXVAHDETWGUID_DESTROYVIDEOPROCESSOR = "f943f0a0-3f16-43e0-8093-105a986aa5f1"
  MR_VIDEO_RENDER_SERVICE = "1092a86c-ab1a-459a-a336-831fbc4d11ff"
  MR_VIDEO_MIXER_SERVICE = "073cd2fc-6cf4-40b7-8859-e89552c841f8"
  MR_VIDEO_ACCELERATION_SERVICE = "efef5175-5c7d-4ce2-bbbd-34ff8bca6554"
  MR_BUFFER_SERVICE = "a562248c-9ac6-4ffc-9fba-3af8f8ad1a4d"
  VIDEO_ZOOM_RECT = "7aaa1638-1b7f-4c93-bd89-5b9c9fb6fcf0"
  MFEVRDLL = 0_u32
  MF_SDK_VERSION = 2_u32
  MF_API_VERSION = 112_u32
  MFSTARTUP_NOSOCKET = 1_u32
  MFSTARTUP_LITE = 1_u32
  MFSTARTUP_FULL = 0_u32
  MF_E_DXGI_DEVICE_NOT_INITIALIZED = -2147217408_i32
  MF_E_DXGI_NEW_VIDEO_DEVICE = -2147217407_i32
  MF_E_DXGI_VIDEO_DEVICE_LOCKED = -2147217406_i32
  MF_1_BYTE_ALIGNMENT = 0_u32
  MF_2_BYTE_ALIGNMENT = 1_u32
  MF_4_BYTE_ALIGNMENT = 3_u32
  MF_8_BYTE_ALIGNMENT = 7_u32
  MF_16_BYTE_ALIGNMENT = 15_u32
  MF_32_BYTE_ALIGNMENT = 31_u32
  MF_64_BYTE_ALIGNMENT = 63_u32
  MF_128_BYTE_ALIGNMENT = 127_u32
  MF_256_BYTE_ALIGNMENT = 255_u32
  MF_512_BYTE_ALIGNMENT = 511_u32
  MF_1024_BYTE_ALIGNMENT = 1023_u32
  MF_2048_BYTE_ALIGNMENT = 2047_u32
  MF_4096_BYTE_ALIGNMENT = 4095_u32
  MF_8192_BYTE_ALIGNMENT = 8191_u32
  MF_EVENT_SESSIONCAPS = "7e5ebcd0-11b8-4abe-afad-10f6599a7f42"
  MF_EVENT_SESSIONCAPS_DELTA = "7e5ebcd1-11b8-4abe-afad-10f6599a7f42"
  MFSESSIONCAP_START = 1_u32
  MFSESSIONCAP_SEEK = 2_u32
  MFSESSIONCAP_PAUSE = 4_u32
  MFSESSIONCAP_RATE_FORWARD = 16_u32
  MFSESSIONCAP_RATE_REVERSE = 32_u32
  MFSESSIONCAP_DOES_NOT_USE_NETWORK = 64_u32
  MF_EVENT_TOPOLOGY_STATUS = "30c5018d-9a53-454b-ad9e-6d5f8fa7c43b"
  MF_EVENT_START_PRESENTATION_TIME = "5ad914d0-9b45-4a8d-a2c0-81d1e50bfb07"
  MF_EVENT_PRESENTATION_TIME_OFFSET = "5ad914d1-9b45-4a8d-a2c0-81d1e50bfb07"
  MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT = "5ad914d2-9b45-4a8d-a2c0-81d1e50bfb07"
  MF_EVENT_SOURCE_FAKE_START = "a8cc55a7-6b31-419f-845d-ffb351a2434b"
  MF_EVENT_SOURCE_PROJECTSTART = "a8cc55a8-6b31-419f-845d-ffb351a2434b"
  MF_EVENT_SOURCE_ACTUAL_START = "a8cc55a9-6b31-419f-845d-ffb351a2434b"
  MF_EVENT_SOURCE_TOPOLOGY_CANCELED = "db62f650-9a5e-4704-acf3-563bc6a73364"
  MF_EVENT_SOURCE_CHARACTERISTICS = "47db8490-8b22-4f52-afda-9ce1b2d3cfa8"
  MF_EVENT_SOURCE_CHARACTERISTICS_OLD = "47db8491-8b22-4f52-afda-9ce1b2d3cfa8"
  MF_EVENT_DO_THINNING = "321ea6fb-dad9-46e4-b31d-d2eae7090e30"
  MF_EVENT_SCRUBSAMPLE_TIME = "9ac712b3-dcb8-44d5-8d0c-37455a2782e3"
  MF_EVENT_OUTPUT_NODE = "830f1a8b-c060-46dd-a801-1c95dec9b107"
  MF_EVENT_MFT_INPUT_STREAM_ID = "f29c2cca-7ae6-42d2-b284-bf837cc874e2"
  MF_EVENT_MFT_CONTEXT = "b7cd31f1-899e-4b41-80c9-26a896d32977"
  MF_EVENT_STREAM_METADATA_KEYDATA = "cd59a4a1-4a3b-4bbd-8665-72a40fbea776"
  MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS = "5063449d-cc29-4fc6-a75a-d247b35af85c"
  MF_EVENT_STREAM_METADATA_SYSTEMID = "1ea2ef64-ba16-4a36-8719-fe7560ba32ad"
  MFSampleExtension_MaxDecodeFrameSize = "d3cc654f-f9f3-4a13-889f-f04eb2b5b957"
  MFSampleExtension_AccumulatedNonRefPicPercent = "79ea74df-a740-445b-bc98-c9ed1f260eee"
  MFSampleExtension_Encryption_ProtectionScheme = "d054d096-28bb-45da-87ec-74f351871406"
  MFSampleExtension_Encryption_CryptByteBlock = "9d84289b-0c7f-4713-ab95-108ab42ad801"
  MFSampleExtension_Encryption_SkipByteBlock = "0d550548-8317-4ab1-845f-d06306e293e3"
  MFSampleExtension_Encryption_SubSample_Mapping = "8444f27a-69a1-48da-bd08-11cef36830d2"
  MFSampleExtension_Encryption_ClearSliceHeaderData = "5509a4f4-320d-4e6c-8d1a-94c66dd20cb0"
  MFSampleExtension_Encryption_HardwareProtection_KeyInfoID = "8cbfcceb-94a5-4de1-8231-a85e47cf81e7"
  MFSampleExtension_Encryption_HardwareProtection_KeyInfo = "b2372080-455b-4dd7-9989-1a955784b754"
  MFSampleExtension_Encryption_HardwareProtection_VideoDecryptorContext = "693470c8-e837-47a0-88cb-535b905e3582"
  MFSampleExtension_Encryption_Opaque_Data = "224d77e5-1391-4ffb-9f41-b432f68c611d"
  MFSampleExtension_NALULengthInfo = "19124e7c-ad4b-465f-bb18-20186287b6af"
  MFSampleExtension_Encryption_ResumeVideoOutput = "a435aba5-afde-4cf5-bc1c-f6acaf13949d"
  MFSampleExtension_Encryption_NALUTypes = "b0f067c7-714c-416c-8d59-5f4ddf8913b6"
  MFSampleExtension_Encryption_SPSPPSData = "aede0fa2-0e0c-453c-b7f3-de8693364d11"
  MFSampleExtension_Encryption_SEIData = "3cf0e972-4542-4687-9999-585f565fba7d"
  MFSampleExtension_Encryption_HardwareProtection = "9a2b2d2b-8270-43e3-8448-994f426e8886"
  MFSampleExtension_CleanPoint = "9cdf01d8-a0f0-43ba-b077-eaa06cbd728a"
  MFSampleExtension_Discontinuity = "9cdf01d9-a0f0-43ba-b077-eaa06cbd728a"
  MFSampleExtension_Token = "8294da66-f328-4805-b551-00deb4c57a61"
  MFSampleExtension_ClosedCaption_CEA708 = "26f09068-e744-47dc-aa03-dbf20403bde6"
  MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE = 256_u32
  MFSampleExtension_DecodeTimestamp = "73a954d4-09e2-4861-befc-94bd97c08e6e"
  MFSampleExtension_VideoEncodeQP = "b2efe478-f979-4c66-b95e-ee2b82c82f36"
  MFSampleExtension_VideoEncodePictureType = "973704e6-cd14-483c-8f20-c9fc0928bad5"
  MFSampleExtension_FrameCorruption = "b4dd4a8c-0beb-44c4-8b75-b02b913b04f0"
  MFSampleExtension_DirtyRects = "9ba70225-b342-4e97-9126-0b566ab7ea7e"
  MFSampleExtension_MoveRegions = "e2a6c693-3a8b-4b8d-95d0-f60281a12fb7"
  MFSampleExtension_HDCP_OptionalHeader = "9a2e7390-121f-455f-8376-c97428e0b540"
  MFSampleExtension_HDCP_FrameCounter = "9d389c60-f507-4aa6-a40a-71027a02f3de"
  MFSampleExtension_HDCP_StreamID = "177e5d74-c370-4a7a-95a2-36833c01d0af"
  MFSampleExtension_Timestamp = "1e436999-69be-4c7a-9369-70068c0260cb"
  MFSampleExtension_RepeatFrame = "88be738f-0711-4f42-b458-344aed42ec2f"
  MFT_ENCODER_ERROR = "c8d1eda4-98e4-41d5-9297-44f53852f90e"
  MFT_GFX_DRIVER_VERSION_ID_Attribute = "f34b9093-05e0-4b16-993d-3e2a2cde6ad3"
  MFSampleExtension_DescrambleData = "43483be6-4903-4314-b032-2951365936fc"
  MFSampleExtension_SampleKeyID = "9ed713c8-9b87-4b26-8297-a93b0c5a8acc"
  MFSampleExtension_GenKeyFunc = "441ca1ee-6b1f-4501-903a-de87df42f6ed"
  MFSampleExtension_GenKeyCtx = "188120cb-d7da-4b59-9b3e-9252fd37301c"
  MFSampleExtension_PacketCrossOffsets = "2789671d-389f-40bb-90d9-c282f77f9abd"
  MFSampleExtension_Encryption_SampleID = "6698b84e-0afa-4330-aeb2-1c0a98d7a44d"
  MFSampleExtension_Encryption_KeyID = "76376591-795f-4da1-86ed-9d46eca109a9"
  MFSampleExtension_Content_KeyID = "c6c7f5b0-acca-415b-87d9-10441469efc6"
  MFSampleExtension_Encryption_SubSampleMappingSplit = "fe0254b9-2aa5-4edc-99f7-17e89dbf9174"
  MFSampleExtension_Interlaced = "b1d5830a-deb8-40e3-90fa-389943716461"
  MFSampleExtension_BottomFieldFirst = "941ce0a3-6ae3-4dda-9a08-a64298340617"
  MFSampleExtension_RepeatFirstField = "304d257c-7493-4fbd-b149-9228de8d9a99"
  MFSampleExtension_SingleField = "9d85f816-658b-455a-bde0-9fa7e15ab8f9"
  MFSampleExtension_DerivedFromTopField = "6852465a-ae1c-4553-8e9b-c3420fcb1637"
  MFSampleExtension_MeanAbsoluteDifference = "1cdbde11-08b4-4311-a6dd-0f9f371907aa"
  MFSampleExtension_LongTermReferenceFrameInfo = "9154733f-e1bd-41bf-81d3-fcd918f71332"
  MFSampleExtension_ROIRectangle = "3414a438-4998-4d2c-be82-be3ca0b24d43"
  MFSampleExtension_LastSlice = "2b5d5457-5547-4f07-b8c8-b4a3a9a1daac"
  MACROBLOCK_FLAG_SKIP = 1_u32
  MACROBLOCK_FLAG_DIRTY = 2_u32
  MACROBLOCK_FLAG_MOTION = 4_u32
  MACROBLOCK_FLAG_VIDEO = 8_u32
  MACROBLOCK_FLAG_HAS_MOTION_VECTOR = 16_u32
  MACROBLOCK_FLAG_HAS_QP = 32_u32
  MFSampleExtension_FeatureMap = "a032d165-46fc-400a-b449-49de53e62a6e"
  MFSampleExtension_ChromaOnly = "1eb9179c-a01f-4845-8c04-0e65a26eb04f"
  MFSampleExtension_PhotoThumbnail = "74bbc85c-c8bb-42dc-b586-da17ffd35dcc"
  MFSampleExtension_PhotoThumbnailMediaType = "61ad5420-ebf8-4143-89af-6bf25f672def"
  MFSampleExtension_CaptureMetadata = "2ebe23a8-faf5-444a-a6a2-eb810880ab5d"
  MFSampleExtension_MDLCacheCookie = "5f002af9-d8f9-41a3-b6c3-a2ad43f647ad"
  MF_CAPTURE_METADATA_PHOTO_FRAME_FLASH = "0f9dd6c6-6003-45d8-bd59-f1f53e3d04e8"
  MF_CAPTURE_METADATA_FRAME_RAWSTREAM = "9252077b-2680-49b9-ae02-b19075973b70"
  MF_CAPTURE_METADATA_FOCUSSTATE = "a87ee154-997f-465d-b91f-29d53b982b88"
  MF_CAPTURE_METADATA_REQUESTED_FRAME_SETTING_ID = "bb3716d9-8a61-47a4-8197-459c7ff174d5"
  MF_CAPTURE_METADATA_EXPOSURE_TIME = "16b9ae99-cd84-4063-879d-a28c7633729e"
  MF_CAPTURE_METADATA_EXPOSURE_COMPENSATION = "d198aa75-4b62-4345-abf3-3c31fa12c299"
  MF_CAPTURE_METADATA_ISO_SPEED = "e528a68f-b2e3-44fe-8b65-07bf4b5a13ff"
  MF_CAPTURE_METADATA_LENS_POSITION = "b5fc8e86-11d1-4e70-819b-723a89fa4520"
  MF_CAPTURE_METADATA_SCENE_MODE = "9cc3b54d-5ed3-4bae-b388-7670aef59e13"
  MF_CAPTURE_METADATA_FLASH = "4a51520b-fb36-446c-9df2-68171b9a0389"
  MF_CAPTURE_METADATA_FLASH_POWER = "9c0e0d49-0205-491a-bc9d-2d6e1f4d5684"
  MF_CAPTURE_METADATA_WHITEBALANCE = "c736fd77-0fb9-4e2e-97a2-fcd490739ee9"
  MF_CAPTURE_METADATA_ZOOMFACTOR = "e50b0b81-e501-42c2-abf2-857ecb13fa5c"
  MF_CAPTURE_METADATA_FACEROIS = "864f25a6-349f-46b1-a30e-54cc22928a47"
  MF_CAPTURE_METADATA_FACEROITIMESTAMPS = "e94d50cc-3da0-44d4-bb34-83198a741868"
  MF_CAPTURE_METADATA_FACEROICHARACTERIZATIONS = "b927a1a8-18ef-46d3-b3af-69372f94d9b2"
  MF_CAPTURE_METADATA_ISO_GAINS = "05802ac9-0e1d-41c7-a8c8-7e7369f84e1e"
  MF_CAPTURE_METADATA_SENSORFRAMERATE = "db51357e-9d3d-4962-b06d-07ce650d9a0a"
  MF_CAPTURE_METADATA_WHITEBALANCE_GAINS = "e7570c8f-2dcb-4c7c-aace-22ece7cce647"
  MF_CAPTURE_METADATA_HISTOGRAM = "85358432-2ef6-4ba9-a3fb-06d82974b895"
  MF_CAPTURE_METADATA_EXIF = "2e9575b8-8c31-4a02-8575-42b197b71592"
  MF_CAPTURE_METADATA_FRAME_ILLUMINATION = "6d688ffc-63d3-46fe-bada-5b947db0d080"
  MF_CAPTURE_METADATA_UVC_PAYLOADHEADER = "f9f88a87-e1dd-441e-95cb-42e21a64f1d9"
  MFSampleExtension_Depth_MinReliableDepth = "5f8582b2-e36b-47c8-9b87-fee1ca72c5b0"
  MFSampleExtension_Depth_MaxReliableDepth = "e45545d1-1f0f-4a32-a8a7-6101a24ea8be"
  MF_CAPTURE_METADATA_FIRST_SCANLINE_START_TIME_QPC = "6a2c49f1-e052-46b6-b2d9-73c1558709af"
  MF_CAPTURE_METADATA_LAST_SCANLINE_END_TIME_QPC = "dccadecb-c4d4-400d-b418-10e88525e1f6"
  MF_CAPTURE_METADATA_SCANLINE_TIME_QPC_ACCURACY = "4cd79c51-f765-4b09-b1e1-27d1f7ebea09"
  MF_CAPTURE_METADATA_SCANLINE_DIRECTION = "6496a3ba-1907-49e6-b0c3-123795f380a9"
  MFCAPTURE_METADATA_SCAN_RIGHT_LEFT = 1_u32
  MFCAPTURE_METADATA_SCAN_BOTTOM_TOP = 2_u32
  MFCAPTURE_METADATA_SCANLINE_VERTICAL = 4_u32
  MF_CAPTURE_METADATA_DIGITALWINDOW = "276f72a2-59c8-4f69-97b4-068b8c0ec044"
  MF_CAPTURE_METADATA_FRAME_BACKGROUND_MASK = "03f14dd3-75dd-433a-a8e2-1e3f5f2a50a0"
  MF_METADATAFACIALEXPRESSION_SMILE = 1_u32
  MF_METADATATIMESTAMPS_DEVICE = 1_u32
  MF_METADATATIMESTAMPS_PRESENTATION = 2_u32
  MF_HISTOGRAM_CHANNEL_Y = 1_u32
  MF_HISTOGRAM_CHANNEL_R = 2_u32
  MF_HISTOGRAM_CHANNEL_G = 4_u32
  MF_HISTOGRAM_CHANNEL_B = 8_u32
  MF_HISTOGRAM_CHANNEL_Cb = 16_u32
  MF_HISTOGRAM_CHANNEL_Cr = 32_u32
  MFT_CATEGORY_VIDEO_DECODER = "d6c02d4b-6833-45b4-971a-05a4b04bab91"
  MFT_CATEGORY_VIDEO_ENCODER = "f79eac7d-e545-4387-bdee-d647d7bde42a"
  MFT_CATEGORY_VIDEO_EFFECT = "12e17c21-532c-4a6e-8a1c-40825a736397"
  MFT_CATEGORY_MULTIPLEXER = "059c561e-05ae-4b61-b69d-55b61ee54a7b"
  MFT_CATEGORY_DEMULTIPLEXER = "a8700a7a-939b-44c5-99d7-76226b23b3f1"
  MFT_CATEGORY_AUDIO_DECODER = "9ea73fb4-ef7a-4559-8d5d-719d8f0426c7"
  MFT_CATEGORY_AUDIO_ENCODER = "91c64bd0-f91e-4d8c-9276-db248279d975"
  MFT_CATEGORY_AUDIO_EFFECT = "11064c48-3648-4ed0-932e-05ce8ac811b7"
  MFT_CATEGORY_VIDEO_PROCESSOR = "302ea3fc-aa5f-47f9-9f7a-c2188bb16302"
  MFT_CATEGORY_OTHER = "90175d57-b7ea-4901-aeb3-933a8747756f"
  MFT_CATEGORY_ENCRYPTOR = "b0c687be-01cd-44b5-b8b2-7c1d7e058b1f"
  MFT_CATEGORY_VIDEO_RENDERER_EFFECT = "145cd8b4-92f4-4b23-8ae7-e0df06c2da95"
  MFT_ENUM_VIDEO_RENDERER_EXTENSION_PROFILE = "62c56928-9a4e-443b-b9dc-cac830c24100"
  MFT_ENUM_ADAPTER_LUID = "1d39518c-e220-4da8-a07f-ba172552d6b1"
  MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE = "53476a11-3f13-49fb-ac42-ee2733c96741"
  LOCAL_D3DFMT_DEFINES = 1_u32
  MFVideoFormat_Base = "00000000-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB32 = "00000016-0000-0010-8000-00aa00389b71"
  MFVideoFormat_ARGB32 = "00000015-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB24 = "00000014-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB555 = "00000018-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB565 = "00000017-0000-0010-8000-00aa00389b71"
  MFVideoFormat_RGB8 = "00000029-0000-0010-8000-00aa00389b71"
  MFVideoFormat_L8 = "00000032-0000-0010-8000-00aa00389b71"
  MFVideoFormat_L16 = "00000051-0000-0010-8000-00aa00389b71"
  MFVideoFormat_D16 = "00000050-0000-0010-8000-00aa00389b71"
  MFVideoFormat_AI44 = "34344941-0000-0010-8000-00aa00389b71"
  MFVideoFormat_AYUV = "56555941-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YUY2 = "32595559-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YVYU = "55595659-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YVU9 = "39555659-0000-0010-8000-00aa00389b71"
  MFVideoFormat_UYVY = "59565955-0000-0010-8000-00aa00389b71"
  MFVideoFormat_NV11 = "3131564e-0000-0010-8000-00aa00389b71"
  MFVideoFormat_NV12 = "3231564e-0000-0010-8000-00aa00389b71"
  MFVideoFormat_NV21 = "3132564e-0000-0010-8000-00aa00389b71"
  MFVideoFormat_YV12 = "32315659-0000-0010-8000-00aa00389b71"
  MFVideoFormat_I420 = "30323449-0000-0010-8000-00aa00389b71"
  MFVideoFormat_IYUV = "56555949-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y210 = "30313259-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y216 = "36313259-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y410 = "30313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y416 = "36313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y41P = "50313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y41T = "54313459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Y42T = "54323459-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P210 = "30313250-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P216 = "36313250-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P010 = "30313050-0000-0010-8000-00aa00389b71"
  MFVideoFormat_P016 = "36313050-0000-0010-8000-00aa00389b71"
  MFVideoFormat_v210 = "30313276-0000-0010-8000-00aa00389b71"
  MFVideoFormat_v216 = "36313276-0000-0010-8000-00aa00389b71"
  MFVideoFormat_v410 = "30313476-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MP43 = "3334504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MP4S = "5334504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_M4S2 = "3253344d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MP4V = "5634504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WMV1 = "31564d57-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WMV2 = "32564d57-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WMV3 = "33564d57-0000-0010-8000-00aa00389b71"
  MFVideoFormat_WVC1 = "31435657-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MSS1 = "3153534d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MSS2 = "3253534d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MPG1 = "3147504d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVSL = "6c737664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVSD = "64737664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVHD = "64687664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DV25 = "35327664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DV50 = "30357664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_DVH1 = "31687664-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H264 = "34363248-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H265 = "35363248-0000-0010-8000-00aa00389b71"
  MFVideoFormat_MJPG = "47504a4d-0000-0010-8000-00aa00389b71"
  MFVideoFormat_420O = "4f303234-0000-0010-8000-00aa00389b71"
  MFVideoFormat_HEVC = "43564548-0000-0010-8000-00aa00389b71"
  MFVideoFormat_HEVC_ES = "53564548-0000-0010-8000-00aa00389b71"
  MFVideoFormat_VP80 = "30385056-0000-0010-8000-00aa00389b71"
  MFVideoFormat_VP90 = "30395056-0000-0010-8000-00aa00389b71"
  MFVideoFormat_ORAW = "5741524f-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H263 = "33363248-0000-0010-8000-00aa00389b71"
  MFVideoFormat_A2R10G10B10 = "0000001f-0000-0010-8000-00aa00389b71"
  MFVideoFormat_A16B16G16R16F = "00000071-0000-0010-8000-00aa00389b71"
  MFVideoFormat_VP10 = "30315056-0000-0010-8000-00aa00389b71"
  MFVideoFormat_AV1 = "31305641-0000-0010-8000-00aa00389b71"
  MFVideoFormat_Theora = "6f656874-0000-0010-8000-00aa00389b71"
  MFVideoFormat_H264_ES = "3f40f4f0-5622-4ff8-b6d8-a17a584bee5e"
  MFVideoFormat_MPEG2 = "e06d8026-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_Base = "00000000-0000-0010-8000-00aa00389b71"
  MFAudioFormat_PCM = "00000001-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Float = "00000003-0000-0010-8000-00aa00389b71"
  MFAudioFormat_DTS = "00000008-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Dolby_AC3_SPDIF = "00000092-0000-0010-8000-00aa00389b71"
  MFAudioFormat_DRM = "00000009-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMAudioV8 = "00000161-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMAudioV9 = "00000162-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMAudio_Lossless = "00000163-0000-0010-8000-00aa00389b71"
  MFAudioFormat_WMASPDIF = "00000164-0000-0010-8000-00aa00389b71"
  MFAudioFormat_MSP1 = "0000000a-0000-0010-8000-00aa00389b71"
  MFAudioFormat_MP3 = "00000055-0000-0010-8000-00aa00389b71"
  MFAudioFormat_MPEG = "00000050-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AAC = "00001610-0000-0010-8000-00aa00389b71"
  MFAudioFormat_ADTS = "00001600-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AMR_NB = "00007361-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AMR_WB = "00007362-0000-0010-8000-00aa00389b71"
  MFAudioFormat_AMR_WP = "00007363-0000-0010-8000-00aa00389b71"
  MFAudioFormat_FLAC = "0000f1ac-0000-0010-8000-00aa00389b71"
  MFAudioFormat_ALAC = "00006c61-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Opus = "0000704f-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Dolby_AC4 = "0000ac40-0000-0010-8000-00aa00389b71"
  MFAudioFormat_Dolby_AC3 = "e06d802c-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_Dolby_DDPlus = "a7fb87af-2d02-42fb-a4d4-05cd93843bdd"
  MFAudioFormat_Dolby_AC4_V1 = "36b7927c-3d87-4a2a-9196-a21ad9e935e6"
  MFAudioFormat_Dolby_AC4_V2 = "7998b2a0-17dd-49b6-8dfa-9b278552a2ac"
  MFAudioFormat_Dolby_AC4_V1_ES = "9d8dccc6-d156-4fb8-979c-a85be7d21dfa"
  MFAudioFormat_Dolby_AC4_V2_ES = "7e58c9f9-b070-45f4-8ccd-a99a0417c1ac"
  MFAudioFormat_Vorbis = "8d2fd10b-5841-4a6b-8905-588fec1aded9"
  MFAudioFormat_DTS_RAW = "e06d8033-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_DTS_HD = "a2e58eb7-0fa9-48bb-a40c-fa0e156d0645"
  MFAudioFormat_DTS_XLL = "45b37c1b-8c70-4e59-a7be-a1e42c81c80d"
  MFAudioFormat_DTS_LBR = "c2fe6f0a-4e3c-4df1-9b60-50863091e4b9"
  MFAudioFormat_DTS_UHD = "87020117-ace3-42de-b73e-c656706263f8"
  MFAudioFormat_DTS_UHDY = "9b9cca00-91b9-4ccc-883a-8f787ac3cc86"
  MFAudioFormat_Float_SpatialObjects = "fa39cd94-bc64-4ab1-9b71-dcd09d5a7e7a"
  MFAudioFormat_LPCM = "e06d8032-db46-11cf-b4d1-00805f6cbbea"
  MFAudioFormat_PCM_HDCP = "a5e7ff01-8411-4acc-a865-5f4941288d80"
  MFAudioFormat_Dolby_AC3_HDCP = "97663a80-8ffb-4445-a6ba-792d908f497f"
  MFAudioFormat_AAC_HDCP = "419bce76-8b72-400f-adeb-84b57d63484d"
  MFAudioFormat_ADTS_HDCP = "da4963a3-14d8-4dcf-92b7-193eb84363db"
  MFAudioFormat_Base_HDCP = "3884b5bc-e277-43fd-983d-038aa8d9b605"
  MFVideoFormat_H264_HDCP = "5d0ce9dd-9817-49da-bdfd-f5f5b98f18a6"
  MFVideoFormat_HEVC_HDCP = "3cfe0fe6-05c4-47dc-9d70-4bdb2959720f"
  MFVideoFormat_Base_HDCP = "eac3b9d5-bd14-4237-8f1f-bab428e49312"
  MFMPEG4Format_Base = "00000000-767a-494d-b478-f29d25dc9037"
  MFSubtitleFormat_XML = "2006f94f-29ca-4195-b8db-00ded8ff0c97"
  MFSubtitleFormat_TTML = "73e73992-9a10-4356-9557-7194e91e3e54"
  MFSubtitleFormat_ATSC = "7fa7faa3-feae-4e16-aedf-36b9acfbb099"
  MFSubtitleFormat_WebVTT = "c886d215-f485-40bb-8db6-fadbc619a45d"
  MFSubtitleFormat_SRT = "5e467f2e-77ca-4ca5-8391-d142ed4b76c8"
  MFSubtitleFormat_SSA = "57176a1b-1a9e-4eea-abef-c61760198ac4"
  MFSubtitleFormat_CustomUserData = "1bb3d849-6614-4d80-8882-ed24aa82da92"
  MFSubtitleFormat_PGS = "71f40e4a-1278-4442-b30d-39dd1d7722bc"
  MFSubtitleFormat_VobSub = "6b8e40f4-8d2c-4ced-ad91-5960e45b4433"
  MF_MT_MAJOR_TYPE = "48eba18e-f8c9-4687-bf11-0a74c9f96a8f"
  MF_MT_SUBTYPE = "f7e34c9a-42e8-4714-b74b-cb29d72c35e5"
  MF_MT_ALL_SAMPLES_INDEPENDENT = "c9173739-5e56-461c-b713-46fb995cb95f"
  MF_MT_FIXED_SIZE_SAMPLES = "b8ebefaf-b718-4e04-b0a9-116775e3321b"
  MF_MT_COMPRESSED = "3afd0cee-18f2-4ba5-a110-8bea502e1f92"
  MF_MT_SAMPLE_SIZE = "dad3ab78-1990-408b-bce2-eba673dacc10"
  MF_MT_WRAPPED_TYPE = "4d3f7b23-d02f-4e6c-9bee-e4bf2c6c695d"
  MF_MT_VIDEO_3D = "cb5e88cf-7b5b-476b-85aa-1ca5ae187555"
  MF_MT_VIDEO_3D_FORMAT = "5315d8a0-87c5-4697-b793-6606c67c049b"
  MF_MT_VIDEO_3D_NUM_VIEWS = "bb077e8a-dcbf-42eb-af60-418df98aa495"
  MF_MT_VIDEO_3D_LEFT_IS_BASE = "6d4b7bff-5629-4404-948c-c634f4ce26d4"
  MF_MT_VIDEO_3D_FIRST_IS_LEFT = "ec298493-0ada-4ea1-a4fe-cbbd36ce9331"
  MFSampleExtension_3DVideo = "f86f97a4-dd54-4e2e-9a5e-55fc2d74a005"
  MFSampleExtension_3DVideo_SampleFormat = "08671772-e36f-4cff-97b3-d72e20987a48"
  MF_MT_VIDEO_ROTATION = "c380465d-2271-428c-9b83-ecea3b4a85c1"
  MF_DEVICESTREAM_MULTIPLEXED_MANAGER = "6ea542b0-281f-4231-a464-fe2f5022501c"
  MF_MEDIATYPE_MULTIPLEXED_MANAGER = "13c78fb5-f275-4ea0-bb5f-0249832b0d6e"
  MFSampleExtension_MULTIPLEXED_MANAGER = "8dcdee79-6b5a-4c45-8db9-20b395f02fcf"
  MF_MT_SECURE = "c5acc4fd-0304-4ecf-809f-47bc97ff63bd"
  MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES = "17145fd1-1b2b-423c-8001-2b6833ed3588"
  MF_MT_ALPHA_MODE = "5d959b0d-4cbf-4d04-919f-3f5f7f284211"
  MF_MT_DEPTH_MEASUREMENT = "fd5ac489-0917-4bb6-9d54-3122bf70144b"
  MF_MT_DEPTH_VALUE_UNIT = "21a800f5-3189-4797-beba-f13cd9a31a5e"
  MF_MT_VIDEO_NO_FRAME_ORDERING = "3f5b106f-6bc2-4ee3-b7ed-8902c18f5351"
  MF_MT_VIDEO_H264_NO_FMOASO = "ed461cd6-ec9f-416a-a8a3-26d7d31018d7"
  MFSampleExtension_ForwardedDecodeUnits = "424c754c-97c8-48d6-8777-fc41f7b60879"
  MFSampleExtension_TargetGlobalLuminance = "3f60ef36-31ef-4daf-8360-940397e41ef3"
  MFSampleExtension_ForwardedDecodeUnitType = "089e57c7-47d3-4a26-bf9c-4b64fafb5d1e"
  MF_MT_FORWARD_CUSTOM_NALU = "ed336efd-244f-428d-9153-28f399458890"
  MF_MT_FORWARD_CUSTOM_SEI = "e27362f1-b136-41d1-9594-3a7e4febf2d1"
  MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE = "8437d4b9-d448-4fcd-9b6b-839bf96c7798"
  MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER = "f13bbe3c-36d4-410a-b985-7a951a1e6294"
  MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME = "c6052a80-6d9c-40a3-9db8-f027a25c9ab9"
  MF_MT_AUDIO_NUM_CHANNELS = "37e48bf5-645e-4c5b-89de-ada9e29b696a"
  MF_MT_AUDIO_SAMPLES_PER_SECOND = "5faeeae7-0290-4c31-9e8a-c534f68d9dba"
  MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND = "fb3b724a-cfb5-4319-aefe-6e42b2406132"
  MF_MT_AUDIO_AVG_BYTES_PER_SECOND = "1aab75c8-cfef-451c-ab95-ac034b8e1731"
  MF_MT_AUDIO_BLOCK_ALIGNMENT = "322de230-9eeb-43bd-ab7a-ff412251541d"
  MF_MT_AUDIO_BITS_PER_SAMPLE = "f2deb57f-40fa-4764-aa33-ed4f2d1ff669"
  MF_MT_AUDIO_VALID_BITS_PER_SAMPLE = "d9bf8d6a-9530-4b7c-9ddf-ff6fd58bbd06"
  MF_MT_AUDIO_SAMPLES_PER_BLOCK = "aab15aac-e13a-4995-9222-501ea15c6877"
  MF_MT_AUDIO_CHANNEL_MASK = "55fb5765-644a-4caf-8479-938983bb1588"
  MF_MT_AUDIO_FOLDDOWN_MATRIX = "9d62927c-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_PEAKREF = "9d62927d-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_PEAKTARGET = "9d62927e-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_AVGREF = "9d62927f-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_WMADRC_AVGTARGET = "9d629280-36be-4cf2-b5c4-a3926e3e8711"
  MF_MT_AUDIO_PREFER_WAVEFORMATEX = "a901aaba-e037-458a-bdf6-545be2074042"
  MF_MT_AAC_PAYLOAD_TYPE = "bfbabe79-7434-4d1c-94f0-72a3b9e17188"
  MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION = "7632f0e6-9538-4d61-acda-ea29c8c14456"
  MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE = "8b81adae-4b5a-4d40-8022-f38d09ca3c5c"
  MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS = "dcfba24a-2609-4240-a721-3faea76a4df9"
  MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID = "2ab71bc0-6223-4ba7-ad64-7b94b47ae792"
  MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH = "094ba8be-d723-489f-92fa-766777b34726"
  MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS = "11aa80b4-e0da-47c6-8060-96c1259ae50d"
  MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING = "83e96ec9-1184-417e-8254-9f269158fc06"
  MF_MT_SPATIAL_AUDIO_DATA_PRESENT = "6842f6e7-d43e-4ebb-9c9c-c96f41784863"
  MF_MT_FRAME_SIZE = "1652c33d-d6b2-4012-b834-72030849a37d"
  MF_MT_FRAME_RATE = "c459a2e8-3d2c-4e44-b132-fee5156c7bb0"
  MF_MT_PIXEL_ASPECT_RATIO = "c6376a1e-8d0a-4027-be45-6d9a0ad39bb6"
  MF_MT_DRM_FLAGS = "8772f323-355a-4cc7-bb78-6d61a048ae82"
  MF_MT_TIMESTAMP_CAN_BE_DTS = "24974215-1b7b-41e4-8625-ac469f2dedaa"
  MF_MT_PAD_CONTROL_FLAGS = "4d0e73e5-80ea-4354-a9d0-1176ceb028ea"
  MF_MT_SOURCE_CONTENT_HINT = "68aca3cc-22d0-44e6-85f8-28167197fa38"
  MF_MT_VIDEO_CHROMA_SITING = "65df2370-c773-4c33-aa64-843e068efb0c"
  MF_MT_INTERLACE_MODE = "e2724bb8-e676-4806-b4b2-a8d6efb44ccd"
  MF_MT_TRANSFER_FUNCTION = "5fb0fce9-be5c-4935-a811-ec838f8eed93"
  MF_MT_VIDEO_PRIMARIES = "dbfbe4d7-0740-4ee0-8192-850ab0e21935"
  MF_MT_MAX_LUMINANCE_LEVEL = "50253128-c110-4de4-98ae-46a324fae6da"
  MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL = "58d4bf57-6f52-4733-a195-a9e29ecf9e27"
  MF_MT_MAX_MASTERING_LUMINANCE = "d6c6b997-272f-4ca1-8d00-8042111a0ff6"
  MF_MT_MIN_MASTERING_LUMINANCE = "839a4460-4e7e-4b4f-ae79-cc08905c7b27"
  MF_MT_DECODER_USE_MAX_RESOLUTION = "4c547c24-af9a-4f38-96ad-978773cf53e7"
  MF_MT_DECODER_MAX_DPB_COUNT = "67be144c-88b7-4ca9-9628-c808d5262217"
  MF_MT_CUSTOM_VIDEO_PRIMARIES = "47537213-8cfb-4722-aa34-fbc9e24d77b8"
  MF_MT_YUV_MATRIX = "3e23d450-2c75-4d25-a00e-b91670d12327"
  MF_MT_VIDEO_LIGHTING = "53a0529c-890b-4216-8bf9-599367ad6d20"
  MF_MT_VIDEO_NOMINAL_RANGE = "c21b8ee5-b956-4071-8daf-325edf5cab11"
  MF_MT_GEOMETRIC_APERTURE = "66758743-7e5f-400d-980a-aa8596c85696"
  MF_MT_MINIMUM_DISPLAY_APERTURE = "d7388766-18fe-48c6-a177-ee894867c8c4"
  MF_MT_PAN_SCAN_APERTURE = "79614dde-9187-48fb-b8c7-4d52689de649"
  MF_MT_PAN_SCAN_ENABLED = "4b7f6bc3-8b13-40b2-a993-abf630b8204e"
  MF_MT_AVG_BITRATE = "20332624-fb0d-4d9e-bd0d-cbf6786c102e"
  MF_MT_AVG_BIT_ERROR_RATE = "799cabd6-3508-4db4-a3c7-569cd533deb1"
  MF_MT_MAX_KEYFRAME_SPACING = "c16eb52b-73a1-476f-8d62-839d6a020652"
  MF_MT_USER_DATA = "b6bc765f-4c3b-40a4-bd51-2535b66fe09d"
  MF_MT_OUTPUT_BUFFER_NUM = "a505d3ac-f930-436e-8ede-93a509ce23b2"
  MF_MT_REALTIME_CONTENT = "bb12d222-2bdb-425e-91ec-2308e189a58f"
  MF_MT_DEFAULT_STRIDE = "644b4e48-1e02-4516-b0eb-c01ca9d49ac6"
  MF_MT_PALETTE = "6d283f42-9846-4410-afd9-654d503b1a54"
  MF_MT_AM_FORMAT_TYPE = "73d1072d-1870-4174-a063-29ff4ff6c11e"
  MF_MT_VIDEO_PROFILE = "ad76a80b-2d5c-4e0b-b375-64e520137036"
  MF_MT_VIDEO_LEVEL = "96f66574-11c5-4015-8666-bff516436da7"
  MF_MT_MPEG_START_TIME_CODE = "91f67885-4333-4280-97cd-bd5a6c03a06e"
  MF_MT_MPEG2_PROFILE = "ad76a80b-2d5c-4e0b-b375-64e520137036"
  MF_MT_MPEG2_LEVEL = "96f66574-11c5-4015-8666-bff516436da7"
  MF_MT_MPEG2_FLAGS = "31e3991d-f701-4b2f-b426-8ae3bda9e04b"
  MF_MT_MPEG_SEQUENCE_HEADER = "3c036de7-3ad0-4c9e-9216-ee6d6ac21cb3"
  MF_MT_MPEG2_STANDARD = "a20af9e8-928a-4b26-aaa9-f05c74cac47c"
  MF_MT_MPEG2_TIMECODE = "5229ba10-e29d-4f80-a59c-df4f180207d2"
  MF_MT_MPEG2_CONTENT_PACKET = "825d55e4-4f12-4197-9eb3-59b6e4710f06"
  MF_MT_MPEG2_ONE_FRAME_PER_PACKET = "91a49eb5-1d20-4b42-ace8-804269bf95ed"
  MF_MT_MPEG2_HDCP = "168f1b4a-3e91-450f-aea7-e4baeadae5ba"
  MF_MT_H264_MAX_CODEC_CONFIG_DELAY = "f5929986-4c45-4fbb-bb49-6cc534d05b9b"
  MF_MT_H264_SUPPORTED_SLICE_MODES = "c8be1937-4d64-4549-8343-a8086c0bfda5"
  MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES = "89a52c01-f282-48d2-b522-22e6ae633199"
  MF_MT_H264_RESOLUTION_SCALING = "e3854272-f715-4757-ba90-1b696c773457"
  MF_MT_H264_SIMULCAST_SUPPORT = "9ea2d63d-53f0-4a34-b94e-9de49a078cb3"
  MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES = "6a8ac47e-519c-4f18-9bb3-7eeaaea5594d"
  MF_MT_H264_MAX_MB_PER_SEC = "45256d30-7215-4576-9336-b0f1bcd59bb2"
  MF_MT_H264_SUPPORTED_USAGES = "60b1a998-dc01-40ce-9736-aba845a2dbdc"
  MF_MT_H264_CAPABILITIES = "bb3bd508-490a-11e0-99e4-1316dfd72085"
  MF_MT_H264_SVC_CAPABILITIES = "f8993abe-d937-4a8f-bbca-6966fe9e1152"
  MF_MT_H264_USAGE = "359ce3a5-af00-49ca-a2f4-2ac94ca82b61"
  MF_MT_H264_RATE_CONTROL_MODES = "705177d8-45cb-11e0-ac7d-b91ce0d72085"
  MF_MT_H264_LAYOUT_PER_STREAM = "85e299b2-90e3-4fe8-b2f5-c067e0bfe57a"
  MF_MT_IN_BAND_PARAMETER_SET = "75da5090-910b-4a03-896c-7b898feea5af"
  MF_MT_MPEG4_TRACK_TYPE = "54f486dd-9327-4f6d-80ab-6f709ebb4cce"
  MF_MT_CONTAINER_RATE_SCALING = "83877f5e-0444-4e28-8479-6db0989b8c09"
  MF_MT_DV_AAUX_SRC_PACK_0 = "84bd5d88-0fb8-4ac8-be4b-a8848bef98f3"
  MF_MT_DV_AAUX_CTRL_PACK_0 = "f731004e-1dd1-4515-aabe-f0c06aa536ac"
  MF_MT_DV_AAUX_SRC_PACK_1 = "720e6544-0225-4003-a651-0196563a958e"
  MF_MT_DV_AAUX_CTRL_PACK_1 = "cd1f470d-1f04-4fe0-bfb9-d07ae0386ad8"
  MF_MT_DV_VAUX_SRC_PACK = "41402d9d-7b57-43c6-b129-2cb997f15009"
  MF_MT_DV_VAUX_CTRL_PACK = "2f84e1c4-0da1-4788-938e-0dfbfbb34b48"
  MF_MT_ARBITRARY_HEADER = "9e6bd6f5-0109-4f95-84ac-9309153a19fc"
  MF_MT_ARBITRARY_FORMAT = "5a75b249-0d7d-49a1-a1c3-e0d87f0cade5"
  MF_MT_IMAGE_LOSS_TOLERANT = "ed062cf4-e34e-4922-be99-934032133d7c"
  MF_MT_MPEG4_SAMPLE_DESCRIPTION = "261e9d83-9529-4b8f-a111-8b9c950a81a9"
  MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY = "9aa7e155-b64a-4c1d-a500-455d600b6560"
  MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION = "f715cf3e-a964-4c3f-94ae-9d6ba7264641"
  MF_MT_ORIGINAL_4CC = "d7be3fe0-2bc7-492d-b843-61a1919b70c3"
  MF_MT_ORIGINAL_WAVE_FORMAT_TAG = "8cbbc843-9fd9-49c2-882f-a72586c408ad"
  MF_MT_FRAME_RATE_RANGE_MIN = "d2e7558c-dc1f-403f-9a72-d28bb1eb3b5e"
  MF_MT_FRAME_RATE_RANGE_MAX = "e3371d41-b4cf-4a05-bd4e-20b88bb2c4d6"
  MF_LOW_LATENCY = "9c27891a-ed7a-40e1-88e8-b22727a024ee"
  MF_VIDEO_MAX_MB_PER_SEC = "e3f2e203-d445-4b8c-9211-ae390d3ba017"
  MF_DISABLE_FRAME_CORRUPTION_INFO = "7086e16c-49c5-4201-882a-8538f38cf13a"
  MFStreamExtension_CameraExtrinsics = "686196d0-13e2-41d9-9638-ef032c272a52"
  MFSampleExtension_CameraExtrinsics = "6b761658-b7ec-4c3b-8225-8623cabec31d"
  MFStreamExtension_PinholeCameraIntrinsics = "dbac0455-0ec8-4aef-9c32-7a3ee3456f53"
  MFSampleExtension_PinholeCameraIntrinsics = "4ee3b6c5-6a15-4e72-9761-70c1db8b9fe3"
  MFMediaType_Default = "81a412e6-8103-4b06-857f-1862781024ac"
  MFMediaType_Audio = "73647561-0000-0010-8000-00aa00389b71"
  MFMediaType_Video = "73646976-0000-0010-8000-00aa00389b71"
  MFMediaType_Protected = "7b4b6fe6-9d04-4494-be14-7e0bd076c8e4"
  MFMediaType_SAMI = "e69669a0-3dcd-40cb-9e2e-3708387c0616"
  MFMediaType_Script = "72178c22-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_Image = "72178c23-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_HTML = "72178c24-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_Binary = "72178c25-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_FileTransfer = "72178c26-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFMediaType_Stream = "e436eb83-524f-11ce-9f53-0020af0ba770"
  MFMediaType_MultiplexedFrames = "6ea542b0-281f-4231-a464-fe2f5022501c"
  MFMediaType_Subtitle = "a6d13581-ed50-4e65-ae08-26065576aacc"
  MFMediaType_Perception = "597ff6f9-6ea2-4670-85b4-ea84073fe940"
  MFImageFormat_JPEG = "19e4a5aa-5662-4fc5-a0c0-1758028e1057"
  MFImageFormat_RGB32 = "00000016-0000-0010-8000-00aa00389b71"
  MFStreamFormat_MPEG2Transport = "e06d8023-db46-11cf-b4d1-00805f6cbbea"
  MFStreamFormat_MPEG2Program = "263067d1-d330-45dc-b669-34d986e4e3e1"
  AM_MEDIA_TYPE_REPRESENTATION = "e2e42ad2-132c-491e-a268-3c7c2dca181f"
  FORMAT_MFVideoFormat = "aed4ab2d-7326-43cb-9464-c879cab9c43d"
  MFMediaType_Metadata = "2c8fa20c-82bb-4782-90a0-98a2a5bd8ef8"
  CLSID_MFSourceResolver = "90eab60f-e43a-4188-bcc4-e47fdf04868c"
  MF_DEVICESTREAM_ATTRIBUTE_FACEAUTH_CAPABILITY = "cb6fd12a-2248-4e41-ad46-e78bb90ab9fc"
  MF_DEVICESTREAM_ATTRIBUTE_SECURE_CAPABILITY = "940fd626-ea6e-4684-9840-36bd6ec9fbef"
  MEDIASINK_FIXED_STREAMS = 1_u32
  MEDIASINK_CANNOT_MATCH_CLOCK = 2_u32
  MEDIASINK_RATELESS = 4_u32
  MEDIASINK_CLOCK_REQUIRED = 8_u32
  MEDIASINK_CAN_PREROLL = 16_u32
  MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = 32_u32
  MFCLOCK_FREQUENCY_HNS = 10000000_u32
  MFCLOCK_TOLERANCE_UNKNOWN = 50000_u32
  MFCLOCK_JITTER_ISR = 1000_u32
  MFCLOCK_JITTER_DPC = 4000_u32
  MFCLOCK_JITTER_PASSIVE = 10000_u32
  PRESENTATION_CURRENT_POSITION = 9223372036854775807_u64
  MF_PD_ADAPTIVE_STREAMING = "ea0d5d97-29f9-488b-ae6b-7d6b4136112b"
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS = 1_u32
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST = 2_u32
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES = 4_u32
  MFRR_INFO_VERSION = 0_u32
  MF_USER_MODE_COMPONENT_LOAD = 1_u32
  MF_KERNEL_MODE_COMPONENT_LOAD = 2_u32
  MF_GRL_LOAD_FAILED = 16_u32
  MF_INVALID_GRL_SIGNATURE = 32_u32
  MF_GRL_ABSENT = 4096_u32
  MF_COMPONENT_REVOKED = 8192_u32
  MF_COMPONENT_INVALID_EKU = 16384_u32
  MF_COMPONENT_CERT_REVOKED = 32768_u32
  MF_COMPONENT_INVALID_ROOT = 65536_u32
  MF_COMPONENT_HS_CERT_REVOKED = 131072_u32
  MF_COMPONENT_LS_CERT_REVOKED = 262144_u32
  MF_BOOT_DRIVER_VERIFICATION_FAILED = 1048576_u32
  MF_TEST_SIGNED_COMPONENT_LOADING = 16777216_u32
  MF_MINCRYPT_FAILURE = 268435456_u32
  SHA_HASH_LEN = 20_u32
  MFSEQUENCER_INVALID_ELEMENT_ID = 4294967295_u32
  MF_WRAPPED_BUFFER_SERVICE = "ab544072-c269-4ebc-a552-1c3b32bed5ca"
  CLSID_MPEG2ByteStreamPlugin = "40871c59-ab40-471f-8dc3-1f259d862479"
  MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START = 67108864_u32
  MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID = 67108864_u32
  MF_UNKNOWN_DURATION = 0_u32
  MFStreamExtension_ExtendedCameraIntrinsics = "aa74b3df-9a2c-48d6-8393-5bd1c1a81e6e"
  MFSampleExtension_ExtendedCameraIntrinsics = "560bc4a5-4de0-4113-9cdc-832db9740f3d"
  MF_INVALID_PRESENTATION_TIME = 9223372036854775808_u64
  MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1_u32
  MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2_u32
  MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4_u32
  MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8_u32
  MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1_u32
  MFASYNC_SIGNAL_CALLBACK = 2_u32
  MFASYNC_BLOCKING_CALLBACK = 4_u32
  MFASYNC_REPLY_CALLBACK = 8_u32
  MFASYNC_LOCALIZE_REMOTE_CALLBACK = 16_u32
  MFASYNC_CALLBACK_QUEUE_UNDEFINED = 0_u32
  MFASYNC_CALLBACK_QUEUE_STANDARD = 1_u32
  MFASYNC_CALLBACK_QUEUE_RT = 2_u32
  MFASYNC_CALLBACK_QUEUE_IO = 3_u32
  MFASYNC_CALLBACK_QUEUE_TIMER = 4_u32
  MFASYNC_CALLBACK_QUEUE_MULTITHREADED = 5_u32
  MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION = 7_u32
  MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK = 4294901760_u32
  MFASYNC_CALLBACK_QUEUE_ALL = 4294967295_u32
  MFBYTESTREAM_IS_READABLE = 1_u32
  MFBYTESTREAM_IS_WRITABLE = 2_u32
  MFBYTESTREAM_IS_SEEKABLE = 4_u32
  MFBYTESTREAM_IS_REMOTE = 8_u32
  MFBYTESTREAM_IS_DIRECTORY = 128_u32
  MFBYTESTREAM_HAS_SLOW_SEEK = 256_u32
  MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED = 512_u32
  MFBYTESTREAM_SHARE_WRITE = 1024_u32
  MFBYTESTREAM_DOES_NOT_USE_NETWORK = 2048_u32
  MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1_u32
  MF_MEDIA_SHARING_ENGINE_INITIAL_SEEK_TIME = "6f3497f5-d528-4a4f-8dd7-db36657ec4c9"
  MF_SHUTDOWN_RENDERER_ON_ENGINE_SHUTDOWN = "c112d94d-6b9c-48f8-b6f9-7950ff9ab71e"
  MF_PREFERRED_SOURCE_URI = "5fc85488-436a-4db8-90af-4db402ae5c57"
  MF_SHARING_ENGINE_SHAREDRENDERER = "efa446a0-73e7-404e-8ae2-fef60af5a32b"
  MF_SHARING_ENGINE_CALLBACK = "57dc1e95-d252-43fa-9bbc-180070eefe6d"
  MFT_STREAMS_UNLIMITED = 4294967295_u32
  MFT_OUTPUT_BOUND_UPPER_UNBOUNDED = 9223372036854775807_u64
  OPM_GET_CURRENT_HDCP_SRM_VERSION = "99c5ceff-5f1d-4879-81c1-c52443c9482b"
  OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION = "0db59d74-a992-492e-a0bd-c23fda564e00"
  OPM_GET_ACP_AND_CGMSA_SIGNALING = "6629a591-3b79-4cf3-924a-11e8e7811671"
  OPM_GET_CONNECTOR_TYPE = "81d0bfd5-6afe-48c2-99c0-95a08f97c5da"
  OPM_GET_SUPPORTED_PROTECTION_TYPES = "38f2a801-9a6c-48bb-9107-b6696e6f1797"
  OPM_GET_VIRTUAL_PROTECTION_LEVEL = "b2075857-3eda-4d5d-88db-748f8c1a0549"
  OPM_GET_ACTUAL_PROTECTION_LEVEL = "1957210a-7766-452a-b99a-d27aed54f03a"
  OPM_GET_ACTUAL_OUTPUT_FORMAT = "d7bf1ba3-ad13-4f8e-af98-0dcb3ca204cc"
  OPM_GET_ADAPTER_BUS_TYPE = "c6f4d673-6174-4184-8e35-f6db5200bcba"
  OPM_GET_OUTPUT_ID = "72cb6df3-244f-40ce-b09e-20506af6302f"
  OPM_GET_DVI_CHARACTERISTICS = "a470b3bb-5dd7-4172-839c-3d3776e0ebf5"
  OPM_GET_CODEC_INFO = "4f374491-8f5f-4445-9dba-95588f6b58b4"
  OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT = "3b129589-2af8-4ef0-96a2-704a845a218e"
  OPM_SET_PROTECTION_LEVEL = "9bb9327c-4eb5-4727-9f00-b42b0919c0da"
  OPM_SET_ACP_AND_CGMSA_SIGNALING = "09a631a5-d684-4c60-8e4d-d3bb0f0be3ee"
  OPM_SET_HDCP_SRM = "8b5ef5d1-c30d-44ff-84a5-ea71dce78f13"
  OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD = "39ce333e-4cc0-44ae-bfcc-da50b5f82e72"
  WM_CODEC_ONEPASS_CBR = 1_u32
  WM_CODEC_ONEPASS_VBR = 2_u32
  WM_CODEC_TWOPASS_CBR = 4_u32
  WM_CODEC_TWOPASS_VBR_UNCONSTRAINED = 8_u32
  WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED = 16_u32
  SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION = 1_u32
  SYSFXUI_DONOTSHOW_ROOMCORRECTION = 2_u32
  SYSFXUI_DONOTSHOW_BASSMANAGEMENT = 4_u32
  SYSFXUI_DONOTSHOW_BASSBOOST = 8_u32
  SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION = 16_u32
  SYSFXUI_DONOTSHOW_VIRTUALSURROUND = 32_u32
  SYSFXUI_DONOTSHOW_SPEAKERFILLING = 64_u32
  SYSFXUI_DONOTSHOW_CHANNELPHANTOMING = 128_u32
  AEC_MAX_SYSTEM_MODES = 6_u32
  WMAAECMA_E_NO_ACTIVE_RENDER_STREAM = 2278293514_u32
  MEDIASUBTYPE_Y41T = "54313459-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_Y42T = "54323459-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_V216 = "36313256-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_V410 = "30313456-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_v210 = "30313276-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_I420 = "30323449-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WVC1 = "31435657-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wvc1 = "31637677-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVA = "41564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmva = "61766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVB = "42564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmvb = "62766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVR = "52564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmvr = "72766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMVP = "50564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmvp = "70766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WVP2 = "32505657-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wvp2 = "32707677-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMV3 = "33564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmv3 = "33766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMV2 = "32564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmv2 = "32766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMV1 = "31564d57-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_wmv1 = "31766d77-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPG4 = "3447504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mpg4 = "3467706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MP42 = "3234504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mp42 = "3234706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MP43 = "3334504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mp43 = "3334706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MP4S = "5334504d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_mp4s = "7334706d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_M4S2 = "3253344d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_m4s2 = "3273346d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MSS1 = "3153534d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MSS2 = "3253534d-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MSAUDIO1 = "00000160-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO2 = "00000161-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO3 = "00000162-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO_LOSSLESS = "00000163-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMASPDIF = "00000164-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_WMAUDIO4 = "00000168-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_ADTS_AAC = "00001600-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_RAW_AAC = "00001601-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_LOAS = "00001602-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC = "00001608-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC = "00001609-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC = "0000160a-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC = "0000160b-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_MPEG_HEAAC = "00001610-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_RAW_AAC1 = "000000ff-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DVM = "00002000-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DTS2 = "00002001-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_DOLBY_DDPLUS = "a7fb87af-2d02-42fb-a4d4-05cd93843bdd"
  MEDIASUBTYPE_DOLBY_TRUEHD = "eb27cec4-163e-4ca3-8b74-8e25f91b517e"
  MEDIASUBTYPE_DTS_HD = "a2e58eb7-0fa9-48bb-a40c-fa0e156d0645"
  MEDIASUBTYPE_DTS_HD_HRA = "a61ac364-ad0e-4744-89ff-213ce0df8804"
  MEDIASUBTYPE_h264 = "34363268-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_AVC1 = "31435641-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_X264 = "34363258-0000-0010-8000-00aa00389b71"
  MEDIASUBTYPE_x264 = "34363278-0000-0010-8000-00aa00389b71"
  MF_VIDEODSP_MODE = "16d720f0-768c-11de-8a39-0800200c9a66"
  MFSampleExtension_VideoDSPMode = "c12d55cb-d7d9-476d-81f3-69117f163ea0"
  CLSID_CTocEntry = "f22f5e05-585c-4def-8523-6555cfbc0cb3"
  CLSID_CTocEntryList = "3a8cccbc-0efd-43a3-b838-f38a552ba237"
  CLSID_CToc = "4fe24495-28ce-4920-a4c4-e556e1f0df2a"
  CLSID_CTocCollection = "5058292d-a244-4840-ab44-480975c4ffe4"
  CLSID_CTocParser = "499eaeea-2737-4849-8bb6-47f107eaf358"
  CLSID_CAsfTocParser = "9b77c0f2-8735-46c5-b90f-5f0b303ef6ab"
  CLSID_CAviTocParser = "3adce5cc-13c8-4573-b328-ed438eb694f9"
  CLSID_CFileIo = "11993195-1244-4840-ab44-480975c4ffe4"
  CLSID_CFileClient = "bfccd195-1244-4840-ab44-480975c4ffe4"
  CLSID_CClusterDetectorEx = "47354492-827e-4b8a-b318-c80eba1381f0"
  E_TOCPARSER_INVALIDASFFILE = -1728053247_i32
  E_TOCPARSER_INVALIDRIFFFILE = -1728053246_i32
  TOC_MAX_DESCRIPTION_SIZE = 65535_u32
  TOC_ENTRY_MAX_TITLE_SIZE = 65535_u32
  MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC = 65535_u32
  MFASFINDEXER_NO_FIXED_INTERVAL = 4294967295_u32
  MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT = 18446744073709551615_u64
  MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN = 18446744073709551615_u64
  MFASF_MAX_STREAM_NUMBER = 127_u32
  MFASF_INVALID_STREAM_NUMBER = 128_u32
  MFASF_PAYLOADEXTENSION_MAX_SIZE = 255_u32
  MFASF_PAYLOADEXTENSION_VARIABLE_SIZE = 65535_u32
  MFASF_DEFAULT_BUFFER_WINDOW_MS = 3000_u32
  FACILITY_MF = 13_u32
  FACILITY_MF_WIN32 = 7_u32
  MF_E_PLATFORM_NOT_INITIALIZED = -1072875856_i32
  MF_E_BUFFERTOOSMALL = -1072875855_i32
  MF_E_INVALIDREQUEST = -1072875854_i32
  MF_E_INVALIDSTREAMNUMBER = -1072875853_i32
  MF_E_INVALIDMEDIATYPE = -1072875852_i32
  MF_E_NOTACCEPTING = -1072875851_i32
  MF_E_NOT_INITIALIZED = -1072875850_i32
  MF_E_UNSUPPORTED_REPRESENTATION = -1072875849_i32
  MF_E_NO_MORE_TYPES = -1072875847_i32
  MF_E_UNSUPPORTED_SERVICE = -1072875846_i32
  MF_E_UNEXPECTED = -1072875845_i32
  MF_E_INVALIDNAME = -1072875844_i32
  MF_E_INVALIDTYPE = -1072875843_i32
  MF_E_INVALID_FILE_FORMAT = -1072875842_i32
  MF_E_INVALIDINDEX = -1072875841_i32
  MF_E_INVALID_TIMESTAMP = -1072875840_i32
  MF_E_UNSUPPORTED_SCHEME = -1072875837_i32
  MF_E_UNSUPPORTED_BYTESTREAM_TYPE = -1072875836_i32
  MF_E_UNSUPPORTED_TIME_FORMAT = -1072875835_i32
  MF_E_NO_SAMPLE_TIMESTAMP = -1072875832_i32
  MF_E_NO_SAMPLE_DURATION = -1072875831_i32
  MF_E_INVALID_STREAM_DATA = -1072875829_i32
  MF_E_RT_UNAVAILABLE = -1072875825_i32
  MF_E_UNSUPPORTED_RATE = -1072875824_i32
  MF_E_THINNING_UNSUPPORTED = -1072875823_i32
  MF_E_REVERSE_UNSUPPORTED = -1072875822_i32
  MF_E_UNSUPPORTED_RATE_TRANSITION = -1072875821_i32
  MF_E_RATE_CHANGE_PREEMPTED = -1072875820_i32
  MF_E_NOT_FOUND = -1072875819_i32
  MF_E_NOT_AVAILABLE = -1072875818_i32
  MF_E_NO_CLOCK = -1072875817_i32
  MF_S_MULTIPLE_BEGIN = 866008_i32
  MF_E_MULTIPLE_BEGIN = -1072875815_i32
  MF_E_MULTIPLE_SUBSCRIBERS = -1072875814_i32
  MF_E_TIMER_ORPHANED = -1072875813_i32
  MF_E_STATE_TRANSITION_PENDING = -1072875812_i32
  MF_E_UNSUPPORTED_STATE_TRANSITION = -1072875811_i32
  MF_E_UNRECOVERABLE_ERROR_OCCURRED = -1072875810_i32
  MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = -1072875809_i32
  MF_E_SAMPLE_NOT_WRITABLE = -1072875808_i32
  MF_E_INVALID_KEY = -1072875806_i32
  MF_E_BAD_STARTUP_VERSION = -1072875805_i32
  MF_E_UNSUPPORTED_CAPTION = -1072875804_i32
  MF_E_INVALID_POSITION = -1072875803_i32
  MF_E_ATTRIBUTENOTFOUND = -1072875802_i32
  MF_E_PROPERTY_TYPE_NOT_ALLOWED = -1072875801_i32
  MF_E_PROPERTY_TYPE_NOT_SUPPORTED = -1072875800_i32
  MF_E_PROPERTY_EMPTY = -1072875799_i32
  MF_E_PROPERTY_NOT_EMPTY = -1072875798_i32
  MF_E_PROPERTY_VECTOR_NOT_ALLOWED = -1072875797_i32
  MF_E_PROPERTY_VECTOR_REQUIRED = -1072875796_i32
  MF_E_OPERATION_CANCELLED = -1072875795_i32
  MF_E_BYTESTREAM_NOT_SEEKABLE = -1072875794_i32
  MF_E_DISABLED_IN_SAFEMODE = -1072875793_i32
  MF_E_CANNOT_PARSE_BYTESTREAM = -1072875792_i32
  MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = -1072875791_i32
  MF_E_MEDIAPROC_WRONGSTATE = -1072875790_i32
  MF_E_RT_THROUGHPUT_NOT_AVAILABLE = -1072875789_i32
  MF_E_RT_TOO_MANY_CLASSES = -1072875788_i32
  MF_E_RT_WOULDBLOCK = -1072875787_i32
  MF_E_NO_BITPUMP = -1072875786_i32
  MF_E_RT_OUTOFMEMORY = -1072875785_i32
  MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = -1072875784_i32
  MF_E_INSUFFICIENT_BUFFER = -1072860816_i32
  MF_E_CANNOT_CREATE_SINK = -1072875782_i32
  MF_E_BYTESTREAM_UNKNOWN_LENGTH = -1072875781_i32
  MF_E_SESSION_PAUSEWHILESTOPPED = -1072875780_i32
  MF_S_ACTIVATE_REPLACED = 866045_i32
  MF_E_FORMAT_CHANGE_NOT_SUPPORTED = -1072875778_i32
  MF_E_INVALID_WORKQUEUE = -1072875777_i32
  MF_E_DRM_UNSUPPORTED = -1072875776_i32
  MF_E_UNAUTHORIZED = -1072875775_i32
  MF_E_OUT_OF_RANGE = -1072875774_i32
  MF_E_INVALID_CODEC_MERIT = -1072875773_i32
  MF_E_HW_MFT_FAILED_START_STREAMING = -1072875772_i32
  MF_E_OPERATION_IN_PROGRESS = -1072875771_i32
  MF_E_HARDWARE_DRM_UNSUPPORTED = -1072875770_i32
  MF_E_DURATION_TOO_LONG = -1072875769_i32
  MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL = -1072875768_i32
  MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL = -1072875767_i32
  MF_S_ASF_PARSEINPROGRESS = 1074608792_i32
  MF_E_ASF_PARSINGINCOMPLETE = -1072874856_i32
  MF_E_ASF_MISSINGDATA = -1072874855_i32
  MF_E_ASF_INVALIDDATA = -1072874854_i32
  MF_E_ASF_OPAQUEPACKET = -1072874853_i32
  MF_E_ASF_NOINDEX = -1072874852_i32
  MF_E_ASF_OUTOFRANGE = -1072874851_i32
  MF_E_ASF_INDEXNOTLOADED = -1072874850_i32
  MF_E_ASF_TOO_MANY_PAYLOADS = -1072874849_i32
  MF_E_ASF_UNSUPPORTED_STREAM_TYPE = -1072874848_i32
  MF_E_ASF_DROPPED_PACKET = -1072874847_i32
  MF_E_NO_EVENTS_AVAILABLE = -1072873856_i32
  MF_E_INVALID_STATE_TRANSITION = -1072873854_i32
  MF_E_END_OF_STREAM = -1072873852_i32
  MF_E_SHUTDOWN = -1072873851_i32
  MF_E_MP3_NOTFOUND = -1072873850_i32
  MF_E_MP3_OUTOFDATA = -1072873849_i32
  MF_E_MP3_NOTMP3 = -1072873848_i32
  MF_E_MP3_NOTSUPPORTED = -1072873847_i32
  MF_E_NO_DURATION = -1072873846_i32
  MF_E_INVALID_FORMAT = -1072873844_i32
  MF_E_PROPERTY_NOT_FOUND = -1072873843_i32
  MF_E_PROPERTY_READ_ONLY = -1072873842_i32
  MF_E_PROPERTY_NOT_ALLOWED = -1072873841_i32
  MF_E_MEDIA_SOURCE_NOT_STARTED = -1072873839_i32
  MF_E_UNSUPPORTED_FORMAT = -1072873832_i32
  MF_E_MP3_BAD_CRC = -1072873831_i32
  MF_E_NOT_PROTECTED = -1072873830_i32
  MF_E_MEDIA_SOURCE_WRONGSTATE = -1072873829_i32
  MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = -1072873828_i32
  MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = -1072873827_i32
  MF_E_UNSUPPORTED_CHARACTERISTICS = -1072873826_i32
  MF_E_NO_AUDIO_RECORDING_DEVICE = -1072873825_i32
  MF_E_AUDIO_RECORDING_DEVICE_IN_USE = -1072873824_i32
  MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED = -1072873823_i32
  MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED = -1072873822_i32
  MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED = -1072873821_i32
  MF_E_NETWORK_RESOURCE_FAILURE = -1072872856_i32
  MF_E_NET_WRITE = -1072872855_i32
  MF_E_NET_READ = -1072872854_i32
  MF_E_NET_REQUIRE_NETWORK = -1072872853_i32
  MF_E_NET_REQUIRE_ASYNC = -1072872852_i32
  MF_E_NET_BWLEVEL_NOT_SUPPORTED = -1072872851_i32
  MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = -1072872850_i32
  MF_E_NET_MANUALSS_NOT_SUPPORTED = -1072872849_i32
  MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = -1072872848_i32
  MF_E_NET_CACHESTREAM_NOT_FOUND = -1072872847_i32
  MF_I_MANUAL_PROXY = 1074610802_i32
  MF_E_NET_REQUIRE_INPUT = -1072872844_i32
  MF_E_NET_REDIRECT = -1072872843_i32
  MF_E_NET_REDIRECT_TO_PROXY = -1072872842_i32
  MF_E_NET_TOO_MANY_REDIRECTS = -1072872841_i32
  MF_E_NET_TIMEOUT = -1072872840_i32
  MF_E_NET_CLIENT_CLOSE = -1072872839_i32
  MF_E_NET_BAD_CONTROL_DATA = -1072872838_i32
  MF_E_NET_INCOMPATIBLE_SERVER = -1072872837_i32
  MF_E_NET_UNSAFE_URL = -1072872836_i32
  MF_E_NET_CACHE_NO_DATA = -1072872835_i32
  MF_E_NET_EOL = -1072872834_i32
  MF_E_NET_BAD_REQUEST = -1072872833_i32
  MF_E_NET_INTERNAL_SERVER_ERROR = -1072872832_i32
  MF_E_NET_SESSION_NOT_FOUND = -1072872831_i32
  MF_E_NET_NOCONNECTION = -1072872830_i32
  MF_E_NET_CONNECTION_FAILURE = -1072872829_i32
  MF_E_NET_INCOMPATIBLE_PUSHSERVER = -1072872828_i32
  MF_E_NET_SERVER_ACCESSDENIED = -1072872827_i32
  MF_E_NET_PROXY_ACCESSDENIED = -1072872826_i32
  MF_E_NET_CANNOTCONNECT = -1072872825_i32
  MF_E_NET_INVALID_PUSH_TEMPLATE = -1072872824_i32
  MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = -1072872823_i32
  MF_E_NET_BUSY = -1072872822_i32
  MF_E_NET_RESOURCE_GONE = -1072872821_i32
  MF_E_NET_ERROR_FROM_PROXY = -1072872820_i32
  MF_E_NET_PROXY_TIMEOUT = -1072872819_i32
  MF_E_NET_SERVER_UNAVAILABLE = -1072872818_i32
  MF_E_NET_TOO_MUCH_DATA = -1072872817_i32
  MF_E_NET_SESSION_INVALID = -1072872816_i32
  MF_E_OFFLINE_MODE = -1072872815_i32
  MF_E_NET_UDP_BLOCKED = -1072872814_i32
  MF_E_NET_UNSUPPORTED_CONFIGURATION = -1072872813_i32
  MF_E_NET_PROTOCOL_DISABLED = -1072872812_i32
  MF_E_NET_COMPANION_DRIVER_DISCONNECT = -1072872811_i32
  MF_E_ALREADY_INITIALIZED = -1072871856_i32
  MF_E_BANDWIDTH_OVERRUN = -1072871855_i32
  MF_E_LATE_SAMPLE = -1072871854_i32
  MF_E_FLUSH_NEEDED = -1072871853_i32
  MF_E_INVALID_PROFILE = -1072871852_i32
  MF_E_INDEX_NOT_COMMITTED = -1072871851_i32
  MF_E_NO_INDEX = -1072871850_i32
  MF_E_CANNOT_INDEX_IN_PLACE = -1072871849_i32
  MF_E_MISSING_ASF_LEAKYBUCKET = -1072871848_i32
  MF_E_INVALID_ASF_STREAMID = -1072871847_i32
  MF_E_STREAMSINK_REMOVED = -1072870856_i32
  MF_E_STREAMSINKS_OUT_OF_SYNC = -1072870854_i32
  MF_E_STREAMSINKS_FIXED = -1072870853_i32
  MF_E_STREAMSINK_EXISTS = -1072870852_i32
  MF_E_SAMPLEALLOCATOR_CANCELED = -1072870851_i32
  MF_E_SAMPLEALLOCATOR_EMPTY = -1072870850_i32
  MF_E_SINK_ALREADYSTOPPED = -1072870849_i32
  MF_E_ASF_FILESINK_BITRATE_UNKNOWN = -1072870848_i32
  MF_E_SINK_NO_STREAMS = -1072870847_i32
  MF_S_SINK_NOT_FINALIZED = 870978_i32
  MF_E_METADATA_TOO_LONG = -1072870845_i32
  MF_E_SINK_NO_SAMPLES_PROCESSED = -1072870844_i32
  MF_E_SINK_HEADERS_NOT_FOUND = -1072870843_i32
  MF_E_VIDEO_REN_NO_PROCAMP_HW = -1072869856_i32
  MF_E_VIDEO_REN_NO_DEINTERLACE_HW = -1072869855_i32
  MF_E_VIDEO_REN_COPYPROT_FAILED = -1072869854_i32
  MF_E_VIDEO_REN_SURFACE_NOT_SHARED = -1072869853_i32
  MF_E_VIDEO_DEVICE_LOCKED = -1072869852_i32
  MF_E_NEW_VIDEO_DEVICE = -1072869851_i32
  MF_E_NO_VIDEO_SAMPLE_AVAILABLE = -1072869850_i32
  MF_E_NO_AUDIO_PLAYBACK_DEVICE = -1072869756_i32
  MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = -1072869755_i32
  MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = -1072869754_i32
  MF_E_AUDIO_SERVICE_NOT_RUNNING = -1072869753_i32
  MF_E_AUDIO_BUFFER_SIZE_ERROR = -1072869752_i32
  MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR = -1072869751_i32
  MF_E_TOPO_INVALID_OPTIONAL_NODE = -1072868850_i32
  MF_E_TOPO_CANNOT_FIND_DECRYPTOR = -1072868847_i32
  MF_E_TOPO_CODEC_NOT_FOUND = -1072868846_i32
  MF_E_TOPO_CANNOT_CONNECT = -1072868845_i32
  MF_E_TOPO_UNSUPPORTED = -1072868844_i32
  MF_E_TOPO_INVALID_TIME_ATTRIBUTES = -1072868843_i32
  MF_E_TOPO_LOOPS_IN_TOPOLOGY = -1072868842_i32
  MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = -1072868841_i32
  MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = -1072868840_i32
  MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = -1072868839_i32
  MF_E_TOPO_MISSING_SOURCE = -1072868838_i32
  MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = -1072868837_i32
  MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = -1072864852_i32
  MF_S_SEQUENCER_CONTEXT_CANCELED = 876973_i32
  MF_E_NO_SOURCE_IN_CACHE = -1072864850_i32
  MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = 876975_i32
  MF_E_TRANSFORM_TYPE_NOT_SET = -1072861856_i32
  MF_E_TRANSFORM_STREAM_CHANGE = -1072861855_i32
  MF_E_TRANSFORM_INPUT_REMAINING = -1072861854_i32
  MF_E_TRANSFORM_PROFILE_MISSING = -1072861853_i32
  MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = -1072861852_i32
  MF_E_TRANSFORM_PROFILE_TRUNCATED = -1072861851_i32
  MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = -1072861850_i32
  MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = -1072861849_i32
  MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = -1072861848_i32
  MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = -1072861847_i32
  MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = -1072861846_i32
  MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = -1072861845_i32
  MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = -1072861844_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = -1072861843_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = -1072861842_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = -1072861841_i32
  MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = -1072861840_i32
  MF_E_TRANSFORM_NEED_MORE_INPUT = -1072861838_i32
  MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = -1072861837_i32
  MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = -1072861836_i32
  MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = 879989_i32
  MF_E_UNSUPPORTED_D3D_TYPE = -1072861834_i32
  MF_E_TRANSFORM_ASYNC_LOCKED = -1072861833_i32
  MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = -1072861832_i32
  MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION = -1072861831_i32
  MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED = -1072861830_i32
  MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED = -1072861828_i32
  MF_E_LICENSE_INCORRECT_RIGHTS = -1072860856_i32
  MF_E_LICENSE_OUTOFDATE = -1072860855_i32
  MF_E_LICENSE_REQUIRED = -1072860854_i32
  MF_E_DRM_HARDWARE_INCONSISTENT = -1072860853_i32
  MF_E_NO_CONTENT_PROTECTION_MANAGER = -1072860852_i32
  MF_E_LICENSE_RESTORE_NO_RIGHTS = -1072860851_i32
  MF_E_BACKUP_RESTRICTED_LICENSE = -1072860850_i32
  MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = -1072860849_i32
  MF_S_PROTECTION_NOT_REQUIRED = 880976_i32
  MF_E_COMPONENT_REVOKED = -1072860847_i32
  MF_E_TRUST_DISABLED = -1072860846_i32
  MF_E_WMDRMOTA_NO_ACTION = -1072860845_i32
  MF_E_WMDRMOTA_ACTION_ALREADY_SET = -1072860844_i32
  MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = -1072860843_i32
  MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = -1072860842_i32
  MF_E_WMDRMOTA_ACTION_MISMATCH = -1072860841_i32
  MF_E_WMDRMOTA_INVALID_POLICY = -1072860840_i32
  MF_E_POLICY_UNSUPPORTED = -1072860839_i32
  MF_E_OPL_NOT_SUPPORTED = -1072860838_i32
  MF_E_TOPOLOGY_VERIFICATION_FAILED = -1072860837_i32
  MF_E_SIGNATURE_VERIFICATION_FAILED = -1072860836_i32
  MF_E_DEBUGGING_NOT_ALLOWED = -1072860835_i32
  MF_E_CODE_EXPIRED = -1072860834_i32
  MF_E_GRL_VERSION_TOO_LOW = -1072860833_i32
  MF_E_GRL_RENEWAL_NOT_FOUND = -1072860832_i32
  MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = -1072860831_i32
  MF_E_KERNEL_UNTRUSTED = -1072860830_i32
  MF_E_PEAUTH_UNTRUSTED = -1072860829_i32
  MF_E_NON_PE_PROCESS = -1072860827_i32
  MF_E_REBOOT_REQUIRED = -1072860825_i32
  MF_S_WAIT_FOR_POLICY_SET = 881000_i32
  MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = 881001_i32
  MF_E_GRL_INVALID_FORMAT = -1072860822_i32
  MF_E_GRL_UNRECOGNIZED_FORMAT = -1072860821_i32
  MF_E_ALL_PROCESS_RESTART_REQUIRED = -1072860820_i32
  MF_E_PROCESS_RESTART_REQUIRED = -1072860819_i32
  MF_E_USERMODE_UNTRUSTED = -1072860818_i32
  MF_E_PEAUTH_SESSION_NOT_STARTED = -1072860817_i32
  MF_E_PEAUTH_PUBLICKEY_REVOKED = -1072860815_i32
  MF_E_GRL_ABSENT = -1072860814_i32
  MF_S_PE_TRUSTED = 881011_i32
  MF_E_PE_UNTRUSTED = -1072860812_i32
  MF_E_PEAUTH_NOT_STARTED = -1072860811_i32
  MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = -1072860810_i32
  MF_E_PE_SESSIONS_MAXED = -1072860809_i32
  MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = -1072860808_i32
  MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = -1072860807_i32
  MF_E_ITA_UNSUPPORTED_ACTION = -1072860806_i32
  MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = -1072860805_i32
  MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = -1072860804_i32
  MF_E_BAD_OPL_STRUCTURE_FORMAT = -1072860803_i32
  MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = -1072860802_i32
  MF_E_NO_PMP_HOST = -1072860801_i32
  MF_E_ITA_OPL_DATA_NOT_INITIALIZED = -1072860800_i32
  MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = -1072860799_i32
  MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = -1072860798_i32
  MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK = -1072860797_i32
  MF_E_INVALID_AKE_CHANNEL_PARAMETERS = -1072860796_i32
  MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED = -1072860795_i32
  MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM = -1072860794_i32
  MF_E_DRM_MIGRATION_NOT_SUPPORTED = -1072860793_i32
  MF_E_HDCP_AUTHENTICATION_FAILURE = -1072860792_i32
  MF_E_HDCP_LINK_FAILURE = -1072860791_i32
  MF_E_CLOCK_INVALID_CONTINUITY_KEY = -1072849856_i32
  MF_E_CLOCK_NO_TIME_SOURCE = -1072849855_i32
  MF_E_CLOCK_STATE_ALREADY_SET = -1072849854_i32
  MF_E_CLOCK_NOT_SIMPLE = -1072849853_i32
  MF_S_CLOCK_STOPPED = 891972_i32
  MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED = 891973_i32
  MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED = 891974_i32
  MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED = 891975_i32
  MF_E_NO_MORE_DROP_MODES = -1072848856_i32
  MF_E_NO_MORE_QUALITY_LEVELS = -1072848855_i32
  MF_E_DROPTIME_NOT_SUPPORTED = -1072848854_i32
  MF_E_QUALITYKNOB_WAIT_LONGER = -1072848853_i32
  MF_E_QM_INVALIDSTATE = -1072848852_i32
  MF_E_TRANSCODE_NO_CONTAINERTYPE = -1072847856_i32
  MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = -1072847855_i32
  MF_E_TRANSCODE_NO_MATCHING_ENCODER = -1072847854_i32
  MF_E_TRANSCODE_INVALID_PROFILE = -1072847853_i32
  MF_E_ALLOCATOR_NOT_INITIALIZED = -1072846856_i32
  MF_E_ALLOCATOR_NOT_COMMITED = -1072846855_i32
  MF_E_ALLOCATOR_ALREADY_COMMITED = -1072846854_i32
  MF_E_STREAM_ERROR = -1072846853_i32
  MF_E_INVALID_STREAM_STATE = -1072846852_i32
  MF_E_HW_STREAM_NOT_CONNECTED = -1072846851_i32
  MF_E_NO_CAPTURE_DEVICES_AVAILABLE = -1072845856_i32
  MF_E_CAPTURE_SINK_OUTPUT_NOT_SET = -1072845855_i32
  MF_E_CAPTURE_SINK_MIRROR_ERROR = -1072845854_i32
  MF_E_CAPTURE_SINK_ROTATE_ERROR = -1072845853_i32
  MF_E_CAPTURE_ENGINE_INVALID_OP = -1072845852_i32
  MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = -1072845851_i32
  MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT = -1072845850_i32
  MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT = -1072845849_i32
  MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT = -1072845848_i32
  MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS = -1072845847_i32
  MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO = -1072845846_i32
  MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE = -1072845845_i32
  MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED = -1072845844_i32
  MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT = -1072845843_i32
  MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE = -1072844856_i32
  MF_E_TIMELINECONTROLLER_NOT_ALLOWED = -1072844855_i32
  MF_E_TIMELINECONTROLLER_CANNOT_ATTACH = -1072844854_i32
  MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED = -1072843856_i32
  MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED = -1072843855_i32
  MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED = -1072843854_i32
  MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID = -1072843853_i32
  MF_INDEX_SIZE_ERR = 2154823681_u32
  MF_NOT_FOUND_ERR = 2154823688_u32
  MF_NOT_SUPPORTED_ERR = 2154823689_u32
  MF_INVALID_STATE_ERR = 2154823691_u32
  MF_SYNTAX_ERR = 2154823692_u32
  MF_INVALID_ACCESS_ERR = 2154823695_u32
  MF_QUOTA_EXCEEDED_ERR = 2154823702_u32
  MF_PARSE_ERR = 2154823761_u32
  MF_TYPE_ERR = 2154840069_u32
  DEVPKEY_DeviceInterface_IsVirtualCamera = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x6edc630d_u32, 0xc2e3_u16, 0x43b7_u16, StaticArray[0xb2_u8, 0xd1_u8, 0x20_u8, 0x52_u8, 0x5a_u8, 0x1a_u8, 0xf1_u8, 0x20_u8]), 3_u32)
  G_wszspeechformatcaps = "SpeechFormatCap"
  G_wszwmcpcodecname = "_CODECNAME"
  G_wszwmcpsupportedvbrmodes = "_SUPPORTEDVBRMODES"
  G_wszwmcpaudiovbrsupported = "_VBRENABLED"
  G_wszwmcpaudiovbrquality = "_VBRQUALITY"
  G_wszwmcpmaxpasses = "_PASSESRECOMMENDED"
  G_wszwmcpdefaultcrisp = "_DEFAULTCRISP"
  COPP_ProtectionType_Unknown = -2147483648_i32
  COPP_ProtectionType_None = 0_i32
  COPP_ProtectionType_HDCP = 1_i32
  COPP_ProtectionType_ACP = 2_i32
  COPP_ProtectionType_CGMSA = 4_i32
  COPP_ProtectionType_Mask = -2147483641_i32
  COPP_ProtectionType_Reserved = 2147483640_i32
  MF_BYTESTREAM_ORIGIN_NAME = "fc358288-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_CONTENT_TYPE = "fc358289-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_DURATION = "fc35828a-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_LAST_MODIFIED_TIME = "fc35828b-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_IFO_FILE_URI = "fc35828c-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_DLNA_PROFILE_ID = "fc35828d-3cb6-460c-a424-b6681260375a"
  MF_BYTESTREAM_EFFECTIVE_URL = "9afa0209-89d1-42af-8456-1de6b562d691"
  MF_BYTESTREAM_TRANSCODED = "b6c5c282-4dc9-4db9-ab48-cf3b6d8bc5e0"
  CLSID_MFByteStreamProxyClassFactory = "770e8e77-4916-441c-a9a7-b342d0eebc71"
  MEDeviceStreamCreated = "0252a1cf-3540-43b4-9164-d72eb405fa40"
  MF_SA_D3D_AWARE = "eaa35c29-775e-488e-9b61-b3283e49583b"
  MF_SA_REQUIRED_SAMPLE_COUNT = "18802c61-324b-4952-abd0-176ff5c696ff"
  MFT_END_STREAMING_AWARE = "70fbc845-b07e-4089-b064-399dc6110f29"
  MF_SA_AUDIO_ENDPOINT_AWARE = "c0381701-805c-42b2-ac8d-e2b4bf21f4f8"
  MFT_AUDIO_DECODER_AUDIO_ENDPOINT_ID = "c7ccdd6e-5398-4695-8be7-51b3e95111bd"
  MFT_AUDIO_DECODER_SPATIAL_METADATA_CLIENT = "05987df4-1270-4999-925f-8e939a7c0af7"
  MF_DMFT_FRAME_BUFFER_INFO = "396ce1c9-67a9-454c-8797-95a45799d804"
  MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE = "b172d58e-fa77-4e48-8d2a-1df2d850eac2"
  MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT = "851745d5-c3d6-476d-9527-498ef2d10d18"
  MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE = "0f5523a5-1cb2-47c5-a550-2eeb84b4d14a"
  MFT_SUPPORT_3DVIDEO = "093f81b1-4f2e-4631-8168-7934032a01d3"
  MF_ENABLE_3DVIDEO_OUTPUT = "bdad7bca-0e5f-4b10-ab16-26de381b6293"
  MF_SA_D3D11_BINDFLAGS = "eacf97ad-065c-4408-bee3-fdcbfd128be2"
  MF_SA_D3D11_USAGE = "e85fe442-2ca3-486e-a9c7-109dda609880"
  MF_SA_D3D11_AWARE = "206b4fc8-fcf9-4c51-afe3-9764369e33a0"
  MF_SA_D3D11_SHARED = "7b8f32c3-6d96-4b89-9203-dd38b61414f3"
  MF_SA_D3D11_SHARED_WITHOUT_MUTEX = "39dbd44d-2e44-4931-a4c8-352d3dc42115"
  MF_SA_D3D11_ALLOW_DYNAMIC_YUV_TEXTURE = "ce06d49f-0613-4b9d-86a6-d8c4f9c10075"
  MF_SA_D3D11_HW_PROTECTED = "3a8ba9d9-92ca-4307-a391-6999dbf3b6ce"
  MF_SA_BUFFERS_PER_SAMPLE = "873c5171-1e3d-4e25-988d-b433ce041983"
  MF_SA_D3D11_ALLOCATE_DISPLAYABLE_RESOURCES = "eeface6d-2ea9-4adf-bbdf-7bbc482a1b6d"
  MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER = "ef80833f-f8fa-44d9-80d8-41ed6232670c"
  MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL = "a24e30d7-de25-4558-bbfb-71070a2d332e"
  MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS = "d8980deb-0a48-425f-8623-611db41d3810"
  MFT_REMUX_MARK_I_PICTURE_AS_CLEAN_POINT = "364e8f85-3f2e-436c-b2a2-4440a012a9e8"
  MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT = "dc2f8496-15c4-407a-b6f0-1b66ab5fbf53"
  MFT_ENCODER_SUPPORTS_CONFIG_EVENT = "86a355ae-3a77-4ec4-9f31-01149a4e92de"
  MFT_ENUM_HARDWARE_VENDOR_ID_Attribute = "3aecb0cc-035b-4bcc-8185-2b8d551ef3af"
  MF_TRANSFORM_ASYNC = "f81a699a-649a-497d-8c73-29f8fed6ad7a"
  MF_TRANSFORM_ASYNC_UNLOCK = "e5666d6b-3422-4eb6-a421-da7db1f8e207"
  MF_TRANSFORM_FLAGS_Attribute = "9359bb7e-6275-46c4-a025-1c01e45f1a86"
  MF_TRANSFORM_CATEGORY_Attribute = "ceabba49-506d-4757-a6ff-66c184987e4e"
  MFT_TRANSFORM_CLSID_Attribute = "6821c42b-65a4-4e82-99bc-9a88205ecd0c"
  MFT_INPUT_TYPES_Attributes = "4276c9b1-759d-4bf3-9cd0-0d723d138f96"
  MFT_OUTPUT_TYPES_Attributes = "8eae8cf3-a44f-4306-ba5c-bf5dda242818"
  MFT_ENUM_HARDWARE_URL_Attribute = "2fb866ac-b078-4942-ab6c-003d05cda674"
  MFT_FRIENDLY_NAME_Attribute = "314ffbae-5b41-4c95-9c19-4e7d586face3"
  MFT_CONNECTED_STREAM_ATTRIBUTE = "71eeb820-a59f-4de2-bcec-38db1dd611a4"
  MFT_CONNECTED_TO_HW_STREAM = "34e6e728-06d6-4491-a553-4795650db912"
  MFT_PREFERRED_OUTPUTTYPE_Attribute = "7e700499-396a-49ee-b1b4-f628021e8c9d"
  MFT_PROCESS_LOCAL_Attribute = "543186e4-4649-4e65-b588-4aa352aff379"
  MFT_PREFERRED_ENCODER_PROFILE = "53004909-1ef5-46d7-a18e-5a75f8b5905f"
  MFT_HW_TIMESTAMP_WITH_QPC_Attribute = "8d030fb8-cc43-4258-a22e-9210bef89be4"
  MFT_FIELDOFUSE_UNLOCK_Attribute = "8ec2e9fd-9148-410d-831e-702439461a8e"
  MFT_CODEC_MERIT_Attribute = "88a7cb15-7b07-4a34-9128-e64c6703c4d3"
  MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE = "111ea8cd-b62a-4bdb-89f6-67ffcdc2458b"
  MFT_AUDIO_DECODER_DEGRADATION_INFO_ATTRIBUTE = "6c3386ad-ec20-430d-b2a5-505c7178d9c4"
  MFT_POLICY_SET_AWARE = "5a633b19-cc39-4fa8-8ca5-59981b7a0018"
  MFT_USING_HARDWARE_DRM = "34faa77d-d79e-4957-b8ce-362b2684996c"
  MF_WVC1_PROG_SINGLE_SLICE_CONTENT = "67ec2559-0f2f-4420-a4dd-2f8ee7a5738b"
  MF_PROGRESSIVE_CODING_CONTENT = "8f020eea-1508-471f-9da6-507d7cfa40db"
  MF_NALU_LENGTH_SET = "a7911d53-12a4-4965-ae70-6eadd6ff0551"
  MF_NALU_LENGTH_INFORMATION = "19124e7c-ad4b-465f-bb18-20186287b6af"
  MF_USER_DATA_PAYLOAD = "d1d4985d-dc92-457a-b3a0-651a33a31047"
  MF_MPEG4SINK_SPSPPS_PASSTHROUGH = "5601a134-2005-4ad2-b37d-22a6c554deb2"
  MF_MPEG4SINK_MOOV_BEFORE_MDAT = "f672e3ac-e1e6-4f10-b5ec-5f3b30828816"
  MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE = "dca1ed52-450e-4a22-8c62-4ed452f7a187"
  MF_MPEG4SINK_MIN_FRAGMENT_DURATION = "a30b570c-8efd-45e8-94fe-27c84b5bdff6"
  MF_MPEG4SINK_MAX_CODED_SEQUENCES_PER_FRAGMENT = "fc1b3bd6-692d-4ce5-9299-738aa5463e9a"
  MF_SESSION_TOPOLOADER = "1e83d482-1f1c-4571-8405-88f4b2181f71"
  MF_SESSION_GLOBAL_TIME = "1e83d482-1f1c-4571-8405-88f4b2181f72"
  MF_SESSION_QUALITY_MANAGER = "1e83d482-1f1c-4571-8405-88f4b2181f73"
  MF_SESSION_CONTENT_PROTECTION_MANAGER = "1e83d482-1f1c-4571-8405-88f4b2181f74"
  MF_SESSION_SERVER_CONTEXT = "afe5b291-50fa-46e8-b9be-0c0c3ce4b3a5"
  MF_SESSION_REMOTE_SOURCE_MODE = "f4033ef4-9bb3-4378-941f-85a0856bc244"
  MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME = "190e852f-6238-42d1-b5af-69ea338ef850"
  MF_PMP_SERVER_CONTEXT = "2f00c910-d2cf-4278-8b6a-d077fac3a25f"
  MF_TIME_FORMAT_ENTRY_RELATIVE = "4399f178-46d3-4504-afda-20d32e9ba360"
  MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION = "a38253aa-6314-42fd-a3ce-bb27b6859946"
  MF_STREAM_SINK_SUPPORTS_HW_CONNECTION = "9b465cbf-0597-4f9e-9f3c-b97eeef90359"
  MF_STREAM_SINK_SUPPORTS_ROTATION = "b3e96280-bd05-41a5-97ad-8a7fee24b912"
  MF_SINK_VIDEO_PTS = "2162bde7-421e-4b90-9b33-e58fbf1d58b6"
  MF_SINK_VIDEO_NATIVE_WIDTH = "e6d6a707-1505-4747-9b10-72d2d158cb3a"
  MF_SINK_VIDEO_NATIVE_HEIGHT = "f0ca6705-490c-43e8-941c-c0b3206b9a65"
  MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR = "d0f33b22-b78a-4879-b455-f03ef3fa82cd"
  MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR = "6ea1eb97-1fe0-4f10-a6e4-1f4f661564e0"
  MF_BD_MVC_PLANE_OFFSET_METADATA = "62a654e4-b76c-4901-9823-2cb615d47318"
  MF_LUMA_KEY_ENABLE = "7369820f-76de-43ca-9284-47b8f37e0649"
  MF_LUMA_KEY_LOWER = "93d7b8d5-0b81-4715-aea0-8725871621e9"
  MF_LUMA_KEY_UPPER = "d09f39bb-4602-4c31-a706-a12171a5110a"
  MF_USER_EXTENDED_ATTRIBUTES = "c02abac6-feb2-4541-922f-920b43702722"
  MF_INDEPENDENT_STILL_IMAGE = "ea12af41-0710-42c9-a127-daa3e78483a5"
  MF_XVP_SAMPLE_LOCK_TIMEOUT = "aa4ddb29-5134-4363-ac72-83ec4bc10426"
  MF_TOPOLOGY_PROJECTSTART = "7ed3f802-86bb-4b3f-b7e4-7cb43afd4b80"
  MF_TOPOLOGY_PROJECTSTOP = "7ed3f803-86bb-4b3f-b7e4-7cb43afd4b80"
  MF_TOPOLOGY_NO_MARKIN_MARKOUT = "7ed3f804-86bb-4b3f-b7e4-7cb43afd4b80"
  MF_TOPOLOGY_DXVA_MODE = "1e8d34f6-f5ab-4e23-bb88-874aa3a1a74d"
  MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK = "1967731f-cd78-42fc-b026-0992a56e5693"
  MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS = "b86cac42-41a6-4b79-897a-1ab0e52b4a1b"
  MF_TOPOLOGY_PLAYBACK_MAX_DIMS = "5715cf19-5768-44aa-ad6e-8721f1b0f9bb"
  MF_TOPOLOGY_HARDWARE_MODE = "d2d362fd-4e4f-4191-a579-c618b66706af"
  MF_TOPOLOGY_PLAYBACK_FRAMERATE = "c164737a-c2b1-4553-83bb-5a526072448f"
  MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED = "d529950b-d484-4527-a9cd-b1909532b5b0"
  MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES = "6248c36d-5d0b-4f40-a0bb-b0b305f77698"
  MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH = "c8cc113f-7951-4548-aad6-9ed6202e62b3"
  MF_DISABLE_LOCALLY_REGISTERED_PLUGINS = "66b16da9-add4-47e0-a16b-5af1fb483634"
  MF_LOCAL_PLUGIN_CONTROL_POLICY = "d91b0085-c86d-4f81-8822-8c68e1d7fa04"
  MF_TOPONODE_FLUSH = "494bbce8-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DRAIN = "494bbce9-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_D3DAWARE = "494bbced-b031-4e38-97c4-d5422dd618dc"
  MF_TOPOLOGY_RESOLUTION_STATUS = "494bbcde-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_ERRORCODE = "494bbcee-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_CONNECT_METHOD = "494bbcf1-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_LOCKED = "494bbcf7-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_ID = "494bbcf8-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_MMCSS_CLASS = "494bbcf9-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DECRYPTOR = "494bbcfa-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DISCARDABLE = "494bbcfb-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_ERROR_MAJORTYPE = "494bbcfd-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_ERROR_SUBTYPE = "494bbcfe-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_MMCSS_TASKID = "494bbcff-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY = "5001f840-2816-48f4-9364-ad1ef661a123"
  MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY = "a1ff99be-5e97-4a53-b494-568c642c0ff3"
  MF_TOPONODE_MARKIN_HERE = "494bbd00-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_MARKOUT_HERE = "494bbd01-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_DECODER = "494bbd02-b031-4e38-97c4-d5422dd618dc"
  MF_TOPONODE_MEDIASTART = "835c58ea-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_MEDIASTOP = "835c58eb-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_SOURCE = "835c58ec-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_PRESENTATION_DESCRIPTOR = "835c58ed-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_STREAM_DESCRIPTOR = "835c58ee-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_SEQUENCE_ELEMENTID = "835c58ef-e075-4bc7-bcba-4de000df9ae6"
  MF_TOPONODE_TRANSFORM_OBJECTID = "88dcc0c9-293e-4e8b-9aeb-0ad64cc016b0"
  MF_TOPONODE_STREAMID = "14932f9b-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_NOSHUTDOWN_ON_REMOVE = "14932f9c-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_RATELESS = "14932f9d-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_DISABLE_PREROLL = "14932f9e-9087-4bb4-8412-5167145cbe04"
  MF_TOPONODE_PRIMARYOUTPUT = "6304ef99-16b2-4ebe-9d67-e4c539b3a259"
  MF_PD_PMPHOST_CONTEXT = "6c990d31-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_APP_CONTEXT = "6c990d32-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_DURATION = "6c990d33-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_TOTAL_FILE_SIZE = "6c990d34-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_AUDIO_ENCODING_BITRATE = "6c990d35-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_VIDEO_ENCODING_BITRATE = "6c990d36-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_MIME_TYPE = "6c990d37-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_LAST_MODIFIED_TIME = "6c990d38-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_PLAYBACK_ELEMENT_ID = "6c990d39-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_PREFERRED_LANGUAGE = "6c990d3a-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_PLAYBACK_BOUNDARY_TIME = "6c990d3b-bb8e-477a-8598-0d5d96fcd88a"
  MF_PD_AUDIO_ISVARIABLEBITRATE = "33026ee0-e387-4582-ae0a-34a2ad3baa18"
  MF_SD_LANGUAGE = "00af2180-bdc2-423c-abca-f503593bc121"
  MF_SD_PROTECTED = "00af2181-bdc2-423c-abca-f503593bc121"
  MF_SD_STREAM_NAME = "4f1b099d-d314-41e5-a781-7fefaa4c501f"
  MF_SD_MUTUALLY_EXCLUSIVE = "023ef79c-388d-487f-ac17-696cd6e3c6f5"
  MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID = "ba491360-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE = "ba491361-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS = "ba491362-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID = "ba491364-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE = "ba491365-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS = "ba491366-be50-451e-95ab-6d4accc7dad8"
  MF_ACTIVATE_MFT_LOCKED = "c1f6093c-7f65-4fbd-9e39-5faec3c4fbd7"
  MF_ACTIVATE_VIDEO_WINDOW = "9a2dbbdd-f57e-4162-82b9-6831377682d3"
  MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS = "ede4b5e0-f805-4d6c-99b3-db01bf95dfab"
  MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID = "ede4b5e3-f805-4d6c-99b3-db01bf95dfab"
  MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID = "b10aaec3-ef71-4cc3-b873-05a9a08b9f8e"
  MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE = "6ba644ff-27c5-4d02-9887-c28619fdb91b"
  MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY = "a9770471-92ec-4df4-94fe-81c36f0c3a7a"
  MFENABLETYPE_WMDRMV1_LicenseAcquisition = "4ff6eeaf-0b43-4797-9b85-abf31815e7b0"
  MFENABLETYPE_WMDRMV7_LicenseAcquisition = "003306df-4a06-4884-a097-ef6d22ec84a3"
  MFENABLETYPE_WMDRMV7_Individualization = "acd2c84a-b303-4f65-bc2c-2c848d01a989"
  MFENABLETYPE_MF_UpdateRevocationInformation = "e558b0b5-b3c4-44a0-924c-50d178932385"
  MFENABLETYPE_MF_UpdateUntrustedComponent = "9879f3d6-cee2-48e6-b573-9767ab172f16"
  MFENABLETYPE_MF_RebootRequired = "6d4d3d4b-0ece-4652-8b3a-f2d24260d887"
  MF_METADATA_PROVIDER_SERVICE = "db214084-58a4-4d2e-b84f-6f755b2f7a0d"
  MF_PROPERTY_HANDLER_SERVICE = "a3face02-32b8-41dd-90e7-5fef7c8991b5"
  MF_RATE_CONTROL_SERVICE = "866fa297-b802-4bf8-9dc9-5e3b6a9f53c9"
  MF_TIMECODE_SERVICE = "a0d502a7-0eb3-4885-b1b9-9feb0d083454"
  MR_POLICY_VOLUME_SERVICE = "1abaa2ac-9d3b-47c6-ab48-c59506de784d"
  MR_CAPTURE_POLICY_VOLUME_SERVICE = "24030acd-107a-4265-975c-414e33e65f2a"
  MR_STREAM_VOLUME_SERVICE = "f8b5fa2f-32ef-46f5-b172-1321212fb2c4"
  MR_AUDIO_POLICY_SERVICE = "911fd737-6775-4ab0-a614-297862fdac88"
  MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET = "62e3d776-8100-4e03-a6e8-bd3857ac9c47"
  MF_SAMPLEGRABBERSINK_IGNORE_CLOCK = "0efda2c0-2b69-4e2e-ab8d-46dcbff7d25d"
  MF_QUALITY_SERVICES = "b7e2be11-2f96-4640-b52c-282365bdf16c"
  MF_WORKQUEUE_SERVICES = "8e37d489-41e0-413a-9068-287c886d8dda"
  MF_QUALITY_NOTIFY_PROCESSING_LATENCY = "f6b44af8-604d-46fe-a95d-45479b10c9bc"
  MF_QUALITY_NOTIFY_SAMPLE_LAG = "30d15206-ed2a-4760-be17-eb4a9f12295c"
  MF_TIME_FORMAT_SEGMENT_OFFSET = "c8b8be77-869c-431d-812e-169693f65a39"
  MF_SOURCE_PRESENTATION_PROVIDER_SERVICE = "e002aadc-f4af-4ee5-9847-053edf840426"
  MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE = "65656e1a-077f-4472-83ef-316f11d5087a"
  MFNETSOURCE_SSLCERTIFICATE_MANAGER = "55e6cb27-e69b-4267-940c-2d7ec5bb8a0f"
  MFNETSOURCE_RESOURCE_FILTER = "815d0ff6-265a-4477-9e46-7b80ad80b5fb"
  MFNET_SAVEJOB_SERVICE = "b85a587f-3d02-4e52-9565-55d3ec1e7ff7"
  MFNETSOURCE_STATISTICS_SERVICE = "3cb1f275-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_STATISTICS = "3cb1f274-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_BUFFERINGTIME = "3cb1f276-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ACCELERATEDSTREAMINGDURATION = "3cb1f277-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION = "4aab2879-bbe1-4994-9ff0-5495bd250129"
  MFNETSOURCE_MAXBUFFERTIMEMS = "408b24e6-4038-4401-b5b2-fe701a9ebf10"
  MFNETSOURCE_CONNECTIONBANDWIDTH = "3cb1f278-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_CACHEENABLED = "3cb1f279-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_AUTORECONNECTLIMIT = "3cb1f27a-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_RESENDSENABLED = "3cb1f27b-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_THINNINGENABLED = "3cb1f27c-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROTOCOL = "3cb1f27d-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_TRANSPORT = "3cb1f27e-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PREVIEWMODEENABLED = "3cb1f27f-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_CREDENTIAL_MANAGER = "3cb1f280-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PPBANDWIDTH = "3cb1f281-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_AUTORECONNECTPROGRESS = "3cb1f282-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYLOCATORFACTORY = "3cb1f283-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_BROWSERUSERAGENT = "3cb1f28b-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_BROWSERWEBPAGE = "3cb1f28c-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PLAYERVERSION = "3cb1f28d-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PLAYERID = "3cb1f28e-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_HOSTEXE = "3cb1f28f-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_HOSTVERSION = "3cb1f291-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PLAYERUSERAGENT = "3cb1f292-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_CLIENTGUID = "60a2c4a6-f197-4c14-a5bf-88830d2458af"
  MFNETSOURCE_LOGURL = "3cb1f293-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_UDP = "3cb1f294-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_TCP = "3cb1f295-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_MSB = "3cb1f296-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_RTSP = "3cb1f298-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_HTTP = "3cb1f299-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_STREAMING = "3cb1f29c-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_DOWNLOAD = "3cb1f29d-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_ENABLE_PRIVATEMODE = "824779d8-f18b-4405-8cf1-464fb5aa8f71"
  MFNETSOURCE_UDP_PORT_RANGE = "3cb1f29a-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYINFO = "3cb1f29b-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION = "47eae1bd-bdfe-42e2-82f3-54a48c17962d"
  MFNETSOURCE_PROXYSETTINGS = "3cb1f287-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYHOSTNAME = "3cb1f284-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYPORT = "3cb1f288-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYEXCEPTIONLIST = "3cb1f285-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYBYPASSFORLOCAL = "3cb1f286-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_PROXYRERUNAUTODETECTION = "3cb1f289-0505-4c5d-ae71-0a556344efa1"
  MFNETSOURCE_STREAM_LANGUAGE = "9ab44318-f7cd-4f2d-8d6d-fa35b492cecb"
  MFNETSOURCE_LOGPARAMS = "64936ae8-9418-453a-8cda-3e0a668b353b"
  MFNETSOURCE_PEERMANAGER = "48b29adb-febf-45ee-a9bf-efb81c492efc"
  MFNETSOURCE_FRIENDLYNAME = "5b2a7757-bc6b-447e-aa06-0dda1c646e2f"
  MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE = "a6e1f733-3001-4915-8150-1558a2180ec8"
  MF_BYTESTREAM_SERVICE = "ab025e2b-16d9-4180-a127-ba6c70156161"
  MF_MEDIA_PROTECTION_MANAGER_PROPERTIES = "38bd81a9-acea-4c73-89b2-5532c0aeca79"
  MFCONNECTOR_SPDIF = "0b94a712-ad3e-4cee-83ce-ce32e3db6522"
  MFCONNECTOR_UNKNOWN = "ac3aef5c-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_PCI = "ac3aef5d-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_PCIX = "ac3aef5e-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_PCI_Express = "ac3aef5f-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_AGP = "ac3aef60-ce43-11d9-92db-000bdb28ff98"
  MFCONNECTOR_VGA = "57cd5968-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_SVIDEO = "57cd5969-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_COMPOSITE = "57cd596a-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_COMPONENT = "57cd596b-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_DVI = "57cd596c-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_HDMI = "57cd596d-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_LVDS = "57cd596e-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_D_JPN = "57cd5970-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_SDI = "57cd5971-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_DISPLAYPORT_EXTERNAL = "57cd5972-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_DISPLAYPORT_EMBEDDED = "57cd5973-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_UDI_EXTERNAL = "57cd5974-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_UDI_EMBEDDED = "57cd5975-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_MIRACAST = "57cd5977-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = "57cd5978-ce47-11d9-92db-000bdb28ff98"
  MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = "57cd5979-ce47-11d9-92db-000bdb28ff98"
  MF_POLICY_ID = "b160c24d-c059-48f1-a901-9ee298a9a8c3"
  MFPROTECTION_DISABLE = "8cc6d81b-fec6-4d8f-964b-cfba0b0dad0d"
  MFPROTECTION_CONSTRICTVIDEO = "193370ce-c5e4-4c3a-8a66-6959b4da4442"
  MFPROTECTION_CONSTRICTVIDEO_NOOPM = "a580e8cd-c247-4957-b983-3c2eebd1ff59"
  MFPROTECTION_CONSTRICTAUDIO = "ffc99b44-df48-4e16-8e66-096892c1578a"
  MFPROTECTION_TRUSTEDAUDIODRIVERS = "65bdf3d2-0168-4816-a533-55d47b027101"
  MFPROTECTION_HDCP = "ae7cc03d-c828-4021-acb7-d578d27aaf13"
  MFPROTECTION_CGMSA = "e57e69e9-226b-4d31-b4e3-d3db008736dd"
  MFPROTECTION_ACP = "c3fd11c6-f8b7-4d20-b008-1db17d61f2da"
  MFPROTECTION_WMDRMOTA = "a267a6a1-362e-47d0-8805-4628598a23e4"
  MFPROTECTION_FFT = "462a56b2-2866-4bb6-980d-6d8d9edb1a8c"
  MFPROTECTION_PROTECTED_SURFACE = "4f5d9566-e742-4a25-8d1f-d287b5fa0ade"
  MFPROTECTION_DISABLE_SCREEN_SCRAPE = "a21179a4-b7cd-40d8-9614-8ef2371ba78d"
  MFPROTECTION_VIDEO_FRAMES = "36a59cbc-7401-4a8c-bc20-46a7c9e597f0"
  MFPROTECTION_HARDWARE = "4ee7f0c1-9ed7-424f-b6be-996b33528856"
  MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT = "a4a585e8-ed60-442d-814d-db4d4220a06d"
  MFPROTECTIONATTRIBUTE_BEST_EFFORT = "c8e06331-75f0-4ec1-8e77-17578f773b46"
  MFPROTECTIONATTRIBUTE_FAIL_OVER = "8536abc5-38f1-4151-9cce-f55d941229ac"
  MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION = "c873de64-d8a5-49e6-88bb-fb963fd3d4ce"
  MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE = "008476fc-4b58-4d80-a790-e7297673161d"
  MFPROTECTIONATTRIBUTE_HDCP_SRM = "6f302107-3477-4468-8a08-eef9db10e20f"
  MF_SampleProtectionSalt = "5403deee-b9ee-438f-aa83-3804997e569d"
  MF_REMOTE_PROXY = "2f00c90e-d2cf-4278-8b6a-d077fac3a25f"
  CLSID_CreateMediaExtensionObject = "ef65a54d-0788-45b8-8b14-bc0f6a6b5137"
  MF_SAMI_SERVICE = "49a89ae7-b4d9-4ef2-aa5c-f65a3e05ae4e"
  MF_PD_SAMI_STYLELIST = "e0b73c7f-486d-484e-9872-4de5192a7bf8"
  MF_SD_SAMI_LANGUAGE = "36fcb98a-6cd0-44cb-acb9-a8f5600dd0bb"
  MF_TRANSCODE_CONTAINERTYPE = "150ff23f-4abc-478b-ac4f-e1916fba1cca"
  MFTranscodeContainerType_ASF = "430f6f6e-b6bf-4fc1-a0bd-9ee46eee2afb"
  MFTranscodeContainerType_MPEG4 = "dc6cd05d-b9d0-40ef-bd35-fa622c1ab28a"
  MFTranscodeContainerType_MP3 = "e438b912-83f1-4de6-9e3a-9ffbc6dd24d1"
  MFTranscodeContainerType_FLAC = "31344aa3-05a9-42b5-901b-8e9d4257f75e"
  MFTranscodeContainerType_3GP = "34c50167-4472-4f34-9ea0-c49fbacf037d"
  MFTranscodeContainerType_AC3 = "6d8d91c3-8c91-4ed1-8742-8c347d5b44d0"
  MFTranscodeContainerType_ADTS = "132fd27d-0f02-43de-a301-38fbbbb3834e"
  MFTranscodeContainerType_MPEG2 = "bfc2dbf9-7bb4-4f8f-afde-e112c44ba882"
  MFTranscodeContainerType_WAVE = "64c3453c-0f26-4741-be63-87bdf8bb935b"
  MFTranscodeContainerType_AVI = "7edfe8af-402f-4d76-a33c-619fd157d0f1"
  MFTranscodeContainerType_FMPEG4 = "9ba876f1-419f-4b77-a1e0-35959d9d4004"
  MFTranscodeContainerType_AMR = "025d5ad3-621a-475b-964d-66b1c824f079"
  MF_TRANSCODE_SKIP_METADATA_TRANSFER = "4e4469ef-b571-4959-8f83-3dcfba33a393"
  MF_TRANSCODE_TOPOLOGYMODE = "3e3df610-394a-40b2-9dea-3bab650bebf2"
  MF_TRANSCODE_ADJUST_PROFILE = "9c37c21b-060f-487c-a690-80d7f50d1c72"
  MF_TRANSCODE_ENCODINGPROFILE = "6947787c-f508-4ea9-b1e9-a1fe3a49fbc9"
  MF_TRANSCODE_QUALITYVSSPEED = "98332df8-03cd-476b-89fa-3f9e442dec9f"
  MF_TRANSCODE_DONOT_INSERT_ENCODER = "f45aa7ce-ab24-4012-a11b-dc8220201410"
  MF_VIDEO_PROCESSOR_ALGORITHM = "4a0a1e1f-272c-4fb6-9eb1-db330cbc97ca"
  MF_XVP_DISABLE_FRC = "2c0afa19-7a97-4d5a-9ee8-16d4fc518d8c"
  MF_XVP_CALLER_ALLOCATES_OUTPUT = "04a2cabc-0cab-40b1-a1b9-75bc3658f000"
  MF_LOCAL_MFT_REGISTRATION_SERVICE = "ddf5cf9c-4506-45aa-abf0-6d5d94dd1b4a"
  MF_WRAPPED_SAMPLE_SERVICE = "31f52bf2-d03e-4048-80d0-9c1046d87c61"
  MF_WRAPPED_OBJECT = "2b182c4c-d6ac-49f4-8915-f71887db70cd"
  CLSID_HttpSchemePlugin = "44cb442b-9da9-49df-b3fd-023777b16e50"
  CLSID_UrlmonSchemePlugin = "9ec4b4f9-3029-45ad-947b-344de2a249e2"
  CLSID_NetSchemePlugin = "e9f4ebab-d97b-463e-a2b1-c54ee3f9414d"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE = "c60ac5fe-252a-478f-a0ef-bc8fa5f7cad3"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE = "de7046ba-54d6-4487-a2a4-ec7c0d1bd163"
  MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME = "60d0e559-52f8-4fa2-bbce-acdb34a8ec01"
  MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE = "56a819ca-0c78-4de4-a0a7-3ddaba0f24d4"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY = "77f0ae69-c3bd-4509-941d-467e4d24899e"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK = "58f0aad8-22bf-4f8a-bb3d-d2c4978c6e2f"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK = "98d24b5e-5930-4614-b5a1-f600f9355a78"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS = "7dd9b730-4f2d-41d5-8f95-0cc9a912ba26"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID = "30da9258-feb9-47a7-a453-763a7a8e1c5f"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE = "bc9d118e-8c67-4a18-85d4-12d300400552"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID = "36689d42-a06c-40ae-84cf-f5a034067cc4"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_XADDRESS = "bca0be52-c327-44c7-9b7d-7fa8d9b5bcda"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_STREAM_URL = "9d7b40d2-3617-4043-93e3-8d6da9bb3492"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_USERNAME = "05d01add-949f-46eb-bc8e-8b0d2b32d79d"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_PASSWORD = "a0fd7e16-42d9-49df-84c0-e82c5eab8874"
  CLSID_FrameServerNetworkCameraSource = "7a213aa7-866f-414a-8c1a-275c7283a395"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID = "14dd9a1c-7cff-41be-b1b9-ba1ac6ecb571"
  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID = "8ac3587a-4ae7-42d8-99e0-0a6013eef90f"
  MF_DEVICESTREAM_IMAGE_STREAM = "a7ffb865-e7b2-43b0-9f6f-9af2a0e50fc0"
  MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM = "03eeec7e-d605-4576-8b29-6580b490d7d3"
  MF_DEVICESTREAM_STREAM_ID = "11bd5120-d124-446b-88e6-17060257fff9"
  MF_DEVICESTREAM_STREAM_CATEGORY = "2939e7b8-a62e-4579-b674-d4073dfabbba"
  MF_DEVICESTREAM_FRAMESERVER_SHARED = "1cb378e9-b279-41d4-af97-34a243e68320"
  MF_DEVICESTREAM_TRANSFORM_STREAM_ID = "e63937b7-daaf-4d49-815f-d826f8ad31e7"
  MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID = "048e6558-60c4-4173-bd5b-6a3ca2896aee"
  MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID = "0844dbae-34fa-48a0-a783-8e696fb1c9a8"
  MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT = "37f9375c-e664-4ea4-aae4-cb6d1daca1f4"
  MF_DEVICESTREAM_TAKEPHOTO_TRIGGER = "1d180e34-538c-4fbb-a75a-859af7d261a6"
  MF_DEVICESTREAM_MAX_FRAME_BUFFERS = "1684cebe-3175-4985-882c-0efd3e8ac11e"
  MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL = "6a2c4fa6-d179-41cd-9523-822371ea40e5"
  MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL = "e63310f7-b244-4ef8-9a7d-24c74e32ebd0"
  MF_DEVICE_THERMAL_STATE_CHANGED = "70ccd0af-fc9f-4deb-a875-9fecd16c5bd4"
  MFSampleExtension_DeviceTimestamp = "8f3e35e7-2dcd-4887-8622-2a58baa652b0"
  MFSampleExtension_Spatial_CameraViewTransform = "4e251fa4-830f-4770-859a-4b8d99aa809b"
  MFSampleExtension_Spatial_CameraCoordinateSystem = "9d13c82f-2199-4e67-91cd-d1a4181f2534"
  MFSampleExtension_Spatial_CameraProjectionTransform = "47f9fcb5-2a02-4f26-a477-792fdf95886a"
  MF_MEDIASOURCE_SERVICE = "f09992f7-9fba-4c4a-a37f-8c47b4e1dfe7"
  MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE = "014a5031-2f05-4c6a-9f9c-7d0dc4eda5f4"
  MF_CONTENT_DECRYPTOR_SERVICE = "68a72927-fc7b-44ee-85f4-7c51bd55a659"
  MF_CONTENT_PROTECTION_DEVICE_SERVICE = "ff58436f-76a0-41fe-b566-10cc53962edd"
  MF_SD_AUDIO_ENCODER_DELAY = "8e85422c-73de-403f-9a35-550ad6e8b951"
  MF_SD_AUDIO_ENCODER_PADDING = "529c7f2c-ac4b-4e3f-bfc3-0902194982cb"
  CLSID_MSH264DecoderMFT = "62ce7e72-4c71-4d20-b15d-452831a87d9d"
  CLSID_MSH264EncoderMFT = "6ca50344-051a-4ded-9779-a43305165e35"
  CLSID_MSDDPlusDecMFT = "177c0afe-900b-48d4-9e4c-57add250b3d4"
  CLSID_MP3DecMediaObject = "bbeea841-0a63-4f52-a7ab-a9b3a84ed38a"
  CLSID_MSAACDecMFT = "32d186a7-218f-4c75-8876-dd77273a8999"
  CLSID_MSH265DecoderMFT = "420a51a3-d605-430c-b4fc-45274fa6c562"
  CLSID_WMVDecoderMFT = "82d353df-90bd-4382-8bc2-3f6192b76e34"
  CLSID_WMADecMediaObject = "2eeb4adf-4578-4d10-bca7-bb955f56320a"
  CLSID_MSMPEGAudDecMFT = "70707b39-b2ca-4015-abea-f8447d22d88b"
  CLSID_MSMPEGDecoderMFT = "2d709e52-123f-49b5-9cbc-9af5cde28fb9"
  CLSID_AudioResamplerMediaObject = "f447b69e-1884-4a7e-8055-346f74d6edb3"
  CLSID_MSVPxDecoder = "e3aaf548-c9a4-4c6e-234d-5ada374b0000"
  CLSID_MSOpusDecoder = "63e17c10-2d43-4c42-8fe3-8d8b63e46a6a"
  CLSID_VideoProcessorMFT = "88753b26-5b24-49bd-b2e7-0c445c78c982"
  MFNETSOURCE_CROSS_ORIGIN_SUPPORT = "9842207c-b02c-4271-a2fc-72e49308e5c2"
  MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER = "7d55081e-307d-4d6d-a663-a93be97c4b5c"
  MF_SD_MEDIASOURCE_STATUS = "1913678b-fc0f-44da-8f43-1ba3b526f4ae"
  MF_SD_VIDEO_SPHERICAL = "a51da449-3fdc-478c-bcb5-30be76595f55"
  MF_SD_VIDEO_SPHERICAL_FORMAT = "4a8fc407-6ea1-46c8-b567-6971d4a139c3"
  MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION = "11d25a49-bb62-467f-9db1-c17165716c49"
  MF_MEDIASOURCE_EXPOSE_ALL_STREAMS = "e7f250b8-8fd9-4a09-b6c1-6a315c7c720e"
  MF_ST_MEDIASOURCE_COLLECTION = "616de972-83ad-4950-8170-630d19cbe307"
  MF_DEVICESTREAM_FILTER_KSCONTROL = "46783cca-3df5-4923-a9ef-36b7223edde0"
  MF_DEVICESTREAM_PIN_KSCONTROL = "ef3ef9a7-87f2-48ca-be02-674878918e98"
  MF_DEVICESTREAM_SOURCE_ATTRIBUTES = "2f8cb617-361b-434f-85ea-99a03e1ce4e0"
  MF_DEVICESTREAM_FRAMESERVER_HIDDEN = "f402567b-4d91-4179-96d1-74c8480c2034"
  MF_STF_VERSION_INFO = "6770bd39-ef82-44ee-a49b-934beb24aef7"
  MF_STF_VERSION_DATE = "31a165d5-df67-4095-8e44-8868fc20dbfd"
  MF_DEVICESTREAM_REQUIRED_CAPABILITIES = "6d8b957e-7cf6-43f4-af56-9c0e1e4fcbe1"
  MF_DEVICESTREAM_REQUIRED_SDDL = "331ae85d-c0d3-49ba-83ba-82a12d63cdd6"
  MF_DEVICEMFT_SENSORPROFILE_COLLECTION = "36ebdc44-b12c-441b-89f4-08b2f41a9cfc"
  MF_DEVICESTREAM_SENSORSTREAM_ID = "e35b9fe4-0659-4cad-bb51-33160be7e413"
  MF_PD_ASF_FILEPROPERTIES_FILE_ID = "3de649b4-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_CREATION_TIME = "3de649b6-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_PACKETS = "3de649b7-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION = "3de649b8-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_SEND_DURATION = "3de649b9-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_PREROLL = "3de649ba-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_FLAGS = "3de649bb-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE = "3de649bc-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE = "3de649bd-d76d-4e66-9ec9-78120fb4c7e3"
  MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE = "3de649be-d76d-4e66-9ec9-78120fb4c7e3"
  CLSID_WMDRMSystemID = "8948bb22-11bd-4796-93e3-974d1b575678"
  MF_PD_ASF_CONTENTENCRYPTION_TYPE = "8520fe3d-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTION_KEYID = "8520fe3e-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA = "8520fe3f-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL = "8520fe40-277e-46ea-99e4-e30a86db12be"
  MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA = "62508be5-ecdf-4924-a359-72bab3397b9d"
  MF_PD_ASF_LANGLIST = "f23de43c-9977-460d-a6ec-32937f160f7d"
  MF_PD_ASF_LANGLIST_LEGACYORDER = "f23de43d-9977-460d-a6ec-32937f160f7d"
  MF_PD_ASF_MARKER = "5134330e-83a6-475e-a9d5-4fb875fb2e31"
  MF_PD_ASF_SCRIPT = "e29cd0d7-d602-4923-a7fe-73fd97ecc650"
  MF_PD_ASF_CODECLIST = "e4bb3509-c18d-4df1-bb99-7a36b3cc4119"
  MF_PD_ASF_METADATA_IS_VBR = "5fc6947a-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_METADATA_V8_VBRPEAK = "5fc6947b-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_METADATA_V8_BUFFERAVERAGE = "5fc6947c-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS = "5fc6947d-ef60-445d-b449-442ecc78b4c1"
  MF_PD_ASF_DATA_START_OFFSET = "e7d5b3e7-1f29-45d3-8822-3e78fae272ed"
  MF_PD_ASF_DATA_LENGTH = "e7d5b3e8-1f29-45d3-8822-3e78fae272ed"
  MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX = "48f8a522-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE = "48f8a523-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE = "48f8a524-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE = "48f8a525-305d-422d-8524-2502dda33680"
  MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE = "48f8a526-305d-422d-8524-2502dda33680"
  MF_SD_ASF_STREAMBITRATES_BITRATE = "a8e182ed-afc8-43d0-b0d1-f65bad9da558"
  MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE = "245e929d-c44e-4f7e-bb3c-77d4dfd27f8a"
  MF_PD_ASF_INFO_HAS_AUDIO = "80e62295-2296-4a44-b31c-d103c6fed23c"
  MF_PD_ASF_INFO_HAS_VIDEO = "80e62296-2296-4a44-b31c-d103c6fed23c"
  MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO = "80e62297-2296-4a44-b31c-d103c6fed23c"
  MF_ASFPROFILE_MINPACKETSIZE = "22587626-47de-4168-87f5-b5aa9b12a8f0"
  MF_ASFPROFILE_MAXPACKETSIZE = "22587627-47de-4168-87f5-b5aa9b12a8f0"
  MF_ASFSTREAMCONFIG_LEAKYBUCKET1 = "c69b5901-ea1a-4c9b-b692-e2a0d29a8add"
  MF_ASFSTREAMCONFIG_LEAKYBUCKET2 = "c69b5902-ea1a-4c9b-b692-e2a0d29a8add"
  MFASFSampleExtension_SampleDuration = "c6bd9450-867f-4907-83a3-c77921b733ad"
  MFASFSampleExtension_OutputCleanPoint = "f72a3c6f-6eb4-4ebc-b192-09ad9759e828"
  MFASFSampleExtension_SMPTE = "399595ec-8667-4e2d-8fdb-98814ce76c1e"
  MFASFSampleExtension_FileName = "e165ec0e-19ed-45d7-b4a7-25cbd1e28e9b"
  MFASFSampleExtension_ContentType = "d590dc20-07bc-436c-9cf7-f3bbfbf1a4dc"
  MFASFSampleExtension_PixelAspectRatio = "1b1ee554-f9ea-4bc8-821a-376b74e4c4b8"
  MFASFSampleExtension_Encryption_SampleID = "6698b84e-0afa-4330-aeb2-1c0a98d7a44d"
  MFASFSampleExtension_Encryption_KeyID = "76376591-795f-4da1-86ed-9d46eca109a9"
  MFASFMutexType_Language = "72178c2b-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFMutexType_Bitrate = "72178c2c-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFMutexType_Presentation = "72178c2d-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFMutexType_Unknown = "72178c2e-e45b-11d5-bc2a-00b0d0f3f4ab"
  MFASFSPLITTER_PACKET_BOUNDARY = "fe584a05-e8d6-42e3-b176-f1211705fb6f"
  MFASFINDEXER_TYPE_TIMECODE = "49815231-6bad-44fd-810a-3f60984ec7fd"
  MF_CAPTURE_ENGINE_INITIALIZED = "219992bc-cf92-4531-a1ae-96e1e886c8f1"
  MF_CAPTURE_ENGINE_PREVIEW_STARTED = "a416df21-f9d3-4a74-991b-b817298952c4"
  MF_CAPTURE_ENGINE_PREVIEW_STOPPED = "13d5143c-1edd-4e50-a2ef-350a47678060"
  MF_CAPTURE_ENGINE_RECORD_STARTED = "ac2b027b-ddf9-48a0-89be-38ab35ef45c0"
  MF_CAPTURE_ENGINE_RECORD_STOPPED = "55e5200a-f98f-4c0d-a9ec-9eb25ed3d773"
  MF_CAPTURE_ENGINE_PHOTO_TAKEN = "3c50c445-7304-48eb-865d-bba19ba3af5c"
  MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET = "e7e75e4c-039c-4410-815b-8741307b63aa"
  MF_CAPTURE_ENGINE_ERROR = "46b89fc6-33cc-4399-9dad-784de77d587c"
  MF_CAPTURE_ENGINE_EFFECT_ADDED = "aa8dc7b5-a048-4e13-8ebe-f23c46c830c1"
  MF_CAPTURE_ENGINE_EFFECT_REMOVED = "c6e8db07-fb09-4a48-89c6-bf92a04222c9"
  MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = "fded7521-8ed8-431a-a96b-f3e2565e981c"
  MF_CAPTURE_SINK_PREPARED = "7bfce257-12b1-4409-8c34-d445daab7578"
  MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET = "caaad994-83ec-45e9-a30a-1f20aadb9831"
  MF_CAPTURE_ENGINE_CAMERA_STREAM_BLOCKED = "a4209417-8d39-46f3-b759-5912528f4207"
  MF_CAPTURE_ENGINE_CAMERA_STREAM_UNBLOCKED = "9be9eef0-cdaf-4717-8564-834aae66415c"
  MF_CAPTURE_ENGINE_D3D_MANAGER = "76e25e7b-d595-4283-962c-c594afd78ddf"
  MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES = "b467f705-7913-4894-9d42-a215fea23da9"
  MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES = "1cddb141-a7f4-4d58-9896-4d15a53c4efe"
  MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES = "e7b4a49e-382c-4aef-a946-aed5490b7111"
  MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES = "9896e12a-f707-4500-b6bd-db8eb810b50f"
  MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY = "1c8077da-8466-4dc4-8b8e-276b3f85923b"
  MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY = "7e025171-cf32-4f2e-8f19-410577b73a66"
  MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS = "b7c42a6b-3207-4495-b4e7-81f9c35d5991"
  MF_CAPTURE_ENGINE_DISABLE_DXVA = "f9818862-179d-433f-a32f-74cbcf74466d"
  MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG = "bc6989d2-0fc1-46e1-a74f-efd36bc788de"
  MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute = "2b8ad2e8-7acb-4321-a606-325c4249f4fc"
  MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute = "54c63a00-78d5-422f-aa3e-5e99ac649269"
  MF_CAPTURE_ENGINE_ENABLE_CAMERA_STREAMSTATE_NOTIFICATION = "4c808e9d-aaed-4713-90fb-cb24064ab8da"
  MF_CAPTURE_ENGINE_MEDIA_CATEGORY = "8e3f5bd5-dbbf-42f0-8542-d07a3971762a"
  MF_CAPTURE_ENGINE_AUDIO_PROCESSING = "10f1be5e-7e11-410b-973d-f4b6109000fe"
  MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID = "abfa8ad5-fc6d-4911-87e0-961945f8f7ce"
  MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX = "82697f44-b1cf-42eb-9753-f86d649c8865"
  MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE = "03160b7e-1c6f-4db2-ad56-a7c430f82392"
  MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX = "3ce88613-2214-46c3-b417-82f8a313c9c3"
  CLSID_MFCaptureEngine = "efce38d3-8914-4674-a7df-ae1b3d654b8a"
  CLSID_MFCaptureEngineClassFactory = "efce38d3-8914-4674-a7df-ae1b3d654b8a"
  MFSampleExtension_DeviceReferenceSystemTime = "6523775a-ba2d-405f-b2c5-01ff88e2e8f6"
  MF_D3D12_SYNCHRONIZATION_OBJECT = "2a7c8d6a-85a6-494d-a046-06ea1a138f4b"
  MF_MT_D3D_RESOURCE_VERSION = "174f1e85-fe26-453d-b52e-5bdd4e55b944"
  MF_MT_D3D12_CPU_READBACK = "28ee9fe3-d481-46a6-b98a-7f69d5280e82"
  MF_MT_D3D12_TEXTURE_LAYOUT = "97c85caa-0beb-4ee1-9715-f22fad8c10f5"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = "eeac2585-3430-498c-84a2-77b1bba570f6"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = "b1138dc3-01d5-4c14-9bdc-cdc9336f55b9"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = "82c85647-5057-4960-9559-f45b8e271427"
  MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = "ba06bfac-ffe3-474a-ab55-161ee4417a2e"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = "a6a1e439-2f96-4ab5-98dc-adf74973505d"
  MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = "0a4940b2-cfd6-4738-9d02-98113734015a"
  MF_SA_D3D12_HEAP_FLAGS = "496b3266-d28f-4f8c-93a7-4a596b1a31a1"
  MF_SA_D3D12_HEAP_TYPE = "56f26a76-bbc1-4ce0-bb11-e22368d874ed"
  MF_SA_D3D12_CLEAR_VALUE = "86ba9a39-0526-495d-9ab5-54ec9fad6fc3"
  MF_MSE_CALLBACK = "9063a7c0-42c5-4ffd-a8a8-6fcf9ea3d00c"
  MF_MSE_ACTIVELIST_CALLBACK = "949bda0f-4549-46d5-ad7f-b846e1ab1652"
  MF_MSE_BUFFERLIST_CALLBACK = "42e669b0-d60e-4afb-a85b-d8e5fe6bdab5"
  MF_MSE_VP9_SUPPORT = "92d78429-d88b-4ff0-8322-803efa6e9626"
  MF_MSE_OPUS_SUPPORT = "4d224cc1-8cc4-48a3-a7a7-e4c16ce6388a"
  MF_MEDIA_ENGINE_NEEDKEY_CALLBACK = "7ea80843-b6e4-432c-8ea4-7848ffe4220e"
  MF_MEDIA_ENGINE_CALLBACK = "c60381b8-83a4-41f8-a3d0-de05076849a9"
  MF_MEDIA_ENGINE_DXGI_MANAGER = "065702da-1094-486d-8617-ee7cc4ee4648"
  MF_MEDIA_ENGINE_EXTENSION = "3109fd46-060d-4b62-8dcf-faff811318d2"
  MF_MEDIA_ENGINE_PLAYBACK_HWND = "d988879b-67c9-4d92-baa7-6eadd446039d"
  MF_MEDIA_ENGINE_OPM_HWND = "a0be8ee7-0572-4f2c-a801-2a151bd3e726"
  MF_MEDIA_ENGINE_PLAYBACK_VISUAL = "6debd26f-6ab9-4d7e-b0ee-c61a73ffad15"
  MF_MEDIA_ENGINE_COREWINDOW = "fccae4dc-0b7f-41c2-9f96-4659948acddc"
  MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT = "5066893c-8cf9-42bc-8b8a-472212e52726"
  MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS = "e0350223-5aaf-4d76-a7c3-06de70894db4"
  MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER = "fdd6dfaa-bd85-4af3-9e0f-a01d539d876a"
  MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE = "d2cb93d1-116a-44f2-9385-f7d0fda2fb46"
  MF_MEDIA_ENGINE_AUDIO_CATEGORY = "c8d4c51d-350e-41f2-ba46-faebbb0857f6"
  MF_MEDIA_ENGINE_STREAM_CONTAINS_ALPHA_CHANNEL = "5cbfaf44-d2b2-4cfb-80a7-d429c74c789d"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE = "4e0212e2-e18f-41e1-95e5-c0e7e9235bc3"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE9 = "052c2d39-40c0-4188-ab86-f828273b7522"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE10 = "11a47afd-6589-4124-b312-6158ec517fc3"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE11 = "1cf1315f-ce3f-4035-9391-16142f775189"
  MF_MEDIA_ENGINE_BROWSER_COMPATIBILITY_MODE_IE_EDGE = "a6f3e465-3aca-442c-a3f0-ad6ddad839ae"
  MF_MEDIA_ENGINE_COMPATIBILITY_MODE = "3ef26ad4-dc54-45de-b9af-76c8c66bfa8e"
  MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WWA_EDGE = "15b29098-9f01-4e4d-b65a-c06c6c89da2a"
  MF_MEDIA_ENGINE_COMPATIBILITY_MODE_WIN10 = "5b25e089-6ca7-4139-a2cb-fcaab39552a3"
  MF_MEDIA_ENGINE_SOURCE_RESOLVER_CONFIG_STORE = "0ac0c497-b3c4-48c9-9cde-bb8ca2442ca3"
  MF_MEDIA_ENGINE_TRACK_ID = "65bea312-4043-4815-8eab-44dce2ef8f2a"
  MF_MEDIA_ENGINE_TELEMETRY_APPLICATION_ID = "1e7b273b-a7e4-402a-8f51-c48e88a2cabc"
  MF_MEDIA_ENGINE_SYNCHRONOUS_CLOSE = "c3c2e12f-7e0e-4e43-b91c-dc992ccdfa5e"
  MF_MEDIA_ENGINE_MEDIA_PLAYER_MODE = "3ddd8d45-5aa1-4112-82e5-36f6a2197e6e"
  CLSID_MFMediaEngineClassFactory = "b44392da-499b-446b-a4cb-005fead0e6d5"
  MF_MEDIA_ENGINE_TIMEDTEXT = "805ea411-92e0-4e59-9b6e-5c7d7915e64f"
  MF_MEDIA_ENGINE_CONTINUE_ON_CODEC_ERROR = "dbcdb7f9-48e4-4295-b70d-d518234eeb38"
  MF_MEDIA_ENGINE_EME_CALLBACK = "494553a7-a481-4cb7-bec5-380903513731"
  CLSID_MPEG2DLNASink = "fa5fe7c5-6a1d-4b11-b41f-f959d6c76500"
  MF_MP2DLNA_USE_MMCSS = "54f3e2ee-a2a2-497d-9834-973afde521eb"
  MF_MP2DLNA_VIDEO_BIT_RATE = "e88548de-73b4-42d7-9c75-adfa0a2a6e4c"
  MF_MP2DLNA_AUDIO_BIT_RATE = "2d1c070e-2b5f-4ab3-a7e6-8d943ba8d00a"
  MF_MP2DLNA_ENCODE_QUALITY = "b52379d7-1d46-4fb6-a317-a4a5f60959f8"
  MF_MP2DLNA_STATISTICS = "75e488a3-d5ad-4898-85e0-bcce24a722d7"
  CLSID_MFReadWriteClassFactory = "48e2ed0f-98c2-4a37-bed5-166312ddd83f"
  CLSID_MFSourceReader = "1777133c-0881-411b-a577-ad545f0714c4"
  MF_SOURCE_READER_ASYNC_CALLBACK = "1e3dbeac-bb43-4c35-b507-cd644464c965"
  MF_SOURCE_READER_D3D_MANAGER = "ec822da2-e1e9-4b29-a0d8-563c719f5269"
  MF_SOURCE_READER_DISABLE_DXVA = "aa456cfd-3943-4a1e-a77d-1838c0ea2e35"
  MF_SOURCE_READER_MEDIASOURCE_CONFIG = "9085abeb-0354-48f9-abb5-200df838c68e"
  MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS = "6d23f5c8-c5d7-4a9b-9971-5d11f8bca880"
  MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING = "fb394f3d-ccf1-42ee-bbb3-f9b845d5681d"
  MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING = "0f81da2c-b537-4672-a8b2-a681b17307a3"
  MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS = "9d3365dd-058f-4cfb-9f97-b314cc99c8ad"
  MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN = "56b67165-219e-456d-a22e-2d3004c7fe56"
  MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS = "dfd4f008-b5fd-4e78-ae44-62a1e67bbe27"
  MF_SOURCE_READER_D3D11_BIND_FLAGS = "33f3197b-f73a-4e14-8d85-0e4c4368788d"
  CLSID_MFSinkWriter = "a3bbfb17-8273-4e52-9e0e-9739dc887990"
  MF_SINK_WRITER_ASYNC_CALLBACK = "48cb183e-7b0b-46f4-822e-5e1d2dda4354"
  MF_SINK_WRITER_DISABLE_THROTTLING = "08b845d8-2b74-4afe-9d53-be16d2d5ae4f"
  MF_SINK_WRITER_D3D_MANAGER = "ec822da2-e1e9-4b29-a0d8-563c719f5269"
  MF_SINK_WRITER_ENCODER_CONFIG = "ad91cd04-a7cc-4ac7-99b6-a57b9a4a7c70"
  MF_READWRITE_DISABLE_CONVERTERS = "98d5b065-1374-4847-8d5d-31520fee7156"
  MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS = "a634a91c-822b-41b9-a494-4de4643612b0"
  MF_READWRITE_MMCSS_CLASS = "39384300-d0eb-40b1-87a0-3318871b5a53"
  MF_READWRITE_MMCSS_PRIORITY = "43ad19ce-f33f-4ba9-a580-e4cd12f2d144"
  MF_READWRITE_MMCSS_CLASS_AUDIO = "430847da-0890-4b0e-938c-054332c547e1"
  MF_READWRITE_MMCSS_PRIORITY_AUDIO = "273db885-2de2-4db2-a6a7-fdb66fb40b61"
  MF_READWRITE_D3D_OPTIONAL = "216479d9-3071-42ca-bb6c-4c22102e1d18"
  MF_MEDIASINK_AUTOFINALIZE_SUPPORTED = "48c131be-135a-41cb-8290-03652509c999"
  MF_MEDIASINK_ENABLE_AUTOFINALIZE = "34014265-cb7e-4cde-ac7c-effd3b3c2530"
  MF_READWRITE_ENABLE_AUTOFINALIZE = "dd7ca129-8cd1-4dc5-9dde-ce168675de61"
  MFP_POSITIONTYPE_100NS = "00000000-0000-0000-0000-000000000000"
  MF_MEDIA_SHARING_ENGINE_DEVICE_NAME = "771e05d1-862f-4299-95ac-ae81fd14f3e7"
  MF_MEDIA_SHARING_ENGINE_DEVICE = "b461c58a-7a08-4b98-99a8-70fd5f3badfd"
  CLSID_MFMediaSharingEngineClassFactory = "f8e307fb-6d45-4ad3-9993-66cd5a529659"
  CLSID_MFImageSharingEngineClassFactory = "b22c3339-87f3-4059-a0c5-037aa9707eaf"
  CLSID_PlayToSourceClassFactory = "da17539a-3dc3-42c1-a749-a183b51f085e"
  GUID_PlayToService = "f6a8ff9d-9e14-41c9-bf0f-120a2b3ce120"
  GUID_NativeDeviceService = "ef71e53c-52f4-43c5-b86a-ad6cb216a61e"
  MF_CONTENTDECRYPTIONMODULE_SERVICE = "15320c45-ff80-484a-9dcb-0df894e69a01"
  MF_VIRTUALCAMERA_CONFIGURATION_APP_PACKAGE_FAMILY_NAME = "658abe51-8044-462e-97ea-e676fd72055f"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_INITIALIZE = "e52c4dff-e46d-4d0b-bc75-ddd4c8723f96"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_START = "b1eeb989-b456-4f4a-ae40-079c28e24af8"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_STOP = "b7fe7a61-fe91-415e-8608-d37dedb1a58b"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_SOURCE_UNINITIALIZE = "a0ebaba7-a422-4e33-8401-b37d2800aa67"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_PIPELINE_SHUTDOWN = "45a81b31-43f8-4e5d-8ce2-22dce026996d"
  MF_FRAMESERVER_VCAMEVENT_EXTENDED_CUSTOM_EVENT = "6e59489c-47d3-4467-83ef-12d34e871665"

  CLSID_CMpeg4DecMediaObject = LibC::GUID.new(0xf371728a_u32, 0x6052_u16, 0x4d47_u16, StaticArray[0x82_u8, 0x7c_u8, 0xd0_u8, 0x39_u8, 0x33_u8, 0x5d_u8, 0xfe_u8, 0xa_u8])

  CLSID_CMpeg43DecMediaObject = LibC::GUID.new(0xcba9e78b_u32, 0x49a3_u16, 0x49ea_u16, StaticArray[0x93_u8, 0xd4_u8, 0x6b_u8, 0xcb_u8, 0xa8_u8, 0xc4_u8, 0xde_u8, 0x7_u8])

  CLSID_CMpeg4sDecMediaObject = LibC::GUID.new(0x2a11bae2_u32, 0xfe6e_u16, 0x4249_u16, StaticArray[0x86_u8, 0x4b_u8, 0x9e_u8, 0x9e_u8, 0xd6_u8, 0xe8_u8, 0xdb_u8, 0xc2_u8])

  CLSID_CMpeg4sDecMFT = LibC::GUID.new(0x5686a0d9_u32, 0xfe39_u16, 0x409f_u16, StaticArray[0x9d_u8, 0xff_u8, 0x3f_u8, 0xdb_u8, 0xc8_u8, 0x49_u8, 0xf9_u8, 0xf5_u8])

  CLSID_CZuneM4S2DecMediaObject = LibC::GUID.new(0xc56fc25c_u32, 0xfc6_u16, 0x404a_u16, StaticArray[0x95_u8, 0x3_u8, 0xb1_u8, 0xb_u8, 0xf5_u8, 0x1a_u8, 0x8a_u8, 0xb9_u8])

  CLSID_CMpeg4EncMediaObject = LibC::GUID.new(0x24f258d8_u32, 0xc651_u16, 0x4042_u16, StaticArray[0x93_u8, 0xe4_u8, 0xca_u8, 0x65_u8, 0x4a_u8, 0xbb_u8, 0x68_u8, 0x2c_u8])

  CLSID_CMpeg4sEncMediaObject = LibC::GUID.new(0x6ec5a7be_u32, 0xd81e_u16, 0x4f9e_u16, StaticArray[0xad_u8, 0xa3_u8, 0xcd_u8, 0x1b_u8, 0xf2_u8, 0x62_u8, 0xb6_u8, 0xd8_u8])

  CLSID_CMSSCDecMediaObject = LibC::GUID.new(0x7bafb3b1_u32, 0xd8f4_u16, 0x4279_u16, StaticArray[0x92_u8, 0x53_u8, 0x27_u8, 0xda_u8, 0x42_u8, 0x31_u8, 0x8_u8, 0xde_u8])

  CLSID_CMSSCEncMediaObject = LibC::GUID.new(0x8cb9cc06_u32, 0xd139_u16, 0x4ae6_u16, StaticArray[0x8b_u8, 0xb4_u8, 0x41_u8, 0xe6_u8, 0x12_u8, 0xe1_u8, 0x41_u8, 0xd5_u8])

  CLSID_CMSSCEncMediaObject2 = LibC::GUID.new(0xf7ffe0a0_u32, 0xa4f5_u16, 0x44b5_u16, StaticArray[0x94_u8, 0x9e_u8, 0x15_u8, 0xed_u8, 0x2b_u8, 0xc6_u8, 0x6f_u8, 0x9d_u8])

  CLSID_CWMADecMediaObject = LibC::GUID.new(0x2eeb4adf_u32, 0x4578_u16, 0x4d10_u16, StaticArray[0xbc_u8, 0xa7_u8, 0xbb_u8, 0x95_u8, 0x5f_u8, 0x56_u8, 0x32_u8, 0xa_u8])

  CLSID_CWMAEncMediaObject = LibC::GUID.new(0x70f598e9_u32, 0xf4ab_u16, 0x495a_u16, StaticArray[0x99_u8, 0xe2_u8, 0xa7_u8, 0xc4_u8, 0xd3_u8, 0xd8_u8, 0x9a_u8, 0xbf_u8])

  CLSID_CWMATransMediaObject = LibC::GUID.new(0xedcad9cb_u32, 0x3127_u16, 0x40df_u16, StaticArray[0xb5_u8, 0x27_u8, 0x1_u8, 0x52_u8, 0xcc_u8, 0xb3_u8, 0xf6_u8, 0xf5_u8])

  CLSID_CWMSPDecMediaObject = LibC::GUID.new(0x874131cb_u32, 0x4ecc_u16, 0x443b_u16, StaticArray[0x89_u8, 0x48_u8, 0x74_u8, 0x6b_u8, 0x89_u8, 0x59_u8, 0x5d_u8, 0x20_u8])

  CLSID_CWMSPEncMediaObject = LibC::GUID.new(0x67841b03_u32, 0xc689_u16, 0x4188_u16, StaticArray[0xad_u8, 0x3f_u8, 0x4c_u8, 0x9e_u8, 0xbe_u8, 0xec_u8, 0x71_u8, 0xb_u8])

  CLSID_CWMSPEncMediaObject2 = LibC::GUID.new(0x1f1f4e1a_u32, 0x2252_u16, 0x4063_u16, StaticArray[0x84_u8, 0xbb_u8, 0xee_u8, 0xe7_u8, 0x5f_u8, 0x88_u8, 0x56_u8, 0xd5_u8])

  CLSID_CWMTDecMediaObject = LibC::GUID.new(0xf9dbc64e_u32, 0x2dd0_u16, 0x45dd_u16, StaticArray[0x9b_u8, 0x52_u8, 0x66_u8, 0x64_u8, 0x2e_u8, 0xf9_u8, 0x44_u8, 0x31_u8])

  CLSID_CWMTEncMediaObject = LibC::GUID.new(0x60b67652_u32, 0xe46b_u16, 0x4e44_u16, StaticArray[0x86_u8, 0x9_u8, 0xf7_u8, 0x4b_u8, 0xff_u8, 0xdc_u8, 0x8_u8, 0x3c_u8])

  CLSID_CWMVDecMediaObject = LibC::GUID.new(0x82d353df_u32, 0x90bd_u16, 0x4382_u16, StaticArray[0x8b_u8, 0xc2_u8, 0x3f_u8, 0x61_u8, 0x92_u8, 0xb7_u8, 0x6e_u8, 0x34_u8])

  CLSID_CWMVEncMediaObject2 = LibC::GUID.new(0x96b57cdd_u32, 0x8966_u16, 0x410c_u16, StaticArray[0xbb_u8, 0x1f_u8, 0xc9_u8, 0x7e_u8, 0xea_u8, 0x76_u8, 0x5c_u8, 0x4_u8])

  CLSID_CWMVXEncMediaObject = LibC::GUID.new(0x7e320092_u32, 0x596a_u16, 0x41b2_u16, StaticArray[0xbb_u8, 0xeb_u8, 0x17_u8, 0x5d_u8, 0x10_u8, 0x50_u8, 0x4e_u8, 0xb6_u8])

  CLSID_CWMV9EncMediaObject = LibC::GUID.new(0xd23b90d0_u32, 0x144f_u16, 0x46bd_u16, StaticArray[0x84_u8, 0x1d_u8, 0x59_u8, 0xe4_u8, 0xeb_u8, 0x19_u8, 0xdc_u8, 0x59_u8])

  CLSID_CWVC1DecMediaObject = LibC::GUID.new(0xc9bfbccf_u32, 0xe60e_u16, 0x4588_u16, StaticArray[0xa3_u8, 0xdf_u8, 0x5a_u8, 0x3_u8, 0xb1_u8, 0xfd_u8, 0x95_u8, 0x85_u8])

  CLSID_CWVC1EncMediaObject = LibC::GUID.new(0x44653d0d_u32, 0x8cca_u16, 0x41e7_u16, StaticArray[0xba_u8, 0xca_u8, 0x88_u8, 0x43_u8, 0x37_u8, 0xb7_u8, 0x47_u8, 0xac_u8])

  CLSID_CDeColorConvMediaObject = LibC::GUID.new(0x49034c05_u32, 0xf43c_u16, 0x400f_u16, StaticArray[0x84_u8, 0xc1_u8, 0x90_u8, 0xa6_u8, 0x83_u8, 0x19_u8, 0x5a_u8, 0x3a_u8])

  CLSID_CDVDecoderMediaObject = LibC::GUID.new(0xe54709c5_u32, 0x1e17_u16, 0x4c8d_u16, StaticArray[0x94_u8, 0xe7_u8, 0x47_u8, 0x89_u8, 0x40_u8, 0x43_u8, 0x35_u8, 0x84_u8])

  CLSID_CDVEncoderMediaObject = LibC::GUID.new(0xc82ae729_u32, 0xc327_u16, 0x4cce_u16, StaticArray[0x91_u8, 0x4d_u8, 0x81_u8, 0x71_u8, 0xfe_u8, 0xfe_u8, 0xbe_u8, 0xfb_u8])

  CLSID_CMpeg2DecMediaObject = LibC::GUID.new(0x863d66cd_u32, 0xcdce_u16, 0x4617_u16, StaticArray[0xb4_u8, 0x7f_u8, 0xc8_u8, 0x92_u8, 0x9c_u8, 0xfc_u8, 0x28_u8, 0xa6_u8])

  CLSID_CPK_DS_MPEG2Decoder = LibC::GUID.new(0x9910c5cd_u32, 0x95c9_u16, 0x4e06_u16, StaticArray[0x86_u8, 0x5a_u8, 0xef_u8, 0xa1_u8, 0xc8_u8, 0x1_u8, 0x6b_u8, 0xf4_u8])

  CLSID_CAC3DecMediaObject = LibC::GUID.new(0x3d7c802_u32, 0xecfa_u16, 0x47d9_u16, StaticArray[0xb2_u8, 0x68_u8, 0x5f_u8, 0xb3_u8, 0xe3_u8, 0x10_u8, 0xde_u8, 0xe4_u8])

  CLSID_CPK_DS_AC3Decoder = LibC::GUID.new(0x6c9c69d6_u32, 0xffc_u16, 0x4481_u16, StaticArray[0xaf_u8, 0xdb_u8, 0xcd_u8, 0xf1_u8, 0xc7_u8, 0x9c_u8, 0x6f_u8, 0x3e_u8])

  CLSID_CMP3DecMediaObject = LibC::GUID.new(0xbbeea841_u32, 0xa63_u16, 0x4f52_u16, StaticArray[0xa7_u8, 0xab_u8, 0xa9_u8, 0xb3_u8, 0xa8_u8, 0x4e_u8, 0xd3_u8, 0x8a_u8])

  CLSID_CResamplerMediaObject = LibC::GUID.new(0xf447b69e_u32, 0x1884_u16, 0x4a7e_u16, StaticArray[0x80_u8, 0x55_u8, 0x34_u8, 0x6f_u8, 0x74_u8, 0xd6_u8, 0xed_u8, 0xb3_u8])

  CLSID_CResizerMediaObject = LibC::GUID.new(0xd3ec8b8b_u32, 0x7728_u16, 0x4fd8_u16, StaticArray[0x9f_u8, 0xe0_u8, 0x7b_u8, 0x67_u8, 0xd1_u8, 0x9f_u8, 0x73_u8, 0xa3_u8])

  CLSID_CInterlaceMediaObject = LibC::GUID.new(0xb5a89c80_u32, 0x4901_u16, 0x407b_u16, StaticArray[0x9a_u8, 0xbc_u8, 0x90_u8, 0xd9_u8, 0xa6_u8, 0x44_u8, 0xbb_u8, 0x46_u8])

  CLSID_CWMAudioLFXAPO = LibC::GUID.new(0x62dc1a93_u32, 0xae24_u16, 0x464c_u16, StaticArray[0xa4_u8, 0x3e_u8, 0x45_u8, 0x2f_u8, 0x82_u8, 0x4c_u8, 0x42_u8, 0x50_u8])

  CLSID_CWMAudioGFXAPO = LibC::GUID.new(0x637c490d_u32, 0xeee3_u16, 0x4c0a_u16, StaticArray[0x97_u8, 0x3f_u8, 0x37_u8, 0x19_u8, 0x58_u8, 0x80_u8, 0x2d_u8, 0xa2_u8])

  CLSID_CWMAudioCAPXLFXAPO = LibC::GUID.new(0xc9453e73_u32, 0x8c5c_u16, 0x4463_u16, StaticArray[0x99_u8, 0x84_u8, 0xaf_u8, 0x8b_u8, 0xab_u8, 0x2f_u8, 0x54_u8, 0x47_u8])

  CLSID_CWMAudioCAPXGFXAPO = LibC::GUID.new(0x13ab3ebd_u32, 0x137e_u16, 0x4903_u16, StaticArray[0x9d_u8, 0x89_u8, 0x60_u8, 0xbe_u8, 0x82_u8, 0x77_u8, 0xfd_u8, 0x17_u8])

  CLSID_CWMAudioSpdTxDMO = LibC::GUID.new(0x5210f8e4_u32, 0xb0bb_u16, 0x47c3_u16, StaticArray[0xa8_u8, 0xd9_u8, 0x7b_u8, 0x22_u8, 0x82_u8, 0xcc_u8, 0x79_u8, 0xed_u8])

  CLSID_CWMAudioAEC = LibC::GUID.new(0x745057c7_u32, 0xf353_u16, 0x4f2d_u16, StaticArray[0xa7_u8, 0xee_u8, 0x58_u8, 0x43_u8, 0x44_u8, 0x77_u8, 0x73_u8, 0xe_u8])

  CLSID_CClusterDetectorDmo = LibC::GUID.new(0x36e820c4_u32, 0x165a_u16, 0x4521_u16, StaticArray[0x86_u8, 0x3c_u8, 0x61_u8, 0x9e_u8, 0x11_u8, 0x60_u8, 0xd4_u8, 0xd4_u8])

  CLSID_CColorControlDmo = LibC::GUID.new(0x798059f0_u32, 0x89ca_u16, 0x4160_u16, StaticArray[0xb3_u8, 0x25_u8, 0xae_u8, 0xb4_u8, 0x8e_u8, 0xfe_u8, 0x4f_u8, 0x9a_u8])

  CLSID_CColorConvertDMO = LibC::GUID.new(0x98230571_u32, 0x87_u16, 0x4204_u16, StaticArray[0xb0_u8, 0x20_u8, 0x32_u8, 0x82_u8, 0x53_u8, 0x8e_u8, 0x57_u8, 0xd3_u8])

  CLSID_CColorLegalizerDmo = LibC::GUID.new(0xfdfaa753_u32, 0xe48e_u16, 0x4e33_u16, StaticArray[0x9c_u8, 0x74_u8, 0x98_u8, 0xa2_u8, 0x7f_u8, 0xc6_u8, 0x72_u8, 0x6a_u8])

  CLSID_CFrameInterpDMO = LibC::GUID.new(0xa7cfe1b_u32, 0x6ab5_u16, 0x4334_u16, StaticArray[0x9e_u8, 0xd8_u8, 0x3f_u8, 0x97_u8, 0xcb_u8, 0x37_u8, 0xda_u8, 0xa1_u8])

  CLSID_CFrameRateConvertDmo = LibC::GUID.new(0x1f36ce2_u32, 0x907_u16, 0x4d8b_u16, StaticArray[0x97_u8, 0x9d_u8, 0xf1_u8, 0x51_u8, 0xbe_u8, 0x91_u8, 0xc8_u8, 0x83_u8])

  CLSID_CResizerDMO = LibC::GUID.new(0x1ea1ea14_u32, 0x48f4_u16, 0x4054_u16, StaticArray[0xad_u8, 0x1a_u8, 0xe8_u8, 0xae_u8, 0xe1_u8, 0xa_u8, 0xc8_u8, 0x5_u8])

  CLSID_CShotDetectorDmo = LibC::GUID.new(0x56aefacd_u32, 0x110c_u16, 0x4397_u16, StaticArray[0x92_u8, 0x92_u8, 0xb0_u8, 0xa0_u8, 0xc6_u8, 0x1b_u8, 0x67_u8, 0x50_u8])

  CLSID_CSmpteTransformsDmo = LibC::GUID.new(0xbde6388b_u32, 0xda25_u16, 0x485d_u16, StaticArray[0xba_u8, 0x7f_u8, 0xfa_u8, 0xbc_u8, 0x28_u8, 0xb2_u8, 0x3_u8, 0x18_u8])

  CLSID_CThumbnailGeneratorDmo = LibC::GUID.new(0x559c6bad_u32, 0x1ea8_u16, 0x4963_u16, StaticArray[0xa0_u8, 0x87_u8, 0x8a_u8, 0x68_u8, 0x10_u8, 0xf9_u8, 0x21_u8, 0x8b_u8])

  CLSID_CTocGeneratorDmo = LibC::GUID.new(0x4dda1941_u32, 0x77a0_u16, 0x4fb1_u16, StaticArray[0xa5_u8, 0x18_u8, 0xe2_u8, 0x18_u8, 0x50_u8, 0x41_u8, 0xd7_u8, 0xc_u8])

  CLSID_CMPEGAACDecMediaObject = LibC::GUID.new(0x8dde1772_u32, 0xedad_u16, 0x41c3_u16, StaticArray[0xb4_u8, 0xbe_u8, 0x1f_u8, 0x30_u8, 0xfb_u8, 0x4e_u8, 0xe0_u8, 0xd6_u8])

  CLSID_CNokiaAACDecMediaObject = LibC::GUID.new(0x3cb2bde4_u32, 0x4e29_u16, 0x4c44_u16, StaticArray[0xa7_u8, 0x3e_u8, 0x2d_u8, 0x7c_u8, 0x2c_u8, 0x46_u8, 0xd6_u8, 0xec_u8])

  CLSID_CVodafoneAACDecMediaObject = LibC::GUID.new(0x7f36f942_u32, 0xdcf3_u16, 0x4d82_u16, StaticArray[0x92_u8, 0x89_u8, 0x5b_u8, 0x18_u8, 0x20_u8, 0x27_u8, 0x8f_u8, 0x7c_u8])

  CLSID_CZuneAACCCDecMediaObject = LibC::GUID.new(0xa74e98f2_u32, 0x52d6_u16, 0x4b4e_u16, StaticArray[0x88_u8, 0x5b_u8, 0xe0_u8, 0xa6_u8, 0xca_u8, 0x4f_u8, 0x18_u8, 0x7a_u8])

  CLSID_CNokiaAACCCDecMediaObject = LibC::GUID.new(0xeabf7a6f_u32, 0xccba_u16, 0x4d60_u16, StaticArray[0x86_u8, 0x20_u8, 0xb1_u8, 0x52_u8, 0xcc_u8, 0x97_u8, 0x72_u8, 0x63_u8])

  CLSID_CVodafoneAACCCDecMediaObject = LibC::GUID.new(0x7e76bf7f_u32, 0xc993_u16, 0x4e26_u16, StaticArray[0x8f_u8, 0xab_u8, 0x47_u8, 0xa_u8, 0x70_u8, 0xc0_u8, 0xd5_u8, 0x9c_u8])

  CLSID_CMPEG2EncoderDS = LibC::GUID.new(0x5f5aff4a_u32, 0x2f7f_u16, 0x4279_u16, StaticArray[0x88_u8, 0xc2_u8, 0xcd_u8, 0x88_u8, 0xeb_u8, 0x39_u8, 0xd1_u8, 0x44_u8])

  CLSID_CMPEG2EncoderVideoDS = LibC::GUID.new(0x42150cd9_u32, 0xca9a_u16, 0x4ea5_u16, StaticArray[0x99_u8, 0x39_u8, 0x30_u8, 0xee_u8, 0x3_u8, 0x7f_u8, 0x6e_u8, 0x74_u8])

  CLSID_CMPEG2EncoderAudioDS = LibC::GUID.new(0xacd453bc_u32, 0xc58a_u16, 0x44d1_u16, StaticArray[0xbb_u8, 0xf5_u8, 0xbf_u8, 0xb3_u8, 0x25_u8, 0xbe_u8, 0x2d_u8, 0x78_u8])

  CLSID_CMPEG2AudDecoderDS = LibC::GUID.new(0xe1f1a0b8_u32, 0xbeee_u16, 0x490d_u16, StaticArray[0xba_u8, 0x7c_u8, 0x6_u8, 0x6c_u8, 0x40_u8, 0xb5_u8, 0xe2_u8, 0xb9_u8])

  CLSID_CMPEG2VidDecoderDS = LibC::GUID.new(0x212690fb_u32, 0x83e5_u16, 0x4526_u16, StaticArray[0x8f_u8, 0xd7_u8, 0x74_u8, 0x47_u8, 0x8b_u8, 0x79_u8, 0x39_u8, 0xcd_u8])

  CLSID_CDTVAudDecoderDS = LibC::GUID.new(0x8e269032_u32, 0xfe03_u16, 0x4753_u16, StaticArray[0x9b_u8, 0x17_u8, 0x18_u8, 0x25_u8, 0x3c_u8, 0x21_u8, 0x72_u8, 0x2e_u8])

  CLSID_CDTVVidDecoderDS = LibC::GUID.new(0x64777dc8_u32, 0x4e24_u16, 0x4beb_u16, StaticArray[0x9d_u8, 0x19_u8, 0x60_u8, 0xa3_u8, 0x5b_u8, 0xe1_u8, 0xda_u8, 0xaf_u8])

  CLSID_CMSAC3Enc = LibC::GUID.new(0xc6b400e2_u32, 0x20a7_u16, 0x4e58_u16, StaticArray[0xa2_u8, 0xfe_u8, 0x24_u8, 0x61_u8, 0x96_u8, 0x82_u8, 0xce_u8, 0x6c_u8])

  CLSID_CMSH264DecoderMFT = LibC::GUID.new(0x62ce7e72_u32, 0x4c71_u16, 0x4d20_u16, StaticArray[0xb1_u8, 0x5d_u8, 0x45_u8, 0x28_u8, 0x31_u8, 0xa8_u8, 0x7d_u8, 0x9d_u8])

  CLSID_CMSH263EncoderMFT = LibC::GUID.new(0xbc47fcfe_u32, 0x98a0_u16, 0x4f27_u16, StaticArray[0xbb_u8, 0x7_u8, 0x69_u8, 0x8a_u8, 0xf2_u8, 0x4f_u8, 0x2b_u8, 0x38_u8])

  CLSID_CMSH264EncoderMFT = LibC::GUID.new(0x6ca50344_u32, 0x51a_u16, 0x4ded_u16, StaticArray[0x97_u8, 0x79_u8, 0xa4_u8, 0x33_u8, 0x5_u8, 0x16_u8, 0x5e_u8, 0x35_u8])

  CLSID_CMSH265EncoderMFT = LibC::GUID.new(0xf2f84074_u32, 0x8bca_u16, 0x40bd_u16, StaticArray[0x91_u8, 0x59_u8, 0xe8_u8, 0x80_u8, 0xf6_u8, 0x73_u8, 0xdd_u8, 0x3b_u8])

  CLSID_CMSVPXEncoderMFT = LibC::GUID.new(0xaeb6c755_u32, 0x2546_u16, 0x4881_u16, StaticArray[0x82_u8, 0xcc_u8, 0xe1_u8, 0x5a_u8, 0xe5_u8, 0xeb_u8, 0xff_u8, 0x3d_u8])

  CLSID_CMSH264RemuxMFT = LibC::GUID.new(0x5a47ebb_u32, 0x8bf0_u16, 0x4cbf_u16, StaticArray[0xad_u8, 0x2f_u8, 0x3b_u8, 0x71_u8, 0xd7_u8, 0x58_u8, 0x66_u8, 0xf5_u8])

  CLSID_CMSAACDecMFT = LibC::GUID.new(0x32d186a7_u32, 0x218f_u16, 0x4c75_u16, StaticArray[0x88_u8, 0x76_u8, 0xdd_u8, 0x77_u8, 0x27_u8, 0x3a_u8, 0x89_u8, 0x99_u8])

  CLSID_AACMFTEncoder = LibC::GUID.new(0x93af0c51_u32, 0x2275_u16, 0x45d2_u16, StaticArray[0xa3_u8, 0x5b_u8, 0xf2_u8, 0xba_u8, 0x21_u8, 0xca_u8, 0xed_u8, 0x0_u8])

  CLSID_CMSDDPlusDecMFT = LibC::GUID.new(0x177c0afe_u32, 0x900b_u16, 0x48d4_u16, StaticArray[0x9e_u8, 0x4c_u8, 0x57_u8, 0xad_u8, 0xd2_u8, 0x50_u8, 0xb3_u8, 0xd4_u8])

  CLSID_CMPEG2VideoEncoderMFT = LibC::GUID.new(0xe6335f02_u32, 0x80b7_u16, 0x4dc4_u16, StaticArray[0xad_u8, 0xfa_u8, 0xdf_u8, 0xe7_u8, 0x21_u8, 0xd_u8, 0x20_u8, 0xd5_u8])

  CLSID_CMPEG2AudioEncoderMFT = LibC::GUID.new(0x46a4dd5c_u32, 0x73f8_u16, 0x4304_u16, StaticArray[0x94_u8, 0xdf_u8, 0x30_u8, 0x8f_u8, 0x76_u8, 0x9_u8, 0x74_u8, 0xf4_u8])

  CLSID_CMSMPEGDecoderMFT = LibC::GUID.new(0x2d709e52_u32, 0x123f_u16, 0x49b5_u16, StaticArray[0x9c_u8, 0xbc_u8, 0x9a_u8, 0xf5_u8, 0xcd_u8, 0xe2_u8, 0x8f_u8, 0xb9_u8])

  CLSID_CMSMPEGAudDecMFT = LibC::GUID.new(0x70707b39_u32, 0xb2ca_u16, 0x4015_u16, StaticArray[0xab_u8, 0xea_u8, 0xf8_u8, 0x44_u8, 0x7d_u8, 0x22_u8, 0xd8_u8, 0x8b_u8])

  CLSID_CMSDolbyDigitalEncMFT = LibC::GUID.new(0xac3315c9_u32, 0xf481_u16, 0x45d7_u16, StaticArray[0x82_u8, 0x6c_u8, 0xb_u8, 0x40_u8, 0x6c_u8, 0x1f_u8, 0x64_u8, 0xb8_u8])

  CLSID_MP3ACMCodecWrapper = LibC::GUID.new(0x11103421_u32, 0x354c_u16, 0x4cca_u16, StaticArray[0xa7_u8, 0xa3_u8, 0x1a_u8, 0xff_u8, 0x9a_u8, 0x5b_u8, 0x67_u8, 0x1_u8])

  CLSID_ALawCodecWrapper = LibC::GUID.new(0x36cb6e0c_u32, 0x78c1_u16, 0x42b2_u16, StaticArray[0x99_u8, 0x43_u8, 0x84_u8, 0x62_u8, 0x62_u8, 0xf3_u8, 0x17_u8, 0x86_u8])

  CLSID_MULawCodecWrapper = LibC::GUID.new(0x92b66080_u32, 0x5e2d_u16, 0x449e_u16, StaticArray[0x90_u8, 0xc4_u8, 0xc4_u8, 0x1f_u8, 0x26_u8, 0x8e_u8, 0x55_u8, 0x14_u8])

  CLSID_CMSVideoDSPMFT = LibC::GUID.new(0x51571744_u32, 0x7fe4_u16, 0x4ff2_u16, StaticArray[0xa4_u8, 0x98_u8, 0x2d_u8, 0xc3_u8, 0x4f_u8, 0xf7_u8, 0x4f_u8, 0x1b_u8])

  CLSID_VorbisDecoderMFT = LibC::GUID.new(0x1a198ef2_u32, 0x60e5_u16, 0x4ea8_u16, StaticArray[0x90_u8, 0xd8_u8, 0xda_u8, 0x1f_u8, 0x28_u8, 0x32_u8, 0xc2_u8, 0x88_u8])

  CLSID_CMSFLACDecMFT = LibC::GUID.new(0x6b0b3e6b_u32, 0xa2c5_u16, 0x4514_u16, StaticArray[0x80_u8, 0x55_u8, 0xaf_u8, 0xe8_u8, 0xa9_u8, 0x52_u8, 0x42_u8, 0xd9_u8])

  CLSID_CMSFLACEncMFT = LibC::GUID.new(0x128509e9_u32, 0xc44e_u16, 0x45dc_u16, StaticArray[0x95_u8, 0xe9_u8, 0xc2_u8, 0x55_u8, 0xb8_u8, 0xf4_u8, 0x66_u8, 0xa6_u8])

  CLSID_MFFLACBytestreamHandler = LibC::GUID.new(0xe41cfb8_u32, 0x506_u16, 0x40f4_u16, StaticArray[0xa5_u8, 0x16_u8, 0x77_u8, 0xcc_u8, 0x23_u8, 0x64_u8, 0x2d_u8, 0x91_u8])

  CLSID_MFFLACSinkClassFactory = LibC::GUID.new(0x7d39c56f_u32, 0x6075_u16, 0x47c9_u16, StaticArray[0x9b_u8, 0xae_u8, 0x8c_u8, 0xf9_u8, 0xe5_u8, 0x31_u8, 0xb5_u8, 0xf5_u8])

  CLSID_CMSALACDecMFT = LibC::GUID.new(0xc0cd7d12_u32, 0x31fc_u16, 0x4bbc_u16, StaticArray[0xb3_u8, 0x63_u8, 0x73_u8, 0x22_u8, 0xee_u8, 0x3e_u8, 0x18_u8, 0x79_u8])

  CLSID_CMSALACEncMFT = LibC::GUID.new(0x9ab6a28c_u32, 0x748e_u16, 0x4b6a_u16, StaticArray[0xbf_u8, 0xff_u8, 0xcc_u8, 0x44_u8, 0x3b_u8, 0x8e_u8, 0x8f_u8, 0xb4_u8])

  CLSID_CMSOpusDecMFT = LibC::GUID.new(0x63e17c10_u32, 0x2d43_u16, 0x4c42_u16, StaticArray[0x8f_u8, 0xe3_u8, 0x8d_u8, 0x8b_u8, 0x63_u8, 0xe4_u8, 0x6a_u8, 0x6a_u8])

  CLSID_MSAMRNBDecoder = LibC::GUID.new(0x265011ae_u32, 0x5481_u16, 0x4f77_u16, StaticArray[0xa2_u8, 0x95_u8, 0xab_u8, 0xb6_u8, 0xff_u8, 0xe8_u8, 0xd6_u8, 0x3e_u8])

  CLSID_MSAMRNBEncoder = LibC::GUID.new(0x2fae8afe_u32, 0x4a3_u16, 0x423a_u16, StaticArray[0xa8_u8, 0x14_u8, 0x85_u8, 0xdb_u8, 0x45_u8, 0x47_u8, 0x12_u8, 0xb0_u8])

  CLSID_MFAMRNBByteStreamHandler = LibC::GUID.new(0xefe6208a_u32, 0xa2c_u16, 0x49fa_u16, StaticArray[0x8a_u8, 0x1_u8, 0x37_u8, 0x68_u8, 0xb5_u8, 0x59_u8, 0xb6_u8, 0xda_u8])

  CLSID_MFAMRNBSinkClassFactory = LibC::GUID.new(0xb0271158_u32, 0x70d2_u16, 0x4c5b_u16, StaticArray[0x9f_u8, 0x94_u8, 0x76_u8, 0xf5_u8, 0x49_u8, 0xd9_u8, 0xf_u8, 0xdf_u8])

  CLSID_CODECAPI_AVEncCommonFormatConstraint = LibC::GUID.new(0x57cbb9b8_u32, 0x116f_u16, 0x4951_u16, StaticArray[0xb4_u8, 0xc_u8, 0xc2_u8, 0xa0_u8, 0x35_u8, 0xed_u8, 0x8f_u8, 0x17_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatUnSpecified = LibC::GUID.new(0xaf46a35a_u32, 0x6024_u16, 0x4525_u16, StaticArray[0xa4_u8, 0x8a_u8, 0x9_u8, 0x4b_u8, 0x97_u8, 0xf5_u8, 0xb3_u8, 0xc2_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatDVD_V = LibC::GUID.new(0xcc9598c4_u32, 0xe7fe_u16, 0x451d_u16, StaticArray[0xb1_u8, 0xca_u8, 0x76_u8, 0x1b_u8, 0xc8_u8, 0x40_u8, 0xb7_u8, 0xf3_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatDVD_DashVR = LibC::GUID.new(0xe55199d6_u32, 0x44c_u16, 0x4dae_u16, StaticArray[0xa4_u8, 0x88_u8, 0x53_u8, 0x1e_u8, 0xd3_u8, 0x6_u8, 0x23_u8, 0x5b_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR = LibC::GUID.new(0xe74c6f2e_u32, 0xec37_u16, 0x478d_u16, StaticArray[0x9a_u8, 0xf4_u8, 0xa5_u8, 0xe1_u8, 0x35_u8, 0xb6_u8, 0x27_u8, 0x1c_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatVCD = LibC::GUID.new(0x95035bf7_u32, 0x9d90_u16, 0x40ff_u16, StaticArray[0xad_u8, 0x5c_u8, 0x5c_u8, 0xf8_u8, 0xcf_u8, 0x71_u8, 0xca_u8, 0x1d_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatSVCD = LibC::GUID.new(0x51d85818_u32, 0x8220_u16, 0x448c_u16, StaticArray[0x80_u8, 0x66_u8, 0xd6_u8, 0x9b_u8, 0xed_u8, 0x16_u8, 0xc9_u8, 0xad_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatATSC = LibC::GUID.new(0x8d7b897c_u32, 0xa019_u16, 0x4670_u16, StaticArray[0xaa_u8, 0x76_u8, 0x2e_u8, 0xdc_u8, 0xac_u8, 0x7a_u8, 0xc2_u8, 0x96_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatDVB = LibC::GUID.new(0x71830d8f_u32, 0x6c33_u16, 0x430d_u16, StaticArray[0x84_u8, 0x4b_u8, 0xc2_u8, 0x70_u8, 0x5b_u8, 0xaa_u8, 0xe6_u8, 0xdb_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatMP3 = LibC::GUID.new(0x349733cd_u32, 0xeb08_u16, 0x4dc2_u16, StaticArray[0x81_u8, 0x97_u8, 0xe4_u8, 0x98_u8, 0x35_u8, 0xef_u8, 0x82_u8, 0x8b_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatHighMAT = LibC::GUID.new(0x1eabe760_u32, 0xfb2b_u16, 0x4928_u16, StaticArray[0x90_u8, 0xd1_u8, 0x78_u8, 0xdb_u8, 0x88_u8, 0xee_u8, 0xe8_u8, 0x89_u8])

  CLSID_CODECAPI_GUID_AVEncCommonFormatHighMPV = LibC::GUID.new(0xa2d25db8_u32, 0xb8f9_u16, 0x42c2_u16, StaticArray[0x8b_u8, 0xc7_u8, 0xb_u8, 0x93_u8, 0xcf_u8, 0x60_u8, 0x47_u8, 0x88_u8])

  CLSID_CODECAPI_AVEncCodecType = LibC::GUID.new(0x8af4ac1_u32, 0xf3f2_u16, 0x4c74_u16, StaticArray[0x9d_u8, 0xcf_u8, 0x37_u8, 0xf2_u8, 0xec_u8, 0x79_u8, 0xf8_u8, 0x26_u8])

  CLSID_CODECAPI_GUID_AVEncMPEG1Video = LibC::GUID.new(0xc8dafefe_u32, 0xda1e_u16, 0x4774_u16, StaticArray[0xb2_u8, 0x7d_u8, 0x11_u8, 0x83_u8, 0xc_u8, 0x16_u8, 0xb1_u8, 0xfe_u8])

  CLSID_CODECAPI_GUID_AVEncMPEG2Video = LibC::GUID.new(0x46dc19a_u32, 0x6677_u16, 0x4aaa_u16, StaticArray[0xa3_u8, 0x1d_u8, 0xc1_u8, 0xab_u8, 0x71_u8, 0x6f_u8, 0x45_u8, 0x60_u8])

  CLSID_CODECAPI_GUID_AVEncMPEG1Audio = LibC::GUID.new(0xd4dd1362_u32, 0xcd4a_u16, 0x4cd6_u16, StaticArray[0x81_u8, 0x38_u8, 0xb9_u8, 0x4d_u8, 0xb4_u8, 0x54_u8, 0x2b_u8, 0x4_u8])

  CLSID_CODECAPI_GUID_AVEncMPEG2Audio = LibC::GUID.new(0xee4cbb1f_u32, 0x9c3f_u16, 0x4770_u16, StaticArray[0x92_u8, 0xb5_u8, 0xfc_u8, 0xb7_u8, 0xc2_u8, 0xa8_u8, 0xd3_u8, 0x81_u8])

  CLSID_CODECAPI_GUID_AVEncWMV = LibC::GUID.new(0x4e0fef9b_u32, 0x1d43_u16, 0x41bd_u16, StaticArray[0xb8_u8, 0xbd_u8, 0x4d_u8, 0x7b_u8, 0xf7_u8, 0x45_u8, 0x7a_u8, 0x2a_u8])

  CLSID_CODECAPI_GUID_AVEndMPEG4Video = LibC::GUID.new(0xdd37b12a_u32, 0x9503_u16, 0x4f8b_u16, StaticArray[0xb8_u8, 0xd0_u8, 0x32_u8, 0x4a_u8, 0x0_u8, 0xc0_u8, 0xa1_u8, 0xcf_u8])

  CLSID_CODECAPI_GUID_AVEncH264Video = LibC::GUID.new(0x95044eab_u32, 0x31b3_u16, 0x47de_u16, StaticArray[0x8e_u8, 0x75_u8, 0x38_u8, 0xa4_u8, 0x2b_u8, 0xb0_u8, 0x3e_u8, 0x28_u8])

  CLSID_CODECAPI_GUID_AVEncDV = LibC::GUID.new(0x9b769c7_u32, 0x3329_u16, 0x44fb_u16, StaticArray[0x89_u8, 0x54_u8, 0xfa_u8, 0x30_u8, 0x93_u8, 0x7d_u8, 0x3d_u8, 0x5a_u8])

  CLSID_CODECAPI_GUID_AVEncWMAPro = LibC::GUID.new(0x1955f90c_u32, 0x33f7_u16, 0x4a68_u16, StaticArray[0xab_u8, 0x81_u8, 0x53_u8, 0xf5_u8, 0x65_u8, 0x71_u8, 0x25_u8, 0xc4_u8])

  CLSID_CODECAPI_GUID_AVEncWMALossless = LibC::GUID.new(0x55ca7265_u32, 0x23d8_u16, 0x4761_u16, StaticArray[0x90_u8, 0x31_u8, 0xb7_u8, 0x4f_u8, 0xbe_u8, 0x12_u8, 0xf4_u8, 0xc1_u8])

  CLSID_CODECAPI_GUID_AVEncWMAVoice = LibC::GUID.new(0x13ed18cb_u32, 0x50e8_u16, 0x4276_u16, StaticArray[0xa2_u8, 0x88_u8, 0xa6_u8, 0xaa_u8, 0x22_u8, 0x83_u8, 0x82_u8, 0xd9_u8])

  CLSID_CODECAPI_GUID_AVEncDolbyDigitalPro = LibC::GUID.new(0xf5be76cc_u32, 0xff8_u16, 0x40eb_u16, StaticArray[0x9c_u8, 0xb1_u8, 0xbb_u8, 0xa9_u8, 0x40_u8, 0x4_u8, 0xd4_u8, 0x4f_u8])

  CLSID_CODECAPI_GUID_AVEncDolbyDigitalConsumer = LibC::GUID.new(0xc1a7bf6c_u32, 0x59_u16, 0x4bfa_u16, StaticArray[0x94_u8, 0xef_u8, 0xef_u8, 0x74_u8, 0x7a_u8, 0x76_u8, 0x8d_u8, 0x52_u8])

  CLSID_CODECAPI_GUID_AVEncDolbyDigitalPlus = LibC::GUID.new(0x698d1b80_u32, 0xf7dd_u16, 0x415c_u16, StaticArray[0x97_u8, 0x1c_u8, 0x42_u8, 0x49_u8, 0x2a_u8, 0x20_u8, 0x56_u8, 0xc6_u8])

  CLSID_CODECAPI_GUID_AVEncDTSHD = LibC::GUID.new(0x2052e630_u32, 0x469d_u16, 0x4bfb_u16, StaticArray[0x80_u8, 0xca_u8, 0x1d_u8, 0x65_u8, 0x6e_u8, 0x7e_u8, 0x91_u8, 0x8f_u8])

  CLSID_CODECAPI_GUID_AVEncDTS = LibC::GUID.new(0x45fbcaa2_u32, 0x5e6e_u16, 0x4ab0_u16, StaticArray[0x88_u8, 0x93_u8, 0x59_u8, 0x3_u8, 0xbe_u8, 0xe9_u8, 0x3a_u8, 0xcf_u8])

  CLSID_CODECAPI_GUID_AVEncMLP = LibC::GUID.new(0x5f73e29_u32, 0xf0d1_u16, 0x431e_u16, StaticArray[0xa4_u8, 0x1c_u8, 0xa4_u8, 0x74_u8, 0x32_u8, 0xec_u8, 0x5a_u8, 0x66_u8])

  CLSID_CODECAPI_GUID_AVEncPCM = LibC::GUID.new(0x844be7f4_u32, 0x26cf_u16, 0x4779_u16, StaticArray[0xb3_u8, 0x86_u8, 0xcc_u8, 0x5_u8, 0xd1_u8, 0x87_u8, 0x99_u8, 0xc_u8])

  CLSID_CODECAPI_GUID_AVEncSDDS = LibC::GUID.new(0x1dc1b82f_u32, 0x11c8_u16, 0x4c71_u16, StaticArray[0xb7_u8, 0xb6_u8, 0xee_u8, 0x3e_u8, 0xb9_u8, 0xbc_u8, 0x2b_u8, 0x94_u8])

  CLSID_CODECAPI_AVEncCommonRateControlMode = LibC::GUID.new(0x1c0608e9_u32, 0x370c_u16, 0x4710_u16, StaticArray[0x8a_u8, 0x58_u8, 0xcb_u8, 0x61_u8, 0x81_u8, 0xc4_u8, 0x24_u8, 0x23_u8])

  CLSID_CODECAPI_AVEncCommonLowLatency = LibC::GUID.new(0x9d3ecd55_u32, 0x89e8_u16, 0x490a_u16, StaticArray[0x97_u8, 0xa_u8, 0xc_u8, 0x95_u8, 0x48_u8, 0xd5_u8, 0xa5_u8, 0x6e_u8])

  CLSID_CODECAPI_AVEncCommonMultipassMode = LibC::GUID.new(0x22533d4c_u32, 0x47e1_u16, 0x41b5_u16, StaticArray[0x93_u8, 0x52_u8, 0xa2_u8, 0xb7_u8, 0x78_u8, 0xe_u8, 0x7a_u8, 0xc4_u8])

  CLSID_CODECAPI_AVEncCommonPassStart = LibC::GUID.new(0x6a67739f_u32, 0x4eb5_u16, 0x4385_u16, StaticArray[0x99_u8, 0x28_u8, 0xf2_u8, 0x76_u8, 0xa9_u8, 0x39_u8, 0xef_u8, 0x95_u8])

  CLSID_CODECAPI_AVEncCommonPassEnd = LibC::GUID.new(0xe3d01bc_u32, 0xc85c_u16, 0x467d_u16, StaticArray[0x8b_u8, 0x60_u8, 0xc4_u8, 0x10_u8, 0x12_u8, 0xee_u8, 0x3b_u8, 0xf6_u8])

  CLSID_CODECAPI_AVEncCommonRealTime = LibC::GUID.new(0x143a0ff6_u32, 0xa131_u16, 0x43da_u16, StaticArray[0xb8_u8, 0x1e_u8, 0x98_u8, 0xfb_u8, 0xb8_u8, 0xec_u8, 0x37_u8, 0x8e_u8])

  CLSID_CODECAPI_AVEncCommonQuality = LibC::GUID.new(0xfcbf57a3_u32, 0x7ea5_u16, 0x4b0c_u16, StaticArray[0x96_u8, 0x44_u8, 0x69_u8, 0xb4_u8, 0xc_u8, 0x39_u8, 0xc3_u8, 0x91_u8])

  CLSID_CODECAPI_AVEncCommonQualityVsSpeed = LibC::GUID.new(0x98332df8_u32, 0x3cd_u16, 0x476b_u16, StaticArray[0x89_u8, 0xfa_u8, 0x3f_u8, 0x9e_u8, 0x44_u8, 0x2d_u8, 0xec_u8, 0x9f_u8])

  CLSID_CODECAPI_AVEncCommonTranscodeEncodingProfile = LibC::GUID.new(0x6947787c_u32, 0xf508_u16, 0x4ea9_u16, StaticArray[0xb1_u8, 0xe9_u8, 0xa1_u8, 0xfe_u8, 0x3a_u8, 0x49_u8, 0xfb_u8, 0xc9_u8])

  CLSID_CODECAPI_AVEncCommonMeanBitRate = LibC::GUID.new(0xf7222374_u32, 0x2144_u16, 0x4815_u16, StaticArray[0xb5_u8, 0x50_u8, 0xa3_u8, 0x7f_u8, 0x8e_u8, 0x12_u8, 0xee_u8, 0x52_u8])

  CLSID_CODECAPI_AVEncCommonMeanBitRateInterval = LibC::GUID.new(0xbfaa2f0c_u32, 0xcb82_u16, 0x4bc0_u16, StaticArray[0x84_u8, 0x74_u8, 0xf0_u8, 0x6a_u8, 0x8a_u8, 0xd_u8, 0x2_u8, 0x58_u8])

  CLSID_CODECAPI_AVEncCommonMaxBitRate = LibC::GUID.new(0x9651eae4_u32, 0x39b9_u16, 0x4ebf_u16, StaticArray[0x85_u8, 0xef_u8, 0xd7_u8, 0xf4_u8, 0x44_u8, 0xec_u8, 0x74_u8, 0x65_u8])

  CLSID_CODECAPI_AVEncCommonMinBitRate = LibC::GUID.new(0x101405b2_u32, 0x2083_u16, 0x4034_u16, StaticArray[0xa8_u8, 0x6_u8, 0xef_u8, 0xbe_u8, 0xdd_u8, 0xd7_u8, 0xc9_u8, 0xff_u8])

  CLSID_CODECAPI_AVEncCommonBufferSize = LibC::GUID.new(0xdb96574_u32, 0xb6a4_u16, 0x4c8b_u16, StaticArray[0x81_u8, 0x6_u8, 0x37_u8, 0x73_u8, 0xde_u8, 0x3_u8, 0x10_u8, 0xcd_u8])

  CLSID_CODECAPI_AVEncCommonBufferInLevel = LibC::GUID.new(0xd9c5c8db_u32, 0xfc74_u16, 0x4064_u16, StaticArray[0x94_u8, 0xe9_u8, 0xcd_u8, 0x19_u8, 0xf9_u8, 0x47_u8, 0xed_u8, 0x45_u8])

  CLSID_CODECAPI_AVEncCommonBufferOutLevel = LibC::GUID.new(0xccae7f49_u32, 0xd0bc_u16, 0x4e3d_u16, StaticArray[0xa5_u8, 0x7e_u8, 0xfb_u8, 0x57_u8, 0x40_u8, 0x14_u8, 0x0_u8, 0x69_u8])

  CLSID_CODECAPI_AVEncCommonStreamEndHandling = LibC::GUID.new(0x6aad30af_u32, 0x6ba8_u16, 0x4ccc_u16, StaticArray[0x8f_u8, 0xca_u8, 0x18_u8, 0xd1_u8, 0x9b_u8, 0xea_u8, 0xeb_u8, 0x1c_u8])

  CLSID_CODECAPI_AVEncStatCommonCompletedPasses = LibC::GUID.new(0x3e5de533_u32, 0x9df7_u16, 0x438c_u16, StaticArray[0x85_u8, 0x4f_u8, 0x9f_u8, 0x7d_u8, 0xd3_u8, 0x68_u8, 0x3d_u8, 0x34_u8])

  CLSID_CODECAPI_AVEncVideoOutputFrameRate = LibC::GUID.new(0xea85e7c3_u32, 0x9567_u16, 0x4d99_u16, StaticArray[0x87_u8, 0xc4_u8, 0x2_u8, 0xc1_u8, 0xc2_u8, 0x78_u8, 0xca_u8, 0x7c_u8])

  CLSID_CODECAPI_AVEncVideoOutputFrameRateConversion = LibC::GUID.new(0x8c068bf4_u32, 0x369a_u16, 0x4ba3_u16, StaticArray[0x82_u8, 0xfd_u8, 0xb2_u8, 0x51_u8, 0x8f_u8, 0xb3_u8, 0x39_u8, 0x6e_u8])

  CLSID_CODECAPI_AVEncVideoPixelAspectRatio = LibC::GUID.new(0x3cdc718f_u32, 0xb3e9_u16, 0x4eb6_u16, StaticArray[0xa5_u8, 0x7f_u8, 0xcf_u8, 0x1f_u8, 0x1b_u8, 0x32_u8, 0x1b_u8, 0x87_u8])

  CLSID_CODECAPI_AVDecVideoAcceleration_MPEG2 = LibC::GUID.new(0xf7db8a2e_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])

  CLSID_CODECAPI_AVDecVideoAcceleration_H264 = LibC::GUID.new(0xf7db8a2f_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])

  CLSID_CODECAPI_AVDecVideoAcceleration_VC1 = LibC::GUID.new(0xf7db8a30_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])

  CLSID_CODECAPI_AVDecVideoProcDeinterlaceCSC = LibC::GUID.new(0xf7db8a31_u32, 0x4f48_u16, 0x4ee8_u16, StaticArray[0xae_u8, 0x31_u8, 0x8b_u8, 0x6e_u8, 0xbe_u8, 0x55_u8, 0x8a_u8, 0xe2_u8])

  CLSID_CODECAPI_AVDecVideoThumbnailGenerationMode = LibC::GUID.new(0x2efd8eee_u32, 0x1150_u16, 0x4328_u16, StaticArray[0x9c_u8, 0xf5_u8, 0x66_u8, 0xdc_u8, 0xe9_u8, 0x33_u8, 0xfc_u8, 0xf4_u8])

  CLSID_CODECAPI_AVDecVideoMaxCodedWidth = LibC::GUID.new(0x5ae557b8_u32, 0x77af_u16, 0x41f5_u16, StaticArray[0x9f_u8, 0xa6_u8, 0x4d_u8, 0xb2_u8, 0xfe_u8, 0x1d_u8, 0x4b_u8, 0xca_u8])

  CLSID_CODECAPI_AVDecVideoMaxCodedHeight = LibC::GUID.new(0x7262a16a_u32, 0xd2dc_u16, 0x4e75_u16, StaticArray[0x9b_u8, 0xa8_u8, 0x65_u8, 0xc0_u8, 0xc6_u8, 0xd3_u8, 0x2b_u8, 0x13_u8])

  CLSID_CODECAPI_AVDecNumWorkerThreads = LibC::GUID.new(0x9561c3e8_u32, 0xea9e_u16, 0x4435_u16, StaticArray[0x9b_u8, 0x1e_u8, 0xa9_u8, 0x3e_u8, 0x69_u8, 0x18_u8, 0x94_u8, 0xd8_u8])

  CLSID_CODECAPI_AVDecSoftwareDynamicFormatChange = LibC::GUID.new(0x862e2f0a_u32, 0x507b_u16, 0x47ff_u16, StaticArray[0xaf_u8, 0x47_u8, 0x1_u8, 0xe2_u8, 0x62_u8, 0x42_u8, 0x98_u8, 0xb7_u8])

  CLSID_CODECAPI_AVDecDisableVideoPostProcessing = LibC::GUID.new(0xf8749193_u32, 0x667a_u16, 0x4f2c_u16, StaticArray[0xa9_u8, 0xe8_u8, 0x5d_u8, 0x4a_u8, 0xf9_u8, 0x24_u8, 0xf0_u8, 0x8f_u8])

  CLSID_CODECAPI_AVDecVideoDropPicWithMissingRef = LibC::GUID.new(0xf8226383_u32, 0x14c2_u16, 0x4567_u16, StaticArray[0x97_u8, 0x34_u8, 0x50_u8, 0x4_u8, 0xe9_u8, 0x6f_u8, 0xf8_u8, 0x87_u8])

  CLSID_CODECAPI_AVDecVideoSoftwareDeinterlaceMode = LibC::GUID.new(0xc08d1ce_u32, 0x9ced_u16, 0x4540_u16, StaticArray[0xba_u8, 0xe3_u8, 0xce_u8, 0xb3_u8, 0x80_u8, 0x14_u8, 0x11_u8, 0x9_u8])

  CLSID_CODECAPI_AVDecVideoFastDecodeMode = LibC::GUID.new(0x6b529f7d_u32, 0xd3b1_u16, 0x49c6_u16, StaticArray[0xa9_u8, 0x99_u8, 0x9e_u8, 0xc6_u8, 0x91_u8, 0x1b_u8, 0xed_u8, 0xbf_u8])

  CLSID_CODECAPI_AVLowLatencyMode = LibC::GUID.new(0x9c27891a_u32, 0xed7a_u16, 0x40e1_u16, StaticArray[0x88_u8, 0xe8_u8, 0xb2_u8, 0x27_u8, 0x27_u8, 0xa0_u8, 0x24_u8, 0xee_u8])

  CLSID_CODECAPI_AVDecVideoH264ErrorConcealment = LibC::GUID.new(0xececace8_u32, 0x3436_u16, 0x462c_u16, StaticArray[0x92_u8, 0x94_u8, 0xcd_u8, 0x7b_u8, 0xac_u8, 0xd7_u8, 0x58_u8, 0xa9_u8])

  CLSID_CODECAPI_AVDecVideoMPEG2ErrorConcealment = LibC::GUID.new(0x9d2bfe18_u32, 0x728d_u16, 0x48d2_u16, StaticArray[0xb3_u8, 0x58_u8, 0xbc_u8, 0x7e_u8, 0x43_u8, 0x6c_u8, 0x66_u8, 0x74_u8])

  CLSID_CODECAPI_AVDecVideoCodecType = LibC::GUID.new(0x434528e5_u32, 0x21f0_u16, 0x46b6_u16, StaticArray[0xb6_u8, 0x2c_u8, 0x9b_u8, 0x1b_u8, 0x6b_u8, 0x65_u8, 0x8c_u8, 0xd1_u8])

  CLSID_CODECAPI_AVDecVideoDXVAMode = LibC::GUID.new(0xf758f09e_u32, 0x7337_u16, 0x4ae7_u16, StaticArray[0x83_u8, 0x87_u8, 0x73_u8, 0xdc_u8, 0x2d_u8, 0x54_u8, 0xe6_u8, 0x7d_u8])

  CLSID_CODECAPI_AVDecVideoDXVABusEncryption = LibC::GUID.new(0x42153c8b_u32, 0xfd0b_u16, 0x4765_u16, StaticArray[0xa4_u8, 0x62_u8, 0xdd_u8, 0xd9_u8, 0xe8_u8, 0xbc_u8, 0xc3_u8, 0x88_u8])

  CLSID_CODECAPI_AVEncVideoForceSourceScanType = LibC::GUID.new(0x1ef2065f_u32, 0x58a_u16, 0x4765_u16, StaticArray[0xa4_u8, 0xfc_u8, 0x8a_u8, 0x86_u8, 0x4c_u8, 0x10_u8, 0x30_u8, 0x12_u8])

  CLSID_CODECAPI_AVEncVideoNoOfFieldsToEncode = LibC::GUID.new(0x61e4bbe2_u32, 0x4ee0_u16, 0x40e7_u16, StaticArray[0x80_u8, 0xab_u8, 0x51_u8, 0xdd_u8, 0xee_u8, 0xbe_u8, 0x62_u8, 0x91_u8])

  CLSID_CODECAPI_AVEncVideoNoOfFieldsToSkip = LibC::GUID.new(0xa97e1240_u32, 0x1427_u16, 0x4c16_u16, StaticArray[0xa7_u8, 0xf7_u8, 0x3d_u8, 0xcf_u8, 0xd8_u8, 0xba_u8, 0x4c_u8, 0xc5_u8])

  CLSID_CODECAPI_AVEncVideoEncodeDimension = LibC::GUID.new(0x1074df28_u32, 0x7e0f_u16, 0x47a4_u16, StaticArray[0xa4_u8, 0x53_u8, 0xcd_u8, 0xd7_u8, 0x38_u8, 0x70_u8, 0xf5_u8, 0xce_u8])

  CLSID_CODECAPI_AVEncVideoEncodeOffsetOrigin = LibC::GUID.new(0x6bc098fe_u32, 0xa71a_u16, 0x4454_u16, StaticArray[0x85_u8, 0x2e_u8, 0x4d_u8, 0x2d_u8, 0xde_u8, 0xb2_u8, 0xcd_u8, 0x24_u8])

  CLSID_CODECAPI_AVEncVideoDisplayDimension = LibC::GUID.new(0xde053668_u32, 0xf4ec_u16, 0x47a9_u16, StaticArray[0x86_u8, 0xd0_u8, 0x83_u8, 0x67_u8, 0x70_u8, 0xf0_u8, 0xc1_u8, 0xd5_u8])

  CLSID_CODECAPI_AVEncVideoOutputScanType = LibC::GUID.new(0x460b5576_u32, 0x842e_u16, 0x49ab_u16, StaticArray[0xa6_u8, 0x2d_u8, 0xb3_u8, 0x6f_u8, 0x73_u8, 0x12_u8, 0xc9_u8, 0xdb_u8])

  CLSID_CODECAPI_AVEncVideoInverseTelecineEnable = LibC::GUID.new(0x2ea9098b_u32, 0xe76d_u16, 0x4ccd_u16, StaticArray[0xa0_u8, 0x30_u8, 0xd3_u8, 0xb8_u8, 0x89_u8, 0xc1_u8, 0xb6_u8, 0x4c_u8])

  CLSID_CODECAPI_AVEncVideoInverseTelecineThreshold = LibC::GUID.new(0x40247d84_u32, 0xe895_u16, 0x497f_u16, StaticArray[0xb4_u8, 0x4c_u8, 0xb7_u8, 0x45_u8, 0x60_u8, 0xac_u8, 0xfe_u8, 0x27_u8])

  CLSID_CODECAPI_AVEncVideoSourceFilmContent = LibC::GUID.new(0x1791c64b_u32, 0xccfc_u16, 0x4827_u16, StaticArray[0xa0_u8, 0xed_u8, 0x25_u8, 0x57_u8, 0x79_u8, 0x3b_u8, 0x2b_u8, 0x1c_u8])

  CLSID_CODECAPI_AVEncVideoSourceIsBW = LibC::GUID.new(0x42ffc49b_u32, 0x1812_u16, 0x4fdc_u16, StaticArray[0x8d_u8, 0x24_u8, 0x70_u8, 0x54_u8, 0xc5_u8, 0x21_u8, 0xe6_u8, 0xeb_u8])

  CLSID_CODECAPI_AVEncVideoFieldSwap = LibC::GUID.new(0xfefd7569_u32, 0x4e0a_u16, 0x49f2_u16, StaticArray[0x9f_u8, 0x2b_u8, 0x36_u8, 0xe_u8, 0xa4_u8, 0x8c_u8, 0x19_u8, 0xa2_u8])

  CLSID_CODECAPI_AVEncVideoInputChromaResolution = LibC::GUID.new(0xbb0cec33_u32, 0x16f1_u16, 0x47b0_u16, StaticArray[0x8a_u8, 0x88_u8, 0x37_u8, 0x81_u8, 0x5b_u8, 0xee_u8, 0x17_u8, 0x39_u8])

  CLSID_CODECAPI_AVEncVideoOutputChromaResolution = LibC::GUID.new(0x6097b4c9_u32, 0x7c1d_u16, 0x4e64_u16, StaticArray[0xbf_u8, 0xcc_u8, 0x9e_u8, 0x97_u8, 0x65_u8, 0x31_u8, 0x8a_u8, 0xe7_u8])

  CLSID_CODECAPI_AVEncVideoInputChromaSubsampling = LibC::GUID.new(0xa8e73a39_u32, 0x4435_u16, 0x4ec3_u16, StaticArray[0xa6_u8, 0xea_u8, 0x98_u8, 0x30_u8, 0xf_u8, 0x4b_u8, 0x36_u8, 0xf7_u8])

  CLSID_CODECAPI_AVEncVideoOutputChromaSubsampling = LibC::GUID.new(0xfa561c6c_u32, 0x7d17_u16, 0x44f0_u16, StaticArray[0x83_u8, 0xc9_u8, 0x32_u8, 0xed_u8, 0x12_u8, 0xe9_u8, 0x63_u8, 0x43_u8])

  CLSID_CODECAPI_AVEncVideoInputColorPrimaries = LibC::GUID.new(0xc24d783f_u32, 0x7ce6_u16, 0x4278_u16, StaticArray[0x90_u8, 0xab_u8, 0x28_u8, 0xa4_u8, 0xf1_u8, 0xe5_u8, 0xf8_u8, 0x6c_u8])

  CLSID_CODECAPI_AVEncVideoOutputColorPrimaries = LibC::GUID.new(0xbe95907c_u32, 0x9d04_u16, 0x4921_u16, StaticArray[0x89_u8, 0x85_u8, 0xa6_u8, 0xd6_u8, 0xd8_u8, 0x7d_u8, 0x1a_u8, 0x6c_u8])

  CLSID_CODECAPI_AVEncVideoInputColorTransferFunction = LibC::GUID.new(0x8c056111_u32, 0xa9c3_u16, 0x4b08_u16, StaticArray[0xa0_u8, 0xa0_u8, 0xce_u8, 0x13_u8, 0xf8_u8, 0xa2_u8, 0x7c_u8, 0x75_u8])

  CLSID_CODECAPI_AVEncVideoOutputColorTransferFunction = LibC::GUID.new(0x4a7f884a_u32, 0xea11_u16, 0x460d_u16, StaticArray[0xbf_u8, 0x57_u8, 0xb8_u8, 0x8b_u8, 0xc7_u8, 0x59_u8, 0x0_u8, 0xde_u8])

  CLSID_CODECAPI_AVEncVideoInputColorTransferMatrix = LibC::GUID.new(0x52ed68b9_u32, 0x72d5_u16, 0x4089_u16, StaticArray[0x95_u8, 0x8d_u8, 0xf5_u8, 0x40_u8, 0x5d_u8, 0x55_u8, 0x8_u8, 0x1c_u8])

  CLSID_CODECAPI_AVEncVideoOutputColorTransferMatrix = LibC::GUID.new(0xa9b90444_u32, 0xaf40_u16, 0x4310_u16, StaticArray[0x8f_u8, 0xbe_u8, 0xed_u8, 0x6d_u8, 0x93_u8, 0x3f_u8, 0x89_u8, 0x2b_u8])

  CLSID_CODECAPI_AVEncVideoInputColorLighting = LibC::GUID.new(0x46a99549_u32, 0x15_u16, 0x4a45_u16, StaticArray[0x9c_u8, 0x30_u8, 0x1d_u8, 0x5c_u8, 0xfa_u8, 0x25_u8, 0x83_u8, 0x16_u8])

  CLSID_CODECAPI_AVEncVideoOutputColorLighting = LibC::GUID.new(0xe5aaac6_u32, 0xace6_u16, 0x4c5c_u16, StaticArray[0x99_u8, 0x8e_u8, 0x1a_u8, 0x8c_u8, 0x9c_u8, 0x6c_u8, 0xf_u8, 0x89_u8])

  CLSID_CODECAPI_AVEncVideoInputColorNominalRange = LibC::GUID.new(0x16cf25c6_u32, 0xa2a6_u16, 0x48e9_u16, StaticArray[0xae_u8, 0x80_u8, 0x21_u8, 0xae_u8, 0xc4_u8, 0x1d_u8, 0x42_u8, 0x7e_u8])

  CLSID_CODECAPI_AVEncVideoOutputColorNominalRange = LibC::GUID.new(0x972835ed_u32, 0x87b5_u16, 0x4e95_u16, StaticArray[0x95_u8, 0x0_u8, 0xc7_u8, 0x39_u8, 0x58_u8, 0x56_u8, 0x6e_u8, 0x54_u8])

  CLSID_CODECAPI_AVEncInputVideoSystem = LibC::GUID.new(0xbede146d_u32, 0xb616_u16, 0x4dc7_u16, StaticArray[0x92_u8, 0xb2_u8, 0xf5_u8, 0xd9_u8, 0xfa_u8, 0x92_u8, 0x98_u8, 0xf7_u8])

  CLSID_CODECAPI_AVEncVideoHeaderDropFrame = LibC::GUID.new(0x6ed9e124_u32, 0x7925_u16, 0x43fe_u16, StaticArray[0x97_u8, 0x1b_u8, 0xe0_u8, 0x19_u8, 0xf6_u8, 0x22_u8, 0x22_u8, 0xb4_u8])

  CLSID_CODECAPI_AVEncVideoHeaderHours = LibC::GUID.new(0x2acc7702_u32, 0xe2da_u16, 0x4158_u16, StaticArray[0xbf_u8, 0x9b_u8, 0x88_u8, 0x88_u8, 0x1_u8, 0x29_u8, 0xd7_u8, 0x40_u8])

  CLSID_CODECAPI_AVEncVideoHeaderMinutes = LibC::GUID.new(0xdc1a99ce_u32, 0x307_u16, 0x408b_u16, StaticArray[0x88_u8, 0xb_u8, 0xb8_u8, 0x34_u8, 0x8e_u8, 0xe8_u8, 0xca_u8, 0x7f_u8])

  CLSID_CODECAPI_AVEncVideoHeaderSeconds = LibC::GUID.new(0x4a2e1a05_u32, 0xa780_u16, 0x4f58_u16, StaticArray[0x81_u8, 0x20_u8, 0x9a_u8, 0x44_u8, 0x9d_u8, 0x69_u8, 0x65_u8, 0x6b_u8])

  CLSID_CODECAPI_AVEncVideoHeaderFrames = LibC::GUID.new(0xafd5f567_u32, 0x5c1b_u16, 0x4adc_u16, StaticArray[0xbd_u8, 0xaf_u8, 0x73_u8, 0x56_u8, 0x10_u8, 0x38_u8, 0x14_u8, 0x36_u8])

  CLSID_CODECAPI_AVEncVideoDefaultUpperFieldDominant = LibC::GUID.new(0x810167c4_u32, 0xbc1_u16, 0x47ca_u16, StaticArray[0x8f_u8, 0xc2_u8, 0x57_u8, 0x5_u8, 0x5a_u8, 0x14_u8, 0x74_u8, 0xa5_u8])

  CLSID_CODECAPI_AVEncVideoCBRMotionTradeoff = LibC::GUID.new(0xd49451e_u32, 0x18d5_u16, 0x4367_u16, StaticArray[0xa4_u8, 0xef_u8, 0x32_u8, 0x40_u8, 0xdf_u8, 0x16_u8, 0x93_u8, 0xc4_u8])

  CLSID_CODECAPI_AVEncVideoCodedVideoAccessUnitSize = LibC::GUID.new(0xb4b10c15_u32, 0x14a7_u16, 0x4ce8_u16, StaticArray[0xb1_u8, 0x73_u8, 0xdc_u8, 0x90_u8, 0xa0_u8, 0xb4_u8, 0xfc_u8, 0xdb_u8])

  CLSID_CODECAPI_AVEncVideoMaxKeyframeDistance = LibC::GUID.new(0x2987123a_u32, 0xba93_u16, 0x4704_u16, StaticArray[0xb4_u8, 0x89_u8, 0xec_u8, 0x1e_u8, 0x5f_u8, 0x25_u8, 0x29_u8, 0x2c_u8])

  CLSID_CODECAPI_AVEncH264CABACEnable = LibC::GUID.new(0xee6cad62_u32, 0xd305_u16, 0x4248_u16, StaticArray[0xa5_u8, 0xe_u8, 0xe1_u8, 0xb2_u8, 0x55_u8, 0xf7_u8, 0xca_u8, 0xf8_u8])

  CLSID_CODECAPI_AVEncVideoContentType = LibC::GUID.new(0x66117aca_u32, 0xeb77_u16, 0x459d_u16, StaticArray[0x93_u8, 0xc_u8, 0xa4_u8, 0x8d_u8, 0x9d_u8, 0x6_u8, 0x83_u8, 0xfc_u8])

  CLSID_CODECAPI_AVEncNumWorkerThreads = LibC::GUID.new(0xb0c8bf60_u32, 0x16f7_u16, 0x4951_u16, StaticArray[0xa3_u8, 0xb_u8, 0x1d_u8, 0xb1_u8, 0x60_u8, 0x92_u8, 0x93_u8, 0xd6_u8])

  CLSID_CODECAPI_AVEncVideoEncodeQP = LibC::GUID.new(0x2cb5696b_u32, 0x23fb_u16, 0x4ce1_u16, StaticArray[0xa0_u8, 0xf9_u8, 0xef_u8, 0x5b_u8, 0x90_u8, 0xfd_u8, 0x55_u8, 0xca_u8])

  CLSID_CODECAPI_AVEncVideoMinQP = LibC::GUID.new(0xee22c6a_u32, 0xa37c_u16, 0x4568_u16, StaticArray[0xb5_u8, 0xf1_u8, 0x9d_u8, 0x4c_u8, 0x2b_u8, 0x3a_u8, 0xb8_u8, 0x86_u8])

  CLSID_CODECAPI_AVEncVideoForceKeyFrame = LibC::GUID.new(0x398c1b98_u32, 0x8353_u16, 0x475a_u16, StaticArray[0x9e_u8, 0xf2_u8, 0x8f_u8, 0x26_u8, 0x5d_u8, 0x26_u8, 0x3_u8, 0x45_u8])

  CLSID_CODECAPI_AVEncH264SPSID = LibC::GUID.new(0x50f38f51_u32, 0x2b79_u16, 0x40e3_u16, StaticArray[0xb3_u8, 0x9c_u8, 0x7e_u8, 0x9f_u8, 0xa0_u8, 0x77_u8, 0x5_u8, 0x1_u8])

  CLSID_CODECAPI_AVEncH264PPSID = LibC::GUID.new(0xbfe29ec2_u32, 0x56c_u16, 0x4d68_u16, StaticArray[0xa3_u8, 0x8d_u8, 0xae_u8, 0x59_u8, 0x44_u8, 0xc8_u8, 0x58_u8, 0x2e_u8])

  CLSID_CODECAPI_AVEncAdaptiveMode = LibC::GUID.new(0x4419b185_u32, 0xda1f_u16, 0x4f53_u16, StaticArray[0xbc_u8, 0x76_u8, 0x9_u8, 0x7d_u8, 0xc_u8, 0x1e_u8, 0xfb_u8, 0x1e_u8])

  CLSID_CODECAPI_AVScenarioInfo = LibC::GUID.new(0xb28a6e64_u32, 0x3ff9_u16, 0x446a_u16, StaticArray[0x8a_u8, 0x4b_u8, 0xd_u8, 0x7a_u8, 0x53_u8, 0x41_u8, 0x32_u8, 0x36_u8])

  CLSID_CODECAPI_AVEncMPVGOPSizeMin = LibC::GUID.new(0x7155cf20_u32, 0xd440_u16, 0x4852_u16, StaticArray[0xad_u8, 0xf_u8, 0x9c_u8, 0x4a_u8, 0xbf_u8, 0xe3_u8, 0x7a_u8, 0x6a_u8])

  CLSID_CODECAPI_AVEncMPVGOPSizeMax = LibC::GUID.new(0xfe7de4c4_u32, 0x1936_u16, 0x4fe2_u16, StaticArray[0xbd_u8, 0xf7_u8, 0x1f_u8, 0x18_u8, 0xca_u8, 0x1d_u8, 0x0_u8, 0x1f_u8])

  CLSID_CODECAPI_AVEncVideoMaxCTBSize = LibC::GUID.new(0x822363ff_u32, 0xcec8_u16, 0x43e5_u16, StaticArray[0x92_u8, 0xfd_u8, 0xe0_u8, 0x97_u8, 0x48_u8, 0x84_u8, 0x85_u8, 0xe9_u8])

  CLSID_CODECAPI_AVEncVideoCTBSize = LibC::GUID.new(0xd47db8b2_u32, 0xe73b_u16, 0x4cb9_u16, StaticArray[0x8c_u8, 0x3e_u8, 0xbd_u8, 0x87_u8, 0x7d_u8, 0x6_u8, 0xd7_u8, 0x7b_u8])

  CLSID_CODECAPI_VideoEncoderDisplayContentType = LibC::GUID.new(0x79b90b27_u32, 0xf4b1_u16, 0x42dc_u16, StaticArray[0x9d_u8, 0xd7_u8, 0xcd_u8, 0xaf_u8, 0x81_u8, 0x35_u8, 0xc4_u8, 0x0_u8])

  CLSID_CODECAPI_AVEncEnableVideoProcessing = LibC::GUID.new(0x6f4bf6_u32, 0xea3_u16, 0x4d42_u16, StaticArray[0x87_u8, 0x2_u8, 0xb5_u8, 0xd8_u8, 0xbe_u8, 0xf_u8, 0x7a_u8, 0x92_u8])

  CLSID_CODECAPI_AVEncVideoGradualIntraRefresh = LibC::GUID.new(0x8f347dee_u32, 0xcb0d_u16, 0x49ba_u16, StaticArray[0xb4_u8, 0x62_u8, 0xdb_u8, 0x69_u8, 0x27_u8, 0xee_u8, 0x21_u8, 0x1_u8])

  CLSID_CODECAPI_GetOPMContext = LibC::GUID.new(0x2f036c05_u32, 0x4c14_u16, 0x4689_u16, StaticArray[0x88_u8, 0x39_u8, 0x29_u8, 0x4c_u8, 0x6d_u8, 0x73_u8, 0xe0_u8, 0x53_u8])

  CLSID_CODECAPI_SetHDCPManagerContext = LibC::GUID.new(0x6d2d1fc8_u32, 0x3dc9_u16, 0x47eb_u16, StaticArray[0xa1_u8, 0xa2_u8, 0x47_u8, 0x1c_u8, 0x80_u8, 0xcd_u8, 0x60_u8, 0xd0_u8])

  CLSID_CODECAPI_AVEncVideoMaxTemporalLayers = LibC::GUID.new(0x9c668cfe_u32, 0x8e1_u16, 0x424a_u16, StaticArray[0x93_u8, 0x4e_u8, 0xb7_u8, 0x64_u8, 0xb0_u8, 0x64_u8, 0x80_u8, 0x2a_u8])

  CLSID_CODECAPI_AVEncVideoNumGOPsPerIDR = LibC::GUID.new(0x83bc5bdb_u32, 0x5b89_u16, 0x4521_u16, StaticArray[0x8f_u8, 0x66_u8, 0x33_u8, 0x15_u8, 0x1c_u8, 0x37_u8, 0x31_u8, 0x76_u8])

  CLSID_CODECAPI_AVEncCommonAllowFrameDrops = LibC::GUID.new(0xd8477dcb_u32, 0x9598_u16, 0x48e3_u16, StaticArray[0x8d_u8, 0xc_u8, 0x75_u8, 0x2b_u8, 0xf2_u8, 0x6_u8, 0x9_u8, 0x3e_u8])

  CLSID_CODECAPI_AVEncVideoIntraLayerPrediction = LibC::GUID.new(0xd3af46b8_u32, 0xbf47_u16, 0x44bb_u16, StaticArray[0xa2_u8, 0x83_u8, 0x69_u8, 0xf0_u8, 0xb0_u8, 0x22_u8, 0x8f_u8, 0xf9_u8])

  CLSID_CODECAPI_AVEncVideoInstantTemporalUpSwitching = LibC::GUID.new(0xa3308307_u32, 0xd96_u16, 0x4ba4_u16, StaticArray[0xb1_u8, 0xf0_u8, 0xb9_u8, 0x1a_u8, 0x5e_u8, 0x49_u8, 0xdf_u8, 0x10_u8])

  CLSID_CODECAPI_AVEncLowPowerEncoder = LibC::GUID.new(0xb668d582_u32, 0x8bad_u16, 0x4f6a_u16, StaticArray[0x91_u8, 0x41_u8, 0x37_u8, 0x5a_u8, 0x95_u8, 0x35_u8, 0x8b_u8, 0x6d_u8])

  CLSID_CODECAPI_AVEnableInLoopDeblockFilter = LibC::GUID.new(0xd2e8e399_u32, 0x623_u16, 0x4bf3_u16, StaticArray[0x92_u8, 0xa8_u8, 0x4d_u8, 0x18_u8, 0x18_u8, 0x52_u8, 0x9d_u8, 0xed_u8])

  CLSID_CODECAPI_AVEncVideoSelectLayer = LibC::GUID.new(0xeb1084f5_u32, 0x6aaa_u16, 0x4914_u16, StaticArray[0xbb_u8, 0x2f_u8, 0x61_u8, 0x47_u8, 0x22_u8, 0x7f_u8, 0x12_u8, 0xe7_u8])

  CLSID_CODECAPI_AVEncVideoTemporalLayerCount = LibC::GUID.new(0x19caebff_u32, 0xb74d_u16, 0x4cfd_u16, StaticArray[0x8c_u8, 0x27_u8, 0xc2_u8, 0xf9_u8, 0xd9_u8, 0x7d_u8, 0x5f_u8, 0x52_u8])

  CLSID_CODECAPI_AVEncVideoUsage = LibC::GUID.new(0x1f636849_u32, 0x5dc1_u16, 0x49f1_u16, StaticArray[0xb1_u8, 0xd8_u8, 0xce_u8, 0x3c_u8, 0xf6_u8, 0x2e_u8, 0xa3_u8, 0x85_u8])

  CLSID_CODECAPI_AVEncVideoRateControlParams = LibC::GUID.new(0x87d43767_u32, 0x7645_u16, 0x44ec_u16, StaticArray[0xb4_u8, 0x38_u8, 0xd3_u8, 0x32_u8, 0x2f_u8, 0xbc_u8, 0xa2_u8, 0x9f_u8])

  CLSID_CODECAPI_AVEncVideoSupportedControls = LibC::GUID.new(0xd3f40fdd_u32, 0x77b9_u16, 0x473d_u16, StaticArray[0x81_u8, 0x96_u8, 0x6_u8, 0x12_u8, 0x59_u8, 0xe6_u8, 0x9c_u8, 0xff_u8])

  CLSID_CODECAPI_AVEncVideoEncodeFrameTypeQP = LibC::GUID.new(0xaa70b610_u32, 0xe03f_u16, 0x450c_u16, StaticArray[0xad_u8, 0x7_u8, 0x7_u8, 0x31_u8, 0x4e_u8, 0x63_u8, 0x9c_u8, 0xe7_u8])

  CLSID_CODECAPI_AVEncSliceControlMode = LibC::GUID.new(0xe9e782ef_u32, 0x5f18_u16, 0x44c9_u16, StaticArray[0xa9_u8, 0xb_u8, 0xe9_u8, 0xc3_u8, 0xc2_u8, 0xc1_u8, 0x7b_u8, 0xb_u8])

  CLSID_CODECAPI_AVEncSliceControlSize = LibC::GUID.new(0x92f51df3_u32, 0x7a5_u16, 0x4172_u16, StaticArray[0xae_u8, 0xfe_u8, 0xc6_u8, 0x9c_u8, 0xa3_u8, 0xb6_u8, 0xe_u8, 0x35_u8])

  CLSID_CODECAPI_AVEncSliceGenerationMode = LibC::GUID.new(0x8a6bc67f_u32, 0x9497_u16, 0x4286_u16, StaticArray[0xb4_u8, 0x6b_u8, 0x2_u8, 0xdb_u8, 0x8d_u8, 0x60_u8, 0xed_u8, 0xbc_u8])

  CLSID_CODECAPI_AVEncVideoMaxNumRefFrame = LibC::GUID.new(0x964829ed_u32, 0x94f9_u16, 0x43b4_u16, StaticArray[0xb7_u8, 0x4d_u8, 0xef_u8, 0x40_u8, 0x94_u8, 0x4b_u8, 0x69_u8, 0xa0_u8])

  CLSID_CODECAPI_AVEncVideoMeanAbsoluteDifference = LibC::GUID.new(0xe5c0c10f_u32, 0x81a4_u16, 0x422d_u16, StaticArray[0x8c_u8, 0x3f_u8, 0xb4_u8, 0x74_u8, 0xa4_u8, 0x58_u8, 0x13_u8, 0x36_u8])

  CLSID_CODECAPI_AVEncVideoMaxQP = LibC::GUID.new(0x3daf6f66_u32, 0xa6a7_u16, 0x45e0_u16, StaticArray[0xa8_u8, 0xe5_u8, 0xf2_u8, 0x74_u8, 0x3f_u8, 0x46_u8, 0xa3_u8, 0xa2_u8])

  CLSID_CODECAPI_AVEncVideoLTRBufferControl = LibC::GUID.new(0xa4a0e93d_u32, 0x4cbc_u16, 0x444c_u16, StaticArray[0x89_u8, 0xf4_u8, 0x82_u8, 0x6d_u8, 0x31_u8, 0xe_u8, 0x92_u8, 0xa7_u8])

  CLSID_CODECAPI_AVEncVideoMarkLTRFrame = LibC::GUID.new(0xe42f4748_u32, 0xa06d_u16, 0x4ef9_u16, StaticArray[0x8c_u8, 0xea_u8, 0x3d_u8, 0x5_u8, 0xfd_u8, 0xe3_u8, 0xbd_u8, 0x3b_u8])

  CLSID_CODECAPI_AVEncVideoUseLTRFrame = LibC::GUID.new(0x752db8_u32, 0x55f7_u16, 0x4f80_u16, StaticArray[0x89_u8, 0x5b_u8, 0x27_u8, 0x63_u8, 0x91_u8, 0x95_u8, 0xf2_u8, 0xad_u8])

  CLSID_CODECAPI_AVEncVideoROIEnabled = LibC::GUID.new(0xd74f7f18_u32, 0x44dd_u16, 0x4b85_u16, StaticArray[0xab_u8, 0xa3_u8, 0x5_u8, 0xd9_u8, 0xf4_u8, 0x2a_u8, 0x82_u8, 0x80_u8])

  CLSID_CODECAPI_AVEncVideoDirtyRectEnabled = LibC::GUID.new(0x8acb8fdd_u32, 0x5e0c_u16, 0x4c66_u16, StaticArray[0x87_u8, 0x29_u8, 0xb8_u8, 0xf6_u8, 0x29_u8, 0xab_u8, 0x4_u8, 0xfb_u8])

  CLSID_CODECAPI_AVEncMaxFrameRate = LibC::GUID.new(0xb98e1b31_u32, 0x19fa_u16, 0x4d4f_u16, StaticArray[0x99_u8, 0x31_u8, 0xd6_u8, 0xa5_u8, 0xb8_u8, 0xaa_u8, 0xb9_u8, 0x3c_u8])

  CLSID_CODECAPI_AVEncMuxOutputStreamType = LibC::GUID.new(0xcedd9e8f_u32, 0x34d3_u16, 0x44db_u16, StaticArray[0xa1_u8, 0xd8_u8, 0xf8_u8, 0x15_u8, 0x20_u8, 0x25_u8, 0x4f_u8, 0x3e_u8])

  CLSID_CODECAPI_AVEncStatVideoOutputFrameRate = LibC::GUID.new(0xbe747849_u32, 0x9ab4_u16, 0x4a63_u16, StaticArray[0x98_u8, 0xfe_u8, 0xf1_u8, 0x43_u8, 0xf0_u8, 0x4f_u8, 0x8e_u8, 0xe9_u8])

  CLSID_CODECAPI_AVEncStatVideoCodedFrames = LibC::GUID.new(0xd47f8d61_u32, 0x6f5a_u16, 0x4a26_u16, StaticArray[0xbb_u8, 0x9f_u8, 0xcd_u8, 0x95_u8, 0x18_u8, 0x46_u8, 0x2b_u8, 0xcd_u8])

  CLSID_CODECAPI_AVEncStatVideoTotalFrames = LibC::GUID.new(0xfdaa9916_u32, 0x119a_u16, 0x4222_u16, StaticArray[0x9a_u8, 0xd6_u8, 0x3f_u8, 0x7c_u8, 0xab_u8, 0x99_u8, 0xcc_u8, 0x8b_u8])

  CLSID_CODECAPI_AVEncAudioIntervalToEncode = LibC::GUID.new(0x866e4b4d_u32, 0x725a_u16, 0x467c_u16, StaticArray[0xbb_u8, 0x1_u8, 0xb4_u8, 0x96_u8, 0xb2_u8, 0x3b_u8, 0x25_u8, 0xf9_u8])

  CLSID_CODECAPI_AVEncAudioIntervalToSkip = LibC::GUID.new(0x88c15f94_u32, 0xc38c_u16, 0x4796_u16, StaticArray[0xa9_u8, 0xe8_u8, 0x96_u8, 0xe9_u8, 0x67_u8, 0x98_u8, 0x3f_u8, 0x26_u8])

  CLSID_CODECAPI_AVEncAudioDualMono = LibC::GUID.new(0x3648126b_u32, 0xa3e8_u16, 0x4329_u16, StaticArray[0x9b_u8, 0x3a_u8, 0x5c_u8, 0xe5_u8, 0x66_u8, 0xa4_u8, 0x3b_u8, 0xd3_u8])

  CLSID_CODECAPI_AVEncAudioMeanBitRate = LibC::GUID.new(0x921295bb_u32, 0x4fca_u16, 0x4679_u16, StaticArray[0xaa_u8, 0xb8_u8, 0x9e_u8, 0x2a_u8, 0x1d_u8, 0x75_u8, 0x33_u8, 0x84_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel0 = LibC::GUID.new(0xbc5d0b60_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel1 = LibC::GUID.new(0xbc5d0b61_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel2 = LibC::GUID.new(0xbc5d0b62_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel3 = LibC::GUID.new(0xbc5d0b63_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel4 = LibC::GUID.new(0xbc5d0b64_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel5 = LibC::GUID.new(0xbc5d0b65_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel6 = LibC::GUID.new(0xbc5d0b66_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel7 = LibC::GUID.new(0xbc5d0b67_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel8 = LibC::GUID.new(0xbc5d0b68_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel9 = LibC::GUID.new(0xbc5d0b69_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel10 = LibC::GUID.new(0xbc5d0b6a_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel11 = LibC::GUID.new(0xbc5d0b6b_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel12 = LibC::GUID.new(0xbc5d0b6c_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel13 = LibC::GUID.new(0xbc5d0b6d_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel14 = LibC::GUID.new(0xbc5d0b6e_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioMapDestChannel15 = LibC::GUID.new(0xbc5d0b6f_u32, 0xdf6a_u16, 0x4e16_u16, StaticArray[0x98_u8, 0x3_u8, 0xb8_u8, 0x20_u8, 0x7_u8, 0xa3_u8, 0xc_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncAudioInputContent = LibC::GUID.new(0x3e226c2b_u32, 0x60b9_u16, 0x4a39_u16, StaticArray[0xb0_u8, 0xb_u8, 0xa7_u8, 0xb4_u8, 0xf_u8, 0x70_u8, 0xd5_u8, 0x66_u8])

  CLSID_CODECAPI_AVEncStatAudioPeakPCMValue = LibC::GUID.new(0xdce7fd34_u32, 0xdc00_u16, 0x4c16_u16, StaticArray[0x82_u8, 0x1b_u8, 0x35_u8, 0xd9_u8, 0xeb_u8, 0x0_u8, 0xfb_u8, 0x1a_u8])

  CLSID_CODECAPI_AVEncStatAudioAveragePCMValue = LibC::GUID.new(0x979272f8_u32, 0xd17f_u16, 0x4e32_u16, StaticArray[0xbb_u8, 0x73_u8, 0x4e_u8, 0x73_u8, 0x1c_u8, 0x68_u8, 0xba_u8, 0x2d_u8])

  CLSID_CODECAPI_AVEncStatAudioAverageBPS = LibC::GUID.new(0xca6724db_u32, 0x7059_u16, 0x4351_u16, StaticArray[0x8b_u8, 0x43_u8, 0xf8_u8, 0x21_u8, 0x98_u8, 0x82_u8, 0x6a_u8, 0x14_u8])

  CLSID_CODECAPI_AVEncStatAverageBPS = LibC::GUID.new(0xca6724db_u32, 0x7059_u16, 0x4351_u16, StaticArray[0x8b_u8, 0x43_u8, 0xf8_u8, 0x21_u8, 0x98_u8, 0x82_u8, 0x6a_u8, 0x14_u8])

  CLSID_CODECAPI_AVEncStatHardwareProcessorUtilitization = LibC::GUID.new(0x995dc027_u32, 0xcb95_u16, 0x49e6_u16, StaticArray[0xb9_u8, 0x1b_u8, 0x59_u8, 0x67_u8, 0x75_u8, 0x3c_u8, 0xdc_u8, 0xb8_u8])

  CLSID_CODECAPI_AVEncStatHardwareBandwidthUtilitization = LibC::GUID.new(0x124ba9b_u32, 0xdc41_u16, 0x4826_u16, StaticArray[0xb4_u8, 0x5f_u8, 0x18_u8, 0xac_u8, 0x1_u8, 0xb3_u8, 0xd5_u8, 0xa8_u8])

  CLSID_CODECAPI_AVEncMPVGOPSize = LibC::GUID.new(0x95f31b26_u32, 0x95a4_u16, 0x41aa_u16, StaticArray[0x93_u8, 0x3_u8, 0x24_u8, 0x6a_u8, 0x7f_u8, 0xc6_u8, 0xee_u8, 0xf1_u8])

  CLSID_CODECAPI_AVEncMPVGOPOpen = LibC::GUID.new(0xb1d5d4a6_u32, 0x3300_u16, 0x49b1_u16, StaticArray[0xae_u8, 0x61_u8, 0xa0_u8, 0x99_u8, 0x37_u8, 0xab_u8, 0xe_u8, 0x49_u8])

  CLSID_CODECAPI_AVEncMPVDefaultBPictureCount = LibC::GUID.new(0x8d390aac_u32, 0xdc5c_u16, 0x4200_u16, StaticArray[0xb5_u8, 0x7f_u8, 0x81_u8, 0x4d_u8, 0x4_u8, 0xba_u8, 0xba_u8, 0xb2_u8])

  CLSID_CODECAPI_AVEncMPVProfile = LibC::GUID.new(0xdabb534a_u32, 0x1d99_u16, 0x4284_u16, StaticArray[0x97_u8, 0x5a_u8, 0xd9_u8, 0xe_u8, 0x22_u8, 0x39_u8, 0xba_u8, 0xa1_u8])

  CLSID_CODECAPI_AVEncMPVLevel = LibC::GUID.new(0x6ee40c40_u32, 0xa60c_u16, 0x41ef_u16, StaticArray[0x8f_u8, 0x50_u8, 0x37_u8, 0xc2_u8, 0x24_u8, 0x9e_u8, 0x2c_u8, 0xb3_u8])

  CLSID_CODECAPI_AVEncMPVFrameFieldMode = LibC::GUID.new(0xacb5de96_u32, 0x7b93_u16, 0x4c2f_u16, StaticArray[0x88_u8, 0x25_u8, 0xb0_u8, 0x29_u8, 0x5f_u8, 0xa9_u8, 0x3b_u8, 0xf4_u8])

  CLSID_CODECAPI_AVEncMPVAddSeqEndCode = LibC::GUID.new(0xa823178f_u32, 0x57df_u16, 0x4c7a_u16, StaticArray[0xb8_u8, 0xfd_u8, 0xe5_u8, 0xec_u8, 0x88_u8, 0x87_u8, 0x70_u8, 0x8d_u8])

  CLSID_CODECAPI_AVEncMPVGOPSInSeq = LibC::GUID.new(0x993410d4_u32, 0x2691_u16, 0x4192_u16, StaticArray[0x99_u8, 0x78_u8, 0x98_u8, 0xdc_u8, 0x26_u8, 0x3_u8, 0x66_u8, 0x9f_u8])

  CLSID_CODECAPI_AVEncMPVUseConcealmentMotionVectors = LibC::GUID.new(0xec770cf3_u32, 0x6908_u16, 0x4b4b_u16, StaticArray[0xaa_u8, 0x30_u8, 0x7f_u8, 0xb9_u8, 0x86_u8, 0x21_u8, 0x4f_u8, 0xea_u8])

  CLSID_CODECAPI_AVEncMPVSceneDetection = LibC::GUID.new(0x552799f1_u32, 0xdb4c_u16, 0x405b_u16, StaticArray[0x8a_u8, 0x3a_u8, 0xc9_u8, 0x3f_u8, 0x2d_u8, 0x6_u8, 0x74_u8, 0xdc_u8])

  CLSID_CODECAPI_AVEncMPVGenerateHeaderSeqExt = LibC::GUID.new(0xd5e78611_u32, 0x82d_u16, 0x4e6b_u16, StaticArray[0x98_u8, 0xaf_u8, 0xf_u8, 0x51_u8, 0xab_u8, 0x13_u8, 0x92_u8, 0x22_u8])

  CLSID_CODECAPI_AVEncMPVGenerateHeaderSeqDispExt = LibC::GUID.new(0x6437aa6f_u32, 0x5a3c_u16, 0x4de9_u16, StaticArray[0x8a_u8, 0x16_u8, 0x53_u8, 0xd9_u8, 0xc4_u8, 0xad_u8, 0x32_u8, 0x6f_u8])

  CLSID_CODECAPI_AVEncMPVGenerateHeaderPicExt = LibC::GUID.new(0x1b8464ab_u32, 0x944f_u16, 0x45f0_u16, StaticArray[0xb7_u8, 0x4e_u8, 0x3a_u8, 0x58_u8, 0xda_u8, 0xd1_u8, 0x1f_u8, 0x37_u8])

  CLSID_CODECAPI_AVEncMPVGenerateHeaderPicDispExt = LibC::GUID.new(0xc6412f84_u32, 0xc03f_u16, 0x4f40_u16, StaticArray[0xa0_u8, 0xc_u8, 0x42_u8, 0x93_u8, 0xdf_u8, 0x83_u8, 0x95_u8, 0xbb_u8])

  CLSID_CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt = LibC::GUID.new(0x722d62f_u32, 0xdd59_u16, 0x4a86_u16, StaticArray[0x9c_u8, 0xd5_u8, 0x64_u8, 0x4f_u8, 0x8e_u8, 0x26_u8, 0x53_u8, 0xd8_u8])

  CLSID_CODECAPI_AVEncMPVScanPattern = LibC::GUID.new(0x7f8a478e_u32, 0x7bbb_u16, 0x4ae2_u16, StaticArray[0xb2_u8, 0xfc_u8, 0x96_u8, 0xd1_u8, 0x7f_u8, 0xc4_u8, 0xa2_u8, 0xd6_u8])

  CLSID_CODECAPI_AVEncMPVIntraDCPrecision = LibC::GUID.new(0xa0116151_u32, 0xcbc8_u16, 0x4af3_u16, StaticArray[0x97_u8, 0xdc_u8, 0xd0_u8, 0xc_u8, 0xce_u8, 0xb8_u8, 0x2d_u8, 0x79_u8])

  CLSID_CODECAPI_AVEncMPVQScaleType = LibC::GUID.new(0x2b79ebb7_u32, 0xf484_u16, 0x4af7_u16, StaticArray[0xbb_u8, 0x58_u8, 0xa2_u8, 0xa1_u8, 0x88_u8, 0xc5_u8, 0xcb_u8, 0xbe_u8])

  CLSID_CODECAPI_AVEncMPVIntraVLCTable = LibC::GUID.new(0xa2b83ff5_u32, 0x1a99_u16, 0x405a_u16, StaticArray[0xaf_u8, 0x95_u8, 0xc5_u8, 0x99_u8, 0x7d_u8, 0x55_u8, 0x8d_u8, 0x3a_u8])

  CLSID_CODECAPI_AVEncMPVQuantMatrixIntra = LibC::GUID.new(0x9bea04f3_u32, 0x6621_u16, 0x442c_u16, StaticArray[0x8b_u8, 0xa1_u8, 0x3a_u8, 0xc3_u8, 0x78_u8, 0x97_u8, 0x96_u8, 0x98_u8])

  CLSID_CODECAPI_AVEncMPVQuantMatrixNonIntra = LibC::GUID.new(0x87f441d8_u32, 0x997_u16, 0x4beb_u16, StaticArray[0xa0_u8, 0x8e_u8, 0x85_u8, 0x73_u8, 0xd4_u8, 0x9_u8, 0xcf_u8, 0x75_u8])

  CLSID_CODECAPI_AVEncMPVQuantMatrixChromaIntra = LibC::GUID.new(0x9eb9ecd4_u32, 0x18d_u16, 0x4ffd_u16, StaticArray[0x8f_u8, 0x2d_u8, 0x39_u8, 0xe4_u8, 0x9f_u8, 0x7_u8, 0xb1_u8, 0x7a_u8])

  CLSID_CODECAPI_AVEncMPVQuantMatrixChromaNonIntra = LibC::GUID.new(0x1415b6b1_u32, 0x362a_u16, 0x4338_u16, StaticArray[0xba_u8, 0x9a_u8, 0x1e_u8, 0xf5_u8, 0x87_u8, 0x3_u8, 0xc0_u8, 0x5b_u8])

  CLSID_CODECAPI_AVEncMPALayer = LibC::GUID.new(0x9d377230_u32, 0xf91b_u16, 0x453d_u16, StaticArray[0x9c_u8, 0xe0_u8, 0x78_u8, 0x44_u8, 0x54_u8, 0x14_u8, 0xc2_u8, 0x2d_u8])

  CLSID_CODECAPI_AVEncMPACodingMode = LibC::GUID.new(0xb16ade03_u32, 0x4b93_u16, 0x43d7_u16, StaticArray[0xa5_u8, 0x50_u8, 0x90_u8, 0xb4_u8, 0xfe_u8, 0x22_u8, 0x45_u8, 0x37_u8])

  CLSID_CODECAPI_AVEncMPACopyright = LibC::GUID.new(0xa6ae762a_u32, 0xd0a9_u16, 0x4454_u16, StaticArray[0xb8_u8, 0xef_u8, 0xf2_u8, 0xdb_u8, 0xee_u8, 0xfd_u8, 0xd3_u8, 0xbd_u8])

  CLSID_CODECAPI_AVEncMPAOriginalBitstream = LibC::GUID.new(0x3cfb7855_u32, 0x9cc9_u16, 0x47ff_u16, StaticArray[0xb8_u8, 0x29_u8, 0xb3_u8, 0x67_u8, 0x86_u8, 0xc9_u8, 0x23_u8, 0x46_u8])

  CLSID_CODECAPI_AVEncMPAEnableRedundancyProtection = LibC::GUID.new(0x5e54b09e_u32, 0xb2e7_u16, 0x4973_u16, StaticArray[0xa8_u8, 0x9b_u8, 0xb_u8, 0x36_u8, 0x50_u8, 0xa3_u8, 0xbe_u8, 0xda_u8])

  CLSID_CODECAPI_AVEncMPAPrivateUserBit = LibC::GUID.new(0xafa505ce_u32, 0xc1e3_u16, 0x4e3d_u16, StaticArray[0x85_u8, 0x1b_u8, 0x61_u8, 0xb7_u8, 0x0_u8, 0xe5_u8, 0xe6_u8, 0xcc_u8])

  CLSID_CODECAPI_AVEncMPAEmphasisType = LibC::GUID.new(0x2d59fcda_u32, 0xbf4e_u16, 0x4ed6_u16, StaticArray[0xb5_u8, 0xdf_u8, 0x5b_u8, 0x3_u8, 0xb3_u8, 0x6b_u8, 0xa_u8, 0x1f_u8])

  CLSID_CODECAPI_AVEncDDService = LibC::GUID.new(0xd2e1bec7_u32, 0x5172_u16, 0x4d2a_u16, StaticArray[0xa5_u8, 0xe_u8, 0x2f_u8, 0x3b_u8, 0x82_u8, 0xb1_u8, 0xdd_u8, 0xf8_u8])

  CLSID_CODECAPI_AVEncDDDialogNormalization = LibC::GUID.new(0xd7055acf_u32, 0xf125_u16, 0x437d_u16, StaticArray[0xa7_u8, 0x4_u8, 0x79_u8, 0xc7_u8, 0x9f_u8, 0x4_u8, 0x4_u8, 0xa8_u8])

  CLSID_CODECAPI_AVEncDDCentreDownMixLevel = LibC::GUID.new(0xe285072c_u32, 0xc958_u16, 0x4a81_u16, StaticArray[0xaf_u8, 0xd2_u8, 0xe5_u8, 0xe0_u8, 0xda_u8, 0xf1_u8, 0xb1_u8, 0x48_u8])

  CLSID_CODECAPI_AVEncDDSurroundDownMixLevel = LibC::GUID.new(0x7b20d6e5_u32, 0xbcf_u16, 0x4273_u16, StaticArray[0xa4_u8, 0x87_u8, 0x50_u8, 0x6b_u8, 0x4_u8, 0x79_u8, 0x97_u8, 0xe9_u8])

  CLSID_CODECAPI_AVEncDDProductionInfoExists = LibC::GUID.new(0xb0b7fe5f_u32, 0xb6ab_u16, 0x4f40_u16, StaticArray[0x96_u8, 0x4d_u8, 0x8d_u8, 0x91_u8, 0xf1_u8, 0x7c_u8, 0x19_u8, 0xe8_u8])

  CLSID_CODECAPI_AVEncDDProductionRoomType = LibC::GUID.new(0xdad7ad60_u32, 0x23d8_u16, 0x4ab7_u16, StaticArray[0xa2_u8, 0x84_u8, 0x55_u8, 0x69_u8, 0x86_u8, 0xd8_u8, 0xa6_u8, 0xfe_u8])

  CLSID_CODECAPI_AVEncDDProductionMixLevel = LibC::GUID.new(0x301d103a_u32, 0xcbf9_u16, 0x4776_u16, StaticArray[0x88_u8, 0x99_u8, 0x7c_u8, 0x15_u8, 0xb4_u8, 0x61_u8, 0xab_u8, 0x26_u8])

  CLSID_CODECAPI_AVEncDDCopyright = LibC::GUID.new(0x8694f076_u32, 0xcd75_u16, 0x481d_u16, StaticArray[0xa5_u8, 0xc6_u8, 0xa9_u8, 0x4_u8, 0xdc_u8, 0xc8_u8, 0x28_u8, 0xf0_u8])

  CLSID_CODECAPI_AVEncDDOriginalBitstream = LibC::GUID.new(0x966ae800_u32, 0x5bd3_u16, 0x4ff9_u16, StaticArray[0x95_u8, 0xb9_u8, 0xd3_u8, 0x5_u8, 0x66_u8, 0x27_u8, 0x38_u8, 0x56_u8])

  CLSID_CODECAPI_AVEncDDDigitalDeemphasis = LibC::GUID.new(0xe024a2c2_u32, 0x947c_u16, 0x45ac_u16, StaticArray[0x87_u8, 0xd8_u8, 0xf1_u8, 0x3_u8, 0xc_u8, 0x5c_u8, 0x0_u8, 0x82_u8])

  CLSID_CODECAPI_AVEncDDDCHighPassFilter = LibC::GUID.new(0x9565239f_u32, 0x861c_u16, 0x4ac8_u16, StaticArray[0xbf_u8, 0xda_u8, 0xe0_u8, 0xc_u8, 0xb4_u8, 0xdb_u8, 0x85_u8, 0x48_u8])

  CLSID_CODECAPI_AVEncDDChannelBWLowPassFilter = LibC::GUID.new(0xe197821d_u32, 0xd2e7_u16, 0x43e2_u16, StaticArray[0xad_u8, 0x2c_u8, 0x0_u8, 0x58_u8, 0x2f_u8, 0x51_u8, 0x85_u8, 0x45_u8])

  CLSID_CODECAPI_AVEncDDLFELowPassFilter = LibC::GUID.new(0xd3b80f6f_u32, 0x9d15_u16, 0x45e5_u16, StaticArray[0x91_u8, 0xbe_u8, 0x1_u8, 0x9c_u8, 0x3f_u8, 0xab_u8, 0x1f_u8, 0x1_u8])

  CLSID_CODECAPI_AVEncDDSurround90DegreeePhaseShift = LibC::GUID.new(0x25ecec9d_u32, 0x3553_u16, 0x42c0_u16, StaticArray[0xbb_u8, 0x56_u8, 0xd2_u8, 0x57_u8, 0x92_u8, 0x10_u8, 0x4f_u8, 0x80_u8])

  CLSID_CODECAPI_AVEncDDSurround3dBAttenuation = LibC::GUID.new(0x4d43b99d_u32, 0x31e2_u16, 0x48b9_u16, StaticArray[0xbf_u8, 0x2e_u8, 0x5c_u8, 0xbf_u8, 0x1a_u8, 0x57_u8, 0x27_u8, 0x84_u8])

  CLSID_CODECAPI_AVEncDDDynamicRangeCompressionControl = LibC::GUID.new(0xcfc2ff6d_u32, 0x79b8_u16, 0x4b8d_u16, StaticArray[0xa8_u8, 0xaa_u8, 0xa0_u8, 0xc9_u8, 0xbd_u8, 0x1c_u8, 0x29_u8, 0x40_u8])

  CLSID_CODECAPI_AVEncDDRFPreEmphasisFilter = LibC::GUID.new(0x21af44c0_u32, 0x244e_u16, 0x4f3d_u16, StaticArray[0xa2_u8, 0xcc_u8, 0x3d_u8, 0x30_u8, 0x68_u8, 0xb2_u8, 0xe7_u8, 0x3f_u8])

  CLSID_CODECAPI_AVEncDDSurroundExMode = LibC::GUID.new(0x91607cee_u32, 0xdbdd_u16, 0x4eb6_u16, StaticArray[0xbc_u8, 0xa2_u8, 0xaa_u8, 0xdf_u8, 0xaf_u8, 0xa3_u8, 0xdd_u8, 0x68_u8])

  CLSID_CODECAPI_AVEncDDPreferredStereoDownMixMode = LibC::GUID.new(0x7f4e6b31_u32, 0x9185_u16, 0x403d_u16, StaticArray[0xb0_u8, 0xa2_u8, 0x76_u8, 0x37_u8, 0x43_u8, 0xe6_u8, 0xf0_u8, 0x63_u8])

  CLSID_CODECAPI_AVEncDDLtRtCenterMixLvl_x10 = LibC::GUID.new(0xdca128a2_u32, 0x491f_u16, 0x4600_u16, StaticArray[0xb2_u8, 0xda_u8, 0x76_u8, 0xe3_u8, 0x34_u8, 0x4b_u8, 0x41_u8, 0x97_u8])

  CLSID_CODECAPI_AVEncDDLtRtSurroundMixLvl_x10 = LibC::GUID.new(0x212246c7_u32, 0x3d2c_u16, 0x4dfa_u16, StaticArray[0xbc_u8, 0x21_u8, 0x65_u8, 0x2a_u8, 0x90_u8, 0x98_u8, 0x69_u8, 0xd_u8])

  CLSID_CODECAPI_AVEncDDLoRoCenterMixLvl_x10 = LibC::GUID.new(0x1cfba222_u32, 0x25b3_u16, 0x4bf4_u16, StaticArray[0x9b_u8, 0xfd_u8, 0xe7_u8, 0x11_u8, 0x12_u8, 0x67_u8, 0x85_u8, 0x8c_u8])

  CLSID_CODECAPI_AVEncDDLoRoSurroundMixLvl_x10 = LibC::GUID.new(0xe725cff6_u32, 0xeb56_u16, 0x40c7_u16, StaticArray[0x84_u8, 0x50_u8, 0x2b_u8, 0x93_u8, 0x67_u8, 0xe9_u8, 0x15_u8, 0x55_u8])

  CLSID_CODECAPI_AVEncDDAtoDConverterType = LibC::GUID.new(0x719f9612_u32, 0x81a1_u16, 0x47e0_u16, StaticArray[0x9a_u8, 0x5_u8, 0xd9_u8, 0x4a_u8, 0xd5_u8, 0xfc_u8, 0xa9_u8, 0x48_u8])

  CLSID_CODECAPI_AVEncDDHeadphoneMode = LibC::GUID.new(0x4052dbec_u32, 0x52f5_u16, 0x42f5_u16, StaticArray[0x9b_u8, 0x0_u8, 0xd1_u8, 0x34_u8, 0xb1_u8, 0x34_u8, 0x1b_u8, 0x9d_u8])

  CLSID_CODECAPI_AVEncWMVKeyFrameDistance = LibC::GUID.new(0x5569055e_u32, 0xe268_u16, 0x4771_u16, StaticArray[0xb8_u8, 0x3e_u8, 0x95_u8, 0x55_u8, 0xea_u8, 0x28_u8, 0xae_u8, 0xd3_u8])

  CLSID_CODECAPI_AVEncWMVInterlacedEncoding = LibC::GUID.new(0xe3d00f8a_u32, 0xc6f5_u16, 0x4e14_u16, StaticArray[0xa5_u8, 0x88_u8, 0xe_u8, 0xc8_u8, 0x7a_u8, 0x72_u8, 0x6f_u8, 0x9b_u8])

  CLSID_CODECAPI_AVEncWMVDecoderComplexity = LibC::GUID.new(0xf32c0dab_u32, 0xf3cb_u16, 0x4217_u16, StaticArray[0xb7_u8, 0x9f_u8, 0x87_u8, 0x62_u8, 0x76_u8, 0x8b_u8, 0x5f_u8, 0x67_u8])

  CLSID_CODECAPI_AVEncWMVKeyFrameBufferLevelMarker = LibC::GUID.new(0x51ff1115_u32, 0x33ac_u16, 0x426c_u16, StaticArray[0xa1_u8, 0xb1_u8, 0x9_u8, 0x32_u8, 0x1b_u8, 0xdf_u8, 0x96_u8, 0xb4_u8])

  CLSID_CODECAPI_AVEncWMVProduceDummyFrames = LibC::GUID.new(0xd669d001_u32, 0x183c_u16, 0x42e3_u16, StaticArray[0xa3_u8, 0xca_u8, 0x2f_u8, 0x45_u8, 0x86_u8, 0xd2_u8, 0x39_u8, 0x6c_u8])

  CLSID_CODECAPI_AVEncStatWMVCBAvg = LibC::GUID.new(0x6aa6229f_u32, 0xd602_u16, 0x4b9d_u16, StaticArray[0xb6_u8, 0x8c_u8, 0xc1_u8, 0xad_u8, 0x78_u8, 0x88_u8, 0x4b_u8, 0xef_u8])

  CLSID_CODECAPI_AVEncStatWMVCBMax = LibC::GUID.new(0xe976bef8_u32, 0xfe_u16, 0x44b4_u16, StaticArray[0xb6_u8, 0x25_u8, 0x8f_u8, 0x23_u8, 0x8b_u8, 0xc0_u8, 0x34_u8, 0x99_u8])

  CLSID_CODECAPI_AVEncStatWMVDecoderComplexityProfile = LibC::GUID.new(0x89e69fc3_u32, 0xf9b_u16, 0x436c_u16, StaticArray[0x97_u8, 0x4a_u8, 0xdf_u8, 0x82_u8, 0x12_u8, 0x27_u8, 0xc9_u8, 0xd_u8])

  CLSID_CODECAPI_AVEncStatMPVSkippedEmptyFrames = LibC::GUID.new(0x32195fd3_u32, 0x590d_u16, 0x4812_u16, StaticArray[0xa7_u8, 0xed_u8, 0x6d_u8, 0x63_u8, 0x9a_u8, 0x1f_u8, 0x97_u8, 0x11_u8])

  CLSID_CODECAPI_AVEncMP12PktzSTDBuffer = LibC::GUID.new(0xb751bd0_u32, 0x819e_u16, 0x478c_u16, StaticArray[0x94_u8, 0x35_u8, 0x75_u8, 0x20_u8, 0x89_u8, 0x26_u8, 0xb3_u8, 0x77_u8])

  CLSID_CODECAPI_AVEncMP12PktzStreamID = LibC::GUID.new(0xc834d038_u32, 0xf5e8_u16, 0x4408_u16, StaticArray[0x9b_u8, 0x60_u8, 0x88_u8, 0xf3_u8, 0x64_u8, 0x93_u8, 0xfe_u8, 0xdf_u8])

  CLSID_CODECAPI_AVEncMP12PktzInitialPTS = LibC::GUID.new(0x2a4f2065_u32, 0x9a63_u16, 0x4d20_u16, StaticArray[0xae_u8, 0x22_u8, 0xa_u8, 0x1b_u8, 0xc8_u8, 0x96_u8, 0xa3_u8, 0x15_u8])

  CLSID_CODECAPI_AVEncMP12PktzPacketSize = LibC::GUID.new(0xab71347a_u32, 0x1332_u16, 0x4dde_u16, StaticArray[0xa0_u8, 0xe5_u8, 0xcc_u8, 0xf7_u8, 0xda_u8, 0x8a_u8, 0xf_u8, 0x22_u8])

  CLSID_CODECAPI_AVEncMP12PktzCopyright = LibC::GUID.new(0xc8f4b0c1_u32, 0x94c_u16, 0x43c7_u16, StaticArray[0x8e_u8, 0x68_u8, 0xa5_u8, 0x95_u8, 0x40_u8, 0x5a_u8, 0x6e_u8, 0xf8_u8])

  CLSID_CODECAPI_AVEncMP12PktzOriginal = LibC::GUID.new(0x6b178416_u32, 0x31b9_u16, 0x4964_u16, StaticArray[0x94_u8, 0xcb_u8, 0x6b_u8, 0xff_u8, 0x86_u8, 0x6c_u8, 0xdf_u8, 0x83_u8])

  CLSID_CODECAPI_AVEncMP12MuxPacketOverhead = LibC::GUID.new(0xe40bd720_u32, 0x3955_u16, 0x4453_u16, StaticArray[0xac_u8, 0xf9_u8, 0xb7_u8, 0x91_u8, 0x32_u8, 0xa3_u8, 0x8f_u8, 0xa0_u8])

  CLSID_CODECAPI_AVEncMP12MuxNumStreams = LibC::GUID.new(0xf7164a41_u32, 0xdced_u16, 0x4659_u16, StaticArray[0xa8_u8, 0xf2_u8, 0xfb_u8, 0x69_u8, 0x3f_u8, 0x2a_u8, 0x4c_u8, 0xd0_u8])

  CLSID_CODECAPI_AVEncMP12MuxEarliestPTS = LibC::GUID.new(0x157232b6_u32, 0xf809_u16, 0x474e_u16, StaticArray[0x94_u8, 0x64_u8, 0xa7_u8, 0xf9_u8, 0x30_u8, 0x14_u8, 0xa8_u8, 0x17_u8])

  CLSID_CODECAPI_AVEncMP12MuxLargestPacketSize = LibC::GUID.new(0x35ceb711_u32, 0xf461_u16, 0x4b92_u16, StaticArray[0xa4_u8, 0xef_u8, 0x17_u8, 0xb6_u8, 0x84_u8, 0x1e_u8, 0xd2_u8, 0x54_u8])

  CLSID_CODECAPI_AVEncMP12MuxInitialSCR = LibC::GUID.new(0x3433ad21_u32, 0x1b91_u16, 0x4a0b_u16, StaticArray[0xb1_u8, 0x90_u8, 0x2b_u8, 0x77_u8, 0x6_u8, 0x3b_u8, 0x63_u8, 0xa4_u8])

  CLSID_CODECAPI_AVEncMP12MuxMuxRate = LibC::GUID.new(0xee047c72_u32, 0x4bdb_u16, 0x4a9d_u16, StaticArray[0x8e_u8, 0x21_u8, 0x41_u8, 0x92_u8, 0x6c_u8, 0x82_u8, 0x3d_u8, 0xa7_u8])

  CLSID_CODECAPI_AVEncMP12MuxPackSize = LibC::GUID.new(0xf916053a_u32, 0x1ce8_u16, 0x4faf_u16, StaticArray[0xaa_u8, 0xb_u8, 0xba_u8, 0x31_u8, 0xc8_u8, 0x0_u8, 0x34_u8, 0xb8_u8])

  CLSID_CODECAPI_AVEncMP12MuxSysSTDBufferBound = LibC::GUID.new(0x35746903_u32, 0xb545_u16, 0x43e7_u16, StaticArray[0xbb_u8, 0x35_u8, 0xc5_u8, 0xe0_u8, 0xa7_u8, 0xd5_u8, 0x9_u8, 0x3c_u8])

  CLSID_CODECAPI_AVEncMP12MuxSysRateBound = LibC::GUID.new(0x5f0428a_u32, 0xee30_u16, 0x489d_u16, StaticArray[0xae_u8, 0x28_u8, 0x20_u8, 0x5c_u8, 0x72_u8, 0x44_u8, 0x67_u8, 0x10_u8])

  CLSID_CODECAPI_AVEncMP12MuxTargetPacketizer = LibC::GUID.new(0xd862212a_u32, 0x2015_u16, 0x45dd_u16, StaticArray[0x9a_u8, 0x32_u8, 0x1b_u8, 0x3a_u8, 0xa8_u8, 0x82_u8, 0x5_u8, 0xa0_u8])

  CLSID_CODECAPI_AVEncMP12MuxSysFixed = LibC::GUID.new(0xcefb987e_u32, 0x894f_u16, 0x452e_u16, StaticArray[0x8f_u8, 0x89_u8, 0xa4_u8, 0xef_u8, 0x8c_u8, 0xec_u8, 0x6_u8, 0x3a_u8])

  CLSID_CODECAPI_AVEncMP12MuxSysCSPS = LibC::GUID.new(0x7952ff45_u32, 0x9c0d_u16, 0x4822_u16, StaticArray[0xbc_u8, 0x82_u8, 0x8a_u8, 0xd7_u8, 0x72_u8, 0xe0_u8, 0x29_u8, 0x93_u8])

  CLSID_CODECAPI_AVEncMP12MuxSysVideoLock = LibC::GUID.new(0xb8296408_u32, 0x2430_u16, 0x4d37_u16, StaticArray[0xa2_u8, 0xa1_u8, 0x95_u8, 0xb3_u8, 0xe4_u8, 0x35_u8, 0xa9_u8, 0x1d_u8])

  CLSID_CODECAPI_AVEncMP12MuxSysAudioLock = LibC::GUID.new(0xfbb5752_u32, 0x1d43_u16, 0x47bf_u16, StaticArray[0xbd_u8, 0x79_u8, 0xf2_u8, 0x29_u8, 0x3d_u8, 0x8c_u8, 0xe3_u8, 0x37_u8])

  CLSID_CODECAPI_AVEncMP12MuxDVDNavPacks = LibC::GUID.new(0xc7607ced_u32, 0x8cf1_u16, 0x4a99_u16, StaticArray[0x83_u8, 0xa1_u8, 0xee_u8, 0x54_u8, 0x61_u8, 0xbe_u8, 0x35_u8, 0x74_u8])

  CLSID_CODECAPI_AVDecCommonInputFormat = LibC::GUID.new(0xe5005239_u32, 0xbd89_u16, 0x4be3_u16, StaticArray[0x9c_u8, 0xf_u8, 0x5d_u8, 0xde_u8, 0x31_u8, 0x79_u8, 0x88_u8, 0xcc_u8])

  CLSID_CODECAPI_AVDecCommonOutputFormat = LibC::GUID.new(0x3c790028_u32, 0xc0ce_u16, 0x4256_u16, StaticArray[0xb1_u8, 0xa2_u8, 0x1b_u8, 0xf_u8, 0xc8_u8, 0xb1_u8, 0xdc_u8, 0xdc_u8])

  CLSID_CODECAPI_AVDecCommonMeanBitRate = LibC::GUID.new(0x59488217_u32, 0x7a_u16, 0x4f7a_u16, StaticArray[0x8e_u8, 0x41_u8, 0x5c_u8, 0x48_u8, 0xb1_u8, 0xea_u8, 0xc5_u8, 0xc6_u8])

  CLSID_CODECAPI_AVDecCommonMeanBitRateInterval = LibC::GUID.new(0xee437c6_u32, 0x38a7_u16, 0x4c5c_u16, StaticArray[0x94_u8, 0x4c_u8, 0x68_u8, 0xab_u8, 0x42_u8, 0x11_u8, 0x6b_u8, 0x85_u8])

  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded = LibC::GUID.new(0x696e1d30_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])

  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM = LibC::GUID.new(0x696e1d31_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])

  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM = LibC::GUID.new(0x696e1d32_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])

  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream = LibC::GUID.new(0x696e1d33_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])

  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones = LibC::GUID.new(0x696e1d34_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])

  CLSID_CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto = LibC::GUID.new(0x696e1d35_u32, 0x548f_u16, 0x4036_u16, StaticArray[0x82_u8, 0x5f_u8, 0x70_u8, 0x26_u8, 0xc6_u8, 0x0_u8, 0x11_u8, 0xbd_u8])

  CLSID_CODECAPI_AVDecVideoImageSize = LibC::GUID.new(0x5ee5747c_u32, 0x6801_u16, 0x4cab_u16, StaticArray[0xaa_u8, 0xf1_u8, 0x62_u8, 0x48_u8, 0xfa_u8, 0x84_u8, 0x1b_u8, 0xa4_u8])

  CLSID_CODECAPI_AVDecVideoPixelAspectRatio = LibC::GUID.new(0xb0cf8245_u32, 0xf32d_u16, 0x41df_u16, StaticArray[0xb0_u8, 0x2c_u8, 0x87_u8, 0xbd_u8, 0x30_u8, 0x4d_u8, 0x12_u8, 0xab_u8])

  CLSID_CODECAPI_AVDecVideoInputScanType = LibC::GUID.new(0x38477e1f_u32, 0xea7_u16, 0x42cd_u16, StaticArray[0x8c_u8, 0xd1_u8, 0x13_u8, 0xc_u8, 0xed_u8, 0x57_u8, 0xc5_u8, 0x80_u8])

  CLSID_CODECAPI_AVDecVideoSWPowerLevel = LibC::GUID.new(0xfb5d2347_u32, 0x4dd8_u16, 0x4509_u16, StaticArray[0xae_u8, 0xd0_u8, 0xdb_u8, 0x5f_u8, 0xa9_u8, 0xaa_u8, 0x93_u8, 0xf4_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputWMA = LibC::GUID.new(0xc95e8dcf_u32, 0x4058_u16, 0x4204_u16, StaticArray[0x8c_u8, 0x42_u8, 0xcb_u8, 0x24_u8, 0xd9_u8, 0x1e_u8, 0x4b_u8, 0x9b_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputWMAPro = LibC::GUID.new(0x128b7c7_u32, 0xda72_u16, 0x4fe3_u16, StaticArray[0xbe_u8, 0xf8_u8, 0x5c_u8, 0x52_u8, 0xe3_u8, 0x55_u8, 0x77_u8, 0x4_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputDolby = LibC::GUID.new(0x8e4228a0_u32, 0xf000_u16, 0x4e0b_u16, StaticArray[0x8f_u8, 0x54_u8, 0xab_u8, 0x8d_u8, 0x24_u8, 0xad_u8, 0x61_u8, 0xa2_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputDTS = LibC::GUID.new(0x600bc0ca_u32, 0x6a1f_u16, 0x4e91_u16, StaticArray[0xb2_u8, 0x41_u8, 0x1b_u8, 0xbe_u8, 0xb1_u8, 0xcb_u8, 0x19_u8, 0xe0_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputPCM = LibC::GUID.new(0xf2421da5_u32, 0xbbb4_u16, 0x4cd5_u16, StaticArray[0xa9_u8, 0x96_u8, 0x93_u8, 0x3c_u8, 0x6b_u8, 0x5d_u8, 0x13_u8, 0x47_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputMPEG = LibC::GUID.new(0x91106f36_u32, 0x2c5_u16, 0x4f75_u16, StaticArray[0x97_u8, 0x19_u8, 0x3b_u8, 0x7a_u8, 0xbf_u8, 0x75_u8, 0xe1_u8, 0xf6_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputAAC = LibC::GUID.new(0x97df7828_u32, 0xb94a_u16, 0x47e2_u16, StaticArray[0xa4_u8, 0xbc_u8, 0x51_u8, 0x19_u8, 0x4d_u8, 0xb2_u8, 0x2a_u8, 0x4d_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputHEAAC = LibC::GUID.new(0x16efb4aa_u32, 0x330e_u16, 0x4f5c_u16, StaticArray[0x98_u8, 0xa8_u8, 0xcf_u8, 0x6a_u8, 0xc5_u8, 0x5c_u8, 0xbe_u8, 0x60_u8])

  CLSID_CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus = LibC::GUID.new(0x803e185_u32, 0x8f5d_u16, 0x47f5_u16, StaticArray[0x99_u8, 0x8_u8, 0x19_u8, 0xa5_u8, 0xbb_u8, 0xc9_u8, 0xfe_u8, 0x34_u8])

  CLSID_CODECAPI_AVDecAACDownmixMode = LibC::GUID.new(0x1274475_u32, 0xf6bb_u16, 0x4017_u16, StaticArray[0xb0_u8, 0x84_u8, 0x81_u8, 0xa7_u8, 0x63_u8, 0xc9_u8, 0x42_u8, 0xd4_u8])

  CLSID_CODECAPI_AVDecHEAACDynamicRangeControl = LibC::GUID.new(0x287c8abe_u32, 0x69a4_u16, 0x4d39_u16, StaticArray[0x80_u8, 0x80_u8, 0xd3_u8, 0xd9_u8, 0x71_u8, 0x21_u8, 0x78_u8, 0xa0_u8])

  CLSID_CODECAPI_AVDecAudioDualMono = LibC::GUID.new(0x4a52cda8_u32, 0x30f8_u16, 0x4216_u16, StaticArray[0xbe_u8, 0xf_u8, 0xba_u8, 0xb_u8, 0x20_u8, 0x25_u8, 0x92_u8, 0x1d_u8])

  CLSID_CODECAPI_AVDecAudioDualMonoReproMode = LibC::GUID.new(0xa5106186_u32, 0xcc94_u16, 0x4bc9_u16, StaticArray[0x8c_u8, 0xd9_u8, 0xaa_u8, 0x2f_u8, 0x61_u8, 0xf6_u8, 0x80_u8, 0x7e_u8])

  CLSID_CODECAPI_AVAudioChannelCount = LibC::GUID.new(0x1d3583c4_u32, 0x1583_u16, 0x474e_u16, StaticArray[0xb7_u8, 0x1a_u8, 0x5e_u8, 0xe4_u8, 0x63_u8, 0xc1_u8, 0x98_u8, 0xe4_u8])

  CLSID_CODECAPI_AVAudioChannelConfig = LibC::GUID.new(0x17f89cb3_u32, 0xc38d_u16, 0x4368_u16, StaticArray[0x9e_u8, 0xde_u8, 0x63_u8, 0xb9_u8, 0x4d_u8, 0x17_u8, 0x7f_u8, 0x9f_u8])

  CLSID_CODECAPI_AVAudioSampleRate = LibC::GUID.new(0x971d2723_u32, 0x1acb_u16, 0x42e7_u16, StaticArray[0x85_u8, 0x5c_u8, 0x52_u8, 0xa_u8, 0x4b_u8, 0x70_u8, 0xa5_u8, 0xf2_u8])

  CLSID_CODECAPI_AVDDSurroundMode = LibC::GUID.new(0x99f2f386_u32, 0x98d1_u16, 0x4452_u16, StaticArray[0xa1_u8, 0x63_u8, 0xab_u8, 0xc7_u8, 0x8a_u8, 0x6e_u8, 0xb7_u8, 0x70_u8])

  CLSID_CODECAPI_AVDecDDOperationalMode = LibC::GUID.new(0xd6d6c6d1_u32, 0x64e_u16, 0x4fdd_u16, StaticArray[0xa4_u8, 0xe_u8, 0x3e_u8, 0xcb_u8, 0xfc_u8, 0xb7_u8, 0xeb_u8, 0xd0_u8])

  CLSID_CODECAPI_AVDecDDMatrixDecodingMode = LibC::GUID.new(0xddc811a5_u32, 0x4ed_u16, 0x4bf3_u16, StaticArray[0xa0_u8, 0xca_u8, 0xd0_u8, 0x4_u8, 0x49_u8, 0xf9_u8, 0x35_u8, 0x5f_u8])

  CLSID_CODECAPI_AVDecDDDynamicRangeScaleHigh = LibC::GUID.new(0x50196c21_u32, 0x1f33_u16, 0x4af5_u16, StaticArray[0xb2_u8, 0x96_u8, 0x11_u8, 0x42_u8, 0x6d_u8, 0x6c_u8, 0x87_u8, 0x89_u8])

  CLSID_CODECAPI_AVDecDDDynamicRangeScaleLow = LibC::GUID.new(0x44e62e4_u32, 0x11a5_u16, 0x42d5_u16, StaticArray[0xa3_u8, 0xb2_u8, 0x3b_u8, 0xb2_u8, 0xc7_u8, 0xc2_u8, 0xd7_u8, 0xcf_u8])

  CLSID_CODECAPI_AVDecDDStereoDownMixMode = LibC::GUID.new(0x6ce4122c_u32, 0x3ee9_u16, 0x4182_u16, StaticArray[0xb4_u8, 0xae_u8, 0xc1_u8, 0xf_u8, 0xc0_u8, 0x88_u8, 0x64_u8, 0x9d_u8])

  CLSID_CODECAPI_AVDSPLoudnessEqualization = LibC::GUID.new(0x8afd1a15_u32, 0x1812_u16, 0x4cbf_u16, StaticArray[0x93_u8, 0x19_u8, 0x43_u8, 0x3a_u8, 0x5b_u8, 0x2a_u8, 0x3b_u8, 0x27_u8])

  CLSID_CODECAPI_AVDSPSpeakerFill = LibC::GUID.new(0x5612bca1_u32, 0x56da_u16, 0x4582_u16, StaticArray[0x8d_u8, 0xa1_u8, 0xca_u8, 0x80_u8, 0x90_u8, 0xf9_u8, 0x27_u8, 0x68_u8])

  CLSID_CODECAPI_AVPriorityControl = LibC::GUID.new(0x54ba3dc8_u32, 0xbdde_u16, 0x4329_u16, StaticArray[0xb1_u8, 0x87_u8, 0x20_u8, 0x18_u8, 0xbc_u8, 0x5c_u8, 0x2b_u8, 0xa1_u8])

  CLSID_CODECAPI_AVRealtimeControl = LibC::GUID.new(0x6f440632_u32, 0xc4ad_u16, 0x4bf7_u16, StaticArray[0x9e_u8, 0x52_u8, 0x45_u8, 0x69_u8, 0x42_u8, 0xb4_u8, 0x54_u8, 0xb0_u8])

  CLSID_CODECAPI_AVEncNoInputCopy = LibC::GUID.new(0xd2b46a2a_u32, 0xe8ee_u16, 0x4ec5_u16, StaticArray[0x86_u8, 0x9e_u8, 0x44_u8, 0x9b_u8, 0x6c_u8, 0x62_u8, 0xc8_u8, 0x1a_u8])

  CLSID_CODECAPI_AVEncChromaEncodeMode = LibC::GUID.new(0x8a47ab5a_u32, 0x4798_u16, 0x4c93_u16, StaticArray[0xb5_u8, 0xa5_u8, 0x55_u8, 0x4f_u8, 0x9a_u8, 0x3b_u8, 0x9f_u8, 0x50_u8])

  CLSID_CODECAPI_AVEncProgressiveUpdateTime = LibC::GUID.new(0x649faf66_u32, 0xafc6_u16, 0x4828_u16, StaticArray[0x8f_u8, 0xdc_u8, 0x7_u8, 0x71_u8, 0xcd_u8, 0x9a_u8, 0xb1_u8, 0x7d_u8])

  CLSID_CODECAPI_AVEncChromaUpdateTime = LibC::GUID.new(0x4b4fd998_u32, 0x4274_u16, 0x40bb_u16, StaticArray[0x8e_u8, 0xe4_u8, 0x7_u8, 0x55_u8, 0x3e_u8, 0x7e_u8, 0x2d_u8, 0x3a_u8])

  CLSID_KSPROPSETID_OPMVideoOutput = LibC::GUID.new(0x6f414bb_u32, 0xf43a_u16, 0x4fe2_u16, StaticArray[0xa5_u8, 0x66_u8, 0x77_u8, 0x4b_u8, 0x4c_u8, 0x81_u8, 0xf0_u8, 0xdb_u8])

  enum MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS : UInt32
    MF_EVENT_FLAG_NONE = 0_u32
    MF_EVENT_FLAG_NO_WAIT = 1_u32
  end
  @[Flags]
  enum MPEG2VIDEOINFO_FLAGS : UInt32
    AMMPEG2_DoPanScan = 1_u32
    AMMPEG2_DVDLine21Field1 = 2_u32
    AMMPEG2_DVDLine21Field2 = 4_u32
    AMMPEG2_SourceIsLetterboxed = 8_u32
    AMMPEG2_FilmCameraMode = 16_u32
    AMMPEG2_LetterboxAnalogOut = 32_u32
    AMMPEG2_DSS_UserData = 64_u32
    AMMPEG2_DVB_UserData = 128_u32
    AMMPEG2_27MhzTimebase = 256_u32
    AMMPEG2_WidescreenAnalogOut = 512_u32
  end
  enum MF_Plugin_Type
    MF_Plugin_Type_MFT = 0_i32
    MF_Plugin_Type_MediaSource = 1_i32
    MF_Plugin_Type_MFT_MatchOutputType = 2_i32
    MF_Plugin_Type_Other = -1_i32
  end
  enum D3D12_VIDEO_FIELD_TYPE
    D3D12_VIDEO_FIELD_TYPE_NONE = 0_i32
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1_i32
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2_i32
  end
  enum D3D12_VIDEO_FRAME_STEREO_FORMAT
    D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0_i32
    D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1_i32
    D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2_i32
    D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3_i32
    D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4_i32
  end
  enum D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE
    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0_i32
    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1_i32
  end
  enum D3D12_FEATURE_VIDEO
    D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0_i32
    D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1_i32
    D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2_i32
    D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3_i32
    D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5_i32
    D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6_i32
    D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7_i32
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8_i32
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9_i32
    D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10_i32
    D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11_i32
    D3D12_FEATURE_VIDEO_ARCHITECTURE = 17_i32
    D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18_i32
    D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19_i32
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20_i32
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21_i32
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22_i32
    D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23_i32
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24_i32
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25_i32
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26_i32
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27_i32
    D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28_i32
    D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29_i32
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30_i32
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31_i32
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32_i32
  end
  enum D3D12_BITSTREAM_ENCRYPTION_TYPE
    D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0_i32
  end
  enum D3D12_VIDEO_PROCESS_FILTER
    D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0_i32
    D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1_i32
    D3D12_VIDEO_PROCESS_FILTER_HUE = 2_i32
    D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3_i32
    D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4_i32
    D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5_i32
    D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6_i32
    D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7_i32
  end
  @[Flags]
  enum D3D12_VIDEO_PROCESS_FILTER_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = 1_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = 2_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = 4_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = 8_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = 16_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = 32_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = 64_u32
    D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = 128_u32
  end
  @[Flags]
  enum D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0_u32
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 1_u32
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = 2147483648_u32
  end
  enum D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0_i32
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1_i32
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2_i32
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3_i32
  end
  enum D3D12_VIDEO_DECODE_TIER
    D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0_i32
    D3D12_VIDEO_DECODE_TIER_1 = 1_i32
    D3D12_VIDEO_DECODE_TIER_2 = 2_i32
    D3D12_VIDEO_DECODE_TIER_3 = 3_i32
  end
  @[Flags]
  enum D3D12_VIDEO_DECODE_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0_u32
    D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 1_u32
  end
  @[Flags]
  enum D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS : UInt32
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0_u32
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 1_u32
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 2_u32
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 4_u32
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 8_u32
  end
  enum D3D12_VIDEO_DECODE_STATUS
    D3D12_VIDEO_DECODE_STATUS_OK = 0_i32
    D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1_i32
    D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2_i32
    D3D12_VIDEO_DECODE_STATUS_RESTART = 3_i32
    D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4_i32
  end
  enum D3D12_VIDEO_DECODE_ARGUMENT_TYPE
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0_i32
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1_i32
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2_i32
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3_i32
  end
  enum D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0_i32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1_i32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2_i32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0_i32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1_i32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2_i32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3_i32
  end
  @[Flags]
  enum D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS : UInt32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0_u32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = 1_u32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = 2_u32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = 4_u32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = 1_u32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = 2_u32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = 4_u32
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = 8_u32
  end
  @[Flags]
  enum D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0_u32
    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 1_u32
  end
  @[Flags]
  enum D3D12_VIDEO_SCALE_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0_u32
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 1_u32
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 2_u32
  end
  @[Flags]
  enum D3D12_VIDEO_PROCESS_FEATURE_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0_u32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 1_u32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 2_u32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 4_u32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 8_u32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 16_u32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 32_u32
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 64_u32
  end
  @[Flags]
  enum D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 1_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 2_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 4_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 8_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 16_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 32_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 64_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 128_u32
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = 2147483648_u32
  end
  enum D3D12_VIDEO_PROCESS_ORIENTATION
    D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0_i32
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1_i32
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2_i32
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3_i32
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4_i32
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5_i32
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6_i32
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7_i32
  end
  @[Flags]
  enum D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0_u32
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 1_u32
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 2_u32
  end
  @[Flags]
  enum D3D12_VIDEO_PROCESS_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0_u32
    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 1_u32
  end
  enum D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0_i32
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1_i32
  end
  @[Flags]
  enum D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS : UInt32
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0_u32
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = 1_u32
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = 2_u32
  end
  enum D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0_i32
  end
  @[Flags]
  enum D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS : UInt32
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0_u32
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = 1_u32
  end
  @[Flags]
  enum D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0_u32
    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 1_u32
  end
  enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6_i32
  end
  enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9_i32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10_i32
  end
  @[Flags]
  enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS : UInt32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0_u32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 1_u32
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 2_u32
  end
  enum D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0_i32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP = 1_i32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR = 2_i32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR = 3_i32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR = 4_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP = 1_u32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = 2_u32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE = 4_u32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP = 8_u32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = 16_u32
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES = 32_u32
  end
  enum D3D12_VIDEO_ENCODER_CODEC
    D3D12_VIDEO_ENCODER_CODEC_H264 = 0_i32
    D3D12_VIDEO_ENCODER_CODEC_HEVC = 1_i32
  end
  enum D3D12_VIDEO_ENCODER_PROFILE_H264
    D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN = 0_i32
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH = 1_i32
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2_i32
  end
  enum D3D12_VIDEO_ENCODER_PROFILE_HEVC
    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN = 0_i32
    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1_i32
  end
  enum D3D12_VIDEO_ENCODER_LEVELS_H264
    D3D12_VIDEO_ENCODER_LEVELS_H264_1 = 0_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_2 = 5_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_3 = 8_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_4 = 11_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_5 = 14_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_6 = 17_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18_i32
    D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19_i32
  end
  enum D3D12_VIDEO_ENCODER_TIER_HEVC
    D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0_i32
    D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1_i32
  end
  enum D3D12_VIDEO_ENCODER_LEVELS_HEVC
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 = 0_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 = 1_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 = 3_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 = 5_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 = 7_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 = 10_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11_i32
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12_i32
  end
  enum D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE
    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE = 0_i32
    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1_i32
  end
  enum D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME = 0_i32
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION = 1_i32
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED = 2_i32
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION = 3_i32
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_HEAP_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = 0_u32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT = 1_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 4_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT = 8_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT = 16_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT = 32_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 64_u32
  end
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 1_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 2_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING = 3_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES = 4_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 5_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 1_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 2_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 4_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING = 8_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES = 16_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 32_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 64_u32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 1_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 4_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT = 8_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT = 16_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED = 32_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT = 64_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = 128_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES = 256_u32
  end
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 = 0_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3_i32
  end
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 = 0_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 = 1_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_SUPPORT_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK = 1_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE = 2_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE = 4_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE = 8_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE = 16_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS = 32_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE = 64_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE = 128_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE = 256_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE = 512_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE = 1024_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE = 2048_u32
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = 4096_u32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 1_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM = 2_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING = 4_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 8_u32
  end
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1_i32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL = 2_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES = 1_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 2_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER = 4_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES = 8_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION = 16_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING = 32_u32
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 64_u32
  end
  enum D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM = 0_i32
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL = 1_i32
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL = 2_i32
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_VALIDATION_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED = 1_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED = 8_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED = 16_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED = 32_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = 64_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED = 128_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED = 256_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST = 512_u32
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED = 2048_u32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_FLAG_NONE = 0_u32
  end
  enum D3D12_VIDEO_ENCODER_FRAME_TYPE_H264
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME = 0_i32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME = 1_i32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME = 2_i32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1_u32
  end
  enum D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME = 0_i32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME = 1_i32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME = 2_i32
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3_i32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1_u32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = 1_u32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE = 0_u32
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE = 1_u32
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE = 2_u32
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = 4_u32
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH = 8_u32
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE = 16_u32
  end
  @[Flags]
  enum D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS : UInt32
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR = 0_u32
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED = 1_u32
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = 2_u32
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES = 4_u32
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED = 8_u32
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE = 16_u32
  end
  enum WMT_PROP_DATATYPE
    WMT_PROP_TYPE_DWORD = 0_i32
    WMT_PROP_TYPE_STRING = 1_i32
    WMT_PROP_TYPE_BINARY = 2_i32
    WMT_PROP_TYPE_BOOL = 3_i32
    WMT_PROP_TYPE_QWORD = 4_i32
    WMT_PROP_TYPE_WORD = 5_i32
    WMT_PROP_TYPE_GUID = 6_i32
  end
  enum WMV_DYNAMIC_FLAGS
    WMV_DYNAMIC_BITRATE = 1_i32
    WMV_DYNAMIC_RESOLUTION = 2_i32
    WMV_DYNAMIC_COMPLEXITY = 4_i32
  end
  enum MF_AUVRHP_ROOMMODEL
    VRHP_SMALLROOM = 0_i32
    VRHP_MEDIUMROOM = 1_i32
    VRHP_BIGROOM = 2_i32
    VRHP_CUSTUMIZEDROOM = 3_i32
  end
  enum AEC_SYSTEM_MODE
    SINGLE_CHANNEL_AEC = 0_i32
    ADAPTIVE_ARRAY_ONLY = 1_i32
    OPTIBEAM_ARRAY_ONLY = 2_i32
    ADAPTIVE_ARRAY_AND_AEC = 3_i32
    OPTIBEAM_ARRAY_AND_AEC = 4_i32
    SINGLE_CHANNEL_NSAGC = 5_i32
    MODE_NOT_SET = 6_i32
  end
  enum AEC_VAD_MODE
    AEC_VAD_DISABLED = 0_i32
    AEC_VAD_NORMAL = 1_i32
    AEC_VAD_FOR_AGC = 2_i32
    AEC_VAD_FOR_SILENCE_SUPPRESSION = 3_i32
  end
  enum AEC_INPUT_STREAM
    AEC_CAPTURE_STREAM = 0_i32
    AEC_REFERENCE_STREAM = 1_i32
  end
  enum MIC_ARRAY_MODE
    MICARRAY_SINGLE_CHAN = 0_i32
    MICARRAY_SIMPLE_SUM = 256_i32
    MICARRAY_SINGLE_BEAM = 512_i32
    MICARRAY_FIXED_BEAM = 1024_i32
    MICARRAY_EXTERN_BEAM = 2048_i32
  end
  enum MFVideoDSPMode
    MFVideoDSPMode_Passthrough = 1_i32
    MFVideoDSPMode_Stabilization = 4_i32
  end
  enum TOC_POS_TYPE
    TOC_POS_INHEADER = 0_i32
    TOC_POS_TOPLEVELOBJECT = 1_i32
  end
  enum FILE_OPENMODE
    OPENMODE_FAIL_IF_NOT_EXIST = 0_i32
    OPENMODE_FAIL_IF_EXIST = 1_i32
    OPENMODE_RESET_IF_EXIST = 2_i32
    OPENMODE_APPEND_IF_EXIST = 3_i32
    OPENMODE_DELETE_IF_EXIST = 4_i32
  end
  enum SEEK_ORIGIN
    Msobegin_ = 0_i32
    Msocurrent_ = 1_i32
  end
  enum FILE_ACCESSMODE
    ACCESSMODE_READ = 1_i32
    ACCESSMODE_WRITE = 2_i32
    ACCESSMODE_READWRITE = 3_i32
    ACCESSMODE_WRITE_EXCLUSIVE = 4_i32
  end
  enum DXVA_SampleFormat
    DXVA_SampleFormatMask = 255_i32
    DXVA_SampleUnknown = 0_i32
    DXVA_SamplePreviousFrame = 1_i32
    DXVA_SampleProgressiveFrame = 2_i32
    DXVA_SampleFieldInterleavedEvenFirst = 3_i32
    DXVA_SampleFieldInterleavedOddFirst = 4_i32
    DXVA_SampleFieldSingleEven = 5_i32
    DXVA_SampleFieldSingleOdd = 6_i32
    DXVA_SampleSubStream = 7_i32
  end
  enum DXVA_VideoTransferFunction
    DXVA_VideoTransFuncShift = 27_i32
    DXVA_VideoTransFuncMask = -134217728_i32
    DXVA_VideoTransFunc_Unknown = 0_i32
    DXVA_VideoTransFunc_10 = 1_i32
    DXVA_VideoTransFunc_18 = 2_i32
    DXVA_VideoTransFunc_20 = 3_i32
    DXVA_VideoTransFunc_22 = 4_i32
    DXVA_VideoTransFunc_22_709 = 5_i32
    DXVA_VideoTransFunc_22_240M = 6_i32
    DXVA_VideoTransFunc_22_8bit_sRGB = 7_i32
    DXVA_VideoTransFunc_28 = 8_i32
  end
  enum DXVA_VideoPrimaries
    DXVA_VideoPrimariesShift = 22_i32
    DXVA_VideoPrimariesMask = 130023424_i32
    DXVA_VideoPrimaries_Unknown = 0_i32
    DXVA_VideoPrimaries_reserved = 1_i32
    DXVA_VideoPrimaries_BT709 = 2_i32
    DXVA_VideoPrimaries_BT470_2_SysM = 3_i32
    DXVA_VideoPrimaries_BT470_2_SysBG = 4_i32
    DXVA_VideoPrimaries_SMPTE170M = 5_i32
    DXVA_VideoPrimaries_SMPTE240M = 6_i32
    DXVA_VideoPrimaries_EBU3213 = 7_i32
    DXVA_VideoPrimaries_SMPTE_C = 8_i32
  end
  enum DXVA_VideoLighting
    DXVA_VideoLightingShift = 18_i32
    DXVA_VideoLightingMask = 3932160_i32
    DXVA_VideoLighting_Unknown = 0_i32
    DXVA_VideoLighting_bright = 1_i32
    DXVA_VideoLighting_office = 2_i32
    DXVA_VideoLighting_dim = 3_i32
    DXVA_VideoLighting_dark = 4_i32
  end
  enum DXVA_VideoTransferMatrix
    DXVA_VideoTransferMatrixShift = 15_i32
    DXVA_VideoTransferMatrixMask = 229376_i32
    DXVA_VideoTransferMatrix_Unknown = 0_i32
    DXVA_VideoTransferMatrix_BT709 = 1_i32
    DXVA_VideoTransferMatrix_BT601 = 2_i32
    DXVA_VideoTransferMatrix_SMPTE240M = 3_i32
  end
  enum DXVA_NominalRange
    DXVA_NominalRangeShift = 12_i32
    DXVA_NominalRangeMask = 28672_i32
    DXVA_NominalRange_Unknown = 0_i32
    DXVA_NominalRange_Normal = 1_i32
    DXVA_NominalRange_Wide = 2_i32
    DXVA_NominalRange_0_255 = 1_i32
    DXVA_NominalRange_16_235 = 2_i32
    DXVA_NominalRange_48_208 = 3_i32
  end
  enum DXVA_VideoChromaSubsampling
    DXVA_VideoChromaSubsamplingShift = 8_i32
    DXVA_VideoChromaSubsamplingMask = 3840_i32
    DXVA_VideoChromaSubsampling_Unknown = 0_i32
    DXVA_VideoChromaSubsampling_ProgressiveChroma = 8_i32
    DXVA_VideoChromaSubsampling_Horizontally_Cosited = 4_i32
    DXVA_VideoChromaSubsampling_Vertically_Cosited = 2_i32
    DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1_i32
    DXVA_VideoChromaSubsampling_MPEG2 = 5_i32
    DXVA_VideoChromaSubsampling_MPEG1 = 1_i32
    DXVA_VideoChromaSubsampling_DV_PAL = 6_i32
    DXVA_VideoChromaSubsampling_Cosited = 7_i32
  end
  enum DXVA_VideoProcessCaps
    DXVA_VideoProcess_None = 0_i32
    DXVA_VideoProcess_YUV2RGB = 1_i32
    DXVA_VideoProcess_StretchX = 2_i32
    DXVA_VideoProcess_StretchY = 4_i32
    DXVA_VideoProcess_AlphaBlend = 8_i32
    DXVA_VideoProcess_SubRects = 16_i32
    DXVA_VideoProcess_SubStreams = 32_i32
    DXVA_VideoProcess_SubStreamsExtended = 64_i32
    DXVA_VideoProcess_YUV2RGBExtended = 128_i32
    DXVA_VideoProcess_AlphaBlendExtended = 256_i32
  end
  enum DXVA_DeinterlaceTech
    DXVA_DeinterlaceTech_Unknown = 0_i32
    DXVA_DeinterlaceTech_BOBLineReplicate = 1_i32
    DXVA_DeinterlaceTech_BOBVerticalStretch = 2_i32
    DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = 256_i32
    DXVA_DeinterlaceTech_MedianFiltering = 4_i32
    DXVA_DeinterlaceTech_EdgeFiltering = 16_i32
    DXVA_DeinterlaceTech_FieldAdaptive = 32_i32
    DXVA_DeinterlaceTech_PixelAdaptive = 64_i32
    DXVA_DeinterlaceTech_MotionVectorSteered = 128_i32
  end
  enum DXVA_SampleFlags
    DXVA_SampleFlagsMask = 15_i32
    DXVA_SampleFlag_Palette_Changed = 1_i32
    DXVA_SampleFlag_SrcRect_Changed = 2_i32
    DXVA_SampleFlag_DstRect_Changed = 4_i32
    DXVA_SampleFlag_ColorData_Changed = 8_i32
  end
  enum DXVA_DestinationFlags
    DXVA_DestinationFlagMask = 15_i32
    DXVA_DestinationFlag_Background_Changed = 1_i32
    DXVA_DestinationFlag_TargetRect_Changed = 2_i32
    DXVA_DestinationFlag_ColorData_Changed = 4_i32
    DXVA_DestinationFlag_Alpha_Changed = 8_i32
  end
  enum DXVA_ProcAmpControlProp
    DXVA_ProcAmp_None = 0_i32
    DXVA_ProcAmp_Brightness = 1_i32
    DXVA_ProcAmp_Contrast = 2_i32
    DXVA_ProcAmp_Hue = 4_i32
    DXVA_ProcAmp_Saturation = 8_i32
  end
  enum Eavenccommonratecontrolmode
    Eavenccommonratecontrolmode_cbr = 0_i32
    Eavenccommonratecontrolmode_peakconstrainedvbr = 1_i32
    Eavenccommonratecontrolmode_unconstrainedvbr = 2_i32
    Eavenccommonratecontrolmode_quality = 3_i32
    Eavenccommonratecontrolmode_lowdelayvbr = 4_i32
    Eavenccommonratecontrolmode_globalvbr = 5_i32
    Eavenccommonratecontrolmode_globallowdelayvbr = 6_i32
  end
  enum Eavenccommonstreamendhandling
    Eavenccommonstreamendhandling_discardpartial = 0_i32
    Eavenccommonstreamendhandling_ensurecomplete = 1_i32
  end
  enum Eavencvideooutputframerateconversion
    Eavencvideooutputframerateconversion_disable = 0_i32
    Eavencvideooutputframerateconversion_enable = 1_i32
    Eavencvideooutputframerateconversion_alias = 2_i32
  end
  enum Eavdecvideosoftwaredeinterlacemode
    Eavdecvideosoftwaredeinterlacemode_nodeinterlacing = 0_i32
    Eavdecvideosoftwaredeinterlacemode_progressivedeinterlacing = 1_i32
    Eavdecvideosoftwaredeinterlacemode_bobdeinterlacing = 2_i32
    Eavdecvideosoftwaredeinterlacemode_smartbobdeinterlacing = 3_i32
  end
  enum Eavfastdecodemode
    Evideodecodecompliant = 0_i32
    Evideodecodeoptimallf = 1_i32
    Evideodecodedisablelf = 2_i32
    Evideodecodefastest = 32_i32
  end
  enum Eavdecvideoh264errorconcealment
    Eerrorconcealmenttypedrop = 0_i32
    Eerrorconcealmenttypebasic = 1_i32
    Eerrorconcealmenttypeadvanced = 2_i32
    Eerrorconcealmenttypedxvasetblack = 3_i32
  end
  enum Eavdecvideompeg2errorconcealment
    Eerrorconcealmentoff = 0_i32
    Eerrorconcealmenton = 1_i32
  end
  enum Eavdecvideocodectype
    Eavdecvideocodectype_notplaying = 0_i32
    Eavdecvideocodectype_mpeg2 = 1_i32
    Eavdecvideocodectype_h264 = 2_i32
  end
  enum Eavdecvideodxvamode
    Eavdecvideodxvamode_notplaying = 0_i32
    Eavdecvideodxvamode_sw = 1_i32
    Eavdecvideodxvamode_mc = 2_i32
    Eavdecvideodxvamode_idct = 3_i32
    Eavdecvideodxvamode_vld = 4_i32
  end
  enum Eavdecvideodxvabusencryption
    Eavdecvideodxvabusencryption_none = 0_i32
    Eavdecvideodxvabusencryption_private = 1_i32
    Eavdecvideodxvabusencryption_aes = 2_i32
  end
  enum Eavencvideosourcescantype
    Eavencvideosourcescan_automatic = 0_i32
    Eavencvideosourcescan_interlaced = 1_i32
    Eavencvideosourcescan_progressive = 2_i32
  end
  enum Eavencvideooutputscantype
    Eavencvideooutputscan_progressive = 0_i32
    Eavencvideooutputscan_interlaced = 1_i32
    Eavencvideooutputscan_sameasinput = 2_i32
    Eavencvideooutputscan_automatic = 3_i32
  end
  enum Eavencvideofilmcontent
    Eavencvideofilmcontent_videoonly = 0_i32
    Eavencvideofilmcontent_filmonly = 1_i32
    Eavencvideofilmcontent_mixed = 2_i32
  end
  enum Eavencvideochromaresolution
    Eavencvideochromaresolution_sameassource = 0_i32
    Eavencvideochromaresolution_444 = 1_i32
    Eavencvideochromaresolution_422 = 2_i32
    Eavencvideochromaresolution_420 = 3_i32
    Eavencvideochromaresolution_411 = 4_i32
  end
  enum Eavencvideochromasubsampling
    Eavencvideochromasubsamplingformat_sameassource = 0_i32
    Eavencvideochromasubsamplingformat_progressivechroma = 8_i32
    Eavencvideochromasubsamplingformat_horizontally_cosited = 4_i32
    Eavencvideochromasubsamplingformat_vertically_cosited = 2_i32
    Eavencvideochromasubsamplingformat_vertically_alignedchromaplanes = 1_i32
  end
  enum Eavencvideocolorprimaries
    Eavencvideocolorprimaries_sameassource = 0_i32
    Eavencvideocolorprimaries_reserved = 1_i32
    Eavencvideocolorprimaries_bt709 = 2_i32
    Eavencvideocolorprimaries_bt470_2_sysm = 3_i32
    Eavencvideocolorprimaries_bt470_2_sysbg = 4_i32
    Eavencvideocolorprimaries_smpte170m = 5_i32
    Eavencvideocolorprimaries_smpte240m = 6_i32
    Eavencvideocolorprimaries_ebu3231 = 7_i32
    Eavencvideocolorprimaries_smpte_c = 8_i32
  end
  enum Eavencvideocolortransferfunction
    Eavencvideocolortransferfunction_sameassource = 0_i32
    Eavencvideocolortransferfunction_10 = 1_i32
    Eavencvideocolortransferfunction_18 = 2_i32
    Eavencvideocolortransferfunction_20 = 3_i32
    Eavencvideocolortransferfunction_22 = 4_i32
    Eavencvideocolortransferfunction_22_709 = 5_i32
    Eavencvideocolortransferfunction_22_240m = 6_i32
    Eavencvideocolortransferfunction_22_8bit_srgb = 7_i32
    Eavencvideocolortransferfunction_28 = 8_i32
  end
  enum Eavencvideocolortransfermatrix
    Eavencvideocolortransfermatrix_sameassource = 0_i32
    Eavencvideocolortransfermatrix_bt709 = 1_i32
    Eavencvideocolortransfermatrix_bt601 = 2_i32
    Eavencvideocolortransfermatrix_smpte240m = 3_i32
  end
  enum Eavencvideocolorlighting
    Eavencvideocolorlighting_sameassource = 0_i32
    Eavencvideocolorlighting_unknown = 1_i32
    Eavencvideocolorlighting_bright = 2_i32
    Eavencvideocolorlighting_office = 3_i32
    Eavencvideocolorlighting_dim = 4_i32
    Eavencvideocolorlighting_dark = 5_i32
  end
  enum Eavencvideocolornominalrange
    Eavencvideocolornominalrange_sameassource = 0_i32
    Eavencvideocolornominalrange_0_255 = 1_i32
    Eavencvideocolornominalrange_16_235 = 2_i32
    Eavencvideocolornominalrange_48_208 = 3_i32
  end
  enum Eavencinputvideosystem
    Eavencinputvideosystem_unspecified = 0_i32
    Eavencinputvideosystem_pal = 1_i32
    Eavencinputvideosystem_ntsc = 2_i32
    Eavencinputvideosystem_secam = 3_i32
    Eavencinputvideosystem_mac = 4_i32
    Eavencinputvideosystem_hdv = 5_i32
    Eavencinputvideosystem_component = 6_i32
  end
  enum Eavencvideocontenttype
    Eavencvideocontenttype_unknown = 0_i32
    Eavencvideocontenttype_fixedcameraangle = 1_i32
  end
  enum Eavencadaptivemode
    Eavencadaptivemode_none = 0_i32
    Eavencadaptivemode_resolution = 1_i32
    Eavencadaptivemode_framerate = 2_i32
  end
  enum Eavscenarioinfo
    Eavscenarioinfo_unknown = 0_i32
    Eavscenarioinfo_displayremoting = 1_i32
    Eavscenarioinfo_videoconference = 2_i32
    Eavscenarioinfo_archive = 3_i32
    Eavscenarioinfo_livestreaming = 4_i32
    Eavscenarioinfo_camerarecord = 5_i32
    Eavscenarioinfo_displayremotingwithfeaturemap = 6_i32
  end
  enum Evideoencoderdisplaycontenttype
    Evideoencoderdisplaycontent_unknown = 0_i32
    Evideoencoderdisplaycontent_fullscreenvideo = 1_i32
  end
  enum Eavencmuxoutput
    Eavencmuxoutputauto = 0_i32
    Eavencmuxoutputps = 1_i32
    Eavencmuxoutputts = 2_i32
  end
  enum Eavencaudiodualmono
    Eavencaudiodualmono_sameasinput = 0_i32
    Eavencaudiodualmono_off = 1_i32
    Eavencaudiodualmono_on = 2_i32
  end
  enum Eavencaudioinputcontent
    AVEncAudioInputContent_Unknown = 0_i32
    AVEncAudioInputContent_Voice = 1_i32
    AVEncAudioInputContent_Music = 2_i32
  end
  enum Eavencmpvprofile
    Eavencmpvprofile_unknown = 0_i32
    Eavencmpvprofile_simple = 1_i32
    Eavencmpvprofile_main = 2_i32
    Eavencmpvprofile_high = 3_i32
    Eavencmpvprofile_422 = 4_i32
  end
  enum Eavencmpvlevel
    Eavencmpvlevel_low = 1_i32
    Eavencmpvlevel_main = 2_i32
    Eavencmpvlevel_high1440 = 3_i32
    Eavencmpvlevel_high = 4_i32
  end
  enum Eavench263vprofile
    Eavench263vprofile_base = 0_i32
    Eavench263vprofile_compatibilityv2 = 1_i32
    Eavench263vprofile_compatibilityv1 = 2_i32
    Eavench263vprofile_wirelessv2 = 3_i32
    Eavench263vprofile_wirelessv3 = 4_i32
    Eavench263vprofile_highcompression = 5_i32
    Eavench263vprofile_internet = 6_i32
    Eavench263vprofile_interlace = 7_i32
    Eavench263vprofile_highlatency = 8_i32
  end
  enum Eavench264vprofile
    Eavench264vprofile_unknown = 0_i32
    Eavench264vprofile_simple = 66_i32
    Eavench264vprofile_base = 66_i32
    Eavench264vprofile_main = 77_i32
    Eavench264vprofile_high = 100_i32
    Eavench264vprofile_422 = 122_i32
    Eavench264vprofile_high10 = 110_i32
    Eavench264vprofile_444 = 244_i32
    Eavench264vprofile_extended = 88_i32
    Eavench264vprofile_scalablebase = 83_i32
    Eavench264vprofile_scalablehigh = 86_i32
    Eavench264vprofile_multiviewhigh = 118_i32
    Eavench264vprofile_stereohigh = 128_i32
    Eavench264vprofile_constrainedbase = 256_i32
    Eavench264vprofile_ucconstrainedhigh = 257_i32
    Eavench264vprofile_ucscalableconstrainedbase = 258_i32
    Eavench264vprofile_ucscalableconstrainedhigh = 259_i32
  end
  enum Eavench265vprofile
    Eavench265vprofile_unknown = 0_i32
    Eavench265vprofile_main_420_8 = 1_i32
    Eavench265vprofile_main_420_10 = 2_i32
    Eavench265vprofile_main_420_12 = 3_i32
    Eavench265vprofile_main_422_10 = 4_i32
    Eavench265vprofile_main_422_12 = 5_i32
    Eavench265vprofile_main_444_8 = 6_i32
    Eavench265vprofile_main_444_10 = 7_i32
    Eavench265vprofile_main_444_12 = 8_i32
    Eavench265vprofile_monochrome_12 = 9_i32
    Eavench265vprofile_monochrome_16 = 10_i32
    Eavench265vprofile_mainintra_420_8 = 11_i32
    Eavench265vprofile_mainintra_420_10 = 12_i32
    Eavench265vprofile_mainintra_420_12 = 13_i32
    Eavench265vprofile_mainintra_422_10 = 14_i32
    Eavench265vprofile_mainintra_422_12 = 15_i32
    Eavench265vprofile_mainintra_444_8 = 16_i32
    Eavench265vprofile_mainintra_444_10 = 17_i32
    Eavench265vprofile_mainintra_444_12 = 18_i32
    Eavench265vprofile_mainintra_444_16 = 19_i32
    Eavench265vprofile_mainstill_420_8 = 20_i32
    Eavench265vprofile_mainstill_444_8 = 21_i32
    Eavench265vprofile_mainstill_444_16 = 22_i32
  end
  enum Eavencvp9vprofile
    Eavencvp9vprofile_unknown = 0_i32
    Eavencvp9vprofile_420_8 = 1_i32
    Eavencvp9vprofile_420_10 = 2_i32
    Eavencvp9vprofile_420_12 = 3_i32
  end
  enum Eavench263picturetype
    Eavench263picturetype_i = 0_i32
    Eavench263picturetype_p = 1_i32
    Eavench263picturetype_b = 2_i32
  end
  enum Eavench264picturetype
    Eavench264picturetype_idr = 0_i32
    Eavench264picturetype_p = 1_i32
    Eavench264picturetype_b = 2_i32
  end
  enum Eavench263vlevel
    Eavench263vlevel1 = 10_i32
    Eavench263vlevel2 = 20_i32
    Eavench263vlevel3 = 30_i32
    Eavench263vlevel4 = 40_i32
    Eavench263vlevel4_5 = 45_i32
    Eavench263vlevel5 = 50_i32
    Eavench263vlevel6 = 60_i32
    Eavench263vlevel7 = 70_i32
  end
  enum Eavench264vlevel
    Eavench264vlevel1 = 10_i32
    Eavench264vlevel1_b = 11_i32
    Eavench264vlevel1_1 = 11_i32
    Eavench264vlevel1_2 = 12_i32
    Eavench264vlevel1_3 = 13_i32
    Eavench264vlevel2 = 20_i32
    Eavench264vlevel2_1 = 21_i32
    Eavench264vlevel2_2 = 22_i32
    Eavench264vlevel3 = 30_i32
    Eavench264vlevel3_1 = 31_i32
    Eavench264vlevel3_2 = 32_i32
    Eavench264vlevel4 = 40_i32
    Eavench264vlevel4_1 = 41_i32
    Eavench264vlevel4_2 = 42_i32
    Eavench264vlevel5 = 50_i32
    Eavench264vlevel5_1 = 51_i32
    Eavench264vlevel5_2 = 52_i32
  end
  enum Eavench265vlevel
    Eavench265vlevel1 = 30_i32
    Eavench265vlevel2 = 60_i32
    Eavench265vlevel2_1 = 63_i32
    Eavench265vlevel3 = 90_i32
    Eavench265vlevel3_1 = 93_i32
    Eavench265vlevel4 = 120_i32
    Eavench265vlevel4_1 = 123_i32
    Eavench265vlevel5 = 150_i32
    Eavench265vlevel5_1 = 153_i32
    Eavench265vlevel5_2 = 156_i32
    Eavench265vlevel6 = 180_i32
    Eavench265vlevel6_1 = 183_i32
    Eavench265vlevel6_2 = 186_i32
  end
  enum Eavencmpvframefieldmode
    Eavencmpvframefieldmode_fieldmode = 0_i32
    Eavencmpvframefieldmode_framemode = 1_i32
  end
  enum Eavencmpvscenedetection
    Eavencmpvscenedetection_none = 0_i32
    Eavencmpvscenedetection_insertipicture = 1_i32
    Eavencmpvscenedetection_startnewgop = 2_i32
    Eavencmpvscenedetection_startnewlocatablegop = 3_i32
  end
  enum Eavencmpvscanpattern
    Eavencmpvscanpattern_auto = 0_i32
    Eavencmpvscanpattern_zigzagscan = 1_i32
    Eavencmpvscanpattern_alternatescan = 2_i32
  end
  enum Eavencmpvqscaletype
    Eavencmpvqscaletype_auto = 0_i32
    Eavencmpvqscaletype_linear = 1_i32
    Eavencmpvqscaletype_nonlinear = 2_i32
  end
  enum Eavencmpvintravlctable
    Eavencmpvintravlctable_auto = 0_i32
    Eavencmpvintravlctable_mpeg1 = 1_i32
    Eavencmpvintravlctable_alternate = 2_i32
  end
  enum Eavencmpalayer
    Eavencmpalayer_1 = 1_i32
    Eavencmpalayer_2 = 2_i32
    Eavencmpalayer_3 = 3_i32
  end
  enum Eavencmpacodingmode
    Eavencmpacodingmode_mono = 0_i32
    Eavencmpacodingmode_stereo = 1_i32
    Eavencmpacodingmode_dualchannel = 2_i32
    Eavencmpacodingmode_jointstereo = 3_i32
    Eavencmpacodingmode_surround = 4_i32
  end
  enum Eavencmpaemphasistype
    Eavencmpaemphasistype_none = 0_i32
    Eavencmpaemphasistype_50_15 = 1_i32
    Eavencmpaemphasistype_reserved = 2_i32
    Eavencmpaemphasistype_ccitt_j17 = 3_i32
  end
  enum Eavencddservice
    Eavencddservice_cm = 0_i32
    Eavencddservice_me = 1_i32
    Eavencddservice_vi = 2_i32
    Eavencddservice_hi = 3_i32
    Eavencddservice_d = 4_i32
    Eavencddservice_c = 5_i32
    Eavencddservice_e = 6_i32
    Eavencddservice_vo = 7_i32
  end
  enum Eavencddproductionroomtype
    Eavencddproductionroomtype_notindicated = 0_i32
    Eavencddproductionroomtype_large = 1_i32
    Eavencddproductionroomtype_small = 2_i32
  end
  enum Eavencdddynamicrangecompressioncontrol
    Eavencdddynamicrangecompressioncontrol_none = 0_i32
    Eavencdddynamicrangecompressioncontrol_filmstandard = 1_i32
    Eavencdddynamicrangecompressioncontrol_filmlight = 2_i32
    Eavencdddynamicrangecompressioncontrol_musicstandard = 3_i32
    Eavencdddynamicrangecompressioncontrol_musiclight = 4_i32
    Eavencdddynamicrangecompressioncontrol_speech = 5_i32
  end
  enum Eavencddsurroundexmode
    Eavencddsurroundexmode_notindicated = 0_i32
    Eavencddsurroundexmode_no = 1_i32
    Eavencddsurroundexmode_yes = 2_i32
  end
  enum Eavencddpreferredstereodownmixmode
    Eavencddpreferredstereodownmixmode_ltrt = 0_i32
    Eavencddpreferredstereodownmixmode_loro = 1_i32
  end
  enum Eavencddatodconvertertype
    Eavencddatodconvertertype_standard = 0_i32
    Eavencddatodconvertertype_hdcd = 1_i32
  end
  enum Eavencddheadphonemode
    Eavencddheadphonemode_notindicated = 0_i32
    Eavencddheadphonemode_notencoded = 1_i32
    Eavencddheadphonemode_encoded = 2_i32
  end
  enum Eavdecvideoinputscantype
    Eavdecvideoinputscan_unknown = 0_i32
    Eavdecvideoinputscan_progressive = 1_i32
    Eavdecvideoinputscan_interlaced_upperfieldfirst = 2_i32
    Eavdecvideoinputscan_interlaced_lowerfieldfirst = 3_i32
  end
  enum Eavdecvideoswpowerlevel
    Eavdecvideoswpowerlevel_batterylife = 0_i32
    Eavdecvideoswpowerlevel_balanced = 50_i32
    Eavdecvideoswpowerlevel_videoquality = 100_i32
  end
  enum Eavdecaacdownmixmode
    Eavdecaacuseisodownmix = 0_i32
    Eavdecaacusearibdownmix = 1_i32
  end
  enum Eavdecheaacdynamicrangecontrol
    Eavdecheaacdynamicrangecontrol_off = 0_i32
    Eavdecheaacdynamicrangecontrol_on = 1_i32
  end
  enum Eavdecaudiodualmono
    Eavdecaudiodualmono_isnotdualmono = 0_i32
    Eavdecaudiodualmono_isdualmono = 1_i32
    Eavdecaudiodualmono_unspecified = 2_i32
  end
  enum Eavdecaudiodualmonorepromode
    Eavdecaudiodualmonorepromode_stereo = 0_i32
    Eavdecaudiodualmonorepromode_left_mono = 1_i32
    Eavdecaudiodualmonorepromode_right_mono = 2_i32
    Eavdecaudiodualmonorepromode_mix_mono = 3_i32
  end
  enum Eavaudiochannelconfig
    Eavaudiochannelconfig_front_left = 1_i32
    Eavaudiochannelconfig_front_right = 2_i32
    Eavaudiochannelconfig_front_center = 4_i32
    Eavaudiochannelconfig_low_frequency = 8_i32
    Eavaudiochannelconfig_back_left = 16_i32
    Eavaudiochannelconfig_back_right = 32_i32
    Eavaudiochannelconfig_front_left_of_center = 64_i32
    Eavaudiochannelconfig_front_right_of_center = 128_i32
    Eavaudiochannelconfig_back_center = 256_i32
    Eavaudiochannelconfig_side_left = 512_i32
    Eavaudiochannelconfig_side_right = 1024_i32
    Eavaudiochannelconfig_top_center = 2048_i32
    Eavaudiochannelconfig_top_front_left = 4096_i32
    Eavaudiochannelconfig_top_front_center = 8192_i32
    Eavaudiochannelconfig_top_front_right = 16384_i32
    Eavaudiochannelconfig_top_back_left = 32768_i32
    Eavaudiochannelconfig_top_back_center = 65536_i32
    Eavaudiochannelconfig_top_back_right = 131072_i32
  end
  enum Eavddsurroundmode
    Eavddsurroundmode_notindicated = 0_i32
    Eavddsurroundmode_no = 1_i32
    Eavddsurroundmode_yes = 2_i32
  end
  enum Eavdecddoperationalmode
    Eavdecddoperationalmode_none = 0_i32
    Eavdecddoperationalmode_line = 1_i32
    Eavdecddoperationalmode_rf = 2_i32
    Eavdecddoperationalmode_custom0 = 3_i32
    Eavdecddoperationalmode_custom1 = 4_i32
    Eavdecddoperationalmode_portable8 = 5_i32
    Eavdecddoperationalmode_portable11 = 6_i32
    Eavdecddoperationalmode_portable14 = 7_i32
  end
  enum Eavdecddmatrixdecodingmode
    Eavdecddmatrixdecodingmode_off = 0_i32
    Eavdecddmatrixdecodingmode_on = 1_i32
    Eavdecddmatrixdecodingmode_auto = 2_i32
  end
  enum Eavdecddstereodownmixmode
    Eavdecddstereodownmixmode_auto = 0_i32
    Eavdecddstereodownmixmode_ltrt = 1_i32
    Eavdecddstereodownmixmode_loro = 2_i32
  end
  enum Eavdsploudnessequalization
    Eavdsploudnessequalization_off = 0_i32
    Eavdsploudnessequalization_on = 1_i32
    Eavdsploudnessequalization_auto = 2_i32
  end
  enum Eavdspspeakerfill
    Eavdspspeakerfill_off = 0_i32
    Eavdspspeakerfill_on = 1_i32
    Eavdspspeakerfill_auto = 2_i32
  end
  enum Eavencchromaencodemode
    Eavencchromaencodemode_420 = 0_i32
    Eavencchromaencodemode_444 = 1_i32
    Eavencchromaencodemode_444_v2 = 2_i32
  end
  enum DXVAHD_FRAME_FORMAT
    DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0_i32
    DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1_i32
    DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2_i32
  end
  enum DXVAHD_DEVICE_USAGE
    DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0_i32
    DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1_i32
    DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2_i32
  end
  enum DXVAHD_SURFACE_TYPE
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0_i32
    DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1_i32
    DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2_i32
  end
  enum DXVAHD_DEVICE_TYPE
    DXVAHD_DEVICE_TYPE_HARDWARE = 0_i32
    DXVAHD_DEVICE_TYPE_SOFTWARE = 1_i32
    DXVAHD_DEVICE_TYPE_REFERENCE = 2_i32
    DXVAHD_DEVICE_TYPE_OTHER = 3_i32
  end
  enum DXVAHD_DEVICE_CAPS
    DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1_i32
    DXVAHD_DEVICE_CAPS_xvYCC = 2_i32
    DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4_i32
    DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8_i32
  end
  enum DXVAHD_FEATURE_CAPS
    DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1_i32
    DXVAHD_FEATURE_CAPS_CONSTRICTION = 2_i32
    DXVAHD_FEATURE_CAPS_LUMA_KEY = 4_i32
    DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8_i32
  end
  enum DXVAHD_FILTER_CAPS
    DXVAHD_FILTER_CAPS_BRIGHTNESS = 1_i32
    DXVAHD_FILTER_CAPS_CONTRAST = 2_i32
    DXVAHD_FILTER_CAPS_HUE = 4_i32
    DXVAHD_FILTER_CAPS_SATURATION = 8_i32
    DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 16_i32
    DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 32_i32
    DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 64_i32
  end
  enum DXVAHD_INPUT_FORMAT_CAPS
    DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 1_i32
    DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 2_i32
    DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 4_i32
    DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 8_i32
  end
  enum DXVAHD_PROCESSOR_CAPS
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1_i32
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 2_i32
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4_i32
    DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8_i32
    DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 16_i32
    DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32_i32
  end
  enum DXVAHD_ITELECINE_CAPS
    DXVAHD_ITELECINE_CAPS_32 = 1_i32
    DXVAHD_ITELECINE_CAPS_22 = 2_i32
    DXVAHD_ITELECINE_CAPS_2224 = 4_i32
    DXVAHD_ITELECINE_CAPS_2332 = 8_i32
    DXVAHD_ITELECINE_CAPS_32322 = 16_i32
    DXVAHD_ITELECINE_CAPS_55 = 32_i32
    DXVAHD_ITELECINE_CAPS_64 = 64_i32
    DXVAHD_ITELECINE_CAPS_87 = 128_i32
    DXVAHD_ITELECINE_CAPS_222222222223 = 256_i32
    DXVAHD_ITELECINE_CAPS_OTHER = -2147483648_i32
  end
  enum DXVAHD_FILTER
    DXVAHD_FILTER_BRIGHTNESS = 0_i32
    DXVAHD_FILTER_CONTRAST = 1_i32
    DXVAHD_FILTER_HUE = 2_i32
    DXVAHD_FILTER_SATURATION = 3_i32
    DXVAHD_FILTER_NOISE_REDUCTION = 4_i32
    DXVAHD_FILTER_EDGE_ENHANCEMENT = 5_i32
    DXVAHD_FILTER_ANAMORPHIC_SCALING = 6_i32
  end
  enum DXVAHD_BLT_STATE
    DXVAHD_BLT_STATE_TARGET_RECT = 0_i32
    DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1_i32
    DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2_i32
    DXVAHD_BLT_STATE_ALPHA_FILL = 3_i32
    DXVAHD_BLT_STATE_CONSTRICTION = 4_i32
    DXVAHD_BLT_STATE_PRIVATE = 1000_i32
  end
  enum DXVAHD_ALPHA_FILL_MODE
    DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0_i32
    DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1_i32
    DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2_i32
    DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3_i32
  end
  enum DXVAHD_STREAM_STATE
    DXVAHD_STREAM_STATE_D3DFORMAT = 0_i32
    DXVAHD_STREAM_STATE_FRAME_FORMAT = 1_i32
    DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2_i32
    DXVAHD_STREAM_STATE_OUTPUT_RATE = 3_i32
    DXVAHD_STREAM_STATE_SOURCE_RECT = 4_i32
    DXVAHD_STREAM_STATE_DESTINATION_RECT = 5_i32
    DXVAHD_STREAM_STATE_ALPHA = 6_i32
    DXVAHD_STREAM_STATE_PALETTE = 7_i32
    DXVAHD_STREAM_STATE_LUMA_KEY = 8_i32
    DXVAHD_STREAM_STATE_ASPECT_RATIO = 9_i32
    DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100_i32
    DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101_i32
    DXVAHD_STREAM_STATE_FILTER_HUE = 102_i32
    DXVAHD_STREAM_STATE_FILTER_SATURATION = 103_i32
    DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104_i32
    DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105_i32
    DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106_i32
    DXVAHD_STREAM_STATE_PRIVATE = 1000_i32
  end
  enum DXVAHD_OUTPUT_RATE
    DXVAHD_OUTPUT_RATE_NORMAL = 0_i32
    DXVAHD_OUTPUT_RATE_HALF = 1_i32
    DXVAHD_OUTPUT_RATE_CUSTOM = 2_i32
  end
  enum DXVA2_SampleFormat
    DXVA2_SampleFormatMask = 255_i32
    DXVA2_SampleUnknown = 0_i32
    DXVA2_SampleProgressiveFrame = 2_i32
    DXVA2_SampleFieldInterleavedEvenFirst = 3_i32
    DXVA2_SampleFieldInterleavedOddFirst = 4_i32
    DXVA2_SampleFieldSingleEven = 5_i32
    DXVA2_SampleFieldSingleOdd = 6_i32
    DXVA2_SampleSubStream = 7_i32
  end
  enum DXVA2_VideoChromaSubSampling
    DXVA2_VideoChromaSubsamplingMask = 15_i32
    DXVA2_VideoChromaSubsampling_Unknown = 0_i32
    DXVA2_VideoChromaSubsampling_ProgressiveChroma = 8_i32
    DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 4_i32
    DXVA2_VideoChromaSubsampling_Vertically_Cosited = 2_i32
    DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1_i32
    DXVA2_VideoChromaSubsampling_MPEG2 = 5_i32
    DXVA2_VideoChromaSubsampling_MPEG1 = 1_i32
    DXVA2_VideoChromaSubsampling_DV_PAL = 6_i32
    DXVA2_VideoChromaSubsampling_Cosited = 7_i32
  end
  enum DXVA2_NominalRange
    DXVA2_NominalRangeMask = 7_i32
    DXVA2_NominalRange_Unknown = 0_i32
    DXVA2_NominalRange_Normal = 1_i32
    DXVA2_NominalRange_Wide = 2_i32
    DXVA2_NominalRange_0_255 = 1_i32
    DXVA2_NominalRange_16_235 = 2_i32
    DXVA2_NominalRange_48_208 = 3_i32
  end
  enum DXVA2_VideoTransferMatrix
    DXVA2_VideoTransferMatrixMask = 7_i32
    DXVA2_VideoTransferMatrix_Unknown = 0_i32
    DXVA2_VideoTransferMatrix_BT709 = 1_i32
    DXVA2_VideoTransferMatrix_BT601 = 2_i32
    DXVA2_VideoTransferMatrix_SMPTE240M = 3_i32
  end
  enum DXVA2_VideoLighting
    DXVA2_VideoLightingMask = 15_i32
    DXVA2_VideoLighting_Unknown = 0_i32
    DXVA2_VideoLighting_bright = 1_i32
    DXVA2_VideoLighting_office = 2_i32
    DXVA2_VideoLighting_dim = 3_i32
    DXVA2_VideoLighting_dark = 4_i32
  end
  enum DXVA2_VideoPrimaries
    DXVA2_VideoPrimariesMask = 31_i32
    DXVA2_VideoPrimaries_Unknown = 0_i32
    DXVA2_VideoPrimaries_reserved = 1_i32
    DXVA2_VideoPrimaries_BT709 = 2_i32
    DXVA2_VideoPrimaries_BT470_2_SysM = 3_i32
    DXVA2_VideoPrimaries_BT470_2_SysBG = 4_i32
    DXVA2_VideoPrimaries_SMPTE170M = 5_i32
    DXVA2_VideoPrimaries_SMPTE240M = 6_i32
    DXVA2_VideoPrimaries_EBU3213 = 7_i32
    DXVA2_VideoPrimaries_SMPTE_C = 8_i32
  end
  enum DXVA2_VideoTransferFunction
    DXVA2_VideoTransFuncMask = 31_i32
    DXVA2_VideoTransFunc_Unknown = 0_i32
    DXVA2_VideoTransFunc_10 = 1_i32
    DXVA2_VideoTransFunc_18 = 2_i32
    DXVA2_VideoTransFunc_20 = 3_i32
    DXVA2_VideoTransFunc_22 = 4_i32
    DXVA2_VideoTransFunc_709 = 5_i32
    DXVA2_VideoTransFunc_240M = 6_i32
    DXVA2_VideoTransFunc_sRGB = 7_i32
    DXVA2_VideoTransFunc_28 = 8_i32
  end
  enum DXVA2_DeinterlaceTech
    DXVA2_DeinterlaceTech_Unknown = 0_i32
    DXVA2_DeinterlaceTech_BOBLineReplicate = 1_i32
    DXVA2_DeinterlaceTech_BOBVerticalStretch = 2_i32
    DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 4_i32
    DXVA2_DeinterlaceTech_MedianFiltering = 8_i32
    DXVA2_DeinterlaceTech_EdgeFiltering = 16_i32
    DXVA2_DeinterlaceTech_FieldAdaptive = 32_i32
    DXVA2_DeinterlaceTech_PixelAdaptive = 64_i32
    DXVA2_DeinterlaceTech_MotionVectorSteered = 128_i32
    DXVA2_DeinterlaceTech_InverseTelecine = 256_i32
    DXVA2_DeinterlaceTech_Mask = 511_i32
  end
  enum DXVA2_FilterType
    DXVA2_NoiseFilterLumaLevel = 1_i32
    DXVA2_NoiseFilterLumaThreshold = 2_i32
    DXVA2_NoiseFilterLumaRadius = 3_i32
    DXVA2_NoiseFilterChromaLevel = 4_i32
    DXVA2_NoiseFilterChromaThreshold = 5_i32
    DXVA2_NoiseFilterChromaRadius = 6_i32
    DXVA2_DetailFilterLumaLevel = 7_i32
    DXVA2_DetailFilterLumaThreshold = 8_i32
    DXVA2_DetailFilterLumaRadius = 9_i32
    DXVA2_DetailFilterChromaLevel = 10_i32
    DXVA2_DetailFilterChromaThreshold = 11_i32
    DXVA2_DetailFilterChromaRadius = 12_i32
  end
  enum DXVA2_NoiseFilterTech
    DXVA2_NoiseFilterTech_Unsupported = 0_i32
    DXVA2_NoiseFilterTech_Unknown = 1_i32
    DXVA2_NoiseFilterTech_Median = 2_i32
    DXVA2_NoiseFilterTech_Temporal = 4_i32
    DXVA2_NoiseFilterTech_BlockNoise = 8_i32
    DXVA2_NoiseFilterTech_MosquitoNoise = 16_i32
    DXVA2_NoiseFilterTech_Mask = 31_i32
  end
  enum DXVA2_DetailFilterTech
    DXVA2_DetailFilterTech_Unsupported = 0_i32
    DXVA2_DetailFilterTech_Unknown = 1_i32
    DXVA2_DetailFilterTech_Edge = 2_i32
    DXVA2_DetailFilterTech_Sharpening = 4_i32
    DXVA2_DetailFilterTech_Mask = 7_i32
  end
  enum DXVA2_ProcAmp
    DXVA2_ProcAmp_None = 0_i32
    DXVA2_ProcAmp_Brightness = 1_i32
    DXVA2_ProcAmp_Contrast = 2_i32
    DXVA2_ProcAmp_Hue = 4_i32
    DXVA2_ProcAmp_Saturation = 8_i32
    DXVA2_ProcAmp_Mask = 15_i32
  end
  enum DXVA2_VideoProcess
    DXVA2_VideoProcess_None = 0_i32
    DXVA2_VideoProcess_YUV2RGB = 1_i32
    DXVA2_VideoProcess_StretchX = 2_i32
    DXVA2_VideoProcess_StretchY = 4_i32
    DXVA2_VideoProcess_AlphaBlend = 8_i32
    DXVA2_VideoProcess_SubRects = 16_i32
    DXVA2_VideoProcess_SubStreams = 32_i32
    DXVA2_VideoProcess_SubStreamsExtended = 64_i32
    DXVA2_VideoProcess_YUV2RGBExtended = 128_i32
    DXVA2_VideoProcess_AlphaBlendExtended = 256_i32
    DXVA2_VideoProcess_Constriction = 512_i32
    DXVA2_VideoProcess_NoiseFilter = 1024_i32
    DXVA2_VideoProcess_DetailFilter = 2048_i32
    DXVA2_VideoProcess_PlanarAlpha = 4096_i32
    DXVA2_VideoProcess_LinearScaling = 8192_i32
    DXVA2_VideoProcess_GammaCompensated = 16384_i32
    DXVA2_VideoProcess_MaintainsOriginalFieldData = 32768_i32
    DXVA2_VideoProcess_Mask = 65535_i32
  end
  enum DXVA2_VPDev
    DXVA2_VPDev_HardwareDevice = 1_i32
    DXVA2_VPDev_EmulatedDXVA1 = 2_i32
    DXVA2_VPDev_SoftwareDevice = 4_i32
    DXVA2_VPDev_Mask = 7_i32
  end
  enum DXVA2_SampleData
    DXVA2_SampleData_RFF = 1_i32
    DXVA2_SampleData_TFF = 2_i32
    DXVA2_SampleData_RFF_TFF_Present = 4_i32
    DXVA2_SampleData_Mask = 65535_i32
  end
  enum DXVA2_DestData
    DXVA2_DestData_RFF = 1_i32
    DXVA2_DestData_TFF = 2_i32
    DXVA2_DestData_RFF_TFF_Present = 4_i32
    DXVA2_DestData_Mask = 65535_i32
  end
  enum DXVA2_BufferfType
    DXVA2_PictureParametersBufferType = 0_i32
    DXVA2_MacroBlockControlBufferType = 1_i32
    DXVA2_ResidualDifferenceBufferType = 2_i32
    DXVA2_DeblockingControlBufferType = 3_i32
    DXVA2_InverseQuantizationMatrixBufferType = 4_i32
    DXVA2_SliceControlBufferType = 5_i32
    DXVA2_BitStreamDateBufferType = 6_i32
    DXVA2_MotionVectorBuffer = 7_i32
    DXVA2_FilmGrainBuffer = 8_i32
  end
  enum DXVA2_VideoRenderTargetType
    DXVA2_VideoDecoderRenderTarget = 0_i32
    DXVA2_VideoProcessorRenderTarget = 1_i32
    DXVA2_VideoSoftwareRenderTarget = 2_i32
  end
  enum DXVA2_SurfaceType
    DXVA2_SurfaceType_DecoderRenderTarget = 0_i32
    DXVA2_SurfaceType_ProcessorRenderTarget = 1_i32
    DXVA2_SurfaceType_D3DRenderTargetTexture = 2_i32
  end
  enum OPM_TYPE
    OPM_OMAC_SIZE = 16_i32
    OPM_128_BIT_RANDOM_NUMBER_SIZE = 16_i32
    OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256_i32
    OPM_CONFIGURE_SETTING_DATA_SIZE = 4056_i32
    OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056_i32
    OPM_REQUESTED_INFORMATION_SIZE = 4076_i32
    OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5_i32
    OPM_PROTECTION_TYPE_SIZE = 4_i32
    OPM_BUS_TYPE_MASK = 65535_i32
    OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = 32767_i32
  end
  enum OPM_VIDEO_OUTPUT_SEMANTICS
    OPM_VOS_COPP_SEMANTICS = 0_i32
    OPM_VOS_OPM_SEMANTICS = 1_i32
    OPM_VOS_OPM_INDIRECT_DISPLAY = 2_i32
  end
  @[Flags]
  enum OPM_HDCP_FLAGS : UInt32
    OPM_HDCP_FLAG_NONE = 0_u32
    OPM_HDCP_FLAG_REPEATER = 1_u32
  end
  enum OPM_STATUS
    OPM_STATUS_NORMAL = 0_i32
    OPM_STATUS_LINK_LOST = 1_i32
    OPM_STATUS_RENEGOTIATION_REQUIRED = 2_i32
    OPM_STATUS_TAMPERING_DETECTED = 4_i32
    OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 8_i32
  end
  enum OPM_CONNECTOR_TYPE
    OPM_CONNECTOR_TYPE_OTHER = -1_i32
    OPM_CONNECTOR_TYPE_VGA = 0_i32
    OPM_CONNECTOR_TYPE_SVIDEO = 1_i32
    OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2_i32
    OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3_i32
    OPM_CONNECTOR_TYPE_DVI = 4_i32
    OPM_CONNECTOR_TYPE_HDMI = 5_i32
    OPM_CONNECTOR_TYPE_LVDS = 6_i32
    OPM_CONNECTOR_TYPE_D_JPN = 8_i32
    OPM_CONNECTOR_TYPE_SDI = 9_i32
    OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10_i32
    OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11_i32
    OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12_i32
    OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13_i32
    OPM_CONNECTOR_TYPE_RESERVED = 14_i32
    OPM_CONNECTOR_TYPE_MIRACAST = 15_i32
    OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16_i32
    OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17_i32
    OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = -2147483648_i32
  end
  enum OPM_DVI_CHARACTERISTIC
    OPM_DVI_CHARACTERISTIC_1_0 = 1_i32
    OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2_i32
  end
  enum OPM_OUTPUT_HARDWARE_PROTECTION
    OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0_i32
    OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 1_i32
  end
  enum OPM_BUS_TYPE
    OPM_BUS_TYPE_OTHER = 0_i32
    OPM_BUS_TYPE_PCI = 1_i32
    OPM_BUS_TYPE_PCIX = 2_i32
    OPM_BUS_TYPE_PCIEXPRESS = 3_i32
    OPM_BUS_TYPE_AGP = 4_i32
    OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 65536_i32
    OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072_i32
    OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608_i32
    OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144_i32
    OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680_i32
    OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = -2147483648_i32
    OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = -2147483648_i32
  end
  enum OPM_DPCP_PROTECTION_LEVEL
    OPM_DPCP_OFF = 0_i32
    OPM_DPCP_ON = 1_i32
    OPM_DPCP_FORCE_ULONG = 2147483647_i32
  end
  enum OPM_HDCP_PROTECTION_LEVEL
    OPM_HDCP_OFF = 0_i32
    OPM_HDCP_ON = 1_i32
    OPM_HDCP_FORCE_ULONG = 2147483647_i32
  end
  enum OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL
    OPM_TYPE_ENFORCEMENT_HDCP_OFF = 0_i32
    OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = 1_i32
    OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = 2_i32
    OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 2147483647_i32
  end
  enum OPM_CGMSA
    OPM_CGMSA_OFF = 0_i32
    OPM_CGMSA_COPY_FREELY = 1_i32
    OPM_CGMSA_COPY_NO_MORE = 2_i32
    OPM_CGMSA_COPY_ONE_GENERATION = 3_i32
    OPM_CGMSA_COPY_NEVER = 4_i32
    OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8_i32
  end
  enum OPM_ACP_PROTECTION_LEVEL
    OPM_ACP_OFF = 0_i32
    OPM_ACP_LEVEL_ONE = 1_i32
    OPM_ACP_LEVEL_TWO = 2_i32
    OPM_ACP_LEVEL_THREE = 3_i32
    OPM_ACP_FORCE_ULONG = 2147483647_i32
  end
  enum OPM_PROTECTION_TYPE
    OPM_PROTECTION_TYPE_OTHER = -2147483648_i32
    OPM_PROTECTION_TYPE_NONE = 0_i32
    OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 1_i32
    OPM_PROTECTION_TYPE_ACP = 2_i32
    OPM_PROTECTION_TYPE_CGMSA = 4_i32
    OPM_PROTECTION_TYPE_HDCP = 8_i32
    OPM_PROTECTION_TYPE_DPCP = 16_i32
    OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 32_i32
  end
  enum OPM_PROTECTION_STANDARD_TYPE : UInt32
    OPM_PROTECTION_STANDARD_OTHER = 2147483648_u32
    OPM_PROTECTION_STANDARD_NONE = 0_u32
    OPM_PROTECTION_STANDARD_IEC61880_525I = 1_u32
    OPM_PROTECTION_STANDARD_IEC61880_2_525I = 2_u32
    OPM_PROTECTION_STANDARD_IEC62375_625P = 4_u32
    OPM_PROTECTION_STANDARD_EIA608B_525 = 8_u32
    OPM_PROTECTION_STANDARD_EN300294_625I = 16_u32
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 32_u32
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 64_u32
    OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 128_u32
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 256_u32
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 512_u32
    OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 1024_u32
    OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 2048_u32
    OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 4096_u32
    OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 8192_u32
    OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 16384_u32
  end
  enum OPM_IMAGE_ASPECT_RATIO_EN300294
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0_i32
    OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1_i32
    OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2_i32
    OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3_i32
    OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4_i32
    OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5_i32
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6_i32
    OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7_i32
    OPM_ASPECT_RATIO_FORCE_ULONG = 2147483647_i32
  end
  enum KSMETHOD_OPMVIDEOOUTPUT
    KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0_i32
    KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1_i32
    KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2_i32
  end
  enum MF_ATTRIBUTE_TYPE
    MF_ATTRIBUTE_UINT32 = 19_i32
    MF_ATTRIBUTE_UINT64 = 21_i32
    MF_ATTRIBUTE_DOUBLE = 5_i32
    MF_ATTRIBUTE_GUID = 72_i32
    MF_ATTRIBUTE_STRING = 31_i32
    MF_ATTRIBUTE_BLOB = 4113_i32
    MF_ATTRIBUTE_IUNKNOWN = 13_i32
  end
  enum MF_ATTRIBUTES_MATCH_TYPE
    MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0_i32
    MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1_i32
    MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2_i32
    MF_ATTRIBUTES_MATCH_INTERSECTION = 3_i32
    MF_ATTRIBUTES_MATCH_SMALLER = 4_i32
  end
  enum MF_ATTRIBUTE_SERIALIZE_OPTIONS
    MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 1_i32
  end
  enum MF2DBuffer_LockFlags
    MF2DBuffer_LockFlags_LockTypeMask = 3_i32
    MF2DBuffer_LockFlags_Read = 1_i32
    MF2DBuffer_LockFlags_Write = 2_i32
    MF2DBuffer_LockFlags_ReadWrite = 3_i32
    MF2DBuffer_LockFlags_ForceDWORD = 2147483647_i32
  end
  enum MFVideoInterlaceMode
    MFVideoInterlace_Unknown = 0_i32
    MFVideoInterlace_Progressive = 2_i32
    MFVideoInterlace_FieldInterleavedUpperFirst = 3_i32
    MFVideoInterlace_FieldInterleavedLowerFirst = 4_i32
    MFVideoInterlace_FieldSingleUpper = 5_i32
    MFVideoInterlace_FieldSingleLower = 6_i32
    MFVideoInterlace_MixedInterlaceOrProgressive = 7_i32
    MFVideoInterlace_Last = 8_i32
    MFVideoInterlace_ForceDWORD = 2147483647_i32
  end
  enum MFVideoTransferFunction
    MFVideoTransFunc_Unknown = 0_i32
    MFVideoTransFunc_10 = 1_i32
    MFVideoTransFunc_18 = 2_i32
    MFVideoTransFunc_20 = 3_i32
    MFVideoTransFunc_22 = 4_i32
    MFVideoTransFunc_709 = 5_i32
    MFVideoTransFunc_240M = 6_i32
    MFVideoTransFunc_sRGB = 7_i32
    MFVideoTransFunc_28 = 8_i32
    MFVideoTransFunc_Log_100 = 9_i32
    MFVideoTransFunc_Log_316 = 10_i32
    MFVideoTransFunc_709_sym = 11_i32
    MFVideoTransFunc_2020_const = 12_i32
    MFVideoTransFunc_2020 = 13_i32
    MFVideoTransFunc_26 = 14_i32
    MFVideoTransFunc_2084 = 15_i32
    MFVideoTransFunc_HLG = 16_i32
    MFVideoTransFunc_10_rel = 17_i32
    MFVideoTransFunc_Last = 18_i32
    MFVideoTransFunc_ForceDWORD = 2147483647_i32
  end
  enum MFVideoPrimaries
    MFVideoPrimaries_Unknown = 0_i32
    MFVideoPrimaries_reserved = 1_i32
    MFVideoPrimaries_BT709 = 2_i32
    MFVideoPrimaries_BT470_2_SysM = 3_i32
    MFVideoPrimaries_BT470_2_SysBG = 4_i32
    MFVideoPrimaries_SMPTE170M = 5_i32
    MFVideoPrimaries_SMPTE240M = 6_i32
    MFVideoPrimaries_EBU3213 = 7_i32
    MFVideoPrimaries_SMPTE_C = 8_i32
    MFVideoPrimaries_BT2020 = 9_i32
    MFVideoPrimaries_XYZ = 10_i32
    MFVideoPrimaries_DCI_P3 = 11_i32
    MFVideoPrimaries_ACES = 12_i32
    MFVideoPrimaries_Last = 13_i32
    MFVideoPrimaries_ForceDWORD = 2147483647_i32
  end
  enum MFVideoLighting
    MFVideoLighting_Unknown = 0_i32
    MFVideoLighting_bright = 1_i32
    MFVideoLighting_office = 2_i32
    MFVideoLighting_dim = 3_i32
    MFVideoLighting_dark = 4_i32
    MFVideoLighting_Last = 5_i32
    MFVideoLighting_ForceDWORD = 2147483647_i32
  end
  enum MFVideoTransferMatrix
    MFVideoTransferMatrix_Unknown = 0_i32
    MFVideoTransferMatrix_BT709 = 1_i32
    MFVideoTransferMatrix_BT601 = 2_i32
    MFVideoTransferMatrix_SMPTE240M = 3_i32
    MFVideoTransferMatrix_BT2020_10 = 4_i32
    MFVideoTransferMatrix_BT2020_12 = 5_i32
    MFVideoTransferMatrix_Last = 6_i32
    MFVideoTransferMatrix_ForceDWORD = 2147483647_i32
  end
  enum MFVideoChromaSubsampling
    MFVideoChromaSubsampling_Unknown = 0_i32
    MFVideoChromaSubsampling_ProgressiveChroma = 8_i32
    MFVideoChromaSubsampling_Horizontally_Cosited = 4_i32
    MFVideoChromaSubsampling_Vertically_Cosited = 2_i32
    MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1_i32
    MFVideoChromaSubsampling_MPEG2 = 5_i32
    MFVideoChromaSubsampling_MPEG1 = 1_i32
    MFVideoChromaSubsampling_DV_PAL = 6_i32
    MFVideoChromaSubsampling_Cosited = 7_i32
    MFVideoChromaSubsampling_Last = 8_i32
    MFVideoChromaSubsampling_ForceDWORD = 2147483647_i32
  end
  enum MFNominalRange
    MFNominalRange_Unknown = 0_i32
    MFNominalRange_Normal = 1_i32
    MFNominalRange_Wide = 2_i32
    MFNominalRange_0_255 = 1_i32
    MFNominalRange_16_235 = 2_i32
    MFNominalRange_48_208 = 3_i32
    MFNominalRange_64_127 = 4_i32
    MFNominalRange_Last = 5_i32
    MFNominalRange_ForceDWORD = 2147483647_i32
  end
  enum MFVideoFlags
    MFVideoFlag_PAD_TO_Mask = 3_i32
    MFVideoFlag_PAD_TO_None = 0_i32
    MFVideoFlag_PAD_TO_4x3 = 1_i32
    MFVideoFlag_PAD_TO_16x9 = 2_i32
    MFVideoFlag_SrcContentHintMask = 28_i32
    MFVideoFlag_SrcContentHintNone = 0_i32
    MFVideoFlag_SrcContentHint16x9 = 4_i32
    MFVideoFlag_SrcContentHint235_1 = 8_i32
    MFVideoFlag_AnalogProtected = 32_i32
    MFVideoFlag_DigitallyProtected = 64_i32
    MFVideoFlag_ProgressiveContent = 128_i32
    MFVideoFlag_FieldRepeatCountMask = 1792_i32
    MFVideoFlag_FieldRepeatCountShift = 8_i32
    MFVideoFlag_ProgressiveSeqReset = 2048_i32
    MFVideoFlag_PanScanEnabled = 131072_i32
    MFVideoFlag_LowerFieldFirst = 262144_i32
    MFVideoFlag_BottomUpLinearRep = 524288_i32
    MFVideoFlags_DXVASurface = 1048576_i32
    MFVideoFlags_RenderTargetSurface = 4194304_i32
    MFVideoFlags_ForceQWORD = 2147483647_i32
  end
  enum MFStandardVideoFormat
    MFStdVideoFormat_reserved = 0_i32
    MFStdVideoFormat_NTSC = 1_i32
    MFStdVideoFormat_PAL = 2_i32
    MFStdVideoFormat_DVD_NTSC = 3_i32
    MFStdVideoFormat_DVD_PAL = 4_i32
    MFStdVideoFormat_DV_PAL = 5_i32
    MFStdVideoFormat_DV_NTSC = 6_i32
    MFStdVideoFormat_ATSC_SD480i = 7_i32
    MFStdVideoFormat_ATSC_HD1080i = 8_i32
    MFStdVideoFormat_ATSC_HD720p = 9_i32
  end
  enum MF_EVENT_TYPE
    MEUnknown = 0_i32
    MEError = 1_i32
    MEExtendedType = 2_i32
    MENonFatalError = 3_i32
    MEGenericV1Anchor = 3_i32
    MESessionUnknown = 100_i32
    MESessionTopologySet = 101_i32
    MESessionTopologiesCleared = 102_i32
    MESessionStarted = 103_i32
    MESessionPaused = 104_i32
    MESessionStopped = 105_i32
    MESessionClosed = 106_i32
    MESessionEnded = 107_i32
    MESessionRateChanged = 108_i32
    MESessionScrubSampleComplete = 109_i32
    MESessionCapabilitiesChanged = 110_i32
    MESessionTopologyStatus = 111_i32
    MESessionNotifyPresentationTime = 112_i32
    MENewPresentation = 113_i32
    MELicenseAcquisitionStart = 114_i32
    MELicenseAcquisitionCompleted = 115_i32
    MEIndividualizationStart = 116_i32
    MEIndividualizationCompleted = 117_i32
    MEEnablerProgress = 118_i32
    MEEnablerCompleted = 119_i32
    MEPolicyError = 120_i32
    MEPolicyReport = 121_i32
    MEBufferingStarted = 122_i32
    MEBufferingStopped = 123_i32
    MEConnectStart = 124_i32
    MEConnectEnd = 125_i32
    MEReconnectStart = 126_i32
    MEReconnectEnd = 127_i32
    MERendererEvent = 128_i32
    MESessionStreamSinkFormatChanged = 129_i32
    MESessionV1Anchor = 129_i32
    MESourceUnknown = 200_i32
    MESourceStarted = 201_i32
    MEStreamStarted = 202_i32
    MESourceSeeked = 203_i32
    MEStreamSeeked = 204_i32
    MENewStream = 205_i32
    MEUpdatedStream = 206_i32
    MESourceStopped = 207_i32
    MEStreamStopped = 208_i32
    MESourcePaused = 209_i32
    MEStreamPaused = 210_i32
    MEEndOfPresentation = 211_i32
    MEEndOfStream = 212_i32
    MEMediaSample = 213_i32
    MEStreamTick = 214_i32
    MEStreamThinMode = 215_i32
    MEStreamFormatChanged = 216_i32
    MESourceRateChanged = 217_i32
    MEEndOfPresentationSegment = 218_i32
    MESourceCharacteristicsChanged = 219_i32
    MESourceRateChangeRequested = 220_i32
    MESourceMetadataChanged = 221_i32
    MESequencerSourceTopologyUpdated = 222_i32
    MESourceV1Anchor = 222_i32
    MESinkUnknown = 300_i32
    MEStreamSinkStarted = 301_i32
    MEStreamSinkStopped = 302_i32
    MEStreamSinkPaused = 303_i32
    MEStreamSinkRateChanged = 304_i32
    MEStreamSinkRequestSample = 305_i32
    MEStreamSinkMarker = 306_i32
    MEStreamSinkPrerolled = 307_i32
    MEStreamSinkScrubSampleComplete = 308_i32
    MEStreamSinkFormatChanged = 309_i32
    MEStreamSinkDeviceChanged = 310_i32
    MEQualityNotify = 311_i32
    MESinkInvalidated = 312_i32
    MEAudioSessionNameChanged = 313_i32
    MEAudioSessionVolumeChanged = 314_i32
    MEAudioSessionDeviceRemoved = 315_i32
    MEAudioSessionServerShutdown = 316_i32
    MEAudioSessionGroupingParamChanged = 317_i32
    MEAudioSessionIconChanged = 318_i32
    MEAudioSessionFormatChanged = 319_i32
    MEAudioSessionDisconnected = 320_i32
    MEAudioSessionExclusiveModeOverride = 321_i32
    MESinkV1Anchor = 321_i32
    MECaptureAudioSessionVolumeChanged = 322_i32
    MECaptureAudioSessionDeviceRemoved = 323_i32
    MECaptureAudioSessionFormatChanged = 324_i32
    MECaptureAudioSessionDisconnected = 325_i32
    MECaptureAudioSessionExclusiveModeOverride = 326_i32
    MECaptureAudioSessionServerShutdown = 327_i32
    MESinkV2Anchor = 327_i32
    METrustUnknown = 400_i32
    MEPolicyChanged = 401_i32
    MEContentProtectionMessage = 402_i32
    MEPolicySet = 403_i32
    METrustV1Anchor = 403_i32
    MEWMDRMLicenseBackupCompleted = 500_i32
    MEWMDRMLicenseBackupProgress = 501_i32
    MEWMDRMLicenseRestoreCompleted = 502_i32
    MEWMDRMLicenseRestoreProgress = 503_i32
    MEWMDRMLicenseAcquisitionCompleted = 506_i32
    MEWMDRMIndividualizationCompleted = 508_i32
    MEWMDRMIndividualizationProgress = 513_i32
    MEWMDRMProximityCompleted = 514_i32
    MEWMDRMLicenseStoreCleaned = 515_i32
    MEWMDRMRevocationDownloadCompleted = 516_i32
    MEWMDRMV1Anchor = 516_i32
    METransformUnknown = 600_i32
    METransformNeedInput = 601_i32
    METransformHaveOutput = 602_i32
    METransformDrainComplete = 603_i32
    METransformMarker = 604_i32
    METransformInputStreamStateChanged = 605_i32
    MEByteStreamCharacteristicsChanged = 700_i32
    MEVideoCaptureDeviceRemoved = 800_i32
    MEVideoCaptureDevicePreempted = 801_i32
    MEStreamSinkFormatInvalidated = 802_i32
    MEEncodingParameters = 803_i32
    MEContentProtectionMetadata = 900_i32
    MEDeviceThermalStateChanged = 950_i32
    MEReservedMax = 10000_i32
  end
  enum MFBYTESTREAM_SEEK_ORIGIN
    Msobegin = 0_i32
    Msocurrent = 1_i32
  end
  enum MF_FILE_ACCESSMODE
    MF_ACCESSMODE_READ = 1_i32
    MF_ACCESSMODE_WRITE = 2_i32
    MF_ACCESSMODE_READWRITE = 3_i32
  end
  enum MF_FILE_OPENMODE
    MF_OPENMODE_FAIL_IF_NOT_EXIST = 0_i32
    MF_OPENMODE_FAIL_IF_EXIST = 1_i32
    MF_OPENMODE_RESET_IF_EXIST = 2_i32
    MF_OPENMODE_APPEND_IF_EXIST = 3_i32
    MF_OPENMODE_DELETE_IF_EXIST = 4_i32
  end
  enum MF_FILE_FLAGS
    MF_FILEFLAGS_NONE = 0_i32
    MF_FILEFLAGS_NOBUFFERING = 1_i32
    MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2_i32
  end
  enum MF_PLUGIN_CONTROL_POLICY
    MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0_i32
    MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1_i32
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2_i32
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3_i32
  end
  enum MF_STREAM_STATE
    MF_STREAM_STATE_STOPPED = 0_i32
    MF_STREAM_STATE_PAUSED = 1_i32
    MF_STREAM_STATE_RUNNING = 2_i32
  end
  enum MFT_INPUT_DATA_BUFFER_FLAGS_
    MFT_INPUT_DATA_BUFFER_PLACEHOLDER = -1_i32
  end
  enum MFT_OUTPUT_DATA_BUFFER_FLAGS_
    MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216_i32
    MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256_i32
    MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512_i32
    MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768_i32
  end
  enum MFT_INPUT_STATUS_FLAGS_
    MFT_INPUT_STATUS_ACCEPT_DATA = 1_i32
  end
  enum MFT_OUTPUT_STATUS_FLAGS_
    MFT_OUTPUT_STATUS_SAMPLE_READY = 1_i32
  end
  enum MFT_INPUT_STREAM_INFO_FLAGS_
    MFT_INPUT_STREAM_WHOLE_SAMPLES = 1_i32
    MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2_i32
    MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4_i32
    MFT_INPUT_STREAM_HOLDS_BUFFERS = 8_i32
    MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256_i32
    MFT_INPUT_STREAM_REMOVABLE = 512_i32
    MFT_INPUT_STREAM_OPTIONAL = 1024_i32
    MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048_i32
  end
  enum MFT_OUTPUT_STREAM_INFO_FLAGS_
    MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1_i32
    MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2_i32
    MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4_i32
    MFT_OUTPUT_STREAM_DISCARDABLE = 8_i32
    MFT_OUTPUT_STREAM_OPTIONAL = 16_i32
    MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256_i32
    MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512_i32
    MFT_OUTPUT_STREAM_LAZY_READ = 1024_i32
    MFT_OUTPUT_STREAM_REMOVABLE = 2048_i32
  end
  enum MFT_SET_TYPE_FLAGS_
    MFT_SET_TYPE_TEST_ONLY = 1_i32
  end
  enum MFT_PROCESS_OUTPUT_FLAGS_
    MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1_i32
    MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2_i32
  end
  enum MFT_PROCESS_OUTPUT_STATUS_
    MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256_i32
  end
  enum MFT_DRAIN_TYPE
    MFT_DRAIN_PRODUCE_TAILS = 0_i32
    MFT_DRAIN_NO_TAILS = 1_i32
  end
  enum MFT_MESSAGE_TYPE
    MFT_MESSAGE_COMMAND_FLUSH = 0_i32
    MFT_MESSAGE_COMMAND_DRAIN = 1_i32
    MFT_MESSAGE_SET_D3D_MANAGER = 2_i32
    MFT_MESSAGE_DROP_SAMPLES = 3_i32
    MFT_MESSAGE_COMMAND_TICK = 4_i32
    MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456_i32
    MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457_i32
    MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458_i32
    MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459_i32
    MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460_i32
    MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461_i32
    MFT_MESSAGE_NOTIFY_EVENT = 268435462_i32
    MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = 268435463_i32
    MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = 268435464_i32
    MFT_MESSAGE_COMMAND_MARKER = 536870912_i32
  end
  enum DeviceStreamState
    DeviceStreamState_Stop = 0_i32
    DeviceStreamState_Pause = 1_i32
    DeviceStreamState_Run = 2_i32
    DeviceStreamState_Disabled = 3_i32
  end
  enum MF3DVideoOutputType
    MF3DVideoOutputType_BaseView = 0_i32
    MF3DVideoOutputType_Stereo = 1_i32
  end
  enum MFT_AUDIO_DECODER_DEGRADATION_REASON
    MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0_i32
    MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1_i32
  end
  enum MFT_AUDIO_DECODER_DEGRADATION_TYPE
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0_i32
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1_i32
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2_i32
    MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3_i32
  end
  enum MFSESSION_SETTOPOLOGY_FLAGS
    MFSESSION_SETTOPOLOGY_IMMEDIATE = 1_i32
    MFSESSION_SETTOPOLOGY_NORESOLUTION = 2_i32
    MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = 4_i32
  end
  enum MFSESSION_GETFULLTOPOLOGY_FLAGS
    MFSESSION_GETFULLTOPOLOGY_CURRENT = 1_i32
  end
  enum MFPMPSESSION_CREATION_FLAGS
    MFPMPSESSION_UNPROTECTED_PROCESS = 1_i32
    MFPMPSESSION_IN_PROCESS = 2_i32
  end
  enum MF_OBJECT_TYPE
    MF_OBJECT_MEDIASOURCE = 0_i32
    MF_OBJECT_BYTESTREAM = 1_i32
    MF_OBJECT_INVALID = 2_i32
  end
  @[Flags]
  enum MF_RESOLUTION_FLAGS : UInt32
    MF_RESOLUTION_MEDIASOURCE = 1_u32
    MF_RESOLUTION_BYTESTREAM = 2_u32
    MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = 16_u32
    MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = 32_u32
    MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = 64_u32
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = 128_u32
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = 256_u32
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = 512_u32
    MF_RESOLUTION_ENABLE_STORE_PLUGINS = 1024_u32
    MF_RESOLUTION_READ = 65536_u32
    MF_RESOLUTION_WRITE = 131072_u32
  end
  enum MF_CONNECT_METHOD
    MF_CONNECT_DIRECT = 0_i32
    MF_CONNECT_ALLOW_CONVERTER = 1_i32
    MF_CONNECT_ALLOW_DECODER = 3_i32
    MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4_i32
    MF_CONNECT_AS_OPTIONAL = 65536_i32
    MF_CONNECT_AS_OPTIONAL_BRANCH = 131072_i32
  end
  enum MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS
    MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0_i32
    MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = 1_i32
    MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = 2_i32
  end
  enum MFMEDIASOURCE_CHARACTERISTICS
    MFMEDIASOURCE_IS_LIVE = 1_i32
    MFMEDIASOURCE_CAN_SEEK = 2_i32
    MFMEDIASOURCE_CAN_PAUSE = 4_i32
    MFMEDIASOURCE_HAS_SLOW_SEEK = 8_i32
    MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 16_i32
    MFMEDIASOURCE_CAN_SKIPFORWARD = 32_i32
    MFMEDIASOURCE_CAN_SKIPBACKWARD = 64_i32
    MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 128_i32
  end
  enum MFSTREAMSINK_MARKER_TYPE
    MFSTREAMSINK_MARKER_DEFAULT = 0_i32
    MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1_i32
    MFSTREAMSINK_MARKER_TICK = 2_i32
    MFSTREAMSINK_MARKER_EVENT = 3_i32
  end
  enum MF_VIDEO_PROCESSOR_ROTATION
    ROTATION_NONE = 0_i32
    ROTATION_NORMAL = 1_i32
  end
  enum MF_VIDEO_PROCESSOR_MIRROR
    MIRROR_NONE = 0_i32
    MIRROR_HORIZONTAL = 1_i32
    MIRROR_VERTICAL = 2_i32
  end
  enum MFVideoSphericalFormat
    MFVideoSphericalFormat_Unsupported = 0_i32
    MFVideoSphericalFormat_Equirectangular = 1_i32
    MFVideoSphericalFormat_CubeMap = 2_i32
    MFVideoSphericalFormat_3DMesh = 3_i32
  end
  enum MFVideoSphericalProjectionMode
    MFVideoSphericalProjectionMode_Spherical = 0_i32
    MFVideoSphericalProjectionMode_Flat = 1_i32
  end
  enum MFTOPOLOGY_DXVA_MODE
    MFTOPOLOGY_DXVA_DEFAULT = 0_i32
    MFTOPOLOGY_DXVA_NONE = 1_i32
    MFTOPOLOGY_DXVA_FULL = 2_i32
  end
  enum MFTOPOLOGY_HARDWARE_MODE
    MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0_i32
    MFTOPOLOGY_HWMODE_USE_HARDWARE = 1_i32
    MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2_i32
  end
  enum MF_TOPOLOGY_TYPE
    MF_TOPOLOGY_OUTPUT_NODE = 0_i32
    MF_TOPOLOGY_SOURCESTREAM_NODE = 1_i32
    MF_TOPOLOGY_TRANSFORM_NODE = 2_i32
    MF_TOPOLOGY_TEE_NODE = 3_i32
    MF_TOPOLOGY_MAX = -1_i32
  end
  enum MF_TOPONODE_FLUSH_MODE
    MF_TOPONODE_FLUSH_ALWAYS = 0_i32
    MF_TOPONODE_FLUSH_SEEK = 1_i32
    MF_TOPONODE_FLUSH_NEVER = 2_i32
  end
  enum MF_TOPONODE_DRAIN_MODE
    MF_TOPONODE_DRAIN_DEFAULT = 0_i32
    MF_TOPONODE_DRAIN_ALWAYS = 1_i32
    MF_TOPONODE_DRAIN_NEVER = 2_i32
  end
  enum MFCLOCK_CHARACTERISTICS_FLAGS
    MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = 2_i32
    MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = 4_i32
    MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = 8_i32
  end
  enum MFCLOCK_STATE
    MFCLOCK_STATE_INVALID = 0_i32
    MFCLOCK_STATE_RUNNING = 1_i32
    MFCLOCK_STATE_STOPPED = 2_i32
    MFCLOCK_STATE_PAUSED = 3_i32
  end
  enum MFCLOCK_RELATIONAL_FLAGS
    MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = 1_i32
  end
  enum MFTIMER_FLAGS
    MFTIMER_RELATIVE = 1_i32
  end
  enum MF_ACTIVATE_CUSTOM_MIXER
    MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = 1_i32
  end
  enum MF_ACTIVATE_CUSTOM_PRESENTER
    MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = 1_i32
  end
  enum MFSHUTDOWN_STATUS
    MFSHUTDOWN_INITIATED = 0_i32
    MFSHUTDOWN_COMPLETED = 1_i32
  end
  enum MF_URL_TRUST_STATUS
    MF_LICENSE_URL_UNTRUSTED = 0_i32
    MF_LICENSE_URL_TRUSTED = 1_i32
    MF_LICENSE_URL_TAMPERED = 2_i32
  end
  enum MFRATE_DIRECTION
    MFRATE_FORWARD = 0_i32
    MFRATE_REVERSE = 1_i32
  end
  enum MF_QUALITY_DROP_MODE
    MF_DROP_MODE_NONE = 0_i32
    MF_DROP_MODE_1 = 1_i32
    MF_DROP_MODE_2 = 2_i32
    MF_DROP_MODE_3 = 3_i32
    MF_DROP_MODE_4 = 4_i32
    MF_DROP_MODE_5 = 5_i32
    MF_NUM_DROP_MODES = 6_i32
  end
  enum MF_QUALITY_LEVEL
    MF_QUALITY_NORMAL = 0_i32
    MF_QUALITY_NORMAL_MINUS_1 = 1_i32
    MF_QUALITY_NORMAL_MINUS_2 = 2_i32
    MF_QUALITY_NORMAL_MINUS_3 = 3_i32
    MF_QUALITY_NORMAL_MINUS_4 = 4_i32
    MF_QUALITY_NORMAL_MINUS_5 = 5_i32
    MF_NUM_QUALITY_LEVELS = 6_i32
  end
  enum MF_QUALITY_ADVISE_FLAGS
    MF_QUALITY_CANNOT_KEEP_UP = 1_i32
  end
  enum MFSequencerTopologyFlags
    SequencerTopologyFlags_Last = 1_i32
  end
  enum MFNetCredentialRequirements
    REQUIRE_PROMPT = 1_i32
    REQUIRE_SAVE_SELECTED = 2_i32
  end
  enum MFNetCredentialOptions
    MFNET_CREDENTIAL_SAVE = 1_i32
    MFNET_CREDENTIAL_DONT_CACHE = 2_i32
    MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4_i32
  end
  enum MFNetAuthenticationFlags
    MFNET_AUTHENTICATION_PROXY = 1_i32
    MFNET_AUTHENTICATION_CLEAR_TEXT = 2_i32
    MFNET_AUTHENTICATION_LOGGED_ON_USER = 4_i32
  end
  enum MFNETSOURCE_PROTOCOL_TYPE
    MFNETSOURCE_UNDEFINED = 0_i32
    MFNETSOURCE_HTTP = 1_i32
    MFNETSOURCE_RTSP = 2_i32
    MFNETSOURCE_FILE = 3_i32
    MFNETSOURCE_MULTICAST = 4_i32
  end
  enum MFNETSOURCE_TRANSPORT_TYPE
    MFNETSOURCE_UDP = 0_i32
    MFNETSOURCE_TCP = 1_i32
  end
  enum MFNETSOURCE_CACHE_STATE
    MFNETSOURCE_CACHE_UNAVAILABLE = 0_i32
    MFNETSOURCE_CACHE_ACTIVE_WRITING = 1_i32
    MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2_i32
  end
  enum MFNETSOURCE_STATISTICS_IDS
    MFNETSOURCE_RECVPACKETS_ID = 0_i32
    MFNETSOURCE_LOSTPACKETS_ID = 1_i32
    MFNETSOURCE_RESENDSREQUESTED_ID = 2_i32
    MFNETSOURCE_RESENDSRECEIVED_ID = 3_i32
    MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4_i32
    MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5_i32
    MFNETSOURCE_OUTPACKETS_ID = 6_i32
    MFNETSOURCE_RECVRATE_ID = 7_i32
    MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8_i32
    MFNETSOURCE_BYTESRECEIVED_ID = 9_i32
    MFNETSOURCE_PROTOCOL_ID = 10_i32
    MFNETSOURCE_TRANSPORT_ID = 11_i32
    MFNETSOURCE_CACHE_STATE_ID = 12_i32
    MFNETSOURCE_LINKBANDWIDTH_ID = 13_i32
    MFNETSOURCE_CONTENTBITRATE_ID = 14_i32
    MFNETSOURCE_SPEEDFACTOR_ID = 15_i32
    MFNETSOURCE_BUFFERSIZE_ID = 16_i32
    MFNETSOURCE_BUFFERPROGRESS_ID = 17_i32
    MFNETSOURCE_LASTBWSWITCHTS_ID = 18_i32
    MFNETSOURCE_SEEKRANGESTART_ID = 19_i32
    MFNETSOURCE_SEEKRANGEEND_ID = 20_i32
    MFNETSOURCE_BUFFERINGCOUNT_ID = 21_i32
    MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22_i32
    MFNETSOURCE_SIGNEDSESSION_ID = 23_i32
    MFNETSOURCE_MAXBITRATE_ID = 24_i32
    MFNETSOURCE_RECEPTION_QUALITY_ID = 25_i32
    MFNETSOURCE_RECOVEREDPACKETS_ID = 26_i32
    MFNETSOURCE_VBR_ID = 27_i32
    MFNETSOURCE_DOWNLOADPROGRESS_ID = 28_i32
    MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29_i32
  end
  enum MFNET_PROXYSETTINGS
    MFNET_PROXYSETTING_NONE = 0_i32
    MFNET_PROXYSETTING_MANUAL = 1_i32
    MFNET_PROXYSETTING_AUTO = 2_i32
    MFNET_PROXYSETTING_BROWSER = 3_i32
  end
  enum MFPOLICYMANAGER_ACTION
    PEACTION_NO = 0_i32
    PEACTION_PLAY = 1_i32
    PEACTION_COPY = 2_i32
    PEACTION_EXPORT = 3_i32
    PEACTION_EXTRACT = 4_i32
    PEACTION_RESERVED1 = 5_i32
    PEACTION_RESERVED2 = 6_i32
    PEACTION_RESERVED3 = 7_i32
    PEACTION_LAST = 7_i32
  end
  enum MF_OPM_CGMSA_PROTECTION_LEVEL
    MF_OPM_CGMSA_OFF = 0_i32
    MF_OPM_CGMSA_COPY_FREELY = 1_i32
    MF_OPM_CGMSA_COPY_NO_MORE = 2_i32
    MF_OPM_CGMSA_COPY_ONE_GENERATION = 3_i32
    MF_OPM_CGMSA_COPY_NEVER = 4_i32
    MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8_i32
  end
  enum MF_OPM_ACP_PROTECTION_LEVEL
    MF_OPM_ACP_OFF = 0_i32
    MF_OPM_ACP_LEVEL_ONE = 1_i32
    MF_OPM_ACP_LEVEL_TWO = 2_i32
    MF_OPM_ACP_LEVEL_THREE = 3_i32
    MF_OPM_ACP_FORCE_ULONG = 2147483647_i32
  end
  enum MFAudioConstriction
    MFaudioConstrictionOff = 0_i32
    MFaudioConstriction48_16 = 1_i32
    MFaudioConstriction44_16 = 2_i32
    MFaudioConstriction14_14 = 3_i32
    MFaudioConstrictionMute = 4_i32
  end
  enum SAMPLE_PROTECTION_VERSION
    SAMPLE_PROTECTION_VERSION_NO = 0_i32
    SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1_i32
    SAMPLE_PROTECTION_VERSION_SCATTER = 2_i32
    SAMPLE_PROTECTION_VERSION_RC4 = 3_i32
    SAMPLE_PROTECTION_VERSION_AES128CTR = 4_i32
  end
  enum MF_TRANSCODE_TOPOLOGYMODE_FLAGS
    MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0_i32
    MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1_i32
  end
  enum MF_TRANSCODE_ADJUST_PROFILE_FLAGS
    MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0_i32
    MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1_i32
  end
  enum MF_VIDEO_PROCESSOR_ALGORITHM_TYPE
    MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0_i32
    MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1_i32
  end
  enum MF_MEDIAKEYSESSION_TYPE
    MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0_i32
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1_i32
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2_i32
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = 3_i32
  end
  enum MF_MEDIAKEY_STATUS
    MF_MEDIAKEY_STATUS_USABLE = 0_i32
    MF_MEDIAKEY_STATUS_EXPIRED = 1_i32
    MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2_i32
    MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3_i32
    MF_MEDIAKEY_STATUS_STATUS_PENDING = 4_i32
    MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5_i32
    MF_MEDIAKEY_STATUS_RELEASED = 6_i32
    MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = 7_i32
  end
  enum MF_MEDIAKEYSESSION_MESSAGETYPE
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0_i32
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1_i32
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2_i32
    MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3_i32
  end
  enum MF_CROSS_ORIGIN_POLICY
    MF_CROSS_ORIGIN_POLICY_NONE = 0_i32
    MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1_i32
    MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2_i32
  end
  enum MFSensorDeviceType
    MFSensorDeviceType_Unknown = 0_i32
    MFSensorDeviceType_Device = 1_i32
    MFSensorDeviceType_MediaSource = 2_i32
    MFSensorDeviceType_FrameProvider = 3_i32
    MFSensorDeviceType_SensorTransform = 4_i32
  end
  enum MFSensorStreamType
    MFSensorStreamType_Unknown = 0_i32
    MFSensorStreamType_Input = 1_i32
    MFSensorStreamType_Output = 2_i32
  end
  enum MFSensorDeviceMode
    MFSensorDeviceMode_Controller = 0_i32
    MFSensorDeviceMode_Shared = 1_i32
  end
  enum MFCameraIntrinsic_DistortionModelType
    MFCameraIntrinsic_DistortionModelType_6KT = 0_i32
    MFCameraIntrinsic_DistortionModelType_ArcTan = 1_i32
  end
  enum MFCameraOcclusionState
    MFCameraOcclusionState_Open = 0_i32
    MFCameraOcclusionState_OccludedByLid = 1_i32
    MFCameraOcclusionState_OccludedByCameraHardware = 2_i32
  end
  enum MFSampleAllocatorUsage
    MFSampleAllocatorUsage_UsesProvidedAllocator = 0_i32
    MFSampleAllocatorUsage_UsesCustomAllocator = 1_i32
    MFSampleAllocatorUsage_DoesNotAllocate = 2_i32
  end
  enum MFASF_INDEXER_FLAGS
    MFASF_INDEXER_WRITE_NEW_INDEX = 1_i32
    MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2_i32
    MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4_i32
  end
  enum MFASF_SPLITTERFLAGS
    MFASF_SPLITTER_REVERSE = 1_i32
    MFASF_SPLITTER_WMDRM = 2_i32
  end
  enum ASF_STATUSFLAGS
    ASF_STATUSFLAGS_INCOMPLETE = 1_i32
    ASF_STATUSFLAGS_NONFATAL_ERROR = 2_i32
  end
  enum MFASF_MULTIPLEXERFLAGS
    MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1_i32
  end
  enum MFASF_STREAMSELECTOR_FLAGS
    MFASF_STREAMSELECTOR_DISABLE_THINNING = 1_i32
    MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2_i32
  end
  enum ASF_SELECTION_STATUS
    ASF_STATUS_NOTSELECTED = 0_i32
    ASF_STATUS_CLEANPOINTSONLY = 1_i32
    ASF_STATUS_ALLDATAUNITS = 2_i32
  end
  enum MFSINK_WMDRMACTION
    MFSINK_WMDRMACTION_UNDEFINED = 0_i32
    MFSINK_WMDRMACTION_ENCODE = 1_i32
    MFSINK_WMDRMACTION_TRANSCODE = 2_i32
    MFSINK_WMDRMACTION_TRANSCRYPT = 3_i32
    MFSINK_WMDRMACTION_LAST = 3_i32
  end
  enum MF_CAPTURE_ENGINE_DEVICE_TYPE
    MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = 0_i32
    MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = 1_i32
  end
  enum MF_CAPTURE_ENGINE_SINK_TYPE
    MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = 0_i32
    MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = 1_i32
    MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = 2_i32
  end
  enum MF_CAPTURE_ENGINE_SOURCE : UInt32
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = 4294967290_u32
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = 4294967289_u32
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = 4294967288_u32
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = 4294967287_u32
    MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = 4294967286_u32
    MF_CAPTURE_ENGINE_MEDIASOURCE = 4294967295_u32
  end
  enum MF_CAPTURE_ENGINE_STREAM_CATEGORY
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = 0_i32
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = 1_i32
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = 2_i32
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = 3_i32
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = 4_i32
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = 5_i32
    MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = 6_i32
  end
  enum MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0_i32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1_i32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2_i32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3_i32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4_i32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5_i32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6_i32
    MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7_i32
  end
  enum MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE
    MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0_i32
    MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1_i32
  end
  enum MF_MT_D3D_RESOURCE_VERSION_ENUM
    MF_D3D11_RESOURCE = 0_i32
    MF_D3D12_RESOURCE = 1_i32
  end
  enum MFASYNC_WORKQUEUE_TYPE
    MF_STANDARD_WORKQUEUE = 0_i32
    MF_WINDOW_WORKQUEUE = 1_i32
    MF_MULTITHREADED_WORKQUEUE = 2_i32
  end
  enum MF_TOPOSTATUS
    MF_TOPOSTATUS_INVALID = 0_i32
    MF_TOPOSTATUS_READY = 100_i32
    MF_TOPOSTATUS_STARTED_SOURCE = 200_i32
    MF_TOPOSTATUS_DYNAMIC_CHANGED = 210_i32
    MF_TOPOSTATUS_SINK_SWITCHED = 300_i32
    MF_TOPOSTATUS_ENDED = 400_i32
  end
  enum MFSampleEncryptionProtectionScheme
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0_i32
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1_i32
    MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2_i32
  end
  @[Flags]
  enum MFT_ENUM_FLAG : UInt32
    MFT_ENUM_FLAG_SYNCMFT = 1_u32
    MFT_ENUM_FLAG_ASYNCMFT = 2_u32
    MFT_ENUM_FLAG_HARDWARE = 4_u32
    MFT_ENUM_FLAG_FIELDOFUSE = 8_u32
    MFT_ENUM_FLAG_LOCALMFT = 16_u32
    MFT_ENUM_FLAG_TRANSCODE_ONLY = 32_u32
    MFT_ENUM_FLAG_SORTANDFILTER = 64_u32
    MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = 192_u32
    MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = 320_u32
    MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = 576_u32
    MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = 1024_u32
    MFT_ENUM_FLAG_ALL = 63_u32
  end
  enum MFFrameSourceTypes
    MFFrameSourceTypes_Color = 1_i32
    MFFrameSourceTypes_Infrared = 2_i32
    MFFrameSourceTypes_Depth = 4_i32
    MFFrameSourceTypes_Image = 8_i32
    MFFrameSourceTypes_Custom = 128_i32
  end
  enum MFVideo3DFormat
    MFVideo3DSampleFormat_BaseView = 0_i32
    MFVideo3DSampleFormat_MultiView = 1_i32
    MFVideo3DSampleFormat_Packed_LeftRight = 2_i32
    MFVideo3DSampleFormat_Packed_TopBottom = 3_i32
  end
  enum MFVideo3DSampleFormat
    MFSampleExtension_3DVideo_MultiView = 1_i32
    MFSampleExtension_3DVideo_Packed = 0_i32
  end
  enum MFVideoRotationFormat
    MFVideoRotationFormat_0 = 0_i32
    MFVideoRotationFormat_90 = 90_i32
    MFVideoRotationFormat_180 = 180_i32
    MFVideoRotationFormat_270 = 270_i32
  end
  enum MFDepthMeasurement
    DistanceToFocalPlane = 0_i32
    DistanceToOpticalCenter = 1_i32
  end
  enum MF_CUSTOM_DECODE_UNIT_TYPE
    MF_DECODE_UNIT_NAL = 0_i32
    MF_DECODE_UNIT_SEI = 1_i32
  end
  enum MFVideoDRMFlags
    MFVideoDRMFlag_None = 0_i32
    MFVideoDRMFlag_AnalogProtected = 1_i32
    MFVideoDRMFlag_DigitallyProtected = 2_i32
  end
  enum MFVideoPadFlags
    MFVideoPadFlag_PAD_TO_None = 0_i32
    MFVideoPadFlag_PAD_TO_4x3 = 1_i32
    MFVideoPadFlag_PAD_TO_16x9 = 2_i32
  end
  enum MFVideoSrcContentHintFlags
    MFVideoSrcContentHintFlag_None = 0_i32
    MFVideoSrcContentHintFlag_16x9 = 1_i32
    MFVideoSrcContentHintFlag_235_1 = 2_i32
  end
  enum MFWaveFormatExConvertFlags
    MFWaveFormatExConvertFlag_Normal = 0_i32
    MFWaveFormatExConvertFlag_ForceExtensible = 1_i32
  end
  enum EAllocationType
    Eallocationtypedynamic = 0_i32
    Eallocationtypert = 1_i32
    Eallocationtypepageable = 2_i32
    Eallocationtypeignore = 3_i32
  end
  enum MF_MEDIA_ENGINE_ERR
    MF_MEDIA_ENGINE_ERR_NOERROR = 0_i32
    MF_MEDIA_ENGINE_ERR_ABORTED = 1_i32
    MF_MEDIA_ENGINE_ERR_NETWORK = 2_i32
    MF_MEDIA_ENGINE_ERR_DECODE = 3_i32
    MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4_i32
    MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5_i32
  end
  enum MF_MEDIA_ENGINE_EVENT
    MF_MEDIA_ENGINE_EVENT_LOADSTART = 1_i32
    MF_MEDIA_ENGINE_EVENT_PROGRESS = 2_i32
    MF_MEDIA_ENGINE_EVENT_SUSPEND = 3_i32
    MF_MEDIA_ENGINE_EVENT_ABORT = 4_i32
    MF_MEDIA_ENGINE_EVENT_ERROR = 5_i32
    MF_MEDIA_ENGINE_EVENT_EMPTIED = 6_i32
    MF_MEDIA_ENGINE_EVENT_STALLED = 7_i32
    MF_MEDIA_ENGINE_EVENT_PLAY = 8_i32
    MF_MEDIA_ENGINE_EVENT_PAUSE = 9_i32
    MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10_i32
    MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11_i32
    MF_MEDIA_ENGINE_EVENT_WAITING = 12_i32
    MF_MEDIA_ENGINE_EVENT_PLAYING = 13_i32
    MF_MEDIA_ENGINE_EVENT_CANPLAY = 14_i32
    MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15_i32
    MF_MEDIA_ENGINE_EVENT_SEEKING = 16_i32
    MF_MEDIA_ENGINE_EVENT_SEEKED = 17_i32
    MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18_i32
    MF_MEDIA_ENGINE_EVENT_ENDED = 19_i32
    MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20_i32
    MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21_i32
    MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22_i32
    MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000_i32
    MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001_i32
    MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002_i32
    MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003_i32
    MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004_i32
    MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005_i32
    MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006_i32
    MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007_i32
    MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008_i32
    MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009_i32
    MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010_i32
    MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011_i32
    MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012_i32
    MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013_i32
    MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014_i32
    MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015_i32
    MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016_i32
  end
  enum MF_MEDIA_ENGINE_NETWORK
    MF_MEDIA_ENGINE_NETWORK_EMPTY = 0_i32
    MF_MEDIA_ENGINE_NETWORK_IDLE = 1_i32
    MF_MEDIA_ENGINE_NETWORK_LOADING = 2_i32
    MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3_i32
  end
  enum MF_MEDIA_ENGINE_READY
    MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0_i32
    MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1_i32
    MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2_i32
    MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3_i32
    MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4_i32
  end
  enum MF_MEDIA_ENGINE_CANPLAY
    MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0_i32
    MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1_i32
    MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2_i32
  end
  enum MF_MEDIA_ENGINE_PRELOAD
    MF_MEDIA_ENGINE_PRELOAD_MISSING = 0_i32
    MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1_i32
    MF_MEDIA_ENGINE_PRELOAD_NONE = 2_i32
    MF_MEDIA_ENGINE_PRELOAD_METADATA = 3_i32
    MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4_i32
  end
  enum MF_MEDIA_ENGINE_S3D_PACKING_MODE
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0_i32
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1_i32
    MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2_i32
  end
  enum MF_MEDIA_ENGINE_STATISTIC
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0_i32
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1_i32
    MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2_i32
    MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3_i32
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4_i32
    MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5_i32
    MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6_i32
    MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7_i32
  end
  enum MF_MEDIA_ENGINE_SEEK_MODE
    MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0_i32
    MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1_i32
  end
  enum MF_MEDIA_ENGINE_EXTENSION_TYPE
    MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0_i32
    MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1_i32
  end
  enum MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1_i32
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2_i32
    MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4_i32
  end
  enum MF_MSE_VP9_SUPPORT_TYPE
    MF_MSE_VP9_SUPPORT_DEFAULT = 0_i32
    MF_MSE_VP9_SUPPORT_ON = 1_i32
    MF_MSE_VP9_SUPPORT_OFF = 2_i32
  end
  enum MF_MSE_OPUS_SUPPORT_TYPE
    MF_MSE_OPUS_SUPPORT_ON = 0_i32
    MF_MSE_OPUS_SUPPORT_OFF = 1_i32
  end
  enum MF_MSE_APPEND_MODE
    MF_MSE_APPEND_MODE_SEGMENTS = 0_i32
    MF_MSE_APPEND_MODE_SEQUENCE = 1_i32
  end
  enum MF_MSE_READY
    MF_MSE_READY_CLOSED = 1_i32
    MF_MSE_READY_OPEN = 2_i32
    MF_MSE_READY_ENDED = 3_i32
  end
  enum MF_MSE_ERROR
    MF_MSE_ERROR_NOERROR = 0_i32
    MF_MSE_ERROR_NETWORK = 1_i32
    MF_MSE_ERROR_DECODE = 2_i32
    MF_MSE_ERROR_UNKNOWN_ERROR = 3_i32
  end
  enum MF_MEDIA_ENGINE_KEYERR
    MF_MEDIAENGINE_KEYERR_UNKNOWN = 1_i32
    MF_MEDIAENGINE_KEYERR_CLIENT = 2_i32
    MF_MEDIAENGINE_KEYERR_SERVICE = 3_i32
    MF_MEDIAENGINE_KEYERR_OUTPUT = 4_i32
    MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5_i32
    MF_MEDIAENGINE_KEYERR_DOMAIN = 6_i32
  end
  enum MF_HDCP_STATUS
    MF_HDCP_STATUS_ON = 0_i32
    MF_HDCP_STATUS_OFF = 1_i32
    MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2_i32
  end
  enum MF_MEDIA_ENGINE_OPM_STATUS
    MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0_i32
    MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1_i32
    MF_MEDIA_ENGINE_OPM_FAILED_VM = 2_i32
    MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3_i32
    MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4_i32
    MF_MEDIA_ENGINE_OPM_FAILED = 5_i32
  end
  enum MF_MEDIA_ENGINE_CREATEFLAGS
    MF_MEDIA_ENGINE_AUDIOONLY = 1_i32
    MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = 2_i32
    MF_MEDIA_ENGINE_FORCEMUTE = 4_i32
    MF_MEDIA_ENGINE_REAL_TIME_MODE = 8_i32
    MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = 16_i32
    MF_MEDIA_ENGINE_CREATEFLAGS_MASK = 31_i32
  end
  enum MF_MEDIA_ENGINE_PROTECTION_FLAGS
    MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1_i32
    MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2_i32
    MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4_i32
  end
  enum MF_TIMED_TEXT_TRACK_KIND
    MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0_i32
    MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1_i32
    MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2_i32
    MF_TIMED_TEXT_TRACK_KIND_METADATA = 3_i32
  end
  enum MF_TIMED_TEXT_UNIT_TYPE
    MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0_i32
    MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1_i32
  end
  enum MF_TIMED_TEXT_FONT_STYLE
    MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0_i32
    MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1_i32
    MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2_i32
  end
  enum MF_TIMED_TEXT_ALIGNMENT
    MF_TIMED_TEXT_ALIGNMENT_START = 0_i32
    MF_TIMED_TEXT_ALIGNMENT_END = 1_i32
    MF_TIMED_TEXT_ALIGNMENT_CENTER = 2_i32
  end
  enum MF_TIMED_TEXT_DISPLAY_ALIGNMENT
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0_i32
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1_i32
    MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2_i32
  end
  enum MF_TIMED_TEXT_DECORATION
    MF_TIMED_TEXT_DECORATION_NONE = 0_i32
    MF_TIMED_TEXT_DECORATION_UNDERLINE = 1_i32
    MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2_i32
    MF_TIMED_TEXT_DECORATION_OVERLINE = 4_i32
  end
  enum MF_TIMED_TEXT_WRITING_MODE
    MF_TIMED_TEXT_WRITING_MODE_LRTB = 0_i32
    MF_TIMED_TEXT_WRITING_MODE_RLTB = 1_i32
    MF_TIMED_TEXT_WRITING_MODE_TBRL = 2_i32
    MF_TIMED_TEXT_WRITING_MODE_TBLR = 3_i32
    MF_TIMED_TEXT_WRITING_MODE_LR = 4_i32
    MF_TIMED_TEXT_WRITING_MODE_RL = 5_i32
    MF_TIMED_TEXT_WRITING_MODE_TB = 6_i32
  end
  enum MF_TIMED_TEXT_SCROLL_MODE
    MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0_i32
    MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1_i32
  end
  enum MF_TIMED_TEXT_ERROR_CODE
    MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0_i32
    MF_TIMED_TEXT_ERROR_CODE_FATAL = 1_i32
    MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2_i32
    MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3_i32
    MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4_i32
  end
  enum MF_TIMED_TEXT_CUE_EVENT
    MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0_i32
    MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1_i32
    MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2_i32
  end
  enum MF_TIMED_TEXT_TRACK_READY_STATE
    MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0_i32
    MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1_i32
    MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2_i32
    MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3_i32
  end
  enum MF_TIMED_TEXT_RUBY_POSITION
    MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0_i32
    MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1_i32
    MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2_i32
  end
  enum MF_TIMED_TEXT_RUBY_ALIGN
    MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0_i32
    MF_TIMED_TEXT_RUBY_ALIGN_START = 1_i32
    MF_TIMED_TEXT_RUBY_ALIGN_END = 2_i32
    MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3_i32
    MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4_i32
    MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5_i32
  end
  enum MF_TIMED_TEXT_RUBY_RESERVE
    MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0_i32
    MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1_i32
    MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2_i32
    MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3_i32
    MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4_i32
  end
  enum MF_TIMED_TEXT_BOUTEN_TYPE
    MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0_i32
    MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1_i32
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2_i32
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3_i32
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4_i32
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5_i32
    MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6_i32
    MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7_i32
  end
  enum MF_TIMED_TEXT_BOUTEN_POSITION
    MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0_i32
    MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1_i32
    MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2_i32
  end
  enum MF_MEDIA_ENGINE_STREAMTYPE_FAILED
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0_i32
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1_i32
    MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2_i32
  end
  enum MF_MEDIAKEYS_REQUIREMENT
    MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1_i32
    MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2_i32
    MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3_i32
  end
  enum MF_SOURCE_READER_FLAG
    MF_SOURCE_READERF_ERROR = 1_i32
    MF_SOURCE_READERF_ENDOFSTREAM = 2_i32
    MF_SOURCE_READERF_NEWSTREAM = 4_i32
    MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 16_i32
    MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 32_i32
    MF_SOURCE_READERF_STREAMTICK = 256_i32
    MF_SOURCE_READERF_ALLEFFECTSREMOVED = 512_i32
  end
  enum MF_SOURCE_READER_CONTROL_FLAG
    MF_SOURCE_READER_CONTROLF_DRAIN = 1_i32
  end
  enum MF_SOURCE_READER_CONSTANTS
    MF_SOURCE_READER_INVALID_STREAM_INDEX = -1_i32
    MF_SOURCE_READER_ALL_STREAMS = -2_i32
    MF_SOURCE_READER_ANY_STREAM = -2_i32
    MF_SOURCE_READER_FIRST_AUDIO_STREAM = -3_i32
    MF_SOURCE_READER_FIRST_VIDEO_STREAM = -4_i32
    MF_SOURCE_READER_MEDIASOURCE = -1_i32
  end
  enum MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS
    MF_SOURCE_READER_CURRENT_TYPE_INDEX = -1_i32
  end
  enum MF_SINK_WRITER_CONSTANTS : UInt32
    MF_SINK_WRITER_INVALID_STREAM_INDEX = 4294967295_u32
    MF_SINK_WRITER_ALL_STREAMS = 4294967294_u32
    MF_SINK_WRITER_MEDIASINK = 4294967295_u32
  end
  enum MFVideoAspectRatioMode
    MFVideoARMode_None = 0_i32
    MFVideoARMode_PreservePicture = 1_i32
    MFVideoARMode_PreservePixel = 2_i32
    MFVideoARMode_NonLinearStretch = 4_i32
    MFVideoARMode_Mask = 7_i32
  end
  enum MFVideoRenderPrefs
    MFVideoRenderPrefs_DoNotRenderBorder = 1_i32
    MFVideoRenderPrefs_DoNotClipToDevice = 2_i32
    MFVideoRenderPrefs_AllowOutputThrottling = 4_i32
    MFVideoRenderPrefs_ForceOutputThrottling = 8_i32
    MFVideoRenderPrefs_ForceBatching = 16_i32
    MFVideoRenderPrefs_AllowBatching = 32_i32
    MFVideoRenderPrefs_ForceScaling = 64_i32
    MFVideoRenderPrefs_AllowScaling = 128_i32
    MFVideoRenderPrefs_DoNotRepaintOnStop = 256_i32
    MFVideoRenderPrefs_Mask = 511_i32
  end
  enum MFVP_MESSAGE_TYPE
    MFVP_MESSAGE_FLUSH = 0_i32
    MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1_i32
    MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2_i32
    MFVP_MESSAGE_BEGINSTREAMING = 3_i32
    MFVP_MESSAGE_ENDSTREAMING = 4_i32
    MFVP_MESSAGE_ENDOFSTREAM = 5_i32
    MFVP_MESSAGE_STEP = 6_i32
    MFVP_MESSAGE_CANCELSTEP = 7_i32
  end
  enum MFVideoMixPrefs
    MFVideoMixPrefs_ForceHalfInterlace = 1_i32
    MFVideoMixPrefs_AllowDropToHalfInterlace = 2_i32
    MFVideoMixPrefs_AllowDropToBob = 4_i32
    MFVideoMixPrefs_ForceBob = 8_i32
    MFVideoMixPrefs_EnableRotation = 16_i32
    MFVideoMixPrefs_Mask = 31_i32
  end
  enum EVRFilterConfigPrefs
    EVRFilterConfigPrefs_EnableQoS = 1_i32
    EVRFilterConfigPrefs_Mask = 1_i32
  end
  enum MF_SERVICE_LOOKUP_TYPE
    MF_SERVICE_LOOKUP_UPSTREAM = 0_i32
    MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1_i32
    MF_SERVICE_LOOKUP_DOWNSTREAM = 2_i32
    MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3_i32
    MF_SERVICE_LOOKUP_ALL = 4_i32
    MF_SERVICE_LOOKUP_GLOBAL = 5_i32
  end
  enum MFP_CREATION_OPTIONS
    MFP_OPTION_NONE = 0_i32
    MFP_OPTION_FREE_THREADED_CALLBACK = 1_i32
    MFP_OPTION_NO_MMCSS = 2_i32
    MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4_i32
  end
  enum MFP_MEDIAPLAYER_STATE
    MFP_MEDIAPLAYER_STATE_EMPTY = 0_i32
    MFP_MEDIAPLAYER_STATE_STOPPED = 1_i32
    MFP_MEDIAPLAYER_STATE_PLAYING = 2_i32
    MFP_MEDIAPLAYER_STATE_PAUSED = 3_i32
    MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4_i32
  end
  enum MFP_MEDIAITEM_CHARACTERISTICS_
    MFP_MEDIAITEM_IS_LIVE = 1_i32
    MFP_MEDIAITEM_CAN_SEEK = 2_i32
    MFP_MEDIAITEM_CAN_PAUSE = 4_i32
    MFP_MEDIAITEM_HAS_SLOW_SEEK = 8_i32
  end
  enum MFP_CREDENTIAL_FLAGS_
    MFP_CREDENTIAL_PROMPT = 1_i32
    MFP_CREDENTIAL_SAVE = 2_i32
    MFP_CREDENTIAL_DO_NOT_CACHE = 4_i32
    MFP_CREDENTIAL_CLEAR_TEXT = 8_i32
    MFP_CREDENTIAL_PROXY = 16_i32
    MFP_CREDENTIAL_LOGGED_ON_USER = 32_i32
  end
  enum MFP_EVENT_TYPE
    MFP_EVENT_TYPE_PLAY = 0_i32
    MFP_EVENT_TYPE_PAUSE = 1_i32
    MFP_EVENT_TYPE_STOP = 2_i32
    MFP_EVENT_TYPE_POSITION_SET = 3_i32
    MFP_EVENT_TYPE_RATE_SET = 4_i32
    MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5_i32
    MFP_EVENT_TYPE_MEDIAITEM_SET = 6_i32
    MFP_EVENT_TYPE_FRAME_STEP = 7_i32
    MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8_i32
    MFP_EVENT_TYPE_MF = 9_i32
    MFP_EVENT_TYPE_ERROR = 10_i32
    MFP_EVENT_TYPE_PLAYBACK_ENDED = 11_i32
    MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12_i32
  end
  enum MF_SHARING_ENGINE_EVENT
    MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000_i32
    MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001_i32
    MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002_i32
    MF_SHARING_ENGINE_EVENT_STOPPED = 2003_i32
    MF_SHARING_ENGINE_EVENT_ERROR = 2501_i32
  end
  enum MF_MEDIA_SHARING_ENGINE_EVENT
    MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000_i32
  end
  enum PLAYTO_SOURCE_CREATEFLAGS
    PLAYTO_SOURCE_NONE = 0_i32
    PLAYTO_SOURCE_IMAGE = 1_i32
    PLAYTO_SOURCE_AUDIO = 2_i32
    PLAYTO_SOURCE_VIDEO = 4_i32
    PLAYTO_SOURCE_PROTECTED = 8_i32
  end
  enum MFVideoAlphaBitmapFlags
    MFVideoAlphaBitmap_EntireDDS = 1_i32
    MFVideoAlphaBitmap_SrcColorKey = 2_i32
    MFVideoAlphaBitmap_SrcRect = 4_i32
    MFVideoAlphaBitmap_DestRect = 8_i32
    MFVideoAlphaBitmap_FilterMode = 16_i32
    MFVideoAlphaBitmap_Alpha = 32_i32
    MFVideoAlphaBitmap_BitMask = 63_i32
  end
  enum MFVirtualCameraType
    MFVirtualCameraType_SoftwareCameraSource = 0_i32
  end
  enum MFVirtualCameraLifetime
    MFVirtualCameraLifetime_Session = 0_i32
    MFVirtualCameraLifetime_System = 1_i32
  end
  enum MFVirtualCameraAccess
    MFVirtualCameraAccess_CurrentUser = 0_i32
    MFVirtualCameraAccess_AllUsers = 1_i32
  end
  enum OPM_HDCP_TYPE
    OPM_HDCP_TYPE_0 = 0_i32
    OPM_HDCP_TYPE_1 = 1_i32
  end
  enum OPM_HDCP_STATUS
    OPM_HDCP_STATUS_ON = 0_i32
    OPM_HDCP_STATUS_OFF = 1_i32
  end

  @[Extern]
  record AM_MEDIA_TYPE,
    majortype : LibC::GUID,
    subtype : LibC::GUID,
    bFixedSizeSamples : Win32cr::Foundation::BOOL,
    bTemporalCompression : Win32cr::Foundation::BOOL,
    lSampleSize : UInt32,
    formattype : LibC::GUID,
    pUnk : Void*,
    cbFormat : UInt32,
    pbFormat : UInt8*

  @[Extern]
  record CodecAPIEventData,
    guid : LibC::GUID,
    dataLength : UInt32,
    reserved : UInt32[3]

  @[Extern]
  record VIDEOINFOHEADER,
    rcSource : Win32cr::Foundation::RECT,
    rcTarget : Win32cr::Foundation::RECT,
    dwBitRate : UInt32,
    dwBitErrorRate : UInt32,
    avg_time_per_frame : Int64,
    bmiHeader : Win32cr::Graphics::Gdi::BITMAPINFOHEADER

  @[Extern]
  record MPEG1VIDEOINFO,
    hdr : Win32cr::Media::MediaFoundation::VIDEOINFOHEADER,
    dwStartTimeCode : UInt32,
    cbSequenceHeader : UInt32,
    bSequenceHeader : UInt8*

  @[Extern]
  record VIDEOINFOHEADER2,
    rcSource : Win32cr::Foundation::RECT,
    rcTarget : Win32cr::Foundation::RECT,
    dwBitRate : UInt32,
    dwBitErrorRate : UInt32,
    avg_time_per_frame : Int64,
    dwInterlaceFlags : UInt32,
    dwCopyProtectFlags : UInt32,
    dwPictAspectRatioX : UInt32,
    dwPictAspectRatioY : UInt32,
    anonymous : Anonymous_e__Union_,
    dwReserved2 : UInt32,
    bmiHeader : Win32cr::Graphics::Gdi::BITMAPINFOHEADER do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      dwControlFlags : UInt32,
      dwReserved1 : UInt32

  end

  @[Extern]
  record MPEG2VIDEOINFO,
    hdr : Win32cr::Media::MediaFoundation::VIDEOINFOHEADER2,
    dwStartTimeCode : UInt32,
    cbSequenceHeader : UInt32,
    dwProfile : UInt32,
    dwLevel : UInt32,
    dwFlags : Win32cr::Media::MediaFoundation::MPEG2VIDEOINFO_FLAGS,
    dwSequenceHeader : UInt32*

  @[Extern]
  record D3DOVERLAYCAPS,
    caps : UInt32,
    max_overlay_display_width : UInt32,
    max_overlay_display_height : UInt32

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  record D3DCONTENTPROTECTIONCAPS,
    caps : UInt32,
    key_exchange_type : LibC::GUID,
    buffer_alignment_start : UInt32,
    block_alignment_size : UInt32,
    protected_memory_size : UInt64
  {% end %}

  @[Extern]
  record D3D12_VIDEO_FORMAT,
    format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    color_space : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE

  @[Extern]
  record D3D12_VIDEO_SAMPLE,
    width : UInt32,
    height : UInt32,
    format : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FORMAT

  @[Extern]
  record D3D12_VIDEO_DECODE_CONFIGURATION,
    decode_profile : LibC::GUID,
    bitstream_encryption : Win32cr::Media::MediaFoundation::D3D12_BITSTREAM_ENCRYPTION_TYPE,
    interlace_type : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE

  @[Extern]
  record D3D12_VIDEO_DECODER_DESC,
    node_mask : UInt32,
    configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION

  @[Extern]
  record D3D12_VIDEO_DECODER_HEAP_DESC,
    node_mask : UInt32,
    configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION,
    decode_width : UInt32,
    decode_height : UInt32,
    format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    bit_rate : UInt32,
    max_decode_picture_buffer_count : UInt32

  @[Extern]
  record D3D12_VIDEO_SIZE_RANGE,
    max_width : UInt32,
    max_height : UInt32,
    min_width : UInt32,
    min_height : UInt32

  @[Extern]
  record D3D12_VIDEO_PROCESS_ALPHA_BLENDING,
    enable : Win32cr::Foundation::BOOL,
    alpha : Float32

  @[Extern]
  record D3D12_VIDEO_PROCESS_LUMA_KEY,
    enable : Win32cr::Foundation::BOOL,
    lower : Float32,
    upper : Float32

  @[Extern]
  record D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC,
    format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    color_space : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE,
    source_aspect_ratio : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    destination_aspect_ratio : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    source_size_range : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SIZE_RANGE,
    destination_size_range : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SIZE_RANGE,
    enable_orientation : Win32cr::Foundation::BOOL,
    filter_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    stereo_format : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FRAME_STEREO_FORMAT,
    field_type : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FIELD_TYPE,
    deinterlace_mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    enable_alpha_blending : Win32cr::Foundation::BOOL,
    luma_key : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_LUMA_KEY,
    num_past_frames : UInt32,
    num_future_frames : UInt32,
    enable_auto_processing : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC,
    format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    color_space : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE,
    alpha_fill_mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE,
    alpha_fill_mode_source_stream_index : UInt32,
    background_color : Float32[4],
    frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    enable_stereo : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT,
    node_index : UInt32,
    configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION,
    width : UInt32,
    height : UInt32,
    decode_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    bit_rate : UInt32,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_SUPPORT_FLAGS,
    configuration_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS,
    decode_tier : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_TIER

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT,
    node_index : UInt32,
    profile_count : UInt32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES,
    node_index : UInt32,
    profile_count : UInt32,
    pProfiles : LibC::GUID*

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT,
    node_index : UInt32,
    configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION,
    format_count : UInt32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS,
    node_index : UInt32,
    configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION,
    format_count : UInt32,
    pOutputFormats : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT*

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE,
    io_coherent : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM,
    node_index : UInt32,
    decode_profile : LibC::GUID,
    width : UInt32,
    height : UInt32,
    decode_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    components : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS,
    bin_count : UInt32,
    counter_bit_depth : UInt32

  @[Extern]
  record D3D12_VIDEO_SCALE_SUPPORT,
    output_size_range : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SIZE_RANGE,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SCALE_SUPPORT_FLAGS

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT,
    node_index : UInt32,
    configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION,
    decode_sample : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SAMPLE,
    output_format : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FORMAT,
    frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    bit_rate : UInt32,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS,
    scale_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SCALE_SUPPORT

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE,
    video_decoder_heap_desc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC,
    memory_pool_l0_size : UInt64,
    memory_pool_l1_size : UInt64

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE,
    node_mask : UInt32,
    pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*,
    num_input_stream_descs : UInt32,
    pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*,
    memory_pool_l0_size : UInt64,
    memory_pool_l1_size : UInt64

  @[Extern]
  record D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS,
    status : UInt64,
    num_macroblocks_affected : UInt64,
    frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    bit_rate : UInt32

  @[Extern]
  record D3D12_VIDEO_DECODE_FRAME_ARGUMENT,
    type__ : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_ARGUMENT_TYPE,
    size : UInt32,
    pData : Void*

  @[Extern]
  record D3D12_VIDEO_DECODE_REFERENCE_FRAMES,
    num_texture2_ds : UInt32,
    ppTexture2Ds : Void**,
    pSubresources : UInt32*,
    ppHeaps : Void**

  @[Extern]
  record D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM,
    pBuffer : Void*,
    offset : UInt64,
    size : UInt64

  @[Extern]
  record D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS,
    enable : Win32cr::Foundation::BOOL,
    pReferenceTexture2D : Void*,
    reference_subresource : UInt32,
    output_color_space : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE,
    decode_color_space : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE

  @[Extern]
  record D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS,
    num_frame_arguments : UInt32,
    frame_arguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_FRAME_ARGUMENT[10],
    reference_frames : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_REFERENCE_FRAMES,
    compressed_bitstream : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM,
    pHeap : Void*

  @[Extern]
  record D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS,
    pOutputTexture2D : Void*,
    output_subresource : UInt32,
    conversion_arguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS

  @[Extern]
  record D3D12_VIDEO_PROCESS_FILTER_RANGE,
    minimum : Int32,
    maximum : Int32,
    default : Int32,
    multiplier : Float32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT,
    node_index : UInt32,
    input_sample : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SAMPLE,
    input_field_type : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FIELD_TYPE,
    input_stereo_format : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FRAME_STEREO_FORMAT,
    input_frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    output_format : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FORMAT,
    output_stereo_format : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FRAME_STEREO_FORMAT,
    output_frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_SUPPORT_FLAGS,
    scale_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SCALE_SUPPORT,
    feature_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_FEATURE_FLAGS,
    deinterlace_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    auto_processing_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS,
    filter_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    filter_range_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_RANGE[32]

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS,
    node_index : UInt32,
    max_input_streams : UInt32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO,
    node_index : UInt32,
    deinterlace_mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS,
    filters : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_FILTER_FLAGS,
    feature_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_FEATURE_FLAGS,
    input_frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    output_frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL,
    enable_auto_processing : Win32cr::Foundation::BOOL,
    past_frames : UInt32,
    future_frames : UInt32

  @[Extern]
  record D3D12_VIDEO_PROCESS_REFERENCE_SET,
    num_past_frames : UInt32,
    ppPastFrames : Void**,
    pPastSubresources : UInt32*,
    num_future_frames : UInt32,
    ppFutureFrames : Void**,
    pFutureSubresources : UInt32*

  @[Extern]
  record D3D12_VIDEO_PROCESS_TRANSFORM,
    source_rectangle : Win32cr::Foundation::RECT,
    destination_rectangle : Win32cr::Foundation::RECT,
    orientation : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_ORIENTATION

  @[Extern]
  record D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE,
    output_index : UInt32,
    input_frame_or_field : UInt32

  @[Extern]
  record D3D12_VIDEO_PROCESS_INPUT_STREAM,
    pTexture2D : Void*,
    subresource : UInt32,
    reference_set : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_REFERENCE_SET

  @[Extern]
  record D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS,
    input_stream : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM[2],
    transform : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_TRANSFORM,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS,
    rate_info : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE,
    filter_levels : Int32[32],
    alpha_blending : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_ALPHA_BLENDING

  @[Extern]
  record D3D12_VIDEO_PROCESS_OUTPUT_STREAM,
    pTexture2D : Void*,
    subresource : UInt32

  @[Extern]
  record D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS,
    output_stream : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM[2],
    target_rectangle : Win32cr::Foundation::RECT

  @[Extern]
  record D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM,
    offset : UInt64,
    pBuffer : Void*

  @[Extern]
  record D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1,
    enable : Win32cr::Foundation::BOOL,
    pReferenceTexture2D : Void*,
    reference_subresource : UInt32,
    output_color_space : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE,
    decode_color_space : Win32cr::Graphics::Dxgi::Common::DXGI_COLOR_SPACE_TYPE,
    output_width : UInt32,
    output_height : UInt32

  @[Extern]
  record D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1,
    pOutputTexture2D : Void*,
    output_subresource : UInt32,
    conversion_arguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1,
    histograms : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM[4]

  @[Extern]
  record D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1,
    input_stream : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM[2],
    transform : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_TRANSFORM,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS,
    rate_info : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE,
    filter_levels : Int32[32],
    alpha_blending : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_ALPHA_BLENDING,
    field_type : Win32cr::Media::MediaFoundation::D3D12_VIDEO_FIELD_TYPE

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT,
    node_index : UInt32,
    video_decode_support : Win32cr::Foundation::BOOL,
    video_process_support : Win32cr::Foundation::BOOL,
    video_encode_support : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR,
    node_index : UInt32,
    input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    block_size_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS,
    precision_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS,
    size_range : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SIZE_RANGE

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE,
    node_index : UInt32,
    input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    block_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    precision : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    size_range : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SIZE_RANGE,
    protected__ : Win32cr::Foundation::BOOL,
    motion_vector_heap_memory_pool_l0_size : UInt64,
    motion_vector_heap_memory_pool_l1_size : UInt64,
    motion_estimator_memory_pool_l0_size : UInt64,
    motion_estimator_memory_pool_l1_size : UInt64

  @[Extern]
  record D3D12_VIDEO_MOTION_ESTIMATOR_DESC,
    node_mask : UInt32,
    input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    block_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    precision : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    size_range : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SIZE_RANGE

  @[Extern]
  record D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC,
    node_mask : UInt32,
    input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    block_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE,
    precision : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION,
    size_range : Win32cr::Media::MediaFoundation::D3D12_VIDEO_SIZE_RANGE

  @[Extern]
  record D3D12_RESOURCE_COORDINATE,
    x : UInt64,
    y : UInt32,
    z : UInt32,
    subresource_index : UInt32

  @[Extern]
  record D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT,
    pMotionVectorHeap : Void*

  @[Extern]
  record D3D12_VIDEO_MOTION_ESTIMATOR_INPUT,
    pInputTexture2D : Void*,
    input_subresource_index : UInt32,
    pReferenceTexture2D : Void*,
    reference_subresource_index : UInt32,
    pHintMotionVectorHeap : Void*

  @[Extern]
  record D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT,
    pMotionVectorTexture2D : Void*,
    motion_vector_coordinate : Win32cr::Media::MediaFoundation::D3D12_RESOURCE_COORDINATE

  @[Extern]
  record D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT,
    pMotionVectorHeap : Void*,
    pixel_width : UInt32,
    pixel_height : UInt32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES,
    node_index : UInt32,
    configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_CONFIGURATION,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES,
    node_index : UInt32,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES,
    node_index : UInt32,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1,
    video_decoder_heap_desc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC,
    protected__ : Win32cr::Foundation::BOOL,
    memory_pool_l0_size : UInt64,
    memory_pool_l1_size : UInt64

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1,
    node_mask : UInt32,
    pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*,
    num_input_stream_descs : UInt32,
    pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*,
    protected__ : Win32cr::Foundation::BOOL,
    memory_pool_l0_size : UInt64,
    memory_pool_l1_size : UInt64

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT,
    node_index : UInt32,
    command_count : UInt32

  @[Extern]
  record D3D12_VIDEO_EXTENSION_COMMAND_INFO,
    command_id : LibC::GUID,
    name : Win32cr::Foundation::PWSTR,
    command_list_support_flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_SUPPORT_FLAGS

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS,
    node_index : UInt32,
    command_count : UInt32,
    pCommandInfos : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_INFO*

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT,
    command_id : LibC::GUID,
    stage : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE,
    parameter_count : UInt32,
    parameter_packing : UInt32

  @[Extern]
  record D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO,
    name : Win32cr::Foundation::PWSTR,
    type__ : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS,
    command_id : LibC::GUID,
    stage : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE,
    parameter_count : UInt32,
    pParameterInfos : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO*

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT,
    node_index : UInt32,
    command_id : LibC::GUID,
    pInputData : Void*,
    input_data_size_in_bytes : LibC::UIntPtrT,
    pOutputData : Void*,
    output_data_size_in_bytes : LibC::UIntPtrT

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE,
    node_index : UInt32,
    command_id : LibC::GUID,
    pCreationParameters : Void*,
    creation_parameters_size_in_bytes : LibC::UIntPtrT,
    memory_pool_l0_size : UInt64,
    memory_pool_l1_size : UInt64

  @[Extern]
  record D3D12_VIDEO_EXTENSION_COMMAND_DESC,
    node_mask : UInt32,
    command_id : LibC::GUID

  @[Extern]
  record D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP,
    constant_qp_full_intracoded_frame : UInt32,
    constant_qp_inter_predicted_frame_prev_ref_only : UInt32,
    constant_qp_inter_predicted_frame_bi_directional_ref : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR,
    initial_qp : UInt32,
    min_qp : UInt32,
    max_qp : UInt32,
    max_frame_bit_size : UInt64,
    target_bit_rate : UInt64,
    vbv_capacity : UInt64,
    initial_vbv_fullness : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR,
    initial_qp : UInt32,
    min_qp : UInt32,
    max_qp : UInt32,
    max_frame_bit_size : UInt64,
    target_avg_bit_rate : UInt64,
    peak_bit_rate : UInt64,
    vbv_capacity : UInt64,
    initial_vbv_fullness : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR,
    initial_qp : UInt32,
    min_qp : UInt32,
    max_qp : UInt32,
    max_frame_bit_size : UInt64,
    target_avg_bit_rate : UInt64,
    peak_bit_rate : UInt64,
    constant_quality_target : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pConfiguration_CQP : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP*,
      pConfiguration_CBR : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR*,
      pConfiguration_VBR : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR*,
      pConfiguration_QVBR : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR*

  end

  @[Extern]
  record D3D12_VIDEO_ENCODER_RATE_CONTROL,
    mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS,
    config_params : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS,
    target_frame_rate : Win32cr::Graphics::Dxgi::Common::DXGI_RATIONAL

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    is_supported : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_VIDEO_ENCODER_PROFILE_DESC,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pH264Profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_H264*,
      pHEVCProfile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_HEVC*

  end

  @[Extern]
  record D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC,
    level : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVELS_HEVC,
    tier : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_TIER_HEVC

  @[Extern]
  record D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pH264LevelSetting : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVELS_H264*,
      pHEVCLevelSetting : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC*

  end

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    is_supported : Win32cr::Foundation::BOOL,
    min_supported_level : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    max_supported_level : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    width : UInt32,
    height : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC,
    width_ratio : UInt32,
    height_ratio : UInt32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    resolution_ratios_count : UInt32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    resolution_ratios_count : UInt32,
    is_supported : Win32cr::Foundation::BOOL,
    min_resolution_supported : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    max_resolution_supported : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    resolution_width_multiple_requirement : UInt32,
    resolution_height_multiple_requirement : UInt32,
    pResolutionRatios : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC*

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    is_supported : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    rate_control_mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE,
    is_supported : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    level : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    intra_refresh_mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE,
    is_supported : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    level : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    subregion_mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE,
    is_supported : Win32cr::Foundation::BOOL

  @[Extern]
  record D3D12_VIDEO_ENCODER_HEAP_DESC,
    node_mask : UInt32,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_HEAP_FLAGS,
    encode_codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    encode_profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    encode_level : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    resolutions_list_count : UInt32,
    pResolutionList : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE,
    heap_desc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_HEAP_DESC,
    is_supported : Win32cr::Foundation::BOOL,
    memory_pool_l0_size : UInt64,
    memory_pool_l1_size : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS,
    disable_deblocking_filter_supported_modes : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS,
    min_luma_coding_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    max_luma_coding_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    min_luma_transform_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    max_luma_transform_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    max_transform_hierarchy_depth_inter : UInt8,
    max_transform_hierarchy_depth_intra : UInt8

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pH264Support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264*,
      pHEVCSupport : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC*

  end

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    is_supported : Win32cr::Foundation::BOOL,
    codec_support_limits : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264,
    max_l0_references_for_p : UInt32,
    max_l0_references_for_b : UInt32,
    max_l1_references_for_b : UInt32,
    max_long_term_references : UInt32,
    max_dpb_capacity : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC,
    max_l0_references_for_p : UInt32,
    max_l0_references_for_b : UInt32,
    max_l1_references_for_b : UInt32,
    max_long_term_references : UInt32,
    max_dpb_capacity : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pH264Support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264*,
      pHEVCSupport : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC*

  end

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    is_supported : Win32cr::Foundation::BOOL,
    picture_support : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264,
    configuration_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS,
    direct_mode_config : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES,
    disable_deblocking_filter_config : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC,
    configuration_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS,
    min_luma_coding_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    max_luma_coding_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE,
    min_luma_transform_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    max_luma_transform_unit_size : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE,
    max_transform_hierarchy_depth_inter : UInt8,
    max_transform_hierarchy_depth_intra : UInt8

  @[Extern]
  record D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pH264Config : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264*,
      pHEVCConfig : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC*

  end

  @[Extern]
  record D3D12_VIDEO_ENCODER_INTRA_REFRESH,
    mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE,
    intra_refresh_duration : UInt32

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS,
    max_subregions_number : UInt32,
    max_intra_refresh_frame_duration : UInt32,
    subregion_block_pixels_size : UInt32,
    qp_map_region_pixels_size : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264,
    gop_length : UInt32,
    p_picture_period : UInt32,
    pic_order_cnt_type : UInt8,
    log2_max_frame_num_minus4 : UInt8,
    log2_max_pic_order_cnt_lsb_minus4 : UInt8

  @[Extern]
  record D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC,
    gop_length : UInt32,
    p_picture_period : UInt32,
    log2_max_pic_order_cnt_lsb_minus4 : UInt8

  @[Extern]
  record D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pH264GroupOfPictures : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264*,
      pHEVCGroupOfPictures : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC*

  end

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    codec_configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION,
    codec_gop_sequence : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE,
    rate_control : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL,
    intra_refresh : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE,
    subregion_frame_encoding : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE,
    resolutions_list_count : UInt32,
    pResolutionList : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*,
    max_reference_frames_in_dpb : UInt32,
    validation_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_VALIDATION_FLAGS,
    support_flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_SUPPORT_FLAGS,
    suggested_profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    suggested_level : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING,
    pResolutionDependentSupport : Win32cr::Media::MediaFoundation::D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS*

  @[Extern]
  record D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS,
    node_index : UInt32,
    codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    picture_target_resolution : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    is_supported : Win32cr::Foundation::BOOL,
    compressed_bitstream_buffer_access_alignment : UInt32,
    encoder_metadata_buffer_access_alignment : UInt32,
    max_encoder_output_metadata_buffer_size : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_DESC,
    node_mask : UInt32,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FLAGS,
    encode_codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    encode_profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    codec_configuration : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION,
    max_motion_estimation_precision : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE

  @[Extern]
  record D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264,
    reconstructed_picture_resource_index : UInt32,
    is_long_term_reference : Win32cr::Foundation::BOOL,
    long_term_picture_idx : UInt32,
    picture_order_count_number : UInt32,
    frame_decoding_order_number : UInt32,
    temporal_layer_index : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION,
    memory_management_control_operation : UInt8,
    difference_of_pic_nums_minus1 : UInt32,
    long_term_pic_num : UInt32,
    long_term_frame_idx : UInt32,
    max_long_term_frame_idx_plus1 : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION,
    modification_of_pic_nums_idc : UInt8,
    abs_diff_pic_num_minus1 : UInt32,
    long_term_pic_num : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS,
    frame_type : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FRAME_TYPE_H264,
    pic_parameter_set_id : UInt32,
    idr_pic_id : UInt32,
    picture_order_count_number : UInt32,
    frame_decoding_order_number : UInt32,
    temporal_layer_index : UInt32,
    list0_reference_frames_count : UInt32,
    pList0ReferenceFrames : UInt32*,
    list1_reference_frames_count : UInt32,
    pList1ReferenceFrames : UInt32*,
    reference_frames_recon_picture_descriptors_count : UInt32,
    pReferenceFramesReconPictureDescriptors : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264*,
    adaptive_ref_pic_marking_mode_flag : UInt8,
    ref_pic_marking_operations_commands_count : UInt32,
    pRefPicMarkingOperationsCommands : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION*,
    list0_ref_pic_modifications_count : UInt32,
    pList0RefPicModifications : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION*,
    list1_ref_pic_modifications_count : UInt32,
    pList1RefPicModifications : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION*,
    qp_map_values_count : UInt32,
    pRateControlQPMap : Int8*

  @[Extern]
  record D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC,
    reconstructed_picture_resource_index : UInt32,
    is_ref_used_by_current_pic : Win32cr::Foundation::BOOL,
    is_long_term_reference : Win32cr::Foundation::BOOL,
    picture_order_count_number : UInt32,
    temporal_layer_index : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS,
    frame_type : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC,
    slice_pic_parameter_set_id : UInt32,
    picture_order_count_number : UInt32,
    temporal_layer_index : UInt32,
    list0_reference_frames_count : UInt32,
    pList0ReferenceFrames : UInt32*,
    list1_reference_frames_count : UInt32,
    pList1ReferenceFrames : UInt32*,
    reference_frames_recon_picture_descriptors_count : UInt32,
    pReferenceFramesReconPictureDescriptors : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC*,
    list0_ref_pic_modifications_count : UInt32,
    pList0RefPicModifications : UInt32*,
    list1_ref_pic_modifications_count : UInt32,
    pList1RefPicModifications : UInt32*,
    qp_map_values_count : UInt32,
    pRateControlQPMap : Int8*

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pH264PicData : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264*,
      pHEVCPicData : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC*

  end

  @[Extern]
  record D3D12_VIDEO_ENCODE_REFERENCE_FRAMES,
    num_texture2_ds : UInt32,
    ppTexture2Ds : Void**,
    pSubresources : UInt32*

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC,
    intra_refresh_frame_index : UInt32,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS,
    picture_control_codec_data : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA,
    reference_frames : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODE_REFERENCE_FRAMES

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      max_bytes_per_slice : UInt32,
      number_of_coding_units_per_slice : UInt32,
      number_of_rows_per_slice : UInt32,
      number_of_slices_per_frame : UInt32

  end

  @[Extern]
  record D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA,
    data_size : UInt32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      pSlicesPartition_H264 : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES*,
      pSlicesPartition_HEVC : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES*

  end

  @[Extern]
  record D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC,
    flags : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS,
    intra_refresh_config : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_INTRA_REFRESH,
    rate_control : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RATE_CONTROL,
    picture_target_resolution : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    selected_layout_mode : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE,
    frame_subregions_layout_data : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA,
    codec_gop_sequence : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE

  @[Extern]
  record D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS,
    sequence_control_desc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC,
    picture_control_desc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC,
    pInputFrame : Void*,
    input_frame_subresource : UInt32,
    current_frame_bitstream_metadata_size : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM,
    pBuffer : Void*,
    frame_start_offset : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE,
    pReconstructedPicture : Void*,
    reconstructed_picture_subresource : UInt32

  @[Extern]
  record D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA,
    bSize : UInt64,
    bStartOffset : UInt64,
    bHeaderSize : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS,
    average_qp : UInt64,
    intra_coding_units_count : UInt64,
    inter_coding_units_count : UInt64,
    skip_coding_units_count : UInt64,
    average_motion_estimation_x_direction : UInt64,
    average_motion_estimation_y_direction : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_OUTPUT_METADATA,
    encode_error_flags : UInt64,
    encode_stats : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS,
    encoded_bitstream_written_bytes_count : UInt64,
    written_subregions_count : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER,
    pBuffer : Void*,
    offset : UInt64

  @[Extern]
  record D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS,
    encoder_codec : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC,
    encoder_profile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC,
    encoder_input_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT,
    encoded_picture_effective_resolution : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC,
    hw_layout_metadata : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER

  @[Extern]
  record D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS,
    resolved_layout_metadata : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER

  @[Extern]
  record D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS,
    bitstream : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM,
    reconstructed_picture : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE,
    encoder_output_metadata : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER

  @[Extern]
  record AecQualityMetrics_Struct,
    i64Timestamp : Int64,
    convergence_flag : UInt8,
    mic_clipped_flag : UInt8,
    mic_silence_flag : UInt8,
    pstv_feadback_flag : UInt8,
    spk_clipped_flag : UInt8,
    spk_mute_flag : UInt8,
    glitch_flag : UInt8,
    double_talk_flag : UInt8,
    uGlitchCount : UInt32,
    uMicClipCount : UInt32,
    fDuration : Float32,
    fTSVariance : Float32,
    fTSDriftRate : Float32,
    fVoiceLevel : Float32,
    fNoiseLevel : Float32,
    fERLE : Float32,
    fAvgERLE : Float32,
    dwReserved : UInt32

  @[Extern]
  record TOC_DESCRIPTOR,
    guidID : LibC::GUID,
    wStreamNumber : UInt16,
    guidType : LibC::GUID,
    wLanguageIndex : UInt16

  @[Extern]
  record TOC_ENTRY_DESCRIPTOR,
    qwStartTime : UInt64,
    qwEndTime : UInt64,
    qwStartPacketOffset : UInt64,
    qwEndPacketOffset : UInt64,
    qwRepresentativeFrameTime : UInt64

  @[Extern]
  record DXVA_AYUVsample2,
    bCrValue : UInt8,
    bCbValue : UInt8,
    bY_Value : UInt8,
    bSampleAlpha8 : UInt8

  @[Extern]
  record DXVA_BufferDescription,
    dwTypeIndex : UInt32,
    dwBufferIndex : UInt32,
    dwDataOffset : UInt32,
    dwDataSize : UInt32,
    dwFirstMBaddress : UInt32,
    dwNumMBsInBuffer : UInt32,
    dwWidth : UInt32,
    dwHeight : UInt32,
    dwStride : UInt32,
    dwReservedBits : UInt32

  @[Extern]
  record DXVA_ConfigPictureDecode,
    dwFunction : UInt32,
    dwReservedBits : UInt32[3],
    guidConfigBitstreamEncryption : LibC::GUID,
    guidConfigMBcontrolEncryption : LibC::GUID,
    guidConfigResidDiffEncryption : LibC::GUID,
    bConfigBitstreamRaw : UInt8,
    bConfigMBcontrolRasterOrder : UInt8,
    bConfigResidDiffHost : UInt8,
    bConfigSpatialResid8 : UInt8,
    bConfigResid8Subtraction : UInt8,
    bConfigSpatialHost8or9Clipping : UInt8,
    bConfigSpatialResidInterleaved : UInt8,
    bConfigIntraResidUnsigned : UInt8,
    bConfigResidDiffAccelerator : UInt8,
    bConfigHostInverseScan : UInt8,
    bConfigSpecificIDCT : UInt8,
    bConfig4GroupedCoefs : UInt8

  @[Extern]
  record DXVA_PictureParameters,
    wDecodedPictureIndex : UInt16,
    wDeblockedPictureIndex : UInt16,
    wForwardRefPictureIndex : UInt16,
    wBackwardRefPictureIndex : UInt16,
    wPicWidthInMBminus1 : UInt16,
    wPicHeightInMBminus1 : UInt16,
    bMacroblockWidthMinus1 : UInt8,
    bMacroblockHeightMinus1 : UInt8,
    bBlockWidthMinus1 : UInt8,
    bBlockHeightMinus1 : UInt8,
    bBPPminus1 : UInt8,
    bPicStructure : UInt8,
    bSecondField : UInt8,
    bPicIntra : UInt8,
    bPicBackwardPrediction : UInt8,
    bBidirectionalAveragingMode : UInt8,
    bMVprecisionAndChromaRelation : UInt8,
    bChromaFormat : UInt8,
    bPicScanFixed : UInt8,
    bPicScanMethod : UInt8,
    bPicReadbackRequests : UInt8,
    bRcontrol : UInt8,
    bPicSpatialResid8 : UInt8,
    bPicOverflowBlocks : UInt8,
    bPicExtrapolation : UInt8,
    bPicDeblocked : UInt8,
    bPicDeblockConfined : UInt8,
    bPic4MVallowed : UInt8,
    bPicOBMC : UInt8,
    bPicBinPB : UInt8,
    bMV_RPS : UInt8,
    bReservedBits : UInt8,
    wBitstreamFcodes : UInt16,
    wBitstreamPCEelements : UInt16,
    bBitstreamConcealmentNeed : UInt8,
    bBitstreamConcealmentMethod : UInt8

  @[Extern]
  record DXVAUncompDataInfo,
    uncomp_width : UInt32,
    uncomp_height : UInt32,
    uncomp_format : Win32cr::Graphics::Direct3D9::D3DFORMAT

  @[Extern]
  record DXVACompBufferInfo,
    num_comp_buffers : UInt32,
    width_to_create : UInt32,
    height_to_create : UInt32,
    bytes_to_allocate : UInt32,
    usage : UInt32,
    pool : Win32cr::Graphics::Direct3D9::D3DPOOL,
    format : Win32cr::Graphics::Direct3D9::D3DFORMAT

  @[Extern]
  record DXVABufferInfo,
    pCompSurface : Void*,
    data_offset : UInt32,
    data_size : UInt32

  @[Extern]
  record DXVA_ExtendedFormat,
    _bitfield : UInt32

  @[Extern]
  record DXVA_Frequency,
    numerator : UInt32,
    denominator : UInt32

  @[Extern]
  record DXVA_VideoDesc,
    size : UInt32,
    sample_width : UInt32,
    sample_height : UInt32,
    sample_format : UInt32,
    d3dFormat : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    input_sample_freq : Win32cr::Media::MediaFoundation::DXVA_Frequency,
    output_frame_freq : Win32cr::Media::MediaFoundation::DXVA_Frequency

  @[Extern]
  record DXVA_VideoSample,
    rtStart : Int64,
    rtEnd : Int64,
    sample_format : Win32cr::Media::MediaFoundation::DXVA_SampleFormat,
    lpDDSSrcSurface : Void*

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  record DXVA_VideoSample2,
    size : UInt32,
    reserved : UInt32,
    rtStart : Int64,
    rtEnd : Int64,
    sample_format : UInt32,
    sample_flags : UInt32,
    lpDDSSrcSurface : Void*,
    rcSrc : Win32cr::Foundation::RECT,
    rcDst : Win32cr::Foundation::RECT,
    palette : Win32cr::Media::MediaFoundation::DXVA_AYUVsample2[16]
  {% end %}

  @[Extern]
  record DXVA_DeinterlaceCaps,
    size : UInt32,
    num_previous_output_frames : UInt32,
    input_pool : UInt32,
    num_forward_ref_samples : UInt32,
    num_backward_ref_samples : UInt32,
    d3dOutputFormat : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    video_processing_caps : Win32cr::Media::MediaFoundation::DXVA_VideoProcessCaps,
    deinterlace_technology : Win32cr::Media::MediaFoundation::DXVA_DeinterlaceTech

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  record DXVA_VideoSample32,
    rtStart : Int64,
    rtEnd : Int64,
    sample_format : UInt32,
    sample_flags : UInt32,
    lpDDSSrcSurface : UInt32,
    rcSrc : Win32cr::Foundation::RECT,
    rcDst : Win32cr::Foundation::RECT,
    palette : Win32cr::Media::MediaFoundation::DXVA_AYUVsample2[16]
  {% end %}

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  record DXVA_DeinterlaceBltEx32,
    size : UInt32,
    background_color : Win32cr::Media::MediaFoundation::DXVA_AYUVsample2,
    rcTarget : Win32cr::Foundation::RECT,
    rtTarget : Int64,
    num_source_surfaces : UInt32,
    alpha : Float32,
    source : Win32cr::Media::MediaFoundation::DXVA_VideoSample32[32],
    destination_format : UInt32,
    destination_flags : UInt32
  {% end %}

  @[Extern]
  record DXVA_DeinterlaceBlt,
    size : UInt32,
    reserved : UInt32,
    rtTarget : Int64,
    dst_rect : Win32cr::Foundation::RECT,
    src_rect : Win32cr::Foundation::RECT,
    num_source_surfaces : UInt32,
    alpha : Float32,
    source : Win32cr::Media::MediaFoundation::DXVA_VideoSample[32]

  @[Extern]
  record DXVA_DeinterlaceBltEx,
    size : UInt32,
    background_color : Win32cr::Media::MediaFoundation::DXVA_AYUVsample2,
    rcTarget : Win32cr::Foundation::RECT,
    rtTarget : Int64,
    num_source_surfaces : UInt32,
    alpha : Float32,
    source : Win32cr::Media::MediaFoundation::DXVA_VideoSample2[32],
    destination_format : UInt32,
    destination_flags : UInt32

  @[Extern]
  record DXVA_DeinterlaceQueryAvailableModes,
    size : UInt32,
    num_guids : UInt32,
    guids : LibC::GUID[32]

  @[Extern]
  record DXVA_DeinterlaceQueryModeCaps,
    size : UInt32,
    guid : LibC::GUID,
    video_desc : Win32cr::Media::MediaFoundation::DXVA_VideoDesc

  @[Extern]
  record DXVA_ProcAmpControlCaps,
    size : UInt32,
    input_pool : UInt32,
    d3dOutputFormat : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    proc_amp_control_props : UInt32,
    video_processing_caps : UInt32

  @[Extern]
  record DXVA_ProcAmpControlQueryRange,
    size : UInt32,
    proc_amp_control_prop : Win32cr::Media::MediaFoundation::DXVA_ProcAmpControlProp,
    video_desc : Win32cr::Media::MediaFoundation::DXVA_VideoDesc

  @[Extern]
  record DXVA_VideoPropertyRange,
    min_value : Float32,
    max_value : Float32,
    default_value : Float32,
    step_size : Float32

  @[Extern]
  record DXVA_ProcAmpControlBlt,
    size : UInt32,
    dst_rect : Win32cr::Foundation::RECT,
    src_rect : Win32cr::Foundation::RECT,
    alpha : Float32,
    brightness : Float32,
    contrast : Float32,
    hue : Float32,
    saturation : Float32

  @[Extern]
  record DXVA_COPPSignature,
    signature : UInt8[256]

  @[Extern]
  record DXVA_COPPCommand,
    macKDI : LibC::GUID,
    guidCommandID : LibC::GUID,
    dwSequence : UInt32,
    cbSizeData : UInt32,
    command_data : UInt8[4056]

  @[Extern]
  record DXVA_COPPStatusInput,
    rApp : LibC::GUID,
    guidStatusRequestID : LibC::GUID,
    dwSequence : UInt32,
    cbSizeData : UInt32,
    status_data : UInt8[4056]

  @[Extern]
  record DXVA_COPPStatusOutput,
    macKDI : LibC::GUID,
    cbSizeData : UInt32,
    copp_status : UInt8[4076]

  @[Extern]
  record DXVAHD_RATIONAL,
    numerator : UInt32,
    denominator : UInt32

  @[Extern]
  record DXVAHD_COLOR_RGBA,
    r : Float32,
    g : Float32,
    b : Float32,
    a : Float32

  @[Extern]
  record DXVAHD_COLOR_YCbCrA,
    y : Float32,
    cb : Float32,
    cr : Float32,
    a : Float32

  @[Extern(union: true)]
  record DXVAHD_COLOR,
    rgb : Win32cr::Media::MediaFoundation::DXVAHD_COLOR_RGBA,
    y_cb_cr : Win32cr::Media::MediaFoundation::DXVAHD_COLOR_YCbCrA

  @[Extern]
  record DXVAHD_CONTENT_DESC,
    input_frame_format : Win32cr::Media::MediaFoundation::DXVAHD_FRAME_FORMAT,
    input_frame_rate : Win32cr::Media::MediaFoundation::DXVAHD_RATIONAL,
    input_width : UInt32,
    input_height : UInt32,
    output_frame_rate : Win32cr::Media::MediaFoundation::DXVAHD_RATIONAL,
    output_width : UInt32,
    output_height : UInt32

  @[Extern]
  record DXVAHD_VPDEVCAPS,
    device_type : Win32cr::Media::MediaFoundation::DXVAHD_DEVICE_TYPE,
    device_caps : UInt32,
    feature_caps : UInt32,
    filter_caps : UInt32,
    input_format_caps : UInt32,
    input_pool : Win32cr::Graphics::Direct3D9::D3DPOOL,
    output_format_count : UInt32,
    input_format_count : UInt32,
    video_processor_count : UInt32,
    max_input_streams : UInt32,
    max_stream_states : UInt32

  @[Extern]
  record DXVAHD_VPCAPS,
    vp_guid : LibC::GUID,
    past_frames : UInt32,
    future_frames : UInt32,
    processor_caps : UInt32,
    i_telecine_caps : UInt32,
    custom_rate_count : UInt32

  @[Extern]
  record DXVAHD_CUSTOM_RATE_DATA,
    custom_rate : Win32cr::Media::MediaFoundation::DXVAHD_RATIONAL,
    output_frames : UInt32,
    input_interlaced : Win32cr::Foundation::BOOL,
    input_frames_or_fields : UInt32

  @[Extern]
  record DXVAHD_FILTER_RANGE_DATA,
    minimum : Int32,
    maximum : Int32,
    default : Int32,
    multiplier : Float32

  @[Extern]
  record DXVAHD_BLT_STATE_TARGET_RECT_DATA,
    enable : Win32cr::Foundation::BOOL,
    target_rect : Win32cr::Foundation::RECT

  @[Extern]
  record DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA,
    y_cb_cr : Win32cr::Foundation::BOOL,
    background_color : Win32cr::Media::MediaFoundation::DXVAHD_COLOR

  @[Extern]
  record DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      anonymous : Anonymous_e__Struct_,
      value : UInt32 do

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      record Anonymous_e__Struct_,
        _bitfield : UInt32

    end

  end

  @[Extern]
  record DXVAHD_BLT_STATE_ALPHA_FILL_DATA,
    mode : Win32cr::Media::MediaFoundation::DXVAHD_ALPHA_FILL_MODE,
    stream_number : UInt32

  @[Extern]
  record DXVAHD_BLT_STATE_CONSTRICTION_DATA,
    enable : Win32cr::Foundation::BOOL,
    size : Win32cr::Foundation::SIZE

  @[Extern]
  record DXVAHD_BLT_STATE_PRIVATE_DATA,
    guid : LibC::GUID,
    data_size : UInt32,
    pData : Void*

  @[Extern]
  record DXVAHD_STREAM_STATE_D3DFORMAT_DATA,
    format : Win32cr::Graphics::Direct3D9::D3DFORMAT

  @[Extern]
  record DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA,
    frame_format : Win32cr::Media::MediaFoundation::DXVAHD_FRAME_FORMAT

  @[Extern]
  record DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      anonymous : Anonymous_e__Struct_,
      value : UInt32 do

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      record Anonymous_e__Struct_,
        _bitfield : UInt32

    end

  end

  @[Extern]
  record DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA,
    repeat_frame : Win32cr::Foundation::BOOL,
    output_rate : Win32cr::Media::MediaFoundation::DXVAHD_OUTPUT_RATE,
    custom_rate : Win32cr::Media::MediaFoundation::DXVAHD_RATIONAL

  @[Extern]
  record DXVAHD_STREAM_STATE_SOURCE_RECT_DATA,
    enable : Win32cr::Foundation::BOOL,
    source_rect : Win32cr::Foundation::RECT

  @[Extern]
  record DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA,
    enable : Win32cr::Foundation::BOOL,
    destination_rect : Win32cr::Foundation::RECT

  @[Extern]
  record DXVAHD_STREAM_STATE_ALPHA_DATA,
    enable : Win32cr::Foundation::BOOL,
    alpha : Float32

  @[Extern]
  record DXVAHD_STREAM_STATE_PALETTE_DATA,
    count : UInt32,
    pEntries : UInt32*

  @[Extern]
  record DXVAHD_STREAM_STATE_LUMA_KEY_DATA,
    enable : Win32cr::Foundation::BOOL,
    lower : Float32,
    upper : Float32

  @[Extern]
  record DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA,
    enable : Win32cr::Foundation::BOOL,
    source_aspect_ratio : Win32cr::Media::MediaFoundation::DXVAHD_RATIONAL,
    destination_aspect_ratio : Win32cr::Media::MediaFoundation::DXVAHD_RATIONAL

  @[Extern]
  record DXVAHD_STREAM_STATE_FILTER_DATA,
    enable : Win32cr::Foundation::BOOL,
    level : Int32

  @[Extern]
  record DXVAHD_STREAM_STATE_PRIVATE_DATA,
    guid : LibC::GUID,
    data_size : UInt32,
    pData : Void*

  @[Extern]
  record DXVAHD_STREAM_DATA,
    enable : Win32cr::Foundation::BOOL,
    output_index : UInt32,
    input_frame_or_field : UInt32,
    past_frames : UInt32,
    future_frames : UInt32,
    ppPastSurfaces : Void**,
    pInputSurface : Void*,
    ppFutureSurfaces : Void**

  @[Extern]
  record DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA,
    enable : Win32cr::Foundation::BOOL,
    i_telecine_flags : UInt32,
    frames : UInt32,
    input_field : UInt32

  @[Extern]
  record DXVAHDSW_CALLBACKS,
    create_device : Win32cr::Media::MediaFoundation::PDXVAHDSW_CreateDevice,
    propose_video_private_format : Win32cr::Media::MediaFoundation::PDXVAHDSW_ProposeVideoPrivateFormat,
    get_video_processor_device_caps : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessorDeviceCaps,
    get_video_processor_output_formats : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessorOutputFormats,
    get_video_processor_input_formats : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessorInputFormats,
    get_video_processor_caps : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessorCaps,
    get_video_processor_custom_rates : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessorCustomRates,
    get_video_processor_filter_range : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessorFilterRange,
    destroy_device : Win32cr::Media::MediaFoundation::PDXVAHDSW_DestroyDevice,
    create_video_processor : Win32cr::Media::MediaFoundation::PDXVAHDSW_CreateVideoProcessor,
    set_video_process_blt_state : Win32cr::Media::MediaFoundation::PDXVAHDSW_SetVideoProcessBltState,
    get_video_process_blt_state_private : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessBltStatePrivate,
    set_video_process_stream_state : Win32cr::Media::MediaFoundation::PDXVAHDSW_SetVideoProcessStreamState,
    get_video_process_stream_state_private : Win32cr::Media::MediaFoundation::PDXVAHDSW_GetVideoProcessStreamStatePrivate,
    video_process_blt_hd : Win32cr::Media::MediaFoundation::PDXVAHDSW_VideoProcessBltHD,
    destroy_video_processor : Win32cr::Media::MediaFoundation::PDXVAHDSW_DestroyVideoProcessor

  @[Extern]
  record DXVAHDETW_CREATEVIDEOPROCESSOR,
    pObject : UInt64,
    pD3D9Ex : UInt64,
    vp_guid : LibC::GUID

  @[Extern]
  record DXVAHDETW_VIDEOPROCESSBLTSTATE,
    pObject : UInt64,
    state : Win32cr::Media::MediaFoundation::DXVAHD_BLT_STATE,
    data_size : UInt32,
    set_state : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVAHDETW_VIDEOPROCESSSTREAMSTATE,
    pObject : UInt64,
    stream_number : UInt32,
    state : Win32cr::Media::MediaFoundation::DXVAHD_STREAM_STATE,
    data_size : UInt32,
    set_state : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVAHDETW_VIDEOPROCESSBLTHD,
    pObject : UInt64,
    pOutputSurface : UInt64,
    target_rect : Win32cr::Foundation::RECT,
    output_format : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    color_space : UInt32,
    output_frame : UInt32,
    stream_count : UInt32,
    enter : Win32cr::Foundation::BOOL

  @[Extern]
  record DXVAHDETW_VIDEOPROCESSBLTHD_STREAM,
    pObject : UInt64,
    pInputSurface : UInt64,
    source_rect : Win32cr::Foundation::RECT,
    destination_rect : Win32cr::Foundation::RECT,
    input_format : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    frame_format : Win32cr::Media::MediaFoundation::DXVAHD_FRAME_FORMAT,
    color_space : UInt32,
    stream_number : UInt32,
    output_index : UInt32,
    input_frame_or_field : UInt32,
    past_frames : UInt32,
    future_frames : UInt32

  @[Extern]
  record DXVAHDETW_DESTROYVIDEOPROCESSOR,
    pObject : UInt64

  @[Extern]
  record DXVA2_ExtendedFormat,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      anonymous : Anonymous_e__Struct_,
      value : UInt32 do

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      record Anonymous_e__Struct_,
        _bitfield : UInt32

    end

  end

  @[Extern]
  record DXVA2_Frequency,
    numerator : UInt32,
    denominator : UInt32

  @[Extern]
  record DXVA2_VideoDesc,
    sample_width : UInt32,
    sample_height : UInt32,
    sample_format : Win32cr::Media::MediaFoundation::DXVA2_ExtendedFormat,
    format : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    input_sample_freq : Win32cr::Media::MediaFoundation::DXVA2_Frequency,
    output_frame_freq : Win32cr::Media::MediaFoundation::DXVA2_Frequency,
    uab_protection_level : UInt32,
    reserved : UInt32

  @[Extern]
  record DXVA2_VideoProcessorCaps,
    device_caps : UInt32,
    input_pool : Win32cr::Graphics::Direct3D9::D3DPOOL,
    num_forward_ref_samples : UInt32,
    num_backward_ref_samples : UInt32,
    reserved : UInt32,
    deinterlace_technology : UInt32,
    proc_amp_control_caps : UInt32,
    video_processor_operations : UInt32,
    noise_filter_technology : UInt32,
    detail_filter_technology : UInt32

  @[Extern]
  record DXVA2_Fixed32,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      anonymous : Anonymous_e__Struct_,
      ll : Int32 do

      # Nested Type Anonymous_e__Struct_
      @[Extern]
      record Anonymous_e__Struct_,
        fraction : UInt16,
        value : Int16

    end

  end

  @[Extern]
  record DXVA2_AYUVSample8,
    cr : UInt8,
    cb : UInt8,
    y : UInt8,
    alpha : UInt8

  @[Extern]
  record DXVA2_AYUVSample16,
    cr : UInt16,
    cb : UInt16,
    y : UInt16,
    alpha : UInt16

  @[Extern]
  record DXVA2_VideoSample,
    start : Int64,
    end__ : Int64,
    sample_format : Win32cr::Media::MediaFoundation::DXVA2_ExtendedFormat,
    src_surface : Void*,
    src_rect : Win32cr::Foundation::RECT,
    dst_rect : Win32cr::Foundation::RECT,
    pal : Win32cr::Media::MediaFoundation::DXVA2_AYUVSample8[16],
    planar_alpha : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    sample_data : UInt32

  @[Extern]
  record DXVA2_ValueRange,
    min_value : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    max_value : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    default_value : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    step_size : Win32cr::Media::MediaFoundation::DXVA2_Fixed32

  @[Extern]
  record DXVA2_ProcAmpValues,
    brightness : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    contrast : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    hue : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    saturation : Win32cr::Media::MediaFoundation::DXVA2_Fixed32

  @[Extern]
  record DXVA2_FilterValues,
    level : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    threshold : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    radius : Win32cr::Media::MediaFoundation::DXVA2_Fixed32

  @[Extern]
  record DXVA2_VideoProcessBltParams,
    target_frame : Int64,
    target_rect : Win32cr::Foundation::RECT,
    constriction_size : Win32cr::Foundation::SIZE,
    streaming_flags : UInt32,
    background_color : Win32cr::Media::MediaFoundation::DXVA2_AYUVSample16,
    dest_format : Win32cr::Media::MediaFoundation::DXVA2_ExtendedFormat,
    proc_amp_values : Win32cr::Media::MediaFoundation::DXVA2_ProcAmpValues,
    alpha : Win32cr::Media::MediaFoundation::DXVA2_Fixed32,
    noise_filter_luma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    noise_filter_chroma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    detail_filter_luma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    detail_filter_chroma : Win32cr::Media::MediaFoundation::DXVA2_FilterValues,
    dest_data : UInt32

  @[Extern]
  record DXVA2_ConfigPictureDecode,
    guidConfigBitstreamEncryption : LibC::GUID,
    guidConfigMBcontrolEncryption : LibC::GUID,
    guidConfigResidDiffEncryption : LibC::GUID,
    config_bitstream_raw : UInt32,
    config_m_bcontrol_raster_order : UInt32,
    config_resid_diff_host : UInt32,
    config_spatial_resid8 : UInt32,
    config_resid8_subtraction : UInt32,
    config_spatial_host8or9_clipping : UInt32,
    config_spatial_resid_interleaved : UInt32,
    config_intra_resid_unsigned : UInt32,
    config_resid_diff_accelerator : UInt32,
    config_host_inverse_scan : UInt32,
    config_specific_idct : UInt32,
    config4_grouped_coefs : UInt32,
    config_min_render_target_buff_count : UInt16,
    config_decoder_specific : UInt16

  @[Extern]
  record DXVA2_DecodeBufferDesc,
    compressed_buffer_type : Win32cr::Media::MediaFoundation::DXVA2_BufferfType,
    buffer_index : UInt32,
    data_offset : UInt32,
    data_size : UInt32,
    first_m_baddress : UInt32,
    num_m_bs_in_buffer : UInt32,
    width : UInt32,
    height : UInt32,
    stride : UInt32,
    reserved_bits : UInt32,
    pvPVPState : Void*

  @[Extern]
  record DXVA2_AES_CTR_IV,
    iv : UInt64,
    count : UInt64

  @[Extern]
  record DXVA2_DecodeExtensionData,
    function : UInt32,
    pPrivateInputData : Void*,
    private_input_data_size : UInt32,
    pPrivateOutputData : Void*,
    private_output_data_size : UInt32

  @[Extern]
  record DXVA2_DecodeExecuteParams,
    num_comp_buffers : UInt32,
    pCompressedBuffers : Win32cr::Media::MediaFoundation::DXVA2_DecodeBufferDesc*,
    pExtensionData : Win32cr::Media::MediaFoundation::DXVA2_DecodeExtensionData*

  @[Extern]
  record OPM_RANDOM_NUMBER,
    abRandomNumber : UInt8[16]

  @[Extern]
  record OPM_OMAC,
    abOMAC : UInt8[16]

  @[Extern]
  record OPM_ENCRYPTED_INITIALIZATION_PARAMETERS,
    abEncryptedInitializationParameters : UInt8[256]

  @[Extern]
  record OPM_GET_INFO_PARAMETERS,
    omac : Win32cr::Media::MediaFoundation::OPM_OMAC,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    guidInformation : LibC::GUID,
    ulSequenceNumber : UInt32,
    cbParametersSize : UInt32,
    abParameters : UInt8[4056]

  @[Extern]
  record OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    guidInformation : LibC::GUID,
    ulSequenceNumber : UInt32,
    cbParametersSize : UInt32,
    abParameters : UInt8[4056]

  @[Extern]
  record OPM_HDCP_KEY_SELECTION_VECTOR,
    abKeySelectionVector : UInt8[5]

  @[Extern]
  record OPM_CONNECTED_HDCP_DEVICE_INFORMATION,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    ulStatusFlags : UInt32,
    ulHDCPFlags : UInt32,
    ksvB : Win32cr::Media::MediaFoundation::OPM_HDCP_KEY_SELECTION_VECTOR,
    reserved : UInt8[11],
    reserved2 : UInt8[16],
    reserved3 : UInt8[16]

  @[Extern]
  record OPM_REQUESTED_INFORMATION,
    omac : Win32cr::Media::MediaFoundation::OPM_OMAC,
    cbRequestedInformationSize : UInt32,
    abRequestedInformation : UInt8[4076]

  @[Extern]
  record OPM_STANDARD_INFORMATION,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    ulStatusFlags : UInt32,
    ulInformation : UInt32,
    ulReserved : UInt32,
    ulReserved2 : UInt32

  @[Extern]
  record OPM_ACTUAL_OUTPUT_FORMAT,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    ulStatusFlags : UInt32,
    ulDisplayWidth : UInt32,
    ulDisplayHeight : UInt32,
    dsfSampleInterleaveFormat : Win32cr::Media::MediaFoundation::DXVA2_SampleFormat,
    d3dFormat : Win32cr::Graphics::Direct3D9::D3DFORMAT,
    ulFrequencyNumerator : UInt32,
    ulFrequencyDenominator : UInt32

  @[Extern]
  record OPM_ACP_AND_CGMSA_SIGNALING,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    ulStatusFlags : UInt32,
    ulAvailableTVProtectionStandards : UInt32,
    ulActiveTVProtectionStandard : UInt32,
    ulReserved : UInt32,
    ulAspectRatioValidMask1 : UInt32,
    ulAspectRatioData1 : UInt32,
    ulAspectRatioValidMask2 : UInt32,
    ulAspectRatioData2 : UInt32,
    ulAspectRatioValidMask3 : UInt32,
    ulAspectRatioData3 : UInt32,
    ulReserved2 : UInt32[4],
    ulReserved3 : UInt32[4]

  @[Extern]
  record OPM_OUTPUT_ID_DATA,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    ulStatusFlags : UInt32,
    output_id : UInt64

  @[Extern]
  record OPM_CONFIGURE_PARAMETERS,
    omac : Win32cr::Media::MediaFoundation::OPM_OMAC,
    guidSetting : LibC::GUID,
    ulSequenceNumber : UInt32,
    cbParametersSize : UInt32,
    abParameters : UInt8[4056]

  @[Extern]
  record OPM_SET_PROTECTION_LEVEL_PARAMETERS,
    ulProtectionType : UInt32,
    ulProtectionLevel : UInt32,
    reserved : UInt32,
    reserved2 : UInt32

  @[Extern]
  record OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS,
    ulNewTVProtectionStandard : UInt32,
    ulAspectRatioChangeMask1 : UInt32,
    ulAspectRatioData1 : UInt32,
    ulAspectRatioChangeMask2 : UInt32,
    ulAspectRatioData2 : UInt32,
    ulAspectRatioChangeMask3 : UInt32,
    ulAspectRatioData3 : UInt32,
    ulReserved : UInt32[4],
    ulReserved2 : UInt32[4],
    ulReserved3 : UInt32

  @[Extern]
  record OPM_SET_HDCP_SRM_PARAMETERS,
    ulSRMVersion : UInt32

  @[Extern]
  record OPM_GET_CODEC_INFO_PARAMETERS,
    cbVerifier : UInt32,
    verifier : UInt8[4052]

  @[Extern]
  record OPM_GET_CODEC_INFO_INFORMATION,
    rnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER,
    merit : UInt32

  @[Extern]
  record MFT_REGISTER_TYPE_INFO,
    guidMajorType : LibC::GUID,
    guidSubtype : LibC::GUID

  @[Extern]
  record MFRatio,
    numerator : UInt32,
    denominator : UInt32

  @[Extern]
  record MFOffset,
    fract : UInt16,
    value : Int16

  @[Extern]
  record MFVideoArea,
    offset_x : Win32cr::Media::MediaFoundation::MFOffset,
    offset_y : Win32cr::Media::MediaFoundation::MFOffset,
    area : Win32cr::Foundation::SIZE

  @[Extern]
  record MFVideoInfo,
    dwWidth : UInt32,
    dwHeight : UInt32,
    pixel_aspect_ratio : Win32cr::Media::MediaFoundation::MFRatio,
    source_chroma_subsampling : Win32cr::Media::MediaFoundation::MFVideoChromaSubsampling,
    interlace_mode : Win32cr::Media::MediaFoundation::MFVideoInterlaceMode,
    transfer_function : Win32cr::Media::MediaFoundation::MFVideoTransferFunction,
    color_primaries : Win32cr::Media::MediaFoundation::MFVideoPrimaries,
    transfer_matrix : Win32cr::Media::MediaFoundation::MFVideoTransferMatrix,
    source_lighting : Win32cr::Media::MediaFoundation::MFVideoLighting,
    frames_per_second : Win32cr::Media::MediaFoundation::MFRatio,
    nominal_range : Win32cr::Media::MediaFoundation::MFNominalRange,
    geometric_aperture : Win32cr::Media::MediaFoundation::MFVideoArea,
    minimum_display_aperture : Win32cr::Media::MediaFoundation::MFVideoArea,
    pan_scan_aperture : Win32cr::Media::MediaFoundation::MFVideoArea,
    video_flags : UInt64

  @[Extern]
  record MFAYUVSample,
    bCrValue : UInt8,
    bCbValue : UInt8,
    bYValue : UInt8,
    bSampleAlpha8 : UInt8

  @[Extern]
  record MFARGB,
    rgbBlue : UInt8,
    rgbGreen : UInt8,
    rgbRed : UInt8,
    rgbAlpha : UInt8

  @[Extern(union: true)]
  record MFPaletteEntry,
    argb : Win32cr::Media::MediaFoundation::MFARGB,
    ay_cb_cr : Win32cr::Media::MediaFoundation::MFAYUVSample

  @[Extern]
  record MFVideoSurfaceInfo,
    format : UInt32,
    palette_entries : UInt32,
    palette : Win32cr::Media::MediaFoundation::MFPaletteEntry*

  @[Extern]
  record MFVideoCompressedInfo,
    avg_bitrate : Int64,
    avg_bit_error_rate : Int64,
    max_key_frame_spacing : UInt32

  @[Extern]
  record MFVIDEOFORMAT,
    dwSize : UInt32,
    videoInfo : Win32cr::Media::MediaFoundation::MFVideoInfo,
    guidFormat : LibC::GUID,
    compressedInfo : Win32cr::Media::MediaFoundation::MFVideoCompressedInfo,
    surfaceInfo : Win32cr::Media::MediaFoundation::MFVideoSurfaceInfo

  @[Extern]
  record MFT_INPUT_STREAM_INFO,
    hnsMaxLatency : Int64,
    dwFlags : UInt32,
    cbSize : UInt32,
    cbMaxLookahead : UInt32,
    cbAlignment : UInt32

  @[Extern]
  record MFT_OUTPUT_STREAM_INFO,
    dwFlags : UInt32,
    cbSize : UInt32,
    cbAlignment : UInt32

  @[Extern]
  record MFT_OUTPUT_DATA_BUFFER,
    dwStreamID : UInt32,
    pSample : Void*,
    dwStatus : UInt32,
    pEvents : Void*

  @[Extern]
  record STREAM_MEDIUM,
    gidMedium : LibC::GUID,
    unMediumInstance : UInt32

  @[Extern]
  record MFAudioDecoderDegradationInfo,
    eDegradationReason : Win32cr::Media::MediaFoundation::MFT_AUDIO_DECODER_DEGRADATION_REASON,
    eType : Win32cr::Media::MediaFoundation::MFT_AUDIO_DECODER_DEGRADATION_TYPE

  @[Extern]
  record MFT_STREAM_STATE_PARAM,
    stream_id : UInt32,
    state : Win32cr::Media::MediaFoundation::MF_STREAM_STATE

  @[Extern]
  record MFCLOCK_PROPERTIES,
    qwCorrelationRate : UInt64,
    guidClockId : LibC::GUID,
    dwClockFlags : UInt32,
    qwClockFrequency : UInt64,
    dwClockTolerance : UInt32,
    dwClockJitter : UInt32

  @[Extern]
  record MFRR_COMPONENT_HASH_INFO,
    ulReason : UInt32,
    rgHeaderHash : UInt16[43],
    rgPublicKeyHash : UInt16[43],
    wszName : UInt16[260]

  @[Extern]
  record MFRR_COMPONENTS,
    dwRRInfoVersion : UInt32,
    dwRRComponents : UInt32,
    pRRComponents : Win32cr::Media::MediaFoundation::MFRR_COMPONENT_HASH_INFO*

  @[Extern]
  record ASF_FLAT_PICTURE,
    bPictureType : UInt8,
    dwDataLen : UInt32

  @[Extern]
  record ASF_FLAT_SYNCHRONISED_LYRICS,
    bTimeStampFormat : UInt8,
    bContentType : UInt8,
    dwLyricsLen : UInt32

  @[Extern]
  record MFTOPONODE_ATTRIBUTE_UPDATE,
    node_id : UInt64,
    guidAttributeKey : LibC::GUID,
    attrType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE,
    anonymous : Anonymous_e__Union_ do

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    record Anonymous_e__Union_,
      u32 : UInt32,
      u64 : UInt64,
      d : Float64

  end

  @[Extern]
  record MF_LEAKY_BUCKET_PAIR,
    dwBitrate : UInt32,
    msBufferWindow : UInt32

  @[Extern]
  record MFBYTESTREAM_BUFFERING_PARAMS,
    cbTotalFileSize : UInt64,
    cbPlayableDataSize : UInt64,
    prgBuckets : Win32cr::Media::MediaFoundation::MF_LEAKY_BUCKET_PAIR*,
    cBuckets : UInt32,
    qwNetBufferingTime : UInt64,
    qwExtraBufferingTimeDuringSeek : UInt64,
    qwPlayDuration : UInt64,
    dRate : Float32

  @[Extern]
  record MF_BYTE_STREAM_CACHE_RANGE,
    qwStartOffset : UInt64,
    qwEndOffset : UInt64

  @[Extern]
  record MFNetCredentialManagerGetParam,
    hrOp : Win32cr::Foundation::HRESULT,
    fAllowLoggedOnUser : Win32cr::Foundation::BOOL,
    fClearTextPackage : Win32cr::Foundation::BOOL,
    pszUrl : Win32cr::Foundation::PWSTR,
    pszSite : Win32cr::Foundation::PWSTR,
    pszRealm : Win32cr::Foundation::PWSTR,
    pszPackage : Win32cr::Foundation::PWSTR,
    nRetries : Int32

  @[Extern]
  record MFINPUTTRUSTAUTHORITY_ACCESS_ACTION,
    action : Win32cr::Media::MediaFoundation::MFPOLICYMANAGER_ACTION,
    pbTicket : UInt8*,
    cbTicket : UInt32

  @[Extern]
  record MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS,
    dwSize : UInt32,
    dwVer : UInt32,
    cbSignatureOffset : UInt32,
    cbSignatureSize : UInt32,
    cbExtensionOffset : UInt32,
    cbExtensionSize : UInt32,
    cActions : UInt32,
    rgOutputActions : Win32cr::Media::MediaFoundation::MFINPUTTRUSTAUTHORITY_ACCESS_ACTION*

  @[Extern]
  record MF_TRANSCODE_SINK_INFO,
    dwVideoStreamID : UInt32,
    pVideoMediaType : Void*,
    dwAudioStreamID : UInt32,
    pAudioMediaType : Void*

  @[Extern]
  record MFT_REGISTRATION_INFO,
    clsid : LibC::GUID,
    guidCategory : LibC::GUID,
    uiFlags : UInt32,
    pszName : Win32cr::Foundation::PWSTR,
    cInTypes : UInt32,
    pInTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*,
    cOutTypes : UInt32,
    pOutTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*

  @[Extern]
  record MFCONTENTPROTECTIONDEVICE_INPUT_DATA,
    hw_protection_function_id : UInt32,
    private_data_byte_count : UInt32,
    hw_protection_data_byte_count : UInt32,
    reserved : UInt32,
    input_data : UInt8[4]

  @[Extern]
  record MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA,
    private_data_byte_count : UInt32,
    max_hw_protection_data_byte_count : UInt32,
    hw_protection_data_byte_count : UInt32,
    status : Win32cr::Foundation::HRESULT,
    transport_time_in_hundreds_of_nanoseconds : Int64,
    execution_time_in_hundreds_of_nanoseconds : Int64,
    output_data : UInt8[4]

  @[Extern]
  record MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA,
    task_index : UInt32,
    class_name : UInt16[260],
    base_priority : Int32

  @[Extern]
  record MFMediaKeyStatus,
    pbKeyId : UInt8*,
    cbKeyId : UInt32,
    eMediaKeyStatus : Win32cr::Media::MediaFoundation::MF_MEDIAKEY_STATUS

  @[Extern]
  record MF_VIDEO_SPHERICAL_VIEWDIRECTION,
    iHeading : Int32,
    iPitch : Int32,
    iRoll : Int32

  @[Extern]
  record SENSORPROFILEID,
    type__ : LibC::GUID,
    index : UInt32,
    unused : UInt32

  @[Extern]
  record MFCameraIntrinsic_CameraModel,
    focal_length_x : Float32,
    focal_length_y : Float32,
    principal_point_x : Float32,
    principal_point_y : Float32

  @[Extern]
  record MFCameraIntrinsic_DistortionModel6KT,
    radial_k1 : Float32,
    radial_k2 : Float32,
    radial_k3 : Float32,
    radial_k4 : Float32,
    radial_k5 : Float32,
    radial_k6 : Float32,
    tangential_p1 : Float32,
    tangential_p2 : Float32

  @[Extern]
  record MFCameraIntrinsic_DistortionModelArcTan,
    radial_k0 : Float32,
    distortion_center_x : Float32,
    distortion_center_y : Float32,
    tangential_x : Float32,
    tangential_y : Float32

  @[Extern]
  record MFExtendedCameraIntrinsic_IntrinsicModel,
    width : UInt32,
    height : UInt32,
    split_frame_id : UInt32,
    camera_model : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_CameraModel

  @[Extern]
  record ASF_INDEX_IDENTIFIER,
    guidIndexType : LibC::GUID,
    wStreamNumber : UInt16

  @[Extern]
  record ASF_INDEX_DESCRIPTOR,
    identifier : Win32cr::Media::MediaFoundation::ASF_INDEX_IDENTIFIER,
    cPerEntryBytes : UInt16,
    szDescription : UInt16[32],
    dwInterval : UInt32

  @[Extern]
  record ASF_MUX_STATISTICS,
    cFramesWritten : UInt32,
    cFramesDropped : UInt32

  @[Extern]
  record MFVideoNormalizedRect,
    left : Float32,
    top : Float32,
    right : Float32,
    bottom : Float32

  @[Extern]
  record MOVE_RECT,
    source_point : Win32cr::Foundation::POINT,
    dest_rect : Win32cr::Foundation::RECT

  @[Extern]
  record DIRTYRECT_INFO,
    frame_number : UInt32,
    num_dirty_rects : UInt32,
    dirty_rects : Win32cr::Foundation::RECT*

  @[Extern]
  record MOVEREGION_INFO,
    frame_number : UInt32,
    num_move_regions : UInt32,
    move_regions : Win32cr::Media::MediaFoundation::MOVE_RECT*

  @[Extern]
  record ROI_AREA,
    rect : Win32cr::Foundation::RECT,
    qp_delta : Int32

  @[Extern]
  record MACROBLOCK_DATA,
    flags : UInt32,
    motionVectorX : Int16,
    motionVectorY : Int16,
    qp_delta : Int32

  @[Extern]
  record DigitalWindowSetting,
    origin_x : Float64,
    origin_y : Float64,
    window_size : Float64

  @[Extern]
  record MFFOLDDOWN_MATRIX,
    cbSize : UInt32,
    cSrcChannels : UInt32,
    cDstChannels : UInt32,
    dwChannelMask : UInt32,
    coeff : Int32[64]

  @[Extern]
  record MT_CUSTOM_VIDEO_PRIMARIES,
    fRx : Float32,
    fRy : Float32,
    fGx : Float32,
    fGy : Float32,
    fBx : Float32,
    fBy : Float32,
    fWx : Float32,
    fWy : Float32

  @[Extern]
  record MT_ARBITRARY_HEADER,
    majortype : LibC::GUID,
    subtype : LibC::GUID,
    bFixedSizeSamples : Win32cr::Foundation::BOOL,
    bTemporalCompression : Win32cr::Foundation::BOOL,
    lSampleSize : UInt32,
    formattype : LibC::GUID

  @[Extern]
  record MF_FLOAT2,
    x : Float32,
    y : Float32

  @[Extern]
  record MF_FLOAT3,
    x : Float32,
    y : Float32,
    z : Float32

  @[Extern]
  record MF_QUATERNION,
    x : Float32,
    y : Float32,
    z : Float32,
    w : Float32

  @[Extern]
  record MFCameraExtrinsic_CalibratedTransform,
    calibration_id : LibC::GUID,
    position : Win32cr::Media::MediaFoundation::MF_FLOAT3,
    orientation : Win32cr::Media::MediaFoundation::MF_QUATERNION

  @[Extern]
  record MFCameraExtrinsics,
    transform_count : UInt32,
    calibrated_transforms : Win32cr::Media::MediaFoundation::MFCameraExtrinsic_CalibratedTransform*

  @[Extern]
  record MFCameraIntrinsic_PinholeCameraModel,
    focal_length : Win32cr::Media::MediaFoundation::MF_FLOAT2,
    principal_point : Win32cr::Media::MediaFoundation::MF_FLOAT2

  @[Extern]
  record MFCameraIntrinsic_DistortionModel,
    radial_k1 : Float32,
    radial_k2 : Float32,
    radial_k3 : Float32,
    tangential_p1 : Float32,
    tangential_p2 : Float32

  @[Extern]
  record MFPinholeCameraIntrinsic_IntrinsicModel,
    width : UInt32,
    height : UInt32,
    camera_model : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_PinholeCameraModel,
    distortion_model : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModel

  @[Extern]
  record MFPinholeCameraIntrinsics,
    intrinsic_model_count : UInt32,
    intrinsic_models : Win32cr::Media::MediaFoundation::MFPinholeCameraIntrinsic_IntrinsicModel*

  @[Extern]
  record MFMPEG2DLNASINKSTATS,
    cBytesWritten : UInt64,
    fPAL : Win32cr::Foundation::BOOL,
    fccVideo : UInt32,
    dwVideoWidth : UInt32,
    dwVideoHeight : UInt32,
    cVideoFramesReceived : UInt64,
    cVideoFramesEncoded : UInt64,
    cVideoFramesSkipped : UInt64,
    cBlackVideoFramesEncoded : UInt64,
    cVideoFramesDuplicated : UInt64,
    cAudioSamplesPerSec : UInt32,
    cAudioChannels : UInt32,
    cAudioBytesReceived : UInt64,
    cAudioFramesEncoded : UInt64

  @[Extern]
  record MF_SINK_WRITER_STATISTICS,
    cb : UInt32,
    llLastTimestampReceived : Int64,
    llLastTimestampEncoded : Int64,
    llLastTimestampProcessed : Int64,
    llLastStreamTickReceived : Int64,
    llLastSinkSampleRequest : Int64,
    qwNumSamplesReceived : UInt64,
    qwNumSamplesEncoded : UInt64,
    qwNumSamplesProcessed : UInt64,
    qwNumStreamTicksReceived : UInt64,
    dwByteCountQueued : UInt32,
    qwByteCountProcessed : UInt64,
    dwNumOutstandingSinkSampleRequests : UInt32,
    dwAverageSampleRateReceived : UInt32,
    dwAverageSampleRateEncoded : UInt32,
    dwAverageSampleRateProcessed : UInt32

  @[Extern]
  record MFP_EVENT_HEADER,
    eEventType : Win32cr::Media::MediaFoundation::MFP_EVENT_TYPE,
    hrEvent : Win32cr::Foundation::HRESULT,
    pMediaPlayer : Void*,
    eState : Win32cr::Media::MediaFoundation::MFP_MEDIAPLAYER_STATE,
    pPropertyStore : Void*

  @[Extern]
  record MFP_PLAY_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_PAUSE_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_STOP_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_POSITION_SET_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_RATE_SET_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*,
    flRate : Float32

  @[Extern]
  record MFP_MEDIAITEM_CREATED_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*,
    dwUserData : LibC::UIntPtrT

  @[Extern]
  record MFP_MEDIAITEM_SET_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_FRAME_STEP_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_MEDIAITEM_CLEARED_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_MF_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    mf_event_type : UInt32,
    pMFMediaEvent : Void*,
    pMediaItem : Void*

  @[Extern]
  record MFP_ERROR_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER

  @[Extern]
  record MFP_PLAYBACK_ENDED_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    pMediaItem : Void*

  @[Extern]
  record MFP_ACQUIRE_USER_CREDENTIAL_EVENT,
    header : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER,
    dwUserData : LibC::UIntPtrT,
    fProceedWithAuthentication : Win32cr::Foundation::BOOL,
    hrAuthenticationStatus : Win32cr::Foundation::HRESULT,
    pwszURL : Win32cr::Foundation::PWSTR,
    pwszSite : Win32cr::Foundation::PWSTR,
    pwszRealm : Win32cr::Foundation::PWSTR,
    pwszPackage : Win32cr::Foundation::PWSTR,
    nRetries : Int32,
    flags : UInt32,
    pCredential : Void*

  @[Extern]
  record DEVICE_INFO,
    pFriendlyDeviceName : Win32cr::Foundation::BSTR,
    pUniqueDeviceName : Win32cr::Foundation::BSTR,
    pManufacturerName : Win32cr::Foundation::BSTR,
    pModelName : Win32cr::Foundation::BSTR,
    pIconURL : Win32cr::Foundation::BSTR

  @[Extern]
  record MFVideoAlphaBitmapParams,
    dwFlags : UInt32,
    clrSrcKey : UInt32,
    rcSrc : Win32cr::Foundation::RECT,
    nrcDest : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect,
    fAlpha : Float32,
    dwFilterMode : UInt32

  @[Extern]
  record MFVideoAlphaBitmap,
    get_bitmap_from_dc : Win32cr::Foundation::BOOL,
    bitmap : Bitmap_e__union_,
    params : Win32cr::Media::MediaFoundation::MFVideoAlphaBitmapParams do

    # Nested Type Bitmap_e__union_
    @[Extern(union: true)]
    record Bitmap_e__union_,
      hdc : Win32cr::Graphics::Gdi::HDC,
      pDDS : Void*

  end

  {% if flag?(:i386) %}
  @[Extern]
  record D3DCONTENTPROTECTIONCAPS,
    caps : UInt32,
    key_exchange_type : LibC::GUID,
    buffer_alignment_start : UInt32,
    block_alignment_size : UInt32,
    protected_memory_size : UInt64
  {% end %}

  {% if flag?(:i386) %}
  @[Extern]
  record DXVA_VideoSample2,
    rtStart : Int64,
    rtEnd : Int64,
    sample_format : UInt32,
    sample_flags : UInt32,
    lpDDSSrcSurface : Void*,
    rcSrc : Win32cr::Foundation::RECT,
    rcDst : Win32cr::Foundation::RECT,
    palette : Win32cr::Media::MediaFoundation::DXVA_AYUVsample2[16]
  {% end %}

  @[Extern]
  record ICodecAPIVtbl,
    query_interface : Proc(ICodecAPI*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ICodecAPI*, UInt32),
    release : Proc(ICodecAPI*, UInt32),
    is_supported : Proc(ICodecAPI*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_modifiable : Proc(ICodecAPI*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_parameter_range : Proc(ICodecAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_parameter_values : Proc(ICodecAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT**, UInt32*, Win32cr::Foundation::HRESULT),
    get_default_value : Proc(ICodecAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    get_value : Proc(ICodecAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    set_value : Proc(ICodecAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, Win32cr::Foundation::HRESULT),
    register_for_event : Proc(ICodecAPI*, LibC::GUID*, LibC::IntPtrT, Win32cr::Foundation::HRESULT),
    unregister_for_event : Proc(ICodecAPI*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_all_defaults : Proc(ICodecAPI*, Win32cr::Foundation::HRESULT),
    set_value_with_notify : Proc(ICodecAPI*, LibC::GUID*, Win32cr::System::Com::VARIANT*, LibC::GUID**, UInt32*, Win32cr::Foundation::HRESULT),
    set_all_defaults_with_notify : Proc(ICodecAPI*, LibC::GUID**, UInt32*, Win32cr::Foundation::HRESULT),
    get_all_settings : Proc(ICodecAPI*, Void*, Win32cr::Foundation::HRESULT),
    set_all_settings : Proc(ICodecAPI*, Void*, Win32cr::Foundation::HRESULT),
    set_all_settings_with_notify : Proc(ICodecAPI*, Void*, LibC::GUID**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("901db4c7-31ce-41a2-85dc-8fa0bf41b8da")]
  record ICodecAPI, lpVtbl : ICodecAPIVtbl* do
    GUID = LibC::GUID.new(0x901db4c7_u32, 0x31ce_u16, 0x41a2_u16, StaticArray[0x85_u8, 0xdc_u8, 0x8f_u8, 0xa0_u8, 0xbf_u8, 0x41_u8, 0xb8_u8, 0xda_u8])
    def query_interface(this : ICodecAPI*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ICodecAPI*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ICodecAPI*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_supported(this : ICodecAPI*, api : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_supported.call(this, api)
    end
    def is_modifiable(this : ICodecAPI*, api : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_modifiable.call(this, api)
    end
    def get_parameter_range(this : ICodecAPI*, api : LibC::GUID*, value_min : Win32cr::System::Com::VARIANT*, value_max : Win32cr::System::Com::VARIANT*, stepping_delta : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_range.call(this, api, value_min, value_max, stepping_delta)
    end
    def get_parameter_values(this : ICodecAPI*, api : LibC::GUID*, values : Win32cr::System::Com::VARIANT**, values_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameter_values.call(this, api, values, values_count)
    end
    def get_default_value(this : ICodecAPI*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_value.call(this, api, value)
    end
    def get_value(this : ICodecAPI*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, api, value)
    end
    def set_value(this : ICodecAPI*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, api, value)
    end
    def register_for_event(this : ICodecAPI*, api : LibC::GUID*, userData : LibC::IntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_for_event.call(this, api, userData)
    end
    def unregister_for_event(this : ICodecAPI*, api : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_for_event.call(this, api)
    end
    def set_all_defaults(this : ICodecAPI*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_defaults.call(this)
    end
    def set_value_with_notify(this : ICodecAPI*, api : LibC::GUID*, value : Win32cr::System::Com::VARIANT*, changed_param : LibC::GUID**, changed_param_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value_with_notify.call(this, api, value, changed_param, changed_param_count)
    end
    def set_all_defaults_with_notify(this : ICodecAPI*, changed_param : LibC::GUID**, changed_param_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_defaults_with_notify.call(this, changed_param, changed_param_count)
    end
    def get_all_settings(this : ICodecAPI*, __midl__i_codec_api0000 : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_settings.call(this, __midl__i_codec_api0000)
    end
    def set_all_settings(this : ICodecAPI*, __midl__i_codec_api0001 : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_settings.call(this, __midl__i_codec_api0001)
    end
    def set_all_settings_with_notify(this : ICodecAPI*, __midl__i_codec_api0002 : Void*, changed_param : LibC::GUID**, changed_param_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_settings_with_notify.call(this, __midl__i_codec_api0002, changed_param, changed_param_count)
    end

  end

  @[Extern]
  record IDirect3D9ExOverlayExtensionVtbl,
    query_interface : Proc(IDirect3D9ExOverlayExtension*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3D9ExOverlayExtension*, UInt32),
    release : Proc(IDirect3D9ExOverlayExtension*, UInt32),
    check_device_overlay_type : Proc(IDirect3D9ExOverlayExtension*, UInt32, Win32cr::Graphics::Direct3D9::D3DDEVTYPE, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION, Win32cr::Media::MediaFoundation::D3DOVERLAYCAPS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("187aeb13-aaf5-4c59-876d-e059088c0df8")]
  record IDirect3D9ExOverlayExtension, lpVtbl : IDirect3D9ExOverlayExtensionVtbl* do
    GUID = LibC::GUID.new(0x187aeb13_u32, 0xaaf5_u16, 0x4c59_u16, StaticArray[0x87_u8, 0x6d_u8, 0xe0_u8, 0x59_u8, 0x8_u8, 0x8c_u8, 0xd_u8, 0xf8_u8])
    def query_interface(this : IDirect3D9ExOverlayExtension*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3D9ExOverlayExtension*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3D9ExOverlayExtension*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def check_device_overlay_type(this : IDirect3D9ExOverlayExtension*, adapter : UInt32, dev_type : Win32cr::Graphics::Direct3D9::D3DDEVTYPE, overlay_width : UInt32, overlay_height : UInt32, overlay_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pDisplayMode : Win32cr::Graphics::Direct3D9::D3DDISPLAYMODEEX*, display_rotation : Win32cr::Graphics::Direct3D9::D3DDISPLAYROTATION, pOverlayCaps : Win32cr::Media::MediaFoundation::D3DOVERLAYCAPS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_device_overlay_type.call(this, adapter, dev_type, overlay_width, overlay_height, overlay_format, pDisplayMode, display_rotation, pOverlayCaps)
    end

  end

  @[Extern]
  record IDirect3DDevice9VideoVtbl,
    query_interface : Proc(IDirect3DDevice9Video*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DDevice9Video*, UInt32),
    release : Proc(IDirect3DDevice9Video*, UInt32),
    get_content_protection_caps : Proc(IDirect3DDevice9Video*, LibC::GUID*, LibC::GUID*, Win32cr::Media::MediaFoundation::D3DCONTENTPROTECTIONCAPS*, Win32cr::Foundation::HRESULT),
    create_authenticated_channel : Proc(IDirect3DDevice9Video*, Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    create_crypto_session : Proc(IDirect3DDevice9Video*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("26dc4561-a1ee-4ae7-96da-118a36c0ec95")]
  record IDirect3DDevice9Video, lpVtbl : IDirect3DDevice9VideoVtbl* do
    GUID = LibC::GUID.new(0x26dc4561_u32, 0xa1ee_u16, 0x4ae7_u16, StaticArray[0x96_u8, 0xda_u8, 0x11_u8, 0x8a_u8, 0x36_u8, 0xc0_u8, 0xec_u8, 0x95_u8])
    def query_interface(this : IDirect3DDevice9Video*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DDevice9Video*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DDevice9Video*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_content_protection_caps(this : IDirect3DDevice9Video*, pCryptoType : LibC::GUID*, pDecodeProfile : LibC::GUID*, pCaps : Win32cr::Media::MediaFoundation::D3DCONTENTPROTECTIONCAPS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_content_protection_caps.call(this, pCryptoType, pDecodeProfile, pCaps)
    end
    def create_authenticated_channel(this : IDirect3DDevice9Video*, channel_type : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE, ppAuthenticatedChannel : Void**, pChannelHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_authenticated_channel.call(this, channel_type, ppAuthenticatedChannel, pChannelHandle)
    end
    def create_crypto_session(this : IDirect3DDevice9Video*, pCryptoType : LibC::GUID*, pDecodeProfile : LibC::GUID*, ppCryptoSession : Void**, pCryptoHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_crypto_session.call(this, pCryptoType, pDecodeProfile, ppCryptoSession, pCryptoHandle)
    end

  end

  @[Extern]
  record IDirect3DAuthenticatedChannel9Vtbl,
    query_interface : Proc(IDirect3DAuthenticatedChannel9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DAuthenticatedChannel9*, UInt32),
    release : Proc(IDirect3DAuthenticatedChannel9*, UInt32),
    get_certificate_size : Proc(IDirect3DAuthenticatedChannel9*, UInt32*, Win32cr::Foundation::HRESULT),
    get_certificate : Proc(IDirect3DAuthenticatedChannel9*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    negotiate_key_exchange : Proc(IDirect3DAuthenticatedChannel9*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    query : Proc(IDirect3DAuthenticatedChannel9*, UInt32, Void*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    configure : Proc(IDirect3DAuthenticatedChannel9*, UInt32, Void*, Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ff24beee-da21-4beb-98b5-d2f899f98af9")]
  record IDirect3DAuthenticatedChannel9, lpVtbl : IDirect3DAuthenticatedChannel9Vtbl* do
    GUID = LibC::GUID.new(0xff24beee_u32, 0xda21_u16, 0x4beb_u16, StaticArray[0x98_u8, 0xb5_u8, 0xd2_u8, 0xf8_u8, 0x99_u8, 0xf9_u8, 0x8a_u8, 0xf9_u8])
    def query_interface(this : IDirect3DAuthenticatedChannel9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DAuthenticatedChannel9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DAuthenticatedChannel9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_certificate_size(this : IDirect3DAuthenticatedChannel9*, pCertificateSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_size.call(this, pCertificateSize)
    end
    def get_certificate(this : IDirect3DAuthenticatedChannel9*, certifacte_size : UInt32, ppCertificate : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate.call(this, certifacte_size, ppCertificate)
    end
    def negotiate_key_exchange(this : IDirect3DAuthenticatedChannel9*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.negotiate_key_exchange.call(this, data_size, pData)
    end
    def query(this : IDirect3DAuthenticatedChannel9*, input_size : UInt32, pInput : Void*, output_size : UInt32, pOutput : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query.call(this, input_size, pInput, output_size, pOutput)
    end
    def configure(this : IDirect3DAuthenticatedChannel9*, input_size : UInt32, pInput : Void*, pOutput : Win32cr::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure.call(this, input_size, pInput, pOutput)
    end

  end

  @[Extern]
  record IDirect3DCryptoSession9Vtbl,
    query_interface : Proc(IDirect3DCryptoSession9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DCryptoSession9*, UInt32),
    release : Proc(IDirect3DCryptoSession9*, UInt32),
    get_certificate_size : Proc(IDirect3DCryptoSession9*, UInt32*, Win32cr::Foundation::HRESULT),
    get_certificate : Proc(IDirect3DCryptoSession9*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    negotiate_key_exchange : Proc(IDirect3DCryptoSession9*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    encryption_blt : Proc(IDirect3DCryptoSession9*, Void*, Void*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    decryption_blt : Proc(IDirect3DCryptoSession9*, Void*, Void*, UInt32, Win32cr::Graphics::Direct3D9::D3DENCRYPTED_BLOCK_INFO*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_surface_pitch : Proc(IDirect3DCryptoSession9*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    start_session_key_refresh : Proc(IDirect3DCryptoSession9*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    finish_session_key_refresh : Proc(IDirect3DCryptoSession9*, Win32cr::Foundation::HRESULT),
    get_encryption_blt_key : Proc(IDirect3DCryptoSession9*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa0ab799-7a9c-48ca-8c5b-237e71a54434")]
  record IDirect3DCryptoSession9, lpVtbl : IDirect3DCryptoSession9Vtbl* do
    GUID = LibC::GUID.new(0xfa0ab799_u32, 0x7a9c_u16, 0x48ca_u16, StaticArray[0x8c_u8, 0x5b_u8, 0x23_u8, 0x7e_u8, 0x71_u8, 0xa5_u8, 0x44_u8, 0x34_u8])
    def query_interface(this : IDirect3DCryptoSession9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DCryptoSession9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DCryptoSession9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_certificate_size(this : IDirect3DCryptoSession9*, pCertificateSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_size.call(this, pCertificateSize)
    end
    def get_certificate(this : IDirect3DCryptoSession9*, certifacte_size : UInt32, ppCertificate : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate.call(this, certifacte_size, ppCertificate)
    end
    def negotiate_key_exchange(this : IDirect3DCryptoSession9*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.negotiate_key_exchange.call(this, data_size, pData)
    end
    def encryption_blt(this : IDirect3DCryptoSession9*, pSrcSurface : Void*, pDstSurface : Void*, dst_surface_size : UInt32, pIV : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.encryption_blt.call(this, pSrcSurface, pDstSurface, dst_surface_size, pIV)
    end
    def decryption_blt(this : IDirect3DCryptoSession9*, pSrcSurface : Void*, pDstSurface : Void*, src_surface_size : UInt32, pEncryptedBlockInfo : Win32cr::Graphics::Direct3D9::D3DENCRYPTED_BLOCK_INFO*, pContentKey : Void*, pIV : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.decryption_blt.call(this, pSrcSurface, pDstSurface, src_surface_size, pEncryptedBlockInfo, pContentKey, pIV)
    end
    def get_surface_pitch(this : IDirect3DCryptoSession9*, pSrcSurface : Void*, pSurfacePitch : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_surface_pitch.call(this, pSrcSurface, pSurfacePitch)
    end
    def start_session_key_refresh(this : IDirect3DCryptoSession9*, pRandomNumber : Void*, random_number_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_session_key_refresh.call(this, pRandomNumber, random_number_size)
    end
    def finish_session_key_refresh(this : IDirect3DCryptoSession9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish_session_key_refresh.call(this)
    end
    def get_encryption_blt_key(this : IDirect3DCryptoSession9*, pReadbackKey : Void*, key_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_encryption_blt_key.call(this, pReadbackKey, key_size)
    end

  end

  @[Extern]
  record ID3D12VideoDecoderHeapVtbl,
    query_interface : Proc(ID3D12VideoDecoderHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDecoderHeap*, UInt32),
    release : Proc(ID3D12VideoDecoderHeap*, UInt32),
    get_private_data : Proc(ID3D12VideoDecoderHeap*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoDecoderHeap*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoDecoderHeap*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoDecoderHeap*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoDecoderHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12VideoDecoderHeap*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC)


  @[Extern]
  #@[Com("0946b7c9-ebf6-4047-bb73-8683e27dbb1f")]
  record ID3D12VideoDecoderHeap, lpVtbl : ID3D12VideoDecoderHeapVtbl* do
    GUID = LibC::GUID.new(0x946b7c9_u32, 0xebf6_u16, 0x4047_u16, StaticArray[0xbb_u8, 0x73_u8, 0x86_u8, 0x83_u8, 0xe2_u8, 0x7d_u8, 0xbb_u8, 0x1f_u8])
    def query_interface(this : ID3D12VideoDecoderHeap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDecoderHeap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDecoderHeap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoDecoderHeap*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoDecoderHeap*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoDecoderHeap*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoDecoderHeap*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoDecoderHeap*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12VideoDecoderHeap*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12VideoDeviceVtbl,
    query_interface : Proc(ID3D12VideoDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDevice*, UInt32),
    release : Proc(ID3D12VideoDevice*, UInt32),
    check_feature_support : Proc(ID3D12VideoDevice*, Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_video_decoder : Proc(ID3D12VideoDevice*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder_heap : Proc(ID3D12VideoDevice*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_processor : Proc(ID3D12VideoDevice*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1f052807-0b46-4acc-8a89-364f793718a4")]
  record ID3D12VideoDevice, lpVtbl : ID3D12VideoDeviceVtbl* do
    GUID = LibC::GUID.new(0x1f052807_u32, 0xb46_u16, 0x4acc_u16, StaticArray[0x8a_u8, 0x89_u8, 0x36_u8, 0x4f_u8, 0x79_u8, 0x37_u8, 0x18_u8, 0xa4_u8])
    def query_interface(this : ID3D12VideoDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def check_feature_support(this : ID3D12VideoDevice*, feature_video : Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature_video, pFeatureSupportData, feature_support_data_size)
    end
    def create_video_decoder(this : ID3D12VideoDevice*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, riid : LibC::GUID*, ppVideoDecoder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder.call(this, pDesc, riid, ppVideoDecoder)
    end
    def create_video_decoder_heap(this : ID3D12VideoDevice*, pVideoDecoderHeapDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, riid : LibC::GUID*, ppVideoDecoderHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder_heap.call(this, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap)
    end
    def create_video_processor(this : ID3D12VideoDevice*, node_mask : UInt32, pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : LibC::GUID*, ppVideoProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor.call(this, node_mask, pOutputStreamDesc, num_input_stream_descs, pInputStreamDescs, riid, ppVideoProcessor)
    end

  end

  @[Extern]
  record ID3D12VideoDecoderVtbl,
    query_interface : Proc(ID3D12VideoDecoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDecoder*, UInt32),
    release : Proc(ID3D12VideoDecoder*, UInt32),
    get_private_data : Proc(ID3D12VideoDecoder*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoDecoder*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoDecoder*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoDecoder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoDecoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12VideoDecoder*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC)


  @[Extern]
  #@[Com("c59b6bdc-7720-4074-a136-17a156037470")]
  record ID3D12VideoDecoder, lpVtbl : ID3D12VideoDecoderVtbl* do
    GUID = LibC::GUID.new(0xc59b6bdc_u32, 0x7720_u16, 0x4074_u16, StaticArray[0xa1_u8, 0x36_u8, 0x17_u8, 0xa1_u8, 0x56_u8, 0x3_u8, 0x74_u8, 0x70_u8])
    def query_interface(this : ID3D12VideoDecoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDecoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDecoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoDecoder*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoDecoder*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoDecoder*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoDecoder*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoDecoder*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12VideoDecoder*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12VideoProcessorVtbl,
    query_interface : Proc(ID3D12VideoProcessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoProcessor*, UInt32),
    release : Proc(ID3D12VideoProcessor*, UInt32),
    get_private_data : Proc(ID3D12VideoProcessor*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoProcessor*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoProcessor*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoProcessor*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoProcessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_node_mask : Proc(ID3D12VideoProcessor*, UInt32),
    get_num_input_stream_descs : Proc(ID3D12VideoProcessor*, UInt32),
    get_input_stream_descs : Proc(ID3D12VideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Win32cr::Foundation::HRESULT),
    get_output_stream_desc : Proc(ID3D12VideoProcessor*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC)


  @[Extern]
  #@[Com("304fdb32-bede-410a-8545-943ac6a46138")]
  record ID3D12VideoProcessor, lpVtbl : ID3D12VideoProcessorVtbl* do
    GUID = LibC::GUID.new(0x304fdb32_u32, 0xbede_u16, 0x410a_u16, StaticArray[0x85_u8, 0x45_u8, 0x94_u8, 0x3a_u8, 0xc6_u8, 0xa4_u8, 0x61_u8, 0x38_u8])
    def query_interface(this : ID3D12VideoProcessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoProcessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoProcessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoProcessor*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoProcessor*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoProcessor*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoProcessor*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoProcessor*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_node_mask(this : ID3D12VideoProcessor*) : UInt32
      @lpVtbl.try &.value.get_node_mask.call(this)
    end
    def get_num_input_stream_descs(this : ID3D12VideoProcessor*) : UInt32
      @lpVtbl.try &.value.get_num_input_stream_descs.call(this)
    end
    def get_input_stream_descs(this : ID3D12VideoProcessor*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_stream_descs.call(this, num_input_stream_descs, pInputStreamDescs)
    end
    def get_output_stream_desc(this : ID3D12VideoProcessor*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
      @lpVtbl.try &.value.get_output_stream_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12VideoDecodeCommandListVtbl,
    query_interface : Proc(ID3D12VideoDecodeCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDecodeCommandList*, UInt32),
    release : Proc(ID3D12VideoDecodeCommandList*, UInt32),
    get_private_data : Proc(ID3D12VideoDecodeCommandList*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoDecodeCommandList*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoDecodeCommandList*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoDecodeCommandList*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoDecodeCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoDecodeCommandList*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoDecodeCommandList*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoDecodeCommandList*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoDecodeCommandList*, Void),
    resource_barrier : Proc(ID3D12VideoDecodeCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoDecodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoDecodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoDecodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoDecodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoDecodeCommandList*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoDecodeCommandList*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoDecodeCommandList*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoDecodeCommandList*, Void),
    decode_frame : Proc(ID3D12VideoDecodeCommandList*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void),
    write_buffer_immediate : Proc(ID3D12VideoDecodeCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)


  @[Extern]
  #@[Com("3b60536e-ad29-4e64-a269-f853837e5e53")]
  record ID3D12VideoDecodeCommandList, lpVtbl : ID3D12VideoDecodeCommandListVtbl* do
    GUID = LibC::GUID.new(0x3b60536e_u32, 0xad29_u16, 0x4e64_u16, StaticArray[0xa2_u8, 0x69_u8, 0xf8_u8, 0x53_u8, 0x83_u8, 0x7e_u8, 0x5e_u8, 0x53_u8])
    def query_interface(this : ID3D12VideoDecodeCommandList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDecodeCommandList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDecodeCommandList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoDecodeCommandList*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoDecodeCommandList*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoDecodeCommandList*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoDecodeCommandList*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoDecodeCommandList*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoDecodeCommandList*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoDecodeCommandList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoDecodeCommandList*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoDecodeCommandList*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoDecodeCommandList*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoDecodeCommandList*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoDecodeCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoDecodeCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoDecodeCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoDecodeCommandList*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoDecodeCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoDecodeCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoDecodeCommandList*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def decode_frame(this : ID3D12VideoDecodeCommandList*, pDecoder : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.decode_frame.call(this, pDecoder, pOutputArguments, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoDecodeCommandList*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end

  end

  @[Extern]
  record ID3D12VideoProcessCommandListVtbl,
    query_interface : Proc(ID3D12VideoProcessCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoProcessCommandList*, UInt32),
    release : Proc(ID3D12VideoProcessCommandList*, UInt32),
    get_private_data : Proc(ID3D12VideoProcessCommandList*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoProcessCommandList*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoProcessCommandList*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoProcessCommandList*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoProcessCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoProcessCommandList*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoProcessCommandList*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoProcessCommandList*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoProcessCommandList*, Void),
    resource_barrier : Proc(ID3D12VideoProcessCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoProcessCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoProcessCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoProcessCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoProcessCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoProcessCommandList*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoProcessCommandList*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoProcessCommandList*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoProcessCommandList*, Void),
    process_frames : Proc(ID3D12VideoProcessCommandList*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*, Void),
    write_buffer_immediate : Proc(ID3D12VideoProcessCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)


  @[Extern]
  #@[Com("aeb2543a-167f-4682-acc8-d159ed4a6209")]
  record ID3D12VideoProcessCommandList, lpVtbl : ID3D12VideoProcessCommandListVtbl* do
    GUID = LibC::GUID.new(0xaeb2543a_u32, 0x167f_u16, 0x4682_u16, StaticArray[0xac_u8, 0xc8_u8, 0xd1_u8, 0x59_u8, 0xed_u8, 0x4a_u8, 0x62_u8, 0x9_u8])
    def query_interface(this : ID3D12VideoProcessCommandList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoProcessCommandList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoProcessCommandList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoProcessCommandList*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoProcessCommandList*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoProcessCommandList*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoProcessCommandList*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoProcessCommandList*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoProcessCommandList*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoProcessCommandList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoProcessCommandList*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoProcessCommandList*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoProcessCommandList*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoProcessCommandList*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoProcessCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoProcessCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoProcessCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoProcessCommandList*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoProcessCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoProcessCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoProcessCommandList*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def process_frames(this : ID3D12VideoProcessCommandList*, pVideoProcessor : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, num_input_streams : UInt32, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.process_frames.call(this, pVideoProcessor, pOutputArguments, num_input_streams, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoProcessCommandList*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end

  end

  @[Extern]
  record ID3D12VideoDecodeCommandList1Vtbl,
    query_interface : Proc(ID3D12VideoDecodeCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDecodeCommandList1*, UInt32),
    release : Proc(ID3D12VideoDecodeCommandList1*, UInt32),
    get_private_data : Proc(ID3D12VideoDecodeCommandList1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoDecodeCommandList1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoDecodeCommandList1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoDecodeCommandList1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoDecodeCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoDecodeCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoDecodeCommandList1*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoDecodeCommandList1*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoDecodeCommandList1*, Void),
    resource_barrier : Proc(ID3D12VideoDecodeCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoDecodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoDecodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoDecodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoDecodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoDecodeCommandList1*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoDecodeCommandList1*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoDecodeCommandList1*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoDecodeCommandList1*, Void),
    decode_frame : Proc(ID3D12VideoDecodeCommandList1*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void),
    write_buffer_immediate : Proc(ID3D12VideoDecodeCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    decode_frame1 : Proc(ID3D12VideoDecodeCommandList1*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void)


  @[Extern]
  #@[Com("d52f011b-b56e-453c-a05a-a7f311c8f472")]
  record ID3D12VideoDecodeCommandList1, lpVtbl : ID3D12VideoDecodeCommandList1Vtbl* do
    GUID = LibC::GUID.new(0xd52f011b_u32, 0xb56e_u16, 0x453c_u16, StaticArray[0xa0_u8, 0x5a_u8, 0xa7_u8, 0xf3_u8, 0x11_u8, 0xc8_u8, 0xf4_u8, 0x72_u8])
    def query_interface(this : ID3D12VideoDecodeCommandList1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDecodeCommandList1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDecodeCommandList1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoDecodeCommandList1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoDecodeCommandList1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoDecodeCommandList1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoDecodeCommandList1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoDecodeCommandList1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoDecodeCommandList1*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoDecodeCommandList1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoDecodeCommandList1*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoDecodeCommandList1*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoDecodeCommandList1*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoDecodeCommandList1*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoDecodeCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoDecodeCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoDecodeCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoDecodeCommandList1*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoDecodeCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoDecodeCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoDecodeCommandList1*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def decode_frame(this : ID3D12VideoDecodeCommandList1*, pDecoder : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.decode_frame.call(this, pDecoder, pOutputArguments, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoDecodeCommandList1*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def decode_frame1(this : ID3D12VideoDecodeCommandList1*, pDecoder : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.decode_frame1.call(this, pDecoder, pOutputArguments, pInputArguments)
    end

  end

  @[Extern]
  record ID3D12VideoProcessCommandList1Vtbl,
    query_interface : Proc(ID3D12VideoProcessCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoProcessCommandList1*, UInt32),
    release : Proc(ID3D12VideoProcessCommandList1*, UInt32),
    get_private_data : Proc(ID3D12VideoProcessCommandList1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoProcessCommandList1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoProcessCommandList1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoProcessCommandList1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoProcessCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoProcessCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoProcessCommandList1*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoProcessCommandList1*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoProcessCommandList1*, Void),
    resource_barrier : Proc(ID3D12VideoProcessCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoProcessCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoProcessCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoProcessCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoProcessCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoProcessCommandList1*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoProcessCommandList1*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoProcessCommandList1*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoProcessCommandList1*, Void),
    process_frames : Proc(ID3D12VideoProcessCommandList1*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*, Void),
    write_buffer_immediate : Proc(ID3D12VideoProcessCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    process_frames1 : Proc(ID3D12VideoProcessCommandList1*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*, Void)


  @[Extern]
  #@[Com("542c5c4d-7596-434f-8c93-4efa6766f267")]
  record ID3D12VideoProcessCommandList1, lpVtbl : ID3D12VideoProcessCommandList1Vtbl* do
    GUID = LibC::GUID.new(0x542c5c4d_u32, 0x7596_u16, 0x434f_u16, StaticArray[0x8c_u8, 0x93_u8, 0x4e_u8, 0xfa_u8, 0x67_u8, 0x66_u8, 0xf2_u8, 0x67_u8])
    def query_interface(this : ID3D12VideoProcessCommandList1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoProcessCommandList1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoProcessCommandList1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoProcessCommandList1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoProcessCommandList1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoProcessCommandList1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoProcessCommandList1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoProcessCommandList1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoProcessCommandList1*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoProcessCommandList1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoProcessCommandList1*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoProcessCommandList1*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoProcessCommandList1*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoProcessCommandList1*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoProcessCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoProcessCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoProcessCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoProcessCommandList1*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoProcessCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoProcessCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoProcessCommandList1*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def process_frames(this : ID3D12VideoProcessCommandList1*, pVideoProcessor : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, num_input_streams : UInt32, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.process_frames.call(this, pVideoProcessor, pOutputArguments, num_input_streams, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoProcessCommandList1*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def process_frames1(this : ID3D12VideoProcessCommandList1*, pVideoProcessor : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, num_input_streams : UInt32, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*) : Void
      @lpVtbl.try &.value.process_frames1.call(this, pVideoProcessor, pOutputArguments, num_input_streams, pInputArguments)
    end

  end

  @[Extern]
  record ID3D12VideoMotionEstimatorVtbl,
    query_interface : Proc(ID3D12VideoMotionEstimator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoMotionEstimator*, UInt32),
    release : Proc(ID3D12VideoMotionEstimator*, UInt32),
    get_private_data : Proc(ID3D12VideoMotionEstimator*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoMotionEstimator*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoMotionEstimator*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoMotionEstimator*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoMotionEstimator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12VideoMotionEstimator*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC),
    get_protected_resource_session : Proc(ID3D12VideoMotionEstimator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("33fdae0e-098b-428f-87bb-34b695de08f8")]
  record ID3D12VideoMotionEstimator, lpVtbl : ID3D12VideoMotionEstimatorVtbl* do
    GUID = LibC::GUID.new(0x33fdae0e_u32, 0x98b_u16, 0x428f_u16, StaticArray[0x87_u8, 0xbb_u8, 0x34_u8, 0xb6_u8, 0x95_u8, 0xde_u8, 0x8_u8, 0xf8_u8])
    def query_interface(this : ID3D12VideoMotionEstimator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoMotionEstimator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoMotionEstimator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoMotionEstimator*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoMotionEstimator*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoMotionEstimator*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoMotionEstimator*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoMotionEstimator*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12VideoMotionEstimator*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_protected_resource_session(this : ID3D12VideoMotionEstimator*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12VideoMotionVectorHeapVtbl,
    query_interface : Proc(ID3D12VideoMotionVectorHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoMotionVectorHeap*, UInt32),
    release : Proc(ID3D12VideoMotionVectorHeap*, UInt32),
    get_private_data : Proc(ID3D12VideoMotionVectorHeap*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoMotionVectorHeap*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoMotionVectorHeap*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoMotionVectorHeap*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoMotionVectorHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12VideoMotionVectorHeap*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC),
    get_protected_resource_session : Proc(ID3D12VideoMotionVectorHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5be17987-743a-4061-834b-23d22daea505")]
  record ID3D12VideoMotionVectorHeap, lpVtbl : ID3D12VideoMotionVectorHeapVtbl* do
    GUID = LibC::GUID.new(0x5be17987_u32, 0x743a_u16, 0x4061_u16, StaticArray[0x83_u8, 0x4b_u8, 0x23_u8, 0xd2_u8, 0x2d_u8, 0xae_u8, 0xa5_u8, 0x5_u8])
    def query_interface(this : ID3D12VideoMotionVectorHeap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoMotionVectorHeap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoMotionVectorHeap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoMotionVectorHeap*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoMotionVectorHeap*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoMotionVectorHeap*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoMotionVectorHeap*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoMotionVectorHeap*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12VideoMotionVectorHeap*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_protected_resource_session(this : ID3D12VideoMotionVectorHeap*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12VideoDevice1Vtbl,
    query_interface : Proc(ID3D12VideoDevice1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDevice1*, UInt32),
    release : Proc(ID3D12VideoDevice1*, UInt32),
    check_feature_support : Proc(ID3D12VideoDevice1*, Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_video_decoder : Proc(ID3D12VideoDevice1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder_heap : Proc(ID3D12VideoDevice1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_processor : Proc(ID3D12VideoDevice1*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_motion_estimator : Proc(ID3D12VideoDevice1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_motion_vector_heap : Proc(ID3D12VideoDevice1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("981611ad-a144-4c83-9890-f30e26d658ab")]
  record ID3D12VideoDevice1, lpVtbl : ID3D12VideoDevice1Vtbl* do
    GUID = LibC::GUID.new(0x981611ad_u32, 0xa144_u16, 0x4c83_u16, StaticArray[0x98_u8, 0x90_u8, 0xf3_u8, 0xe_u8, 0x26_u8, 0xd6_u8, 0x58_u8, 0xab_u8])
    def query_interface(this : ID3D12VideoDevice1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDevice1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDevice1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def check_feature_support(this : ID3D12VideoDevice1*, feature_video : Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature_video, pFeatureSupportData, feature_support_data_size)
    end
    def create_video_decoder(this : ID3D12VideoDevice1*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, riid : LibC::GUID*, ppVideoDecoder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder.call(this, pDesc, riid, ppVideoDecoder)
    end
    def create_video_decoder_heap(this : ID3D12VideoDevice1*, pVideoDecoderHeapDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, riid : LibC::GUID*, ppVideoDecoderHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder_heap.call(this, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap)
    end
    def create_video_processor(this : ID3D12VideoDevice1*, node_mask : UInt32, pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : LibC::GUID*, ppVideoProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor.call(this, node_mask, pOutputStreamDesc, num_input_stream_descs, pInputStreamDescs, riid, ppVideoProcessor)
    end
    def create_video_motion_estimator(this : ID3D12VideoDevice1*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoMotionEstimator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_motion_estimator.call(this, pDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator)
    end
    def create_video_motion_vector_heap(this : ID3D12VideoDevice1*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoMotionVectorHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_motion_vector_heap.call(this, pDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap)
    end

  end

  @[Extern]
  record ID3D12VideoEncodeCommandListVtbl,
    query_interface : Proc(ID3D12VideoEncodeCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoEncodeCommandList*, UInt32),
    release : Proc(ID3D12VideoEncodeCommandList*, UInt32),
    get_private_data : Proc(ID3D12VideoEncodeCommandList*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoEncodeCommandList*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoEncodeCommandList*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoEncodeCommandList*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoEncodeCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoEncodeCommandList*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoEncodeCommandList*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoEncodeCommandList*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoEncodeCommandList*, Void),
    resource_barrier : Proc(ID3D12VideoEncodeCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoEncodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoEncodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoEncodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoEncodeCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoEncodeCommandList*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoEncodeCommandList*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoEncodeCommandList*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoEncodeCommandList*, Void),
    estimate_motion : Proc(ID3D12VideoEncodeCommandList*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*, Void),
    resolve_motion_vector_heap : Proc(ID3D12VideoEncodeCommandList*, Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*, Void),
    write_buffer_immediate : Proc(ID3D12VideoEncodeCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    set_protected_resource_session : Proc(ID3D12VideoEncodeCommandList*, Void*, Void)


  @[Extern]
  #@[Com("8455293a-0cbd-4831-9b39-fbdbab724723")]
  record ID3D12VideoEncodeCommandList, lpVtbl : ID3D12VideoEncodeCommandListVtbl* do
    GUID = LibC::GUID.new(0x8455293a_u32, 0xcbd_u16, 0x4831_u16, StaticArray[0x9b_u8, 0x39_u8, 0xfb_u8, 0xdb_u8, 0xab_u8, 0x72_u8, 0x47_u8, 0x23_u8])
    def query_interface(this : ID3D12VideoEncodeCommandList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoEncodeCommandList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoEncodeCommandList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoEncodeCommandList*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoEncodeCommandList*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoEncodeCommandList*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoEncodeCommandList*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoEncodeCommandList*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoEncodeCommandList*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoEncodeCommandList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoEncodeCommandList*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoEncodeCommandList*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoEncodeCommandList*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoEncodeCommandList*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoEncodeCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoEncodeCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoEncodeCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoEncodeCommandList*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoEncodeCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoEncodeCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoEncodeCommandList*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def estimate_motion(this : ID3D12VideoEncodeCommandList*, pMotionEstimator : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*) : Void
      @lpVtbl.try &.value.estimate_motion.call(this, pMotionEstimator, pOutputArguments, pInputArguments)
    end
    def resolve_motion_vector_heap(this : ID3D12VideoEncodeCommandList*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*) : Void
      @lpVtbl.try &.value.resolve_motion_vector_heap.call(this, pOutputArguments, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoEncodeCommandList*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def set_protected_resource_session(this : ID3D12VideoEncodeCommandList*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end

  end

  @[Extern]
  record ID3D12VideoDecoder1Vtbl,
    query_interface : Proc(ID3D12VideoDecoder1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDecoder1*, UInt32),
    release : Proc(ID3D12VideoDecoder1*, UInt32),
    get_private_data : Proc(ID3D12VideoDecoder1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoDecoder1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoDecoder1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoDecoder1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoDecoder1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12VideoDecoder1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC),
    get_protected_resource_session : Proc(ID3D12VideoDecoder1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("79a2e5fb-ccd2-469a-9fde-195d10951f7e")]
  record ID3D12VideoDecoder1, lpVtbl : ID3D12VideoDecoder1Vtbl* do
    GUID = LibC::GUID.new(0x79a2e5fb_u32, 0xccd2_u16, 0x469a_u16, StaticArray[0x9f_u8, 0xde_u8, 0x19_u8, 0x5d_u8, 0x10_u8, 0x95_u8, 0x1f_u8, 0x7e_u8])
    def query_interface(this : ID3D12VideoDecoder1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDecoder1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDecoder1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoDecoder1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoDecoder1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoDecoder1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoDecoder1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoDecoder1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12VideoDecoder1*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_protected_resource_session(this : ID3D12VideoDecoder1*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12VideoDecoderHeap1Vtbl,
    query_interface : Proc(ID3D12VideoDecoderHeap1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDecoderHeap1*, UInt32),
    release : Proc(ID3D12VideoDecoderHeap1*, UInt32),
    get_private_data : Proc(ID3D12VideoDecoderHeap1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoDecoderHeap1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoDecoderHeap1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoDecoderHeap1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoDecoderHeap1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12VideoDecoderHeap1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC),
    get_protected_resource_session : Proc(ID3D12VideoDecoderHeap1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("da1d98c5-539f-41b2-bf6b-1198a03b6d26")]
  record ID3D12VideoDecoderHeap1, lpVtbl : ID3D12VideoDecoderHeap1Vtbl* do
    GUID = LibC::GUID.new(0xda1d98c5_u32, 0x539f_u16, 0x41b2_u16, StaticArray[0xbf_u8, 0x6b_u8, 0x11_u8, 0x98_u8, 0xa0_u8, 0x3b_u8, 0x6d_u8, 0x26_u8])
    def query_interface(this : ID3D12VideoDecoderHeap1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDecoderHeap1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDecoderHeap1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoDecoderHeap1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoDecoderHeap1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoDecoderHeap1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoDecoderHeap1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoDecoderHeap1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12VideoDecoderHeap1*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_protected_resource_session(this : ID3D12VideoDecoderHeap1*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12VideoProcessor1Vtbl,
    query_interface : Proc(ID3D12VideoProcessor1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoProcessor1*, UInt32),
    release : Proc(ID3D12VideoProcessor1*, UInt32),
    get_private_data : Proc(ID3D12VideoProcessor1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoProcessor1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoProcessor1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoProcessor1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoProcessor1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_node_mask : Proc(ID3D12VideoProcessor1*, UInt32),
    get_num_input_stream_descs : Proc(ID3D12VideoProcessor1*, UInt32),
    get_input_stream_descs : Proc(ID3D12VideoProcessor1*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Win32cr::Foundation::HRESULT),
    get_output_stream_desc : Proc(ID3D12VideoProcessor1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC),
    get_protected_resource_session : Proc(ID3D12VideoProcessor1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f3cfe615-553f-425c-86d8-ee8c1b1fb01c")]
  record ID3D12VideoProcessor1, lpVtbl : ID3D12VideoProcessor1Vtbl* do
    GUID = LibC::GUID.new(0xf3cfe615_u32, 0x553f_u16, 0x425c_u16, StaticArray[0x86_u8, 0xd8_u8, 0xee_u8, 0x8c_u8, 0x1b_u8, 0x1f_u8, 0xb0_u8, 0x1c_u8])
    def query_interface(this : ID3D12VideoProcessor1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoProcessor1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoProcessor1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoProcessor1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoProcessor1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoProcessor1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoProcessor1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoProcessor1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_node_mask(this : ID3D12VideoProcessor1*) : UInt32
      @lpVtbl.try &.value.get_node_mask.call(this)
    end
    def get_num_input_stream_descs(this : ID3D12VideoProcessor1*) : UInt32
      @lpVtbl.try &.value.get_num_input_stream_descs.call(this)
    end
    def get_input_stream_descs(this : ID3D12VideoProcessor1*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_stream_descs.call(this, num_input_stream_descs, pInputStreamDescs)
    end
    def get_output_stream_desc(this : ID3D12VideoProcessor1*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
      @lpVtbl.try &.value.get_output_stream_desc.call(this)
    end
    def get_protected_resource_session(this : ID3D12VideoProcessor1*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12VideoExtensionCommandVtbl,
    query_interface : Proc(ID3D12VideoExtensionCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoExtensionCommand*, UInt32),
    release : Proc(ID3D12VideoExtensionCommand*, UInt32),
    get_private_data : Proc(ID3D12VideoExtensionCommand*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoExtensionCommand*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoExtensionCommand*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoExtensionCommand*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoExtensionCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12VideoExtensionCommand*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_DESC),
    get_protected_resource_session : Proc(ID3D12VideoExtensionCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("554e41e8-ae8e-4a8c-b7d2-5b4f274a30e4")]
  record ID3D12VideoExtensionCommand, lpVtbl : ID3D12VideoExtensionCommandVtbl* do
    GUID = LibC::GUID.new(0x554e41e8_u32, 0xae8e_u16, 0x4a8c_u16, StaticArray[0xb7_u8, 0xd2_u8, 0x5b_u8, 0x4f_u8, 0x27_u8, 0x4a_u8, 0x30_u8, 0xe4_u8])
    def query_interface(this : ID3D12VideoExtensionCommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoExtensionCommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoExtensionCommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoExtensionCommand*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoExtensionCommand*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoExtensionCommand*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoExtensionCommand*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoExtensionCommand*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12VideoExtensionCommand*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_protected_resource_session(this : ID3D12VideoExtensionCommand*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12VideoDevice2Vtbl,
    query_interface : Proc(ID3D12VideoDevice2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDevice2*, UInt32),
    release : Proc(ID3D12VideoDevice2*, UInt32),
    check_feature_support : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_video_decoder : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder_heap : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_processor : Proc(ID3D12VideoDevice2*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_motion_estimator : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_motion_vector_heap : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder1 : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder_heap1 : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_processor1 : Proc(ID3D12VideoDevice2*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_extension_command : Proc(ID3D12VideoDevice2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_DESC*, Void*, LibC::UIntPtrT, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    execute_extension_command : Proc(ID3D12VideoDevice2*, Void*, Void*, LibC::UIntPtrT, Void*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f019ac49-f838-4a95-9b17-579437c8f513")]
  record ID3D12VideoDevice2, lpVtbl : ID3D12VideoDevice2Vtbl* do
    GUID = LibC::GUID.new(0xf019ac49_u32, 0xf838_u16, 0x4a95_u16, StaticArray[0x9b_u8, 0x17_u8, 0x57_u8, 0x94_u8, 0x37_u8, 0xc8_u8, 0xf5_u8, 0x13_u8])
    def query_interface(this : ID3D12VideoDevice2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDevice2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDevice2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def check_feature_support(this : ID3D12VideoDevice2*, feature_video : Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature_video, pFeatureSupportData, feature_support_data_size)
    end
    def create_video_decoder(this : ID3D12VideoDevice2*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, riid : LibC::GUID*, ppVideoDecoder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder.call(this, pDesc, riid, ppVideoDecoder)
    end
    def create_video_decoder_heap(this : ID3D12VideoDevice2*, pVideoDecoderHeapDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, riid : LibC::GUID*, ppVideoDecoderHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder_heap.call(this, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap)
    end
    def create_video_processor(this : ID3D12VideoDevice2*, node_mask : UInt32, pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : LibC::GUID*, ppVideoProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor.call(this, node_mask, pOutputStreamDesc, num_input_stream_descs, pInputStreamDescs, riid, ppVideoProcessor)
    end
    def create_video_motion_estimator(this : ID3D12VideoDevice2*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoMotionEstimator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_motion_estimator.call(this, pDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator)
    end
    def create_video_motion_vector_heap(this : ID3D12VideoDevice2*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoMotionVectorHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_motion_vector_heap.call(this, pDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap)
    end
    def create_video_decoder1(this : ID3D12VideoDevice2*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoDecoder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder1.call(this, pDesc, pProtectedResourceSession, riid, ppVideoDecoder)
    end
    def create_video_decoder_heap1(this : ID3D12VideoDevice2*, pVideoDecoderHeapDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoDecoderHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder_heap1.call(this, pVideoDecoderHeapDesc, pProtectedResourceSession, riid, ppVideoDecoderHeap)
    end
    def create_video_processor1(this : ID3D12VideoDevice2*, node_mask : UInt32, pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor1.call(this, node_mask, pOutputStreamDesc, num_input_stream_descs, pInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor)
    end
    def create_video_extension_command(this : ID3D12VideoDevice2*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_DESC*, pCreationParameters : Void*, creation_parameters_data_size_in_bytes : LibC::UIntPtrT, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoExtensionCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_extension_command.call(this, pDesc, pCreationParameters, creation_parameters_data_size_in_bytes, pProtectedResourceSession, riid, ppVideoExtensionCommand)
    end
    def execute_extension_command(this : ID3D12VideoDevice2*, pExtensionCommand : Void*, pExecutionParameters : Void*, execution_parameters_size_in_bytes : LibC::UIntPtrT, pOutputData : Void*, output_data_size_in_bytes : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_extension_command.call(this, pExtensionCommand, pExecutionParameters, execution_parameters_size_in_bytes, pOutputData, output_data_size_in_bytes)
    end

  end

  @[Extern]
  record ID3D12VideoDecodeCommandList2Vtbl,
    query_interface : Proc(ID3D12VideoDecodeCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDecodeCommandList2*, UInt32),
    release : Proc(ID3D12VideoDecodeCommandList2*, UInt32),
    get_private_data : Proc(ID3D12VideoDecodeCommandList2*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoDecodeCommandList2*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoDecodeCommandList2*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoDecodeCommandList2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoDecodeCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoDecodeCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoDecodeCommandList2*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoDecodeCommandList2*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoDecodeCommandList2*, Void),
    resource_barrier : Proc(ID3D12VideoDecodeCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoDecodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoDecodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoDecodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoDecodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoDecodeCommandList2*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoDecodeCommandList2*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoDecodeCommandList2*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoDecodeCommandList2*, Void),
    decode_frame : Proc(ID3D12VideoDecodeCommandList2*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void),
    write_buffer_immediate : Proc(ID3D12VideoDecodeCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    decode_frame1 : Proc(ID3D12VideoDecodeCommandList2*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*, Void),
    set_protected_resource_session : Proc(ID3D12VideoDecodeCommandList2*, Void*, Void),
    initialize_extension_command : Proc(ID3D12VideoDecodeCommandList2*, Void*, Void*, LibC::UIntPtrT, Void),
    execute_extension_command : Proc(ID3D12VideoDecodeCommandList2*, Void*, Void*, LibC::UIntPtrT, Void)


  @[Extern]
  #@[Com("6e120880-c114-4153-8036-d247051e1729")]
  record ID3D12VideoDecodeCommandList2, lpVtbl : ID3D12VideoDecodeCommandList2Vtbl* do
    GUID = LibC::GUID.new(0x6e120880_u32, 0xc114_u16, 0x4153_u16, StaticArray[0x80_u8, 0x36_u8, 0xd2_u8, 0x47_u8, 0x5_u8, 0x1e_u8, 0x17_u8, 0x29_u8])
    def query_interface(this : ID3D12VideoDecodeCommandList2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDecodeCommandList2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDecodeCommandList2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoDecodeCommandList2*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoDecodeCommandList2*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoDecodeCommandList2*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoDecodeCommandList2*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoDecodeCommandList2*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoDecodeCommandList2*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoDecodeCommandList2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoDecodeCommandList2*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoDecodeCommandList2*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoDecodeCommandList2*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoDecodeCommandList2*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoDecodeCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoDecodeCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoDecodeCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoDecodeCommandList2*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoDecodeCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoDecodeCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoDecodeCommandList2*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def decode_frame(this : ID3D12VideoDecodeCommandList2*, pDecoder : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.decode_frame.call(this, pDecoder, pOutputArguments, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoDecodeCommandList2*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def decode_frame1(this : ID3D12VideoDecodeCommandList2*, pDecoder : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.decode_frame1.call(this, pDecoder, pOutputArguments, pInputArguments)
    end
    def set_protected_resource_session(this : ID3D12VideoDecodeCommandList2*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end
    def initialize_extension_command(this : ID3D12VideoDecodeCommandList2*, pExtensionCommand : Void*, pInitializationParameters : Void*, initialization_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.initialize_extension_command.call(this, pExtensionCommand, pInitializationParameters, initialization_parameters_size_in_bytes)
    end
    def execute_extension_command(this : ID3D12VideoDecodeCommandList2*, pExtensionCommand : Void*, pExecutionParameters : Void*, execution_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.execute_extension_command.call(this, pExtensionCommand, pExecutionParameters, execution_parameters_size_in_bytes)
    end

  end

  @[Extern]
  record ID3D12VideoProcessCommandList2Vtbl,
    query_interface : Proc(ID3D12VideoProcessCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoProcessCommandList2*, UInt32),
    release : Proc(ID3D12VideoProcessCommandList2*, UInt32),
    get_private_data : Proc(ID3D12VideoProcessCommandList2*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoProcessCommandList2*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoProcessCommandList2*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoProcessCommandList2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoProcessCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoProcessCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoProcessCommandList2*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoProcessCommandList2*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoProcessCommandList2*, Void),
    resource_barrier : Proc(ID3D12VideoProcessCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoProcessCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoProcessCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoProcessCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoProcessCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoProcessCommandList2*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoProcessCommandList2*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoProcessCommandList2*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoProcessCommandList2*, Void),
    process_frames : Proc(ID3D12VideoProcessCommandList2*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*, Void),
    write_buffer_immediate : Proc(ID3D12VideoProcessCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    process_frames1 : Proc(ID3D12VideoProcessCommandList2*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*, Void),
    set_protected_resource_session : Proc(ID3D12VideoProcessCommandList2*, Void*, Void),
    initialize_extension_command : Proc(ID3D12VideoProcessCommandList2*, Void*, Void*, LibC::UIntPtrT, Void),
    execute_extension_command : Proc(ID3D12VideoProcessCommandList2*, Void*, Void*, LibC::UIntPtrT, Void)


  @[Extern]
  #@[Com("db525ae4-6ad6-473c-baa7-59b2e37082e4")]
  record ID3D12VideoProcessCommandList2, lpVtbl : ID3D12VideoProcessCommandList2Vtbl* do
    GUID = LibC::GUID.new(0xdb525ae4_u32, 0x6ad6_u16, 0x473c_u16, StaticArray[0xba_u8, 0xa7_u8, 0x59_u8, 0xb2_u8, 0xe3_u8, 0x70_u8, 0x82_u8, 0xe4_u8])
    def query_interface(this : ID3D12VideoProcessCommandList2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoProcessCommandList2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoProcessCommandList2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoProcessCommandList2*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoProcessCommandList2*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoProcessCommandList2*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoProcessCommandList2*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoProcessCommandList2*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoProcessCommandList2*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoProcessCommandList2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoProcessCommandList2*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoProcessCommandList2*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoProcessCommandList2*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoProcessCommandList2*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoProcessCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoProcessCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoProcessCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoProcessCommandList2*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoProcessCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoProcessCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoProcessCommandList2*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def process_frames(this : ID3D12VideoProcessCommandList2*, pVideoProcessor : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, num_input_streams : UInt32, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*) : Void
      @lpVtbl.try &.value.process_frames.call(this, pVideoProcessor, pOutputArguments, num_input_streams, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoProcessCommandList2*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def process_frames1(this : ID3D12VideoProcessCommandList2*, pVideoProcessor : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*, num_input_streams : UInt32, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*) : Void
      @lpVtbl.try &.value.process_frames1.call(this, pVideoProcessor, pOutputArguments, num_input_streams, pInputArguments)
    end
    def set_protected_resource_session(this : ID3D12VideoProcessCommandList2*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end
    def initialize_extension_command(this : ID3D12VideoProcessCommandList2*, pExtensionCommand : Void*, pInitializationParameters : Void*, initialization_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.initialize_extension_command.call(this, pExtensionCommand, pInitializationParameters, initialization_parameters_size_in_bytes)
    end
    def execute_extension_command(this : ID3D12VideoProcessCommandList2*, pExtensionCommand : Void*, pExecutionParameters : Void*, execution_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.execute_extension_command.call(this, pExtensionCommand, pExecutionParameters, execution_parameters_size_in_bytes)
    end

  end

  @[Extern]
  record ID3D12VideoEncodeCommandList1Vtbl,
    query_interface : Proc(ID3D12VideoEncodeCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoEncodeCommandList1*, UInt32),
    release : Proc(ID3D12VideoEncodeCommandList1*, UInt32),
    get_private_data : Proc(ID3D12VideoEncodeCommandList1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoEncodeCommandList1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoEncodeCommandList1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoEncodeCommandList1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoEncodeCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoEncodeCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoEncodeCommandList1*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoEncodeCommandList1*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoEncodeCommandList1*, Void),
    resource_barrier : Proc(ID3D12VideoEncodeCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoEncodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoEncodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoEncodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoEncodeCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoEncodeCommandList1*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoEncodeCommandList1*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoEncodeCommandList1*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoEncodeCommandList1*, Void),
    estimate_motion : Proc(ID3D12VideoEncodeCommandList1*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*, Void),
    resolve_motion_vector_heap : Proc(ID3D12VideoEncodeCommandList1*, Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*, Void),
    write_buffer_immediate : Proc(ID3D12VideoEncodeCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    set_protected_resource_session : Proc(ID3D12VideoEncodeCommandList1*, Void*, Void),
    initialize_extension_command : Proc(ID3D12VideoEncodeCommandList1*, Void*, Void*, LibC::UIntPtrT, Void),
    execute_extension_command : Proc(ID3D12VideoEncodeCommandList1*, Void*, Void*, LibC::UIntPtrT, Void)


  @[Extern]
  #@[Com("94971eca-2bdb-4769-88cf-3675ea757ebc")]
  record ID3D12VideoEncodeCommandList1, lpVtbl : ID3D12VideoEncodeCommandList1Vtbl* do
    GUID = LibC::GUID.new(0x94971eca_u32, 0x2bdb_u16, 0x4769_u16, StaticArray[0x88_u8, 0xcf_u8, 0x36_u8, 0x75_u8, 0xea_u8, 0x75_u8, 0x7e_u8, 0xbc_u8])
    def query_interface(this : ID3D12VideoEncodeCommandList1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoEncodeCommandList1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoEncodeCommandList1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoEncodeCommandList1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoEncodeCommandList1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoEncodeCommandList1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoEncodeCommandList1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoEncodeCommandList1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoEncodeCommandList1*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoEncodeCommandList1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoEncodeCommandList1*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoEncodeCommandList1*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoEncodeCommandList1*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoEncodeCommandList1*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoEncodeCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoEncodeCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoEncodeCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoEncodeCommandList1*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoEncodeCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoEncodeCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoEncodeCommandList1*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def estimate_motion(this : ID3D12VideoEncodeCommandList1*, pMotionEstimator : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*) : Void
      @lpVtbl.try &.value.estimate_motion.call(this, pMotionEstimator, pOutputArguments, pInputArguments)
    end
    def resolve_motion_vector_heap(this : ID3D12VideoEncodeCommandList1*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*) : Void
      @lpVtbl.try &.value.resolve_motion_vector_heap.call(this, pOutputArguments, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoEncodeCommandList1*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def set_protected_resource_session(this : ID3D12VideoEncodeCommandList1*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end
    def initialize_extension_command(this : ID3D12VideoEncodeCommandList1*, pExtensionCommand : Void*, pInitializationParameters : Void*, initialization_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.initialize_extension_command.call(this, pExtensionCommand, pInitializationParameters, initialization_parameters_size_in_bytes)
    end
    def execute_extension_command(this : ID3D12VideoEncodeCommandList1*, pExtensionCommand : Void*, pExecutionParameters : Void*, execution_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.execute_extension_command.call(this, pExtensionCommand, pExecutionParameters, execution_parameters_size_in_bytes)
    end

  end

  @[Extern]
  record ID3D12VideoEncoderVtbl,
    query_interface : Proc(ID3D12VideoEncoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoEncoder*, UInt32),
    release : Proc(ID3D12VideoEncoder*, UInt32),
    get_private_data : Proc(ID3D12VideoEncoder*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoEncoder*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoEncoder*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoEncoder*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoEncoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_node_mask : Proc(ID3D12VideoEncoder*, UInt32),
    get_encoder_flags : Proc(ID3D12VideoEncoder*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FLAGS),
    get_codec : Proc(ID3D12VideoEncoder*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC),
    get_codec_profile : Proc(ID3D12VideoEncoder*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC, Win32cr::Foundation::HRESULT),
    get_codec_configuration : Proc(ID3D12VideoEncoder*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION, Win32cr::Foundation::HRESULT),
    get_input_format : Proc(ID3D12VideoEncoder*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT),
    get_max_motion_estimation_precision : Proc(ID3D12VideoEncoder*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE)


  @[Extern]
  #@[Com("2e0d212d-8df9-44a6-a770-bb289b182737")]
  record ID3D12VideoEncoder, lpVtbl : ID3D12VideoEncoderVtbl* do
    GUID = LibC::GUID.new(0x2e0d212d_u32, 0x8df9_u16, 0x44a6_u16, StaticArray[0xa7_u8, 0x70_u8, 0xbb_u8, 0x28_u8, 0x9b_u8, 0x18_u8, 0x27_u8, 0x37_u8])
    def query_interface(this : ID3D12VideoEncoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoEncoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoEncoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoEncoder*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoEncoder*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoEncoder*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoEncoder*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoEncoder*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_node_mask(this : ID3D12VideoEncoder*) : UInt32
      @lpVtbl.try &.value.get_node_mask.call(this)
    end
    def get_encoder_flags(this : ID3D12VideoEncoder*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_FLAGS
      @lpVtbl.try &.value.get_encoder_flags.call(this)
    end
    def get_codec(this : ID3D12VideoEncoder*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC
      @lpVtbl.try &.value.get_codec.call(this)
    end
    def get_codec_profile(this : ID3D12VideoEncoder*, dstProfile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_profile.call(this, dstProfile)
    end
    def get_codec_configuration(this : ID3D12VideoEncoder*, dstCodecConfig : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_configuration.call(this, dstCodecConfig)
    end
    def get_input_format(this : ID3D12VideoEncoder*) : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
      @lpVtbl.try &.value.get_input_format.call(this)
    end
    def get_max_motion_estimation_precision(this : ID3D12VideoEncoder*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE
      @lpVtbl.try &.value.get_max_motion_estimation_precision.call(this)
    end

  end

  @[Extern]
  record ID3D12VideoEncoderHeapVtbl,
    query_interface : Proc(ID3D12VideoEncoderHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoEncoderHeap*, UInt32),
    release : Proc(ID3D12VideoEncoderHeap*, UInt32),
    get_private_data : Proc(ID3D12VideoEncoderHeap*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoEncoderHeap*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoEncoderHeap*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoEncoderHeap*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoEncoderHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_node_mask : Proc(ID3D12VideoEncoderHeap*, UInt32),
    get_encoder_heap_flags : Proc(ID3D12VideoEncoderHeap*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_HEAP_FLAGS),
    get_codec : Proc(ID3D12VideoEncoderHeap*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC),
    get_codec_profile : Proc(ID3D12VideoEncoderHeap*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC, Win32cr::Foundation::HRESULT),
    get_codec_level : Proc(ID3D12VideoEncoderHeap*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING, Win32cr::Foundation::HRESULT),
    get_resolution_list_count : Proc(ID3D12VideoEncoderHeap*, UInt32),
    get_resolution_list : Proc(ID3D12VideoEncoderHeap*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("22b35d96-876a-44c0-b25e-fb8c9c7f1c4a")]
  record ID3D12VideoEncoderHeap, lpVtbl : ID3D12VideoEncoderHeapVtbl* do
    GUID = LibC::GUID.new(0x22b35d96_u32, 0x876a_u16, 0x44c0_u16, StaticArray[0xb2_u8, 0x5e_u8, 0xfb_u8, 0x8c_u8, 0x9c_u8, 0x7f_u8, 0x1c_u8, 0x4a_u8])
    def query_interface(this : ID3D12VideoEncoderHeap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoEncoderHeap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoEncoderHeap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoEncoderHeap*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoEncoderHeap*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoEncoderHeap*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoEncoderHeap*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoEncoderHeap*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_node_mask(this : ID3D12VideoEncoderHeap*) : UInt32
      @lpVtbl.try &.value.get_node_mask.call(this)
    end
    def get_encoder_heap_flags(this : ID3D12VideoEncoderHeap*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_HEAP_FLAGS
      @lpVtbl.try &.value.get_encoder_heap_flags.call(this)
    end
    def get_codec(this : ID3D12VideoEncoderHeap*) : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_CODEC
      @lpVtbl.try &.value.get_codec.call(this)
    end
    def get_codec_profile(this : ID3D12VideoEncoderHeap*, dstProfile : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PROFILE_DESC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_profile.call(this, dstProfile)
    end
    def get_codec_level(this : ID3D12VideoEncoderHeap*, dstLevel : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_LEVEL_SETTING) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_level.call(this, dstLevel)
    end
    def get_resolution_list_count(this : ID3D12VideoEncoderHeap*) : UInt32
      @lpVtbl.try &.value.get_resolution_list_count.call(this)
    end
    def get_resolution_list(this : ID3D12VideoEncoderHeap*, resolutions_list_count : UInt32, pResolutionList : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resolution_list.call(this, resolutions_list_count, pResolutionList)
    end

  end

  @[Extern]
  record ID3D12VideoDevice3Vtbl,
    query_interface : Proc(ID3D12VideoDevice3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoDevice3*, UInt32),
    release : Proc(ID3D12VideoDevice3*, UInt32),
    check_feature_support : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_video_decoder : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder_heap : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_processor : Proc(ID3D12VideoDevice3*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_motion_estimator : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_motion_vector_heap : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder1 : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_decoder_heap1 : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_processor1 : Proc(ID3D12VideoDevice3*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, UInt32, Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_extension_command : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_DESC*, Void*, LibC::UIntPtrT, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    execute_extension_command : Proc(ID3D12VideoDevice3*, Void*, Void*, LibC::UIntPtrT, Void*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    create_video_encoder : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_video_encoder_heap : Proc(ID3D12VideoDevice3*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4243adb4-3a32-4666-973c-0ccc5625dc44")]
  record ID3D12VideoDevice3, lpVtbl : ID3D12VideoDevice3Vtbl* do
    GUID = LibC::GUID.new(0x4243adb4_u32, 0x3a32_u16, 0x4666_u16, StaticArray[0x97_u8, 0x3c_u8, 0xc_u8, 0xcc_u8, 0x56_u8, 0x25_u8, 0xdc_u8, 0x44_u8])
    def query_interface(this : ID3D12VideoDevice3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoDevice3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoDevice3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def check_feature_support(this : ID3D12VideoDevice3*, feature_video : Win32cr::Media::MediaFoundation::D3D12_FEATURE_VIDEO, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature_video, pFeatureSupportData, feature_support_data_size)
    end
    def create_video_decoder(this : ID3D12VideoDevice3*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, riid : LibC::GUID*, ppVideoDecoder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder.call(this, pDesc, riid, ppVideoDecoder)
    end
    def create_video_decoder_heap(this : ID3D12VideoDevice3*, pVideoDecoderHeapDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, riid : LibC::GUID*, ppVideoDecoderHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder_heap.call(this, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap)
    end
    def create_video_processor(this : ID3D12VideoDevice3*, node_mask : UInt32, pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, riid : LibC::GUID*, ppVideoProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor.call(this, node_mask, pOutputStreamDesc, num_input_stream_descs, pInputStreamDescs, riid, ppVideoProcessor)
    end
    def create_video_motion_estimator(this : ID3D12VideoDevice3*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoMotionEstimator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_motion_estimator.call(this, pDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator)
    end
    def create_video_motion_vector_heap(this : ID3D12VideoDevice3*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoMotionVectorHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_motion_vector_heap.call(this, pDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap)
    end
    def create_video_decoder1(this : ID3D12VideoDevice3*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoDecoder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder1.call(this, pDesc, pProtectedResourceSession, riid, ppVideoDecoder)
    end
    def create_video_decoder_heap1(this : ID3D12VideoDevice3*, pVideoDecoderHeapDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_DECODER_HEAP_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoDecoderHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder_heap1.call(this, pVideoDecoderHeapDesc, pProtectedResourceSession, riid, ppVideoDecoderHeap)
    end
    def create_video_processor1(this : ID3D12VideoDevice3*, node_mask : UInt32, pOutputStreamDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, num_input_stream_descs : UInt32, pInputStreamDescs : Win32cr::Media::MediaFoundation::D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor1.call(this, node_mask, pOutputStreamDesc, num_input_stream_descs, pInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor)
    end
    def create_video_extension_command(this : ID3D12VideoDevice3*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_EXTENSION_COMMAND_DESC*, pCreationParameters : Void*, creation_parameters_data_size_in_bytes : LibC::UIntPtrT, pProtectedResourceSession : Void*, riid : LibC::GUID*, ppVideoExtensionCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_extension_command.call(this, pDesc, pCreationParameters, creation_parameters_data_size_in_bytes, pProtectedResourceSession, riid, ppVideoExtensionCommand)
    end
    def execute_extension_command(this : ID3D12VideoDevice3*, pExtensionCommand : Void*, pExecutionParameters : Void*, execution_parameters_size_in_bytes : LibC::UIntPtrT, pOutputData : Void*, output_data_size_in_bytes : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute_extension_command.call(this, pExtensionCommand, pExecutionParameters, execution_parameters_size_in_bytes, pOutputData, output_data_size_in_bytes)
    end
    def create_video_encoder(this : ID3D12VideoDevice3*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_DESC*, riid : LibC::GUID*, ppVideoEncoder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_encoder.call(this, pDesc, riid, ppVideoEncoder)
    end
    def create_video_encoder_heap(this : ID3D12VideoDevice3*, pDesc : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_HEAP_DESC*, riid : LibC::GUID*, ppVideoEncoderHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_encoder_heap.call(this, pDesc, riid, ppVideoEncoderHeap)
    end

  end

  @[Extern]
  record ID3D12VideoEncodeCommandList2Vtbl,
    query_interface : Proc(ID3D12VideoEncodeCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VideoEncodeCommandList2*, UInt32),
    release : Proc(ID3D12VideoEncodeCommandList2*, UInt32),
    get_private_data : Proc(ID3D12VideoEncodeCommandList2*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12VideoEncodeCommandList2*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12VideoEncodeCommandList2*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12VideoEncodeCommandList2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12VideoEncodeCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12VideoEncodeCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12VideoEncodeCommandList2*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12VideoEncodeCommandList2*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12VideoEncodeCommandList2*, Void),
    resource_barrier : Proc(ID3D12VideoEncodeCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    discard_resource : Proc(ID3D12VideoEncodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12VideoEncodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12VideoEncodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12VideoEncodeCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12VideoEncodeCommandList2*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12VideoEncodeCommandList2*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12VideoEncodeCommandList2*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12VideoEncodeCommandList2*, Void),
    estimate_motion : Proc(ID3D12VideoEncodeCommandList2*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*, Void),
    resolve_motion_vector_heap : Proc(ID3D12VideoEncodeCommandList2*, Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*, Void),
    write_buffer_immediate : Proc(ID3D12VideoEncodeCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    set_protected_resource_session : Proc(ID3D12VideoEncodeCommandList2*, Void*, Void),
    initialize_extension_command : Proc(ID3D12VideoEncodeCommandList2*, Void*, Void*, LibC::UIntPtrT, Void),
    execute_extension_command : Proc(ID3D12VideoEncodeCommandList2*, Void*, Void*, LibC::UIntPtrT, Void),
    encode_frame : Proc(ID3D12VideoEncodeCommandList2*, Void*, Void*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*, Void),
    resolve_encoder_output_metadata : Proc(ID3D12VideoEncodeCommandList2*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*, Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*, Void)


  @[Extern]
  #@[Com("895491e2-e701-46a9-9a1f-8d3480ed867a")]
  record ID3D12VideoEncodeCommandList2, lpVtbl : ID3D12VideoEncodeCommandList2Vtbl* do
    GUID = LibC::GUID.new(0x895491e2_u32, 0xe701_u16, 0x46a9_u16, StaticArray[0x9a_u8, 0x1f_u8, 0x8d_u8, 0x34_u8, 0x80_u8, 0xed_u8, 0x86_u8, 0x7a_u8])
    def query_interface(this : ID3D12VideoEncodeCommandList2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VideoEncodeCommandList2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VideoEncodeCommandList2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12VideoEncodeCommandList2*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12VideoEncodeCommandList2*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12VideoEncodeCommandList2*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12VideoEncodeCommandList2*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12VideoEncodeCommandList2*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12VideoEncodeCommandList2*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12VideoEncodeCommandList2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12VideoEncodeCommandList2*, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator)
    end
    def clear_state(this : ID3D12VideoEncodeCommandList2*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def resource_barrier(this : ID3D12VideoEncodeCommandList2*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def discard_resource(this : ID3D12VideoEncodeCommandList2*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12VideoEncodeCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12VideoEncodeCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12VideoEncodeCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12VideoEncodeCommandList2*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12VideoEncodeCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12VideoEncodeCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12VideoEncodeCommandList2*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def estimate_motion(this : ID3D12VideoEncodeCommandList2*, pMotionEstimator : Void*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*) : Void
      @lpVtbl.try &.value.estimate_motion.call(this, pMotionEstimator, pOutputArguments, pInputArguments)
    end
    def resolve_motion_vector_heap(this : ID3D12VideoEncodeCommandList2*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*) : Void
      @lpVtbl.try &.value.resolve_motion_vector_heap.call(this, pOutputArguments, pInputArguments)
    end
    def write_buffer_immediate(this : ID3D12VideoEncodeCommandList2*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def set_protected_resource_session(this : ID3D12VideoEncodeCommandList2*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end
    def initialize_extension_command(this : ID3D12VideoEncodeCommandList2*, pExtensionCommand : Void*, pInitializationParameters : Void*, initialization_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.initialize_extension_command.call(this, pExtensionCommand, pInitializationParameters, initialization_parameters_size_in_bytes)
    end
    def execute_extension_command(this : ID3D12VideoEncodeCommandList2*, pExtensionCommand : Void*, pExecutionParameters : Void*, execution_parameters_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.execute_extension_command.call(this, pExtensionCommand, pExecutionParameters, execution_parameters_size_in_bytes)
    end
    def encode_frame(this : ID3D12VideoEncodeCommandList2*, pEncoder : Void*, pHeap : Void*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*) : Void
      @lpVtbl.try &.value.encode_frame.call(this, pEncoder, pHeap, pInputArguments, pOutputArguments)
    end
    def resolve_encoder_output_metadata(this : ID3D12VideoEncodeCommandList2*, pInputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*, pOutputArguments : Win32cr::Media::MediaFoundation::D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*) : Void
      @lpVtbl.try &.value.resolve_encoder_output_metadata.call(this, pInputArguments, pOutputArguments)
    end

  end

  @[Extern]
  record IWMValidateVtbl,
    query_interface : Proc(IWMValidate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMValidate*, UInt32),
    release : Proc(IWMValidate*, UInt32),
    set_identifier : Proc(IWMValidate*, LibC::GUID, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cee3def2-3808-414d-be66-fafd472210bc")]
  record IWMValidate, lpVtbl : IWMValidateVtbl* do
    GUID = LibC::GUID.new(0xcee3def2_u32, 0x3808_u16, 0x414d_u16, StaticArray[0xbe_u8, 0x66_u8, 0xfa_u8, 0xfd_u8, 0x47_u8, 0x22_u8, 0x10_u8, 0xbc_u8])
    def query_interface(this : IWMValidate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMValidate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMValidate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_identifier(this : IWMValidate*, guidValidationID : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_identifier.call(this, guidValidationID)
    end

  end

  @[Extern]
  record IValidateBindingVtbl,
    query_interface : Proc(IValidateBinding*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IValidateBinding*, UInt32),
    release : Proc(IValidateBinding*, UInt32),
    get_identifier : Proc(IValidateBinding*, LibC::GUID, UInt8*, UInt32, UInt8**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("04a578b2-e778-422a-a805-b3ee54d90bd9")]
  record IValidateBinding, lpVtbl : IValidateBindingVtbl* do
    GUID = LibC::GUID.new(0x4a578b2_u32, 0xe778_u16, 0x422a_u16, StaticArray[0xa8_u8, 0x5_u8, 0xb3_u8, 0xee_u8, 0x54_u8, 0xd9_u8, 0xb_u8, 0xd9_u8])
    def query_interface(this : IValidateBinding*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IValidateBinding*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IValidateBinding*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_identifier(this : IValidateBinding*, guidLicensorID : LibC::GUID, pbEphemeron : UInt8*, cbEphemeron : UInt32, ppbBlobValidationID : UInt8**, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identifier.call(this, guidLicensorID, pbEphemeron, cbEphemeron, ppbBlobValidationID, pcbBlobSize)
    end

  end

  @[Extern]
  record IWMVideoDecoderHurryupVtbl,
    query_interface : Proc(IWMVideoDecoderHurryup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMVideoDecoderHurryup*, UInt32),
    release : Proc(IWMVideoDecoderHurryup*, UInt32),
    set_hurryup : Proc(IWMVideoDecoderHurryup*, Int32, Win32cr::Foundation::HRESULT),
    get_hurryup : Proc(IWMVideoDecoderHurryup*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("352bb3bd-2d4d-4323-9e71-dcdcfbd53ca6")]
  record IWMVideoDecoderHurryup, lpVtbl : IWMVideoDecoderHurryupVtbl* do
    GUID = LibC::GUID.new(0x352bb3bd_u32, 0x2d4d_u16, 0x4323_u16, StaticArray[0x9e_u8, 0x71_u8, 0xdc_u8, 0xdc_u8, 0xfb_u8, 0xd5_u8, 0x3c_u8, 0xa6_u8])
    def query_interface(this : IWMVideoDecoderHurryup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMVideoDecoderHurryup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMVideoDecoderHurryup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_hurryup(this : IWMVideoDecoderHurryup*, lHurryup : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_hurryup.call(this, lHurryup)
    end
    def get_hurryup(this : IWMVideoDecoderHurryup*, plHurryup : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_hurryup.call(this, plHurryup)
    end

  end

  @[Extern]
  record IWMVideoForceKeyFrameVtbl,
    query_interface : Proc(IWMVideoForceKeyFrame*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMVideoForceKeyFrame*, UInt32),
    release : Proc(IWMVideoForceKeyFrame*, UInt32),
    set_key_frame : Proc(IWMVideoForceKeyFrame*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9f8496be-5b9a-41b9-a9e8-f21cd80596c2")]
  record IWMVideoForceKeyFrame, lpVtbl : IWMVideoForceKeyFrameVtbl* do
    GUID = LibC::GUID.new(0x9f8496be_u32, 0x5b9a_u16, 0x41b9_u16, StaticArray[0xa9_u8, 0xe8_u8, 0xf2_u8, 0x1c_u8, 0xd8_u8, 0x5_u8, 0x96_u8, 0xc2_u8])
    def query_interface(this : IWMVideoForceKeyFrame*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMVideoForceKeyFrame*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMVideoForceKeyFrame*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_key_frame(this : IWMVideoForceKeyFrame*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_key_frame.call(this)
    end

  end

  @[Extern]
  record IWMCodecStringsVtbl,
    query_interface : Proc(IWMCodecStrings*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMCodecStrings*, UInt32),
    release : Proc(IWMCodecStrings*, UInt32),
    get_name : Proc(IWMCodecStrings*, Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_description : Proc(IWMCodecStrings*, Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a7b2504b-e58a-47fb-958b-cac7165a057d")]
  record IWMCodecStrings, lpVtbl : IWMCodecStringsVtbl* do
    GUID = LibC::GUID.new(0xa7b2504b_u32, 0xe58a_u16, 0x47fb_u16, StaticArray[0x95_u8, 0x8b_u8, 0xca_u8, 0xc7_u8, 0x16_u8, 0x5a_u8, 0x5_u8, 0x7d_u8])
    def query_interface(this : IWMCodecStrings*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMCodecStrings*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMCodecStrings*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IWMCodecStrings*, pmt : Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*, cchLength : UInt32, szName : UInt16*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, pmt, cchLength, szName, pcchLength)
    end
    def get_description(this : IWMCodecStrings*, pmt : Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*, cchLength : UInt32, szDescription : UInt16*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pmt, cchLength, szDescription, pcchLength)
    end

  end

  @[Extern]
  record IWMCodecPropsVtbl,
    query_interface : Proc(IWMCodecProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMCodecProps*, UInt32),
    release : Proc(IWMCodecProps*, UInt32),
    get_format_prop : Proc(IWMCodecProps*, Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::WMT_PROP_DATATYPE*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_codec_prop : Proc(IWMCodecProps*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::WMT_PROP_DATATYPE*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2573e11a-f01a-4fdd-a98d-63b8e0ba9589")]
  record IWMCodecProps, lpVtbl : IWMCodecPropsVtbl* do
    GUID = LibC::GUID.new(0x2573e11a_u32, 0xf01a_u16, 0x4fdd_u16, StaticArray[0xa9_u8, 0x8d_u8, 0x63_u8, 0xb8_u8, 0xe0_u8, 0xba_u8, 0x95_u8, 0x89_u8])
    def query_interface(this : IWMCodecProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMCodecProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMCodecProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_format_prop(this : IWMCodecProps*, pmt : Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*, pszName : Win32cr::Foundation::PWSTR, pType : Win32cr::Media::MediaFoundation::WMT_PROP_DATATYPE*, pValue : UInt8*, pdwSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_format_prop.call(this, pmt, pszName, pType, pValue, pdwSize)
    end
    def get_codec_prop(this : IWMCodecProps*, dwFormat : UInt32, pszName : Win32cr::Foundation::PWSTR, pType : Win32cr::Media::MediaFoundation::WMT_PROP_DATATYPE*, pValue : UInt8*, pdwSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_codec_prop.call(this, dwFormat, pszName, pType, pValue, pdwSize)
    end

  end

  @[Extern]
  record IWMCodecLeakyBucketVtbl,
    query_interface : Proc(IWMCodecLeakyBucket*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMCodecLeakyBucket*, UInt32),
    release : Proc(IWMCodecLeakyBucket*, UInt32),
    set_buffer_size_bits : Proc(IWMCodecLeakyBucket*, UInt32, Win32cr::Foundation::HRESULT),
    get_buffer_size_bits : Proc(IWMCodecLeakyBucket*, UInt32*, Win32cr::Foundation::HRESULT),
    set_buffer_fullness_bits : Proc(IWMCodecLeakyBucket*, UInt32, Win32cr::Foundation::HRESULT),
    get_buffer_fullness_bits : Proc(IWMCodecLeakyBucket*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a81ba647-6227-43b7-b231-c7b15135dd7d")]
  record IWMCodecLeakyBucket, lpVtbl : IWMCodecLeakyBucketVtbl* do
    GUID = LibC::GUID.new(0xa81ba647_u32, 0x6227_u16, 0x43b7_u16, StaticArray[0xb2_u8, 0x31_u8, 0xc7_u8, 0xb1_u8, 0x51_u8, 0x35_u8, 0xdd_u8, 0x7d_u8])
    def query_interface(this : IWMCodecLeakyBucket*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMCodecLeakyBucket*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMCodecLeakyBucket*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_buffer_size_bits(this : IWMCodecLeakyBucket*, ulBufferSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buffer_size_bits.call(this, ulBufferSize)
    end
    def get_buffer_size_bits(this : IWMCodecLeakyBucket*, pulBufferSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size_bits.call(this, pulBufferSize)
    end
    def set_buffer_fullness_bits(this : IWMCodecLeakyBucket*, ulBufferFullness : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buffer_fullness_bits.call(this, ulBufferFullness)
    end
    def get_buffer_fullness_bits(this : IWMCodecLeakyBucket*, pulBufferFullness : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_fullness_bits.call(this, pulBufferFullness)
    end

  end

  @[Extern]
  record IWMCodecOutputTimestampVtbl,
    query_interface : Proc(IWMCodecOutputTimestamp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMCodecOutputTimestamp*, UInt32),
    release : Proc(IWMCodecOutputTimestamp*, UInt32),
    get_next_output_time : Proc(IWMCodecOutputTimestamp*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b72adf95-7adc-4a72-bc05-577d8ea6bf68")]
  record IWMCodecOutputTimestamp, lpVtbl : IWMCodecOutputTimestampVtbl* do
    GUID = LibC::GUID.new(0xb72adf95_u32, 0x7adc_u16, 0x4a72_u16, StaticArray[0xbc_u8, 0x5_u8, 0x57_u8, 0x7d_u8, 0x8e_u8, 0xa6_u8, 0xbf_u8, 0x68_u8])
    def query_interface(this : IWMCodecOutputTimestamp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMCodecOutputTimestamp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMCodecOutputTimestamp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_next_output_time(this : IWMCodecOutputTimestamp*, prtTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_output_time.call(this, prtTime)
    end

  end

  @[Extern]
  record IWMVideoDecoderReconBufferVtbl,
    query_interface : Proc(IWMVideoDecoderReconBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMVideoDecoderReconBuffer*, UInt32),
    release : Proc(IWMVideoDecoderReconBuffer*, UInt32),
    get_reconstructed_video_frame_size : Proc(IWMVideoDecoderReconBuffer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_reconstructed_video_frame : Proc(IWMVideoDecoderReconBuffer*, Void*, Win32cr::Foundation::HRESULT),
    set_reconstructed_video_frame : Proc(IWMVideoDecoderReconBuffer*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("45bda2ac-88e2-4923-98ba-3949080711a3")]
  record IWMVideoDecoderReconBuffer, lpVtbl : IWMVideoDecoderReconBufferVtbl* do
    GUID = LibC::GUID.new(0x45bda2ac_u32, 0x88e2_u16, 0x4923_u16, StaticArray[0x98_u8, 0xba_u8, 0x39_u8, 0x49_u8, 0x8_u8, 0x7_u8, 0x11_u8, 0xa3_u8])
    def query_interface(this : IWMVideoDecoderReconBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMVideoDecoderReconBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMVideoDecoderReconBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_reconstructed_video_frame_size(this : IWMVideoDecoderReconBuffer*, pdwSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_reconstructed_video_frame_size.call(this, pdwSize)
    end
    def get_reconstructed_video_frame(this : IWMVideoDecoderReconBuffer*, pBuf : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_reconstructed_video_frame.call(this, pBuf)
    end
    def set_reconstructed_video_frame(this : IWMVideoDecoderReconBuffer*, pBuf : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_reconstructed_video_frame.call(this, pBuf)
    end

  end

  @[Extern]
  record IWMCodecPrivateDataVtbl,
    query_interface : Proc(IWMCodecPrivateData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMCodecPrivateData*, UInt32),
    release : Proc(IWMCodecPrivateData*, UInt32),
    set_partial_output_type : Proc(IWMCodecPrivateData*, Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*, Win32cr::Foundation::HRESULT),
    get_private_data : Proc(IWMCodecPrivateData*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("73f0be8e-57f7-4f01-aa66-9f57340cfe0e")]
  record IWMCodecPrivateData, lpVtbl : IWMCodecPrivateDataVtbl* do
    GUID = LibC::GUID.new(0x73f0be8e_u32, 0x57f7_u16, 0x4f01_u16, StaticArray[0xaa_u8, 0x66_u8, 0x9f_u8, 0x57_u8, 0x34_u8, 0xc_u8, 0xfe_u8, 0xe_u8])
    def query_interface(this : IWMCodecPrivateData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMCodecPrivateData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMCodecPrivateData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_partial_output_type(this : IWMCodecPrivateData*, pmt : Win32cr::Media::DxMediaObjects::DMO_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_partial_output_type.call(this, pmt)
    end
    def get_private_data(this : IWMCodecPrivateData*, pbData : UInt8*, pcbData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, pbData, pcbData)
    end

  end

  @[Extern]
  record IWMSampleExtensionSupportVtbl,
    query_interface : Proc(IWMSampleExtensionSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMSampleExtensionSupport*, UInt32),
    release : Proc(IWMSampleExtensionSupport*, UInt32),
    set_use_sample_extensions : Proc(IWMSampleExtensionSupport*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9bca9884-0604-4c2a-87da-793ff4d586c3")]
  record IWMSampleExtensionSupport, lpVtbl : IWMSampleExtensionSupportVtbl* do
    GUID = LibC::GUID.new(0x9bca9884_u32, 0x604_u16, 0x4c2a_u16, StaticArray[0x87_u8, 0xda_u8, 0x79_u8, 0x3f_u8, 0xf4_u8, 0xd5_u8, 0x86_u8, 0xc3_u8])
    def query_interface(this : IWMSampleExtensionSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMSampleExtensionSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMSampleExtensionSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_use_sample_extensions(this : IWMSampleExtensionSupport*, fUseExtensions : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_use_sample_extensions.call(this, fUseExtensions)
    end

  end

  @[Extern]
  record IWMResamplerPropsVtbl,
    query_interface : Proc(IWMResamplerProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMResamplerProps*, UInt32),
    release : Proc(IWMResamplerProps*, UInt32),
    set_half_filter_length : Proc(IWMResamplerProps*, Int32, Win32cr::Foundation::HRESULT),
    set_user_channel_mtx : Proc(IWMResamplerProps*, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e7e9984f-f09f-4da4-903f-6e2e0efe56b5")]
  record IWMResamplerProps, lpVtbl : IWMResamplerPropsVtbl* do
    GUID = LibC::GUID.new(0xe7e9984f_u32, 0xf09f_u16, 0x4da4_u16, StaticArray[0x90_u8, 0x3f_u8, 0x6e_u8, 0x2e_u8, 0xe_u8, 0xfe_u8, 0x56_u8, 0xb5_u8])
    def query_interface(this : IWMResamplerProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMResamplerProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMResamplerProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_half_filter_length(this : IWMResamplerProps*, lhalfFilterLen : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_half_filter_length.call(this, lhalfFilterLen)
    end
    def set_user_channel_mtx(this : IWMResamplerProps*, userChannelMtx : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_user_channel_mtx.call(this, userChannelMtx)
    end

  end

  @[Extern]
  record IWMResizerPropsVtbl,
    query_interface : Proc(IWMResizerProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMResizerProps*, UInt32),
    release : Proc(IWMResizerProps*, UInt32),
    set_resizer_quality : Proc(IWMResizerProps*, Int32, Win32cr::Foundation::HRESULT),
    set_interlace_mode : Proc(IWMResizerProps*, Int32, Win32cr::Foundation::HRESULT),
    set_clip_region : Proc(IWMResizerProps*, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    set_full_crop_region : Proc(IWMResizerProps*, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT),
    get_full_crop_region : Proc(IWMResizerProps*, Int32*, Int32*, Int32*, Int32*, Int32*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("57665d4c-0414-4faa-905b-10e546f81c33")]
  record IWMResizerProps, lpVtbl : IWMResizerPropsVtbl* do
    GUID = LibC::GUID.new(0x57665d4c_u32, 0x414_u16, 0x4faa_u16, StaticArray[0x90_u8, 0x5b_u8, 0x10_u8, 0xe5_u8, 0x46_u8, 0xf8_u8, 0x1c_u8, 0x33_u8])
    def query_interface(this : IWMResizerProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMResizerProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMResizerProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_resizer_quality(this : IWMResizerProps*, lquality : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_resizer_quality.call(this, lquality)
    end
    def set_interlace_mode(this : IWMResizerProps*, lmode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_interlace_mode.call(this, lmode)
    end
    def set_clip_region(this : IWMResizerProps*, lClipOriXSrc : Int32, lClipOriYSrc : Int32, lClipWidthSrc : Int32, lClipHeightSrc : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_clip_region.call(this, lClipOriXSrc, lClipOriYSrc, lClipWidthSrc, lClipHeightSrc)
    end
    def set_full_crop_region(this : IWMResizerProps*, lClipOriXSrc : Int32, lClipOriYSrc : Int32, lClipWidthSrc : Int32, lClipHeightSrc : Int32, lClipOriXDst : Int32, lClipOriYDst : Int32, lClipWidthDst : Int32, lClipHeightDst : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_full_crop_region.call(this, lClipOriXSrc, lClipOriYSrc, lClipWidthSrc, lClipHeightSrc, lClipOriXDst, lClipOriYDst, lClipWidthDst, lClipHeightDst)
    end
    def get_full_crop_region(this : IWMResizerProps*, lClipOriXSrc : Int32*, lClipOriYSrc : Int32*, lClipWidthSrc : Int32*, lClipHeightSrc : Int32*, lClipOriXDst : Int32*, lClipOriYDst : Int32*, lClipWidthDst : Int32*, lClipHeightDst : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_full_crop_region.call(this, lClipOriXSrc, lClipOriYSrc, lClipWidthSrc, lClipHeightSrc, lClipOriXDst, lClipOriYDst, lClipWidthDst, lClipHeightDst)
    end

  end

  @[Extern]
  record IWMColorLegalizerPropsVtbl,
    query_interface : Proc(IWMColorLegalizerProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMColorLegalizerProps*, UInt32),
    release : Proc(IWMColorLegalizerProps*, UInt32),
    set_color_legalizer_quality : Proc(IWMColorLegalizerProps*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("776c93b3-b72d-4508-b6d0-208785f553e7")]
  record IWMColorLegalizerProps, lpVtbl : IWMColorLegalizerPropsVtbl* do
    GUID = LibC::GUID.new(0x776c93b3_u32, 0xb72d_u16, 0x4508_u16, StaticArray[0xb6_u8, 0xd0_u8, 0x20_u8, 0x87_u8, 0x85_u8, 0xf5_u8, 0x53_u8, 0xe7_u8])
    def query_interface(this : IWMColorLegalizerProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMColorLegalizerProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMColorLegalizerProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_color_legalizer_quality(this : IWMColorLegalizerProps*, lquality : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_color_legalizer_quality.call(this, lquality)
    end

  end

  @[Extern]
  record IWMInterlacePropsVtbl,
    query_interface : Proc(IWMInterlaceProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMInterlaceProps*, UInt32),
    release : Proc(IWMInterlaceProps*, UInt32),
    set_process_type : Proc(IWMInterlaceProps*, Int32, Win32cr::Foundation::HRESULT),
    set_init_inverse_tele_cine_pattern : Proc(IWMInterlaceProps*, Int32, Win32cr::Foundation::HRESULT),
    set_last_frame : Proc(IWMInterlaceProps*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7b12e5d1-bd22-48ea-bc06-98e893221c89")]
  record IWMInterlaceProps, lpVtbl : IWMInterlacePropsVtbl* do
    GUID = LibC::GUID.new(0x7b12e5d1_u32, 0xbd22_u16, 0x48ea_u16, StaticArray[0xbc_u8, 0x6_u8, 0x98_u8, 0xe8_u8, 0x93_u8, 0x22_u8, 0x1c_u8, 0x89_u8])
    def query_interface(this : IWMInterlaceProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMInterlaceProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMInterlaceProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_process_type(this : IWMInterlaceProps*, iProcessType : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_process_type.call(this, iProcessType)
    end
    def set_init_inverse_tele_cine_pattern(this : IWMInterlaceProps*, iInitPattern : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_init_inverse_tele_cine_pattern.call(this, iInitPattern)
    end
    def set_last_frame(this : IWMInterlaceProps*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_last_frame.call(this)
    end

  end

  @[Extern]
  record IWMFrameInterpPropsVtbl,
    query_interface : Proc(IWMFrameInterpProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMFrameInterpProps*, UInt32),
    release : Proc(IWMFrameInterpProps*, UInt32),
    set_frame_rate_in : Proc(IWMFrameInterpProps*, Int32, Int32, Win32cr::Foundation::HRESULT),
    set_frame_rate_out : Proc(IWMFrameInterpProps*, Int32, Int32, Win32cr::Foundation::HRESULT),
    set_frame_interp_enabled : Proc(IWMFrameInterpProps*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_complexity_level : Proc(IWMFrameInterpProps*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4c06bb9b-626c-4614-8329-cc6a21b93fa0")]
  record IWMFrameInterpProps, lpVtbl : IWMFrameInterpPropsVtbl* do
    GUID = LibC::GUID.new(0x4c06bb9b_u32, 0x626c_u16, 0x4614_u16, StaticArray[0x83_u8, 0x29_u8, 0xcc_u8, 0x6a_u8, 0x21_u8, 0xb9_u8, 0x3f_u8, 0xa0_u8])
    def query_interface(this : IWMFrameInterpProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMFrameInterpProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMFrameInterpProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_frame_rate_in(this : IWMFrameInterpProps*, lFrameRate : Int32, lScale : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_frame_rate_in.call(this, lFrameRate, lScale)
    end
    def set_frame_rate_out(this : IWMFrameInterpProps*, lFrameRate : Int32, lScale : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_frame_rate_out.call(this, lFrameRate, lScale)
    end
    def set_frame_interp_enabled(this : IWMFrameInterpProps*, bFIEnabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_frame_interp_enabled.call(this, bFIEnabled)
    end
    def set_complexity_level(this : IWMFrameInterpProps*, iComplexity : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_complexity_level.call(this, iComplexity)
    end

  end

  @[Extern]
  record IWMColorConvPropsVtbl,
    query_interface : Proc(IWMColorConvProps*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWMColorConvProps*, UInt32),
    release : Proc(IWMColorConvProps*, UInt32),
    set_mode : Proc(IWMColorConvProps*, Int32, Win32cr::Foundation::HRESULT),
    set_full_cropping_param : Proc(IWMColorConvProps*, Int32, Int32, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e6a49e22-c099-421d-aad3-c061fb4ae85b")]
  record IWMColorConvProps, lpVtbl : IWMColorConvPropsVtbl* do
    GUID = LibC::GUID.new(0xe6a49e22_u32, 0xc099_u16, 0x421d_u16, StaticArray[0xaa_u8, 0xd3_u8, 0xc0_u8, 0x61_u8, 0xfb_u8, 0x4a_u8, 0xe8_u8, 0x5b_u8])
    def query_interface(this : IWMColorConvProps*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWMColorConvProps*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWMColorConvProps*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_mode(this : IWMColorConvProps*, lMode : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mode.call(this, lMode)
    end
    def set_full_cropping_param(this : IWMColorConvProps*, lSrcCropLeft : Int32, lSrcCropTop : Int32, lDstCropLeft : Int32, lDstCropTop : Int32, lCropWidth : Int32, lCropHeight : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_full_cropping_param.call(this, lSrcCropLeft, lSrcCropTop, lDstCropLeft, lDstCropTop, lCropWidth, lCropHeight)
    end

  end

  @[Extern]
  record ITocEntryVtbl,
    query_interface : Proc(ITocEntry*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITocEntry*, UInt32),
    release : Proc(ITocEntry*, UInt32),
    set_title : Proc(ITocEntry*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_title : Proc(ITocEntry*, UInt16*, UInt16*, Win32cr::Foundation::HRESULT),
    set_descriptor : Proc(ITocEntry*, Win32cr::Media::MediaFoundation::TOC_ENTRY_DESCRIPTOR*, Win32cr::Foundation::HRESULT),
    get_descriptor : Proc(ITocEntry*, Win32cr::Media::MediaFoundation::TOC_ENTRY_DESCRIPTOR*, Win32cr::Foundation::HRESULT),
    set_sub_entries : Proc(ITocEntry*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_sub_entries : Proc(ITocEntry*, UInt32*, UInt16*, Win32cr::Foundation::HRESULT),
    set_description_data : Proc(ITocEntry*, UInt32, UInt8*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_description_data : Proc(ITocEntry*, UInt32*, UInt8*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f22f5e06-585c-4def-8523-6555cfbc0cb3")]
  record ITocEntry, lpVtbl : ITocEntryVtbl* do
    GUID = LibC::GUID.new(0xf22f5e06_u32, 0x585c_u16, 0x4def_u16, StaticArray[0x85_u8, 0x23_u8, 0x65_u8, 0x55_u8, 0xcf_u8, 0xbc_u8, 0xc_u8, 0xb3_u8])
    def query_interface(this : ITocEntry*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITocEntry*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITocEntry*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_title(this : ITocEntry*, pwszTitle : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_title.call(this, pwszTitle)
    end
    def get_title(this : ITocEntry*, pwTitleSize : UInt16*, pwszTitle : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_title.call(this, pwTitleSize, pwszTitle)
    end
    def set_descriptor(this : ITocEntry*, pDescriptor : Win32cr::Media::MediaFoundation::TOC_ENTRY_DESCRIPTOR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_descriptor.call(this, pDescriptor)
    end
    def get_descriptor(this : ITocEntry*, pDescriptor : Win32cr::Media::MediaFoundation::TOC_ENTRY_DESCRIPTOR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_descriptor.call(this, pDescriptor)
    end
    def set_sub_entries(this : ITocEntry*, dwNumSubEntries : UInt32, pwSubEntryIndices : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sub_entries.call(this, dwNumSubEntries, pwSubEntryIndices)
    end
    def get_sub_entries(this : ITocEntry*, pdwNumSubEntries : UInt32*, pwSubEntryIndices : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_entries.call(this, pdwNumSubEntries, pwSubEntryIndices)
    end
    def set_description_data(this : ITocEntry*, dwDescriptionDataSize : UInt32, pbtDescriptionData : UInt8*, pguidType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_description_data.call(this, dwDescriptionDataSize, pbtDescriptionData, pguidType)
    end
    def get_description_data(this : ITocEntry*, pdwDescriptionDataSize : UInt32*, pbtDescriptionData : UInt8*, pGuidType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description_data.call(this, pdwDescriptionDataSize, pbtDescriptionData, pGuidType)
    end

  end

  @[Extern]
  record ITocEntryListVtbl,
    query_interface : Proc(ITocEntryList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITocEntryList*, UInt32),
    release : Proc(ITocEntryList*, UInt32),
    get_entry_count : Proc(ITocEntryList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_entry_by_index : Proc(ITocEntryList*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_entry : Proc(ITocEntryList*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    add_entry_by_index : Proc(ITocEntryList*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    remove_entry_by_index : Proc(ITocEntryList*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3a8cccbd-0efd-43a3-b838-f38a552ba237")]
  record ITocEntryList, lpVtbl : ITocEntryListVtbl* do
    GUID = LibC::GUID.new(0x3a8cccbd_u32, 0xefd_u16, 0x43a3_u16, StaticArray[0xb8_u8, 0x38_u8, 0xf3_u8, 0x8a_u8, 0x55_u8, 0x2b_u8, 0xa2_u8, 0x37_u8])
    def query_interface(this : ITocEntryList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITocEntryList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITocEntryList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_entry_count(this : ITocEntryList*, pdwEntryCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entry_count.call(this, pdwEntryCount)
    end
    def get_entry_by_index(this : ITocEntryList*, dwEntryIndex : UInt32, ppEntry : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entry_by_index.call(this, dwEntryIndex, ppEntry)
    end
    def add_entry(this : ITocEntryList*, pEntry : Void*, pdwEntryIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_entry.call(this, pEntry, pdwEntryIndex)
    end
    def add_entry_by_index(this : ITocEntryList*, dwEntryIndex : UInt32, pEntry : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_entry_by_index.call(this, dwEntryIndex, pEntry)
    end
    def remove_entry_by_index(this : ITocEntryList*, dwEntryIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_entry_by_index.call(this, dwEntryIndex)
    end

  end

  @[Extern]
  record ITocVtbl,
    query_interface : Proc(IToc*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IToc*, UInt32),
    release : Proc(IToc*, UInt32),
    set_descriptor : Proc(IToc*, Win32cr::Media::MediaFoundation::TOC_DESCRIPTOR*, Win32cr::Foundation::HRESULT),
    get_descriptor : Proc(IToc*, Win32cr::Media::MediaFoundation::TOC_DESCRIPTOR*, Win32cr::Foundation::HRESULT),
    set_description : Proc(IToc*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_description : Proc(IToc*, UInt16*, UInt16*, Win32cr::Foundation::HRESULT),
    set_context : Proc(IToc*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    get_context : Proc(IToc*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    get_entry_list_count : Proc(IToc*, UInt16*, Win32cr::Foundation::HRESULT),
    get_entry_list_by_index : Proc(IToc*, UInt16, Void**, Win32cr::Foundation::HRESULT),
    add_entry_list : Proc(IToc*, Void*, UInt16*, Win32cr::Foundation::HRESULT),
    add_entry_list_by_index : Proc(IToc*, UInt16, Void*, Win32cr::Foundation::HRESULT),
    remove_entry_list_by_index : Proc(IToc*, UInt16, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d6f05441-a919-423b-91a0-89d5b4a8ab77")]
  record IToc, lpVtbl : ITocVtbl* do
    GUID = LibC::GUID.new(0xd6f05441_u32, 0xa919_u16, 0x423b_u16, StaticArray[0x91_u8, 0xa0_u8, 0x89_u8, 0xd5_u8, 0xb4_u8, 0xa8_u8, 0xab_u8, 0x77_u8])
    def query_interface(this : IToc*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IToc*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IToc*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_descriptor(this : IToc*, pDescriptor : Win32cr::Media::MediaFoundation::TOC_DESCRIPTOR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_descriptor.call(this, pDescriptor)
    end
    def get_descriptor(this : IToc*, pDescriptor : Win32cr::Media::MediaFoundation::TOC_DESCRIPTOR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_descriptor.call(this, pDescriptor)
    end
    def set_description(this : IToc*, pwszDescription : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_description.call(this, pwszDescription)
    end
    def get_description(this : IToc*, pwDescriptionSize : UInt16*, pwszDescription : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_description.call(this, pwDescriptionSize, pwszDescription)
    end
    def set_context(this : IToc*, dwContextSize : UInt32, pbtContext : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_context.call(this, dwContextSize, pbtContext)
    end
    def get_context(this : IToc*, pdwContextSize : UInt32*, pbtContext : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_context.call(this, pdwContextSize, pbtContext)
    end
    def get_entry_list_count(this : IToc*, pwCount : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entry_list_count.call(this, pwCount)
    end
    def get_entry_list_by_index(this : IToc*, wEntryListIndex : UInt16, ppEntryList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entry_list_by_index.call(this, wEntryListIndex, ppEntryList)
    end
    def add_entry_list(this : IToc*, pEntryList : Void*, pwEntryListIndex : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_entry_list.call(this, pEntryList, pwEntryListIndex)
    end
    def add_entry_list_by_index(this : IToc*, wEntryListIndex : UInt16, pEntryList : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_entry_list_by_index.call(this, wEntryListIndex, pEntryList)
    end
    def remove_entry_list_by_index(this : IToc*, wEntryListIndex : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_entry_list_by_index.call(this, wEntryListIndex)
    end

  end

  @[Extern]
  record ITocCollectionVtbl,
    query_interface : Proc(ITocCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITocCollection*, UInt32),
    release : Proc(ITocCollection*, UInt32),
    get_entry_count : Proc(ITocCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_entry_by_index : Proc(ITocCollection*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_entry : Proc(ITocCollection*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    add_entry_by_index : Proc(ITocCollection*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    remove_entry_by_index : Proc(ITocCollection*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("23fee831-ae96-42df-b170-25a04847a3ca")]
  record ITocCollection, lpVtbl : ITocCollectionVtbl* do
    GUID = LibC::GUID.new(0x23fee831_u32, 0xae96_u16, 0x42df_u16, StaticArray[0xb1_u8, 0x70_u8, 0x25_u8, 0xa0_u8, 0x48_u8, 0x47_u8, 0xa3_u8, 0xca_u8])
    def query_interface(this : ITocCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITocCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITocCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_entry_count(this : ITocCollection*, pdwEntryCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entry_count.call(this, pdwEntryCount)
    end
    def get_entry_by_index(this : ITocCollection*, dwEntryIndex : UInt32, ppToc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_entry_by_index.call(this, dwEntryIndex, ppToc)
    end
    def add_entry(this : ITocCollection*, pToc : Void*, pdwEntryIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_entry.call(this, pToc, pdwEntryIndex)
    end
    def add_entry_by_index(this : ITocCollection*, dwEntryIndex : UInt32, pToc : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_entry_by_index.call(this, dwEntryIndex, pToc)
    end
    def remove_entry_by_index(this : ITocCollection*, dwEntryIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_entry_by_index.call(this, dwEntryIndex)
    end

  end

  @[Extern]
  record ITocParserVtbl,
    query_interface : Proc(ITocParser*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ITocParser*, UInt32),
    release : Proc(ITocParser*, UInt32),
    init : Proc(ITocParser*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_toc_count : Proc(ITocParser*, Win32cr::Media::MediaFoundation::TOC_POS_TYPE, UInt32*, Win32cr::Foundation::HRESULT),
    get_toc_by_index : Proc(ITocParser*, Win32cr::Media::MediaFoundation::TOC_POS_TYPE, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_toc_by_type : Proc(ITocParser*, Win32cr::Media::MediaFoundation::TOC_POS_TYPE, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    add_toc : Proc(ITocParser*, Win32cr::Media::MediaFoundation::TOC_POS_TYPE, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    remove_toc_by_index : Proc(ITocParser*, Win32cr::Media::MediaFoundation::TOC_POS_TYPE, UInt32, Win32cr::Foundation::HRESULT),
    remove_toc_by_type : Proc(ITocParser*, Win32cr::Media::MediaFoundation::TOC_POS_TYPE, LibC::GUID, Win32cr::Foundation::HRESULT),
    commit : Proc(ITocParser*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ecfb9a55-9298-4f49-887f-0b36206599d2")]
  record ITocParser, lpVtbl : ITocParserVtbl* do
    GUID = LibC::GUID.new(0xecfb9a55_u32, 0x9298_u16, 0x4f49_u16, StaticArray[0x88_u8, 0x7f_u8, 0xb_u8, 0x36_u8, 0x20_u8, 0x65_u8, 0x99_u8, 0xd2_u8])
    def query_interface(this : ITocParser*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ITocParser*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ITocParser*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : ITocParser*, pwszFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, pwszFileName)
    end
    def get_toc_count(this : ITocParser*, enumTocPosType : Win32cr::Media::MediaFoundation::TOC_POS_TYPE, pdwTocCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_toc_count.call(this, enumTocPosType, pdwTocCount)
    end
    def get_toc_by_index(this : ITocParser*, enumTocPosType : Win32cr::Media::MediaFoundation::TOC_POS_TYPE, dwTocIndex : UInt32, ppToc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_toc_by_index.call(this, enumTocPosType, dwTocIndex, ppToc)
    end
    def get_toc_by_type(this : ITocParser*, enumTocPosType : Win32cr::Media::MediaFoundation::TOC_POS_TYPE, guidTocType : LibC::GUID, ppTocs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_toc_by_type.call(this, enumTocPosType, guidTocType, ppTocs)
    end
    def add_toc(this : ITocParser*, enumTocPosType : Win32cr::Media::MediaFoundation::TOC_POS_TYPE, pToc : Void*, pdwTocIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_toc.call(this, enumTocPosType, pToc, pdwTocIndex)
    end
    def remove_toc_by_index(this : ITocParser*, enumTocPosType : Win32cr::Media::MediaFoundation::TOC_POS_TYPE, dwTocIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_toc_by_index.call(this, enumTocPosType, dwTocIndex)
    end
    def remove_toc_by_type(this : ITocParser*, enumTocPosType : Win32cr::Media::MediaFoundation::TOC_POS_TYPE, guidTocType : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_toc_by_type.call(this, enumTocPosType, guidTocType)
    end
    def commit(this : ITocParser*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this)
    end

  end

  @[Extern]
  record IFileIoVtbl,
    query_interface : Proc(IFileIo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileIo*, UInt32),
    release : Proc(IFileIo*, UInt32),
    initialize__ : Proc(IFileIo*, Win32cr::Media::MediaFoundation::FILE_ACCESSMODE, Win32cr::Media::MediaFoundation::FILE_OPENMODE, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_length : Proc(IFileIo*, UInt64*, Win32cr::Foundation::HRESULT),
    set_length : Proc(IFileIo*, UInt64, Win32cr::Foundation::HRESULT),
    get_current_position : Proc(IFileIo*, UInt64*, Win32cr::Foundation::HRESULT),
    set_current_position : Proc(IFileIo*, UInt64, Win32cr::Foundation::HRESULT),
    is_end_of_stream : Proc(IFileIo*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    read : Proc(IFileIo*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write : Proc(IFileIo*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    seek : Proc(IFileIo*, Win32cr::Media::MediaFoundation::SEEK_ORIGIN, UInt64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    close : Proc(IFileIo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("11993196-1244-4840-ab44-480975c4ffe4")]
  record IFileIo, lpVtbl : IFileIoVtbl* do
    GUID = LibC::GUID.new(0x11993196_u32, 0x1244_u16, 0x4840_u16, StaticArray[0xab_u8, 0x44_u8, 0x48_u8, 0x9_u8, 0x75_u8, 0xc4_u8, 0xff_u8, 0xe4_u8])
    def query_interface(this : IFileIo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileIo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileIo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IFileIo*, eAccessMode : Win32cr::Media::MediaFoundation::FILE_ACCESSMODE, eOpenMode : Win32cr::Media::MediaFoundation::FILE_OPENMODE, pwszFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, eAccessMode, eOpenMode, pwszFileName)
    end
    def get_length(this : IFileIo*, pqwLength : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pqwLength)
    end
    def set_length(this : IFileIo*, qwLength : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_length.call(this, qwLength)
    end
    def get_current_position(this : IFileIo*, pqwPosition : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_position.call(this, pqwPosition)
    end
    def set_current_position(this : IFileIo*, qwPosition : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_position.call(this, qwPosition)
    end
    def is_end_of_stream(this : IFileIo*, pbEndOfStream : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_end_of_stream.call(this, pbEndOfStream)
    end
    def read(this : IFileIo*, pbt : UInt8*, ul : UInt32, pulRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pbt, ul, pulRead)
    end
    def write(this : IFileIo*, pbt : UInt8*, ul : UInt32, pulWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pbt, ul, pulWritten)
    end
    def seek(this : IFileIo*, eSeekOrigin : Win32cr::Media::MediaFoundation::SEEK_ORIGIN, qwSeekOffset : UInt64, dwSeekFlags : UInt32, pqwCurrentPosition : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, eSeekOrigin, qwSeekOffset, dwSeekFlags, pqwCurrentPosition)
    end
    def close(this : IFileIo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IFileClientVtbl,
    query_interface : Proc(IFileClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileClient*, UInt32),
    release : Proc(IFileClient*, UInt32),
    get_object_disk_size : Proc(IFileClient*, UInt64*, Win32cr::Foundation::HRESULT),
    write : Proc(IFileClient*, Void*, Win32cr::Foundation::HRESULT),
    read : Proc(IFileClient*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bfccd196-1244-4840-ab44-480975c4ffe4")]
  record IFileClient, lpVtbl : IFileClientVtbl* do
    GUID = LibC::GUID.new(0xbfccd196_u32, 0x1244_u16, 0x4840_u16, StaticArray[0xab_u8, 0x44_u8, 0x48_u8, 0x9_u8, 0x75_u8, 0xc4_u8, 0xff_u8, 0xe4_u8])
    def query_interface(this : IFileClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_object_disk_size(this : IFileClient*, pqwSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_disk_size.call(this, pqwSize)
    end
    def write(this : IFileClient*, pFio : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pFio)
    end
    def read(this : IFileClient*, pFio : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pFio)
    end

  end

  @[Extern]
  record IClusterDetectorVtbl,
    query_interface : Proc(IClusterDetector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IClusterDetector*, UInt32),
    release : Proc(IClusterDetector*, UInt32),
    initialize__ : Proc(IClusterDetector*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    detect : Proc(IClusterDetector*, UInt32, Float32, Float32, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3f07f7b7-c680-41d9-9423-915107ec9ff9")]
  record IClusterDetector, lpVtbl : IClusterDetectorVtbl* do
    GUID = LibC::GUID.new(0x3f07f7b7_u32, 0xc680_u16, 0x41d9_u16, StaticArray[0x94_u8, 0x23_u8, 0x91_u8, 0x51_u8, 0x7_u8, 0xec_u8, 0x9f_u8, 0xf9_u8])
    def query_interface(this : IClusterDetector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IClusterDetector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IClusterDetector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IClusterDetector*, wBaseEntryLevel : UInt16, wClusterEntryLevel : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, wBaseEntryLevel, wClusterEntryLevel)
    end
    def detect(this : IClusterDetector*, dwMaxNumClusters : UInt32, fMinClusterDuration : Float32, fMaxClusterDuration : Float32, pSrcToc : Void*, ppDstToc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detect.call(this, dwMaxNumClusters, fMinClusterDuration, fMaxClusterDuration, pSrcToc, ppDstToc)
    end

  end

  @[Extern]
  record IDXVAHD_DeviceVtbl,
    query_interface : Proc(IDXVAHD_Device*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDXVAHD_Device*, UInt32),
    release : Proc(IDXVAHD_Device*, UInt32),
    create_video_surface : Proc(IDXVAHD_Device*, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_SURFACE_TYPE, UInt32, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    get_video_processor_device_caps : Proc(IDXVAHD_Device*, Win32cr::Media::MediaFoundation::DXVAHD_VPDEVCAPS*, Win32cr::Foundation::HRESULT),
    get_video_processor_output_formats : Proc(IDXVAHD_Device*, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT*, Win32cr::Foundation::HRESULT),
    get_video_processor_input_formats : Proc(IDXVAHD_Device*, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT*, Win32cr::Foundation::HRESULT),
    get_video_processor_caps : Proc(IDXVAHD_Device*, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_VPCAPS*, Win32cr::Foundation::HRESULT),
    get_video_processor_custom_rates : Proc(IDXVAHD_Device*, LibC::GUID*, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_CUSTOM_RATE_DATA*, Win32cr::Foundation::HRESULT),
    get_video_processor_filter_range : Proc(IDXVAHD_Device*, Win32cr::Media::MediaFoundation::DXVAHD_FILTER, Win32cr::Media::MediaFoundation::DXVAHD_FILTER_RANGE_DATA*, Win32cr::Foundation::HRESULT),
    create_video_processor : Proc(IDXVAHD_Device*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("95f12dfd-d77e-49be-815f-57d579634d6d")]
  record IDXVAHD_Device, lpVtbl : IDXVAHD_DeviceVtbl* do
    GUID = LibC::GUID.new(0x95f12dfd_u32, 0xd77e_u16, 0x49be_u16, StaticArray[0x81_u8, 0x5f_u8, 0x57_u8, 0xd5_u8, 0x79_u8, 0x63_u8, 0x4d_u8, 0x6d_u8])
    def query_interface(this : IDXVAHD_Device*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDXVAHD_Device*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDXVAHD_Device*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_video_surface(this : IDXVAHD_Device*, width : UInt32, height : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, usage : UInt32, type__ : Win32cr::Media::MediaFoundation::DXVAHD_SURFACE_TYPE, num_surfaces : UInt32, ppSurfaces : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_surface.call(this, width, height, format, pool, usage, type__, num_surfaces, ppSurfaces, pSharedHandle)
    end
    def get_video_processor_device_caps(this : IDXVAHD_Device*, pCaps : Win32cr::Media::MediaFoundation::DXVAHD_VPDEVCAPS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_device_caps.call(this, pCaps)
    end
    def get_video_processor_output_formats(this : IDXVAHD_Device*, count : UInt32, pFormats : Win32cr::Graphics::Direct3D9::D3DFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_output_formats.call(this, count, pFormats)
    end
    def get_video_processor_input_formats(this : IDXVAHD_Device*, count : UInt32, pFormats : Win32cr::Graphics::Direct3D9::D3DFORMAT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_input_formats.call(this, count, pFormats)
    end
    def get_video_processor_caps(this : IDXVAHD_Device*, count : UInt32, pCaps : Win32cr::Media::MediaFoundation::DXVAHD_VPCAPS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_caps.call(this, count, pCaps)
    end
    def get_video_processor_custom_rates(this : IDXVAHD_Device*, pVPGuid : LibC::GUID*, count : UInt32, pRates : Win32cr::Media::MediaFoundation::DXVAHD_CUSTOM_RATE_DATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_custom_rates.call(this, pVPGuid, count, pRates)
    end
    def get_video_processor_filter_range(this : IDXVAHD_Device*, filter : Win32cr::Media::MediaFoundation::DXVAHD_FILTER, pRange : Win32cr::Media::MediaFoundation::DXVAHD_FILTER_RANGE_DATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_filter_range.call(this, filter, pRange)
    end
    def create_video_processor(this : IDXVAHD_Device*, pVPGuid : LibC::GUID*, ppVideoProcessor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor.call(this, pVPGuid, ppVideoProcessor)
    end

  end

  @[Extern]
  record IDXVAHD_VideoProcessorVtbl,
    query_interface : Proc(IDXVAHD_VideoProcessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDXVAHD_VideoProcessor*, UInt32),
    release : Proc(IDXVAHD_VideoProcessor*, UInt32),
    set_video_process_blt_state : Proc(IDXVAHD_VideoProcessor*, Win32cr::Media::MediaFoundation::DXVAHD_BLT_STATE, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_video_process_blt_state : Proc(IDXVAHD_VideoProcessor*, Win32cr::Media::MediaFoundation::DXVAHD_BLT_STATE, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_video_process_stream_state : Proc(IDXVAHD_VideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_STREAM_STATE, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_video_process_stream_state : Proc(IDXVAHD_VideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_STREAM_STATE, UInt32, Void*, Win32cr::Foundation::HRESULT),
    video_process_blt_hd : Proc(IDXVAHD_VideoProcessor*, Void*, UInt32, UInt32, Win32cr::Media::MediaFoundation::DXVAHD_STREAM_DATA*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("95f4edf4-6e03-4cd7-be1b-3075d665aa52")]
  record IDXVAHD_VideoProcessor, lpVtbl : IDXVAHD_VideoProcessorVtbl* do
    GUID = LibC::GUID.new(0x95f4edf4_u32, 0x6e03_u16, 0x4cd7_u16, StaticArray[0xbe_u8, 0x1b_u8, 0x30_u8, 0x75_u8, 0xd6_u8, 0x65_u8, 0xaa_u8, 0x52_u8])
    def query_interface(this : IDXVAHD_VideoProcessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDXVAHD_VideoProcessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDXVAHD_VideoProcessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_video_process_blt_state(this : IDXVAHD_VideoProcessor*, state : Win32cr::Media::MediaFoundation::DXVAHD_BLT_STATE, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_process_blt_state.call(this, state, data_size, pData)
    end
    def get_video_process_blt_state(this : IDXVAHD_VideoProcessor*, state : Win32cr::Media::MediaFoundation::DXVAHD_BLT_STATE, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_process_blt_state.call(this, state, data_size, pData)
    end
    def set_video_process_stream_state(this : IDXVAHD_VideoProcessor*, stream_number : UInt32, state : Win32cr::Media::MediaFoundation::DXVAHD_STREAM_STATE, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_process_stream_state.call(this, stream_number, state, data_size, pData)
    end
    def get_video_process_stream_state(this : IDXVAHD_VideoProcessor*, stream_number : UInt32, state : Win32cr::Media::MediaFoundation::DXVAHD_STREAM_STATE, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_process_stream_state.call(this, stream_number, state, data_size, pData)
    end
    def video_process_blt_hd(this : IDXVAHD_VideoProcessor*, pOutputSurface : Void*, output_frame : UInt32, stream_count : UInt32, pStreams : Win32cr::Media::MediaFoundation::DXVAHD_STREAM_DATA*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.video_process_blt_hd.call(this, pOutputSurface, output_frame, stream_count, pStreams)
    end

  end

  @[Extern]
  record IDirect3DDeviceManager9Vtbl,
    query_interface : Proc(IDirect3DDeviceManager9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirect3DDeviceManager9*, UInt32),
    release : Proc(IDirect3DDeviceManager9*, UInt32),
    reset_device : Proc(IDirect3DDeviceManager9*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    open_device_handle : Proc(IDirect3DDeviceManager9*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    close_device_handle : Proc(IDirect3DDeviceManager9*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    test_device : Proc(IDirect3DDeviceManager9*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    lock_device : Proc(IDirect3DDeviceManager9*, Win32cr::Foundation::HANDLE, Void**, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    unlock_device : Proc(IDirect3DDeviceManager9*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_video_service : Proc(IDirect3DDeviceManager9*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a0cade0f-06d5-4cf4-a1c7-f3cdd725aa75")]
  record IDirect3DDeviceManager9, lpVtbl : IDirect3DDeviceManager9Vtbl* do
    GUID = LibC::GUID.new(0xa0cade0f_u32, 0x6d5_u16, 0x4cf4_u16, StaticArray[0xa1_u8, 0xc7_u8, 0xf3_u8, 0xcd_u8, 0xd7_u8, 0x25_u8, 0xaa_u8, 0x75_u8])
    def query_interface(this : IDirect3DDeviceManager9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirect3DDeviceManager9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirect3DDeviceManager9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def reset_device(this : IDirect3DDeviceManager9*, pDevice : Void*, resetToken : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_device.call(this, pDevice, resetToken)
    end
    def open_device_handle(this : IDirect3DDeviceManager9*, phDevice : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_device_handle.call(this, phDevice)
    end
    def close_device_handle(this : IDirect3DDeviceManager9*, hDevice : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_device_handle.call(this, hDevice)
    end
    def test_device(this : IDirect3DDeviceManager9*, hDevice : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.test_device.call(this, hDevice)
    end
    def lock_device(this : IDirect3DDeviceManager9*, hDevice : Win32cr::Foundation::HANDLE, ppDevice : Void**, fBlock : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_device.call(this, hDevice, ppDevice, fBlock)
    end
    def unlock_device(this : IDirect3DDeviceManager9*, hDevice : Win32cr::Foundation::HANDLE, fSaveState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_device.call(this, hDevice, fSaveState)
    end
    def get_video_service(this : IDirect3DDeviceManager9*, hDevice : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppService : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_service.call(this, hDevice, riid, ppService)
    end

  end

  @[Extern]
  record IDirectXVideoAccelerationServiceVtbl,
    query_interface : Proc(IDirectXVideoAccelerationService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectXVideoAccelerationService*, UInt32),
    release : Proc(IDirectXVideoAccelerationService*, UInt32),
    create_surface : Proc(IDirectXVideoAccelerationService*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, UInt32, Win32cr::Media::MediaFoundation::DXVA2_VideoRenderTargetType, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fc51a550-d5e7-11d9-af55-00054e43ff02")]
  record IDirectXVideoAccelerationService, lpVtbl : IDirectXVideoAccelerationServiceVtbl* do
    GUID = LibC::GUID.new(0xfc51a550_u32, 0xd5e7_u16, 0x11d9_u16, StaticArray[0xaf_u8, 0x55_u8, 0x0_u8, 0x5_u8, 0x4e_u8, 0x43_u8, 0xff_u8, 0x2_u8])
    def query_interface(this : IDirectXVideoAccelerationService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectXVideoAccelerationService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectXVideoAccelerationService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_surface(this : IDirectXVideoAccelerationService*, width : UInt32, height : UInt32, back_buffers : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, usage : UInt32, dxva_type : Win32cr::Media::MediaFoundation::DXVA2_VideoRenderTargetType, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_surface.call(this, width, height, back_buffers, format, pool, usage, dxva_type, ppSurface, pSharedHandle)
    end

  end

  @[Extern]
  record IDirectXVideoDecoderServiceVtbl,
    query_interface : Proc(IDirectXVideoDecoderService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectXVideoDecoderService*, UInt32),
    release : Proc(IDirectXVideoDecoderService*, UInt32),
    create_surface : Proc(IDirectXVideoDecoderService*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, UInt32, Win32cr::Media::MediaFoundation::DXVA2_VideoRenderTargetType, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    get_decoder_device_guids : Proc(IDirectXVideoDecoderService*, UInt32*, LibC::GUID**, Win32cr::Foundation::HRESULT),
    get_decoder_render_targets : Proc(IDirectXVideoDecoderService*, LibC::GUID*, UInt32*, Win32cr::Graphics::Direct3D9::D3DFORMAT**, Win32cr::Foundation::HRESULT),
    get_decoder_configurations : Proc(IDirectXVideoDecoderService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Void*, UInt32*, Win32cr::Media::MediaFoundation::DXVA2_ConfigPictureDecode**, Win32cr::Foundation::HRESULT),
    create_video_decoder : Proc(IDirectXVideoDecoderService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Media::MediaFoundation::DXVA2_ConfigPictureDecode*, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fc51a551-d5e7-11d9-af55-00054e43ff02")]
  record IDirectXVideoDecoderService, lpVtbl : IDirectXVideoDecoderServiceVtbl* do
    GUID = LibC::GUID.new(0xfc51a551_u32, 0xd5e7_u16, 0x11d9_u16, StaticArray[0xaf_u8, 0x55_u8, 0x0_u8, 0x5_u8, 0x4e_u8, 0x43_u8, 0xff_u8, 0x2_u8])
    def query_interface(this : IDirectXVideoDecoderService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectXVideoDecoderService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectXVideoDecoderService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_surface(this : IDirectXVideoDecoderService*, width : UInt32, height : UInt32, back_buffers : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, usage : UInt32, dxva_type : Win32cr::Media::MediaFoundation::DXVA2_VideoRenderTargetType, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_surface.call(this, width, height, back_buffers, format, pool, usage, dxva_type, ppSurface, pSharedHandle)
    end
    def get_decoder_device_guids(this : IDirectXVideoDecoderService*, pCount : UInt32*, pGuids : LibC::GUID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decoder_device_guids.call(this, pCount, pGuids)
    end
    def get_decoder_render_targets(this : IDirectXVideoDecoderService*, guid : LibC::GUID*, pCount : UInt32*, pFormats : Win32cr::Graphics::Direct3D9::D3DFORMAT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decoder_render_targets.call(this, guid, pCount, pFormats)
    end
    def get_decoder_configurations(this : IDirectXVideoDecoderService*, guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, pReserved : Void*, pCount : UInt32*, ppConfigs : Win32cr::Media::MediaFoundation::DXVA2_ConfigPictureDecode**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decoder_configurations.call(this, guid, pVideoDesc, pReserved, pCount, ppConfigs)
    end
    def create_video_decoder(this : IDirectXVideoDecoderService*, guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, pConfig : Win32cr::Media::MediaFoundation::DXVA2_ConfigPictureDecode*, ppDecoderRenderTargets : Void**, num_render_targets : UInt32, ppDecode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_decoder.call(this, guid, pVideoDesc, pConfig, ppDecoderRenderTargets, num_render_targets, ppDecode)
    end

  end

  @[Extern]
  record IDirectXVideoProcessorServiceVtbl,
    query_interface : Proc(IDirectXVideoProcessorService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectXVideoProcessorService*, UInt32),
    release : Proc(IDirectXVideoProcessorService*, UInt32),
    create_surface : Proc(IDirectXVideoProcessorService*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Graphics::Direct3D9::D3DPOOL, UInt32, Win32cr::Media::MediaFoundation::DXVA2_VideoRenderTargetType, Void**, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    register_video_processor_software_device : Proc(IDirectXVideoProcessorService*, Void*, Win32cr::Foundation::HRESULT),
    get_video_processor_device_guids : Proc(IDirectXVideoProcessorService*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, UInt32*, LibC::GUID**, Win32cr::Foundation::HRESULT),
    get_video_processor_render_targets : Proc(IDirectXVideoProcessorService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, UInt32*, Win32cr::Graphics::Direct3D9::D3DFORMAT**, Win32cr::Foundation::HRESULT),
    get_video_processor_sub_stream_formats : Proc(IDirectXVideoProcessorService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32*, Win32cr::Graphics::Direct3D9::D3DFORMAT**, Win32cr::Foundation::HRESULT),
    get_video_processor_caps : Proc(IDirectXVideoProcessorService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, Win32cr::Media::MediaFoundation::DXVA2_VideoProcessorCaps*, Win32cr::Foundation::HRESULT),
    get_proc_amp_range : Proc(IDirectXVideoProcessorService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT),
    get_filter_property_range : Proc(IDirectXVideoProcessorService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT),
    create_video_processor : Proc(IDirectXVideoProcessorService*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fc51a552-d5e7-11d9-af55-00054e43ff02")]
  record IDirectXVideoProcessorService, lpVtbl : IDirectXVideoProcessorServiceVtbl* do
    GUID = LibC::GUID.new(0xfc51a552_u32, 0xd5e7_u16, 0x11d9_u16, StaticArray[0xaf_u8, 0x55_u8, 0x0_u8, 0x5_u8, 0x4e_u8, 0x43_u8, 0xff_u8, 0x2_u8])
    def query_interface(this : IDirectXVideoProcessorService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectXVideoProcessorService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectXVideoProcessorService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_surface(this : IDirectXVideoProcessorService*, width : UInt32, height : UInt32, back_buffers : UInt32, format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pool : Win32cr::Graphics::Direct3D9::D3DPOOL, usage : UInt32, dxva_type : Win32cr::Media::MediaFoundation::DXVA2_VideoRenderTargetType, ppSurface : Void**, pSharedHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_surface.call(this, width, height, back_buffers, format, pool, usage, dxva_type, ppSurface, pSharedHandle)
    end
    def register_video_processor_software_device(this : IDirectXVideoProcessorService*, pCallbacks : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_video_processor_software_device.call(this, pCallbacks)
    end
    def get_video_processor_device_guids(this : IDirectXVideoProcessorService*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, pCount : UInt32*, pGuids : LibC::GUID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_device_guids.call(this, pVideoDesc, pCount, pGuids)
    end
    def get_video_processor_render_targets(this : IDirectXVideoProcessorService*, video_proc_device_guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, pCount : UInt32*, pFormats : Win32cr::Graphics::Direct3D9::D3DFORMAT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_render_targets.call(this, video_proc_device_guid, pVideoDesc, pCount, pFormats)
    end
    def get_video_processor_sub_stream_formats(this : IDirectXVideoProcessorService*, video_proc_device_guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, render_target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pCount : UInt32*, pFormats : Win32cr::Graphics::Direct3D9::D3DFORMAT**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_sub_stream_formats.call(this, video_proc_device_guid, pVideoDesc, render_target_format, pCount, pFormats)
    end
    def get_video_processor_caps(this : IDirectXVideoProcessorService*, video_proc_device_guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, render_target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, pCaps : Win32cr::Media::MediaFoundation::DXVA2_VideoProcessorCaps*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_caps.call(this, video_proc_device_guid, pVideoDesc, render_target_format, pCaps)
    end
    def get_proc_amp_range(this : IDirectXVideoProcessorService*, video_proc_device_guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, render_target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, proc_amp_cap : UInt32, pRange : Win32cr::Media::MediaFoundation::DXVA2_ValueRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_proc_amp_range.call(this, video_proc_device_guid, pVideoDesc, render_target_format, proc_amp_cap, pRange)
    end
    def get_filter_property_range(this : IDirectXVideoProcessorService*, video_proc_device_guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, render_target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, filter_setting : UInt32, pRange : Win32cr::Media::MediaFoundation::DXVA2_ValueRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter_property_range.call(this, video_proc_device_guid, pVideoDesc, render_target_format, filter_setting, pRange)
    end
    def create_video_processor(this : IDirectXVideoProcessorService*, video_proc_device_guid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, render_target_format : Win32cr::Graphics::Direct3D9::D3DFORMAT, max_num_sub_streams : UInt32, ppVidProcess : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_video_processor.call(this, video_proc_device_guid, pVideoDesc, render_target_format, max_num_sub_streams, ppVidProcess)
    end

  end

  @[Extern]
  record IDirectXVideoDecoderVtbl,
    query_interface : Proc(IDirectXVideoDecoder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectXVideoDecoder*, UInt32),
    release : Proc(IDirectXVideoDecoder*, UInt32),
    get_video_decoder_service : Proc(IDirectXVideoDecoder*, Void**, Win32cr::Foundation::HRESULT),
    get_creation_parameters : Proc(IDirectXVideoDecoder*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Media::MediaFoundation::DXVA2_ConfigPictureDecode*, Void***, UInt32*, Win32cr::Foundation::HRESULT),
    get_buffer : Proc(IDirectXVideoDecoder*, Win32cr::Media::MediaFoundation::DXVA2_BufferfType, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    release_buffer : Proc(IDirectXVideoDecoder*, UInt32, Win32cr::Foundation::HRESULT),
    begin_frame : Proc(IDirectXVideoDecoder*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_frame : Proc(IDirectXVideoDecoder*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    execute : Proc(IDirectXVideoDecoder*, Win32cr::Media::MediaFoundation::DXVA2_DecodeExecuteParams*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f2b0810a-fd00-43c9-918c-df94e2d8ef7d")]
  record IDirectXVideoDecoder, lpVtbl : IDirectXVideoDecoderVtbl* do
    GUID = LibC::GUID.new(0xf2b0810a_u32, 0xfd00_u16, 0x43c9_u16, StaticArray[0x91_u8, 0x8c_u8, 0xdf_u8, 0x94_u8, 0xe2_u8, 0xd8_u8, 0xef_u8, 0x7d_u8])
    def query_interface(this : IDirectXVideoDecoder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectXVideoDecoder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectXVideoDecoder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_video_decoder_service(this : IDirectXVideoDecoder*, ppService : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_decoder_service.call(this, ppService)
    end
    def get_creation_parameters(this : IDirectXVideoDecoder*, pDeviceGuid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, pConfig : Win32cr::Media::MediaFoundation::DXVA2_ConfigPictureDecode*, pDecoderRenderTargets : Void***, pNumSurfaces : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_creation_parameters.call(this, pDeviceGuid, pVideoDesc, pConfig, pDecoderRenderTargets, pNumSurfaces)
    end
    def get_buffer(this : IDirectXVideoDecoder*, buffer_type : Win32cr::Media::MediaFoundation::DXVA2_BufferfType, ppBuffer : Void**, pBufferSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, buffer_type, ppBuffer, pBufferSize)
    end
    def release_buffer(this : IDirectXVideoDecoder*, buffer_type : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_buffer.call(this, buffer_type)
    end
    def begin_frame(this : IDirectXVideoDecoder*, pRenderTarget : Void*, pvPVPData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_frame.call(this, pRenderTarget, pvPVPData)
    end
    def end_frame(this : IDirectXVideoDecoder*, pHandleComplete : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_frame.call(this, pHandleComplete)
    end
    def execute(this : IDirectXVideoDecoder*, pExecuteParams : Win32cr::Media::MediaFoundation::DXVA2_DecodeExecuteParams*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.execute.call(this, pExecuteParams)
    end

  end

  @[Extern]
  record IDirectXVideoProcessorVtbl,
    query_interface : Proc(IDirectXVideoProcessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectXVideoProcessor*, UInt32),
    release : Proc(IDirectXVideoProcessor*, UInt32),
    get_video_processor_service : Proc(IDirectXVideoProcessor*, Void**, Win32cr::Foundation::HRESULT),
    get_creation_parameters : Proc(IDirectXVideoProcessor*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, Win32cr::Graphics::Direct3D9::D3DFORMAT*, UInt32*, Win32cr::Foundation::HRESULT),
    get_video_processor_caps : Proc(IDirectXVideoProcessor*, Win32cr::Media::MediaFoundation::DXVA2_VideoProcessorCaps*, Win32cr::Foundation::HRESULT),
    get_proc_amp_range : Proc(IDirectXVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT),
    get_filter_property_range : Proc(IDirectXVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT),
    video_process_blt : Proc(IDirectXVideoProcessor*, Void*, Win32cr::Media::MediaFoundation::DXVA2_VideoProcessBltParams*, Win32cr::Media::MediaFoundation::DXVA2_VideoSample*, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8c3a39f0-916e-4690-804f-4c8001355d25")]
  record IDirectXVideoProcessor, lpVtbl : IDirectXVideoProcessorVtbl* do
    GUID = LibC::GUID.new(0x8c3a39f0_u32, 0x916e_u16, 0x4690_u16, StaticArray[0x80_u8, 0x4f_u8, 0x4c_u8, 0x80_u8, 0x1_u8, 0x35_u8, 0x5d_u8, 0x25_u8])
    def query_interface(this : IDirectXVideoProcessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectXVideoProcessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectXVideoProcessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_video_processor_service(this : IDirectXVideoProcessor*, ppService : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_service.call(this, ppService)
    end
    def get_creation_parameters(this : IDirectXVideoProcessor*, pDeviceGuid : LibC::GUID*, pVideoDesc : Win32cr::Media::MediaFoundation::DXVA2_VideoDesc*, pRenderTargetFormat : Win32cr::Graphics::Direct3D9::D3DFORMAT*, pMaxNumSubStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_creation_parameters.call(this, pDeviceGuid, pVideoDesc, pRenderTargetFormat, pMaxNumSubStreams)
    end
    def get_video_processor_caps(this : IDirectXVideoProcessor*, pCaps : Win32cr::Media::MediaFoundation::DXVA2_VideoProcessorCaps*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_caps.call(this, pCaps)
    end
    def get_proc_amp_range(this : IDirectXVideoProcessor*, proc_amp_cap : UInt32, pRange : Win32cr::Media::MediaFoundation::DXVA2_ValueRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_proc_amp_range.call(this, proc_amp_cap, pRange)
    end
    def get_filter_property_range(this : IDirectXVideoProcessor*, filter_setting : UInt32, pRange : Win32cr::Media::MediaFoundation::DXVA2_ValueRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filter_property_range.call(this, filter_setting, pRange)
    end
    def video_process_blt(this : IDirectXVideoProcessor*, pRenderTarget : Void*, pBltParams : Win32cr::Media::MediaFoundation::DXVA2_VideoProcessBltParams*, pSamples : Win32cr::Media::MediaFoundation::DXVA2_VideoSample*, num_samples : UInt32, pHandleComplete : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.video_process_blt.call(this, pRenderTarget, pBltParams, pSamples, num_samples, pHandleComplete)
    end

  end

  @[Extern]
  record IDirectXVideoMemoryConfigurationVtbl,
    query_interface : Proc(IDirectXVideoMemoryConfiguration*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDirectXVideoMemoryConfiguration*, UInt32),
    release : Proc(IDirectXVideoMemoryConfiguration*, UInt32),
    get_available_surface_type_by_index : Proc(IDirectXVideoMemoryConfiguration*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_SurfaceType*, Win32cr::Foundation::HRESULT),
    set_surface_type : Proc(IDirectXVideoMemoryConfiguration*, Win32cr::Media::MediaFoundation::DXVA2_SurfaceType, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b7f916dd-db3b-49c1-84d7-e45ef99ec726")]
  record IDirectXVideoMemoryConfiguration, lpVtbl : IDirectXVideoMemoryConfigurationVtbl* do
    GUID = LibC::GUID.new(0xb7f916dd_u32, 0xdb3b_u16, 0x49c1_u16, StaticArray[0x84_u8, 0xd7_u8, 0xe4_u8, 0x5e_u8, 0xf9_u8, 0x9e_u8, 0xc7_u8, 0x26_u8])
    def query_interface(this : IDirectXVideoMemoryConfiguration*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDirectXVideoMemoryConfiguration*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDirectXVideoMemoryConfiguration*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_available_surface_type_by_index(this : IDirectXVideoMemoryConfiguration*, dwTypeIndex : UInt32, pdwType : Win32cr::Media::MediaFoundation::DXVA2_SurfaceType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_surface_type_by_index.call(this, dwTypeIndex, pdwType)
    end
    def set_surface_type(this : IDirectXVideoMemoryConfiguration*, dwType : Win32cr::Media::MediaFoundation::DXVA2_SurfaceType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_surface_type.call(this, dwType)
    end

  end

  @[Extern]
  record IOPMVideoOutputVtbl,
    query_interface : Proc(IOPMVideoOutput*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IOPMVideoOutput*, UInt32),
    release : Proc(IOPMVideoOutput*, UInt32),
    start_initialization : Proc(IOPMVideoOutput*, Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    finish_initialization : Proc(IOPMVideoOutput*, Win32cr::Media::MediaFoundation::OPM_ENCRYPTED_INITIALIZATION_PARAMETERS*, Win32cr::Foundation::HRESULT),
    get_information : Proc(IOPMVideoOutput*, Win32cr::Media::MediaFoundation::OPM_GET_INFO_PARAMETERS*, Win32cr::Media::MediaFoundation::OPM_REQUESTED_INFORMATION*, Win32cr::Foundation::HRESULT),
    copp_compatible_get_information : Proc(IOPMVideoOutput*, Win32cr::Media::MediaFoundation::OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS*, Win32cr::Media::MediaFoundation::OPM_REQUESTED_INFORMATION*, Win32cr::Foundation::HRESULT),
    configure : Proc(IOPMVideoOutput*, Win32cr::Media::MediaFoundation::OPM_CONFIGURE_PARAMETERS*, UInt32, UInt8*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0a15159d-41c7-4456-93e1-284cd61d4e8d")]
  record IOPMVideoOutput, lpVtbl : IOPMVideoOutputVtbl* do
    GUID = LibC::GUID.new(0xa15159d_u32, 0x41c7_u16, 0x4456_u16, StaticArray[0x93_u8, 0xe1_u8, 0x28_u8, 0x4c_u8, 0xd6_u8, 0x1d_u8, 0x4e_u8, 0x8d_u8])
    def query_interface(this : IOPMVideoOutput*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IOPMVideoOutput*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IOPMVideoOutput*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_initialization(this : IOPMVideoOutput*, prnRandomNumber : Win32cr::Media::MediaFoundation::OPM_RANDOM_NUMBER*, ppbCertificate : UInt8**, pulCertificateLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_initialization.call(this, prnRandomNumber, ppbCertificate, pulCertificateLength)
    end
    def finish_initialization(this : IOPMVideoOutput*, pParameters : Win32cr::Media::MediaFoundation::OPM_ENCRYPTED_INITIALIZATION_PARAMETERS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finish_initialization.call(this, pParameters)
    end
    def get_information(this : IOPMVideoOutput*, pParameters : Win32cr::Media::MediaFoundation::OPM_GET_INFO_PARAMETERS*, pRequestedInformation : Win32cr::Media::MediaFoundation::OPM_REQUESTED_INFORMATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_information.call(this, pParameters, pRequestedInformation)
    end
    def copp_compatible_get_information(this : IOPMVideoOutput*, pParameters : Win32cr::Media::MediaFoundation::OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS*, pRequestedInformation : Win32cr::Media::MediaFoundation::OPM_REQUESTED_INFORMATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copp_compatible_get_information.call(this, pParameters, pRequestedInformation)
    end
    def configure(this : IOPMVideoOutput*, pParameters : Win32cr::Media::MediaFoundation::OPM_CONFIGURE_PARAMETERS*, ulAdditionalParametersSize : UInt32, pbAdditionalParameters : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.configure.call(this, pParameters, ulAdditionalParametersSize, pbAdditionalParameters)
    end

  end

  @[Extern]
  record IMFAttributesVtbl,
    query_interface : Proc(IMFAttributes*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFAttributes*, UInt32),
    release : Proc(IMFAttributes*, UInt32),
    get_item : Proc(IMFAttributes*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFAttributes*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFAttributes*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFAttributes*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFAttributes*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFAttributes*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFAttributes*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFAttributes*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFAttributes*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFAttributes*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFAttributes*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFAttributes*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFAttributes*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFAttributes*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFAttributes*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFAttributes*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFAttributes*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFAttributes*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFAttributes*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFAttributes*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFAttributes*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFAttributes*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFAttributes*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFAttributes*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFAttributes*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFAttributes*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFAttributes*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFAttributes*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFAttributes*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFAttributes*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2cd2d921-c447-44a7-a13c-4adabfc247e3")]
  record IMFAttributes, lpVtbl : IMFAttributesVtbl* do
    GUID = LibC::GUID.new(0x2cd2d921_u32, 0xc447_u16, 0x44a7_u16, StaticArray[0xa1_u8, 0x3c_u8, 0x4a_u8, 0xda_u8, 0xbf_u8, 0xc2_u8, 0x47_u8, 0xe3_u8])
    def query_interface(this : IMFAttributes*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFAttributes*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFAttributes*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFAttributes*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFAttributes*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFAttributes*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFAttributes*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFAttributes*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFAttributes*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFAttributes*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFAttributes*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFAttributes*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFAttributes*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFAttributes*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFAttributes*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFAttributes*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFAttributes*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFAttributes*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFAttributes*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFAttributes*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFAttributes*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFAttributes*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFAttributes*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFAttributes*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFAttributes*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFAttributes*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFAttributes*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFAttributes*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFAttributes*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFAttributes*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFAttributes*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end

  end

  @[Extern]
  record IMFMediaBufferVtbl,
    query_interface : Proc(IMFMediaBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaBuffer*, UInt32),
    release : Proc(IMFMediaBuffer*, UInt32),
    lock : Proc(IMFMediaBuffer*, UInt8**, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    unlock : Proc(IMFMediaBuffer*, Win32cr::Foundation::HRESULT),
    get_current_length : Proc(IMFMediaBuffer*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_length : Proc(IMFMediaBuffer*, UInt32, Win32cr::Foundation::HRESULT),
    get_max_length : Proc(IMFMediaBuffer*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("045fa593-8799-42b8-bc8d-8968c6453507")]
  record IMFMediaBuffer, lpVtbl : IMFMediaBufferVtbl* do
    GUID = LibC::GUID.new(0x45fa593_u32, 0x8799_u16, 0x42b8_u16, StaticArray[0xbc_u8, 0x8d_u8, 0x89_u8, 0x68_u8, 0xc6_u8, 0x45_u8, 0x35_u8, 0x7_u8])
    def query_interface(this : IMFMediaBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock(this : IMFMediaBuffer*, ppbBuffer : UInt8**, pcbMaxLength : UInt32*, pcbCurrentLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock.call(this, ppbBuffer, pcbMaxLength, pcbCurrentLength)
    end
    def unlock(this : IMFMediaBuffer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock.call(this)
    end
    def get_current_length(this : IMFMediaBuffer*, pcbCurrentLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_length.call(this, pcbCurrentLength)
    end
    def set_current_length(this : IMFMediaBuffer*, cbCurrentLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_length.call(this, cbCurrentLength)
    end
    def get_max_length(this : IMFMediaBuffer*, pcbMaxLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_length.call(this, pcbMaxLength)
    end

  end

  @[Extern]
  record IMFSampleVtbl,
    query_interface : Proc(IMFSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSample*, UInt32),
    release : Proc(IMFSample*, UInt32),
    get_item : Proc(IMFSample*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFSample*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFSample*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFSample*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFSample*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFSample*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFSample*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFSample*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFSample*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFSample*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFSample*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFSample*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFSample*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFSample*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFSample*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFSample*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFSample*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFSample*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFSample*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFSample*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFSample*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFSample*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFSample*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFSample*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFSample*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFSample*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFSample*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFSample*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFSample*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFSample*, Void*, Win32cr::Foundation::HRESULT),
    get_sample_flags : Proc(IMFSample*, UInt32*, Win32cr::Foundation::HRESULT),
    set_sample_flags : Proc(IMFSample*, UInt32, Win32cr::Foundation::HRESULT),
    get_sample_time : Proc(IMFSample*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_time : Proc(IMFSample*, Int64, Win32cr::Foundation::HRESULT),
    get_sample_duration : Proc(IMFSample*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_duration : Proc(IMFSample*, Int64, Win32cr::Foundation::HRESULT),
    get_buffer_count : Proc(IMFSample*, UInt32*, Win32cr::Foundation::HRESULT),
    get_buffer_by_index : Proc(IMFSample*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    convert_to_contiguous_buffer : Proc(IMFSample*, Void**, Win32cr::Foundation::HRESULT),
    add_buffer : Proc(IMFSample*, Void*, Win32cr::Foundation::HRESULT),
    remove_buffer_by_index : Proc(IMFSample*, UInt32, Win32cr::Foundation::HRESULT),
    remove_all_buffers : Proc(IMFSample*, Win32cr::Foundation::HRESULT),
    get_total_length : Proc(IMFSample*, UInt32*, Win32cr::Foundation::HRESULT),
    copy_to_buffer : Proc(IMFSample*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c40a00f2-b93a-4d80-ae8c-5a1c634f58e4")]
  record IMFSample, lpVtbl : IMFSampleVtbl* do
    GUID = LibC::GUID.new(0xc40a00f2_u32, 0xb93a_u16, 0x4d80_u16, StaticArray[0xae_u8, 0x8c_u8, 0x5a_u8, 0x1c_u8, 0x63_u8, 0x4f_u8, 0x58_u8, 0xe4_u8])
    def query_interface(this : IMFSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFSample*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFSample*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFSample*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFSample*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFSample*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFSample*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFSample*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFSample*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFSample*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFSample*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFSample*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFSample*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFSample*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFSample*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFSample*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFSample*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFSample*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFSample*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFSample*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFSample*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFSample*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFSample*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFSample*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFSample*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFSample*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFSample*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFSample*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_sample_flags(this : IMFSample*, pdwSampleFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_flags.call(this, pdwSampleFlags)
    end
    def set_sample_flags(this : IMFSample*, dwSampleFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_flags.call(this, dwSampleFlags)
    end
    def get_sample_time(this : IMFSample*, phnsSampleTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_time.call(this, phnsSampleTime)
    end
    def set_sample_time(this : IMFSample*, hnsSampleTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_time.call(this, hnsSampleTime)
    end
    def get_sample_duration(this : IMFSample*, phnsSampleDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_duration.call(this, phnsSampleDuration)
    end
    def set_sample_duration(this : IMFSample*, hnsSampleDuration : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_duration.call(this, hnsSampleDuration)
    end
    def get_buffer_count(this : IMFSample*, pdwBufferCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_count.call(this, pdwBufferCount)
    end
    def get_buffer_by_index(this : IMFSample*, dwIndex : UInt32, ppBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_by_index.call(this, dwIndex, ppBuffer)
    end
    def convert_to_contiguous_buffer(this : IMFSample*, ppBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_to_contiguous_buffer.call(this, ppBuffer)
    end
    def add_buffer(this : IMFSample*, pBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_buffer.call(this, pBuffer)
    end
    def remove_buffer_by_index(this : IMFSample*, dwIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_buffer_by_index.call(this, dwIndex)
    end
    def remove_all_buffers(this : IMFSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_buffers.call(this)
    end
    def get_total_length(this : IMFSample*, pcbTotalLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_length.call(this, pcbTotalLength)
    end
    def copy_to_buffer(this : IMFSample*, pBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_to_buffer.call(this, pBuffer)
    end

  end

  @[Extern]
  record IMF2DBufferVtbl,
    query_interface : Proc(IMF2DBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMF2DBuffer*, UInt32),
    release : Proc(IMF2DBuffer*, UInt32),
    lock2_d : Proc(IMF2DBuffer*, UInt8**, Int32*, Win32cr::Foundation::HRESULT),
    unlock2_d : Proc(IMF2DBuffer*, Win32cr::Foundation::HRESULT),
    get_scanline0_and_pitch : Proc(IMF2DBuffer*, UInt8**, Int32*, Win32cr::Foundation::HRESULT),
    is_contiguous_format : Proc(IMF2DBuffer*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_contiguous_length : Proc(IMF2DBuffer*, UInt32*, Win32cr::Foundation::HRESULT),
    contiguous_copy_to : Proc(IMF2DBuffer*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    contiguous_copy_from : Proc(IMF2DBuffer*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb")]
  record IMF2DBuffer, lpVtbl : IMF2DBufferVtbl* do
    GUID = LibC::GUID.new(0x7dc9d5f9_u32, 0x9ed9_u16, 0x44ec_u16, StaticArray[0x9b_u8, 0xbf_u8, 0x6_u8, 0x0_u8, 0xbb_u8, 0x58_u8, 0x9f_u8, 0xbb_u8])
    def query_interface(this : IMF2DBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMF2DBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMF2DBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock2_d(this : IMF2DBuffer*, ppbScanline0 : UInt8**, plPitch : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock2_d.call(this, ppbScanline0, plPitch)
    end
    def unlock2_d(this : IMF2DBuffer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock2_d.call(this)
    end
    def get_scanline0_and_pitch(this : IMF2DBuffer*, pbScanline0 : UInt8**, plPitch : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scanline0_and_pitch.call(this, pbScanline0, plPitch)
    end
    def is_contiguous_format(this : IMF2DBuffer*, pfIsContiguous : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_contiguous_format.call(this, pfIsContiguous)
    end
    def get_contiguous_length(this : IMF2DBuffer*, pcbLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contiguous_length.call(this, pcbLength)
    end
    def contiguous_copy_to(this : IMF2DBuffer*, pbDestBuffer : UInt8*, cbDestBuffer : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.contiguous_copy_to.call(this, pbDestBuffer, cbDestBuffer)
    end
    def contiguous_copy_from(this : IMF2DBuffer*, pbSrcBuffer : UInt8*, cbSrcBuffer : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.contiguous_copy_from.call(this, pbSrcBuffer, cbSrcBuffer)
    end

  end

  @[Extern]
  record IMF2DBuffer2Vtbl,
    query_interface : Proc(IMF2DBuffer2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMF2DBuffer2*, UInt32),
    release : Proc(IMF2DBuffer2*, UInt32),
    lock2_d : Proc(IMF2DBuffer2*, UInt8**, Int32*, Win32cr::Foundation::HRESULT),
    unlock2_d : Proc(IMF2DBuffer2*, Win32cr::Foundation::HRESULT),
    get_scanline0_and_pitch : Proc(IMF2DBuffer2*, UInt8**, Int32*, Win32cr::Foundation::HRESULT),
    is_contiguous_format : Proc(IMF2DBuffer2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_contiguous_length : Proc(IMF2DBuffer2*, UInt32*, Win32cr::Foundation::HRESULT),
    contiguous_copy_to : Proc(IMF2DBuffer2*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    contiguous_copy_from : Proc(IMF2DBuffer2*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    lock2_d_size : Proc(IMF2DBuffer2*, Win32cr::Media::MediaFoundation::MF2DBuffer_LockFlags, UInt8**, Int32*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    copy2_d_to : Proc(IMF2DBuffer2*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("33ae5ea6-4316-436f-8ddd-d73d22f829ec")]
  record IMF2DBuffer2, lpVtbl : IMF2DBuffer2Vtbl* do
    GUID = LibC::GUID.new(0x33ae5ea6_u32, 0x4316_u16, 0x436f_u16, StaticArray[0x8d_u8, 0xdd_u8, 0xd7_u8, 0x3d_u8, 0x22_u8, 0xf8_u8, 0x29_u8, 0xec_u8])
    def query_interface(this : IMF2DBuffer2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMF2DBuffer2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMF2DBuffer2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock2_d(this : IMF2DBuffer2*, ppbScanline0 : UInt8**, plPitch : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock2_d.call(this, ppbScanline0, plPitch)
    end
    def unlock2_d(this : IMF2DBuffer2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock2_d.call(this)
    end
    def get_scanline0_and_pitch(this : IMF2DBuffer2*, pbScanline0 : UInt8**, plPitch : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scanline0_and_pitch.call(this, pbScanline0, plPitch)
    end
    def is_contiguous_format(this : IMF2DBuffer2*, pfIsContiguous : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_contiguous_format.call(this, pfIsContiguous)
    end
    def get_contiguous_length(this : IMF2DBuffer2*, pcbLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_contiguous_length.call(this, pcbLength)
    end
    def contiguous_copy_to(this : IMF2DBuffer2*, pbDestBuffer : UInt8*, cbDestBuffer : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.contiguous_copy_to.call(this, pbDestBuffer, cbDestBuffer)
    end
    def contiguous_copy_from(this : IMF2DBuffer2*, pbSrcBuffer : UInt8*, cbSrcBuffer : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.contiguous_copy_from.call(this, pbSrcBuffer, cbSrcBuffer)
    end
    def lock2_d_size(this : IMF2DBuffer2*, lockFlags : Win32cr::Media::MediaFoundation::MF2DBuffer_LockFlags, ppbScanline0 : UInt8**, plPitch : Int32*, ppbBufferStart : UInt8**, pcbBufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock2_d_size.call(this, lockFlags, ppbScanline0, plPitch, ppbBufferStart, pcbBufferLength)
    end
    def copy2_d_to(this : IMF2DBuffer2*, pDestBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy2_d_to.call(this, pDestBuffer)
    end

  end

  @[Extern]
  record IMFDXGIBufferVtbl,
    query_interface : Proc(IMFDXGIBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDXGIBuffer*, UInt32),
    release : Proc(IMFDXGIBuffer*, UInt32),
    get_resource : Proc(IMFDXGIBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_subresource_index : Proc(IMFDXGIBuffer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFDXGIBuffer*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFDXGIBuffer*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e7174cfa-1c9e-48b1-8866-626226bfc258")]
  record IMFDXGIBuffer, lpVtbl : IMFDXGIBufferVtbl* do
    GUID = LibC::GUID.new(0xe7174cfa_u32, 0x1c9e_u16, 0x48b1_u16, StaticArray[0x88_u8, 0x66_u8, 0x62_u8, 0x62_u8, 0x26_u8, 0xbf_u8, 0xc2_u8, 0x58_u8])
    def query_interface(this : IMFDXGIBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDXGIBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDXGIBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_resource(this : IMFDXGIBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource.call(this, riid, ppvObject)
    end
    def get_subresource_index(this : IMFDXGIBuffer*, puSubresource : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subresource_index.call(this, puSubresource)
    end
    def get_unknown(this : IMFDXGIBuffer*, guid : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guid, riid, ppvObject)
    end
    def set_unknown(this : IMFDXGIBuffer*, guid : LibC::GUID*, pUnkData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guid, pUnkData)
    end

  end

  @[Extern]
  record IMFMediaTypeVtbl,
    query_interface : Proc(IMFMediaType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaType*, UInt32),
    release : Proc(IMFMediaType*, UInt32),
    get_item : Proc(IMFMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFMediaType*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFMediaType*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFMediaType*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFMediaType*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFMediaType*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFMediaType*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFMediaType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFMediaType*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFMediaType*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFMediaType*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFMediaType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFMediaType*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFMediaType*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFMediaType*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFMediaType*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFMediaType*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFMediaType*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFMediaType*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFMediaType*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFMediaType*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFMediaType*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFMediaType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFMediaType*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFMediaType*, Void*, Win32cr::Foundation::HRESULT),
    get_major_type : Proc(IMFMediaType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_compressed_format : Proc(IMFMediaType*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_equal : Proc(IMFMediaType*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_representation : Proc(IMFMediaType*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    free_representation : Proc(IMFMediaType*, LibC::GUID, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("44ae0fa8-ea31-4109-8d2e-4cae4997c555")]
  record IMFMediaType, lpVtbl : IMFMediaTypeVtbl* do
    GUID = LibC::GUID.new(0x44ae0fa8_u32, 0xea31_u16, 0x4109_u16, StaticArray[0x8d_u8, 0x2e_u8, 0x4c_u8, 0xae_u8, 0x49_u8, 0x97_u8, 0xc5_u8, 0x55_u8])
    def query_interface(this : IMFMediaType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFMediaType*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFMediaType*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFMediaType*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFMediaType*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFMediaType*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFMediaType*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFMediaType*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFMediaType*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFMediaType*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFMediaType*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFMediaType*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFMediaType*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFMediaType*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFMediaType*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFMediaType*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFMediaType*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFMediaType*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFMediaType*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFMediaType*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFMediaType*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFMediaType*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFMediaType*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFMediaType*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFMediaType*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFMediaType*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFMediaType*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFMediaType*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_major_type(this : IMFMediaType*, pguidMajorType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_major_type.call(this, pguidMajorType)
    end
    def is_compressed_format(this : IMFMediaType*, pfCompressed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_compressed_format.call(this, pfCompressed)
    end
    def is_equal(this : IMFMediaType*, pIMediaType : Void*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal.call(this, pIMediaType, pdwFlags)
    end
    def get_representation(this : IMFMediaType*, guidRepresentation : LibC::GUID, ppvRepresentation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_representation.call(this, guidRepresentation, ppvRepresentation)
    end
    def free_representation(this : IMFMediaType*, guidRepresentation : LibC::GUID, pvRepresentation : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_representation.call(this, guidRepresentation, pvRepresentation)
    end

  end

  @[Extern]
  record IMFAudioMediaTypeVtbl,
    query_interface : Proc(IMFAudioMediaType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFAudioMediaType*, UInt32),
    release : Proc(IMFAudioMediaType*, UInt32),
    get_item : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFAudioMediaType*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFAudioMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFAudioMediaType*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFAudioMediaType*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFAudioMediaType*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFAudioMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFAudioMediaType*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFAudioMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFAudioMediaType*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFAudioMediaType*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFAudioMediaType*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFAudioMediaType*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFAudioMediaType*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFAudioMediaType*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFAudioMediaType*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFAudioMediaType*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFAudioMediaType*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFAudioMediaType*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFAudioMediaType*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFAudioMediaType*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFAudioMediaType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFAudioMediaType*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFAudioMediaType*, Void*, Win32cr::Foundation::HRESULT),
    get_major_type : Proc(IMFAudioMediaType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_compressed_format : Proc(IMFAudioMediaType*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_equal : Proc(IMFAudioMediaType*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_representation : Proc(IMFAudioMediaType*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    free_representation : Proc(IMFAudioMediaType*, LibC::GUID, Void*, Win32cr::Foundation::HRESULT),
    get_audio_format : Proc(IMFAudioMediaType*, Win32cr::Media::Audio::WAVEFORMATEX*)


  @[Extern]
  #@[Com("26a0adc3-ce26-4672-9304-69552edd3faf")]
  record IMFAudioMediaType, lpVtbl : IMFAudioMediaTypeVtbl* do
    GUID = LibC::GUID.new(0x26a0adc3_u32, 0xce26_u16, 0x4672_u16, StaticArray[0x93_u8, 0x4_u8, 0x69_u8, 0x55_u8, 0x2e_u8, 0xdd_u8, 0x3f_u8, 0xaf_u8])
    def query_interface(this : IMFAudioMediaType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFAudioMediaType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFAudioMediaType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFAudioMediaType*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFAudioMediaType*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFAudioMediaType*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFAudioMediaType*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFAudioMediaType*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFAudioMediaType*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFAudioMediaType*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFAudioMediaType*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFAudioMediaType*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFAudioMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFAudioMediaType*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFAudioMediaType*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFAudioMediaType*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFAudioMediaType*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFAudioMediaType*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFAudioMediaType*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFAudioMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFAudioMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFAudioMediaType*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFAudioMediaType*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFAudioMediaType*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_major_type(this : IMFAudioMediaType*, pguidMajorType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_major_type.call(this, pguidMajorType)
    end
    def is_compressed_format(this : IMFAudioMediaType*, pfCompressed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_compressed_format.call(this, pfCompressed)
    end
    def is_equal(this : IMFAudioMediaType*, pIMediaType : Void*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal.call(this, pIMediaType, pdwFlags)
    end
    def get_representation(this : IMFAudioMediaType*, guidRepresentation : LibC::GUID, ppvRepresentation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_representation.call(this, guidRepresentation, ppvRepresentation)
    end
    def free_representation(this : IMFAudioMediaType*, guidRepresentation : LibC::GUID, pvRepresentation : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_representation.call(this, guidRepresentation, pvRepresentation)
    end
    def get_audio_format(this : IMFAudioMediaType*) : Win32cr::Media::Audio::WAVEFORMATEX*
      @lpVtbl.try &.value.get_audio_format.call(this)
    end

  end

  @[Extern]
  record IMFVideoMediaTypeVtbl,
    query_interface : Proc(IMFVideoMediaType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoMediaType*, UInt32),
    release : Proc(IMFVideoMediaType*, UInt32),
    get_item : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFVideoMediaType*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFVideoMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFVideoMediaType*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFVideoMediaType*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFVideoMediaType*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFVideoMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFVideoMediaType*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFVideoMediaType*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFVideoMediaType*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFVideoMediaType*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFVideoMediaType*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFVideoMediaType*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFVideoMediaType*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFVideoMediaType*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFVideoMediaType*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFVideoMediaType*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFVideoMediaType*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFVideoMediaType*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFVideoMediaType*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFVideoMediaType*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFVideoMediaType*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFVideoMediaType*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFVideoMediaType*, Void*, Win32cr::Foundation::HRESULT),
    get_major_type : Proc(IMFVideoMediaType*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_compressed_format : Proc(IMFVideoMediaType*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_equal : Proc(IMFVideoMediaType*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_representation : Proc(IMFVideoMediaType*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    free_representation : Proc(IMFVideoMediaType*, LibC::GUID, Void*, Win32cr::Foundation::HRESULT),
    get_video_format : Proc(IMFVideoMediaType*, Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*),
    get_video_representation : Proc(IMFVideoMediaType*, LibC::GUID, Void**, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b99f381f-a8f9-47a2-a5af-ca3a225a3890")]
  record IMFVideoMediaType, lpVtbl : IMFVideoMediaTypeVtbl* do
    GUID = LibC::GUID.new(0xb99f381f_u32, 0xa8f9_u16, 0x47a2_u16, StaticArray[0xa5_u8, 0xaf_u8, 0xca_u8, 0x3a_u8, 0x22_u8, 0x5a_u8, 0x38_u8, 0x90_u8])
    def query_interface(this : IMFVideoMediaType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoMediaType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoMediaType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFVideoMediaType*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFVideoMediaType*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFVideoMediaType*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFVideoMediaType*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFVideoMediaType*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFVideoMediaType*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFVideoMediaType*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFVideoMediaType*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFVideoMediaType*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFVideoMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFVideoMediaType*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFVideoMediaType*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFVideoMediaType*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFVideoMediaType*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFVideoMediaType*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFVideoMediaType*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFVideoMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFVideoMediaType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFVideoMediaType*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFVideoMediaType*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFVideoMediaType*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_major_type(this : IMFVideoMediaType*, pguidMajorType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_major_type.call(this, pguidMajorType)
    end
    def is_compressed_format(this : IMFVideoMediaType*, pfCompressed : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_compressed_format.call(this, pfCompressed)
    end
    def is_equal(this : IMFVideoMediaType*, pIMediaType : Void*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal.call(this, pIMediaType, pdwFlags)
    end
    def get_representation(this : IMFVideoMediaType*, guidRepresentation : LibC::GUID, ppvRepresentation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_representation.call(this, guidRepresentation, ppvRepresentation)
    end
    def free_representation(this : IMFVideoMediaType*, guidRepresentation : LibC::GUID, pvRepresentation : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.free_representation.call(this, guidRepresentation, pvRepresentation)
    end
    def get_video_format(this : IMFVideoMediaType*) : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*
      @lpVtbl.try &.value.get_video_format.call(this)
    end
    def get_video_representation(this : IMFVideoMediaType*, guidRepresentation : LibC::GUID, ppvRepresentation : Void**, lStride : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_representation.call(this, guidRepresentation, ppvRepresentation, lStride)
    end

  end

  @[Extern]
  record IMFAsyncResultVtbl,
    query_interface : Proc(IMFAsyncResult*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFAsyncResult*, UInt32),
    release : Proc(IMFAsyncResult*, UInt32),
    get_state : Proc(IMFAsyncResult*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(IMFAsyncResult*, Win32cr::Foundation::HRESULT),
    set_status : Proc(IMFAsyncResult*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    get_object : Proc(IMFAsyncResult*, Void**, Win32cr::Foundation::HRESULT),
    get_state_no_add_ref : Proc(IMFAsyncResult*, Void*)


  @[Extern]
  #@[Com("ac6b7889-0740-4d51-8619-905994a55cc6")]
  record IMFAsyncResult, lpVtbl : IMFAsyncResultVtbl* do
    GUID = LibC::GUID.new(0xac6b7889_u32, 0x740_u16, 0x4d51_u16, StaticArray[0x86_u8, 0x19_u8, 0x90_u8, 0x59_u8, 0x94_u8, 0xa5_u8, 0x5c_u8, 0xc6_u8])
    def query_interface(this : IMFAsyncResult*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFAsyncResult*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFAsyncResult*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_state(this : IMFAsyncResult*, ppunkState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, ppunkState)
    end
    def get_status(this : IMFAsyncResult*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this)
    end
    def set_status(this : IMFAsyncResult*, hrStatus : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, hrStatus)
    end
    def get_object(this : IMFAsyncResult*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, ppObject)
    end
    def get_state_no_add_ref(this : IMFAsyncResult*) : Void*
      @lpVtbl.try &.value.get_state_no_add_ref.call(this)
    end

  end

  @[Extern]
  record IMFAsyncCallbackVtbl,
    query_interface : Proc(IMFAsyncCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFAsyncCallback*, UInt32),
    release : Proc(IMFAsyncCallback*, UInt32),
    get_parameters : Proc(IMFAsyncCallback*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    invoke : Proc(IMFAsyncCallback*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a27003cf-2354-4f2a-8d6a-ab7cff15437e")]
  record IMFAsyncCallback, lpVtbl : IMFAsyncCallbackVtbl* do
    GUID = LibC::GUID.new(0xa27003cf_u32, 0x2354_u16, 0x4f2a_u16, StaticArray[0x8d_u8, 0x6a_u8, 0xab_u8, 0x7c_u8, 0xff_u8, 0x15_u8, 0x43_u8, 0x7e_u8])
    def query_interface(this : IMFAsyncCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFAsyncCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFAsyncCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_parameters(this : IMFAsyncCallback*, pdwFlags : UInt32*, pdwQueue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameters.call(this, pdwFlags, pdwQueue)
    end
    def invoke(this : IMFAsyncCallback*, pAsyncResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke.call(this, pAsyncResult)
    end

  end

  @[Extern]
  record IMFAsyncCallbackLoggingVtbl,
    query_interface : Proc(IMFAsyncCallbackLogging*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFAsyncCallbackLogging*, UInt32),
    release : Proc(IMFAsyncCallbackLogging*, UInt32),
    get_parameters : Proc(IMFAsyncCallbackLogging*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    invoke : Proc(IMFAsyncCallbackLogging*, Void*, Win32cr::Foundation::HRESULT),
    get_object_pointer : Proc(IMFAsyncCallbackLogging*, Void*),
    get_object_tag : Proc(IMFAsyncCallbackLogging*, UInt32)


  @[Extern]
  #@[Com("c7a4dca1-f5f0-47b6-b92b-bf0106d25791")]
  record IMFAsyncCallbackLogging, lpVtbl : IMFAsyncCallbackLoggingVtbl* do
    GUID = LibC::GUID.new(0xc7a4dca1_u32, 0xf5f0_u16, 0x47b6_u16, StaticArray[0xb9_u8, 0x2b_u8, 0xbf_u8, 0x1_u8, 0x6_u8, 0xd2_u8, 0x57_u8, 0x91_u8])
    def query_interface(this : IMFAsyncCallbackLogging*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFAsyncCallbackLogging*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFAsyncCallbackLogging*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_parameters(this : IMFAsyncCallbackLogging*, pdwFlags : UInt32*, pdwQueue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_parameters.call(this, pdwFlags, pdwQueue)
    end
    def invoke(this : IMFAsyncCallbackLogging*, pAsyncResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke.call(this, pAsyncResult)
    end
    def get_object_pointer(this : IMFAsyncCallbackLogging*) : Void*
      @lpVtbl.try &.value.get_object_pointer.call(this)
    end
    def get_object_tag(this : IMFAsyncCallbackLogging*) : UInt32
      @lpVtbl.try &.value.get_object_tag.call(this)
    end

  end

  @[Extern]
  record IMFMediaEventVtbl,
    query_interface : Proc(IMFMediaEvent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEvent*, UInt32),
    release : Proc(IMFMediaEvent*, UInt32),
    get_item : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFMediaEvent*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFMediaEvent*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFMediaEvent*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFMediaEvent*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFMediaEvent*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFMediaEvent*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFMediaEvent*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFMediaEvent*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFMediaEvent*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFMediaEvent*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFMediaEvent*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFMediaEvent*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFMediaEvent*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFMediaEvent*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFMediaEvent*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFMediaEvent*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFMediaEvent*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFMediaEvent*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFMediaEvent*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFMediaEvent*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFMediaEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFMediaEvent*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFMediaEvent*, Void*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IMFMediaEvent*, UInt32*, Win32cr::Foundation::HRESULT),
    get_extended_type : Proc(IMFMediaEvent*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_status : Proc(IMFMediaEvent*, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IMFMediaEvent*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("df598932-f10c-4e39-bba2-c308f101daa3")]
  record IMFMediaEvent, lpVtbl : IMFMediaEventVtbl* do
    GUID = LibC::GUID.new(0xdf598932_u32, 0xf10c_u16, 0x4e39_u16, StaticArray[0xbb_u8, 0xa2_u8, 0xc3_u8, 0x8_u8, 0xf1_u8, 0x1_u8, 0xda_u8, 0xa3_u8])
    def query_interface(this : IMFMediaEvent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEvent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEvent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFMediaEvent*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFMediaEvent*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFMediaEvent*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFMediaEvent*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFMediaEvent*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFMediaEvent*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFMediaEvent*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFMediaEvent*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFMediaEvent*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFMediaEvent*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFMediaEvent*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFMediaEvent*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFMediaEvent*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFMediaEvent*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFMediaEvent*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFMediaEvent*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFMediaEvent*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFMediaEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFMediaEvent*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFMediaEvent*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFMediaEvent*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFMediaEvent*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFMediaEvent*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFMediaEvent*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFMediaEvent*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFMediaEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFMediaEvent*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFMediaEvent*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFMediaEvent*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFMediaEvent*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_type(this : IMFMediaEvent*, pmet : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pmet)
    end
    def get_extended_type(this : IMFMediaEvent*, pguidExtendedType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_type.call(this, pguidExtendedType)
    end
    def get_status(this : IMFMediaEvent*, phrStatus : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this, phrStatus)
    end
    def get_value(this : IMFMediaEvent*, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, pvValue)
    end

  end

  @[Extern]
  record IMFMediaEventGeneratorVtbl,
    query_interface : Proc(IMFMediaEventGenerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEventGenerator*, UInt32),
    release : Proc(IMFMediaEventGenerator*, UInt32),
    get_event : Proc(IMFMediaEventGenerator*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaEventGenerator*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaEventGenerator*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaEventGenerator*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2cd0bd52-bcd5-4b89-b62c-eadc0c031e7d")]
  record IMFMediaEventGenerator, lpVtbl : IMFMediaEventGeneratorVtbl* do
    GUID = LibC::GUID.new(0x2cd0bd52_u32, 0xbcd5_u16, 0x4b89_u16, StaticArray[0xb6_u8, 0x2c_u8, 0xea_u8, 0xdc_u8, 0xc_u8, 0x3_u8, 0x1e_u8, 0x7d_u8])
    def query_interface(this : IMFMediaEventGenerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEventGenerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEventGenerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaEventGenerator*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaEventGenerator*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaEventGenerator*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaEventGenerator*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end

  end

  @[Extern]
  record IMFRemoteAsyncCallbackVtbl,
    query_interface : Proc(IMFRemoteAsyncCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRemoteAsyncCallback*, UInt32),
    release : Proc(IMFRemoteAsyncCallback*, UInt32),
    invoke : Proc(IMFRemoteAsyncCallback*, Win32cr::Foundation::HRESULT, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a27003d0-2354-4f2a-8d6a-ab7cff15437e")]
  record IMFRemoteAsyncCallback, lpVtbl : IMFRemoteAsyncCallbackVtbl* do
    GUID = LibC::GUID.new(0xa27003d0_u32, 0x2354_u16, 0x4f2a_u16, StaticArray[0x8d_u8, 0x6a_u8, 0xab_u8, 0x7c_u8, 0xff_u8, 0x15_u8, 0x43_u8, 0x7e_u8])
    def query_interface(this : IMFRemoteAsyncCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRemoteAsyncCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRemoteAsyncCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def invoke(this : IMFRemoteAsyncCallback*, hr : Win32cr::Foundation::HRESULT, pRemoteResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke.call(this, hr, pRemoteResult)
    end

  end

  @[Extern]
  record IMFByteStreamVtbl,
    query_interface : Proc(IMFByteStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFByteStream*, UInt32),
    release : Proc(IMFByteStream*, UInt32),
    get_capabilities : Proc(IMFByteStream*, UInt32*, Win32cr::Foundation::HRESULT),
    get_length : Proc(IMFByteStream*, UInt64*, Win32cr::Foundation::HRESULT),
    set_length : Proc(IMFByteStream*, UInt64, Win32cr::Foundation::HRESULT),
    get_current_position : Proc(IMFByteStream*, UInt64*, Win32cr::Foundation::HRESULT),
    set_current_position : Proc(IMFByteStream*, UInt64, Win32cr::Foundation::HRESULT),
    is_end_of_stream : Proc(IMFByteStream*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    read : Proc(IMFByteStream*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    begin_read : Proc(IMFByteStream*, UInt8*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_read : Proc(IMFByteStream*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    write : Proc(IMFByteStream*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    begin_write : Proc(IMFByteStream*, UInt8*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_write : Proc(IMFByteStream*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    seek : Proc(IMFByteStream*, Win32cr::Media::MediaFoundation::MFBYTESTREAM_SEEK_ORIGIN, Int64, UInt32, UInt64*, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFByteStream*, Win32cr::Foundation::HRESULT),
    close : Proc(IMFByteStream*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ad4c1b00-4bf7-422f-9175-756693d9130d")]
  record IMFByteStream, lpVtbl : IMFByteStreamVtbl* do
    GUID = LibC::GUID.new(0xad4c1b00_u32, 0x4bf7_u16, 0x422f_u16, StaticArray[0x91_u8, 0x75_u8, 0x75_u8, 0x66_u8, 0x93_u8, 0xd9_u8, 0x13_u8, 0xd_u8])
    def query_interface(this : IMFByteStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFByteStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFByteStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capabilities(this : IMFByteStream*, pdwCapabilities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities.call(this, pdwCapabilities)
    end
    def get_length(this : IMFByteStream*, pqwLength : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_length.call(this, pqwLength)
    end
    def set_length(this : IMFByteStream*, qwLength : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_length.call(this, qwLength)
    end
    def get_current_position(this : IMFByteStream*, pqwPosition : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_position.call(this, pqwPosition)
    end
    def set_current_position(this : IMFByteStream*, qwPosition : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_position.call(this, qwPosition)
    end
    def is_end_of_stream(this : IMFByteStream*, pfEndOfStream : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_end_of_stream.call(this, pfEndOfStream)
    end
    def read(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pb, cb, pcbRead)
    end
    def begin_read(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_read.call(this, pb, cb, pCallback, punkState)
    end
    def end_read(this : IMFByteStream*, pResult : Void*, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_read.call(this, pResult, pcbRead)
    end
    def write(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pcbWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pb, cb, pcbWritten)
    end
    def begin_write(this : IMFByteStream*, pb : UInt8*, cb : UInt32, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_write.call(this, pb, cb, pCallback, punkState)
    end
    def end_write(this : IMFByteStream*, pResult : Void*, pcbWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_write.call(this, pResult, pcbWritten)
    end
    def seek(this : IMFByteStream*, seek_origin : Win32cr::Media::MediaFoundation::MFBYTESTREAM_SEEK_ORIGIN, llSeekOffset : Int64, dwSeekFlags : UInt32, pqwCurrentPosition : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, seek_origin, llSeekOffset, dwSeekFlags, pqwCurrentPosition)
    end
    def flush(this : IMFByteStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this)
    end
    def close(this : IMFByteStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IMFByteStreamProxyClassFactoryVtbl,
    query_interface : Proc(IMFByteStreamProxyClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFByteStreamProxyClassFactory*, UInt32),
    release : Proc(IMFByteStreamProxyClassFactory*, UInt32),
    create_byte_stream_proxy : Proc(IMFByteStreamProxyClassFactory*, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a6b43f84-5c0a-42e8-a44d-b1857a76992f")]
  record IMFByteStreamProxyClassFactory, lpVtbl : IMFByteStreamProxyClassFactoryVtbl* do
    GUID = LibC::GUID.new(0xa6b43f84_u32, 0x5c0a_u16, 0x42e8_u16, StaticArray[0xa4_u8, 0x4d_u8, 0xb1_u8, 0x85_u8, 0x7a_u8, 0x76_u8, 0x99_u8, 0x2f_u8])
    def query_interface(this : IMFByteStreamProxyClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFByteStreamProxyClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFByteStreamProxyClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_byte_stream_proxy(this : IMFByteStreamProxyClassFactory*, pByteStream : Void*, pAttributes : Void*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_byte_stream_proxy.call(this, pByteStream, pAttributes, riid, ppvObject)
    end

  end

  @[Extern]
  record IMFSampleOutputStreamVtbl,
    query_interface : Proc(IMFSampleOutputStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSampleOutputStream*, UInt32),
    release : Proc(IMFSampleOutputStream*, UInt32),
    begin_write_sample : Proc(IMFSampleOutputStream*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_write_sample : Proc(IMFSampleOutputStream*, Void*, Win32cr::Foundation::HRESULT),
    close : Proc(IMFSampleOutputStream*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8feed468-6f7e-440d-869a-49bdd283ad0d")]
  record IMFSampleOutputStream, lpVtbl : IMFSampleOutputStreamVtbl* do
    GUID = LibC::GUID.new(0x8feed468_u32, 0x6f7e_u16, 0x440d_u16, StaticArray[0x86_u8, 0x9a_u8, 0x49_u8, 0xbd_u8, 0xd2_u8, 0x83_u8, 0xad_u8, 0xd_u8])
    def query_interface(this : IMFSampleOutputStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSampleOutputStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSampleOutputStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_write_sample(this : IMFSampleOutputStream*, pSample : Void*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_write_sample.call(this, pSample, pCallback, punkState)
    end
    def end_write_sample(this : IMFSampleOutputStream*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_write_sample.call(this, pResult)
    end
    def close(this : IMFSampleOutputStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IMFCollectionVtbl,
    query_interface : Proc(IMFCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCollection*, UInt32),
    release : Proc(IMFCollection*, UInt32),
    get_element_count : Proc(IMFCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_element : Proc(IMFCollection*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_element : Proc(IMFCollection*, Void*, Win32cr::Foundation::HRESULT),
    remove_element : Proc(IMFCollection*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    insert_element_at : Proc(IMFCollection*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    remove_all_elements : Proc(IMFCollection*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5bc8a76b-869a-46a3-9b03-fa218a66aebe")]
  record IMFCollection, lpVtbl : IMFCollectionVtbl* do
    GUID = LibC::GUID.new(0x5bc8a76b_u32, 0x869a_u16, 0x46a3_u16, StaticArray[0x9b_u8, 0x3_u8, 0xfa_u8, 0x21_u8, 0x8a_u8, 0x66_u8, 0xae_u8, 0xbe_u8])
    def query_interface(this : IMFCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_element_count(this : IMFCollection*, pcElements : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_element_count.call(this, pcElements)
    end
    def get_element(this : IMFCollection*, dwElementIndex : UInt32, ppUnkElement : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_element.call(this, dwElementIndex, ppUnkElement)
    end
    def add_element(this : IMFCollection*, pUnkElement : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_element.call(this, pUnkElement)
    end
    def remove_element(this : IMFCollection*, dwElementIndex : UInt32, ppUnkElement : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_element.call(this, dwElementIndex, ppUnkElement)
    end
    def insert_element_at(this : IMFCollection*, dwIndex : UInt32, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_element_at.call(this, dwIndex, pUnknown)
    end
    def remove_all_elements(this : IMFCollection*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_elements.call(this)
    end

  end

  @[Extern]
  record IMFMediaEventQueueVtbl,
    query_interface : Proc(IMFMediaEventQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEventQueue*, UInt32),
    release : Proc(IMFMediaEventQueue*, UInt32),
    get_event : Proc(IMFMediaEventQueue*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaEventQueue*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaEventQueue*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaEventQueue*, Void*, Win32cr::Foundation::HRESULT),
    queue_event_param_var : Proc(IMFMediaEventQueue*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    queue_event_param_unk : Proc(IMFMediaEventQueue*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Void*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaEventQueue*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("36f846fc-2256-48b6-b58e-e2b638316581")]
  record IMFMediaEventQueue, lpVtbl : IMFMediaEventQueueVtbl* do
    GUID = LibC::GUID.new(0x36f846fc_u32, 0x2256_u16, 0x48b6_u16, StaticArray[0xb5_u8, 0x8e_u8, 0xe2_u8, 0xb6_u8, 0x38_u8, 0x31_u8, 0x65_u8, 0x81_u8])
    def query_interface(this : IMFMediaEventQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEventQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEventQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaEventQueue*, dwFlags : UInt32, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaEventQueue*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaEventQueue*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaEventQueue*, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, pEvent)
    end
    def queue_event_param_var(this : IMFMediaEventQueue*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event_param_var.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def queue_event_param_unk(this : IMFMediaEventQueue*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pUnk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event_param_unk.call(this, met, guidExtendedType, hrStatus, pUnk)
    end
    def shutdown(this : IMFMediaEventQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFActivateVtbl,
    query_interface : Proc(IMFActivate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFActivate*, UInt32),
    release : Proc(IMFActivate*, UInt32),
    get_item : Proc(IMFActivate*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFActivate*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFActivate*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFActivate*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFActivate*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFActivate*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFActivate*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFActivate*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFActivate*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFActivate*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFActivate*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFActivate*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFActivate*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFActivate*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFActivate*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFActivate*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFActivate*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFActivate*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFActivate*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFActivate*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFActivate*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFActivate*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFActivate*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFActivate*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFActivate*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFActivate*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFActivate*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFActivate*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFActivate*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFActivate*, Void*, Win32cr::Foundation::HRESULT),
    activate_object : Proc(IMFActivate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    shutdown_object : Proc(IMFActivate*, Win32cr::Foundation::HRESULT),
    detach_object : Proc(IMFActivate*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7fee9e9a-4a89-47a6-899c-b6a53a70fb67")]
  record IMFActivate, lpVtbl : IMFActivateVtbl* do
    GUID = LibC::GUID.new(0x7fee9e9a_u32, 0x4a89_u16, 0x47a6_u16, StaticArray[0x89_u8, 0x9c_u8, 0xb6_u8, 0xa5_u8, 0x3a_u8, 0x70_u8, 0xfb_u8, 0x67_u8])
    def query_interface(this : IMFActivate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFActivate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFActivate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFActivate*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFActivate*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFActivate*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFActivate*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFActivate*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFActivate*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFActivate*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFActivate*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFActivate*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFActivate*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFActivate*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFActivate*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFActivate*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFActivate*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFActivate*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFActivate*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFActivate*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFActivate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFActivate*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFActivate*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFActivate*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFActivate*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFActivate*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFActivate*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFActivate*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFActivate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFActivate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFActivate*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFActivate*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFActivate*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def activate_object(this : IMFActivate*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_object.call(this, riid, ppv)
    end
    def shutdown_object(this : IMFActivate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown_object.call(this)
    end
    def detach_object(this : IMFActivate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_object.call(this)
    end

  end

  @[Extern]
  record IMFPluginControlVtbl,
    query_interface : Proc(IMFPluginControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPluginControl*, UInt32),
    release : Proc(IMFPluginControl*, UInt32),
    get_preferred_clsid : Proc(IMFPluginControl*, UInt32, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_preferred_clsid_by_index : Proc(IMFPluginControl*, UInt32, UInt32, Win32cr::Foundation::PWSTR*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_preferred_clsid : Proc(IMFPluginControl*, UInt32, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_disabled : Proc(IMFPluginControl*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_disabled_by_index : Proc(IMFPluginControl*, UInt32, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_disabled : Proc(IMFPluginControl*, UInt32, LibC::GUID*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5c6c44bf-1db6-435b-9249-e8cd10fdec96")]
  record IMFPluginControl, lpVtbl : IMFPluginControlVtbl* do
    GUID = LibC::GUID.new(0x5c6c44bf_u32, 0x1db6_u16, 0x435b_u16, StaticArray[0x92_u8, 0x49_u8, 0xe8_u8, 0xcd_u8, 0x10_u8, 0xfd_u8, 0xec_u8, 0x96_u8])
    def query_interface(this : IMFPluginControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPluginControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPluginControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_preferred_clsid(this : IMFPluginControl*, pluginType : UInt32, selector : Win32cr::Foundation::PWSTR, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preferred_clsid.call(this, pluginType, selector, clsid)
    end
    def get_preferred_clsid_by_index(this : IMFPluginControl*, pluginType : UInt32, index : UInt32, selector : Win32cr::Foundation::PWSTR*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preferred_clsid_by_index.call(this, pluginType, index, selector, clsid)
    end
    def set_preferred_clsid(this : IMFPluginControl*, pluginType : UInt32, selector : Win32cr::Foundation::PWSTR, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preferred_clsid.call(this, pluginType, selector, clsid)
    end
    def is_disabled(this : IMFPluginControl*, pluginType : UInt32, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_disabled.call(this, pluginType, clsid)
    end
    def get_disabled_by_index(this : IMFPluginControl*, pluginType : UInt32, index : UInt32, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disabled_by_index.call(this, pluginType, index, clsid)
    end
    def set_disabled(this : IMFPluginControl*, pluginType : UInt32, clsid : LibC::GUID*, disabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_disabled.call(this, pluginType, clsid, disabled)
    end

  end

  @[Extern]
  record IMFPluginControl2Vtbl,
    query_interface : Proc(IMFPluginControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPluginControl2*, UInt32),
    release : Proc(IMFPluginControl2*, UInt32),
    get_preferred_clsid : Proc(IMFPluginControl2*, UInt32, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_preferred_clsid_by_index : Proc(IMFPluginControl2*, UInt32, UInt32, Win32cr::Foundation::PWSTR*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_preferred_clsid : Proc(IMFPluginControl2*, UInt32, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    is_disabled : Proc(IMFPluginControl2*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_disabled_by_index : Proc(IMFPluginControl2*, UInt32, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_disabled : Proc(IMFPluginControl2*, UInt32, LibC::GUID*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_policy : Proc(IMFPluginControl2*, Win32cr::Media::MediaFoundation::MF_PLUGIN_CONTROL_POLICY, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c6982083-3ddc-45cb-af5e-0f7a8ce4de77")]
  record IMFPluginControl2, lpVtbl : IMFPluginControl2Vtbl* do
    GUID = LibC::GUID.new(0xc6982083_u32, 0x3ddc_u16, 0x45cb_u16, StaticArray[0xaf_u8, 0x5e_u8, 0xf_u8, 0x7a_u8, 0x8c_u8, 0xe4_u8, 0xde_u8, 0x77_u8])
    def query_interface(this : IMFPluginControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPluginControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPluginControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_preferred_clsid(this : IMFPluginControl2*, pluginType : UInt32, selector : Win32cr::Foundation::PWSTR, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preferred_clsid.call(this, pluginType, selector, clsid)
    end
    def get_preferred_clsid_by_index(this : IMFPluginControl2*, pluginType : UInt32, index : UInt32, selector : Win32cr::Foundation::PWSTR*, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_preferred_clsid_by_index.call(this, pluginType, index, selector, clsid)
    end
    def set_preferred_clsid(this : IMFPluginControl2*, pluginType : UInt32, selector : Win32cr::Foundation::PWSTR, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preferred_clsid.call(this, pluginType, selector, clsid)
    end
    def is_disabled(this : IMFPluginControl2*, pluginType : UInt32, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_disabled.call(this, pluginType, clsid)
    end
    def get_disabled_by_index(this : IMFPluginControl2*, pluginType : UInt32, index : UInt32, clsid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disabled_by_index.call(this, pluginType, index, clsid)
    end
    def set_disabled(this : IMFPluginControl2*, pluginType : UInt32, clsid : LibC::GUID*, disabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_disabled.call(this, pluginType, clsid, disabled)
    end
    def set_policy(this : IMFPluginControl2*, policy : Win32cr::Media::MediaFoundation::MF_PLUGIN_CONTROL_POLICY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_policy.call(this, policy)
    end

  end

  @[Extern]
  record IMFDXGIDeviceManagerVtbl,
    query_interface : Proc(IMFDXGIDeviceManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDXGIDeviceManager*, UInt32),
    release : Proc(IMFDXGIDeviceManager*, UInt32),
    close_device_handle : Proc(IMFDXGIDeviceManager*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_video_service : Proc(IMFDXGIDeviceManager*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    lock_device : Proc(IMFDXGIDeviceManager*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    open_device_handle : Proc(IMFDXGIDeviceManager*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    reset_device : Proc(IMFDXGIDeviceManager*, Void*, UInt32, Win32cr::Foundation::HRESULT),
    test_device : Proc(IMFDXGIDeviceManager*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    unlock_device : Proc(IMFDXGIDeviceManager*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("eb533d5d-2db6-40f8-97a9-494692014f07")]
  record IMFDXGIDeviceManager, lpVtbl : IMFDXGIDeviceManagerVtbl* do
    GUID = LibC::GUID.new(0xeb533d5d_u32, 0x2db6_u16, 0x40f8_u16, StaticArray[0x97_u8, 0xa9_u8, 0x49_u8, 0x46_u8, 0x92_u8, 0x1_u8, 0x4f_u8, 0x7_u8])
    def query_interface(this : IMFDXGIDeviceManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDXGIDeviceManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDXGIDeviceManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def close_device_handle(this : IMFDXGIDeviceManager*, hDevice : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_device_handle.call(this, hDevice)
    end
    def get_video_service(this : IMFDXGIDeviceManager*, hDevice : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppService : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_service.call(this, hDevice, riid, ppService)
    end
    def lock_device(this : IMFDXGIDeviceManager*, hDevice : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppUnkDevice : Void**, fBlock : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_device.call(this, hDevice, riid, ppUnkDevice, fBlock)
    end
    def open_device_handle(this : IMFDXGIDeviceManager*, phDevice : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_device_handle.call(this, phDevice)
    end
    def reset_device(this : IMFDXGIDeviceManager*, pUnkDevice : Void*, resetToken : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_device.call(this, pUnkDevice, resetToken)
    end
    def test_device(this : IMFDXGIDeviceManager*, hDevice : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.test_device.call(this, hDevice)
    end
    def unlock_device(this : IMFDXGIDeviceManager*, hDevice : Win32cr::Foundation::HANDLE, fSaveState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_device.call(this, hDevice, fSaveState)
    end

  end

  @[Extern]
  record IMFMuxStreamAttributesManagerVtbl,
    query_interface : Proc(IMFMuxStreamAttributesManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMuxStreamAttributesManager*, UInt32),
    release : Proc(IMFMuxStreamAttributesManager*, UInt32),
    get_stream_count : Proc(IMFMuxStreamAttributesManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IMFMuxStreamAttributesManager*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ce8bd576-e440-43b3-be34-1e53f565f7e8")]
  record IMFMuxStreamAttributesManager, lpVtbl : IMFMuxStreamAttributesManagerVtbl* do
    GUID = LibC::GUID.new(0xce8bd576_u32, 0xe440_u16, 0x43b3_u16, StaticArray[0xbe_u8, 0x34_u8, 0x1e_u8, 0x53_u8, 0xf5_u8, 0x65_u8, 0xf7_u8, 0xe8_u8])
    def query_interface(this : IMFMuxStreamAttributesManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMuxStreamAttributesManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMuxStreamAttributesManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_count(this : IMFMuxStreamAttributesManager*, pdwMuxStreamCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pdwMuxStreamCount)
    end
    def get_attributes(this : IMFMuxStreamAttributesManager*, dwMuxStreamIndex : UInt32, ppStreamAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, dwMuxStreamIndex, ppStreamAttributes)
    end

  end

  @[Extern]
  record IMFMuxStreamMediaTypeManagerVtbl,
    query_interface : Proc(IMFMuxStreamMediaTypeManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMuxStreamMediaTypeManager*, UInt32),
    release : Proc(IMFMuxStreamMediaTypeManager*, UInt32),
    get_stream_count : Proc(IMFMuxStreamMediaTypeManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_media_type : Proc(IMFMuxStreamMediaTypeManager*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_stream_configuration_count : Proc(IMFMuxStreamMediaTypeManager*, UInt32*, Win32cr::Foundation::HRESULT),
    add_stream_configuration : Proc(IMFMuxStreamMediaTypeManager*, UInt64, Win32cr::Foundation::HRESULT),
    remove_stream_configuration : Proc(IMFMuxStreamMediaTypeManager*, UInt64, Win32cr::Foundation::HRESULT),
    get_stream_configuration : Proc(IMFMuxStreamMediaTypeManager*, UInt32, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("505a2c72-42f7-4690-aeab-8f513d0ffdb8")]
  record IMFMuxStreamMediaTypeManager, lpVtbl : IMFMuxStreamMediaTypeManagerVtbl* do
    GUID = LibC::GUID.new(0x505a2c72_u32, 0x42f7_u16, 0x4690_u16, StaticArray[0xae_u8, 0xab_u8, 0x8f_u8, 0x51_u8, 0x3d_u8, 0xf_u8, 0xfd_u8, 0xb8_u8])
    def query_interface(this : IMFMuxStreamMediaTypeManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMuxStreamMediaTypeManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMuxStreamMediaTypeManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_count(this : IMFMuxStreamMediaTypeManager*, pdwMuxStreamCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pdwMuxStreamCount)
    end
    def get_media_type(this : IMFMuxStreamMediaTypeManager*, dwMuxStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type.call(this, dwMuxStreamIndex, ppMediaType)
    end
    def get_stream_configuration_count(this : IMFMuxStreamMediaTypeManager*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_configuration_count.call(this, pdwCount)
    end
    def add_stream_configuration(this : IMFMuxStreamMediaTypeManager*, ullStreamMask : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream_configuration.call(this, ullStreamMask)
    end
    def remove_stream_configuration(this : IMFMuxStreamMediaTypeManager*, ullStreamMask : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream_configuration.call(this, ullStreamMask)
    end
    def get_stream_configuration(this : IMFMuxStreamMediaTypeManager*, ulIndex : UInt32, pullStreamMask : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_configuration.call(this, ulIndex, pullStreamMask)
    end

  end

  @[Extern]
  record IMFMuxStreamSampleManagerVtbl,
    query_interface : Proc(IMFMuxStreamSampleManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMuxStreamSampleManager*, UInt32),
    release : Proc(IMFMuxStreamSampleManager*, UInt32),
    get_stream_count : Proc(IMFMuxStreamSampleManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_sample : Proc(IMFMuxStreamSampleManager*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_stream_configuration : Proc(IMFMuxStreamSampleManager*, UInt64)


  @[Extern]
  #@[Com("74abbc19-b1cc-4e41-bb8b-9d9b86a8f6ca")]
  record IMFMuxStreamSampleManager, lpVtbl : IMFMuxStreamSampleManagerVtbl* do
    GUID = LibC::GUID.new(0x74abbc19_u32, 0xb1cc_u16, 0x4e41_u16, StaticArray[0xbb_u8, 0x8b_u8, 0x9d_u8, 0x9b_u8, 0x86_u8, 0xa8_u8, 0xf6_u8, 0xca_u8])
    def query_interface(this : IMFMuxStreamSampleManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMuxStreamSampleManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMuxStreamSampleManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_count(this : IMFMuxStreamSampleManager*, pdwMuxStreamCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pdwMuxStreamCount)
    end
    def get_sample(this : IMFMuxStreamSampleManager*, dwMuxStreamIndex : UInt32, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample.call(this, dwMuxStreamIndex, ppSample)
    end
    def get_stream_configuration(this : IMFMuxStreamSampleManager*) : UInt64
      @lpVtbl.try &.value.get_stream_configuration.call(this)
    end

  end

  @[Extern]
  record IMFSecureBufferVtbl,
    query_interface : Proc(IMFSecureBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSecureBuffer*, UInt32),
    release : Proc(IMFSecureBuffer*, UInt32),
    get_identifier : Proc(IMFSecureBuffer*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c1209904-e584-4752-a2d6-7f21693f8b21")]
  record IMFSecureBuffer, lpVtbl : IMFSecureBufferVtbl* do
    GUID = LibC::GUID.new(0xc1209904_u32, 0xe584_u16, 0x4752_u16, StaticArray[0xa2_u8, 0xd6_u8, 0x7f_u8, 0x21_u8, 0x69_u8, 0x3f_u8, 0x8b_u8, 0x21_u8])
    def query_interface(this : IMFSecureBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSecureBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSecureBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_identifier(this : IMFSecureBuffer*, pGuidIdentifier : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identifier.call(this, pGuidIdentifier)
    end

  end

  @[Extern]
  record IMFTransformVtbl,
    query_interface : Proc(IMFTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTransform*, UInt32),
    release : Proc(IMFTransform*, UInt32),
    get_stream_limits : Proc(IMFTransform*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_count : Proc(IMFTransform*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_i_ds : Proc(IMFTransform*, UInt32, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_input_stream_info : Proc(IMFTransform*, UInt32, Win32cr::Media::MediaFoundation::MFT_INPUT_STREAM_INFO*, Win32cr::Foundation::HRESULT),
    get_output_stream_info : Proc(IMFTransform*, UInt32, Win32cr::Media::MediaFoundation::MFT_OUTPUT_STREAM_INFO*, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IMFTransform*, Void**, Win32cr::Foundation::HRESULT),
    get_input_stream_attributes : Proc(IMFTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_output_stream_attributes : Proc(IMFTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    delete_input_stream : Proc(IMFTransform*, UInt32, Win32cr::Foundation::HRESULT),
    add_input_streams : Proc(IMFTransform*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_input_available_type : Proc(IMFTransform*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_output_available_type : Proc(IMFTransform*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_input_type : Proc(IMFTransform*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_output_type : Proc(IMFTransform*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_input_current_type : Proc(IMFTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_output_current_type : Proc(IMFTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_input_status : Proc(IMFTransform*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_status : Proc(IMFTransform*, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_bounds : Proc(IMFTransform*, Int64, Int64, Win32cr::Foundation::HRESULT),
    process_event : Proc(IMFTransform*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    process_message : Proc(IMFTransform*, Win32cr::Media::MediaFoundation::MFT_MESSAGE_TYPE, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    process_input : Proc(IMFTransform*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    process_output : Proc(IMFTransform*, UInt32, UInt32, Win32cr::Media::MediaFoundation::MFT_OUTPUT_DATA_BUFFER*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bf94c121-5b05-4e6f-8000-ba598961414d")]
  record IMFTransform, lpVtbl : IMFTransformVtbl* do
    GUID = LibC::GUID.new(0xbf94c121_u32, 0x5b05_u16, 0x4e6f_u16, StaticArray[0x80_u8, 0x0_u8, 0xba_u8, 0x59_u8, 0x89_u8, 0x61_u8, 0x41_u8, 0x4d_u8])
    def query_interface(this : IMFTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_limits(this : IMFTransform*, pdwInputMinimum : UInt32*, pdwInputMaximum : UInt32*, pdwOutputMinimum : UInt32*, pdwOutputMaximum : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_limits.call(this, pdwInputMinimum, pdwInputMaximum, pdwOutputMinimum, pdwOutputMaximum)
    end
    def get_stream_count(this : IMFTransform*, pcInputStreams : UInt32*, pcOutputStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pcInputStreams, pcOutputStreams)
    end
    def get_stream_i_ds(this : IMFTransform*, dwInputIDArraySize : UInt32, pdwInputIDs : UInt32*, dwOutputIDArraySize : UInt32, pdwOutputIDs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_i_ds.call(this, dwInputIDArraySize, pdwInputIDs, dwOutputIDArraySize, pdwOutputIDs)
    end
    def get_input_stream_info(this : IMFTransform*, dwInputStreamID : UInt32, pStreamInfo : Win32cr::Media::MediaFoundation::MFT_INPUT_STREAM_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_stream_info.call(this, dwInputStreamID, pStreamInfo)
    end
    def get_output_stream_info(this : IMFTransform*, dwOutputStreamID : UInt32, pStreamInfo : Win32cr::Media::MediaFoundation::MFT_OUTPUT_STREAM_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_stream_info.call(this, dwOutputStreamID, pStreamInfo)
    end
    def get_attributes(this : IMFTransform*, pAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, pAttributes)
    end
    def get_input_stream_attributes(this : IMFTransform*, dwInputStreamID : UInt32, pAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_stream_attributes.call(this, dwInputStreamID, pAttributes)
    end
    def get_output_stream_attributes(this : IMFTransform*, dwOutputStreamID : UInt32, pAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_stream_attributes.call(this, dwOutputStreamID, pAttributes)
    end
    def delete_input_stream(this : IMFTransform*, dwStreamID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_input_stream.call(this, dwStreamID)
    end
    def add_input_streams(this : IMFTransform*, cStreams : UInt32, adwStreamIDs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_input_streams.call(this, cStreams, adwStreamIDs)
    end
    def get_input_available_type(this : IMFTransform*, dwInputStreamID : UInt32, dwTypeIndex : UInt32, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_available_type.call(this, dwInputStreamID, dwTypeIndex, ppType)
    end
    def get_output_available_type(this : IMFTransform*, dwOutputStreamID : UInt32, dwTypeIndex : UInt32, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_available_type.call(this, dwOutputStreamID, dwTypeIndex, ppType)
    end
    def set_input_type(this : IMFTransform*, dwInputStreamID : UInt32, pType : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_type.call(this, dwInputStreamID, pType, dwFlags)
    end
    def set_output_type(this : IMFTransform*, dwOutputStreamID : UInt32, pType : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_type.call(this, dwOutputStreamID, pType, dwFlags)
    end
    def get_input_current_type(this : IMFTransform*, dwInputStreamID : UInt32, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_current_type.call(this, dwInputStreamID, ppType)
    end
    def get_output_current_type(this : IMFTransform*, dwOutputStreamID : UInt32, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_current_type.call(this, dwOutputStreamID, ppType)
    end
    def get_input_status(this : IMFTransform*, dwInputStreamID : UInt32, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_status.call(this, dwInputStreamID, pdwFlags)
    end
    def get_output_status(this : IMFTransform*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_status.call(this, pdwFlags)
    end
    def set_output_bounds(this : IMFTransform*, hnsLowerBound : Int64, hnsUpperBound : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_bounds.call(this, hnsLowerBound, hnsUpperBound)
    end
    def process_event(this : IMFTransform*, dwInputStreamID : UInt32, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_event.call(this, dwInputStreamID, pEvent)
    end
    def process_message(this : IMFTransform*, eMessage : Win32cr::Media::MediaFoundation::MFT_MESSAGE_TYPE, ulParam : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_message.call(this, eMessage, ulParam)
    end
    def process_input(this : IMFTransform*, dwInputStreamID : UInt32, pSample : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_input.call(this, dwInputStreamID, pSample, dwFlags)
    end
    def process_output(this : IMFTransform*, dwFlags : UInt32, cOutputBufferCount : UInt32, pOutputSamples : Win32cr::Media::MediaFoundation::MFT_OUTPUT_DATA_BUFFER*, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_output.call(this, dwFlags, cOutputBufferCount, pOutputSamples, pdwStatus)
    end

  end

  @[Extern]
  record IMFDeviceTransformVtbl,
    query_interface : Proc(IMFDeviceTransform*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDeviceTransform*, UInt32),
    release : Proc(IMFDeviceTransform*, UInt32),
    initialize_transform : Proc(IMFDeviceTransform*, Void*, Win32cr::Foundation::HRESULT),
    get_input_available_type : Proc(IMFDeviceTransform*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_input_current_type : Proc(IMFDeviceTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_input_stream_attributes : Proc(IMFDeviceTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_output_available_type : Proc(IMFDeviceTransform*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_output_current_type : Proc(IMFDeviceTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_output_stream_attributes : Proc(IMFDeviceTransform*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_stream_count : Proc(IMFDeviceTransform*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_i_ds : Proc(IMFDeviceTransform*, UInt32, UInt32*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    process_event : Proc(IMFDeviceTransform*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    process_input : Proc(IMFDeviceTransform*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    process_message : Proc(IMFDeviceTransform*, Win32cr::Media::MediaFoundation::MFT_MESSAGE_TYPE, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    process_output : Proc(IMFDeviceTransform*, UInt32, UInt32, Win32cr::Media::MediaFoundation::MFT_OUTPUT_DATA_BUFFER*, UInt32*, Win32cr::Foundation::HRESULT),
    set_input_stream_state : Proc(IMFDeviceTransform*, UInt32, Void*, Win32cr::Media::MediaFoundation::DeviceStreamState, UInt32, Win32cr::Foundation::HRESULT),
    get_input_stream_state : Proc(IMFDeviceTransform*, UInt32, Win32cr::Media::MediaFoundation::DeviceStreamState*, Win32cr::Foundation::HRESULT),
    set_output_stream_state : Proc(IMFDeviceTransform*, UInt32, Void*, Win32cr::Media::MediaFoundation::DeviceStreamState, UInt32, Win32cr::Foundation::HRESULT),
    get_output_stream_state : Proc(IMFDeviceTransform*, UInt32, Win32cr::Media::MediaFoundation::DeviceStreamState*, Win32cr::Foundation::HRESULT),
    get_input_stream_preferred_state : Proc(IMFDeviceTransform*, UInt32, Win32cr::Media::MediaFoundation::DeviceStreamState*, Void**, Win32cr::Foundation::HRESULT),
    flush_input_stream : Proc(IMFDeviceTransform*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    flush_output_stream : Proc(IMFDeviceTransform*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d818fbd8-fc46-42f2-87ac-1ea2d1f9bf32")]
  record IMFDeviceTransform, lpVtbl : IMFDeviceTransformVtbl* do
    GUID = LibC::GUID.new(0xd818fbd8_u32, 0xfc46_u16, 0x42f2_u16, StaticArray[0x87_u8, 0xac_u8, 0x1e_u8, 0xa2_u8, 0xd1_u8, 0xf9_u8, 0xbf_u8, 0x32_u8])
    def query_interface(this : IMFDeviceTransform*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDeviceTransform*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDeviceTransform*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize_transform(this : IMFDeviceTransform*, pAttributes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_transform.call(this, pAttributes)
    end
    def get_input_available_type(this : IMFDeviceTransform*, dwInputStreamID : UInt32, dwTypeIndex : UInt32, pMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_available_type.call(this, dwInputStreamID, dwTypeIndex, pMediaType)
    end
    def get_input_current_type(this : IMFDeviceTransform*, dwInputStreamID : UInt32, pMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_current_type.call(this, dwInputStreamID, pMediaType)
    end
    def get_input_stream_attributes(this : IMFDeviceTransform*, dwInputStreamID : UInt32, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_stream_attributes.call(this, dwInputStreamID, ppAttributes)
    end
    def get_output_available_type(this : IMFDeviceTransform*, dwOutputStreamID : UInt32, dwTypeIndex : UInt32, pMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_available_type.call(this, dwOutputStreamID, dwTypeIndex, pMediaType)
    end
    def get_output_current_type(this : IMFDeviceTransform*, dwOutputStreamID : UInt32, pMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_current_type.call(this, dwOutputStreamID, pMediaType)
    end
    def get_output_stream_attributes(this : IMFDeviceTransform*, dwOutputStreamID : UInt32, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_stream_attributes.call(this, dwOutputStreamID, ppAttributes)
    end
    def get_stream_count(this : IMFDeviceTransform*, pcInputStreams : UInt32*, pcOutputStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pcInputStreams, pcOutputStreams)
    end
    def get_stream_i_ds(this : IMFDeviceTransform*, dwInputIDArraySize : UInt32, pdwInputStreamIds : UInt32*, dwOutputIDArraySize : UInt32, pdwOutputStreamIds : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_i_ds.call(this, dwInputIDArraySize, pdwInputStreamIds, dwOutputIDArraySize, pdwOutputStreamIds)
    end
    def process_event(this : IMFDeviceTransform*, dwInputStreamID : UInt32, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_event.call(this, dwInputStreamID, pEvent)
    end
    def process_input(this : IMFDeviceTransform*, dwInputStreamID : UInt32, pSample : Void*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_input.call(this, dwInputStreamID, pSample, dwFlags)
    end
    def process_message(this : IMFDeviceTransform*, eMessage : Win32cr::Media::MediaFoundation::MFT_MESSAGE_TYPE, ulParam : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_message.call(this, eMessage, ulParam)
    end
    def process_output(this : IMFDeviceTransform*, dwFlags : UInt32, cOutputBufferCount : UInt32, pOutputSample : Win32cr::Media::MediaFoundation::MFT_OUTPUT_DATA_BUFFER*, pdwStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_output.call(this, dwFlags, cOutputBufferCount, pOutputSample, pdwStatus)
    end
    def set_input_stream_state(this : IMFDeviceTransform*, dwStreamID : UInt32, pMediaType : Void*, value : Win32cr::Media::MediaFoundation::DeviceStreamState, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_stream_state.call(this, dwStreamID, pMediaType, value, dwFlags)
    end
    def get_input_stream_state(this : IMFDeviceTransform*, dwStreamID : UInt32, value : Win32cr::Media::MediaFoundation::DeviceStreamState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_stream_state.call(this, dwStreamID, value)
    end
    def set_output_stream_state(this : IMFDeviceTransform*, dwStreamID : UInt32, pMediaType : Void*, value : Win32cr::Media::MediaFoundation::DeviceStreamState, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_stream_state.call(this, dwStreamID, pMediaType, value, dwFlags)
    end
    def get_output_stream_state(this : IMFDeviceTransform*, dwStreamID : UInt32, value : Win32cr::Media::MediaFoundation::DeviceStreamState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_stream_state.call(this, dwStreamID, value)
    end
    def get_input_stream_preferred_state(this : IMFDeviceTransform*, dwStreamID : UInt32, value : Win32cr::Media::MediaFoundation::DeviceStreamState*, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_stream_preferred_state.call(this, dwStreamID, value, ppMediaType)
    end
    def flush_input_stream(this : IMFDeviceTransform*, dwStreamIndex : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_input_stream.call(this, dwStreamIndex, dwFlags)
    end
    def flush_output_stream(this : IMFDeviceTransform*, dwStreamIndex : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_output_stream.call(this, dwStreamIndex, dwFlags)
    end

  end

  @[Extern]
  record IMFDeviceTransformCallbackVtbl,
    query_interface : Proc(IMFDeviceTransformCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDeviceTransformCallback*, UInt32),
    release : Proc(IMFDeviceTransformCallback*, UInt32),
    on_buffer_sent : Proc(IMFDeviceTransformCallback*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d5cb646-29ec-41fb-8179-8c4c6d750811")]
  record IMFDeviceTransformCallback, lpVtbl : IMFDeviceTransformCallbackVtbl* do
    GUID = LibC::GUID.new(0x6d5cb646_u32, 0x29ec_u16, 0x41fb_u16, StaticArray[0x81_u8, 0x79_u8, 0x8c_u8, 0x4c_u8, 0x6d_u8, 0x75_u8, 0x8_u8, 0x11_u8])
    def query_interface(this : IMFDeviceTransformCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDeviceTransformCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDeviceTransformCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_buffer_sent(this : IMFDeviceTransformCallback*, pCallbackAttributes : Void*, pinId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_buffer_sent.call(this, pCallbackAttributes, pinId)
    end

  end

  @[Extern]
  record IMFMediaSessionVtbl,
    query_interface : Proc(IMFMediaSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSession*, UInt32),
    release : Proc(IMFMediaSession*, UInt32),
    get_event : Proc(IMFMediaSession*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaSession*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaSession*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaSession*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    set_topology : Proc(IMFMediaSession*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    clear_topologies : Proc(IMFMediaSession*, Win32cr::Foundation::HRESULT),
    start : Proc(IMFMediaSession*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFMediaSession*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFMediaSession*, Win32cr::Foundation::HRESULT),
    close : Proc(IMFMediaSession*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaSession*, Win32cr::Foundation::HRESULT),
    get_clock : Proc(IMFMediaSession*, Void**, Win32cr::Foundation::HRESULT),
    get_session_capabilities : Proc(IMFMediaSession*, UInt32*, Win32cr::Foundation::HRESULT),
    get_full_topology : Proc(IMFMediaSession*, UInt32, UInt64, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("90377834-21d0-4dee-8214-ba2e3e6c1127")]
  record IMFMediaSession, lpVtbl : IMFMediaSessionVtbl* do
    GUID = LibC::GUID.new(0x90377834_u32, 0x21d0_u16, 0x4dee_u16, StaticArray[0x82_u8, 0x14_u8, 0xba_u8, 0x2e_u8, 0x3e_u8, 0x6c_u8, 0x11_u8, 0x27_u8])
    def query_interface(this : IMFMediaSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaSession*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaSession*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaSession*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaSession*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def set_topology(this : IMFMediaSession*, dwSetTopologyFlags : UInt32, pTopology : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_topology.call(this, dwSetTopologyFlags, pTopology)
    end
    def clear_topologies(this : IMFMediaSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_topologies.call(this)
    end
    def start(this : IMFMediaSession*, pguidTimeFormat : LibC::GUID*, pvarStartPosition : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, pguidTimeFormat, pvarStartPosition)
    end
    def pause(this : IMFMediaSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMFMediaSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def close(this : IMFMediaSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def shutdown(this : IMFMediaSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_clock(this : IMFMediaSession*, ppClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clock.call(this, ppClock)
    end
    def get_session_capabilities(this : IMFMediaSession*, pdwCaps : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_session_capabilities.call(this, pdwCaps)
    end
    def get_full_topology(this : IMFMediaSession*, dwGetFullTopologyFlags : UInt32, topo_id : UInt64, ppFullTopology : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_full_topology.call(this, dwGetFullTopologyFlags, topo_id, ppFullTopology)
    end

  end

  @[Extern]
  record IMFSourceResolverVtbl,
    query_interface : Proc(IMFSourceResolver*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceResolver*, UInt32),
    release : Proc(IMFSourceResolver*, UInt32),
    create_object_from_url : Proc(IMFSourceResolver*, Win32cr::Foundation::PWSTR, UInt32, Void*, Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, Void**, Win32cr::Foundation::HRESULT),
    create_object_from_byte_stream : Proc(IMFSourceResolver*, Void*, Win32cr::Foundation::PWSTR, UInt32, Void*, Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, Void**, Win32cr::Foundation::HRESULT),
    begin_create_object_from_url : Proc(IMFSourceResolver*, Win32cr::Foundation::PWSTR, UInt32, Void*, Void**, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_create_object_from_url : Proc(IMFSourceResolver*, Void*, Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, Void**, Win32cr::Foundation::HRESULT),
    begin_create_object_from_byte_stream : Proc(IMFSourceResolver*, Void*, Win32cr::Foundation::PWSTR, UInt32, Void*, Void**, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_create_object_from_byte_stream : Proc(IMFSourceResolver*, Void*, Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, Void**, Win32cr::Foundation::HRESULT),
    cancel_object_creation : Proc(IMFSourceResolver*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fbe5a32d-a497-4b61-bb85-97b1a848a6e3")]
  record IMFSourceResolver, lpVtbl : IMFSourceResolverVtbl* do
    GUID = LibC::GUID.new(0xfbe5a32d_u32, 0xa497_u16, 0x4b61_u16, StaticArray[0xbb_u8, 0x85_u8, 0x97_u8, 0xb1_u8, 0xa8_u8, 0x48_u8, 0xa6_u8, 0xe3_u8])
    def query_interface(this : IMFSourceResolver*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceResolver*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceResolver*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_object_from_url(this : IMFSourceResolver*, pwszURL : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pProps : Void*, pObjectType : Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_object_from_url.call(this, pwszURL, dwFlags, pProps, pObjectType, ppObject)
    end
    def create_object_from_byte_stream(this : IMFSourceResolver*, pByteStream : Void*, pwszURL : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pProps : Void*, pObjectType : Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_object_from_byte_stream.call(this, pByteStream, pwszURL, dwFlags, pProps, pObjectType, ppObject)
    end
    def begin_create_object_from_url(this : IMFSourceResolver*, pwszURL : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pProps : Void*, ppIUnknownCancelCookie : Void**, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_create_object_from_url.call(this, pwszURL, dwFlags, pProps, ppIUnknownCancelCookie, pCallback, punkState)
    end
    def end_create_object_from_url(this : IMFSourceResolver*, pResult : Void*, pObjectType : Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_create_object_from_url.call(this, pResult, pObjectType, ppObject)
    end
    def begin_create_object_from_byte_stream(this : IMFSourceResolver*, pByteStream : Void*, pwszURL : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pProps : Void*, ppIUnknownCancelCookie : Void**, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_create_object_from_byte_stream.call(this, pByteStream, pwszURL, dwFlags, pProps, ppIUnknownCancelCookie, pCallback, punkState)
    end
    def end_create_object_from_byte_stream(this : IMFSourceResolver*, pResult : Void*, pObjectType : Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_create_object_from_byte_stream.call(this, pResult, pObjectType, ppObject)
    end
    def cancel_object_creation(this : IMFSourceResolver*, pIUnknownCancelCookie : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_object_creation.call(this, pIUnknownCancelCookie)
    end

  end

  @[Extern]
  record IMFMediaSourceVtbl,
    query_interface : Proc(IMFMediaSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSource*, UInt32),
    release : Proc(IMFMediaSource*, UInt32),
    get_event : Proc(IMFMediaSource*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaSource*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaSource*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaSource*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_characteristics : Proc(IMFMediaSource*, UInt32*, Win32cr::Foundation::HRESULT),
    create_presentation_descriptor : Proc(IMFMediaSource*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(IMFMediaSource*, Void*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFMediaSource*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFMediaSource*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaSource*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("279a808d-aec7-40c8-9c6b-a6b492c78a66")]
  record IMFMediaSource, lpVtbl : IMFMediaSourceVtbl* do
    GUID = LibC::GUID.new(0x279a808d_u32, 0xaec7_u16, 0x40c8_u16, StaticArray[0x9c_u8, 0x6b_u8, 0xa6_u8, 0xb4_u8, 0x92_u8, 0xc7_u8, 0x8a_u8, 0x66_u8])
    def query_interface(this : IMFMediaSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaSource*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaSource*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaSource*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaSource*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def get_characteristics(this : IMFMediaSource*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_characteristics.call(this, pdwCharacteristics)
    end
    def create_presentation_descriptor(this : IMFMediaSource*, ppPresentationDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_presentation_descriptor.call(this, ppPresentationDescriptor)
    end
    def start(this : IMFMediaSource*, pPresentationDescriptor : Void*, pguidTimeFormat : LibC::GUID*, pvarStartPosition : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, pPresentationDescriptor, pguidTimeFormat, pvarStartPosition)
    end
    def stop(this : IMFMediaSource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IMFMediaSource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def shutdown(this : IMFMediaSource*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFMediaSourceExVtbl,
    query_interface : Proc(IMFMediaSourceEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSourceEx*, UInt32),
    release : Proc(IMFMediaSourceEx*, UInt32),
    get_event : Proc(IMFMediaSourceEx*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaSourceEx*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaSourceEx*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaSourceEx*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_characteristics : Proc(IMFMediaSourceEx*, UInt32*, Win32cr::Foundation::HRESULT),
    create_presentation_descriptor : Proc(IMFMediaSourceEx*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(IMFMediaSourceEx*, Void*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFMediaSourceEx*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFMediaSourceEx*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaSourceEx*, Win32cr::Foundation::HRESULT),
    get_source_attributes : Proc(IMFMediaSourceEx*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_attributes : Proc(IMFMediaSourceEx*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_d3_d_manager : Proc(IMFMediaSourceEx*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3c9b2eb9-86d5-4514-a394-f56664f9f0d8")]
  record IMFMediaSourceEx, lpVtbl : IMFMediaSourceExVtbl* do
    GUID = LibC::GUID.new(0x3c9b2eb9_u32, 0x86d5_u16, 0x4514_u16, StaticArray[0xa3_u8, 0x94_u8, 0xf5_u8, 0x66_u8, 0x64_u8, 0xf9_u8, 0xf0_u8, 0xd8_u8])
    def query_interface(this : IMFMediaSourceEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSourceEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSourceEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaSourceEx*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaSourceEx*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaSourceEx*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaSourceEx*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def get_characteristics(this : IMFMediaSourceEx*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_characteristics.call(this, pdwCharacteristics)
    end
    def create_presentation_descriptor(this : IMFMediaSourceEx*, ppPresentationDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_presentation_descriptor.call(this, ppPresentationDescriptor)
    end
    def start(this : IMFMediaSourceEx*, pPresentationDescriptor : Void*, pguidTimeFormat : LibC::GUID*, pvarStartPosition : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, pPresentationDescriptor, pguidTimeFormat, pvarStartPosition)
    end
    def stop(this : IMFMediaSourceEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IMFMediaSourceEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def shutdown(this : IMFMediaSourceEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_source_attributes(this : IMFMediaSourceEx*, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_attributes.call(this, ppAttributes)
    end
    def get_stream_attributes(this : IMFMediaSourceEx*, dwStreamIdentifier : UInt32, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_attributes.call(this, dwStreamIdentifier, ppAttributes)
    end
    def set_d3_d_manager(this : IMFMediaSourceEx*, pManager : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_d3_d_manager.call(this, pManager)
    end

  end

  @[Extern]
  record IMFClockConsumerVtbl,
    query_interface : Proc(IMFClockConsumer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFClockConsumer*, UInt32),
    release : Proc(IMFClockConsumer*, UInt32),
    set_presentation_clock : Proc(IMFClockConsumer*, Void*, Win32cr::Foundation::HRESULT),
    get_presentation_clock : Proc(IMFClockConsumer*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6ef2a662-47c0-4666-b13d-cbb717f2fa2c")]
  record IMFClockConsumer, lpVtbl : IMFClockConsumerVtbl* do
    GUID = LibC::GUID.new(0x6ef2a662_u32, 0x47c0_u16, 0x4666_u16, StaticArray[0xb1_u8, 0x3d_u8, 0xcb_u8, 0xb7_u8, 0x17_u8, 0xf2_u8, 0xfa_u8, 0x2c_u8])
    def query_interface(this : IMFClockConsumer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFClockConsumer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFClockConsumer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_presentation_clock(this : IMFClockConsumer*, pPresentationClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_presentation_clock.call(this, pPresentationClock)
    end
    def get_presentation_clock(this : IMFClockConsumer*, ppPresentationClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_clock.call(this, ppPresentationClock)
    end

  end

  @[Extern]
  record IMFMediaStreamVtbl,
    query_interface : Proc(IMFMediaStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaStream*, UInt32),
    release : Proc(IMFMediaStream*, UInt32),
    get_event : Proc(IMFMediaStream*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaStream*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaStream*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaStream*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_media_source : Proc(IMFMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_descriptor : Proc(IMFMediaStream*, Void**, Win32cr::Foundation::HRESULT),
    request_sample : Proc(IMFMediaStream*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d182108f-4ec6-443f-aa42-a71106ec825f")]
  record IMFMediaStream, lpVtbl : IMFMediaStreamVtbl* do
    GUID = LibC::GUID.new(0xd182108f_u32, 0x4ec6_u16, 0x443f_u16, StaticArray[0xaa_u8, 0x42_u8, 0xa7_u8, 0x11_u8, 0x6_u8, 0xec_u8, 0x82_u8, 0x5f_u8])
    def query_interface(this : IMFMediaStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaStream*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaStream*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaStream*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaStream*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def get_media_source(this : IMFMediaStream*, ppMediaSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_source.call(this, ppMediaSource)
    end
    def get_stream_descriptor(this : IMFMediaStream*, ppStreamDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_descriptor.call(this, ppStreamDescriptor)
    end
    def request_sample(this : IMFMediaStream*, pToken : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_sample.call(this, pToken)
    end

  end

  @[Extern]
  record IMFMediaSinkVtbl,
    query_interface : Proc(IMFMediaSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSink*, UInt32),
    release : Proc(IMFMediaSink*, UInt32),
    get_characteristics : Proc(IMFMediaSink*, UInt32*, Win32cr::Foundation::HRESULT),
    add_stream_sink : Proc(IMFMediaSink*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    remove_stream_sink : Proc(IMFMediaSink*, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_sink_count : Proc(IMFMediaSink*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_sink_by_index : Proc(IMFMediaSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_stream_sink_by_id : Proc(IMFMediaSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_presentation_clock : Proc(IMFMediaSink*, Void*, Win32cr::Foundation::HRESULT),
    get_presentation_clock : Proc(IMFMediaSink*, Void**, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaSink*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6ef2a660-47c0-4666-b13d-cbb717f2fa2c")]
  record IMFMediaSink, lpVtbl : IMFMediaSinkVtbl* do
    GUID = LibC::GUID.new(0x6ef2a660_u32, 0x47c0_u16, 0x4666_u16, StaticArray[0xb1_u8, 0x3d_u8, 0xcb_u8, 0xb7_u8, 0x17_u8, 0xf2_u8, 0xfa_u8, 0x2c_u8])
    def query_interface(this : IMFMediaSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_characteristics(this : IMFMediaSink*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_characteristics.call(this, pdwCharacteristics)
    end
    def add_stream_sink(this : IMFMediaSink*, dwStreamSinkIdentifier : UInt32, pMediaType : Void*, ppStreamSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream_sink.call(this, dwStreamSinkIdentifier, pMediaType, ppStreamSink)
    end
    def remove_stream_sink(this : IMFMediaSink*, dwStreamSinkIdentifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream_sink.call(this, dwStreamSinkIdentifier)
    end
    def get_stream_sink_count(this : IMFMediaSink*, pcStreamSinkCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_sink_count.call(this, pcStreamSinkCount)
    end
    def get_stream_sink_by_index(this : IMFMediaSink*, dwIndex : UInt32, ppStreamSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_sink_by_index.call(this, dwIndex, ppStreamSink)
    end
    def get_stream_sink_by_id(this : IMFMediaSink*, dwStreamSinkIdentifier : UInt32, ppStreamSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_sink_by_id.call(this, dwStreamSinkIdentifier, ppStreamSink)
    end
    def set_presentation_clock(this : IMFMediaSink*, pPresentationClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_presentation_clock.call(this, pPresentationClock)
    end
    def get_presentation_clock(this : IMFMediaSink*, ppPresentationClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_clock.call(this, ppPresentationClock)
    end
    def shutdown(this : IMFMediaSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFStreamSinkVtbl,
    query_interface : Proc(IMFStreamSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFStreamSink*, UInt32),
    release : Proc(IMFStreamSink*, UInt32),
    get_event : Proc(IMFStreamSink*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFStreamSink*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFStreamSink*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFStreamSink*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_media_sink : Proc(IMFStreamSink*, Void**, Win32cr::Foundation::HRESULT),
    get_identifier : Proc(IMFStreamSink*, UInt32*, Win32cr::Foundation::HRESULT),
    get_media_type_handler : Proc(IMFStreamSink*, Void**, Win32cr::Foundation::HRESULT),
    process_sample : Proc(IMFStreamSink*, Void*, Win32cr::Foundation::HRESULT),
    place_marker : Proc(IMFStreamSink*, Win32cr::Media::MediaFoundation::MFSTREAMSINK_MARKER_TYPE, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFStreamSink*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0a97b3cf-8e7c-4a3d-8f8c-0c843dc247fb")]
  record IMFStreamSink, lpVtbl : IMFStreamSinkVtbl* do
    GUID = LibC::GUID.new(0xa97b3cf_u32, 0x8e7c_u16, 0x4a3d_u16, StaticArray[0x8f_u8, 0x8c_u8, 0xc_u8, 0x84_u8, 0x3d_u8, 0xc2_u8, 0x47_u8, 0xfb_u8])
    def query_interface(this : IMFStreamSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFStreamSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFStreamSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFStreamSink*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFStreamSink*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFStreamSink*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFStreamSink*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def get_media_sink(this : IMFStreamSink*, ppMediaSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_sink.call(this, ppMediaSink)
    end
    def get_identifier(this : IMFStreamSink*, pdwIdentifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identifier.call(this, pdwIdentifier)
    end
    def get_media_type_handler(this : IMFStreamSink*, ppHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type_handler.call(this, ppHandler)
    end
    def process_sample(this : IMFStreamSink*, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_sample.call(this, pSample)
    end
    def place_marker(this : IMFStreamSink*, eMarkerType : Win32cr::Media::MediaFoundation::MFSTREAMSINK_MARKER_TYPE, pvarMarkerValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pvarContextValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.place_marker.call(this, eMarkerType, pvarMarkerValue, pvarContextValue)
    end
    def flush(this : IMFStreamSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this)
    end

  end

  @[Extern]
  record IMFVideoSampleAllocatorVtbl,
    query_interface : Proc(IMFVideoSampleAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoSampleAllocator*, UInt32),
    release : Proc(IMFVideoSampleAllocator*, UInt32),
    set_direct_x_manager : Proc(IMFVideoSampleAllocator*, Void*, Win32cr::Foundation::HRESULT),
    uninitialize_sample_allocator : Proc(IMFVideoSampleAllocator*, Win32cr::Foundation::HRESULT),
    initialize_sample_allocator : Proc(IMFVideoSampleAllocator*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IMFVideoSampleAllocator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("86cbc910-e533-4751-8e3b-f19b5b806a03")]
  record IMFVideoSampleAllocator, lpVtbl : IMFVideoSampleAllocatorVtbl* do
    GUID = LibC::GUID.new(0x86cbc910_u32, 0xe533_u16, 0x4751_u16, StaticArray[0x8e_u8, 0x3b_u8, 0xf1_u8, 0x9b_u8, 0x5b_u8, 0x80_u8, 0x6a_u8, 0x3_u8])
    def query_interface(this : IMFVideoSampleAllocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoSampleAllocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoSampleAllocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_direct_x_manager(this : IMFVideoSampleAllocator*, pManager : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_x_manager.call(this, pManager)
    end
    def uninitialize_sample_allocator(this : IMFVideoSampleAllocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uninitialize_sample_allocator.call(this)
    end
    def initialize_sample_allocator(this : IMFVideoSampleAllocator*, cRequestedFrames : UInt32, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_sample_allocator.call(this, cRequestedFrames, pMediaType)
    end
    def allocate_sample(this : IMFVideoSampleAllocator*, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, ppSample)
    end

  end

  @[Extern]
  record IMFVideoSampleAllocatorNotifyVtbl,
    query_interface : Proc(IMFVideoSampleAllocatorNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoSampleAllocatorNotify*, UInt32),
    release : Proc(IMFVideoSampleAllocatorNotify*, UInt32),
    notify_release : Proc(IMFVideoSampleAllocatorNotify*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a792cdbe-c374-4e89-8335-278e7b9956a4")]
  record IMFVideoSampleAllocatorNotify, lpVtbl : IMFVideoSampleAllocatorNotifyVtbl* do
    GUID = LibC::GUID.new(0xa792cdbe_u32, 0xc374_u16, 0x4e89_u16, StaticArray[0x83_u8, 0x35_u8, 0x27_u8, 0x8e_u8, 0x7b_u8, 0x99_u8, 0x56_u8, 0xa4_u8])
    def query_interface(this : IMFVideoSampleAllocatorNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoSampleAllocatorNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoSampleAllocatorNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_release(this : IMFVideoSampleAllocatorNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_release.call(this)
    end

  end

  @[Extern]
  record IMFVideoSampleAllocatorNotifyExVtbl,
    query_interface : Proc(IMFVideoSampleAllocatorNotifyEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoSampleAllocatorNotifyEx*, UInt32),
    release : Proc(IMFVideoSampleAllocatorNotifyEx*, UInt32),
    notify_release : Proc(IMFVideoSampleAllocatorNotifyEx*, Win32cr::Foundation::HRESULT),
    notify_prune : Proc(IMFVideoSampleAllocatorNotifyEx*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3978aa1a-6d5b-4b7f-a340-90899189ae34")]
  record IMFVideoSampleAllocatorNotifyEx, lpVtbl : IMFVideoSampleAllocatorNotifyExVtbl* do
    GUID = LibC::GUID.new(0x3978aa1a_u32, 0x6d5b_u16, 0x4b7f_u16, StaticArray[0xa3_u8, 0x40_u8, 0x90_u8, 0x89_u8, 0x91_u8, 0x89_u8, 0xae_u8, 0x34_u8])
    def query_interface(this : IMFVideoSampleAllocatorNotifyEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoSampleAllocatorNotifyEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoSampleAllocatorNotifyEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_release(this : IMFVideoSampleAllocatorNotifyEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_release.call(this)
    end
    def notify_prune(this : IMFVideoSampleAllocatorNotifyEx*, __midl__imf_video_sample_allocator_notify_ex0000 : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_prune.call(this, __midl__imf_video_sample_allocator_notify_ex0000)
    end

  end

  @[Extern]
  record IMFVideoSampleAllocatorCallbackVtbl,
    query_interface : Proc(IMFVideoSampleAllocatorCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoSampleAllocatorCallback*, UInt32),
    release : Proc(IMFVideoSampleAllocatorCallback*, UInt32),
    set_callback : Proc(IMFVideoSampleAllocatorCallback*, Void*, Win32cr::Foundation::HRESULT),
    get_free_sample_count : Proc(IMFVideoSampleAllocatorCallback*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("992388b4-3372-4f67-8b6f-c84c071f4751")]
  record IMFVideoSampleAllocatorCallback, lpVtbl : IMFVideoSampleAllocatorCallbackVtbl* do
    GUID = LibC::GUID.new(0x992388b4_u32, 0x3372_u16, 0x4f67_u16, StaticArray[0x8b_u8, 0x6f_u8, 0xc8_u8, 0x4c_u8, 0x7_u8, 0x1f_u8, 0x47_u8, 0x51_u8])
    def query_interface(this : IMFVideoSampleAllocatorCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoSampleAllocatorCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoSampleAllocatorCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_callback(this : IMFVideoSampleAllocatorCallback*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_callback.call(this, pNotify)
    end
    def get_free_sample_count(this : IMFVideoSampleAllocatorCallback*, plSamples : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_free_sample_count.call(this, plSamples)
    end

  end

  @[Extern]
  record IMFVideoSampleAllocatorExVtbl,
    query_interface : Proc(IMFVideoSampleAllocatorEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoSampleAllocatorEx*, UInt32),
    release : Proc(IMFVideoSampleAllocatorEx*, UInt32),
    set_direct_x_manager : Proc(IMFVideoSampleAllocatorEx*, Void*, Win32cr::Foundation::HRESULT),
    uninitialize_sample_allocator : Proc(IMFVideoSampleAllocatorEx*, Win32cr::Foundation::HRESULT),
    initialize_sample_allocator : Proc(IMFVideoSampleAllocatorEx*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IMFVideoSampleAllocatorEx*, Void**, Win32cr::Foundation::HRESULT),
    initialize_sample_allocator_ex : Proc(IMFVideoSampleAllocatorEx*, UInt32, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("545b3a48-3283-4f62-866f-a62d8f598f9f")]
  record IMFVideoSampleAllocatorEx, lpVtbl : IMFVideoSampleAllocatorExVtbl* do
    GUID = LibC::GUID.new(0x545b3a48_u32, 0x3283_u16, 0x4f62_u16, StaticArray[0x86_u8, 0x6f_u8, 0xa6_u8, 0x2d_u8, 0x8f_u8, 0x59_u8, 0x8f_u8, 0x9f_u8])
    def query_interface(this : IMFVideoSampleAllocatorEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoSampleAllocatorEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoSampleAllocatorEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_direct_x_manager(this : IMFVideoSampleAllocatorEx*, pManager : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_x_manager.call(this, pManager)
    end
    def uninitialize_sample_allocator(this : IMFVideoSampleAllocatorEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uninitialize_sample_allocator.call(this)
    end
    def initialize_sample_allocator(this : IMFVideoSampleAllocatorEx*, cRequestedFrames : UInt32, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_sample_allocator.call(this, cRequestedFrames, pMediaType)
    end
    def allocate_sample(this : IMFVideoSampleAllocatorEx*, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, ppSample)
    end
    def initialize_sample_allocator_ex(this : IMFVideoSampleAllocatorEx*, cInitialSamples : UInt32, cMaximumSamples : UInt32, pAttributes : Void*, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_sample_allocator_ex.call(this, cInitialSamples, cMaximumSamples, pAttributes, pMediaType)
    end

  end

  @[Extern]
  record IMFDXGIDeviceManagerSourceVtbl,
    query_interface : Proc(IMFDXGIDeviceManagerSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDXGIDeviceManagerSource*, UInt32),
    release : Proc(IMFDXGIDeviceManagerSource*, UInt32),
    get_manager : Proc(IMFDXGIDeviceManagerSource*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce")]
  record IMFDXGIDeviceManagerSource, lpVtbl : IMFDXGIDeviceManagerSourceVtbl* do
    GUID = LibC::GUID.new(0x20bc074b_u32, 0x7a8d_u16, 0x4609_u16, StaticArray[0x8c_u8, 0x3b_u8, 0x64_u8, 0xa0_u8, 0xa3_u8, 0xb5_u8, 0xd7_u8, 0xce_u8])
    def query_interface(this : IMFDXGIDeviceManagerSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDXGIDeviceManagerSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDXGIDeviceManagerSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_manager(this : IMFDXGIDeviceManagerSource*, ppManager : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_manager.call(this, ppManager)
    end

  end

  @[Extern]
  record IMFVideoProcessorControlVtbl,
    query_interface : Proc(IMFVideoProcessorControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoProcessorControl*, UInt32),
    release : Proc(IMFVideoProcessorControl*, UInt32),
    set_border_color : Proc(IMFVideoProcessorControl*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    set_source_rectangle : Proc(IMFVideoProcessorControl*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_destination_rectangle : Proc(IMFVideoProcessorControl*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_mirror : Proc(IMFVideoProcessorControl*, Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_MIRROR, Win32cr::Foundation::HRESULT),
    set_rotation : Proc(IMFVideoProcessorControl*, Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_ROTATION, Win32cr::Foundation::HRESULT),
    set_constriction_size : Proc(IMFVideoProcessorControl*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a3f675d5-6119-4f7f-a100-1d8b280f0efb")]
  record IMFVideoProcessorControl, lpVtbl : IMFVideoProcessorControlVtbl* do
    GUID = LibC::GUID.new(0xa3f675d5_u32, 0x6119_u16, 0x4f7f_u16, StaticArray[0xa1_u8, 0x0_u8, 0x1d_u8, 0x8b_u8, 0x28_u8, 0xf_u8, 0xe_u8, 0xfb_u8])
    def query_interface(this : IMFVideoProcessorControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoProcessorControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoProcessorControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_border_color(this : IMFVideoProcessorControl*, pBorderColor : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, pBorderColor)
    end
    def set_source_rectangle(this : IMFVideoProcessorControl*, pSrcRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_rectangle.call(this, pSrcRect)
    end
    def set_destination_rectangle(this : IMFVideoProcessorControl*, pDstRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_destination_rectangle.call(this, pDstRect)
    end
    def set_mirror(this : IMFVideoProcessorControl*, eMirror : Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_MIRROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mirror.call(this, eMirror)
    end
    def set_rotation(this : IMFVideoProcessorControl*, eRotation : Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_ROTATION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation.call(this, eRotation)
    end
    def set_constriction_size(this : IMFVideoProcessorControl*, pConstrictionSize : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_constriction_size.call(this, pConstrictionSize)
    end

  end

  @[Extern]
  record IMFVideoProcessorControl2Vtbl,
    query_interface : Proc(IMFVideoProcessorControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoProcessorControl2*, UInt32),
    release : Proc(IMFVideoProcessorControl2*, UInt32),
    set_border_color : Proc(IMFVideoProcessorControl2*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    set_source_rectangle : Proc(IMFVideoProcessorControl2*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_destination_rectangle : Proc(IMFVideoProcessorControl2*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_mirror : Proc(IMFVideoProcessorControl2*, Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_MIRROR, Win32cr::Foundation::HRESULT),
    set_rotation : Proc(IMFVideoProcessorControl2*, Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_ROTATION, Win32cr::Foundation::HRESULT),
    set_constriction_size : Proc(IMFVideoProcessorControl2*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    set_rotation_override : Proc(IMFVideoProcessorControl2*, UInt32, Win32cr::Foundation::HRESULT),
    enable_hardware_effects : Proc(IMFVideoProcessorControl2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_supported_hardware_effects : Proc(IMFVideoProcessorControl2*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bde633d3-e1dc-4a7f-a693-bbae399c4a20")]
  record IMFVideoProcessorControl2, lpVtbl : IMFVideoProcessorControl2Vtbl* do
    GUID = LibC::GUID.new(0xbde633d3_u32, 0xe1dc_u16, 0x4a7f_u16, StaticArray[0xa6_u8, 0x93_u8, 0xbb_u8, 0xae_u8, 0x39_u8, 0x9c_u8, 0x4a_u8, 0x20_u8])
    def query_interface(this : IMFVideoProcessorControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoProcessorControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoProcessorControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_border_color(this : IMFVideoProcessorControl2*, pBorderColor : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, pBorderColor)
    end
    def set_source_rectangle(this : IMFVideoProcessorControl2*, pSrcRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_rectangle.call(this, pSrcRect)
    end
    def set_destination_rectangle(this : IMFVideoProcessorControl2*, pDstRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_destination_rectangle.call(this, pDstRect)
    end
    def set_mirror(this : IMFVideoProcessorControl2*, eMirror : Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_MIRROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mirror.call(this, eMirror)
    end
    def set_rotation(this : IMFVideoProcessorControl2*, eRotation : Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_ROTATION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation.call(this, eRotation)
    end
    def set_constriction_size(this : IMFVideoProcessorControl2*, pConstrictionSize : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_constriction_size.call(this, pConstrictionSize)
    end
    def set_rotation_override(this : IMFVideoProcessorControl2*, uiRotation : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation_override.call(this, uiRotation)
    end
    def enable_hardware_effects(this : IMFVideoProcessorControl2*, fEnabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_hardware_effects.call(this, fEnabled)
    end
    def get_supported_hardware_effects(this : IMFVideoProcessorControl2*, puiSupport : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_hardware_effects.call(this, puiSupport)
    end

  end

  @[Extern]
  record IMFVideoProcessorControl3Vtbl,
    query_interface : Proc(IMFVideoProcessorControl3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoProcessorControl3*, UInt32),
    release : Proc(IMFVideoProcessorControl3*, UInt32),
    set_border_color : Proc(IMFVideoProcessorControl3*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    set_source_rectangle : Proc(IMFVideoProcessorControl3*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_destination_rectangle : Proc(IMFVideoProcessorControl3*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_mirror : Proc(IMFVideoProcessorControl3*, Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_MIRROR, Win32cr::Foundation::HRESULT),
    set_rotation : Proc(IMFVideoProcessorControl3*, Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_ROTATION, Win32cr::Foundation::HRESULT),
    set_constriction_size : Proc(IMFVideoProcessorControl3*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    set_rotation_override : Proc(IMFVideoProcessorControl3*, UInt32, Win32cr::Foundation::HRESULT),
    enable_hardware_effects : Proc(IMFVideoProcessorControl3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_supported_hardware_effects : Proc(IMFVideoProcessorControl3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_natural_output_type : Proc(IMFVideoProcessorControl3*, Void**, Win32cr::Foundation::HRESULT),
    enable_spherical_video_processing : Proc(IMFVideoProcessorControl3*, Win32cr::Foundation::BOOL, Win32cr::Media::MediaFoundation::MFVideoSphericalFormat, Win32cr::Media::MediaFoundation::MFVideoSphericalProjectionMode, Win32cr::Foundation::HRESULT),
    set_spherical_video_properties : Proc(IMFVideoProcessorControl3*, Float32, Float32, Float32, Float32, Float32, Win32cr::Foundation::HRESULT),
    set_output_device : Proc(IMFVideoProcessorControl3*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2424b3f2-eb23-40f1-91aa-74bddeea0883")]
  record IMFVideoProcessorControl3, lpVtbl : IMFVideoProcessorControl3Vtbl* do
    GUID = LibC::GUID.new(0x2424b3f2_u32, 0xeb23_u16, 0x40f1_u16, StaticArray[0x91_u8, 0xaa_u8, 0x74_u8, 0xbd_u8, 0xde_u8, 0xea_u8, 0x8_u8, 0x83_u8])
    def query_interface(this : IMFVideoProcessorControl3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoProcessorControl3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoProcessorControl3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_border_color(this : IMFVideoProcessorControl3*, pBorderColor : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, pBorderColor)
    end
    def set_source_rectangle(this : IMFVideoProcessorControl3*, pSrcRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_rectangle.call(this, pSrcRect)
    end
    def set_destination_rectangle(this : IMFVideoProcessorControl3*, pDstRect : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_destination_rectangle.call(this, pDstRect)
    end
    def set_mirror(this : IMFVideoProcessorControl3*, eMirror : Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_MIRROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mirror.call(this, eMirror)
    end
    def set_rotation(this : IMFVideoProcessorControl3*, eRotation : Win32cr::Media::MediaFoundation::MF_VIDEO_PROCESSOR_ROTATION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation.call(this, eRotation)
    end
    def set_constriction_size(this : IMFVideoProcessorControl3*, pConstrictionSize : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_constriction_size.call(this, pConstrictionSize)
    end
    def set_rotation_override(this : IMFVideoProcessorControl3*, uiRotation : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation_override.call(this, uiRotation)
    end
    def enable_hardware_effects(this : IMFVideoProcessorControl3*, fEnabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_hardware_effects.call(this, fEnabled)
    end
    def get_supported_hardware_effects(this : IMFVideoProcessorControl3*, puiSupport : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_hardware_effects.call(this, puiSupport)
    end
    def get_natural_output_type(this : IMFVideoProcessorControl3*, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_natural_output_type.call(this, ppType)
    end
    def enable_spherical_video_processing(this : IMFVideoProcessorControl3*, fEnable : Win32cr::Foundation::BOOL, eFormat : Win32cr::Media::MediaFoundation::MFVideoSphericalFormat, eProjectionMode : Win32cr::Media::MediaFoundation::MFVideoSphericalProjectionMode) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_spherical_video_processing.call(this, fEnable, eFormat, eProjectionMode)
    end
    def set_spherical_video_properties(this : IMFVideoProcessorControl3*, x : Float32, y : Float32, z : Float32, w : Float32, fieldOfView : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_spherical_video_properties.call(this, x, y, z, w, fieldOfView)
    end
    def set_output_device(this : IMFVideoProcessorControl3*, pOutputDevice : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_device.call(this, pOutputDevice)
    end

  end

  @[Extern]
  record IMFVideoRendererEffectControlVtbl,
    query_interface : Proc(IMFVideoRendererEffectControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoRendererEffectControl*, UInt32),
    release : Proc(IMFVideoRendererEffectControl*, UInt32),
    on_app_service_connection_established : Proc(IMFVideoRendererEffectControl*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("604d33d7-cf23-41d5-8224-5bbbb1a87475")]
  record IMFVideoRendererEffectControl, lpVtbl : IMFVideoRendererEffectControlVtbl* do
    GUID = LibC::GUID.new(0x604d33d7_u32, 0xcf23_u16, 0x41d5_u16, StaticArray[0x82_u8, 0x24_u8, 0x5b_u8, 0xbb_u8, 0xb1_u8, 0xa8_u8, 0x74_u8, 0x75_u8])
    def query_interface(this : IMFVideoRendererEffectControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoRendererEffectControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoRendererEffectControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_app_service_connection_established(this : IMFVideoRendererEffectControl*, pAppServiceConnection : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_app_service_connection_established.call(this, pAppServiceConnection)
    end

  end

  @[Extern]
  record IMFTopologyVtbl,
    query_interface : Proc(IMFTopology*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTopology*, UInt32),
    release : Proc(IMFTopology*, UInt32),
    get_item : Proc(IMFTopology*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFTopology*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFTopology*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFTopology*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFTopology*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFTopology*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFTopology*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFTopology*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFTopology*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFTopology*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFTopology*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFTopology*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFTopology*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFTopology*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFTopology*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFTopology*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFTopology*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFTopology*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFTopology*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFTopology*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFTopology*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFTopology*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFTopology*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFTopology*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFTopology*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFTopology*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFTopology*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFTopology*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFTopology*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFTopology*, Void*, Win32cr::Foundation::HRESULT),
    get_topology_id : Proc(IMFTopology*, UInt64*, Win32cr::Foundation::HRESULT),
    add_node : Proc(IMFTopology*, Void*, Win32cr::Foundation::HRESULT),
    remove_node : Proc(IMFTopology*, Void*, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(IMFTopology*, UInt16*, Win32cr::Foundation::HRESULT),
    get_node : Proc(IMFTopology*, UInt16, Void**, Win32cr::Foundation::HRESULT),
    clear : Proc(IMFTopology*, Win32cr::Foundation::HRESULT),
    clone_from : Proc(IMFTopology*, Void*, Win32cr::Foundation::HRESULT),
    get_node_by_id : Proc(IMFTopology*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    get_source_node_collection : Proc(IMFTopology*, Void**, Win32cr::Foundation::HRESULT),
    get_output_node_collection : Proc(IMFTopology*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83cf873a-f6da-4bc8-823f-bacfd55dc433")]
  record IMFTopology, lpVtbl : IMFTopologyVtbl* do
    GUID = LibC::GUID.new(0x83cf873a_u32, 0xf6da_u16, 0x4bc8_u16, StaticArray[0x82_u8, 0x3f_u8, 0xba_u8, 0xcf_u8, 0xd5_u8, 0x5d_u8, 0xc4_u8, 0x33_u8])
    def query_interface(this : IMFTopology*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTopology*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTopology*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFTopology*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFTopology*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFTopology*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFTopology*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFTopology*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFTopology*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFTopology*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFTopology*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFTopology*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFTopology*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFTopology*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFTopology*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFTopology*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFTopology*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFTopology*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFTopology*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFTopology*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFTopology*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFTopology*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFTopology*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFTopology*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFTopology*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFTopology*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFTopology*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFTopology*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFTopology*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFTopology*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFTopology*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFTopology*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFTopology*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_topology_id(this : IMFTopology*, pID : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topology_id.call(this, pID)
    end
    def add_node(this : IMFTopology*, pNode : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_node.call(this, pNode)
    end
    def remove_node(this : IMFTopology*, pNode : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_node.call(this, pNode)
    end
    def get_node_count(this : IMFTopology*, pwNodes : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_node_count.call(this, pwNodes)
    end
    def get_node(this : IMFTopology*, wIndex : UInt16, ppNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_node.call(this, wIndex, ppNode)
    end
    def clear(this : IMFTopology*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end
    def clone_from(this : IMFTopology*, pTopology : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone_from.call(this, pTopology)
    end
    def get_node_by_id(this : IMFTopology*, qwTopoNodeID : UInt64, ppNode : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_node_by_id.call(this, qwTopoNodeID, ppNode)
    end
    def get_source_node_collection(this : IMFTopology*, ppCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_node_collection.call(this, ppCollection)
    end
    def get_output_node_collection(this : IMFTopology*, ppCollection : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_node_collection.call(this, ppCollection)
    end

  end

  @[Extern]
  record IMFTopologyNodeVtbl,
    query_interface : Proc(IMFTopologyNode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTopologyNode*, UInt32),
    release : Proc(IMFTopologyNode*, UInt32),
    get_item : Proc(IMFTopologyNode*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFTopologyNode*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFTopologyNode*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFTopologyNode*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFTopologyNode*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFTopologyNode*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFTopologyNode*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFTopologyNode*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFTopologyNode*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFTopologyNode*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFTopologyNode*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFTopologyNode*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFTopologyNode*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFTopologyNode*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFTopologyNode*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFTopologyNode*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFTopologyNode*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFTopologyNode*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFTopologyNode*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFTopologyNode*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFTopologyNode*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFTopologyNode*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFTopologyNode*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFTopologyNode*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFTopologyNode*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFTopologyNode*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFTopologyNode*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFTopologyNode*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFTopologyNode*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFTopologyNode*, Void*, Win32cr::Foundation::HRESULT),
    set_object : Proc(IMFTopologyNode*, Void*, Win32cr::Foundation::HRESULT),
    get_object : Proc(IMFTopologyNode*, Void**, Win32cr::Foundation::HRESULT),
    get_node_type : Proc(IMFTopologyNode*, Win32cr::Media::MediaFoundation::MF_TOPOLOGY_TYPE*, Win32cr::Foundation::HRESULT),
    get_topo_node_id : Proc(IMFTopologyNode*, UInt64*, Win32cr::Foundation::HRESULT),
    set_topo_node_id : Proc(IMFTopologyNode*, UInt64, Win32cr::Foundation::HRESULT),
    get_input_count : Proc(IMFTopologyNode*, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_count : Proc(IMFTopologyNode*, UInt32*, Win32cr::Foundation::HRESULT),
    connect_output : Proc(IMFTopologyNode*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    disconnect_output : Proc(IMFTopologyNode*, UInt32, Win32cr::Foundation::HRESULT),
    get_input : Proc(IMFTopologyNode*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    get_output : Proc(IMFTopologyNode*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    set_output_pref_type : Proc(IMFTopologyNode*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_output_pref_type : Proc(IMFTopologyNode*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_input_pref_type : Proc(IMFTopologyNode*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_input_pref_type : Proc(IMFTopologyNode*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    clone_from : Proc(IMFTopologyNode*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83cf873a-f6da-4bc8-823f-bacfd55dc430")]
  record IMFTopologyNode, lpVtbl : IMFTopologyNodeVtbl* do
    GUID = LibC::GUID.new(0x83cf873a_u32, 0xf6da_u16, 0x4bc8_u16, StaticArray[0x82_u8, 0x3f_u8, 0xba_u8, 0xcf_u8, 0xd5_u8, 0x5d_u8, 0xc4_u8, 0x30_u8])
    def query_interface(this : IMFTopologyNode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTopologyNode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTopologyNode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFTopologyNode*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFTopologyNode*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFTopologyNode*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFTopologyNode*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFTopologyNode*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFTopologyNode*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFTopologyNode*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFTopologyNode*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFTopologyNode*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFTopologyNode*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFTopologyNode*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFTopologyNode*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFTopologyNode*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFTopologyNode*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFTopologyNode*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFTopologyNode*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFTopologyNode*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFTopologyNode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFTopologyNode*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFTopologyNode*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFTopologyNode*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFTopologyNode*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFTopologyNode*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFTopologyNode*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFTopologyNode*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFTopologyNode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFTopologyNode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFTopologyNode*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFTopologyNode*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFTopologyNode*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def set_object(this : IMFTopologyNode*, pObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_object.call(this, pObject)
    end
    def get_object(this : IMFTopologyNode*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, ppObject)
    end
    def get_node_type(this : IMFTopologyNode*, pType : Win32cr::Media::MediaFoundation::MF_TOPOLOGY_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_node_type.call(this, pType)
    end
    def get_topo_node_id(this : IMFTopologyNode*, pID : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topo_node_id.call(this, pID)
    end
    def set_topo_node_id(this : IMFTopologyNode*, ullTopoID : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_topo_node_id.call(this, ullTopoID)
    end
    def get_input_count(this : IMFTopologyNode*, pcInputs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_count.call(this, pcInputs)
    end
    def get_output_count(this : IMFTopologyNode*, pcOutputs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_count.call(this, pcOutputs)
    end
    def connect_output(this : IMFTopologyNode*, dwOutputIndex : UInt32, pDownstreamNode : Void*, dwInputIndexOnDownstreamNode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_output.call(this, dwOutputIndex, pDownstreamNode, dwInputIndexOnDownstreamNode)
    end
    def disconnect_output(this : IMFTopologyNode*, dwOutputIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_output.call(this, dwOutputIndex)
    end
    def get_input(this : IMFTopologyNode*, dwInputIndex : UInt32, ppUpstreamNode : Void**, pdwOutputIndexOnUpstreamNode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input.call(this, dwInputIndex, ppUpstreamNode, pdwOutputIndexOnUpstreamNode)
    end
    def get_output(this : IMFTopologyNode*, dwOutputIndex : UInt32, ppDownstreamNode : Void**, pdwInputIndexOnDownstreamNode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output.call(this, dwOutputIndex, ppDownstreamNode, pdwInputIndexOnDownstreamNode)
    end
    def set_output_pref_type(this : IMFTopologyNode*, dwOutputIndex : UInt32, pType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_pref_type.call(this, dwOutputIndex, pType)
    end
    def get_output_pref_type(this : IMFTopologyNode*, dwOutputIndex : UInt32, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_pref_type.call(this, dwOutputIndex, ppType)
    end
    def set_input_pref_type(this : IMFTopologyNode*, dwInputIndex : UInt32, pType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_pref_type.call(this, dwInputIndex, pType)
    end
    def get_input_pref_type(this : IMFTopologyNode*, dwInputIndex : UInt32, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_pref_type.call(this, dwInputIndex, ppType)
    end
    def clone_from(this : IMFTopologyNode*, pNode : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone_from.call(this, pNode)
    end

  end

  @[Extern]
  record IMFGetServiceVtbl,
    query_interface : Proc(IMFGetService*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFGetService*, UInt32),
    release : Proc(IMFGetService*, UInt32),
    get_service : Proc(IMFGetService*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa993888-4383-415a-a930-dd472a8cf6f7")]
  record IMFGetService, lpVtbl : IMFGetServiceVtbl* do
    GUID = LibC::GUID.new(0xfa993888_u32, 0x4383_u16, 0x415a_u16, StaticArray[0xa9_u8, 0x30_u8, 0xdd_u8, 0x47_u8, 0x2a_u8, 0x8c_u8, 0xf6_u8, 0xf7_u8])
    def query_interface(this : IMFGetService*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFGetService*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFGetService*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_service(this : IMFGetService*, guidService : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, guidService, riid, ppvObject)
    end

  end

  @[Extern]
  record IMFClockVtbl,
    query_interface : Proc(IMFClock*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFClock*, UInt32),
    release : Proc(IMFClock*, UInt32),
    get_clock_characteristics : Proc(IMFClock*, UInt32*, Win32cr::Foundation::HRESULT),
    get_correlated_time : Proc(IMFClock*, UInt32, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_continuity_key : Proc(IMFClock*, UInt32*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMFClock*, UInt32, Win32cr::Media::MediaFoundation::MFCLOCK_STATE*, Win32cr::Foundation::HRESULT),
    get_properties : Proc(IMFClock*, Win32cr::Media::MediaFoundation::MFCLOCK_PROPERTIES*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2eb1e945-18b8-4139-9b1a-d5d584818530")]
  record IMFClock, lpVtbl : IMFClockVtbl* do
    GUID = LibC::GUID.new(0x2eb1e945_u32, 0x18b8_u16, 0x4139_u16, StaticArray[0x9b_u8, 0x1a_u8, 0xd5_u8, 0xd5_u8, 0x84_u8, 0x81_u8, 0x85_u8, 0x30_u8])
    def query_interface(this : IMFClock*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFClock*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFClock*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_clock_characteristics(this : IMFClock*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clock_characteristics.call(this, pdwCharacteristics)
    end
    def get_correlated_time(this : IMFClock*, dwReserved : UInt32, pllClockTime : Int64*, phnsSystemTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_correlated_time.call(this, dwReserved, pllClockTime, phnsSystemTime)
    end
    def get_continuity_key(this : IMFClock*, pdwContinuityKey : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_continuity_key.call(this, pdwContinuityKey)
    end
    def get_state(this : IMFClock*, dwReserved : UInt32, peClockState : Win32cr::Media::MediaFoundation::MFCLOCK_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, dwReserved, peClockState)
    end
    def get_properties(this : IMFClock*, pClockProperties : Win32cr::Media::MediaFoundation::MFCLOCK_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pClockProperties)
    end

  end

  @[Extern]
  record IMFPresentationClockVtbl,
    query_interface : Proc(IMFPresentationClock*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPresentationClock*, UInt32),
    release : Proc(IMFPresentationClock*, UInt32),
    get_clock_characteristics : Proc(IMFPresentationClock*, UInt32*, Win32cr::Foundation::HRESULT),
    get_correlated_time : Proc(IMFPresentationClock*, UInt32, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_continuity_key : Proc(IMFPresentationClock*, UInt32*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMFPresentationClock*, UInt32, Win32cr::Media::MediaFoundation::MFCLOCK_STATE*, Win32cr::Foundation::HRESULT),
    get_properties : Proc(IMFPresentationClock*, Win32cr::Media::MediaFoundation::MFCLOCK_PROPERTIES*, Win32cr::Foundation::HRESULT),
    set_time_source : Proc(IMFPresentationClock*, Void*, Win32cr::Foundation::HRESULT),
    get_time_source : Proc(IMFPresentationClock*, Void**, Win32cr::Foundation::HRESULT),
    get_time : Proc(IMFPresentationClock*, Int64*, Win32cr::Foundation::HRESULT),
    add_clock_state_sink : Proc(IMFPresentationClock*, Void*, Win32cr::Foundation::HRESULT),
    remove_clock_state_sink : Proc(IMFPresentationClock*, Void*, Win32cr::Foundation::HRESULT),
    start : Proc(IMFPresentationClock*, Int64, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFPresentationClock*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFPresentationClock*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("868ce85c-8ea9-4f55-ab82-b009a910a805")]
  record IMFPresentationClock, lpVtbl : IMFPresentationClockVtbl* do
    GUID = LibC::GUID.new(0x868ce85c_u32, 0x8ea9_u16, 0x4f55_u16, StaticArray[0xab_u8, 0x82_u8, 0xb0_u8, 0x9_u8, 0xa9_u8, 0x10_u8, 0xa8_u8, 0x5_u8])
    def query_interface(this : IMFPresentationClock*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPresentationClock*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPresentationClock*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_clock_characteristics(this : IMFPresentationClock*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clock_characteristics.call(this, pdwCharacteristics)
    end
    def get_correlated_time(this : IMFPresentationClock*, dwReserved : UInt32, pllClockTime : Int64*, phnsSystemTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_correlated_time.call(this, dwReserved, pllClockTime, phnsSystemTime)
    end
    def get_continuity_key(this : IMFPresentationClock*, pdwContinuityKey : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_continuity_key.call(this, pdwContinuityKey)
    end
    def get_state(this : IMFPresentationClock*, dwReserved : UInt32, peClockState : Win32cr::Media::MediaFoundation::MFCLOCK_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, dwReserved, peClockState)
    end
    def get_properties(this : IMFPresentationClock*, pClockProperties : Win32cr::Media::MediaFoundation::MFCLOCK_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pClockProperties)
    end
    def set_time_source(this : IMFPresentationClock*, pTimeSource : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time_source.call(this, pTimeSource)
    end
    def get_time_source(this : IMFPresentationClock*, ppTimeSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_source.call(this, ppTimeSource)
    end
    def get_time(this : IMFPresentationClock*, phnsClockTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time.call(this, phnsClockTime)
    end
    def add_clock_state_sink(this : IMFPresentationClock*, pStateSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_clock_state_sink.call(this, pStateSink)
    end
    def remove_clock_state_sink(this : IMFPresentationClock*, pStateSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_clock_state_sink.call(this, pStateSink)
    end
    def start(this : IMFPresentationClock*, llClockStartOffset : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, llClockStartOffset)
    end
    def stop(this : IMFPresentationClock*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IMFPresentationClock*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end

  end

  @[Extern]
  record IMFPresentationTimeSourceVtbl,
    query_interface : Proc(IMFPresentationTimeSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPresentationTimeSource*, UInt32),
    release : Proc(IMFPresentationTimeSource*, UInt32),
    get_clock_characteristics : Proc(IMFPresentationTimeSource*, UInt32*, Win32cr::Foundation::HRESULT),
    get_correlated_time : Proc(IMFPresentationTimeSource*, UInt32, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_continuity_key : Proc(IMFPresentationTimeSource*, UInt32*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMFPresentationTimeSource*, UInt32, Win32cr::Media::MediaFoundation::MFCLOCK_STATE*, Win32cr::Foundation::HRESULT),
    get_properties : Proc(IMFPresentationTimeSource*, Win32cr::Media::MediaFoundation::MFCLOCK_PROPERTIES*, Win32cr::Foundation::HRESULT),
    get_underlying_clock : Proc(IMFPresentationTimeSource*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7ff12cce-f76f-41c2-863b-1666c8e5e139")]
  record IMFPresentationTimeSource, lpVtbl : IMFPresentationTimeSourceVtbl* do
    GUID = LibC::GUID.new(0x7ff12cce_u32, 0xf76f_u16, 0x41c2_u16, StaticArray[0x86_u8, 0x3b_u8, 0x16_u8, 0x66_u8, 0xc8_u8, 0xe5_u8, 0xe1_u8, 0x39_u8])
    def query_interface(this : IMFPresentationTimeSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPresentationTimeSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPresentationTimeSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_clock_characteristics(this : IMFPresentationTimeSource*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clock_characteristics.call(this, pdwCharacteristics)
    end
    def get_correlated_time(this : IMFPresentationTimeSource*, dwReserved : UInt32, pllClockTime : Int64*, phnsSystemTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_correlated_time.call(this, dwReserved, pllClockTime, phnsSystemTime)
    end
    def get_continuity_key(this : IMFPresentationTimeSource*, pdwContinuityKey : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_continuity_key.call(this, pdwContinuityKey)
    end
    def get_state(this : IMFPresentationTimeSource*, dwReserved : UInt32, peClockState : Win32cr::Media::MediaFoundation::MFCLOCK_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, dwReserved, peClockState)
    end
    def get_properties(this : IMFPresentationTimeSource*, pClockProperties : Win32cr::Media::MediaFoundation::MFCLOCK_PROPERTIES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pClockProperties)
    end
    def get_underlying_clock(this : IMFPresentationTimeSource*, ppClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_underlying_clock.call(this, ppClock)
    end

  end

  @[Extern]
  record IMFClockStateSinkVtbl,
    query_interface : Proc(IMFClockStateSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFClockStateSink*, UInt32),
    release : Proc(IMFClockStateSink*, UInt32),
    on_clock_start : Proc(IMFClockStateSink*, Int64, Int64, Win32cr::Foundation::HRESULT),
    on_clock_stop : Proc(IMFClockStateSink*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_pause : Proc(IMFClockStateSink*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_restart : Proc(IMFClockStateSink*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_set_rate : Proc(IMFClockStateSink*, Int64, Float32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f6696e82-74f7-4f3d-a178-8a5e09c3659f")]
  record IMFClockStateSink, lpVtbl : IMFClockStateSinkVtbl* do
    GUID = LibC::GUID.new(0xf6696e82_u32, 0x74f7_u16, 0x4f3d_u16, StaticArray[0xa1_u8, 0x78_u8, 0x8a_u8, 0x5e_u8, 0x9_u8, 0xc3_u8, 0x65_u8, 0x9f_u8])
    def query_interface(this : IMFClockStateSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFClockStateSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFClockStateSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_clock_start(this : IMFClockStateSink*, hnsSystemTime : Int64, llClockStartOffset : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_start.call(this, hnsSystemTime, llClockStartOffset)
    end
    def on_clock_stop(this : IMFClockStateSink*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_stop.call(this, hnsSystemTime)
    end
    def on_clock_pause(this : IMFClockStateSink*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_pause.call(this, hnsSystemTime)
    end
    def on_clock_restart(this : IMFClockStateSink*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_restart.call(this, hnsSystemTime)
    end
    def on_clock_set_rate(this : IMFClockStateSink*, hnsSystemTime : Int64, flRate : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_set_rate.call(this, hnsSystemTime, flRate)
    end

  end

  @[Extern]
  record IMFPresentationDescriptorVtbl,
    query_interface : Proc(IMFPresentationDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPresentationDescriptor*, UInt32),
    release : Proc(IMFPresentationDescriptor*, UInt32),
    get_item : Proc(IMFPresentationDescriptor*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFPresentationDescriptor*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFPresentationDescriptor*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFPresentationDescriptor*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFPresentationDescriptor*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFPresentationDescriptor*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFPresentationDescriptor*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFPresentationDescriptor*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFPresentationDescriptor*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFPresentationDescriptor*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFPresentationDescriptor*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFPresentationDescriptor*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFPresentationDescriptor*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFPresentationDescriptor*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFPresentationDescriptor*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFPresentationDescriptor*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFPresentationDescriptor*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFPresentationDescriptor*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFPresentationDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFPresentationDescriptor*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFPresentationDescriptor*, Void*, Win32cr::Foundation::HRESULT),
    get_stream_descriptor_count : Proc(IMFPresentationDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_descriptor_by_index : Proc(IMFPresentationDescriptor*, UInt32, Win32cr::Foundation::BOOL*, Void**, Win32cr::Foundation::HRESULT),
    select_stream : Proc(IMFPresentationDescriptor*, UInt32, Win32cr::Foundation::HRESULT),
    deselect_stream : Proc(IMFPresentationDescriptor*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IMFPresentationDescriptor*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("03cb2711-24d7-4db6-a17f-f3a7a479a536")]
  record IMFPresentationDescriptor, lpVtbl : IMFPresentationDescriptorVtbl* do
    GUID = LibC::GUID.new(0x3cb2711_u32, 0x24d7_u16, 0x4db6_u16, StaticArray[0xa1_u8, 0x7f_u8, 0xf3_u8, 0xa7_u8, 0xa4_u8, 0x79_u8, 0xa5_u8, 0x36_u8])
    def query_interface(this : IMFPresentationDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPresentationDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPresentationDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFPresentationDescriptor*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFPresentationDescriptor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFPresentationDescriptor*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFPresentationDescriptor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFPresentationDescriptor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFPresentationDescriptor*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFPresentationDescriptor*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFPresentationDescriptor*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_stream_descriptor_count(this : IMFPresentationDescriptor*, pdwDescriptorCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_descriptor_count.call(this, pdwDescriptorCount)
    end
    def get_stream_descriptor_by_index(this : IMFPresentationDescriptor*, dwIndex : UInt32, pfSelected : Win32cr::Foundation::BOOL*, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_descriptor_by_index.call(this, dwIndex, pfSelected, ppDescriptor)
    end
    def select_stream(this : IMFPresentationDescriptor*, dwDescriptorIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_stream.call(this, dwDescriptorIndex)
    end
    def deselect_stream(this : IMFPresentationDescriptor*, dwDescriptorIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.deselect_stream.call(this, dwDescriptorIndex)
    end
    def clone(this : IMFPresentationDescriptor*, ppPresentationDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppPresentationDescriptor)
    end

  end

  @[Extern]
  record IMFStreamDescriptorVtbl,
    query_interface : Proc(IMFStreamDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFStreamDescriptor*, UInt32),
    release : Proc(IMFStreamDescriptor*, UInt32),
    get_item : Proc(IMFStreamDescriptor*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFStreamDescriptor*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFStreamDescriptor*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFStreamDescriptor*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFStreamDescriptor*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFStreamDescriptor*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFStreamDescriptor*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFStreamDescriptor*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFStreamDescriptor*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFStreamDescriptor*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFStreamDescriptor*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFStreamDescriptor*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFStreamDescriptor*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFStreamDescriptor*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFStreamDescriptor*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFStreamDescriptor*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFStreamDescriptor*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFStreamDescriptor*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFStreamDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFStreamDescriptor*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFStreamDescriptor*, Void*, Win32cr::Foundation::HRESULT),
    get_stream_identifier : Proc(IMFStreamDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_media_type_handler : Proc(IMFStreamDescriptor*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56c03d9c-9dbb-45f5-ab4b-d80f47c05938")]
  record IMFStreamDescriptor, lpVtbl : IMFStreamDescriptorVtbl* do
    GUID = LibC::GUID.new(0x56c03d9c_u32, 0x9dbb_u16, 0x45f5_u16, StaticArray[0xab_u8, 0x4b_u8, 0xd8_u8, 0xf_u8, 0x47_u8, 0xc0_u8, 0x59_u8, 0x38_u8])
    def query_interface(this : IMFStreamDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFStreamDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFStreamDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFStreamDescriptor*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFStreamDescriptor*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFStreamDescriptor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFStreamDescriptor*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFStreamDescriptor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFStreamDescriptor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFStreamDescriptor*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFStreamDescriptor*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFStreamDescriptor*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_stream_identifier(this : IMFStreamDescriptor*, pdwStreamIdentifier : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_identifier.call(this, pdwStreamIdentifier)
    end
    def get_media_type_handler(this : IMFStreamDescriptor*, ppMediaTypeHandler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type_handler.call(this, ppMediaTypeHandler)
    end

  end

  @[Extern]
  record IMFMediaTypeHandlerVtbl,
    query_interface : Proc(IMFMediaTypeHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaTypeHandler*, UInt32),
    release : Proc(IMFMediaTypeHandler*, UInt32),
    is_media_type_supported : Proc(IMFMediaTypeHandler*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_media_type_count : Proc(IMFMediaTypeHandler*, UInt32*, Win32cr::Foundation::HRESULT),
    get_media_type_by_index : Proc(IMFMediaTypeHandler*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_current_media_type : Proc(IMFMediaTypeHandler*, Void*, Win32cr::Foundation::HRESULT),
    get_current_media_type : Proc(IMFMediaTypeHandler*, Void**, Win32cr::Foundation::HRESULT),
    get_major_type : Proc(IMFMediaTypeHandler*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e93dcf6c-4b07-4e1e-8123-aa16ed6eadf5")]
  record IMFMediaTypeHandler, lpVtbl : IMFMediaTypeHandlerVtbl* do
    GUID = LibC::GUID.new(0xe93dcf6c_u32, 0x4b07_u16, 0x4e1e_u16, StaticArray[0x81_u8, 0x23_u8, 0xaa_u8, 0x16_u8, 0xed_u8, 0x6e_u8, 0xad_u8, 0xf5_u8])
    def query_interface(this : IMFMediaTypeHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaTypeHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaTypeHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_media_type_supported(this : IMFMediaTypeHandler*, pMediaType : Void*, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_media_type_supported.call(this, pMediaType, ppMediaType)
    end
    def get_media_type_count(this : IMFMediaTypeHandler*, pdwTypeCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type_count.call(this, pdwTypeCount)
    end
    def get_media_type_by_index(this : IMFMediaTypeHandler*, dwIndex : UInt32, ppType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type_by_index.call(this, dwIndex, ppType)
    end
    def set_current_media_type(this : IMFMediaTypeHandler*, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_media_type.call(this, pMediaType)
    end
    def get_current_media_type(this : IMFMediaTypeHandler*, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_media_type.call(this, ppMediaType)
    end
    def get_major_type(this : IMFMediaTypeHandler*, pguidMajorType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_major_type.call(this, pguidMajorType)
    end

  end

  @[Extern]
  record IMFTimerVtbl,
    query_interface : Proc(IMFTimer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimer*, UInt32),
    release : Proc(IMFTimer*, UInt32),
    set_timer : Proc(IMFTimer*, UInt32, Int64, Void*, Void*, Void**, Win32cr::Foundation::HRESULT),
    cancel_timer : Proc(IMFTimer*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2")]
  record IMFTimer, lpVtbl : IMFTimerVtbl* do
    GUID = LibC::GUID.new(0xe56e4cbd_u32, 0x8f70_u16, 0x49d8_u16, StaticArray[0xa0_u8, 0xf8_u8, 0xed_u8, 0xb3_u8, 0xd6_u8, 0xab_u8, 0x9b_u8, 0xf2_u8])
    def query_interface(this : IMFTimer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_timer(this : IMFTimer*, dwFlags : UInt32, llClockTime : Int64, pCallback : Void*, punkState : Void*, ppunkKey : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_timer.call(this, dwFlags, llClockTime, pCallback, punkState, ppunkKey)
    end
    def cancel_timer(this : IMFTimer*, punkKey : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_timer.call(this, punkKey)
    end

  end

  @[Extern]
  record IMFShutdownVtbl,
    query_interface : Proc(IMFShutdown*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFShutdown*, UInt32),
    release : Proc(IMFShutdown*, UInt32),
    shutdown : Proc(IMFShutdown*, Win32cr::Foundation::HRESULT),
    get_shutdown_status : Proc(IMFShutdown*, Win32cr::Media::MediaFoundation::MFSHUTDOWN_STATUS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("97ec2ea4-0e42-4937-97ac-9d6d328824e1")]
  record IMFShutdown, lpVtbl : IMFShutdownVtbl* do
    GUID = LibC::GUID.new(0x97ec2ea4_u32, 0xe42_u16, 0x4937_u16, StaticArray[0x97_u8, 0xac_u8, 0x9d_u8, 0x6d_u8, 0x32_u8, 0x88_u8, 0x24_u8, 0xe1_u8])
    def query_interface(this : IMFShutdown*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFShutdown*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFShutdown*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def shutdown(this : IMFShutdown*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_shutdown_status(this : IMFShutdown*, pStatus : Win32cr::Media::MediaFoundation::MFSHUTDOWN_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_shutdown_status.call(this, pStatus)
    end

  end

  @[Extern]
  record IMFTopoLoaderVtbl,
    query_interface : Proc(IMFTopoLoader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTopoLoader*, UInt32),
    release : Proc(IMFTopoLoader*, UInt32),
    load : Proc(IMFTopoLoader*, Void*, Void**, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("de9a6157-f660-4643-b56a-df9f7998c7cd")]
  record IMFTopoLoader, lpVtbl : IMFTopoLoaderVtbl* do
    GUID = LibC::GUID.new(0xde9a6157_u32, 0xf660_u16, 0x4643_u16, StaticArray[0xb5_u8, 0x6a_u8, 0xdf_u8, 0x9f_u8, 0x79_u8, 0x98_u8, 0xc7_u8, 0xcd_u8])
    def query_interface(this : IMFTopoLoader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTopoLoader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTopoLoader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def load(this : IMFTopoLoader*, pInputTopo : Void*, ppOutputTopo : Void**, pCurrentTopo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, pInputTopo, ppOutputTopo, pCurrentTopo)
    end

  end

  @[Extern]
  record IMFContentProtectionManagerVtbl,
    query_interface : Proc(IMFContentProtectionManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentProtectionManager*, UInt32),
    release : Proc(IMFContentProtectionManager*, UInt32),
    begin_enable_content : Proc(IMFContentProtectionManager*, Void*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_enable_content : Proc(IMFContentProtectionManager*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("acf92459-6a61-42bd-b57c-b43e51203cb0")]
  record IMFContentProtectionManager, lpVtbl : IMFContentProtectionManagerVtbl* do
    GUID = LibC::GUID.new(0xacf92459_u32, 0x6a61_u16, 0x42bd_u16, StaticArray[0xb5_u8, 0x7c_u8, 0xb4_u8, 0x3e_u8, 0x51_u8, 0x20_u8, 0x3c_u8, 0xb0_u8])
    def query_interface(this : IMFContentProtectionManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentProtectionManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentProtectionManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_enable_content(this : IMFContentProtectionManager*, pEnablerActivate : Void*, pTopo : Void*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_enable_content.call(this, pEnablerActivate, pTopo, pCallback, punkState)
    end
    def end_enable_content(this : IMFContentProtectionManager*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_enable_content.call(this, pResult)
    end

  end

  @[Extern]
  record IMFContentEnablerVtbl,
    query_interface : Proc(IMFContentEnabler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentEnabler*, UInt32),
    release : Proc(IMFContentEnabler*, UInt32),
    get_enable_type : Proc(IMFContentEnabler*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_enable_url : Proc(IMFContentEnabler*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Media::MediaFoundation::MF_URL_TRUST_STATUS*, Win32cr::Foundation::HRESULT),
    get_enable_data : Proc(IMFContentEnabler*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    is_automatic_supported : Proc(IMFContentEnabler*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    automatic_enable : Proc(IMFContentEnabler*, Win32cr::Foundation::HRESULT),
    monitor_enable : Proc(IMFContentEnabler*, Win32cr::Foundation::HRESULT),
    cancel : Proc(IMFContentEnabler*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d3c4ef59-49ce-4381-9071-d5bcd044c770")]
  record IMFContentEnabler, lpVtbl : IMFContentEnablerVtbl* do
    GUID = LibC::GUID.new(0xd3c4ef59_u32, 0x49ce_u16, 0x4381_u16, StaticArray[0x90_u8, 0x71_u8, 0xd5_u8, 0xbc_u8, 0xd0_u8, 0x44_u8, 0xc7_u8, 0x70_u8])
    def query_interface(this : IMFContentEnabler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentEnabler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentEnabler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_enable_type(this : IMFContentEnabler*, pType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enable_type.call(this, pType)
    end
    def get_enable_url(this : IMFContentEnabler*, ppwszURL : Win32cr::Foundation::PWSTR*, pcchURL : UInt32*, pTrustStatus : Win32cr::Media::MediaFoundation::MF_URL_TRUST_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enable_url.call(this, ppwszURL, pcchURL, pTrustStatus)
    end
    def get_enable_data(this : IMFContentEnabler*, ppbData : UInt8**, pcbData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enable_data.call(this, ppbData, pcbData)
    end
    def is_automatic_supported(this : IMFContentEnabler*, pfAutomatic : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_automatic_supported.call(this, pfAutomatic)
    end
    def automatic_enable(this : IMFContentEnabler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.automatic_enable.call(this)
    end
    def monitor_enable(this : IMFContentEnabler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.monitor_enable.call(this)
    end
    def cancel(this : IMFContentEnabler*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end

  end

  @[Extern]
  record IMFMetadataVtbl,
    query_interface : Proc(IMFMetadata*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMetadata*, UInt32),
    release : Proc(IMFMetadata*, UInt32),
    set_language : Proc(IMFMetadata*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_language : Proc(IMFMetadata*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_all_languages : Proc(IMFMetadata*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    set_property : Proc(IMFMetadata*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_property : Proc(IMFMetadata*, Win32cr::Foundation::PWSTR, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_property : Proc(IMFMetadata*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_all_property_names : Proc(IMFMetadata*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f88cfb8c-ef16-4991-b450-cb8c69e51704")]
  record IMFMetadata, lpVtbl : IMFMetadataVtbl* do
    GUID = LibC::GUID.new(0xf88cfb8c_u32, 0xef16_u16, 0x4991_u16, StaticArray[0xb4_u8, 0x50_u8, 0xcb_u8, 0x8c_u8, 0x69_u8, 0xe5_u8, 0x17_u8, 0x4_u8])
    def query_interface(this : IMFMetadata*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMetadata*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMetadata*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_language(this : IMFMetadata*, pwszRFC1766 : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_language.call(this, pwszRFC1766)
    end
    def get_language(this : IMFMetadata*, ppwszRFC1766 : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language.call(this, ppwszRFC1766)
    end
    def get_all_languages(this : IMFMetadata*, ppvLanguages : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_languages.call(this, ppvLanguages)
    end
    def set_property(this : IMFMetadata*, pwszName : Win32cr::Foundation::PWSTR, ppvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_property.call(this, pwszName, ppvValue)
    end
    def get_property(this : IMFMetadata*, pwszName : Win32cr::Foundation::PWSTR, ppvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_property.call(this, pwszName, ppvValue)
    end
    def delete_property(this : IMFMetadata*, pwszName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_property.call(this, pwszName)
    end
    def get_all_property_names(this : IMFMetadata*, ppvNames : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_property_names.call(this, ppvNames)
    end

  end

  @[Extern]
  record IMFMetadataProviderVtbl,
    query_interface : Proc(IMFMetadataProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMetadataProvider*, UInt32),
    release : Proc(IMFMetadataProvider*, UInt32),
    get_mf_metadata : Proc(IMFMetadataProvider*, Void*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("56181d2d-e221-4adb-b1c8-3cee6a53f76f")]
  record IMFMetadataProvider, lpVtbl : IMFMetadataProviderVtbl* do
    GUID = LibC::GUID.new(0x56181d2d_u32, 0xe221_u16, 0x4adb_u16, StaticArray[0xb1_u8, 0xc8_u8, 0x3c_u8, 0xee_u8, 0x6a_u8, 0x53_u8, 0xf7_u8, 0x6f_u8])
    def query_interface(this : IMFMetadataProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMetadataProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMetadataProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_mf_metadata(this : IMFMetadataProvider*, pPresentationDescriptor : Void*, dwStreamIdentifier : UInt32, dwFlags : UInt32, ppMFMetadata : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mf_metadata.call(this, pPresentationDescriptor, dwStreamIdentifier, dwFlags, ppMFMetadata)
    end

  end

  @[Extern]
  record IMFRateSupportVtbl,
    query_interface : Proc(IMFRateSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRateSupport*, UInt32),
    release : Proc(IMFRateSupport*, UInt32),
    get_slowest_rate : Proc(IMFRateSupport*, Win32cr::Media::MediaFoundation::MFRATE_DIRECTION, Win32cr::Foundation::BOOL, Float32*, Win32cr::Foundation::HRESULT),
    get_fastest_rate : Proc(IMFRateSupport*, Win32cr::Media::MediaFoundation::MFRATE_DIRECTION, Win32cr::Foundation::BOOL, Float32*, Win32cr::Foundation::HRESULT),
    is_rate_supported : Proc(IMFRateSupport*, Win32cr::Foundation::BOOL, Float32, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0a9ccdbc-d797-4563-9667-94ec5d79292d")]
  record IMFRateSupport, lpVtbl : IMFRateSupportVtbl* do
    GUID = LibC::GUID.new(0xa9ccdbc_u32, 0xd797_u16, 0x4563_u16, StaticArray[0x96_u8, 0x67_u8, 0x94_u8, 0xec_u8, 0x5d_u8, 0x79_u8, 0x29_u8, 0x2d_u8])
    def query_interface(this : IMFRateSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRateSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRateSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_slowest_rate(this : IMFRateSupport*, eDirection : Win32cr::Media::MediaFoundation::MFRATE_DIRECTION, fThin : Win32cr::Foundation::BOOL, pflRate : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_slowest_rate.call(this, eDirection, fThin, pflRate)
    end
    def get_fastest_rate(this : IMFRateSupport*, eDirection : Win32cr::Media::MediaFoundation::MFRATE_DIRECTION, fThin : Win32cr::Foundation::BOOL, pflRate : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fastest_rate.call(this, eDirection, fThin, pflRate)
    end
    def is_rate_supported(this : IMFRateSupport*, fThin : Win32cr::Foundation::BOOL, flRate : Float32, pflNearestSupportedRate : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_rate_supported.call(this, fThin, flRate, pflNearestSupportedRate)
    end

  end

  @[Extern]
  record IMFRateControlVtbl,
    query_interface : Proc(IMFRateControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRateControl*, UInt32),
    release : Proc(IMFRateControl*, UInt32),
    set_rate : Proc(IMFRateControl*, Win32cr::Foundation::BOOL, Float32, Win32cr::Foundation::HRESULT),
    get_rate : Proc(IMFRateControl*, Win32cr::Foundation::BOOL*, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("88ddcd21-03c3-4275-91ed-55ee3929328f")]
  record IMFRateControl, lpVtbl : IMFRateControlVtbl* do
    GUID = LibC::GUID.new(0x88ddcd21_u32, 0x3c3_u16, 0x4275_u16, StaticArray[0x91_u8, 0xed_u8, 0x55_u8, 0xee_u8, 0x39_u8, 0x29_u8, 0x32_u8, 0x8f_u8])
    def query_interface(this : IMFRateControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRateControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRateControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_rate(this : IMFRateControl*, fThin : Win32cr::Foundation::BOOL, flRate : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rate.call(this, fThin, flRate)
    end
    def get_rate(this : IMFRateControl*, pfThin : Win32cr::Foundation::BOOL*, pflRate : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rate.call(this, pfThin, pflRate)
    end

  end

  @[Extern]
  record IMFTimecodeTranslateVtbl,
    query_interface : Proc(IMFTimecodeTranslate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimecodeTranslate*, UInt32),
    release : Proc(IMFTimecodeTranslate*, UInt32),
    begin_convert_timecode_to_hns : Proc(IMFTimecodeTranslate*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_convert_timecode_to_hns : Proc(IMFTimecodeTranslate*, Void*, Int64*, Win32cr::Foundation::HRESULT),
    begin_convert_hns_to_timecode : Proc(IMFTimecodeTranslate*, Int64, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_convert_hns_to_timecode : Proc(IMFTimecodeTranslate*, Void*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ab9d8661-f7e8-4ef4-9861-89f334f94e74")]
  record IMFTimecodeTranslate, lpVtbl : IMFTimecodeTranslateVtbl* do
    GUID = LibC::GUID.new(0xab9d8661_u32, 0xf7e8_u16, 0x4ef4_u16, StaticArray[0x98_u8, 0x61_u8, 0x89_u8, 0xf3_u8, 0x34_u8, 0xf9_u8, 0x4e_u8, 0x74_u8])
    def query_interface(this : IMFTimecodeTranslate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimecodeTranslate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimecodeTranslate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_convert_timecode_to_hns(this : IMFTimecodeTranslate*, pPropVarTimecode : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_convert_timecode_to_hns.call(this, pPropVarTimecode, pCallback, punkState)
    end
    def end_convert_timecode_to_hns(this : IMFTimecodeTranslate*, pResult : Void*, phnsTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_convert_timecode_to_hns.call(this, pResult, phnsTime)
    end
    def begin_convert_hns_to_timecode(this : IMFTimecodeTranslate*, hnsTime : Int64, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_convert_hns_to_timecode.call(this, hnsTime, pCallback, punkState)
    end
    def end_convert_hns_to_timecode(this : IMFTimecodeTranslate*, pResult : Void*, pPropVarTimecode : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_convert_hns_to_timecode.call(this, pResult, pPropVarTimecode)
    end

  end

  @[Extern]
  record IMFSeekInfoVtbl,
    query_interface : Proc(IMFSeekInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSeekInfo*, UInt32),
    release : Proc(IMFSeekInfo*, UInt32),
    get_nearest_key_frames : Proc(IMFSeekInfo*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("26afea53-d9ed-42b5-ab80-e64f9ee34779")]
  record IMFSeekInfo, lpVtbl : IMFSeekInfoVtbl* do
    GUID = LibC::GUID.new(0x26afea53_u32, 0xd9ed_u16, 0x42b5_u16, StaticArray[0xab_u8, 0x80_u8, 0xe6_u8, 0x4f_u8, 0x9e_u8, 0xe3_u8, 0x47_u8, 0x79_u8])
    def query_interface(this : IMFSeekInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSeekInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSeekInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_nearest_key_frames(this : IMFSeekInfo*, pguidTimeFormat : LibC::GUID*, pvarStartPosition : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pvarPreviousKeyFrame : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pvarNextKeyFrame : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_nearest_key_frames.call(this, pguidTimeFormat, pvarStartPosition, pvarPreviousKeyFrame, pvarNextKeyFrame)
    end

  end

  @[Extern]
  record IMFSimpleAudioVolumeVtbl,
    query_interface : Proc(IMFSimpleAudioVolume*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSimpleAudioVolume*, UInt32),
    release : Proc(IMFSimpleAudioVolume*, UInt32),
    set_master_volume : Proc(IMFSimpleAudioVolume*, Float32, Win32cr::Foundation::HRESULT),
    get_master_volume : Proc(IMFSimpleAudioVolume*, Float32*, Win32cr::Foundation::HRESULT),
    set_mute : Proc(IMFSimpleAudioVolume*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_mute : Proc(IMFSimpleAudioVolume*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("089edf13-cf71-4338-8d13-9e569dbdc319")]
  record IMFSimpleAudioVolume, lpVtbl : IMFSimpleAudioVolumeVtbl* do
    GUID = LibC::GUID.new(0x89edf13_u32, 0xcf71_u16, 0x4338_u16, StaticArray[0x8d_u8, 0x13_u8, 0x9e_u8, 0x56_u8, 0x9d_u8, 0xbd_u8, 0xc3_u8, 0x19_u8])
    def query_interface(this : IMFSimpleAudioVolume*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSimpleAudioVolume*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSimpleAudioVolume*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_master_volume(this : IMFSimpleAudioVolume*, fLevel : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_master_volume.call(this, fLevel)
    end
    def get_master_volume(this : IMFSimpleAudioVolume*, pfLevel : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_master_volume.call(this, pfLevel)
    end
    def set_mute(this : IMFSimpleAudioVolume*, bMute : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mute.call(this, bMute)
    end
    def get_mute(this : IMFSimpleAudioVolume*, pbMute : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mute.call(this, pbMute)
    end

  end

  @[Extern]
  record IMFAudioStreamVolumeVtbl,
    query_interface : Proc(IMFAudioStreamVolume*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFAudioStreamVolume*, UInt32),
    release : Proc(IMFAudioStreamVolume*, UInt32),
    get_channel_count : Proc(IMFAudioStreamVolume*, UInt32*, Win32cr::Foundation::HRESULT),
    set_channel_volume : Proc(IMFAudioStreamVolume*, UInt32, Float32, Win32cr::Foundation::HRESULT),
    get_channel_volume : Proc(IMFAudioStreamVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_all_volumes : Proc(IMFAudioStreamVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    get_all_volumes : Proc(IMFAudioStreamVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("76b1bbdb-4ec8-4f36-b106-70a9316df593")]
  record IMFAudioStreamVolume, lpVtbl : IMFAudioStreamVolumeVtbl* do
    GUID = LibC::GUID.new(0x76b1bbdb_u32, 0x4ec8_u16, 0x4f36_u16, StaticArray[0xb1_u8, 0x6_u8, 0x70_u8, 0xa9_u8, 0x31_u8, 0x6d_u8, 0xf5_u8, 0x93_u8])
    def query_interface(this : IMFAudioStreamVolume*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFAudioStreamVolume*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFAudioStreamVolume*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IMFAudioStreamVolume*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pdwCount)
    end
    def set_channel_volume(this : IMFAudioStreamVolume*, dwIndex : UInt32, fLevel : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_channel_volume.call(this, dwIndex, fLevel)
    end
    def get_channel_volume(this : IMFAudioStreamVolume*, dwIndex : UInt32, pfLevel : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_volume.call(this, dwIndex, pfLevel)
    end
    def set_all_volumes(this : IMFAudioStreamVolume*, dwCount : UInt32, pfVolumes : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_volumes.call(this, dwCount, pfVolumes)
    end
    def get_all_volumes(this : IMFAudioStreamVolume*, dwCount : UInt32, pfVolumes : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_volumes.call(this, dwCount, pfVolumes)
    end

  end

  @[Extern]
  record IMFAudioPolicyVtbl,
    query_interface : Proc(IMFAudioPolicy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFAudioPolicy*, UInt32),
    release : Proc(IMFAudioPolicy*, UInt32),
    set_grouping_param : Proc(IMFAudioPolicy*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_grouping_param : Proc(IMFAudioPolicy*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_display_name : Proc(IMFAudioPolicy*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_display_name : Proc(IMFAudioPolicy*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_icon_path : Proc(IMFAudioPolicy*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_icon_path : Proc(IMFAudioPolicy*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a0638c2b-6465-4395-9ae7-a321a9fd2856")]
  record IMFAudioPolicy, lpVtbl : IMFAudioPolicyVtbl* do
    GUID = LibC::GUID.new(0xa0638c2b_u32, 0x6465_u16, 0x4395_u16, StaticArray[0x9a_u8, 0xe7_u8, 0xa3_u8, 0x21_u8, 0xa9_u8, 0xfd_u8, 0x28_u8, 0x56_u8])
    def query_interface(this : IMFAudioPolicy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFAudioPolicy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFAudioPolicy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_grouping_param(this : IMFAudioPolicy*, rguidClass : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_grouping_param.call(this, rguidClass)
    end
    def get_grouping_param(this : IMFAudioPolicy*, pguidClass : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_grouping_param.call(this, pguidClass)
    end
    def set_display_name(this : IMFAudioPolicy*, pszName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_display_name.call(this, pszName)
    end
    def get_display_name(this : IMFAudioPolicy*, pszName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_name.call(this, pszName)
    end
    def set_icon_path(this : IMFAudioPolicy*, pszPath : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_icon_path.call(this, pszPath)
    end
    def get_icon_path(this : IMFAudioPolicy*, pszPath : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_icon_path.call(this, pszPath)
    end

  end

  @[Extern]
  record IMFSampleGrabberSinkCallbackVtbl,
    query_interface : Proc(IMFSampleGrabberSinkCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSampleGrabberSinkCallback*, UInt32),
    release : Proc(IMFSampleGrabberSinkCallback*, UInt32),
    on_clock_start : Proc(IMFSampleGrabberSinkCallback*, Int64, Int64, Win32cr::Foundation::HRESULT),
    on_clock_stop : Proc(IMFSampleGrabberSinkCallback*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_pause : Proc(IMFSampleGrabberSinkCallback*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_restart : Proc(IMFSampleGrabberSinkCallback*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_set_rate : Proc(IMFSampleGrabberSinkCallback*, Int64, Float32, Win32cr::Foundation::HRESULT),
    on_set_presentation_clock : Proc(IMFSampleGrabberSinkCallback*, Void*, Win32cr::Foundation::HRESULT),
    on_process_sample : Proc(IMFSampleGrabberSinkCallback*, LibC::GUID*, UInt32, Int64, Int64, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    on_shutdown : Proc(IMFSampleGrabberSinkCallback*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8c7b80bf-ee42-4b59-b1df-55668e1bdca8")]
  record IMFSampleGrabberSinkCallback, lpVtbl : IMFSampleGrabberSinkCallbackVtbl* do
    GUID = LibC::GUID.new(0x8c7b80bf_u32, 0xee42_u16, 0x4b59_u16, StaticArray[0xb1_u8, 0xdf_u8, 0x55_u8, 0x66_u8, 0x8e_u8, 0x1b_u8, 0xdc_u8, 0xa8_u8])
    def query_interface(this : IMFSampleGrabberSinkCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSampleGrabberSinkCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSampleGrabberSinkCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_clock_start(this : IMFSampleGrabberSinkCallback*, hnsSystemTime : Int64, llClockStartOffset : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_start.call(this, hnsSystemTime, llClockStartOffset)
    end
    def on_clock_stop(this : IMFSampleGrabberSinkCallback*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_stop.call(this, hnsSystemTime)
    end
    def on_clock_pause(this : IMFSampleGrabberSinkCallback*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_pause.call(this, hnsSystemTime)
    end
    def on_clock_restart(this : IMFSampleGrabberSinkCallback*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_restart.call(this, hnsSystemTime)
    end
    def on_clock_set_rate(this : IMFSampleGrabberSinkCallback*, hnsSystemTime : Int64, flRate : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_set_rate.call(this, hnsSystemTime, flRate)
    end
    def on_set_presentation_clock(this : IMFSampleGrabberSinkCallback*, pPresentationClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_set_presentation_clock.call(this, pPresentationClock)
    end
    def on_process_sample(this : IMFSampleGrabberSinkCallback*, guidMajorMediaType : LibC::GUID*, dwSampleFlags : UInt32, llSampleTime : Int64, llSampleDuration : Int64, pSampleBuffer : UInt8*, dwSampleSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_process_sample.call(this, guidMajorMediaType, dwSampleFlags, llSampleTime, llSampleDuration, pSampleBuffer, dwSampleSize)
    end
    def on_shutdown(this : IMFSampleGrabberSinkCallback*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_shutdown.call(this)
    end

  end

  @[Extern]
  record IMFSampleGrabberSinkCallback2Vtbl,
    query_interface : Proc(IMFSampleGrabberSinkCallback2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSampleGrabberSinkCallback2*, UInt32),
    release : Proc(IMFSampleGrabberSinkCallback2*, UInt32),
    on_clock_start : Proc(IMFSampleGrabberSinkCallback2*, Int64, Int64, Win32cr::Foundation::HRESULT),
    on_clock_stop : Proc(IMFSampleGrabberSinkCallback2*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_pause : Proc(IMFSampleGrabberSinkCallback2*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_restart : Proc(IMFSampleGrabberSinkCallback2*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_set_rate : Proc(IMFSampleGrabberSinkCallback2*, Int64, Float32, Win32cr::Foundation::HRESULT),
    on_set_presentation_clock : Proc(IMFSampleGrabberSinkCallback2*, Void*, Win32cr::Foundation::HRESULT),
    on_process_sample : Proc(IMFSampleGrabberSinkCallback2*, LibC::GUID*, UInt32, Int64, Int64, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    on_shutdown : Proc(IMFSampleGrabberSinkCallback2*, Win32cr::Foundation::HRESULT),
    on_process_sample_ex : Proc(IMFSampleGrabberSinkCallback2*, LibC::GUID*, UInt32, Int64, Int64, UInt8*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ca86aa50-c46e-429e-ab27-16d6ac6844cb")]
  record IMFSampleGrabberSinkCallback2, lpVtbl : IMFSampleGrabberSinkCallback2Vtbl* do
    GUID = LibC::GUID.new(0xca86aa50_u32, 0xc46e_u16, 0x429e_u16, StaticArray[0xab_u8, 0x27_u8, 0x16_u8, 0xd6_u8, 0xac_u8, 0x68_u8, 0x44_u8, 0xcb_u8])
    def query_interface(this : IMFSampleGrabberSinkCallback2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSampleGrabberSinkCallback2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSampleGrabberSinkCallback2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_clock_start(this : IMFSampleGrabberSinkCallback2*, hnsSystemTime : Int64, llClockStartOffset : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_start.call(this, hnsSystemTime, llClockStartOffset)
    end
    def on_clock_stop(this : IMFSampleGrabberSinkCallback2*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_stop.call(this, hnsSystemTime)
    end
    def on_clock_pause(this : IMFSampleGrabberSinkCallback2*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_pause.call(this, hnsSystemTime)
    end
    def on_clock_restart(this : IMFSampleGrabberSinkCallback2*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_restart.call(this, hnsSystemTime)
    end
    def on_clock_set_rate(this : IMFSampleGrabberSinkCallback2*, hnsSystemTime : Int64, flRate : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_set_rate.call(this, hnsSystemTime, flRate)
    end
    def on_set_presentation_clock(this : IMFSampleGrabberSinkCallback2*, pPresentationClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_set_presentation_clock.call(this, pPresentationClock)
    end
    def on_process_sample(this : IMFSampleGrabberSinkCallback2*, guidMajorMediaType : LibC::GUID*, dwSampleFlags : UInt32, llSampleTime : Int64, llSampleDuration : Int64, pSampleBuffer : UInt8*, dwSampleSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_process_sample.call(this, guidMajorMediaType, dwSampleFlags, llSampleTime, llSampleDuration, pSampleBuffer, dwSampleSize)
    end
    def on_shutdown(this : IMFSampleGrabberSinkCallback2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_shutdown.call(this)
    end
    def on_process_sample_ex(this : IMFSampleGrabberSinkCallback2*, guidMajorMediaType : LibC::GUID*, dwSampleFlags : UInt32, llSampleTime : Int64, llSampleDuration : Int64, pSampleBuffer : UInt8*, dwSampleSize : UInt32, pAttributes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_process_sample_ex.call(this, guidMajorMediaType, dwSampleFlags, llSampleTime, llSampleDuration, pSampleBuffer, dwSampleSize, pAttributes)
    end

  end

  @[Extern]
  record IMFWorkQueueServicesVtbl,
    query_interface : Proc(IMFWorkQueueServices*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFWorkQueueServices*, UInt32),
    release : Proc(IMFWorkQueueServices*, UInt32),
    begin_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, Void*, Win32cr::Foundation::HRESULT),
    begin_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServices*, Void*, Win32cr::Foundation::HRESULT),
    get_topology_work_queue_mmcss_class : Proc(IMFWorkQueueServices*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_topology_work_queue_mmcss_task_id : Proc(IMFWorkQueueServices*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    begin_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    begin_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServices*, Void*, Win32cr::Foundation::HRESULT),
    get_plaftorm_work_queue_mmcss_class : Proc(IMFWorkQueueServices*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_platform_work_queue_mmcss_task_id : Proc(IMFWorkQueueServices*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("35fe1bb8-a3a9-40fe-bbec-eb569c9ccca3")]
  record IMFWorkQueueServices, lpVtbl : IMFWorkQueueServicesVtbl* do
    GUID = LibC::GUID.new(0x35fe1bb8_u32, 0xa3a9_u16, 0x40fe_u16, StaticArray[0xbb_u8, 0xec_u8, 0xeb_u8, 0x56_u8, 0x9c_u8, 0x9c_u8, 0xcc_u8, 0xa3_u8])
    def query_interface(this : IMFWorkQueueServices*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFWorkQueueServices*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFWorkQueueServices*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_register_topology_work_queues_with_mmcss.call(this, pCallback, pState)
    end
    def end_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_register_topology_work_queues_with_mmcss.call(this, pResult)
    end
    def begin_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_unregister_topology_work_queues_with_mmcss.call(this, pCallback, pState)
    end
    def end_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServices*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_unregister_topology_work_queues_with_mmcss.call(this, pResult)
    end
    def get_topology_work_queue_mmcss_class(this : IMFWorkQueueServices*, dwTopologyWorkQueueId : UInt32, pwszClass : UInt16*, pcchClass : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topology_work_queue_mmcss_class.call(this, dwTopologyWorkQueueId, pwszClass, pcchClass)
    end
    def get_topology_work_queue_mmcss_task_id(this : IMFWorkQueueServices*, dwTopologyWorkQueueId : UInt32, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topology_work_queue_mmcss_task_id.call(this, dwTopologyWorkQueueId, pdwTaskId)
    end
    def begin_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, dwPlatformWorkQueue : UInt32, wszClass : Win32cr::Foundation::PWSTR, dwTaskId : UInt32, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_register_platform_work_queue_with_mmcss.call(this, dwPlatformWorkQueue, wszClass, dwTaskId, pCallback, pState)
    end
    def end_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, pResult : Void*, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_register_platform_work_queue_with_mmcss.call(this, pResult, pdwTaskId)
    end
    def begin_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, dwPlatformWorkQueue : UInt32, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_unregister_platform_work_queue_with_mmcss.call(this, dwPlatformWorkQueue, pCallback, pState)
    end
    def end_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServices*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_unregister_platform_work_queue_with_mmcss.call(this, pResult)
    end
    def get_plaftorm_work_queue_mmcss_class(this : IMFWorkQueueServices*, dwPlatformWorkQueueId : UInt32, pwszClass : UInt16*, pcchClass : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_plaftorm_work_queue_mmcss_class.call(this, dwPlatformWorkQueueId, pwszClass, pcchClass)
    end
    def get_platform_work_queue_mmcss_task_id(this : IMFWorkQueueServices*, dwPlatformWorkQueueId : UInt32, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_platform_work_queue_mmcss_task_id.call(this, dwPlatformWorkQueueId, pdwTaskId)
    end

  end

  @[Extern]
  record IMFWorkQueueServicesExVtbl,
    query_interface : Proc(IMFWorkQueueServicesEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFWorkQueueServicesEx*, UInt32),
    release : Proc(IMFWorkQueueServicesEx*, UInt32),
    begin_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_register_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, Void*, Win32cr::Foundation::HRESULT),
    begin_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_unregister_topology_work_queues_with_mmcss : Proc(IMFWorkQueueServicesEx*, Void*, Win32cr::Foundation::HRESULT),
    get_topology_work_queue_mmcss_class : Proc(IMFWorkQueueServicesEx*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_topology_work_queue_mmcss_task_id : Proc(IMFWorkQueueServicesEx*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    begin_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_register_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    begin_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_unregister_platform_work_queue_with_mmcss : Proc(IMFWorkQueueServicesEx*, Void*, Win32cr::Foundation::HRESULT),
    get_plaftorm_work_queue_mmcss_class : Proc(IMFWorkQueueServicesEx*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_platform_work_queue_mmcss_task_id : Proc(IMFWorkQueueServicesEx*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_topology_work_queue_mmcss_priority : Proc(IMFWorkQueueServicesEx*, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    begin_register_platform_work_queue_with_mmcss_ex : Proc(IMFWorkQueueServicesEx*, UInt32, Win32cr::Foundation::PWSTR, UInt32, Int32, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_platform_work_queue_mmcss_priority : Proc(IMFWorkQueueServicesEx*, UInt32, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("96bf961b-40fe-42f1-ba9d-320238b49700")]
  record IMFWorkQueueServicesEx, lpVtbl : IMFWorkQueueServicesExVtbl* do
    GUID = LibC::GUID.new(0x96bf961b_u32, 0x40fe_u16, 0x42f1_u16, StaticArray[0xba_u8, 0x9d_u8, 0x32_u8, 0x2_u8, 0x38_u8, 0xb4_u8, 0x97_u8, 0x0_u8])
    def query_interface(this : IMFWorkQueueServicesEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFWorkQueueServicesEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFWorkQueueServicesEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_register_topology_work_queues_with_mmcss.call(this, pCallback, pState)
    end
    def end_register_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_register_topology_work_queues_with_mmcss.call(this, pResult)
    end
    def begin_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_unregister_topology_work_queues_with_mmcss.call(this, pCallback, pState)
    end
    def end_unregister_topology_work_queues_with_mmcss(this : IMFWorkQueueServicesEx*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_unregister_topology_work_queues_with_mmcss.call(this, pResult)
    end
    def get_topology_work_queue_mmcss_class(this : IMFWorkQueueServicesEx*, dwTopologyWorkQueueId : UInt32, pwszClass : UInt16*, pcchClass : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topology_work_queue_mmcss_class.call(this, dwTopologyWorkQueueId, pwszClass, pcchClass)
    end
    def get_topology_work_queue_mmcss_task_id(this : IMFWorkQueueServicesEx*, dwTopologyWorkQueueId : UInt32, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topology_work_queue_mmcss_task_id.call(this, dwTopologyWorkQueueId, pdwTaskId)
    end
    def begin_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, dwPlatformWorkQueue : UInt32, wszClass : Win32cr::Foundation::PWSTR, dwTaskId : UInt32, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_register_platform_work_queue_with_mmcss.call(this, dwPlatformWorkQueue, wszClass, dwTaskId, pCallback, pState)
    end
    def end_register_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, pResult : Void*, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_register_platform_work_queue_with_mmcss.call(this, pResult, pdwTaskId)
    end
    def begin_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, dwPlatformWorkQueue : UInt32, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_unregister_platform_work_queue_with_mmcss.call(this, dwPlatformWorkQueue, pCallback, pState)
    end
    def end_unregister_platform_work_queue_with_mmcss(this : IMFWorkQueueServicesEx*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_unregister_platform_work_queue_with_mmcss.call(this, pResult)
    end
    def get_plaftorm_work_queue_mmcss_class(this : IMFWorkQueueServicesEx*, dwPlatformWorkQueueId : UInt32, pwszClass : UInt16*, pcchClass : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_plaftorm_work_queue_mmcss_class.call(this, dwPlatformWorkQueueId, pwszClass, pcchClass)
    end
    def get_platform_work_queue_mmcss_task_id(this : IMFWorkQueueServicesEx*, dwPlatformWorkQueueId : UInt32, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_platform_work_queue_mmcss_task_id.call(this, dwPlatformWorkQueueId, pdwTaskId)
    end
    def get_topology_work_queue_mmcss_priority(this : IMFWorkQueueServicesEx*, dwTopologyWorkQueueId : UInt32, plPriority : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topology_work_queue_mmcss_priority.call(this, dwTopologyWorkQueueId, plPriority)
    end
    def begin_register_platform_work_queue_with_mmcss_ex(this : IMFWorkQueueServicesEx*, dwPlatformWorkQueue : UInt32, wszClass : Win32cr::Foundation::PWSTR, dwTaskId : UInt32, lPriority : Int32, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_register_platform_work_queue_with_mmcss_ex.call(this, dwPlatformWorkQueue, wszClass, dwTaskId, lPriority, pCallback, pState)
    end
    def get_platform_work_queue_mmcss_priority(this : IMFWorkQueueServicesEx*, dwPlatformWorkQueueId : UInt32, plPriority : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_platform_work_queue_mmcss_priority.call(this, dwPlatformWorkQueueId, plPriority)
    end

  end

  @[Extern]
  record IMFQualityManagerVtbl,
    query_interface : Proc(IMFQualityManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFQualityManager*, UInt32),
    release : Proc(IMFQualityManager*, UInt32),
    notify_topology : Proc(IMFQualityManager*, Void*, Win32cr::Foundation::HRESULT),
    notify_presentation_clock : Proc(IMFQualityManager*, Void*, Win32cr::Foundation::HRESULT),
    notify_process_input : Proc(IMFQualityManager*, Void*, Int32, Void*, Win32cr::Foundation::HRESULT),
    notify_process_output : Proc(IMFQualityManager*, Void*, Int32, Void*, Win32cr::Foundation::HRESULT),
    notify_quality_event : Proc(IMFQualityManager*, Void*, Void*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFQualityManager*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8d009d86-5b9f-4115-b1fc-9f80d52ab8ab")]
  record IMFQualityManager, lpVtbl : IMFQualityManagerVtbl* do
    GUID = LibC::GUID.new(0x8d009d86_u32, 0x5b9f_u16, 0x4115_u16, StaticArray[0xb1_u8, 0xfc_u8, 0x9f_u8, 0x80_u8, 0xd5_u8, 0x2a_u8, 0xb8_u8, 0xab_u8])
    def query_interface(this : IMFQualityManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFQualityManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFQualityManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_topology(this : IMFQualityManager*, pTopology : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_topology.call(this, pTopology)
    end
    def notify_presentation_clock(this : IMFQualityManager*, pClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_presentation_clock.call(this, pClock)
    end
    def notify_process_input(this : IMFQualityManager*, pNode : Void*, lInputIndex : Int32, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_process_input.call(this, pNode, lInputIndex, pSample)
    end
    def notify_process_output(this : IMFQualityManager*, pNode : Void*, lOutputIndex : Int32, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_process_output.call(this, pNode, lOutputIndex, pSample)
    end
    def notify_quality_event(this : IMFQualityManager*, pObject : Void*, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_quality_event.call(this, pObject, pEvent)
    end
    def shutdown(this : IMFQualityManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFQualityAdviseVtbl,
    query_interface : Proc(IMFQualityAdvise*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFQualityAdvise*, UInt32),
    release : Proc(IMFQualityAdvise*, UInt32),
    set_drop_mode : Proc(IMFQualityAdvise*, Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE, Win32cr::Foundation::HRESULT),
    set_quality_level : Proc(IMFQualityAdvise*, Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL, Win32cr::Foundation::HRESULT),
    get_drop_mode : Proc(IMFQualityAdvise*, Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE*, Win32cr::Foundation::HRESULT),
    get_quality_level : Proc(IMFQualityAdvise*, Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL*, Win32cr::Foundation::HRESULT),
    drop_time : Proc(IMFQualityAdvise*, Int64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ec15e2e9-e36b-4f7c-8758-77d452ef4ce7")]
  record IMFQualityAdvise, lpVtbl : IMFQualityAdviseVtbl* do
    GUID = LibC::GUID.new(0xec15e2e9_u32, 0xe36b_u16, 0x4f7c_u16, StaticArray[0x87_u8, 0x58_u8, 0x77_u8, 0xd4_u8, 0x52_u8, 0xef_u8, 0x4c_u8, 0xe7_u8])
    def query_interface(this : IMFQualityAdvise*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFQualityAdvise*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFQualityAdvise*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_drop_mode(this : IMFQualityAdvise*, eDropMode : Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_drop_mode.call(this, eDropMode)
    end
    def set_quality_level(this : IMFQualityAdvise*, eQualityLevel : Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quality_level.call(this, eQualityLevel)
    end
    def get_drop_mode(this : IMFQualityAdvise*, peDropMode : Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drop_mode.call(this, peDropMode)
    end
    def get_quality_level(this : IMFQualityAdvise*, peQualityLevel : Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quality_level.call(this, peQualityLevel)
    end
    def drop_time(this : IMFQualityAdvise*, hnsAmountToDrop : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_time.call(this, hnsAmountToDrop)
    end

  end

  @[Extern]
  record IMFQualityAdvise2Vtbl,
    query_interface : Proc(IMFQualityAdvise2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFQualityAdvise2*, UInt32),
    release : Proc(IMFQualityAdvise2*, UInt32),
    set_drop_mode : Proc(IMFQualityAdvise2*, Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE, Win32cr::Foundation::HRESULT),
    set_quality_level : Proc(IMFQualityAdvise2*, Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL, Win32cr::Foundation::HRESULT),
    get_drop_mode : Proc(IMFQualityAdvise2*, Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE*, Win32cr::Foundation::HRESULT),
    get_quality_level : Proc(IMFQualityAdvise2*, Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL*, Win32cr::Foundation::HRESULT),
    drop_time : Proc(IMFQualityAdvise2*, Int64, Win32cr::Foundation::HRESULT),
    notify_quality_event : Proc(IMFQualityAdvise2*, Void*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f3706f0d-8ea2-4886-8000-7155e9ec2eae")]
  record IMFQualityAdvise2, lpVtbl : IMFQualityAdvise2Vtbl* do
    GUID = LibC::GUID.new(0xf3706f0d_u32, 0x8ea2_u16, 0x4886_u16, StaticArray[0x80_u8, 0x0_u8, 0x71_u8, 0x55_u8, 0xe9_u8, 0xec_u8, 0x2e_u8, 0xae_u8])
    def query_interface(this : IMFQualityAdvise2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFQualityAdvise2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFQualityAdvise2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_drop_mode(this : IMFQualityAdvise2*, eDropMode : Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_drop_mode.call(this, eDropMode)
    end
    def set_quality_level(this : IMFQualityAdvise2*, eQualityLevel : Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_quality_level.call(this, eQualityLevel)
    end
    def get_drop_mode(this : IMFQualityAdvise2*, peDropMode : Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drop_mode.call(this, peDropMode)
    end
    def get_quality_level(this : IMFQualityAdvise2*, peQualityLevel : Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_quality_level.call(this, peQualityLevel)
    end
    def drop_time(this : IMFQualityAdvise2*, hnsAmountToDrop : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.drop_time.call(this, hnsAmountToDrop)
    end
    def notify_quality_event(this : IMFQualityAdvise2*, pEvent : Void*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_quality_event.call(this, pEvent, pdwFlags)
    end

  end

  @[Extern]
  record IMFQualityAdviseLimitsVtbl,
    query_interface : Proc(IMFQualityAdviseLimits*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFQualityAdviseLimits*, UInt32),
    release : Proc(IMFQualityAdviseLimits*, UInt32),
    get_maximum_drop_mode : Proc(IMFQualityAdviseLimits*, Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE*, Win32cr::Foundation::HRESULT),
    get_minimum_quality_level : Proc(IMFQualityAdviseLimits*, Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9")]
  record IMFQualityAdviseLimits, lpVtbl : IMFQualityAdviseLimitsVtbl* do
    GUID = LibC::GUID.new(0xdfcd8e4d_u32, 0x30b5_u16, 0x4567_u16, StaticArray[0xac_u8, 0xaa_u8, 0x8e_u8, 0xb5_u8, 0xb7_u8, 0x85_u8, 0x3d_u8, 0xc9_u8])
    def query_interface(this : IMFQualityAdviseLimits*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFQualityAdviseLimits*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFQualityAdviseLimits*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_maximum_drop_mode(this : IMFQualityAdviseLimits*, peDropMode : Win32cr::Media::MediaFoundation::MF_QUALITY_DROP_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maximum_drop_mode.call(this, peDropMode)
    end
    def get_minimum_quality_level(this : IMFQualityAdviseLimits*, peQualityLevel : Win32cr::Media::MediaFoundation::MF_QUALITY_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minimum_quality_level.call(this, peQualityLevel)
    end

  end

  @[Extern]
  record IMFRealTimeClientVtbl,
    query_interface : Proc(IMFRealTimeClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRealTimeClient*, UInt32),
    release : Proc(IMFRealTimeClient*, UInt32),
    register_threads : Proc(IMFRealTimeClient*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    unregister_threads : Proc(IMFRealTimeClient*, Win32cr::Foundation::HRESULT),
    set_work_queue : Proc(IMFRealTimeClient*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2347d60b-3fb5-480c-8803-8df3adcd3ef0")]
  record IMFRealTimeClient, lpVtbl : IMFRealTimeClientVtbl* do
    GUID = LibC::GUID.new(0x2347d60b_u32, 0x3fb5_u16, 0x480c_u16, StaticArray[0x88_u8, 0x3_u8, 0x8d_u8, 0xf3_u8, 0xad_u8, 0xcd_u8, 0x3e_u8, 0xf0_u8])
    def query_interface(this : IMFRealTimeClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRealTimeClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRealTimeClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_threads(this : IMFRealTimeClient*, dwTaskIndex : UInt32, wszClass : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_threads.call(this, dwTaskIndex, wszClass)
    end
    def unregister_threads(this : IMFRealTimeClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_threads.call(this)
    end
    def set_work_queue(this : IMFRealTimeClient*, dwWorkQueueId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_work_queue.call(this, dwWorkQueueId)
    end

  end

  @[Extern]
  record IMFRealTimeClientExVtbl,
    query_interface : Proc(IMFRealTimeClientEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRealTimeClientEx*, UInt32),
    release : Proc(IMFRealTimeClientEx*, UInt32),
    register_threads_ex : Proc(IMFRealTimeClientEx*, UInt32*, Win32cr::Foundation::PWSTR, Int32, Win32cr::Foundation::HRESULT),
    unregister_threads : Proc(IMFRealTimeClientEx*, Win32cr::Foundation::HRESULT),
    set_work_queue_ex : Proc(IMFRealTimeClientEx*, UInt32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("03910848-ab16-4611-b100-17b88ae2f248")]
  record IMFRealTimeClientEx, lpVtbl : IMFRealTimeClientExVtbl* do
    GUID = LibC::GUID.new(0x3910848_u32, 0xab16_u16, 0x4611_u16, StaticArray[0xb1_u8, 0x0_u8, 0x17_u8, 0xb8_u8, 0x8a_u8, 0xe2_u8, 0xf2_u8, 0x48_u8])
    def query_interface(this : IMFRealTimeClientEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRealTimeClientEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRealTimeClientEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_threads_ex(this : IMFRealTimeClientEx*, pdwTaskIndex : UInt32*, wszClassName : Win32cr::Foundation::PWSTR, lBasePriority : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_threads_ex.call(this, pdwTaskIndex, wszClassName, lBasePriority)
    end
    def unregister_threads(this : IMFRealTimeClientEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_threads.call(this)
    end
    def set_work_queue_ex(this : IMFRealTimeClientEx*, dwMultithreadedWorkQueueId : UInt32, lWorkItemBasePriority : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_work_queue_ex.call(this, dwMultithreadedWorkQueueId, lWorkItemBasePriority)
    end

  end

  @[Extern]
  record IMFSequencerSourceVtbl,
    query_interface : Proc(IMFSequencerSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSequencerSource*, UInt32),
    release : Proc(IMFSequencerSource*, UInt32),
    append_topology : Proc(IMFSequencerSource*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    delete_topology : Proc(IMFSequencerSource*, UInt32, Win32cr::Foundation::HRESULT),
    get_presentation_context : Proc(IMFSequencerSource*, Void*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    update_topology : Proc(IMFSequencerSource*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    update_topology_flags : Proc(IMFSequencerSource*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("197cd219-19cb-4de1-a64c-acf2edcbe59e")]
  record IMFSequencerSource, lpVtbl : IMFSequencerSourceVtbl* do
    GUID = LibC::GUID.new(0x197cd219_u32, 0x19cb_u16, 0x4de1_u16, StaticArray[0xa6_u8, 0x4c_u8, 0xac_u8, 0xf2_u8, 0xed_u8, 0xcb_u8, 0xe5_u8, 0x9e_u8])
    def query_interface(this : IMFSequencerSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSequencerSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSequencerSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def append_topology(this : IMFSequencerSource*, pTopology : Void*, dwFlags : UInt32, pdwId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_topology.call(this, pTopology, dwFlags, pdwId)
    end
    def delete_topology(this : IMFSequencerSource*, dwId : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_topology.call(this, dwId)
    end
    def get_presentation_context(this : IMFSequencerSource*, pPD : Void*, pId : UInt32*, ppTopology : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_context.call(this, pPD, pId, ppTopology)
    end
    def update_topology(this : IMFSequencerSource*, dwId : UInt32, pTopology : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_topology.call(this, dwId, pTopology)
    end
    def update_topology_flags(this : IMFSequencerSource*, dwId : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_topology_flags.call(this, dwId, dwFlags)
    end

  end

  @[Extern]
  record IMFMediaSourceTopologyProviderVtbl,
    query_interface : Proc(IMFMediaSourceTopologyProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSourceTopologyProvider*, UInt32),
    release : Proc(IMFMediaSourceTopologyProvider*, UInt32),
    get_media_source_topology : Proc(IMFMediaSourceTopologyProvider*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0e1d6009-c9f3-442d-8c51-a42d2d49452f")]
  record IMFMediaSourceTopologyProvider, lpVtbl : IMFMediaSourceTopologyProviderVtbl* do
    GUID = LibC::GUID.new(0xe1d6009_u32, 0xc9f3_u16, 0x442d_u16, StaticArray[0x8c_u8, 0x51_u8, 0xa4_u8, 0x2d_u8, 0x2d_u8, 0x49_u8, 0x45_u8, 0x2f_u8])
    def query_interface(this : IMFMediaSourceTopologyProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSourceTopologyProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSourceTopologyProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_media_source_topology(this : IMFMediaSourceTopologyProvider*, pPresentationDescriptor : Void*, ppTopology : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_source_topology.call(this, pPresentationDescriptor, ppTopology)
    end

  end

  @[Extern]
  record IMFMediaSourcePresentationProviderVtbl,
    query_interface : Proc(IMFMediaSourcePresentationProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSourcePresentationProvider*, UInt32),
    release : Proc(IMFMediaSourcePresentationProvider*, UInt32),
    force_end_of_presentation : Proc(IMFMediaSourcePresentationProvider*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0e1d600a-c9f3-442d-8c51-a42d2d49452f")]
  record IMFMediaSourcePresentationProvider, lpVtbl : IMFMediaSourcePresentationProviderVtbl* do
    GUID = LibC::GUID.new(0xe1d600a_u32, 0xc9f3_u16, 0x442d_u16, StaticArray[0x8c_u8, 0x51_u8, 0xa4_u8, 0x2d_u8, 0x2d_u8, 0x49_u8, 0x45_u8, 0x2f_u8])
    def query_interface(this : IMFMediaSourcePresentationProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSourcePresentationProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSourcePresentationProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def force_end_of_presentation(this : IMFMediaSourcePresentationProvider*, pPresentationDescriptor : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.force_end_of_presentation.call(this, pPresentationDescriptor)
    end

  end

  @[Extern]
  record IMFTopologyNodeAttributeEditorVtbl,
    query_interface : Proc(IMFTopologyNodeAttributeEditor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTopologyNodeAttributeEditor*, UInt32),
    release : Proc(IMFTopologyNodeAttributeEditor*, UInt32),
    update_node_attributes : Proc(IMFTopologyNodeAttributeEditor*, UInt64, UInt32, Win32cr::Media::MediaFoundation::MFTOPONODE_ATTRIBUTE_UPDATE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("676aa6dd-238a-410d-bb99-65668d01605a")]
  record IMFTopologyNodeAttributeEditor, lpVtbl : IMFTopologyNodeAttributeEditorVtbl* do
    GUID = LibC::GUID.new(0x676aa6dd_u32, 0x238a_u16, 0x410d_u16, StaticArray[0xbb_u8, 0x99_u8, 0x65_u8, 0x66_u8, 0x8d_u8, 0x1_u8, 0x60_u8, 0x5a_u8])
    def query_interface(this : IMFTopologyNodeAttributeEditor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTopologyNodeAttributeEditor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTopologyNodeAttributeEditor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def update_node_attributes(this : IMFTopologyNodeAttributeEditor*, topo_id : UInt64, cUpdates : UInt32, pUpdates : Win32cr::Media::MediaFoundation::MFTOPONODE_ATTRIBUTE_UPDATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_node_attributes.call(this, topo_id, cUpdates, pUpdates)
    end

  end

  @[Extern]
  record IMFByteStreamBufferingVtbl,
    query_interface : Proc(IMFByteStreamBuffering*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFByteStreamBuffering*, UInt32),
    release : Proc(IMFByteStreamBuffering*, UInt32),
    set_buffering_params : Proc(IMFByteStreamBuffering*, Win32cr::Media::MediaFoundation::MFBYTESTREAM_BUFFERING_PARAMS*, Win32cr::Foundation::HRESULT),
    enable_buffering : Proc(IMFByteStreamBuffering*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    stop_buffering : Proc(IMFByteStreamBuffering*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e")]
  record IMFByteStreamBuffering, lpVtbl : IMFByteStreamBufferingVtbl* do
    GUID = LibC::GUID.new(0x6d66d782_u32, 0x1d4f_u16, 0x4db7_u16, StaticArray[0x8c_u8, 0x63_u8, 0xcb_u8, 0x8c_u8, 0x77_u8, 0xf1_u8, 0xef_u8, 0x5e_u8])
    def query_interface(this : IMFByteStreamBuffering*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFByteStreamBuffering*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFByteStreamBuffering*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_buffering_params(this : IMFByteStreamBuffering*, pParams : Win32cr::Media::MediaFoundation::MFBYTESTREAM_BUFFERING_PARAMS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_buffering_params.call(this, pParams)
    end
    def enable_buffering(this : IMFByteStreamBuffering*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_buffering.call(this, fEnable)
    end
    def stop_buffering(this : IMFByteStreamBuffering*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_buffering.call(this)
    end

  end

  @[Extern]
  record IMFByteStreamCacheControlVtbl,
    query_interface : Proc(IMFByteStreamCacheControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFByteStreamCacheControl*, UInt32),
    release : Proc(IMFByteStreamCacheControl*, UInt32),
    stop_background_transfer : Proc(IMFByteStreamCacheControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f5042ea4-7a96-4a75-aa7b-2be1ef7f88d5")]
  record IMFByteStreamCacheControl, lpVtbl : IMFByteStreamCacheControlVtbl* do
    GUID = LibC::GUID.new(0xf5042ea4_u32, 0x7a96_u16, 0x4a75_u16, StaticArray[0xaa_u8, 0x7b_u8, 0x2b_u8, 0xe1_u8, 0xef_u8, 0x7f_u8, 0x88_u8, 0xd5_u8])
    def query_interface(this : IMFByteStreamCacheControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFByteStreamCacheControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFByteStreamCacheControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def stop_background_transfer(this : IMFByteStreamCacheControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_background_transfer.call(this)
    end

  end

  @[Extern]
  record IMFByteStreamTimeSeekVtbl,
    query_interface : Proc(IMFByteStreamTimeSeek*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFByteStreamTimeSeek*, UInt32),
    release : Proc(IMFByteStreamTimeSeek*, UInt32),
    is_time_seek_supported : Proc(IMFByteStreamTimeSeek*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    time_seek : Proc(IMFByteStreamTimeSeek*, UInt64, Win32cr::Foundation::HRESULT),
    get_time_seek_result : Proc(IMFByteStreamTimeSeek*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("64976bfa-fb61-4041-9069-8c9a5f659beb")]
  record IMFByteStreamTimeSeek, lpVtbl : IMFByteStreamTimeSeekVtbl* do
    GUID = LibC::GUID.new(0x64976bfa_u32, 0xfb61_u16, 0x4041_u16, StaticArray[0x90_u8, 0x69_u8, 0x8c_u8, 0x9a_u8, 0x5f_u8, 0x65_u8, 0x9b_u8, 0xeb_u8])
    def query_interface(this : IMFByteStreamTimeSeek*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFByteStreamTimeSeek*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFByteStreamTimeSeek*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_time_seek_supported(this : IMFByteStreamTimeSeek*, pfTimeSeekIsSupported : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_time_seek_supported.call(this, pfTimeSeekIsSupported)
    end
    def time_seek(this : IMFByteStreamTimeSeek*, qwTimePosition : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.time_seek.call(this, qwTimePosition)
    end
    def get_time_seek_result(this : IMFByteStreamTimeSeek*, pqwStartTime : UInt64*, pqwStopTime : UInt64*, pqwDuration : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_seek_result.call(this, pqwStartTime, pqwStopTime, pqwDuration)
    end

  end

  @[Extern]
  record IMFByteStreamCacheControl2Vtbl,
    query_interface : Proc(IMFByteStreamCacheControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFByteStreamCacheControl2*, UInt32),
    release : Proc(IMFByteStreamCacheControl2*, UInt32),
    stop_background_transfer : Proc(IMFByteStreamCacheControl2*, Win32cr::Foundation::HRESULT),
    get_byte_ranges : Proc(IMFByteStreamCacheControl2*, UInt32*, Win32cr::Media::MediaFoundation::MF_BYTE_STREAM_CACHE_RANGE**, Win32cr::Foundation::HRESULT),
    set_cache_limit : Proc(IMFByteStreamCacheControl2*, UInt64, Win32cr::Foundation::HRESULT),
    is_background_transfer_active : Proc(IMFByteStreamCacheControl2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("71ce469c-f34b-49ea-a56b-2d2a10e51149")]
  record IMFByteStreamCacheControl2, lpVtbl : IMFByteStreamCacheControl2Vtbl* do
    GUID = LibC::GUID.new(0x71ce469c_u32, 0xf34b_u16, 0x49ea_u16, StaticArray[0xa5_u8, 0x6b_u8, 0x2d_u8, 0x2a_u8, 0x10_u8, 0xe5_u8, 0x11_u8, 0x49_u8])
    def query_interface(this : IMFByteStreamCacheControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFByteStreamCacheControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFByteStreamCacheControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def stop_background_transfer(this : IMFByteStreamCacheControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_background_transfer.call(this)
    end
    def get_byte_ranges(this : IMFByteStreamCacheControl2*, pcRanges : UInt32*, ppRanges : Win32cr::Media::MediaFoundation::MF_BYTE_STREAM_CACHE_RANGE**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_byte_ranges.call(this, pcRanges, ppRanges)
    end
    def set_cache_limit(this : IMFByteStreamCacheControl2*, qwBytes : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cache_limit.call(this, qwBytes)
    end
    def is_background_transfer_active(this : IMFByteStreamCacheControl2*, pfActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_background_transfer_active.call(this, pfActive)
    end

  end

  @[Extern]
  record IMFNetCredentialVtbl,
    query_interface : Proc(IMFNetCredential*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetCredential*, UInt32),
    release : Proc(IMFNetCredential*, UInt32),
    set_user : Proc(IMFNetCredential*, UInt8*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_password : Proc(IMFNetCredential*, UInt8*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_user : Proc(IMFNetCredential*, UInt8*, UInt32*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_password : Proc(IMFNetCredential*, UInt8*, UInt32*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    logged_on_user : Proc(IMFNetCredential*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5b87ef6a-7ed8-434f-ba0e-184fac1628d1")]
  record IMFNetCredential, lpVtbl : IMFNetCredentialVtbl* do
    GUID = LibC::GUID.new(0x5b87ef6a_u32, 0x7ed8_u16, 0x434f_u16, StaticArray[0xba_u8, 0xe_u8, 0x18_u8, 0x4f_u8, 0xac_u8, 0x16_u8, 0x28_u8, 0xd1_u8])
    def query_interface(this : IMFNetCredential*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetCredential*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetCredential*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_user(this : IMFNetCredential*, pbData : UInt8*, cbData : UInt32, fDataIsEncrypted : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_user.call(this, pbData, cbData, fDataIsEncrypted)
    end
    def set_password(this : IMFNetCredential*, pbData : UInt8*, cbData : UInt32, fDataIsEncrypted : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_password.call(this, pbData, cbData, fDataIsEncrypted)
    end
    def get_user(this : IMFNetCredential*, pbData : UInt8*, pcbData : UInt32*, fEncryptData : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_user.call(this, pbData, pcbData, fEncryptData)
    end
    def get_password(this : IMFNetCredential*, pbData : UInt8*, pcbData : UInt32*, fEncryptData : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_password.call(this, pbData, pcbData, fEncryptData)
    end
    def logged_on_user(this : IMFNetCredential*, pfLoggedOnUser : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.logged_on_user.call(this, pfLoggedOnUser)
    end

  end

  @[Extern]
  record IMFNetCredentialManagerVtbl,
    query_interface : Proc(IMFNetCredentialManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetCredentialManager*, UInt32),
    release : Proc(IMFNetCredentialManager*, UInt32),
    begin_get_credentials : Proc(IMFNetCredentialManager*, Win32cr::Media::MediaFoundation::MFNetCredentialManagerGetParam*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_credentials : Proc(IMFNetCredentialManager*, Void*, Void**, Win32cr::Foundation::HRESULT),
    set_good : Proc(IMFNetCredentialManager*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5b87ef6b-7ed8-434f-ba0e-184fac1628d1")]
  record IMFNetCredentialManager, lpVtbl : IMFNetCredentialManagerVtbl* do
    GUID = LibC::GUID.new(0x5b87ef6b_u32, 0x7ed8_u16, 0x434f_u16, StaticArray[0xba_u8, 0xe_u8, 0x18_u8, 0x4f_u8, 0xac_u8, 0x16_u8, 0x28_u8, 0xd1_u8])
    def query_interface(this : IMFNetCredentialManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetCredentialManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetCredentialManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_get_credentials(this : IMFNetCredentialManager*, pParam : Win32cr::Media::MediaFoundation::MFNetCredentialManagerGetParam*, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_credentials.call(this, pParam, pCallback, pState)
    end
    def end_get_credentials(this : IMFNetCredentialManager*, pResult : Void*, ppCred : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_credentials.call(this, pResult, ppCred)
    end
    def set_good(this : IMFNetCredentialManager*, pCred : Void*, fGood : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_good.call(this, pCred, fGood)
    end

  end

  @[Extern]
  record IMFNetCredentialCacheVtbl,
    query_interface : Proc(IMFNetCredentialCache*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetCredentialCache*, UInt32),
    release : Proc(IMFNetCredentialCache*, UInt32),
    get_credential : Proc(IMFNetCredentialCache*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    set_good : Proc(IMFNetCredentialCache*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_user_options : Proc(IMFNetCredentialCache*, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5b87ef6c-7ed8-434f-ba0e-184fac1628d1")]
  record IMFNetCredentialCache, lpVtbl : IMFNetCredentialCacheVtbl* do
    GUID = LibC::GUID.new(0x5b87ef6c_u32, 0x7ed8_u16, 0x434f_u16, StaticArray[0xba_u8, 0xe_u8, 0x18_u8, 0x4f_u8, 0xac_u8, 0x16_u8, 0x28_u8, 0xd1_u8])
    def query_interface(this : IMFNetCredentialCache*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetCredentialCache*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetCredentialCache*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_credential(this : IMFNetCredentialCache*, pszUrl : Win32cr::Foundation::PWSTR, pszRealm : Win32cr::Foundation::PWSTR, dwAuthenticationFlags : UInt32, ppCred : Void**, pdwRequirementsFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_credential.call(this, pszUrl, pszRealm, dwAuthenticationFlags, ppCred, pdwRequirementsFlags)
    end
    def set_good(this : IMFNetCredentialCache*, pCred : Void*, fGood : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_good.call(this, pCred, fGood)
    end
    def set_user_options(this : IMFNetCredentialCache*, pCred : Void*, dwOptionsFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_user_options.call(this, pCred, dwOptionsFlags)
    end

  end

  @[Extern]
  record IMFSSLCertificateManagerVtbl,
    query_interface : Proc(IMFSSLCertificateManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSSLCertificateManager*, UInt32),
    release : Proc(IMFSSLCertificateManager*, UInt32),
    get_client_certificate : Proc(IMFSSLCertificateManager*, Win32cr::Foundation::PWSTR, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    begin_get_client_certificate : Proc(IMFSSLCertificateManager*, Win32cr::Foundation::PWSTR, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_client_certificate : Proc(IMFSSLCertificateManager*, Void*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_certificate_policy : Proc(IMFSSLCertificateManager*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    on_server_certificate : Proc(IMFSSLCertificateManager*, Win32cr::Foundation::PWSTR, UInt8*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("61f7d887-1230-4a8b-aeba-8ad434d1a64d")]
  record IMFSSLCertificateManager, lpVtbl : IMFSSLCertificateManagerVtbl* do
    GUID = LibC::GUID.new(0x61f7d887_u32, 0x1230_u16, 0x4a8b_u16, StaticArray[0xae_u8, 0xba_u8, 0x8a_u8, 0xd4_u8, 0x34_u8, 0xd1_u8, 0xa6_u8, 0x4d_u8])
    def query_interface(this : IMFSSLCertificateManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSSLCertificateManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSSLCertificateManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_client_certificate(this : IMFSSLCertificateManager*, pszURL : Win32cr::Foundation::PWSTR, ppbData : UInt8**, pcbData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_client_certificate.call(this, pszURL, ppbData, pcbData)
    end
    def begin_get_client_certificate(this : IMFSSLCertificateManager*, pszURL : Win32cr::Foundation::PWSTR, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_client_certificate.call(this, pszURL, pCallback, pState)
    end
    def end_get_client_certificate(this : IMFSSLCertificateManager*, pResult : Void*, ppbData : UInt8**, pcbData : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_client_certificate.call(this, pResult, ppbData, pcbData)
    end
    def get_certificate_policy(this : IMFSSLCertificateManager*, pszURL : Win32cr::Foundation::PWSTR, pfOverrideAutomaticCheck : Win32cr::Foundation::BOOL*, pfClientCertificateAvailable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate_policy.call(this, pszURL, pfOverrideAutomaticCheck, pfClientCertificateAvailable)
    end
    def on_server_certificate(this : IMFSSLCertificateManager*, pszURL : Win32cr::Foundation::PWSTR, pbData : UInt8*, cbData : UInt32, pfIsGood : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_server_certificate.call(this, pszURL, pbData, cbData, pfIsGood)
    end

  end

  @[Extern]
  record IMFNetResourceFilterVtbl,
    query_interface : Proc(IMFNetResourceFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetResourceFilter*, UInt32),
    release : Proc(IMFNetResourceFilter*, UInt32),
    on_redirect : Proc(IMFNetResourceFilter*, Win32cr::Foundation::PWSTR, Int16*, Win32cr::Foundation::HRESULT),
    on_sending_request : Proc(IMFNetResourceFilter*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("091878a3-bf11-4a5c-bc9f-33995b06ef2d")]
  record IMFNetResourceFilter, lpVtbl : IMFNetResourceFilterVtbl* do
    GUID = LibC::GUID.new(0x91878a3_u32, 0xbf11_u16, 0x4a5c_u16, StaticArray[0xbc_u8, 0x9f_u8, 0x33_u8, 0x99_u8, 0x5b_u8, 0x6_u8, 0xef_u8, 0x2d_u8])
    def query_interface(this : IMFNetResourceFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetResourceFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetResourceFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_redirect(this : IMFNetResourceFilter*, pszUrl : Win32cr::Foundation::PWSTR, pvbCancel : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_redirect.call(this, pszUrl, pvbCancel)
    end
    def on_sending_request(this : IMFNetResourceFilter*, pszUrl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_sending_request.call(this, pszUrl)
    end

  end

  @[Extern]
  record IMFSourceOpenMonitorVtbl,
    query_interface : Proc(IMFSourceOpenMonitor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceOpenMonitor*, UInt32),
    release : Proc(IMFSourceOpenMonitor*, UInt32),
    on_source_event : Proc(IMFSourceOpenMonitor*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("059054b3-027c-494c-a27d-9113291cf87f")]
  record IMFSourceOpenMonitor, lpVtbl : IMFSourceOpenMonitorVtbl* do
    GUID = LibC::GUID.new(0x59054b3_u32, 0x27c_u16, 0x494c_u16, StaticArray[0xa2_u8, 0x7d_u8, 0x91_u8, 0x13_u8, 0x29_u8, 0x1c_u8, 0xf8_u8, 0x7f_u8])
    def query_interface(this : IMFSourceOpenMonitor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceOpenMonitor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceOpenMonitor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_source_event(this : IMFSourceOpenMonitor*, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_source_event.call(this, pEvent)
    end

  end

  @[Extern]
  record IMFNetProxyLocatorVtbl,
    query_interface : Proc(IMFNetProxyLocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetProxyLocator*, UInt32),
    release : Proc(IMFNetProxyLocator*, UInt32),
    find_first_proxy : Proc(IMFNetProxyLocator*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    find_next_proxy : Proc(IMFNetProxyLocator*, Win32cr::Foundation::HRESULT),
    register_proxy_result : Proc(IMFNetProxyLocator*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    get_current_proxy : Proc(IMFNetProxyLocator*, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    clone : Proc(IMFNetProxyLocator*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e9cd0383-a268-4bb4-82de-658d53574d41")]
  record IMFNetProxyLocator, lpVtbl : IMFNetProxyLocatorVtbl* do
    GUID = LibC::GUID.new(0xe9cd0383_u32, 0xa268_u16, 0x4bb4_u16, StaticArray[0x82_u8, 0xde_u8, 0x65_u8, 0x8d_u8, 0x53_u8, 0x57_u8, 0x4d_u8, 0x41_u8])
    def query_interface(this : IMFNetProxyLocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetProxyLocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetProxyLocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def find_first_proxy(this : IMFNetProxyLocator*, pszHost : Win32cr::Foundation::PWSTR, pszUrl : Win32cr::Foundation::PWSTR, fReserved : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_first_proxy.call(this, pszHost, pszUrl, fReserved)
    end
    def find_next_proxy(this : IMFNetProxyLocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_next_proxy.call(this)
    end
    def register_proxy_result(this : IMFNetProxyLocator*, hrOp : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_proxy_result.call(this, hrOp)
    end
    def get_current_proxy(this : IMFNetProxyLocator*, pszStr : UInt16*, pcchStr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_proxy.call(this, pszStr, pcchStr)
    end
    def clone(this : IMFNetProxyLocator*, ppProxyLocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppProxyLocator)
    end

  end

  @[Extern]
  record IMFNetProxyLocatorFactoryVtbl,
    query_interface : Proc(IMFNetProxyLocatorFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetProxyLocatorFactory*, UInt32),
    release : Proc(IMFNetProxyLocatorFactory*, UInt32),
    create_proxy_locator : Proc(IMFNetProxyLocatorFactory*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e9cd0384-a268-4bb4-82de-658d53574d41")]
  record IMFNetProxyLocatorFactory, lpVtbl : IMFNetProxyLocatorFactoryVtbl* do
    GUID = LibC::GUID.new(0xe9cd0384_u32, 0xa268_u16, 0x4bb4_u16, StaticArray[0x82_u8, 0xde_u8, 0x65_u8, 0x8d_u8, 0x53_u8, 0x57_u8, 0x4d_u8, 0x41_u8])
    def query_interface(this : IMFNetProxyLocatorFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetProxyLocatorFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetProxyLocatorFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_proxy_locator(this : IMFNetProxyLocatorFactory*, pszProtocol : Win32cr::Foundation::PWSTR, ppProxyLocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_proxy_locator.call(this, pszProtocol, ppProxyLocator)
    end

  end

  @[Extern]
  record IMFSaveJobVtbl,
    query_interface : Proc(IMFSaveJob*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSaveJob*, UInt32),
    release : Proc(IMFSaveJob*, UInt32),
    begin_save : Proc(IMFSaveJob*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_save : Proc(IMFSaveJob*, Void*, Win32cr::Foundation::HRESULT),
    cancel_save : Proc(IMFSaveJob*, Win32cr::Foundation::HRESULT),
    get_progress : Proc(IMFSaveJob*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e9931663-80bf-4c6e-98af-5dcf58747d1f")]
  record IMFSaveJob, lpVtbl : IMFSaveJobVtbl* do
    GUID = LibC::GUID.new(0xe9931663_u32, 0x80bf_u16, 0x4c6e_u16, StaticArray[0x98_u8, 0xaf_u8, 0x5d_u8, 0xcf_u8, 0x58_u8, 0x74_u8, 0x7d_u8, 0x1f_u8])
    def query_interface(this : IMFSaveJob*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSaveJob*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSaveJob*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_save(this : IMFSaveJob*, pStream : Void*, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_save.call(this, pStream, pCallback, pState)
    end
    def end_save(this : IMFSaveJob*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_save.call(this, pResult)
    end
    def cancel_save(this : IMFSaveJob*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_save.call(this)
    end
    def get_progress(this : IMFSaveJob*, pdwPercentComplete : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_progress.call(this, pdwPercentComplete)
    end

  end

  @[Extern]
  record IMFNetSchemeHandlerConfigVtbl,
    query_interface : Proc(IMFNetSchemeHandlerConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetSchemeHandlerConfig*, UInt32),
    release : Proc(IMFNetSchemeHandlerConfig*, UInt32),
    get_number_of_supported_protocols : Proc(IMFNetSchemeHandlerConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_protocol_type : Proc(IMFNetSchemeHandlerConfig*, UInt32, Win32cr::Media::MediaFoundation::MFNETSOURCE_PROTOCOL_TYPE*, Win32cr::Foundation::HRESULT),
    reset_protocol_rollover_settings : Proc(IMFNetSchemeHandlerConfig*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7be19e73-c9bf-468a-ac5a-a5e8653bec87")]
  record IMFNetSchemeHandlerConfig, lpVtbl : IMFNetSchemeHandlerConfigVtbl* do
    GUID = LibC::GUID.new(0x7be19e73_u32, 0xc9bf_u16, 0x468a_u16, StaticArray[0xac_u8, 0x5a_u8, 0xa5_u8, 0xe8_u8, 0x65_u8, 0x3b_u8, 0xec_u8, 0x87_u8])
    def query_interface(this : IMFNetSchemeHandlerConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetSchemeHandlerConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetSchemeHandlerConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_number_of_supported_protocols(this : IMFNetSchemeHandlerConfig*, pcProtocols : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_supported_protocols.call(this, pcProtocols)
    end
    def get_supported_protocol_type(this : IMFNetSchemeHandlerConfig*, nProtocolIndex : UInt32, pnProtocolType : Win32cr::Media::MediaFoundation::MFNETSOURCE_PROTOCOL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_protocol_type.call(this, nProtocolIndex, pnProtocolType)
    end
    def reset_protocol_rollover_settings(this : IMFNetSchemeHandlerConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_protocol_rollover_settings.call(this)
    end

  end

  @[Extern]
  record IMFSchemeHandlerVtbl,
    query_interface : Proc(IMFSchemeHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSchemeHandler*, UInt32),
    release : Proc(IMFSchemeHandler*, UInt32),
    begin_create_object : Proc(IMFSchemeHandler*, Win32cr::Foundation::PWSTR, UInt32, Void*, Void**, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_create_object : Proc(IMFSchemeHandler*, Void*, Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, Void**, Win32cr::Foundation::HRESULT),
    cancel_object_creation : Proc(IMFSchemeHandler*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6d4c7b74-52a0-4bb7-b0db-55f29f47a668")]
  record IMFSchemeHandler, lpVtbl : IMFSchemeHandlerVtbl* do
    GUID = LibC::GUID.new(0x6d4c7b74_u32, 0x52a0_u16, 0x4bb7_u16, StaticArray[0xb0_u8, 0xdb_u8, 0x55_u8, 0xf2_u8, 0x9f_u8, 0x47_u8, 0xa6_u8, 0x68_u8])
    def query_interface(this : IMFSchemeHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSchemeHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSchemeHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_create_object(this : IMFSchemeHandler*, pwszURL : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pProps : Void*, ppIUnknownCancelCookie : Void**, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_create_object.call(this, pwszURL, dwFlags, pProps, ppIUnknownCancelCookie, pCallback, punkState)
    end
    def end_create_object(this : IMFSchemeHandler*, pResult : Void*, pObjectType : Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_create_object.call(this, pResult, pObjectType, ppObject)
    end
    def cancel_object_creation(this : IMFSchemeHandler*, pIUnknownCancelCookie : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_object_creation.call(this, pIUnknownCancelCookie)
    end

  end

  @[Extern]
  record IMFByteStreamHandlerVtbl,
    query_interface : Proc(IMFByteStreamHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFByteStreamHandler*, UInt32),
    release : Proc(IMFByteStreamHandler*, UInt32),
    begin_create_object : Proc(IMFByteStreamHandler*, Void*, Win32cr::Foundation::PWSTR, UInt32, Void*, Void**, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_create_object : Proc(IMFByteStreamHandler*, Void*, Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, Void**, Win32cr::Foundation::HRESULT),
    cancel_object_creation : Proc(IMFByteStreamHandler*, Void*, Win32cr::Foundation::HRESULT),
    get_max_number_of_bytes_required_for_resolution : Proc(IMFByteStreamHandler*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bb420aa4-765b-4a1f-91fe-d6a8a143924c")]
  record IMFByteStreamHandler, lpVtbl : IMFByteStreamHandlerVtbl* do
    GUID = LibC::GUID.new(0xbb420aa4_u32, 0x765b_u16, 0x4a1f_u16, StaticArray[0x91_u8, 0xfe_u8, 0xd6_u8, 0xa8_u8, 0xa1_u8, 0x43_u8, 0x92_u8, 0x4c_u8])
    def query_interface(this : IMFByteStreamHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFByteStreamHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFByteStreamHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin_create_object(this : IMFByteStreamHandler*, pByteStream : Void*, pwszURL : Win32cr::Foundation::PWSTR, dwFlags : UInt32, pProps : Void*, ppIUnknownCancelCookie : Void**, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_create_object.call(this, pByteStream, pwszURL, dwFlags, pProps, ppIUnknownCancelCookie, pCallback, punkState)
    end
    def end_create_object(this : IMFByteStreamHandler*, pResult : Void*, pObjectType : Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_create_object.call(this, pResult, pObjectType, ppObject)
    end
    def cancel_object_creation(this : IMFByteStreamHandler*, pIUnknownCancelCookie : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_object_creation.call(this, pIUnknownCancelCookie)
    end
    def get_max_number_of_bytes_required_for_resolution(this : IMFByteStreamHandler*, pqwBytes : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_number_of_bytes_required_for_resolution.call(this, pqwBytes)
    end

  end

  @[Extern]
  record IMFTrustedInputVtbl,
    query_interface : Proc(IMFTrustedInput*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTrustedInput*, UInt32),
    release : Proc(IMFTrustedInput*, UInt32),
    get_input_trust_authority : Proc(IMFTrustedInput*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("542612c4-a1b8-4632-b521-de11ea64a0b0")]
  record IMFTrustedInput, lpVtbl : IMFTrustedInputVtbl* do
    GUID = LibC::GUID.new(0x542612c4_u32, 0xa1b8_u16, 0x4632_u16, StaticArray[0xb5_u8, 0x21_u8, 0xde_u8, 0x11_u8, 0xea_u8, 0x64_u8, 0xa0_u8, 0xb0_u8])
    def query_interface(this : IMFTrustedInput*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTrustedInput*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTrustedInput*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_trust_authority(this : IMFTrustedInput*, dwStreamID : UInt32, riid : LibC::GUID*, ppunkObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_trust_authority.call(this, dwStreamID, riid, ppunkObject)
    end

  end

  @[Extern]
  record IMFInputTrustAuthorityVtbl,
    query_interface : Proc(IMFInputTrustAuthority*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFInputTrustAuthority*, UInt32),
    release : Proc(IMFInputTrustAuthority*, UInt32),
    get_decrypter : Proc(IMFInputTrustAuthority*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    request_access : Proc(IMFInputTrustAuthority*, Win32cr::Media::MediaFoundation::MFPOLICYMANAGER_ACTION, Void**, Win32cr::Foundation::HRESULT),
    get_policy : Proc(IMFInputTrustAuthority*, Win32cr::Media::MediaFoundation::MFPOLICYMANAGER_ACTION, Void**, Win32cr::Foundation::HRESULT),
    bind_access : Proc(IMFInputTrustAuthority*, Win32cr::Media::MediaFoundation::MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*, Win32cr::Foundation::HRESULT),
    update_access : Proc(IMFInputTrustAuthority*, Win32cr::Media::MediaFoundation::MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*, Win32cr::Foundation::HRESULT),
    reset : Proc(IMFInputTrustAuthority*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d19f8e98-b126-4446-890c-5dcb7ad71453")]
  record IMFInputTrustAuthority, lpVtbl : IMFInputTrustAuthorityVtbl* do
    GUID = LibC::GUID.new(0xd19f8e98_u32, 0xb126_u16, 0x4446_u16, StaticArray[0x89_u8, 0xc_u8, 0x5d_u8, 0xcb_u8, 0x7a_u8, 0xd7_u8, 0x14_u8, 0x53_u8])
    def query_interface(this : IMFInputTrustAuthority*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFInputTrustAuthority*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFInputTrustAuthority*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_decrypter(this : IMFInputTrustAuthority*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_decrypter.call(this, riid, ppv)
    end
    def request_access(this : IMFInputTrustAuthority*, action : Win32cr::Media::MediaFoundation::MFPOLICYMANAGER_ACTION, ppContentEnablerActivate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_access.call(this, action, ppContentEnablerActivate)
    end
    def get_policy(this : IMFInputTrustAuthority*, action : Win32cr::Media::MediaFoundation::MFPOLICYMANAGER_ACTION, ppPolicy : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_policy.call(this, action, ppPolicy)
    end
    def bind_access(this : IMFInputTrustAuthority*, pParam : Win32cr::Media::MediaFoundation::MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bind_access.call(this, pParam)
    end
    def update_access(this : IMFInputTrustAuthority*, pParam : Win32cr::Media::MediaFoundation::MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_access.call(this, pParam)
    end
    def reset(this : IMFInputTrustAuthority*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end

  end

  @[Extern]
  record IMFTrustedOutputVtbl,
    query_interface : Proc(IMFTrustedOutput*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTrustedOutput*, UInt32),
    release : Proc(IMFTrustedOutput*, UInt32),
    get_output_trust_authority_count : Proc(IMFTrustedOutput*, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_trust_authority_by_index : Proc(IMFTrustedOutput*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    is_final : Proc(IMFTrustedOutput*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d19f8e95-b126-4446-890c-5dcb7ad71453")]
  record IMFTrustedOutput, lpVtbl : IMFTrustedOutputVtbl* do
    GUID = LibC::GUID.new(0xd19f8e95_u32, 0xb126_u16, 0x4446_u16, StaticArray[0x89_u8, 0xc_u8, 0x5d_u8, 0xcb_u8, 0x7a_u8, 0xd7_u8, 0x14_u8, 0x53_u8])
    def query_interface(this : IMFTrustedOutput*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTrustedOutput*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTrustedOutput*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_output_trust_authority_count(this : IMFTrustedOutput*, pcOutputTrustAuthorities : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_trust_authority_count.call(this, pcOutputTrustAuthorities)
    end
    def get_output_trust_authority_by_index(this : IMFTrustedOutput*, dwIndex : UInt32, ppauthority : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_trust_authority_by_index.call(this, dwIndex, ppauthority)
    end
    def is_final(this : IMFTrustedOutput*, pfIsFinal : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_final.call(this, pfIsFinal)
    end

  end

  @[Extern]
  record IMFOutputTrustAuthorityVtbl,
    query_interface : Proc(IMFOutputTrustAuthority*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFOutputTrustAuthority*, UInt32),
    release : Proc(IMFOutputTrustAuthority*, UInt32),
    get_action : Proc(IMFOutputTrustAuthority*, Win32cr::Media::MediaFoundation::MFPOLICYMANAGER_ACTION*, Win32cr::Foundation::HRESULT),
    set_policy : Proc(IMFOutputTrustAuthority*, Void**, UInt32, UInt8**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d19f8e94-b126-4446-890c-5dcb7ad71453")]
  record IMFOutputTrustAuthority, lpVtbl : IMFOutputTrustAuthorityVtbl* do
    GUID = LibC::GUID.new(0xd19f8e94_u32, 0xb126_u16, 0x4446_u16, StaticArray[0x89_u8, 0xc_u8, 0x5d_u8, 0xcb_u8, 0x7a_u8, 0xd7_u8, 0x14_u8, 0x53_u8])
    def query_interface(this : IMFOutputTrustAuthority*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFOutputTrustAuthority*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFOutputTrustAuthority*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_action(this : IMFOutputTrustAuthority*, pAction : Win32cr::Media::MediaFoundation::MFPOLICYMANAGER_ACTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_action.call(this, pAction)
    end
    def set_policy(this : IMFOutputTrustAuthority*, ppPolicy : Void**, nPolicy : UInt32, ppbTicket : UInt8**, pcbTicket : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_policy.call(this, ppPolicy, nPolicy, ppbTicket, pcbTicket)
    end

  end

  @[Extern]
  record IMFOutputPolicyVtbl,
    query_interface : Proc(IMFOutputPolicy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFOutputPolicy*, UInt32),
    release : Proc(IMFOutputPolicy*, UInt32),
    get_item : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFOutputPolicy*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFOutputPolicy*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFOutputPolicy*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFOutputPolicy*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFOutputPolicy*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFOutputPolicy*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFOutputPolicy*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFOutputPolicy*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFOutputPolicy*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFOutputPolicy*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFOutputPolicy*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFOutputPolicy*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFOutputPolicy*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFOutputPolicy*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFOutputPolicy*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFOutputPolicy*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFOutputPolicy*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFOutputPolicy*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFOutputPolicy*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFOutputPolicy*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFOutputPolicy*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFOutputPolicy*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFOutputPolicy*, Void*, Win32cr::Foundation::HRESULT),
    generate_required_schemas : Proc(IMFOutputPolicy*, UInt32, LibC::GUID, LibC::GUID*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_originator_id : Proc(IMFOutputPolicy*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_minimum_grl_version : Proc(IMFOutputPolicy*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7f00f10a-daed-41af-ab26-5fdfa4dfba3c")]
  record IMFOutputPolicy, lpVtbl : IMFOutputPolicyVtbl* do
    GUID = LibC::GUID.new(0x7f00f10a_u32, 0xdaed_u16, 0x41af_u16, StaticArray[0xab_u8, 0x26_u8, 0x5f_u8, 0xdf_u8, 0xa4_u8, 0xdf_u8, 0xba_u8, 0x3c_u8])
    def query_interface(this : IMFOutputPolicy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFOutputPolicy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFOutputPolicy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFOutputPolicy*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFOutputPolicy*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFOutputPolicy*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFOutputPolicy*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFOutputPolicy*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFOutputPolicy*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFOutputPolicy*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFOutputPolicy*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFOutputPolicy*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFOutputPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFOutputPolicy*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFOutputPolicy*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFOutputPolicy*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFOutputPolicy*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFOutputPolicy*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFOutputPolicy*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFOutputPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFOutputPolicy*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFOutputPolicy*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFOutputPolicy*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFOutputPolicy*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def generate_required_schemas(this : IMFOutputPolicy*, dwAttributes : UInt32, guidOutputSubType : LibC::GUID, rgGuidProtectionSchemasSupported : LibC::GUID*, cProtectionSchemasSupported : UInt32, ppRequiredProtectionSchemas : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_required_schemas.call(this, dwAttributes, guidOutputSubType, rgGuidProtectionSchemasSupported, cProtectionSchemasSupported, ppRequiredProtectionSchemas)
    end
    def get_originator_id(this : IMFOutputPolicy*, pguidOriginatorID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_originator_id.call(this, pguidOriginatorID)
    end
    def get_minimum_grl_version(this : IMFOutputPolicy*, pdwMinimumGRLVersion : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_minimum_grl_version.call(this, pdwMinimumGRLVersion)
    end

  end

  @[Extern]
  record IMFOutputSchemaVtbl,
    query_interface : Proc(IMFOutputSchema*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFOutputSchema*, UInt32),
    release : Proc(IMFOutputSchema*, UInt32),
    get_item : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFOutputSchema*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFOutputSchema*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFOutputSchema*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFOutputSchema*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFOutputSchema*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFOutputSchema*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFOutputSchema*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFOutputSchema*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFOutputSchema*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFOutputSchema*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFOutputSchema*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFOutputSchema*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFOutputSchema*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFOutputSchema*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFOutputSchema*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFOutputSchema*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFOutputSchema*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFOutputSchema*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFOutputSchema*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFOutputSchema*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFOutputSchema*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFOutputSchema*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFOutputSchema*, Void*, Win32cr::Foundation::HRESULT),
    get_schema_type : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_configuration_data : Proc(IMFOutputSchema*, UInt32*, Win32cr::Foundation::HRESULT),
    get_originator_id : Proc(IMFOutputSchema*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7be0fc5b-abd9-44fb-a5c8-f50136e71599")]
  record IMFOutputSchema, lpVtbl : IMFOutputSchemaVtbl* do
    GUID = LibC::GUID.new(0x7be0fc5b_u32, 0xabd9_u16, 0x44fb_u16, StaticArray[0xa5_u8, 0xc8_u8, 0xf5_u8, 0x1_u8, 0x36_u8, 0xe7_u8, 0x15_u8, 0x99_u8])
    def query_interface(this : IMFOutputSchema*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFOutputSchema*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFOutputSchema*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFOutputSchema*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFOutputSchema*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFOutputSchema*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFOutputSchema*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFOutputSchema*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFOutputSchema*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFOutputSchema*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFOutputSchema*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFOutputSchema*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFOutputSchema*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFOutputSchema*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFOutputSchema*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFOutputSchema*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFOutputSchema*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFOutputSchema*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFOutputSchema*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFOutputSchema*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFOutputSchema*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFOutputSchema*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFOutputSchema*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFOutputSchema*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFOutputSchema*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFOutputSchema*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFOutputSchema*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFOutputSchema*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFOutputSchema*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFOutputSchema*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFOutputSchema*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFOutputSchema*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFOutputSchema*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_schema_type(this : IMFOutputSchema*, pguidSchemaType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_schema_type.call(this, pguidSchemaType)
    end
    def get_configuration_data(this : IMFOutputSchema*, pdwVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_configuration_data.call(this, pdwVal)
    end
    def get_originator_id(this : IMFOutputSchema*, pguidOriginatorID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_originator_id.call(this, pguidOriginatorID)
    end

  end

  @[Extern]
  record IMFSecureChannelVtbl,
    query_interface : Proc(IMFSecureChannel*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSecureChannel*, UInt32),
    release : Proc(IMFSecureChannel*, UInt32),
    get_certificate : Proc(IMFSecureChannel*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    setup_session : Proc(IMFSecureChannel*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d0ae555d-3b12-4d97-b060-0990bc5aeb67")]
  record IMFSecureChannel, lpVtbl : IMFSecureChannelVtbl* do
    GUID = LibC::GUID.new(0xd0ae555d_u32, 0x3b12_u16, 0x4d97_u16, StaticArray[0xb0_u8, 0x60_u8, 0x9_u8, 0x90_u8, 0xbc_u8, 0x5a_u8, 0xeb_u8, 0x67_u8])
    def query_interface(this : IMFSecureChannel*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSecureChannel*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSecureChannel*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_certificate(this : IMFSecureChannel*, ppCert : UInt8**, pcbCert : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_certificate.call(this, ppCert, pcbCert)
    end
    def setup_session(this : IMFSecureChannel*, pbEncryptedSessionKey : UInt8*, cbSessionKey : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setup_session.call(this, pbEncryptedSessionKey, cbSessionKey)
    end

  end

  @[Extern]
  record IMFSampleProtectionVtbl,
    query_interface : Proc(IMFSampleProtection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSampleProtection*, UInt32),
    release : Proc(IMFSampleProtection*, UInt32),
    get_input_protection_version : Proc(IMFSampleProtection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_protection_version : Proc(IMFSampleProtection*, UInt32*, Win32cr::Foundation::HRESULT),
    get_protection_certificate : Proc(IMFSampleProtection*, UInt32, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    init_output_protection : Proc(IMFSampleProtection*, UInt32, UInt32, UInt8*, UInt32, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    init_input_protection : Proc(IMFSampleProtection*, UInt32, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8e36395f-c7b9-43c4-a54d-512b4af63c95")]
  record IMFSampleProtection, lpVtbl : IMFSampleProtectionVtbl* do
    GUID = LibC::GUID.new(0x8e36395f_u32, 0xc7b9_u16, 0x43c4_u16, StaticArray[0xa5_u8, 0x4d_u8, 0x51_u8, 0x2b_u8, 0x4a_u8, 0xf6_u8, 0x3c_u8, 0x95_u8])
    def query_interface(this : IMFSampleProtection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSampleProtection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSampleProtection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_input_protection_version(this : IMFSampleProtection*, pdwVersion : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_protection_version.call(this, pdwVersion)
    end
    def get_output_protection_version(this : IMFSampleProtection*, pdwVersion : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_protection_version.call(this, pdwVersion)
    end
    def get_protection_certificate(this : IMFSampleProtection*, dwVersion : UInt32, ppCert : UInt8**, pcbCert : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protection_certificate.call(this, dwVersion, ppCert, pcbCert)
    end
    def init_output_protection(this : IMFSampleProtection*, dwVersion : UInt32, dwOutputId : UInt32, pbCert : UInt8*, cbCert : UInt32, ppbSeed : UInt8**, pcbSeed : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_output_protection.call(this, dwVersion, dwOutputId, pbCert, cbCert, ppbSeed, pcbSeed)
    end
    def init_input_protection(this : IMFSampleProtection*, dwVersion : UInt32, dwInputId : UInt32, pbSeed : UInt8*, cbSeed : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_input_protection.call(this, dwVersion, dwInputId, pbSeed, cbSeed)
    end

  end

  @[Extern]
  record IMFMediaSinkPrerollVtbl,
    query_interface : Proc(IMFMediaSinkPreroll*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSinkPreroll*, UInt32),
    release : Proc(IMFMediaSinkPreroll*, UInt32),
    notify_preroll : Proc(IMFMediaSinkPreroll*, Int64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5dfd4b2a-7674-4110-a4e6-8a68fd5f3688")]
  record IMFMediaSinkPreroll, lpVtbl : IMFMediaSinkPrerollVtbl* do
    GUID = LibC::GUID.new(0x5dfd4b2a_u32, 0x7674_u16, 0x4110_u16, StaticArray[0xa4_u8, 0xe6_u8, 0x8a_u8, 0x68_u8, 0xfd_u8, 0x5f_u8, 0x36_u8, 0x88_u8])
    def query_interface(this : IMFMediaSinkPreroll*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSinkPreroll*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSinkPreroll*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def notify_preroll(this : IMFMediaSinkPreroll*, hnsUpcomingStartTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_preroll.call(this, hnsUpcomingStartTime)
    end

  end

  @[Extern]
  record IMFFinalizableMediaSinkVtbl,
    query_interface : Proc(IMFFinalizableMediaSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFFinalizableMediaSink*, UInt32),
    release : Proc(IMFFinalizableMediaSink*, UInt32),
    get_characteristics : Proc(IMFFinalizableMediaSink*, UInt32*, Win32cr::Foundation::HRESULT),
    add_stream_sink : Proc(IMFFinalizableMediaSink*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    remove_stream_sink : Proc(IMFFinalizableMediaSink*, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_sink_count : Proc(IMFFinalizableMediaSink*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_sink_by_index : Proc(IMFFinalizableMediaSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_stream_sink_by_id : Proc(IMFFinalizableMediaSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_presentation_clock : Proc(IMFFinalizableMediaSink*, Void*, Win32cr::Foundation::HRESULT),
    get_presentation_clock : Proc(IMFFinalizableMediaSink*, Void**, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFFinalizableMediaSink*, Win32cr::Foundation::HRESULT),
    begin_finalize : Proc(IMFFinalizableMediaSink*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_finalize : Proc(IMFFinalizableMediaSink*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("eaecb74a-9a50-42ce-9541-6a7f57aa4ad7")]
  record IMFFinalizableMediaSink, lpVtbl : IMFFinalizableMediaSinkVtbl* do
    GUID = LibC::GUID.new(0xeaecb74a_u32, 0x9a50_u16, 0x42ce_u16, StaticArray[0x95_u8, 0x41_u8, 0x6a_u8, 0x7f_u8, 0x57_u8, 0xaa_u8, 0x4a_u8, 0xd7_u8])
    def query_interface(this : IMFFinalizableMediaSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFFinalizableMediaSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFFinalizableMediaSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_characteristics(this : IMFFinalizableMediaSink*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_characteristics.call(this, pdwCharacteristics)
    end
    def add_stream_sink(this : IMFFinalizableMediaSink*, dwStreamSinkIdentifier : UInt32, pMediaType : Void*, ppStreamSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream_sink.call(this, dwStreamSinkIdentifier, pMediaType, ppStreamSink)
    end
    def remove_stream_sink(this : IMFFinalizableMediaSink*, dwStreamSinkIdentifier : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream_sink.call(this, dwStreamSinkIdentifier)
    end
    def get_stream_sink_count(this : IMFFinalizableMediaSink*, pcStreamSinkCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_sink_count.call(this, pcStreamSinkCount)
    end
    def get_stream_sink_by_index(this : IMFFinalizableMediaSink*, dwIndex : UInt32, ppStreamSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_sink_by_index.call(this, dwIndex, ppStreamSink)
    end
    def get_stream_sink_by_id(this : IMFFinalizableMediaSink*, dwStreamSinkIdentifier : UInt32, ppStreamSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_sink_by_id.call(this, dwStreamSinkIdentifier, ppStreamSink)
    end
    def set_presentation_clock(this : IMFFinalizableMediaSink*, pPresentationClock : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_presentation_clock.call(this, pPresentationClock)
    end
    def get_presentation_clock(this : IMFFinalizableMediaSink*, ppPresentationClock : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_clock.call(this, ppPresentationClock)
    end
    def shutdown(this : IMFFinalizableMediaSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def begin_finalize(this : IMFFinalizableMediaSink*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_finalize.call(this, pCallback, punkState)
    end
    def end_finalize(this : IMFFinalizableMediaSink*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_finalize.call(this, pResult)
    end

  end

  @[Extern]
  record IMFStreamingSinkConfigVtbl,
    query_interface : Proc(IMFStreamingSinkConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFStreamingSinkConfig*, UInt32),
    release : Proc(IMFStreamingSinkConfig*, UInt32),
    start_streaming : Proc(IMFStreamingSinkConfig*, Win32cr::Foundation::BOOL, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9db7aa41-3cc5-40d4-8509-555804ad34cc")]
  record IMFStreamingSinkConfig, lpVtbl : IMFStreamingSinkConfigVtbl* do
    GUID = LibC::GUID.new(0x9db7aa41_u32, 0x3cc5_u16, 0x40d4_u16, StaticArray[0x85_u8, 0x9_u8, 0x55_u8, 0x58_u8, 0x4_u8, 0xad_u8, 0x34_u8, 0xcc_u8])
    def query_interface(this : IMFStreamingSinkConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFStreamingSinkConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFStreamingSinkConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_streaming(this : IMFStreamingSinkConfig*, fSeekOffsetIsByteOffset : Win32cr::Foundation::BOOL, qwSeekOffset : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_streaming.call(this, fSeekOffsetIsByteOffset, qwSeekOffset)
    end

  end

  @[Extern]
  record IMFRemoteProxyVtbl,
    query_interface : Proc(IMFRemoteProxy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRemoteProxy*, UInt32),
    release : Proc(IMFRemoteProxy*, UInt32),
    get_remote_object : Proc(IMFRemoteProxy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_remote_host : Proc(IMFRemoteProxy*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("994e23ad-1cc2-493c-b9fa-46f1cb040fa4")]
  record IMFRemoteProxy, lpVtbl : IMFRemoteProxyVtbl* do
    GUID = LibC::GUID.new(0x994e23ad_u32, 0x1cc2_u16, 0x493c_u16, StaticArray[0xb9_u8, 0xfa_u8, 0x46_u8, 0xf1_u8, 0xcb_u8, 0x4_u8, 0xf_u8, 0xa4_u8])
    def query_interface(this : IMFRemoteProxy*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRemoteProxy*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRemoteProxy*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_remote_object(this : IMFRemoteProxy*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_remote_object.call(this, riid, ppv)
    end
    def get_remote_host(this : IMFRemoteProxy*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_remote_host.call(this, riid, ppv)
    end

  end

  @[Extern]
  record IMFObjectReferenceStreamVtbl,
    query_interface : Proc(IMFObjectReferenceStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFObjectReferenceStream*, UInt32),
    release : Proc(IMFObjectReferenceStream*, UInt32),
    save_reference : Proc(IMFObjectReferenceStream*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    load_reference : Proc(IMFObjectReferenceStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("09ef5be3-c8a7-469e-8b70-73bf25bb193f")]
  record IMFObjectReferenceStream, lpVtbl : IMFObjectReferenceStreamVtbl* do
    GUID = LibC::GUID.new(0x9ef5be3_u32, 0xc8a7_u16, 0x469e_u16, StaticArray[0x8b_u8, 0x70_u8, 0x73_u8, 0xbf_u8, 0x25_u8, 0xbb_u8, 0x19_u8, 0x3f_u8])
    def query_interface(this : IMFObjectReferenceStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFObjectReferenceStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFObjectReferenceStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def save_reference(this : IMFObjectReferenceStream*, riid : LibC::GUID*, pUnk : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.save_reference.call(this, riid, pUnk)
    end
    def load_reference(this : IMFObjectReferenceStream*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_reference.call(this, riid, ppv)
    end

  end

  @[Extern]
  record IMFPMPHostVtbl,
    query_interface : Proc(IMFPMPHost*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMPHost*, UInt32),
    release : Proc(IMFPMPHost*, UInt32),
    lock_process : Proc(IMFPMPHost*, Win32cr::Foundation::HRESULT),
    unlock_process : Proc(IMFPMPHost*, Win32cr::Foundation::HRESULT),
    create_object_by_clsid : Proc(IMFPMPHost*, LibC::GUID*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f70ca1a9-fdc7-4782-b994-adffb1c98606")]
  record IMFPMPHost, lpVtbl : IMFPMPHostVtbl* do
    GUID = LibC::GUID.new(0xf70ca1a9_u32, 0xfdc7_u16, 0x4782_u16, StaticArray[0xb9_u8, 0x94_u8, 0xad_u8, 0xff_u8, 0xb1_u8, 0xc9_u8, 0x86_u8, 0x6_u8])
    def query_interface(this : IMFPMPHost*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMPHost*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMPHost*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock_process(this : IMFPMPHost*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_process.call(this)
    end
    def unlock_process(this : IMFPMPHost*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_process.call(this)
    end
    def create_object_by_clsid(this : IMFPMPHost*, clsid : LibC::GUID*, pStream : Void*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_object_by_clsid.call(this, clsid, pStream, riid, ppv)
    end

  end

  @[Extern]
  record IMFPMPClientVtbl,
    query_interface : Proc(IMFPMPClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMPClient*, UInt32),
    release : Proc(IMFPMPClient*, UInt32),
    set_pmp_host : Proc(IMFPMPClient*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6c4e655d-ead8-4421-b6b9-54dcdbbdf820")]
  record IMFPMPClient, lpVtbl : IMFPMPClientVtbl* do
    GUID = LibC::GUID.new(0x6c4e655d_u32, 0xead8_u16, 0x4421_u16, StaticArray[0xb6_u8, 0xb9_u8, 0x54_u8, 0xdc_u8, 0xdb_u8, 0xbd_u8, 0xf8_u8, 0x20_u8])
    def query_interface(this : IMFPMPClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMPClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMPClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_pmp_host(this : IMFPMPClient*, pPMPHost : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pmp_host.call(this, pPMPHost)
    end

  end

  @[Extern]
  record IMFPMPServerVtbl,
    query_interface : Proc(IMFPMPServer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMPServer*, UInt32),
    release : Proc(IMFPMPServer*, UInt32),
    lock_process : Proc(IMFPMPServer*, Win32cr::Foundation::HRESULT),
    unlock_process : Proc(IMFPMPServer*, Win32cr::Foundation::HRESULT),
    create_object_by_clsid : Proc(IMFPMPServer*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("994e23af-1cc2-493c-b9fa-46f1cb040fa4")]
  record IMFPMPServer, lpVtbl : IMFPMPServerVtbl* do
    GUID = LibC::GUID.new(0x994e23af_u32, 0x1cc2_u16, 0x493c_u16, StaticArray[0xb9_u8, 0xfa_u8, 0x46_u8, 0xf1_u8, 0xcb_u8, 0x4_u8, 0xf_u8, 0xa4_u8])
    def query_interface(this : IMFPMPServer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMPServer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMPServer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock_process(this : IMFPMPServer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_process.call(this)
    end
    def unlock_process(this : IMFPMPServer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_process.call(this)
    end
    def create_object_by_clsid(this : IMFPMPServer*, clsid : LibC::GUID*, riid : LibC::GUID*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_object_by_clsid.call(this, clsid, riid, ppObject)
    end

  end

  @[Extern]
  record IMFRemoteDesktopPluginVtbl,
    query_interface : Proc(IMFRemoteDesktopPlugin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRemoteDesktopPlugin*, UInt32),
    release : Proc(IMFRemoteDesktopPlugin*, UInt32),
    update_topology : Proc(IMFRemoteDesktopPlugin*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1cde6309-cae0-4940-907e-c1ec9c3d1d4a")]
  record IMFRemoteDesktopPlugin, lpVtbl : IMFRemoteDesktopPluginVtbl* do
    GUID = LibC::GUID.new(0x1cde6309_u32, 0xcae0_u16, 0x4940_u16, StaticArray[0x90_u8, 0x7e_u8, 0xc1_u8, 0xec_u8, 0x9c_u8, 0x3d_u8, 0x1d_u8, 0x4a_u8])
    def query_interface(this : IMFRemoteDesktopPlugin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRemoteDesktopPlugin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRemoteDesktopPlugin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def update_topology(this : IMFRemoteDesktopPlugin*, pTopology : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_topology.call(this, pTopology)
    end

  end

  @[Extern]
  record IMFSAMIStyleVtbl,
    query_interface : Proc(IMFSAMIStyle*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSAMIStyle*, UInt32),
    release : Proc(IMFSAMIStyle*, UInt32),
    get_style_count : Proc(IMFSAMIStyle*, UInt32*, Win32cr::Foundation::HRESULT),
    get_styles : Proc(IMFSAMIStyle*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    set_selected_style : Proc(IMFSAMIStyle*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_selected_style : Proc(IMFSAMIStyle*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a7e025dd-5303-4a62-89d6-e747e1efac73")]
  record IMFSAMIStyle, lpVtbl : IMFSAMIStyleVtbl* do
    GUID = LibC::GUID.new(0xa7e025dd_u32, 0x5303_u16, 0x4a62_u16, StaticArray[0x89_u8, 0xd6_u8, 0xe7_u8, 0x47_u8, 0xe1_u8, 0xef_u8, 0xac_u8, 0x73_u8])
    def query_interface(this : IMFSAMIStyle*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSAMIStyle*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSAMIStyle*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_style_count(this : IMFSAMIStyle*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_style_count.call(this, pdwCount)
    end
    def get_styles(this : IMFSAMIStyle*, pPropVarStyleArray : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_styles.call(this, pPropVarStyleArray)
    end
    def set_selected_style(this : IMFSAMIStyle*, pwszStyle : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_selected_style.call(this, pwszStyle)
    end
    def get_selected_style(this : IMFSAMIStyle*, ppwszStyle : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selected_style.call(this, ppwszStyle)
    end

  end

  @[Extern]
  record IMFTranscodeProfileVtbl,
    query_interface : Proc(IMFTranscodeProfile*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTranscodeProfile*, UInt32),
    release : Proc(IMFTranscodeProfile*, UInt32),
    set_audio_attributes : Proc(IMFTranscodeProfile*, Void*, Win32cr::Foundation::HRESULT),
    get_audio_attributes : Proc(IMFTranscodeProfile*, Void**, Win32cr::Foundation::HRESULT),
    set_video_attributes : Proc(IMFTranscodeProfile*, Void*, Win32cr::Foundation::HRESULT),
    get_video_attributes : Proc(IMFTranscodeProfile*, Void**, Win32cr::Foundation::HRESULT),
    set_container_attributes : Proc(IMFTranscodeProfile*, Void*, Win32cr::Foundation::HRESULT),
    get_container_attributes : Proc(IMFTranscodeProfile*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4adfdba3-7ab0-4953-a62b-461e7ff3da1e")]
  record IMFTranscodeProfile, lpVtbl : IMFTranscodeProfileVtbl* do
    GUID = LibC::GUID.new(0x4adfdba3_u32, 0x7ab0_u16, 0x4953_u16, StaticArray[0xa6_u8, 0x2b_u8, 0x46_u8, 0x1e_u8, 0x7f_u8, 0xf3_u8, 0xda_u8, 0x1e_u8])
    def query_interface(this : IMFTranscodeProfile*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTranscodeProfile*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTranscodeProfile*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_audio_attributes(this : IMFTranscodeProfile*, pAttrs : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_audio_attributes.call(this, pAttrs)
    end
    def get_audio_attributes(this : IMFTranscodeProfile*, ppAttrs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_attributes.call(this, ppAttrs)
    end
    def set_video_attributes(this : IMFTranscodeProfile*, pAttrs : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_attributes.call(this, pAttrs)
    end
    def get_video_attributes(this : IMFTranscodeProfile*, ppAttrs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_attributes.call(this, ppAttrs)
    end
    def set_container_attributes(this : IMFTranscodeProfile*, pAttrs : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_container_attributes.call(this, pAttrs)
    end
    def get_container_attributes(this : IMFTranscodeProfile*, ppAttrs : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_container_attributes.call(this, ppAttrs)
    end

  end

  @[Extern]
  record IMFTranscodeSinkInfoProviderVtbl,
    query_interface : Proc(IMFTranscodeSinkInfoProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTranscodeSinkInfoProvider*, UInt32),
    release : Proc(IMFTranscodeSinkInfoProvider*, UInt32),
    set_output_file : Proc(IMFTranscodeSinkInfoProvider*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_output_byte_stream : Proc(IMFTranscodeSinkInfoProvider*, Void*, Win32cr::Foundation::HRESULT),
    set_profile : Proc(IMFTranscodeSinkInfoProvider*, Void*, Win32cr::Foundation::HRESULT),
    get_sink_info : Proc(IMFTranscodeSinkInfoProvider*, Win32cr::Media::MediaFoundation::MF_TRANSCODE_SINK_INFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8cffcd2e-5a03-4a3a-aff7-edcd107c620e")]
  record IMFTranscodeSinkInfoProvider, lpVtbl : IMFTranscodeSinkInfoProviderVtbl* do
    GUID = LibC::GUID.new(0x8cffcd2e_u32, 0x5a03_u16, 0x4a3a_u16, StaticArray[0xaf_u8, 0xf7_u8, 0xed_u8, 0xcd_u8, 0x10_u8, 0x7c_u8, 0x62_u8, 0xe_u8])
    def query_interface(this : IMFTranscodeSinkInfoProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTranscodeSinkInfoProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTranscodeSinkInfoProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_output_file(this : IMFTranscodeSinkInfoProvider*, pwszFileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_file.call(this, pwszFileName)
    end
    def set_output_byte_stream(this : IMFTranscodeSinkInfoProvider*, pByteStreamActivate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_byte_stream.call(this, pByteStreamActivate)
    end
    def set_profile(this : IMFTranscodeSinkInfoProvider*, pProfile : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_profile.call(this, pProfile)
    end
    def get_sink_info(this : IMFTranscodeSinkInfoProvider*, pSinkInfo : Win32cr::Media::MediaFoundation::MF_TRANSCODE_SINK_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sink_info.call(this, pSinkInfo)
    end

  end

  @[Extern]
  record IMFFieldOfUseMFTUnlockVtbl,
    query_interface : Proc(IMFFieldOfUseMFTUnlock*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFFieldOfUseMFTUnlock*, UInt32),
    release : Proc(IMFFieldOfUseMFTUnlock*, UInt32),
    unlock : Proc(IMFFieldOfUseMFTUnlock*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("508e71d3-ec66-4fc3-8775-b4b9ed6ba847")]
  record IMFFieldOfUseMFTUnlock, lpVtbl : IMFFieldOfUseMFTUnlockVtbl* do
    GUID = LibC::GUID.new(0x508e71d3_u32, 0xec66_u16, 0x4fc3_u16, StaticArray[0x87_u8, 0x75_u8, 0xb4_u8, 0xb9_u8, 0xed_u8, 0x6b_u8, 0xa8_u8, 0x47_u8])
    def query_interface(this : IMFFieldOfUseMFTUnlock*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFFieldOfUseMFTUnlock*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFFieldOfUseMFTUnlock*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def unlock(this : IMFFieldOfUseMFTUnlock*, pUnkMFT : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock.call(this, pUnkMFT)
    end

  end

  @[Extern]
  record IMFLocalMFTRegistrationVtbl,
    query_interface : Proc(IMFLocalMFTRegistration*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFLocalMFTRegistration*, UInt32),
    release : Proc(IMFLocalMFTRegistration*, UInt32),
    register_mf_ts : Proc(IMFLocalMFTRegistration*, Win32cr::Media::MediaFoundation::MFT_REGISTRATION_INFO*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("149c4d73-b4be-4f8d-8b87-079e926b6add")]
  record IMFLocalMFTRegistration, lpVtbl : IMFLocalMFTRegistrationVtbl* do
    GUID = LibC::GUID.new(0x149c4d73_u32, 0xb4be_u16, 0x4f8d_u16, StaticArray[0x8b_u8, 0x87_u8, 0x7_u8, 0x9e_u8, 0x92_u8, 0x6b_u8, 0x6a_u8, 0xdd_u8])
    def query_interface(this : IMFLocalMFTRegistration*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFLocalMFTRegistration*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFLocalMFTRegistration*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_mf_ts(this : IMFLocalMFTRegistration*, pMFTs : Win32cr::Media::MediaFoundation::MFT_REGISTRATION_INFO*, cMFTs : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_mf_ts.call(this, pMFTs, cMFTs)
    end

  end

  @[Extern]
  record IMFCapturePhotoConfirmationVtbl,
    query_interface : Proc(IMFCapturePhotoConfirmation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCapturePhotoConfirmation*, UInt32),
    release : Proc(IMFCapturePhotoConfirmation*, UInt32),
    set_photo_confirmation_callback : Proc(IMFCapturePhotoConfirmation*, Void*, Win32cr::Foundation::HRESULT),
    set_pixel_format : Proc(IMFCapturePhotoConfirmation*, LibC::GUID, Win32cr::Foundation::HRESULT),
    get_pixel_format : Proc(IMFCapturePhotoConfirmation*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("19f68549-ca8a-4706-a4ef-481dbc95e12c")]
  record IMFCapturePhotoConfirmation, lpVtbl : IMFCapturePhotoConfirmationVtbl* do
    GUID = LibC::GUID.new(0x19f68549_u32, 0xca8a_u16, 0x4706_u16, StaticArray[0xa4_u8, 0xef_u8, 0x48_u8, 0x1d_u8, 0xbc_u8, 0x95_u8, 0xe1_u8, 0x2c_u8])
    def query_interface(this : IMFCapturePhotoConfirmation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCapturePhotoConfirmation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCapturePhotoConfirmation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_photo_confirmation_callback(this : IMFCapturePhotoConfirmation*, pNotificationCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_photo_confirmation_callback.call(this, pNotificationCallback)
    end
    def set_pixel_format(this : IMFCapturePhotoConfirmation*, subtype : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pixel_format.call(this, subtype)
    end
    def get_pixel_format(this : IMFCapturePhotoConfirmation*, subtype : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_format.call(this, subtype)
    end

  end

  @[Extern]
  record IMFPMPHostAppVtbl,
    query_interface : Proc(IMFPMPHostApp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMPHostApp*, UInt32),
    release : Proc(IMFPMPHostApp*, UInt32),
    lock_process : Proc(IMFPMPHostApp*, Win32cr::Foundation::HRESULT),
    unlock_process : Proc(IMFPMPHostApp*, Win32cr::Foundation::HRESULT),
    activate_class_by_id : Proc(IMFPMPHostApp*, Win32cr::Foundation::PWSTR, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("84d2054a-3aa1-4728-a3b0-440a418cf49c")]
  record IMFPMPHostApp, lpVtbl : IMFPMPHostAppVtbl* do
    GUID = LibC::GUID.new(0x84d2054a_u32, 0x3aa1_u16, 0x4728_u16, StaticArray[0xa3_u8, 0xb0_u8, 0x44_u8, 0xa_u8, 0x41_u8, 0x8c_u8, 0xf4_u8, 0x9c_u8])
    def query_interface(this : IMFPMPHostApp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMPHostApp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMPHostApp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock_process(this : IMFPMPHostApp*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_process.call(this)
    end
    def unlock_process(this : IMFPMPHostApp*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_process.call(this)
    end
    def activate_class_by_id(this : IMFPMPHostApp*, id : Win32cr::Foundation::PWSTR, pStream : Void*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_class_by_id.call(this, id, pStream, riid, ppv)
    end

  end

  @[Extern]
  record IMFPMPClientAppVtbl,
    query_interface : Proc(IMFPMPClientApp*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMPClientApp*, UInt32),
    release : Proc(IMFPMPClientApp*, UInt32),
    set_pmp_host : Proc(IMFPMPClientApp*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c004f646-be2c-48f3-93a2-a0983eba1108")]
  record IMFPMPClientApp, lpVtbl : IMFPMPClientAppVtbl* do
    GUID = LibC::GUID.new(0xc004f646_u32, 0xbe2c_u16, 0x48f3_u16, StaticArray[0x93_u8, 0xa2_u8, 0xa0_u8, 0x98_u8, 0x3e_u8, 0xba_u8, 0x11_u8, 0x8_u8])
    def query_interface(this : IMFPMPClientApp*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMPClientApp*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMPClientApp*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_pmp_host(this : IMFPMPClientApp*, pPMPHost : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pmp_host.call(this, pPMPHost)
    end

  end

  @[Extern]
  record IMFMediaStreamSourceSampleRequestVtbl,
    query_interface : Proc(IMFMediaStreamSourceSampleRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaStreamSourceSampleRequest*, UInt32),
    release : Proc(IMFMediaStreamSourceSampleRequest*, UInt32),
    set_sample : Proc(IMFMediaStreamSourceSampleRequest*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("380b9af9-a85b-4e78-a2af-ea5ce645c6b4")]
  record IMFMediaStreamSourceSampleRequest, lpVtbl : IMFMediaStreamSourceSampleRequestVtbl* do
    GUID = LibC::GUID.new(0x380b9af9_u32, 0xa85b_u16, 0x4e78_u16, StaticArray[0xa2_u8, 0xaf_u8, 0xea_u8, 0x5c_u8, 0xe6_u8, 0x45_u8, 0xc6_u8, 0xb4_u8])
    def query_interface(this : IMFMediaStreamSourceSampleRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaStreamSourceSampleRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaStreamSourceSampleRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_sample(this : IMFMediaStreamSourceSampleRequest*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample.call(this, value)
    end

  end

  @[Extern]
  record IMFTrackedSampleVtbl,
    query_interface : Proc(IMFTrackedSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTrackedSample*, UInt32),
    release : Proc(IMFTrackedSample*, UInt32),
    set_allocator : Proc(IMFTrackedSample*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("245bf8e9-0755-40f7-88a5-ae0f18d55e17")]
  record IMFTrackedSample, lpVtbl : IMFTrackedSampleVtbl* do
    GUID = LibC::GUID.new(0x245bf8e9_u32, 0x755_u16, 0x40f7_u16, StaticArray[0x88_u8, 0xa5_u8, 0xae_u8, 0xf_u8, 0x18_u8, 0xd5_u8, 0x5e_u8, 0x17_u8])
    def query_interface(this : IMFTrackedSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTrackedSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTrackedSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_allocator(this : IMFTrackedSample*, pSampleAllocator : Void*, pUnkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_allocator.call(this, pSampleAllocator, pUnkState)
    end

  end

  @[Extern]
  record IMFProtectedEnvironmentAccessVtbl,
    query_interface : Proc(IMFProtectedEnvironmentAccess*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFProtectedEnvironmentAccess*, UInt32),
    release : Proc(IMFProtectedEnvironmentAccess*, UInt32),
    call : Proc(IMFProtectedEnvironmentAccess*, UInt32, UInt8*, UInt32, UInt8*, Win32cr::Foundation::HRESULT),
    read_grl : Proc(IMFProtectedEnvironmentAccess*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ef5dc845-f0d9-4ec9-b00c-cb5183d38434")]
  record IMFProtectedEnvironmentAccess, lpVtbl : IMFProtectedEnvironmentAccessVtbl* do
    GUID = LibC::GUID.new(0xef5dc845_u32, 0xf0d9_u16, 0x4ec9_u16, StaticArray[0xb0_u8, 0xc_u8, 0xcb_u8, 0x51_u8, 0x83_u8, 0xd3_u8, 0x84_u8, 0x34_u8])
    def query_interface(this : IMFProtectedEnvironmentAccess*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFProtectedEnvironmentAccess*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFProtectedEnvironmentAccess*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def call(this : IMFProtectedEnvironmentAccess*, inputLength : UInt32, input : UInt8*, outputLength : UInt32, output : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.call.call(this, inputLength, input, outputLength, output)
    end
    def read_grl(this : IMFProtectedEnvironmentAccess*, outputLength : UInt32*, output : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_grl.call(this, outputLength, output)
    end

  end

  @[Extern]
  record IMFSignedLibraryVtbl,
    query_interface : Proc(IMFSignedLibrary*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSignedLibrary*, UInt32),
    release : Proc(IMFSignedLibrary*, UInt32),
    get_procedure_address : Proc(IMFSignedLibrary*, Win32cr::Foundation::PSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4a724bca-ff6a-4c07-8e0d-7a358421cf06")]
  record IMFSignedLibrary, lpVtbl : IMFSignedLibraryVtbl* do
    GUID = LibC::GUID.new(0x4a724bca_u32, 0xff6a_u16, 0x4c07_u16, StaticArray[0x8e_u8, 0xd_u8, 0x7a_u8, 0x35_u8, 0x84_u8, 0x21_u8, 0xcf_u8, 0x6_u8])
    def query_interface(this : IMFSignedLibrary*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSignedLibrary*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSignedLibrary*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_procedure_address(this : IMFSignedLibrary*, name : Win32cr::Foundation::PSTR, address : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_procedure_address.call(this, name, address)
    end

  end

  @[Extern]
  record IMFSystemIdVtbl,
    query_interface : Proc(IMFSystemId*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSystemId*, UInt32),
    release : Proc(IMFSystemId*, UInt32),
    get_data : Proc(IMFSystemId*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT),
    setup : Proc(IMFSystemId*, UInt32, UInt32, UInt8*, UInt32*, UInt8**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a")]
  record IMFSystemId, lpVtbl : IMFSystemIdVtbl* do
    GUID = LibC::GUID.new(0xfff4af3a_u32, 0x1fc1_u16, 0x4ef9_u16, StaticArray[0xa2_u8, 0x9b_u8, 0xd2_u8, 0x6c_u8, 0x49_u8, 0xe2_u8, 0xf3_u8, 0x1a_u8])
    def query_interface(this : IMFSystemId*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSystemId*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSystemId*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data(this : IMFSystemId*, size : UInt32*, data : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, size, data)
    end
    def setup(this : IMFSystemId*, stage : UInt32, cbIn : UInt32, pbIn : UInt8*, pcbOut : UInt32*, ppbOut : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.setup.call(this, stage, cbIn, pbIn, pcbOut, ppbOut)
    end

  end

  @[Extern]
  record IMFContentProtectionDeviceVtbl,
    query_interface : Proc(IMFContentProtectionDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentProtectionDevice*, UInt32),
    release : Proc(IMFContentProtectionDevice*, UInt32),
    invoke_function : Proc(IMFContentProtectionDevice*, UInt32, UInt32, UInt8*, UInt32*, UInt8*, Win32cr::Foundation::HRESULT),
    get_private_data_byte_count : Proc(IMFContentProtectionDevice*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e6257174-a060-4c9a-a088-3b1b471cad28")]
  record IMFContentProtectionDevice, lpVtbl : IMFContentProtectionDeviceVtbl* do
    GUID = LibC::GUID.new(0xe6257174_u32, 0xa060_u16, 0x4c9a_u16, StaticArray[0xa0_u8, 0x88_u8, 0x3b_u8, 0x1b_u8, 0x47_u8, 0x1c_u8, 0xad_u8, 0x28_u8])
    def query_interface(this : IMFContentProtectionDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentProtectionDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentProtectionDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def invoke_function(this : IMFContentProtectionDevice*, function_id : UInt32, input_buffer_byte_count : UInt32, input_buffer : UInt8*, output_buffer_byte_count : UInt32*, output_buffer : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_function.call(this, function_id, input_buffer_byte_count, input_buffer, output_buffer_byte_count, output_buffer)
    end
    def get_private_data_byte_count(this : IMFContentProtectionDevice*, private_input_byte_count : UInt32*, private_output_byte_count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data_byte_count.call(this, private_input_byte_count, private_output_byte_count)
    end

  end

  @[Extern]
  record IMFContentDecryptorContextVtbl,
    query_interface : Proc(IMFContentDecryptorContext*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentDecryptorContext*, UInt32),
    release : Proc(IMFContentDecryptorContext*, UInt32),
    initialize_hardware_key : Proc(IMFContentDecryptorContext*, UInt32, Void*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7ec4b1bd-43fb-4763-85d2-64fcb5c5f4cb")]
  record IMFContentDecryptorContext, lpVtbl : IMFContentDecryptorContextVtbl* do
    GUID = LibC::GUID.new(0x7ec4b1bd_u32, 0x43fb_u16, 0x4763_u16, StaticArray[0x85_u8, 0xd2_u8, 0x64_u8, 0xfc_u8, 0xb5_u8, 0xc5_u8, 0xf4_u8, 0xcb_u8])
    def query_interface(this : IMFContentDecryptorContext*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentDecryptorContext*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentDecryptorContext*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize_hardware_key(this : IMFContentDecryptorContext*, input_private_data_byte_count : UInt32, input_private_data : Void*, output_private_data : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_hardware_key.call(this, input_private_data_byte_count, input_private_data, output_private_data)
    end

  end

  @[Extern]
  record IMFNetCrossOriginSupportVtbl,
    query_interface : Proc(IMFNetCrossOriginSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFNetCrossOriginSupport*, UInt32),
    release : Proc(IMFNetCrossOriginSupport*, UInt32),
    get_cross_origin_policy : Proc(IMFNetCrossOriginSupport*, Win32cr::Media::MediaFoundation::MF_CROSS_ORIGIN_POLICY*, Win32cr::Foundation::HRESULT),
    get_source_origin : Proc(IMFNetCrossOriginSupport*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    is_same_origin : Proc(IMFNetCrossOriginSupport*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bc2b7d44-a72d-49d5-8376-1480dee58b22")]
  record IMFNetCrossOriginSupport, lpVtbl : IMFNetCrossOriginSupportVtbl* do
    GUID = LibC::GUID.new(0xbc2b7d44_u32, 0xa72d_u16, 0x49d5_u16, StaticArray[0x83_u8, 0x76_u8, 0x14_u8, 0x80_u8, 0xde_u8, 0xe5_u8, 0x8b_u8, 0x22_u8])
    def query_interface(this : IMFNetCrossOriginSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFNetCrossOriginSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFNetCrossOriginSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_cross_origin_policy(this : IMFNetCrossOriginSupport*, pPolicy : Win32cr::Media::MediaFoundation::MF_CROSS_ORIGIN_POLICY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cross_origin_policy.call(this, pPolicy)
    end
    def get_source_origin(this : IMFNetCrossOriginSupport*, wszSourceOrigin : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_origin.call(this, wszSourceOrigin)
    end
    def is_same_origin(this : IMFNetCrossOriginSupport*, wszURL : Win32cr::Foundation::PWSTR, pfIsSameOrigin : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_same_origin.call(this, wszURL, pfIsSameOrigin)
    end

  end

  @[Extern]
  record IMFHttpDownloadRequestVtbl,
    query_interface : Proc(IMFHttpDownloadRequest*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFHttpDownloadRequest*, UInt32),
    release : Proc(IMFHttpDownloadRequest*, UInt32),
    add_header : Proc(IMFHttpDownloadRequest*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    begin_send_request : Proc(IMFHttpDownloadRequest*, UInt8*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_send_request : Proc(IMFHttpDownloadRequest*, Void*, Win32cr::Foundation::HRESULT),
    begin_receive_response : Proc(IMFHttpDownloadRequest*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_receive_response : Proc(IMFHttpDownloadRequest*, Void*, Win32cr::Foundation::HRESULT),
    begin_read_payload : Proc(IMFHttpDownloadRequest*, UInt8*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_read_payload : Proc(IMFHttpDownloadRequest*, Void*, UInt64*, UInt32*, Win32cr::Foundation::HRESULT),
    query_header : Proc(IMFHttpDownloadRequest*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_url : Proc(IMFHttpDownloadRequest*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    has_null_source_origin : Proc(IMFHttpDownloadRequest*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_time_seek_result : Proc(IMFHttpDownloadRequest*, UInt64*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_http_status : Proc(IMFHttpDownloadRequest*, UInt32*, Win32cr::Foundation::HRESULT),
    get_at_end_of_payload : Proc(IMFHttpDownloadRequest*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_total_length : Proc(IMFHttpDownloadRequest*, UInt64*, Win32cr::Foundation::HRESULT),
    get_range_end_offset : Proc(IMFHttpDownloadRequest*, UInt64*, Win32cr::Foundation::HRESULT),
    close : Proc(IMFHttpDownloadRequest*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f779fddf-26e7-4270-8a8b-b983d1859de0")]
  record IMFHttpDownloadRequest, lpVtbl : IMFHttpDownloadRequestVtbl* do
    GUID = LibC::GUID.new(0xf779fddf_u32, 0x26e7_u16, 0x4270_u16, StaticArray[0x8a_u8, 0x8b_u8, 0xb9_u8, 0x83_u8, 0xd1_u8, 0x85_u8, 0x9d_u8, 0xe0_u8])
    def query_interface(this : IMFHttpDownloadRequest*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFHttpDownloadRequest*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFHttpDownloadRequest*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_header(this : IMFHttpDownloadRequest*, szHeader : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_header.call(this, szHeader)
    end
    def begin_send_request(this : IMFHttpDownloadRequest*, pbPayload : UInt8*, cbPayload : UInt32, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_send_request.call(this, pbPayload, cbPayload, pCallback, punkState)
    end
    def end_send_request(this : IMFHttpDownloadRequest*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_send_request.call(this, pResult)
    end
    def begin_receive_response(this : IMFHttpDownloadRequest*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_receive_response.call(this, pCallback, punkState)
    end
    def end_receive_response(this : IMFHttpDownloadRequest*, pResult : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_receive_response.call(this, pResult)
    end
    def begin_read_payload(this : IMFHttpDownloadRequest*, pb : UInt8*, cb : UInt32, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_read_payload.call(this, pb, cb, pCallback, punkState)
    end
    def end_read_payload(this : IMFHttpDownloadRequest*, pResult : Void*, pqwOffset : UInt64*, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_read_payload.call(this, pResult, pqwOffset, pcbRead)
    end
    def query_header(this : IMFHttpDownloadRequest*, szHeaderName : Win32cr::Foundation::PWSTR, dwIndex : UInt32, ppszHeaderValue : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_header.call(this, szHeaderName, dwIndex, ppszHeaderValue)
    end
    def get_url(this : IMFHttpDownloadRequest*, ppszURL : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, ppszURL)
    end
    def has_null_source_origin(this : IMFHttpDownloadRequest*, pfNullSourceOrigin : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_null_source_origin.call(this, pfNullSourceOrigin)
    end
    def get_time_seek_result(this : IMFHttpDownloadRequest*, pqwStartTime : UInt64*, pqwStopTime : UInt64*, pqwDuration : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_time_seek_result.call(this, pqwStartTime, pqwStopTime, pqwDuration)
    end
    def get_http_status(this : IMFHttpDownloadRequest*, pdwHttpStatus : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_http_status.call(this, pdwHttpStatus)
    end
    def get_at_end_of_payload(this : IMFHttpDownloadRequest*, pfAtEndOfPayload : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_at_end_of_payload.call(this, pfAtEndOfPayload)
    end
    def get_total_length(this : IMFHttpDownloadRequest*, pqwTotalLength : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_length.call(this, pqwTotalLength)
    end
    def get_range_end_offset(this : IMFHttpDownloadRequest*, pqwRangeEnd : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_range_end_offset.call(this, pqwRangeEnd)
    end
    def close(this : IMFHttpDownloadRequest*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IMFHttpDownloadSessionVtbl,
    query_interface : Proc(IMFHttpDownloadSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFHttpDownloadSession*, UInt32),
    release : Proc(IMFHttpDownloadSession*, UInt32),
    set_server : Proc(IMFHttpDownloadSession*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    create_request : Proc(IMFHttpDownloadSession*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    close : Proc(IMFHttpDownloadSession*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("71fa9a2c-53ce-4662-a132-1a7e8cbf62db")]
  record IMFHttpDownloadSession, lpVtbl : IMFHttpDownloadSessionVtbl* do
    GUID = LibC::GUID.new(0x71fa9a2c_u32, 0x53ce_u16, 0x4662_u16, StaticArray[0xa1_u8, 0x32_u8, 0x1a_u8, 0x7e_u8, 0x8c_u8, 0xbf_u8, 0x62_u8, 0xdb_u8])
    def query_interface(this : IMFHttpDownloadSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFHttpDownloadSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFHttpDownloadSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_server(this : IMFHttpDownloadSession*, szServerName : Win32cr::Foundation::PWSTR, nPort : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_server.call(this, szServerName, nPort)
    end
    def create_request(this : IMFHttpDownloadSession*, szObjectName : Win32cr::Foundation::PWSTR, fBypassProxyCache : Win32cr::Foundation::BOOL, fSecure : Win32cr::Foundation::BOOL, szVerb : Win32cr::Foundation::PWSTR, szReferrer : Win32cr::Foundation::PWSTR, ppRequest : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_request.call(this, szObjectName, fBypassProxyCache, fSecure, szVerb, szReferrer, ppRequest)
    end
    def close(this : IMFHttpDownloadSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IMFHttpDownloadSessionProviderVtbl,
    query_interface : Proc(IMFHttpDownloadSessionProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFHttpDownloadSessionProvider*, UInt32),
    release : Proc(IMFHttpDownloadSessionProvider*, UInt32),
    create_http_download_session : Proc(IMFHttpDownloadSessionProvider*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1b4cf4b9-3a16-4115-839d-03cc5c99df01")]
  record IMFHttpDownloadSessionProvider, lpVtbl : IMFHttpDownloadSessionProviderVtbl* do
    GUID = LibC::GUID.new(0x1b4cf4b9_u32, 0x3a16_u16, 0x4115_u16, StaticArray[0x83_u8, 0x9d_u8, 0x3_u8, 0xcc_u8, 0x5c_u8, 0x99_u8, 0xdf_u8, 0x1_u8])
    def query_interface(this : IMFHttpDownloadSessionProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFHttpDownloadSessionProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFHttpDownloadSessionProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_http_download_session(this : IMFHttpDownloadSessionProvider*, wszScheme : Win32cr::Foundation::PWSTR, ppDownloadSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_http_download_session.call(this, wszScheme, ppDownloadSession)
    end

  end

  @[Extern]
  record IMFMediaSource2Vtbl,
    query_interface : Proc(IMFMediaSource2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSource2*, UInt32),
    release : Proc(IMFMediaSource2*, UInt32),
    get_event : Proc(IMFMediaSource2*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaSource2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaSource2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaSource2*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_characteristics : Proc(IMFMediaSource2*, UInt32*, Win32cr::Foundation::HRESULT),
    create_presentation_descriptor : Proc(IMFMediaSource2*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(IMFMediaSource2*, Void*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFMediaSource2*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFMediaSource2*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaSource2*, Win32cr::Foundation::HRESULT),
    get_source_attributes : Proc(IMFMediaSource2*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_attributes : Proc(IMFMediaSource2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_d3_d_manager : Proc(IMFMediaSource2*, Void*, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(IMFMediaSource2*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fbb03414-d13b-4786-8319-5ac51fc0a136")]
  record IMFMediaSource2, lpVtbl : IMFMediaSource2Vtbl* do
    GUID = LibC::GUID.new(0xfbb03414_u32, 0xd13b_u16, 0x4786_u16, StaticArray[0x83_u8, 0x19_u8, 0x5a_u8, 0xc5_u8, 0x1f_u8, 0xc0_u8, 0xa1_u8, 0x36_u8])
    def query_interface(this : IMFMediaSource2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSource2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSource2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaSource2*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaSource2*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaSource2*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaSource2*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def get_characteristics(this : IMFMediaSource2*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_characteristics.call(this, pdwCharacteristics)
    end
    def create_presentation_descriptor(this : IMFMediaSource2*, ppPresentationDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_presentation_descriptor.call(this, ppPresentationDescriptor)
    end
    def start(this : IMFMediaSource2*, pPresentationDescriptor : Void*, pguidTimeFormat : LibC::GUID*, pvarStartPosition : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, pPresentationDescriptor, pguidTimeFormat, pvarStartPosition)
    end
    def stop(this : IMFMediaSource2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def pause(this : IMFMediaSource2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def shutdown(this : IMFMediaSource2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_source_attributes(this : IMFMediaSource2*, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source_attributes.call(this, ppAttributes)
    end
    def get_stream_attributes(this : IMFMediaSource2*, dwStreamIdentifier : UInt32, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_attributes.call(this, dwStreamIdentifier, ppAttributes)
    end
    def set_d3_d_manager(this : IMFMediaSource2*, pManager : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_d3_d_manager.call(this, pManager)
    end
    def set_media_type(this : IMFMediaSource2*, dwStreamID : UInt32, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, dwStreamID, pMediaType)
    end

  end

  @[Extern]
  record IMFMediaStream2Vtbl,
    query_interface : Proc(IMFMediaStream2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaStream2*, UInt32),
    release : Proc(IMFMediaStream2*, UInt32),
    get_event : Proc(IMFMediaStream2*, Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, Void**, Win32cr::Foundation::HRESULT),
    begin_get_event : Proc(IMFMediaStream2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_event : Proc(IMFMediaStream2*, Void*, Void**, Win32cr::Foundation::HRESULT),
    queue_event : Proc(IMFMediaStream2*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_media_source : Proc(IMFMediaStream2*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_descriptor : Proc(IMFMediaStream2*, Void**, Win32cr::Foundation::HRESULT),
    request_sample : Proc(IMFMediaStream2*, Void*, Win32cr::Foundation::HRESULT),
    set_stream_state : Proc(IMFMediaStream2*, Win32cr::Media::MediaFoundation::MF_STREAM_STATE, Win32cr::Foundation::HRESULT),
    get_stream_state : Proc(IMFMediaStream2*, Win32cr::Media::MediaFoundation::MF_STREAM_STATE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c5bc37d6-75c7-46a1-a132-81b5f723c20f")]
  record IMFMediaStream2, lpVtbl : IMFMediaStream2Vtbl* do
    GUID = LibC::GUID.new(0xc5bc37d6_u32, 0x75c7_u16, 0x46a1_u16, StaticArray[0xa1_u8, 0x32_u8, 0x81_u8, 0xb5_u8, 0xf7_u8, 0x23_u8, 0xc2_u8, 0xf_u8])
    def query_interface(this : IMFMediaStream2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaStream2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaStream2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_event(this : IMFMediaStream2*, dwFlags : Win32cr::Media::MediaFoundation::MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_event.call(this, dwFlags, ppEvent)
    end
    def begin_get_event(this : IMFMediaStream2*, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_event.call(this, pCallback, punkState)
    end
    def end_get_event(this : IMFMediaStream2*, pResult : Void*, ppEvent : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_event.call(this, pResult, ppEvent)
    end
    def queue_event(this : IMFMediaStream2*, met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.queue_event.call(this, met, guidExtendedType, hrStatus, pvValue)
    end
    def get_media_source(this : IMFMediaStream2*, ppMediaSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_source.call(this, ppMediaSource)
    end
    def get_stream_descriptor(this : IMFMediaStream2*, ppStreamDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_descriptor.call(this, ppStreamDescriptor)
    end
    def request_sample(this : IMFMediaStream2*, pToken : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.request_sample.call(this, pToken)
    end
    def set_stream_state(this : IMFMediaStream2*, value : Win32cr::Media::MediaFoundation::MF_STREAM_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_state.call(this, value)
    end
    def get_stream_state(this : IMFMediaStream2*, value : Win32cr::Media::MediaFoundation::MF_STREAM_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_state.call(this, value)
    end

  end

  @[Extern]
  record IMFSensorDeviceVtbl,
    query_interface : Proc(IMFSensorDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorDevice*, UInt32),
    release : Proc(IMFSensorDevice*, UInt32),
    get_device_id : Proc(IMFSensorDevice*, UInt64*, Win32cr::Foundation::HRESULT),
    get_device_type : Proc(IMFSensorDevice*, Win32cr::Media::MediaFoundation::MFSensorDeviceType*, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IMFSensorDevice*, UInt64*, Win32cr::Foundation::HRESULT),
    get_symbolic_link : Proc(IMFSensorDevice*, UInt16*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_device_attributes : Proc(IMFSensorDevice*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_attributes_count : Proc(IMFSensorDevice*, Win32cr::Media::MediaFoundation::MFSensorStreamType, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_attributes : Proc(IMFSensorDevice*, Win32cr::Media::MediaFoundation::MFSensorStreamType, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_sensor_device_mode : Proc(IMFSensorDevice*, Win32cr::Media::MediaFoundation::MFSensorDeviceMode, Win32cr::Foundation::HRESULT),
    get_sensor_device_mode : Proc(IMFSensorDevice*, Win32cr::Media::MediaFoundation::MFSensorDeviceMode*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fb9f48f2-2a18-4e28-9730-786f30f04dc4")]
  record IMFSensorDevice, lpVtbl : IMFSensorDeviceVtbl* do
    GUID = LibC::GUID.new(0xfb9f48f2_u32, 0x2a18_u16, 0x4e28_u16, StaticArray[0x97_u8, 0x30_u8, 0x78_u8, 0x6f_u8, 0x30_u8, 0xf0_u8, 0x4d_u8, 0xc4_u8])
    def query_interface(this : IMFSensorDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device_id(this : IMFSensorDevice*, pDeviceId : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_id.call(this, pDeviceId)
    end
    def get_device_type(this : IMFSensorDevice*, pType : Win32cr::Media::MediaFoundation::MFSensorDeviceType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_type.call(this, pType)
    end
    def get_flags(this : IMFSensorDevice*, pFlags : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pFlags)
    end
    def get_symbolic_link(this : IMFSensorDevice*, symbolic_link : UInt16*, cchSymbolicLink : Int32, pcchWritten : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbolic_link.call(this, symbolic_link, cchSymbolicLink, pcchWritten)
    end
    def get_device_attributes(this : IMFSensorDevice*, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_attributes.call(this, ppAttributes)
    end
    def get_stream_attributes_count(this : IMFSensorDevice*, eType : Win32cr::Media::MediaFoundation::MFSensorStreamType, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_attributes_count.call(this, eType, pdwCount)
    end
    def get_stream_attributes(this : IMFSensorDevice*, eType : Win32cr::Media::MediaFoundation::MFSensorStreamType, dwIndex : UInt32, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_attributes.call(this, eType, dwIndex, ppAttributes)
    end
    def set_sensor_device_mode(this : IMFSensorDevice*, eMode : Win32cr::Media::MediaFoundation::MFSensorDeviceMode) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sensor_device_mode.call(this, eMode)
    end
    def get_sensor_device_mode(this : IMFSensorDevice*, peMode : Win32cr::Media::MediaFoundation::MFSensorDeviceMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sensor_device_mode.call(this, peMode)
    end

  end

  @[Extern]
  record IMFSensorGroupVtbl,
    query_interface : Proc(IMFSensorGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorGroup*, UInt32),
    release : Proc(IMFSensorGroup*, UInt32),
    get_symbolic_link : Proc(IMFSensorGroup*, UInt16*, Int32, Int32*, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IMFSensorGroup*, UInt64*, Win32cr::Foundation::HRESULT),
    get_sensor_group_attributes : Proc(IMFSensorGroup*, Void**, Win32cr::Foundation::HRESULT),
    get_sensor_device_count : Proc(IMFSensorGroup*, UInt32*, Win32cr::Foundation::HRESULT),
    get_sensor_device : Proc(IMFSensorGroup*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_default_sensor_device_index : Proc(IMFSensorGroup*, UInt32, Win32cr::Foundation::HRESULT),
    get_default_sensor_device_index : Proc(IMFSensorGroup*, UInt32*, Win32cr::Foundation::HRESULT),
    create_media_source : Proc(IMFSensorGroup*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4110243a-9757-461f-89f1-f22345bcab4e")]
  record IMFSensorGroup, lpVtbl : IMFSensorGroupVtbl* do
    GUID = LibC::GUID.new(0x4110243a_u32, 0x9757_u16, 0x461f_u16, StaticArray[0x89_u8, 0xf1_u8, 0xf2_u8, 0x23_u8, 0x45_u8, 0xbc_u8, 0xab_u8, 0x4e_u8])
    def query_interface(this : IMFSensorGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_symbolic_link(this : IMFSensorGroup*, symbolic_link : UInt16*, cchSymbolicLink : Int32, pcchWritten : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbolic_link.call(this, symbolic_link, cchSymbolicLink, pcchWritten)
    end
    def get_flags(this : IMFSensorGroup*, pFlags : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pFlags)
    end
    def get_sensor_group_attributes(this : IMFSensorGroup*, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sensor_group_attributes.call(this, ppAttributes)
    end
    def get_sensor_device_count(this : IMFSensorGroup*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sensor_device_count.call(this, pdwCount)
    end
    def get_sensor_device(this : IMFSensorGroup*, dwIndex : UInt32, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sensor_device.call(this, dwIndex, ppDevice)
    end
    def set_default_sensor_device_index(this : IMFSensorGroup*, dwIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_sensor_device_index.call(this, dwIndex)
    end
    def get_default_sensor_device_index(this : IMFSensorGroup*, pdwIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_sensor_device_index.call(this, pdwIndex)
    end
    def create_media_source(this : IMFSensorGroup*, ppSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_source.call(this, ppSource)
    end

  end

  @[Extern]
  record IMFSensorStreamVtbl,
    query_interface : Proc(IMFSensorStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorStream*, UInt32),
    release : Proc(IMFSensorStream*, UInt32),
    get_item : Proc(IMFSensorStream*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFSensorStream*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFSensorStream*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFSensorStream*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFSensorStream*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFSensorStream*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFSensorStream*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFSensorStream*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFSensorStream*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFSensorStream*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFSensorStream*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFSensorStream*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFSensorStream*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFSensorStream*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFSensorStream*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFSensorStream*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFSensorStream*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFSensorStream*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFSensorStream*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFSensorStream*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFSensorStream*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFSensorStream*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFSensorStream*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFSensorStream*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFSensorStream*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFSensorStream*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFSensorStream*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFSensorStream*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFSensorStream*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFSensorStream*, Void*, Win32cr::Foundation::HRESULT),
    get_media_type_count : Proc(IMFSensorStream*, UInt32*, Win32cr::Foundation::HRESULT),
    get_media_type : Proc(IMFSensorStream*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    clone_sensor_stream : Proc(IMFSensorStream*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e9a42171-c56e-498a-8b39-eda5a070b7fc")]
  record IMFSensorStream, lpVtbl : IMFSensorStreamVtbl* do
    GUID = LibC::GUID.new(0xe9a42171_u32, 0xc56e_u16, 0x498a_u16, StaticArray[0x8b_u8, 0x39_u8, 0xed_u8, 0xa5_u8, 0xa0_u8, 0x70_u8, 0xb7_u8, 0xfc_u8])
    def query_interface(this : IMFSensorStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFSensorStream*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFSensorStream*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFSensorStream*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFSensorStream*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFSensorStream*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFSensorStream*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFSensorStream*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFSensorStream*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFSensorStream*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFSensorStream*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFSensorStream*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFSensorStream*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFSensorStream*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFSensorStream*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFSensorStream*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFSensorStream*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFSensorStream*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFSensorStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFSensorStream*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFSensorStream*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFSensorStream*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFSensorStream*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFSensorStream*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFSensorStream*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFSensorStream*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFSensorStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFSensorStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFSensorStream*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFSensorStream*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFSensorStream*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_media_type_count(this : IMFSensorStream*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type_count.call(this, pdwCount)
    end
    def get_media_type(this : IMFSensorStream*, dwIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type.call(this, dwIndex, ppMediaType)
    end
    def clone_sensor_stream(this : IMFSensorStream*, ppStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone_sensor_stream.call(this, ppStream)
    end

  end

  @[Extern]
  record IMFSensorTransformFactoryVtbl,
    query_interface : Proc(IMFSensorTransformFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorTransformFactory*, UInt32),
    release : Proc(IMFSensorTransformFactory*, UInt32),
    get_factory_attributes : Proc(IMFSensorTransformFactory*, Void**, Win32cr::Foundation::HRESULT),
    initialize_factory : Proc(IMFSensorTransformFactory*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_transform_count : Proc(IMFSensorTransformFactory*, UInt32*, Win32cr::Foundation::HRESULT),
    get_transform_information : Proc(IMFSensorTransformFactory*, UInt32, LibC::GUID*, Void**, Void**, Win32cr::Foundation::HRESULT),
    create_transform : Proc(IMFSensorTransformFactory*, LibC::GUID*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("eed9c2ee-66b4-4f18-a697-ac7d3960215c")]
  record IMFSensorTransformFactory, lpVtbl : IMFSensorTransformFactoryVtbl* do
    GUID = LibC::GUID.new(0xeed9c2ee_u32, 0x66b4_u16, 0x4f18_u16, StaticArray[0xa6_u8, 0x97_u8, 0xac_u8, 0x7d_u8, 0x39_u8, 0x60_u8, 0x21_u8, 0x5c_u8])
    def query_interface(this : IMFSensorTransformFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorTransformFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorTransformFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_factory_attributes(this : IMFSensorTransformFactory*, ppAttributes : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_factory_attributes.call(this, ppAttributes)
    end
    def initialize_factory(this : IMFSensorTransformFactory*, dwMaxTransformCount : UInt32, pSensorDevices : Void*, pAttributes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_factory.call(this, dwMaxTransformCount, pSensorDevices, pAttributes)
    end
    def get_transform_count(this : IMFSensorTransformFactory*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transform_count.call(this, pdwCount)
    end
    def get_transform_information(this : IMFSensorTransformFactory*, transform_index : UInt32, pguidTransformId : LibC::GUID*, ppAttributes : Void**, ppStreamInformation : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transform_information.call(this, transform_index, pguidTransformId, ppAttributes, ppStreamInformation)
    end
    def create_transform(this : IMFSensorTransformFactory*, guidSensorTransformID : LibC::GUID*, pAttributes : Void*, ppDeviceMFT : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_transform.call(this, guidSensorTransformID, pAttributes, ppDeviceMFT)
    end

  end

  @[Extern]
  record IMFSensorProfileVtbl,
    query_interface : Proc(IMFSensorProfile*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorProfile*, UInt32),
    release : Proc(IMFSensorProfile*, UInt32),
    get_profile_id : Proc(IMFSensorProfile*, Win32cr::Media::MediaFoundation::SENSORPROFILEID*, Win32cr::Foundation::HRESULT),
    add_profile_filter : Proc(IMFSensorProfile*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    is_media_type_supported : Proc(IMFSensorProfile*, UInt32, Void*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    add_blocked_control : Proc(IMFSensorProfile*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("22f765d1-8dab-4107-846d-56baf72215e7")]
  record IMFSensorProfile, lpVtbl : IMFSensorProfileVtbl* do
    GUID = LibC::GUID.new(0x22f765d1_u32, 0x8dab_u16, 0x4107_u16, StaticArray[0x84_u8, 0x6d_u8, 0x56_u8, 0xba_u8, 0xf7_u8, 0x22_u8, 0x15_u8, 0xe7_u8])
    def query_interface(this : IMFSensorProfile*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorProfile*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorProfile*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_profile_id(this : IMFSensorProfile*, pId : Win32cr::Media::MediaFoundation::SENSORPROFILEID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_profile_id.call(this, pId)
    end
    def add_profile_filter(this : IMFSensorProfile*, stream_id : UInt32, wzFilterSetString : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_profile_filter.call(this, stream_id, wzFilterSetString)
    end
    def is_media_type_supported(this : IMFSensorProfile*, stream_id : UInt32, pMediaType : Void*, pfSupported : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_media_type_supported.call(this, stream_id, pMediaType, pfSupported)
    end
    def add_blocked_control(this : IMFSensorProfile*, wzBlockedControl : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_blocked_control.call(this, wzBlockedControl)
    end

  end

  @[Extern]
  record IMFSensorProfileCollectionVtbl,
    query_interface : Proc(IMFSensorProfileCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorProfileCollection*, UInt32),
    release : Proc(IMFSensorProfileCollection*, UInt32),
    get_profile_count : Proc(IMFSensorProfileCollection*, UInt32),
    get_profile : Proc(IMFSensorProfileCollection*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_profile : Proc(IMFSensorProfileCollection*, Void*, Win32cr::Foundation::HRESULT),
    find_profile : Proc(IMFSensorProfileCollection*, Win32cr::Media::MediaFoundation::SENSORPROFILEID*, Void**, Win32cr::Foundation::HRESULT),
    remove_profile_by_index : Proc(IMFSensorProfileCollection*, UInt32, Void),
    remove_profile : Proc(IMFSensorProfileCollection*, Win32cr::Media::MediaFoundation::SENSORPROFILEID*, Void)


  @[Extern]
  #@[Com("c95ea55b-0187-48be-9353-8d2507662351")]
  record IMFSensorProfileCollection, lpVtbl : IMFSensorProfileCollectionVtbl* do
    GUID = LibC::GUID.new(0xc95ea55b_u32, 0x187_u16, 0x48be_u16, StaticArray[0x93_u8, 0x53_u8, 0x8d_u8, 0x25_u8, 0x7_u8, 0x66_u8, 0x23_u8, 0x51_u8])
    def query_interface(this : IMFSensorProfileCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorProfileCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorProfileCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_profile_count(this : IMFSensorProfileCollection*) : UInt32
      @lpVtbl.try &.value.get_profile_count.call(this)
    end
    def get_profile(this : IMFSensorProfileCollection*, index : UInt32, ppProfile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_profile.call(this, index, ppProfile)
    end
    def add_profile(this : IMFSensorProfileCollection*, pProfile : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_profile.call(this, pProfile)
    end
    def find_profile(this : IMFSensorProfileCollection*, profile_id : Win32cr::Media::MediaFoundation::SENSORPROFILEID*, ppProfile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_profile.call(this, profile_id, ppProfile)
    end
    def remove_profile_by_index(this : IMFSensorProfileCollection*, index : UInt32) : Void
      @lpVtbl.try &.value.remove_profile_by_index.call(this, index)
    end
    def remove_profile(this : IMFSensorProfileCollection*, profile_id : Win32cr::Media::MediaFoundation::SENSORPROFILEID*) : Void
      @lpVtbl.try &.value.remove_profile.call(this, profile_id)
    end

  end

  @[Extern]
  record IMFSensorProcessActivityVtbl,
    query_interface : Proc(IMFSensorProcessActivity*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorProcessActivity*, UInt32),
    release : Proc(IMFSensorProcessActivity*, UInt32),
    get_process_id : Proc(IMFSensorProcessActivity*, UInt32*, Win32cr::Foundation::HRESULT),
    get_streaming_state : Proc(IMFSensorProcessActivity*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_streaming_mode : Proc(IMFSensorProcessActivity*, Win32cr::Media::MediaFoundation::MFSensorDeviceMode*, Win32cr::Foundation::HRESULT),
    get_report_time : Proc(IMFSensorProcessActivity*, Win32cr::Foundation::FILETIME*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("39dc7f4a-b141-4719-813c-a7f46162a2b8")]
  record IMFSensorProcessActivity, lpVtbl : IMFSensorProcessActivityVtbl* do
    GUID = LibC::GUID.new(0x39dc7f4a_u32, 0xb141_u16, 0x4719_u16, StaticArray[0x81_u8, 0x3c_u8, 0xa7_u8, 0xf4_u8, 0x61_u8, 0x62_u8, 0xa2_u8, 0xb8_u8])
    def query_interface(this : IMFSensorProcessActivity*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorProcessActivity*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorProcessActivity*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_process_id(this : IMFSensorProcessActivity*, pPID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id.call(this, pPID)
    end
    def get_streaming_state(this : IMFSensorProcessActivity*, pfStreaming : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_streaming_state.call(this, pfStreaming)
    end
    def get_streaming_mode(this : IMFSensorProcessActivity*, pMode : Win32cr::Media::MediaFoundation::MFSensorDeviceMode*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_streaming_mode.call(this, pMode)
    end
    def get_report_time(this : IMFSensorProcessActivity*, pft : Win32cr::Foundation::FILETIME*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_report_time.call(this, pft)
    end

  end

  @[Extern]
  record IMFSensorActivityReportVtbl,
    query_interface : Proc(IMFSensorActivityReport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorActivityReport*, UInt32),
    release : Proc(IMFSensorActivityReport*, UInt32),
    get_friendly_name : Proc(IMFSensorActivityReport*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_symbolic_link : Proc(IMFSensorActivityReport*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_count : Proc(IMFSensorActivityReport*, UInt32*, Win32cr::Foundation::HRESULT),
    get_process_activity : Proc(IMFSensorActivityReport*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3e8c4be1-a8c2-4528-90de-2851bde5fead")]
  record IMFSensorActivityReport, lpVtbl : IMFSensorActivityReportVtbl* do
    GUID = LibC::GUID.new(0x3e8c4be1_u32, 0xa8c2_u16, 0x4528_u16, StaticArray[0x90_u8, 0xde_u8, 0x28_u8, 0x51_u8, 0xbd_u8, 0xe5_u8, 0xfe_u8, 0xad_u8])
    def query_interface(this : IMFSensorActivityReport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorActivityReport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorActivityReport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_friendly_name(this : IMFSensorActivityReport*, friendly_name : UInt16*, cchFriendlyName : UInt32, pcchWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_friendly_name.call(this, friendly_name, cchFriendlyName, pcchWritten)
    end
    def get_symbolic_link(this : IMFSensorActivityReport*, symbolic_link : UInt16*, cchSymbolicLink : UInt32, pcchWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_symbolic_link.call(this, symbolic_link, cchSymbolicLink, pcchWritten)
    end
    def get_process_count(this : IMFSensorActivityReport*, pcCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_count.call(this, pcCount)
    end
    def get_process_activity(this : IMFSensorActivityReport*, index : UInt32, ppProcessActivity : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_activity.call(this, index, ppProcessActivity)
    end

  end

  @[Extern]
  record IMFSensorActivitiesReportVtbl,
    query_interface : Proc(IMFSensorActivitiesReport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorActivitiesReport*, UInt32),
    release : Proc(IMFSensorActivitiesReport*, UInt32),
    get_count : Proc(IMFSensorActivitiesReport*, UInt32*, Win32cr::Foundation::HRESULT),
    get_activity_report : Proc(IMFSensorActivitiesReport*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_activity_report_by_device_name : Proc(IMFSensorActivitiesReport*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("683f7a5e-4a19-43cd-b1a9-dbf4ab3f7777")]
  record IMFSensorActivitiesReport, lpVtbl : IMFSensorActivitiesReportVtbl* do
    GUID = LibC::GUID.new(0x683f7a5e_u32, 0x4a19_u16, 0x43cd_u16, StaticArray[0xb1_u8, 0xa9_u8, 0xdb_u8, 0xf4_u8, 0xab_u8, 0x3f_u8, 0x77_u8, 0x77_u8])
    def query_interface(this : IMFSensorActivitiesReport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorActivitiesReport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorActivitiesReport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_count(this : IMFSensorActivitiesReport*, pcCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcCount)
    end
    def get_activity_report(this : IMFSensorActivitiesReport*, index : UInt32, sensorActivityReport : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_activity_report.call(this, index, sensorActivityReport)
    end
    def get_activity_report_by_device_name(this : IMFSensorActivitiesReport*, symbolic_name : Win32cr::Foundation::PWSTR, sensorActivityReport : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_activity_report_by_device_name.call(this, symbolic_name, sensorActivityReport)
    end

  end

  @[Extern]
  record IMFSensorActivitiesReportCallbackVtbl,
    query_interface : Proc(IMFSensorActivitiesReportCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorActivitiesReportCallback*, UInt32),
    release : Proc(IMFSensorActivitiesReportCallback*, UInt32),
    on_activities_report : Proc(IMFSensorActivitiesReportCallback*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("de5072ee-dbe3-46dc-8a87-b6f631194751")]
  record IMFSensorActivitiesReportCallback, lpVtbl : IMFSensorActivitiesReportCallbackVtbl* do
    GUID = LibC::GUID.new(0xde5072ee_u32, 0xdbe3_u16, 0x46dc_u16, StaticArray[0x8a_u8, 0x87_u8, 0xb6_u8, 0xf6_u8, 0x31_u8, 0x19_u8, 0x47_u8, 0x51_u8])
    def query_interface(this : IMFSensorActivitiesReportCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorActivitiesReportCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorActivitiesReportCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_activities_report(this : IMFSensorActivitiesReportCallback*, sensorActivitiesReport : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_activities_report.call(this, sensorActivitiesReport)
    end

  end

  @[Extern]
  record IMFSensorActivityMonitorVtbl,
    query_interface : Proc(IMFSensorActivityMonitor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSensorActivityMonitor*, UInt32),
    release : Proc(IMFSensorActivityMonitor*, UInt32),
    start : Proc(IMFSensorActivityMonitor*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFSensorActivityMonitor*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d0cef145-b3f4-4340-a2e5-7a5080ca05cb")]
  record IMFSensorActivityMonitor, lpVtbl : IMFSensorActivityMonitorVtbl* do
    GUID = LibC::GUID.new(0xd0cef145_u32, 0xb3f4_u16, 0x4340_u16, StaticArray[0xa2_u8, 0xe5_u8, 0x7a_u8, 0x50_u8, 0x80_u8, 0xca_u8, 0x5_u8, 0xcb_u8])
    def query_interface(this : IMFSensorActivityMonitor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSensorActivityMonitor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSensorActivityMonitor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start(this : IMFSensorActivityMonitor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IMFSensorActivityMonitor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end

  end

  @[Extern]
  record IMFExtendedCameraIntrinsicModelVtbl,
    query_interface : Proc(IMFExtendedCameraIntrinsicModel*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFExtendedCameraIntrinsicModel*, UInt32),
    release : Proc(IMFExtendedCameraIntrinsicModel*, UInt32),
    get_model : Proc(IMFExtendedCameraIntrinsicModel*, Win32cr::Media::MediaFoundation::MFExtendedCameraIntrinsic_IntrinsicModel*, Win32cr::Foundation::HRESULT),
    set_model : Proc(IMFExtendedCameraIntrinsicModel*, Win32cr::Media::MediaFoundation::MFExtendedCameraIntrinsic_IntrinsicModel*, Win32cr::Foundation::HRESULT),
    get_distortion_model_type : Proc(IMFExtendedCameraIntrinsicModel*, Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelType*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5c595e64-4630-4231-855a-12842f733245")]
  record IMFExtendedCameraIntrinsicModel, lpVtbl : IMFExtendedCameraIntrinsicModelVtbl* do
    GUID = LibC::GUID.new(0x5c595e64_u32, 0x4630_u16, 0x4231_u16, StaticArray[0x85_u8, 0x5a_u8, 0x12_u8, 0x84_u8, 0x2f_u8, 0x73_u8, 0x32_u8, 0x45_u8])
    def query_interface(this : IMFExtendedCameraIntrinsicModel*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFExtendedCameraIntrinsicModel*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFExtendedCameraIntrinsicModel*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_model(this : IMFExtendedCameraIntrinsicModel*, pIntrinsicModel : Win32cr::Media::MediaFoundation::MFExtendedCameraIntrinsic_IntrinsicModel*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_model.call(this, pIntrinsicModel)
    end
    def set_model(this : IMFExtendedCameraIntrinsicModel*, pIntrinsicModel : Win32cr::Media::MediaFoundation::MFExtendedCameraIntrinsic_IntrinsicModel*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_model.call(this, pIntrinsicModel)
    end
    def get_distortion_model_type(this : IMFExtendedCameraIntrinsicModel*, pDistortionModelType : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_distortion_model_type.call(this, pDistortionModelType)
    end

  end

  @[Extern]
  record IMFExtendedCameraIntrinsicsDistortionModel6KTVtbl,
    query_interface : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, UInt32),
    release : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, UInt32),
    get_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModel6KT*, Win32cr::Foundation::HRESULT),
    set_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModel6KT*, Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModel6KT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("74c2653b-5f55-4eb1-9f0f-18b8f68b7d3d")]
  record IMFExtendedCameraIntrinsicsDistortionModel6KT, lpVtbl : IMFExtendedCameraIntrinsicsDistortionModel6KTVtbl* do
    GUID = LibC::GUID.new(0x74c2653b_u32, 0x5f55_u16, 0x4eb1_u16, StaticArray[0x9f_u8, 0xf_u8, 0x18_u8, 0xb8_u8, 0xf6_u8, 0x8b_u8, 0x7d_u8, 0x3d_u8])
    def query_interface(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*, pDistortionModel : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModel6KT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_distortion_model.call(this, pDistortionModel)
    end
    def set_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModel6KT*, pDistortionModel : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModel6KT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_distortion_model.call(this, pDistortionModel)
    end

  end

  @[Extern]
  record IMFExtendedCameraIntrinsicsDistortionModelArcTanVtbl,
    query_interface : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, UInt32),
    release : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, UInt32),
    get_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelArcTan*, Win32cr::Foundation::HRESULT),
    set_distortion_model : Proc(IMFExtendedCameraIntrinsicsDistortionModelArcTan*, Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelArcTan*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("812d5f95-b572-45dc-bafc-ae24199ddda8")]
  record IMFExtendedCameraIntrinsicsDistortionModelArcTan, lpVtbl : IMFExtendedCameraIntrinsicsDistortionModelArcTanVtbl* do
    GUID = LibC::GUID.new(0x812d5f95_u32, 0xb572_u16, 0x45dc_u16, StaticArray[0xba_u8, 0xfc_u8, 0xae_u8, 0x24_u8, 0x19_u8, 0x9d_u8, 0xdd_u8, 0xa8_u8])
    def query_interface(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*, pDistortionModel : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelArcTan*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_distortion_model.call(this, pDistortionModel)
    end
    def set_distortion_model(this : IMFExtendedCameraIntrinsicsDistortionModelArcTan*, pDistortionModel : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelArcTan*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_distortion_model.call(this, pDistortionModel)
    end

  end

  @[Extern]
  record IMFExtendedCameraIntrinsicsVtbl,
    query_interface : Proc(IMFExtendedCameraIntrinsics*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFExtendedCameraIntrinsics*, UInt32),
    release : Proc(IMFExtendedCameraIntrinsics*, UInt32),
    initialize_from_buffer : Proc(IMFExtendedCameraIntrinsics*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_buffer_size : Proc(IMFExtendedCameraIntrinsics*, UInt32*, Win32cr::Foundation::HRESULT),
    serialize_to_buffer : Proc(IMFExtendedCameraIntrinsics*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_intrinsic_model_count : Proc(IMFExtendedCameraIntrinsics*, UInt32*, Win32cr::Foundation::HRESULT),
    get_intrinsic_model_by_index : Proc(IMFExtendedCameraIntrinsics*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_intrinsic_model : Proc(IMFExtendedCameraIntrinsics*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("687f6dac-6987-4750-a16a-734d1e7a10fe")]
  record IMFExtendedCameraIntrinsics, lpVtbl : IMFExtendedCameraIntrinsicsVtbl* do
    GUID = LibC::GUID.new(0x687f6dac_u32, 0x6987_u16, 0x4750_u16, StaticArray[0xa1_u8, 0x6a_u8, 0x73_u8, 0x4d_u8, 0x1e_u8, 0x7a_u8, 0x10_u8, 0xfe_u8])
    def query_interface(this : IMFExtendedCameraIntrinsics*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFExtendedCameraIntrinsics*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFExtendedCameraIntrinsics*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize_from_buffer(this : IMFExtendedCameraIntrinsics*, pbBuffer : UInt8*, dwBufferSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_from_buffer.call(this, pbBuffer, dwBufferSize)
    end
    def get_buffer_size(this : IMFExtendedCameraIntrinsics*, pdwBufferSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size.call(this, pdwBufferSize)
    end
    def serialize_to_buffer(this : IMFExtendedCameraIntrinsics*, pbBuffer : UInt8*, pdwBufferSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.serialize_to_buffer.call(this, pbBuffer, pdwBufferSize)
    end
    def get_intrinsic_model_count(this : IMFExtendedCameraIntrinsics*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_intrinsic_model_count.call(this, pdwCount)
    end
    def get_intrinsic_model_by_index(this : IMFExtendedCameraIntrinsics*, dwIndex : UInt32, ppIntrinsicModel : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_intrinsic_model_by_index.call(this, dwIndex, ppIntrinsicModel)
    end
    def add_intrinsic_model(this : IMFExtendedCameraIntrinsics*, pIntrinsicModel : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_intrinsic_model.call(this, pIntrinsicModel)
    end

  end

  @[Extern]
  record IMFExtendedCameraControlVtbl,
    query_interface : Proc(IMFExtendedCameraControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFExtendedCameraControl*, UInt32),
    release : Proc(IMFExtendedCameraControl*, UInt32),
    get_capabilities : Proc(IMFExtendedCameraControl*, UInt64),
    set_flags : Proc(IMFExtendedCameraControl*, UInt64, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IMFExtendedCameraControl*, UInt64),
    lock_payload : Proc(IMFExtendedCameraControl*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    unlock_payload : Proc(IMFExtendedCameraControl*, Win32cr::Foundation::HRESULT),
    commit_settings : Proc(IMFExtendedCameraControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("38e33520-fca1-4845-a27a-68b7c6ab3789")]
  record IMFExtendedCameraControl, lpVtbl : IMFExtendedCameraControlVtbl* do
    GUID = LibC::GUID.new(0x38e33520_u32, 0xfca1_u16, 0x4845_u16, StaticArray[0xa2_u8, 0x7a_u8, 0x68_u8, 0xb7_u8, 0xc6_u8, 0xab_u8, 0x37_u8, 0x89_u8])
    def query_interface(this : IMFExtendedCameraControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFExtendedCameraControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFExtendedCameraControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capabilities(this : IMFExtendedCameraControl*) : UInt64
      @lpVtbl.try &.value.get_capabilities.call(this)
    end
    def set_flags(this : IMFExtendedCameraControl*, ulFlags : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, ulFlags)
    end
    def get_flags(this : IMFExtendedCameraControl*) : UInt64
      @lpVtbl.try &.value.get_flags.call(this)
    end
    def lock_payload(this : IMFExtendedCameraControl*, ppPayload : UInt8**, pulPayload : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_payload.call(this, ppPayload, pulPayload)
    end
    def unlock_payload(this : IMFExtendedCameraControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_payload.call(this)
    end
    def commit_settings(this : IMFExtendedCameraControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit_settings.call(this)
    end

  end

  @[Extern]
  record IMFExtendedCameraControllerVtbl,
    query_interface : Proc(IMFExtendedCameraController*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFExtendedCameraController*, UInt32),
    release : Proc(IMFExtendedCameraController*, UInt32),
    get_extended_camera_control : Proc(IMFExtendedCameraController*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b91ebfee-ca03-4af4-8a82-a31752f4a0fc")]
  record IMFExtendedCameraController, lpVtbl : IMFExtendedCameraControllerVtbl* do
    GUID = LibC::GUID.new(0xb91ebfee_u32, 0xca03_u16, 0x4af4_u16, StaticArray[0x8a_u8, 0x82_u8, 0xa3_u8, 0x17_u8, 0x52_u8, 0xf4_u8, 0xa0_u8, 0xfc_u8])
    def query_interface(this : IMFExtendedCameraController*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFExtendedCameraController*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFExtendedCameraController*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_extended_camera_control(this : IMFExtendedCameraController*, dwStreamIndex : UInt32, ulPropertyId : UInt32, ppControl : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_camera_control.call(this, dwStreamIndex, ulPropertyId, ppControl)
    end

  end

  @[Extern]
  record IMFRelativePanelReportVtbl,
    query_interface : Proc(IMFRelativePanelReport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRelativePanelReport*, UInt32),
    release : Proc(IMFRelativePanelReport*, UInt32),
    get_relative_panel : Proc(IMFRelativePanelReport*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f25362ea-2c0e-447f-81e2-755914cdc0c3")]
  record IMFRelativePanelReport, lpVtbl : IMFRelativePanelReportVtbl* do
    GUID = LibC::GUID.new(0xf25362ea_u32, 0x2c0e_u16, 0x447f_u16, StaticArray[0x81_u8, 0xe2_u8, 0x75_u8, 0x59_u8, 0x14_u8, 0xcd_u8, 0xc0_u8, 0xc3_u8])
    def query_interface(this : IMFRelativePanelReport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRelativePanelReport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRelativePanelReport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_relative_panel(this : IMFRelativePanelReport*, panel : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_relative_panel.call(this, panel)
    end

  end

  @[Extern]
  record IMFRelativePanelWatcherVtbl,
    query_interface : Proc(IMFRelativePanelWatcher*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFRelativePanelWatcher*, UInt32),
    release : Proc(IMFRelativePanelWatcher*, UInt32),
    shutdown : Proc(IMFRelativePanelWatcher*, Win32cr::Foundation::HRESULT),
    get_shutdown_status : Proc(IMFRelativePanelWatcher*, Win32cr::Media::MediaFoundation::MFSHUTDOWN_STATUS*, Win32cr::Foundation::HRESULT),
    begin_get_report : Proc(IMFRelativePanelWatcher*, Void*, Void*, Win32cr::Foundation::HRESULT),
    end_get_report : Proc(IMFRelativePanelWatcher*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_report : Proc(IMFRelativePanelWatcher*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("421af7f6-573e-4ad0-8fda-2e57cedb18c6")]
  record IMFRelativePanelWatcher, lpVtbl : IMFRelativePanelWatcherVtbl* do
    GUID = LibC::GUID.new(0x421af7f6_u32, 0x573e_u16, 0x4ad0_u16, StaticArray[0x8f_u8, 0xda_u8, 0x2e_u8, 0x57_u8, 0xce_u8, 0xdb_u8, 0x18_u8, 0xc6_u8])
    def query_interface(this : IMFRelativePanelWatcher*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFRelativePanelWatcher*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFRelativePanelWatcher*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def shutdown(this : IMFRelativePanelWatcher*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_shutdown_status(this : IMFRelativePanelWatcher*, pStatus : Win32cr::Media::MediaFoundation::MFSHUTDOWN_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_shutdown_status.call(this, pStatus)
    end
    def begin_get_report(this : IMFRelativePanelWatcher*, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_get_report.call(this, pCallback, pState)
    end
    def end_get_report(this : IMFRelativePanelWatcher*, pResult : Void*, ppRelativePanelReport : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_get_report.call(this, pResult, ppRelativePanelReport)
    end
    def get_report(this : IMFRelativePanelWatcher*, ppRelativePanelReport : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_report.call(this, ppRelativePanelReport)
    end

  end

  @[Extern]
  record IMFCameraOcclusionStateReportVtbl,
    query_interface : Proc(IMFCameraOcclusionStateReport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCameraOcclusionStateReport*, UInt32),
    release : Proc(IMFCameraOcclusionStateReport*, UInt32),
    get_occlusion_state : Proc(IMFCameraOcclusionStateReport*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1640b2cf-74da-4462-a43b-b76d3bdc1434")]
  record IMFCameraOcclusionStateReport, lpVtbl : IMFCameraOcclusionStateReportVtbl* do
    GUID = LibC::GUID.new(0x1640b2cf_u32, 0x74da_u16, 0x4462_u16, StaticArray[0xa4_u8, 0x3b_u8, 0xb7_u8, 0x6d_u8, 0x3b_u8, 0xdc_u8, 0x14_u8, 0x34_u8])
    def query_interface(this : IMFCameraOcclusionStateReport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCameraOcclusionStateReport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCameraOcclusionStateReport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_occlusion_state(this : IMFCameraOcclusionStateReport*, occlusionState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_occlusion_state.call(this, occlusionState)
    end

  end

  @[Extern]
  record IMFCameraOcclusionStateReportCallbackVtbl,
    query_interface : Proc(IMFCameraOcclusionStateReportCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCameraOcclusionStateReportCallback*, UInt32),
    release : Proc(IMFCameraOcclusionStateReportCallback*, UInt32),
    on_occlusion_state_report : Proc(IMFCameraOcclusionStateReportCallback*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6e5841c7-3889-4019-9035-783fb19b5948")]
  record IMFCameraOcclusionStateReportCallback, lpVtbl : IMFCameraOcclusionStateReportCallbackVtbl* do
    GUID = LibC::GUID.new(0x6e5841c7_u32, 0x3889_u16, 0x4019_u16, StaticArray[0x90_u8, 0x35_u8, 0x78_u8, 0x3f_u8, 0xb1_u8, 0x9b_u8, 0x59_u8, 0x48_u8])
    def query_interface(this : IMFCameraOcclusionStateReportCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCameraOcclusionStateReportCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCameraOcclusionStateReportCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_occlusion_state_report(this : IMFCameraOcclusionStateReportCallback*, occlusionStateReport : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_occlusion_state_report.call(this, occlusionStateReport)
    end

  end

  @[Extern]
  record IMFCameraOcclusionStateMonitorVtbl,
    query_interface : Proc(IMFCameraOcclusionStateMonitor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCameraOcclusionStateMonitor*, UInt32),
    release : Proc(IMFCameraOcclusionStateMonitor*, UInt32),
    start : Proc(IMFCameraOcclusionStateMonitor*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFCameraOcclusionStateMonitor*, Win32cr::Foundation::HRESULT),
    get_supported_states : Proc(IMFCameraOcclusionStateMonitor*, UInt32)


  @[Extern]
  #@[Com("cc692f46-c697-47e2-a72d-7b064617749b")]
  record IMFCameraOcclusionStateMonitor, lpVtbl : IMFCameraOcclusionStateMonitorVtbl* do
    GUID = LibC::GUID.new(0xcc692f46_u32, 0xc697_u16, 0x47e2_u16, StaticArray[0xa7_u8, 0x2d_u8, 0x7b_u8, 0x6_u8, 0x46_u8, 0x17_u8, 0x74_u8, 0x9b_u8])
    def query_interface(this : IMFCameraOcclusionStateMonitor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCameraOcclusionStateMonitor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCameraOcclusionStateMonitor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start(this : IMFCameraOcclusionStateMonitor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IMFCameraOcclusionStateMonitor*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def get_supported_states(this : IMFCameraOcclusionStateMonitor*) : UInt32
      @lpVtbl.try &.value.get_supported_states.call(this)
    end

  end

  @[Extern]
  record IMFVideoCaptureSampleAllocatorVtbl,
    query_interface : Proc(IMFVideoCaptureSampleAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoCaptureSampleAllocator*, UInt32),
    release : Proc(IMFVideoCaptureSampleAllocator*, UInt32),
    set_direct_x_manager : Proc(IMFVideoCaptureSampleAllocator*, Void*, Win32cr::Foundation::HRESULT),
    uninitialize_sample_allocator : Proc(IMFVideoCaptureSampleAllocator*, Win32cr::Foundation::HRESULT),
    initialize_sample_allocator : Proc(IMFVideoCaptureSampleAllocator*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    allocate_sample : Proc(IMFVideoCaptureSampleAllocator*, Void**, Win32cr::Foundation::HRESULT),
    initialize_capture_sample_allocator : Proc(IMFVideoCaptureSampleAllocator*, UInt32, UInt32, UInt32, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("725b77c7-ca9f-4fe5-9d72-9946bf9b3c70")]
  record IMFVideoCaptureSampleAllocator, lpVtbl : IMFVideoCaptureSampleAllocatorVtbl* do
    GUID = LibC::GUID.new(0x725b77c7_u32, 0xca9f_u16, 0x4fe5_u16, StaticArray[0x9d_u8, 0x72_u8, 0x99_u8, 0x46_u8, 0xbf_u8, 0x9b_u8, 0x3c_u8, 0x70_u8])
    def query_interface(this : IMFVideoCaptureSampleAllocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoCaptureSampleAllocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoCaptureSampleAllocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_direct_x_manager(this : IMFVideoCaptureSampleAllocator*, pManager : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_direct_x_manager.call(this, pManager)
    end
    def uninitialize_sample_allocator(this : IMFVideoCaptureSampleAllocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.uninitialize_sample_allocator.call(this)
    end
    def initialize_sample_allocator(this : IMFVideoCaptureSampleAllocator*, cRequestedFrames : UInt32, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_sample_allocator.call(this, cRequestedFrames, pMediaType)
    end
    def allocate_sample(this : IMFVideoCaptureSampleAllocator*, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.allocate_sample.call(this, ppSample)
    end
    def initialize_capture_sample_allocator(this : IMFVideoCaptureSampleAllocator*, cbSampleSize : UInt32, cbCaptureMetadataSize : UInt32, cbAlignment : UInt32, cMinimumSamples : UInt32, pAttributes : Void*, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_capture_sample_allocator.call(this, cbSampleSize, cbCaptureMetadataSize, cbAlignment, cMinimumSamples, pAttributes, pMediaType)
    end

  end

  @[Extern]
  record IMFSampleAllocatorControlVtbl,
    query_interface : Proc(IMFSampleAllocatorControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSampleAllocatorControl*, UInt32),
    release : Proc(IMFSampleAllocatorControl*, UInt32),
    set_default_allocator : Proc(IMFSampleAllocatorControl*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_allocator_usage : Proc(IMFSampleAllocatorControl*, UInt32, UInt32*, Win32cr::Media::MediaFoundation::MFSampleAllocatorUsage*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("da62b958-3a38-4a97-bd27-149c640c0771")]
  record IMFSampleAllocatorControl, lpVtbl : IMFSampleAllocatorControlVtbl* do
    GUID = LibC::GUID.new(0xda62b958_u32, 0x3a38_u16, 0x4a97_u16, StaticArray[0xbd_u8, 0x27_u8, 0x14_u8, 0x9c_u8, 0x64_u8, 0xc_u8, 0x7_u8, 0x71_u8])
    def query_interface(this : IMFSampleAllocatorControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSampleAllocatorControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSampleAllocatorControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_default_allocator(this : IMFSampleAllocatorControl*, dwOutputStreamID : UInt32, pAllocator : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_allocator.call(this, dwOutputStreamID, pAllocator)
    end
    def get_allocator_usage(this : IMFSampleAllocatorControl*, dwOutputStreamID : UInt32, pdwInputStreamID : UInt32*, peUsage : Win32cr::Media::MediaFoundation::MFSampleAllocatorUsage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocator_usage.call(this, dwOutputStreamID, pdwInputStreamID, peUsage)
    end

  end

  @[Extern]
  record IMFASFContentInfoVtbl,
    query_interface : Proc(IMFASFContentInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFContentInfo*, UInt32),
    release : Proc(IMFASFContentInfo*, UInt32),
    get_header_size : Proc(IMFASFContentInfo*, Void*, UInt64*, Win32cr::Foundation::HRESULT),
    parse_header : Proc(IMFASFContentInfo*, Void*, UInt64, Win32cr::Foundation::HRESULT),
    generate_header : Proc(IMFASFContentInfo*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    get_profile : Proc(IMFASFContentInfo*, Void**, Win32cr::Foundation::HRESULT),
    set_profile : Proc(IMFASFContentInfo*, Void*, Win32cr::Foundation::HRESULT),
    generate_presentation_descriptor : Proc(IMFASFContentInfo*, Void**, Win32cr::Foundation::HRESULT),
    get_encoding_configuration_property_store : Proc(IMFASFContentInfo*, UInt16, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b1dca5cd-d5da-4451-8e9e-db5c59914ead")]
  record IMFASFContentInfo, lpVtbl : IMFASFContentInfoVtbl* do
    GUID = LibC::GUID.new(0xb1dca5cd_u32, 0xd5da_u16, 0x4451_u16, StaticArray[0x8e_u8, 0x9e_u8, 0xdb_u8, 0x5c_u8, 0x59_u8, 0x91_u8, 0x4e_u8, 0xad_u8])
    def query_interface(this : IMFASFContentInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFContentInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFContentInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_header_size(this : IMFASFContentInfo*, pIStartOfContent : Void*, cbHeaderSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_header_size.call(this, pIStartOfContent, cbHeaderSize)
    end
    def parse_header(this : IMFASFContentInfo*, pIHeaderBuffer : Void*, cbOffsetWithinHeader : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_header.call(this, pIHeaderBuffer, cbOffsetWithinHeader)
    end
    def generate_header(this : IMFASFContentInfo*, pIHeader : Void*, pcbHeader : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_header.call(this, pIHeader, pcbHeader)
    end
    def get_profile(this : IMFASFContentInfo*, ppIProfile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_profile.call(this, ppIProfile)
    end
    def set_profile(this : IMFASFContentInfo*, pIProfile : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_profile.call(this, pIProfile)
    end
    def generate_presentation_descriptor(this : IMFASFContentInfo*, ppIPresentationDescriptor : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_presentation_descriptor.call(this, ppIPresentationDescriptor)
    end
    def get_encoding_configuration_property_store(this : IMFASFContentInfo*, wStreamNumber : UInt16, ppIStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_encoding_configuration_property_store.call(this, wStreamNumber, ppIStore)
    end

  end

  @[Extern]
  record IMFASFProfileVtbl,
    query_interface : Proc(IMFASFProfile*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFProfile*, UInt32),
    release : Proc(IMFASFProfile*, UInt32),
    get_item : Proc(IMFASFProfile*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFASFProfile*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFASFProfile*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFASFProfile*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFASFProfile*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFASFProfile*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFASFProfile*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFASFProfile*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFASFProfile*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFASFProfile*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFASFProfile*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFASFProfile*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFASFProfile*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFASFProfile*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFASFProfile*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFASFProfile*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFASFProfile*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFASFProfile*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFASFProfile*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFASFProfile*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFASFProfile*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFASFProfile*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFASFProfile*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFASFProfile*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFASFProfile*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFASFProfile*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFASFProfile*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFASFProfile*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFASFProfile*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFASFProfile*, Void*, Win32cr::Foundation::HRESULT),
    get_stream_count : Proc(IMFASFProfile*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream : Proc(IMFASFProfile*, UInt32, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_by_number : Proc(IMFASFProfile*, UInt16, Void**, Win32cr::Foundation::HRESULT),
    set_stream : Proc(IMFASFProfile*, Void*, Win32cr::Foundation::HRESULT),
    remove_stream : Proc(IMFASFProfile*, UInt16, Win32cr::Foundation::HRESULT),
    create_stream : Proc(IMFASFProfile*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_mutual_exclusion_count : Proc(IMFASFProfile*, UInt32*, Win32cr::Foundation::HRESULT),
    get_mutual_exclusion : Proc(IMFASFProfile*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    add_mutual_exclusion : Proc(IMFASFProfile*, Void*, Win32cr::Foundation::HRESULT),
    remove_mutual_exclusion : Proc(IMFASFProfile*, UInt32, Win32cr::Foundation::HRESULT),
    create_mutual_exclusion : Proc(IMFASFProfile*, Void**, Win32cr::Foundation::HRESULT),
    get_stream_prioritization : Proc(IMFASFProfile*, Void**, Win32cr::Foundation::HRESULT),
    add_stream_prioritization : Proc(IMFASFProfile*, Void*, Win32cr::Foundation::HRESULT),
    remove_stream_prioritization : Proc(IMFASFProfile*, Win32cr::Foundation::HRESULT),
    create_stream_prioritization : Proc(IMFASFProfile*, Void**, Win32cr::Foundation::HRESULT),
    clone : Proc(IMFASFProfile*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d267bf6a-028b-4e0d-903d-43f0ef82d0d4")]
  record IMFASFProfile, lpVtbl : IMFASFProfileVtbl* do
    GUID = LibC::GUID.new(0xd267bf6a_u32, 0x28b_u16, 0x4e0d_u16, StaticArray[0x90_u8, 0x3d_u8, 0x43_u8, 0xf0_u8, 0xef_u8, 0x82_u8, 0xd0_u8, 0xd4_u8])
    def query_interface(this : IMFASFProfile*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFProfile*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFProfile*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFASFProfile*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFASFProfile*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFASFProfile*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFASFProfile*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFASFProfile*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFASFProfile*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFASFProfile*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFASFProfile*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFASFProfile*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFASFProfile*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFASFProfile*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFASFProfile*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFASFProfile*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFASFProfile*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFASFProfile*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFASFProfile*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFASFProfile*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFASFProfile*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFASFProfile*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFASFProfile*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFASFProfile*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFASFProfile*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFASFProfile*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFASFProfile*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFASFProfile*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFASFProfile*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFASFProfile*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFASFProfile*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFASFProfile*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFASFProfile*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_stream_count(this : IMFASFProfile*, pcStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pcStreams)
    end
    def get_stream(this : IMFASFProfile*, dwStreamIndex : UInt32, pwStreamNumber : UInt16*, ppIStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream.call(this, dwStreamIndex, pwStreamNumber, ppIStream)
    end
    def get_stream_by_number(this : IMFASFProfile*, wStreamNumber : UInt16, ppIStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_by_number.call(this, wStreamNumber, ppIStream)
    end
    def set_stream(this : IMFASFProfile*, pIStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream.call(this, pIStream)
    end
    def remove_stream(this : IMFASFProfile*, wStreamNumber : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream.call(this, wStreamNumber)
    end
    def create_stream(this : IMFASFProfile*, pIMediaType : Void*, ppIStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stream.call(this, pIMediaType, ppIStream)
    end
    def get_mutual_exclusion_count(this : IMFASFProfile*, pcMutexs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mutual_exclusion_count.call(this, pcMutexs)
    end
    def get_mutual_exclusion(this : IMFASFProfile*, dwMutexIndex : UInt32, ppIMutex : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mutual_exclusion.call(this, dwMutexIndex, ppIMutex)
    end
    def add_mutual_exclusion(this : IMFASFProfile*, pIMutex : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_mutual_exclusion.call(this, pIMutex)
    end
    def remove_mutual_exclusion(this : IMFASFProfile*, dwMutexIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_mutual_exclusion.call(this, dwMutexIndex)
    end
    def create_mutual_exclusion(this : IMFASFProfile*, ppIMutex : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_mutual_exclusion.call(this, ppIMutex)
    end
    def get_stream_prioritization(this : IMFASFProfile*, ppIStreamPrioritization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_prioritization.call(this, ppIStreamPrioritization)
    end
    def add_stream_prioritization(this : IMFASFProfile*, pIStreamPrioritization : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream_prioritization.call(this, pIStreamPrioritization)
    end
    def remove_stream_prioritization(this : IMFASFProfile*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream_prioritization.call(this)
    end
    def create_stream_prioritization(this : IMFASFProfile*, ppIStreamPrioritization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_stream_prioritization.call(this, ppIStreamPrioritization)
    end
    def clone(this : IMFASFProfile*, ppIProfile : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIProfile)
    end

  end

  @[Extern]
  record IMFASFStreamConfigVtbl,
    query_interface : Proc(IMFASFStreamConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFStreamConfig*, UInt32),
    release : Proc(IMFASFStreamConfig*, UInt32),
    get_item : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFASFStreamConfig*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFASFStreamConfig*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFASFStreamConfig*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFASFStreamConfig*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFASFStreamConfig*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFASFStreamConfig*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFASFStreamConfig*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFASFStreamConfig*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFASFStreamConfig*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFASFStreamConfig*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFASFStreamConfig*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFASFStreamConfig*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFASFStreamConfig*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFASFStreamConfig*, Void*, Win32cr::Foundation::HRESULT),
    get_stream_type : Proc(IMFASFStreamConfig*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_stream_number : Proc(IMFASFStreamConfig*, UInt16),
    set_stream_number : Proc(IMFASFStreamConfig*, UInt16, Win32cr::Foundation::HRESULT),
    get_media_type : Proc(IMFASFStreamConfig*, Void**, Win32cr::Foundation::HRESULT),
    set_media_type : Proc(IMFASFStreamConfig*, Void*, Win32cr::Foundation::HRESULT),
    get_payload_extension_count : Proc(IMFASFStreamConfig*, UInt16*, Win32cr::Foundation::HRESULT),
    get_payload_extension : Proc(IMFASFStreamConfig*, UInt16, LibC::GUID*, UInt16*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    add_payload_extension : Proc(IMFASFStreamConfig*, LibC::GUID, UInt16, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    remove_all_payload_extensions : Proc(IMFASFStreamConfig*, Win32cr::Foundation::HRESULT),
    clone : Proc(IMFASFStreamConfig*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9e8ae8d2-dbbd-4200-9aca-06e6df484913")]
  record IMFASFStreamConfig, lpVtbl : IMFASFStreamConfigVtbl* do
    GUID = LibC::GUID.new(0x9e8ae8d2_u32, 0xdbbd_u16, 0x4200_u16, StaticArray[0x9a_u8, 0xca_u8, 0x6_u8, 0xe6_u8, 0xdf_u8, 0x48_u8, 0x49_u8, 0x13_u8])
    def query_interface(this : IMFASFStreamConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFStreamConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFStreamConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFASFStreamConfig*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFASFStreamConfig*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFASFStreamConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFASFStreamConfig*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFASFStreamConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFASFStreamConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFASFStreamConfig*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFASFStreamConfig*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFASFStreamConfig*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_stream_type(this : IMFASFStreamConfig*, pguidStreamType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_type.call(this, pguidStreamType)
    end
    def get_stream_number(this : IMFASFStreamConfig*) : UInt16
      @lpVtbl.try &.value.get_stream_number.call(this)
    end
    def set_stream_number(this : IMFASFStreamConfig*, wStreamNum : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_number.call(this, wStreamNum)
    end
    def get_media_type(this : IMFASFStreamConfig*, ppIMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_type.call(this, ppIMediaType)
    end
    def set_media_type(this : IMFASFStreamConfig*, pIMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_type.call(this, pIMediaType)
    end
    def get_payload_extension_count(this : IMFASFStreamConfig*, pcPayloadExtensions : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_payload_extension_count.call(this, pcPayloadExtensions)
    end
    def get_payload_extension(this : IMFASFStreamConfig*, wPayloadExtensionNumber : UInt16, pguidExtensionSystemID : LibC::GUID*, pcbExtensionDataSize : UInt16*, pbExtensionSystemInfo : UInt8*, pcbExtensionSystemInfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_payload_extension.call(this, wPayloadExtensionNumber, pguidExtensionSystemID, pcbExtensionDataSize, pbExtensionSystemInfo, pcbExtensionSystemInfo)
    end
    def add_payload_extension(this : IMFASFStreamConfig*, guidExtensionSystemID : LibC::GUID, cbExtensionDataSize : UInt16, pbExtensionSystemInfo : UInt8*, cbExtensionSystemInfo : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_payload_extension.call(this, guidExtensionSystemID, cbExtensionDataSize, pbExtensionSystemInfo, cbExtensionSystemInfo)
    end
    def remove_all_payload_extensions(this : IMFASFStreamConfig*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_payload_extensions.call(this)
    end
    def clone(this : IMFASFStreamConfig*, ppIStreamConfig : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIStreamConfig)
    end

  end

  @[Extern]
  record IMFASFMutualExclusionVtbl,
    query_interface : Proc(IMFASFMutualExclusion*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFMutualExclusion*, UInt32),
    release : Proc(IMFASFMutualExclusion*, UInt32),
    get_type : Proc(IMFASFMutualExclusion*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_type : Proc(IMFASFMutualExclusion*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_record_count : Proc(IMFASFMutualExclusion*, UInt32*, Win32cr::Foundation::HRESULT),
    get_streams_for_record : Proc(IMFASFMutualExclusion*, UInt32, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    add_stream_for_record : Proc(IMFASFMutualExclusion*, UInt32, UInt16, Win32cr::Foundation::HRESULT),
    remove_stream_from_record : Proc(IMFASFMutualExclusion*, UInt32, UInt16, Win32cr::Foundation::HRESULT),
    remove_record : Proc(IMFASFMutualExclusion*, UInt32, Win32cr::Foundation::HRESULT),
    add_record : Proc(IMFASFMutualExclusion*, UInt32*, Win32cr::Foundation::HRESULT),
    clone : Proc(IMFASFMutualExclusion*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("12558291-e399-11d5-bc2a-00b0d0f3f4ab")]
  record IMFASFMutualExclusion, lpVtbl : IMFASFMutualExclusionVtbl* do
    GUID = LibC::GUID.new(0x12558291_u32, 0xe399_u16, 0x11d5_u16, StaticArray[0xbc_u8, 0x2a_u8, 0x0_u8, 0xb0_u8, 0xd0_u8, 0xf3_u8, 0xf4_u8, 0xab_u8])
    def query_interface(this : IMFASFMutualExclusion*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFMutualExclusion*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFMutualExclusion*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type(this : IMFASFMutualExclusion*, pguidType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pguidType)
    end
    def set_type(this : IMFASFMutualExclusion*, guidType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type.call(this, guidType)
    end
    def get_record_count(this : IMFASFMutualExclusion*, pdwRecordCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_record_count.call(this, pdwRecordCount)
    end
    def get_streams_for_record(this : IMFASFMutualExclusion*, dwRecordNumber : UInt32, pwStreamNumArray : UInt16*, pcStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_streams_for_record.call(this, dwRecordNumber, pwStreamNumArray, pcStreams)
    end
    def add_stream_for_record(this : IMFASFMutualExclusion*, dwRecordNumber : UInt32, wStreamNumber : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream_for_record.call(this, dwRecordNumber, wStreamNumber)
    end
    def remove_stream_from_record(this : IMFASFMutualExclusion*, dwRecordNumber : UInt32, wStreamNumber : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream_from_record.call(this, dwRecordNumber, wStreamNumber)
    end
    def remove_record(this : IMFASFMutualExclusion*, dwRecordNumber : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_record.call(this, dwRecordNumber)
    end
    def add_record(this : IMFASFMutualExclusion*, pdwRecordNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_record.call(this, pdwRecordNumber)
    end
    def clone(this : IMFASFMutualExclusion*, ppIMutex : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIMutex)
    end

  end

  @[Extern]
  record IMFASFStreamPrioritizationVtbl,
    query_interface : Proc(IMFASFStreamPrioritization*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFStreamPrioritization*, UInt32),
    release : Proc(IMFASFStreamPrioritization*, UInt32),
    get_stream_count : Proc(IMFASFStreamPrioritization*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream : Proc(IMFASFStreamPrioritization*, UInt32, UInt16*, UInt16*, Win32cr::Foundation::HRESULT),
    add_stream : Proc(IMFASFStreamPrioritization*, UInt16, UInt16, Win32cr::Foundation::HRESULT),
    remove_stream : Proc(IMFASFStreamPrioritization*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IMFASFStreamPrioritization*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("699bdc27-bbaf-49ff-8e38-9c39c9b5e088")]
  record IMFASFStreamPrioritization, lpVtbl : IMFASFStreamPrioritizationVtbl* do
    GUID = LibC::GUID.new(0x699bdc27_u32, 0xbbaf_u16, 0x49ff_u16, StaticArray[0x8e_u8, 0x38_u8, 0x9c_u8, 0x39_u8, 0xc9_u8, 0xb5_u8, 0xe0_u8, 0x88_u8])
    def query_interface(this : IMFASFStreamPrioritization*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFStreamPrioritization*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFStreamPrioritization*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_count(this : IMFASFStreamPrioritization*, pdwStreamCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pdwStreamCount)
    end
    def get_stream(this : IMFASFStreamPrioritization*, dwStreamIndex : UInt32, pwStreamNumber : UInt16*, pwStreamFlags : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream.call(this, dwStreamIndex, pwStreamNumber, pwStreamFlags)
    end
    def add_stream(this : IMFASFStreamPrioritization*, wStreamNumber : UInt16, wStreamFlags : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, wStreamNumber, wStreamFlags)
    end
    def remove_stream(this : IMFASFStreamPrioritization*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream.call(this, dwStreamIndex)
    end
    def clone(this : IMFASFStreamPrioritization*, ppIStreamPrioritization : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppIStreamPrioritization)
    end

  end

  @[Extern]
  record IMFASFIndexerVtbl,
    query_interface : Proc(IMFASFIndexer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFIndexer*, UInt32),
    release : Proc(IMFASFIndexer*, UInt32),
    set_flags : Proc(IMFASFIndexer*, UInt32, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IMFASFIndexer*, UInt32*, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IMFASFIndexer*, Void*, Win32cr::Foundation::HRESULT),
    get_index_position : Proc(IMFASFIndexer*, Void*, UInt64*, Win32cr::Foundation::HRESULT),
    set_index_byte_streams : Proc(IMFASFIndexer*, Void**, UInt32, Win32cr::Foundation::HRESULT),
    get_index_byte_stream_count : Proc(IMFASFIndexer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_index_status : Proc(IMFASFIndexer*, Win32cr::Media::MediaFoundation::ASF_INDEX_IDENTIFIER*, Win32cr::Foundation::BOOL*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    set_index_status : Proc(IMFASFIndexer*, UInt8*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_seek_position_for_value : Proc(IMFASFIndexer*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Media::MediaFoundation::ASF_INDEX_IDENTIFIER*, UInt64*, Int64*, UInt32*, Win32cr::Foundation::HRESULT),
    generate_index_entries : Proc(IMFASFIndexer*, Void*, Win32cr::Foundation::HRESULT),
    commit_index : Proc(IMFASFIndexer*, Void*, Win32cr::Foundation::HRESULT),
    get_index_write_space : Proc(IMFASFIndexer*, UInt64*, Win32cr::Foundation::HRESULT),
    get_completed_index : Proc(IMFASFIndexer*, Void*, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("53590f48-dc3b-4297-813f-787761ad7b3e")]
  record IMFASFIndexer, lpVtbl : IMFASFIndexerVtbl* do
    GUID = LibC::GUID.new(0x53590f48_u32, 0xdc3b_u16, 0x4297_u16, StaticArray[0x81_u8, 0x3f_u8, 0x78_u8, 0x77_u8, 0x61_u8, 0xad_u8, 0x7b_u8, 0x3e_u8])
    def query_interface(this : IMFASFIndexer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFIndexer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFIndexer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_flags(this : IMFASFIndexer*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, dwFlags)
    end
    def get_flags(this : IMFASFIndexer*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pdwFlags)
    end
    def initialize__(this : IMFASFIndexer*, pIContentInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pIContentInfo)
    end
    def get_index_position(this : IMFASFIndexer*, pIContentInfo : Void*, pcbIndexOffset : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_position.call(this, pIContentInfo, pcbIndexOffset)
    end
    def set_index_byte_streams(this : IMFASFIndexer*, ppIByteStreams : Void**, cByteStreams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_index_byte_streams.call(this, ppIByteStreams, cByteStreams)
    end
    def get_index_byte_stream_count(this : IMFASFIndexer*, pcByteStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_byte_stream_count.call(this, pcByteStreams)
    end
    def get_index_status(this : IMFASFIndexer*, pIndexIdentifier : Win32cr::Media::MediaFoundation::ASF_INDEX_IDENTIFIER*, pfIsIndexed : Win32cr::Foundation::BOOL*, pbIndexDescriptor : UInt8*, pcbIndexDescriptor : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_status.call(this, pIndexIdentifier, pfIsIndexed, pbIndexDescriptor, pcbIndexDescriptor)
    end
    def set_index_status(this : IMFASFIndexer*, pbIndexDescriptor : UInt8*, cbIndexDescriptor : UInt32, fGenerateIndex : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_index_status.call(this, pbIndexDescriptor, cbIndexDescriptor, fGenerateIndex)
    end
    def get_seek_position_for_value(this : IMFASFIndexer*, pvarValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pIndexIdentifier : Win32cr::Media::MediaFoundation::ASF_INDEX_IDENTIFIER*, pcbOffsetWithinData : UInt64*, phnsApproxTime : Int64*, pdwPayloadNumberOfStreamWithinPacket : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_seek_position_for_value.call(this, pvarValue, pIndexIdentifier, pcbOffsetWithinData, phnsApproxTime, pdwPayloadNumberOfStreamWithinPacket)
    end
    def generate_index_entries(this : IMFASFIndexer*, pIASFPacketSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_index_entries.call(this, pIASFPacketSample)
    end
    def commit_index(this : IMFASFIndexer*, pIContentInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit_index.call(this, pIContentInfo)
    end
    def get_index_write_space(this : IMFASFIndexer*, pcbIndexWriteSpace : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_index_write_space.call(this, pcbIndexWriteSpace)
    end
    def get_completed_index(this : IMFASFIndexer*, pIIndexBuffer : Void*, cbOffsetWithinIndex : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_completed_index.call(this, pIIndexBuffer, cbOffsetWithinIndex)
    end

  end

  @[Extern]
  record IMFASFSplitterVtbl,
    query_interface : Proc(IMFASFSplitter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFSplitter*, UInt32),
    release : Proc(IMFASFSplitter*, UInt32),
    initialize__ : Proc(IMFASFSplitter*, Void*, Win32cr::Foundation::HRESULT),
    set_flags : Proc(IMFASFSplitter*, UInt32, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IMFASFSplitter*, UInt32*, Win32cr::Foundation::HRESULT),
    select_streams : Proc(IMFASFSplitter*, UInt16*, UInt16, Win32cr::Foundation::HRESULT),
    get_selected_streams : Proc(IMFASFSplitter*, UInt16*, UInt16*, Win32cr::Foundation::HRESULT),
    parse_data : Proc(IMFASFSplitter*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_next_sample : Proc(IMFASFSplitter*, Win32cr::Media::MediaFoundation::ASF_STATUSFLAGS*, UInt16*, Void**, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFASFSplitter*, Win32cr::Foundation::HRESULT),
    get_last_send_time : Proc(IMFASFSplitter*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("12558295-e399-11d5-bc2a-00b0d0f3f4ab")]
  record IMFASFSplitter, lpVtbl : IMFASFSplitterVtbl* do
    GUID = LibC::GUID.new(0x12558295_u32, 0xe399_u16, 0x11d5_u16, StaticArray[0xbc_u8, 0x2a_u8, 0x0_u8, 0xb0_u8, 0xd0_u8, 0xf3_u8, 0xf4_u8, 0xab_u8])
    def query_interface(this : IMFASFSplitter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFSplitter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFSplitter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IMFASFSplitter*, pIContentInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pIContentInfo)
    end
    def set_flags(this : IMFASFSplitter*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, dwFlags)
    end
    def get_flags(this : IMFASFSplitter*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pdwFlags)
    end
    def select_streams(this : IMFASFSplitter*, pwStreamNumbers : UInt16*, wNumStreams : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_streams.call(this, pwStreamNumbers, wNumStreams)
    end
    def get_selected_streams(this : IMFASFSplitter*, pwStreamNumbers : UInt16*, pwNumStreams : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selected_streams.call(this, pwStreamNumbers, pwNumStreams)
    end
    def parse_data(this : IMFASFSplitter*, pIBuffer : Void*, cbBufferOffset : UInt32, cbLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.parse_data.call(this, pIBuffer, cbBufferOffset, cbLength)
    end
    def get_next_sample(this : IMFASFSplitter*, pdwStatusFlags : Win32cr::Media::MediaFoundation::ASF_STATUSFLAGS*, pwStreamNumber : UInt16*, ppISample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_sample.call(this, pdwStatusFlags, pwStreamNumber, ppISample)
    end
    def flush(this : IMFASFSplitter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this)
    end
    def get_last_send_time(this : IMFASFSplitter*, pdwLastSendTime : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_last_send_time.call(this, pdwLastSendTime)
    end

  end

  @[Extern]
  record IMFASFMultiplexerVtbl,
    query_interface : Proc(IMFASFMultiplexer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFMultiplexer*, UInt32),
    release : Proc(IMFASFMultiplexer*, UInt32),
    initialize__ : Proc(IMFASFMultiplexer*, Void*, Win32cr::Foundation::HRESULT),
    set_flags : Proc(IMFASFMultiplexer*, UInt32, Win32cr::Foundation::HRESULT),
    get_flags : Proc(IMFASFMultiplexer*, UInt32*, Win32cr::Foundation::HRESULT),
    process_sample : Proc(IMFASFMultiplexer*, UInt16, Void*, Int64, Win32cr::Foundation::HRESULT),
    get_next_packet : Proc(IMFASFMultiplexer*, UInt32*, Void**, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFASFMultiplexer*, Win32cr::Foundation::HRESULT),
    end__ : Proc(IMFASFMultiplexer*, Void*, Win32cr::Foundation::HRESULT),
    get_statistics : Proc(IMFASFMultiplexer*, UInt16, Win32cr::Media::MediaFoundation::ASF_MUX_STATISTICS*, Win32cr::Foundation::HRESULT),
    set_sync_tolerance : Proc(IMFASFMultiplexer*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("57bdd80a-9b38-4838-b737-c58f670d7d4f")]
  record IMFASFMultiplexer, lpVtbl : IMFASFMultiplexerVtbl* do
    GUID = LibC::GUID.new(0x57bdd80a_u32, 0x9b38_u16, 0x4838_u16, StaticArray[0xb7_u8, 0x37_u8, 0xc5_u8, 0x8f_u8, 0x67_u8, 0xd_u8, 0x7d_u8, 0x4f_u8])
    def query_interface(this : IMFASFMultiplexer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFMultiplexer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFMultiplexer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IMFASFMultiplexer*, pIContentInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pIContentInfo)
    end
    def set_flags(this : IMFASFMultiplexer*, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, dwFlags)
    end
    def get_flags(this : IMFASFMultiplexer*, pdwFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_flags.call(this, pdwFlags)
    end
    def process_sample(this : IMFASFMultiplexer*, wStreamNumber : UInt16, pISample : Void*, hnsTimestampAdjust : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_sample.call(this, wStreamNumber, pISample, hnsTimestampAdjust)
    end
    def get_next_packet(this : IMFASFMultiplexer*, pdwStatusFlags : UInt32*, ppIPacket : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_packet.call(this, pdwStatusFlags, ppIPacket)
    end
    def flush(this : IMFASFMultiplexer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this)
    end
    def end__(this : IMFASFMultiplexer*, pIContentInfo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end__.call(this, pIContentInfo)
    end
    def get_statistics(this : IMFASFMultiplexer*, wStreamNumber : UInt16, pMuxStats : Win32cr::Media::MediaFoundation::ASF_MUX_STATISTICS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statistics.call(this, wStreamNumber, pMuxStats)
    end
    def set_sync_tolerance(this : IMFASFMultiplexer*, msSyncTolerance : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sync_tolerance.call(this, msSyncTolerance)
    end

  end

  @[Extern]
  record IMFASFStreamSelectorVtbl,
    query_interface : Proc(IMFASFStreamSelector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFASFStreamSelector*, UInt32),
    release : Proc(IMFASFStreamSelector*, UInt32),
    get_stream_count : Proc(IMFASFStreamSelector*, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_count : Proc(IMFASFStreamSelector*, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_stream_count : Proc(IMFASFStreamSelector*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_stream_numbers : Proc(IMFASFStreamSelector*, UInt32, UInt16*, Win32cr::Foundation::HRESULT),
    get_output_from_stream : Proc(IMFASFStreamSelector*, UInt16, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_override : Proc(IMFASFStreamSelector*, UInt32, Win32cr::Media::MediaFoundation::ASF_SELECTION_STATUS*, Win32cr::Foundation::HRESULT),
    set_output_override : Proc(IMFASFStreamSelector*, UInt32, Win32cr::Media::MediaFoundation::ASF_SELECTION_STATUS, Win32cr::Foundation::HRESULT),
    get_output_mutex_count : Proc(IMFASFStreamSelector*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_output_mutex : Proc(IMFASFStreamSelector*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_output_mutex_selection : Proc(IMFASFStreamSelector*, UInt32, UInt32, UInt16, Win32cr::Foundation::HRESULT),
    get_bandwidth_step_count : Proc(IMFASFStreamSelector*, UInt32*, Win32cr::Foundation::HRESULT),
    get_bandwidth_step : Proc(IMFASFStreamSelector*, UInt32, UInt32*, UInt16*, Win32cr::Media::MediaFoundation::ASF_SELECTION_STATUS*, Win32cr::Foundation::HRESULT),
    bitrate_to_step_number : Proc(IMFASFStreamSelector*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_stream_selector_flags : Proc(IMFASFStreamSelector*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d01bad4a-4fa0-4a60-9349-c27e62da9d41")]
  record IMFASFStreamSelector, lpVtbl : IMFASFStreamSelectorVtbl* do
    GUID = LibC::GUID.new(0xd01bad4a_u32, 0x4fa0_u16, 0x4a60_u16, StaticArray[0x93_u8, 0x49_u8, 0xc2_u8, 0x7e_u8, 0x62_u8, 0xda_u8, 0x9d_u8, 0x41_u8])
    def query_interface(this : IMFASFStreamSelector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFASFStreamSelector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFASFStreamSelector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_count(this : IMFASFStreamSelector*, pcStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_count.call(this, pcStreams)
    end
    def get_output_count(this : IMFASFStreamSelector*, pcOutputs : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_count.call(this, pcOutputs)
    end
    def get_output_stream_count(this : IMFASFStreamSelector*, dwOutputNum : UInt32, pcStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_stream_count.call(this, dwOutputNum, pcStreams)
    end
    def get_output_stream_numbers(this : IMFASFStreamSelector*, dwOutputNum : UInt32, rgwStreamNumbers : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_stream_numbers.call(this, dwOutputNum, rgwStreamNumbers)
    end
    def get_output_from_stream(this : IMFASFStreamSelector*, wStreamNum : UInt16, pdwOutput : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_from_stream.call(this, wStreamNum, pdwOutput)
    end
    def get_output_override(this : IMFASFStreamSelector*, dwOutputNum : UInt32, pSelection : Win32cr::Media::MediaFoundation::ASF_SELECTION_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_override.call(this, dwOutputNum, pSelection)
    end
    def set_output_override(this : IMFASFStreamSelector*, dwOutputNum : UInt32, selection : Win32cr::Media::MediaFoundation::ASF_SELECTION_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_override.call(this, dwOutputNum, selection)
    end
    def get_output_mutex_count(this : IMFASFStreamSelector*, dwOutputNum : UInt32, pcMutexes : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mutex_count.call(this, dwOutputNum, pcMutexes)
    end
    def get_output_mutex(this : IMFASFStreamSelector*, dwOutputNum : UInt32, dwMutexNum : UInt32, ppMutex : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_mutex.call(this, dwOutputNum, dwMutexNum, ppMutex)
    end
    def set_output_mutex_selection(this : IMFASFStreamSelector*, dwOutputNum : UInt32, dwMutexNum : UInt32, wSelectedRecord : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_mutex_selection.call(this, dwOutputNum, dwMutexNum, wSelectedRecord)
    end
    def get_bandwidth_step_count(this : IMFASFStreamSelector*, pcStepCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bandwidth_step_count.call(this, pcStepCount)
    end
    def get_bandwidth_step(this : IMFASFStreamSelector*, dwStepNum : UInt32, pdwBitrate : UInt32*, rgwStreamNumbers : UInt16*, rgSelections : Win32cr::Media::MediaFoundation::ASF_SELECTION_STATUS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bandwidth_step.call(this, dwStepNum, pdwBitrate, rgwStreamNumbers, rgSelections)
    end
    def bitrate_to_step_number(this : IMFASFStreamSelector*, dwBitrate : UInt32, pdwStepNum : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.bitrate_to_step_number.call(this, dwBitrate, pdwStepNum)
    end
    def set_stream_selector_flags(this : IMFASFStreamSelector*, dwStreamSelectorFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_selector_flags.call(this, dwStreamSelectorFlags)
    end

  end

  @[Extern]
  record IMFDRMNetHelperVtbl,
    query_interface : Proc(IMFDRMNetHelper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDRMNetHelper*, UInt32),
    release : Proc(IMFDRMNetHelper*, UInt32),
    process_license_request : Proc(IMFDRMNetHelper*, UInt8*, UInt32, UInt8**, UInt32*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_chained_license_response : Proc(IMFDRMNetHelper*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3d1ff0ea-679a-4190-8d46-7fa69e8c7e15")]
  record IMFDRMNetHelper, lpVtbl : IMFDRMNetHelperVtbl* do
    GUID = LibC::GUID.new(0x3d1ff0ea_u32, 0x679a_u16, 0x4190_u16, StaticArray[0x8d_u8, 0x46_u8, 0x7f_u8, 0xa6_u8, 0x9e_u8, 0x8c_u8, 0x7e_u8, 0x15_u8])
    def query_interface(this : IMFDRMNetHelper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDRMNetHelper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDRMNetHelper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def process_license_request(this : IMFDRMNetHelper*, pLicenseRequest : UInt8*, cbLicenseRequest : UInt32, ppLicenseResponse : UInt8**, pcbLicenseResponse : UInt32*, pbstrKID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_license_request.call(this, pLicenseRequest, cbLicenseRequest, ppLicenseResponse, pcbLicenseResponse, pbstrKID)
    end
    def get_chained_license_response(this : IMFDRMNetHelper*, ppLicenseResponse : UInt8**, pcbLicenseResponse : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_chained_license_response.call(this, ppLicenseResponse, pcbLicenseResponse)
    end

  end

  @[Extern]
  record IMFCaptureEngineOnEventCallbackVtbl,
    query_interface : Proc(IMFCaptureEngineOnEventCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureEngineOnEventCallback*, UInt32),
    release : Proc(IMFCaptureEngineOnEventCallback*, UInt32),
    on_event : Proc(IMFCaptureEngineOnEventCallback*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aeda51c0-9025-4983-9012-de597b88b089")]
  record IMFCaptureEngineOnEventCallback, lpVtbl : IMFCaptureEngineOnEventCallbackVtbl* do
    GUID = LibC::GUID.new(0xaeda51c0_u32, 0x9025_u16, 0x4983_u16, StaticArray[0x90_u8, 0x12_u8, 0xde_u8, 0x59_u8, 0x7b_u8, 0x88_u8, 0xb0_u8, 0x89_u8])
    def query_interface(this : IMFCaptureEngineOnEventCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureEngineOnEventCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureEngineOnEventCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_event(this : IMFCaptureEngineOnEventCallback*, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event.call(this, pEvent)
    end

  end

  @[Extern]
  record IMFCaptureEngineOnSampleCallbackVtbl,
    query_interface : Proc(IMFCaptureEngineOnSampleCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureEngineOnSampleCallback*, UInt32),
    release : Proc(IMFCaptureEngineOnSampleCallback*, UInt32),
    on_sample : Proc(IMFCaptureEngineOnSampleCallback*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("52150b82-ab39-4467-980f-e48bf0822ecd")]
  record IMFCaptureEngineOnSampleCallback, lpVtbl : IMFCaptureEngineOnSampleCallbackVtbl* do
    GUID = LibC::GUID.new(0x52150b82_u32, 0xab39_u16, 0x4467_u16, StaticArray[0x98_u8, 0xf_u8, 0xe4_u8, 0x8b_u8, 0xf0_u8, 0x82_u8, 0x2e_u8, 0xcd_u8])
    def query_interface(this : IMFCaptureEngineOnSampleCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureEngineOnSampleCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureEngineOnSampleCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_sample(this : IMFCaptureEngineOnSampleCallback*, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_sample.call(this, pSample)
    end

  end

  @[Extern]
  record IMFCaptureSinkVtbl,
    query_interface : Proc(IMFCaptureSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureSink*, UInt32),
    release : Proc(IMFCaptureSink*, UInt32),
    get_output_media_type : Proc(IMFCaptureSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_service : Proc(IMFCaptureSink*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_stream : Proc(IMFCaptureSink*, UInt32, Void*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    prepare : Proc(IMFCaptureSink*, Win32cr::Foundation::HRESULT),
    remove_all_streams : Proc(IMFCaptureSink*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("72d6135b-35e9-412c-b926-fd5265f2a885")]
  record IMFCaptureSink, lpVtbl : IMFCaptureSinkVtbl* do
    GUID = LibC::GUID.new(0x72d6135b_u32, 0x35e9_u16, 0x412c_u16, StaticArray[0xb9_u8, 0x26_u8, 0xfd_u8, 0x52_u8, 0x65_u8, 0xf2_u8, 0xa8_u8, 0x85_u8])
    def query_interface(this : IMFCaptureSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_output_media_type(this : IMFCaptureSink*, dwSinkStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_media_type.call(this, dwSinkStreamIndex, ppMediaType)
    end
    def get_service(this : IMFCaptureSink*, dwSinkStreamIndex : UInt32, rguidService : LibC::GUID*, riid : LibC::GUID*, ppUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, dwSinkStreamIndex, rguidService, riid, ppUnknown)
    end
    def add_stream(this : IMFCaptureSink*, dwSourceStreamIndex : UInt32, pMediaType : Void*, pAttributes : Void*, pdwSinkStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, dwSourceStreamIndex, pMediaType, pAttributes, pdwSinkStreamIndex)
    end
    def prepare(this : IMFCaptureSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare.call(this)
    end
    def remove_all_streams(this : IMFCaptureSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_streams.call(this)
    end

  end

  @[Extern]
  record IMFCaptureRecordSinkVtbl,
    query_interface : Proc(IMFCaptureRecordSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureRecordSink*, UInt32),
    release : Proc(IMFCaptureRecordSink*, UInt32),
    get_output_media_type : Proc(IMFCaptureRecordSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_service : Proc(IMFCaptureRecordSink*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_stream : Proc(IMFCaptureRecordSink*, UInt32, Void*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    prepare : Proc(IMFCaptureRecordSink*, Win32cr::Foundation::HRESULT),
    remove_all_streams : Proc(IMFCaptureRecordSink*, Win32cr::Foundation::HRESULT),
    set_output_byte_stream : Proc(IMFCaptureRecordSink*, Void*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_output_file_name : Proc(IMFCaptureRecordSink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_sample_callback : Proc(IMFCaptureRecordSink*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_custom_sink : Proc(IMFCaptureRecordSink*, Void*, Win32cr::Foundation::HRESULT),
    get_rotation : Proc(IMFCaptureRecordSink*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_rotation : Proc(IMFCaptureRecordSink*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3323b55a-f92a-4fe2-8edc-e9bfc0634d77")]
  record IMFCaptureRecordSink, lpVtbl : IMFCaptureRecordSinkVtbl* do
    GUID = LibC::GUID.new(0x3323b55a_u32, 0xf92a_u16, 0x4fe2_u16, StaticArray[0x8e_u8, 0xdc_u8, 0xe9_u8, 0xbf_u8, 0xc0_u8, 0x63_u8, 0x4d_u8, 0x77_u8])
    def query_interface(this : IMFCaptureRecordSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureRecordSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureRecordSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_output_media_type(this : IMFCaptureRecordSink*, dwSinkStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_media_type.call(this, dwSinkStreamIndex, ppMediaType)
    end
    def get_service(this : IMFCaptureRecordSink*, dwSinkStreamIndex : UInt32, rguidService : LibC::GUID*, riid : LibC::GUID*, ppUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, dwSinkStreamIndex, rguidService, riid, ppUnknown)
    end
    def add_stream(this : IMFCaptureRecordSink*, dwSourceStreamIndex : UInt32, pMediaType : Void*, pAttributes : Void*, pdwSinkStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, dwSourceStreamIndex, pMediaType, pAttributes, pdwSinkStreamIndex)
    end
    def prepare(this : IMFCaptureRecordSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare.call(this)
    end
    def remove_all_streams(this : IMFCaptureRecordSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_streams.call(this)
    end
    def set_output_byte_stream(this : IMFCaptureRecordSink*, pByteStream : Void*, guidContainerType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_byte_stream.call(this, pByteStream, guidContainerType)
    end
    def set_output_file_name(this : IMFCaptureRecordSink*, fileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_file_name.call(this, fileName)
    end
    def set_sample_callback(this : IMFCaptureRecordSink*, dwStreamSinkIndex : UInt32, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_callback.call(this, dwStreamSinkIndex, pCallback)
    end
    def set_custom_sink(this : IMFCaptureRecordSink*, pMediaSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_custom_sink.call(this, pMediaSink)
    end
    def get_rotation(this : IMFCaptureRecordSink*, dwStreamIndex : UInt32, pdwRotationValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rotation.call(this, dwStreamIndex, pdwRotationValue)
    end
    def set_rotation(this : IMFCaptureRecordSink*, dwStreamIndex : UInt32, dwRotationValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation.call(this, dwStreamIndex, dwRotationValue)
    end

  end

  @[Extern]
  record IMFCapturePreviewSinkVtbl,
    query_interface : Proc(IMFCapturePreviewSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCapturePreviewSink*, UInt32),
    release : Proc(IMFCapturePreviewSink*, UInt32),
    get_output_media_type : Proc(IMFCapturePreviewSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_service : Proc(IMFCapturePreviewSink*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_stream : Proc(IMFCapturePreviewSink*, UInt32, Void*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    prepare : Proc(IMFCapturePreviewSink*, Win32cr::Foundation::HRESULT),
    remove_all_streams : Proc(IMFCapturePreviewSink*, Win32cr::Foundation::HRESULT),
    set_render_handle : Proc(IMFCapturePreviewSink*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_render_surface : Proc(IMFCapturePreviewSink*, Void*, Win32cr::Foundation::HRESULT),
    update_video : Proc(IMFCapturePreviewSink*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, UInt32*, Win32cr::Foundation::HRESULT),
    set_sample_callback : Proc(IMFCapturePreviewSink*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_mirror_state : Proc(IMFCapturePreviewSink*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_mirror_state : Proc(IMFCapturePreviewSink*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_rotation : Proc(IMFCapturePreviewSink*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_rotation : Proc(IMFCapturePreviewSink*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_custom_sink : Proc(IMFCapturePreviewSink*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("77346cfd-5b49-4d73-ace0-5b52a859f2e0")]
  record IMFCapturePreviewSink, lpVtbl : IMFCapturePreviewSinkVtbl* do
    GUID = LibC::GUID.new(0x77346cfd_u32, 0x5b49_u16, 0x4d73_u16, StaticArray[0xac_u8, 0xe0_u8, 0x5b_u8, 0x52_u8, 0xa8_u8, 0x59_u8, 0xf2_u8, 0xe0_u8])
    def query_interface(this : IMFCapturePreviewSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCapturePreviewSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCapturePreviewSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_output_media_type(this : IMFCapturePreviewSink*, dwSinkStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_media_type.call(this, dwSinkStreamIndex, ppMediaType)
    end
    def get_service(this : IMFCapturePreviewSink*, dwSinkStreamIndex : UInt32, rguidService : LibC::GUID*, riid : LibC::GUID*, ppUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, dwSinkStreamIndex, rguidService, riid, ppUnknown)
    end
    def add_stream(this : IMFCapturePreviewSink*, dwSourceStreamIndex : UInt32, pMediaType : Void*, pAttributes : Void*, pdwSinkStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, dwSourceStreamIndex, pMediaType, pAttributes, pdwSinkStreamIndex)
    end
    def prepare(this : IMFCapturePreviewSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare.call(this)
    end
    def remove_all_streams(this : IMFCapturePreviewSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_streams.call(this)
    end
    def set_render_handle(this : IMFCapturePreviewSink*, handle : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_handle.call(this, handle)
    end
    def set_render_surface(this : IMFCapturePreviewSink*, pSurface : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_surface.call(this, pSurface)
    end
    def update_video(this : IMFCapturePreviewSink*, pSrc : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, pDst : Win32cr::Foundation::RECT*, pBorderClr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_video.call(this, pSrc, pDst, pBorderClr)
    end
    def set_sample_callback(this : IMFCapturePreviewSink*, dwStreamSinkIndex : UInt32, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_callback.call(this, dwStreamSinkIndex, pCallback)
    end
    def get_mirror_state(this : IMFCapturePreviewSink*, pfMirrorState : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mirror_state.call(this, pfMirrorState)
    end
    def set_mirror_state(this : IMFCapturePreviewSink*, fMirrorState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mirror_state.call(this, fMirrorState)
    end
    def get_rotation(this : IMFCapturePreviewSink*, dwStreamIndex : UInt32, pdwRotationValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rotation.call(this, dwStreamIndex, pdwRotationValue)
    end
    def set_rotation(this : IMFCapturePreviewSink*, dwStreamIndex : UInt32, dwRotationValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation.call(this, dwStreamIndex, dwRotationValue)
    end
    def set_custom_sink(this : IMFCapturePreviewSink*, pMediaSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_custom_sink.call(this, pMediaSink)
    end

  end

  @[Extern]
  record IMFCapturePhotoSinkVtbl,
    query_interface : Proc(IMFCapturePhotoSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCapturePhotoSink*, UInt32),
    release : Proc(IMFCapturePhotoSink*, UInt32),
    get_output_media_type : Proc(IMFCapturePhotoSink*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_service : Proc(IMFCapturePhotoSink*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_stream : Proc(IMFCapturePhotoSink*, UInt32, Void*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    prepare : Proc(IMFCapturePhotoSink*, Win32cr::Foundation::HRESULT),
    remove_all_streams : Proc(IMFCapturePhotoSink*, Win32cr::Foundation::HRESULT),
    set_output_file_name : Proc(IMFCapturePhotoSink*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_sample_callback : Proc(IMFCapturePhotoSink*, Void*, Win32cr::Foundation::HRESULT),
    set_output_byte_stream : Proc(IMFCapturePhotoSink*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d2d43cc8-48bb-4aa7-95db-10c06977e777")]
  record IMFCapturePhotoSink, lpVtbl : IMFCapturePhotoSinkVtbl* do
    GUID = LibC::GUID.new(0xd2d43cc8_u32, 0x48bb_u16, 0x4aa7_u16, StaticArray[0x95_u8, 0xdb_u8, 0x10_u8, 0xc0_u8, 0x69_u8, 0x77_u8, 0xe7_u8, 0x77_u8])
    def query_interface(this : IMFCapturePhotoSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCapturePhotoSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCapturePhotoSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_output_media_type(this : IMFCapturePhotoSink*, dwSinkStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_media_type.call(this, dwSinkStreamIndex, ppMediaType)
    end
    def get_service(this : IMFCapturePhotoSink*, dwSinkStreamIndex : UInt32, rguidService : LibC::GUID*, riid : LibC::GUID*, ppUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, dwSinkStreamIndex, rguidService, riid, ppUnknown)
    end
    def add_stream(this : IMFCapturePhotoSink*, dwSourceStreamIndex : UInt32, pMediaType : Void*, pAttributes : Void*, pdwSinkStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, dwSourceStreamIndex, pMediaType, pAttributes, pdwSinkStreamIndex)
    end
    def prepare(this : IMFCapturePhotoSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare.call(this)
    end
    def remove_all_streams(this : IMFCapturePhotoSink*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_streams.call(this)
    end
    def set_output_file_name(this : IMFCapturePhotoSink*, fileName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_file_name.call(this, fileName)
    end
    def set_sample_callback(this : IMFCapturePhotoSink*, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_callback.call(this, pCallback)
    end
    def set_output_byte_stream(this : IMFCapturePhotoSink*, pByteStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_byte_stream.call(this, pByteStream)
    end

  end

  @[Extern]
  record IMFCaptureSourceVtbl,
    query_interface : Proc(IMFCaptureSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureSource*, UInt32),
    release : Proc(IMFCaptureSource*, UInt32),
    get_capture_device_source : Proc(IMFCaptureSource*, Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_DEVICE_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_capture_device_activate : Proc(IMFCaptureSource*, Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_DEVICE_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_service : Proc(IMFCaptureSource*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_effect : Proc(IMFCaptureSource*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    remove_effect : Proc(IMFCaptureSource*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    remove_all_effects : Proc(IMFCaptureSource*, UInt32, Win32cr::Foundation::HRESULT),
    get_available_device_media_type : Proc(IMFCaptureSource*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_current_device_media_type : Proc(IMFCaptureSource*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_current_device_media_type : Proc(IMFCaptureSource*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_device_stream_count : Proc(IMFCaptureSource*, UInt32*, Win32cr::Foundation::HRESULT),
    get_device_stream_category : Proc(IMFCaptureSource*, UInt32, Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_STREAM_CATEGORY*, Win32cr::Foundation::HRESULT),
    get_mirror_state : Proc(IMFCaptureSource*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_mirror_state : Proc(IMFCaptureSource*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_stream_index_from_friendly_name : Proc(IMFCaptureSource*, UInt32, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("439a42a8-0d2c-4505-be83-f79b2a05d5c4")]
  record IMFCaptureSource, lpVtbl : IMFCaptureSourceVtbl* do
    GUID = LibC::GUID.new(0x439a42a8_u32, 0xd2c_u16, 0x4505_u16, StaticArray[0xbe_u8, 0x83_u8, 0xf7_u8, 0x9b_u8, 0x2a_u8, 0x5_u8, 0xd5_u8, 0xc4_u8])
    def query_interface(this : IMFCaptureSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_capture_device_source(this : IMFCaptureSource*, mfCaptureEngineDeviceType : Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_DEVICE_TYPE, ppMediaSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capture_device_source.call(this, mfCaptureEngineDeviceType, ppMediaSource)
    end
    def get_capture_device_activate(this : IMFCaptureSource*, mfCaptureEngineDeviceType : Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_DEVICE_TYPE, ppActivate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capture_device_activate.call(this, mfCaptureEngineDeviceType, ppActivate)
    end
    def get_service(this : IMFCaptureSource*, rguidService : LibC::GUID*, riid : LibC::GUID*, ppUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, rguidService, riid, ppUnknown)
    end
    def add_effect(this : IMFCaptureSource*, dwSourceStreamIndex : UInt32, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_effect.call(this, dwSourceStreamIndex, pUnknown)
    end
    def remove_effect(this : IMFCaptureSource*, dwSourceStreamIndex : UInt32, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_effect.call(this, dwSourceStreamIndex, pUnknown)
    end
    def remove_all_effects(this : IMFCaptureSource*, dwSourceStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_effects.call(this, dwSourceStreamIndex)
    end
    def get_available_device_media_type(this : IMFCaptureSource*, dwSourceStreamIndex : UInt32, dwMediaTypeIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_device_media_type.call(this, dwSourceStreamIndex, dwMediaTypeIndex, ppMediaType)
    end
    def set_current_device_media_type(this : IMFCaptureSource*, dwSourceStreamIndex : UInt32, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_device_media_type.call(this, dwSourceStreamIndex, pMediaType)
    end
    def get_current_device_media_type(this : IMFCaptureSource*, dwSourceStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_device_media_type.call(this, dwSourceStreamIndex, ppMediaType)
    end
    def get_device_stream_count(this : IMFCaptureSource*, pdwStreamCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_stream_count.call(this, pdwStreamCount)
    end
    def get_device_stream_category(this : IMFCaptureSource*, dwSourceStreamIndex : UInt32, pStreamCategory : Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_STREAM_CATEGORY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_stream_category.call(this, dwSourceStreamIndex, pStreamCategory)
    end
    def get_mirror_state(this : IMFCaptureSource*, dwStreamIndex : UInt32, pfMirrorState : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mirror_state.call(this, dwStreamIndex, pfMirrorState)
    end
    def set_mirror_state(this : IMFCaptureSource*, dwStreamIndex : UInt32, fMirrorState : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mirror_state.call(this, dwStreamIndex, fMirrorState)
    end
    def get_stream_index_from_friendly_name(this : IMFCaptureSource*, uifriendlyName : UInt32, pdwActualStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_index_from_friendly_name.call(this, uifriendlyName, pdwActualStreamIndex)
    end

  end

  @[Extern]
  record IMFCaptureEngineVtbl,
    query_interface : Proc(IMFCaptureEngine*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureEngine*, UInt32),
    release : Proc(IMFCaptureEngine*, UInt32),
    initialize__ : Proc(IMFCaptureEngine*, Void*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT),
    start_preview : Proc(IMFCaptureEngine*, Win32cr::Foundation::HRESULT),
    stop_preview : Proc(IMFCaptureEngine*, Win32cr::Foundation::HRESULT),
    start_record : Proc(IMFCaptureEngine*, Win32cr::Foundation::HRESULT),
    stop_record : Proc(IMFCaptureEngine*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    take_photo : Proc(IMFCaptureEngine*, Win32cr::Foundation::HRESULT),
    get_sink : Proc(IMFCaptureEngine*, Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_SINK_TYPE, Void**, Win32cr::Foundation::HRESULT),
    get_source : Proc(IMFCaptureEngine*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a6bba433-176b-48b2-b375-53aa03473207")]
  record IMFCaptureEngine, lpVtbl : IMFCaptureEngineVtbl* do
    GUID = LibC::GUID.new(0xa6bba433_u32, 0x176b_u16, 0x48b2_u16, StaticArray[0xb3_u8, 0x75_u8, 0x53_u8, 0xaa_u8, 0x3_u8, 0x47_u8, 0x32_u8, 0x7_u8])
    def query_interface(this : IMFCaptureEngine*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureEngine*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureEngine*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IMFCaptureEngine*, pEventCallback : Void*, pAttributes : Void*, pAudioSource : Void*, pVideoSource : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pEventCallback, pAttributes, pAudioSource, pVideoSource)
    end
    def start_preview(this : IMFCaptureEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_preview.call(this)
    end
    def stop_preview(this : IMFCaptureEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_preview.call(this)
    end
    def start_record(this : IMFCaptureEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_record.call(this)
    end
    def stop_record(this : IMFCaptureEngine*, bFinalize : Win32cr::Foundation::BOOL, bFlushUnprocessedSamples : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_record.call(this, bFinalize, bFlushUnprocessedSamples)
    end
    def take_photo(this : IMFCaptureEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.take_photo.call(this)
    end
    def get_sink(this : IMFCaptureEngine*, mfCaptureEngineSinkType : Win32cr::Media::MediaFoundation::MF_CAPTURE_ENGINE_SINK_TYPE, ppSink : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sink.call(this, mfCaptureEngineSinkType, ppSink)
    end
    def get_source(this : IMFCaptureEngine*, ppSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_source.call(this, ppSource)
    end

  end

  @[Extern]
  record IMFCaptureEngineClassFactoryVtbl,
    query_interface : Proc(IMFCaptureEngineClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureEngineClassFactory*, UInt32),
    release : Proc(IMFCaptureEngineClassFactory*, UInt32),
    create_instance : Proc(IMFCaptureEngineClassFactory*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8f02d140-56fc-4302-a705-3a97c78be779")]
  record IMFCaptureEngineClassFactory, lpVtbl : IMFCaptureEngineClassFactoryVtbl* do
    GUID = LibC::GUID.new(0x8f02d140_u32, 0x56fc_u16, 0x4302_u16, StaticArray[0xa7_u8, 0x5_u8, 0x3a_u8, 0x97_u8, 0xc7_u8, 0x8b_u8, 0xe7_u8, 0x79_u8])
    def query_interface(this : IMFCaptureEngineClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance(this : IMFCaptureEngineClassFactory*, clsid : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance.call(this, clsid, riid, ppvObject)
    end

  end

  @[Extern]
  record IMFCaptureEngineOnSampleCallback2Vtbl,
    query_interface : Proc(IMFCaptureEngineOnSampleCallback2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureEngineOnSampleCallback2*, UInt32),
    release : Proc(IMFCaptureEngineOnSampleCallback2*, UInt32),
    on_sample : Proc(IMFCaptureEngineOnSampleCallback2*, Void*, Win32cr::Foundation::HRESULT),
    on_synchronized_event : Proc(IMFCaptureEngineOnSampleCallback2*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e37ceed7-340f-4514-9f4d-9c2ae026100b")]
  record IMFCaptureEngineOnSampleCallback2, lpVtbl : IMFCaptureEngineOnSampleCallback2Vtbl* do
    GUID = LibC::GUID.new(0xe37ceed7_u32, 0x340f_u16, 0x4514_u16, StaticArray[0x9f_u8, 0x4d_u8, 0x9c_u8, 0x2a_u8, 0xe0_u8, 0x26_u8, 0x10_u8, 0xb_u8])
    def query_interface(this : IMFCaptureEngineOnSampleCallback2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureEngineOnSampleCallback2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureEngineOnSampleCallback2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_sample(this : IMFCaptureEngineOnSampleCallback2*, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_sample.call(this, pSample)
    end
    def on_synchronized_event(this : IMFCaptureEngineOnSampleCallback2*, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_synchronized_event.call(this, pEvent)
    end

  end

  @[Extern]
  record IMFCaptureSink2Vtbl,
    query_interface : Proc(IMFCaptureSink2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCaptureSink2*, UInt32),
    release : Proc(IMFCaptureSink2*, UInt32),
    get_output_media_type : Proc(IMFCaptureSink2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_service : Proc(IMFCaptureSink2*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_stream : Proc(IMFCaptureSink2*, UInt32, Void*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    prepare : Proc(IMFCaptureSink2*, Win32cr::Foundation::HRESULT),
    remove_all_streams : Proc(IMFCaptureSink2*, Win32cr::Foundation::HRESULT),
    set_output_media_type : Proc(IMFCaptureSink2*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f9e4219e-6197-4b5e-b888-bee310ab2c59")]
  record IMFCaptureSink2, lpVtbl : IMFCaptureSink2Vtbl* do
    GUID = LibC::GUID.new(0xf9e4219e_u32, 0x6197_u16, 0x4b5e_u16, StaticArray[0xb8_u8, 0x88_u8, 0xbe_u8, 0xe3_u8, 0x10_u8, 0xab_u8, 0x2c_u8, 0x59_u8])
    def query_interface(this : IMFCaptureSink2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCaptureSink2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCaptureSink2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_output_media_type(this : IMFCaptureSink2*, dwSinkStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_media_type.call(this, dwSinkStreamIndex, ppMediaType)
    end
    def get_service(this : IMFCaptureSink2*, dwSinkStreamIndex : UInt32, rguidService : LibC::GUID*, riid : LibC::GUID*, ppUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, dwSinkStreamIndex, rguidService, riid, ppUnknown)
    end
    def add_stream(this : IMFCaptureSink2*, dwSourceStreamIndex : UInt32, pMediaType : Void*, pAttributes : Void*, pdwSinkStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, dwSourceStreamIndex, pMediaType, pAttributes, pdwSinkStreamIndex)
    end
    def prepare(this : IMFCaptureSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare.call(this)
    end
    def remove_all_streams(this : IMFCaptureSink2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_streams.call(this)
    end
    def set_output_media_type(this : IMFCaptureSink2*, dwStreamIndex : UInt32, pMediaType : Void*, pEncodingAttributes : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_output_media_type.call(this, dwStreamIndex, pMediaType, pEncodingAttributes)
    end

  end

  @[Extern]
  record IMFD3D12SynchronizationObjectCommandsVtbl,
    query_interface : Proc(IMFD3D12SynchronizationObjectCommands*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFD3D12SynchronizationObjectCommands*, UInt32),
    release : Proc(IMFD3D12SynchronizationObjectCommands*, UInt32),
    enqueue_resource_ready : Proc(IMFD3D12SynchronizationObjectCommands*, Void*, Win32cr::Foundation::HRESULT),
    enqueue_resource_ready_wait : Proc(IMFD3D12SynchronizationObjectCommands*, Void*, Win32cr::Foundation::HRESULT),
    signal_event_on_resource_ready : Proc(IMFD3D12SynchronizationObjectCommands*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    enqueue_resource_release : Proc(IMFD3D12SynchronizationObjectCommands*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("09d0f835-92ff-4e53-8efa-40faa551f233")]
  record IMFD3D12SynchronizationObjectCommands, lpVtbl : IMFD3D12SynchronizationObjectCommandsVtbl* do
    GUID = LibC::GUID.new(0x9d0f835_u32, 0x92ff_u16, 0x4e53_u16, StaticArray[0x8e_u8, 0xfa_u8, 0x40_u8, 0xfa_u8, 0xa5_u8, 0x51_u8, 0xf2_u8, 0x33_u8])
    def query_interface(this : IMFD3D12SynchronizationObjectCommands*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFD3D12SynchronizationObjectCommands*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFD3D12SynchronizationObjectCommands*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enqueue_resource_ready(this : IMFD3D12SynchronizationObjectCommands*, pProducerCommandQueue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_resource_ready.call(this, pProducerCommandQueue)
    end
    def enqueue_resource_ready_wait(this : IMFD3D12SynchronizationObjectCommands*, pConsumerCommandQueue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_resource_ready_wait.call(this, pConsumerCommandQueue)
    end
    def signal_event_on_resource_ready(this : IMFD3D12SynchronizationObjectCommands*, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal_event_on_resource_ready.call(this, hEvent)
    end
    def enqueue_resource_release(this : IMFD3D12SynchronizationObjectCommands*, pConsumerCommandQueue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_resource_release.call(this, pConsumerCommandQueue)
    end

  end

  @[Extern]
  record IMFD3D12SynchronizationObjectVtbl,
    query_interface : Proc(IMFD3D12SynchronizationObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFD3D12SynchronizationObject*, UInt32),
    release : Proc(IMFD3D12SynchronizationObject*, UInt32),
    signal_event_on_final_resource_release : Proc(IMFD3D12SynchronizationObject*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    reset : Proc(IMFD3D12SynchronizationObject*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("802302b0-82de-45e1-b421-f19ee5bdaf23")]
  record IMFD3D12SynchronizationObject, lpVtbl : IMFD3D12SynchronizationObjectVtbl* do
    GUID = LibC::GUID.new(0x802302b0_u32, 0x82de_u16, 0x45e1_u16, StaticArray[0xb4_u8, 0x21_u8, 0xf1_u8, 0x9e_u8, 0xe5_u8, 0xbd_u8, 0xaf_u8, 0x23_u8])
    def query_interface(this : IMFD3D12SynchronizationObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFD3D12SynchronizationObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFD3D12SynchronizationObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def signal_event_on_final_resource_release(this : IMFD3D12SynchronizationObject*, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal_event_on_final_resource_release.call(this, hEvent)
    end
    def reset(this : IMFD3D12SynchronizationObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end

  end

  @[Extern]
  record MFASYNCRESULTVtbl,
    query_interface : Proc(MFASYNCRESULT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(MFASYNCRESULT*, UInt32),
    release : Proc(MFASYNCRESULT*, UInt32),
    get_state : Proc(MFASYNCRESULT*, Void**, Win32cr::Foundation::HRESULT),
    get_status : Proc(MFASYNCRESULT*, Win32cr::Foundation::HRESULT),
    set_status : Proc(MFASYNCRESULT*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    get_object : Proc(MFASYNCRESULT*, Void**, Win32cr::Foundation::HRESULT),
    get_state_no_add_ref : Proc(MFASYNCRESULT*, Void*)


  @[Extern]
  record MFASYNCRESULT, lpVtbl : MFASYNCRESULTVtbl* do
    GUID = LibC::GUID.new(0x0_u32, 0x0_u16, 0x0_u16, StaticArray[0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8])
    def query_interface(this : MFASYNCRESULT*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : MFASYNCRESULT*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : MFASYNCRESULT*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_state(this : MFASYNCRESULT*, ppunkState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, ppunkState)
    end
    def get_status(this : MFASYNCRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status.call(this)
    end
    def set_status(this : MFASYNCRESULT*, hrStatus : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, hrStatus)
    end
    def get_object(this : MFASYNCRESULT*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, ppObject)
    end
    def get_state_no_add_ref(this : MFASYNCRESULT*) : Void*
      @lpVtbl.try &.value.get_state_no_add_ref.call(this)
    end

  end

  @[Extern]
  record IMFMediaErrorVtbl,
    query_interface : Proc(IMFMediaError*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaError*, UInt32),
    release : Proc(IMFMediaError*, UInt32),
    get_error_code : Proc(IMFMediaError*, UInt16),
    get_extended_error_code : Proc(IMFMediaError*, Win32cr::Foundation::HRESULT),
    set_error_code : Proc(IMFMediaError*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR, Win32cr::Foundation::HRESULT),
    set_extended_error_code : Proc(IMFMediaError*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fc0e10d2-ab2a-4501-a951-06bb1075184c")]
  record IMFMediaError, lpVtbl : IMFMediaErrorVtbl* do
    GUID = LibC::GUID.new(0xfc0e10d2_u32, 0xab2a_u16, 0x4501_u16, StaticArray[0xa9_u8, 0x51_u8, 0x6_u8, 0xbb_u8, 0x10_u8, 0x75_u8, 0x18_u8, 0x4c_u8])
    def query_interface(this : IMFMediaError*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaError*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaError*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error_code(this : IMFMediaError*) : UInt16
      @lpVtbl.try &.value.get_error_code.call(this)
    end
    def get_extended_error_code(this : IMFMediaError*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_error_code.call(this)
    end
    def set_error_code(this : IMFMediaError*, error : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_error_code.call(this, error)
    end
    def set_extended_error_code(this : IMFMediaError*, error : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_extended_error_code.call(this, error)
    end

  end

  @[Extern]
  record IMFMediaTimeRangeVtbl,
    query_interface : Proc(IMFMediaTimeRange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaTimeRange*, UInt32),
    release : Proc(IMFMediaTimeRange*, UInt32),
    get_length : Proc(IMFMediaTimeRange*, UInt32),
    get_start : Proc(IMFMediaTimeRange*, UInt32, Float64*, Win32cr::Foundation::HRESULT),
    get_end : Proc(IMFMediaTimeRange*, UInt32, Float64*, Win32cr::Foundation::HRESULT),
    contains_time : Proc(IMFMediaTimeRange*, Float64, Win32cr::Foundation::BOOL),
    add_range : Proc(IMFMediaTimeRange*, Float64, Float64, Win32cr::Foundation::HRESULT),
    clear : Proc(IMFMediaTimeRange*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("db71a2fc-078a-414e-9df9-8c2531b0aa6c")]
  record IMFMediaTimeRange, lpVtbl : IMFMediaTimeRangeVtbl* do
    GUID = LibC::GUID.new(0xdb71a2fc_u32, 0x78a_u16, 0x414e_u16, StaticArray[0x9d_u8, 0xf9_u8, 0x8c_u8, 0x25_u8, 0x31_u8, 0xb0_u8, 0xaa_u8, 0x6c_u8])
    def query_interface(this : IMFMediaTimeRange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaTimeRange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaTimeRange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_length(this : IMFMediaTimeRange*) : UInt32
      @lpVtbl.try &.value.get_length.call(this)
    end
    def get_start(this : IMFMediaTimeRange*, index : UInt32, pStart : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_start.call(this, index, pStart)
    end
    def get_end(this : IMFMediaTimeRange*, index : UInt32, pEnd : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_end.call(this, index, pEnd)
    end
    def contains_time(this : IMFMediaTimeRange*, time : Float64) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.contains_time.call(this, time)
    end
    def add_range(this : IMFMediaTimeRange*, startTime : Float64, endTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_range.call(this, startTime, endTime)
    end
    def clear(this : IMFMediaTimeRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record IMFMediaEngineNotifyVtbl,
    query_interface : Proc(IMFMediaEngineNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineNotify*, UInt32),
    release : Proc(IMFMediaEngineNotify*, UInt32),
    event_notify : Proc(IMFMediaEngineNotify*, UInt32, LibC::UIntPtrT, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fee7c112-e776-42b5-9bbf-0048524e2bd5")]
  record IMFMediaEngineNotify, lpVtbl : IMFMediaEngineNotifyVtbl* do
    GUID = LibC::GUID.new(0xfee7c112_u32, 0xe776_u16, 0x42b5_u16, StaticArray[0x9b_u8, 0xbf_u8, 0x0_u8, 0x48_u8, 0x52_u8, 0x4e_u8, 0x2b_u8, 0xd5_u8])
    def query_interface(this : IMFMediaEngineNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def event_notify(this : IMFMediaEngineNotify*, event : UInt32, param1 : LibC::UIntPtrT, param2 : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.event_notify.call(this, event, param1, param2)
    end

  end

  @[Extern]
  record IMFMediaEngineSrcElementsVtbl,
    query_interface : Proc(IMFMediaEngineSrcElements*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineSrcElements*, UInt32),
    release : Proc(IMFMediaEngineSrcElements*, UInt32),
    get_length : Proc(IMFMediaEngineSrcElements*, UInt32),
    get_url : Proc(IMFMediaEngineSrcElements*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IMFMediaEngineSrcElements*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_media : Proc(IMFMediaEngineSrcElements*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    add_element : Proc(IMFMediaEngineSrcElements*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove_all_elements : Proc(IMFMediaEngineSrcElements*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7a5e5354-b114-4c72-b991-3131d75032ea")]
  record IMFMediaEngineSrcElements, lpVtbl : IMFMediaEngineSrcElementsVtbl* do
    GUID = LibC::GUID.new(0x7a5e5354_u32, 0xb114_u16, 0x4c72_u16, StaticArray[0xb9_u8, 0x91_u8, 0x31_u8, 0x31_u8, 0xd7_u8, 0x50_u8, 0x32_u8, 0xea_u8])
    def query_interface(this : IMFMediaEngineSrcElements*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineSrcElements*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineSrcElements*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_length(this : IMFMediaEngineSrcElements*) : UInt32
      @lpVtbl.try &.value.get_length.call(this)
    end
    def get_url(this : IMFMediaEngineSrcElements*, index : UInt32, pURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, index, pURL)
    end
    def get_type(this : IMFMediaEngineSrcElements*, index : UInt32, pType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, index, pType)
    end
    def get_media(this : IMFMediaEngineSrcElements*, index : UInt32, pMedia : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media.call(this, index, pMedia)
    end
    def add_element(this : IMFMediaEngineSrcElements*, pURL : Win32cr::Foundation::BSTR, pType : Win32cr::Foundation::BSTR, pMedia : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_element.call(this, pURL, pType, pMedia)
    end
    def remove_all_elements(this : IMFMediaEngineSrcElements*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_elements.call(this)
    end

  end

  @[Extern]
  record IMFMediaEngineVtbl,
    query_interface : Proc(IMFMediaEngine*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngine*, UInt32),
    release : Proc(IMFMediaEngine*, UInt32),
    get_error : Proc(IMFMediaEngine*, Void**, Win32cr::Foundation::HRESULT),
    set_error_code : Proc(IMFMediaEngine*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR, Win32cr::Foundation::HRESULT),
    set_source_elements : Proc(IMFMediaEngine*, Void*, Win32cr::Foundation::HRESULT),
    set_source : Proc(IMFMediaEngine*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_current_source : Proc(IMFMediaEngine*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_network_state : Proc(IMFMediaEngine*, UInt16),
    get_preload : Proc(IMFMediaEngine*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD),
    set_preload : Proc(IMFMediaEngine*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD, Win32cr::Foundation::HRESULT),
    get_buffered : Proc(IMFMediaEngine*, Void**, Win32cr::Foundation::HRESULT),
    load : Proc(IMFMediaEngine*, Win32cr::Foundation::HRESULT),
    can_play_type : Proc(IMFMediaEngine*, Win32cr::Foundation::BSTR, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*, Win32cr::Foundation::HRESULT),
    get_ready_state : Proc(IMFMediaEngine*, UInt16),
    is_seeking : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    get_current_time : Proc(IMFMediaEngine*, Float64),
    set_current_time : Proc(IMFMediaEngine*, Float64, Win32cr::Foundation::HRESULT),
    get_start_time : Proc(IMFMediaEngine*, Float64),
    get_duration : Proc(IMFMediaEngine*, Float64),
    is_paused : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    get_default_playback_rate : Proc(IMFMediaEngine*, Float64),
    set_default_playback_rate : Proc(IMFMediaEngine*, Float64, Win32cr::Foundation::HRESULT),
    get_playback_rate : Proc(IMFMediaEngine*, Float64),
    set_playback_rate : Proc(IMFMediaEngine*, Float64, Win32cr::Foundation::HRESULT),
    get_played : Proc(IMFMediaEngine*, Void**, Win32cr::Foundation::HRESULT),
    get_seekable : Proc(IMFMediaEngine*, Void**, Win32cr::Foundation::HRESULT),
    is_ended : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    get_auto_play : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    set_auto_play : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_loop : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    set_loop : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    play : Proc(IMFMediaEngine*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFMediaEngine*, Win32cr::Foundation::HRESULT),
    get_muted : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    set_muted : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_volume : Proc(IMFMediaEngine*, Float64),
    set_volume : Proc(IMFMediaEngine*, Float64, Win32cr::Foundation::HRESULT),
    has_video : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    has_audio : Proc(IMFMediaEngine*, Win32cr::Foundation::BOOL),
    get_native_video_size : Proc(IMFMediaEngine*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_video_aspect_ratio : Proc(IMFMediaEngine*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaEngine*, Win32cr::Foundation::HRESULT),
    transfer_video_frame : Proc(IMFMediaEngine*, Void*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    on_video_stream_tick : Proc(IMFMediaEngine*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("98a1b0bb-03eb-4935-ae7c-93c1fa0e1c93")]
  record IMFMediaEngine, lpVtbl : IMFMediaEngineVtbl* do
    GUID = LibC::GUID.new(0x98a1b0bb_u32, 0x3eb_u16, 0x4935_u16, StaticArray[0xae_u8, 0x7c_u8, 0x93_u8, 0xc1_u8, 0xfa_u8, 0xe_u8, 0x1c_u8, 0x93_u8])
    def query_interface(this : IMFMediaEngine*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngine*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngine*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error(this : IMFMediaEngine*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def set_error_code(this : IMFMediaEngine*, error : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_error_code.call(this, error)
    end
    def set_source_elements(this : IMFMediaEngine*, pSrcElements : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_elements.call(this, pSrcElements)
    end
    def set_source(this : IMFMediaEngine*, pUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source.call(this, pUrl)
    end
    def get_current_source(this : IMFMediaEngine*, ppUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_source.call(this, ppUrl)
    end
    def get_network_state(this : IMFMediaEngine*) : UInt16
      @lpVtbl.try &.value.get_network_state.call(this)
    end
    def get_preload(this : IMFMediaEngine*) : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD
      @lpVtbl.try &.value.get_preload.call(this)
    end
    def set_preload(this : IMFMediaEngine*, preload : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preload.call(this, preload)
    end
    def get_buffered(this : IMFMediaEngine*, ppBuffered : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffered.call(this, ppBuffered)
    end
    def load(this : IMFMediaEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this)
    end
    def can_play_type(this : IMFMediaEngine*, type__ : Win32cr::Foundation::BSTR, pAnswer : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_play_type.call(this, type__, pAnswer)
    end
    def get_ready_state(this : IMFMediaEngine*) : UInt16
      @lpVtbl.try &.value.get_ready_state.call(this)
    end
    def is_seeking(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_seeking.call(this)
    end
    def get_current_time(this : IMFMediaEngine*) : Float64
      @lpVtbl.try &.value.get_current_time.call(this)
    end
    def set_current_time(this : IMFMediaEngine*, seekTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_time.call(this, seekTime)
    end
    def get_start_time(this : IMFMediaEngine*) : Float64
      @lpVtbl.try &.value.get_start_time.call(this)
    end
    def get_duration(this : IMFMediaEngine*) : Float64
      @lpVtbl.try &.value.get_duration.call(this)
    end
    def is_paused(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_paused.call(this)
    end
    def get_default_playback_rate(this : IMFMediaEngine*) : Float64
      @lpVtbl.try &.value.get_default_playback_rate.call(this)
    end
    def set_default_playback_rate(this : IMFMediaEngine*, rate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_playback_rate.call(this, rate)
    end
    def get_playback_rate(this : IMFMediaEngine*) : Float64
      @lpVtbl.try &.value.get_playback_rate.call(this)
    end
    def set_playback_rate(this : IMFMediaEngine*, rate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_playback_rate.call(this, rate)
    end
    def get_played(this : IMFMediaEngine*, ppPlayed : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_played.call(this, ppPlayed)
    end
    def get_seekable(this : IMFMediaEngine*, ppSeekable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_seekable.call(this, ppSeekable)
    end
    def is_ended(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_ended.call(this)
    end
    def get_auto_play(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_auto_play.call(this)
    end
    def set_auto_play(this : IMFMediaEngine*, auto_play : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_auto_play.call(this, auto_play)
    end
    def get_loop(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_loop.call(this)
    end
    def set_loop(this : IMFMediaEngine*, loop : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_loop.call(this, loop)
    end
    def play(this : IMFMediaEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play.call(this)
    end
    def pause(this : IMFMediaEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def get_muted(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_muted.call(this)
    end
    def set_muted(this : IMFMediaEngine*, muted : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_muted.call(this, muted)
    end
    def get_volume(this : IMFMediaEngine*) : Float64
      @lpVtbl.try &.value.get_volume.call(this)
    end
    def set_volume(this : IMFMediaEngine*, volume : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_volume.call(this, volume)
    end
    def has_video(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.has_video.call(this)
    end
    def has_audio(this : IMFMediaEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.has_audio.call(this)
    end
    def get_native_video_size(this : IMFMediaEngine*, cx : UInt32*, cy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_size.call(this, cx, cy)
    end
    def get_video_aspect_ratio(this : IMFMediaEngine*, cx : UInt32*, cy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_aspect_ratio.call(this, cx, cy)
    end
    def shutdown(this : IMFMediaEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def transfer_video_frame(this : IMFMediaEngine*, pDstSurf : Void*, pSrc : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, pDst : Win32cr::Foundation::RECT*, pBorderClr : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transfer_video_frame.call(this, pDstSurf, pSrc, pDst, pBorderClr)
    end
    def on_video_stream_tick(this : IMFMediaEngine*, pPts : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_video_stream_tick.call(this, pPts)
    end

  end

  @[Extern]
  record IMFMediaEngineExVtbl,
    query_interface : Proc(IMFMediaEngineEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineEx*, UInt32),
    release : Proc(IMFMediaEngineEx*, UInt32),
    get_error : Proc(IMFMediaEngineEx*, Void**, Win32cr::Foundation::HRESULT),
    set_error_code : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR, Win32cr::Foundation::HRESULT),
    set_source_elements : Proc(IMFMediaEngineEx*, Void*, Win32cr::Foundation::HRESULT),
    set_source : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_current_source : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_network_state : Proc(IMFMediaEngineEx*, UInt16),
    get_preload : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD),
    set_preload : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD, Win32cr::Foundation::HRESULT),
    get_buffered : Proc(IMFMediaEngineEx*, Void**, Win32cr::Foundation::HRESULT),
    load : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HRESULT),
    can_play_type : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BSTR, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*, Win32cr::Foundation::HRESULT),
    get_ready_state : Proc(IMFMediaEngineEx*, UInt16),
    is_seeking : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    get_current_time : Proc(IMFMediaEngineEx*, Float64),
    set_current_time : Proc(IMFMediaEngineEx*, Float64, Win32cr::Foundation::HRESULT),
    get_start_time : Proc(IMFMediaEngineEx*, Float64),
    get_duration : Proc(IMFMediaEngineEx*, Float64),
    is_paused : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    get_default_playback_rate : Proc(IMFMediaEngineEx*, Float64),
    set_default_playback_rate : Proc(IMFMediaEngineEx*, Float64, Win32cr::Foundation::HRESULT),
    get_playback_rate : Proc(IMFMediaEngineEx*, Float64),
    set_playback_rate : Proc(IMFMediaEngineEx*, Float64, Win32cr::Foundation::HRESULT),
    get_played : Proc(IMFMediaEngineEx*, Void**, Win32cr::Foundation::HRESULT),
    get_seekable : Proc(IMFMediaEngineEx*, Void**, Win32cr::Foundation::HRESULT),
    is_ended : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    get_auto_play : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    set_auto_play : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_loop : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    set_loop : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    play : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HRESULT),
    get_muted : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    set_muted : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_volume : Proc(IMFMediaEngineEx*, Float64),
    set_volume : Proc(IMFMediaEngineEx*, Float64, Win32cr::Foundation::HRESULT),
    has_video : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    has_audio : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    get_native_video_size : Proc(IMFMediaEngineEx*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_video_aspect_ratio : Proc(IMFMediaEngineEx*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HRESULT),
    transfer_video_frame : Proc(IMFMediaEngineEx*, Void*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    on_video_stream_tick : Proc(IMFMediaEngineEx*, Int64*, Win32cr::Foundation::HRESULT),
    set_source_from_byte_stream : Proc(IMFMediaEngineEx*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_statistics : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_STATISTIC, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    update_video_stream : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    get_balance : Proc(IMFMediaEngineEx*, Float64),
    set_balance : Proc(IMFMediaEngineEx*, Float64, Win32cr::Foundation::HRESULT),
    is_playback_rate_supported : Proc(IMFMediaEngineEx*, Float64, Win32cr::Foundation::BOOL),
    frame_step : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_resource_characteristics : Proc(IMFMediaEngineEx*, UInt32*, Win32cr::Foundation::HRESULT),
    get_presentation_attribute : Proc(IMFMediaEngineEx*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_number_of_streams : Proc(IMFMediaEngineEx*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_attribute : Proc(IMFMediaEngineEx*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_stream_selection : Proc(IMFMediaEngineEx*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_stream_selection : Proc(IMFMediaEngineEx*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    apply_stream_selections : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HRESULT),
    is_protected : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    insert_video_effect : Proc(IMFMediaEngineEx*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    insert_audio_effect : Proc(IMFMediaEngineEx*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    remove_all_effects : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HRESULT),
    set_timeline_marker_timer : Proc(IMFMediaEngineEx*, Float64, Win32cr::Foundation::HRESULT),
    get_timeline_marker_timer : Proc(IMFMediaEngineEx*, Float64*, Win32cr::Foundation::HRESULT),
    cancel_timeline_marker_timer : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HRESULT),
    is_stereo3_d : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL),
    get_stereo3_d_frame_packing_mode : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_S3D_PACKING_MODE*, Win32cr::Foundation::HRESULT),
    set_stereo3_d_frame_packing_mode : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_S3D_PACKING_MODE, Win32cr::Foundation::HRESULT),
    get_stereo3_d_render_mode : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF3DVideoOutputType*, Win32cr::Foundation::HRESULT),
    set_stereo3_d_render_mode : Proc(IMFMediaEngineEx*, Win32cr::Media::MediaFoundation::MF3DVideoOutputType, Win32cr::Foundation::HRESULT),
    enable_windowless_swapchain_mode : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_video_swapchain_handle : Proc(IMFMediaEngineEx*, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    enable_horizontal_mirror_mode : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_audio_stream_category : Proc(IMFMediaEngineEx*, UInt32*, Win32cr::Foundation::HRESULT),
    set_audio_stream_category : Proc(IMFMediaEngineEx*, UInt32, Win32cr::Foundation::HRESULT),
    get_audio_endpoint_role : Proc(IMFMediaEngineEx*, UInt32*, Win32cr::Foundation::HRESULT),
    set_audio_endpoint_role : Proc(IMFMediaEngineEx*, UInt32, Win32cr::Foundation::HRESULT),
    get_real_time_mode : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_real_time_mode : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_current_time_ex : Proc(IMFMediaEngineEx*, Float64, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_SEEK_MODE, Win32cr::Foundation::HRESULT),
    enable_time_update_timer : Proc(IMFMediaEngineEx*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83015ead-b1e6-40d0-a98a-37145ffe1ad1")]
  record IMFMediaEngineEx, lpVtbl : IMFMediaEngineExVtbl* do
    GUID = LibC::GUID.new(0x83015ead_u32, 0xb1e6_u16, 0x40d0_u16, StaticArray[0xa9_u8, 0x8a_u8, 0x37_u8, 0x14_u8, 0x5f_u8, 0xfe_u8, 0x1a_u8, 0xd1_u8])
    def query_interface(this : IMFMediaEngineEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error(this : IMFMediaEngineEx*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def set_error_code(this : IMFMediaEngineEx*, error : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_error_code.call(this, error)
    end
    def set_source_elements(this : IMFMediaEngineEx*, pSrcElements : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_elements.call(this, pSrcElements)
    end
    def set_source(this : IMFMediaEngineEx*, pUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source.call(this, pUrl)
    end
    def get_current_source(this : IMFMediaEngineEx*, ppUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_source.call(this, ppUrl)
    end
    def get_network_state(this : IMFMediaEngineEx*) : UInt16
      @lpVtbl.try &.value.get_network_state.call(this)
    end
    def get_preload(this : IMFMediaEngineEx*) : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD
      @lpVtbl.try &.value.get_preload.call(this)
    end
    def set_preload(this : IMFMediaEngineEx*, preload : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preload.call(this, preload)
    end
    def get_buffered(this : IMFMediaEngineEx*, ppBuffered : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffered.call(this, ppBuffered)
    end
    def load(this : IMFMediaEngineEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this)
    end
    def can_play_type(this : IMFMediaEngineEx*, type__ : Win32cr::Foundation::BSTR, pAnswer : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_play_type.call(this, type__, pAnswer)
    end
    def get_ready_state(this : IMFMediaEngineEx*) : UInt16
      @lpVtbl.try &.value.get_ready_state.call(this)
    end
    def is_seeking(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_seeking.call(this)
    end
    def get_current_time(this : IMFMediaEngineEx*) : Float64
      @lpVtbl.try &.value.get_current_time.call(this)
    end
    def set_current_time(this : IMFMediaEngineEx*, seekTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_time.call(this, seekTime)
    end
    def get_start_time(this : IMFMediaEngineEx*) : Float64
      @lpVtbl.try &.value.get_start_time.call(this)
    end
    def get_duration(this : IMFMediaEngineEx*) : Float64
      @lpVtbl.try &.value.get_duration.call(this)
    end
    def is_paused(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_paused.call(this)
    end
    def get_default_playback_rate(this : IMFMediaEngineEx*) : Float64
      @lpVtbl.try &.value.get_default_playback_rate.call(this)
    end
    def set_default_playback_rate(this : IMFMediaEngineEx*, rate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_playback_rate.call(this, rate)
    end
    def get_playback_rate(this : IMFMediaEngineEx*) : Float64
      @lpVtbl.try &.value.get_playback_rate.call(this)
    end
    def set_playback_rate(this : IMFMediaEngineEx*, rate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_playback_rate.call(this, rate)
    end
    def get_played(this : IMFMediaEngineEx*, ppPlayed : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_played.call(this, ppPlayed)
    end
    def get_seekable(this : IMFMediaEngineEx*, ppSeekable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_seekable.call(this, ppSeekable)
    end
    def is_ended(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_ended.call(this)
    end
    def get_auto_play(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_auto_play.call(this)
    end
    def set_auto_play(this : IMFMediaEngineEx*, auto_play : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_auto_play.call(this, auto_play)
    end
    def get_loop(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_loop.call(this)
    end
    def set_loop(this : IMFMediaEngineEx*, loop : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_loop.call(this, loop)
    end
    def play(this : IMFMediaEngineEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play.call(this)
    end
    def pause(this : IMFMediaEngineEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def get_muted(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_muted.call(this)
    end
    def set_muted(this : IMFMediaEngineEx*, muted : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_muted.call(this, muted)
    end
    def get_volume(this : IMFMediaEngineEx*) : Float64
      @lpVtbl.try &.value.get_volume.call(this)
    end
    def set_volume(this : IMFMediaEngineEx*, volume : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_volume.call(this, volume)
    end
    def has_video(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.has_video.call(this)
    end
    def has_audio(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.has_audio.call(this)
    end
    def get_native_video_size(this : IMFMediaEngineEx*, cx : UInt32*, cy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_size.call(this, cx, cy)
    end
    def get_video_aspect_ratio(this : IMFMediaEngineEx*, cx : UInt32*, cy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_aspect_ratio.call(this, cx, cy)
    end
    def shutdown(this : IMFMediaEngineEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def transfer_video_frame(this : IMFMediaEngineEx*, pDstSurf : Void*, pSrc : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, pDst : Win32cr::Foundation::RECT*, pBorderClr : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transfer_video_frame.call(this, pDstSurf, pSrc, pDst, pBorderClr)
    end
    def on_video_stream_tick(this : IMFMediaEngineEx*, pPts : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_video_stream_tick.call(this, pPts)
    end
    def set_source_from_byte_stream(this : IMFMediaEngineEx*, pByteStream : Void*, pURL : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_from_byte_stream.call(this, pByteStream, pURL)
    end
    def get_statistics(this : IMFMediaEngineEx*, statistic_id : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_STATISTIC, pStatistic : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statistics.call(this, statistic_id, pStatistic)
    end
    def update_video_stream(this : IMFMediaEngineEx*, pSrc : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, pDst : Win32cr::Foundation::RECT*, pBorderClr : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_video_stream.call(this, pSrc, pDst, pBorderClr)
    end
    def get_balance(this : IMFMediaEngineEx*) : Float64
      @lpVtbl.try &.value.get_balance.call(this)
    end
    def set_balance(this : IMFMediaEngineEx*, balance : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_balance.call(this, balance)
    end
    def is_playback_rate_supported(this : IMFMediaEngineEx*, rate : Float64) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_playback_rate_supported.call(this, rate)
    end
    def frame_step(this : IMFMediaEngineEx*, forward : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.frame_step.call(this, forward)
    end
    def get_resource_characteristics(this : IMFMediaEngineEx*, pCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_characteristics.call(this, pCharacteristics)
    end
    def get_presentation_attribute(this : IMFMediaEngineEx*, guidMFAttribute : LibC::GUID*, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_attribute.call(this, guidMFAttribute, pvValue)
    end
    def get_number_of_streams(this : IMFMediaEngineEx*, pdwStreamCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_streams.call(this, pdwStreamCount)
    end
    def get_stream_attribute(this : IMFMediaEngineEx*, dwStreamIndex : UInt32, guidMFAttribute : LibC::GUID*, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_attribute.call(this, dwStreamIndex, guidMFAttribute, pvValue)
    end
    def get_stream_selection(this : IMFMediaEngineEx*, dwStreamIndex : UInt32, pEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_selection.call(this, dwStreamIndex, pEnabled)
    end
    def set_stream_selection(this : IMFMediaEngineEx*, dwStreamIndex : UInt32, enabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_selection.call(this, dwStreamIndex, enabled)
    end
    def apply_stream_selections(this : IMFMediaEngineEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply_stream_selections.call(this)
    end
    def is_protected(this : IMFMediaEngineEx*, pProtected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_protected.call(this, pProtected)
    end
    def insert_video_effect(this : IMFMediaEngineEx*, pEffect : Void*, fOptional : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_video_effect.call(this, pEffect, fOptional)
    end
    def insert_audio_effect(this : IMFMediaEngineEx*, pEffect : Void*, fOptional : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_audio_effect.call(this, pEffect, fOptional)
    end
    def remove_all_effects(this : IMFMediaEngineEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_effects.call(this)
    end
    def set_timeline_marker_timer(this : IMFMediaEngineEx*, timeToFire : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_timeline_marker_timer.call(this, timeToFire)
    end
    def get_timeline_marker_timer(this : IMFMediaEngineEx*, pTimeToFire : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_timeline_marker_timer.call(this, pTimeToFire)
    end
    def cancel_timeline_marker_timer(this : IMFMediaEngineEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_timeline_marker_timer.call(this)
    end
    def is_stereo3_d(this : IMFMediaEngineEx*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_stereo3_d.call(this)
    end
    def get_stereo3_d_frame_packing_mode(this : IMFMediaEngineEx*, packMode : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_S3D_PACKING_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stereo3_d_frame_packing_mode.call(this, packMode)
    end
    def set_stereo3_d_frame_packing_mode(this : IMFMediaEngineEx*, packMode : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_S3D_PACKING_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stereo3_d_frame_packing_mode.call(this, packMode)
    end
    def get_stereo3_d_render_mode(this : IMFMediaEngineEx*, outputType : Win32cr::Media::MediaFoundation::MF3DVideoOutputType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stereo3_d_render_mode.call(this, outputType)
    end
    def set_stereo3_d_render_mode(this : IMFMediaEngineEx*, outputType : Win32cr::Media::MediaFoundation::MF3DVideoOutputType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stereo3_d_render_mode.call(this, outputType)
    end
    def enable_windowless_swapchain_mode(this : IMFMediaEngineEx*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_windowless_swapchain_mode.call(this, fEnable)
    end
    def get_video_swapchain_handle(this : IMFMediaEngineEx*, phSwapchain : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_swapchain_handle.call(this, phSwapchain)
    end
    def enable_horizontal_mirror_mode(this : IMFMediaEngineEx*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_horizontal_mirror_mode.call(this, fEnable)
    end
    def get_audio_stream_category(this : IMFMediaEngineEx*, pCategory : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_stream_category.call(this, pCategory)
    end
    def set_audio_stream_category(this : IMFMediaEngineEx*, category : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_audio_stream_category.call(this, category)
    end
    def get_audio_endpoint_role(this : IMFMediaEngineEx*, pRole : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_endpoint_role.call(this, pRole)
    end
    def set_audio_endpoint_role(this : IMFMediaEngineEx*, role : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_audio_endpoint_role.call(this, role)
    end
    def get_real_time_mode(this : IMFMediaEngineEx*, pfEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_real_time_mode.call(this, pfEnabled)
    end
    def set_real_time_mode(this : IMFMediaEngineEx*, fEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_real_time_mode.call(this, fEnable)
    end
    def set_current_time_ex(this : IMFMediaEngineEx*, seekTime : Float64, seekMode : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_SEEK_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_time_ex.call(this, seekTime, seekMode)
    end
    def enable_time_update_timer(this : IMFMediaEngineEx*, fEnableTimer : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_time_update_timer.call(this, fEnableTimer)
    end

  end

  @[Extern]
  record IMFMediaEngineAudioEndpointIdVtbl,
    query_interface : Proc(IMFMediaEngineAudioEndpointId*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineAudioEndpointId*, UInt32),
    release : Proc(IMFMediaEngineAudioEndpointId*, UInt32),
    set_audio_endpoint_id : Proc(IMFMediaEngineAudioEndpointId*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_audio_endpoint_id : Proc(IMFMediaEngineAudioEndpointId*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7a3bac98-0e76-49fb-8c20-8a86fd98eaf2")]
  record IMFMediaEngineAudioEndpointId, lpVtbl : IMFMediaEngineAudioEndpointIdVtbl* do
    GUID = LibC::GUID.new(0x7a3bac98_u32, 0xe76_u16, 0x49fb_u16, StaticArray[0x8c_u8, 0x20_u8, 0x8a_u8, 0x86_u8, 0xfd_u8, 0x98_u8, 0xea_u8, 0xf2_u8])
    def query_interface(this : IMFMediaEngineAudioEndpointId*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineAudioEndpointId*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineAudioEndpointId*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_audio_endpoint_id(this : IMFMediaEngineAudioEndpointId*, pszEndpointId : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_audio_endpoint_id.call(this, pszEndpointId)
    end
    def get_audio_endpoint_id(this : IMFMediaEngineAudioEndpointId*, ppszEndpointId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_endpoint_id.call(this, ppszEndpointId)
    end

  end

  @[Extern]
  record IMFMediaEngineExtensionVtbl,
    query_interface : Proc(IMFMediaEngineExtension*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineExtension*, UInt32),
    release : Proc(IMFMediaEngineExtension*, UInt32),
    can_play_type : Proc(IMFMediaEngineExtension*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BSTR, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*, Win32cr::Foundation::HRESULT),
    begin_create_object : Proc(IMFMediaEngineExtension*, Win32cr::Foundation::BSTR, Void*, Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE, Void**, Void*, Void*, Win32cr::Foundation::HRESULT),
    cancel_object_creation : Proc(IMFMediaEngineExtension*, Void*, Win32cr::Foundation::HRESULT),
    end_create_object : Proc(IMFMediaEngineExtension*, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2f69d622-20b5-41e9-afdf-89ced1dda04e")]
  record IMFMediaEngineExtension, lpVtbl : IMFMediaEngineExtensionVtbl* do
    GUID = LibC::GUID.new(0x2f69d622_u32, 0x20b5_u16, 0x41e9_u16, StaticArray[0xaf_u8, 0xdf_u8, 0x89_u8, 0xce_u8, 0xd1_u8, 0xdd_u8, 0xa0_u8, 0x4e_u8])
    def query_interface(this : IMFMediaEngineExtension*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineExtension*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineExtension*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def can_play_type(this : IMFMediaEngineExtension*, audio_only : Win32cr::Foundation::BOOL, mime_type : Win32cr::Foundation::BSTR, pAnswer : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_play_type.call(this, audio_only, mime_type, pAnswer)
    end
    def begin_create_object(this : IMFMediaEngineExtension*, bstrURL : Win32cr::Foundation::BSTR, pByteStream : Void*, type__ : Win32cr::Media::MediaFoundation::MF_OBJECT_TYPE, ppIUnknownCancelCookie : Void**, pCallback : Void*, punkState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_create_object.call(this, bstrURL, pByteStream, type__, ppIUnknownCancelCookie, pCallback, punkState)
    end
    def cancel_object_creation(this : IMFMediaEngineExtension*, pIUnknownCancelCookie : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_object_creation.call(this, pIUnknownCancelCookie)
    end
    def end_create_object(this : IMFMediaEngineExtension*, pResult : Void*, ppObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_create_object.call(this, pResult, ppObject)
    end

  end

  @[Extern]
  record IMFMediaEngineProtectedContentVtbl,
    query_interface : Proc(IMFMediaEngineProtectedContent*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineProtectedContent*, UInt32),
    release : Proc(IMFMediaEngineProtectedContent*, UInt32),
    share_resources : Proc(IMFMediaEngineProtectedContent*, Void*, Win32cr::Foundation::HRESULT),
    get_required_protections : Proc(IMFMediaEngineProtectedContent*, UInt32*, Win32cr::Foundation::HRESULT),
    set_opm_window : Proc(IMFMediaEngineProtectedContent*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    transfer_video_frame : Proc(IMFMediaEngineProtectedContent*, Void*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, Win32cr::Media::MediaFoundation::MFARGB*, UInt32*, Win32cr::Foundation::HRESULT),
    set_content_protection_manager : Proc(IMFMediaEngineProtectedContent*, Void*, Win32cr::Foundation::HRESULT),
    set_application_certificate : Proc(IMFMediaEngineProtectedContent*, UInt8*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9f8021e8-9c8c-487e-bb5c-79aa4779938c")]
  record IMFMediaEngineProtectedContent, lpVtbl : IMFMediaEngineProtectedContentVtbl* do
    GUID = LibC::GUID.new(0x9f8021e8_u32, 0x9c8c_u16, 0x487e_u16, StaticArray[0xbb_u8, 0x5c_u8, 0x79_u8, 0xaa_u8, 0x47_u8, 0x79_u8, 0x93_u8, 0x8c_u8])
    def query_interface(this : IMFMediaEngineProtectedContent*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineProtectedContent*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineProtectedContent*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def share_resources(this : IMFMediaEngineProtectedContent*, pUnkDeviceContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.share_resources.call(this, pUnkDeviceContext)
    end
    def get_required_protections(this : IMFMediaEngineProtectedContent*, pFrameProtectionFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_required_protections.call(this, pFrameProtectionFlags)
    end
    def set_opm_window(this : IMFMediaEngineProtectedContent*, hwnd : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_opm_window.call(this, hwnd)
    end
    def transfer_video_frame(this : IMFMediaEngineProtectedContent*, pDstSurf : Void*, pSrc : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, pDst : Win32cr::Foundation::RECT*, pBorderClr : Win32cr::Media::MediaFoundation::MFARGB*, pFrameProtectionFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transfer_video_frame.call(this, pDstSurf, pSrc, pDst, pBorderClr, pFrameProtectionFlags)
    end
    def set_content_protection_manager(this : IMFMediaEngineProtectedContent*, pCPM : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_content_protection_manager.call(this, pCPM)
    end
    def set_application_certificate(this : IMFMediaEngineProtectedContent*, pbBlob : UInt8*, cbBlob : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_application_certificate.call(this, pbBlob, cbBlob)
    end

  end

  @[Extern]
  record IAudioSourceProviderVtbl,
    query_interface : Proc(IAudioSourceProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSourceProvider*, UInt32),
    release : Proc(IAudioSourceProvider*, UInt32),
    provide_input : Proc(IAudioSourceProvider*, UInt32, UInt32*, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ebbaf249-afc2-4582-91c6-b60df2e84954")]
  record IAudioSourceProvider, lpVtbl : IAudioSourceProviderVtbl* do
    GUID = LibC::GUID.new(0xebbaf249_u32, 0xafc2_u16, 0x4582_u16, StaticArray[0x91_u8, 0xc6_u8, 0xb6_u8, 0xd_u8, 0xf2_u8, 0xe8_u8, 0x49_u8, 0x54_u8])
    def query_interface(this : IAudioSourceProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSourceProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSourceProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def provide_input(this : IAudioSourceProvider*, dwSampleCount : UInt32, pdwChannelCount : UInt32*, pInterleavedAudioData : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.provide_input.call(this, dwSampleCount, pdwChannelCount, pInterleavedAudioData)
    end

  end

  @[Extern]
  record IMFMediaEngineWebSupportVtbl,
    query_interface : Proc(IMFMediaEngineWebSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineWebSupport*, UInt32),
    release : Proc(IMFMediaEngineWebSupport*, UInt32),
    should_delay_the_load_event : Proc(IMFMediaEngineWebSupport*, Win32cr::Foundation::BOOL),
    connect_web_audio : Proc(IMFMediaEngineWebSupport*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    disconnect_web_audio : Proc(IMFMediaEngineWebSupport*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ba2743a1-07e0-48ef-84b6-9a2ed023ca6c")]
  record IMFMediaEngineWebSupport, lpVtbl : IMFMediaEngineWebSupportVtbl* do
    GUID = LibC::GUID.new(0xba2743a1_u32, 0x7e0_u16, 0x48ef_u16, StaticArray[0x84_u8, 0xb6_u8, 0x9a_u8, 0x2e_u8, 0xd0_u8, 0x23_u8, 0xca_u8, 0x6c_u8])
    def query_interface(this : IMFMediaEngineWebSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineWebSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineWebSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def should_delay_the_load_event(this : IMFMediaEngineWebSupport*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.should_delay_the_load_event.call(this)
    end
    def connect_web_audio(this : IMFMediaEngineWebSupport*, dwSampleRate : UInt32, ppSourceProvider : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_web_audio.call(this, dwSampleRate, ppSourceProvider)
    end
    def disconnect_web_audio(this : IMFMediaEngineWebSupport*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect_web_audio.call(this)
    end

  end

  @[Extern]
  record IMFMediaSourceExtensionNotifyVtbl,
    query_interface : Proc(IMFMediaSourceExtensionNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSourceExtensionNotify*, UInt32),
    release : Proc(IMFMediaSourceExtensionNotify*, UInt32),
    on_source_open : Proc(IMFMediaSourceExtensionNotify*, Void),
    on_source_ended : Proc(IMFMediaSourceExtensionNotify*, Void),
    on_source_close : Proc(IMFMediaSourceExtensionNotify*, Void)


  @[Extern]
  #@[Com("a7901327-05dd-4469-a7b7-0e01979e361d")]
  record IMFMediaSourceExtensionNotify, lpVtbl : IMFMediaSourceExtensionNotifyVtbl* do
    GUID = LibC::GUID.new(0xa7901327_u32, 0x5dd_u16, 0x4469_u16, StaticArray[0xa7_u8, 0xb7_u8, 0xe_u8, 0x1_u8, 0x97_u8, 0x9e_u8, 0x36_u8, 0x1d_u8])
    def query_interface(this : IMFMediaSourceExtensionNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSourceExtensionNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSourceExtensionNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_source_open(this : IMFMediaSourceExtensionNotify*) : Void
      @lpVtbl.try &.value.on_source_open.call(this)
    end
    def on_source_ended(this : IMFMediaSourceExtensionNotify*) : Void
      @lpVtbl.try &.value.on_source_ended.call(this)
    end
    def on_source_close(this : IMFMediaSourceExtensionNotify*) : Void
      @lpVtbl.try &.value.on_source_close.call(this)
    end

  end

  @[Extern]
  record IMFBufferListNotifyVtbl,
    query_interface : Proc(IMFBufferListNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFBufferListNotify*, UInt32),
    release : Proc(IMFBufferListNotify*, UInt32),
    on_add_source_buffer : Proc(IMFBufferListNotify*, Void),
    on_remove_source_buffer : Proc(IMFBufferListNotify*, Void)


  @[Extern]
  #@[Com("24cd47f7-81d8-4785-adb2-af697a963cd2")]
  record IMFBufferListNotify, lpVtbl : IMFBufferListNotifyVtbl* do
    GUID = LibC::GUID.new(0x24cd47f7_u32, 0x81d8_u16, 0x4785_u16, StaticArray[0xad_u8, 0xb2_u8, 0xaf_u8, 0x69_u8, 0x7a_u8, 0x96_u8, 0x3c_u8, 0xd2_u8])
    def query_interface(this : IMFBufferListNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFBufferListNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFBufferListNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_add_source_buffer(this : IMFBufferListNotify*) : Void
      @lpVtbl.try &.value.on_add_source_buffer.call(this)
    end
    def on_remove_source_buffer(this : IMFBufferListNotify*) : Void
      @lpVtbl.try &.value.on_remove_source_buffer.call(this)
    end

  end

  @[Extern]
  record IMFSourceBufferNotifyVtbl,
    query_interface : Proc(IMFSourceBufferNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceBufferNotify*, UInt32),
    release : Proc(IMFSourceBufferNotify*, UInt32),
    on_update_start : Proc(IMFSourceBufferNotify*, Void),
    on_abort : Proc(IMFSourceBufferNotify*, Void),
    on_error : Proc(IMFSourceBufferNotify*, Win32cr::Foundation::HRESULT, Void),
    on_update : Proc(IMFSourceBufferNotify*, Void),
    on_update_end : Proc(IMFSourceBufferNotify*, Void)


  @[Extern]
  #@[Com("87e47623-2ceb-45d6-9b88-d8520c4dcbbc")]
  record IMFSourceBufferNotify, lpVtbl : IMFSourceBufferNotifyVtbl* do
    GUID = LibC::GUID.new(0x87e47623_u32, 0x2ceb_u16, 0x45d6_u16, StaticArray[0x9b_u8, 0x88_u8, 0xd8_u8, 0x52_u8, 0xc_u8, 0x4d_u8, 0xcb_u8, 0xbc_u8])
    def query_interface(this : IMFSourceBufferNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceBufferNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceBufferNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_update_start(this : IMFSourceBufferNotify*) : Void
      @lpVtbl.try &.value.on_update_start.call(this)
    end
    def on_abort(this : IMFSourceBufferNotify*) : Void
      @lpVtbl.try &.value.on_abort.call(this)
    end
    def on_error(this : IMFSourceBufferNotify*, hr : Win32cr::Foundation::HRESULT) : Void
      @lpVtbl.try &.value.on_error.call(this, hr)
    end
    def on_update(this : IMFSourceBufferNotify*) : Void
      @lpVtbl.try &.value.on_update.call(this)
    end
    def on_update_end(this : IMFSourceBufferNotify*) : Void
      @lpVtbl.try &.value.on_update_end.call(this)
    end

  end

  @[Extern]
  record IMFSourceBufferVtbl,
    query_interface : Proc(IMFSourceBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceBuffer*, UInt32),
    release : Proc(IMFSourceBuffer*, UInt32),
    get_updating : Proc(IMFSourceBuffer*, Win32cr::Foundation::BOOL),
    get_buffered : Proc(IMFSourceBuffer*, Void**, Win32cr::Foundation::HRESULT),
    get_time_stamp_offset : Proc(IMFSourceBuffer*, Float64),
    set_time_stamp_offset : Proc(IMFSourceBuffer*, Float64, Win32cr::Foundation::HRESULT),
    get_append_window_start : Proc(IMFSourceBuffer*, Float64),
    set_append_window_start : Proc(IMFSourceBuffer*, Float64, Win32cr::Foundation::HRESULT),
    get_append_window_end : Proc(IMFSourceBuffer*, Float64),
    set_append_window_end : Proc(IMFSourceBuffer*, Float64, Win32cr::Foundation::HRESULT),
    append : Proc(IMFSourceBuffer*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    append_byte_stream : Proc(IMFSourceBuffer*, Void*, UInt64*, Win32cr::Foundation::HRESULT),
    abort : Proc(IMFSourceBuffer*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMFSourceBuffer*, Float64, Float64, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e2cd3a4b-af25-4d3d-9110-da0e6f8ee877")]
  record IMFSourceBuffer, lpVtbl : IMFSourceBufferVtbl* do
    GUID = LibC::GUID.new(0xe2cd3a4b_u32, 0xaf25_u16, 0x4d3d_u16, StaticArray[0x91_u8, 0x10_u8, 0xda_u8, 0xe_u8, 0x6f_u8, 0x8e_u8, 0xe8_u8, 0x77_u8])
    def query_interface(this : IMFSourceBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_updating(this : IMFSourceBuffer*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_updating.call(this)
    end
    def get_buffered(this : IMFSourceBuffer*, ppBuffered : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffered.call(this, ppBuffered)
    end
    def get_time_stamp_offset(this : IMFSourceBuffer*) : Float64
      @lpVtbl.try &.value.get_time_stamp_offset.call(this)
    end
    def set_time_stamp_offset(this : IMFSourceBuffer*, offset : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_time_stamp_offset.call(this, offset)
    end
    def get_append_window_start(this : IMFSourceBuffer*) : Float64
      @lpVtbl.try &.value.get_append_window_start.call(this)
    end
    def set_append_window_start(this : IMFSourceBuffer*, time : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_append_window_start.call(this, time)
    end
    def get_append_window_end(this : IMFSourceBuffer*) : Float64
      @lpVtbl.try &.value.get_append_window_end.call(this)
    end
    def set_append_window_end(this : IMFSourceBuffer*, time : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_append_window_end.call(this, time)
    end
    def append(this : IMFSourceBuffer*, pData : UInt8*, len : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append.call(this, pData, len)
    end
    def append_byte_stream(this : IMFSourceBuffer*, pStream : Void*, pMaxLen : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append_byte_stream.call(this, pStream, pMaxLen)
    end
    def abort(this : IMFSourceBuffer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.abort.call(this)
    end
    def remove(this : IMFSourceBuffer*, start : Float64, end__ : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, start, end__)
    end

  end

  @[Extern]
  record IMFSourceBufferAppendModeVtbl,
    query_interface : Proc(IMFSourceBufferAppendMode*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceBufferAppendMode*, UInt32),
    release : Proc(IMFSourceBufferAppendMode*, UInt32),
    get_append_mode : Proc(IMFSourceBufferAppendMode*, Win32cr::Media::MediaFoundation::MF_MSE_APPEND_MODE),
    set_append_mode : Proc(IMFSourceBufferAppendMode*, Win32cr::Media::MediaFoundation::MF_MSE_APPEND_MODE, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("19666fb4-babe-4c55-bc03-0a074da37e2a")]
  record IMFSourceBufferAppendMode, lpVtbl : IMFSourceBufferAppendModeVtbl* do
    GUID = LibC::GUID.new(0x19666fb4_u32, 0xbabe_u16, 0x4c55_u16, StaticArray[0xbc_u8, 0x3_u8, 0xa_u8, 0x7_u8, 0x4d_u8, 0xa3_u8, 0x7e_u8, 0x2a_u8])
    def query_interface(this : IMFSourceBufferAppendMode*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceBufferAppendMode*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceBufferAppendMode*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_append_mode(this : IMFSourceBufferAppendMode*) : Win32cr::Media::MediaFoundation::MF_MSE_APPEND_MODE
      @lpVtbl.try &.value.get_append_mode.call(this)
    end
    def set_append_mode(this : IMFSourceBufferAppendMode*, mode : Win32cr::Media::MediaFoundation::MF_MSE_APPEND_MODE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_append_mode.call(this, mode)
    end

  end

  @[Extern]
  record IMFSourceBufferListVtbl,
    query_interface : Proc(IMFSourceBufferList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceBufferList*, UInt32),
    release : Proc(IMFSourceBufferList*, UInt32),
    get_length : Proc(IMFSourceBufferList*, UInt32),
    get_source_buffer : Proc(IMFSourceBufferList*, UInt32, Void*)


  @[Extern]
  #@[Com("249981f8-8325-41f3-b80c-3b9e3aad0cbe")]
  record IMFSourceBufferList, lpVtbl : IMFSourceBufferListVtbl* do
    GUID = LibC::GUID.new(0x249981f8_u32, 0x8325_u16, 0x41f3_u16, StaticArray[0xb8_u8, 0xc_u8, 0x3b_u8, 0x9e_u8, 0x3a_u8, 0xad_u8, 0xc_u8, 0xbe_u8])
    def query_interface(this : IMFSourceBufferList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceBufferList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceBufferList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_length(this : IMFSourceBufferList*) : UInt32
      @lpVtbl.try &.value.get_length.call(this)
    end
    def get_source_buffer(this : IMFSourceBufferList*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_source_buffer.call(this, index)
    end

  end

  @[Extern]
  record IMFMediaSourceExtensionVtbl,
    query_interface : Proc(IMFMediaSourceExtension*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSourceExtension*, UInt32),
    release : Proc(IMFMediaSourceExtension*, UInt32),
    get_source_buffers : Proc(IMFMediaSourceExtension*, Void*),
    get_active_source_buffers : Proc(IMFMediaSourceExtension*, Void*),
    get_ready_state : Proc(IMFMediaSourceExtension*, Win32cr::Media::MediaFoundation::MF_MSE_READY),
    get_duration : Proc(IMFMediaSourceExtension*, Float64),
    set_duration : Proc(IMFMediaSourceExtension*, Float64, Win32cr::Foundation::HRESULT),
    add_source_buffer : Proc(IMFMediaSourceExtension*, Win32cr::Foundation::BSTR, Void*, Void**, Win32cr::Foundation::HRESULT),
    remove_source_buffer : Proc(IMFMediaSourceExtension*, Void*, Win32cr::Foundation::HRESULT),
    set_end_of_stream : Proc(IMFMediaSourceExtension*, Win32cr::Media::MediaFoundation::MF_MSE_ERROR, Win32cr::Foundation::HRESULT),
    is_type_supported : Proc(IMFMediaSourceExtension*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BOOL),
    get_source_buffer : Proc(IMFMediaSourceExtension*, UInt32, Void*)


  @[Extern]
  #@[Com("e467b94e-a713-4562-a802-816a42e9008a")]
  record IMFMediaSourceExtension, lpVtbl : IMFMediaSourceExtensionVtbl* do
    GUID = LibC::GUID.new(0xe467b94e_u32, 0xa713_u16, 0x4562_u16, StaticArray[0xa8_u8, 0x2_u8, 0x81_u8, 0x6a_u8, 0x42_u8, 0xe9_u8, 0x0_u8, 0x8a_u8])
    def query_interface(this : IMFMediaSourceExtension*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSourceExtension*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSourceExtension*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_source_buffers(this : IMFMediaSourceExtension*) : Void*
      @lpVtbl.try &.value.get_source_buffers.call(this)
    end
    def get_active_source_buffers(this : IMFMediaSourceExtension*) : Void*
      @lpVtbl.try &.value.get_active_source_buffers.call(this)
    end
    def get_ready_state(this : IMFMediaSourceExtension*) : Win32cr::Media::MediaFoundation::MF_MSE_READY
      @lpVtbl.try &.value.get_ready_state.call(this)
    end
    def get_duration(this : IMFMediaSourceExtension*) : Float64
      @lpVtbl.try &.value.get_duration.call(this)
    end
    def set_duration(this : IMFMediaSourceExtension*, duration : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_duration.call(this, duration)
    end
    def add_source_buffer(this : IMFMediaSourceExtension*, type__ : Win32cr::Foundation::BSTR, pNotify : Void*, ppSourceBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_source_buffer.call(this, type__, pNotify, ppSourceBuffer)
    end
    def remove_source_buffer(this : IMFMediaSourceExtension*, pSourceBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_source_buffer.call(this, pSourceBuffer)
    end
    def set_end_of_stream(this : IMFMediaSourceExtension*, error : Win32cr::Media::MediaFoundation::MF_MSE_ERROR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_end_of_stream.call(this, error)
    end
    def is_type_supported(this : IMFMediaSourceExtension*, type__ : Win32cr::Foundation::BSTR) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_type_supported.call(this, type__)
    end
    def get_source_buffer(this : IMFMediaSourceExtension*, dwStreamIndex : UInt32) : Void*
      @lpVtbl.try &.value.get_source_buffer.call(this, dwStreamIndex)
    end

  end

  @[Extern]
  record IMFMediaSourceExtensionLiveSeekableRangeVtbl,
    query_interface : Proc(IMFMediaSourceExtensionLiveSeekableRange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSourceExtensionLiveSeekableRange*, UInt32),
    release : Proc(IMFMediaSourceExtensionLiveSeekableRange*, UInt32),
    set_live_seekable_range : Proc(IMFMediaSourceExtensionLiveSeekableRange*, Float64, Float64, Win32cr::Foundation::HRESULT),
    clear_live_seekable_range : Proc(IMFMediaSourceExtensionLiveSeekableRange*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5d1abfd6-450a-4d92-9efc-d6b6cbc1f4da")]
  record IMFMediaSourceExtensionLiveSeekableRange, lpVtbl : IMFMediaSourceExtensionLiveSeekableRangeVtbl* do
    GUID = LibC::GUID.new(0x5d1abfd6_u32, 0x450a_u16, 0x4d92_u16, StaticArray[0x9e_u8, 0xfc_u8, 0xd6_u8, 0xb6_u8, 0xcb_u8, 0xc1_u8, 0xf4_u8, 0xda_u8])
    def query_interface(this : IMFMediaSourceExtensionLiveSeekableRange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSourceExtensionLiveSeekableRange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSourceExtensionLiveSeekableRange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_live_seekable_range(this : IMFMediaSourceExtensionLiveSeekableRange*, start : Float64, end__ : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_live_seekable_range.call(this, start, end__)
    end
    def clear_live_seekable_range(this : IMFMediaSourceExtensionLiveSeekableRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_live_seekable_range.call(this)
    end

  end

  @[Extern]
  record IMFMediaEngineEMEVtbl,
    query_interface : Proc(IMFMediaEngineEME*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineEME*, UInt32),
    release : Proc(IMFMediaEngineEME*, UInt32),
    get_Keys : Proc(IMFMediaEngineEME*, Void**, Win32cr::Foundation::HRESULT),
    set_media_keys : Proc(IMFMediaEngineEME*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("50dc93e4-ba4f-4275-ae66-83e836e57469")]
  record IMFMediaEngineEME, lpVtbl : IMFMediaEngineEMEVtbl* do
    GUID = LibC::GUID.new(0x50dc93e4_u32, 0xba4f_u16, 0x4275_u16, StaticArray[0xae_u8, 0x66_u8, 0x83_u8, 0xe8_u8, 0x36_u8, 0xe5_u8, 0x74_u8, 0x69_u8])
    def query_interface(this : IMFMediaEngineEME*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineEME*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineEME*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_Keys(this : IMFMediaEngineEME*, keys : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Keys.call(this, keys)
    end
    def set_media_keys(this : IMFMediaEngineEME*, keys : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_keys.call(this, keys)
    end

  end

  @[Extern]
  record IMFMediaEngineSrcElementsExVtbl,
    query_interface : Proc(IMFMediaEngineSrcElementsEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineSrcElementsEx*, UInt32),
    release : Proc(IMFMediaEngineSrcElementsEx*, UInt32),
    get_length : Proc(IMFMediaEngineSrcElementsEx*, UInt32),
    get_url : Proc(IMFMediaEngineSrcElementsEx*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_type : Proc(IMFMediaEngineSrcElementsEx*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_media : Proc(IMFMediaEngineSrcElementsEx*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    add_element : Proc(IMFMediaEngineSrcElementsEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove_all_elements : Proc(IMFMediaEngineSrcElementsEx*, Win32cr::Foundation::HRESULT),
    add_element_ex : Proc(IMFMediaEngineSrcElementsEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_key_system : Proc(IMFMediaEngineSrcElementsEx*, UInt32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("654a6bb3-e1a3-424a-9908-53a43a0dfda0")]
  record IMFMediaEngineSrcElementsEx, lpVtbl : IMFMediaEngineSrcElementsExVtbl* do
    GUID = LibC::GUID.new(0x654a6bb3_u32, 0xe1a3_u16, 0x424a_u16, StaticArray[0x99_u8, 0x8_u8, 0x53_u8, 0xa4_u8, 0x3a_u8, 0xd_u8, 0xfd_u8, 0xa0_u8])
    def query_interface(this : IMFMediaEngineSrcElementsEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineSrcElementsEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineSrcElementsEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_length(this : IMFMediaEngineSrcElementsEx*) : UInt32
      @lpVtbl.try &.value.get_length.call(this)
    end
    def get_url(this : IMFMediaEngineSrcElementsEx*, index : UInt32, pURL : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, index, pURL)
    end
    def get_type(this : IMFMediaEngineSrcElementsEx*, index : UInt32, pType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, index, pType)
    end
    def get_media(this : IMFMediaEngineSrcElementsEx*, index : UInt32, pMedia : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media.call(this, index, pMedia)
    end
    def add_element(this : IMFMediaEngineSrcElementsEx*, pURL : Win32cr::Foundation::BSTR, pType : Win32cr::Foundation::BSTR, pMedia : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_element.call(this, pURL, pType, pMedia)
    end
    def remove_all_elements(this : IMFMediaEngineSrcElementsEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_elements.call(this)
    end
    def add_element_ex(this : IMFMediaEngineSrcElementsEx*, pURL : Win32cr::Foundation::BSTR, pType : Win32cr::Foundation::BSTR, pMedia : Win32cr::Foundation::BSTR, keySystem : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_element_ex.call(this, pURL, pType, pMedia, keySystem)
    end
    def get_key_system(this : IMFMediaEngineSrcElementsEx*, index : UInt32, pType : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_system.call(this, index, pType)
    end

  end

  @[Extern]
  record IMFMediaEngineNeedKeyNotifyVtbl,
    query_interface : Proc(IMFMediaEngineNeedKeyNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineNeedKeyNotify*, UInt32),
    release : Proc(IMFMediaEngineNeedKeyNotify*, UInt32),
    need_key : Proc(IMFMediaEngineNeedKeyNotify*, UInt8*, UInt32, Void)


  @[Extern]
  #@[Com("46a30204-a696-4b18-8804-246b8f031bb1")]
  record IMFMediaEngineNeedKeyNotify, lpVtbl : IMFMediaEngineNeedKeyNotifyVtbl* do
    GUID = LibC::GUID.new(0x46a30204_u32, 0xa696_u16, 0x4b18_u16, StaticArray[0x88_u8, 0x4_u8, 0x24_u8, 0x6b_u8, 0x8f_u8, 0x3_u8, 0x1b_u8, 0xb1_u8])
    def query_interface(this : IMFMediaEngineNeedKeyNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineNeedKeyNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineNeedKeyNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def need_key(this : IMFMediaEngineNeedKeyNotify*, initData : UInt8*, cb : UInt32) : Void
      @lpVtbl.try &.value.need_key.call(this, initData, cb)
    end

  end

  @[Extern]
  record IMFMediaKeysVtbl,
    query_interface : Proc(IMFMediaKeys*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaKeys*, UInt32),
    release : Proc(IMFMediaKeys*, UInt32),
    create_session : Proc(IMFMediaKeys*, Win32cr::Foundation::BSTR, UInt8*, UInt32, UInt8*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_KeySystem : Proc(IMFMediaKeys*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaKeys*, Win32cr::Foundation::HRESULT),
    get_suspend_notify : Proc(IMFMediaKeys*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5cb31c05-61ff-418f-afda-caaf41421a38")]
  record IMFMediaKeys, lpVtbl : IMFMediaKeysVtbl* do
    GUID = LibC::GUID.new(0x5cb31c05_u32, 0x61ff_u16, 0x418f_u16, StaticArray[0xaf_u8, 0xda_u8, 0xca_u8, 0xaf_u8, 0x41_u8, 0x42_u8, 0x1a_u8, 0x38_u8])
    def query_interface(this : IMFMediaKeys*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaKeys*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaKeys*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_session(this : IMFMediaKeys*, mimeType : Win32cr::Foundation::BSTR, initData : UInt8*, cb : UInt32, customData : UInt8*, cbCustomData : UInt32, notify : Void*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, mimeType, initData, cb, customData, cbCustomData, notify, ppSession)
    end
    def get_KeySystem(this : IMFMediaKeys*, keySystem : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySystem.call(this, keySystem)
    end
    def shutdown(this : IMFMediaKeys*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_suspend_notify(this : IMFMediaKeys*, notify : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_suspend_notify.call(this, notify)
    end

  end

  @[Extern]
  record IMFMediaKeySessionVtbl,
    query_interface : Proc(IMFMediaKeySession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaKeySession*, UInt32),
    release : Proc(IMFMediaKeySession*, UInt32),
    get_error : Proc(IMFMediaKeySession*, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_KeySystem : Proc(IMFMediaKeySession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_SessionId : Proc(IMFMediaKeySession*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    update : Proc(IMFMediaKeySession*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    close : Proc(IMFMediaKeySession*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("24fa67d5-d1d0-4dc5-995c-c0efdc191fb5")]
  record IMFMediaKeySession, lpVtbl : IMFMediaKeySessionVtbl* do
    GUID = LibC::GUID.new(0x24fa67d5_u32, 0xd1d0_u16, 0x4dc5_u16, StaticArray[0x99_u8, 0x5c_u8, 0xc0_u8, 0xef_u8, 0xdc_u8, 0x19_u8, 0x1f_u8, 0xb5_u8])
    def query_interface(this : IMFMediaKeySession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaKeySession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaKeySession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error(this : IMFMediaKeySession*, code : UInt16*, systemCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, code, systemCode)
    end
    def get_KeySystem(this : IMFMediaKeySession*, keySystem : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySystem.call(this, keySystem)
    end
    def get_SessionId(this : IMFMediaKeySession*, sessionId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SessionId.call(this, sessionId)
    end
    def update(this : IMFMediaKeySession*, key : UInt8*, cb : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, key, cb)
    end
    def close(this : IMFMediaKeySession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IMFMediaKeySessionNotifyVtbl,
    query_interface : Proc(IMFMediaKeySessionNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaKeySessionNotify*, UInt32),
    release : Proc(IMFMediaKeySessionNotify*, UInt32),
    key_message : Proc(IMFMediaKeySessionNotify*, Win32cr::Foundation::BSTR, UInt8*, UInt32, Void),
    key_added : Proc(IMFMediaKeySessionNotify*, Void),
    key_error : Proc(IMFMediaKeySessionNotify*, UInt16, UInt32, Void)


  @[Extern]
  #@[Com("6a0083f9-8947-4c1d-9ce0-cdee22b23135")]
  record IMFMediaKeySessionNotify, lpVtbl : IMFMediaKeySessionNotifyVtbl* do
    GUID = LibC::GUID.new(0x6a0083f9_u32, 0x8947_u16, 0x4c1d_u16, StaticArray[0x9c_u8, 0xe0_u8, 0xcd_u8, 0xee_u8, 0x22_u8, 0xb2_u8, 0x31_u8, 0x35_u8])
    def query_interface(this : IMFMediaKeySessionNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaKeySessionNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaKeySessionNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def key_message(this : IMFMediaKeySessionNotify*, destinationURL : Win32cr::Foundation::BSTR, message : UInt8*, cb : UInt32) : Void
      @lpVtbl.try &.value.key_message.call(this, destinationURL, message, cb)
    end
    def key_added(this : IMFMediaKeySessionNotify*) : Void
      @lpVtbl.try &.value.key_added.call(this)
    end
    def key_error(this : IMFMediaKeySessionNotify*, code : UInt16, systemCode : UInt32) : Void
      @lpVtbl.try &.value.key_error.call(this, code, systemCode)
    end

  end

  @[Extern]
  record IMFCdmSuspendNotifyVtbl,
    query_interface : Proc(IMFCdmSuspendNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCdmSuspendNotify*, UInt32),
    release : Proc(IMFCdmSuspendNotify*, UInt32),
    begin__ : Proc(IMFCdmSuspendNotify*, Win32cr::Foundation::HRESULT),
    end__ : Proc(IMFCdmSuspendNotify*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7a5645d2-43bd-47fd-87b7-dcd24cc7d692")]
  record IMFCdmSuspendNotify, lpVtbl : IMFCdmSuspendNotifyVtbl* do
    GUID = LibC::GUID.new(0x7a5645d2_u32, 0x43bd_u16, 0x47fd_u16, StaticArray[0x87_u8, 0xb7_u8, 0xdc_u8, 0xd2_u8, 0x4c_u8, 0xc7_u8, 0xd6_u8, 0x92_u8])
    def query_interface(this : IMFCdmSuspendNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCdmSuspendNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCdmSuspendNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def begin__(this : IMFCdmSuspendNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin__.call(this)
    end
    def end__(this : IMFCdmSuspendNotify*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end__.call(this)
    end

  end

  @[Extern]
  record IMFHDCPStatusVtbl,
    query_interface : Proc(IMFHDCPStatus*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFHDCPStatus*, UInt32),
    release : Proc(IMFHDCPStatus*, UInt32),
    query : Proc(IMFHDCPStatus*, Win32cr::Media::MediaFoundation::MF_HDCP_STATUS*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set : Proc(IMFHDCPStatus*, Win32cr::Media::MediaFoundation::MF_HDCP_STATUS, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("de400f54-5bf1-40cf-8964-0bea136b1e3d")]
  record IMFHDCPStatus, lpVtbl : IMFHDCPStatusVtbl* do
    GUID = LibC::GUID.new(0xde400f54_u32, 0x5bf1_u16, 0x40cf_u16, StaticArray[0x89_u8, 0x64_u8, 0xb_u8, 0xea_u8, 0x13_u8, 0x6b_u8, 0x1e_u8, 0x3d_u8])
    def query_interface(this : IMFHDCPStatus*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFHDCPStatus*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFHDCPStatus*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query(this : IMFHDCPStatus*, pStatus : Win32cr::Media::MediaFoundation::MF_HDCP_STATUS*, pfStatus : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query.call(this, pStatus, pfStatus)
    end
    def set(this : IMFHDCPStatus*, status : Win32cr::Media::MediaFoundation::MF_HDCP_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set.call(this, status)
    end

  end

  @[Extern]
  record IMFMediaEngineOPMInfoVtbl,
    query_interface : Proc(IMFMediaEngineOPMInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineOPMInfo*, UInt32),
    release : Proc(IMFMediaEngineOPMInfo*, UInt32),
    get_opm_info : Proc(IMFMediaEngineOPMInfo*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_OPM_STATUS*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("765763e6-6c01-4b01-bb0f-b829f60ed28c")]
  record IMFMediaEngineOPMInfo, lpVtbl : IMFMediaEngineOPMInfoVtbl* do
    GUID = LibC::GUID.new(0x765763e6_u32, 0x6c01_u16, 0x4b01_u16, StaticArray[0xbb_u8, 0xf_u8, 0xb8_u8, 0x29_u8, 0xf6_u8, 0xe_u8, 0xd2_u8, 0x8c_u8])
    def query_interface(this : IMFMediaEngineOPMInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineOPMInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineOPMInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_opm_info(this : IMFMediaEngineOPMInfo*, pStatus : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_OPM_STATUS*, pConstricted : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_opm_info.call(this, pStatus, pConstricted)
    end

  end

  @[Extern]
  record IMFMediaEngineClassFactoryVtbl,
    query_interface : Proc(IMFMediaEngineClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineClassFactory*, UInt32),
    release : Proc(IMFMediaEngineClassFactory*, UInt32),
    create_instance : Proc(IMFMediaEngineClassFactory*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_time_range : Proc(IMFMediaEngineClassFactory*, Void**, Win32cr::Foundation::HRESULT),
    create_error : Proc(IMFMediaEngineClassFactory*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4d645ace-26aa-4688-9be1-df3516990b93")]
  record IMFMediaEngineClassFactory, lpVtbl : IMFMediaEngineClassFactoryVtbl* do
    GUID = LibC::GUID.new(0x4d645ace_u32, 0x26aa_u16, 0x4688_u16, StaticArray[0x9b_u8, 0xe1_u8, 0xdf_u8, 0x35_u8, 0x16_u8, 0x99_u8, 0xb_u8, 0x93_u8])
    def query_interface(this : IMFMediaEngineClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance(this : IMFMediaEngineClassFactory*, dwFlags : UInt32, pAttr : Void*, ppPlayer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance.call(this, dwFlags, pAttr, ppPlayer)
    end
    def create_time_range(this : IMFMediaEngineClassFactory*, ppTimeRange : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_time_range.call(this, ppTimeRange)
    end
    def create_error(this : IMFMediaEngineClassFactory*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_error.call(this, ppError)
    end

  end

  @[Extern]
  record IMFMediaEngineClassFactoryExVtbl,
    query_interface : Proc(IMFMediaEngineClassFactoryEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineClassFactoryEx*, UInt32),
    release : Proc(IMFMediaEngineClassFactoryEx*, UInt32),
    create_instance : Proc(IMFMediaEngineClassFactoryEx*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_time_range : Proc(IMFMediaEngineClassFactoryEx*, Void**, Win32cr::Foundation::HRESULT),
    create_error : Proc(IMFMediaEngineClassFactoryEx*, Void**, Win32cr::Foundation::HRESULT),
    create_media_source_extension : Proc(IMFMediaEngineClassFactoryEx*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    create_media_keys : Proc(IMFMediaEngineClassFactoryEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    is_type_supported : Proc(IMFMediaEngineClassFactoryEx*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c56156c6-ea5b-48a5-9df8-fbe035d0929e")]
  record IMFMediaEngineClassFactoryEx, lpVtbl : IMFMediaEngineClassFactoryExVtbl* do
    GUID = LibC::GUID.new(0xc56156c6_u32, 0xea5b_u16, 0x48a5_u16, StaticArray[0x9d_u8, 0xf8_u8, 0xfb_u8, 0xe0_u8, 0x35_u8, 0xd0_u8, 0x92_u8, 0x9e_u8])
    def query_interface(this : IMFMediaEngineClassFactoryEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineClassFactoryEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineClassFactoryEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance(this : IMFMediaEngineClassFactoryEx*, dwFlags : UInt32, pAttr : Void*, ppPlayer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance.call(this, dwFlags, pAttr, ppPlayer)
    end
    def create_time_range(this : IMFMediaEngineClassFactoryEx*, ppTimeRange : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_time_range.call(this, ppTimeRange)
    end
    def create_error(this : IMFMediaEngineClassFactoryEx*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_error.call(this, ppError)
    end
    def create_media_source_extension(this : IMFMediaEngineClassFactoryEx*, dwFlags : UInt32, pAttr : Void*, ppMSE : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_source_extension.call(this, dwFlags, pAttr, ppMSE)
    end
    def create_media_keys(this : IMFMediaEngineClassFactoryEx*, keySystem : Win32cr::Foundation::BSTR, cdmStorePath : Win32cr::Foundation::BSTR, ppKeys : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_keys.call(this, keySystem, cdmStorePath, ppKeys)
    end
    def is_type_supported(this : IMFMediaEngineClassFactoryEx*, type__ : Win32cr::Foundation::BSTR, keySystem : Win32cr::Foundation::BSTR, isSupported : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_type_supported.call(this, type__, keySystem, isSupported)
    end

  end

  @[Extern]
  record IMFMediaEngineClassFactory2Vtbl,
    query_interface : Proc(IMFMediaEngineClassFactory2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineClassFactory2*, UInt32),
    release : Proc(IMFMediaEngineClassFactory2*, UInt32),
    create_media_keys2 : Proc(IMFMediaEngineClassFactory2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("09083cef-867f-4bf6-8776-dee3a7b42fca")]
  record IMFMediaEngineClassFactory2, lpVtbl : IMFMediaEngineClassFactory2Vtbl* do
    GUID = LibC::GUID.new(0x9083cef_u32, 0x867f_u16, 0x4bf6_u16, StaticArray[0x87_u8, 0x76_u8, 0xde_u8, 0xe3_u8, 0xa7_u8, 0xb4_u8, 0x2f_u8, 0xca_u8])
    def query_interface(this : IMFMediaEngineClassFactory2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineClassFactory2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineClassFactory2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_media_keys2(this : IMFMediaEngineClassFactory2*, keySystem : Win32cr::Foundation::BSTR, defaultCdmStorePath : Win32cr::Foundation::BSTR, inprivateCdmStorePath : Win32cr::Foundation::BSTR, ppKeys : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_keys2.call(this, keySystem, defaultCdmStorePath, inprivateCdmStorePath, ppKeys)
    end

  end

  @[Extern]
  record IMFExtendedDRMTypeSupportVtbl,
    query_interface : Proc(IMFExtendedDRMTypeSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFExtendedDRMTypeSupport*, UInt32),
    release : Proc(IMFExtendedDRMTypeSupport*, UInt32),
    is_type_supported_ex : Proc(IMFExtendedDRMTypeSupport*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BSTR, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("332ec562-3758-468d-a784-e38f23552128")]
  record IMFExtendedDRMTypeSupport, lpVtbl : IMFExtendedDRMTypeSupportVtbl* do
    GUID = LibC::GUID.new(0x332ec562_u32, 0x3758_u16, 0x468d_u16, StaticArray[0xa7_u8, 0x84_u8, 0xe3_u8, 0x8f_u8, 0x23_u8, 0x55_u8, 0x21_u8, 0x28_u8])
    def query_interface(this : IMFExtendedDRMTypeSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFExtendedDRMTypeSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFExtendedDRMTypeSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_type_supported_ex(this : IMFExtendedDRMTypeSupport*, type__ : Win32cr::Foundation::BSTR, keySystem : Win32cr::Foundation::BSTR, pAnswer : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_type_supported_ex.call(this, type__, keySystem, pAnswer)
    end

  end

  @[Extern]
  record IMFMediaEngineSupportsSourceTransferVtbl,
    query_interface : Proc(IMFMediaEngineSupportsSourceTransfer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineSupportsSourceTransfer*, UInt32),
    release : Proc(IMFMediaEngineSupportsSourceTransfer*, UInt32),
    should_transfer_source : Proc(IMFMediaEngineSupportsSourceTransfer*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    detach_media_source : Proc(IMFMediaEngineSupportsSourceTransfer*, Void**, Void**, Void**, Win32cr::Foundation::HRESULT),
    attach_media_source : Proc(IMFMediaEngineSupportsSourceTransfer*, Void*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a724b056-1b2e-4642-a6f3-db9420c52908")]
  record IMFMediaEngineSupportsSourceTransfer, lpVtbl : IMFMediaEngineSupportsSourceTransferVtbl* do
    GUID = LibC::GUID.new(0xa724b056_u32, 0x1b2e_u16, 0x4642_u16, StaticArray[0xa6_u8, 0xf3_u8, 0xdb_u8, 0x94_u8, 0x20_u8, 0xc5_u8, 0x29_u8, 0x8_u8])
    def query_interface(this : IMFMediaEngineSupportsSourceTransfer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineSupportsSourceTransfer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineSupportsSourceTransfer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def should_transfer_source(this : IMFMediaEngineSupportsSourceTransfer*, pfShouldTransfer : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.should_transfer_source.call(this, pfShouldTransfer)
    end
    def detach_media_source(this : IMFMediaEngineSupportsSourceTransfer*, ppByteStream : Void**, ppMediaSource : Void**, ppMSE : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_media_source.call(this, ppByteStream, ppMediaSource, ppMSE)
    end
    def attach_media_source(this : IMFMediaEngineSupportsSourceTransfer*, pByteStream : Void*, pMediaSource : Void*, pMSE : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_media_source.call(this, pByteStream, pMediaSource, pMSE)
    end

  end

  @[Extern]
  record IMFMediaEngineTransferSourceVtbl,
    query_interface : Proc(IMFMediaEngineTransferSource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineTransferSource*, UInt32),
    release : Proc(IMFMediaEngineTransferSource*, UInt32),
    transfer_source_to_media_engine : Proc(IMFMediaEngineTransferSource*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("24230452-fe54-40cc-94f3-fcc394c340d6")]
  record IMFMediaEngineTransferSource, lpVtbl : IMFMediaEngineTransferSourceVtbl* do
    GUID = LibC::GUID.new(0x24230452_u32, 0xfe54_u16, 0x40cc_u16, StaticArray[0x94_u8, 0xf3_u8, 0xfc_u8, 0xc3_u8, 0x94_u8, 0xc3_u8, 0x40_u8, 0xd6_u8])
    def query_interface(this : IMFMediaEngineTransferSource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineTransferSource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineTransferSource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def transfer_source_to_media_engine(this : IMFMediaEngineTransferSource*, destination : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transfer_source_to_media_engine.call(this, destination)
    end

  end

  @[Extern]
  record IMFTimedTextVtbl,
    query_interface : Proc(IMFTimedText*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedText*, UInt32),
    release : Proc(IMFTimedText*, UInt32),
    register_notifications : Proc(IMFTimedText*, Void*, Win32cr::Foundation::HRESULT),
    select_track : Proc(IMFTimedText*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    add_data_source : Proc(IMFTimedText*, Void*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND, Win32cr::Foundation::BOOL, UInt32*, Win32cr::Foundation::HRESULT),
    add_data_source_from_url : Proc(IMFTimedText*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND, Win32cr::Foundation::BOOL, UInt32*, Win32cr::Foundation::HRESULT),
    add_track : Proc(IMFTimedText*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND, Void**, Win32cr::Foundation::HRESULT),
    remove_track : Proc(IMFTimedText*, Void*, Win32cr::Foundation::HRESULT),
    get_cue_time_offset : Proc(IMFTimedText*, Float64*, Win32cr::Foundation::HRESULT),
    set_cue_time_offset : Proc(IMFTimedText*, Float64, Win32cr::Foundation::HRESULT),
    get_tracks : Proc(IMFTimedText*, Void**, Win32cr::Foundation::HRESULT),
    get_active_tracks : Proc(IMFTimedText*, Void**, Win32cr::Foundation::HRESULT),
    get_text_tracks : Proc(IMFTimedText*, Void**, Win32cr::Foundation::HRESULT),
    get_metadata_tracks : Proc(IMFTimedText*, Void**, Win32cr::Foundation::HRESULT),
    set_in_band_enabled : Proc(IMFTimedText*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    is_in_band_enabled : Proc(IMFTimedText*, Win32cr::Foundation::BOOL)


  @[Extern]
  #@[Com("1f2a94c9-a3df-430d-9d0f-acd85ddc29af")]
  record IMFTimedText, lpVtbl : IMFTimedTextVtbl* do
    GUID = LibC::GUID.new(0x1f2a94c9_u32, 0xa3df_u16, 0x430d_u16, StaticArray[0x9d_u8, 0xf_u8, 0xac_u8, 0xd8_u8, 0x5d_u8, 0xdc_u8, 0x29_u8, 0xaf_u8])
    def query_interface(this : IMFTimedText*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedText*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedText*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_notifications(this : IMFTimedText*, notify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_notifications.call(this, notify)
    end
    def select_track(this : IMFTimedText*, trackId : UInt32, selected : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.select_track.call(this, trackId, selected)
    end
    def add_data_source(this : IMFTimedText*, byteStream : Void*, label : Win32cr::Foundation::PWSTR, language : Win32cr::Foundation::PWSTR, kind : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND, isDefault : Win32cr::Foundation::BOOL, trackId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_data_source.call(this, byteStream, label, language, kind, isDefault, trackId)
    end
    def add_data_source_from_url(this : IMFTimedText*, url : Win32cr::Foundation::PWSTR, label : Win32cr::Foundation::PWSTR, language : Win32cr::Foundation::PWSTR, kind : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND, isDefault : Win32cr::Foundation::BOOL, trackId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_data_source_from_url.call(this, url, label, language, kind, isDefault, trackId)
    end
    def add_track(this : IMFTimedText*, label : Win32cr::Foundation::PWSTR, language : Win32cr::Foundation::PWSTR, kind : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND, track : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_track.call(this, label, language, kind, track)
    end
    def remove_track(this : IMFTimedText*, track : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_track.call(this, track)
    end
    def get_cue_time_offset(this : IMFTimedText*, offset : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cue_time_offset.call(this, offset)
    end
    def set_cue_time_offset(this : IMFTimedText*, offset : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_cue_time_offset.call(this, offset)
    end
    def get_tracks(this : IMFTimedText*, tracks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_tracks.call(this, tracks)
    end
    def get_active_tracks(this : IMFTimedText*, activeTracks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_active_tracks.call(this, activeTracks)
    end
    def get_text_tracks(this : IMFTimedText*, textTracks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_tracks.call(this, textTracks)
    end
    def get_metadata_tracks(this : IMFTimedText*, metadataTracks : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_metadata_tracks.call(this, metadataTracks)
    end
    def set_in_band_enabled(this : IMFTimedText*, enabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_in_band_enabled.call(this, enabled)
    end
    def is_in_band_enabled(this : IMFTimedText*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_in_band_enabled.call(this)
    end

  end

  @[Extern]
  record IMFTimedTextNotifyVtbl,
    query_interface : Proc(IMFTimedTextNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextNotify*, UInt32),
    release : Proc(IMFTimedTextNotify*, UInt32),
    track_added : Proc(IMFTimedTextNotify*, UInt32, Void),
    track_removed : Proc(IMFTimedTextNotify*, UInt32, Void),
    track_selected : Proc(IMFTimedTextNotify*, UInt32, Win32cr::Foundation::BOOL, Void),
    track_ready_state_changed : Proc(IMFTimedTextNotify*, UInt32, Void),
    error : Proc(IMFTimedTextNotify*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_ERROR_CODE, Win32cr::Foundation::HRESULT, UInt32, Void),
    cue : Proc(IMFTimedTextNotify*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_CUE_EVENT, Float64, Void*, Void),
    reset : Proc(IMFTimedTextNotify*, Void)


  @[Extern]
  #@[Com("df6b87b6-ce12-45db-aba7-432fe054e57d")]
  record IMFTimedTextNotify, lpVtbl : IMFTimedTextNotifyVtbl* do
    GUID = LibC::GUID.new(0xdf6b87b6_u32, 0xce12_u16, 0x45db_u16, StaticArray[0xab_u8, 0xa7_u8, 0x43_u8, 0x2f_u8, 0xe0_u8, 0x54_u8, 0xe5_u8, 0x7d_u8])
    def query_interface(this : IMFTimedTextNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def track_added(this : IMFTimedTextNotify*, trackId : UInt32) : Void
      @lpVtbl.try &.value.track_added.call(this, trackId)
    end
    def track_removed(this : IMFTimedTextNotify*, trackId : UInt32) : Void
      @lpVtbl.try &.value.track_removed.call(this, trackId)
    end
    def track_selected(this : IMFTimedTextNotify*, trackId : UInt32, selected : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.track_selected.call(this, trackId, selected)
    end
    def track_ready_state_changed(this : IMFTimedTextNotify*, trackId : UInt32) : Void
      @lpVtbl.try &.value.track_ready_state_changed.call(this, trackId)
    end
    def error(this : IMFTimedTextNotify*, errorCode : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_ERROR_CODE, extendedErrorCode : Win32cr::Foundation::HRESULT, sourceTrackId : UInt32) : Void
      @lpVtbl.try &.value.error.call(this, errorCode, extendedErrorCode, sourceTrackId)
    end
    def cue(this : IMFTimedTextNotify*, cueEvent : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_CUE_EVENT, currentTime : Float64, cue : Void*) : Void
      @lpVtbl.try &.value.cue.call(this, cueEvent, currentTime, cue)
    end
    def reset(this : IMFTimedTextNotify*) : Void
      @lpVtbl.try &.value.reset.call(this)
    end

  end

  @[Extern]
  record IMFTimedTextTrackVtbl,
    query_interface : Proc(IMFTimedTextTrack*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextTrack*, UInt32),
    release : Proc(IMFTimedTextTrack*, UInt32),
    get_id : Proc(IMFTimedTextTrack*, UInt32),
    get_label : Proc(IMFTimedTextTrack*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_label : Proc(IMFTimedTextTrack*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_language : Proc(IMFTimedTextTrack*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_track_kind : Proc(IMFTimedTextTrack*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND),
    is_in_band : Proc(IMFTimedTextTrack*, Win32cr::Foundation::BOOL),
    get_in_band_metadata_track_dispatch_type : Proc(IMFTimedTextTrack*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    is_active : Proc(IMFTimedTextTrack*, Win32cr::Foundation::BOOL),
    get_error_code : Proc(IMFTimedTextTrack*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_ERROR_CODE),
    get_extended_error_code : Proc(IMFTimedTextTrack*, Win32cr::Foundation::HRESULT),
    get_data_format : Proc(IMFTimedTextTrack*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_ready_state : Proc(IMFTimedTextTrack*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_READY_STATE),
    get_cue_list : Proc(IMFTimedTextTrack*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8822c32d-654e-4233-bf21-d7f2e67d30d4")]
  record IMFTimedTextTrack, lpVtbl : IMFTimedTextTrackVtbl* do
    GUID = LibC::GUID.new(0x8822c32d_u32, 0x654e_u16, 0x4233_u16, StaticArray[0xbf_u8, 0x21_u8, 0xd7_u8, 0xf2_u8, 0xe6_u8, 0x7d_u8, 0x30_u8, 0xd4_u8])
    def query_interface(this : IMFTimedTextTrack*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextTrack*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextTrack*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : IMFTimedTextTrack*) : UInt32
      @lpVtbl.try &.value.get_id.call(this)
    end
    def get_label(this : IMFTimedTextTrack*, label : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_label.call(this, label)
    end
    def set_label(this : IMFTimedTextTrack*, label : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_label.call(this, label)
    end
    def get_language(this : IMFTimedTextTrack*, language : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_language.call(this, language)
    end
    def get_track_kind(this : IMFTimedTextTrack*) : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND
      @lpVtbl.try &.value.get_track_kind.call(this)
    end
    def is_in_band(this : IMFTimedTextTrack*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_in_band.call(this)
    end
    def get_in_band_metadata_track_dispatch_type(this : IMFTimedTextTrack*, dispatchType : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_in_band_metadata_track_dispatch_type.call(this, dispatchType)
    end
    def is_active(this : IMFTimedTextTrack*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_active.call(this)
    end
    def get_error_code(this : IMFTimedTextTrack*) : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_ERROR_CODE
      @lpVtbl.try &.value.get_error_code.call(this)
    end
    def get_extended_error_code(this : IMFTimedTextTrack*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extended_error_code.call(this)
    end
    def get_data_format(this : IMFTimedTextTrack*, format : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_format.call(this, format)
    end
    def get_ready_state(this : IMFTimedTextTrack*) : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_READY_STATE
      @lpVtbl.try &.value.get_ready_state.call(this)
    end
    def get_cue_list(this : IMFTimedTextTrack*, cues : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cue_list.call(this, cues)
    end

  end

  @[Extern]
  record IMFTimedTextTrackListVtbl,
    query_interface : Proc(IMFTimedTextTrackList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextTrackList*, UInt32),
    release : Proc(IMFTimedTextTrackList*, UInt32),
    get_length : Proc(IMFTimedTextTrackList*, UInt32),
    get_track : Proc(IMFTimedTextTrackList*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_track_by_id : Proc(IMFTimedTextTrackList*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("23ff334c-442c-445f-bccc-edc438aa11e2")]
  record IMFTimedTextTrackList, lpVtbl : IMFTimedTextTrackListVtbl* do
    GUID = LibC::GUID.new(0x23ff334c_u32, 0x442c_u16, 0x445f_u16, StaticArray[0xbc_u8, 0xcc_u8, 0xed_u8, 0xc4_u8, 0x38_u8, 0xaa_u8, 0x11_u8, 0xe2_u8])
    def query_interface(this : IMFTimedTextTrackList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextTrackList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextTrackList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_length(this : IMFTimedTextTrackList*) : UInt32
      @lpVtbl.try &.value.get_length.call(this)
    end
    def get_track(this : IMFTimedTextTrackList*, index : UInt32, track : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_track.call(this, index, track)
    end
    def get_track_by_id(this : IMFTimedTextTrackList*, trackId : UInt32, track : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_track_by_id.call(this, trackId, track)
    end

  end

  @[Extern]
  record IMFTimedTextCueVtbl,
    query_interface : Proc(IMFTimedTextCue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextCue*, UInt32),
    release : Proc(IMFTimedTextCue*, UInt32),
    get_id : Proc(IMFTimedTextCue*, UInt32),
    get_original_id : Proc(IMFTimedTextCue*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_cue_kind : Proc(IMFTimedTextCue*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND),
    get_start_time : Proc(IMFTimedTextCue*, Float64),
    get_duration : Proc(IMFTimedTextCue*, Float64),
    get_track_id : Proc(IMFTimedTextCue*, UInt32),
    get_data : Proc(IMFTimedTextCue*, Void**, Win32cr::Foundation::HRESULT),
    get_region : Proc(IMFTimedTextCue*, Void**, Win32cr::Foundation::HRESULT),
    get_style : Proc(IMFTimedTextCue*, Void**, Win32cr::Foundation::HRESULT),
    get_line_count : Proc(IMFTimedTextCue*, UInt32),
    get_line : Proc(IMFTimedTextCue*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1e560447-9a2b-43e1-a94c-b0aaabfbfbc9")]
  record IMFTimedTextCue, lpVtbl : IMFTimedTextCueVtbl* do
    GUID = LibC::GUID.new(0x1e560447_u32, 0x9a2b_u16, 0x43e1_u16, StaticArray[0xa9_u8, 0x4c_u8, 0xb0_u8, 0xaa_u8, 0xab_u8, 0xfb_u8, 0xfb_u8, 0xc9_u8])
    def query_interface(this : IMFTimedTextCue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextCue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextCue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_id(this : IMFTimedTextCue*) : UInt32
      @lpVtbl.try &.value.get_id.call(this)
    end
    def get_original_id(this : IMFTimedTextCue*, originalId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_original_id.call(this, originalId)
    end
    def get_cue_kind(this : IMFTimedTextCue*) : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_TRACK_KIND
      @lpVtbl.try &.value.get_cue_kind.call(this)
    end
    def get_start_time(this : IMFTimedTextCue*) : Float64
      @lpVtbl.try &.value.get_start_time.call(this)
    end
    def get_duration(this : IMFTimedTextCue*) : Float64
      @lpVtbl.try &.value.get_duration.call(this)
    end
    def get_track_id(this : IMFTimedTextCue*) : UInt32
      @lpVtbl.try &.value.get_track_id.call(this)
    end
    def get_data(this : IMFTimedTextCue*, data : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, data)
    end
    def get_region(this : IMFTimedTextCue*, region : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_region.call(this, region)
    end
    def get_style(this : IMFTimedTextCue*, style : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_style.call(this, style)
    end
    def get_line_count(this : IMFTimedTextCue*) : UInt32
      @lpVtbl.try &.value.get_line_count.call(this)
    end
    def get_line(this : IMFTimedTextCue*, index : UInt32, line : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line.call(this, index, line)
    end

  end

  @[Extern]
  record IMFTimedTextFormattedTextVtbl,
    query_interface : Proc(IMFTimedTextFormattedText*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextFormattedText*, UInt32),
    release : Proc(IMFTimedTextFormattedText*, UInt32),
    get_text : Proc(IMFTimedTextFormattedText*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_subformatting_count : Proc(IMFTimedTextFormattedText*, UInt32),
    get_subformatting : Proc(IMFTimedTextFormattedText*, UInt32, UInt32*, UInt32*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e13af3c1-4d47-4354-b1f5-e83ae0ecae60")]
  record IMFTimedTextFormattedText, lpVtbl : IMFTimedTextFormattedTextVtbl* do
    GUID = LibC::GUID.new(0xe13af3c1_u32, 0x4d47_u16, 0x4354_u16, StaticArray[0xb1_u8, 0xf5_u8, 0xe8_u8, 0x3a_u8, 0xe0_u8, 0xec_u8, 0xae_u8, 0x60_u8])
    def query_interface(this : IMFTimedTextFormattedText*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextFormattedText*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextFormattedText*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_text(this : IMFTimedTextFormattedText*, text : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text.call(this, text)
    end
    def get_subformatting_count(this : IMFTimedTextFormattedText*) : UInt32
      @lpVtbl.try &.value.get_subformatting_count.call(this)
    end
    def get_subformatting(this : IMFTimedTextFormattedText*, index : UInt32, firstChar : UInt32*, charLength : UInt32*, style : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subformatting.call(this, index, firstChar, charLength, style)
    end

  end

  @[Extern]
  record IMFTimedTextStyleVtbl,
    query_interface : Proc(IMFTimedTextStyle*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextStyle*, UInt32),
    release : Proc(IMFTimedTextStyle*, UInt32),
    get_name : Proc(IMFTimedTextStyle*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    is_external : Proc(IMFTimedTextStyle*, Win32cr::Foundation::BOOL),
    get_font_family : Proc(IMFTimedTextStyle*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_font_size : Proc(IMFTimedTextStyle*, Float64*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*, Win32cr::Foundation::HRESULT),
    get_color : Proc(IMFTimedTextStyle*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    get_background_color : Proc(IMFTimedTextStyle*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    get_show_background_always : Proc(IMFTimedTextStyle*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_font_style : Proc(IMFTimedTextStyle*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_FONT_STYLE*, Win32cr::Foundation::HRESULT),
    get_bold : Proc(IMFTimedTextStyle*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_right_to_left : Proc(IMFTimedTextStyle*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_text_alignment : Proc(IMFTimedTextStyle*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_ALIGNMENT*, Win32cr::Foundation::HRESULT),
    get_text_decoration : Proc(IMFTimedTextStyle*, UInt32*, Win32cr::Foundation::HRESULT),
    get_text_outline : Proc(IMFTimedTextStyle*, Win32cr::Media::MediaFoundation::MFARGB*, Float64*, Float64*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("09b2455d-b834-4f01-a347-9052e21c450e")]
  record IMFTimedTextStyle, lpVtbl : IMFTimedTextStyleVtbl* do
    GUID = LibC::GUID.new(0x9b2455d_u32, 0xb834_u16, 0x4f01_u16, StaticArray[0xa3_u8, 0x47_u8, 0x90_u8, 0x52_u8, 0xe2_u8, 0x1c_u8, 0x45_u8, 0xe_u8])
    def query_interface(this : IMFTimedTextStyle*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextStyle*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextStyle*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IMFTimedTextStyle*, name : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def is_external(this : IMFTimedTextStyle*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_external.call(this)
    end
    def get_font_family(this : IMFTimedTextStyle*, fontFamily : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_font_family.call(this, fontFamily)
    end
    def get_font_size(this : IMFTimedTextStyle*, fontSize : Float64*, unitType : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_font_size.call(this, fontSize, unitType)
    end
    def get_color(this : IMFTimedTextStyle*, color : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_color.call(this, color)
    end
    def get_background_color(this : IMFTimedTextStyle*, bgColor : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_background_color.call(this, bgColor)
    end
    def get_show_background_always(this : IMFTimedTextStyle*, showBackgroundAlways : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_show_background_always.call(this, showBackgroundAlways)
    end
    def get_font_style(this : IMFTimedTextStyle*, fontStyle : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_FONT_STYLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_font_style.call(this, fontStyle)
    end
    def get_bold(this : IMFTimedTextStyle*, bold : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bold.call(this, bold)
    end
    def get_right_to_left(this : IMFTimedTextStyle*, rightToLeft : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_right_to_left.call(this, rightToLeft)
    end
    def get_text_alignment(this : IMFTimedTextStyle*, textAlign : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_ALIGNMENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_alignment.call(this, textAlign)
    end
    def get_text_decoration(this : IMFTimedTextStyle*, textDecoration : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_decoration.call(this, textDecoration)
    end
    def get_text_outline(this : IMFTimedTextStyle*, color : Win32cr::Media::MediaFoundation::MFARGB*, thickness : Float64*, blurRadius : Float64*, unitType : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_text_outline.call(this, color, thickness, blurRadius, unitType)
    end

  end

  @[Extern]
  record IMFTimedTextRegionVtbl,
    query_interface : Proc(IMFTimedTextRegion*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextRegion*, UInt32),
    release : Proc(IMFTimedTextRegion*, UInt32),
    get_name : Proc(IMFTimedTextRegion*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_position : Proc(IMFTimedTextRegion*, Float64*, Float64*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*, Win32cr::Foundation::HRESULT),
    get_extent : Proc(IMFTimedTextRegion*, Float64*, Float64*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*, Win32cr::Foundation::HRESULT),
    get_background_color : Proc(IMFTimedTextRegion*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    get_writing_mode : Proc(IMFTimedTextRegion*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_WRITING_MODE*, Win32cr::Foundation::HRESULT),
    get_display_alignment : Proc(IMFTimedTextRegion*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_DISPLAY_ALIGNMENT*, Win32cr::Foundation::HRESULT),
    get_line_height : Proc(IMFTimedTextRegion*, Float64*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*, Win32cr::Foundation::HRESULT),
    get_clip_overflow : Proc(IMFTimedTextRegion*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_padding : Proc(IMFTimedTextRegion*, Float64*, Float64*, Float64*, Float64*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*, Win32cr::Foundation::HRESULT),
    get_wrap : Proc(IMFTimedTextRegion*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_z_index : Proc(IMFTimedTextRegion*, Int32*, Win32cr::Foundation::HRESULT),
    get_scroll_mode : Proc(IMFTimedTextRegion*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_SCROLL_MODE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c8d22afc-bc47-4bdf-9b04-787e49ce3f58")]
  record IMFTimedTextRegion, lpVtbl : IMFTimedTextRegionVtbl* do
    GUID = LibC::GUID.new(0xc8d22afc_u32, 0xbc47_u16, 0x4bdf_u16, StaticArray[0x9b_u8, 0x4_u8, 0x78_u8, 0x7e_u8, 0x49_u8, 0xce_u8, 0x3f_u8, 0x58_u8])
    def query_interface(this : IMFTimedTextRegion*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextRegion*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextRegion*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IMFTimedTextRegion*, name : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, name)
    end
    def get_position(this : IMFTimedTextRegion*, pX : Float64*, pY : Float64*, unitType : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position.call(this, pX, pY, unitType)
    end
    def get_extent(this : IMFTimedTextRegion*, pWidth : Float64*, pHeight : Float64*, unitType : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_extent.call(this, pWidth, pHeight, unitType)
    end
    def get_background_color(this : IMFTimedTextRegion*, bgColor : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_background_color.call(this, bgColor)
    end
    def get_writing_mode(this : IMFTimedTextRegion*, writingMode : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_WRITING_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_writing_mode.call(this, writingMode)
    end
    def get_display_alignment(this : IMFTimedTextRegion*, displayAlign : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_DISPLAY_ALIGNMENT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_alignment.call(this, displayAlign)
    end
    def get_line_height(this : IMFTimedTextRegion*, pLineHeight : Float64*, unitType : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_line_height.call(this, pLineHeight, unitType)
    end
    def get_clip_overflow(this : IMFTimedTextRegion*, clipOverflow : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clip_overflow.call(this, clipOverflow)
    end
    def get_padding(this : IMFTimedTextRegion*, before : Float64*, start : Float64*, after : Float64*, end__ : Float64*, unitType : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_UNIT_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_padding.call(this, before, start, after, end__, unitType)
    end
    def get_wrap(this : IMFTimedTextRegion*, wrap : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_wrap.call(this, wrap)
    end
    def get_z_index(this : IMFTimedTextRegion*, zIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_z_index.call(this, zIndex)
    end
    def get_scroll_mode(this : IMFTimedTextRegion*, scrollMode : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_SCROLL_MODE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_scroll_mode.call(this, scrollMode)
    end

  end

  @[Extern]
  record IMFTimedTextBinaryVtbl,
    query_interface : Proc(IMFTimedTextBinary*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextBinary*, UInt32),
    release : Proc(IMFTimedTextBinary*, UInt32),
    get_data : Proc(IMFTimedTextBinary*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4ae3a412-0545-43c4-bf6f-6b97a5c6c432")]
  record IMFTimedTextBinary, lpVtbl : IMFTimedTextBinaryVtbl* do
    GUID = LibC::GUID.new(0x4ae3a412_u32, 0x545_u16, 0x43c4_u16, StaticArray[0xbf_u8, 0x6f_u8, 0x6b_u8, 0x97_u8, 0xa5_u8, 0xc6_u8, 0xc4_u8, 0x32_u8])
    def query_interface(this : IMFTimedTextBinary*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextBinary*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextBinary*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data(this : IMFTimedTextBinary*, data : UInt8**, length : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, data, length)
    end

  end

  @[Extern]
  record IMFTimedTextCueListVtbl,
    query_interface : Proc(IMFTimedTextCueList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextCueList*, UInt32),
    release : Proc(IMFTimedTextCueList*, UInt32),
    get_length : Proc(IMFTimedTextCueList*, UInt32),
    get_cue_by_index : Proc(IMFTimedTextCueList*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_cue_by_id : Proc(IMFTimedTextCueList*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_cue_by_original_id : Proc(IMFTimedTextCueList*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    add_text_cue : Proc(IMFTimedTextCueList*, Float64, Float64, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    add_data_cue : Proc(IMFTimedTextCueList*, Float64, Float64, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    remove_cue : Proc(IMFTimedTextCueList*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ad128745-211b-40a0-9981-fe65f166d0fd")]
  record IMFTimedTextCueList, lpVtbl : IMFTimedTextCueListVtbl* do
    GUID = LibC::GUID.new(0xad128745_u32, 0x211b_u16, 0x40a0_u16, StaticArray[0x99_u8, 0x81_u8, 0xfe_u8, 0x65_u8, 0xf1_u8, 0x66_u8, 0xd0_u8, 0xfd_u8])
    def query_interface(this : IMFTimedTextCueList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextCueList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextCueList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_length(this : IMFTimedTextCueList*) : UInt32
      @lpVtbl.try &.value.get_length.call(this)
    end
    def get_cue_by_index(this : IMFTimedTextCueList*, index : UInt32, cue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cue_by_index.call(this, index, cue)
    end
    def get_cue_by_id(this : IMFTimedTextCueList*, id : UInt32, cue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cue_by_id.call(this, id, cue)
    end
    def get_cue_by_original_id(this : IMFTimedTextCueList*, originalId : Win32cr::Foundation::PWSTR, cue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cue_by_original_id.call(this, originalId, cue)
    end
    def add_text_cue(this : IMFTimedTextCueList*, start : Float64, duration : Float64, text : Win32cr::Foundation::PWSTR, cue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_text_cue.call(this, start, duration, text, cue)
    end
    def add_data_cue(this : IMFTimedTextCueList*, start : Float64, duration : Float64, data : UInt8*, dataSize : UInt32, cue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_data_cue.call(this, start, duration, data, dataSize, cue)
    end
    def remove_cue(this : IMFTimedTextCueList*, cue : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_cue.call(this, cue)
    end

  end

  @[Extern]
  record IMFTimedTextRubyVtbl,
    query_interface : Proc(IMFTimedTextRuby*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextRuby*, UInt32),
    release : Proc(IMFTimedTextRuby*, UInt32),
    get_ruby_text : Proc(IMFTimedTextRuby*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_ruby_position : Proc(IMFTimedTextRuby*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_RUBY_POSITION*, Win32cr::Foundation::HRESULT),
    get_ruby_align : Proc(IMFTimedTextRuby*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_RUBY_ALIGN*, Win32cr::Foundation::HRESULT),
    get_ruby_reserve : Proc(IMFTimedTextRuby*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_RUBY_RESERVE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("76c6a6f5-4955-4de5-b27b-14b734cc14b4")]
  record IMFTimedTextRuby, lpVtbl : IMFTimedTextRubyVtbl* do
    GUID = LibC::GUID.new(0x76c6a6f5_u32, 0x4955_u16, 0x4de5_u16, StaticArray[0xb2_u8, 0x7b_u8, 0x14_u8, 0xb7_u8, 0x34_u8, 0xcc_u8, 0x14_u8, 0xb4_u8])
    def query_interface(this : IMFTimedTextRuby*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextRuby*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextRuby*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ruby_text(this : IMFTimedTextRuby*, rubyText : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ruby_text.call(this, rubyText)
    end
    def get_ruby_position(this : IMFTimedTextRuby*, value : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_RUBY_POSITION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ruby_position.call(this, value)
    end
    def get_ruby_align(this : IMFTimedTextRuby*, value : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_RUBY_ALIGN*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ruby_align.call(this, value)
    end
    def get_ruby_reserve(this : IMFTimedTextRuby*, value : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_RUBY_RESERVE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ruby_reserve.call(this, value)
    end

  end

  @[Extern]
  record IMFTimedTextBoutenVtbl,
    query_interface : Proc(IMFTimedTextBouten*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextBouten*, UInt32),
    release : Proc(IMFTimedTextBouten*, UInt32),
    get_bouten_type : Proc(IMFTimedTextBouten*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_BOUTEN_TYPE*, Win32cr::Foundation::HRESULT),
    get_bouten_color : Proc(IMFTimedTextBouten*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    get_bouten_position : Proc(IMFTimedTextBouten*, Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_BOUTEN_POSITION*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3c5f3e8a-90c0-464e-8136-898d2975f847")]
  record IMFTimedTextBouten, lpVtbl : IMFTimedTextBoutenVtbl* do
    GUID = LibC::GUID.new(0x3c5f3e8a_u32, 0x90c0_u16, 0x464e_u16, StaticArray[0x81_u8, 0x36_u8, 0x89_u8, 0x8d_u8, 0x29_u8, 0x75_u8, 0xf8_u8, 0x47_u8])
    def query_interface(this : IMFTimedTextBouten*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextBouten*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextBouten*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_bouten_type(this : IMFTimedTextBouten*, value : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_BOUTEN_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bouten_type.call(this, value)
    end
    def get_bouten_color(this : IMFTimedTextBouten*, value : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bouten_color.call(this, value)
    end
    def get_bouten_position(this : IMFTimedTextBouten*, value : Win32cr::Media::MediaFoundation::MF_TIMED_TEXT_BOUTEN_POSITION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bouten_position.call(this, value)
    end

  end

  @[Extern]
  record IMFTimedTextStyle2Vtbl,
    query_interface : Proc(IMFTimedTextStyle2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTimedTextStyle2*, UInt32),
    release : Proc(IMFTimedTextStyle2*, UInt32),
    get_ruby : Proc(IMFTimedTextStyle2*, Void**, Win32cr::Foundation::HRESULT),
    get_bouten : Proc(IMFTimedTextStyle2*, Void**, Win32cr::Foundation::HRESULT),
    is_text_combined : Proc(IMFTimedTextStyle2*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_font_angle_in_degrees : Proc(IMFTimedTextStyle2*, Float64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("db639199-c809-4c89-bfca-d0bbb9729d6e")]
  record IMFTimedTextStyle2, lpVtbl : IMFTimedTextStyle2Vtbl* do
    GUID = LibC::GUID.new(0xdb639199_u32, 0xc809_u16, 0x4c89_u16, StaticArray[0xbf_u8, 0xca_u8, 0xd0_u8, 0xbb_u8, 0xb9_u8, 0x72_u8, 0x9d_u8, 0x6e_u8])
    def query_interface(this : IMFTimedTextStyle2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTimedTextStyle2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTimedTextStyle2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_ruby(this : IMFTimedTextStyle2*, ruby : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ruby.call(this, ruby)
    end
    def get_bouten(this : IMFTimedTextStyle2*, bouten : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bouten.call(this, bouten)
    end
    def is_text_combined(this : IMFTimedTextStyle2*, value : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_text_combined.call(this, value)
    end
    def get_font_angle_in_degrees(this : IMFTimedTextStyle2*, value : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_font_angle_in_degrees.call(this, value)
    end

  end

  @[Extern]
  record IMFMediaEngineEMENotifyVtbl,
    query_interface : Proc(IMFMediaEngineEMENotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineEMENotify*, UInt32),
    release : Proc(IMFMediaEngineEMENotify*, UInt32),
    encrypted : Proc(IMFMediaEngineEMENotify*, UInt8*, UInt32, Win32cr::Foundation::BSTR, Void),
    waiting_for_key : Proc(IMFMediaEngineEMENotify*, Void)


  @[Extern]
  #@[Com("9e184d15-cdb7-4f86-b49e-566689f4a601")]
  record IMFMediaEngineEMENotify, lpVtbl : IMFMediaEngineEMENotifyVtbl* do
    GUID = LibC::GUID.new(0x9e184d15_u32, 0xcdb7_u16, 0x4f86_u16, StaticArray[0xb4_u8, 0x9e_u8, 0x56_u8, 0x66_u8, 0x89_u8, 0xf4_u8, 0xa6_u8, 0x1_u8])
    def query_interface(this : IMFMediaEngineEMENotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineEMENotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineEMENotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def encrypted(this : IMFMediaEngineEMENotify*, pbInitData : UInt8*, cb : UInt32, bstrInitDataType : Win32cr::Foundation::BSTR) : Void
      @lpVtbl.try &.value.encrypted.call(this, pbInitData, cb, bstrInitDataType)
    end
    def waiting_for_key(this : IMFMediaEngineEMENotify*) : Void
      @lpVtbl.try &.value.waiting_for_key.call(this)
    end

  end

  @[Extern]
  record IMFMediaKeySessionNotify2Vtbl,
    query_interface : Proc(IMFMediaKeySessionNotify2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaKeySessionNotify2*, UInt32),
    release : Proc(IMFMediaKeySessionNotify2*, UInt32),
    key_message : Proc(IMFMediaKeySessionNotify2*, Win32cr::Foundation::BSTR, UInt8*, UInt32, Void),
    key_added : Proc(IMFMediaKeySessionNotify2*, Void),
    key_error : Proc(IMFMediaKeySessionNotify2*, UInt16, UInt32, Void),
    key_message2 : Proc(IMFMediaKeySessionNotify2*, Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_MESSAGETYPE, Win32cr::Foundation::BSTR, UInt8*, UInt32, Void),
    key_status_change : Proc(IMFMediaKeySessionNotify2*, Void)


  @[Extern]
  #@[Com("c3a9e92a-da88-46b0-a110-6cf953026cb9")]
  record IMFMediaKeySessionNotify2, lpVtbl : IMFMediaKeySessionNotify2Vtbl* do
    GUID = LibC::GUID.new(0xc3a9e92a_u32, 0xda88_u16, 0x46b0_u16, StaticArray[0xa1_u8, 0x10_u8, 0x6c_u8, 0xf9_u8, 0x53_u8, 0x2_u8, 0x6c_u8, 0xb9_u8])
    def query_interface(this : IMFMediaKeySessionNotify2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaKeySessionNotify2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaKeySessionNotify2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def key_message(this : IMFMediaKeySessionNotify2*, destinationURL : Win32cr::Foundation::BSTR, message : UInt8*, cb : UInt32) : Void
      @lpVtbl.try &.value.key_message.call(this, destinationURL, message, cb)
    end
    def key_added(this : IMFMediaKeySessionNotify2*) : Void
      @lpVtbl.try &.value.key_added.call(this)
    end
    def key_error(this : IMFMediaKeySessionNotify2*, code : UInt16, systemCode : UInt32) : Void
      @lpVtbl.try &.value.key_error.call(this, code, systemCode)
    end
    def key_message2(this : IMFMediaKeySessionNotify2*, eMessageType : Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_MESSAGETYPE, destinationURL : Win32cr::Foundation::BSTR, pbMessage : UInt8*, cbMessage : UInt32) : Void
      @lpVtbl.try &.value.key_message2.call(this, eMessageType, destinationURL, pbMessage, cbMessage)
    end
    def key_status_change(this : IMFMediaKeySessionNotify2*) : Void
      @lpVtbl.try &.value.key_status_change.call(this)
    end

  end

  @[Extern]
  record IMFMediaKeySystemAccessVtbl,
    query_interface : Proc(IMFMediaKeySystemAccess*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaKeySystemAccess*, UInt32),
    release : Proc(IMFMediaKeySystemAccess*, UInt32),
    create_media_keys : Proc(IMFMediaKeySystemAccess*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_SupportedConfiguration : Proc(IMFMediaKeySystemAccess*, Void**, Win32cr::Foundation::HRESULT),
    get_KeySystem : Proc(IMFMediaKeySystemAccess*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aec63fda-7a97-4944-b35c-6c6df8085cc3")]
  record IMFMediaKeySystemAccess, lpVtbl : IMFMediaKeySystemAccessVtbl* do
    GUID = LibC::GUID.new(0xaec63fda_u32, 0x7a97_u16, 0x4944_u16, StaticArray[0xb3_u8, 0x5c_u8, 0x6c_u8, 0x6d_u8, 0xf8_u8, 0x8_u8, 0x5c_u8, 0xc3_u8])
    def query_interface(this : IMFMediaKeySystemAccess*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaKeySystemAccess*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaKeySystemAccess*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_media_keys(this : IMFMediaKeySystemAccess*, pCdmCustomConfig : Void*, ppKeys : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_keys.call(this, pCdmCustomConfig, ppKeys)
    end
    def get_SupportedConfiguration(this : IMFMediaKeySystemAccess*, ppSupportedConfiguration : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedConfiguration.call(this, ppSupportedConfiguration)
    end
    def get_KeySystem(this : IMFMediaKeySystemAccess*, pKeySystem : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySystem.call(this, pKeySystem)
    end

  end

  @[Extern]
  record IMFMediaEngineClassFactory3Vtbl,
    query_interface : Proc(IMFMediaEngineClassFactory3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineClassFactory3*, UInt32),
    release : Proc(IMFMediaEngineClassFactory3*, UInt32),
    create_media_key_system_access : Proc(IMFMediaEngineClassFactory3*, Win32cr::Foundation::BSTR, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3787614f-65f7-4003-b673-ead8293a0e60")]
  record IMFMediaEngineClassFactory3, lpVtbl : IMFMediaEngineClassFactory3Vtbl* do
    GUID = LibC::GUID.new(0x3787614f_u32, 0x65f7_u16, 0x4003_u16, StaticArray[0xb6_u8, 0x73_u8, 0xea_u8, 0xd8_u8, 0x29_u8, 0x3a_u8, 0xe_u8, 0x60_u8])
    def query_interface(this : IMFMediaEngineClassFactory3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineClassFactory3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineClassFactory3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_media_key_system_access(this : IMFMediaEngineClassFactory3*, keySystem : Win32cr::Foundation::BSTR, ppSupportedConfigurationsArray : Void**, uSize : UInt32, ppKeyAccess : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_key_system_access.call(this, keySystem, ppSupportedConfigurationsArray, uSize, ppKeyAccess)
    end

  end

  @[Extern]
  record IMFMediaKeys2Vtbl,
    query_interface : Proc(IMFMediaKeys2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaKeys2*, UInt32),
    release : Proc(IMFMediaKeys2*, UInt32),
    create_session : Proc(IMFMediaKeys2*, Win32cr::Foundation::BSTR, UInt8*, UInt32, UInt8*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_KeySystem : Proc(IMFMediaKeys2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaKeys2*, Win32cr::Foundation::HRESULT),
    get_suspend_notify : Proc(IMFMediaKeys2*, Void**, Win32cr::Foundation::HRESULT),
    create_session2 : Proc(IMFMediaKeys2*, Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_TYPE, Void*, Void**, Win32cr::Foundation::HRESULT),
    set_server_certificate : Proc(IMFMediaKeys2*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_dom_exception : Proc(IMFMediaKeys2*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("45892507-ad66-4de2-83a2-acbb13cd8d43")]
  record IMFMediaKeys2, lpVtbl : IMFMediaKeys2Vtbl* do
    GUID = LibC::GUID.new(0x45892507_u32, 0xad66_u16, 0x4de2_u16, StaticArray[0x83_u8, 0xa2_u8, 0xac_u8, 0xbb_u8, 0x13_u8, 0xcd_u8, 0x8d_u8, 0x43_u8])
    def query_interface(this : IMFMediaKeys2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaKeys2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaKeys2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_session(this : IMFMediaKeys2*, mimeType : Win32cr::Foundation::BSTR, initData : UInt8*, cb : UInt32, customData : UInt8*, cbCustomData : UInt32, notify : Void*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, mimeType, initData, cb, customData, cbCustomData, notify, ppSession)
    end
    def get_KeySystem(this : IMFMediaKeys2*, keySystem : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySystem.call(this, keySystem)
    end
    def shutdown(this : IMFMediaKeys2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def get_suspend_notify(this : IMFMediaKeys2*, notify : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_suspend_notify.call(this, notify)
    end
    def create_session2(this : IMFMediaKeys2*, eSessionType : Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_TYPE, pMFMediaKeySessionNotify2 : Void*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session2.call(this, eSessionType, pMFMediaKeySessionNotify2, ppSession)
    end
    def set_server_certificate(this : IMFMediaKeys2*, pbServerCertificate : UInt8*, cb : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_server_certificate.call(this, pbServerCertificate, cb)
    end
    def get_dom_exception(this : IMFMediaKeys2*, systemCode : Win32cr::Foundation::HRESULT, code : Win32cr::Foundation::HRESULT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_dom_exception.call(this, systemCode, code)
    end

  end

  @[Extern]
  record IMFMediaKeySession2Vtbl,
    query_interface : Proc(IMFMediaKeySession2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaKeySession2*, UInt32),
    release : Proc(IMFMediaKeySession2*, UInt32),
    get_error : Proc(IMFMediaKeySession2*, UInt16*, UInt32*, Win32cr::Foundation::HRESULT),
    get_KeySystem : Proc(IMFMediaKeySession2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_SessionId : Proc(IMFMediaKeySession2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    update : Proc(IMFMediaKeySession2*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    close : Proc(IMFMediaKeySession2*, Win32cr::Foundation::HRESULT),
    get_KeyStatuses : Proc(IMFMediaKeySession2*, Win32cr::Media::MediaFoundation::MFMediaKeyStatus**, UInt32*, Win32cr::Foundation::HRESULT),
    load : Proc(IMFMediaKeySession2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    generate_request : Proc(IMFMediaKeySession2*, Win32cr::Foundation::BSTR, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_Expiration : Proc(IMFMediaKeySession2*, Float64*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMFMediaKeySession2*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaKeySession2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e9707e05-6d55-4636-b185-3de21210bd75")]
  record IMFMediaKeySession2, lpVtbl : IMFMediaKeySession2Vtbl* do
    GUID = LibC::GUID.new(0xe9707e05_u32, 0x6d55_u16, 0x4636_u16, StaticArray[0xb1_u8, 0x85_u8, 0x3d_u8, 0xe2_u8, 0x12_u8, 0x10_u8, 0xbd_u8, 0x75_u8])
    def query_interface(this : IMFMediaKeySession2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaKeySession2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaKeySession2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error(this : IMFMediaKeySession2*, code : UInt16*, systemCode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, code, systemCode)
    end
    def get_KeySystem(this : IMFMediaKeySession2*, keySystem : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeySystem.call(this, keySystem)
    end
    def get_SessionId(this : IMFMediaKeySession2*, sessionId : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SessionId.call(this, sessionId)
    end
    def update(this : IMFMediaKeySession2*, key : UInt8*, cb : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, key, cb)
    end
    def close(this : IMFMediaKeySession2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def get_KeyStatuses(this : IMFMediaKeySession2*, pKeyStatusesArray : Win32cr::Media::MediaFoundation::MFMediaKeyStatus**, puSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_KeyStatuses.call(this, pKeyStatusesArray, puSize)
    end
    def load(this : IMFMediaKeySession2*, bstrSessionId : Win32cr::Foundation::BSTR, pfLoaded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, bstrSessionId, pfLoaded)
    end
    def generate_request(this : IMFMediaKeySession2*, initDataType : Win32cr::Foundation::BSTR, pbInitData : UInt8*, cb : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_request.call(this, initDataType, pbInitData, cb)
    end
    def get_Expiration(this : IMFMediaKeySession2*, dblExpiration : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Expiration.call(this, dblExpiration)
    end
    def remove(this : IMFMediaKeySession2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this)
    end
    def shutdown(this : IMFMediaKeySession2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFMediaEngineClassFactory4Vtbl,
    query_interface : Proc(IMFMediaEngineClassFactory4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaEngineClassFactory4*, UInt32),
    release : Proc(IMFMediaEngineClassFactory4*, UInt32),
    create_content_decryption_module_factory : Proc(IMFMediaEngineClassFactory4*, Win32cr::Foundation::PWSTR, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fbe256c1-43cf-4a9b-8cb8-ce8632a34186")]
  record IMFMediaEngineClassFactory4, lpVtbl : IMFMediaEngineClassFactory4Vtbl* do
    GUID = LibC::GUID.new(0xfbe256c1_u32, 0x43cf_u16, 0x4a9b_u16, StaticArray[0x8c_u8, 0xb8_u8, 0xce_u8, 0x86_u8, 0x32_u8, 0xa3_u8, 0x41_u8, 0x86_u8])
    def query_interface(this : IMFMediaEngineClassFactory4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaEngineClassFactory4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaEngineClassFactory4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_content_decryption_module_factory(this : IMFMediaEngineClassFactory4*, keySystem : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_content_decryption_module_factory.call(this, keySystem, riid, ppvObject)
    end

  end

  @[Extern]
  record IMFDLNASinkInitVtbl,
    query_interface : Proc(IMFDLNASinkInit*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDLNASinkInit*, UInt32),
    release : Proc(IMFDLNASinkInit*, UInt32),
    initialize__ : Proc(IMFDLNASinkInit*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0c012799-1b61-4c10-bda9-04445be5f561")]
  record IMFDLNASinkInit, lpVtbl : IMFDLNASinkInitVtbl* do
    GUID = LibC::GUID.new(0xc012799_u32, 0x1b61_u16, 0x4c10_u16, StaticArray[0xbd_u8, 0xa9_u8, 0x4_u8, 0x44_u8, 0x5b_u8, 0xe5_u8, 0xf5_u8, 0x61_u8])
    def query_interface(this : IMFDLNASinkInit*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDLNASinkInit*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDLNASinkInit*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IMFDLNASinkInit*, pByteStream : Void*, fPal : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, pByteStream, fPal)
    end

  end

  @[Extern]
  record IMFReadWriteClassFactoryVtbl,
    query_interface : Proc(IMFReadWriteClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFReadWriteClassFactory*, UInt32),
    release : Proc(IMFReadWriteClassFactory*, UInt32),
    create_instance_from_url : Proc(IMFReadWriteClassFactory*, LibC::GUID*, Win32cr::Foundation::PWSTR, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_instance_from_object : Proc(IMFReadWriteClassFactory*, LibC::GUID*, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e7fe2e12-661c-40da-92f9-4f002ab67627")]
  record IMFReadWriteClassFactory, lpVtbl : IMFReadWriteClassFactoryVtbl* do
    GUID = LibC::GUID.new(0xe7fe2e12_u32, 0x661c_u16, 0x40da_u16, StaticArray[0x92_u8, 0xf9_u8, 0x4f_u8, 0x0_u8, 0x2a_u8, 0xb6_u8, 0x76_u8, 0x27_u8])
    def query_interface(this : IMFReadWriteClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFReadWriteClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFReadWriteClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance_from_url(this : IMFReadWriteClassFactory*, clsid : LibC::GUID*, pwszURL : Win32cr::Foundation::PWSTR, pAttributes : Void*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_from_url.call(this, clsid, pwszURL, pAttributes, riid, ppvObject)
    end
    def create_instance_from_object(this : IMFReadWriteClassFactory*, clsid : LibC::GUID*, punkObject : Void*, pAttributes : Void*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_from_object.call(this, clsid, punkObject, pAttributes, riid, ppvObject)
    end

  end

  @[Extern]
  record IMFSourceReaderVtbl,
    query_interface : Proc(IMFSourceReader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceReader*, UInt32),
    release : Proc(IMFSourceReader*, UInt32),
    get_stream_selection : Proc(IMFSourceReader*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_stream_selection : Proc(IMFSourceReader*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_native_media_type : Proc(IMFSourceReader*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_current_media_type : Proc(IMFSourceReader*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_current_media_type : Proc(IMFSourceReader*, UInt32, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_current_position : Proc(IMFSourceReader*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    read_sample : Proc(IMFSourceReader*, UInt32, UInt32, UInt32*, UInt32*, Int64*, Void**, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFSourceReader*, UInt32, Win32cr::Foundation::HRESULT),
    get_service_for_stream : Proc(IMFSourceReader*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_presentation_attribute : Proc(IMFSourceReader*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("70ae66f2-c809-4e4f-8915-bdcb406b7993")]
  record IMFSourceReader, lpVtbl : IMFSourceReaderVtbl* do
    GUID = LibC::GUID.new(0x70ae66f2_u32, 0xc809_u16, 0x4e4f_u16, StaticArray[0x89_u8, 0x15_u8, 0xbd_u8, 0xcb_u8, 0x40_u8, 0x6b_u8, 0x79_u8, 0x93_u8])
    def query_interface(this : IMFSourceReader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceReader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceReader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_selection(this : IMFSourceReader*, dwStreamIndex : UInt32, pfSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_selection.call(this, dwStreamIndex, pfSelected)
    end
    def set_stream_selection(this : IMFSourceReader*, dwStreamIndex : UInt32, fSelected : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_selection.call(this, dwStreamIndex, fSelected)
    end
    def get_native_media_type(this : IMFSourceReader*, dwStreamIndex : UInt32, dwMediaTypeIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_media_type.call(this, dwStreamIndex, dwMediaTypeIndex, ppMediaType)
    end
    def get_current_media_type(this : IMFSourceReader*, dwStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_media_type.call(this, dwStreamIndex, ppMediaType)
    end
    def set_current_media_type(this : IMFSourceReader*, dwStreamIndex : UInt32, pdwReserved : UInt32*, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_media_type.call(this, dwStreamIndex, pdwReserved, pMediaType)
    end
    def set_current_position(this : IMFSourceReader*, guidTimeFormat : LibC::GUID*, varPosition : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_position.call(this, guidTimeFormat, varPosition)
    end
    def read_sample(this : IMFSourceReader*, dwStreamIndex : UInt32, dwControlFlags : UInt32, pdwActualStreamIndex : UInt32*, pdwStreamFlags : UInt32*, pllTimestamp : Int64*, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_sample.call(this, dwStreamIndex, dwControlFlags, pdwActualStreamIndex, pdwStreamFlags, pllTimestamp, ppSample)
    end
    def flush(this : IMFSourceReader*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, dwStreamIndex)
    end
    def get_service_for_stream(this : IMFSourceReader*, dwStreamIndex : UInt32, guidService : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_for_stream.call(this, dwStreamIndex, guidService, riid, ppvObject)
    end
    def get_presentation_attribute(this : IMFSourceReader*, dwStreamIndex : UInt32, guidAttribute : LibC::GUID*, pvarAttribute : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_attribute.call(this, dwStreamIndex, guidAttribute, pvarAttribute)
    end

  end

  @[Extern]
  record IMFSourceReaderExVtbl,
    query_interface : Proc(IMFSourceReaderEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceReaderEx*, UInt32),
    release : Proc(IMFSourceReaderEx*, UInt32),
    get_stream_selection : Proc(IMFSourceReaderEx*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_stream_selection : Proc(IMFSourceReaderEx*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_native_media_type : Proc(IMFSourceReaderEx*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_current_media_type : Proc(IMFSourceReaderEx*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    set_current_media_type : Proc(IMFSourceReaderEx*, UInt32, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_current_position : Proc(IMFSourceReaderEx*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    read_sample : Proc(IMFSourceReaderEx*, UInt32, UInt32, UInt32*, UInt32*, Int64*, Void**, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFSourceReaderEx*, UInt32, Win32cr::Foundation::HRESULT),
    get_service_for_stream : Proc(IMFSourceReaderEx*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_presentation_attribute : Proc(IMFSourceReaderEx*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    set_native_media_type : Proc(IMFSourceReaderEx*, UInt32, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    add_transform_for_stream : Proc(IMFSourceReaderEx*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    remove_all_transforms_for_stream : Proc(IMFSourceReaderEx*, UInt32, Win32cr::Foundation::HRESULT),
    get_transform_for_stream : Proc(IMFSourceReaderEx*, UInt32, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7b981cf0-560e-4116-9875-b099895f23d7")]
  record IMFSourceReaderEx, lpVtbl : IMFSourceReaderExVtbl* do
    GUID = LibC::GUID.new(0x7b981cf0_u32, 0x560e_u16, 0x4116_u16, StaticArray[0x98_u8, 0x75_u8, 0xb0_u8, 0x99_u8, 0x89_u8, 0x5f_u8, 0x23_u8, 0xd7_u8])
    def query_interface(this : IMFSourceReaderEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceReaderEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceReaderEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_stream_selection(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, pfSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_selection.call(this, dwStreamIndex, pfSelected)
    end
    def set_stream_selection(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, fSelected : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_selection.call(this, dwStreamIndex, fSelected)
    end
    def get_native_media_type(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, dwMediaTypeIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_media_type.call(this, dwStreamIndex, dwMediaTypeIndex, ppMediaType)
    end
    def get_current_media_type(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_media_type.call(this, dwStreamIndex, ppMediaType)
    end
    def set_current_media_type(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, pdwReserved : UInt32*, pMediaType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_media_type.call(this, dwStreamIndex, pdwReserved, pMediaType)
    end
    def set_current_position(this : IMFSourceReaderEx*, guidTimeFormat : LibC::GUID*, varPosition : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_position.call(this, guidTimeFormat, varPosition)
    end
    def read_sample(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, dwControlFlags : UInt32, pdwActualStreamIndex : UInt32*, pdwStreamFlags : UInt32*, pllTimestamp : Int64*, ppSample : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_sample.call(this, dwStreamIndex, dwControlFlags, pdwActualStreamIndex, pdwStreamFlags, pllTimestamp, ppSample)
    end
    def flush(this : IMFSourceReaderEx*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, dwStreamIndex)
    end
    def get_service_for_stream(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, guidService : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_for_stream.call(this, dwStreamIndex, guidService, riid, ppvObject)
    end
    def get_presentation_attribute(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, guidAttribute : LibC::GUID*, pvarAttribute : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_attribute.call(this, dwStreamIndex, guidAttribute, pvarAttribute)
    end
    def set_native_media_type(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, pMediaType : Void*, pdwStreamFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_native_media_type.call(this, dwStreamIndex, pMediaType, pdwStreamFlags)
    end
    def add_transform_for_stream(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, pTransformOrActivate : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_transform_for_stream.call(this, dwStreamIndex, pTransformOrActivate)
    end
    def remove_all_transforms_for_stream(this : IMFSourceReaderEx*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_transforms_for_stream.call(this, dwStreamIndex)
    end
    def get_transform_for_stream(this : IMFSourceReaderEx*, dwStreamIndex : UInt32, dwTransformIndex : UInt32, pGuidCategory : LibC::GUID*, ppTransform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transform_for_stream.call(this, dwStreamIndex, dwTransformIndex, pGuidCategory, ppTransform)
    end

  end

  @[Extern]
  record IMFSourceReaderCallbackVtbl,
    query_interface : Proc(IMFSourceReaderCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceReaderCallback*, UInt32),
    release : Proc(IMFSourceReaderCallback*, UInt32),
    on_read_sample : Proc(IMFSourceReaderCallback*, Win32cr::Foundation::HRESULT, UInt32, UInt32, Int64, Void*, Win32cr::Foundation::HRESULT),
    on_flush : Proc(IMFSourceReaderCallback*, UInt32, Win32cr::Foundation::HRESULT),
    on_event : Proc(IMFSourceReaderCallback*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("deec8d99-fa1d-4d82-84c2-2c8969944867")]
  record IMFSourceReaderCallback, lpVtbl : IMFSourceReaderCallbackVtbl* do
    GUID = LibC::GUID.new(0xdeec8d99_u32, 0xfa1d_u16, 0x4d82_u16, StaticArray[0x84_u8, 0xc2_u8, 0x2c_u8, 0x89_u8, 0x69_u8, 0x94_u8, 0x48_u8, 0x67_u8])
    def query_interface(this : IMFSourceReaderCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceReaderCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceReaderCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_read_sample(this : IMFSourceReaderCallback*, hrStatus : Win32cr::Foundation::HRESULT, dwStreamIndex : UInt32, dwStreamFlags : UInt32, llTimestamp : Int64, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_read_sample.call(this, hrStatus, dwStreamIndex, dwStreamFlags, llTimestamp, pSample)
    end
    def on_flush(this : IMFSourceReaderCallback*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_flush.call(this, dwStreamIndex)
    end
    def on_event(this : IMFSourceReaderCallback*, dwStreamIndex : UInt32, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event.call(this, dwStreamIndex, pEvent)
    end

  end

  @[Extern]
  record IMFSourceReaderCallback2Vtbl,
    query_interface : Proc(IMFSourceReaderCallback2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSourceReaderCallback2*, UInt32),
    release : Proc(IMFSourceReaderCallback2*, UInt32),
    on_read_sample : Proc(IMFSourceReaderCallback2*, Win32cr::Foundation::HRESULT, UInt32, UInt32, Int64, Void*, Win32cr::Foundation::HRESULT),
    on_flush : Proc(IMFSourceReaderCallback2*, UInt32, Win32cr::Foundation::HRESULT),
    on_event : Proc(IMFSourceReaderCallback2*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    on_transform_change : Proc(IMFSourceReaderCallback2*, Win32cr::Foundation::HRESULT),
    on_stream_error : Proc(IMFSourceReaderCallback2*, UInt32, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cf839fe6-8c2a-4dd2-b6ea-c22d6961af05")]
  record IMFSourceReaderCallback2, lpVtbl : IMFSourceReaderCallback2Vtbl* do
    GUID = LibC::GUID.new(0xcf839fe6_u32, 0x8c2a_u16, 0x4dd2_u16, StaticArray[0xb6_u8, 0xea_u8, 0xc2_u8, 0x2d_u8, 0x69_u8, 0x61_u8, 0xaf_u8, 0x5_u8])
    def query_interface(this : IMFSourceReaderCallback2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSourceReaderCallback2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSourceReaderCallback2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_read_sample(this : IMFSourceReaderCallback2*, hrStatus : Win32cr::Foundation::HRESULT, dwStreamIndex : UInt32, dwStreamFlags : UInt32, llTimestamp : Int64, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_read_sample.call(this, hrStatus, dwStreamIndex, dwStreamFlags, llTimestamp, pSample)
    end
    def on_flush(this : IMFSourceReaderCallback2*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_flush.call(this, dwStreamIndex)
    end
    def on_event(this : IMFSourceReaderCallback2*, dwStreamIndex : UInt32, pEvent : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_event.call(this, dwStreamIndex, pEvent)
    end
    def on_transform_change(this : IMFSourceReaderCallback2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_transform_change.call(this)
    end
    def on_stream_error(this : IMFSourceReaderCallback2*, dwStreamIndex : UInt32, hrStatus : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_stream_error.call(this, dwStreamIndex, hrStatus)
    end

  end

  @[Extern]
  record IMFSinkWriterVtbl,
    query_interface : Proc(IMFSinkWriter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSinkWriter*, UInt32),
    release : Proc(IMFSinkWriter*, UInt32),
    add_stream : Proc(IMFSinkWriter*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_input_media_type : Proc(IMFSinkWriter*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    begin_writing : Proc(IMFSinkWriter*, Win32cr::Foundation::HRESULT),
    write_sample : Proc(IMFSinkWriter*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    send_stream_tick : Proc(IMFSinkWriter*, UInt32, Int64, Win32cr::Foundation::HRESULT),
    place_marker : Proc(IMFSinkWriter*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    notify_end_of_segment : Proc(IMFSinkWriter*, UInt32, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFSinkWriter*, UInt32, Win32cr::Foundation::HRESULT),
    finalize__ : Proc(IMFSinkWriter*, Win32cr::Foundation::HRESULT),
    get_service_for_stream : Proc(IMFSinkWriter*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_statistics : Proc(IMFSinkWriter*, UInt32, Win32cr::Media::MediaFoundation::MF_SINK_WRITER_STATISTICS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3137f1cd-fe5e-4805-a5d8-fb477448cb3d")]
  record IMFSinkWriter, lpVtbl : IMFSinkWriterVtbl* do
    GUID = LibC::GUID.new(0x3137f1cd_u32, 0xfe5e_u16, 0x4805_u16, StaticArray[0xa5_u8, 0xd8_u8, 0xfb_u8, 0x47_u8, 0x74_u8, 0x48_u8, 0xcb_u8, 0x3d_u8])
    def query_interface(this : IMFSinkWriter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSinkWriter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSinkWriter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_stream(this : IMFSinkWriter*, pTargetMediaType : Void*, pdwStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, pTargetMediaType, pdwStreamIndex)
    end
    def set_input_media_type(this : IMFSinkWriter*, dwStreamIndex : UInt32, pInputMediaType : Void*, pEncodingParameters : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_media_type.call(this, dwStreamIndex, pInputMediaType, pEncodingParameters)
    end
    def begin_writing(this : IMFSinkWriter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_writing.call(this)
    end
    def write_sample(this : IMFSinkWriter*, dwStreamIndex : UInt32, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_sample.call(this, dwStreamIndex, pSample)
    end
    def send_stream_tick(this : IMFSinkWriter*, dwStreamIndex : UInt32, llTimestamp : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_stream_tick.call(this, dwStreamIndex, llTimestamp)
    end
    def place_marker(this : IMFSinkWriter*, dwStreamIndex : UInt32, pvContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.place_marker.call(this, dwStreamIndex, pvContext)
    end
    def notify_end_of_segment(this : IMFSinkWriter*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_end_of_segment.call(this, dwStreamIndex)
    end
    def flush(this : IMFSinkWriter*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, dwStreamIndex)
    end
    def finalize__(this : IMFSinkWriter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finalize__.call(this)
    end
    def get_service_for_stream(this : IMFSinkWriter*, dwStreamIndex : UInt32, guidService : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_for_stream.call(this, dwStreamIndex, guidService, riid, ppvObject)
    end
    def get_statistics(this : IMFSinkWriter*, dwStreamIndex : UInt32, pStats : Win32cr::Media::MediaFoundation::MF_SINK_WRITER_STATISTICS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statistics.call(this, dwStreamIndex, pStats)
    end

  end

  @[Extern]
  record IMFSinkWriterExVtbl,
    query_interface : Proc(IMFSinkWriterEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSinkWriterEx*, UInt32),
    release : Proc(IMFSinkWriterEx*, UInt32),
    add_stream : Proc(IMFSinkWriterEx*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_input_media_type : Proc(IMFSinkWriterEx*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    begin_writing : Proc(IMFSinkWriterEx*, Win32cr::Foundation::HRESULT),
    write_sample : Proc(IMFSinkWriterEx*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    send_stream_tick : Proc(IMFSinkWriterEx*, UInt32, Int64, Win32cr::Foundation::HRESULT),
    place_marker : Proc(IMFSinkWriterEx*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    notify_end_of_segment : Proc(IMFSinkWriterEx*, UInt32, Win32cr::Foundation::HRESULT),
    flush : Proc(IMFSinkWriterEx*, UInt32, Win32cr::Foundation::HRESULT),
    finalize__ : Proc(IMFSinkWriterEx*, Win32cr::Foundation::HRESULT),
    get_service_for_stream : Proc(IMFSinkWriterEx*, UInt32, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_statistics : Proc(IMFSinkWriterEx*, UInt32, Win32cr::Media::MediaFoundation::MF_SINK_WRITER_STATISTICS*, Win32cr::Foundation::HRESULT),
    get_transform_for_stream : Proc(IMFSinkWriterEx*, UInt32, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("588d72ab-5bc1-496a-8714-b70617141b25")]
  record IMFSinkWriterEx, lpVtbl : IMFSinkWriterExVtbl* do
    GUID = LibC::GUID.new(0x588d72ab_u32, 0x5bc1_u16, 0x496a_u16, StaticArray[0x87_u8, 0x14_u8, 0xb7_u8, 0x6_u8, 0x17_u8, 0x14_u8, 0x1b_u8, 0x25_u8])
    def query_interface(this : IMFSinkWriterEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSinkWriterEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSinkWriterEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def add_stream(this : IMFSinkWriterEx*, pTargetMediaType : Void*, pdwStreamIndex : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, pTargetMediaType, pdwStreamIndex)
    end
    def set_input_media_type(this : IMFSinkWriterEx*, dwStreamIndex : UInt32, pInputMediaType : Void*, pEncodingParameters : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_input_media_type.call(this, dwStreamIndex, pInputMediaType, pEncodingParameters)
    end
    def begin_writing(this : IMFSinkWriterEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_writing.call(this)
    end
    def write_sample(this : IMFSinkWriterEx*, dwStreamIndex : UInt32, pSample : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_sample.call(this, dwStreamIndex, pSample)
    end
    def send_stream_tick(this : IMFSinkWriterEx*, dwStreamIndex : UInt32, llTimestamp : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_stream_tick.call(this, dwStreamIndex, llTimestamp)
    end
    def place_marker(this : IMFSinkWriterEx*, dwStreamIndex : UInt32, pvContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.place_marker.call(this, dwStreamIndex, pvContext)
    end
    def notify_end_of_segment(this : IMFSinkWriterEx*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_end_of_segment.call(this, dwStreamIndex)
    end
    def flush(this : IMFSinkWriterEx*, dwStreamIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush.call(this, dwStreamIndex)
    end
    def finalize__(this : IMFSinkWriterEx*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.finalize__.call(this)
    end
    def get_service_for_stream(this : IMFSinkWriterEx*, dwStreamIndex : UInt32, guidService : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service_for_stream.call(this, dwStreamIndex, guidService, riid, ppvObject)
    end
    def get_statistics(this : IMFSinkWriterEx*, dwStreamIndex : UInt32, pStats : Win32cr::Media::MediaFoundation::MF_SINK_WRITER_STATISTICS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_statistics.call(this, dwStreamIndex, pStats)
    end
    def get_transform_for_stream(this : IMFSinkWriterEx*, dwStreamIndex : UInt32, dwTransformIndex : UInt32, pGuidCategory : LibC::GUID*, ppTransform : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_transform_for_stream.call(this, dwStreamIndex, dwTransformIndex, pGuidCategory, ppTransform)
    end

  end

  @[Extern]
  record IMFSinkWriterEncoderConfigVtbl,
    query_interface : Proc(IMFSinkWriterEncoderConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSinkWriterEncoderConfig*, UInt32),
    release : Proc(IMFSinkWriterEncoderConfig*, UInt32),
    set_target_media_type : Proc(IMFSinkWriterEncoderConfig*, UInt32, Void*, Void*, Win32cr::Foundation::HRESULT),
    place_encoding_parameters : Proc(IMFSinkWriterEncoderConfig*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("17c3779e-3cde-4ede-8c60-3899f5f53ad6")]
  record IMFSinkWriterEncoderConfig, lpVtbl : IMFSinkWriterEncoderConfigVtbl* do
    GUID = LibC::GUID.new(0x17c3779e_u32, 0x3cde_u16, 0x4ede_u16, StaticArray[0x8c_u8, 0x60_u8, 0x38_u8, 0x99_u8, 0xf5_u8, 0xf5_u8, 0x3a_u8, 0xd6_u8])
    def query_interface(this : IMFSinkWriterEncoderConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSinkWriterEncoderConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSinkWriterEncoderConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_target_media_type(this : IMFSinkWriterEncoderConfig*, dwStreamIndex : UInt32, pTargetMediaType : Void*, pEncodingParameters : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_target_media_type.call(this, dwStreamIndex, pTargetMediaType, pEncodingParameters)
    end
    def place_encoding_parameters(this : IMFSinkWriterEncoderConfig*, dwStreamIndex : UInt32, pEncodingParameters : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.place_encoding_parameters.call(this, dwStreamIndex, pEncodingParameters)
    end

  end

  @[Extern]
  record IMFSinkWriterCallbackVtbl,
    query_interface : Proc(IMFSinkWriterCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSinkWriterCallback*, UInt32),
    release : Proc(IMFSinkWriterCallback*, UInt32),
    on_finalize : Proc(IMFSinkWriterCallback*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    on_marker : Proc(IMFSinkWriterCallback*, UInt32, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("666f76de-33d2-41b9-a458-29ed0a972c58")]
  record IMFSinkWriterCallback, lpVtbl : IMFSinkWriterCallbackVtbl* do
    GUID = LibC::GUID.new(0x666f76de_u32, 0x33d2_u16, 0x41b9_u16, StaticArray[0xa4_u8, 0x58_u8, 0x29_u8, 0xed_u8, 0xa_u8, 0x97_u8, 0x2c_u8, 0x58_u8])
    def query_interface(this : IMFSinkWriterCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSinkWriterCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSinkWriterCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_finalize(this : IMFSinkWriterCallback*, hrStatus : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_finalize.call(this, hrStatus)
    end
    def on_marker(this : IMFSinkWriterCallback*, dwStreamIndex : UInt32, pvContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_marker.call(this, dwStreamIndex, pvContext)
    end

  end

  @[Extern]
  record IMFSinkWriterCallback2Vtbl,
    query_interface : Proc(IMFSinkWriterCallback2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSinkWriterCallback2*, UInt32),
    release : Proc(IMFSinkWriterCallback2*, UInt32),
    on_finalize : Proc(IMFSinkWriterCallback2*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    on_marker : Proc(IMFSinkWriterCallback2*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    on_transform_change : Proc(IMFSinkWriterCallback2*, Win32cr::Foundation::HRESULT),
    on_stream_error : Proc(IMFSinkWriterCallback2*, UInt32, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2456bd58-c067-4513-84fe-8d0c88ffdc61")]
  record IMFSinkWriterCallback2, lpVtbl : IMFSinkWriterCallback2Vtbl* do
    GUID = LibC::GUID.new(0x2456bd58_u32, 0xc067_u16, 0x4513_u16, StaticArray[0x84_u8, 0xfe_u8, 0x8d_u8, 0xc_u8, 0x88_u8, 0xff_u8, 0xdc_u8, 0x61_u8])
    def query_interface(this : IMFSinkWriterCallback2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSinkWriterCallback2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSinkWriterCallback2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_finalize(this : IMFSinkWriterCallback2*, hrStatus : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_finalize.call(this, hrStatus)
    end
    def on_marker(this : IMFSinkWriterCallback2*, dwStreamIndex : UInt32, pvContext : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_marker.call(this, dwStreamIndex, pvContext)
    end
    def on_transform_change(this : IMFSinkWriterCallback2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_transform_change.call(this)
    end
    def on_stream_error(this : IMFSinkWriterCallback2*, dwStreamIndex : UInt32, hrStatus : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_stream_error.call(this, dwStreamIndex, hrStatus)
    end

  end

  @[Extern]
  record IMFVideoPositionMapperVtbl,
    query_interface : Proc(IMFVideoPositionMapper*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoPositionMapper*, UInt32),
    release : Proc(IMFVideoPositionMapper*, UInt32),
    map_output_coordinate_to_input_stream : Proc(IMFVideoPositionMapper*, Float32, Float32, UInt32, UInt32, Float32*, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1f6a9f17-e70b-4e24-8ae4-0b2c3ba7a4ae")]
  record IMFVideoPositionMapper, lpVtbl : IMFVideoPositionMapperVtbl* do
    GUID = LibC::GUID.new(0x1f6a9f17_u32, 0xe70b_u16, 0x4e24_u16, StaticArray[0x8a_u8, 0xe4_u8, 0xb_u8, 0x2c_u8, 0x3b_u8, 0xa7_u8, 0xa4_u8, 0xae_u8])
    def query_interface(this : IMFVideoPositionMapper*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoPositionMapper*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoPositionMapper*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def map_output_coordinate_to_input_stream(this : IMFVideoPositionMapper*, xOut : Float32, yOut : Float32, dwOutputStreamIndex : UInt32, dwInputStreamIndex : UInt32, pxIn : Float32*, pyIn : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map_output_coordinate_to_input_stream.call(this, xOut, yOut, dwOutputStreamIndex, dwInputStreamIndex, pxIn, pyIn)
    end

  end

  @[Extern]
  record IMFVideoDeviceIDVtbl,
    query_interface : Proc(IMFVideoDeviceID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoDeviceID*, UInt32),
    release : Proc(IMFVideoDeviceID*, UInt32),
    get_device_id : Proc(IMFVideoDeviceID*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a38d9567-5a9c-4f3c-b293-8eb415b279ba")]
  record IMFVideoDeviceID, lpVtbl : IMFVideoDeviceIDVtbl* do
    GUID = LibC::GUID.new(0xa38d9567_u32, 0x5a9c_u16, 0x4f3c_u16, StaticArray[0xb2_u8, 0x93_u8, 0x8e_u8, 0xb4_u8, 0x15_u8, 0xb2_u8, 0x79_u8, 0xba_u8])
    def query_interface(this : IMFVideoDeviceID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoDeviceID*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoDeviceID*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device_id(this : IMFVideoDeviceID*, pDeviceID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_id.call(this, pDeviceID)
    end

  end

  @[Extern]
  record IMFVideoDisplayControlVtbl,
    query_interface : Proc(IMFVideoDisplayControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoDisplayControl*, UInt32),
    release : Proc(IMFVideoDisplayControl*, UInt32),
    get_native_video_size : Proc(IMFVideoDisplayControl*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    get_ideal_video_size : Proc(IMFVideoDisplayControl*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    set_video_position : Proc(IMFVideoDisplayControl*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    get_video_position : Proc(IMFVideoDisplayControl*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IMFVideoDisplayControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_aspect_ratio_mode : Proc(IMFVideoDisplayControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_video_window : Proc(IMFVideoDisplayControl*, Win32cr::Foundation::HWND, Win32cr::Foundation::HRESULT),
    get_video_window : Proc(IMFVideoDisplayControl*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    repaint_video : Proc(IMFVideoDisplayControl*, Win32cr::Foundation::HRESULT),
    get_current_image : Proc(IMFVideoDisplayControl*, Win32cr::Graphics::Gdi::BITMAPINFOHEADER*, UInt8**, UInt32*, Int64*, Win32cr::Foundation::HRESULT),
    set_border_color : Proc(IMFVideoDisplayControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_border_color : Proc(IMFVideoDisplayControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_rendering_prefs : Proc(IMFVideoDisplayControl*, UInt32, Win32cr::Foundation::HRESULT),
    get_rendering_prefs : Proc(IMFVideoDisplayControl*, UInt32*, Win32cr::Foundation::HRESULT),
    set_fullscreen : Proc(IMFVideoDisplayControl*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_fullscreen : Proc(IMFVideoDisplayControl*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a490b1e4-ab84-4d31-a1b2-181e03b1077a")]
  record IMFVideoDisplayControl, lpVtbl : IMFVideoDisplayControlVtbl* do
    GUID = LibC::GUID.new(0xa490b1e4_u32, 0xab84_u16, 0x4d31_u16, StaticArray[0xa1_u8, 0xb2_u8, 0x18_u8, 0x1e_u8, 0x3_u8, 0xb1_u8, 0x7_u8, 0x7a_u8])
    def query_interface(this : IMFVideoDisplayControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoDisplayControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoDisplayControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_native_video_size(this : IMFVideoDisplayControl*, pszVideo : Win32cr::Foundation::SIZE*, pszARVideo : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_size.call(this, pszVideo, pszARVideo)
    end
    def get_ideal_video_size(this : IMFVideoDisplayControl*, pszMin : Win32cr::Foundation::SIZE*, pszMax : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ideal_video_size.call(this, pszMin, pszMax)
    end
    def set_video_position(this : IMFVideoDisplayControl*, pnrcSource : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, prcDest : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_position.call(this, pnrcSource, prcDest)
    end
    def get_video_position(this : IMFVideoDisplayControl*, pnrcSource : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, prcDest : Win32cr::Foundation::RECT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_position.call(this, pnrcSource, prcDest)
    end
    def set_aspect_ratio_mode(this : IMFVideoDisplayControl*, dwAspectRatioMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, dwAspectRatioMode)
    end
    def get_aspect_ratio_mode(this : IMFVideoDisplayControl*, pdwAspectRatioMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, pdwAspectRatioMode)
    end
    def set_video_window(this : IMFVideoDisplayControl*, hwndVideo : Win32cr::Foundation::HWND) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_window.call(this, hwndVideo)
    end
    def get_video_window(this : IMFVideoDisplayControl*, phwndVideo : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_window.call(this, phwndVideo)
    end
    def repaint_video(this : IMFVideoDisplayControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.repaint_video.call(this)
    end
    def get_current_image(this : IMFVideoDisplayControl*, pBih : Win32cr::Graphics::Gdi::BITMAPINFOHEADER*, pDib : UInt8**, pcbDib : UInt32*, pTimeStamp : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_image.call(this, pBih, pDib, pcbDib, pTimeStamp)
    end
    def set_border_color(this : IMFVideoDisplayControl*, clr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, clr)
    end
    def get_border_color(this : IMFVideoDisplayControl*, pClr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_border_color.call(this, pClr)
    end
    def set_rendering_prefs(this : IMFVideoDisplayControl*, dwRenderFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rendering_prefs.call(this, dwRenderFlags)
    end
    def get_rendering_prefs(this : IMFVideoDisplayControl*, pdwRenderFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rendering_prefs.call(this, pdwRenderFlags)
    end
    def set_fullscreen(this : IMFVideoDisplayControl*, fFullscreen : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_fullscreen.call(this, fFullscreen)
    end
    def get_fullscreen(this : IMFVideoDisplayControl*, pfFullscreen : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_fullscreen.call(this, pfFullscreen)
    end

  end

  @[Extern]
  record IMFVideoPresenterVtbl,
    query_interface : Proc(IMFVideoPresenter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoPresenter*, UInt32),
    release : Proc(IMFVideoPresenter*, UInt32),
    on_clock_start : Proc(IMFVideoPresenter*, Int64, Int64, Win32cr::Foundation::HRESULT),
    on_clock_stop : Proc(IMFVideoPresenter*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_pause : Proc(IMFVideoPresenter*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_restart : Proc(IMFVideoPresenter*, Int64, Win32cr::Foundation::HRESULT),
    on_clock_set_rate : Proc(IMFVideoPresenter*, Int64, Float32, Win32cr::Foundation::HRESULT),
    process_message : Proc(IMFVideoPresenter*, Win32cr::Media::MediaFoundation::MFVP_MESSAGE_TYPE, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_current_media_type : Proc(IMFVideoPresenter*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("29aff080-182a-4a5d-af3b-448f3a6346cb")]
  record IMFVideoPresenter, lpVtbl : IMFVideoPresenterVtbl* do
    GUID = LibC::GUID.new(0x29aff080_u32, 0x182a_u16, 0x4a5d_u16, StaticArray[0xaf_u8, 0x3b_u8, 0x44_u8, 0x8f_u8, 0x3a_u8, 0x63_u8, 0x46_u8, 0xcb_u8])
    def query_interface(this : IMFVideoPresenter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoPresenter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoPresenter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_clock_start(this : IMFVideoPresenter*, hnsSystemTime : Int64, llClockStartOffset : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_start.call(this, hnsSystemTime, llClockStartOffset)
    end
    def on_clock_stop(this : IMFVideoPresenter*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_stop.call(this, hnsSystemTime)
    end
    def on_clock_pause(this : IMFVideoPresenter*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_pause.call(this, hnsSystemTime)
    end
    def on_clock_restart(this : IMFVideoPresenter*, hnsSystemTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_restart.call(this, hnsSystemTime)
    end
    def on_clock_set_rate(this : IMFVideoPresenter*, hnsSystemTime : Int64, flRate : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_clock_set_rate.call(this, hnsSystemTime, flRate)
    end
    def process_message(this : IMFVideoPresenter*, eMessage : Win32cr::Media::MediaFoundation::MFVP_MESSAGE_TYPE, ulParam : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.process_message.call(this, eMessage, ulParam)
    end
    def get_current_media_type(this : IMFVideoPresenter*, ppMediaType : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_media_type.call(this, ppMediaType)
    end

  end

  @[Extern]
  record IMFDesiredSampleVtbl,
    query_interface : Proc(IMFDesiredSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFDesiredSample*, UInt32),
    release : Proc(IMFDesiredSample*, UInt32),
    get_desired_sample_time_and_duration : Proc(IMFDesiredSample*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    set_desired_sample_time_and_duration : Proc(IMFDesiredSample*, Int64, Int64, Void),
    clear : Proc(IMFDesiredSample*, Void)


  @[Extern]
  #@[Com("56c294d0-753e-4260-8d61-a3d8820b1d54")]
  record IMFDesiredSample, lpVtbl : IMFDesiredSampleVtbl* do
    GUID = LibC::GUID.new(0x56c294d0_u32, 0x753e_u16, 0x4260_u16, StaticArray[0x8d_u8, 0x61_u8, 0xa3_u8, 0xd8_u8, 0x82_u8, 0xb_u8, 0x1d_u8, 0x54_u8])
    def query_interface(this : IMFDesiredSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFDesiredSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFDesiredSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_desired_sample_time_and_duration(this : IMFDesiredSample*, phnsSampleTime : Int64*, phnsSampleDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desired_sample_time_and_duration.call(this, phnsSampleTime, phnsSampleDuration)
    end
    def set_desired_sample_time_and_duration(this : IMFDesiredSample*, hnsSampleTime : Int64, hnsSampleDuration : Int64) : Void
      @lpVtbl.try &.value.set_desired_sample_time_and_duration.call(this, hnsSampleTime, hnsSampleDuration)
    end
    def clear(this : IMFDesiredSample*) : Void
      @lpVtbl.try &.value.clear.call(this)
    end

  end

  @[Extern]
  record IMFVideoMixerControlVtbl,
    query_interface : Proc(IMFVideoMixerControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoMixerControl*, UInt32),
    release : Proc(IMFVideoMixerControl*, UInt32),
    set_stream_z_order : Proc(IMFVideoMixerControl*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_z_order : Proc(IMFVideoMixerControl*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_stream_output_rect : Proc(IMFVideoMixerControl*, UInt32, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::HRESULT),
    get_stream_output_rect : Proc(IMFVideoMixerControl*, UInt32, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a5c6c53f-c202-4aa5-9695-175ba8c508a5")]
  record IMFVideoMixerControl, lpVtbl : IMFVideoMixerControlVtbl* do
    GUID = LibC::GUID.new(0xa5c6c53f_u32, 0xc202_u16, 0x4aa5_u16, StaticArray[0x96_u8, 0x95_u8, 0x17_u8, 0x5b_u8, 0xa8_u8, 0xc5_u8, 0x8_u8, 0xa5_u8])
    def query_interface(this : IMFVideoMixerControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoMixerControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoMixerControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_stream_z_order(this : IMFVideoMixerControl*, dwStreamID : UInt32, dwZ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_z_order.call(this, dwStreamID, dwZ)
    end
    def get_stream_z_order(this : IMFVideoMixerControl*, dwStreamID : UInt32, pdwZ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_z_order.call(this, dwStreamID, pdwZ)
    end
    def set_stream_output_rect(this : IMFVideoMixerControl*, dwStreamID : UInt32, pnrcOutput : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_output_rect.call(this, dwStreamID, pnrcOutput)
    end
    def get_stream_output_rect(this : IMFVideoMixerControl*, dwStreamID : UInt32, pnrcOutput : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_output_rect.call(this, dwStreamID, pnrcOutput)
    end

  end

  @[Extern]
  record IMFVideoMixerControl2Vtbl,
    query_interface : Proc(IMFVideoMixerControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoMixerControl2*, UInt32),
    release : Proc(IMFVideoMixerControl2*, UInt32),
    set_stream_z_order : Proc(IMFVideoMixerControl2*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_stream_z_order : Proc(IMFVideoMixerControl2*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    set_stream_output_rect : Proc(IMFVideoMixerControl2*, UInt32, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::HRESULT),
    get_stream_output_rect : Proc(IMFVideoMixerControl2*, UInt32, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::HRESULT),
    set_mixing_prefs : Proc(IMFVideoMixerControl2*, UInt32, Win32cr::Foundation::HRESULT),
    get_mixing_prefs : Proc(IMFVideoMixerControl2*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8459616d-966e-4930-b658-54fa7e5a16d3")]
  record IMFVideoMixerControl2, lpVtbl : IMFVideoMixerControl2Vtbl* do
    GUID = LibC::GUID.new(0x8459616d_u32, 0x966e_u16, 0x4930_u16, StaticArray[0xb6_u8, 0x58_u8, 0x54_u8, 0xfa_u8, 0x7e_u8, 0x5a_u8, 0x16_u8, 0xd3_u8])
    def query_interface(this : IMFVideoMixerControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoMixerControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoMixerControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_stream_z_order(this : IMFVideoMixerControl2*, dwStreamID : UInt32, dwZ : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_z_order.call(this, dwStreamID, dwZ)
    end
    def get_stream_z_order(this : IMFVideoMixerControl2*, dwStreamID : UInt32, pdwZ : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_z_order.call(this, dwStreamID, pdwZ)
    end
    def set_stream_output_rect(this : IMFVideoMixerControl2*, dwStreamID : UInt32, pnrcOutput : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_output_rect.call(this, dwStreamID, pnrcOutput)
    end
    def get_stream_output_rect(this : IMFVideoMixerControl2*, dwStreamID : UInt32, pnrcOutput : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_output_rect.call(this, dwStreamID, pnrcOutput)
    end
    def set_mixing_prefs(this : IMFVideoMixerControl2*, dwMixFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mixing_prefs.call(this, dwMixFlags)
    end
    def get_mixing_prefs(this : IMFVideoMixerControl2*, pdwMixFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mixing_prefs.call(this, pdwMixFlags)
    end

  end

  @[Extern]
  record IMFVideoRendererVtbl,
    query_interface : Proc(IMFVideoRenderer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoRenderer*, UInt32),
    release : Proc(IMFVideoRenderer*, UInt32),
    initialize_renderer : Proc(IMFVideoRenderer*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dfdfd197-a9ca-43d8-b341-6af3503792cd")]
  record IMFVideoRenderer, lpVtbl : IMFVideoRendererVtbl* do
    GUID = LibC::GUID.new(0xdfdfd197_u32, 0xa9ca_u16, 0x43d8_u16, StaticArray[0xb3_u8, 0x41_u8, 0x6a_u8, 0xf3_u8, 0x50_u8, 0x37_u8, 0x92_u8, 0xcd_u8])
    def query_interface(this : IMFVideoRenderer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoRenderer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoRenderer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize_renderer(this : IMFVideoRenderer*, pVideoMixer : Void*, pVideoPresenter : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_renderer.call(this, pVideoMixer, pVideoPresenter)
    end

  end

  @[Extern]
  record IEVRFilterConfigVtbl,
    query_interface : Proc(IEVRFilterConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEVRFilterConfig*, UInt32),
    release : Proc(IEVRFilterConfig*, UInt32),
    set_number_of_streams : Proc(IEVRFilterConfig*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_of_streams : Proc(IEVRFilterConfig*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83e91e85-82c1-4ea7-801d-85dc50b75086")]
  record IEVRFilterConfig, lpVtbl : IEVRFilterConfigVtbl* do
    GUID = LibC::GUID.new(0x83e91e85_u32, 0x82c1_u16, 0x4ea7_u16, StaticArray[0x80_u8, 0x1d_u8, 0x85_u8, 0xdc_u8, 0x50_u8, 0xb7_u8, 0x50_u8, 0x86_u8])
    def query_interface(this : IEVRFilterConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEVRFilterConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEVRFilterConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_number_of_streams(this : IEVRFilterConfig*, dwMaxStreams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_number_of_streams.call(this, dwMaxStreams)
    end
    def get_number_of_streams(this : IEVRFilterConfig*, pdwMaxStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_streams.call(this, pdwMaxStreams)
    end

  end

  @[Extern]
  record IEVRFilterConfigExVtbl,
    query_interface : Proc(IEVRFilterConfigEx*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEVRFilterConfigEx*, UInt32),
    release : Proc(IEVRFilterConfigEx*, UInt32),
    set_number_of_streams : Proc(IEVRFilterConfigEx*, UInt32, Win32cr::Foundation::HRESULT),
    get_number_of_streams : Proc(IEVRFilterConfigEx*, UInt32*, Win32cr::Foundation::HRESULT),
    set_config_prefs : Proc(IEVRFilterConfigEx*, UInt32, Win32cr::Foundation::HRESULT),
    get_config_prefs : Proc(IEVRFilterConfigEx*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aea36028-796d-454f-beee-b48071e24304")]
  record IEVRFilterConfigEx, lpVtbl : IEVRFilterConfigExVtbl* do
    GUID = LibC::GUID.new(0xaea36028_u32, 0x796d_u16, 0x454f_u16, StaticArray[0xbe_u8, 0xee_u8, 0xb4_u8, 0x80_u8, 0x71_u8, 0xe2_u8, 0x43_u8, 0x4_u8])
    def query_interface(this : IEVRFilterConfigEx*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEVRFilterConfigEx*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEVRFilterConfigEx*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_number_of_streams(this : IEVRFilterConfigEx*, dwMaxStreams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_number_of_streams.call(this, dwMaxStreams)
    end
    def get_number_of_streams(this : IEVRFilterConfigEx*, pdwMaxStreams : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_streams.call(this, pdwMaxStreams)
    end
    def set_config_prefs(this : IEVRFilterConfigEx*, dwConfigFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_config_prefs.call(this, dwConfigFlags)
    end
    def get_config_prefs(this : IEVRFilterConfigEx*, pdwConfigFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_config_prefs.call(this, pdwConfigFlags)
    end

  end

  @[Extern]
  record IMFTopologyServiceLookupVtbl,
    query_interface : Proc(IMFTopologyServiceLookup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTopologyServiceLookup*, UInt32),
    release : Proc(IMFTopologyServiceLookup*, UInt32),
    lookup_service : Proc(IMFTopologyServiceLookup*, Win32cr::Media::MediaFoundation::MF_SERVICE_LOOKUP_TYPE, UInt32, LibC::GUID*, LibC::GUID*, Void**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa993889-4383-415a-a930-dd472a8cf6f7")]
  record IMFTopologyServiceLookup, lpVtbl : IMFTopologyServiceLookupVtbl* do
    GUID = LibC::GUID.new(0xfa993889_u32, 0x4383_u16, 0x415a_u16, StaticArray[0xa9_u8, 0x30_u8, 0xdd_u8, 0x47_u8, 0x2a_u8, 0x8c_u8, 0xf6_u8, 0xf7_u8])
    def query_interface(this : IMFTopologyServiceLookup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTopologyServiceLookup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTopologyServiceLookup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lookup_service(this : IMFTopologyServiceLookup*, type__ : Win32cr::Media::MediaFoundation::MF_SERVICE_LOOKUP_TYPE, dwIndex : UInt32, guidService : LibC::GUID*, riid : LibC::GUID*, ppvObjects : Void**, pnObjects : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lookup_service.call(this, type__, dwIndex, guidService, riid, ppvObjects, pnObjects)
    end

  end

  @[Extern]
  record IMFTopologyServiceLookupClientVtbl,
    query_interface : Proc(IMFTopologyServiceLookupClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFTopologyServiceLookupClient*, UInt32),
    release : Proc(IMFTopologyServiceLookupClient*, UInt32),
    init_service_pointers : Proc(IMFTopologyServiceLookupClient*, Void*, Win32cr::Foundation::HRESULT),
    release_service_pointers : Proc(IMFTopologyServiceLookupClient*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("fa99388a-4383-415a-a930-dd472a8cf6f7")]
  record IMFTopologyServiceLookupClient, lpVtbl : IMFTopologyServiceLookupClientVtbl* do
    GUID = LibC::GUID.new(0xfa99388a_u32, 0x4383_u16, 0x415a_u16, StaticArray[0xa9_u8, 0x30_u8, 0xdd_u8, 0x47_u8, 0x2a_u8, 0x8c_u8, 0xf6_u8, 0xf7_u8])
    def query_interface(this : IMFTopologyServiceLookupClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFTopologyServiceLookupClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFTopologyServiceLookupClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init_service_pointers(this : IMFTopologyServiceLookupClient*, pLookup : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init_service_pointers.call(this, pLookup)
    end
    def release_service_pointers(this : IMFTopologyServiceLookupClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_service_pointers.call(this)
    end

  end

  @[Extern]
  record IEVRTrustedVideoPluginVtbl,
    query_interface : Proc(IEVRTrustedVideoPlugin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEVRTrustedVideoPlugin*, UInt32),
    release : Proc(IEVRTrustedVideoPlugin*, UInt32),
    is_in_trusted_video_mode : Proc(IEVRTrustedVideoPlugin*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    can_constrict : Proc(IEVRTrustedVideoPlugin*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_constriction : Proc(IEVRTrustedVideoPlugin*, UInt32, Win32cr::Foundation::HRESULT),
    disable_image_export : Proc(IEVRTrustedVideoPlugin*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("83a4ce40-7710-494b-a893-a472049af630")]
  record IEVRTrustedVideoPlugin, lpVtbl : IEVRTrustedVideoPluginVtbl* do
    GUID = LibC::GUID.new(0x83a4ce40_u32, 0x7710_u16, 0x494b_u16, StaticArray[0xa8_u8, 0x93_u8, 0xa4_u8, 0x72_u8, 0x4_u8, 0x9a_u8, 0xf6_u8, 0x30_u8])
    def query_interface(this : IEVRTrustedVideoPlugin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEVRTrustedVideoPlugin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEVRTrustedVideoPlugin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_in_trusted_video_mode(this : IEVRTrustedVideoPlugin*, pYes : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_in_trusted_video_mode.call(this, pYes)
    end
    def can_constrict(this : IEVRTrustedVideoPlugin*, pYes : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_constrict.call(this, pYes)
    end
    def set_constriction(this : IEVRTrustedVideoPlugin*, dwKPix : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_constriction.call(this, dwKPix)
    end
    def disable_image_export(this : IEVRTrustedVideoPlugin*, bDisable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disable_image_export.call(this, bDisable)
    end

  end

  @[Extern]
  record IMFPMediaPlayerVtbl,
    query_interface : Proc(IMFPMediaPlayer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMediaPlayer*, UInt32),
    release : Proc(IMFPMediaPlayer*, UInt32),
    play : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT),
    frame_step : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT),
    set_position : Proc(IMFPMediaPlayer*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_position : Proc(IMFPMediaPlayer*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IMFPMediaPlayer*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    set_rate : Proc(IMFPMediaPlayer*, Float32, Win32cr::Foundation::HRESULT),
    get_rate : Proc(IMFPMediaPlayer*, Float32*, Win32cr::Foundation::HRESULT),
    get_supported_rates : Proc(IMFPMediaPlayer*, Win32cr::Foundation::BOOL, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMFPMediaPlayer*, Win32cr::Media::MediaFoundation::MFP_MEDIAPLAYER_STATE*, Win32cr::Foundation::HRESULT),
    create_media_item_from_url : Proc(IMFPMediaPlayer*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_media_item_from_object : Proc(IMFPMediaPlayer*, Void*, Win32cr::Foundation::BOOL, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    set_media_item : Proc(IMFPMediaPlayer*, Void*, Win32cr::Foundation::HRESULT),
    clear_media_item : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT),
    get_media_item : Proc(IMFPMediaPlayer*, Void**, Win32cr::Foundation::HRESULT),
    get_volume : Proc(IMFPMediaPlayer*, Float32*, Win32cr::Foundation::HRESULT),
    set_volume : Proc(IMFPMediaPlayer*, Float32, Win32cr::Foundation::HRESULT),
    get_balance : Proc(IMFPMediaPlayer*, Float32*, Win32cr::Foundation::HRESULT),
    set_balance : Proc(IMFPMediaPlayer*, Float32, Win32cr::Foundation::HRESULT),
    get_mute : Proc(IMFPMediaPlayer*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_mute : Proc(IMFPMediaPlayer*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_native_video_size : Proc(IMFPMediaPlayer*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    get_ideal_video_size : Proc(IMFPMediaPlayer*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::SIZE*, Win32cr::Foundation::HRESULT),
    set_video_source_rect : Proc(IMFPMediaPlayer*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::HRESULT),
    get_video_source_rect : Proc(IMFPMediaPlayer*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::HRESULT),
    set_aspect_ratio_mode : Proc(IMFPMediaPlayer*, UInt32, Win32cr::Foundation::HRESULT),
    get_aspect_ratio_mode : Proc(IMFPMediaPlayer*, UInt32*, Win32cr::Foundation::HRESULT),
    get_video_window : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HWND*, Win32cr::Foundation::HRESULT),
    update_video : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT),
    set_border_color : Proc(IMFPMediaPlayer*, UInt32, Win32cr::Foundation::HRESULT),
    get_border_color : Proc(IMFPMediaPlayer*, UInt32*, Win32cr::Foundation::HRESULT),
    insert_effect : Proc(IMFPMediaPlayer*, Void*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    remove_effect : Proc(IMFPMediaPlayer*, Void*, Win32cr::Foundation::HRESULT),
    remove_all_effects : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFPMediaPlayer*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a714590a-58af-430a-85bf-44f5ec838d85")]
  record IMFPMediaPlayer, lpVtbl : IMFPMediaPlayerVtbl* do
    GUID = LibC::GUID.new(0xa714590a_u32, 0x58af_u16, 0x430a_u16, StaticArray[0x85_u8, 0xbf_u8, 0x44_u8, 0xf5_u8, 0xec_u8, 0x83_u8, 0x8d_u8, 0x85_u8])
    def query_interface(this : IMFPMediaPlayer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMediaPlayer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMediaPlayer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def play(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play.call(this)
    end
    def pause(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def stop(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def frame_step(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.frame_step.call(this)
    end
    def set_position(this : IMFPMediaPlayer*, guidPositionType : LibC::GUID*, pvPositionValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_position.call(this, guidPositionType, pvPositionValue)
    end
    def get_position(this : IMFPMediaPlayer*, guidPositionType : LibC::GUID*, pvPositionValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position.call(this, guidPositionType, pvPositionValue)
    end
    def get_duration(this : IMFPMediaPlayer*, guidPositionType : LibC::GUID*, pvDurationValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, guidPositionType, pvDurationValue)
    end
    def set_rate(this : IMFPMediaPlayer*, flRate : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rate.call(this, flRate)
    end
    def get_rate(this : IMFPMediaPlayer*, pflRate : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rate.call(this, pflRate)
    end
    def get_supported_rates(this : IMFPMediaPlayer*, fForwardDirection : Win32cr::Foundation::BOOL, pflSlowestRate : Float32*, pflFastestRate : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_rates.call(this, fForwardDirection, pflSlowestRate, pflFastestRate)
    end
    def get_state(this : IMFPMediaPlayer*, peState : Win32cr::Media::MediaFoundation::MFP_MEDIAPLAYER_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, peState)
    end
    def create_media_item_from_url(this : IMFPMediaPlayer*, pwszURL : Win32cr::Foundation::PWSTR, fSync : Win32cr::Foundation::BOOL, dwUserData : LibC::UIntPtrT, ppMediaItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_item_from_url.call(this, pwszURL, fSync, dwUserData, ppMediaItem)
    end
    def create_media_item_from_object(this : IMFPMediaPlayer*, pIUnknownObj : Void*, fSync : Win32cr::Foundation::BOOL, dwUserData : LibC::UIntPtrT, ppMediaItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_media_item_from_object.call(this, pIUnknownObj, fSync, dwUserData, ppMediaItem)
    end
    def set_media_item(this : IMFPMediaPlayer*, pIMFPMediaItem : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_media_item.call(this, pIMFPMediaItem)
    end
    def clear_media_item(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_media_item.call(this)
    end
    def get_media_item(this : IMFPMediaPlayer*, ppIMFPMediaItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_item.call(this, ppIMFPMediaItem)
    end
    def get_volume(this : IMFPMediaPlayer*, pflVolume : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_volume.call(this, pflVolume)
    end
    def set_volume(this : IMFPMediaPlayer*, flVolume : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_volume.call(this, flVolume)
    end
    def get_balance(this : IMFPMediaPlayer*, pflBalance : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_balance.call(this, pflBalance)
    end
    def set_balance(this : IMFPMediaPlayer*, flBalance : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_balance.call(this, flBalance)
    end
    def get_mute(this : IMFPMediaPlayer*, pfMute : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mute.call(this, pfMute)
    end
    def set_mute(this : IMFPMediaPlayer*, fMute : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mute.call(this, fMute)
    end
    def get_native_video_size(this : IMFPMediaPlayer*, pszVideo : Win32cr::Foundation::SIZE*, pszARVideo : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_size.call(this, pszVideo, pszARVideo)
    end
    def get_ideal_video_size(this : IMFPMediaPlayer*, pszMin : Win32cr::Foundation::SIZE*, pszMax : Win32cr::Foundation::SIZE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ideal_video_size.call(this, pszMin, pszMax)
    end
    def set_video_source_rect(this : IMFPMediaPlayer*, pnrcSource : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_source_rect.call(this, pnrcSource)
    end
    def get_video_source_rect(this : IMFPMediaPlayer*, pnrcSource : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_source_rect.call(this, pnrcSource)
    end
    def set_aspect_ratio_mode(this : IMFPMediaPlayer*, dwAspectRatioMode : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_aspect_ratio_mode.call(this, dwAspectRatioMode)
    end
    def get_aspect_ratio_mode(this : IMFPMediaPlayer*, pdwAspectRatioMode : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_aspect_ratio_mode.call(this, pdwAspectRatioMode)
    end
    def get_video_window(this : IMFPMediaPlayer*, phwndVideo : Win32cr::Foundation::HWND*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_window.call(this, phwndVideo)
    end
    def update_video(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_video.call(this)
    end
    def set_border_color(this : IMFPMediaPlayer*, clr : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_border_color.call(this, clr)
    end
    def get_border_color(this : IMFPMediaPlayer*, pClr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_border_color.call(this, pClr)
    end
    def insert_effect(this : IMFPMediaPlayer*, pEffect : Void*, fOptional : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_effect.call(this, pEffect, fOptional)
    end
    def remove_effect(this : IMFPMediaPlayer*, pEffect : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_effect.call(this, pEffect)
    end
    def remove_all_effects(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_effects.call(this)
    end
    def shutdown(this : IMFPMediaPlayer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFPMediaItemVtbl,
    query_interface : Proc(IMFPMediaItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMediaItem*, UInt32),
    release : Proc(IMFPMediaItem*, UInt32),
    get_media_player : Proc(IMFPMediaItem*, Void**, Win32cr::Foundation::HRESULT),
    get_url : Proc(IMFPMediaItem*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_object : Proc(IMFPMediaItem*, Void**, Win32cr::Foundation::HRESULT),
    get_user_data : Proc(IMFPMediaItem*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    set_user_data : Proc(IMFPMediaItem*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    get_start_stop_position : Proc(IMFPMediaItem*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    set_start_stop_position : Proc(IMFPMediaItem*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    has_video : Proc(IMFPMediaItem*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    has_audio : Proc(IMFPMediaItem*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_protected : Proc(IMFPMediaItem*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_duration : Proc(IMFPMediaItem*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_number_of_streams : Proc(IMFPMediaItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_selection : Proc(IMFPMediaItem*, UInt32, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_stream_selection : Proc(IMFPMediaItem*, UInt32, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_stream_attribute : Proc(IMFPMediaItem*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_presentation_attribute : Proc(IMFPMediaItem*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_characteristics : Proc(IMFPMediaItem*, UInt32*, Win32cr::Foundation::HRESULT),
    set_stream_sink : Proc(IMFPMediaItem*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    get_metadata : Proc(IMFPMediaItem*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("90eb3e6b-ecbf-45cc-b1da-c6fe3ea70d57")]
  record IMFPMediaItem, lpVtbl : IMFPMediaItemVtbl* do
    GUID = LibC::GUID.new(0x90eb3e6b_u32, 0xecbf_u16, 0x45cc_u16, StaticArray[0xb1_u8, 0xda_u8, 0xc6_u8, 0xfe_u8, 0x3e_u8, 0xa7_u8, 0xd_u8, 0x57_u8])
    def query_interface(this : IMFPMediaItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMediaItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMediaItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_media_player(this : IMFPMediaItem*, ppMediaPlayer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_player.call(this, ppMediaPlayer)
    end
    def get_url(this : IMFPMediaItem*, ppwszURL : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_url.call(this, ppwszURL)
    end
    def get_object(this : IMFPMediaItem*, ppIUnknown : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, ppIUnknown)
    end
    def get_user_data(this : IMFPMediaItem*, pdwUserData : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_user_data.call(this, pdwUserData)
    end
    def set_user_data(this : IMFPMediaItem*, dwUserData : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_user_data.call(this, dwUserData)
    end
    def get_start_stop_position(this : IMFPMediaItem*, pguidStartPositionType : LibC::GUID*, pvStartValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pguidStopPositionType : LibC::GUID*, pvStopValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_start_stop_position.call(this, pguidStartPositionType, pvStartValue, pguidStopPositionType, pvStopValue)
    end
    def set_start_stop_position(this : IMFPMediaItem*, pguidStartPositionType : LibC::GUID*, pvStartValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pguidStopPositionType : LibC::GUID*, pvStopValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_start_stop_position.call(this, pguidStartPositionType, pvStartValue, pguidStopPositionType, pvStopValue)
    end
    def has_video(this : IMFPMediaItem*, pfHasVideo : Win32cr::Foundation::BOOL*, pfSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_video.call(this, pfHasVideo, pfSelected)
    end
    def has_audio(this : IMFPMediaItem*, pfHasAudio : Win32cr::Foundation::BOOL*, pfSelected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.has_audio.call(this, pfHasAudio, pfSelected)
    end
    def is_protected(this : IMFPMediaItem*, pfProtected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_protected.call(this, pfProtected)
    end
    def get_duration(this : IMFPMediaItem*, guidPositionType : LibC::GUID*, pvDurationValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_duration.call(this, guidPositionType, pvDurationValue)
    end
    def get_number_of_streams(this : IMFPMediaItem*, pdwStreamCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_number_of_streams.call(this, pdwStreamCount)
    end
    def get_stream_selection(this : IMFPMediaItem*, dwStreamIndex : UInt32, pfEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_selection.call(this, dwStreamIndex, pfEnabled)
    end
    def set_stream_selection(this : IMFPMediaItem*, dwStreamIndex : UInt32, fEnabled : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_selection.call(this, dwStreamIndex, fEnabled)
    end
    def get_stream_attribute(this : IMFPMediaItem*, dwStreamIndex : UInt32, guidMFAttribute : LibC::GUID*, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_attribute.call(this, dwStreamIndex, guidMFAttribute, pvValue)
    end
    def get_presentation_attribute(this : IMFPMediaItem*, guidMFAttribute : LibC::GUID*, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_presentation_attribute.call(this, guidMFAttribute, pvValue)
    end
    def get_characteristics(this : IMFPMediaItem*, pCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_characteristics.call(this, pCharacteristics)
    end
    def set_stream_sink(this : IMFPMediaItem*, dwStreamIndex : UInt32, pMediaSink : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_sink.call(this, dwStreamIndex, pMediaSink)
    end
    def get_metadata(this : IMFPMediaItem*, ppMetadataStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_metadata.call(this, ppMetadataStore)
    end

  end

  @[Extern]
  record IMFPMediaPlayerCallbackVtbl,
    query_interface : Proc(IMFPMediaPlayerCallback*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFPMediaPlayerCallback*, UInt32),
    release : Proc(IMFPMediaPlayerCallback*, UInt32),
    on_media_player_event : Proc(IMFPMediaPlayerCallback*, Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER*, Void)


  @[Extern]
  #@[Com("766c8ffb-5fdb-4fea-a28d-b912996f51bd")]
  record IMFPMediaPlayerCallback, lpVtbl : IMFPMediaPlayerCallbackVtbl* do
    GUID = LibC::GUID.new(0x766c8ffb_u32, 0x5fdb_u16, 0x4fea_u16, StaticArray[0xa2_u8, 0x8d_u8, 0xb9_u8, 0x12_u8, 0x99_u8, 0x6f_u8, 0x51_u8, 0xbd_u8])
    def query_interface(this : IMFPMediaPlayerCallback*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFPMediaPlayerCallback*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFPMediaPlayerCallback*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_media_player_event(this : IMFPMediaPlayerCallback*, pEventHeader : Win32cr::Media::MediaFoundation::MFP_EVENT_HEADER*) : Void
      @lpVtbl.try &.value.on_media_player_event.call(this, pEventHeader)
    end

  end

  @[Extern]
  record IMFSharingEngineClassFactoryVtbl,
    query_interface : Proc(IMFSharingEngineClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSharingEngineClassFactory*, UInt32),
    release : Proc(IMFSharingEngineClassFactory*, UInt32),
    create_instance : Proc(IMFSharingEngineClassFactory*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2ba61f92-8305-413b-9733-faf15f259384")]
  record IMFSharingEngineClassFactory, lpVtbl : IMFSharingEngineClassFactoryVtbl* do
    GUID = LibC::GUID.new(0x2ba61f92_u32, 0x8305_u16, 0x413b_u16, StaticArray[0x97_u8, 0x33_u8, 0xfa_u8, 0xf1_u8, 0x5f_u8, 0x25_u8, 0x93_u8, 0x84_u8])
    def query_interface(this : IMFSharingEngineClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSharingEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSharingEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance(this : IMFSharingEngineClassFactory*, dwFlags : UInt32, pAttr : Void*, ppEngine : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance.call(this, dwFlags, pAttr, ppEngine)
    end

  end

  @[Extern]
  record IMFMediaSharingEngineVtbl,
    query_interface : Proc(IMFMediaSharingEngine*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSharingEngine*, UInt32),
    release : Proc(IMFMediaSharingEngine*, UInt32),
    get_error : Proc(IMFMediaSharingEngine*, Void**, Win32cr::Foundation::HRESULT),
    set_error_code : Proc(IMFMediaSharingEngine*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR, Win32cr::Foundation::HRESULT),
    set_source_elements : Proc(IMFMediaSharingEngine*, Void*, Win32cr::Foundation::HRESULT),
    set_source : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_current_source : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_network_state : Proc(IMFMediaSharingEngine*, UInt16),
    get_preload : Proc(IMFMediaSharingEngine*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD),
    set_preload : Proc(IMFMediaSharingEngine*, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD, Win32cr::Foundation::HRESULT),
    get_buffered : Proc(IMFMediaSharingEngine*, Void**, Win32cr::Foundation::HRESULT),
    load : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::HRESULT),
    can_play_type : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BSTR, Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*, Win32cr::Foundation::HRESULT),
    get_ready_state : Proc(IMFMediaSharingEngine*, UInt16),
    is_seeking : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    get_current_time : Proc(IMFMediaSharingEngine*, Float64),
    set_current_time : Proc(IMFMediaSharingEngine*, Float64, Win32cr::Foundation::HRESULT),
    get_start_time : Proc(IMFMediaSharingEngine*, Float64),
    get_duration : Proc(IMFMediaSharingEngine*, Float64),
    is_paused : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    get_default_playback_rate : Proc(IMFMediaSharingEngine*, Float64),
    set_default_playback_rate : Proc(IMFMediaSharingEngine*, Float64, Win32cr::Foundation::HRESULT),
    get_playback_rate : Proc(IMFMediaSharingEngine*, Float64),
    set_playback_rate : Proc(IMFMediaSharingEngine*, Float64, Win32cr::Foundation::HRESULT),
    get_played : Proc(IMFMediaSharingEngine*, Void**, Win32cr::Foundation::HRESULT),
    get_seekable : Proc(IMFMediaSharingEngine*, Void**, Win32cr::Foundation::HRESULT),
    is_ended : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    get_auto_play : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    set_auto_play : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_loop : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    set_loop : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    play : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::HRESULT),
    pause : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::HRESULT),
    get_muted : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    set_muted : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_volume : Proc(IMFMediaSharingEngine*, Float64),
    set_volume : Proc(IMFMediaSharingEngine*, Float64, Win32cr::Foundation::HRESULT),
    has_video : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    has_audio : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::BOOL),
    get_native_video_size : Proc(IMFMediaSharingEngine*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_video_aspect_ratio : Proc(IMFMediaSharingEngine*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFMediaSharingEngine*, Win32cr::Foundation::HRESULT),
    transfer_video_frame : Proc(IMFMediaSharingEngine*, Void*, Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, Win32cr::Foundation::RECT*, Win32cr::Media::MediaFoundation::MFARGB*, Win32cr::Foundation::HRESULT),
    on_video_stream_tick : Proc(IMFMediaSharingEngine*, Int64*, Win32cr::Foundation::HRESULT),
    get_device : Proc(IMFMediaSharingEngine*, Win32cr::Media::MediaFoundation::DEVICE_INFO*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("8d3ce1bf-2367-40e0-9eee-40d377cc1b46")]
  record IMFMediaSharingEngine, lpVtbl : IMFMediaSharingEngineVtbl* do
    GUID = LibC::GUID.new(0x8d3ce1bf_u32, 0x2367_u16, 0x40e0_u16, StaticArray[0x9e_u8, 0xee_u8, 0x40_u8, 0xd3_u8, 0x77_u8, 0xcc_u8, 0x1b_u8, 0x46_u8])
    def query_interface(this : IMFMediaSharingEngine*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSharingEngine*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSharingEngine*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_error(this : IMFMediaSharingEngine*, ppError : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_error.call(this, ppError)
    end
    def set_error_code(this : IMFMediaSharingEngine*, error : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_ERR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_error_code.call(this, error)
    end
    def set_source_elements(this : IMFMediaSharingEngine*, pSrcElements : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source_elements.call(this, pSrcElements)
    end
    def set_source(this : IMFMediaSharingEngine*, pUrl : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source.call(this, pUrl)
    end
    def get_current_source(this : IMFMediaSharingEngine*, ppUrl : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_source.call(this, ppUrl)
    end
    def get_network_state(this : IMFMediaSharingEngine*) : UInt16
      @lpVtbl.try &.value.get_network_state.call(this)
    end
    def get_preload(this : IMFMediaSharingEngine*) : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD
      @lpVtbl.try &.value.get_preload.call(this)
    end
    def set_preload(this : IMFMediaSharingEngine*, preload : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_PRELOAD) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_preload.call(this, preload)
    end
    def get_buffered(this : IMFMediaSharingEngine*, ppBuffered : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffered.call(this, ppBuffered)
    end
    def load(this : IMFMediaSharingEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this)
    end
    def can_play_type(this : IMFMediaSharingEngine*, type__ : Win32cr::Foundation::BSTR, pAnswer : Win32cr::Media::MediaFoundation::MF_MEDIA_ENGINE_CANPLAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.can_play_type.call(this, type__, pAnswer)
    end
    def get_ready_state(this : IMFMediaSharingEngine*) : UInt16
      @lpVtbl.try &.value.get_ready_state.call(this)
    end
    def is_seeking(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_seeking.call(this)
    end
    def get_current_time(this : IMFMediaSharingEngine*) : Float64
      @lpVtbl.try &.value.get_current_time.call(this)
    end
    def set_current_time(this : IMFMediaSharingEngine*, seekTime : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_time.call(this, seekTime)
    end
    def get_start_time(this : IMFMediaSharingEngine*) : Float64
      @lpVtbl.try &.value.get_start_time.call(this)
    end
    def get_duration(this : IMFMediaSharingEngine*) : Float64
      @lpVtbl.try &.value.get_duration.call(this)
    end
    def is_paused(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_paused.call(this)
    end
    def get_default_playback_rate(this : IMFMediaSharingEngine*) : Float64
      @lpVtbl.try &.value.get_default_playback_rate.call(this)
    end
    def set_default_playback_rate(this : IMFMediaSharingEngine*, rate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_default_playback_rate.call(this, rate)
    end
    def get_playback_rate(this : IMFMediaSharingEngine*) : Float64
      @lpVtbl.try &.value.get_playback_rate.call(this)
    end
    def set_playback_rate(this : IMFMediaSharingEngine*, rate : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_playback_rate.call(this, rate)
    end
    def get_played(this : IMFMediaSharingEngine*, ppPlayed : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_played.call(this, ppPlayed)
    end
    def get_seekable(this : IMFMediaSharingEngine*, ppSeekable : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_seekable.call(this, ppSeekable)
    end
    def is_ended(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_ended.call(this)
    end
    def get_auto_play(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_auto_play.call(this)
    end
    def set_auto_play(this : IMFMediaSharingEngine*, auto_play : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_auto_play.call(this, auto_play)
    end
    def get_loop(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_loop.call(this)
    end
    def set_loop(this : IMFMediaSharingEngine*, loop : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_loop.call(this, loop)
    end
    def play(this : IMFMediaSharingEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.play.call(this)
    end
    def pause(this : IMFMediaSharingEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pause.call(this)
    end
    def get_muted(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_muted.call(this)
    end
    def set_muted(this : IMFMediaSharingEngine*, muted : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_muted.call(this, muted)
    end
    def get_volume(this : IMFMediaSharingEngine*) : Float64
      @lpVtbl.try &.value.get_volume.call(this)
    end
    def set_volume(this : IMFMediaSharingEngine*, volume : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_volume.call(this, volume)
    end
    def has_video(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.has_video.call(this)
    end
    def has_audio(this : IMFMediaSharingEngine*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.has_audio.call(this)
    end
    def get_native_video_size(this : IMFMediaSharingEngine*, cx : UInt32*, cy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_video_size.call(this, cx, cy)
    end
    def get_video_aspect_ratio(this : IMFMediaSharingEngine*, cx : UInt32*, cy : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_aspect_ratio.call(this, cx, cy)
    end
    def shutdown(this : IMFMediaSharingEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end
    def transfer_video_frame(this : IMFMediaSharingEngine*, pDstSurf : Void*, pSrc : Win32cr::Media::MediaFoundation::MFVideoNormalizedRect*, pDst : Win32cr::Foundation::RECT*, pBorderClr : Win32cr::Media::MediaFoundation::MFARGB*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.transfer_video_frame.call(this, pDstSurf, pSrc, pDst, pBorderClr)
    end
    def on_video_stream_tick(this : IMFMediaSharingEngine*, pPts : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_video_stream_tick.call(this, pPts)
    end
    def get_device(this : IMFMediaSharingEngine*, pDevice : Win32cr::Media::MediaFoundation::DEVICE_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, pDevice)
    end

  end

  @[Extern]
  record IMFMediaSharingEngineClassFactoryVtbl,
    query_interface : Proc(IMFMediaSharingEngineClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFMediaSharingEngineClassFactory*, UInt32),
    release : Proc(IMFMediaSharingEngineClassFactory*, UInt32),
    create_instance : Proc(IMFMediaSharingEngineClassFactory*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("524d2bc4-b2b1-4fe5-8fac-fa4e4512b4e0")]
  record IMFMediaSharingEngineClassFactory, lpVtbl : IMFMediaSharingEngineClassFactoryVtbl* do
    GUID = LibC::GUID.new(0x524d2bc4_u32, 0xb2b1_u16, 0x4fe5_u16, StaticArray[0x8f_u8, 0xac_u8, 0xfa_u8, 0x4e_u8, 0x45_u8, 0x12_u8, 0xb4_u8, 0xe0_u8])
    def query_interface(this : IMFMediaSharingEngineClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFMediaSharingEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFMediaSharingEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance(this : IMFMediaSharingEngineClassFactory*, dwFlags : UInt32, pAttr : Void*, ppEngine : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance.call(this, dwFlags, pAttr, ppEngine)
    end

  end

  @[Extern]
  record IMFImageSharingEngineVtbl,
    query_interface : Proc(IMFImageSharingEngine*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFImageSharingEngine*, UInt32),
    release : Proc(IMFImageSharingEngine*, UInt32),
    set_source : Proc(IMFImageSharingEngine*, Void*, Win32cr::Foundation::HRESULT),
    get_device : Proc(IMFImageSharingEngine*, Win32cr::Media::MediaFoundation::DEVICE_INFO*, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFImageSharingEngine*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cfa0ae8e-7e1c-44d2-ae68-fc4c148a6354")]
  record IMFImageSharingEngine, lpVtbl : IMFImageSharingEngineVtbl* do
    GUID = LibC::GUID.new(0xcfa0ae8e_u32, 0x7e1c_u16, 0x44d2_u16, StaticArray[0xae_u8, 0x68_u8, 0xfc_u8, 0x4c_u8, 0x14_u8, 0x8a_u8, 0x63_u8, 0x54_u8])
    def query_interface(this : IMFImageSharingEngine*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFImageSharingEngine*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFImageSharingEngine*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_source(this : IMFImageSharingEngine*, pStream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_source.call(this, pStream)
    end
    def get_device(this : IMFImageSharingEngine*, pDevice : Win32cr::Media::MediaFoundation::DEVICE_INFO*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, pDevice)
    end
    def shutdown(this : IMFImageSharingEngine*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFImageSharingEngineClassFactoryVtbl,
    query_interface : Proc(IMFImageSharingEngineClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFImageSharingEngineClassFactory*, UInt32),
    release : Proc(IMFImageSharingEngineClassFactory*, UInt32),
    create_instance_from_udn : Proc(IMFImageSharingEngineClassFactory*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1fc55727-a7fb-4fc8-83ae-8af024990af1")]
  record IMFImageSharingEngineClassFactory, lpVtbl : IMFImageSharingEngineClassFactoryVtbl* do
    GUID = LibC::GUID.new(0x1fc55727_u32, 0xa7fb_u16, 0x4fc8_u16, StaticArray[0x83_u8, 0xae_u8, 0x8a_u8, 0xf0_u8, 0x24_u8, 0x99_u8, 0xa_u8, 0xf1_u8])
    def query_interface(this : IMFImageSharingEngineClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFImageSharingEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFImageSharingEngineClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance_from_udn(this : IMFImageSharingEngineClassFactory*, pUniqueDeviceName : Win32cr::Foundation::BSTR, ppEngine : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance_from_udn.call(this, pUniqueDeviceName, ppEngine)
    end

  end

  @[Extern]
  record IPlayToControlVtbl,
    query_interface : Proc(IPlayToControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPlayToControl*, UInt32),
    release : Proc(IPlayToControl*, UInt32),
    connect : Proc(IPlayToControl*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IPlayToControl*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("607574eb-f4b6-45c1-b08c-cb715122901d")]
  record IPlayToControl, lpVtbl : IPlayToControlVtbl* do
    GUID = LibC::GUID.new(0x607574eb_u32, 0xf4b6_u16, 0x45c1_u16, StaticArray[0xb0_u8, 0x8c_u8, 0xcb_u8, 0x71_u8, 0x51_u8, 0x22_u8, 0x90_u8, 0x1d_u8])
    def query_interface(this : IPlayToControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPlayToControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPlayToControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def connect(this : IPlayToControl*, pFactory : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, pFactory)
    end
    def disconnect(this : IPlayToControl*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this)
    end

  end

  @[Extern]
  record IPlayToControlWithCapabilitiesVtbl,
    query_interface : Proc(IPlayToControlWithCapabilities*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPlayToControlWithCapabilities*, UInt32),
    release : Proc(IPlayToControlWithCapabilities*, UInt32),
    connect : Proc(IPlayToControlWithCapabilities*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IPlayToControlWithCapabilities*, Win32cr::Foundation::HRESULT),
    get_capabilities : Proc(IPlayToControlWithCapabilities*, Win32cr::Media::MediaFoundation::PLAYTO_SOURCE_CREATEFLAGS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("aa9dd80f-c50a-4220-91c1-332287f82a34")]
  record IPlayToControlWithCapabilities, lpVtbl : IPlayToControlWithCapabilitiesVtbl* do
    GUID = LibC::GUID.new(0xaa9dd80f_u32, 0xc50a_u16, 0x4220_u16, StaticArray[0x91_u8, 0xc1_u8, 0x33_u8, 0x22_u8, 0x87_u8, 0xf8_u8, 0x2a_u8, 0x34_u8])
    def query_interface(this : IPlayToControlWithCapabilities*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPlayToControlWithCapabilities*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPlayToControlWithCapabilities*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def connect(this : IPlayToControlWithCapabilities*, pFactory : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect.call(this, pFactory)
    end
    def disconnect(this : IPlayToControlWithCapabilities*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this)
    end
    def get_capabilities(this : IPlayToControlWithCapabilities*, pCapabilities : Win32cr::Media::MediaFoundation::PLAYTO_SOURCE_CREATEFLAGS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_capabilities.call(this, pCapabilities)
    end

  end

  @[Extern]
  record IPlayToSourceClassFactoryVtbl,
    query_interface : Proc(IPlayToSourceClassFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPlayToSourceClassFactory*, UInt32),
    release : Proc(IPlayToSourceClassFactory*, UInt32),
    create_instance : Proc(IPlayToSourceClassFactory*, UInt32, Void*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("842b32a3-9b9b-4d1c-b3f3-49193248a554")]
  record IPlayToSourceClassFactory, lpVtbl : IPlayToSourceClassFactoryVtbl* do
    GUID = LibC::GUID.new(0x842b32a3_u32, 0x9b9b_u16, 0x4d1c_u16, StaticArray[0xb3_u8, 0xf3_u8, 0x49_u8, 0x19_u8, 0x32_u8, 0x48_u8, 0xa5_u8, 0x54_u8])
    def query_interface(this : IPlayToSourceClassFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPlayToSourceClassFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPlayToSourceClassFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_instance(this : IPlayToSourceClassFactory*, dwFlags : UInt32, pControl : Void*, ppSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_instance.call(this, dwFlags, pControl, ppSource)
    end

  end

  @[Extern]
  record IEVRVideoStreamControlVtbl,
    query_interface : Proc(IEVRVideoStreamControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEVRVideoStreamControl*, UInt32),
    release : Proc(IEVRVideoStreamControl*, UInt32),
    set_stream_active_state : Proc(IEVRVideoStreamControl*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_stream_active_state : Proc(IEVRVideoStreamControl*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d0cfe38b-93e7-4772-8957-0400c49a4485")]
  record IEVRVideoStreamControl, lpVtbl : IEVRVideoStreamControlVtbl* do
    GUID = LibC::GUID.new(0xd0cfe38b_u32, 0x93e7_u16, 0x4772_u16, StaticArray[0x89_u8, 0x57_u8, 0x4_u8, 0x0_u8, 0xc4_u8, 0x9a_u8, 0x44_u8, 0x85_u8])
    def query_interface(this : IEVRVideoStreamControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEVRVideoStreamControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEVRVideoStreamControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_stream_active_state(this : IEVRVideoStreamControl*, fActive : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream_active_state.call(this, fActive)
    end
    def get_stream_active_state(this : IEVRVideoStreamControl*, lpfActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_active_state.call(this, lpfActive)
    end

  end

  @[Extern]
  record IMFVideoProcessorVtbl,
    query_interface : Proc(IMFVideoProcessor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoProcessor*, UInt32),
    release : Proc(IMFVideoProcessor*, UInt32),
    get_available_video_processor_modes : Proc(IMFVideoProcessor*, UInt32*, LibC::GUID**, Win32cr::Foundation::HRESULT),
    get_video_processor_caps : Proc(IMFVideoProcessor*, LibC::GUID*, Win32cr::Media::MediaFoundation::DXVA2_VideoProcessorCaps*, Win32cr::Foundation::HRESULT),
    get_video_processor_mode : Proc(IMFVideoProcessor*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_video_processor_mode : Proc(IMFVideoProcessor*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_proc_amp_range : Proc(IMFVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT),
    get_proc_amp_values : Proc(IMFVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ProcAmpValues*, Win32cr::Foundation::HRESULT),
    set_proc_amp_values : Proc(IMFVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ProcAmpValues*, Win32cr::Foundation::HRESULT),
    get_filtering_range : Proc(IMFVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_ValueRange*, Win32cr::Foundation::HRESULT),
    get_filtering_value : Proc(IMFVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_Fixed32*, Win32cr::Foundation::HRESULT),
    set_filtering_value : Proc(IMFVideoProcessor*, UInt32, Win32cr::Media::MediaFoundation::DXVA2_Fixed32*, Win32cr::Foundation::HRESULT),
    get_background_color : Proc(IMFVideoProcessor*, UInt32*, Win32cr::Foundation::HRESULT),
    set_background_color : Proc(IMFVideoProcessor*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6ab0000c-fece-4d1f-a2ac-a9573530656e")]
  record IMFVideoProcessor, lpVtbl : IMFVideoProcessorVtbl* do
    GUID = LibC::GUID.new(0x6ab0000c_u32, 0xfece_u16, 0x4d1f_u16, StaticArray[0xa2_u8, 0xac_u8, 0xa9_u8, 0x57_u8, 0x35_u8, 0x30_u8, 0x65_u8, 0x6e_u8])
    def query_interface(this : IMFVideoProcessor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoProcessor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoProcessor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_available_video_processor_modes(this : IMFVideoProcessor*, lpdwNumProcessingModes : UInt32*, ppVideoProcessingModes : LibC::GUID**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_video_processor_modes.call(this, lpdwNumProcessingModes, ppVideoProcessingModes)
    end
    def get_video_processor_caps(this : IMFVideoProcessor*, lpVideoProcessorMode : LibC::GUID*, lpVideoProcessorCaps : Win32cr::Media::MediaFoundation::DXVA2_VideoProcessorCaps*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_caps.call(this, lpVideoProcessorMode, lpVideoProcessorCaps)
    end
    def get_video_processor_mode(this : IMFVideoProcessor*, lpMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_video_processor_mode.call(this, lpMode)
    end
    def set_video_processor_mode(this : IMFVideoProcessor*, lpMode : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_video_processor_mode.call(this, lpMode)
    end
    def get_proc_amp_range(this : IMFVideoProcessor*, dwProperty : UInt32, pPropRange : Win32cr::Media::MediaFoundation::DXVA2_ValueRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_proc_amp_range.call(this, dwProperty, pPropRange)
    end
    def get_proc_amp_values(this : IMFVideoProcessor*, dwFlags : UInt32, values : Win32cr::Media::MediaFoundation::DXVA2_ProcAmpValues*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_proc_amp_values.call(this, dwFlags, values)
    end
    def set_proc_amp_values(this : IMFVideoProcessor*, dwFlags : UInt32, pValues : Win32cr::Media::MediaFoundation::DXVA2_ProcAmpValues*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_proc_amp_values.call(this, dwFlags, pValues)
    end
    def get_filtering_range(this : IMFVideoProcessor*, dwProperty : UInt32, pPropRange : Win32cr::Media::MediaFoundation::DXVA2_ValueRange*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filtering_range.call(this, dwProperty, pPropRange)
    end
    def get_filtering_value(this : IMFVideoProcessor*, dwProperty : UInt32, pValue : Win32cr::Media::MediaFoundation::DXVA2_Fixed32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_filtering_value.call(this, dwProperty, pValue)
    end
    def set_filtering_value(this : IMFVideoProcessor*, dwProperty : UInt32, pValue : Win32cr::Media::MediaFoundation::DXVA2_Fixed32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_filtering_value.call(this, dwProperty, pValue)
    end
    def get_background_color(this : IMFVideoProcessor*, lpClrBkg : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_background_color.call(this, lpClrBkg)
    end
    def set_background_color(this : IMFVideoProcessor*, clr_bkg : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_color.call(this, clr_bkg)
    end

  end

  @[Extern]
  record IMFVideoMixerBitmapVtbl,
    query_interface : Proc(IMFVideoMixerBitmap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVideoMixerBitmap*, UInt32),
    release : Proc(IMFVideoMixerBitmap*, UInt32),
    set_alpha_bitmap : Proc(IMFVideoMixerBitmap*, Win32cr::Media::MediaFoundation::MFVideoAlphaBitmap*, Win32cr::Foundation::HRESULT),
    clear_alpha_bitmap : Proc(IMFVideoMixerBitmap*, Win32cr::Foundation::HRESULT),
    update_alpha_bitmap_parameters : Proc(IMFVideoMixerBitmap*, Win32cr::Media::MediaFoundation::MFVideoAlphaBitmapParams*, Win32cr::Foundation::HRESULT),
    get_alpha_bitmap_parameters : Proc(IMFVideoMixerBitmap*, Win32cr::Media::MediaFoundation::MFVideoAlphaBitmapParams*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("814c7b20-0fdb-4eec-af8f-f957c8f69edc")]
  record IMFVideoMixerBitmap, lpVtbl : IMFVideoMixerBitmapVtbl* do
    GUID = LibC::GUID.new(0x814c7b20_u32, 0xfdb_u16, 0x4eec_u16, StaticArray[0xaf_u8, 0x8f_u8, 0xf9_u8, 0x57_u8, 0xc8_u8, 0xf6_u8, 0x9e_u8, 0xdc_u8])
    def query_interface(this : IMFVideoMixerBitmap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVideoMixerBitmap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVideoMixerBitmap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_alpha_bitmap(this : IMFVideoMixerBitmap*, pBmpParms : Win32cr::Media::MediaFoundation::MFVideoAlphaBitmap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_alpha_bitmap.call(this, pBmpParms)
    end
    def clear_alpha_bitmap(this : IMFVideoMixerBitmap*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_alpha_bitmap.call(this)
    end
    def update_alpha_bitmap_parameters(this : IMFVideoMixerBitmap*, pBmpParms : Win32cr::Media::MediaFoundation::MFVideoAlphaBitmapParams*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_alpha_bitmap_parameters.call(this, pBmpParms)
    end
    def get_alpha_bitmap_parameters(this : IMFVideoMixerBitmap*, pBmpParms : Win32cr::Media::MediaFoundation::MFVideoAlphaBitmapParams*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_alpha_bitmap_parameters.call(this, pBmpParms)
    end

  end

  @[Extern]
  record IAdvancedMediaCaptureInitializationSettingsVtbl,
    query_interface : Proc(IAdvancedMediaCaptureInitializationSettings*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAdvancedMediaCaptureInitializationSettings*, UInt32),
    release : Proc(IAdvancedMediaCaptureInitializationSettings*, UInt32),
    set_directx_device_manager : Proc(IAdvancedMediaCaptureInitializationSettings*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3de21209-8ba6-4f2a-a577-2819b56ff14d")]
  record IAdvancedMediaCaptureInitializationSettings, lpVtbl : IAdvancedMediaCaptureInitializationSettingsVtbl* do
    GUID = LibC::GUID.new(0x3de21209_u32, 0x8ba6_u16, 0x4f2a_u16, StaticArray[0xa5_u8, 0x77_u8, 0x28_u8, 0x19_u8, 0xb5_u8, 0x6f_u8, 0xf1_u8, 0x4d_u8])
    def query_interface(this : IAdvancedMediaCaptureInitializationSettings*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAdvancedMediaCaptureInitializationSettings*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAdvancedMediaCaptureInitializationSettings*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_directx_device_manager(this : IAdvancedMediaCaptureInitializationSettings*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_directx_device_manager.call(this, value)
    end

  end

  @[Extern]
  record IAdvancedMediaCaptureSettingsVtbl,
    query_interface : Proc(IAdvancedMediaCaptureSettings*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAdvancedMediaCaptureSettings*, UInt32),
    release : Proc(IAdvancedMediaCaptureSettings*, UInt32),
    get_directx_device_manager : Proc(IAdvancedMediaCaptureSettings*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("24e0485f-a33e-4aa1-b564-6019b1d14f65")]
  record IAdvancedMediaCaptureSettings, lpVtbl : IAdvancedMediaCaptureSettingsVtbl* do
    GUID = LibC::GUID.new(0x24e0485f_u32, 0xa33e_u16, 0x4aa1_u16, StaticArray[0xb5_u8, 0x64_u8, 0x60_u8, 0x19_u8, 0xb1_u8, 0xd1_u8, 0x4f_u8, 0x65_u8])
    def query_interface(this : IAdvancedMediaCaptureSettings*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAdvancedMediaCaptureSettings*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAdvancedMediaCaptureSettings*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_directx_device_manager(this : IAdvancedMediaCaptureSettings*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_directx_device_manager.call(this, value)
    end

  end

  @[Extern]
  record IAdvancedMediaCaptureVtbl,
    query_interface : Proc(IAdvancedMediaCapture*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAdvancedMediaCapture*, UInt32),
    release : Proc(IAdvancedMediaCapture*, UInt32),
    get_advanced_media_capture_settings : Proc(IAdvancedMediaCapture*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d0751585-d216-4344-b5bf-463b68f977bb")]
  record IAdvancedMediaCapture, lpVtbl : IAdvancedMediaCaptureVtbl* do
    GUID = LibC::GUID.new(0xd0751585_u32, 0xd216_u16, 0x4344_u16, StaticArray[0xb5_u8, 0xbf_u8, 0x46_u8, 0x3b_u8, 0x68_u8, 0xf9_u8, 0x77_u8, 0xbb_u8])
    def query_interface(this : IAdvancedMediaCapture*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAdvancedMediaCapture*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAdvancedMediaCapture*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_advanced_media_capture_settings(this : IAdvancedMediaCapture*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_advanced_media_capture_settings.call(this, value)
    end

  end

  @[Extern]
  record IMFSpatialAudioObjectBufferVtbl,
    query_interface : Proc(IMFSpatialAudioObjectBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSpatialAudioObjectBuffer*, UInt32),
    release : Proc(IMFSpatialAudioObjectBuffer*, UInt32),
    lock : Proc(IMFSpatialAudioObjectBuffer*, UInt8**, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    unlock : Proc(IMFSpatialAudioObjectBuffer*, Win32cr::Foundation::HRESULT),
    get_current_length : Proc(IMFSpatialAudioObjectBuffer*, UInt32*, Win32cr::Foundation::HRESULT),
    set_current_length : Proc(IMFSpatialAudioObjectBuffer*, UInt32, Win32cr::Foundation::HRESULT),
    get_max_length : Proc(IMFSpatialAudioObjectBuffer*, UInt32*, Win32cr::Foundation::HRESULT),
    set_id : Proc(IMFSpatialAudioObjectBuffer*, UInt32, Win32cr::Foundation::HRESULT),
    get_id : Proc(IMFSpatialAudioObjectBuffer*, UInt32*, Win32cr::Foundation::HRESULT),
    set_type : Proc(IMFSpatialAudioObjectBuffer*, Win32cr::Media::Audio::AudioObjectType, Win32cr::Foundation::HRESULT),
    get_type : Proc(IMFSpatialAudioObjectBuffer*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT),
    get_metadata_items : Proc(IMFSpatialAudioObjectBuffer*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d396ec8c-605e-4249-978d-72ad1c312872")]
  record IMFSpatialAudioObjectBuffer, lpVtbl : IMFSpatialAudioObjectBufferVtbl* do
    GUID = LibC::GUID.new(0xd396ec8c_u32, 0x605e_u16, 0x4249_u16, StaticArray[0x97_u8, 0x8d_u8, 0x72_u8, 0xad_u8, 0x1c_u8, 0x31_u8, 0x28_u8, 0x72_u8])
    def query_interface(this : IMFSpatialAudioObjectBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSpatialAudioObjectBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSpatialAudioObjectBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lock(this : IMFSpatialAudioObjectBuffer*, ppbBuffer : UInt8**, pcbMaxLength : UInt32*, pcbCurrentLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock.call(this, ppbBuffer, pcbMaxLength, pcbCurrentLength)
    end
    def unlock(this : IMFSpatialAudioObjectBuffer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock.call(this)
    end
    def get_current_length(this : IMFSpatialAudioObjectBuffer*, pcbCurrentLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_length.call(this, pcbCurrentLength)
    end
    def set_current_length(this : IMFSpatialAudioObjectBuffer*, cbCurrentLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_current_length.call(this, cbCurrentLength)
    end
    def get_max_length(this : IMFSpatialAudioObjectBuffer*, pcbMaxLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_length.call(this, pcbMaxLength)
    end
    def set_id(this : IMFSpatialAudioObjectBuffer*, u32ID : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_id.call(this, u32ID)
    end
    def get_id(this : IMFSpatialAudioObjectBuffer*, pu32ID : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, pu32ID)
    end
    def set_type(this : IMFSpatialAudioObjectBuffer*, type__ : Win32cr::Media::Audio::AudioObjectType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_type.call(this, type__)
    end
    def get_type(this : IMFSpatialAudioObjectBuffer*, pType : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pType)
    end
    def get_metadata_items(this : IMFSpatialAudioObjectBuffer*, ppMetadataItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_metadata_items.call(this, ppMetadataItems)
    end

  end

  @[Extern]
  record IMFSpatialAudioSampleVtbl,
    query_interface : Proc(IMFSpatialAudioSample*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFSpatialAudioSample*, UInt32),
    release : Proc(IMFSpatialAudioSample*, UInt32),
    get_item : Proc(IMFSpatialAudioSample*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFSpatialAudioSample*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFSpatialAudioSample*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFSpatialAudioSample*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFSpatialAudioSample*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFSpatialAudioSample*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFSpatialAudioSample*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFSpatialAudioSample*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFSpatialAudioSample*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFSpatialAudioSample*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFSpatialAudioSample*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFSpatialAudioSample*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFSpatialAudioSample*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFSpatialAudioSample*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFSpatialAudioSample*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFSpatialAudioSample*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFSpatialAudioSample*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFSpatialAudioSample*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFSpatialAudioSample*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFSpatialAudioSample*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFSpatialAudioSample*, Void*, Win32cr::Foundation::HRESULT),
    get_sample_flags : Proc(IMFSpatialAudioSample*, UInt32*, Win32cr::Foundation::HRESULT),
    set_sample_flags : Proc(IMFSpatialAudioSample*, UInt32, Win32cr::Foundation::HRESULT),
    get_sample_time : Proc(IMFSpatialAudioSample*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_time : Proc(IMFSpatialAudioSample*, Int64, Win32cr::Foundation::HRESULT),
    get_sample_duration : Proc(IMFSpatialAudioSample*, Int64*, Win32cr::Foundation::HRESULT),
    set_sample_duration : Proc(IMFSpatialAudioSample*, Int64, Win32cr::Foundation::HRESULT),
    get_buffer_count : Proc(IMFSpatialAudioSample*, UInt32*, Win32cr::Foundation::HRESULT),
    get_buffer_by_index : Proc(IMFSpatialAudioSample*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    convert_to_contiguous_buffer : Proc(IMFSpatialAudioSample*, Void**, Win32cr::Foundation::HRESULT),
    add_buffer : Proc(IMFSpatialAudioSample*, Void*, Win32cr::Foundation::HRESULT),
    remove_buffer_by_index : Proc(IMFSpatialAudioSample*, UInt32, Win32cr::Foundation::HRESULT),
    remove_all_buffers : Proc(IMFSpatialAudioSample*, Win32cr::Foundation::HRESULT),
    get_total_length : Proc(IMFSpatialAudioSample*, UInt32*, Win32cr::Foundation::HRESULT),
    copy_to_buffer : Proc(IMFSpatialAudioSample*, Void*, Win32cr::Foundation::HRESULT),
    get_object_count : Proc(IMFSpatialAudioSample*, UInt32*, Win32cr::Foundation::HRESULT),
    add_spatial_audio_object : Proc(IMFSpatialAudioSample*, Void*, Win32cr::Foundation::HRESULT),
    get_spatial_audio_object_by_index : Proc(IMFSpatialAudioSample*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("abf28a9b-3393-4290-ba79-5ffc46d986b2")]
  record IMFSpatialAudioSample, lpVtbl : IMFSpatialAudioSampleVtbl* do
    GUID = LibC::GUID.new(0xabf28a9b_u32, 0x3393_u16, 0x4290_u16, StaticArray[0xba_u8, 0x79_u8, 0x5f_u8, 0xfc_u8, 0x46_u8, 0xd9_u8, 0x86_u8, 0xb2_u8])
    def query_interface(this : IMFSpatialAudioSample*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFSpatialAudioSample*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFSpatialAudioSample*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFSpatialAudioSample*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFSpatialAudioSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFSpatialAudioSample*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFSpatialAudioSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFSpatialAudioSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFSpatialAudioSample*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFSpatialAudioSample*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFSpatialAudioSample*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def get_sample_flags(this : IMFSpatialAudioSample*, pdwSampleFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_flags.call(this, pdwSampleFlags)
    end
    def set_sample_flags(this : IMFSpatialAudioSample*, dwSampleFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_flags.call(this, dwSampleFlags)
    end
    def get_sample_time(this : IMFSpatialAudioSample*, phnsSampleTime : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_time.call(this, phnsSampleTime)
    end
    def set_sample_time(this : IMFSpatialAudioSample*, hnsSampleTime : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_time.call(this, hnsSampleTime)
    end
    def get_sample_duration(this : IMFSpatialAudioSample*, phnsSampleDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sample_duration.call(this, phnsSampleDuration)
    end
    def set_sample_duration(this : IMFSpatialAudioSample*, hnsSampleDuration : Int64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_duration.call(this, hnsSampleDuration)
    end
    def get_buffer_count(this : IMFSpatialAudioSample*, pdwBufferCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_count.call(this, pdwBufferCount)
    end
    def get_buffer_by_index(this : IMFSpatialAudioSample*, dwIndex : UInt32, ppBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_by_index.call(this, dwIndex, ppBuffer)
    end
    def convert_to_contiguous_buffer(this : IMFSpatialAudioSample*, ppBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.convert_to_contiguous_buffer.call(this, ppBuffer)
    end
    def add_buffer(this : IMFSpatialAudioSample*, pBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_buffer.call(this, pBuffer)
    end
    def remove_buffer_by_index(this : IMFSpatialAudioSample*, dwIndex : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_buffer_by_index.call(this, dwIndex)
    end
    def remove_all_buffers(this : IMFSpatialAudioSample*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_all_buffers.call(this)
    end
    def get_total_length(this : IMFSpatialAudioSample*, pcbTotalLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_length.call(this, pcbTotalLength)
    end
    def copy_to_buffer(this : IMFSpatialAudioSample*, pBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_to_buffer.call(this, pBuffer)
    end
    def get_object_count(this : IMFSpatialAudioSample*, pdwObjectCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object_count.call(this, pdwObjectCount)
    end
    def add_spatial_audio_object(this : IMFSpatialAudioSample*, pAudioObjBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_spatial_audio_object.call(this, pAudioObjBuffer)
    end
    def get_spatial_audio_object_by_index(this : IMFSpatialAudioSample*, dwIndex : UInt32, ppAudioObjBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_spatial_audio_object_by_index.call(this, dwIndex, ppAudioObjBuffer)
    end

  end

  @[Extern]
  record IMFContentDecryptionModuleSessionVtbl,
    query_interface : Proc(IMFContentDecryptionModuleSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentDecryptionModuleSession*, UInt32),
    release : Proc(IMFContentDecryptionModuleSession*, UInt32),
    get_session_id : Proc(IMFContentDecryptionModuleSession*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_expiration : Proc(IMFContentDecryptionModuleSession*, Float64*, Win32cr::Foundation::HRESULT),
    get_key_statuses : Proc(IMFContentDecryptionModuleSession*, Win32cr::Media::MediaFoundation::MFMediaKeyStatus**, UInt32*, Win32cr::Foundation::HRESULT),
    load : Proc(IMFContentDecryptionModuleSession*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    generate_request : Proc(IMFContentDecryptionModuleSession*, Win32cr::Foundation::PWSTR, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    update : Proc(IMFContentDecryptionModuleSession*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    close : Proc(IMFContentDecryptionModuleSession*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMFContentDecryptionModuleSession*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4e233efd-1dd2-49e8-b577-d63eee4c0d33")]
  record IMFContentDecryptionModuleSession, lpVtbl : IMFContentDecryptionModuleSessionVtbl* do
    GUID = LibC::GUID.new(0x4e233efd_u32, 0x1dd2_u16, 0x49e8_u16, StaticArray[0xb5_u8, 0x77_u8, 0xd6_u8, 0x3e_u8, 0xee_u8, 0x4c_u8, 0xd_u8, 0x33_u8])
    def query_interface(this : IMFContentDecryptionModuleSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentDecryptionModuleSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentDecryptionModuleSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_session_id(this : IMFContentDecryptionModuleSession*, sessionId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_session_id.call(this, sessionId)
    end
    def get_expiration(this : IMFContentDecryptionModuleSession*, expiration : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_expiration.call(this, expiration)
    end
    def get_key_statuses(this : IMFContentDecryptionModuleSession*, keyStatuses : Win32cr::Media::MediaFoundation::MFMediaKeyStatus**, numKeyStatuses : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_statuses.call(this, keyStatuses, numKeyStatuses)
    end
    def load(this : IMFContentDecryptionModuleSession*, sessionId : Win32cr::Foundation::PWSTR, loaded : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load.call(this, sessionId, loaded)
    end
    def generate_request(this : IMFContentDecryptionModuleSession*, initDataType : Win32cr::Foundation::PWSTR, initData : UInt8*, initDataSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.generate_request.call(this, initDataType, initData, initDataSize)
    end
    def update(this : IMFContentDecryptionModuleSession*, response : UInt8*, responseSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, response, responseSize)
    end
    def close(this : IMFContentDecryptionModuleSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def remove(this : IMFContentDecryptionModuleSession*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this)
    end

  end

  @[Extern]
  record IMFContentDecryptionModuleSessionCallbacksVtbl,
    query_interface : Proc(IMFContentDecryptionModuleSessionCallbacks*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentDecryptionModuleSessionCallbacks*, UInt32),
    release : Proc(IMFContentDecryptionModuleSessionCallbacks*, UInt32),
    key_message : Proc(IMFContentDecryptionModuleSessionCallbacks*, Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_MESSAGETYPE, UInt8*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    key_status_changed : Proc(IMFContentDecryptionModuleSessionCallbacks*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3f96ee40-ad81-4096-8470-59a4b770f89a")]
  record IMFContentDecryptionModuleSessionCallbacks, lpVtbl : IMFContentDecryptionModuleSessionCallbacksVtbl* do
    GUID = LibC::GUID.new(0x3f96ee40_u32, 0xad81_u16, 0x4096_u16, StaticArray[0x84_u8, 0x70_u8, 0x59_u8, 0xa4_u8, 0xb7_u8, 0x70_u8, 0xf8_u8, 0x9a_u8])
    def query_interface(this : IMFContentDecryptionModuleSessionCallbacks*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentDecryptionModuleSessionCallbacks*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentDecryptionModuleSessionCallbacks*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def key_message(this : IMFContentDecryptionModuleSessionCallbacks*, messageType : Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_MESSAGETYPE, message : UInt8*, messageSize : UInt32, destinationURL : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.key_message.call(this, messageType, message, messageSize, destinationURL)
    end
    def key_status_changed(this : IMFContentDecryptionModuleSessionCallbacks*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.key_status_changed.call(this)
    end

  end

  @[Extern]
  record IMFContentDecryptionModuleVtbl,
    query_interface : Proc(IMFContentDecryptionModule*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentDecryptionModule*, UInt32),
    release : Proc(IMFContentDecryptionModule*, UInt32),
    set_content_enabler : Proc(IMFContentDecryptionModule*, Void*, Void*, Win32cr::Foundation::HRESULT),
    get_suspend_notify : Proc(IMFContentDecryptionModule*, Void**, Win32cr::Foundation::HRESULT),
    set_pmp_host_app : Proc(IMFContentDecryptionModule*, Void*, Win32cr::Foundation::HRESULT),
    create_session : Proc(IMFContentDecryptionModule*, Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_TYPE, Void*, Void**, Win32cr::Foundation::HRESULT),
    set_server_certificate : Proc(IMFContentDecryptionModule*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    create_trusted_input : Proc(IMFContentDecryptionModule*, UInt8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_protection_system_ids : Proc(IMFContentDecryptionModule*, LibC::GUID**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("87be986c-10be-4943-bf48-4b54ce1983a2")]
  record IMFContentDecryptionModule, lpVtbl : IMFContentDecryptionModuleVtbl* do
    GUID = LibC::GUID.new(0x87be986c_u32, 0x10be_u16, 0x4943_u16, StaticArray[0xbf_u8, 0x48_u8, 0x4b_u8, 0x54_u8, 0xce_u8, 0x19_u8, 0x83_u8, 0xa2_u8])
    def query_interface(this : IMFContentDecryptionModule*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentDecryptionModule*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentDecryptionModule*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_content_enabler(this : IMFContentDecryptionModule*, contentEnabler : Void*, result : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_content_enabler.call(this, contentEnabler, result)
    end
    def get_suspend_notify(this : IMFContentDecryptionModule*, notify : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_suspend_notify.call(this, notify)
    end
    def set_pmp_host_app(this : IMFContentDecryptionModule*, pmpHostApp : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_pmp_host_app.call(this, pmpHostApp)
    end
    def create_session(this : IMFContentDecryptionModule*, sessionType : Win32cr::Media::MediaFoundation::MF_MEDIAKEYSESSION_TYPE, callbacks : Void*, session : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_session.call(this, sessionType, callbacks, session)
    end
    def set_server_certificate(this : IMFContentDecryptionModule*, certificate : UInt8*, certificateSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_server_certificate.call(this, certificate, certificateSize)
    end
    def create_trusted_input(this : IMFContentDecryptionModule*, contentInitData : UInt8*, contentInitDataSize : UInt32, trustedInput : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_trusted_input.call(this, contentInitData, contentInitDataSize, trustedInput)
    end
    def get_protection_system_ids(this : IMFContentDecryptionModule*, systemIds : LibC::GUID**, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protection_system_ids.call(this, systemIds, count)
    end

  end

  @[Extern]
  record IMFContentDecryptionModuleAccessVtbl,
    query_interface : Proc(IMFContentDecryptionModuleAccess*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentDecryptionModuleAccess*, UInt32),
    release : Proc(IMFContentDecryptionModuleAccess*, UInt32),
    create_content_decryption_module : Proc(IMFContentDecryptionModuleAccess*, Void*, Void**, Win32cr::Foundation::HRESULT),
    get_configuration : Proc(IMFContentDecryptionModuleAccess*, Void**, Win32cr::Foundation::HRESULT),
    get_key_system : Proc(IMFContentDecryptionModuleAccess*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a853d1f4-e2a0-4303-9edc-f1a68ee43136")]
  record IMFContentDecryptionModuleAccess, lpVtbl : IMFContentDecryptionModuleAccessVtbl* do
    GUID = LibC::GUID.new(0xa853d1f4_u32, 0xe2a0_u16, 0x4303_u16, StaticArray[0x9e_u8, 0xdc_u8, 0xf1_u8, 0xa6_u8, 0x8e_u8, 0xe4_u8, 0x31_u8, 0x36_u8])
    def query_interface(this : IMFContentDecryptionModuleAccess*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentDecryptionModuleAccess*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentDecryptionModuleAccess*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def create_content_decryption_module(this : IMFContentDecryptionModuleAccess*, contentDecryptionModuleProperties : Void*, contentDecryptionModule : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_content_decryption_module.call(this, contentDecryptionModuleProperties, contentDecryptionModule)
    end
    def get_configuration(this : IMFContentDecryptionModuleAccess*, configuration : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_configuration.call(this, configuration)
    end
    def get_key_system(this : IMFContentDecryptionModuleAccess*, keySystem : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_key_system.call(this, keySystem)
    end

  end

  @[Extern]
  record IMFContentDecryptionModuleFactoryVtbl,
    query_interface : Proc(IMFContentDecryptionModuleFactory*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFContentDecryptionModuleFactory*, UInt32),
    release : Proc(IMFContentDecryptionModuleFactory*, UInt32),
    is_type_supported : Proc(IMFContentDecryptionModuleFactory*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Win32cr::Foundation::BOOL),
    create_content_decryption_module_access : Proc(IMFContentDecryptionModuleFactory*, Win32cr::Foundation::PWSTR, Void**, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7d5abf16-4cbb-4e08-b977-9ba59049943e")]
  record IMFContentDecryptionModuleFactory, lpVtbl : IMFContentDecryptionModuleFactoryVtbl* do
    GUID = LibC::GUID.new(0x7d5abf16_u32, 0x4cbb_u16, 0x4e08_u16, StaticArray[0xb9_u8, 0x77_u8, 0x9b_u8, 0xa5_u8, 0x90_u8, 0x49_u8, 0x94_u8, 0x3e_u8])
    def query_interface(this : IMFContentDecryptionModuleFactory*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFContentDecryptionModuleFactory*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFContentDecryptionModuleFactory*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_type_supported(this : IMFContentDecryptionModuleFactory*, keySystem : Win32cr::Foundation::PWSTR, contentType : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_type_supported.call(this, keySystem, contentType)
    end
    def create_content_decryption_module_access(this : IMFContentDecryptionModuleFactory*, keySystem : Win32cr::Foundation::PWSTR, configurations : Void**, numConfigurations : UInt32, contentDecryptionModuleAccess : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_content_decryption_module_access.call(this, keySystem, configurations, numConfigurations, contentDecryptionModuleAccess)
    end

  end

  @[Extern]
  record IMFCameraSyncObjectVtbl,
    query_interface : Proc(IMFCameraSyncObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFCameraSyncObject*, UInt32),
    release : Proc(IMFCameraSyncObject*, UInt32),
    wait_on_signal : Proc(IMFCameraSyncObject*, UInt32, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFCameraSyncObject*, Void)


  @[Extern]
  #@[Com("6338b23a-3042-49d2-a3ea-ec0fed815407")]
  record IMFCameraSyncObject, lpVtbl : IMFCameraSyncObjectVtbl* do
    GUID = LibC::GUID.new(0x6338b23a_u32, 0x3042_u16, 0x49d2_u16, StaticArray[0xa3_u8, 0xea_u8, 0xec_u8, 0xf_u8, 0xed_u8, 0x81_u8, 0x54_u8, 0x7_u8])
    def query_interface(this : IMFCameraSyncObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFCameraSyncObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFCameraSyncObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def wait_on_signal(this : IMFCameraSyncObject*, timeOutInMs : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait_on_signal.call(this, timeOutInMs)
    end
    def shutdown(this : IMFCameraSyncObject*) : Void
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Extern]
  record IMFVirtualCameraVtbl,
    query_interface : Proc(IMFVirtualCamera*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMFVirtualCamera*, UInt32),
    release : Proc(IMFVirtualCamera*, UInt32),
    get_item : Proc(IMFVirtualCamera*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    get_item_type : Proc(IMFVirtualCamera*, LibC::GUID*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*, Win32cr::Foundation::HRESULT),
    compare_item : Proc(IMFVirtualCamera*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    compare : Proc(IMFVirtualCamera*, Void*, Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_uint32 : Proc(IMFVirtualCamera*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_uint64 : Proc(IMFVirtualCamera*, LibC::GUID*, UInt64*, Win32cr::Foundation::HRESULT),
    get_double : Proc(IMFVirtualCamera*, LibC::GUID*, Float64*, Win32cr::Foundation::HRESULT),
    get_guid : Proc(IMFVirtualCamera*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_string_length : Proc(IMFVirtualCamera*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_string : Proc(IMFVirtualCamera*, LibC::GUID*, UInt16*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_string : Proc(IMFVirtualCamera*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob_size : Proc(IMFVirtualCamera*, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    get_blob : Proc(IMFVirtualCamera*, LibC::GUID*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_allocated_blob : Proc(IMFVirtualCamera*, LibC::GUID*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_unknown : Proc(IMFVirtualCamera*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_item : Proc(IMFVirtualCamera*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    delete_item : Proc(IMFVirtualCamera*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    delete_all_items : Proc(IMFVirtualCamera*, Win32cr::Foundation::HRESULT),
    set_uint32 : Proc(IMFVirtualCamera*, LibC::GUID*, UInt32, Win32cr::Foundation::HRESULT),
    set_uint64 : Proc(IMFVirtualCamera*, LibC::GUID*, UInt64, Win32cr::Foundation::HRESULT),
    set_double : Proc(IMFVirtualCamera*, LibC::GUID*, Float64, Win32cr::Foundation::HRESULT),
    set_guid : Proc(IMFVirtualCamera*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_string : Proc(IMFVirtualCamera*, LibC::GUID*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_blob : Proc(IMFVirtualCamera*, LibC::GUID*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    set_unknown : Proc(IMFVirtualCamera*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    lock_store : Proc(IMFVirtualCamera*, Win32cr::Foundation::HRESULT),
    unlock_store : Proc(IMFVirtualCamera*, Win32cr::Foundation::HRESULT),
    get_count : Proc(IMFVirtualCamera*, UInt32*, Win32cr::Foundation::HRESULT),
    get_item_by_index : Proc(IMFVirtualCamera*, UInt32, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    copy_all_items : Proc(IMFVirtualCamera*, Void*, Win32cr::Foundation::HRESULT),
    add_device_source_info : Proc(IMFVirtualCamera*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    add_property : Proc(IMFVirtualCamera*, Win32cr::Devices::Properties::DEVPROPKEY*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    add_registry_entry : Proc(IMFVirtualCamera*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    start : Proc(IMFVirtualCamera*, Void*, Win32cr::Foundation::HRESULT),
    stop : Proc(IMFVirtualCamera*, Win32cr::Foundation::HRESULT),
    remove : Proc(IMFVirtualCamera*, Win32cr::Foundation::HRESULT),
    get_media_source : Proc(IMFVirtualCamera*, Void**, Win32cr::Foundation::HRESULT),
    send_camera_property : Proc(IMFVirtualCamera*, LibC::GUID*, UInt32, UInt32, Void*, UInt32, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    create_sync_event : Proc(IMFVirtualCamera*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HANDLE, Void**, Win32cr::Foundation::HRESULT),
    create_sync_semaphore : Proc(IMFVirtualCamera*, LibC::GUID*, UInt32, UInt32, Win32cr::Foundation::HANDLE, Int32, Void**, Win32cr::Foundation::HRESULT),
    shutdown : Proc(IMFVirtualCamera*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c08a864-ef6c-4c75-af59-5f2d68da9563")]
  record IMFVirtualCamera, lpVtbl : IMFVirtualCameraVtbl* do
    GUID = LibC::GUID.new(0x1c08a864_u32, 0xef6c_u16, 0x4c75_u16, StaticArray[0xaf_u8, 0x59_u8, 0x5f_u8, 0x2d_u8, 0x68_u8, 0xda_u8, 0x95_u8, 0x63_u8])
    def query_interface(this : IMFVirtualCamera*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMFVirtualCamera*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMFVirtualCamera*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_item(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item.call(this, guidKey, pValue)
    end
    def get_item_type(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pType : Win32cr::Media::MediaFoundation::MF_ATTRIBUTE_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_type.call(this, guidKey, pType)
    end
    def compare_item(this : IMFVirtualCamera*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare_item.call(this, guidKey, value, pbResult)
    end
    def compare(this : IMFVirtualCamera*, pTheirs : Void*, match_type : Win32cr::Media::MediaFoundation::MF_ATTRIBUTES_MATCH_TYPE, pbResult : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compare.call(this, pTheirs, match_type, pbResult)
    end
    def get_uint32(this : IMFVirtualCamera*, guidKey : LibC::GUID*, punValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint32.call(this, guidKey, punValue)
    end
    def get_uint64(this : IMFVirtualCamera*, guidKey : LibC::GUID*, punValue : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_uint64.call(this, guidKey, punValue)
    end
    def get_double(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pfValue : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_double.call(this, guidKey, pfValue)
    end
    def get_guid(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pguidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_guid.call(this, guidKey, pguidValue)
    end
    def get_string_length(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_length.call(this, guidKey, pcchLength)
    end
    def get_string(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pwszValue : UInt16*, cchBufSize : UInt32, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, guidKey, pwszValue, cchBufSize, pcchLength)
    end
    def get_allocated_string(this : IMFVirtualCamera*, guidKey : LibC::GUID*, ppwszValue : Win32cr::Foundation::PWSTR*, pcchLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_string.call(this, guidKey, ppwszValue, pcchLength)
    end
    def get_blob_size(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob_size.call(this, guidKey, pcbBlobSize)
    end
    def get_blob(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32, pcbBlobSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blob.call(this, guidKey, pBuf, cbBufSize, pcbBlobSize)
    end
    def get_allocated_blob(this : IMFVirtualCamera*, guidKey : LibC::GUID*, ppBuf : UInt8**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_allocated_blob.call(this, guidKey, ppBuf, pcbSize)
    end
    def get_unknown(this : IMFVirtualCamera*, guidKey : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_unknown.call(this, guidKey, riid, ppv)
    end
    def set_item(this : IMFVirtualCamera*, guidKey : LibC::GUID*, value : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_item.call(this, guidKey, value)
    end
    def delete_item(this : IMFVirtualCamera*, guidKey : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_item.call(this, guidKey)
    end
    def delete_all_items(this : IMFVirtualCamera*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete_all_items.call(this)
    end
    def set_uint32(this : IMFVirtualCamera*, guidKey : LibC::GUID*, unValue : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint32.call(this, guidKey, unValue)
    end
    def set_uint64(this : IMFVirtualCamera*, guidKey : LibC::GUID*, unValue : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_uint64.call(this, guidKey, unValue)
    end
    def set_double(this : IMFVirtualCamera*, guidKey : LibC::GUID*, fValue : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_double.call(this, guidKey, fValue)
    end
    def set_guid(this : IMFVirtualCamera*, guidKey : LibC::GUID*, guidValue : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_guid.call(this, guidKey, guidValue)
    end
    def set_string(this : IMFVirtualCamera*, guidKey : LibC::GUID*, wszValue : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_string.call(this, guidKey, wszValue)
    end
    def set_blob(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_blob.call(this, guidKey, pBuf, cbBufSize)
    end
    def set_unknown(this : IMFVirtualCamera*, guidKey : LibC::GUID*, pUnknown : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_unknown.call(this, guidKey, pUnknown)
    end
    def lock_store(this : IMFVirtualCamera*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_store.call(this)
    end
    def unlock_store(this : IMFVirtualCamera*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_store.call(this)
    end
    def get_count(this : IMFVirtualCamera*, pcItems : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcItems)
    end
    def get_item_by_index(this : IMFVirtualCamera*, unIndex : UInt32, pguidKey : LibC::GUID*, pValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_by_index.call(this, unIndex, pguidKey, pValue)
    end
    def copy_all_items(this : IMFVirtualCamera*, pDest : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_all_items.call(this, pDest)
    end
    def add_device_source_info(this : IMFVirtualCamera*, device_source_info : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_device_source_info.call(this, device_source_info)
    end
    def add_property(this : IMFVirtualCamera*, pKey : Win32cr::Devices::Properties::DEVPROPKEY*, type__ : UInt32, pbData : UInt8*, cbData : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_property.call(this, pKey, type__, pbData, cbData)
    end
    def add_registry_entry(this : IMFVirtualCamera*, entry_name : Win32cr::Foundation::PWSTR, subkey_path : Win32cr::Foundation::PWSTR, dwRegType : UInt32, pbData : UInt8*, cbData : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_registry_entry.call(this, entry_name, subkey_path, dwRegType, pbData, cbData)
    end
    def start(this : IMFVirtualCamera*, pCallback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this, pCallback)
    end
    def stop(this : IMFVirtualCamera*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def remove(this : IMFVirtualCamera*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this)
    end
    def get_media_source(this : IMFVirtualCamera*, ppMediaSource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_media_source.call(this, ppMediaSource)
    end
    def send_camera_property(this : IMFVirtualCamera*, propertySet : LibC::GUID*, propertyId : UInt32, propertyFlags : UInt32, propertyPayload : Void*, propertyPayloadLength : UInt32, data : Void*, dataLength : UInt32, dataWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_camera_property.call(this, propertySet, propertyId, propertyFlags, propertyPayload, propertyPayloadLength, data, dataLength, dataWritten)
    end
    def create_sync_event(this : IMFVirtualCamera*, kseventSet : LibC::GUID*, kseventId : UInt32, kseventFlags : UInt32, eventHandle : Win32cr::Foundation::HANDLE, cameraSyncObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sync_event.call(this, kseventSet, kseventId, kseventFlags, eventHandle, cameraSyncObject)
    end
    def create_sync_semaphore(this : IMFVirtualCamera*, kseventSet : LibC::GUID*, kseventId : UInt32, kseventFlags : UInt32, semaphoreHandle : Win32cr::Foundation::HANDLE, semaphoreAdjustment : Int32, cameraSyncObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sync_semaphore.call(this, kseventSet, kseventId, kseventFlags, semaphoreHandle, semaphoreAdjustment, cameraSyncObject)
    end
    def shutdown(this : IMFVirtualCamera*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shutdown.call(this)
    end

  end

  @[Link("dxva2")]
  @[Link("mfplat")]
  @[Link("mf")]
  @[Link("mfsrcsnk")]
  @[Link("mfsensorgroup")]
  @[Link("mfcore")]
  @[Link("evr")]
  @[Link("mfreadwrite")]
  @[Link("mfplay")]
  @[Link("opmxbox")]
  lib C
    fun DXVAHD_CreateDevice(pD3DDevice : Void*, pContentDesc : Win32cr::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, usage : Win32cr::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, pPlugin : Win32cr::Media::MediaFoundation::PDXVAHDSW_Plugin, ppDevice : Void**) : Win32cr::Foundation::HRESULT

    fun DXVA2CreateDirect3DDeviceManager9(pResetToken : UInt32*, ppDeviceManager : Void**) : Win32cr::Foundation::HRESULT

    fun DXVA2CreateVideoService(pDD : Void*, riid : LibC::GUID*, ppService : Void**) : Win32cr::Foundation::HRESULT

    fun OPMGetVideoOutputsFromHMONITOR(hMonitor : Win32cr::Graphics::Gdi::HMONITOR, vos : Win32cr::Media::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS, pulNumVideoOutputs : UInt32*, pppOPMVideoOutputArray : Void***) : Win32cr::Foundation::HRESULT

    fun OPMGetVideoOutputForTarget(pAdapterLuid : Win32cr::Foundation::LUID*, vid_pn_target : UInt32, vos : Win32cr::Media::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS, ppOPMVideoOutput : Void**) : Win32cr::Foundation::HRESULT

    fun OPMGetVideoOutputsFromIDirect3DDevice9Object(pDirect3DDevice9 : Void*, vos : Win32cr::Media::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS, pulNumVideoOutputs : UInt32*, pppOPMVideoOutputArray : Void***) : Win32cr::Foundation::HRESULT

    fun MFSerializeAttributesToStream(pAttr : Void*, dwOptions : UInt32, pStm : Void*) : Win32cr::Foundation::HRESULT

    fun MFDeserializeAttributesFromStream(pAttr : Void*, dwOptions : UInt32, pStm : Void*) : Win32cr::Foundation::HRESULT

    fun MFCreateTransformActivate(ppActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaSession(pConfiguration : Void*, ppMediaSession : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreatePMPMediaSession(dwCreationFlags : UInt32, pConfiguration : Void*, ppMediaSession : Void**, ppEnablerActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSourceResolver(ppISourceResolver : Void**) : Win32cr::Foundation::HRESULT

    fun CreatePropertyStore(ppStore : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetSupportedSchemes(pPropVarSchemeArray : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT

    fun MFGetSupportedMimeTypes(pPropVarMimeTypeArray : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT

    fun MFCreateTopology(ppTopo : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTopologyNode(node_type : Win32cr::Media::MediaFoundation::MF_TOPOLOGY_TYPE, ppNode : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetTopoNodeCurrentType(pNode : Void*, dwStreamIndex : UInt32, fOutput : Win32cr::Foundation::BOOL, ppType : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetService(punkObject : Void*, guidService : LibC::GUID*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetSystemTime : Int64

    fun MFCreatePresentationClock(ppPresentationClock : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSystemTimeSource(ppSystemTimeSource : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreatePresentationDescriptor(cStreamDescriptors : UInt32, apStreamDescriptors : Void**, ppPresentationDescriptor : Void**) : Win32cr::Foundation::HRESULT

    fun MFRequireProtectedEnvironment(pPresentationDescriptor : Void*) : Win32cr::Foundation::HRESULT

    fun MFSerializePresentationDescriptor(pPD : Void*, pcbData : UInt32*, ppbData : UInt8**) : Win32cr::Foundation::HRESULT

    fun MFDeserializePresentationDescriptor(cbData : UInt32, pbData : UInt8*, ppPD : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateStreamDescriptor(dwStreamIdentifier : UInt32, cMediaTypes : UInt32, apMediaTypes : Void**, ppDescriptor : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSimpleTypeHandler(ppHandler : Void**) : Win32cr::Foundation::HRESULT

    fun MFShutdownObject(pUnk : Void*) : Win32cr::Foundation::HRESULT

    fun MFCreateAudioRenderer(pAudioAttributes : Void*, ppSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateAudioRendererActivate(ppActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoRendererActivate(hwndVideo : Win32cr::Foundation::HWND, ppActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMPEG4MediaSink(pIByteStream : Void*, pVideoMediaType : Void*, pAudioMediaType : Void*, ppIMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreate3GPMediaSink(pIByteStream : Void*, pVideoMediaType : Void*, pAudioMediaType : Void*, ppIMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMP3MediaSink(pTargetByteStream : Void*, ppMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateAC3MediaSink(pTargetByteStream : Void*, pAudioMediaType : Void*, ppMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateADTSMediaSink(pTargetByteStream : Void*, pAudioMediaType : Void*, ppMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMuxSink(guidOutputSubType : LibC::GUID, pOutputAttributes : Void*, pOutputByteStream : Void*, ppMuxSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateFMPEG4MediaSink(pIByteStream : Void*, pVideoMediaType : Void*, pAudioMediaType : Void*, ppIMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateAVIMediaSink(pIByteStream : Void*, pVideoMediaType : Void*, pAudioMediaType : Void*, ppIMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateWAVEMediaSink(pTargetByteStream : Void*, pAudioMediaType : Void*, ppMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTopoLoader(ppObj : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSampleGrabberSinkActivate(pIMFMediaType : Void*, pIMFSampleGrabberSinkCallback : Void*, ppIActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateStandardQualityManager(ppQualityManager : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSequencerSource(pReserved : Void*, ppSequencerSource : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSequencerSegmentOffset(dwId : UInt32, hnsOffset : Int64, pvarSegmentOffset : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT

    fun MFCreateAggregateSource(pSourceCollection : Void*, ppAggSource : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateCredentialCache(ppCache : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateProxyLocator(pszProtocol : Win32cr::Foundation::PWSTR, pProxyConfig : Void*, ppProxyLocator : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateNetSchemePlugin(riid : LibC::GUID*, ppvHandler : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreatePMPServer(dwCreationFlags : UInt32, ppPMPServer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateRemoteDesktopPlugin(ppPlugin : Void**) : Win32cr::Foundation::HRESULT

    fun CreateNamedPropertyStore(ppStore : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSampleCopierMFT(ppCopierMFT : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTranscodeProfile(ppTranscodeProfile : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTranscodeTopology(pSrc : Void*, pwszOutputFilePath : Win32cr::Foundation::PWSTR, pProfile : Void*, ppTranscodeTopo : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTranscodeTopologyFromByteStream(pSrc : Void*, pOutputStream : Void*, pProfile : Void*, ppTranscodeTopo : Void**) : Win32cr::Foundation::HRESULT

    fun MFTranscodeGetAudioOutputAvailableTypes(guidSubType : LibC::GUID*, dwMFTFlags : UInt32, pCodecConfig : Void*, ppAvailableTypes : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTranscodeSinkActivate(ppActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTrackedSample(ppMFSample : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMFByteStreamOnStream(pStream : Void*, ppByteStream : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateStreamOnMFByteStream(pByteStream : Void*, ppStream : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMFByteStreamOnStreamEx(punkStream : Void*, ppByteStream : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateStreamOnMFByteStreamEx(pByteStream : Void*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaTypeFromProperties(punkStream : Void*, ppMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreatePropertiesFromMediaType(pMediaType : Void*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT

    fun MFEnumDeviceSources(pAttributes : Void*, pppSourceActivate : Void***, pcSourceActivate : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFCreateDeviceSource(pAttributes : Void*, ppSource : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateDeviceSourceActivate(pAttributes : Void*, ppActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateProtectedEnvironmentAccess(ppAccess : Void**) : Win32cr::Foundation::HRESULT

    fun MFLoadSignedLibrary(pszName : Win32cr::Foundation::PWSTR, ppLib : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetSystemId(ppId : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetLocalId(verifier : UInt8*, size : UInt32, id : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT

    fun MFCreateContentProtectionDevice(protection_system_id : LibC::GUID*, content_protection_device : Void**) : Win32cr::Foundation::HRESULT

    fun MFIsContentProtectionDeviceSupported(protection_system_id : LibC::GUID*, isSupported : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT

    fun MFCreateContentDecryptorContext(guidMediaProtectionSystemId : LibC::GUID*, pD3DManager : Void*, pContentProtectionDevice : Void*, ppContentDecryptorContext : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSensorGroup(sensor_group_symbolic_link : Win32cr::Foundation::PWSTR, ppSensorGroup : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSensorStream(stream_id : UInt32, pAttributes : Void*, pMediaTypeCollection : Void*, ppStream : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSensorProfile(profile_type : LibC::GUID*, profile_index : UInt32, constraints : Win32cr::Foundation::PWSTR, ppProfile : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSensorProfileCollection(ppSensorProfile : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSensorActivityMonitor(pCallback : Void*, ppActivityMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateExtendedCameraIntrinsics(ppExtendedCameraIntrinsics : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateExtendedCameraIntrinsicModel(distortionModelType : Win32cr::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelType, ppExtendedCameraIntrinsicModel : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateRelativePanelWatcher(videoDeviceId : Win32cr::Foundation::PWSTR, displayMonitorDeviceId : Win32cr::Foundation::PWSTR, ppRelativePanelWatcher : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateCameraOcclusionStateMonitor(symbolicLink : Win32cr::Foundation::PWSTR, callback : Void*, occlusionStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFContentInfo(ppIContentInfo : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFIndexer(ppIIndexer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFIndexerByteStream(pIContentByteStream : Void*, cbIndexStartOffset : UInt64, pIIndexByteStream : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFSplitter(ppISplitter : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFProfile(ppIProfile : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFProfileFromPresentationDescriptor(pIPD : Void*, ppIProfile : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreatePresentationDescriptorFromASFProfile(pIProfile : Void*, ppIPD : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFMultiplexer(ppIMultiplexer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFStreamSelector(pIASFProfile : Void*, ppSelector : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFMediaSink(pIByteStream : Void*, ppIMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFMediaSinkActivate(pwszFileName : Win32cr::Foundation::PWSTR, pContentInfo : Void*, ppIActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateWMVEncoderActivate(pMediaType : Void*, pEncodingConfigurationProperties : Void*, ppActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateWMAEncoderActivate(pMediaType : Void*, pEncodingConfigurationProperties : Void*, ppActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFStreamingMediaSink(pIByteStream : Void*, ppIMediaSink : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateASFStreamingMediaSinkActivate(pByteStreamActivate : Void*, pContentInfo : Void*, ppIActivate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateD3D12SynchronizationObject(pDevice : Void*, riid : LibC::GUID*, ppvSyncObject : Void**) : Win32cr::Foundation::HRESULT

    fun MFStartup(version : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT

    fun MFShutdown : Win32cr::Foundation::HRESULT

    fun MFLockPlatform : Win32cr::Foundation::HRESULT

    fun MFUnlockPlatform : Win32cr::Foundation::HRESULT

    fun MFPutWorkItem(dwQueue : UInt32, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT

    fun MFPutWorkItem2(dwQueue : UInt32, priority : Int32, pCallback : Void*, pState : Void*) : Win32cr::Foundation::HRESULT

    fun MFPutWorkItemEx(dwQueue : UInt32, pResult : Void*) : Win32cr::Foundation::HRESULT

    fun MFPutWorkItemEx2(dwQueue : UInt32, priority : Int32, pResult : Void*) : Win32cr::Foundation::HRESULT

    fun MFPutWaitingWorkItem(hEvent : Win32cr::Foundation::HANDLE, priority : Int32, pResult : Void*, pKey : UInt64*) : Win32cr::Foundation::HRESULT

    fun MFAllocateSerialWorkQueue(dwWorkQueue : UInt32, pdwWorkQueue : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFScheduleWorkItemEx(pResult : Void*, timeout : Int64, pKey : UInt64*) : Win32cr::Foundation::HRESULT

    fun MFScheduleWorkItem(pCallback : Void*, pState : Void*, timeout : Int64, pKey : UInt64*) : Win32cr::Foundation::HRESULT

    fun MFCancelWorkItem(key : UInt64) : Win32cr::Foundation::HRESULT

    fun MFGetTimerPeriodicity(periodicity : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFAddPeriodicCallback(callback : Win32cr::Media::MediaFoundation::MFPERIODICCALLBACK, pContext : Void*, pdwKey : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFRemovePeriodicCallback(dwKey : UInt32) : Win32cr::Foundation::HRESULT

    fun MFAllocateWorkQueueEx(work_queue_type : Win32cr::Media::MediaFoundation::MFASYNC_WORKQUEUE_TYPE, pdwWorkQueue : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFAllocateWorkQueue(pdwWorkQueue : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFLockWorkQueue(dwWorkQueue : UInt32) : Win32cr::Foundation::HRESULT

    fun MFUnlockWorkQueue(dwWorkQueue : UInt32) : Win32cr::Foundation::HRESULT

    fun MFBeginRegisterWorkQueueWithMMCSS(dwWorkQueueId : UInt32, wszClass : Win32cr::Foundation::PWSTR, dwTaskId : UInt32, pDoneCallback : Void*, pDoneState : Void*) : Win32cr::Foundation::HRESULT

    fun MFBeginRegisterWorkQueueWithMMCSSEx(dwWorkQueueId : UInt32, wszClass : Win32cr::Foundation::PWSTR, dwTaskId : UInt32, lPriority : Int32, pDoneCallback : Void*, pDoneState : Void*) : Win32cr::Foundation::HRESULT

    fun MFEndRegisterWorkQueueWithMMCSS(pResult : Void*, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFBeginUnregisterWorkQueueWithMMCSS(dwWorkQueueId : UInt32, pDoneCallback : Void*, pDoneState : Void*) : Win32cr::Foundation::HRESULT

    fun MFEndUnregisterWorkQueueWithMMCSS(pResult : Void*) : Win32cr::Foundation::HRESULT

    fun MFGetWorkQueueMMCSSClass(dwWorkQueueId : UInt32, pwszClass : UInt16*, pcchClass : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFGetWorkQueueMMCSSTaskId(dwWorkQueueId : UInt32, pdwTaskId : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFRegisterPlatformWithMMCSS(wszClass : Win32cr::Foundation::PWSTR, pdwTaskId : UInt32*, lPriority : Int32) : Win32cr::Foundation::HRESULT

    fun MFUnregisterPlatformFromMMCSS : Win32cr::Foundation::HRESULT

    fun MFLockSharedWorkQueue(wszClass : Win32cr::Foundation::PWSTR, base_priority : Int32, pdwTaskId : UInt32*, pID : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFGetWorkQueueMMCSSPriority(dwWorkQueueId : UInt32, lPriority : Int32*) : Win32cr::Foundation::HRESULT

    fun MFCreateAsyncResult(punkObject : Void*, pCallback : Void*, punkState : Void*, ppAsyncResult : Void**) : Win32cr::Foundation::HRESULT

    fun MFInvokeCallback(pAsyncResult : Void*) : Win32cr::Foundation::HRESULT

    fun MFCreateFile(access_mode : Win32cr::Media::MediaFoundation::MF_FILE_ACCESSMODE, open_mode : Win32cr::Media::MediaFoundation::MF_FILE_OPENMODE, fFlags : Win32cr::Media::MediaFoundation::MF_FILE_FLAGS, pwszFileURL : Win32cr::Foundation::PWSTR, ppIByteStream : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateTempFile(access_mode : Win32cr::Media::MediaFoundation::MF_FILE_ACCESSMODE, open_mode : Win32cr::Media::MediaFoundation::MF_FILE_OPENMODE, fFlags : Win32cr::Media::MediaFoundation::MF_FILE_FLAGS, ppIByteStream : Void**) : Win32cr::Foundation::HRESULT

    fun MFBeginCreateFile(access_mode : Win32cr::Media::MediaFoundation::MF_FILE_ACCESSMODE, open_mode : Win32cr::Media::MediaFoundation::MF_FILE_OPENMODE, fFlags : Win32cr::Media::MediaFoundation::MF_FILE_FLAGS, pwszFilePath : Win32cr::Foundation::PWSTR, pCallback : Void*, pState : Void*, ppCancelCookie : Void**) : Win32cr::Foundation::HRESULT

    fun MFEndCreateFile(pResult : Void*, ppFile : Void**) : Win32cr::Foundation::HRESULT

    fun MFCancelCreateFile(pCancelCookie : Void*) : Win32cr::Foundation::HRESULT

    fun MFCreateMemoryBuffer(cbMaxLength : UInt32, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaBufferWrapper(pBuffer : Void*, cbOffset : UInt32, dwLength : UInt32, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateLegacyMediaBufferOnMFMediaBuffer(pSample : Void*, pMFMediaBuffer : Void*, cbOffset : UInt32, ppMediaBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFMapDX9FormatToDXGIFormat(dx9 : UInt32) : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT

    fun MFMapDXGIFormatToDX9Format(dx11 : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : UInt32

    fun MFLockDXGIDeviceManager(pResetToken : UInt32*, ppManager : Void**) : Win32cr::Foundation::HRESULT

    fun MFUnlockDXGIDeviceManager : Win32cr::Foundation::HRESULT

    fun MFCreateDXSurfaceBuffer(riid : LibC::GUID*, punkSurface : Void*, fBottomUpWhenLinear : Win32cr::Foundation::BOOL, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateWICBitmapBuffer(riid : LibC::GUID*, punkSurface : Void*, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateDXGISurfaceBuffer(riid : LibC::GUID*, punkSurface : Void*, uSubresourceIndex : UInt32, fBottomUpWhenLinear : Win32cr::Foundation::BOOL, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoSampleAllocatorEx(riid : LibC::GUID*, ppSampleAllocator : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateDXGIDeviceManager(resetToken : UInt32*, ppDeviceManager : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateAlignedMemoryBuffer(cbMaxLength : UInt32, cbAligment : UInt32, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaEvent(met : UInt32, guidExtendedType : LibC::GUID*, hrStatus : Win32cr::Foundation::HRESULT, pvValue : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, ppEvent : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateEventQueue(ppMediaEventQueue : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSample(ppIMFSample : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateAttributes(ppMFAttributes : Void**, cInitialSize : UInt32) : Win32cr::Foundation::HRESULT

    fun MFInitAttributesFromBlob(pAttributes : Void*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT

    fun MFGetAttributesAsBlobSize(pAttributes : Void*, pcbBufSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFGetAttributesAsBlob(pAttributes : Void*, pBuf : UInt8*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT

    fun MFTRegister(clsidMFT : LibC::GUID, guidCategory : LibC::GUID, pszName : Win32cr::Foundation::PWSTR, flags : UInt32, cInputTypes : UInt32, pInputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, cOutputTypes : UInt32, pOutputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, pAttributes : Void*) : Win32cr::Foundation::HRESULT

    fun MFTUnregister(clsidMFT : LibC::GUID) : Win32cr::Foundation::HRESULT

    fun MFTRegisterLocal(pClassFactory : Void*, guidCategory : LibC::GUID*, pszName : Win32cr::Foundation::PWSTR, flags : UInt32, cInputTypes : UInt32, pInputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, cOutputTypes : UInt32, pOutputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*) : Win32cr::Foundation::HRESULT

    fun MFTUnregisterLocal(pClassFactory : Void*) : Win32cr::Foundation::HRESULT

    fun MFTRegisterLocalByCLSID(clisdMFT : LibC::GUID*, guidCategory : LibC::GUID*, pszName : Win32cr::Foundation::PWSTR, flags : UInt32, cInputTypes : UInt32, pInputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, cOutputTypes : UInt32, pOutputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*) : Win32cr::Foundation::HRESULT

    fun MFTUnregisterLocalByCLSID(clsidMFT : LibC::GUID) : Win32cr::Foundation::HRESULT

    fun MFTEnum(guidCategory : LibC::GUID, flags : UInt32, pInputType : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, pOutputType : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, pAttributes : Void*, ppclsidMFT : LibC::GUID**, pcMFTs : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFTEnumEx(guidCategory : LibC::GUID, flags : Win32cr::Media::MediaFoundation::MFT_ENUM_FLAG, pInputType : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, pOutputType : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, pppMFTActivate : Void***, pnumMFTActivate : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFTEnum2(guidCategory : LibC::GUID, flags : Win32cr::Media::MediaFoundation::MFT_ENUM_FLAG, pInputType : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, pOutputType : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO*, pAttributes : Void*, pppMFTActivate : Void***, pnumMFTActivate : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFTGetInfo(clsidMFT : LibC::GUID, pszName : Win32cr::Foundation::PWSTR*, ppInputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO**, pcInputTypes : UInt32*, ppOutputTypes : Win32cr::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO**, pcOutputTypes : UInt32*, ppAttributes : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetPluginControl(ppPluginControl : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetMFTMerit(pMFT : Void*, cbVerifier : UInt32, verifier : UInt8*, merit : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFRegisterLocalSchemeHandler(szScheme : Win32cr::Foundation::PWSTR, pActivate : Void*) : Win32cr::Foundation::HRESULT

    fun MFRegisterLocalByteStreamHandler(szFileExtension : Win32cr::Foundation::PWSTR, szMimeType : Win32cr::Foundation::PWSTR, pActivate : Void*) : Win32cr::Foundation::HRESULT

    fun MFCreateMFByteStreamWrapper(pStream : Void*, ppStreamWrapper : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaExtensionActivate(szActivatableClassId : Win32cr::Foundation::PWSTR, pConfiguration : Void*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMuxStreamAttributes(pAttributesToMux : Void*, ppMuxAttribs : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMuxStreamMediaType(pMediaTypesToMux : Void*, ppMuxMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMuxStreamSample(pSamplesToMux : Void*, ppMuxSample : Void**) : Win32cr::Foundation::HRESULT

    fun MFValidateMediaTypeSize(format_type : LibC::GUID, pBlock : UInt8*, cbSize : UInt32) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaType(ppMFType : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMFVideoFormatFromMFMediaType(pMFType : Void*, ppMFVF : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT**, pcbSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFCreateWaveFormatExFromMFMediaType(pMFType : Void*, ppWF : Win32cr::Media::Audio::WAVEFORMATEX**, pcbSize : UInt32*, flags : UInt32) : Win32cr::Foundation::HRESULT

    fun MFInitMediaTypeFromVideoInfoHeader(pMFType : Void*, pVIH : Win32cr::Media::MediaFoundation::VIDEOINFOHEADER*, cbBufSize : UInt32, pSubtype : LibC::GUID*) : Win32cr::Foundation::HRESULT

    fun MFInitMediaTypeFromVideoInfoHeader2(pMFType : Void*, pVIH2 : Win32cr::Media::MediaFoundation::VIDEOINFOHEADER2*, cbBufSize : UInt32, pSubtype : LibC::GUID*) : Win32cr::Foundation::HRESULT

    fun MFInitMediaTypeFromMPEG1VideoInfo(pMFType : Void*, pMP1VI : Win32cr::Media::MediaFoundation::MPEG1VIDEOINFO*, cbBufSize : UInt32, pSubtype : LibC::GUID*) : Win32cr::Foundation::HRESULT

    fun MFInitMediaTypeFromMPEG2VideoInfo(pMFType : Void*, pMP2VI : Win32cr::Media::MediaFoundation::MPEG2VIDEOINFO*, cbBufSize : UInt32, pSubtype : LibC::GUID*) : Win32cr::Foundation::HRESULT

    fun MFCalculateBitmapImageSize(pBMIH : Win32cr::Graphics::Gdi::BITMAPINFOHEADER*, cbBufSize : UInt32, pcbImageSize : UInt32*, pbKnown : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT

    fun MFCalculateImageSize(guidSubtype : LibC::GUID*, unWidth : UInt32, unHeight : UInt32, pcbImageSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFFrameRateToAverageTimePerFrame(unNumerator : UInt32, unDenominator : UInt32, punAverageTimePerFrame : UInt64*) : Win32cr::Foundation::HRESULT

    fun MFAverageTimePerFrameToFrameRate(unAverageTimePerFrame : UInt64, punNumerator : UInt32*, punDenominator : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFInitMediaTypeFromMFVideoFormat(pMFType : Void*, pMFVF : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT

    fun MFInitMediaTypeFromWaveFormatEx(pMFType : Void*, pWaveFormat : Win32cr::Media::Audio::WAVEFORMATEX*, cbBufSize : UInt32) : Win32cr::Foundation::HRESULT

    fun MFInitMediaTypeFromAMMediaType(pMFType : Void*, pAMType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT

    fun MFInitAMMediaTypeFromMFMediaType(pMFType : Void*, guidFormatBlockType : LibC::GUID, pAMType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE*) : Win32cr::Foundation::HRESULT

    fun MFCreateAMMediaTypeFromMFMediaType(pMFType : Void*, guidFormatBlockType : LibC::GUID, ppAMType : Win32cr::Media::MediaFoundation::AM_MEDIA_TYPE**) : Win32cr::Foundation::HRESULT

    fun MFCompareFullToPartialMediaType(pMFTypeFull : Void*, pMFTypePartial : Void*) : Win32cr::Foundation::BOOL

    fun MFWrapMediaType(pOrig : Void*, major_type : LibC::GUID*, sub_type : LibC::GUID*, ppWrap : Void**) : Win32cr::Foundation::HRESULT

    fun MFUnwrapMediaType(pWrap : Void*, ppOrig : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoMediaType(pVideoFormat : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*, ppIVideoMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoMediaTypeFromSubtype(pAMSubtype : LibC::GUID*, ppIVideoMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFIsFormatYUV(format : UInt32) : Win32cr::Foundation::BOOL

    fun MFCreateVideoMediaTypeFromBitMapInfoHeader(pbmihBitMapInfoHeader : Win32cr::Graphics::Gdi::BITMAPINFOHEADER*, dwPixelAspectRatioX : UInt32, dwPixelAspectRatioY : UInt32, interlace_mode : Win32cr::Media::MediaFoundation::MFVideoInterlaceMode, video_flags : UInt64, qwFramesPerSecondNumerator : UInt64, qwFramesPerSecondDenominator : UInt64, dwMaxBitRate : UInt32, ppIVideoMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetStrideForBitmapInfoHeader(format : UInt32, dwWidth : UInt32, pStride : Int32*) : Win32cr::Foundation::HRESULT

    fun MFGetPlaneSize(format : UInt32, dwWidth : UInt32, dwHeight : UInt32, pdwPlaneSize : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(pbmihBitMapInfoHeader : Win32cr::Graphics::Gdi::BITMAPINFOHEADER*, cbBitMapInfoHeader : UInt32, dwPixelAspectRatioX : UInt32, dwPixelAspectRatioY : UInt32, interlace_mode : Win32cr::Media::MediaFoundation::MFVideoInterlaceMode, video_flags : UInt64, dwFramesPerSecondNumerator : UInt32, dwFramesPerSecondDenominator : UInt32, dwMaxBitRate : UInt32, ppIVideoMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaTypeFromRepresentation(guidRepresentation : LibC::GUID, pvRepresentation : Void*, ppIMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateAudioMediaType(pAudioFormat : Win32cr::Media::Audio::WAVEFORMATEX*, ppIAudioMediaType : Void**) : Win32cr::Foundation::HRESULT

    fun MFGetUncompressedVideoFormat(pVideoFormat : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*) : UInt32

    fun MFInitVideoFormat(pVideoFormat : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*, type__ : Win32cr::Media::MediaFoundation::MFStandardVideoFormat) : Win32cr::Foundation::HRESULT

    fun MFInitVideoFormat_RGB(pVideoFormat : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*, dwWidth : UInt32, dwHeight : UInt32, d3_dfmt : UInt32) : Win32cr::Foundation::HRESULT

    fun MFConvertColorInfoToDXVA(pdwToDXVA : UInt32*, pFromFormat : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*) : Win32cr::Foundation::HRESULT

    fun MFConvertColorInfoFromDXVA(pToFormat : Win32cr::Media::MediaFoundation::MFVIDEOFORMAT*, dwFromDXVA : UInt32) : Win32cr::Foundation::HRESULT

    fun MFCopyImage(pDest : UInt8*, lDestStride : Int32, pSrc : UInt8*, lSrcStride : Int32, dwWidthInBytes : UInt32, dwLines : UInt32) : Win32cr::Foundation::HRESULT

    fun MFConvertFromFP16Array(pDest : Float32*, pSrc : UInt16*, dwCount : UInt32) : Win32cr::Foundation::HRESULT

    fun MFConvertToFP16Array(pDest : UInt16*, pSrc : Float32*, dwCount : UInt32) : Win32cr::Foundation::HRESULT

    fun MFCreate2DMediaBuffer(dwWidth : UInt32, dwHeight : UInt32, dwFourCC : UInt32, fBottomUp : Win32cr::Foundation::BOOL, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateMediaBufferFromMediaType(pMediaType : Void*, llDuration : Int64, dwMinLength : UInt32, dwMinAlignment : UInt32, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateCollection(ppIMFCollection : Void**) : Win32cr::Foundation::HRESULT

    fun MFHeapAlloc(nSize : LibC::UIntPtrT, dwFlags : UInt32, pszFile : Win32cr::Foundation::PSTR, line : Int32, eat : Win32cr::Media::MediaFoundation::EAllocationType) : Void*

    fun MFHeapFree(pv : Void*) : Void

    fun MFllMulDiv(a : Int64, b : Int64, c : Int64, d : Int64) : Int64

    fun MFGetContentProtectionSystemCLSID(guidProtectionSystemID : LibC::GUID*, pclsid : LibC::GUID*) : Win32cr::Foundation::HRESULT

    fun MFCombineSamples(pSample : Void*, pSampleToAdd : Void*, dwMaxMergedDurationInMS : UInt32, pMerged : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT

    fun MFSplitSample(pSample : Void*, pOutputSamples : Void**, dwOutputSampleMaxCount : UInt32, pdwOutputSampleCount : UInt32*) : Win32cr::Foundation::HRESULT

    fun MFCreateSourceReaderFromURL(pwszURL : Win32cr::Foundation::PWSTR, pAttributes : Void*, ppSourceReader : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSourceReaderFromByteStream(pByteStream : Void*, pAttributes : Void*, ppSourceReader : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSourceReaderFromMediaSource(pMediaSource : Void*, pAttributes : Void*, ppSourceReader : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSinkWriterFromURL(pwszOutputURL : Win32cr::Foundation::PWSTR, pByteStream : Void*, pAttributes : Void*, ppSinkWriter : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateSinkWriterFromMediaSink(pMediaSink : Void*, pAttributes : Void*, ppSinkWriter : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoPresenter(pOwner : Void*, riidDevice : LibC::GUID*, riid : LibC::GUID*, ppVideoPresenter : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoMixer(pOwner : Void*, riidDevice : LibC::GUID*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoMixerAndPresenter(pMixerOwner : Void*, pPresenterOwner : Void*, riidMixer : LibC::GUID*, ppvVideoMixer : Void**, riidPresenter : LibC::GUID*, ppvVideoPresenter : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoRenderer(riidRenderer : LibC::GUID*, ppVideoRenderer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoSampleFromSurface(pUnkSurface : Void*, ppSample : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVideoSampleAllocator(riid : LibC::GUID*, ppSampleAllocator : Void**) : Win32cr::Foundation::HRESULT

    fun MFPCreateMediaPlayer(pwszURL : Win32cr::Foundation::PWSTR, fStartPlayback : Win32cr::Foundation::BOOL, creationOptions : Win32cr::Media::MediaFoundation::MFP_CREATION_OPTIONS, pCallback : Void*, hWnd : Win32cr::Foundation::HWND, ppMediaPlayer : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateEncryptedMediaExtensionsStoreActivate(pmpHost : Void*, objectStream : Void*, classId : Win32cr::Foundation::PWSTR, activate : Void**) : Win32cr::Foundation::HRESULT

    fun MFCreateVirtualCamera(type__ : Win32cr::Media::MediaFoundation::MFVirtualCameraType, lifetime : Win32cr::Media::MediaFoundation::MFVirtualCameraLifetime, access : Win32cr::Media::MediaFoundation::MFVirtualCameraAccess, friendlyName : Win32cr::Foundation::PWSTR, sourceId : Win32cr::Foundation::PWSTR, categories : LibC::GUID*, categoryCount : UInt32, virtualCamera : Void**) : Win32cr::Foundation::HRESULT

    fun MFIsVirtualCameraTypeSupported(type__ : Win32cr::Media::MediaFoundation::MFVirtualCameraType, supported : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT

    fun OPMXboxEnableHDCP(hdcp_type : Win32cr::Media::MediaFoundation::OPM_HDCP_TYPE) : Win32cr::Foundation::HRESULT

    fun OPMXboxGetHDCPStatus(pHDCPStatus : Win32cr::Media::MediaFoundation::OPM_HDCP_STATUS*) : Win32cr::Foundation::HRESULT

    fun OPMXboxGetHDCPStatusAndType(pHDCPStatus : Win32cr::Media::MediaFoundation::OPM_HDCP_STATUS*, pHDCPType : Win32cr::Media::MediaFoundation::OPM_HDCP_TYPE*) : Win32cr::Foundation::HRESULT

  end
end