require "./multimedia.cr"
require "./../foundation.cr"
require "./../system/com.cr"
require "./../media.cr"
require "./../system/com/structured_storage.cr"
require "./../ui/shell/properties_system.cr"
require "./../ui/windows_and_messaging.cr"

module Win32cr::Media::Audio
  alias HMIDI = LibC::IntPtrT
  alias HMIDIIN = LibC::IntPtrT
  alias HMIDIOUT = LibC::IntPtrT
  alias HMIDISTRM = LibC::IntPtrT
  alias HMIXER = LibC::IntPtrT
  alias HMIXEROBJ = LibC::IntPtrT
  alias HWAVE = LibC::IntPtrT
  alias HWAVEOUT = LibC::IntPtrT
  alias HWAVEIN = LibC::IntPtrT
  alias HACMDRIVERID = LibC::IntPtrT
  alias HACMDRIVER = LibC::IntPtrT
  alias HACMSTREAM = LibC::IntPtrT
  alias HACMOBJ = LibC::IntPtrT
  alias LPWAVECALLBACK = Proc(Win32cr::Media::Multimedia::HDRVR, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Void)*

  alias LPMIDICALLBACK = Proc(Win32cr::Media::Multimedia::HDRVR, UInt32, LibC::UIntPtrT, LibC::UIntPtrT, LibC::UIntPtrT, Void)*

  alias PAudioStateMonitorCallback = Proc(Void*, Void*, Void)*

  alias ACMDRIVERENUMCB = Proc(Win32cr::Media::Audio::HACMDRIVERID, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias LPACMDRIVERPROC = Proc(LibC::UIntPtrT, Win32cr::Media::Audio::HACMDRIVERID, UInt32, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LPARAM, Win32cr::Foundation::LRESULT)*

  alias ACMFORMATTAGENUMCBA = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::ACMFORMATTAGDETAILSA*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFORMATTAGENUMCBW = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::ACMFORMATTAGDETAILSW*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFORMATENUMCBA = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::ACMFORMATDETAILSA*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFORMATENUMCBW = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::Tacmformatdetailsw*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFORMATCHOOSEHOOKPROCA = Proc(Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, UInt32)*

  alias ACMFORMATCHOOSEHOOKPROCW = Proc(Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, UInt32)*

  alias ACMFILTERTAGENUMCBA = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::ACMFILTERTAGDETAILSA*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFILTERTAGENUMCBW = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::ACMFILTERTAGDETAILSW*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFILTERENUMCBA = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::ACMFILTERDETAILSA*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFILTERENUMCBW = Proc(Win32cr::Media::Audio::HACMDRIVERID, Win32cr::Media::Audio::ACMFILTERDETAILSW*, LibC::UIntPtrT, UInt32, Win32cr::Foundation::BOOL)*

  alias ACMFILTERCHOOSEHOOKPROCA = Proc(Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, UInt32)*

  alias ACMFILTERCHOOSEHOOKPROCW = Proc(Win32cr::Foundation::HWND, UInt32, Win32cr::Foundation::WPARAM, Win32cr::Foundation::LPARAM, UInt32)*

  MIXERCONTROL_CONTROLTYPE_CUSTOM = 0_u32
  MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 268500992_u32
  MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 268566528_u32
  MIXERCONTROL_CONTROLTYPE_PEAKMETER = 268566529_u32
  MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 268632064_u32
  MIXERCONTROL_CONTROLTYPE_BOOLEAN = 536936448_u32
  MIXERCONTROL_CONTROLTYPE_ONOFF = 536936449_u32
  MIXERCONTROL_CONTROLTYPE_MUTE = 536936450_u32
  MIXERCONTROL_CONTROLTYPE_MONO = 536936451_u32
  MIXERCONTROL_CONTROLTYPE_LOUDNESS = 536936452_u32
  MIXERCONTROL_CONTROLTYPE_STEREOENH = 536936453_u32
  MIXERCONTROL_CONTROLTYPE_BASS_BOOST = 536945271_u32
  MIXERCONTROL_CONTROLTYPE_BUTTON = 553713664_u32
  MIXERCONTROL_CONTROLTYPE_DECIBELS = 805568512_u32
  MIXERCONTROL_CONTROLTYPE_SIGNED = 805437440_u32
  MIXERCONTROL_CONTROLTYPE_UNSIGNED = 805502976_u32
  MIXERCONTROL_CONTROLTYPE_PERCENT = 805634048_u32
  MIXERCONTROL_CONTROLTYPE_SLIDER = 1073872896_u32
  MIXERCONTROL_CONTROLTYPE_PAN = 1073872897_u32
  MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 1073872898_u32
  MIXERCONTROL_CONTROLTYPE_FADER = 1342373888_u32
  MIXERCONTROL_CONTROLTYPE_VOLUME = 1342373889_u32
  MIXERCONTROL_CONTROLTYPE_BASS = 1342373890_u32
  MIXERCONTROL_CONTROLTYPE_TREBLE = 1342373891_u32
  MIXERCONTROL_CONTROLTYPE_EQUALIZER = 1342373892_u32
  MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 1879113728_u32
  MIXERCONTROL_CONTROLTYPE_MUX = 1879113729_u32
  MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 1895890944_u32
  MIXERCONTROL_CONTROLTYPE_MIXER = 1895890945_u32
  MIXERCONTROL_CONTROLTYPE_MICROTIME = 1610809344_u32
  MIXERCONTROL_CONTROLTYPE_MILLITIME = 1627586560_u32
  WAVE_MAPPER = 4294967295_u32
  ENDPOINT_FORMAT_RESET_MIX_ONLY = 1_u32
  ENDPOINT_HARDWARE_SUPPORT_VOLUME = 1_u32
  ENDPOINT_HARDWARE_SUPPORT_MUTE = 2_u32
  ENDPOINT_HARDWARE_SUPPORT_METER = 4_u32
  AUDIOCLOCK_CHARACTERISTIC_FIXED_FREQ = 1_u32
  AMBISONICS_PARAM_VERSION_1 = 1_u32
  AUDCLNT_E_NOT_INITIALIZED = -2004287487_i32
  AUDCLNT_E_ALREADY_INITIALIZED = -2004287486_i32
  AUDCLNT_E_WRONG_ENDPOINT_TYPE = -2004287485_i32
  AUDCLNT_E_DEVICE_INVALIDATED = -2004287484_i32
  AUDCLNT_E_NOT_STOPPED = -2004287483_i32
  AUDCLNT_E_BUFFER_TOO_LARGE = -2004287482_i32
  AUDCLNT_E_OUT_OF_ORDER = -2004287481_i32
  AUDCLNT_E_UNSUPPORTED_FORMAT = -2004287480_i32
  AUDCLNT_E_INVALID_SIZE = -2004287479_i32
  AUDCLNT_E_DEVICE_IN_USE = -2004287478_i32
  AUDCLNT_E_BUFFER_OPERATION_PENDING = -2004287477_i32
  AUDCLNT_E_THREAD_NOT_REGISTERED = -2004287476_i32
  AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED = -2004287474_i32
  AUDCLNT_E_ENDPOINT_CREATE_FAILED = -2004287473_i32
  AUDCLNT_E_SERVICE_NOT_RUNNING = -2004287472_i32
  AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED = -2004287471_i32
  AUDCLNT_E_EXCLUSIVE_MODE_ONLY = -2004287470_i32
  AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL = -2004287469_i32
  AUDCLNT_E_EVENTHANDLE_NOT_SET = -2004287468_i32
  AUDCLNT_E_INCORRECT_BUFFER_SIZE = -2004287467_i32
  AUDCLNT_E_BUFFER_SIZE_ERROR = -2004287466_i32
  AUDCLNT_E_CPUUSAGE_EXCEEDED = -2004287465_i32
  AUDCLNT_E_BUFFER_ERROR = -2004287464_i32
  AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED = -2004287463_i32
  AUDCLNT_E_INVALID_DEVICE_PERIOD = -2004287456_i32
  AUDCLNT_E_INVALID_STREAM_FLAG = -2004287455_i32
  AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE = -2004287454_i32
  AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES = -2004287453_i32
  AUDCLNT_E_OFFLOAD_MODE_ONLY = -2004287452_i32
  AUDCLNT_E_NONOFFLOAD_MODE_ONLY = -2004287451_i32
  AUDCLNT_E_RESOURCES_INVALIDATED = -2004287450_i32
  AUDCLNT_E_RAW_MODE_UNSUPPORTED = -2004287449_i32
  AUDCLNT_E_ENGINE_PERIODICITY_LOCKED = -2004287448_i32
  AUDCLNT_E_ENGINE_FORMAT_LOCKED = -2004287447_i32
  AUDCLNT_E_HEADTRACKING_ENABLED = -2004287440_i32
  AUDCLNT_E_HEADTRACKING_UNSUPPORTED = -2004287424_i32
  AUDCLNT_E_EFFECT_NOT_AVAILABLE = -2004287423_i32
  AUDCLNT_E_EFFECT_STATE_READ_ONLY = -2004287422_i32
  AUDCLNT_S_BUFFER_EMPTY = 143196161_i32
  AUDCLNT_S_THREAD_ALREADY_REGISTERED = 143196162_i32
  AUDCLNT_S_POSITION_STALLED = 143196163_i32
  AUDCLNT_STREAMFLAGS_CROSSPROCESS = 65536_u32
  AUDCLNT_STREAMFLAGS_LOOPBACK = 131072_u32
  AUDCLNT_STREAMFLAGS_EVENTCALLBACK = 262144_u32
  AUDCLNT_STREAMFLAGS_NOPERSIST = 524288_u32
  AUDCLNT_STREAMFLAGS_RATEADJUST = 1048576_u32
  AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY = 134217728_u32
  AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM = 2147483648_u32
  AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED = 268435456_u32
  AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE = 536870912_u32
  AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED = 1073741824_u32
  SPTLAUDCLNT_E_DESTROYED = -2004287232_i32
  SPTLAUDCLNT_E_OUT_OF_ORDER = -2004287231_i32
  SPTLAUDCLNT_E_RESOURCES_INVALIDATED = -2004287230_i32
  SPTLAUDCLNT_E_NO_MORE_OBJECTS = -2004287229_i32
  SPTLAUDCLNT_E_PROPERTY_NOT_SUPPORTED = -2004287228_i32
  SPTLAUDCLNT_E_ERRORS_IN_OBJECT_CALLS = -2004287227_i32
  SPTLAUDCLNT_E_METADATA_FORMAT_NOT_SUPPORTED = -2004287226_i32
  SPTLAUDCLNT_E_STREAM_NOT_AVAILABLE = -2004287225_i32
  SPTLAUDCLNT_E_INVALID_LICENSE = -2004287224_i32
  SPTLAUDCLNT_E_STREAM_NOT_STOPPED = -2004287222_i32
  SPTLAUDCLNT_E_STATIC_OBJECT_NOT_AVAILABLE = -2004287221_i32
  SPTLAUDCLNT_E_OBJECT_ALREADY_ACTIVE = -2004287220_i32
  SPTLAUDCLNT_E_INTERNAL = -2004287219_i32
  DEVICE_STATE_ACTIVE = 1_u32
  DEVICE_STATE_DISABLED = 2_u32
  DEVICE_STATE_NOTPRESENT = 4_u32
  DEVICE_STATE_UNPLUGGED = 8_u32
  DEVICE_STATEMASK_ALL = 15_u32
  PKEY_AudioEndpoint_FormFactor = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 0_u32)
  PKEY_AudioEndpoint_ControlPanelPageProvider = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 1_u32)
  PKEY_AudioEndpoint_Association = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 2_u32)
  PKEY_AudioEndpoint_PhysicalSpeakers = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 3_u32)
  PKEY_AudioEndpoint_GUID = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 4_u32)
  PKEY_AudioEndpoint_Disable_SysFx = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 5_u32)
  ENDPOINT_SYSFX_ENABLED = 0_u32
  ENDPOINT_SYSFX_DISABLED = 1_u32
  PKEY_AudioEndpoint_FullRangeSpeakers = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 6_u32)
  PKEY_AudioEndpoint_Supports_EventDriven_Mode = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 7_u32)
  PKEY_AudioEndpoint_JackSubType = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 8_u32)
  PKEY_AudioEndpoint_Default_VolumeInDb = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 9_u32)
  PKEY_AudioEngine_DeviceFormat = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0xf19f064d_u32, 0x82c_u16, 0x4e27_u16, StaticArray[0xbc_u8, 0x73_u8, 0x68_u8, 0x82_u8, 0xa1_u8, 0xbb_u8, 0x8e_u8, 0x4c_u8]), 0_u32)
  PKEY_AudioEngine_OEMFormat = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0xe4870e26_u32, 0x3cc5_u16, 0x4cd2_u16, StaticArray[0xba_u8, 0x46_u8, 0xca_u8, 0xa_u8, 0x9a_u8, 0x70_u8, 0xed_u8, 0x4_u8]), 3_u32)
  PKEY_AudioEndpointLogo_IconEffects = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0xf1ab780d_u32, 0x2010_u16, 0x4ed3_u16, StaticArray[0xa3_u8, 0xa6_u8, 0x8b_u8, 0x87_u8, 0xf0_u8, 0xf0_u8, 0xc4_u8, 0x76_u8]), 0_u32)
  PKEY_AudioEndpointLogo_IconPath = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0xf1ab780d_u32, 0x2010_u16, 0x4ed3_u16, StaticArray[0xa3_u8, 0xa6_u8, 0x8b_u8, 0x87_u8, 0xf0_u8, 0xf0_u8, 0xc4_u8, 0x76_u8]), 1_u32)
  PKEY_AudioEndpointSettings_MenuText = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x14242002_u32, 0x320_u16, 0x4de4_u16, StaticArray[0x95_u8, 0x55_u8, 0xa7_u8, 0xd8_u8, 0x2b_u8, 0x73_u8, 0xc2_u8, 0x86_u8]), 0_u32)
  PKEY_AudioEndpointSettings_LaunchContract = UI::Shell::PropertiesSystem::PROPERTYKEY.new(LibC::GUID.new(0x14242002_u32, 0x320_u16, 0x4de4_u16, StaticArray[0x95_u8, 0x55_u8, 0xa7_u8, 0xd8_u8, 0x2b_u8, 0x73_u8, 0xc2_u8, 0x86_u8]), 1_u32)
  DEVINTERFACE_AUDIO_RENDER = "e6327cad-dcec-4949-ae8a-991e976a79d2"
  DEVINTERFACE_AUDIO_CAPTURE = "2eef81be-33fa-4800-9670-1cd474972c3f"
  DEVINTERFACE_MIDI_OUTPUT = "6dc23320-ab33-4ce4-80d4-bbb3ebbf2814"
  DEVINTERFACE_MIDI_INPUT = "504be32c-ccf6-4d2c-b73f-6f8b3747e22b"
  EVENTCONTEXT_VOLUMESLIDER = "e2c2e9de-09b1-4b04-84e5-07931225ee04"
  SPATIAL_AUDIO_STANDARD_COMMANDS_START = 200_u32
  SPATIAL_AUDIO_POSITION = 200_u32
  SPTLAUD_MD_CLNT_E_COMMAND_NOT_FOUND = -2004286976_i32
  SPTLAUD_MD_CLNT_E_OBJECT_NOT_INITIALIZED = -2004286975_i32
  SPTLAUD_MD_CLNT_E_INVALID_ARGS = -2004286974_i32
  SPTLAUD_MD_CLNT_E_METADATA_FORMAT_NOT_FOUND = -2004286973_i32
  SPTLAUD_MD_CLNT_E_VALUE_BUFFER_INCORRECT_SIZE = -2004286972_i32
  SPTLAUD_MD_CLNT_E_MEMORY_BOUNDS = -2004286971_i32
  SPTLAUD_MD_CLNT_E_NO_MORE_COMMANDS = -2004286970_i32
  SPTLAUD_MD_CLNT_E_BUFFER_ALREADY_ATTACHED = -2004286969_i32
  SPTLAUD_MD_CLNT_E_BUFFER_NOT_ATTACHED = -2004286968_i32
  SPTLAUD_MD_CLNT_E_FRAMECOUNT_OUT_OF_RANGE = -2004286967_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMS_FOUND = -2004286960_i32
  SPTLAUD_MD_CLNT_E_ITEM_COPY_OVERFLOW = -2004286959_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMS_OPEN = -2004286958_i32
  SPTLAUD_MD_CLNT_E_ITEMS_ALREADY_OPEN = -2004286957_i32
  SPTLAUD_MD_CLNT_E_ATTACH_FAILED_INTERNAL_BUFFER = -2004286956_i32
  SPTLAUD_MD_CLNT_E_DETACH_FAILED_INTERNAL_BUFFER = -2004286955_i32
  SPTLAUD_MD_CLNT_E_NO_BUFFER_ATTACHED = -2004286954_i32
  SPTLAUD_MD_CLNT_E_NO_MORE_ITEMS = -2004286953_i32
  SPTLAUD_MD_CLNT_E_FRAMEOFFSET_OUT_OF_RANGE = -2004286952_i32
  SPTLAUD_MD_CLNT_E_ITEM_MUST_HAVE_COMMANDS = -2004286951_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMOFFSET_WRITTEN = -2004286944_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMS_WRITTEN = -2004286943_i32
  SPTLAUD_MD_CLNT_E_COMMAND_ALREADY_WRITTEN = -2004286942_i32
  SPTLAUD_MD_CLNT_E_FORMAT_MISMATCH = -2004286941_i32
  SPTLAUD_MD_CLNT_E_BUFFER_STILL_ATTACHED = -2004286940_i32
  SPTLAUD_MD_CLNT_E_ITEMS_LOCKED_FOR_WRITING = -2004286939_i32
  VIRTUAL_AUDIO_DEVICE_PROCESS_LOOPBACK = "VAD\\Process_Loopback"
  WAVERR_BADFORMAT = 32_u32
  WAVERR_STILLPLAYING = 33_u32
  WAVERR_UNPREPARED = 34_u32
  WAVERR_SYNC = 35_u32
  WAVERR_LASTERROR = 35_u32
  WHDR_DONE = 1_u32
  WHDR_PREPARED = 2_u32
  WHDR_BEGINLOOP = 4_u32
  WHDR_ENDLOOP = 8_u32
  WHDR_INQUEUE = 16_u32
  WAVECAPS_PITCH = 1_u32
  WAVECAPS_PLAYBACKRATE = 2_u32
  WAVECAPS_VOLUME = 4_u32
  WAVECAPS_LRVOLUME = 8_u32
  WAVECAPS_SYNC = 16_u32
  WAVECAPS_SAMPLEACCURATE = 32_u32
  WAVE_INVALIDFORMAT = 0_u32
  WAVE_FORMAT_1M08 = 1_u32
  WAVE_FORMAT_1S08 = 2_u32
  WAVE_FORMAT_1M16 = 4_u32
  WAVE_FORMAT_1S16 = 8_u32
  WAVE_FORMAT_2M08 = 16_u32
  WAVE_FORMAT_2S08 = 32_u32
  WAVE_FORMAT_2M16 = 64_u32
  WAVE_FORMAT_2S16 = 128_u32
  WAVE_FORMAT_4M08 = 256_u32
  WAVE_FORMAT_4S08 = 512_u32
  WAVE_FORMAT_4M16 = 1024_u32
  WAVE_FORMAT_4S16 = 2048_u32
  WAVE_FORMAT_44M08 = 256_u32
  WAVE_FORMAT_44S08 = 512_u32
  WAVE_FORMAT_44M16 = 1024_u32
  WAVE_FORMAT_44S16 = 2048_u32
  WAVE_FORMAT_48M08 = 4096_u32
  WAVE_FORMAT_48S08 = 8192_u32
  WAVE_FORMAT_48M16 = 16384_u32
  WAVE_FORMAT_48S16 = 32768_u32
  WAVE_FORMAT_96M08 = 65536_u32
  WAVE_FORMAT_96S08 = 131072_u32
  WAVE_FORMAT_96M16 = 262144_u32
  WAVE_FORMAT_96S16 = 524288_u32
  WAVE_FORMAT_PCM = 1_u32
  MIDIERR_UNPREPARED = 64_u32
  MIDIERR_STILLPLAYING = 65_u32
  MIDIERR_NOMAP = 66_u32
  MIDIERR_NOTREADY = 67_u32
  MIDIERR_NODEVICE = 68_u32
  MIDIERR_INVALIDSETUP = 69_u32
  MIDIERR_BADOPENMODE = 70_u32
  MIDIERR_DONT_CONTINUE = 71_u32
  MIDIERR_LASTERROR = 71_u32
  MIDIPATCHSIZE = 128_u32
  MIDI_CACHE_ALL = 1_u32
  MIDI_CACHE_BESTFIT = 2_u32
  MIDI_CACHE_QUERY = 3_u32
  MIDI_UNCACHE = 4_u32
  MOD_MIDIPORT = 1_u32
  MOD_SYNTH = 2_u32
  MOD_SQSYNTH = 3_u32
  MOD_FMSYNTH = 4_u32
  MOD_MAPPER = 5_u32
  MOD_WAVETABLE = 6_u32
  MOD_SWSYNTH = 7_u32
  MIDICAPS_VOLUME = 1_u32
  MIDICAPS_LRVOLUME = 2_u32
  MIDICAPS_CACHE = 4_u32
  MIDICAPS_STREAM = 8_u32
  MHDR_DONE = 1_u32
  MHDR_PREPARED = 2_u32
  MHDR_INQUEUE = 4_u32
  MHDR_ISSTRM = 8_u32
  MEVT_F_SHORT = 0_i32
  MEVT_F_LONG = -2147483648_i32
  MEVT_F_CALLBACK = 1073741824_i32
  MIDISTRM_ERROR = -2_i32
  MIDIPROP_SET = -2147483648_i32
  MIDIPROP_GET = 1073741824_i32
  MIDIPROP_TIMEDIV = 1_i32
  MIDIPROP_TEMPO = 2_i32
  AUXCAPS_CDAUDIO = 1_u32
  AUXCAPS_AUXIN = 2_u32
  AUXCAPS_VOLUME = 1_u32
  AUXCAPS_LRVOLUME = 2_u32
  MIXER_SHORT_NAME_CHARS = 16_u32
  MIXER_LONG_NAME_CHARS = 64_u32
  MIXERR_INVALLINE = 1024_u32
  MIXERR_INVALCONTROL = 1025_u32
  MIXERR_INVALVALUE = 1026_u32
  MIXERR_LASTERROR = 1026_u32
  MIXER_OBJECTF_HANDLE = -2147483648_i32
  MIXER_OBJECTF_MIXER = 0_i32
  MIXER_OBJECTF_WAVEOUT = 268435456_i32
  MIXER_OBJECTF_WAVEIN = 536870912_i32
  MIXER_OBJECTF_MIDIOUT = 805306368_i32
  MIXER_OBJECTF_MIDIIN = 1073741824_i32
  MIXER_OBJECTF_AUX = 1342177280_i32
  MIXERLINE_LINEF_ACTIVE = 1_i32
  MIXERLINE_LINEF_DISCONNECTED = 32768_i32
  MIXERLINE_LINEF_SOURCE = -2147483648_i32
  MIXERLINE_COMPONENTTYPE_DST_FIRST = 0_i32
  MIXERLINE_COMPONENTTYPE_DST_LAST = 8_u32
  MIXERLINE_COMPONENTTYPE_SRC_FIRST = 4096_i32
  MIXERLINE_COMPONENTTYPE_SRC_LAST = 4106_u32
  MIXERLINE_TARGETTYPE_UNDEFINED = 0_u32
  MIXERLINE_TARGETTYPE_WAVEOUT = 1_u32
  MIXERLINE_TARGETTYPE_WAVEIN = 2_u32
  MIXERLINE_TARGETTYPE_MIDIOUT = 3_u32
  MIXERLINE_TARGETTYPE_MIDIIN = 4_u32
  MIXERLINE_TARGETTYPE_AUX = 5_u32
  MIXER_GETLINEINFOF_DESTINATION = 0_i32
  MIXER_GETLINEINFOF_SOURCE = 1_i32
  MIXER_GETLINEINFOF_LINEID = 2_i32
  MIXER_GETLINEINFOF_COMPONENTTYPE = 3_i32
  MIXER_GETLINEINFOF_TARGETTYPE = 4_i32
  MIXER_GETLINEINFOF_QUERYMASK = 15_i32
  MIXERCONTROL_CONTROLF_UNIFORM = 1_i32
  MIXERCONTROL_CONTROLF_MULTIPLE = 2_i32
  MIXERCONTROL_CONTROLF_DISABLED = -2147483648_i32
  MIXERCONTROL_CT_CLASS_MASK = -268435456_i32
  MIXERCONTROL_CT_CLASS_CUSTOM = 0_i32
  MIXERCONTROL_CT_CLASS_METER = 268435456_i32
  MIXERCONTROL_CT_CLASS_SWITCH = 536870912_i32
  MIXERCONTROL_CT_CLASS_NUMBER = 805306368_i32
  MIXERCONTROL_CT_CLASS_SLIDER = 1073741824_i32
  MIXERCONTROL_CT_CLASS_FADER = 1342177280_i32
  MIXERCONTROL_CT_CLASS_TIME = 1610612736_i32
  MIXERCONTROL_CT_CLASS_LIST = 1879048192_i32
  MIXERCONTROL_CT_SUBCLASS_MASK = 251658240_i32
  MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0_i32
  MIXERCONTROL_CT_SC_SWITCH_BUTTON = 16777216_i32
  MIXERCONTROL_CT_SC_METER_POLLED = 0_i32
  MIXERCONTROL_CT_SC_TIME_MICROSECS = 0_i32
  MIXERCONTROL_CT_SC_TIME_MILLISECS = 16777216_i32
  MIXERCONTROL_CT_SC_LIST_SINGLE = 0_i32
  MIXERCONTROL_CT_SC_LIST_MULTIPLE = 16777216_i32
  MIXERCONTROL_CT_UNITS_MASK = 16711680_i32
  MIXERCONTROL_CT_UNITS_CUSTOM = 0_i32
  MIXERCONTROL_CT_UNITS_BOOLEAN = 65536_i32
  MIXERCONTROL_CT_UNITS_SIGNED = 131072_i32
  MIXERCONTROL_CT_UNITS_UNSIGNED = 196608_i32
  MIXERCONTROL_CT_UNITS_DECIBELS = 262144_i32
  MIXERCONTROL_CT_UNITS_PERCENT = 327680_i32
  MIXER_GETLINECONTROLSF_ALL = 0_i32
  MIXER_GETLINECONTROLSF_ONEBYID = 1_i32
  MIXER_GETLINECONTROLSF_ONEBYTYPE = 2_i32
  MIXER_GETLINECONTROLSF_QUERYMASK = 15_i32
  MIXER_GETCONTROLDETAILSF_VALUE = 0_i32
  MIXER_GETCONTROLDETAILSF_LISTTEXT = 1_i32
  MIXER_GETCONTROLDETAILSF_QUERYMASK = 15_i32
  MIXER_SETCONTROLDETAILSF_VALUE = 0_i32
  MIXER_SETCONTROLDETAILSF_CUSTOM = 1_i32
  MIXER_SETCONTROLDETAILSF_QUERYMASK = 15_i32
  DRV_MAPPER_PREFERRED_INPUT_GET = 16384_u32
  DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386_u32
  DRVM_MAPPER = 8192_u32
  DRVM_MAPPER_STATUS = 8192_u32
  WIDM_MAPPER_STATUS = 8192_u32
  WAVEIN_MAPPER_STATUS_DEVICE = 0_u32
  WAVEIN_MAPPER_STATUS_MAPPED = 1_u32
  WAVEIN_MAPPER_STATUS_FORMAT = 2_u32
  WODM_MAPPER_STATUS = 8192_u32
  WAVEOUT_MAPPER_STATUS_DEVICE = 0_u32
  WAVEOUT_MAPPER_STATUS_MAPPED = 1_u32
  WAVEOUT_MAPPER_STATUS_FORMAT = 2_u32
  ACMERR_BASE = 512_u32
  ACMERR_NOTPOSSIBLE = 512_u32
  ACMERR_BUSY = 513_u32
  ACMERR_UNPREPARED = 514_u32
  ACMERR_CANCELED = 515_u32
  ACM_METRIC_COUNT_DRIVERS = 1_u32
  ACM_METRIC_COUNT_CODECS = 2_u32
  ACM_METRIC_COUNT_CONVERTERS = 3_u32
  ACM_METRIC_COUNT_FILTERS = 4_u32
  ACM_METRIC_COUNT_DISABLED = 5_u32
  ACM_METRIC_COUNT_HARDWARE = 6_u32
  ACM_METRIC_COUNT_LOCAL_DRIVERS = 20_u32
  ACM_METRIC_COUNT_LOCAL_CODECS = 21_u32
  ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22_u32
  ACM_METRIC_COUNT_LOCAL_FILTERS = 23_u32
  ACM_METRIC_COUNT_LOCAL_DISABLED = 24_u32
  ACM_METRIC_HARDWARE_WAVE_INPUT = 30_u32
  ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31_u32
  ACM_METRIC_MAX_SIZE_FORMAT = 50_u32
  ACM_METRIC_MAX_SIZE_FILTER = 51_u32
  ACM_METRIC_DRIVER_SUPPORT = 100_u32
  ACM_METRIC_DRIVER_PRIORITY = 101_u32
  ACM_DRIVERENUMF_NOLOCAL = 1073741824_i32
  ACM_DRIVERENUMF_DISABLED = -2147483648_i32
  ACM_DRIVERADDF_NAME = 1_i32
  ACM_DRIVERADDF_FUNCTION = 3_i32
  ACM_DRIVERADDF_NOTIFYHWND = 4_i32
  ACM_DRIVERADDF_TYPEMASK = 7_i32
  ACM_DRIVERADDF_LOCAL = 0_i32
  ACM_DRIVERADDF_GLOBAL = 8_i32
  ACMDM_USER = 16384_u32
  ACMDM_RESERVED_LOW = 24576_u32
  ACMDM_RESERVED_HIGH = 28671_u32
  ACMDM_DRIVER_ABOUT = 24587_u32
  ACM_DRIVERPRIORITYF_ENABLE = 1_i32
  ACM_DRIVERPRIORITYF_DISABLE = 2_i32
  ACM_DRIVERPRIORITYF_ABLEMASK = 3_i32
  ACM_DRIVERPRIORITYF_BEGIN = 65536_i32
  ACM_DRIVERPRIORITYF_END = 131072_i32
  ACM_DRIVERPRIORITYF_DEFERMASK = 196608_i32
  ACMDRIVERDETAILS_SHORTNAME_CHARS = 32_u32
  ACMDRIVERDETAILS_LONGNAME_CHARS = 128_u32
  ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80_u32
  ACMDRIVERDETAILS_LICENSING_CHARS = 128_u32
  ACMDRIVERDETAILS_FEATURES_CHARS = 512_u32
  ACMDRIVERDETAILS_SUPPORTF_CODEC = 1_i32
  ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2_i32
  ACMDRIVERDETAILS_SUPPORTF_FILTER = 4_i32
  ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8_i32
  ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16_i32
  ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824_i32
  ACMDRIVERDETAILS_SUPPORTF_DISABLED = -2147483648_i32
  ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48_u32
  ACM_FORMATTAGDETAILSF_INDEX = 0_i32
  ACM_FORMATTAGDETAILSF_FORMATTAG = 1_i32
  ACM_FORMATTAGDETAILSF_LARGESTSIZE = 2_i32
  ACM_FORMATTAGDETAILSF_QUERYMASK = 15_i32
  ACMFORMATDETAILS_FORMAT_CHARS = 128_u32
  ACM_FORMATDETAILSF_INDEX = 0_i32
  ACM_FORMATDETAILSF_FORMAT = 1_i32
  ACM_FORMATDETAILSF_QUERYMASK = 15_i32
  ACM_FORMATENUMF_WFORMATTAG = 65536_i32
  ACM_FORMATENUMF_NCHANNELS = 131072_i32
  ACM_FORMATENUMF_NSAMPLESPERSEC = 262144_i32
  ACM_FORMATENUMF_WBITSPERSAMPLE = 524288_i32
  ACM_FORMATENUMF_CONVERT = 1048576_i32
  ACM_FORMATENUMF_SUGGEST = 2097152_i32
  ACM_FORMATENUMF_HARDWARE = 4194304_i32
  ACM_FORMATENUMF_INPUT = 8388608_i32
  ACM_FORMATENUMF_OUTPUT = 16777216_i32
  ACM_FORMATSUGGESTF_WFORMATTAG = 65536_i32
  ACM_FORMATSUGGESTF_NCHANNELS = 131072_i32
  ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 262144_i32
  ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 524288_i32
  ACM_FORMATSUGGESTF_TYPEMASK = 16711680_i32
  ACMHELPMSGSTRINGA = "acmchoose_help"
  ACMHELPMSGSTRINGW = "acmchoose_help"
  ACMHELPMSGCONTEXTMENUA = "acmchoose_contextmenu"
  ACMHELPMSGCONTEXTMENUW = "acmchoose_contextmenu"
  ACMHELPMSGCONTEXTHELPA = "acmchoose_contexthelp"
  ACMHELPMSGCONTEXTHELPW = "acmchoose_contexthelp"
  ACMHELPMSGSTRING = "acmchoose_help"
  ACMHELPMSGCONTEXTMENU = "acmchoose_contextmenu"
  ACMHELPMSGCONTEXTHELP = "acmchoose_contexthelp"
  MM_ACM_FORMATCHOOSE = 32768_u32
  FORMATCHOOSE_MESSAGE = 0_u32
  FORMATCHOOSE_FORMATTAG_VERIFY = 0_u32
  FORMATCHOOSE_FORMAT_VERIFY = 1_u32
  FORMATCHOOSE_CUSTOM_VERIFY = 2_u32
  ACMFORMATCHOOSE_STYLEF_SHOWHELP = 4_i32
  ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 8_i32
  ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 16_i32
  ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32_i32
  ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 64_i32
  ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 128_i32
  ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48_u32
  ACM_FILTERTAGDETAILSF_INDEX = 0_i32
  ACM_FILTERTAGDETAILSF_FILTERTAG = 1_i32
  ACM_FILTERTAGDETAILSF_LARGESTSIZE = 2_i32
  ACM_FILTERTAGDETAILSF_QUERYMASK = 15_i32
  ACMFILTERDETAILS_FILTER_CHARS = 128_u32
  ACM_FILTERDETAILSF_INDEX = 0_i32
  ACM_FILTERDETAILSF_FILTER = 1_i32
  ACM_FILTERDETAILSF_QUERYMASK = 15_i32
  ACM_FILTERENUMF_DWFILTERTAG = 65536_i32
  MM_ACM_FILTERCHOOSE = 32768_u32
  FILTERCHOOSE_MESSAGE = 0_u32
  FILTERCHOOSE_FILTERTAG_VERIFY = 0_u32
  FILTERCHOOSE_FILTER_VERIFY = 1_u32
  FILTERCHOOSE_CUSTOM_VERIFY = 2_u32
  ACMFILTERCHOOSE_STYLEF_SHOWHELP = 4_i32
  ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 8_i32
  ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 16_i32
  ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32_i32
  ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 64_i32
  ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 128_i32
  ACMSTREAMHEADER_STATUSF_DONE = 65536_i32
  ACMSTREAMHEADER_STATUSF_PREPARED = 131072_i32
  ACMSTREAMHEADER_STATUSF_INQUEUE = 1048576_i32
  ACM_STREAMOPENF_QUERY = 1_u32
  ACM_STREAMOPENF_ASYNC = 2_u32
  ACM_STREAMOPENF_NONREALTIME = 4_u32
  ACM_STREAMSIZEF_SOURCE = 0_i32
  ACM_STREAMSIZEF_DESTINATION = 1_i32
  ACM_STREAMSIZEF_QUERYMASK = 15_i32
  ACM_STREAMCONVERTF_BLOCKALIGN = 4_u32
  ACM_STREAMCONVERTF_START = 16_u32
  ACM_STREAMCONVERTF_END = 32_u32
  SND_SYNC = 0_u32
  SND_ASYNC = 1_u32
  SND_NODEFAULT = 2_u32
  SND_MEMORY = 4_u32
  SND_LOOP = 8_u32
  SND_NOSTOP = 16_u32
  SND_NOWAIT = 8192_i32
  SND_ALIAS = 65536_i32
  SND_ALIAS_ID = 1114112_i32
  SND_FILENAME = 131072_i32
  SND_RESOURCE = 262148_i32
  SND_PURGE = 64_u32
  SND_APPLICATION = 128_u32
  SND_SENTRY = 524288_i32
  SND_RING = 1048576_i32
  SND_SYSTEM = 2097152_i32
  SND_ALIAS_START = 0_u32
  ACMDM_DRIVER_NOTIFY = 24577_u32
  ACMDM_DRIVER_DETAILS = 24586_u32
  ACMDM_HARDWARE_WAVE_CAPS_INPUT = 24596_u32
  ACMDM_HARDWARE_WAVE_CAPS_OUTPUT = 24597_u32
  ACMDM_FORMATTAG_DETAILS = 24601_u32
  ACMDM_FORMAT_DETAILS = 24602_u32
  ACMDM_FORMAT_SUGGEST = 24603_u32
  ACMDM_FILTERTAG_DETAILS = 24626_u32
  ACMDM_FILTER_DETAILS = 24627_u32
  ACMDM_STREAM_OPEN = 24652_u32
  ACMDM_STREAM_CLOSE = 24653_u32
  ACMDM_STREAM_SIZE = 24654_u32
  ACMDM_STREAM_CONVERT = 24655_u32
  ACMDM_STREAM_RESET = 24656_u32
  ACMDM_STREAM_PREPARE = 24657_u32
  ACMDM_STREAM_UNPREPARE = 24658_u32
  ACMDM_STREAM_UPDATE = 24659_u32

  CLSID_MMDeviceEnumerator = LibC::GUID.new(0xbcde0395_u32, 0xe52f_u16, 0x467c_u16, StaticArray[0x8e_u8, 0x3d_u8, 0xc4_u8, 0x57_u8, 0x92_u8, 0x91_u8, 0x69_u8, 0x2e_u8])

  CLSID_DeviceTopology = LibC::GUID.new(0x1df639d0_u32, 0x5ec1_u16, 0x47aa_u16, StaticArray[0x93_u8, 0x79_u8, 0x82_u8, 0x8d_u8, 0xc1_u8, 0xaa_u8, 0x8c_u8, 0x59_u8])

  @[Flags]
  enum MIDI_WAVE_OPEN_TYPE : UInt32
    CALLBACK_TYPEMASK = 458752_u32
    CALLBACK_NULL = 0_u32
    CALLBACK_WINDOW = 65536_u32
    CALLBACK_TASK = 131072_u32
    CALLBACK_FUNCTION = 196608_u32
    CALLBACK_THREAD = 131072_u32
    CALLBACK_EVENT = 327680_u32
    WAVE_FORMAT_QUERY = 1_u32
    WAVE_ALLOWSYNC = 2_u32
    WAVE_MAPPED = 4_u32
    WAVE_FORMAT_DIRECT = 8_u32
    WAVE_FORMAT_DIRECT_QUERY = 9_u32
    WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 16_u32
    MIDI_IO_STATUS = 32_u32
  end
  enum MIXERLINE_COMPONENTTYPE : UInt32
    MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 1_u32
    MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 5_u32
    MIXERLINE_COMPONENTTYPE_DST_LINE = 2_u32
    MIXERLINE_COMPONENTTYPE_DST_MONITOR = 3_u32
    MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 4_u32
    MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 6_u32
    MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0_u32
    MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 8_u32
    MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 7_u32
    MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 4106_u32
    MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 4105_u32
    MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 4101_u32
    MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 4097_u32
    MIXERLINE_COMPONENTTYPE_SRC_LINE = 4098_u32
    MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 4099_u32
    MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 4103_u32
    MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 4100_u32
    MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 4102_u32
    MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 4096_u32
    MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 4104_u32
  end
  enum AUDCLNT_SHAREMODE
    AUDCLNT_SHAREMODE_SHARED = 0_i32
    AUDCLNT_SHAREMODE_EXCLUSIVE = 1_i32
  end
  enum AUDIO_STREAM_CATEGORY
    AudioCategory_Other = 0_i32
    AudioCategory_ForegroundOnlyMedia = 1_i32
    AudioCategory_Communications = 3_i32
    AudioCategory_Alerts = 4_i32
    AudioCategory_SoundEffects = 5_i32
    AudioCategory_GameEffects = 6_i32
    AudioCategory_GameMedia = 7_i32
    AudioCategory_GameChat = 8_i32
    AudioCategory_Speech = 9_i32
    AudioCategory_Movie = 10_i32
    AudioCategory_Media = 11_i32
    AudioCategory_FarFieldSpeech = 12_i32
    AudioCategory_UniformSpeech = 13_i32
    AudioCategory_VoiceTyping = 14_i32
  end
  enum AudioSessionState
    AudioSessionStateInactive = 0_i32
    AudioSessionStateActive = 1_i32
    AudioSessionStateExpired = 2_i32
  end
  enum AUDCLNT_BUFFERFLAGS
    AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = 1_i32
    AUDCLNT_BUFFERFLAGS_SILENT = 2_i32
    AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = 4_i32
  end
  @[Flags]
  enum AUDCLNT_STREAMOPTIONS : UInt32
    AUDCLNT_STREAMOPTIONS_NONE = 0_u32
    AUDCLNT_STREAMOPTIONS_RAW = 1_u32
    AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = 2_u32
    AUDCLNT_STREAMOPTIONS_AMBISONICS = 4_u32
  end
  @[Flags]
  enum AUDIO_DUCKING_OPTIONS : UInt32
    AUDIO_DUCKING_OPTIONS_DEFAULT = 0_u32
    AUDIO_DUCKING_OPTIONS_DO_NOT_DUCK_OTHER_STREAMS = 1_u32
  end
  enum AUDIO_EFFECT_STATE
    AUDIO_EFFECT_STATE_OFF = 0_i32
    AUDIO_EFFECT_STATE_ON = 1_i32
  end
  enum AMBISONICS_TYPE
    AMBISONICS_TYPE_FULL3D = 0_i32
  end
  enum AMBISONICS_CHANNEL_ORDERING
    AMBISONICS_CHANNEL_ORDERING_ACN = 0_i32
  end
  enum AMBISONICS_NORMALIZATION
    AMBISONICS_NORMALIZATION_SN3D = 0_i32
    AMBISONICS_NORMALIZATION_N3D = 1_i32
  end
  @[Flags]
  enum AudioObjectType : UInt32
    AudioObjectType_None = 0_u32
    AudioObjectType_Dynamic = 1_u32
    AudioObjectType_FrontLeft = 2_u32
    AudioObjectType_FrontRight = 4_u32
    AudioObjectType_FrontCenter = 8_u32
    AudioObjectType_LowFrequency = 16_u32
    AudioObjectType_SideLeft = 32_u32
    AudioObjectType_SideRight = 64_u32
    AudioObjectType_BackLeft = 128_u32
    AudioObjectType_BackRight = 256_u32
    AudioObjectType_TopFrontLeft = 512_u32
    AudioObjectType_TopFrontRight = 1024_u32
    AudioObjectType_TopBackLeft = 2048_u32
    AudioObjectType_TopBackRight = 4096_u32
    AudioObjectType_BottomFrontLeft = 8192_u32
    AudioObjectType_BottomFrontRight = 16384_u32
    AudioObjectType_BottomBackLeft = 32768_u32
    AudioObjectType_BottomBackRight = 65536_u32
    AudioObjectType_BackCenter = 131072_u32
  end
  @[Flags]
  enum SPATIAL_AUDIO_STREAM_OPTIONS : UInt32
    SPATIAL_AUDIO_STREAM_OPTIONS_NONE = 0_u32
    SPATIAL_AUDIO_STREAM_OPTIONS_OFFLOAD = 1_u32
  end
  enum SpatialAudioHrtfDirectivityType
    SpatialAudioHrtfDirectivity_OmniDirectional = 0_i32
    SpatialAudioHrtfDirectivity_Cardioid = 1_i32
    SpatialAudioHrtfDirectivity_Cone = 2_i32
  end
  enum SpatialAudioHrtfEnvironmentType
    SpatialAudioHrtfEnvironment_Small = 0_i32
    SpatialAudioHrtfEnvironment_Medium = 1_i32
    SpatialAudioHrtfEnvironment_Large = 2_i32
    SpatialAudioHrtfEnvironment_Outdoors = 3_i32
    SpatialAudioHrtfEnvironment_Average = 4_i32
  end
  enum SpatialAudioHrtfDistanceDecayType
    SpatialAudioHrtfDistanceDecay_NaturalDecay = 0_i32
    SpatialAudioHrtfDistanceDecay_CustomDecay = 1_i32
  end
  enum EDataFlow
    Erender = 0_i32
    Ecapture = 1_i32
    Eall = 2_i32
    EDataFlow_enum_count = 3_i32
  end
  enum ERole
    Econsole = 0_i32
    Emultimedia = 1_i32
    Ecommunications = 2_i32
    ERole_enum_count = 3_i32
  end
  enum EndpointFormFactor
    RemoteNetworkDevice = 0_i32
    Speakers = 1_i32
    LineLevel = 2_i32
    Headphones = 3_i32
    Microphone = 4_i32
    Headset = 5_i32
    Handset = 6_i32
    UnknownDigitalPassthrough = 7_i32
    SPDIF = 8_i32
    DigitalAudioDisplayDevice = 9_i32
    UnknownFormFactor = 10_i32
    EndpointFormFactor_enum_count = 11_i32
  end
  enum MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0_i32
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1_i32
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2_i32
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3_i32
  end
  enum DataFlow
    In = 0_i32
    Out = 1_i32
  end
  enum PartType
    Connector = 0_i32
    Subunit = 1_i32
  end
  enum ConnectorType
    Unknown_Connector = 0_i32
    Physical_Internal = 1_i32
    Physical_External = 2_i32
    Software_IO = 3_i32
    Software_Fixed = 4_i32
    Network = 5_i32
  end
  enum AudioSessionDisconnectReason
    DisconnectReasonDeviceRemoval = 0_i32
    DisconnectReasonServerShutdown = 1_i32
    DisconnectReasonFormatChanged = 2_i32
    DisconnectReasonSessionLogoff = 3_i32
    DisconnectReasonSessionDisconnected = 4_i32
    DisconnectReasonExclusiveModeOverride = 5_i32
  end
  enum SpatialAudioMetadataWriterOverflowMode
    SpatialAudioMetadataWriterOverflow_Fail = 0_i32
    SpatialAudioMetadataWriterOverflow_MergeWithNew = 1_i32
    SpatialAudioMetadataWriterOverflow_MergeWithLast = 2_i32
  end
  enum SpatialAudioMetadataCopyMode
    SpatialAudioMetadataCopy_Overwrite = 0_i32
    SpatialAudioMetadataCopy_Append = 1_i32
    SpatialAudioMetadataCopy_AppendMergeWithLast = 2_i32
    SpatialAudioMetadataCopy_AppendMergeWithFirst = 3_i32
  end
  enum PROCESS_LOOPBACK_MODE
    PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE = 0_i32
    PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE = 1_i32
  end
  enum AUDIOCLIENT_ACTIVATION_TYPE
    AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT = 0_i32
    AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK = 1_i32
  end
  enum AudioStateMonitorSoundLevel
    Muted = 0_i32
    Low = 1_i32
    Full = 2_i32
  end

  @[Extern]
  record AUDIO_VOLUME_NOTIFICATION_DATA,
    guidEventContext : LibC::GUID,
    bMuted : Win32cr::Foundation::BOOL,
    fMasterVolume : Float32,
    nChannels : UInt32,
    afChannelVolumes : Float32*

  @[Extern]
  record WAVEFORMATEXTENSIBLE,
    format : Win32cr::Media::Audio::WAVEFORMATEX,
    samples : Samples_e__Union,
    dwChannelMask : UInt32,
    sub_format : LibC::GUID do

    # Nested Type Samples_e__Union
    @[Extern(union: true)]
    record Samples_e__Union,
      wValidBitsPerSample : UInt16,
      wSamplesPerBlock : UInt16,
      wReserved : UInt16

  end

  @[Extern]
  record WAVEFILTER,
    cbStruct : UInt32,
    dwFilterTag : UInt32,
    fdwFilter : UInt32,
    dwReserved : UInt32[5]

  @[Extern]
  record VOLUMEWAVEFILTER,
    wfltr : Win32cr::Media::Audio::WAVEFILTER,
    dwVolume : UInt32

  @[Extern]
  record ECHOWAVEFILTER,
    wfltr : Win32cr::Media::Audio::WAVEFILTER,
    dwVolume : UInt32,
    dwDelay : UInt32

  @[Extern]
  record WAVEHDR,
    lpData : Win32cr::Foundation::PSTR,
    dwBufferLength : UInt32,
    dwBytesRecorded : UInt32,
    dwUser : LibC::UIntPtrT,
    dwFlags : UInt32,
    dwLoops : UInt32,
    lpNext : Win32cr::Media::Audio::WAVEHDR*,
    reserved : LibC::UIntPtrT

  @[Extern]
  record WAVEOUTCAPSA,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32

  @[Extern]
  record WAVEOUTCAPSW,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32

  @[Extern]
  record WAVEOUTCAPS2A,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record WAVEOUTCAPS2W,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record WAVEINCAPSA,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16

  @[Extern]
  record WAVEINCAPSW,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16

  @[Extern]
  record WAVEINCAPS2A,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record WAVEINCAPS2W,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    dwFormats : UInt32,
    wChannels : UInt16,
    wReserved1 : UInt16,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record WAVEFORMAT,
    wFormatTag : UInt16,
    nChannels : UInt16,
    nSamplesPerSec : UInt32,
    nAvgBytesPerSec : UInt32,
    nBlockAlign : UInt16

  @[Extern]
  record PCMWAVEFORMAT,
    wf : Win32cr::Media::Audio::WAVEFORMAT,
    wBitsPerSample : UInt16

  @[Extern]
  record WAVEFORMATEX,
    wFormatTag : UInt16,
    nChannels : UInt16,
    nSamplesPerSec : UInt32,
    nAvgBytesPerSec : UInt32,
    nBlockAlign : UInt16,
    wBitsPerSample : UInt16,
    cbSize : UInt16

  @[Extern]
  record MIDIOUTCAPSA,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    wTechnology : UInt16,
    wVoices : UInt16,
    wNotes : UInt16,
    wChannelMask : UInt16,
    dwSupport : UInt32

  @[Extern]
  record MIDIOUTCAPSW,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    wTechnology : UInt16,
    wVoices : UInt16,
    wNotes : UInt16,
    wChannelMask : UInt16,
    dwSupport : UInt32

  @[Extern]
  record MIDIOUTCAPS2A,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    wTechnology : UInt16,
    wVoices : UInt16,
    wNotes : UInt16,
    wChannelMask : UInt16,
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record MIDIOUTCAPS2W,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    wTechnology : UInt16,
    wVoices : UInt16,
    wNotes : UInt16,
    wChannelMask : UInt16,
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record MIDIINCAPSA,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    dwSupport : UInt32

  @[Extern]
  record MIDIINCAPSW,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    dwSupport : UInt32

  @[Extern]
  record MIDIINCAPS2A,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record MIDIINCAPS2W,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record MIDIHDR,
    lpData : Win32cr::Foundation::PSTR,
    dwBufferLength : UInt32,
    dwBytesRecorded : UInt32,
    dwUser : LibC::UIntPtrT,
    dwFlags : UInt32,
    lpNext : Win32cr::Media::Audio::MIDIHDR*,
    reserved : LibC::UIntPtrT,
    dwOffset : UInt32,
    dwReserved : LibC::UIntPtrT[8]

  @[Extern]
  record MIDIEVENT,
    dwDeltaTime : UInt32,
    dwStreamID : UInt32,
    dwEvent : UInt32,
    dwParms : UInt32*

  @[Extern]
  record MIDISTRMBUFFVER,
    dwVersion : UInt32,
    dwMid : UInt32,
    dwOEMVersion : UInt32

  @[Extern]
  record MIDIPROPTIMEDIV,
    cbStruct : UInt32,
    dwTimeDiv : UInt32

  @[Extern]
  record MIDIPROPTEMPO,
    cbStruct : UInt32,
    dwTempo : UInt32

  @[Extern]
  record AUXCAPSA,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    wTechnology : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32

  @[Extern]
  record AUXCAPSW,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    wTechnology : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32

  @[Extern]
  record AUXCAPS2A,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    wTechnology : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record AUXCAPS2W,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    wTechnology : UInt16,
    wReserved1 : UInt16,
    dwSupport : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record MIXERCAPSA,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    fdwSupport : UInt32,
    cDestinations : UInt32

  @[Extern]
  record MIXERCAPSW,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    fdwSupport : UInt32,
    cDestinations : UInt32

  @[Extern]
  record MIXERCAPS2A,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : Win32cr::Foundation::CHAR[32],
    fdwSupport : UInt32,
    cDestinations : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record MIXERCAPS2W,
    wMid : UInt16,
    wPid : UInt16,
    vDriverVersion : UInt32,
    szPname : UInt16[32],
    fdwSupport : UInt32,
    cDestinations : UInt32,
    manufacturer_guid : LibC::GUID,
    product_guid : LibC::GUID,
    name_guid : LibC::GUID

  @[Extern]
  record MIXERLINEA,
    cbStruct : UInt32,
    dwDestination : UInt32,
    dwSource : UInt32,
    dwLineID : UInt32,
    fdwLine : UInt32,
    dwUser : LibC::UIntPtrT,
    dwComponentType : Win32cr::Media::Audio::MIXERLINE_COMPONENTTYPE,
    cChannels : UInt32,
    cConnections : UInt32,
    cControls : UInt32,
    szShortName : Win32cr::Foundation::CHAR[16],
    szName : Win32cr::Foundation::CHAR[64],
    target : Target_e__Struct do

    # Nested Type Target_e__Struct
    @[Extern]
    record Target_e__Struct,
      dwType : UInt32,
      dwDeviceID : UInt32,
      wMid : UInt16,
      wPid : UInt16,
      vDriverVersion : UInt32,
      szPname : Win32cr::Foundation::CHAR[32]

  end

  @[Extern]
  record MIXERLINEW,
    cbStruct : UInt32,
    dwDestination : UInt32,
    dwSource : UInt32,
    dwLineID : UInt32,
    fdwLine : UInt32,
    dwUser : LibC::UIntPtrT,
    dwComponentType : Win32cr::Media::Audio::MIXERLINE_COMPONENTTYPE,
    cChannels : UInt32,
    cConnections : UInt32,
    cControls : UInt32,
    szShortName : UInt16[16],
    szName : UInt16[64],
    target : Target_e__Struct do

    # Nested Type Target_e__Struct
    @[Extern]
    record Target_e__Struct,
      dwType : UInt32,
      dwDeviceID : UInt32,
      wMid : UInt16,
      wPid : UInt16,
      vDriverVersion : UInt32,
      szPname : UInt16[32]

  end

  @[Extern]
  record MIXERCONTROLA,
    cbStruct : UInt32,
    dwControlID : UInt32,
    dwControlType : UInt32,
    fdwControl : UInt32,
    cMultipleItems : UInt32,
    szShortName : Win32cr::Foundation::CHAR[16],
    szName : Win32cr::Foundation::CHAR[64],
    bounds : Bounds_e__Union,
    metrics : Metrics_e__Union do

    # Nested Type Bounds_e__Union
    @[Extern(union: true)]
    record Bounds_e__Union,
      anonymous1 : Anonymous1_e__Struct,
      anonymous2 : Anonymous2_e__Struct,
      dwReserved : UInt32[6] do

      # Nested Type Anonymous2_e__Struct
      @[Extern]
      record Anonymous2_e__Struct,
        dwMinimum : UInt32,
        dwMaximum : UInt32


      # Nested Type Anonymous1_e__Struct
      @[Extern]
      record Anonymous1_e__Struct,
        lMinimum : Int32,
        lMaximum : Int32

    end


    # Nested Type Metrics_e__Union
    @[Extern(union: true)]
    record Metrics_e__Union,
      cSteps : UInt32,
      cbCustomData : UInt32,
      dwReserved : UInt32[6]

  end

  @[Extern]
  record MIXERCONTROLW,
    cbStruct : UInt32,
    dwControlID : UInt32,
    dwControlType : UInt32,
    fdwControl : UInt32,
    cMultipleItems : UInt32,
    szShortName : UInt16[16],
    szName : UInt16[64],
    bounds : Bounds_e__Union,
    metrics : Metrics_e__Union do

    # Nested Type Bounds_e__Union
    @[Extern(union: true)]
    record Bounds_e__Union,
      anonymous1 : Anonymous1_e__Struct,
      anonymous2 : Anonymous2_e__Struct,
      dwReserved : UInt32[6] do

      # Nested Type Anonymous1_e__Struct
      @[Extern]
      record Anonymous1_e__Struct,
        lMinimum : Int32,
        lMaximum : Int32


      # Nested Type Anonymous2_e__Struct
      @[Extern]
      record Anonymous2_e__Struct,
        dwMinimum : UInt32,
        dwMaximum : UInt32

    end


    # Nested Type Metrics_e__Union
    @[Extern(union: true)]
    record Metrics_e__Union,
      cSteps : UInt32,
      cbCustomData : UInt32,
      dwReserved : UInt32[6]

  end

  @[Extern]
  record MIXERLINECONTROLSA,
    cbStruct : UInt32,
    dwLineID : UInt32,
    anonymous : Anonymous_e__Union,
    cControls : UInt32,
    cbmxctrl : UInt32,
    pamxctrl : Win32cr::Media::Audio::MIXERCONTROLA* do

    # Nested Type Anonymous_e__Union
    @[Extern(union: true)]
    record Anonymous_e__Union,
      dwControlID : UInt32,
      dwControlType : UInt32

  end

  @[Extern]
  record MIXERLINECONTROLSW,
    cbStruct : UInt32,
    dwLineID : UInt32,
    anonymous : Anonymous_e__Union,
    cControls : UInt32,
    cbmxctrl : UInt32,
    pamxctrl : Win32cr::Media::Audio::MIXERCONTROLW* do

    # Nested Type Anonymous_e__Union
    @[Extern(union: true)]
    record Anonymous_e__Union,
      dwControlID : UInt32,
      dwControlType : UInt32

  end

  @[Extern]
  record MIXERCONTROLDETAILS,
    cbStruct : UInt32,
    dwControlID : UInt32,
    cChannels : UInt32,
    anonymous : Anonymous_e__Union,
    cbDetails : UInt32,
    paDetails : Void* do

    # Nested Type Anonymous_e__Union
    @[Extern(union: true)]
    record Anonymous_e__Union,
      hwndOwner : Win32cr::Foundation::HWND,
      cMultipleItems : UInt32

  end

  @[Extern]
  record MIXERCONTROLDETAILS_LISTTEXTA,
    dwParam1 : UInt32,
    dwParam2 : UInt32,
    szName : Win32cr::Foundation::CHAR[64]

  @[Extern]
  record MIXERCONTROLDETAILS_LISTTEXTW,
    dwParam1 : UInt32,
    dwParam2 : UInt32,
    szName : UInt16[64]

  @[Extern]
  record MIXERCONTROLDETAILS_BOOLEAN,
    fValue : Int32

  @[Extern]
  record MIXERCONTROLDETAILS_SIGNED,
    lValue : Int32

  @[Extern]
  record MIXERCONTROLDETAILS_UNSIGNED,
    dwValue : UInt32

  @[Extern]
  record AudioClientProperties,
    cbSize : UInt32,
    bIsOffload : Win32cr::Foundation::BOOL,
    eCategory : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY,
    options : Win32cr::Media::Audio::AUDCLNT_STREAMOPTIONS

  @[Extern]
  record AudioClient3ActivationParams,
    tracingContextId : LibC::GUID

  @[Extern]
  record AUDIO_EFFECT,
    id : LibC::GUID,
    canSetState : Win32cr::Foundation::BOOL,
    state : Win32cr::Media::Audio::AUDIO_EFFECT_STATE

  @[Extern]
  record AMBISONICS_PARAMS,
    u32Size : UInt32,
    u32Version : UInt32,
    u32Type : Win32cr::Media::Audio::AMBISONICS_TYPE,
    u32ChannelOrdering : Win32cr::Media::Audio::AMBISONICS_CHANNEL_ORDERING,
    u32Normalization : Win32cr::Media::Audio::AMBISONICS_NORMALIZATION,
    u32Order : UInt32,
    u32NumChannels : UInt32,
    pu32ChannelMap : UInt32*

  @[Extern]
  record SpatialAudioObjectRenderStreamActivationParams,
    object_format : Win32cr::Media::Audio::WAVEFORMATEX*,
    static_object_type_mask : Win32cr::Media::Audio::AudioObjectType,
    min_dynamic_object_count : UInt32,
    max_dynamic_object_count : UInt32,
    category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY,
    event_handle : Win32cr::Foundation::HANDLE,
    notify_object : Void*

  @[Extern]
  record SpatialAudioObjectRenderStreamActivationParams2,
    object_format : Win32cr::Media::Audio::WAVEFORMATEX*,
    static_object_type_mask : Win32cr::Media::Audio::AudioObjectType,
    min_dynamic_object_count : UInt32,
    max_dynamic_object_count : UInt32,
    category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY,
    event_handle : Win32cr::Foundation::HANDLE,
    notify_object : Void*,
    options : Win32cr::Media::Audio::SPATIAL_AUDIO_STREAM_OPTIONS

  @[Extern]
  record SpatialAudioClientActivationParams,
    tracingContextId : LibC::GUID,
    appId : LibC::GUID,
    majorVersion : Int32,
    minorVersion1 : Int32,
    minorVersion2 : Int32,
    minorVersion3 : Int32

  @[Extern]
  record SpatialAudioHrtfDirectivity,
    type__ : Win32cr::Media::Audio::SpatialAudioHrtfDirectivityType,
    scaling : Float32

  @[Extern]
  record SpatialAudioHrtfDirectivityCardioid,
    directivity : Win32cr::Media::Audio::SpatialAudioHrtfDirectivity,
    order : Float32

  @[Extern]
  record SpatialAudioHrtfDirectivityCone,
    directivity : Win32cr::Media::Audio::SpatialAudioHrtfDirectivity,
    inner_angle : Float32,
    outer_angle : Float32

  @[Extern(union: true)]
  record SpatialAudioHrtfDirectivityUnion,
    cone : Win32cr::Media::Audio::SpatialAudioHrtfDirectivityCone,
    cardiod : Win32cr::Media::Audio::SpatialAudioHrtfDirectivityCardioid,
    omni : Win32cr::Media::Audio::SpatialAudioHrtfDirectivity

  @[Extern]
  record SpatialAudioHrtfDistanceDecay,
    type__ : Win32cr::Media::Audio::SpatialAudioHrtfDistanceDecayType,
    max_gain : Float32,
    min_gain : Float32,
    unity_gain_distance : Float32,
    cutoff_distance : Float32

  @[Extern]
  record SpatialAudioHrtfActivationParams,
    object_format : Win32cr::Media::Audio::WAVEFORMATEX*,
    static_object_type_mask : Win32cr::Media::Audio::AudioObjectType,
    min_dynamic_object_count : UInt32,
    max_dynamic_object_count : UInt32,
    category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY,
    event_handle : Win32cr::Foundation::HANDLE,
    notify_object : Void*,
    distance_decay : Win32cr::Media::Audio::SpatialAudioHrtfDistanceDecay*,
    directivity : Win32cr::Media::Audio::SpatialAudioHrtfDirectivityUnion*,
    environment : Win32cr::Media::Audio::SpatialAudioHrtfEnvironmentType*,
    orientation : Float32*

  @[Extern]
  record SpatialAudioHrtfActivationParams2,
    object_format : Win32cr::Media::Audio::WAVEFORMATEX*,
    static_object_type_mask : Win32cr::Media::Audio::AudioObjectType,
    min_dynamic_object_count : UInt32,
    max_dynamic_object_count : UInt32,
    category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY,
    event_handle : Win32cr::Foundation::HANDLE,
    notify_object : Void*,
    distance_decay : Win32cr::Media::Audio::SpatialAudioHrtfDistanceDecay*,
    directivity : Win32cr::Media::Audio::SpatialAudioHrtfDirectivityUnion*,
    environment : Win32cr::Media::Audio::SpatialAudioHrtfEnvironmentType*,
    orientation : Float32*,
    options : Win32cr::Media::Audio::SPATIAL_AUDIO_STREAM_OPTIONS

  @[Extern]
  record DIRECTX_AUDIO_ACTIVATION_PARAMS,
    cbDirectXAudioActivationParams : UInt32,
    guidAudioSession : LibC::GUID,
    dwAudioStreamFlags : UInt32

  @[Extern]
  record AudioExtensionParams,
    add_page_param : Win32cr::Foundation::LPARAM,
    pEndpoint : Void*,
    pPnpInterface : Void*,
    pPnpDevnode : Void*

  @[Extern]
  record SpatialAudioMetadataItemsInfo,
    frame_count : UInt16,
    item_count : UInt16,
    max_item_count : UInt16,
    max_value_buffer_length : UInt32

  @[Extern]
  record SpatialAudioObjectRenderStreamForMetadataActivationParams,
    object_format : Win32cr::Media::Audio::WAVEFORMATEX*,
    static_object_type_mask : Win32cr::Media::Audio::AudioObjectType,
    min_dynamic_object_count : UInt32,
    max_dynamic_object_count : UInt32,
    category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY,
    event_handle : Win32cr::Foundation::HANDLE,
    metadata_format_id : LibC::GUID,
    max_metadata_item_count : UInt16,
    metadata_activation_params : Win32cr::System::Com::StructuredStorage::PROPVARIANT*,
    notify_object : Void*

  @[Extern]
  record SpatialAudioObjectRenderStreamForMetadataActivationParams2,
    object_format : Win32cr::Media::Audio::WAVEFORMATEX*,
    static_object_type_mask : Win32cr::Media::Audio::AudioObjectType,
    min_dynamic_object_count : UInt32,
    max_dynamic_object_count : UInt32,
    category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY,
    event_handle : Win32cr::Foundation::HANDLE,
    metadata_format_id : LibC::GUID,
    max_metadata_item_count : UInt32,
    metadata_activation_params : Win32cr::System::Com::StructuredStorage::PROPVARIANT*,
    notify_object : Void*,
    options : Win32cr::Media::Audio::SPATIAL_AUDIO_STREAM_OPTIONS

  @[Extern]
  record AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS,
    target_process_id : UInt32,
    process_loopback_mode : Win32cr::Media::Audio::PROCESS_LOOPBACK_MODE

  @[Extern]
  record AUDIOCLIENT_ACTIVATION_PARAMS,
    activation_type : Win32cr::Media::Audio::AUDIOCLIENT_ACTIVATION_TYPE,
    anonymous : Anonymous_e__Union do

    # Nested Type Anonymous_e__Union
    @[Extern(union: true)]
    record Anonymous_e__Union,
      process_loopback_params : Win32cr::Media::Audio::AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS

  end

  @[Extern]
  record ACMDRIVERDETAILSA,
    cbStruct : UInt32,
    fccType : UInt32,
    fccComp : UInt32,
    wMid : UInt16,
    wPid : UInt16,
    vdwACM : UInt32,
    vdwDriver : UInt32,
    fdwSupport : UInt32,
    cFormatTags : UInt32,
    cFilterTags : UInt32,
    hicon : Win32cr::UI::WindowsAndMessaging::HICON,
    szShortName : Win32cr::Foundation::CHAR[32],
    szLongName : Win32cr::Foundation::CHAR[128],
    szCopyright : Win32cr::Foundation::CHAR[80],
    szLicensing : Win32cr::Foundation::CHAR[128],
    szFeatures : Win32cr::Foundation::CHAR[512]

  @[Extern]
  record ACMDRIVERDETAILSW,
    cbStruct : UInt32,
    fccType : UInt32,
    fccComp : UInt32,
    wMid : UInt16,
    wPid : UInt16,
    vdwACM : UInt32,
    vdwDriver : UInt32,
    fdwSupport : UInt32,
    cFormatTags : UInt32,
    cFilterTags : UInt32,
    hicon : Win32cr::UI::WindowsAndMessaging::HICON,
    szShortName : UInt16[32],
    szLongName : UInt16[128],
    szCopyright : UInt16[80],
    szLicensing : UInt16[128],
    szFeatures : UInt16[512]

  @[Extern]
  record ACMFORMATTAGDETAILSA,
    cbStruct : UInt32,
    dwFormatTagIndex : UInt32,
    dwFormatTag : UInt32,
    cbFormatSize : UInt32,
    fdwSupport : UInt32,
    cStandardFormats : UInt32,
    szFormatTag : Win32cr::Foundation::CHAR[48]

  @[Extern]
  record ACMFORMATTAGDETAILSW,
    cbStruct : UInt32,
    dwFormatTagIndex : UInt32,
    dwFormatTag : UInt32,
    cbFormatSize : UInt32,
    fdwSupport : UInt32,
    cStandardFormats : UInt32,
    szFormatTag : UInt16[48]

  @[Extern]
  record ACMFORMATDETAILSA,
    cbStruct : UInt32,
    dwFormatIndex : UInt32,
    dwFormatTag : UInt32,
    fdwSupport : UInt32,
    pwfx : Win32cr::Media::Audio::WAVEFORMATEX*,
    cbwfx : UInt32,
    szFormat : Win32cr::Foundation::CHAR[128]

  @[Extern]
  record Tacmformatdetailsw,
    cbStruct : UInt32,
    dwFormatIndex : UInt32,
    dwFormatTag : UInt32,
    fdwSupport : UInt32,
    pwfx : Win32cr::Media::Audio::WAVEFORMATEX*,
    cbwfx : UInt32,
    szFormat : UInt16[128]

  @[Extern]
  record ACMFORMATCHOOSEA,
    cbStruct : UInt32,
    fdwStyle : UInt32,
    hwndOwner : Win32cr::Foundation::HWND,
    pwfx : Win32cr::Media::Audio::WAVEFORMATEX*,
    cbwfx : UInt32,
    pszTitle : Win32cr::Foundation::PSTR,
    szFormatTag : Win32cr::Foundation::CHAR[48],
    szFormat : Win32cr::Foundation::CHAR[128],
    pszName : Win32cr::Foundation::PSTR,
    cchName : UInt32,
    fdwEnum : UInt32,
    pwfxEnum : Win32cr::Media::Audio::WAVEFORMATEX*,
    hInstance : Win32cr::Foundation::HINSTANCE,
    pszTemplateName : Win32cr::Foundation::PSTR,
    lCustData : Win32cr::Foundation::LPARAM,
    pfnHook : Win32cr::Media::Audio::ACMFORMATCHOOSEHOOKPROCA

  @[Extern]
  record ACMFORMATCHOOSEW,
    cbStruct : UInt32,
    fdwStyle : UInt32,
    hwndOwner : Win32cr::Foundation::HWND,
    pwfx : Win32cr::Media::Audio::WAVEFORMATEX*,
    cbwfx : UInt32,
    pszTitle : Win32cr::Foundation::PWSTR,
    szFormatTag : UInt16[48],
    szFormat : UInt16[128],
    pszName : Win32cr::Foundation::PWSTR,
    cchName : UInt32,
    fdwEnum : UInt32,
    pwfxEnum : Win32cr::Media::Audio::WAVEFORMATEX*,
    hInstance : Win32cr::Foundation::HINSTANCE,
    pszTemplateName : Win32cr::Foundation::PWSTR,
    lCustData : Win32cr::Foundation::LPARAM,
    pfnHook : Win32cr::Media::Audio::ACMFORMATCHOOSEHOOKPROCW

  @[Extern]
  record ACMFILTERTAGDETAILSA,
    cbStruct : UInt32,
    dwFilterTagIndex : UInt32,
    dwFilterTag : UInt32,
    cbFilterSize : UInt32,
    fdwSupport : UInt32,
    cStandardFilters : UInt32,
    szFilterTag : Win32cr::Foundation::CHAR[48]

  @[Extern]
  record ACMFILTERTAGDETAILSW,
    cbStruct : UInt32,
    dwFilterTagIndex : UInt32,
    dwFilterTag : UInt32,
    cbFilterSize : UInt32,
    fdwSupport : UInt32,
    cStandardFilters : UInt32,
    szFilterTag : UInt16[48]

  @[Extern]
  record ACMFILTERDETAILSA,
    cbStruct : UInt32,
    dwFilterIndex : UInt32,
    dwFilterTag : UInt32,
    fdwSupport : UInt32,
    pwfltr : Win32cr::Media::Audio::WAVEFILTER*,
    cbwfltr : UInt32,
    szFilter : Win32cr::Foundation::CHAR[128]

  @[Extern]
  record ACMFILTERDETAILSW,
    cbStruct : UInt32,
    dwFilterIndex : UInt32,
    dwFilterTag : UInt32,
    fdwSupport : UInt32,
    pwfltr : Win32cr::Media::Audio::WAVEFILTER*,
    cbwfltr : UInt32,
    szFilter : UInt16[128]

  @[Extern]
  record ACMFILTERCHOOSEA,
    cbStruct : UInt32,
    fdwStyle : UInt32,
    hwndOwner : Win32cr::Foundation::HWND,
    pwfltr : Win32cr::Media::Audio::WAVEFILTER*,
    cbwfltr : UInt32,
    pszTitle : Win32cr::Foundation::PSTR,
    szFilterTag : Win32cr::Foundation::CHAR[48],
    szFilter : Win32cr::Foundation::CHAR[128],
    pszName : Win32cr::Foundation::PSTR,
    cchName : UInt32,
    fdwEnum : UInt32,
    pwfltrEnum : Win32cr::Media::Audio::WAVEFILTER*,
    hInstance : Win32cr::Foundation::HINSTANCE,
    pszTemplateName : Win32cr::Foundation::PSTR,
    lCustData : Win32cr::Foundation::LPARAM,
    pfnHook : Win32cr::Media::Audio::ACMFILTERCHOOSEHOOKPROCA

  @[Extern]
  record ACMFILTERCHOOSEW,
    cbStruct : UInt32,
    fdwStyle : UInt32,
    hwndOwner : Win32cr::Foundation::HWND,
    pwfltr : Win32cr::Media::Audio::WAVEFILTER*,
    cbwfltr : UInt32,
    pszTitle : Win32cr::Foundation::PWSTR,
    szFilterTag : UInt16[48],
    szFilter : UInt16[128],
    pszName : Win32cr::Foundation::PWSTR,
    cchName : UInt32,
    fdwEnum : UInt32,
    pwfltrEnum : Win32cr::Media::Audio::WAVEFILTER*,
    hInstance : Win32cr::Foundation::HINSTANCE,
    pszTemplateName : Win32cr::Foundation::PWSTR,
    lCustData : Win32cr::Foundation::LPARAM,
    pfnHook : Win32cr::Media::Audio::ACMFILTERCHOOSEHOOKPROCW

  {% if flag?(:x86_64) || flag?(:arm) %}
  @[Extern]
  record ACMSTREAMHEADER,
    cbStruct : UInt32,
    fdwStatus : UInt32,
    dwUser : LibC::UIntPtrT,
    pbSrc : UInt8*,
    cbSrcLength : UInt32,
    cbSrcLengthUsed : UInt32,
    dwSrcUser : LibC::UIntPtrT,
    pbDst : UInt8*,
    cbDstLength : UInt32,
    cbDstLengthUsed : UInt32,
    dwDstUser : LibC::UIntPtrT,
    dwReservedDriver : UInt32[15]
  {% end %}

  @[Extern]
  record Tacmdrvopendesca,
    cbStruct : UInt32,
    fccType : UInt32,
    fccComp : UInt32,
    dwVersion : UInt32,
    dwFlags : UInt32,
    dwError : UInt32,
    pszSectionName : Win32cr::Foundation::PSTR,
    pszAliasName : Win32cr::Foundation::PSTR,
    dnDevNode : UInt32

  @[Extern]
  record Tacmdrvopendescw,
    cbStruct : UInt32,
    fccType : UInt32,
    fccComp : UInt32,
    dwVersion : UInt32,
    dwFlags : UInt32,
    dwError : UInt32,
    pszSectionName : Win32cr::Foundation::PWSTR,
    pszAliasName : Win32cr::Foundation::PWSTR,
    dnDevNode : UInt32

  @[Extern]
  record ACMDRVSTREAMINSTANCE,
    cbStruct : UInt32,
    pwfxSrc : Win32cr::Media::Audio::WAVEFORMATEX*,
    pwfxDst : Win32cr::Media::Audio::WAVEFORMATEX*,
    pwfltr : Win32cr::Media::Audio::WAVEFILTER*,
    dwCallback : LibC::UIntPtrT,
    dwInstance : LibC::UIntPtrT,
    fdwOpen : UInt32,
    fdwDriver : UInt32,
    dwDriver : LibC::UIntPtrT,
    has : Win32cr::Media::Audio::HACMSTREAM

  @[Extern]
  record ACMDRVSTREAMHEADER,
    cbStruct : UInt32,
    fdwStatus : UInt32,
    dwUser : LibC::UIntPtrT,
    pbSrc : UInt8*,
    cbSrcLength : UInt32,
    cbSrcLengthUsed : UInt32,
    dwSrcUser : LibC::UIntPtrT,
    pbDst : UInt8*,
    cbDstLength : UInt32,
    cbDstLengthUsed : UInt32,
    dwDstUser : LibC::UIntPtrT,
    fdwConvert : UInt32,
    padshNext : Win32cr::Media::Audio::ACMDRVSTREAMHEADER*,
    fdwDriver : UInt32,
    dwDriver : LibC::UIntPtrT,
    fdwPrepared : UInt32,
    dwPrepared : LibC::UIntPtrT,
    pbPreparedSrc : UInt8*,
    cbPreparedSrcLength : UInt32,
    pbPreparedDst : UInt8*,
    cbPreparedDstLength : UInt32

  @[Extern]
  record ACMDRVSTREAMSIZE,
    cbStruct : UInt32,
    fdwSize : UInt32,
    cbSrcLength : UInt32,
    cbDstLength : UInt32

  @[Extern]
  record ACMDRVFORMATSUGGEST,
    cbStruct : UInt32,
    fdwSuggest : UInt32,
    pwfxSrc : Win32cr::Media::Audio::WAVEFORMATEX*,
    cbwfxSrc : UInt32,
    pwfxDst : Win32cr::Media::Audio::WAVEFORMATEX*,
    cbwfxDst : UInt32

  {% if flag?(:i386) %}
  @[Extern]
  record ACMSTREAMHEADER,
    cbStruct : UInt32,
    fdwStatus : UInt32,
    dwUser : LibC::UIntPtrT,
    pbSrc : UInt8*,
    cbSrcLength : UInt32,
    cbSrcLengthUsed : UInt32,
    dwSrcUser : LibC::UIntPtrT,
    pbDst : UInt8*,
    cbDstLength : UInt32,
    cbDstLengthUsed : UInt32,
    dwDstUser : LibC::UIntPtrT,
    dwReservedDriver : UInt32[10]
  {% end %}

  @[Extern]
  record IMessageFilterVtbl,
    query_interface : Proc(IMessageFilter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMessageFilter*, UInt32),
    release : Proc(IMessageFilter*, UInt32),
    handle_in_coming_call : Proc(IMessageFilter*, UInt32, Win32cr::Media::HTASK, UInt32, Win32cr::System::Com::INTERFACEINFO*, UInt32),
    retry_rejected_call : Proc(IMessageFilter*, Win32cr::Media::HTASK, UInt32, UInt32, UInt32),
    message_pending : Proc(IMessageFilter*, Win32cr::Media::HTASK, UInt32, UInt32, UInt32)


  @[Extern]
  #@[Com("00000016-0000-0000-c000-000000000046")]
  record IMessageFilter, lpVtbl : IMessageFilterVtbl* do
    GUID = LibC::GUID.new(0x16_u32, 0x0_u16, 0x0_u16, StaticArray[0xc0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x0_u8, 0x46_u8])
    def query_interface(this : IMessageFilter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMessageFilter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMessageFilter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def handle_in_coming_call(this : IMessageFilter*, dwCallType : UInt32, htaskCaller : Win32cr::Media::HTASK, dwTickCount : UInt32, lpInterfaceInfo : Win32cr::System::Com::INTERFACEINFO*) : UInt32
      @lpVtbl.try &.value.handle_in_coming_call.call(this, dwCallType, htaskCaller, dwTickCount, lpInterfaceInfo)
    end
    def retry_rejected_call(this : IMessageFilter*, htaskCallee : Win32cr::Media::HTASK, dwTickCount : UInt32, dwRejectType : UInt32) : UInt32
      @lpVtbl.try &.value.retry_rejected_call.call(this, htaskCallee, dwTickCount, dwRejectType)
    end
    def message_pending(this : IMessageFilter*, htaskCallee : Win32cr::Media::HTASK, dwTickCount : UInt32, dwPendingType : UInt32) : UInt32
      @lpVtbl.try &.value.message_pending.call(this, htaskCallee, dwTickCount, dwPendingType)
    end

  end

  @[Extern]
  record IAudioClientVtbl,
    query_interface : Proc(IAudioClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioClient*, UInt32),
    release : Proc(IAudioClient*, UInt32),
    initialize__ : Proc(IAudioClient*, Win32cr::Media::Audio::AUDCLNT_SHAREMODE, UInt32, Int64, Int64, Win32cr::Media::Audio::WAVEFORMATEX*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_buffer_size : Proc(IAudioClient*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_latency : Proc(IAudioClient*, Int64*, Win32cr::Foundation::HRESULT),
    get_current_padding : Proc(IAudioClient*, UInt32*, Win32cr::Foundation::HRESULT),
    is_format_supported : Proc(IAudioClient*, Win32cr::Media::Audio::AUDCLNT_SHAREMODE, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Media::Audio::WAVEFORMATEX**, Win32cr::Foundation::HRESULT),
    get_mix_format : Proc(IAudioClient*, Win32cr::Media::Audio::WAVEFORMATEX**, Win32cr::Foundation::HRESULT),
    get_device_period : Proc(IAudioClient*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    start : Proc(IAudioClient*, Win32cr::Foundation::HRESULT),
    stop : Proc(IAudioClient*, Win32cr::Foundation::HRESULT),
    reset : Proc(IAudioClient*, Win32cr::Foundation::HRESULT),
    set_event_handle : Proc(IAudioClient*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_service : Proc(IAudioClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1cb9ad4c-dbfa-4c32-b178-c2f568a703b2")]
  record IAudioClient, lpVtbl : IAudioClientVtbl* do
    GUID = LibC::GUID.new(0x1cb9ad4c_u32, 0xdbfa_u16, 0x4c32_u16, StaticArray[0xb1_u8, 0x78_u8, 0xc2_u8, 0xf5_u8, 0x68_u8, 0xa7_u8, 0x3_u8, 0xb2_u8])
    def query_interface(this : IAudioClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IAudioClient*, share_mode : Win32cr::Media::Audio::AUDCLNT_SHAREMODE, stream_flags : UInt32, hnsBufferDuration : Int64, hnsPeriodicity : Int64, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, audio_session_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, share_mode, stream_flags, hnsBufferDuration, hnsPeriodicity, pFormat, audio_session_guid)
    end
    def get_buffer_size(this : IAudioClient*, pNumBufferFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size.call(this, pNumBufferFrames)
    end
    def get_stream_latency(this : IAudioClient*, phnsLatency : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_latency.call(this, phnsLatency)
    end
    def get_current_padding(this : IAudioClient*, pNumPaddingFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_padding.call(this, pNumPaddingFrames)
    end
    def is_format_supported(this : IAudioClient*, share_mode : Win32cr::Media::Audio::AUDCLNT_SHAREMODE, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, ppClosestMatch : Win32cr::Media::Audio::WAVEFORMATEX**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_format_supported.call(this, share_mode, pFormat, ppClosestMatch)
    end
    def get_mix_format(this : IAudioClient*, ppDeviceFormat : Win32cr::Media::Audio::WAVEFORMATEX**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mix_format.call(this, ppDeviceFormat)
    end
    def get_device_period(this : IAudioClient*, phnsDefaultDevicePeriod : Int64*, phnsMinimumDevicePeriod : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_period.call(this, phnsDefaultDevicePeriod, phnsMinimumDevicePeriod)
    end
    def start(this : IAudioClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IAudioClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def reset(this : IAudioClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def set_event_handle(this : IAudioClient*, eventHandle : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_handle.call(this, eventHandle)
    end
    def get_service(this : IAudioClient*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, riid, ppv)
    end

  end

  @[Extern]
  record IAudioClient2Vtbl,
    query_interface : Proc(IAudioClient2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioClient2*, UInt32),
    release : Proc(IAudioClient2*, UInt32),
    initialize__ : Proc(IAudioClient2*, Win32cr::Media::Audio::AUDCLNT_SHAREMODE, UInt32, Int64, Int64, Win32cr::Media::Audio::WAVEFORMATEX*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_buffer_size : Proc(IAudioClient2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_latency : Proc(IAudioClient2*, Int64*, Win32cr::Foundation::HRESULT),
    get_current_padding : Proc(IAudioClient2*, UInt32*, Win32cr::Foundation::HRESULT),
    is_format_supported : Proc(IAudioClient2*, Win32cr::Media::Audio::AUDCLNT_SHAREMODE, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Media::Audio::WAVEFORMATEX**, Win32cr::Foundation::HRESULT),
    get_mix_format : Proc(IAudioClient2*, Win32cr::Media::Audio::WAVEFORMATEX**, Win32cr::Foundation::HRESULT),
    get_device_period : Proc(IAudioClient2*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    start : Proc(IAudioClient2*, Win32cr::Foundation::HRESULT),
    stop : Proc(IAudioClient2*, Win32cr::Foundation::HRESULT),
    reset : Proc(IAudioClient2*, Win32cr::Foundation::HRESULT),
    set_event_handle : Proc(IAudioClient2*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_service : Proc(IAudioClient2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_offload_capable : Proc(IAudioClient2*, Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_client_properties : Proc(IAudioClient2*, Win32cr::Media::Audio::AudioClientProperties*, Win32cr::Foundation::HRESULT),
    get_buffer_size_limits : Proc(IAudioClient2*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::BOOL, Int64*, Int64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("726778cd-f60a-4eda-82de-e47610cd78aa")]
  record IAudioClient2, lpVtbl : IAudioClient2Vtbl* do
    GUID = LibC::GUID.new(0x726778cd_u32, 0xf60a_u16, 0x4eda_u16, StaticArray[0x82_u8, 0xde_u8, 0xe4_u8, 0x76_u8, 0x10_u8, 0xcd_u8, 0x78_u8, 0xaa_u8])
    def query_interface(this : IAudioClient2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioClient2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioClient2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IAudioClient2*, share_mode : Win32cr::Media::Audio::AUDCLNT_SHAREMODE, stream_flags : UInt32, hnsBufferDuration : Int64, hnsPeriodicity : Int64, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, audio_session_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, share_mode, stream_flags, hnsBufferDuration, hnsPeriodicity, pFormat, audio_session_guid)
    end
    def get_buffer_size(this : IAudioClient2*, pNumBufferFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size.call(this, pNumBufferFrames)
    end
    def get_stream_latency(this : IAudioClient2*, phnsLatency : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_latency.call(this, phnsLatency)
    end
    def get_current_padding(this : IAudioClient2*, pNumPaddingFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_padding.call(this, pNumPaddingFrames)
    end
    def is_format_supported(this : IAudioClient2*, share_mode : Win32cr::Media::Audio::AUDCLNT_SHAREMODE, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, ppClosestMatch : Win32cr::Media::Audio::WAVEFORMATEX**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_format_supported.call(this, share_mode, pFormat, ppClosestMatch)
    end
    def get_mix_format(this : IAudioClient2*, ppDeviceFormat : Win32cr::Media::Audio::WAVEFORMATEX**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mix_format.call(this, ppDeviceFormat)
    end
    def get_device_period(this : IAudioClient2*, phnsDefaultDevicePeriod : Int64*, phnsMinimumDevicePeriod : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_period.call(this, phnsDefaultDevicePeriod, phnsMinimumDevicePeriod)
    end
    def start(this : IAudioClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IAudioClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def reset(this : IAudioClient2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def set_event_handle(this : IAudioClient2*, eventHandle : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_handle.call(this, eventHandle)
    end
    def get_service(this : IAudioClient2*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, riid, ppv)
    end
    def is_offload_capable(this : IAudioClient2*, category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, pbOffloadCapable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_offload_capable.call(this, category, pbOffloadCapable)
    end
    def set_client_properties(this : IAudioClient2*, pProperties : Win32cr::Media::Audio::AudioClientProperties*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_client_properties.call(this, pProperties)
    end
    def get_buffer_size_limits(this : IAudioClient2*, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, bEventDriven : Win32cr::Foundation::BOOL, phnsMinBufferDuration : Int64*, phnsMaxBufferDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size_limits.call(this, pFormat, bEventDriven, phnsMinBufferDuration, phnsMaxBufferDuration)
    end

  end

  @[Extern]
  record IAudioClient3Vtbl,
    query_interface : Proc(IAudioClient3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioClient3*, UInt32),
    release : Proc(IAudioClient3*, UInt32),
    initialize__ : Proc(IAudioClient3*, Win32cr::Media::Audio::AUDCLNT_SHAREMODE, UInt32, Int64, Int64, Win32cr::Media::Audio::WAVEFORMATEX*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_buffer_size : Proc(IAudioClient3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_stream_latency : Proc(IAudioClient3*, Int64*, Win32cr::Foundation::HRESULT),
    get_current_padding : Proc(IAudioClient3*, UInt32*, Win32cr::Foundation::HRESULT),
    is_format_supported : Proc(IAudioClient3*, Win32cr::Media::Audio::AUDCLNT_SHAREMODE, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Media::Audio::WAVEFORMATEX**, Win32cr::Foundation::HRESULT),
    get_mix_format : Proc(IAudioClient3*, Win32cr::Media::Audio::WAVEFORMATEX**, Win32cr::Foundation::HRESULT),
    get_device_period : Proc(IAudioClient3*, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    start : Proc(IAudioClient3*, Win32cr::Foundation::HRESULT),
    stop : Proc(IAudioClient3*, Win32cr::Foundation::HRESULT),
    reset : Proc(IAudioClient3*, Win32cr::Foundation::HRESULT),
    set_event_handle : Proc(IAudioClient3*, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    get_service : Proc(IAudioClient3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_offload_capable : Proc(IAudioClient3*, Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_client_properties : Proc(IAudioClient3*, Win32cr::Media::Audio::AudioClientProperties*, Win32cr::Foundation::HRESULT),
    get_buffer_size_limits : Proc(IAudioClient3*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::BOOL, Int64*, Int64*, Win32cr::Foundation::HRESULT),
    get_shared_mode_engine_period : Proc(IAudioClient3*, Win32cr::Media::Audio::WAVEFORMATEX*, UInt32*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    get_current_shared_mode_engine_period : Proc(IAudioClient3*, Win32cr::Media::Audio::WAVEFORMATEX**, UInt32*, Win32cr::Foundation::HRESULT),
    initialize_shared_audio_stream : Proc(IAudioClient3*, UInt32, UInt32, Win32cr::Media::Audio::WAVEFORMATEX*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7ed4ee07-8e67-4cd4-8c1a-2b7a5987ad42")]
  record IAudioClient3, lpVtbl : IAudioClient3Vtbl* do
    GUID = LibC::GUID.new(0x7ed4ee07_u32, 0x8e67_u16, 0x4cd4_u16, StaticArray[0x8c_u8, 0x1a_u8, 0x2b_u8, 0x7a_u8, 0x59_u8, 0x87_u8, 0xad_u8, 0x42_u8])
    def query_interface(this : IAudioClient3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioClient3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioClient3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def initialize__(this : IAudioClient3*, share_mode : Win32cr::Media::Audio::AUDCLNT_SHAREMODE, stream_flags : UInt32, hnsBufferDuration : Int64, hnsPeriodicity : Int64, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, audio_session_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, share_mode, stream_flags, hnsBufferDuration, hnsPeriodicity, pFormat, audio_session_guid)
    end
    def get_buffer_size(this : IAudioClient3*, pNumBufferFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size.call(this, pNumBufferFrames)
    end
    def get_stream_latency(this : IAudioClient3*, phnsLatency : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_stream_latency.call(this, phnsLatency)
    end
    def get_current_padding(this : IAudioClient3*, pNumPaddingFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_padding.call(this, pNumPaddingFrames)
    end
    def is_format_supported(this : IAudioClient3*, share_mode : Win32cr::Media::Audio::AUDCLNT_SHAREMODE, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, ppClosestMatch : Win32cr::Media::Audio::WAVEFORMATEX**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_format_supported.call(this, share_mode, pFormat, ppClosestMatch)
    end
    def get_mix_format(this : IAudioClient3*, ppDeviceFormat : Win32cr::Media::Audio::WAVEFORMATEX**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mix_format.call(this, ppDeviceFormat)
    end
    def get_device_period(this : IAudioClient3*, phnsDefaultDevicePeriod : Int64*, phnsMinimumDevicePeriod : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_period.call(this, phnsDefaultDevicePeriod, phnsMinimumDevicePeriod)
    end
    def start(this : IAudioClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : IAudioClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def reset(this : IAudioClient3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def set_event_handle(this : IAudioClient3*, eventHandle : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_handle.call(this, eventHandle)
    end
    def get_service(this : IAudioClient3*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, riid, ppv)
    end
    def is_offload_capable(this : IAudioClient3*, category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, pbOffloadCapable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_offload_capable.call(this, category, pbOffloadCapable)
    end
    def set_client_properties(this : IAudioClient3*, pProperties : Win32cr::Media::Audio::AudioClientProperties*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_client_properties.call(this, pProperties)
    end
    def get_buffer_size_limits(this : IAudioClient3*, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, bEventDriven : Win32cr::Foundation::BOOL, phnsMinBufferDuration : Int64*, phnsMaxBufferDuration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer_size_limits.call(this, pFormat, bEventDriven, phnsMinBufferDuration, phnsMaxBufferDuration)
    end
    def get_shared_mode_engine_period(this : IAudioClient3*, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, pDefaultPeriodInFrames : UInt32*, pFundamentalPeriodInFrames : UInt32*, pMinPeriodInFrames : UInt32*, pMaxPeriodInFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_shared_mode_engine_period.call(this, pFormat, pDefaultPeriodInFrames, pFundamentalPeriodInFrames, pMinPeriodInFrames, pMaxPeriodInFrames)
    end
    def get_current_shared_mode_engine_period(this : IAudioClient3*, ppFormat : Win32cr::Media::Audio::WAVEFORMATEX**, pCurrentPeriodInFrames : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_shared_mode_engine_period.call(this, ppFormat, pCurrentPeriodInFrames)
    end
    def initialize_shared_audio_stream(this : IAudioClient3*, stream_flags : UInt32, period_in_frames : UInt32, pFormat : Win32cr::Media::Audio::WAVEFORMATEX*, audio_session_guid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_shared_audio_stream.call(this, stream_flags, period_in_frames, pFormat, audio_session_guid)
    end

  end

  @[Extern]
  record IAudioRenderClientVtbl,
    query_interface : Proc(IAudioRenderClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioRenderClient*, UInt32),
    release : Proc(IAudioRenderClient*, UInt32),
    get_buffer : Proc(IAudioRenderClient*, UInt32, UInt8**, Win32cr::Foundation::HRESULT),
    release_buffer : Proc(IAudioRenderClient*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f294acfc-3146-4483-a7bf-addca7c260e2")]
  record IAudioRenderClient, lpVtbl : IAudioRenderClientVtbl* do
    GUID = LibC::GUID.new(0xf294acfc_u32, 0x3146_u16, 0x4483_u16, StaticArray[0xa7_u8, 0xbf_u8, 0xad_u8, 0xdc_u8, 0xa7_u8, 0xc2_u8, 0x60_u8, 0xe2_u8])
    def query_interface(this : IAudioRenderClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioRenderClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioRenderClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffer(this : IAudioRenderClient*, num_frames_requested : UInt32, ppData : UInt8**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, num_frames_requested, ppData)
    end
    def release_buffer(this : IAudioRenderClient*, num_frames_written : UInt32, dwFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_buffer.call(this, num_frames_written, dwFlags)
    end

  end

  @[Extern]
  record IAudioCaptureClientVtbl,
    query_interface : Proc(IAudioCaptureClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioCaptureClient*, UInt32),
    release : Proc(IAudioCaptureClient*, UInt32),
    get_buffer : Proc(IAudioCaptureClient*, UInt8**, UInt32*, UInt32*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    release_buffer : Proc(IAudioCaptureClient*, UInt32, Win32cr::Foundation::HRESULT),
    get_next_packet_size : Proc(IAudioCaptureClient*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c8adbd64-e71e-48a0-a4de-185c395cd317")]
  record IAudioCaptureClient, lpVtbl : IAudioCaptureClientVtbl* do
    GUID = LibC::GUID.new(0xc8adbd64_u32, 0xe71e_u16, 0x48a0_u16, StaticArray[0xa4_u8, 0xde_u8, 0x18_u8, 0x5c_u8, 0x39_u8, 0x5c_u8, 0xd3_u8, 0x17_u8])
    def query_interface(this : IAudioCaptureClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioCaptureClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioCaptureClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffer(this : IAudioCaptureClient*, ppData : UInt8**, pNumFramesToRead : UInt32*, pdwFlags : UInt32*, pu64DevicePosition : UInt64*, pu64QPCPosition : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, ppData, pNumFramesToRead, pdwFlags, pu64DevicePosition, pu64QPCPosition)
    end
    def release_buffer(this : IAudioCaptureClient*, num_frames_read : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_buffer.call(this, num_frames_read)
    end
    def get_next_packet_size(this : IAudioCaptureClient*, pNumFramesInNextPacket : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_next_packet_size.call(this, pNumFramesInNextPacket)
    end

  end

  @[Extern]
  record IAudioClockVtbl,
    query_interface : Proc(IAudioClock*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioClock*, UInt32),
    release : Proc(IAudioClock*, UInt32),
    get_frequency : Proc(IAudioClock*, UInt64*, Win32cr::Foundation::HRESULT),
    get_position : Proc(IAudioClock*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_characteristics : Proc(IAudioClock*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cd63314f-3fba-4a1b-812c-ef96358728e7")]
  record IAudioClock, lpVtbl : IAudioClockVtbl* do
    GUID = LibC::GUID.new(0xcd63314f_u32, 0x3fba_u16, 0x4a1b_u16, StaticArray[0x81_u8, 0x2c_u8, 0xef_u8, 0x96_u8, 0x35_u8, 0x87_u8, 0x28_u8, 0xe7_u8])
    def query_interface(this : IAudioClock*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioClock*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioClock*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_frequency(this : IAudioClock*, pu64Frequency : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frequency.call(this, pu64Frequency)
    end
    def get_position(this : IAudioClock*, pu64Position : UInt64*, pu64QPCPosition : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_position.call(this, pu64Position, pu64QPCPosition)
    end
    def get_characteristics(this : IAudioClock*, pdwCharacteristics : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_characteristics.call(this, pdwCharacteristics)
    end

  end

  @[Extern]
  record IAudioClock2Vtbl,
    query_interface : Proc(IAudioClock2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioClock2*, UInt32),
    release : Proc(IAudioClock2*, UInt32),
    get_device_position : Proc(IAudioClock2*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6f49ff73-6727-49ac-a008-d98cf5e70048")]
  record IAudioClock2, lpVtbl : IAudioClock2Vtbl* do
    GUID = LibC::GUID.new(0x6f49ff73_u32, 0x6727_u16, 0x49ac_u16, StaticArray[0xa0_u8, 0x8_u8, 0xd9_u8, 0x8c_u8, 0xf5_u8, 0xe7_u8, 0x0_u8, 0x48_u8])
    def query_interface(this : IAudioClock2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioClock2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioClock2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device_position(this : IAudioClock2*, device_position : UInt64*, qpc_position : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_position.call(this, device_position, qpc_position)
    end

  end

  @[Extern]
  record IAudioClockAdjustmentVtbl,
    query_interface : Proc(IAudioClockAdjustment*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioClockAdjustment*, UInt32),
    release : Proc(IAudioClockAdjustment*, UInt32),
    set_sample_rate : Proc(IAudioClockAdjustment*, Float32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f6e4c0a0-46d9-4fb8-be21-57a3ef2b626c")]
  record IAudioClockAdjustment, lpVtbl : IAudioClockAdjustmentVtbl* do
    GUID = LibC::GUID.new(0xf6e4c0a0_u32, 0x46d9_u16, 0x4fb8_u16, StaticArray[0xbe_u8, 0x21_u8, 0x57_u8, 0xa3_u8, 0xef_u8, 0x2b_u8, 0x62_u8, 0x6c_u8])
    def query_interface(this : IAudioClockAdjustment*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioClockAdjustment*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioClockAdjustment*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_sample_rate(this : IAudioClockAdjustment*, flSampleRate : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sample_rate.call(this, flSampleRate)
    end

  end

  @[Extern]
  record ISimpleAudioVolumeVtbl,
    query_interface : Proc(ISimpleAudioVolume*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISimpleAudioVolume*, UInt32),
    release : Proc(ISimpleAudioVolume*, UInt32),
    set_master_volume : Proc(ISimpleAudioVolume*, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_master_volume : Proc(ISimpleAudioVolume*, Float32*, Win32cr::Foundation::HRESULT),
    set_mute : Proc(ISimpleAudioVolume*, Win32cr::Foundation::BOOL, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_mute : Proc(ISimpleAudioVolume*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("87ce5498-68d6-44e5-9215-6da47ef883d8")]
  record ISimpleAudioVolume, lpVtbl : ISimpleAudioVolumeVtbl* do
    GUID = LibC::GUID.new(0x87ce5498_u32, 0x68d6_u16, 0x44e5_u16, StaticArray[0x92_u8, 0x15_u8, 0x6d_u8, 0xa4_u8, 0x7e_u8, 0xf8_u8, 0x83_u8, 0xd8_u8])
    def query_interface(this : ISimpleAudioVolume*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISimpleAudioVolume*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISimpleAudioVolume*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_master_volume(this : ISimpleAudioVolume*, fLevel : Float32, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_master_volume.call(this, fLevel, event_context)
    end
    def get_master_volume(this : ISimpleAudioVolume*, pfLevel : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_master_volume.call(this, pfLevel)
    end
    def set_mute(this : ISimpleAudioVolume*, bMute : Win32cr::Foundation::BOOL, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mute.call(this, bMute, event_context)
    end
    def get_mute(this : ISimpleAudioVolume*, pbMute : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mute.call(this, pbMute)
    end

  end

  @[Extern]
  record IAudioClientDuckingControlVtbl,
    query_interface : Proc(IAudioClientDuckingControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioClientDuckingControl*, UInt32),
    release : Proc(IAudioClientDuckingControl*, UInt32),
    set_ducking_options_for_current_stream : Proc(IAudioClientDuckingControl*, Win32cr::Media::Audio::AUDIO_DUCKING_OPTIONS, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c789d381-a28c-4168-b28f-d3a837924dc3")]
  record IAudioClientDuckingControl, lpVtbl : IAudioClientDuckingControlVtbl* do
    GUID = LibC::GUID.new(0xc789d381_u32, 0xa28c_u16, 0x4168_u16, StaticArray[0xb2_u8, 0x8f_u8, 0xd3_u8, 0xa8_u8, 0x37_u8, 0x92_u8, 0x4d_u8, 0xc3_u8])
    def query_interface(this : IAudioClientDuckingControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioClientDuckingControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioClientDuckingControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_ducking_options_for_current_stream(this : IAudioClientDuckingControl*, options : Win32cr::Media::Audio::AUDIO_DUCKING_OPTIONS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ducking_options_for_current_stream.call(this, options)
    end

  end

  @[Extern]
  record IAudioEffectsChangedNotificationClientVtbl,
    query_interface : Proc(IAudioEffectsChangedNotificationClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioEffectsChangedNotificationClient*, UInt32),
    release : Proc(IAudioEffectsChangedNotificationClient*, UInt32),
    on_audio_effects_changed : Proc(IAudioEffectsChangedNotificationClient*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a5ded44f-3c5d-4b2b-bd1e-5dc1ee20bbf6")]
  record IAudioEffectsChangedNotificationClient, lpVtbl : IAudioEffectsChangedNotificationClientVtbl* do
    GUID = LibC::GUID.new(0xa5ded44f_u32, 0x3c5d_u16, 0x4b2b_u16, StaticArray[0xbd_u8, 0x1e_u8, 0x5d_u8, 0xc1_u8, 0xee_u8, 0x20_u8, 0xbb_u8, 0xf6_u8])
    def query_interface(this : IAudioEffectsChangedNotificationClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioEffectsChangedNotificationClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioEffectsChangedNotificationClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_audio_effects_changed(this : IAudioEffectsChangedNotificationClient*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_audio_effects_changed.call(this)
    end

  end

  @[Extern]
  record IAudioEffectsManagerVtbl,
    query_interface : Proc(IAudioEffectsManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioEffectsManager*, UInt32),
    release : Proc(IAudioEffectsManager*, UInt32),
    register_audio_effects_changed_notification_callback : Proc(IAudioEffectsManager*, Void*, Win32cr::Foundation::HRESULT),
    unregister_audio_effects_changed_notification_callback : Proc(IAudioEffectsManager*, Void*, Win32cr::Foundation::HRESULT),
    get_audio_effects : Proc(IAudioEffectsManager*, Win32cr::Media::Audio::AUDIO_EFFECT**, UInt32*, Win32cr::Foundation::HRESULT),
    set_audio_effect_state : Proc(IAudioEffectsManager*, LibC::GUID, Win32cr::Media::Audio::AUDIO_EFFECT_STATE, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4460b3ae-4b44-4527-8676-7548a8acd260")]
  record IAudioEffectsManager, lpVtbl : IAudioEffectsManagerVtbl* do
    GUID = LibC::GUID.new(0x4460b3ae_u32, 0x4b44_u16, 0x4527_u16, StaticArray[0x86_u8, 0x76_u8, 0x75_u8, 0x48_u8, 0xa8_u8, 0xac_u8, 0xd2_u8, 0x60_u8])
    def query_interface(this : IAudioEffectsManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioEffectsManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioEffectsManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_audio_effects_changed_notification_callback(this : IAudioEffectsManager*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_audio_effects_changed_notification_callback.call(this, client)
    end
    def unregister_audio_effects_changed_notification_callback(this : IAudioEffectsManager*, client : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_audio_effects_changed_notification_callback.call(this, client)
    end
    def get_audio_effects(this : IAudioEffectsManager*, effects : Win32cr::Media::Audio::AUDIO_EFFECT**, numEffects : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_effects.call(this, effects, numEffects)
    end
    def set_audio_effect_state(this : IAudioEffectsManager*, effectId : LibC::GUID, state : Win32cr::Media::Audio::AUDIO_EFFECT_STATE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_audio_effect_state.call(this, effectId, state)
    end

  end

  @[Extern]
  record IAudioStreamVolumeVtbl,
    query_interface : Proc(IAudioStreamVolume*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioStreamVolume*, UInt32),
    release : Proc(IAudioStreamVolume*, UInt32),
    get_channel_count : Proc(IAudioStreamVolume*, UInt32*, Win32cr::Foundation::HRESULT),
    set_channel_volume : Proc(IAudioStreamVolume*, UInt32, Float32, Win32cr::Foundation::HRESULT),
    get_channel_volume : Proc(IAudioStreamVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_all_volumes : Proc(IAudioStreamVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    get_all_volumes : Proc(IAudioStreamVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("93014887-242d-4068-8a15-cf5e93b90fe3")]
  record IAudioStreamVolume, lpVtbl : IAudioStreamVolumeVtbl* do
    GUID = LibC::GUID.new(0x93014887_u32, 0x242d_u16, 0x4068_u16, StaticArray[0x8a_u8, 0x15_u8, 0xcf_u8, 0x5e_u8, 0x93_u8, 0xb9_u8, 0xf_u8, 0xe3_u8])
    def query_interface(this : IAudioStreamVolume*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioStreamVolume*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioStreamVolume*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IAudioStreamVolume*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pdwCount)
    end
    def set_channel_volume(this : IAudioStreamVolume*, dwIndex : UInt32, fLevel : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_channel_volume.call(this, dwIndex, fLevel)
    end
    def get_channel_volume(this : IAudioStreamVolume*, dwIndex : UInt32, pfLevel : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_volume.call(this, dwIndex, pfLevel)
    end
    def set_all_volumes(this : IAudioStreamVolume*, dwCount : UInt32, pfVolumes : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_volumes.call(this, dwCount, pfVolumes)
    end
    def get_all_volumes(this : IAudioStreamVolume*, dwCount : UInt32, pfVolumes : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_volumes.call(this, dwCount, pfVolumes)
    end

  end

  @[Extern]
  record IAudioAmbisonicsControlVtbl,
    query_interface : Proc(IAudioAmbisonicsControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioAmbisonicsControl*, UInt32),
    release : Proc(IAudioAmbisonicsControl*, UInt32),
    set_data : Proc(IAudioAmbisonicsControl*, Win32cr::Media::Audio::AMBISONICS_PARAMS*, UInt32, Win32cr::Foundation::HRESULT),
    set_head_tracking : Proc(IAudioAmbisonicsControl*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_head_tracking : Proc(IAudioAmbisonicsControl*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_rotation : Proc(IAudioAmbisonicsControl*, Float32, Float32, Float32, Float32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("28724c91-df35-4856-9f76-d6a26413f3df")]
  record IAudioAmbisonicsControl, lpVtbl : IAudioAmbisonicsControlVtbl* do
    GUID = LibC::GUID.new(0x28724c91_u32, 0xdf35_u16, 0x4856_u16, StaticArray[0x9f_u8, 0x76_u8, 0xd6_u8, 0xa2_u8, 0x64_u8, 0x13_u8, 0xf3_u8, 0xdf_u8])
    def query_interface(this : IAudioAmbisonicsControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioAmbisonicsControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioAmbisonicsControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_data(this : IAudioAmbisonicsControl*, pAmbisonicsParams : Win32cr::Media::Audio::AMBISONICS_PARAMS*, cbAmbisonicsParams : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_data.call(this, pAmbisonicsParams, cbAmbisonicsParams)
    end
    def set_head_tracking(this : IAudioAmbisonicsControl*, bEnableHeadTracking : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_head_tracking.call(this, bEnableHeadTracking)
    end
    def get_head_tracking(this : IAudioAmbisonicsControl*, pbEnableHeadTracking : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_head_tracking.call(this, pbEnableHeadTracking)
    end
    def set_rotation(this : IAudioAmbisonicsControl*, x : Float32, y : Float32, z : Float32, w : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_rotation.call(this, x, y, z, w)
    end

  end

  @[Extern]
  record IChannelAudioVolumeVtbl,
    query_interface : Proc(IChannelAudioVolume*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IChannelAudioVolume*, UInt32),
    release : Proc(IChannelAudioVolume*, UInt32),
    get_channel_count : Proc(IChannelAudioVolume*, UInt32*, Win32cr::Foundation::HRESULT),
    set_channel_volume : Proc(IChannelAudioVolume*, UInt32, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_channel_volume : Proc(IChannelAudioVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_all_volumes : Proc(IChannelAudioVolume*, UInt32, Float32*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_all_volumes : Proc(IChannelAudioVolume*, UInt32, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1c158861-b533-4b30-b1cf-e853e51c59b8")]
  record IChannelAudioVolume, lpVtbl : IChannelAudioVolumeVtbl* do
    GUID = LibC::GUID.new(0x1c158861_u32, 0xb533_u16, 0x4b30_u16, StaticArray[0xb1_u8, 0xcf_u8, 0xe8_u8, 0x53_u8, 0xe5_u8, 0x1c_u8, 0x59_u8, 0xb8_u8])
    def query_interface(this : IChannelAudioVolume*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IChannelAudioVolume*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IChannelAudioVolume*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IChannelAudioVolume*, pdwCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pdwCount)
    end
    def set_channel_volume(this : IChannelAudioVolume*, dwIndex : UInt32, fLevel : Float32, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_channel_volume.call(this, dwIndex, fLevel, event_context)
    end
    def get_channel_volume(this : IChannelAudioVolume*, dwIndex : UInt32, pfLevel : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_volume.call(this, dwIndex, pfLevel)
    end
    def set_all_volumes(this : IChannelAudioVolume*, dwCount : UInt32, pfVolumes : Float32*, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_volumes.call(this, dwCount, pfVolumes, event_context)
    end
    def get_all_volumes(this : IChannelAudioVolume*, dwCount : UInt32, pfVolumes : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_all_volumes.call(this, dwCount, pfVolumes)
    end

  end

  @[Extern]
  record IAudioFormatEnumeratorVtbl,
    query_interface : Proc(IAudioFormatEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioFormatEnumerator*, UInt32),
    release : Proc(IAudioFormatEnumerator*, UInt32),
    get_count : Proc(IAudioFormatEnumerator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_format : Proc(IAudioFormatEnumerator*, UInt32, Win32cr::Media::Audio::WAVEFORMATEX**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dcdaa858-895a-4a22-a5eb-67bda506096d")]
  record IAudioFormatEnumerator, lpVtbl : IAudioFormatEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xdcdaa858_u32, 0x895a_u16, 0x4a22_u16, StaticArray[0xa5_u8, 0xeb_u8, 0x67_u8, 0xbd_u8, 0xa5_u8, 0x6_u8, 0x9_u8, 0x6d_u8])
    def query_interface(this : IAudioFormatEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioFormatEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioFormatEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_count(this : IAudioFormatEnumerator*, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, count)
    end
    def get_format(this : IAudioFormatEnumerator*, index : UInt32, format : Win32cr::Media::Audio::WAVEFORMATEX**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_format.call(this, index, format)
    end

  end

  @[Extern]
  record ISpatialAudioObjectBaseVtbl,
    query_interface : Proc(ISpatialAudioObjectBase*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectBase*, UInt32),
    release : Proc(ISpatialAudioObjectBase*, UInt32),
    get_buffer : Proc(ISpatialAudioObjectBase*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_end_of_stream : Proc(ISpatialAudioObjectBase*, UInt32, Win32cr::Foundation::HRESULT),
    is_active : Proc(ISpatialAudioObjectBase*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_audio_object_type : Proc(ISpatialAudioObjectBase*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("cce0b8f2-8d4d-4efb-a8cf-3d6ecf1c30e0")]
  record ISpatialAudioObjectBase, lpVtbl : ISpatialAudioObjectBaseVtbl* do
    GUID = LibC::GUID.new(0xcce0b8f2_u32, 0x8d4d_u16, 0x4efb_u16, StaticArray[0xa8_u8, 0xcf_u8, 0x3d_u8, 0x6e_u8, 0xcf_u8, 0x1c_u8, 0x30_u8, 0xe0_u8])
    def query_interface(this : ISpatialAudioObjectBase*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectBase*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectBase*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffer(this : ISpatialAudioObjectBase*, buffer : UInt8**, bufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, buffer, bufferLength)
    end
    def set_end_of_stream(this : ISpatialAudioObjectBase*, frameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_end_of_stream.call(this, frameCount)
    end
    def is_active(this : ISpatialAudioObjectBase*, isActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_active.call(this, isActive)
    end
    def get_audio_object_type(this : ISpatialAudioObjectBase*, audioObjectType : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_object_type.call(this, audioObjectType)
    end

  end

  @[Extern]
  record ISpatialAudioObjectVtbl,
    query_interface : Proc(ISpatialAudioObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObject*, UInt32),
    release : Proc(ISpatialAudioObject*, UInt32),
    get_buffer : Proc(ISpatialAudioObject*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_end_of_stream : Proc(ISpatialAudioObject*, UInt32, Win32cr::Foundation::HRESULT),
    is_active : Proc(ISpatialAudioObject*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_audio_object_type : Proc(ISpatialAudioObject*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT),
    set_position : Proc(ISpatialAudioObject*, Float32, Float32, Float32, Win32cr::Foundation::HRESULT),
    set_volume : Proc(ISpatialAudioObject*, Float32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dde28967-521b-46e5-8f00-bd6f2bc8ab1d")]
  record ISpatialAudioObject, lpVtbl : ISpatialAudioObjectVtbl* do
    GUID = LibC::GUID.new(0xdde28967_u32, 0x521b_u16, 0x46e5_u16, StaticArray[0x8f_u8, 0x0_u8, 0xbd_u8, 0x6f_u8, 0x2b_u8, 0xc8_u8, 0xab_u8, 0x1d_u8])
    def query_interface(this : ISpatialAudioObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffer(this : ISpatialAudioObject*, buffer : UInt8**, bufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, buffer, bufferLength)
    end
    def set_end_of_stream(this : ISpatialAudioObject*, frameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_end_of_stream.call(this, frameCount)
    end
    def is_active(this : ISpatialAudioObject*, isActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_active.call(this, isActive)
    end
    def get_audio_object_type(this : ISpatialAudioObject*, audioObjectType : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_object_type.call(this, audioObjectType)
    end
    def set_position(this : ISpatialAudioObject*, x : Float32, y : Float32, z : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_position.call(this, x, y, z)
    end
    def set_volume(this : ISpatialAudioObject*, volume : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_volume.call(this, volume)
    end

  end

  @[Extern]
  record ISpatialAudioObjectRenderStreamBaseVtbl,
    query_interface : Proc(ISpatialAudioObjectRenderStreamBase*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32),
    release : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32),
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32*, Win32cr::Foundation::HRESULT),
    get_service : Proc(ISpatialAudioObjectRenderStreamBase*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(ISpatialAudioObjectRenderStreamBase*, Win32cr::Foundation::HRESULT),
    stop : Proc(ISpatialAudioObjectRenderStreamBase*, Win32cr::Foundation::HRESULT),
    reset : Proc(ISpatialAudioObjectRenderStreamBase*, Win32cr::Foundation::HRESULT),
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamBase*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("feaaf403-c1d8-450d-aa05-e0ccee7502a8")]
  record ISpatialAudioObjectRenderStreamBase, lpVtbl : ISpatialAudioObjectRenderStreamBaseVtbl* do
    GUID = LibC::GUID.new(0xfeaaf403_u32, 0xc1d8_u16, 0x450d_u16, StaticArray[0xaa_u8, 0x5_u8, 0xe0_u8, 0xcc_u8, 0xee_u8, 0x75_u8, 0x2_u8, 0xa8_u8])
    def query_interface(this : ISpatialAudioObjectRenderStreamBase*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectRenderStreamBase*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectRenderStreamBase*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_available_dynamic_object_count(this : ISpatialAudioObjectRenderStreamBase*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_dynamic_object_count.call(this, value)
    end
    def get_service(this : ISpatialAudioObjectRenderStreamBase*, riid : LibC::GUID*, service : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, riid, service)
    end
    def start(this : ISpatialAudioObjectRenderStreamBase*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : ISpatialAudioObjectRenderStreamBase*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def reset(this : ISpatialAudioObjectRenderStreamBase*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def begin_updating_audio_objects(this : ISpatialAudioObjectRenderStreamBase*, availableDynamicObjectCount : UInt32*, frameCountPerBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_updating_audio_objects.call(this, availableDynamicObjectCount, frameCountPerBuffer)
    end
    def end_updating_audio_objects(this : ISpatialAudioObjectRenderStreamBase*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_updating_audio_objects.call(this)
    end

  end

  @[Extern]
  record ISpatialAudioObjectRenderStreamVtbl,
    query_interface : Proc(ISpatialAudioObjectRenderStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectRenderStream*, UInt32),
    release : Proc(ISpatialAudioObjectRenderStream*, UInt32),
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStream*, UInt32*, Win32cr::Foundation::HRESULT),
    get_service : Proc(ISpatialAudioObjectRenderStream*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(ISpatialAudioObjectRenderStream*, Win32cr::Foundation::HRESULT),
    stop : Proc(ISpatialAudioObjectRenderStream*, Win32cr::Foundation::HRESULT),
    reset : Proc(ISpatialAudioObjectRenderStream*, Win32cr::Foundation::HRESULT),
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStream*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStream*, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_object : Proc(ISpatialAudioObjectRenderStream*, Win32cr::Media::Audio::AudioObjectType, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bab5f473-b423-477b-85f5-b5a332a04153")]
  record ISpatialAudioObjectRenderStream, lpVtbl : ISpatialAudioObjectRenderStreamVtbl* do
    GUID = LibC::GUID.new(0xbab5f473_u32, 0xb423_u16, 0x477b_u16, StaticArray[0x85_u8, 0xf5_u8, 0xb5_u8, 0xa3_u8, 0x32_u8, 0xa0_u8, 0x41_u8, 0x53_u8])
    def query_interface(this : ISpatialAudioObjectRenderStream*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectRenderStream*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectRenderStream*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_available_dynamic_object_count(this : ISpatialAudioObjectRenderStream*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_dynamic_object_count.call(this, value)
    end
    def get_service(this : ISpatialAudioObjectRenderStream*, riid : LibC::GUID*, service : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, riid, service)
    end
    def start(this : ISpatialAudioObjectRenderStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : ISpatialAudioObjectRenderStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def reset(this : ISpatialAudioObjectRenderStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def begin_updating_audio_objects(this : ISpatialAudioObjectRenderStream*, availableDynamicObjectCount : UInt32*, frameCountPerBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_updating_audio_objects.call(this, availableDynamicObjectCount, frameCountPerBuffer)
    end
    def end_updating_audio_objects(this : ISpatialAudioObjectRenderStream*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_updating_audio_objects.call(this)
    end
    def activate_spatial_audio_object(this : ISpatialAudioObjectRenderStream*, type__ : Win32cr::Media::Audio::AudioObjectType, audioObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_object.call(this, type__, audioObject)
    end

  end

  @[Extern]
  record ISpatialAudioObjectRenderStreamNotifyVtbl,
    query_interface : Proc(ISpatialAudioObjectRenderStreamNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectRenderStreamNotify*, UInt32),
    release : Proc(ISpatialAudioObjectRenderStreamNotify*, UInt32),
    on_available_dynamic_object_count_change : Proc(ISpatialAudioObjectRenderStreamNotify*, Void*, Int64, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dddf83e6-68d7-4c70-883f-a1836afb4a50")]
  record ISpatialAudioObjectRenderStreamNotify, lpVtbl : ISpatialAudioObjectRenderStreamNotifyVtbl* do
    GUID = LibC::GUID.new(0xdddf83e6_u32, 0x68d7_u16, 0x4c70_u16, StaticArray[0x88_u8, 0x3f_u8, 0xa1_u8, 0x83_u8, 0x6a_u8, 0xfb_u8, 0x4a_u8, 0x50_u8])
    def query_interface(this : ISpatialAudioObjectRenderStreamNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectRenderStreamNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectRenderStreamNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_available_dynamic_object_count_change(this : ISpatialAudioObjectRenderStreamNotify*, sender : Void*, hnsComplianceDeadlineTime : Int64, availableDynamicObjectCountChange : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_available_dynamic_object_count_change.call(this, sender, hnsComplianceDeadlineTime, availableDynamicObjectCountChange)
    end

  end

  @[Extern]
  record ISpatialAudioClientVtbl,
    query_interface : Proc(ISpatialAudioClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioClient*, UInt32),
    release : Proc(ISpatialAudioClient*, UInt32),
    get_static_object_position : Proc(ISpatialAudioClient*, Win32cr::Media::Audio::AudioObjectType, Float32*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_native_static_object_type_mask : Proc(ISpatialAudioClient*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT),
    get_max_dynamic_object_count : Proc(ISpatialAudioClient*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_audio_object_format_enumerator : Proc(ISpatialAudioClient*, Void**, Win32cr::Foundation::HRESULT),
    get_max_frame_count : Proc(ISpatialAudioClient*, Win32cr::Media::Audio::WAVEFORMATEX*, UInt32*, Win32cr::Foundation::HRESULT),
    is_audio_object_format_supported : Proc(ISpatialAudioClient*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::HRESULT),
    is_spatial_audio_stream_available : Proc(ISpatialAudioClient*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_stream : Proc(ISpatialAudioClient*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bbf8e066-aaaa-49be-9a4d-fd2a858ea27f")]
  record ISpatialAudioClient, lpVtbl : ISpatialAudioClientVtbl* do
    GUID = LibC::GUID.new(0xbbf8e066_u32, 0xaaaa_u16, 0x49be_u16, StaticArray[0x9a_u8, 0x4d_u8, 0xfd_u8, 0x2a_u8, 0x85_u8, 0x8e_u8, 0xa2_u8, 0x7f_u8])
    def query_interface(this : ISpatialAudioClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_static_object_position(this : ISpatialAudioClient*, type__ : Win32cr::Media::Audio::AudioObjectType, x : Float32*, y : Float32*, z : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_static_object_position.call(this, type__, x, y, z)
    end
    def get_native_static_object_type_mask(this : ISpatialAudioClient*, mask : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_static_object_type_mask.call(this, mask)
    end
    def get_max_dynamic_object_count(this : ISpatialAudioClient*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_dynamic_object_count.call(this, value)
    end
    def get_supported_audio_object_format_enumerator(this : ISpatialAudioClient*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_audio_object_format_enumerator.call(this, enumerator)
    end
    def get_max_frame_count(this : ISpatialAudioClient*, objectFormat : Win32cr::Media::Audio::WAVEFORMATEX*, frameCountPerBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_frame_count.call(this, objectFormat, frameCountPerBuffer)
    end
    def is_audio_object_format_supported(this : ISpatialAudioClient*, objectFormat : Win32cr::Media::Audio::WAVEFORMATEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_audio_object_format_supported.call(this, objectFormat)
    end
    def is_spatial_audio_stream_available(this : ISpatialAudioClient*, streamUuid : LibC::GUID*, auxiliaryInfo : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_spatial_audio_stream_available.call(this, streamUuid, auxiliaryInfo)
    end
    def activate_spatial_audio_stream(this : ISpatialAudioClient*, activationParams : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, riid : LibC::GUID*, stream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_stream.call(this, activationParams, riid, stream)
    end

  end

  @[Extern]
  record ISpatialAudioClient2Vtbl,
    query_interface : Proc(ISpatialAudioClient2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioClient2*, UInt32),
    release : Proc(ISpatialAudioClient2*, UInt32),
    get_static_object_position : Proc(ISpatialAudioClient2*, Win32cr::Media::Audio::AudioObjectType, Float32*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_native_static_object_type_mask : Proc(ISpatialAudioClient2*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT),
    get_max_dynamic_object_count : Proc(ISpatialAudioClient2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_audio_object_format_enumerator : Proc(ISpatialAudioClient2*, Void**, Win32cr::Foundation::HRESULT),
    get_max_frame_count : Proc(ISpatialAudioClient2*, Win32cr::Media::Audio::WAVEFORMATEX*, UInt32*, Win32cr::Foundation::HRESULT),
    is_audio_object_format_supported : Proc(ISpatialAudioClient2*, Win32cr::Media::Audio::WAVEFORMATEX*, Win32cr::Foundation::HRESULT),
    is_spatial_audio_stream_available : Proc(ISpatialAudioClient2*, LibC::GUID*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_stream : Proc(ISpatialAudioClient2*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    is_offload_capable : Proc(ISpatialAudioClient2*, Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_max_frame_count_for_category : Proc(ISpatialAudioClient2*, Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, Win32cr::Foundation::BOOL, Win32cr::Media::Audio::WAVEFORMATEX*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("caabe452-a66a-4bee-a93e-e320463f6a53")]
  record ISpatialAudioClient2, lpVtbl : ISpatialAudioClient2Vtbl* do
    GUID = LibC::GUID.new(0xcaabe452_u32, 0xa66a_u16, 0x4bee_u16, StaticArray[0xa9_u8, 0x3e_u8, 0xe3_u8, 0x20_u8, 0x46_u8, 0x3f_u8, 0x6a_u8, 0x53_u8])
    def query_interface(this : ISpatialAudioClient2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioClient2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioClient2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_static_object_position(this : ISpatialAudioClient2*, type__ : Win32cr::Media::Audio::AudioObjectType, x : Float32*, y : Float32*, z : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_static_object_position.call(this, type__, x, y, z)
    end
    def get_native_static_object_type_mask(this : ISpatialAudioClient2*, mask : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_native_static_object_type_mask.call(this, mask)
    end
    def get_max_dynamic_object_count(this : ISpatialAudioClient2*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_dynamic_object_count.call(this, value)
    end
    def get_supported_audio_object_format_enumerator(this : ISpatialAudioClient2*, enumerator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_audio_object_format_enumerator.call(this, enumerator)
    end
    def get_max_frame_count(this : ISpatialAudioClient2*, objectFormat : Win32cr::Media::Audio::WAVEFORMATEX*, frameCountPerBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_frame_count.call(this, objectFormat, frameCountPerBuffer)
    end
    def is_audio_object_format_supported(this : ISpatialAudioClient2*, objectFormat : Win32cr::Media::Audio::WAVEFORMATEX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_audio_object_format_supported.call(this, objectFormat)
    end
    def is_spatial_audio_stream_available(this : ISpatialAudioClient2*, streamUuid : LibC::GUID*, auxiliaryInfo : Win32cr::System::Com::StructuredStorage::PROPVARIANT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_spatial_audio_stream_available.call(this, streamUuid, auxiliaryInfo)
    end
    def activate_spatial_audio_stream(this : ISpatialAudioClient2*, activationParams : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, riid : LibC::GUID*, stream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_stream.call(this, activationParams, riid, stream)
    end
    def is_offload_capable(this : ISpatialAudioClient2*, category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, isOffloadCapable : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_offload_capable.call(this, category, isOffloadCapable)
    end
    def get_max_frame_count_for_category(this : ISpatialAudioClient2*, category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, offloadEnabled : Win32cr::Foundation::BOOL, objectFormat : Win32cr::Media::Audio::WAVEFORMATEX*, frameCountPerBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_frame_count_for_category.call(this, category, offloadEnabled, objectFormat, frameCountPerBuffer)
    end

  end

  @[Extern]
  record ISpatialAudioObjectForHrtfVtbl,
    query_interface : Proc(ISpatialAudioObjectForHrtf*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectForHrtf*, UInt32),
    release : Proc(ISpatialAudioObjectForHrtf*, UInt32),
    get_buffer : Proc(ISpatialAudioObjectForHrtf*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_end_of_stream : Proc(ISpatialAudioObjectForHrtf*, UInt32, Win32cr::Foundation::HRESULT),
    is_active : Proc(ISpatialAudioObjectForHrtf*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_audio_object_type : Proc(ISpatialAudioObjectForHrtf*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT),
    set_position : Proc(ISpatialAudioObjectForHrtf*, Float32, Float32, Float32, Win32cr::Foundation::HRESULT),
    set_gain : Proc(ISpatialAudioObjectForHrtf*, Float32, Win32cr::Foundation::HRESULT),
    set_orientation : Proc(ISpatialAudioObjectForHrtf*, Float32**, Win32cr::Foundation::HRESULT),
    set_environment : Proc(ISpatialAudioObjectForHrtf*, Win32cr::Media::Audio::SpatialAudioHrtfEnvironmentType, Win32cr::Foundation::HRESULT),
    set_distance_decay : Proc(ISpatialAudioObjectForHrtf*, Win32cr::Media::Audio::SpatialAudioHrtfDistanceDecay*, Win32cr::Foundation::HRESULT),
    set_directivity : Proc(ISpatialAudioObjectForHrtf*, Win32cr::Media::Audio::SpatialAudioHrtfDirectivityUnion*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d7436ade-1978-4e14-aba0-555bd8eb83b4")]
  record ISpatialAudioObjectForHrtf, lpVtbl : ISpatialAudioObjectForHrtfVtbl* do
    GUID = LibC::GUID.new(0xd7436ade_u32, 0x1978_u16, 0x4e14_u16, StaticArray[0xab_u8, 0xa0_u8, 0x55_u8, 0x5b_u8, 0xd8_u8, 0xeb_u8, 0x83_u8, 0xb4_u8])
    def query_interface(this : ISpatialAudioObjectForHrtf*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectForHrtf*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectForHrtf*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffer(this : ISpatialAudioObjectForHrtf*, buffer : UInt8**, bufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, buffer, bufferLength)
    end
    def set_end_of_stream(this : ISpatialAudioObjectForHrtf*, frameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_end_of_stream.call(this, frameCount)
    end
    def is_active(this : ISpatialAudioObjectForHrtf*, isActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_active.call(this, isActive)
    end
    def get_audio_object_type(this : ISpatialAudioObjectForHrtf*, audioObjectType : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_object_type.call(this, audioObjectType)
    end
    def set_position(this : ISpatialAudioObjectForHrtf*, x : Float32, y : Float32, z : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_position.call(this, x, y, z)
    end
    def set_gain(this : ISpatialAudioObjectForHrtf*, gain : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_gain.call(this, gain)
    end
    def set_orientation(this : ISpatialAudioObjectForHrtf*, orientation : Float32**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_orientation.call(this, orientation)
    end
    def set_environment(this : ISpatialAudioObjectForHrtf*, environment : Win32cr::Media::Audio::SpatialAudioHrtfEnvironmentType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_environment.call(this, environment)
    end
    def set_distance_decay(this : ISpatialAudioObjectForHrtf*, distanceDecay : Win32cr::Media::Audio::SpatialAudioHrtfDistanceDecay*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_distance_decay.call(this, distanceDecay)
    end
    def set_directivity(this : ISpatialAudioObjectForHrtf*, directivity : Win32cr::Media::Audio::SpatialAudioHrtfDirectivityUnion*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_directivity.call(this, directivity)
    end

  end

  @[Extern]
  record ISpatialAudioObjectRenderStreamForHrtfVtbl,
    query_interface : Proc(ISpatialAudioObjectRenderStreamForHrtf*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32),
    release : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32),
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32*, Win32cr::Foundation::HRESULT),
    get_service : Proc(ISpatialAudioObjectRenderStreamForHrtf*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(ISpatialAudioObjectRenderStreamForHrtf*, Win32cr::Foundation::HRESULT),
    stop : Proc(ISpatialAudioObjectRenderStreamForHrtf*, Win32cr::Foundation::HRESULT),
    reset : Proc(ISpatialAudioObjectRenderStreamForHrtf*, Win32cr::Foundation::HRESULT),
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForHrtf*, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_object_for_hrtf : Proc(ISpatialAudioObjectRenderStreamForHrtf*, Win32cr::Media::Audio::AudioObjectType, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e08deef9-5363-406e-9fdc-080ee247bbe0")]
  record ISpatialAudioObjectRenderStreamForHrtf, lpVtbl : ISpatialAudioObjectRenderStreamForHrtfVtbl* do
    GUID = LibC::GUID.new(0xe08deef9_u32, 0x5363_u16, 0x406e_u16, StaticArray[0x9f_u8, 0xdc_u8, 0x8_u8, 0xe_u8, 0xe2_u8, 0x47_u8, 0xbb_u8, 0xe0_u8])
    def query_interface(this : ISpatialAudioObjectRenderStreamForHrtf*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectRenderStreamForHrtf*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectRenderStreamForHrtf*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_available_dynamic_object_count(this : ISpatialAudioObjectRenderStreamForHrtf*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_dynamic_object_count.call(this, value)
    end
    def get_service(this : ISpatialAudioObjectRenderStreamForHrtf*, riid : LibC::GUID*, service : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, riid, service)
    end
    def start(this : ISpatialAudioObjectRenderStreamForHrtf*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : ISpatialAudioObjectRenderStreamForHrtf*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def reset(this : ISpatialAudioObjectRenderStreamForHrtf*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def begin_updating_audio_objects(this : ISpatialAudioObjectRenderStreamForHrtf*, availableDynamicObjectCount : UInt32*, frameCountPerBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_updating_audio_objects.call(this, availableDynamicObjectCount, frameCountPerBuffer)
    end
    def end_updating_audio_objects(this : ISpatialAudioObjectRenderStreamForHrtf*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_updating_audio_objects.call(this)
    end
    def activate_spatial_audio_object_for_hrtf(this : ISpatialAudioObjectRenderStreamForHrtf*, type__ : Win32cr::Media::Audio::AudioObjectType, audioObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_object_for_hrtf.call(this, type__, audioObject)
    end

  end

  @[Extern]
  record IMMNotificationClientVtbl,
    query_interface : Proc(IMMNotificationClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMMNotificationClient*, UInt32),
    release : Proc(IMMNotificationClient*, UInt32),
    on_device_state_changed : Proc(IMMNotificationClient*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    on_device_added : Proc(IMMNotificationClient*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_device_removed : Proc(IMMNotificationClient*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_default_device_changed : Proc(IMMNotificationClient*, Win32cr::Media::Audio::EDataFlow, Win32cr::Media::Audio::ERole, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    on_property_value_changed : Proc(IMMNotificationClient*, Win32cr::Foundation::PWSTR, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7991eec9-7e89-4d85-8390-6c703cec60c0")]
  record IMMNotificationClient, lpVtbl : IMMNotificationClientVtbl* do
    GUID = LibC::GUID.new(0x7991eec9_u32, 0x7e89_u16, 0x4d85_u16, StaticArray[0x83_u8, 0x90_u8, 0x6c_u8, 0x70_u8, 0x3c_u8, 0xec_u8, 0x60_u8, 0xc0_u8])
    def query_interface(this : IMMNotificationClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMMNotificationClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMMNotificationClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_device_state_changed(this : IMMNotificationClient*, pwstrDeviceId : Win32cr::Foundation::PWSTR, dwNewState : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_device_state_changed.call(this, pwstrDeviceId, dwNewState)
    end
    def on_device_added(this : IMMNotificationClient*, pwstrDeviceId : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_device_added.call(this, pwstrDeviceId)
    end
    def on_device_removed(this : IMMNotificationClient*, pwstrDeviceId : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_device_removed.call(this, pwstrDeviceId)
    end
    def on_default_device_changed(this : IMMNotificationClient*, flow : Win32cr::Media::Audio::EDataFlow, role : Win32cr::Media::Audio::ERole, pwstrDefaultDeviceId : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_default_device_changed.call(this, flow, role, pwstrDefaultDeviceId)
    end
    def on_property_value_changed(this : IMMNotificationClient*, pwstrDeviceId : Win32cr::Foundation::PWSTR, key : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_property_value_changed.call(this, pwstrDeviceId, key)
    end

  end

  @[Extern]
  record IMMDeviceVtbl,
    query_interface : Proc(IMMDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMMDevice*, UInt32),
    release : Proc(IMMDevice*, UInt32),
    activate : Proc(IMMDevice*, LibC::GUID*, Win32cr::System::Com::CLSCTX, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Void**, Win32cr::Foundation::HRESULT),
    open_property_store : Proc(IMMDevice*, Win32cr::System::Com::StructuredStorage::STGM, Void**, Win32cr::Foundation::HRESULT),
    get_id : Proc(IMMDevice*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_state : Proc(IMMDevice*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d666063f-1587-4e43-81f1-b948e807363f")]
  record IMMDevice, lpVtbl : IMMDeviceVtbl* do
    GUID = LibC::GUID.new(0xd666063f_u32, 0x1587_u16, 0x4e43_u16, StaticArray[0x81_u8, 0xf1_u8, 0xb9_u8, 0x48_u8, 0xe8_u8, 0x7_u8, 0x36_u8, 0x3f_u8])
    def query_interface(this : IMMDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMMDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMMDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def activate(this : IMMDevice*, iid : LibC::GUID*, dwClsCtx : Win32cr::System::Com::CLSCTX, pActivationParams : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, ppInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate.call(this, iid, dwClsCtx, pActivationParams, ppInterface)
    end
    def open_property_store(this : IMMDevice*, stgmAccess : Win32cr::System::Com::StructuredStorage::STGM, ppProperties : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_property_store.call(this, stgmAccess, ppProperties)
    end
    def get_id(this : IMMDevice*, ppstrId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_id.call(this, ppstrId)
    end
    def get_state(this : IMMDevice*, pdwState : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pdwState)
    end

  end

  @[Extern]
  record IMMDeviceCollectionVtbl,
    query_interface : Proc(IMMDeviceCollection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMMDeviceCollection*, UInt32),
    release : Proc(IMMDeviceCollection*, UInt32),
    get_count : Proc(IMMDeviceCollection*, UInt32*, Win32cr::Foundation::HRESULT),
    item : Proc(IMMDeviceCollection*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0bd7a1be-7a1a-44db-8397-cc5392387b5e")]
  record IMMDeviceCollection, lpVtbl : IMMDeviceCollectionVtbl* do
    GUID = LibC::GUID.new(0xbd7a1be_u32, 0x7a1a_u16, 0x44db_u16, StaticArray[0x83_u8, 0x97_u8, 0xcc_u8, 0x53_u8, 0x92_u8, 0x38_u8, 0x7b_u8, 0x5e_u8])
    def query_interface(this : IMMDeviceCollection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMMDeviceCollection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMMDeviceCollection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_count(this : IMMDeviceCollection*, pcDevices : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pcDevices)
    end
    def item(this : IMMDeviceCollection*, nDevice : UInt32, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.item.call(this, nDevice, ppDevice)
    end

  end

  @[Extern]
  record IMMEndpointVtbl,
    query_interface : Proc(IMMEndpoint*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMMEndpoint*, UInt32),
    release : Proc(IMMEndpoint*, UInt32),
    get_data_flow : Proc(IMMEndpoint*, Win32cr::Media::Audio::EDataFlow*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1be09788-6894-4089-8586-9a2a6c265ac5")]
  record IMMEndpoint, lpVtbl : IMMEndpointVtbl* do
    GUID = LibC::GUID.new(0x1be09788_u32, 0x6894_u16, 0x4089_u16, StaticArray[0x85_u8, 0x86_u8, 0x9a_u8, 0x2a_u8, 0x6c_u8, 0x26_u8, 0x5a_u8, 0xc5_u8])
    def query_interface(this : IMMEndpoint*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMMEndpoint*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMMEndpoint*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_data_flow(this : IMMEndpoint*, pDataFlow : Win32cr::Media::Audio::EDataFlow*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_flow.call(this, pDataFlow)
    end

  end

  @[Extern]
  record IMMDeviceEnumeratorVtbl,
    query_interface : Proc(IMMDeviceEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMMDeviceEnumerator*, UInt32),
    release : Proc(IMMDeviceEnumerator*, UInt32),
    enum_audio_endpoints : Proc(IMMDeviceEnumerator*, Win32cr::Media::Audio::EDataFlow, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_default_audio_endpoint : Proc(IMMDeviceEnumerator*, Win32cr::Media::Audio::EDataFlow, Win32cr::Media::Audio::ERole, Void**, Win32cr::Foundation::HRESULT),
    get_device : Proc(IMMDeviceEnumerator*, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    register_endpoint_notification_callback : Proc(IMMDeviceEnumerator*, Void*, Win32cr::Foundation::HRESULT),
    unregister_endpoint_notification_callback : Proc(IMMDeviceEnumerator*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a95664d2-9614-4f35-a746-de8db63617e6")]
  record IMMDeviceEnumerator, lpVtbl : IMMDeviceEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xa95664d2_u32, 0x9614_u16, 0x4f35_u16, StaticArray[0xa7_u8, 0x46_u8, 0xde_u8, 0x8d_u8, 0xb6_u8, 0x36_u8, 0x17_u8, 0xe6_u8])
    def query_interface(this : IMMDeviceEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMMDeviceEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMMDeviceEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enum_audio_endpoints(this : IMMDeviceEnumerator*, dataFlow : Win32cr::Media::Audio::EDataFlow, dwStateMask : UInt32, ppDevices : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_audio_endpoints.call(this, dataFlow, dwStateMask, ppDevices)
    end
    def get_default_audio_endpoint(this : IMMDeviceEnumerator*, dataFlow : Win32cr::Media::Audio::EDataFlow, role : Win32cr::Media::Audio::ERole, ppEndpoint : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_audio_endpoint.call(this, dataFlow, role, ppEndpoint)
    end
    def get_device(this : IMMDeviceEnumerator*, pwstrId : Win32cr::Foundation::PWSTR, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, pwstrId, ppDevice)
    end
    def register_endpoint_notification_callback(this : IMMDeviceEnumerator*, pClient : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_endpoint_notification_callback.call(this, pClient)
    end
    def unregister_endpoint_notification_callback(this : IMMDeviceEnumerator*, pClient : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_endpoint_notification_callback.call(this, pClient)
    end

  end

  @[Extern]
  record IMMDeviceActivatorVtbl,
    query_interface : Proc(IMMDeviceActivator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMMDeviceActivator*, UInt32),
    release : Proc(IMMDeviceActivator*, UInt32),
    activate : Proc(IMMDeviceActivator*, LibC::GUID*, Void*, Win32cr::System::Com::StructuredStorage::PROPVARIANT*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3b0d0ea4-d0a9-4b0e-935b-09516746fac0")]
  record IMMDeviceActivator, lpVtbl : IMMDeviceActivatorVtbl* do
    GUID = LibC::GUID.new(0x3b0d0ea4_u32, 0xd0a9_u16, 0x4b0e_u16, StaticArray[0x93_u8, 0x5b_u8, 0x9_u8, 0x51_u8, 0x67_u8, 0x46_u8, 0xfa_u8, 0xc0_u8])
    def query_interface(this : IMMDeviceActivator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMMDeviceActivator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMMDeviceActivator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def activate(this : IMMDeviceActivator*, iid : LibC::GUID*, pDevice : Void*, pActivationParams : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, ppInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate.call(this, iid, pDevice, pActivationParams, ppInterface)
    end

  end

  @[Extern]
  record IActivateAudioInterfaceCompletionHandlerVtbl,
    query_interface : Proc(IActivateAudioInterfaceCompletionHandler*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActivateAudioInterfaceCompletionHandler*, UInt32),
    release : Proc(IActivateAudioInterfaceCompletionHandler*, UInt32),
    activate_completed : Proc(IActivateAudioInterfaceCompletionHandler*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("41d949ab-9862-444a-80f6-c261334da5eb")]
  record IActivateAudioInterfaceCompletionHandler, lpVtbl : IActivateAudioInterfaceCompletionHandlerVtbl* do
    GUID = LibC::GUID.new(0x41d949ab_u32, 0x9862_u16, 0x444a_u16, StaticArray[0x80_u8, 0xf6_u8, 0xc2_u8, 0x61_u8, 0x33_u8, 0x4d_u8, 0xa5_u8, 0xeb_u8])
    def query_interface(this : IActivateAudioInterfaceCompletionHandler*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActivateAudioInterfaceCompletionHandler*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActivateAudioInterfaceCompletionHandler*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def activate_completed(this : IActivateAudioInterfaceCompletionHandler*, activateOperation : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_completed.call(this, activateOperation)
    end

  end

  @[Extern]
  record IActivateAudioInterfaceAsyncOperationVtbl,
    query_interface : Proc(IActivateAudioInterfaceAsyncOperation*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IActivateAudioInterfaceAsyncOperation*, UInt32),
    release : Proc(IActivateAudioInterfaceAsyncOperation*, UInt32),
    get_activate_result : Proc(IActivateAudioInterfaceAsyncOperation*, Win32cr::Foundation::HRESULT*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("72a22d78-cde4-431d-b8cc-843a71199b6d")]
  record IActivateAudioInterfaceAsyncOperation, lpVtbl : IActivateAudioInterfaceAsyncOperationVtbl* do
    GUID = LibC::GUID.new(0x72a22d78_u32, 0xcde4_u16, 0x431d_u16, StaticArray[0xb8_u8, 0xcc_u8, 0x84_u8, 0x3a_u8, 0x71_u8, 0x19_u8, 0x9b_u8, 0x6d_u8])
    def query_interface(this : IActivateAudioInterfaceAsyncOperation*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IActivateAudioInterfaceAsyncOperation*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IActivateAudioInterfaceAsyncOperation*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_activate_result(this : IActivateAudioInterfaceAsyncOperation*, activateResult : Win32cr::Foundation::HRESULT*, activatedInterface : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_activate_result.call(this, activateResult, activatedInterface)
    end

  end

  @[Extern]
  record IAudioSystemEffectsPropertyChangeNotificationClientVtbl,
    query_interface : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, UInt32),
    release : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, UInt32),
    on_property_changed : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, Win32cr::Media::Audio::MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002, Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("20049d40-56d5-400e-a2ef-385599feed49")]
  record IAudioSystemEffectsPropertyChangeNotificationClient, lpVtbl : IAudioSystemEffectsPropertyChangeNotificationClientVtbl* do
    GUID = LibC::GUID.new(0x20049d40_u32, 0x56d5_u16, 0x400e_u16, StaticArray[0xa2_u8, 0xef_u8, 0x38_u8, 0x55_u8, 0x99_u8, 0xfe_u8, 0xed_u8, 0x49_u8])
    def query_interface(this : IAudioSystemEffectsPropertyChangeNotificationClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSystemEffectsPropertyChangeNotificationClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSystemEffectsPropertyChangeNotificationClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_property_changed(this : IAudioSystemEffectsPropertyChangeNotificationClient*, type__ : Win32cr::Media::Audio::MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002, key : Win32cr::UI::Shell::PropertiesSystem::PROPERTYKEY) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_property_changed.call(this, type__, key)
    end

  end

  @[Extern]
  record IAudioSystemEffectsPropertyStoreVtbl,
    query_interface : Proc(IAudioSystemEffectsPropertyStore*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSystemEffectsPropertyStore*, UInt32),
    release : Proc(IAudioSystemEffectsPropertyStore*, UInt32),
    open_default_property_store : Proc(IAudioSystemEffectsPropertyStore*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    open_user_property_store : Proc(IAudioSystemEffectsPropertyStore*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    open_volatile_property_store : Proc(IAudioSystemEffectsPropertyStore*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    reset_user_property_store : Proc(IAudioSystemEffectsPropertyStore*, Win32cr::Foundation::HRESULT),
    reset_volatile_property_store : Proc(IAudioSystemEffectsPropertyStore*, Win32cr::Foundation::HRESULT),
    register_property_change_notification : Proc(IAudioSystemEffectsPropertyStore*, Void*, Win32cr::Foundation::HRESULT),
    unregister_property_change_notification : Proc(IAudioSystemEffectsPropertyStore*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("302ae7f9-d7e0-43e4-971b-1f8293613d2a")]
  record IAudioSystemEffectsPropertyStore, lpVtbl : IAudioSystemEffectsPropertyStoreVtbl* do
    GUID = LibC::GUID.new(0x302ae7f9_u32, 0xd7e0_u16, 0x43e4_u16, StaticArray[0x97_u8, 0x1b_u8, 0x1f_u8, 0x82_u8, 0x93_u8, 0x61_u8, 0x3d_u8, 0x2a_u8])
    def query_interface(this : IAudioSystemEffectsPropertyStore*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSystemEffectsPropertyStore*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSystemEffectsPropertyStore*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open_default_property_store(this : IAudioSystemEffectsPropertyStore*, stgmAccess : UInt32, propStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_default_property_store.call(this, stgmAccess, propStore)
    end
    def open_user_property_store(this : IAudioSystemEffectsPropertyStore*, stgmAccess : UInt32, propStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_user_property_store.call(this, stgmAccess, propStore)
    end
    def open_volatile_property_store(this : IAudioSystemEffectsPropertyStore*, stgmAccess : UInt32, propStore : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_volatile_property_store.call(this, stgmAccess, propStore)
    end
    def reset_user_property_store(this : IAudioSystemEffectsPropertyStore*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_user_property_store.call(this)
    end
    def reset_volatile_property_store(this : IAudioSystemEffectsPropertyStore*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset_volatile_property_store.call(this)
    end
    def register_property_change_notification(this : IAudioSystemEffectsPropertyStore*, callback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_property_change_notification.call(this, callback)
    end
    def unregister_property_change_notification(this : IAudioSystemEffectsPropertyStore*, callback : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_property_change_notification.call(this, callback)
    end

  end

  @[Extern]
  record IPerChannelDbLevelVtbl,
    query_interface : Proc(IPerChannelDbLevel*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPerChannelDbLevel*, UInt32),
    release : Proc(IPerChannelDbLevel*, UInt32),
    get_channel_count : Proc(IPerChannelDbLevel*, UInt32*, Win32cr::Foundation::HRESULT),
    get_level_range : Proc(IPerChannelDbLevel*, UInt32, Float32*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_level : Proc(IPerChannelDbLevel*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_level : Proc(IPerChannelDbLevel*, UInt32, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_uniform : Proc(IPerChannelDbLevel*, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_all_channels : Proc(IPerChannelDbLevel*, Float32*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c2f8e001-f205-4bc9-99bc-c13b1e048ccb")]
  record IPerChannelDbLevel, lpVtbl : IPerChannelDbLevelVtbl* do
    GUID = LibC::GUID.new(0xc2f8e001_u32, 0xf205_u16, 0x4bc9_u16, StaticArray[0x99_u8, 0xbc_u8, 0xc1_u8, 0x3b_u8, 0x1e_u8, 0x4_u8, 0x8c_u8, 0xcb_u8])
    def query_interface(this : IPerChannelDbLevel*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPerChannelDbLevel*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPerChannelDbLevel*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IPerChannelDbLevel*, pcChannels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pcChannels)
    end
    def get_level_range(this : IPerChannelDbLevel*, nChannel : UInt32, pfMinLevelDB : Float32*, pfMaxLevelDB : Float32*, pfStepping : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_range.call(this, nChannel, pfMinLevelDB, pfMaxLevelDB, pfStepping)
    end
    def get_level(this : IPerChannelDbLevel*, nChannel : UInt32, pfLevelDB : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level.call(this, nChannel, pfLevelDB)
    end
    def set_level(this : IPerChannelDbLevel*, nChannel : UInt32, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level.call(this, nChannel, fLevelDB, pguidEventContext)
    end
    def set_level_uniform(this : IPerChannelDbLevel*, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_uniform.call(this, fLevelDB, pguidEventContext)
    end
    def set_level_all_channels(this : IPerChannelDbLevel*, aLevelsDB : Float32*, cChannels : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_all_channels.call(this, aLevelsDB, cChannels, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioVolumeLevelVtbl,
    query_interface : Proc(IAudioVolumeLevel*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioVolumeLevel*, UInt32),
    release : Proc(IAudioVolumeLevel*, UInt32),
    get_channel_count : Proc(IAudioVolumeLevel*, UInt32*, Win32cr::Foundation::HRESULT),
    get_level_range : Proc(IAudioVolumeLevel*, UInt32, Float32*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_level : Proc(IAudioVolumeLevel*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_level : Proc(IAudioVolumeLevel*, UInt32, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_uniform : Proc(IAudioVolumeLevel*, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_all_channels : Proc(IAudioVolumeLevel*, Float32*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7fb7b48f-531d-44a2-bcb3-5ad5a134b3dc")]
  record IAudioVolumeLevel, lpVtbl : IAudioVolumeLevelVtbl* do
    GUID = LibC::GUID.new(0x7fb7b48f_u32, 0x531d_u16, 0x44a2_u16, StaticArray[0xbc_u8, 0xb3_u8, 0x5a_u8, 0xd5_u8, 0xa1_u8, 0x34_u8, 0xb3_u8, 0xdc_u8])
    def query_interface(this : IAudioVolumeLevel*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioVolumeLevel*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioVolumeLevel*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IAudioVolumeLevel*, pcChannels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pcChannels)
    end
    def get_level_range(this : IAudioVolumeLevel*, nChannel : UInt32, pfMinLevelDB : Float32*, pfMaxLevelDB : Float32*, pfStepping : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_range.call(this, nChannel, pfMinLevelDB, pfMaxLevelDB, pfStepping)
    end
    def get_level(this : IAudioVolumeLevel*, nChannel : UInt32, pfLevelDB : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level.call(this, nChannel, pfLevelDB)
    end
    def set_level(this : IAudioVolumeLevel*, nChannel : UInt32, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level.call(this, nChannel, fLevelDB, pguidEventContext)
    end
    def set_level_uniform(this : IAudioVolumeLevel*, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_uniform.call(this, fLevelDB, pguidEventContext)
    end
    def set_level_all_channels(this : IAudioVolumeLevel*, aLevelsDB : Float32*, cChannels : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_all_channels.call(this, aLevelsDB, cChannels, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioChannelConfigVtbl,
    query_interface : Proc(IAudioChannelConfig*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioChannelConfig*, UInt32),
    release : Proc(IAudioChannelConfig*, UInt32),
    set_channel_config : Proc(IAudioChannelConfig*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_channel_config : Proc(IAudioChannelConfig*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bb11c46f-ec28-493c-b88a-5db88062ce98")]
  record IAudioChannelConfig, lpVtbl : IAudioChannelConfigVtbl* do
    GUID = LibC::GUID.new(0xbb11c46f_u32, 0xec28_u16, 0x493c_u16, StaticArray[0xb8_u8, 0x8a_u8, 0x5d_u8, 0xb8_u8, 0x80_u8, 0x62_u8, 0xce_u8, 0x98_u8])
    def query_interface(this : IAudioChannelConfig*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioChannelConfig*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioChannelConfig*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_channel_config(this : IAudioChannelConfig*, dwConfig : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_channel_config.call(this, dwConfig, pguidEventContext)
    end
    def get_channel_config(this : IAudioChannelConfig*, pdwConfig : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_config.call(this, pdwConfig)
    end

  end

  @[Extern]
  record IAudioLoudnessVtbl,
    query_interface : Proc(IAudioLoudness*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioLoudness*, UInt32),
    release : Proc(IAudioLoudness*, UInt32),
    get_enabled : Proc(IAudioLoudness*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_enabled : Proc(IAudioLoudness*, Win32cr::Foundation::BOOL, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("7d8b1437-dd53-4350-9c1b-1ee2890bd938")]
  record IAudioLoudness, lpVtbl : IAudioLoudnessVtbl* do
    GUID = LibC::GUID.new(0x7d8b1437_u32, 0xdd53_u16, 0x4350_u16, StaticArray[0x9c_u8, 0x1b_u8, 0x1e_u8, 0xe2_u8, 0x89_u8, 0xb_u8, 0xd9_u8, 0x38_u8])
    def query_interface(this : IAudioLoudness*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioLoudness*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioLoudness*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_enabled(this : IAudioLoudness*, pbEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enabled.call(this, pbEnabled)
    end
    def set_enabled(this : IAudioLoudness*, bEnable : Win32cr::Foundation::BOOL, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_enabled.call(this, bEnable, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioInputSelectorVtbl,
    query_interface : Proc(IAudioInputSelector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioInputSelector*, UInt32),
    release : Proc(IAudioInputSelector*, UInt32),
    get_selection : Proc(IAudioInputSelector*, UInt32*, Win32cr::Foundation::HRESULT),
    set_selection : Proc(IAudioInputSelector*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("4f03dc02-5e6e-4653-8f72-a030c123d598")]
  record IAudioInputSelector, lpVtbl : IAudioInputSelectorVtbl* do
    GUID = LibC::GUID.new(0x4f03dc02_u32, 0x5e6e_u16, 0x4653_u16, StaticArray[0x8f_u8, 0x72_u8, 0xa0_u8, 0x30_u8, 0xc1_u8, 0x23_u8, 0xd5_u8, 0x98_u8])
    def query_interface(this : IAudioInputSelector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioInputSelector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioInputSelector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_selection(this : IAudioInputSelector*, pnIdSelected : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selection.call(this, pnIdSelected)
    end
    def set_selection(this : IAudioInputSelector*, nIdSelect : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_selection.call(this, nIdSelect, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioOutputSelectorVtbl,
    query_interface : Proc(IAudioOutputSelector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioOutputSelector*, UInt32),
    release : Proc(IAudioOutputSelector*, UInt32),
    get_selection : Proc(IAudioOutputSelector*, UInt32*, Win32cr::Foundation::HRESULT),
    set_selection : Proc(IAudioOutputSelector*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bb515f69-94a7-429e-8b9c-271b3f11a3ab")]
  record IAudioOutputSelector, lpVtbl : IAudioOutputSelectorVtbl* do
    GUID = LibC::GUID.new(0xbb515f69_u32, 0x94a7_u16, 0x429e_u16, StaticArray[0x8b_u8, 0x9c_u8, 0x27_u8, 0x1b_u8, 0x3f_u8, 0x11_u8, 0xa3_u8, 0xab_u8])
    def query_interface(this : IAudioOutputSelector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioOutputSelector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioOutputSelector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_selection(this : IAudioOutputSelector*, pnIdSelected : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_selection.call(this, pnIdSelected)
    end
    def set_selection(this : IAudioOutputSelector*, nIdSelect : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_selection.call(this, nIdSelect, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioMuteVtbl,
    query_interface : Proc(IAudioMute*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioMute*, UInt32),
    release : Proc(IAudioMute*, UInt32),
    set_mute : Proc(IAudioMute*, Win32cr::Foundation::BOOL, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_mute : Proc(IAudioMute*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("df45aeea-b74a-4b6b-afad-2366b6aa012e")]
  record IAudioMute, lpVtbl : IAudioMuteVtbl* do
    GUID = LibC::GUID.new(0xdf45aeea_u32, 0xb74a_u16, 0x4b6b_u16, StaticArray[0xaf_u8, 0xad_u8, 0x23_u8, 0x66_u8, 0xb6_u8, 0xaa_u8, 0x1_u8, 0x2e_u8])
    def query_interface(this : IAudioMute*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioMute*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioMute*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_mute(this : IAudioMute*, bMuted : Win32cr::Foundation::BOOL, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mute.call(this, bMuted, pguidEventContext)
    end
    def get_mute(this : IAudioMute*, pbMuted : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mute.call(this, pbMuted)
    end

  end

  @[Extern]
  record IAudioBassVtbl,
    query_interface : Proc(IAudioBass*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioBass*, UInt32),
    release : Proc(IAudioBass*, UInt32),
    get_channel_count : Proc(IAudioBass*, UInt32*, Win32cr::Foundation::HRESULT),
    get_level_range : Proc(IAudioBass*, UInt32, Float32*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_level : Proc(IAudioBass*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_level : Proc(IAudioBass*, UInt32, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_uniform : Proc(IAudioBass*, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_all_channels : Proc(IAudioBass*, Float32*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a2b1a1d9-4db3-425d-a2b2-bd335cb3e2e5")]
  record IAudioBass, lpVtbl : IAudioBassVtbl* do
    GUID = LibC::GUID.new(0xa2b1a1d9_u32, 0x4db3_u16, 0x425d_u16, StaticArray[0xa2_u8, 0xb2_u8, 0xbd_u8, 0x33_u8, 0x5c_u8, 0xb3_u8, 0xe2_u8, 0xe5_u8])
    def query_interface(this : IAudioBass*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioBass*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioBass*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IAudioBass*, pcChannels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pcChannels)
    end
    def get_level_range(this : IAudioBass*, nChannel : UInt32, pfMinLevelDB : Float32*, pfMaxLevelDB : Float32*, pfStepping : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_range.call(this, nChannel, pfMinLevelDB, pfMaxLevelDB, pfStepping)
    end
    def get_level(this : IAudioBass*, nChannel : UInt32, pfLevelDB : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level.call(this, nChannel, pfLevelDB)
    end
    def set_level(this : IAudioBass*, nChannel : UInt32, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level.call(this, nChannel, fLevelDB, pguidEventContext)
    end
    def set_level_uniform(this : IAudioBass*, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_uniform.call(this, fLevelDB, pguidEventContext)
    end
    def set_level_all_channels(this : IAudioBass*, aLevelsDB : Float32*, cChannels : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_all_channels.call(this, aLevelsDB, cChannels, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioMidrangeVtbl,
    query_interface : Proc(IAudioMidrange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioMidrange*, UInt32),
    release : Proc(IAudioMidrange*, UInt32),
    get_channel_count : Proc(IAudioMidrange*, UInt32*, Win32cr::Foundation::HRESULT),
    get_level_range : Proc(IAudioMidrange*, UInt32, Float32*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_level : Proc(IAudioMidrange*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_level : Proc(IAudioMidrange*, UInt32, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_uniform : Proc(IAudioMidrange*, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_all_channels : Proc(IAudioMidrange*, Float32*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("5e54b6d7-b44b-40d9-9a9e-e691d9ce6edf")]
  record IAudioMidrange, lpVtbl : IAudioMidrangeVtbl* do
    GUID = LibC::GUID.new(0x5e54b6d7_u32, 0xb44b_u16, 0x40d9_u16, StaticArray[0x9a_u8, 0x9e_u8, 0xe6_u8, 0x91_u8, 0xd9_u8, 0xce_u8, 0x6e_u8, 0xdf_u8])
    def query_interface(this : IAudioMidrange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioMidrange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioMidrange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IAudioMidrange*, pcChannels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pcChannels)
    end
    def get_level_range(this : IAudioMidrange*, nChannel : UInt32, pfMinLevelDB : Float32*, pfMaxLevelDB : Float32*, pfStepping : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_range.call(this, nChannel, pfMinLevelDB, pfMaxLevelDB, pfStepping)
    end
    def get_level(this : IAudioMidrange*, nChannel : UInt32, pfLevelDB : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level.call(this, nChannel, pfLevelDB)
    end
    def set_level(this : IAudioMidrange*, nChannel : UInt32, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level.call(this, nChannel, fLevelDB, pguidEventContext)
    end
    def set_level_uniform(this : IAudioMidrange*, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_uniform.call(this, fLevelDB, pguidEventContext)
    end
    def set_level_all_channels(this : IAudioMidrange*, aLevelsDB : Float32*, cChannels : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_all_channels.call(this, aLevelsDB, cChannels, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioTrebleVtbl,
    query_interface : Proc(IAudioTreble*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioTreble*, UInt32),
    release : Proc(IAudioTreble*, UInt32),
    get_channel_count : Proc(IAudioTreble*, UInt32*, Win32cr::Foundation::HRESULT),
    get_level_range : Proc(IAudioTreble*, UInt32, Float32*, Float32*, Float32*, Win32cr::Foundation::HRESULT),
    get_level : Proc(IAudioTreble*, UInt32, Float32*, Win32cr::Foundation::HRESULT),
    set_level : Proc(IAudioTreble*, UInt32, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_uniform : Proc(IAudioTreble*, Float32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_level_all_channels : Proc(IAudioTreble*, Float32*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0a717812-694e-4907-b74b-bafa5cfdca7b")]
  record IAudioTreble, lpVtbl : IAudioTrebleVtbl* do
    GUID = LibC::GUID.new(0xa717812_u32, 0x694e_u16, 0x4907_u16, StaticArray[0xb7_u8, 0x4b_u8, 0xba_u8, 0xfa_u8, 0x5c_u8, 0xfd_u8, 0xca_u8, 0x7b_u8])
    def query_interface(this : IAudioTreble*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioTreble*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioTreble*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IAudioTreble*, pcChannels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pcChannels)
    end
    def get_level_range(this : IAudioTreble*, nChannel : UInt32, pfMinLevelDB : Float32*, pfMaxLevelDB : Float32*, pfStepping : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level_range.call(this, nChannel, pfMinLevelDB, pfMaxLevelDB, pfStepping)
    end
    def get_level(this : IAudioTreble*, nChannel : UInt32, pfLevelDB : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level.call(this, nChannel, pfLevelDB)
    end
    def set_level(this : IAudioTreble*, nChannel : UInt32, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level.call(this, nChannel, fLevelDB, pguidEventContext)
    end
    def set_level_uniform(this : IAudioTreble*, fLevelDB : Float32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_uniform.call(this, fLevelDB, pguidEventContext)
    end
    def set_level_all_channels(this : IAudioTreble*, aLevelsDB : Float32*, cChannels : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_level_all_channels.call(this, aLevelsDB, cChannels, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioAutoGainControlVtbl,
    query_interface : Proc(IAudioAutoGainControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioAutoGainControl*, UInt32),
    release : Proc(IAudioAutoGainControl*, UInt32),
    get_enabled : Proc(IAudioAutoGainControl*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_enabled : Proc(IAudioAutoGainControl*, Win32cr::Foundation::BOOL, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("85401fd4-6de4-4b9d-9869-2d6753a82f3c")]
  record IAudioAutoGainControl, lpVtbl : IAudioAutoGainControlVtbl* do
    GUID = LibC::GUID.new(0x85401fd4_u32, 0x6de4_u16, 0x4b9d_u16, StaticArray[0x98_u8, 0x69_u8, 0x2d_u8, 0x67_u8, 0x53_u8, 0xa8_u8, 0x2f_u8, 0x3c_u8])
    def query_interface(this : IAudioAutoGainControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioAutoGainControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioAutoGainControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_enabled(this : IAudioAutoGainControl*, pbEnabled : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_enabled.call(this, pbEnabled)
    end
    def set_enabled(this : IAudioAutoGainControl*, bEnable : Win32cr::Foundation::BOOL, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_enabled.call(this, bEnable, pguidEventContext)
    end

  end

  @[Extern]
  record IAudioPeakMeterVtbl,
    query_interface : Proc(IAudioPeakMeter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioPeakMeter*, UInt32),
    release : Proc(IAudioPeakMeter*, UInt32),
    get_channel_count : Proc(IAudioPeakMeter*, UInt32*, Win32cr::Foundation::HRESULT),
    get_level : Proc(IAudioPeakMeter*, UInt32, Float32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("dd79923c-0599-45e0-b8b6-c8df7db6e796")]
  record IAudioPeakMeter, lpVtbl : IAudioPeakMeterVtbl* do
    GUID = LibC::GUID.new(0xdd79923c_u32, 0x599_u16, 0x45e0_u16, StaticArray[0xb8_u8, 0xb6_u8, 0xc8_u8, 0xdf_u8, 0x7d_u8, 0xb6_u8, 0xe7_u8, 0x96_u8])
    def query_interface(this : IAudioPeakMeter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioPeakMeter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioPeakMeter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_channel_count(this : IAudioPeakMeter*, pcChannels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_channel_count.call(this, pcChannels)
    end
    def get_level(this : IAudioPeakMeter*, nChannel : UInt32, pfLevel : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_level.call(this, nChannel, pfLevel)
    end

  end

  @[Extern]
  record IDeviceSpecificPropertyVtbl,
    query_interface : Proc(IDeviceSpecificProperty*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDeviceSpecificProperty*, UInt32),
    release : Proc(IDeviceSpecificProperty*, UInt32),
    get_type : Proc(IDeviceSpecificProperty*, UInt16*, Win32cr::Foundation::HRESULT),
    get_value : Proc(IDeviceSpecificProperty*, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    set_value : Proc(IDeviceSpecificProperty*, Void*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get4_b_range : Proc(IDeviceSpecificProperty*, Int32*, Int32*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("3b22bcbf-2586-4af0-8583-205d391b807c")]
  record IDeviceSpecificProperty, lpVtbl : IDeviceSpecificPropertyVtbl* do
    GUID = LibC::GUID.new(0x3b22bcbf_u32, 0x2586_u16, 0x4af0_u16, StaticArray[0x85_u8, 0x83_u8, 0x20_u8, 0x5d_u8, 0x39_u8, 0x1b_u8, 0x80_u8, 0x7c_u8])
    def query_interface(this : IDeviceSpecificProperty*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDeviceSpecificProperty*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDeviceSpecificProperty*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type(this : IDeviceSpecificProperty*, pVType : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pVType)
    end
    def get_value(this : IDeviceSpecificProperty*, pvValue : Void*, pcbValue : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_value.call(this, pvValue, pcbValue)
    end
    def set_value(this : IDeviceSpecificProperty*, pvValue : Void*, cbValue : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_value.call(this, pvValue, cbValue, pguidEventContext)
    end
    def get4_b_range(this : IDeviceSpecificProperty*, plMin : Int32*, plMax : Int32*, plStepping : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get4_b_range.call(this, plMin, plMax, plStepping)
    end

  end

  @[Extern]
  record IPartsListVtbl,
    query_interface : Proc(IPartsList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPartsList*, UInt32),
    release : Proc(IPartsList*, UInt32),
    get_count : Proc(IPartsList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_part : Proc(IPartsList*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("6daa848c-5eb0-45cc-aea5-998a2cda1ffb")]
  record IPartsList, lpVtbl : IPartsListVtbl* do
    GUID = LibC::GUID.new(0x6daa848c_u32, 0x5eb0_u16, 0x45cc_u16, StaticArray[0xae_u8, 0xa5_u8, 0x99_u8, 0x8a_u8, 0x2c_u8, 0xda_u8, 0x1f_u8, 0xfb_u8])
    def query_interface(this : IPartsList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPartsList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPartsList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_count(this : IPartsList*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, pCount)
    end
    def get_part(this : IPartsList*, nIndex : UInt32, ppPart : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_part.call(this, nIndex, ppPart)
    end

  end

  @[Extern]
  record IPartVtbl,
    query_interface : Proc(IPart*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IPart*, UInt32),
    release : Proc(IPart*, UInt32),
    get_name : Proc(IPart*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_local_id : Proc(IPart*, UInt32*, Win32cr::Foundation::HRESULT),
    get_global_id : Proc(IPart*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_part_type : Proc(IPart*, Win32cr::Media::Audio::PartType*, Win32cr::Foundation::HRESULT),
    get_sub_type : Proc(IPart*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_control_interface_count : Proc(IPart*, UInt32*, Win32cr::Foundation::HRESULT),
    get_control_interface : Proc(IPart*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    enum_parts_incoming : Proc(IPart*, Void**, Win32cr::Foundation::HRESULT),
    enum_parts_outgoing : Proc(IPart*, Void**, Win32cr::Foundation::HRESULT),
    get_topology_object : Proc(IPart*, Void**, Win32cr::Foundation::HRESULT),
    activate : Proc(IPart*, UInt32, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    register_control_change_callback : Proc(IPart*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    unregister_control_change_callback : Proc(IPart*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ae2de0e4-5bca-4f2d-aa46-5d13f8fdb3a9")]
  record IPart, lpVtbl : IPartVtbl* do
    GUID = LibC::GUID.new(0xae2de0e4_u32, 0x5bca_u16, 0x4f2d_u16, StaticArray[0xaa_u8, 0x46_u8, 0x5d_u8, 0x13_u8, 0xf8_u8, 0xfd_u8, 0xb3_u8, 0xa9_u8])
    def query_interface(this : IPart*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IPart*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IPart*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IPart*, ppwstrName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, ppwstrName)
    end
    def get_local_id(this : IPart*, pnId : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_local_id.call(this, pnId)
    end
    def get_global_id(this : IPart*, ppwstrGlobalId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_global_id.call(this, ppwstrGlobalId)
    end
    def get_part_type(this : IPart*, pPartType : Win32cr::Media::Audio::PartType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_part_type.call(this, pPartType)
    end
    def get_sub_type(this : IPart*, pSubType : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_type.call(this, pSubType)
    end
    def get_control_interface_count(this : IPart*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_control_interface_count.call(this, pCount)
    end
    def get_control_interface(this : IPart*, nIndex : UInt32, ppInterfaceDesc : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_control_interface.call(this, nIndex, ppInterfaceDesc)
    end
    def enum_parts_incoming(this : IPart*, ppParts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_parts_incoming.call(this, ppParts)
    end
    def enum_parts_outgoing(this : IPart*, ppParts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_parts_outgoing.call(this, ppParts)
    end
    def get_topology_object(this : IPart*, ppTopology : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_topology_object.call(this, ppTopology)
    end
    def activate(this : IPart*, dwClsContext : UInt32, refiid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate.call(this, dwClsContext, refiid, ppvObject)
    end
    def register_control_change_callback(this : IPart*, riid : LibC::GUID*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_control_change_callback.call(this, riid, pNotify)
    end
    def unregister_control_change_callback(this : IPart*, pNotify : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_control_change_callback.call(this, pNotify)
    end

  end

  @[Extern]
  record IConnectorVtbl,
    query_interface : Proc(IConnector*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IConnector*, UInt32),
    release : Proc(IConnector*, UInt32),
    get_type : Proc(IConnector*, Win32cr::Media::Audio::ConnectorType*, Win32cr::Foundation::HRESULT),
    get_data_flow : Proc(IConnector*, Win32cr::Media::Audio::DataFlow*, Win32cr::Foundation::HRESULT),
    connect_to : Proc(IConnector*, Void*, Win32cr::Foundation::HRESULT),
    disconnect : Proc(IConnector*, Win32cr::Foundation::HRESULT),
    is_connected : Proc(IConnector*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_connected_to : Proc(IConnector*, Void**, Win32cr::Foundation::HRESULT),
    get_connector_id_connected_to : Proc(IConnector*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_device_id_connected_to : Proc(IConnector*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("9c2c4058-23f5-41de-877a-df3af236a09e")]
  record IConnector, lpVtbl : IConnectorVtbl* do
    GUID = LibC::GUID.new(0x9c2c4058_u32, 0x23f5_u16, 0x41de_u16, StaticArray[0x87_u8, 0x7a_u8, 0xdf_u8, 0x3a_u8, 0xf2_u8, 0x36_u8, 0xa0_u8, 0x9e_u8])
    def query_interface(this : IConnector*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IConnector*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IConnector*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type(this : IConnector*, pType : Win32cr::Media::Audio::ConnectorType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type.call(this, pType)
    end
    def get_data_flow(this : IConnector*, pFlow : Win32cr::Media::Audio::DataFlow*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_flow.call(this, pFlow)
    end
    def connect_to(this : IConnector*, pConnectTo : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.connect_to.call(this, pConnectTo)
    end
    def disconnect(this : IConnector*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disconnect.call(this)
    end
    def is_connected(this : IConnector*, pbConnected : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_connected.call(this, pbConnected)
    end
    def get_connected_to(this : IConnector*, ppConTo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connected_to.call(this, ppConTo)
    end
    def get_connector_id_connected_to(this : IConnector*, ppwstrConnectorId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connector_id_connected_to.call(this, ppwstrConnectorId)
    end
    def get_device_id_connected_to(this : IConnector*, ppwstrDeviceId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_id_connected_to.call(this, ppwstrDeviceId)
    end

  end

  @[Extern]
  record ISubunitVtbl,
    query_interface : Proc(ISubunit*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISubunit*, UInt32),
    release : Proc(ISubunit*, UInt32)


  @[Extern]
  #@[Com("82149a85-dba6-4487-86bb-ea8f7fefcc71")]
  record ISubunit, lpVtbl : ISubunitVtbl* do
    GUID = LibC::GUID.new(0x82149a85_u32, 0xdba6_u16, 0x4487_u16, StaticArray[0x86_u8, 0xbb_u8, 0xea_u8, 0x8f_u8, 0x7f_u8, 0xef_u8, 0xcc_u8, 0x71_u8])
    def query_interface(this : ISubunit*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISubunit*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISubunit*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end

  end

  @[Extern]
  record IControlInterfaceVtbl,
    query_interface : Proc(IControlInterface*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IControlInterface*, UInt32),
    release : Proc(IControlInterface*, UInt32),
    get_name : Proc(IControlInterface*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_iid : Proc(IControlInterface*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("45d37c3f-5140-444a-ae24-400789f3cbf3")]
  record IControlInterface, lpVtbl : IControlInterfaceVtbl* do
    GUID = LibC::GUID.new(0x45d37c3f_u32, 0x5140_u16, 0x444a_u16, StaticArray[0xae_u8, 0x24_u8, 0x40_u8, 0x7_u8, 0x89_u8, 0xf3_u8, 0xcb_u8, 0xf3_u8])
    def query_interface(this : IControlInterface*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IControlInterface*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IControlInterface*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_name(this : IControlInterface*, ppwstrName : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_name.call(this, ppwstrName)
    end
    def get_iid(this : IControlInterface*, pIID : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_iid.call(this, pIID)
    end

  end

  @[Extern]
  record IControlChangeNotifyVtbl,
    query_interface : Proc(IControlChangeNotify*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IControlChangeNotify*, UInt32),
    release : Proc(IControlChangeNotify*, UInt32),
    on_notify : Proc(IControlChangeNotify*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("a09513ed-c709-4d21-bd7b-5f34c47f3947")]
  record IControlChangeNotify, lpVtbl : IControlChangeNotifyVtbl* do
    GUID = LibC::GUID.new(0xa09513ed_u32, 0xc709_u16, 0x4d21_u16, StaticArray[0xbd_u8, 0x7b_u8, 0x5f_u8, 0x34_u8, 0xc4_u8, 0x7f_u8, 0x39_u8, 0x47_u8])
    def query_interface(this : IControlChangeNotify*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IControlChangeNotify*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IControlChangeNotify*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_notify(this : IControlChangeNotify*, dwSenderProcessId : UInt32, pguidEventContext : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_notify.call(this, dwSenderProcessId, pguidEventContext)
    end

  end

  @[Extern]
  record IDeviceTopologyVtbl,
    query_interface : Proc(IDeviceTopology*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDeviceTopology*, UInt32),
    release : Proc(IDeviceTopology*, UInt32),
    get_connector_count : Proc(IDeviceTopology*, UInt32*, Win32cr::Foundation::HRESULT),
    get_connector : Proc(IDeviceTopology*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_subunit_count : Proc(IDeviceTopology*, UInt32*, Win32cr::Foundation::HRESULT),
    get_subunit : Proc(IDeviceTopology*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_part_by_id : Proc(IDeviceTopology*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_device_id : Proc(IDeviceTopology*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_signal_path : Proc(IDeviceTopology*, Void*, Void*, Win32cr::Foundation::BOOL, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("2a07407e-6497-4a18-9787-32f79bd0d98f")]
  record IDeviceTopology, lpVtbl : IDeviceTopologyVtbl* do
    GUID = LibC::GUID.new(0x2a07407e_u32, 0x6497_u16, 0x4a18_u16, StaticArray[0x97_u8, 0x87_u8, 0x32_u8, 0xf7_u8, 0x9b_u8, 0xd0_u8, 0xd9_u8, 0x8f_u8])
    def query_interface(this : IDeviceTopology*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDeviceTopology*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDeviceTopology*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_connector_count(this : IDeviceTopology*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connector_count.call(this, pCount)
    end
    def get_connector(this : IDeviceTopology*, nIndex : UInt32, ppConnector : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connector.call(this, nIndex, ppConnector)
    end
    def get_subunit_count(this : IDeviceTopology*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subunit_count.call(this, pCount)
    end
    def get_subunit(this : IDeviceTopology*, nIndex : UInt32, ppSubunit : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_subunit.call(this, nIndex, ppSubunit)
    end
    def get_part_by_id(this : IDeviceTopology*, nId : UInt32, ppPart : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_part_by_id.call(this, nId, ppPart)
    end
    def get_device_id(this : IDeviceTopology*, ppwstrDeviceId : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_id.call(this, ppwstrDeviceId)
    end
    def get_signal_path(this : IDeviceTopology*, pIPartFrom : Void*, pIPartTo : Void*, bRejectMixedPaths : Win32cr::Foundation::BOOL, ppParts : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_signal_path.call(this, pIPartFrom, pIPartTo, bRejectMixedPaths, ppParts)
    end

  end

  @[Extern]
  record IAudioSessionEventsVtbl,
    query_interface : Proc(IAudioSessionEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSessionEvents*, UInt32),
    release : Proc(IAudioSessionEvents*, UInt32),
    on_display_name_changed : Proc(IAudioSessionEvents*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    on_icon_path_changed : Proc(IAudioSessionEvents*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    on_simple_volume_changed : Proc(IAudioSessionEvents*, Float32, Win32cr::Foundation::BOOL, LibC::GUID*, Win32cr::Foundation::HRESULT),
    on_channel_volume_changed : Proc(IAudioSessionEvents*, UInt32, Float32*, UInt32, LibC::GUID*, Win32cr::Foundation::HRESULT),
    on_grouping_param_changed : Proc(IAudioSessionEvents*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    on_state_changed : Proc(IAudioSessionEvents*, Win32cr::Media::Audio::AudioSessionState, Win32cr::Foundation::HRESULT),
    on_session_disconnected : Proc(IAudioSessionEvents*, Win32cr::Media::Audio::AudioSessionDisconnectReason, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("24918acc-64b3-37c1-8ca9-74a66e9957a8")]
  record IAudioSessionEvents, lpVtbl : IAudioSessionEventsVtbl* do
    GUID = LibC::GUID.new(0x24918acc_u32, 0x64b3_u16, 0x37c1_u16, StaticArray[0x8c_u8, 0xa9_u8, 0x74_u8, 0xa6_u8, 0x6e_u8, 0x99_u8, 0x57_u8, 0xa8_u8])
    def query_interface(this : IAudioSessionEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSessionEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSessionEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_display_name_changed(this : IAudioSessionEvents*, new_display_name : Win32cr::Foundation::PWSTR, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_display_name_changed.call(this, new_display_name, event_context)
    end
    def on_icon_path_changed(this : IAudioSessionEvents*, new_icon_path : Win32cr::Foundation::PWSTR, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_icon_path_changed.call(this, new_icon_path, event_context)
    end
    def on_simple_volume_changed(this : IAudioSessionEvents*, new_volume : Float32, new_mute : Win32cr::Foundation::BOOL, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_simple_volume_changed.call(this, new_volume, new_mute, event_context)
    end
    def on_channel_volume_changed(this : IAudioSessionEvents*, channel_count : UInt32, new_channel_volume_array : Float32*, changed_channel : UInt32, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_channel_volume_changed.call(this, channel_count, new_channel_volume_array, changed_channel, event_context)
    end
    def on_grouping_param_changed(this : IAudioSessionEvents*, new_grouping_param : LibC::GUID*, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_grouping_param_changed.call(this, new_grouping_param, event_context)
    end
    def on_state_changed(this : IAudioSessionEvents*, new_state : Win32cr::Media::Audio::AudioSessionState) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_state_changed.call(this, new_state)
    end
    def on_session_disconnected(this : IAudioSessionEvents*, disconnect_reason : Win32cr::Media::Audio::AudioSessionDisconnectReason) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_session_disconnected.call(this, disconnect_reason)
    end

  end

  @[Extern]
  record IAudioSessionControlVtbl,
    query_interface : Proc(IAudioSessionControl*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSessionControl*, UInt32),
    release : Proc(IAudioSessionControl*, UInt32),
    get_state : Proc(IAudioSessionControl*, Win32cr::Media::Audio::AudioSessionState*, Win32cr::Foundation::HRESULT),
    get_display_name : Proc(IAudioSessionControl*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_display_name : Proc(IAudioSessionControl*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_icon_path : Proc(IAudioSessionControl*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_icon_path : Proc(IAudioSessionControl*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_grouping_param : Proc(IAudioSessionControl*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_grouping_param : Proc(IAudioSessionControl*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    register_audio_session_notification : Proc(IAudioSessionControl*, Void*, Win32cr::Foundation::HRESULT),
    unregister_audio_session_notification : Proc(IAudioSessionControl*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("f4b1a599-7266-4319-a8ca-e70acb11e8cd")]
  record IAudioSessionControl, lpVtbl : IAudioSessionControlVtbl* do
    GUID = LibC::GUID.new(0xf4b1a599_u32, 0x7266_u16, 0x4319_u16, StaticArray[0xa8_u8, 0xca_u8, 0xe7_u8, 0xa_u8, 0xcb_u8, 0x11_u8, 0xe8_u8, 0xcd_u8])
    def query_interface(this : IAudioSessionControl*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSessionControl*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSessionControl*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_state(this : IAudioSessionControl*, pRetVal : Win32cr::Media::Audio::AudioSessionState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pRetVal)
    end
    def get_display_name(this : IAudioSessionControl*, pRetVal : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_name.call(this, pRetVal)
    end
    def set_display_name(this : IAudioSessionControl*, value : Win32cr::Foundation::PWSTR, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_display_name.call(this, value, event_context)
    end
    def get_icon_path(this : IAudioSessionControl*, pRetVal : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_icon_path.call(this, pRetVal)
    end
    def set_icon_path(this : IAudioSessionControl*, value : Win32cr::Foundation::PWSTR, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_icon_path.call(this, value, event_context)
    end
    def get_grouping_param(this : IAudioSessionControl*, pRetVal : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_grouping_param.call(this, pRetVal)
    end
    def set_grouping_param(this : IAudioSessionControl*, override : LibC::GUID*, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_grouping_param.call(this, override, event_context)
    end
    def register_audio_session_notification(this : IAudioSessionControl*, new_notifications : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_audio_session_notification.call(this, new_notifications)
    end
    def unregister_audio_session_notification(this : IAudioSessionControl*, new_notifications : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_audio_session_notification.call(this, new_notifications)
    end

  end

  @[Extern]
  record IAudioSessionControl2Vtbl,
    query_interface : Proc(IAudioSessionControl2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSessionControl2*, UInt32),
    release : Proc(IAudioSessionControl2*, UInt32),
    get_state : Proc(IAudioSessionControl2*, Win32cr::Media::Audio::AudioSessionState*, Win32cr::Foundation::HRESULT),
    get_display_name : Proc(IAudioSessionControl2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_display_name : Proc(IAudioSessionControl2*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_icon_path : Proc(IAudioSessionControl2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    set_icon_path : Proc(IAudioSessionControl2*, Win32cr::Foundation::PWSTR, LibC::GUID*, Win32cr::Foundation::HRESULT),
    get_grouping_param : Proc(IAudioSessionControl2*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_grouping_param : Proc(IAudioSessionControl2*, LibC::GUID*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    register_audio_session_notification : Proc(IAudioSessionControl2*, Void*, Win32cr::Foundation::HRESULT),
    unregister_audio_session_notification : Proc(IAudioSessionControl2*, Void*, Win32cr::Foundation::HRESULT),
    get_session_identifier : Proc(IAudioSessionControl2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_session_instance_identifier : Proc(IAudioSessionControl2*, Win32cr::Foundation::PWSTR*, Win32cr::Foundation::HRESULT),
    get_process_id : Proc(IAudioSessionControl2*, UInt32*, Win32cr::Foundation::HRESULT),
    is_system_sounds_session : Proc(IAudioSessionControl2*, Win32cr::Foundation::HRESULT),
    set_ducking_preference : Proc(IAudioSessionControl2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bfb7ff88-7239-4fc9-8fa2-07c950be9c6d")]
  record IAudioSessionControl2, lpVtbl : IAudioSessionControl2Vtbl* do
    GUID = LibC::GUID.new(0xbfb7ff88_u32, 0x7239_u16, 0x4fc9_u16, StaticArray[0x8f_u8, 0xa2_u8, 0x7_u8, 0xc9_u8, 0x50_u8, 0xbe_u8, 0x9c_u8, 0x6d_u8])
    def query_interface(this : IAudioSessionControl2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSessionControl2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSessionControl2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_state(this : IAudioSessionControl2*, pRetVal : Win32cr::Media::Audio::AudioSessionState*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_state.call(this, pRetVal)
    end
    def get_display_name(this : IAudioSessionControl2*, pRetVal : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_name.call(this, pRetVal)
    end
    def set_display_name(this : IAudioSessionControl2*, value : Win32cr::Foundation::PWSTR, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_display_name.call(this, value, event_context)
    end
    def get_icon_path(this : IAudioSessionControl2*, pRetVal : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_icon_path.call(this, pRetVal)
    end
    def set_icon_path(this : IAudioSessionControl2*, value : Win32cr::Foundation::PWSTR, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_icon_path.call(this, value, event_context)
    end
    def get_grouping_param(this : IAudioSessionControl2*, pRetVal : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_grouping_param.call(this, pRetVal)
    end
    def set_grouping_param(this : IAudioSessionControl2*, override : LibC::GUID*, event_context : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_grouping_param.call(this, override, event_context)
    end
    def register_audio_session_notification(this : IAudioSessionControl2*, new_notifications : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_audio_session_notification.call(this, new_notifications)
    end
    def unregister_audio_session_notification(this : IAudioSessionControl2*, new_notifications : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_audio_session_notification.call(this, new_notifications)
    end
    def get_session_identifier(this : IAudioSessionControl2*, pRetVal : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_session_identifier.call(this, pRetVal)
    end
    def get_session_instance_identifier(this : IAudioSessionControl2*, pRetVal : Win32cr::Foundation::PWSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_session_instance_identifier.call(this, pRetVal)
    end
    def get_process_id(this : IAudioSessionControl2*, pRetVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_process_id.call(this, pRetVal)
    end
    def is_system_sounds_session(this : IAudioSessionControl2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_system_sounds_session.call(this)
    end
    def set_ducking_preference(this : IAudioSessionControl2*, optOut : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ducking_preference.call(this, optOut)
    end

  end

  @[Extern]
  record IAudioSessionManagerVtbl,
    query_interface : Proc(IAudioSessionManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSessionManager*, UInt32),
    release : Proc(IAudioSessionManager*, UInt32),
    get_audio_session_control : Proc(IAudioSessionManager*, LibC::GUID*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_simple_audio_volume : Proc(IAudioSessionManager*, LibC::GUID*, UInt32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bfa971f1-4d5e-40bb-935e-967039bfbee4")]
  record IAudioSessionManager, lpVtbl : IAudioSessionManagerVtbl* do
    GUID = LibC::GUID.new(0xbfa971f1_u32, 0x4d5e_u16, 0x40bb_u16, StaticArray[0x93_u8, 0x5e_u8, 0x96_u8, 0x70_u8, 0x39_u8, 0xbf_u8, 0xbe_u8, 0xe4_u8])
    def query_interface(this : IAudioSessionManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSessionManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSessionManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_audio_session_control(this : IAudioSessionManager*, audio_session_guid : LibC::GUID*, stream_flags : UInt32, session_control : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_session_control.call(this, audio_session_guid, stream_flags, session_control)
    end
    def get_simple_audio_volume(this : IAudioSessionManager*, audio_session_guid : LibC::GUID*, stream_flags : UInt32, audio_volume : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_simple_audio_volume.call(this, audio_session_guid, stream_flags, audio_volume)
    end

  end

  @[Extern]
  record IAudioVolumeDuckNotificationVtbl,
    query_interface : Proc(IAudioVolumeDuckNotification*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioVolumeDuckNotification*, UInt32),
    release : Proc(IAudioVolumeDuckNotification*, UInt32),
    on_volume_duck_notification : Proc(IAudioVolumeDuckNotification*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HRESULT),
    on_volume_unduck_notification : Proc(IAudioVolumeDuckNotification*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("c3b284d4-6d39-4359-b3cf-b56ddb3bb39c")]
  record IAudioVolumeDuckNotification, lpVtbl : IAudioVolumeDuckNotificationVtbl* do
    GUID = LibC::GUID.new(0xc3b284d4_u32, 0x6d39_u16, 0x4359_u16, StaticArray[0xb3_u8, 0xcf_u8, 0xb5_u8, 0x6d_u8, 0xdb_u8, 0x3b_u8, 0xb3_u8, 0x9c_u8])
    def query_interface(this : IAudioVolumeDuckNotification*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioVolumeDuckNotification*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioVolumeDuckNotification*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_volume_duck_notification(this : IAudioVolumeDuckNotification*, sessionID : Win32cr::Foundation::PWSTR, countCommunicationSessions : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_volume_duck_notification.call(this, sessionID, countCommunicationSessions)
    end
    def on_volume_unduck_notification(this : IAudioVolumeDuckNotification*, sessionID : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_volume_unduck_notification.call(this, sessionID)
    end

  end

  @[Extern]
  record IAudioSessionNotificationVtbl,
    query_interface : Proc(IAudioSessionNotification*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSessionNotification*, UInt32),
    release : Proc(IAudioSessionNotification*, UInt32),
    on_session_created : Proc(IAudioSessionNotification*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("641dd20b-4d41-49cc-aba3-174b9477bb08")]
  record IAudioSessionNotification, lpVtbl : IAudioSessionNotificationVtbl* do
    GUID = LibC::GUID.new(0x641dd20b_u32, 0x4d41_u16, 0x49cc_u16, StaticArray[0xab_u8, 0xa3_u8, 0x17_u8, 0x4b_u8, 0x94_u8, 0x77_u8, 0xbb_u8, 0x8_u8])
    def query_interface(this : IAudioSessionNotification*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSessionNotification*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSessionNotification*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_session_created(this : IAudioSessionNotification*, new_session : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_session_created.call(this, new_session)
    end

  end

  @[Extern]
  record IAudioSessionEnumeratorVtbl,
    query_interface : Proc(IAudioSessionEnumerator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSessionEnumerator*, UInt32),
    release : Proc(IAudioSessionEnumerator*, UInt32),
    get_count : Proc(IAudioSessionEnumerator*, Int32*, Win32cr::Foundation::HRESULT),
    get_session : Proc(IAudioSessionEnumerator*, Int32, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("e2f5bb11-0570-40ca-acdd-3aa01277dee8")]
  record IAudioSessionEnumerator, lpVtbl : IAudioSessionEnumeratorVtbl* do
    GUID = LibC::GUID.new(0xe2f5bb11_u32, 0x570_u16, 0x40ca_u16, StaticArray[0xac_u8, 0xdd_u8, 0x3a_u8, 0xa0_u8, 0x12_u8, 0x77_u8, 0xde_u8, 0xe8_u8])
    def query_interface(this : IAudioSessionEnumerator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSessionEnumerator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSessionEnumerator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_count(this : IAudioSessionEnumerator*, session_count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_count.call(this, session_count)
    end
    def get_session(this : IAudioSessionEnumerator*, session_count : Int32, session : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_session.call(this, session_count, session)
    end

  end

  @[Extern]
  record IAudioSessionManager2Vtbl,
    query_interface : Proc(IAudioSessionManager2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioSessionManager2*, UInt32),
    release : Proc(IAudioSessionManager2*, UInt32),
    get_audio_session_control : Proc(IAudioSessionManager2*, LibC::GUID*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_simple_audio_volume : Proc(IAudioSessionManager2*, LibC::GUID*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_session_enumerator : Proc(IAudioSessionManager2*, Void**, Win32cr::Foundation::HRESULT),
    register_session_notification : Proc(IAudioSessionManager2*, Void*, Win32cr::Foundation::HRESULT),
    unregister_session_notification : Proc(IAudioSessionManager2*, Void*, Win32cr::Foundation::HRESULT),
    register_duck_notification : Proc(IAudioSessionManager2*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    unregister_duck_notification : Proc(IAudioSessionManager2*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("77aa99a0-1bd6-484f-8bc7-2c654c9a9b6f")]
  record IAudioSessionManager2, lpVtbl : IAudioSessionManager2Vtbl* do
    GUID = LibC::GUID.new(0x77aa99a0_u32, 0x1bd6_u16, 0x484f_u16, StaticArray[0x8b_u8, 0xc7_u8, 0x2c_u8, 0x65_u8, 0x4c_u8, 0x9a_u8, 0x9b_u8, 0x6f_u8])
    def query_interface(this : IAudioSessionManager2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioSessionManager2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioSessionManager2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_audio_session_control(this : IAudioSessionManager2*, audio_session_guid : LibC::GUID*, stream_flags : UInt32, session_control : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_session_control.call(this, audio_session_guid, stream_flags, session_control)
    end
    def get_simple_audio_volume(this : IAudioSessionManager2*, audio_session_guid : LibC::GUID*, stream_flags : UInt32, audio_volume : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_simple_audio_volume.call(this, audio_session_guid, stream_flags, audio_volume)
    end
    def get_session_enumerator(this : IAudioSessionManager2*, session_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_session_enumerator.call(this, session_enum)
    end
    def register_session_notification(this : IAudioSessionManager2*, session_notification : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_session_notification.call(this, session_notification)
    end
    def unregister_session_notification(this : IAudioSessionManager2*, session_notification : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_session_notification.call(this, session_notification)
    end
    def register_duck_notification(this : IAudioSessionManager2*, sessionID : Win32cr::Foundation::PWSTR, duckNotification : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_duck_notification.call(this, sessionID, duckNotification)
    end
    def unregister_duck_notification(this : IAudioSessionManager2*, duckNotification : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_duck_notification.call(this, duckNotification)
    end

  end

  @[Extern]
  record ISpatialAudioMetadataItemsVtbl,
    query_interface : Proc(ISpatialAudioMetadataItems*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioMetadataItems*, UInt32),
    release : Proc(ISpatialAudioMetadataItems*, UInt32),
    get_frame_count : Proc(ISpatialAudioMetadataItems*, UInt16*, Win32cr::Foundation::HRESULT),
    get_item_count : Proc(ISpatialAudioMetadataItems*, UInt16*, Win32cr::Foundation::HRESULT),
    get_max_item_count : Proc(ISpatialAudioMetadataItems*, UInt16*, Win32cr::Foundation::HRESULT),
    get_max_value_buffer_length : Proc(ISpatialAudioMetadataItems*, UInt32*, Win32cr::Foundation::HRESULT),
    get_info : Proc(ISpatialAudioMetadataItems*, Win32cr::Media::Audio::SpatialAudioMetadataItemsInfo*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bcd7c78f-3098-4f22-b547-a2f25a381269")]
  record ISpatialAudioMetadataItems, lpVtbl : ISpatialAudioMetadataItemsVtbl* do
    GUID = LibC::GUID.new(0xbcd7c78f_u32, 0x3098_u16, 0x4f22_u16, StaticArray[0xb5_u8, 0x47_u8, 0xa2_u8, 0xf2_u8, 0x5a_u8, 0x38_u8, 0x12_u8, 0x69_u8])
    def query_interface(this : ISpatialAudioMetadataItems*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioMetadataItems*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioMetadataItems*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_frame_count(this : ISpatialAudioMetadataItems*, frameCount : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_frame_count.call(this, frameCount)
    end
    def get_item_count(this : ISpatialAudioMetadataItems*, itemCount : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_item_count.call(this, itemCount)
    end
    def get_max_item_count(this : ISpatialAudioMetadataItems*, maxItemCount : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_item_count.call(this, maxItemCount)
    end
    def get_max_value_buffer_length(this : ISpatialAudioMetadataItems*, maxValueBufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_max_value_buffer_length.call(this, maxValueBufferLength)
    end
    def get_info(this : ISpatialAudioMetadataItems*, info : Win32cr::Media::Audio::SpatialAudioMetadataItemsInfo*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_info.call(this, info)
    end

  end

  @[Extern]
  record ISpatialAudioMetadataWriterVtbl,
    query_interface : Proc(ISpatialAudioMetadataWriter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioMetadataWriter*, UInt32),
    release : Proc(ISpatialAudioMetadataWriter*, UInt32),
    open : Proc(ISpatialAudioMetadataWriter*, Void*, Win32cr::Foundation::HRESULT),
    write_next_item : Proc(ISpatialAudioMetadataWriter*, UInt16, Win32cr::Foundation::HRESULT),
    write_next_item_command : Proc(ISpatialAudioMetadataWriter*, UInt8, Void*, UInt32, Win32cr::Foundation::HRESULT),
    close : Proc(ISpatialAudioMetadataWriter*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("1b17ca01-2955-444d-a430-537dc589a844")]
  record ISpatialAudioMetadataWriter, lpVtbl : ISpatialAudioMetadataWriterVtbl* do
    GUID = LibC::GUID.new(0x1b17ca01_u32, 0x2955_u16, 0x444d_u16, StaticArray[0xa4_u8, 0x30_u8, 0x53_u8, 0x7d_u8, 0xc5_u8, 0x89_u8, 0xa8_u8, 0x44_u8])
    def query_interface(this : ISpatialAudioMetadataWriter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioMetadataWriter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioMetadataWriter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open(this : ISpatialAudioMetadataWriter*, metadataItems : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, metadataItems)
    end
    def write_next_item(this : ISpatialAudioMetadataWriter*, frameOffset : UInt16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_next_item.call(this, frameOffset)
    end
    def write_next_item_command(this : ISpatialAudioMetadataWriter*, commandID : UInt8, valueBuffer : Void*, valueBufferLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_next_item_command.call(this, commandID, valueBuffer, valueBufferLength)
    end
    def close(this : ISpatialAudioMetadataWriter*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record ISpatialAudioMetadataReaderVtbl,
    query_interface : Proc(ISpatialAudioMetadataReader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioMetadataReader*, UInt32),
    release : Proc(ISpatialAudioMetadataReader*, UInt32),
    open : Proc(ISpatialAudioMetadataReader*, Void*, Win32cr::Foundation::HRESULT),
    read_next_item : Proc(ISpatialAudioMetadataReader*, UInt8*, UInt16*, Win32cr::Foundation::HRESULT),
    read_next_item_command : Proc(ISpatialAudioMetadataReader*, UInt8*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    close : Proc(ISpatialAudioMetadataReader*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("b78e86a2-31d9-4c32-94d2-7df40fc7ebec")]
  record ISpatialAudioMetadataReader, lpVtbl : ISpatialAudioMetadataReaderVtbl* do
    GUID = LibC::GUID.new(0xb78e86a2_u32, 0x31d9_u16, 0x4c32_u16, StaticArray[0x94_u8, 0xd2_u8, 0x7d_u8, 0xf4_u8, 0xf_u8, 0xc7_u8, 0xeb_u8, 0xec_u8])
    def query_interface(this : ISpatialAudioMetadataReader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioMetadataReader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioMetadataReader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open(this : ISpatialAudioMetadataReader*, metadataItems : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, metadataItems)
    end
    def read_next_item(this : ISpatialAudioMetadataReader*, commandCount : UInt8*, frameOffset : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_next_item.call(this, commandCount, frameOffset)
    end
    def read_next_item_command(this : ISpatialAudioMetadataReader*, commandID : UInt8*, valueBuffer : Void*, maxValueBufferLength : UInt32, valueBufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_next_item_command.call(this, commandID, valueBuffer, maxValueBufferLength, valueBufferLength)
    end
    def close(this : ISpatialAudioMetadataReader*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record ISpatialAudioMetadataCopierVtbl,
    query_interface : Proc(ISpatialAudioMetadataCopier*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioMetadataCopier*, UInt32),
    release : Proc(ISpatialAudioMetadataCopier*, UInt32),
    open : Proc(ISpatialAudioMetadataCopier*, Void*, Win32cr::Foundation::HRESULT),
    copy_metadata_for_frames : Proc(ISpatialAudioMetadataCopier*, UInt16, Win32cr::Media::Audio::SpatialAudioMetadataCopyMode, Void*, UInt16*, Win32cr::Foundation::HRESULT),
    close : Proc(ISpatialAudioMetadataCopier*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("d224b233-e251-4fd0-9ca2-d5ecf9a68404")]
  record ISpatialAudioMetadataCopier, lpVtbl : ISpatialAudioMetadataCopierVtbl* do
    GUID = LibC::GUID.new(0xd224b233_u32, 0xe251_u16, 0x4fd0_u16, StaticArray[0x9c_u8, 0xa2_u8, 0xd5_u8, 0xec_u8, 0xf9_u8, 0xa6_u8, 0x84_u8, 0x4_u8])
    def query_interface(this : ISpatialAudioMetadataCopier*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioMetadataCopier*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioMetadataCopier*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open(this : ISpatialAudioMetadataCopier*, metadataItems : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this, metadataItems)
    end
    def copy_metadata_for_frames(this : ISpatialAudioMetadataCopier*, copyFrameCount : UInt16, copyMode : Win32cr::Media::Audio::SpatialAudioMetadataCopyMode, dstMetadataItems : Void*, itemsCopied : UInt16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_metadata_for_frames.call(this, copyFrameCount, copyMode, dstMetadataItems, itemsCopied)
    end
    def close(this : ISpatialAudioMetadataCopier*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record ISpatialAudioMetadataItemsBufferVtbl,
    query_interface : Proc(ISpatialAudioMetadataItemsBuffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioMetadataItemsBuffer*, UInt32),
    release : Proc(ISpatialAudioMetadataItemsBuffer*, UInt32),
    attach_to_buffer : Proc(ISpatialAudioMetadataItemsBuffer*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    attach_to_populated_buffer : Proc(ISpatialAudioMetadataItemsBuffer*, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    detach_buffer : Proc(ISpatialAudioMetadataItemsBuffer*, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("42640a16-e1bd-42d9-9ff6-031ab71a2dba")]
  record ISpatialAudioMetadataItemsBuffer, lpVtbl : ISpatialAudioMetadataItemsBufferVtbl* do
    GUID = LibC::GUID.new(0x42640a16_u32, 0xe1bd_u16, 0x42d9_u16, StaticArray[0x9f_u8, 0xf6_u8, 0x3_u8, 0x1a_u8, 0xb7_u8, 0x1a_u8, 0x2d_u8, 0xba_u8])
    def query_interface(this : ISpatialAudioMetadataItemsBuffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioMetadataItemsBuffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioMetadataItemsBuffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def attach_to_buffer(this : ISpatialAudioMetadataItemsBuffer*, buffer : UInt8*, bufferLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_to_buffer.call(this, buffer, bufferLength)
    end
    def attach_to_populated_buffer(this : ISpatialAudioMetadataItemsBuffer*, buffer : UInt8*, bufferLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.attach_to_populated_buffer.call(this, buffer, bufferLength)
    end
    def detach_buffer(this : ISpatialAudioMetadataItemsBuffer*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.detach_buffer.call(this)
    end

  end

  @[Extern]
  record ISpatialAudioMetadataClientVtbl,
    query_interface : Proc(ISpatialAudioMetadataClient*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioMetadataClient*, UInt32),
    release : Proc(ISpatialAudioMetadataClient*, UInt32),
    activate_spatial_audio_metadata_items : Proc(ISpatialAudioMetadataClient*, UInt16, UInt16, Void**, Void**, Win32cr::Foundation::HRESULT),
    get_spatial_audio_metadata_items_buffer_length : Proc(ISpatialAudioMetadataClient*, UInt16, UInt32*, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_metadata_writer : Proc(ISpatialAudioMetadataClient*, Win32cr::Media::Audio::SpatialAudioMetadataWriterOverflowMode, Void**, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_metadata_copier : Proc(ISpatialAudioMetadataClient*, Void**, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_metadata_reader : Proc(ISpatialAudioMetadataClient*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("777d4a3b-f6ff-4a26-85dc-68d7cdeda1d4")]
  record ISpatialAudioMetadataClient, lpVtbl : ISpatialAudioMetadataClientVtbl* do
    GUID = LibC::GUID.new(0x777d4a3b_u32, 0xf6ff_u16, 0x4a26_u16, StaticArray[0x85_u8, 0xdc_u8, 0x68_u8, 0xd7_u8, 0xcd_u8, 0xed_u8, 0xa1_u8, 0xd4_u8])
    def query_interface(this : ISpatialAudioMetadataClient*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioMetadataClient*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioMetadataClient*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def activate_spatial_audio_metadata_items(this : ISpatialAudioMetadataClient*, maxItemCount : UInt16, frameCount : UInt16, metadataItemsBuffer : Void**, metadataItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_metadata_items.call(this, maxItemCount, frameCount, metadataItemsBuffer, metadataItems)
    end
    def get_spatial_audio_metadata_items_buffer_length(this : ISpatialAudioMetadataClient*, maxItemCount : UInt16, bufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_spatial_audio_metadata_items_buffer_length.call(this, maxItemCount, bufferLength)
    end
    def activate_spatial_audio_metadata_writer(this : ISpatialAudioMetadataClient*, overflowMode : Win32cr::Media::Audio::SpatialAudioMetadataWriterOverflowMode, metadataWriter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_metadata_writer.call(this, overflowMode, metadataWriter)
    end
    def activate_spatial_audio_metadata_copier(this : ISpatialAudioMetadataClient*, metadataCopier : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_metadata_copier.call(this, metadataCopier)
    end
    def activate_spatial_audio_metadata_reader(this : ISpatialAudioMetadataClient*, metadataReader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_metadata_reader.call(this, metadataReader)
    end

  end

  @[Extern]
  record ISpatialAudioObjectForMetadataCommandsVtbl,
    query_interface : Proc(ISpatialAudioObjectForMetadataCommands*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectForMetadataCommands*, UInt32),
    release : Proc(ISpatialAudioObjectForMetadataCommands*, UInt32),
    get_buffer : Proc(ISpatialAudioObjectForMetadataCommands*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_end_of_stream : Proc(ISpatialAudioObjectForMetadataCommands*, UInt32, Win32cr::Foundation::HRESULT),
    is_active : Proc(ISpatialAudioObjectForMetadataCommands*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_audio_object_type : Proc(ISpatialAudioObjectForMetadataCommands*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT),
    write_next_metadata_command : Proc(ISpatialAudioObjectForMetadataCommands*, UInt8, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("0df2c94b-f5f9-472d-af6b-c46e0ac9cd05")]
  record ISpatialAudioObjectForMetadataCommands, lpVtbl : ISpatialAudioObjectForMetadataCommandsVtbl* do
    GUID = LibC::GUID.new(0xdf2c94b_u32, 0xf5f9_u16, 0x472d_u16, StaticArray[0xaf_u8, 0x6b_u8, 0xc4_u8, 0x6e_u8, 0xa_u8, 0xc9_u8, 0xcd_u8, 0x5_u8])
    def query_interface(this : ISpatialAudioObjectForMetadataCommands*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectForMetadataCommands*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectForMetadataCommands*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffer(this : ISpatialAudioObjectForMetadataCommands*, buffer : UInt8**, bufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, buffer, bufferLength)
    end
    def set_end_of_stream(this : ISpatialAudioObjectForMetadataCommands*, frameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_end_of_stream.call(this, frameCount)
    end
    def is_active(this : ISpatialAudioObjectForMetadataCommands*, isActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_active.call(this, isActive)
    end
    def get_audio_object_type(this : ISpatialAudioObjectForMetadataCommands*, audioObjectType : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_object_type.call(this, audioObjectType)
    end
    def write_next_metadata_command(this : ISpatialAudioObjectForMetadataCommands*, commandID : UInt8, valueBuffer : Void*, valueBufferLength : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_next_metadata_command.call(this, commandID, valueBuffer, valueBufferLength)
    end

  end

  @[Extern]
  record ISpatialAudioObjectForMetadataItemsVtbl,
    query_interface : Proc(ISpatialAudioObjectForMetadataItems*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectForMetadataItems*, UInt32),
    release : Proc(ISpatialAudioObjectForMetadataItems*, UInt32),
    get_buffer : Proc(ISpatialAudioObjectForMetadataItems*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_end_of_stream : Proc(ISpatialAudioObjectForMetadataItems*, UInt32, Win32cr::Foundation::HRESULT),
    is_active : Proc(ISpatialAudioObjectForMetadataItems*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_audio_object_type : Proc(ISpatialAudioObjectForMetadataItems*, Win32cr::Media::Audio::AudioObjectType*, Win32cr::Foundation::HRESULT),
    get_spatial_audio_metadata_items : Proc(ISpatialAudioObjectForMetadataItems*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("ddea49ff-3bc0-4377-8aad-9fbcfd808566")]
  record ISpatialAudioObjectForMetadataItems, lpVtbl : ISpatialAudioObjectForMetadataItemsVtbl* do
    GUID = LibC::GUID.new(0xddea49ff_u32, 0x3bc0_u16, 0x4377_u16, StaticArray[0x8a_u8, 0xad_u8, 0x9f_u8, 0xbc_u8, 0xfd_u8, 0x80_u8, 0x85_u8, 0x66_u8])
    def query_interface(this : ISpatialAudioObjectForMetadataItems*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectForMetadataItems*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectForMetadataItems*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_buffer(this : ISpatialAudioObjectForMetadataItems*, buffer : UInt8**, bufferLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_buffer.call(this, buffer, bufferLength)
    end
    def set_end_of_stream(this : ISpatialAudioObjectForMetadataItems*, frameCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_end_of_stream.call(this, frameCount)
    end
    def is_active(this : ISpatialAudioObjectForMetadataItems*, isActive : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_active.call(this, isActive)
    end
    def get_audio_object_type(this : ISpatialAudioObjectForMetadataItems*, audioObjectType : Win32cr::Media::Audio::AudioObjectType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_object_type.call(this, audioObjectType)
    end
    def get_spatial_audio_metadata_items(this : ISpatialAudioObjectForMetadataItems*, metadataItems : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_spatial_audio_metadata_items.call(this, metadataItems)
    end

  end

  @[Extern]
  record ISpatialAudioObjectRenderStreamForMetadataVtbl,
    query_interface : Proc(ISpatialAudioObjectRenderStreamForMetadata*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32),
    release : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32),
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32*, Win32cr::Foundation::HRESULT),
    get_service : Proc(ISpatialAudioObjectRenderStreamForMetadata*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    start : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Win32cr::Foundation::HRESULT),
    stop : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Win32cr::Foundation::HRESULT),
    reset : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Win32cr::Foundation::HRESULT),
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_object_for_metadata_commands : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Win32cr::Media::Audio::AudioObjectType, Void**, Win32cr::Foundation::HRESULT),
    activate_spatial_audio_object_for_metadata_items : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Win32cr::Media::Audio::AudioObjectType, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  #@[Com("bbc9c907-48d5-4a2e-a0c7-f7f0d67c1fb1")]
  record ISpatialAudioObjectRenderStreamForMetadata, lpVtbl : ISpatialAudioObjectRenderStreamForMetadataVtbl* do
    GUID = LibC::GUID.new(0xbbc9c907_u32, 0x48d5_u16, 0x4a2e_u16, StaticArray[0xa0_u8, 0xc7_u8, 0xf7_u8, 0xf0_u8, 0xd6_u8, 0x7c_u8, 0x1f_u8, 0xb1_u8])
    def query_interface(this : ISpatialAudioObjectRenderStreamForMetadata*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ISpatialAudioObjectRenderStreamForMetadata*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ISpatialAudioObjectRenderStreamForMetadata*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_available_dynamic_object_count(this : ISpatialAudioObjectRenderStreamForMetadata*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_dynamic_object_count.call(this, value)
    end
    def get_service(this : ISpatialAudioObjectRenderStreamForMetadata*, riid : LibC::GUID*, service : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_service.call(this, riid, service)
    end
    def start(this : ISpatialAudioObjectRenderStreamForMetadata*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start.call(this)
    end
    def stop(this : ISpatialAudioObjectRenderStreamForMetadata*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop.call(this)
    end
    def reset(this : ISpatialAudioObjectRenderStreamForMetadata*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def begin_updating_audio_objects(this : ISpatialAudioObjectRenderStreamForMetadata*, availableDynamicObjectCount : UInt32*, frameCountPerBuffer : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.begin_updating_audio_objects.call(this, availableDynamicObjectCount, frameCountPerBuffer)
    end
    def end_updating_audio_objects(this : ISpatialAudioObjectRenderStreamForMetadata*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.end_updating_audio_objects.call(this)
    end
    def activate_spatial_audio_object_for_metadata_commands(this : ISpatialAudioObjectRenderStreamForMetadata*, type__ : Win32cr::Media::Audio::AudioObjectType, audioObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_object_for_metadata_commands.call(this, type__, audioObject)
    end
    def activate_spatial_audio_object_for_metadata_items(this : ISpatialAudioObjectRenderStreamForMetadata*, type__ : Win32cr::Media::Audio::AudioObjectType, audioObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.activate_spatial_audio_object_for_metadata_items.call(this, type__, audioObject)
    end

  end

  @[Extern]
  record IAudioStateMonitorVtbl,
    query_interface : Proc(IAudioStateMonitor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IAudioStateMonitor*, UInt32),
    release : Proc(IAudioStateMonitor*, UInt32),
    register_callback : Proc(IAudioStateMonitor*, Win32cr::Media::Audio::PAudioStateMonitorCallback, Void*, Int64*, Win32cr::Foundation::HRESULT),
    unregister_callback : Proc(IAudioStateMonitor*, Int64, Void),
    get_sound_level : Proc(IAudioStateMonitor*, Win32cr::Media::Audio::AudioStateMonitorSoundLevel)


  @[Extern]
  #@[Com("63bd8738-e30d-4c77-bf5c-834e87c657e2")]
  record IAudioStateMonitor, lpVtbl : IAudioStateMonitorVtbl* do
    GUID = LibC::GUID.new(0x63bd8738_u32, 0xe30d_u16, 0x4c77_u16, StaticArray[0xbf_u8, 0x5c_u8, 0x83_u8, 0x4e_u8, 0x87_u8, 0xc6_u8, 0x57_u8, 0xe2_u8])
    def query_interface(this : IAudioStateMonitor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IAudioStateMonitor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IAudioStateMonitor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_callback(this : IAudioStateMonitor*, callback : Win32cr::Media::Audio::PAudioStateMonitorCallback, context : Void*, registration : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_callback.call(this, callback, context, registration)
    end
    def unregister_callback(this : IAudioStateMonitor*, registration : Int64) : Void
      @lpVtbl.try &.value.unregister_callback.call(this, registration)
    end
    def get_sound_level(this : IAudioStateMonitor*) : Win32cr::Media::Audio::AudioStateMonitorSoundLevel
      @lpVtbl.try &.value.get_sound_level.call(this)
    end

  end

  @[Link("ole32")]
  @[Link("winmm")]
  @[Link("mmdevapi")]
  @[Link("windows.media.mediacontrol")]
  @[Link("msacm32")]
  lib C
    fun CoRegisterMessageFilter(lpMessageFilter : Void*, lplpMessageFilter : Void**) : Win32cr::Foundation::HRESULT

    fun sndPlaySoundA(pszSound : Win32cr::Foundation::PSTR, fuSound : UInt32) : Win32cr::Foundation::BOOL

    fun sndPlaySoundW(pszSound : Win32cr::Foundation::PWSTR, fuSound : UInt32) : Win32cr::Foundation::BOOL

    fun PlaySoundA(pszSound : Win32cr::Foundation::PSTR, hmod : Win32cr::Foundation::HINSTANCE, fdwSound : UInt32) : Win32cr::Foundation::BOOL

    fun PlaySoundW(pszSound : Win32cr::Foundation::PWSTR, hmod : Win32cr::Foundation::HINSTANCE, fdwSound : UInt32) : Win32cr::Foundation::BOOL

    fun waveOutGetNumDevs : UInt32

    fun waveOutGetDevCapsA(uDeviceID : LibC::UIntPtrT, pwoc : Win32cr::Media::Audio::WAVEOUTCAPSA*, cbwoc : UInt32) : UInt32

    fun waveOutGetDevCapsW(uDeviceID : LibC::UIntPtrT, pwoc : Win32cr::Media::Audio::WAVEOUTCAPSW*, cbwoc : UInt32) : UInt32

    fun waveOutGetVolume(hwo : Win32cr::Media::Audio::HWAVEOUT, pdwVolume : UInt32*) : UInt32

    fun waveOutSetVolume(hwo : Win32cr::Media::Audio::HWAVEOUT, dwVolume : UInt32) : UInt32

    fun waveOutGetErrorTextA(mmrError : UInt32, pszText : UInt8*, cchText : UInt32) : UInt32

    fun waveOutGetErrorTextW(mmrError : UInt32, pszText : UInt16*, cchText : UInt32) : UInt32

    fun waveOutOpen(phwo : Win32cr::Media::Audio::HWAVEOUT*, uDeviceID : UInt32, pwfx : Win32cr::Media::Audio::WAVEFORMATEX*, dwCallback : LibC::UIntPtrT, dwInstance : LibC::UIntPtrT, fdwOpen : Win32cr::Media::Audio::MIDI_WAVE_OPEN_TYPE) : UInt32

    fun waveOutClose(hwo : Win32cr::Media::Audio::HWAVEOUT) : UInt32

    fun waveOutPrepareHeader(hwo : Win32cr::Media::Audio::HWAVEOUT, pwh : Win32cr::Media::Audio::WAVEHDR*, cbwh : UInt32) : UInt32

    fun waveOutUnprepareHeader(hwo : Win32cr::Media::Audio::HWAVEOUT, pwh : Win32cr::Media::Audio::WAVEHDR*, cbwh : UInt32) : UInt32

    fun waveOutWrite(hwo : Win32cr::Media::Audio::HWAVEOUT, pwh : Win32cr::Media::Audio::WAVEHDR*, cbwh : UInt32) : UInt32

    fun waveOutPause(hwo : Win32cr::Media::Audio::HWAVEOUT) : UInt32

    fun waveOutRestart(hwo : Win32cr::Media::Audio::HWAVEOUT) : UInt32

    fun waveOutReset(hwo : Win32cr::Media::Audio::HWAVEOUT) : UInt32

    fun waveOutBreakLoop(hwo : Win32cr::Media::Audio::HWAVEOUT) : UInt32

    fun waveOutGetPosition(hwo : Win32cr::Media::Audio::HWAVEOUT, pmmt : Win32cr::Media::MMTIME*, cbmmt : UInt32) : UInt32

    fun waveOutGetPitch(hwo : Win32cr::Media::Audio::HWAVEOUT, pdwPitch : UInt32*) : UInt32

    fun waveOutSetPitch(hwo : Win32cr::Media::Audio::HWAVEOUT, dwPitch : UInt32) : UInt32

    fun waveOutGetPlaybackRate(hwo : Win32cr::Media::Audio::HWAVEOUT, pdwRate : UInt32*) : UInt32

    fun waveOutSetPlaybackRate(hwo : Win32cr::Media::Audio::HWAVEOUT, dwRate : UInt32) : UInt32

    fun waveOutGetID(hwo : Win32cr::Media::Audio::HWAVEOUT, puDeviceID : UInt32*) : UInt32

    fun waveOutMessage(hwo : Win32cr::Media::Audio::HWAVEOUT, uMsg : UInt32, dw1 : LibC::UIntPtrT, dw2 : LibC::UIntPtrT) : UInt32

    fun waveInGetNumDevs : UInt32

    fun waveInGetDevCapsA(uDeviceID : LibC::UIntPtrT, pwic : Win32cr::Media::Audio::WAVEINCAPSA*, cbwic : UInt32) : UInt32

    fun waveInGetDevCapsW(uDeviceID : LibC::UIntPtrT, pwic : Win32cr::Media::Audio::WAVEINCAPSW*, cbwic : UInt32) : UInt32

    fun waveInGetErrorTextA(mmrError : UInt32, pszText : UInt8*, cchText : UInt32) : UInt32

    fun waveInGetErrorTextW(mmrError : UInt32, pszText : UInt16*, cchText : UInt32) : UInt32

    fun waveInOpen(phwi : Win32cr::Media::Audio::HWAVEIN*, uDeviceID : UInt32, pwfx : Win32cr::Media::Audio::WAVEFORMATEX*, dwCallback : LibC::UIntPtrT, dwInstance : LibC::UIntPtrT, fdwOpen : Win32cr::Media::Audio::MIDI_WAVE_OPEN_TYPE) : UInt32

    fun waveInClose(hwi : Win32cr::Media::Audio::HWAVEIN) : UInt32

    fun waveInPrepareHeader(hwi : Win32cr::Media::Audio::HWAVEIN, pwh : Win32cr::Media::Audio::WAVEHDR*, cbwh : UInt32) : UInt32

    fun waveInUnprepareHeader(hwi : Win32cr::Media::Audio::HWAVEIN, pwh : Win32cr::Media::Audio::WAVEHDR*, cbwh : UInt32) : UInt32

    fun waveInAddBuffer(hwi : Win32cr::Media::Audio::HWAVEIN, pwh : Win32cr::Media::Audio::WAVEHDR*, cbwh : UInt32) : UInt32

    fun waveInStart(hwi : Win32cr::Media::Audio::HWAVEIN) : UInt32

    fun waveInStop(hwi : Win32cr::Media::Audio::HWAVEIN) : UInt32

    fun waveInReset(hwi : Win32cr::Media::Audio::HWAVEIN) : UInt32

    fun waveInGetPosition(hwi : Win32cr::Media::Audio::HWAVEIN, pmmt : Win32cr::Media::MMTIME*, cbmmt : UInt32) : UInt32

    fun waveInGetID(hwi : Win32cr::Media::Audio::HWAVEIN, puDeviceID : UInt32*) : UInt32

    fun waveInMessage(hwi : Win32cr::Media::Audio::HWAVEIN, uMsg : UInt32, dw1 : LibC::UIntPtrT, dw2 : LibC::UIntPtrT) : UInt32

    fun midiOutGetNumDevs : UInt32

    fun midiStreamOpen(phms : Win32cr::Media::Audio::HMIDISTRM*, puDeviceID : UInt32*, cMidi : UInt32, dwCallback : LibC::UIntPtrT, dwInstance : LibC::UIntPtrT, fdwOpen : UInt32) : UInt32

    fun midiStreamClose(hms : Win32cr::Media::Audio::HMIDISTRM) : UInt32

    fun midiStreamProperty(hms : Win32cr::Media::Audio::HMIDISTRM, lppropdata : UInt8*, dwProperty : UInt32) : UInt32

    fun midiStreamPosition(hms : Win32cr::Media::Audio::HMIDISTRM, lpmmt : Win32cr::Media::MMTIME*, cbmmt : UInt32) : UInt32

    fun midiStreamOut(hms : Win32cr::Media::Audio::HMIDISTRM, pmh : Win32cr::Media::Audio::MIDIHDR*, cbmh : UInt32) : UInt32

    fun midiStreamPause(hms : Win32cr::Media::Audio::HMIDISTRM) : UInt32

    fun midiStreamRestart(hms : Win32cr::Media::Audio::HMIDISTRM) : UInt32

    fun midiStreamStop(hms : Win32cr::Media::Audio::HMIDISTRM) : UInt32

    fun midiConnect(hmi : Win32cr::Media::Audio::HMIDI, hmo : Win32cr::Media::Audio::HMIDIOUT, pReserved : Void*) : UInt32

    fun midiDisconnect(hmi : Win32cr::Media::Audio::HMIDI, hmo : Win32cr::Media::Audio::HMIDIOUT, pReserved : Void*) : UInt32

    fun midiOutGetDevCapsA(uDeviceID : LibC::UIntPtrT, pmoc : Win32cr::Media::Audio::MIDIOUTCAPSA*, cbmoc : UInt32) : UInt32

    fun midiOutGetDevCapsW(uDeviceID : LibC::UIntPtrT, pmoc : Win32cr::Media::Audio::MIDIOUTCAPSW*, cbmoc : UInt32) : UInt32

    fun midiOutGetVolume(hmo : Win32cr::Media::Audio::HMIDIOUT, pdwVolume : UInt32*) : UInt32

    fun midiOutSetVolume(hmo : Win32cr::Media::Audio::HMIDIOUT, dwVolume : UInt32) : UInt32

    fun midiOutGetErrorTextA(mmrError : UInt32, pszText : UInt8*, cchText : UInt32) : UInt32

    fun midiOutGetErrorTextW(mmrError : UInt32, pszText : UInt16*, cchText : UInt32) : UInt32

    fun midiOutOpen(phmo : Win32cr::Media::Audio::HMIDIOUT*, uDeviceID : UInt32, dwCallback : LibC::UIntPtrT, dwInstance : LibC::UIntPtrT, fdwOpen : Win32cr::Media::Audio::MIDI_WAVE_OPEN_TYPE) : UInt32

    fun midiOutClose(hmo : Win32cr::Media::Audio::HMIDIOUT) : UInt32

    fun midiOutPrepareHeader(hmo : Win32cr::Media::Audio::HMIDIOUT, pmh : Win32cr::Media::Audio::MIDIHDR*, cbmh : UInt32) : UInt32

    fun midiOutUnprepareHeader(hmo : Win32cr::Media::Audio::HMIDIOUT, pmh : Win32cr::Media::Audio::MIDIHDR*, cbmh : UInt32) : UInt32

    fun midiOutShortMsg(hmo : Win32cr::Media::Audio::HMIDIOUT, dwMsg : UInt32) : UInt32

    fun midiOutLongMsg(hmo : Win32cr::Media::Audio::HMIDIOUT, pmh : Win32cr::Media::Audio::MIDIHDR*, cbmh : UInt32) : UInt32

    fun midiOutReset(hmo : Win32cr::Media::Audio::HMIDIOUT) : UInt32

    fun midiOutCachePatches(hmo : Win32cr::Media::Audio::HMIDIOUT, uBank : UInt32, pwpa : UInt16*, fuCache : UInt32) : UInt32

    fun midiOutCacheDrumPatches(hmo : Win32cr::Media::Audio::HMIDIOUT, uPatch : UInt32, pwkya : UInt16*, fuCache : UInt32) : UInt32

    fun midiOutGetID(hmo : Win32cr::Media::Audio::HMIDIOUT, puDeviceID : UInt32*) : UInt32

    fun midiOutMessage(hmo : Win32cr::Media::Audio::HMIDIOUT, uMsg : UInt32, dw1 : LibC::UIntPtrT, dw2 : LibC::UIntPtrT) : UInt32

    fun midiInGetNumDevs : UInt32

    fun midiInGetDevCapsA(uDeviceID : LibC::UIntPtrT, pmic : Win32cr::Media::Audio::MIDIINCAPSA*, cbmic : UInt32) : UInt32

    fun midiInGetDevCapsW(uDeviceID : LibC::UIntPtrT, pmic : Win32cr::Media::Audio::MIDIINCAPSW*, cbmic : UInt32) : UInt32

    fun midiInGetErrorTextA(mmrError : UInt32, pszText : UInt8*, cchText : UInt32) : UInt32

    fun midiInGetErrorTextW(mmrError : UInt32, pszText : UInt16*, cchText : UInt32) : UInt32

    fun midiInOpen(phmi : Win32cr::Media::Audio::HMIDIIN*, uDeviceID : UInt32, dwCallback : LibC::UIntPtrT, dwInstance : LibC::UIntPtrT, fdwOpen : Win32cr::Media::Audio::MIDI_WAVE_OPEN_TYPE) : UInt32

    fun midiInClose(hmi : Win32cr::Media::Audio::HMIDIIN) : UInt32

    fun midiInPrepareHeader(hmi : Win32cr::Media::Audio::HMIDIIN, pmh : Win32cr::Media::Audio::MIDIHDR*, cbmh : UInt32) : UInt32

    fun midiInUnprepareHeader(hmi : Win32cr::Media::Audio::HMIDIIN, pmh : Win32cr::Media::Audio::MIDIHDR*, cbmh : UInt32) : UInt32

    fun midiInAddBuffer(hmi : Win32cr::Media::Audio::HMIDIIN, pmh : Win32cr::Media::Audio::MIDIHDR*, cbmh : UInt32) : UInt32

    fun midiInStart(hmi : Win32cr::Media::Audio::HMIDIIN) : UInt32

    fun midiInStop(hmi : Win32cr::Media::Audio::HMIDIIN) : UInt32

    fun midiInReset(hmi : Win32cr::Media::Audio::HMIDIIN) : UInt32

    fun midiInGetID(hmi : Win32cr::Media::Audio::HMIDIIN, puDeviceID : UInt32*) : UInt32

    fun midiInMessage(hmi : Win32cr::Media::Audio::HMIDIIN, uMsg : UInt32, dw1 : LibC::UIntPtrT, dw2 : LibC::UIntPtrT) : UInt32

    fun auxGetNumDevs : UInt32

    fun auxGetDevCapsA(uDeviceID : LibC::UIntPtrT, pac : Win32cr::Media::Audio::AUXCAPSA*, cbac : UInt32) : UInt32

    fun auxGetDevCapsW(uDeviceID : LibC::UIntPtrT, pac : Win32cr::Media::Audio::AUXCAPSW*, cbac : UInt32) : UInt32

    fun auxSetVolume(uDeviceID : UInt32, dwVolume : UInt32) : UInt32

    fun auxGetVolume(uDeviceID : UInt32, pdwVolume : UInt32*) : UInt32

    fun auxOutMessage(uDeviceID : UInt32, uMsg : UInt32, dw1 : LibC::UIntPtrT, dw2 : LibC::UIntPtrT) : UInt32

    fun mixerGetNumDevs : UInt32

    fun mixerGetDevCapsA(uMxId : LibC::UIntPtrT, pmxcaps : Win32cr::Media::Audio::MIXERCAPSA*, cbmxcaps : UInt32) : UInt32

    fun mixerGetDevCapsW(uMxId : LibC::UIntPtrT, pmxcaps : Win32cr::Media::Audio::MIXERCAPSW*, cbmxcaps : UInt32) : UInt32

    fun mixerOpen(phmx : LibC::IntPtrT*, uMxId : UInt32, dwCallback : LibC::UIntPtrT, dwInstance : LibC::UIntPtrT, fdwOpen : UInt32) : UInt32

    fun mixerClose(hmx : Win32cr::Media::Audio::HMIXER) : UInt32

    fun mixerMessage(hmx : Win32cr::Media::Audio::HMIXER, uMsg : UInt32, dwParam1 : LibC::UIntPtrT, dwParam2 : LibC::UIntPtrT) : UInt32

    fun mixerGetLineInfoA(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, pmxl : Win32cr::Media::Audio::MIXERLINEA*, fdwInfo : UInt32) : UInt32

    fun mixerGetLineInfoW(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, pmxl : Win32cr::Media::Audio::MIXERLINEW*, fdwInfo : UInt32) : UInt32

    fun mixerGetID(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, puMxId : UInt32*, fdwId : UInt32) : UInt32

    fun mixerGetLineControlsA(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, pmxlc : Win32cr::Media::Audio::MIXERLINECONTROLSA*, fdwControls : UInt32) : UInt32

    fun mixerGetLineControlsW(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, pmxlc : Win32cr::Media::Audio::MIXERLINECONTROLSW*, fdwControls : UInt32) : UInt32

    fun mixerGetControlDetailsA(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, pmxcd : Win32cr::Media::Audio::MIXERCONTROLDETAILS*, fdwDetails : UInt32) : UInt32

    fun mixerGetControlDetailsW(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, pmxcd : Win32cr::Media::Audio::MIXERCONTROLDETAILS*, fdwDetails : UInt32) : UInt32

    fun mixerSetControlDetails(hmxobj : Win32cr::Media::Audio::HMIXEROBJ, pmxcd : Win32cr::Media::Audio::MIXERCONTROLDETAILS*, fdwDetails : UInt32) : UInt32

    fun ActivateAudioInterfaceAsync(deviceInterfacePath : Win32cr::Foundation::PWSTR, riid : LibC::GUID*, activationParams : Win32cr::System::Com::StructuredStorage::PROPVARIANT*, completionHandler : Void*, activationOperation : Void**) : Win32cr::Foundation::HRESULT

    fun CreateRenderAudioStateMonitor(audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun CreateRenderAudioStateMonitorForCategory(category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun CreateRenderAudioStateMonitorForCategoryAndDeviceRole(category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, role : Win32cr::Media::Audio::ERole, audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun CreateRenderAudioStateMonitorForCategoryAndDeviceId(category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, deviceId : Win32cr::Foundation::PWSTR, audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun CreateCaptureAudioStateMonitor(audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun CreateCaptureAudioStateMonitorForCategory(category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun CreateCaptureAudioStateMonitorForCategoryAndDeviceRole(category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, role : Win32cr::Media::Audio::ERole, audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun CreateCaptureAudioStateMonitorForCategoryAndDeviceId(category : Win32cr::Media::Audio::AUDIO_STREAM_CATEGORY, deviceId : Win32cr::Foundation::PWSTR, audioStateMonitor : Void**) : Win32cr::Foundation::HRESULT

    fun acmGetVersion : UInt32

    fun acmMetrics(hao : Win32cr::Media::Audio::HACMOBJ, uMetric : UInt32, pMetric : Void*) : UInt32

    fun acmDriverEnum(fnCallback : Win32cr::Media::Audio::ACMDRIVERENUMCB, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmDriverID(hao : Win32cr::Media::Audio::HACMOBJ, phadid : LibC::IntPtrT*, fdwDriverID : UInt32) : UInt32

    fun acmDriverAddA(phadid : LibC::IntPtrT*, hinstModule : Win32cr::Foundation::HINSTANCE, lParam : Win32cr::Foundation::LPARAM, dwPriority : UInt32, fdwAdd : UInt32) : UInt32

    fun acmDriverAddW(phadid : LibC::IntPtrT*, hinstModule : Win32cr::Foundation::HINSTANCE, lParam : Win32cr::Foundation::LPARAM, dwPriority : UInt32, fdwAdd : UInt32) : UInt32

    fun acmDriverRemove(hadid : Win32cr::Media::Audio::HACMDRIVERID, fdwRemove : UInt32) : UInt32

    fun acmDriverOpen(phad : LibC::IntPtrT*, hadid : Win32cr::Media::Audio::HACMDRIVERID, fdwOpen : UInt32) : UInt32

    fun acmDriverClose(had : Win32cr::Media::Audio::HACMDRIVER, fdwClose : UInt32) : UInt32

    fun acmDriverMessage(had : Win32cr::Media::Audio::HACMDRIVER, uMsg : UInt32, lParam1 : Win32cr::Foundation::LPARAM, lParam2 : Win32cr::Foundation::LPARAM) : Win32cr::Foundation::LRESULT

    fun acmDriverPriority(hadid : Win32cr::Media::Audio::HACMDRIVERID, dwPriority : UInt32, fdwPriority : UInt32) : UInt32

    fun acmDriverDetailsA(hadid : Win32cr::Media::Audio::HACMDRIVERID, padd : Win32cr::Media::Audio::ACMDRIVERDETAILSA*, fdwDetails : UInt32) : UInt32

    fun acmDriverDetailsW(hadid : Win32cr::Media::Audio::HACMDRIVERID, padd : Win32cr::Media::Audio::ACMDRIVERDETAILSW*, fdwDetails : UInt32) : UInt32

    fun acmFormatTagDetailsA(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFORMATTAGDETAILSA*, fdwDetails : UInt32) : UInt32

    fun acmFormatTagDetailsW(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFORMATTAGDETAILSW*, fdwDetails : UInt32) : UInt32

    fun acmFormatTagEnumA(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFORMATTAGDETAILSA*, fnCallback : Win32cr::Media::Audio::ACMFORMATTAGENUMCBA, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFormatTagEnumW(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFORMATTAGDETAILSW*, fnCallback : Win32cr::Media::Audio::ACMFORMATTAGENUMCBW, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFormatDetailsA(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::ACMFORMATDETAILSA*, fdwDetails : UInt32) : UInt32

    fun acmFormatDetailsW(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::Tacmformatdetailsw*, fdwDetails : UInt32) : UInt32

    fun acmFormatEnumA(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::ACMFORMATDETAILSA*, fnCallback : Win32cr::Media::Audio::ACMFORMATENUMCBA, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFormatEnumW(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::Tacmformatdetailsw*, fnCallback : Win32cr::Media::Audio::ACMFORMATENUMCBW, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFormatSuggest(had : Win32cr::Media::Audio::HACMDRIVER, pwfxSrc : Win32cr::Media::Audio::WAVEFORMATEX*, pwfxDst : Win32cr::Media::Audio::WAVEFORMATEX*, cbwfxDst : UInt32, fdwSuggest : UInt32) : UInt32

    fun acmFormatChooseA(pafmtc : Win32cr::Media::Audio::ACMFORMATCHOOSEA*) : UInt32

    fun acmFormatChooseW(pafmtc : Win32cr::Media::Audio::ACMFORMATCHOOSEW*) : UInt32

    fun acmFilterTagDetailsA(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFILTERTAGDETAILSA*, fdwDetails : UInt32) : UInt32

    fun acmFilterTagDetailsW(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFILTERTAGDETAILSW*, fdwDetails : UInt32) : UInt32

    fun acmFilterTagEnumA(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFILTERTAGDETAILSA*, fnCallback : Win32cr::Media::Audio::ACMFILTERTAGENUMCBA, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFilterTagEnumW(had : Win32cr::Media::Audio::HACMDRIVER, paftd : Win32cr::Media::Audio::ACMFILTERTAGDETAILSW*, fnCallback : Win32cr::Media::Audio::ACMFILTERTAGENUMCBW, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFilterDetailsA(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::ACMFILTERDETAILSA*, fdwDetails : UInt32) : UInt32

    fun acmFilterDetailsW(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::ACMFILTERDETAILSW*, fdwDetails : UInt32) : UInt32

    fun acmFilterEnumA(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::ACMFILTERDETAILSA*, fnCallback : Win32cr::Media::Audio::ACMFILTERENUMCBA, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFilterEnumW(had : Win32cr::Media::Audio::HACMDRIVER, pafd : Win32cr::Media::Audio::ACMFILTERDETAILSW*, fnCallback : Win32cr::Media::Audio::ACMFILTERENUMCBW, dwInstance : LibC::UIntPtrT, fdwEnum : UInt32) : UInt32

    fun acmFilterChooseA(pafltrc : Win32cr::Media::Audio::ACMFILTERCHOOSEA*) : UInt32

    fun acmFilterChooseW(pafltrc : Win32cr::Media::Audio::ACMFILTERCHOOSEW*) : UInt32

    fun acmStreamOpen(phas : LibC::IntPtrT*, had : Win32cr::Media::Audio::HACMDRIVER, pwfxSrc : Win32cr::Media::Audio::WAVEFORMATEX*, pwfxDst : Win32cr::Media::Audio::WAVEFORMATEX*, pwfltr : Win32cr::Media::Audio::WAVEFILTER*, dwCallback : LibC::UIntPtrT, dwInstance : LibC::UIntPtrT, fdwOpen : UInt32) : UInt32

    fun acmStreamClose(has : Win32cr::Media::Audio::HACMSTREAM, fdwClose : UInt32) : UInt32

    fun acmStreamSize(has : Win32cr::Media::Audio::HACMSTREAM, cbInput : UInt32, pdwOutputBytes : UInt32*, fdwSize : UInt32) : UInt32

    fun acmStreamReset(has : Win32cr::Media::Audio::HACMSTREAM, fdwReset : UInt32) : UInt32

    fun acmStreamMessage(has : Win32cr::Media::Audio::HACMSTREAM, uMsg : UInt32, lParam1 : Win32cr::Foundation::LPARAM, lParam2 : Win32cr::Foundation::LPARAM) : UInt32

    fun acmStreamConvert(has : Win32cr::Media::Audio::HACMSTREAM, pash : Win32cr::Media::Audio::ACMSTREAMHEADER*, fdwConvert : UInt32) : UInt32

    fun acmStreamPrepareHeader(has : Win32cr::Media::Audio::HACMSTREAM, pash : Win32cr::Media::Audio::ACMSTREAMHEADER*, fdwPrepare : UInt32) : UInt32

    fun acmStreamUnprepareHeader(has : Win32cr::Media::Audio::HACMSTREAM, pash : Win32cr::Media::Audio::ACMSTREAMHEADER*, fdwUnprepare : UInt32) : UInt32

  end
end