require "../media/multimedia.cr"
require "../foundation.cr"
require "../system/com.cr"
require "../media.cr"
require "../system/com/structuredstorage.cr"
require "../ui/shell/propertiessystem.cr"
require "../ui/windowsandmessaging.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:ole32.dll")]
@[Link(ldflags: "/DELAYLOAD:winmm.dll")]
@[Link(ldflags: "/DELAYLOAD:mmdevapi.dll")]
@[Link(ldflags: "/DELAYLOAD:windows.media.mediacontrol.dll")]
@[Link(ldflags: "/DELAYLOAD:msacm32.dll")]
{% else %}
@[Link("ole32")]
@[Link("winmm")]
@[Link("mmdevapi")]
@[Link("windows.media.mediacontrol")]
@[Link("msacm32")]
{% end %}
lib LibWin32
  alias HMIDI = LibC::IntPtrT
  alias HMIDIIN = LibC::IntPtrT
  alias HMIDIOUT = LibC::IntPtrT
  alias HMIDISTRM = LibC::IntPtrT
  alias HMIXER = LibC::IntPtrT
  alias HMIXEROBJ = LibC::IntPtrT
  alias HWAVE = LibC::IntPtrT
  alias HWAVEOUT = LibC::IntPtrT
  alias HWAVEIN = LibC::IntPtrT
  alias HACMDRIVERID = LibC::IntPtrT
  alias HACMDRIVER = LibC::IntPtrT
  alias HACMSTREAM = LibC::IntPtrT
  alias HACMOBJ = LibC::IntPtrT

  MIXERCONTROL_CONTROLTYPE_CUSTOM = 0_u32
  MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 268500992_u32
  MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 268566528_u32
  MIXERCONTROL_CONTROLTYPE_PEAKMETER = 268566529_u32
  MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 268632064_u32
  MIXERCONTROL_CONTROLTYPE_BOOLEAN = 536936448_u32
  MIXERCONTROL_CONTROLTYPE_ONOFF = 536936449_u32
  MIXERCONTROL_CONTROLTYPE_MUTE = 536936450_u32
  MIXERCONTROL_CONTROLTYPE_MONO = 536936451_u32
  MIXERCONTROL_CONTROLTYPE_LOUDNESS = 536936452_u32
  MIXERCONTROL_CONTROLTYPE_STEREOENH = 536936453_u32
  MIXERCONTROL_CONTROLTYPE_BASS_BOOST = 536945271_u32
  MIXERCONTROL_CONTROLTYPE_BUTTON = 553713664_u32
  MIXERCONTROL_CONTROLTYPE_DECIBELS = 805568512_u32
  MIXERCONTROL_CONTROLTYPE_SIGNED = 805437440_u32
  MIXERCONTROL_CONTROLTYPE_UNSIGNED = 805502976_u32
  MIXERCONTROL_CONTROLTYPE_PERCENT = 805634048_u32
  MIXERCONTROL_CONTROLTYPE_SLIDER = 1073872896_u32
  MIXERCONTROL_CONTROLTYPE_PAN = 1073872897_u32
  MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 1073872898_u32
  MIXERCONTROL_CONTROLTYPE_FADER = 1342373888_u32
  MIXERCONTROL_CONTROLTYPE_VOLUME = 1342373889_u32
  MIXERCONTROL_CONTROLTYPE_BASS = 1342373890_u32
  MIXERCONTROL_CONTROLTYPE_TREBLE = 1342373891_u32
  MIXERCONTROL_CONTROLTYPE_EQUALIZER = 1342373892_u32
  MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 1879113728_u32
  MIXERCONTROL_CONTROLTYPE_MUX = 1879113729_u32
  MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 1895890944_u32
  MIXERCONTROL_CONTROLTYPE_MIXER = 1895890945_u32
  MIXERCONTROL_CONTROLTYPE_MICROTIME = 1610809344_u32
  MIXERCONTROL_CONTROLTYPE_MILLITIME = 1627586560_u32
  WAVE_MAPPER = 4294967295_u32
  ENDPOINT_FORMAT_RESET_MIX_ONLY = 1_u32
  ENDPOINT_HARDWARE_SUPPORT_VOLUME = 1_u32
  ENDPOINT_HARDWARE_SUPPORT_MUTE = 2_u32
  ENDPOINT_HARDWARE_SUPPORT_METER = 4_u32
  AUDIOCLOCK_CHARACTERISTIC_FIXED_FREQ = 1_u32
  AMBISONICS_PARAM_VERSION_1 = 1_u32
  AUDCLNT_E_NOT_INITIALIZED = -2004287487_i32
  AUDCLNT_E_ALREADY_INITIALIZED = -2004287486_i32
  AUDCLNT_E_WRONG_ENDPOINT_TYPE = -2004287485_i32
  AUDCLNT_E_DEVICE_INVALIDATED = -2004287484_i32
  AUDCLNT_E_NOT_STOPPED = -2004287483_i32
  AUDCLNT_E_BUFFER_TOO_LARGE = -2004287482_i32
  AUDCLNT_E_OUT_OF_ORDER = -2004287481_i32
  AUDCLNT_E_UNSUPPORTED_FORMAT = -2004287480_i32
  AUDCLNT_E_INVALID_SIZE = -2004287479_i32
  AUDCLNT_E_DEVICE_IN_USE = -2004287478_i32
  AUDCLNT_E_BUFFER_OPERATION_PENDING = -2004287477_i32
  AUDCLNT_E_THREAD_NOT_REGISTERED = -2004287476_i32
  AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED = -2004287474_i32
  AUDCLNT_E_ENDPOINT_CREATE_FAILED = -2004287473_i32
  AUDCLNT_E_SERVICE_NOT_RUNNING = -2004287472_i32
  AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED = -2004287471_i32
  AUDCLNT_E_EXCLUSIVE_MODE_ONLY = -2004287470_i32
  AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL = -2004287469_i32
  AUDCLNT_E_EVENTHANDLE_NOT_SET = -2004287468_i32
  AUDCLNT_E_INCORRECT_BUFFER_SIZE = -2004287467_i32
  AUDCLNT_E_BUFFER_SIZE_ERROR = -2004287466_i32
  AUDCLNT_E_CPUUSAGE_EXCEEDED = -2004287465_i32
  AUDCLNT_E_BUFFER_ERROR = -2004287464_i32
  AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED = -2004287463_i32
  AUDCLNT_E_INVALID_DEVICE_PERIOD = -2004287456_i32
  AUDCLNT_E_INVALID_STREAM_FLAG = -2004287455_i32
  AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE = -2004287454_i32
  AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES = -2004287453_i32
  AUDCLNT_E_OFFLOAD_MODE_ONLY = -2004287452_i32
  AUDCLNT_E_NONOFFLOAD_MODE_ONLY = -2004287451_i32
  AUDCLNT_E_RESOURCES_INVALIDATED = -2004287450_i32
  AUDCLNT_E_RAW_MODE_UNSUPPORTED = -2004287449_i32
  AUDCLNT_E_ENGINE_PERIODICITY_LOCKED = -2004287448_i32
  AUDCLNT_E_ENGINE_FORMAT_LOCKED = -2004287447_i32
  AUDCLNT_E_HEADTRACKING_ENABLED = -2004287440_i32
  AUDCLNT_E_HEADTRACKING_UNSUPPORTED = -2004287424_i32
  AUDCLNT_E_EFFECT_NOT_AVAILABLE = -2004287423_i32
  AUDCLNT_E_EFFECT_STATE_READ_ONLY = -2004287422_i32
  AUDCLNT_S_BUFFER_EMPTY = 143196161_i32
  AUDCLNT_S_THREAD_ALREADY_REGISTERED = 143196162_i32
  AUDCLNT_S_POSITION_STALLED = 143196163_i32
  AUDCLNT_STREAMFLAGS_CROSSPROCESS = 65536_u32
  AUDCLNT_STREAMFLAGS_LOOPBACK = 131072_u32
  AUDCLNT_STREAMFLAGS_EVENTCALLBACK = 262144_u32
  AUDCLNT_STREAMFLAGS_NOPERSIST = 524288_u32
  AUDCLNT_STREAMFLAGS_RATEADJUST = 1048576_u32
  AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY = 134217728_u32
  AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM = 2147483648_u32
  AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED = 268435456_u32
  AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE = 536870912_u32
  AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED = 1073741824_u32
  SPTLAUDCLNT_E_DESTROYED = -2004287232_i32
  SPTLAUDCLNT_E_OUT_OF_ORDER = -2004287231_i32
  SPTLAUDCLNT_E_RESOURCES_INVALIDATED = -2004287230_i32
  SPTLAUDCLNT_E_NO_MORE_OBJECTS = -2004287229_i32
  SPTLAUDCLNT_E_PROPERTY_NOT_SUPPORTED = -2004287228_i32
  SPTLAUDCLNT_E_ERRORS_IN_OBJECT_CALLS = -2004287227_i32
  SPTLAUDCLNT_E_METADATA_FORMAT_NOT_SUPPORTED = -2004287226_i32
  SPTLAUDCLNT_E_STREAM_NOT_AVAILABLE = -2004287225_i32
  SPTLAUDCLNT_E_INVALID_LICENSE = -2004287224_i32
  SPTLAUDCLNT_E_STREAM_NOT_STOPPED = -2004287222_i32
  SPTLAUDCLNT_E_STATIC_OBJECT_NOT_AVAILABLE = -2004287221_i32
  SPTLAUDCLNT_E_OBJECT_ALREADY_ACTIVE = -2004287220_i32
  SPTLAUDCLNT_E_INTERNAL = -2004287219_i32
  DEVICE_STATE_ACTIVE = 1_u32
  DEVICE_STATE_DISABLED = 2_u32
  DEVICE_STATE_NOTPRESENT = 4_u32
  DEVICE_STATE_UNPLUGGED = 8_u32
  DEVICE_STATEMASK_ALL = 15_u32
  PKEY_AudioEndpoint_FormFactor = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 0_u32)
  PKEY_AudioEndpoint_ControlPanelPageProvider = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 1_u32)
  PKEY_AudioEndpoint_Association = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 2_u32)
  PKEY_AudioEndpoint_PhysicalSpeakers = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 3_u32)
  PKEY_AudioEndpoint_GUID = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 4_u32)
  PKEY_AudioEndpoint_Disable_SysFx = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 5_u32)
  ENDPOINT_SYSFX_ENABLED = 0_u32
  ENDPOINT_SYSFX_DISABLED = 1_u32
  PKEY_AudioEndpoint_FullRangeSpeakers = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 6_u32)
  PKEY_AudioEndpoint_Supports_EventDriven_Mode = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 7_u32)
  PKEY_AudioEndpoint_JackSubType = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 8_u32)
  PKEY_AudioEndpoint_Default_VolumeInDb = PROPERTYKEY.new(LibC::GUID.new(0x1da5d803_u32, 0xd492_u16, 0x4edd_u16, StaticArray[0x8c_u8, 0x23_u8, 0xe0_u8, 0xc0_u8, 0xff_u8, 0xee_u8, 0x7f_u8, 0xe_u8]), 9_u32)
  PKEY_AudioEngine_DeviceFormat = PROPERTYKEY.new(LibC::GUID.new(0xf19f064d_u32, 0x82c_u16, 0x4e27_u16, StaticArray[0xbc_u8, 0x73_u8, 0x68_u8, 0x82_u8, 0xa1_u8, 0xbb_u8, 0x8e_u8, 0x4c_u8]), 0_u32)
  PKEY_AudioEngine_OEMFormat = PROPERTYKEY.new(LibC::GUID.new(0xe4870e26_u32, 0x3cc5_u16, 0x4cd2_u16, StaticArray[0xba_u8, 0x46_u8, 0xca_u8, 0xa_u8, 0x9a_u8, 0x70_u8, 0xed_u8, 0x4_u8]), 3_u32)
  PKEY_AudioEndpointLogo_IconEffects = PROPERTYKEY.new(LibC::GUID.new(0xf1ab780d_u32, 0x2010_u16, 0x4ed3_u16, StaticArray[0xa3_u8, 0xa6_u8, 0x8b_u8, 0x87_u8, 0xf0_u8, 0xf0_u8, 0xc4_u8, 0x76_u8]), 0_u32)
  PKEY_AudioEndpointLogo_IconPath = PROPERTYKEY.new(LibC::GUID.new(0xf1ab780d_u32, 0x2010_u16, 0x4ed3_u16, StaticArray[0xa3_u8, 0xa6_u8, 0x8b_u8, 0x87_u8, 0xf0_u8, 0xf0_u8, 0xc4_u8, 0x76_u8]), 1_u32)
  PKEY_AudioEndpointSettings_MenuText = PROPERTYKEY.new(LibC::GUID.new(0x14242002_u32, 0x320_u16, 0x4de4_u16, StaticArray[0x95_u8, 0x55_u8, 0xa7_u8, 0xd8_u8, 0x2b_u8, 0x73_u8, 0xc2_u8, 0x86_u8]), 0_u32)
  PKEY_AudioEndpointSettings_LaunchContract = PROPERTYKEY.new(LibC::GUID.new(0x14242002_u32, 0x320_u16, 0x4de4_u16, StaticArray[0x95_u8, 0x55_u8, 0xa7_u8, 0xd8_u8, 0x2b_u8, 0x73_u8, 0xc2_u8, 0x86_u8]), 1_u32)
  DEVINTERFACE_AUDIO_RENDER = "e6327cad-dcec-4949-ae8a-991e976a79d2"
  DEVINTERFACE_AUDIO_CAPTURE = "2eef81be-33fa-4800-9670-1cd474972c3f"
  DEVINTERFACE_MIDI_OUTPUT = "6dc23320-ab33-4ce4-80d4-bbb3ebbf2814"
  DEVINTERFACE_MIDI_INPUT = "504be32c-ccf6-4d2c-b73f-6f8b3747e22b"
  EVENTCONTEXT_VOLUMESLIDER = "e2c2e9de-09b1-4b04-84e5-07931225ee04"
  SPATIAL_AUDIO_STANDARD_COMMANDS_START = 200_u32
  SPATIAL_AUDIO_POSITION = 200_u32
  SPTLAUD_MD_CLNT_E_COMMAND_NOT_FOUND = -2004286976_i32
  SPTLAUD_MD_CLNT_E_OBJECT_NOT_INITIALIZED = -2004286975_i32
  SPTLAUD_MD_CLNT_E_INVALID_ARGS = -2004286974_i32
  SPTLAUD_MD_CLNT_E_METADATA_FORMAT_NOT_FOUND = -2004286973_i32
  SPTLAUD_MD_CLNT_E_VALUE_BUFFER_INCORRECT_SIZE = -2004286972_i32
  SPTLAUD_MD_CLNT_E_MEMORY_BOUNDS = -2004286971_i32
  SPTLAUD_MD_CLNT_E_NO_MORE_COMMANDS = -2004286970_i32
  SPTLAUD_MD_CLNT_E_BUFFER_ALREADY_ATTACHED = -2004286969_i32
  SPTLAUD_MD_CLNT_E_BUFFER_NOT_ATTACHED = -2004286968_i32
  SPTLAUD_MD_CLNT_E_FRAMECOUNT_OUT_OF_RANGE = -2004286967_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMS_FOUND = -2004286960_i32
  SPTLAUD_MD_CLNT_E_ITEM_COPY_OVERFLOW = -2004286959_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMS_OPEN = -2004286958_i32
  SPTLAUD_MD_CLNT_E_ITEMS_ALREADY_OPEN = -2004286957_i32
  SPTLAUD_MD_CLNT_E_ATTACH_FAILED_INTERNAL_BUFFER = -2004286956_i32
  SPTLAUD_MD_CLNT_E_DETACH_FAILED_INTERNAL_BUFFER = -2004286955_i32
  SPTLAUD_MD_CLNT_E_NO_BUFFER_ATTACHED = -2004286954_i32
  SPTLAUD_MD_CLNT_E_NO_MORE_ITEMS = -2004286953_i32
  SPTLAUD_MD_CLNT_E_FRAMEOFFSET_OUT_OF_RANGE = -2004286952_i32
  SPTLAUD_MD_CLNT_E_ITEM_MUST_HAVE_COMMANDS = -2004286951_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMOFFSET_WRITTEN = -2004286944_i32
  SPTLAUD_MD_CLNT_E_NO_ITEMS_WRITTEN = -2004286943_i32
  SPTLAUD_MD_CLNT_E_COMMAND_ALREADY_WRITTEN = -2004286942_i32
  SPTLAUD_MD_CLNT_E_FORMAT_MISMATCH = -2004286941_i32
  SPTLAUD_MD_CLNT_E_BUFFER_STILL_ATTACHED = -2004286940_i32
  SPTLAUD_MD_CLNT_E_ITEMS_LOCKED_FOR_WRITING = -2004286939_i32
  WAVERR_BADFORMAT = 32_u32
  WAVERR_STILLPLAYING = 33_u32
  WAVERR_UNPREPARED = 34_u32
  WAVERR_SYNC = 35_u32
  WAVERR_LASTERROR = 35_u32
  WHDR_DONE = 1_u32
  WHDR_PREPARED = 2_u32
  WHDR_BEGINLOOP = 4_u32
  WHDR_ENDLOOP = 8_u32
  WHDR_INQUEUE = 16_u32
  WAVECAPS_PITCH = 1_u32
  WAVECAPS_PLAYBACKRATE = 2_u32
  WAVECAPS_VOLUME = 4_u32
  WAVECAPS_LRVOLUME = 8_u32
  WAVECAPS_SYNC = 16_u32
  WAVECAPS_SAMPLEACCURATE = 32_u32
  WAVE_INVALIDFORMAT = 0_u32
  WAVE_FORMAT_1M08 = 1_u32
  WAVE_FORMAT_1S08 = 2_u32
  WAVE_FORMAT_1M16 = 4_u32
  WAVE_FORMAT_1S16 = 8_u32
  WAVE_FORMAT_2M08 = 16_u32
  WAVE_FORMAT_2S08 = 32_u32
  WAVE_FORMAT_2M16 = 64_u32
  WAVE_FORMAT_2S16 = 128_u32
  WAVE_FORMAT_4M08 = 256_u32
  WAVE_FORMAT_4S08 = 512_u32
  WAVE_FORMAT_4M16 = 1024_u32
  WAVE_FORMAT_4S16 = 2048_u32
  WAVE_FORMAT_44M08 = 256_u32
  WAVE_FORMAT_44S08 = 512_u32
  WAVE_FORMAT_44M16 = 1024_u32
  WAVE_FORMAT_44S16 = 2048_u32
  WAVE_FORMAT_48M08 = 4096_u32
  WAVE_FORMAT_48S08 = 8192_u32
  WAVE_FORMAT_48M16 = 16384_u32
  WAVE_FORMAT_48S16 = 32768_u32
  WAVE_FORMAT_96M08 = 65536_u32
  WAVE_FORMAT_96S08 = 131072_u32
  WAVE_FORMAT_96M16 = 262144_u32
  WAVE_FORMAT_96S16 = 524288_u32
  WAVE_FORMAT_PCM = 1_u32
  MIDIERR_UNPREPARED = 64_u32
  MIDIERR_STILLPLAYING = 65_u32
  MIDIERR_NOMAP = 66_u32
  MIDIERR_NOTREADY = 67_u32
  MIDIERR_NODEVICE = 68_u32
  MIDIERR_INVALIDSETUP = 69_u32
  MIDIERR_BADOPENMODE = 70_u32
  MIDIERR_DONT_CONTINUE = 71_u32
  MIDIERR_LASTERROR = 71_u32
  MIDIPATCHSIZE = 128_u32
  MIDI_CACHE_ALL = 1_u32
  MIDI_CACHE_BESTFIT = 2_u32
  MIDI_CACHE_QUERY = 3_u32
  MIDI_UNCACHE = 4_u32
  MOD_MIDIPORT = 1_u32
  MOD_SYNTH = 2_u32
  MOD_SQSYNTH = 3_u32
  MOD_FMSYNTH = 4_u32
  MOD_MAPPER = 5_u32
  MOD_WAVETABLE = 6_u32
  MOD_SWSYNTH = 7_u32
  MIDICAPS_VOLUME = 1_u32
  MIDICAPS_LRVOLUME = 2_u32
  MIDICAPS_CACHE = 4_u32
  MIDICAPS_STREAM = 8_u32
  MHDR_DONE = 1_u32
  MHDR_PREPARED = 2_u32
  MHDR_INQUEUE = 4_u32
  MHDR_ISSTRM = 8_u32
  MEVT_F_SHORT = 0_i32
  MEVT_F_LONG = -2147483648_i32
  MEVT_F_CALLBACK = 1073741824_i32
  MIDISTRM_ERROR = -2_i32
  MIDIPROP_SET = -2147483648_i32
  MIDIPROP_GET = 1073741824_i32
  MIDIPROP_TIMEDIV = 1_i32
  MIDIPROP_TEMPO = 2_i32
  AUXCAPS_CDAUDIO = 1_u32
  AUXCAPS_AUXIN = 2_u32
  AUXCAPS_VOLUME = 1_u32
  AUXCAPS_LRVOLUME = 2_u32
  MIXER_SHORT_NAME_CHARS = 16_u32
  MIXER_LONG_NAME_CHARS = 64_u32
  MIXERR_INVALLINE = 1024_u32
  MIXERR_INVALCONTROL = 1025_u32
  MIXERR_INVALVALUE = 1026_u32
  MIXERR_LASTERROR = 1026_u32
  MIXER_OBJECTF_HANDLE = -2147483648_i32
  MIXER_OBJECTF_MIXER = 0_i32
  MIXER_OBJECTF_WAVEOUT = 268435456_i32
  MIXER_OBJECTF_WAVEIN = 536870912_i32
  MIXER_OBJECTF_MIDIOUT = 805306368_i32
  MIXER_OBJECTF_MIDIIN = 1073741824_i32
  MIXER_OBJECTF_AUX = 1342177280_i32
  MIXERLINE_LINEF_ACTIVE = 1_i32
  MIXERLINE_LINEF_DISCONNECTED = 32768_i32
  MIXERLINE_LINEF_SOURCE = -2147483648_i32
  MIXERLINE_COMPONENTTYPE_DST_FIRST = 0_i32
  MIXERLINE_COMPONENTTYPE_DST_LAST = 8_u32
  MIXERLINE_COMPONENTTYPE_SRC_FIRST = 4096_i32
  MIXERLINE_COMPONENTTYPE_SRC_LAST = 4106_u32
  MIXERLINE_TARGETTYPE_UNDEFINED = 0_u32
  MIXERLINE_TARGETTYPE_WAVEOUT = 1_u32
  MIXERLINE_TARGETTYPE_WAVEIN = 2_u32
  MIXERLINE_TARGETTYPE_MIDIOUT = 3_u32
  MIXERLINE_TARGETTYPE_MIDIIN = 4_u32
  MIXERLINE_TARGETTYPE_AUX = 5_u32
  MIXER_GETLINEINFOF_DESTINATION = 0_i32
  MIXER_GETLINEINFOF_SOURCE = 1_i32
  MIXER_GETLINEINFOF_LINEID = 2_i32
  MIXER_GETLINEINFOF_COMPONENTTYPE = 3_i32
  MIXER_GETLINEINFOF_TARGETTYPE = 4_i32
  MIXER_GETLINEINFOF_QUERYMASK = 15_i32
  MIXERCONTROL_CONTROLF_UNIFORM = 1_i32
  MIXERCONTROL_CONTROLF_MULTIPLE = 2_i32
  MIXERCONTROL_CONTROLF_DISABLED = -2147483648_i32
  MIXERCONTROL_CT_CLASS_MASK = -268435456_i32
  MIXERCONTROL_CT_CLASS_CUSTOM = 0_i32
  MIXERCONTROL_CT_CLASS_METER = 268435456_i32
  MIXERCONTROL_CT_CLASS_SWITCH = 536870912_i32
  MIXERCONTROL_CT_CLASS_NUMBER = 805306368_i32
  MIXERCONTROL_CT_CLASS_SLIDER = 1073741824_i32
  MIXERCONTROL_CT_CLASS_FADER = 1342177280_i32
  MIXERCONTROL_CT_CLASS_TIME = 1610612736_i32
  MIXERCONTROL_CT_CLASS_LIST = 1879048192_i32
  MIXERCONTROL_CT_SUBCLASS_MASK = 251658240_i32
  MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0_i32
  MIXERCONTROL_CT_SC_SWITCH_BUTTON = 16777216_i32
  MIXERCONTROL_CT_SC_METER_POLLED = 0_i32
  MIXERCONTROL_CT_SC_TIME_MICROSECS = 0_i32
  MIXERCONTROL_CT_SC_TIME_MILLISECS = 16777216_i32
  MIXERCONTROL_CT_SC_LIST_SINGLE = 0_i32
  MIXERCONTROL_CT_SC_LIST_MULTIPLE = 16777216_i32
  MIXERCONTROL_CT_UNITS_MASK = 16711680_i32
  MIXERCONTROL_CT_UNITS_CUSTOM = 0_i32
  MIXERCONTROL_CT_UNITS_BOOLEAN = 65536_i32
  MIXERCONTROL_CT_UNITS_SIGNED = 131072_i32
  MIXERCONTROL_CT_UNITS_UNSIGNED = 196608_i32
  MIXERCONTROL_CT_UNITS_DECIBELS = 262144_i32
  MIXERCONTROL_CT_UNITS_PERCENT = 327680_i32
  MIXER_GETLINECONTROLSF_ALL = 0_i32
  MIXER_GETLINECONTROLSF_ONEBYID = 1_i32
  MIXER_GETLINECONTROLSF_ONEBYTYPE = 2_i32
  MIXER_GETLINECONTROLSF_QUERYMASK = 15_i32
  MIXER_GETCONTROLDETAILSF_VALUE = 0_i32
  MIXER_GETCONTROLDETAILSF_LISTTEXT = 1_i32
  MIXER_GETCONTROLDETAILSF_QUERYMASK = 15_i32
  MIXER_SETCONTROLDETAILSF_VALUE = 0_i32
  MIXER_SETCONTROLDETAILSF_CUSTOM = 1_i32
  MIXER_SETCONTROLDETAILSF_QUERYMASK = 15_i32
  DRV_MAPPER_PREFERRED_INPUT_GET = 16384_u32
  DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386_u32
  DRVM_MAPPER = 8192_u32
  DRVM_MAPPER_STATUS = 8192_u32
  WIDM_MAPPER_STATUS = 8192_u32
  WAVEIN_MAPPER_STATUS_DEVICE = 0_u32
  WAVEIN_MAPPER_STATUS_MAPPED = 1_u32
  WAVEIN_MAPPER_STATUS_FORMAT = 2_u32
  WODM_MAPPER_STATUS = 8192_u32
  WAVEOUT_MAPPER_STATUS_DEVICE = 0_u32
  WAVEOUT_MAPPER_STATUS_MAPPED = 1_u32
  WAVEOUT_MAPPER_STATUS_FORMAT = 2_u32
  ACMERR_BASE = 512_u32
  ACMERR_NOTPOSSIBLE = 512_u32
  ACMERR_BUSY = 513_u32
  ACMERR_UNPREPARED = 514_u32
  ACMERR_CANCELED = 515_u32
  ACM_METRIC_COUNT_DRIVERS = 1_u32
  ACM_METRIC_COUNT_CODECS = 2_u32
  ACM_METRIC_COUNT_CONVERTERS = 3_u32
  ACM_METRIC_COUNT_FILTERS = 4_u32
  ACM_METRIC_COUNT_DISABLED = 5_u32
  ACM_METRIC_COUNT_HARDWARE = 6_u32
  ACM_METRIC_COUNT_LOCAL_DRIVERS = 20_u32
  ACM_METRIC_COUNT_LOCAL_CODECS = 21_u32
  ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22_u32
  ACM_METRIC_COUNT_LOCAL_FILTERS = 23_u32
  ACM_METRIC_COUNT_LOCAL_DISABLED = 24_u32
  ACM_METRIC_HARDWARE_WAVE_INPUT = 30_u32
  ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31_u32
  ACM_METRIC_MAX_SIZE_FORMAT = 50_u32
  ACM_METRIC_MAX_SIZE_FILTER = 51_u32
  ACM_METRIC_DRIVER_SUPPORT = 100_u32
  ACM_METRIC_DRIVER_PRIORITY = 101_u32
  ACM_DRIVERENUMF_NOLOCAL = 1073741824_i32
  ACM_DRIVERENUMF_DISABLED = -2147483648_i32
  ACM_DRIVERADDF_NAME = 1_i32
  ACM_DRIVERADDF_FUNCTION = 3_i32
  ACM_DRIVERADDF_NOTIFYHWND = 4_i32
  ACM_DRIVERADDF_TYPEMASK = 7_i32
  ACM_DRIVERADDF_LOCAL = 0_i32
  ACM_DRIVERADDF_GLOBAL = 8_i32
  ACMDM_USER = 16384_u32
  ACMDM_RESERVED_LOW = 24576_u32
  ACMDM_RESERVED_HIGH = 28671_u32
  ACMDM_DRIVER_ABOUT = 24587_u32
  ACM_DRIVERPRIORITYF_ENABLE = 1_i32
  ACM_DRIVERPRIORITYF_DISABLE = 2_i32
  ACM_DRIVERPRIORITYF_ABLEMASK = 3_i32
  ACM_DRIVERPRIORITYF_BEGIN = 65536_i32
  ACM_DRIVERPRIORITYF_END = 131072_i32
  ACM_DRIVERPRIORITYF_DEFERMASK = 196608_i32
  ACMDRIVERDETAILS_SHORTNAME_CHARS = 32_u32
  ACMDRIVERDETAILS_LONGNAME_CHARS = 128_u32
  ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80_u32
  ACMDRIVERDETAILS_LICENSING_CHARS = 128_u32
  ACMDRIVERDETAILS_FEATURES_CHARS = 512_u32
  ACMDRIVERDETAILS_SUPPORTF_CODEC = 1_i32
  ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2_i32
  ACMDRIVERDETAILS_SUPPORTF_FILTER = 4_i32
  ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8_i32
  ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16_i32
  ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824_i32
  ACMDRIVERDETAILS_SUPPORTF_DISABLED = -2147483648_i32
  ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48_u32
  ACM_FORMATTAGDETAILSF_INDEX = 0_i32
  ACM_FORMATTAGDETAILSF_FORMATTAG = 1_i32
  ACM_FORMATTAGDETAILSF_LARGESTSIZE = 2_i32
  ACM_FORMATTAGDETAILSF_QUERYMASK = 15_i32
  ACMFORMATDETAILS_FORMAT_CHARS = 128_u32
  ACM_FORMATDETAILSF_INDEX = 0_i32
  ACM_FORMATDETAILSF_FORMAT = 1_i32
  ACM_FORMATDETAILSF_QUERYMASK = 15_i32
  ACM_FORMATENUMF_WFORMATTAG = 65536_i32
  ACM_FORMATENUMF_NCHANNELS = 131072_i32
  ACM_FORMATENUMF_NSAMPLESPERSEC = 262144_i32
  ACM_FORMATENUMF_WBITSPERSAMPLE = 524288_i32
  ACM_FORMATENUMF_CONVERT = 1048576_i32
  ACM_FORMATENUMF_SUGGEST = 2097152_i32
  ACM_FORMATENUMF_HARDWARE = 4194304_i32
  ACM_FORMATENUMF_INPUT = 8388608_i32
  ACM_FORMATENUMF_OUTPUT = 16777216_i32
  ACM_FORMATSUGGESTF_WFORMATTAG = 65536_i32
  ACM_FORMATSUGGESTF_NCHANNELS = 131072_i32
  ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 262144_i32
  ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 524288_i32
  ACM_FORMATSUGGESTF_TYPEMASK = 16711680_i32
  MM_ACM_FORMATCHOOSE = 32768_u32
  FORMATCHOOSE_MESSAGE = 0_u32
  FORMATCHOOSE_FORMATTAG_VERIFY = 0_u32
  FORMATCHOOSE_FORMAT_VERIFY = 1_u32
  FORMATCHOOSE_CUSTOM_VERIFY = 2_u32
  ACMFORMATCHOOSE_STYLEF_SHOWHELP = 4_i32
  ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 8_i32
  ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 16_i32
  ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32_i32
  ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 64_i32
  ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 128_i32
  ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48_u32
  ACM_FILTERTAGDETAILSF_INDEX = 0_i32
  ACM_FILTERTAGDETAILSF_FILTERTAG = 1_i32
  ACM_FILTERTAGDETAILSF_LARGESTSIZE = 2_i32
  ACM_FILTERTAGDETAILSF_QUERYMASK = 15_i32
  ACMFILTERDETAILS_FILTER_CHARS = 128_u32
  ACM_FILTERDETAILSF_INDEX = 0_i32
  ACM_FILTERDETAILSF_FILTER = 1_i32
  ACM_FILTERDETAILSF_QUERYMASK = 15_i32
  ACM_FILTERENUMF_DWFILTERTAG = 65536_i32
  MM_ACM_FILTERCHOOSE = 32768_u32
  FILTERCHOOSE_MESSAGE = 0_u32
  FILTERCHOOSE_FILTERTAG_VERIFY = 0_u32
  FILTERCHOOSE_FILTER_VERIFY = 1_u32
  FILTERCHOOSE_CUSTOM_VERIFY = 2_u32
  ACMFILTERCHOOSE_STYLEF_SHOWHELP = 4_i32
  ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 8_i32
  ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 16_i32
  ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32_i32
  ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 64_i32
  ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 128_i32
  ACMSTREAMHEADER_STATUSF_DONE = 65536_i32
  ACMSTREAMHEADER_STATUSF_PREPARED = 131072_i32
  ACMSTREAMHEADER_STATUSF_INQUEUE = 1048576_i32
  ACM_STREAMOPENF_QUERY = 1_u32
  ACM_STREAMOPENF_ASYNC = 2_u32
  ACM_STREAMOPENF_NONREALTIME = 4_u32
  ACM_STREAMSIZEF_SOURCE = 0_i32
  ACM_STREAMSIZEF_DESTINATION = 1_i32
  ACM_STREAMSIZEF_QUERYMASK = 15_i32
  ACM_STREAMCONVERTF_BLOCKALIGN = 4_u32
  ACM_STREAMCONVERTF_START = 16_u32
  ACM_STREAMCONVERTF_END = 32_u32
  SND_SYNC = 0_u32
  SND_ASYNC = 1_u32
  SND_NODEFAULT = 2_u32
  SND_MEMORY = 4_u32
  SND_LOOP = 8_u32
  SND_NOSTOP = 16_u32
  SND_NOWAIT = 8192_i32
  SND_ALIAS = 65536_i32
  SND_ALIAS_ID = 1114112_i32
  SND_FILENAME = 131072_i32
  SND_RESOURCE = 262148_i32
  SND_PURGE = 64_u32
  SND_APPLICATION = 128_u32
  SND_SENTRY = 524288_i32
  SND_RING = 1048576_i32
  SND_SYSTEM = 2097152_i32
  SND_ALIAS_START = 0_u32
  ACMDM_DRIVER_NOTIFY = 24577_u32
  ACMDM_DRIVER_DETAILS = 24586_u32
  ACMDM_HARDWARE_WAVE_CAPS_INPUT = 24596_u32
  ACMDM_HARDWARE_WAVE_CAPS_OUTPUT = 24597_u32
  ACMDM_FORMATTAG_DETAILS = 24601_u32
  ACMDM_FORMAT_DETAILS = 24602_u32
  ACMDM_FORMAT_SUGGEST = 24603_u32
  ACMDM_FILTERTAG_DETAILS = 24626_u32
  ACMDM_FILTER_DETAILS = 24627_u32
  ACMDM_STREAM_OPEN = 24652_u32
  ACMDM_STREAM_CLOSE = 24653_u32
  ACMDM_STREAM_SIZE = 24654_u32
  ACMDM_STREAM_CONVERT = 24655_u32
  ACMDM_STREAM_RESET = 24656_u32
  ACMDM_STREAM_PREPARE = 24657_u32
  ACMDM_STREAM_UNPREPARE = 24658_u32
  ACMDM_STREAM_UPDATE = 24659_u32
  MMDeviceEnumerator = LibC::GUID.new(0xbcde0395_u32, 0xe52f_u16, 0x467c_u16, StaticArray[0x8e_u8, 0x3d_u8, 0xc4_u8, 0x57_u8, 0x92_u8, 0x91_u8, 0x69_u8, 0x2e_u8])
  DeviceTopology = LibC::GUID.new(0x1df639d0_u32, 0x5ec1_u16, 0x47aa_u16, StaticArray[0x93_u8, 0x79_u8, 0x82_u8, 0x8d_u8, 0xc1_u8, 0xaa_u8, 0x8c_u8, 0x59_u8])

  alias LPWAVECALLBACK = Proc(HDRVR, UInt32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, Void)
  alias LPMIDICALLBACK = Proc(HDRVR, UInt32, LibC::UINT_PTR, LibC::UINT_PTR, LibC::UINT_PTR, Void)
  alias PAudioStateMonitorCallback = Proc(IAudioStateMonitor, Void*, Void)
  alias ACMDRIVERENUMCB = Proc(HACMDRIVERID, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias LPACMDRIVERPROC = Proc(LibC::UINT_PTR, HACMDRIVERID, UInt32, LPARAM, LPARAM, LRESULT)
  alias ACMFORMATTAGENUMCBA = Proc(HACMDRIVERID, ACMFORMATTAGDETAILSA*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFORMATTAGENUMCBW = Proc(HACMDRIVERID, ACMFORMATTAGDETAILSW*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFORMATENUMCBA = Proc(HACMDRIVERID, ACMFORMATDETAILSA*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFORMATENUMCBW = Proc(HACMDRIVERID, Tacmformatdetailsw*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFORMATCHOOSEHOOKPROCA = Proc(LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, UInt32)
  alias ACMFORMATCHOOSEHOOKPROCW = Proc(LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, UInt32)
  alias ACMFILTERTAGENUMCBA = Proc(HACMDRIVERID, ACMFILTERTAGDETAILSA*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFILTERTAGENUMCBW = Proc(HACMDRIVERID, ACMFILTERTAGDETAILSW*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFILTERENUMCBA = Proc(HACMDRIVERID, ACMFILTERDETAILSA*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFILTERENUMCBW = Proc(HACMDRIVERID, ACMFILTERDETAILSW*, LibC::UINT_PTR, UInt32, LibC::BOOL)
  alias ACMFILTERCHOOSEHOOKPROCA = Proc(LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, UInt32)
  alias ACMFILTERCHOOSEHOOKPROCW = Proc(LibC::HANDLE, UInt32, LibC::UINT_PTR, LPARAM, UInt32)


  enum MIDI_WAVE_OPEN_TYPE : UInt32
    CALLBACK_TYPEMASK = 458752
    CALLBACK_NULL = 0
    CALLBACK_WINDOW = 65536
    CALLBACK_TASK = 131072
    CALLBACK_FUNCTION = 196608
    CALLBACK_THREAD = 131072
    CALLBACK_EVENT = 327680
    WAVE_FORMAT_QUERY = 1
    WAVE_ALLOWSYNC = 2
    WAVE_MAPPED = 4
    WAVE_FORMAT_DIRECT = 8
    WAVE_FORMAT_DIRECT_QUERY = 9
    WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 16
    MIDI_IO_STATUS = 32
  end

  enum MIXERLINE_COMPONENTTYPE : UInt32
    MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 1
    MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 5
    MIXERLINE_COMPONENTTYPE_DST_LINE = 2
    MIXERLINE_COMPONENTTYPE_DST_MONITOR = 3
    MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 4
    MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 6
    MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0
    MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 8
    MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 7
    MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 4106
    MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 4105
    MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 4101
    MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 4097
    MIXERLINE_COMPONENTTYPE_SRC_LINE = 4098
    MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 4099
    MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 4103
    MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 4100
    MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 4102
    MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 4096
    MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 4104
  end

  enum AUDCLNT_SHAREMODE : Int32
    AUDCLNT_SHAREMODE_SHARED = 0
    AUDCLNT_SHAREMODE_EXCLUSIVE = 1
  end

  enum AUDIO_STREAM_CATEGORY : Int32
    AudioCategory_Other = 0
    AudioCategory_ForegroundOnlyMedia = 1
    AudioCategory_Communications = 3
    AudioCategory_Alerts = 4
    AudioCategory_SoundEffects = 5
    AudioCategory_GameEffects = 6
    AudioCategory_GameMedia = 7
    AudioCategory_GameChat = 8
    AudioCategory_Speech = 9
    AudioCategory_Movie = 10
    AudioCategory_Media = 11
    AudioCategory_FarFieldSpeech = 12
    AudioCategory_UniformSpeech = 13
    AudioCategory_VoiceTyping = 14
  end

  enum AudioSessionState : Int32
    AudioSessionStateInactive = 0
    AudioSessionStateActive = 1
    AudioSessionStateExpired = 2
  end

  enum AUDCLNT_BUFFERFLAGS : Int32
    AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = 1
    AUDCLNT_BUFFERFLAGS_SILENT = 2
    AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = 4
  end

  enum AUDCLNT_STREAMOPTIONS : UInt32
    AUDCLNT_STREAMOPTIONS_NONE = 0
    AUDCLNT_STREAMOPTIONS_RAW = 1
    AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = 2
    AUDCLNT_STREAMOPTIONS_AMBISONICS = 4
  end

  enum AUDIO_DUCKING_OPTIONS : UInt32
    AUDIO_DUCKING_OPTIONS_DEFAULT = 0
    AUDIO_DUCKING_OPTIONS_DO_NOT_DUCK_OTHER_STREAMS = 1
  end

  enum AUDIO_EFFECT_STATE : Int32
    AUDIO_EFFECT_STATE_OFF = 0
    AUDIO_EFFECT_STATE_ON = 1
  end

  enum AMBISONICS_TYPE : Int32
    AMBISONICS_TYPE_FULL3D = 0
  end

  enum AMBISONICS_CHANNEL_ORDERING : Int32
    AMBISONICS_CHANNEL_ORDERING_ACN = 0
  end

  enum AMBISONICS_NORMALIZATION : Int32
    AMBISONICS_NORMALIZATION_SN3D = 0
    AMBISONICS_NORMALIZATION_N3D = 1
  end

  enum AudioObjectType : UInt32
    AudioObjectType_None = 0
    AudioObjectType_Dynamic = 1
    AudioObjectType_FrontLeft = 2
    AudioObjectType_FrontRight = 4
    AudioObjectType_FrontCenter = 8
    AudioObjectType_LowFrequency = 16
    AudioObjectType_SideLeft = 32
    AudioObjectType_SideRight = 64
    AudioObjectType_BackLeft = 128
    AudioObjectType_BackRight = 256
    AudioObjectType_TopFrontLeft = 512
    AudioObjectType_TopFrontRight = 1024
    AudioObjectType_TopBackLeft = 2048
    AudioObjectType_TopBackRight = 4096
    AudioObjectType_BottomFrontLeft = 8192
    AudioObjectType_BottomFrontRight = 16384
    AudioObjectType_BottomBackLeft = 32768
    AudioObjectType_BottomBackRight = 65536
    AudioObjectType_BackCenter = 131072
  end

  enum SPATIAL_AUDIO_STREAM_OPTIONS : UInt32
    SPATIAL_AUDIO_STREAM_OPTIONS_NONE = 0
    SPATIAL_AUDIO_STREAM_OPTIONS_OFFLOAD = 1
  end

  enum SpatialAudioHrtfDirectivityType : Int32
    SpatialAudioHrtfDirectivity_OmniDirectional = 0
    SpatialAudioHrtfDirectivity_Cardioid = 1
    SpatialAudioHrtfDirectivity_Cone = 2
  end

  enum SpatialAudioHrtfEnvironmentType : Int32
    SpatialAudioHrtfEnvironment_Small = 0
    SpatialAudioHrtfEnvironment_Medium = 1
    SpatialAudioHrtfEnvironment_Large = 2
    SpatialAudioHrtfEnvironment_Outdoors = 3
    SpatialAudioHrtfEnvironment_Average = 4
  end

  enum SpatialAudioHrtfDistanceDecayType : Int32
    SpatialAudioHrtfDistanceDecay_NaturalDecay = 0
    SpatialAudioHrtfDistanceDecay_CustomDecay = 1
  end

  enum EDataFlow : Int32
    Erender = 0
    Ecapture = 1
    Eall = 2
    EDataFlow_enum_count = 3
  end

  enum ERole : Int32
    Econsole = 0
    Emultimedia = 1
    Ecommunications = 2
    ERole_enum_count = 3
  end

  enum EndpointFormFactor : Int32
    RemoteNetworkDevice = 0
    Speakers = 1
    LineLevel = 2
    Headphones = 3
    Microphone = 4
    Headset = 5
    Handset = 6
    UnknownDigitalPassthrough = 7
    SPDIF = 8
    DigitalAudioDisplayDevice = 9
    UnknownFormFactor = 10
    EndpointFormFactor_enum_count = 11
  end

  enum MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002 : Int32
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2
    AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3
  end

  enum DataFlow : Int32
    In = 0
    Out = 1
  end

  enum PartType : Int32
    Connector = 0
    Subunit = 1
  end

  enum ConnectorType : Int32
    Unknown_Connector = 0
    Physical_Internal = 1
    Physical_External = 2
    Software_IO = 3
    Software_Fixed = 4
    Network = 5
  end

  enum AudioSessionDisconnectReason : Int32
    DisconnectReasonDeviceRemoval = 0
    DisconnectReasonServerShutdown = 1
    DisconnectReasonFormatChanged = 2
    DisconnectReasonSessionLogoff = 3
    DisconnectReasonSessionDisconnected = 4
    DisconnectReasonExclusiveModeOverride = 5
  end

  enum SpatialAudioMetadataWriterOverflowMode : Int32
    SpatialAudioMetadataWriterOverflow_Fail = 0
    SpatialAudioMetadataWriterOverflow_MergeWithNew = 1
    SpatialAudioMetadataWriterOverflow_MergeWithLast = 2
  end

  enum SpatialAudioMetadataCopyMode : Int32
    SpatialAudioMetadataCopy_Overwrite = 0
    SpatialAudioMetadataCopy_Append = 1
    SpatialAudioMetadataCopy_AppendMergeWithLast = 2
    SpatialAudioMetadataCopy_AppendMergeWithFirst = 3
  end

  enum PROCESS_LOOPBACK_MODE : Int32
    PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE = 0
    PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE = 1
  end

  enum AUDIOCLIENT_ACTIVATION_TYPE : Int32
    AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT = 0
    AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK = 1
  end

  enum AudioStateMonitorSoundLevel : Int32
    Muted = 0
    Low = 1
    Full = 2
  end

  union WAVEFORMATEXTENSIBLE_Samples_e__Union
    w_valid_bits_per_sample : UInt16
    w_samples_per_block : UInt16
    w_reserved : UInt16
  end
  union MIXERCONTROLA_Bounds_e__Union
    anonymous1 : MIXERCONTROLA_Bounds_e__Union_Anonymous1_e__Struct
    anonymous2 : MIXERCONTROLA_Bounds_e__Union_Anonymous2_e__Struct
    dw_reserved : UInt32[6]*
  end
  union MIXERCONTROLA_Metrics_e__Union
    c_steps : UInt32
    cb_custom_data : UInt32
    dw_reserved : UInt32[6]*
  end
  union MIXERCONTROLW_Bounds_e__Union
    anonymous1 : MIXERCONTROLW_Bounds_e__Union_Anonymous1_e__Struct
    anonymous2 : MIXERCONTROLW_Bounds_e__Union_Anonymous2_e__Struct
    dw_reserved : UInt32[6]*
  end
  union MIXERCONTROLW_Metrics_e__Union
    c_steps : UInt32
    cb_custom_data : UInt32
    dw_reserved : UInt32[6]*
  end
  union MIXERLINECONTROLSA_Anonymous_e__Union
    dw_control_id : UInt32
    dw_control_type : UInt32
  end
  union MIXERLINECONTROLSW_Anonymous_e__Union
    dw_control_id : UInt32
    dw_control_type : UInt32
  end
  union MIXERCONTROLDETAILS_Anonymous_e__Union
    hwnd_owner : HANDLE
    c_multiple_items : UInt32
  end
  union SpatialAudioHrtfDirectivityUnion
    cone : SpatialAudioHrtfDirectivityCone
    cardiod : SpatialAudioHrtfDirectivityCardioid
    omni : SpatialAudioHrtfDirectivity
  end
  union AUDIOCLIENT_ACTIVATION_PARAMS_Anonymous_e__Union
    process_loopback_params : AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
  end

  struct AUDIO_VOLUME_NOTIFICATION_DATA
    guid_event_context : Guid
    b_muted : LibC::BOOL
    f_master_volume : Float32
    n_channels : UInt32
    af_channel_volumes : Float32[0]*
  end
  struct WAVEFORMATEXTENSIBLE
    format : WAVEFORMATEX
    samples : WAVEFORMATEXTENSIBLE_Samples_e__Union
    dw_channel_mask : UInt32
    sub_format : Guid
  end
  struct WAVEFILTER
    cb_struct : UInt32
    dw_filter_tag : UInt32
    fdw_filter : UInt32
    dw_reserved : UInt32[5]*
  end
  struct VOLUMEWAVEFILTER
    wfltr : WAVEFILTER
    dw_volume : UInt32
  end
  struct ECHOWAVEFILTER
    wfltr : WAVEFILTER
    dw_volume : UInt32
    dw_delay : UInt32
  end
  struct WAVEHDR
    lp_data : PSTR
    dw_buffer_length : UInt32
    dw_bytes_recorded : UInt32
    dw_user : LibC::UINT_PTR
    dw_flags : UInt32
    dw_loops : UInt32
    lp_next : WAVEHDR*
    reserved : LibC::UINT_PTR
  end
  struct WAVEOUTCAPSA
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
  end
  struct WAVEOUTCAPSW
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
  end
  struct WAVEOUTCAPS2A
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct WAVEOUTCAPS2W
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct WAVEINCAPSA
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
  end
  struct WAVEINCAPSW
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
  end
  struct WAVEINCAPS2A
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct WAVEINCAPS2W
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    dw_formats : UInt32
    w_channels : UInt16
    w_reserved1 : UInt16
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct WAVEFORMAT
    w_format_tag : UInt16
    n_channels : UInt16
    n_samples_per_sec : UInt32
    n_avg_bytes_per_sec : UInt32
    n_block_align : UInt16
  end
  struct PCMWAVEFORMAT
    wf : WAVEFORMAT
    w_bits_per_sample : UInt16
  end
  struct WAVEFORMATEX
    w_format_tag : UInt16
    n_channels : UInt16
    n_samples_per_sec : UInt32
    n_avg_bytes_per_sec : UInt32
    n_block_align : UInt16
    w_bits_per_sample : UInt16
    cb_size : UInt16
  end
  struct MIDIOUTCAPSA
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    w_technology : UInt16
    w_voices : UInt16
    w_notes : UInt16
    w_channel_mask : UInt16
    dw_support : UInt32
  end
  struct MIDIOUTCAPSW
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    w_technology : UInt16
    w_voices : UInt16
    w_notes : UInt16
    w_channel_mask : UInt16
    dw_support : UInt32
  end
  struct MIDIOUTCAPS2A
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    w_technology : UInt16
    w_voices : UInt16
    w_notes : UInt16
    w_channel_mask : UInt16
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct MIDIOUTCAPS2W
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    w_technology : UInt16
    w_voices : UInt16
    w_notes : UInt16
    w_channel_mask : UInt16
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct MIDIINCAPSA
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    dw_support : UInt32
  end
  struct MIDIINCAPSW
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    dw_support : UInt32
  end
  struct MIDIINCAPS2A
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct MIDIINCAPS2W
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct MIDIHDR
    lp_data : PSTR
    dw_buffer_length : UInt32
    dw_bytes_recorded : UInt32
    dw_user : LibC::UINT_PTR
    dw_flags : UInt32
    lp_next : MIDIHDR*
    reserved : LibC::UINT_PTR
    dw_offset : UInt32
    dw_reserved : LibC::UINT_PTR[8]*
  end
  struct MIDIEVENT
    dw_delta_time : UInt32
    dw_stream_id : UInt32
    dw_event : UInt32
    dw_parms : UInt32[0]*
  end
  struct MIDISTRMBUFFVER
    dw_version : UInt32
    dw_mid : UInt32
    dw_oem_version : UInt32
  end
  struct MIDIPROPTIMEDIV
    cb_struct : UInt32
    dw_time_div : UInt32
  end
  struct MIDIPROPTEMPO
    cb_struct : UInt32
    dw_tempo : UInt32
  end
  struct AUXCAPSA
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    w_technology : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
  end
  struct AUXCAPSW
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    w_technology : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
  end
  struct AUXCAPS2A
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    w_technology : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct AUXCAPS2W
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    w_technology : UInt16
    w_reserved1 : UInt16
    dw_support : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct MIXERCAPSA
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    fdw_support : UInt32
    c_destinations : UInt32
  end
  struct MIXERCAPSW
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    fdw_support : UInt32
    c_destinations : UInt32
  end
  struct MIXERCAPS2A
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
    fdw_support : UInt32
    c_destinations : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct MIXERCAPS2W
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
    fdw_support : UInt32
    c_destinations : UInt32
    manufacturer_guid : Guid
    product_guid : Guid
    name_guid : Guid
  end
  struct MIXERLINEA
    cb_struct : UInt32
    dw_destination : UInt32
    dw_source : UInt32
    dw_line_id : UInt32
    fdw_line : UInt32
    dw_user : LibC::UINT_PTR
    dw_component_type : MIXERLINE_COMPONENTTYPE
    c_channels : UInt32
    c_connections : UInt32
    c_controls : UInt32
    sz_short_name : CHAR[16]*
    sz_name : CHAR[64]*
    target : MIXERLINEA_Target_e__Struct
  end
  struct MIXERLINEA_Target_e__Struct
    dw_type : UInt32
    dw_device_id : UInt32
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : CHAR[32]*
  end
  struct MIXERLINEW
    cb_struct : UInt32
    dw_destination : UInt32
    dw_source : UInt32
    dw_line_id : UInt32
    fdw_line : UInt32
    dw_user : LibC::UINT_PTR
    dw_component_type : MIXERLINE_COMPONENTTYPE
    c_channels : UInt32
    c_connections : UInt32
    c_controls : UInt32
    sz_short_name : Char[16]*
    sz_name : Char[64]*
    target : MIXERLINEW_Target_e__Struct
  end
  struct MIXERLINEW_Target_e__Struct
    dw_type : UInt32
    dw_device_id : UInt32
    w_mid : UInt16
    w_pid : UInt16
    v_driver_version : UInt32
    sz_pname : Char[32]*
  end
  struct MIXERCONTROLA
    cb_struct : UInt32
    dw_control_id : UInt32
    dw_control_type : UInt32
    fdw_control : UInt32
    c_multiple_items : UInt32
    sz_short_name : CHAR[16]*
    sz_name : CHAR[64]*
    bounds : MIXERCONTROLA_Bounds_e__Union
    metrics : MIXERCONTROLA_Metrics_e__Union
  end
  struct MIXERCONTROLA_Bounds_e__Union_Anonymous2_e__Struct
    dw_minimum : UInt32
    dw_maximum : UInt32
  end
  struct MIXERCONTROLA_Bounds_e__Union_Anonymous1_e__Struct
    l_minimum : Int32
    l_maximum : Int32
  end
  struct MIXERCONTROLW
    cb_struct : UInt32
    dw_control_id : UInt32
    dw_control_type : UInt32
    fdw_control : UInt32
    c_multiple_items : UInt32
    sz_short_name : Char[16]*
    sz_name : Char[64]*
    bounds : MIXERCONTROLW_Bounds_e__Union
    metrics : MIXERCONTROLW_Metrics_e__Union
  end
  struct MIXERCONTROLW_Bounds_e__Union_Anonymous1_e__Struct
    l_minimum : Int32
    l_maximum : Int32
  end
  struct MIXERCONTROLW_Bounds_e__Union_Anonymous2_e__Struct
    dw_minimum : UInt32
    dw_maximum : UInt32
  end
  struct MIXERLINECONTROLSA
    cb_struct : UInt32
    dw_line_id : UInt32
    anonymous : MIXERLINECONTROLSA_Anonymous_e__Union
    c_controls : UInt32
    cbmxctrl : UInt32
    pamxctrl : MIXERCONTROLA*
  end
  struct MIXERLINECONTROLSW
    cb_struct : UInt32
    dw_line_id : UInt32
    anonymous : MIXERLINECONTROLSW_Anonymous_e__Union
    c_controls : UInt32
    cbmxctrl : UInt32
    pamxctrl : MIXERCONTROLW*
  end
  struct MIXERCONTROLDETAILS
    cb_struct : UInt32
    dw_control_id : UInt32
    c_channels : UInt32
    anonymous : MIXERCONTROLDETAILS_Anonymous_e__Union
    cb_details : UInt32
    pa_details : Void*
  end
  struct MIXERCONTROLDETAILS_LISTTEXTA
    dw_param1 : UInt32
    dw_param2 : UInt32
    sz_name : CHAR[64]*
  end
  struct MIXERCONTROLDETAILS_LISTTEXTW
    dw_param1 : UInt32
    dw_param2 : UInt32
    sz_name : Char[64]*
  end
  struct MIXERCONTROLDETAILS_BOOLEAN
    f_value : Int32
  end
  struct MIXERCONTROLDETAILS_SIGNED
    l_value : Int32
  end
  struct MIXERCONTROLDETAILS_UNSIGNED
    dw_value : UInt32
  end
  struct AudioClientProperties
    cb_size : UInt32
    b_is_offload : LibC::BOOL
    e_category : AUDIO_STREAM_CATEGORY
    options : AUDCLNT_STREAMOPTIONS
  end
  struct AudioClient3ActivationParams
    tracing_context_id : Guid
  end
  struct AUDIO_EFFECT
    id : Guid
    can_set_state : LibC::BOOL
    state : AUDIO_EFFECT_STATE
  end
  struct AMBISONICS_PARAMS
    u32_size : UInt32
    u32_version : UInt32
    u32_type : AMBISONICS_TYPE
    u32_channel_ordering : AMBISONICS_CHANNEL_ORDERING
    u32_normalization : AMBISONICS_NORMALIZATION
    u32_order : UInt32
    u32_num_channels : UInt32
    pu32_channel_map : UInt32*
  end
  struct SpatialAudioObjectRenderStreamActivationParams
    object_format : WAVEFORMATEX*
    static_object_type_mask : AudioObjectType
    min_dynamic_object_count : UInt32
    max_dynamic_object_count : UInt32
    category : AUDIO_STREAM_CATEGORY
    event_handle : LibC::HANDLE
    notify_object : ISpatialAudioObjectRenderStreamNotify
  end
  struct SpatialAudioObjectRenderStreamActivationParams2
    object_format : WAVEFORMATEX*
    static_object_type_mask : AudioObjectType
    min_dynamic_object_count : UInt32
    max_dynamic_object_count : UInt32
    category : AUDIO_STREAM_CATEGORY
    event_handle : LibC::HANDLE
    notify_object : ISpatialAudioObjectRenderStreamNotify
    options : SPATIAL_AUDIO_STREAM_OPTIONS
  end
  struct SpatialAudioClientActivationParams
    tracing_context_id : Guid
    app_id : Guid
    major_version : Int32
    minor_version1 : Int32
    minor_version2 : Int32
    minor_version3 : Int32
  end
  struct SpatialAudioHrtfDirectivity
    type : SpatialAudioHrtfDirectivityType
    scaling : Float32
  end
  struct SpatialAudioHrtfDirectivityCardioid
    directivity : SpatialAudioHrtfDirectivity
    order : Float32
  end
  struct SpatialAudioHrtfDirectivityCone
    directivity : SpatialAudioHrtfDirectivity
    inner_angle : Float32
    outer_angle : Float32
  end
  struct SpatialAudioHrtfDistanceDecay
    type : SpatialAudioHrtfDistanceDecayType
    max_gain : Float32
    min_gain : Float32
    unity_gain_distance : Float32
    cutoff_distance : Float32
  end
  struct SpatialAudioHrtfActivationParams
    object_format : WAVEFORMATEX*
    static_object_type_mask : AudioObjectType
    min_dynamic_object_count : UInt32
    max_dynamic_object_count : UInt32
    category : AUDIO_STREAM_CATEGORY
    event_handle : LibC::HANDLE
    notify_object : ISpatialAudioObjectRenderStreamNotify
    distance_decay : SpatialAudioHrtfDistanceDecay*
    directivity : SpatialAudioHrtfDirectivityUnion*
    environment : SpatialAudioHrtfEnvironmentType*
    orientation : Float32*
  end
  struct SpatialAudioHrtfActivationParams2
    object_format : WAVEFORMATEX*
    static_object_type_mask : AudioObjectType
    min_dynamic_object_count : UInt32
    max_dynamic_object_count : UInt32
    category : AUDIO_STREAM_CATEGORY
    event_handle : LibC::HANDLE
    notify_object : ISpatialAudioObjectRenderStreamNotify
    distance_decay : SpatialAudioHrtfDistanceDecay*
    directivity : SpatialAudioHrtfDirectivityUnion*
    environment : SpatialAudioHrtfEnvironmentType*
    orientation : Float32*
    options : SPATIAL_AUDIO_STREAM_OPTIONS
  end
  struct DIRECTX_AUDIO_ACTIVATION_PARAMS
    cb_direct_x_audio_activation_params : UInt32
    guid_audio_session : Guid
    dw_audio_stream_flags : UInt32
  end
  struct AudioExtensionParams
    add_page_param : LPARAM
    p_endpoint : IMMDevice
    p_pnp_interface : IMMDevice
    p_pnp_devnode : IMMDevice
  end
  struct SpatialAudioMetadataItemsInfo
    frame_count : UInt16
    item_count : UInt16
    max_item_count : UInt16
    max_value_buffer_length : UInt32
  end
  struct SpatialAudioObjectRenderStreamForMetadataActivationParams
    object_format : WAVEFORMATEX*
    static_object_type_mask : AudioObjectType
    min_dynamic_object_count : UInt32
    max_dynamic_object_count : UInt32
    category : AUDIO_STREAM_CATEGORY
    event_handle : LibC::HANDLE
    metadata_format_id : Guid
    max_metadata_item_count : UInt16
    metadata_activation_params : PROPVARIANT*
    notify_object : ISpatialAudioObjectRenderStreamNotify
  end
  struct SpatialAudioObjectRenderStreamForMetadataActivationParams2
    object_format : WAVEFORMATEX*
    static_object_type_mask : AudioObjectType
    min_dynamic_object_count : UInt32
    max_dynamic_object_count : UInt32
    category : AUDIO_STREAM_CATEGORY
    event_handle : LibC::HANDLE
    metadata_format_id : Guid
    max_metadata_item_count : UInt32
    metadata_activation_params : PROPVARIANT*
    notify_object : ISpatialAudioObjectRenderStreamNotify
    options : SPATIAL_AUDIO_STREAM_OPTIONS
  end
  struct AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
    target_process_id : UInt32
    process_loopback_mode : PROCESS_LOOPBACK_MODE
  end
  struct AUDIOCLIENT_ACTIVATION_PARAMS
    activation_type : AUDIOCLIENT_ACTIVATION_TYPE
    anonymous : AUDIOCLIENT_ACTIVATION_PARAMS_Anonymous_e__Union
  end
  struct ACMDRIVERDETAILSA
    cb_struct : UInt32
    fcc_type : UInt32
    fcc_comp : UInt32
    w_mid : UInt16
    w_pid : UInt16
    vdw_acm : UInt32
    vdw_driver : UInt32
    fdw_support : UInt32
    c_format_tags : UInt32
    c_filter_tags : UInt32
    hicon : HANDLE
    sz_short_name : CHAR[32]*
    sz_long_name : CHAR[128]*
    sz_copyright : CHAR[80]*
    sz_licensing : CHAR[128]*
    sz_features : CHAR[512]*
  end
  struct ACMDRIVERDETAILSW
    cb_struct : UInt32
    fcc_type : UInt32
    fcc_comp : UInt32
    w_mid : UInt16
    w_pid : UInt16
    vdw_acm : UInt32
    vdw_driver : UInt32
    fdw_support : UInt32
    c_format_tags : UInt32
    c_filter_tags : UInt32
    hicon : HANDLE
    sz_short_name : Char[32]*
    sz_long_name : Char[128]*
    sz_copyright : Char[80]*
    sz_licensing : Char[128]*
    sz_features : Char[512]*
  end
  struct ACMFORMATTAGDETAILSA
    cb_struct : UInt32
    dw_format_tag_index : UInt32
    dw_format_tag : UInt32
    cb_format_size : UInt32
    fdw_support : UInt32
    c_standard_formats : UInt32
    sz_format_tag : CHAR[48]*
  end
  struct ACMFORMATTAGDETAILSW
    cb_struct : UInt32
    dw_format_tag_index : UInt32
    dw_format_tag : UInt32
    cb_format_size : UInt32
    fdw_support : UInt32
    c_standard_formats : UInt32
    sz_format_tag : Char[48]*
  end
  struct ACMFORMATDETAILSA
    cb_struct : UInt32
    dw_format_index : UInt32
    dw_format_tag : UInt32
    fdw_support : UInt32
    pwfx : WAVEFORMATEX*
    cbwfx : UInt32
    sz_format : CHAR[128]*
  end
  struct Tacmformatdetailsw
    cb_struct : UInt32
    dw_format_index : UInt32
    dw_format_tag : UInt32
    fdw_support : UInt32
    pwfx : WAVEFORMATEX*
    cbwfx : UInt32
    sz_format : Char[128]*
  end
  struct ACMFORMATCHOOSEA
    cb_struct : UInt32
    fdw_style : UInt32
    hwnd_owner : HANDLE
    pwfx : WAVEFORMATEX*
    cbwfx : UInt32
    psz_title : PSTR
    sz_format_tag : CHAR[48]*
    sz_format : CHAR[128]*
    psz_name : PSTR
    cch_name : UInt32
    fdw_enum : UInt32
    pwfx_enum : WAVEFORMATEX*
    h_instance : HINSTANCE
    psz_template_name : PSTR
    l_cust_data : LPARAM
    pfn_hook : ACMFORMATCHOOSEHOOKPROCA
  end
  struct ACMFORMATCHOOSEW
    cb_struct : UInt32
    fdw_style : UInt32
    hwnd_owner : HANDLE
    pwfx : WAVEFORMATEX*
    cbwfx : UInt32
    psz_title : LibC::LPWSTR
    sz_format_tag : Char[48]*
    sz_format : Char[128]*
    psz_name : LibC::LPWSTR
    cch_name : UInt32
    fdw_enum : UInt32
    pwfx_enum : WAVEFORMATEX*
    h_instance : HINSTANCE
    psz_template_name : LibC::LPWSTR
    l_cust_data : LPARAM
    pfn_hook : ACMFORMATCHOOSEHOOKPROCW
  end
  struct ACMFILTERTAGDETAILSA
    cb_struct : UInt32
    dw_filter_tag_index : UInt32
    dw_filter_tag : UInt32
    cb_filter_size : UInt32
    fdw_support : UInt32
    c_standard_filters : UInt32
    sz_filter_tag : CHAR[48]*
  end
  struct ACMFILTERTAGDETAILSW
    cb_struct : UInt32
    dw_filter_tag_index : UInt32
    dw_filter_tag : UInt32
    cb_filter_size : UInt32
    fdw_support : UInt32
    c_standard_filters : UInt32
    sz_filter_tag : Char[48]*
  end
  struct ACMFILTERDETAILSA
    cb_struct : UInt32
    dw_filter_index : UInt32
    dw_filter_tag : UInt32
    fdw_support : UInt32
    pwfltr : WAVEFILTER*
    cbwfltr : UInt32
    sz_filter : CHAR[128]*
  end
  struct ACMFILTERDETAILSW
    cb_struct : UInt32
    dw_filter_index : UInt32
    dw_filter_tag : UInt32
    fdw_support : UInt32
    pwfltr : WAVEFILTER*
    cbwfltr : UInt32
    sz_filter : Char[128]*
  end
  struct ACMFILTERCHOOSEA
    cb_struct : UInt32
    fdw_style : UInt32
    hwnd_owner : HANDLE
    pwfltr : WAVEFILTER*
    cbwfltr : UInt32
    psz_title : PSTR
    sz_filter_tag : CHAR[48]*
    sz_filter : CHAR[128]*
    psz_name : PSTR
    cch_name : UInt32
    fdw_enum : UInt32
    pwfltr_enum : WAVEFILTER*
    h_instance : HINSTANCE
    psz_template_name : PSTR
    l_cust_data : LPARAM
    pfn_hook : ACMFILTERCHOOSEHOOKPROCA
  end
  struct ACMFILTERCHOOSEW
    cb_struct : UInt32
    fdw_style : UInt32
    hwnd_owner : HANDLE
    pwfltr : WAVEFILTER*
    cbwfltr : UInt32
    psz_title : LibC::LPWSTR
    sz_filter_tag : Char[48]*
    sz_filter : Char[128]*
    psz_name : LibC::LPWSTR
    cch_name : UInt32
    fdw_enum : UInt32
    pwfltr_enum : WAVEFILTER*
    h_instance : HINSTANCE
    psz_template_name : LibC::LPWSTR
    l_cust_data : LPARAM
    pfn_hook : ACMFILTERCHOOSEHOOKPROCW
  end
  struct ACMSTREAMHEADER
    cb_struct : UInt32
    fdw_status : UInt32
    dw_user : LibC::UINT_PTR
    pb_src : UInt8*
    cb_src_length : UInt32
    cb_src_length_used : UInt32
    dw_src_user : LibC::UINT_PTR
    pb_dst : UInt8*
    cb_dst_length : UInt32
    cb_dst_length_used : UInt32
    dw_dst_user : LibC::UINT_PTR
    dw_reserved_driver : UInt32[15]*
  end
  struct Tacmdrvopendesca
    cb_struct : UInt32
    fcc_type : UInt32
    fcc_comp : UInt32
    dw_version : UInt32
    dw_flags : UInt32
    dw_error : UInt32
    psz_section_name : PSTR
    psz_alias_name : PSTR
    dn_dev_node : UInt32
  end
  struct Tacmdrvopendescw
    cb_struct : UInt32
    fcc_type : UInt32
    fcc_comp : UInt32
    dw_version : UInt32
    dw_flags : UInt32
    dw_error : UInt32
    psz_section_name : LibC::LPWSTR
    psz_alias_name : LibC::LPWSTR
    dn_dev_node : UInt32
  end
  struct ACMDRVSTREAMINSTANCE
    cb_struct : UInt32
    pwfx_src : WAVEFORMATEX*
    pwfx_dst : WAVEFORMATEX*
    pwfltr : WAVEFILTER*
    dw_callback : LibC::UINT_PTR
    dw_instance : LibC::UINT_PTR
    fdw_open : UInt32
    fdw_driver : UInt32
    dw_driver : LibC::UINT_PTR
    has : HACMSTREAM
  end
  struct ACMDRVSTREAMHEADER
    cb_struct : UInt32
    fdw_status : UInt32
    dw_user : LibC::UINT_PTR
    pb_src : UInt8*
    cb_src_length : UInt32
    cb_src_length_used : UInt32
    dw_src_user : LibC::UINT_PTR
    pb_dst : UInt8*
    cb_dst_length : UInt32
    cb_dst_length_used : UInt32
    dw_dst_user : LibC::UINT_PTR
    fdw_convert : UInt32
    padsh_next : ACMDRVSTREAMHEADER*
    fdw_driver : UInt32
    dw_driver : LibC::UINT_PTR
    fdw_prepared : UInt32
    dw_prepared : LibC::UINT_PTR
    pb_prepared_src : UInt8*
    cb_prepared_src_length : UInt32
    pb_prepared_dst : UInt8*
    cb_prepared_dst_length : UInt32
  end
  struct ACMDRVSTREAMSIZE
    cb_struct : UInt32
    fdw_size : UInt32
    cb_src_length : UInt32
    cb_dst_length : UInt32
  end
  struct ACMDRVFORMATSUGGEST
    cb_struct : UInt32
    fdw_suggest : UInt32
    pwfx_src : WAVEFORMATEX*
    cbwfx_src : UInt32
    pwfx_dst : WAVEFORMATEX*
    cbwfx_dst : UInt32
  end


  struct IMessageFilterVTbl
    query_interface : Proc(IMessageFilter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMessageFilter*, UInt32)
    release : Proc(IMessageFilter*, UInt32)
    handle_in_coming_call : Proc(IMessageFilter*, UInt32, HTASK, UInt32, INTERFACEINFO*, UInt32)
    retry_rejected_call : Proc(IMessageFilter*, HTASK, UInt32, UInt32, UInt32)
    message_pending : Proc(IMessageFilter*, HTASK, UInt32, UInt32, UInt32)
  end

  IMessageFilter_GUID = LibC::GUID.new("00000016-0000-0000-c000-000000000046")
  CLSID_IMessageFilter = "00000016-0000-0000-c000-000000000046"
  struct IMessageFilter
    lpVtbl : IMessageFilterVTbl*
  end

  struct IAudioClientVTbl
    query_interface : Proc(IAudioClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioClient*, UInt32)
    release : Proc(IAudioClient*, UInt32)
    initialize : Proc(IAudioClient*, AUDCLNT_SHAREMODE, UInt32, Int64, Int64, WAVEFORMATEX*, Guid*, HRESULT)
    get_buffer_size : Proc(IAudioClient*, UInt32*, HRESULT)
    get_stream_latency : Proc(IAudioClient*, Int64*, HRESULT)
    get_current_padding : Proc(IAudioClient*, UInt32*, HRESULT)
    is_format_supported : Proc(IAudioClient*, AUDCLNT_SHAREMODE, WAVEFORMATEX*, WAVEFORMATEX**, HRESULT)
    get_mix_format : Proc(IAudioClient*, WAVEFORMATEX**, HRESULT)
    get_device_period : Proc(IAudioClient*, Int64*, Int64*, HRESULT)
    start : Proc(IAudioClient*, HRESULT)
    stop : Proc(IAudioClient*, HRESULT)
    reset : Proc(IAudioClient*, HRESULT)
    set_event_handle : Proc(IAudioClient*, LibC::HANDLE, HRESULT)
    get_service : Proc(IAudioClient*, Guid*, Void**, HRESULT)
  end

  IAudioClient_GUID = LibC::GUID.new("1cb9ad4c-dbfa-4c32-b178-c2f568a703b2")
  CLSID_IAudioClient = "1cb9ad4c-dbfa-4c32-b178-c2f568a703b2"
  struct IAudioClient
    lpVtbl : IAudioClientVTbl*
  end

  struct IAudioClient2VTbl
    query_interface : Proc(IAudioClient2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioClient2*, UInt32)
    release : Proc(IAudioClient2*, UInt32)
    initialize : Proc(IAudioClient2*, AUDCLNT_SHAREMODE, UInt32, Int64, Int64, WAVEFORMATEX*, Guid*, HRESULT)
    get_buffer_size : Proc(IAudioClient2*, UInt32*, HRESULT)
    get_stream_latency : Proc(IAudioClient2*, Int64*, HRESULT)
    get_current_padding : Proc(IAudioClient2*, UInt32*, HRESULT)
    is_format_supported : Proc(IAudioClient2*, AUDCLNT_SHAREMODE, WAVEFORMATEX*, WAVEFORMATEX**, HRESULT)
    get_mix_format : Proc(IAudioClient2*, WAVEFORMATEX**, HRESULT)
    get_device_period : Proc(IAudioClient2*, Int64*, Int64*, HRESULT)
    start : Proc(IAudioClient2*, HRESULT)
    stop : Proc(IAudioClient2*, HRESULT)
    reset : Proc(IAudioClient2*, HRESULT)
    set_event_handle : Proc(IAudioClient2*, LibC::HANDLE, HRESULT)
    get_service : Proc(IAudioClient2*, Guid*, Void**, HRESULT)
    is_offload_capable : Proc(IAudioClient2*, AUDIO_STREAM_CATEGORY, LibC::BOOL*, HRESULT)
    set_client_properties : Proc(IAudioClient2*, AudioClientProperties*, HRESULT)
    get_buffer_size_limits : Proc(IAudioClient2*, WAVEFORMATEX*, LibC::BOOL, Int64*, Int64*, HRESULT)
  end

  IAudioClient2_GUID = LibC::GUID.new("726778cd-f60a-4eda-82de-e47610cd78aa")
  CLSID_IAudioClient2 = "726778cd-f60a-4eda-82de-e47610cd78aa"
  struct IAudioClient2
    lpVtbl : IAudioClient2VTbl*
  end

  struct IAudioClient3VTbl
    query_interface : Proc(IAudioClient3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioClient3*, UInt32)
    release : Proc(IAudioClient3*, UInt32)
    initialize : Proc(IAudioClient3*, AUDCLNT_SHAREMODE, UInt32, Int64, Int64, WAVEFORMATEX*, Guid*, HRESULT)
    get_buffer_size : Proc(IAudioClient3*, UInt32*, HRESULT)
    get_stream_latency : Proc(IAudioClient3*, Int64*, HRESULT)
    get_current_padding : Proc(IAudioClient3*, UInt32*, HRESULT)
    is_format_supported : Proc(IAudioClient3*, AUDCLNT_SHAREMODE, WAVEFORMATEX*, WAVEFORMATEX**, HRESULT)
    get_mix_format : Proc(IAudioClient3*, WAVEFORMATEX**, HRESULT)
    get_device_period : Proc(IAudioClient3*, Int64*, Int64*, HRESULT)
    start : Proc(IAudioClient3*, HRESULT)
    stop : Proc(IAudioClient3*, HRESULT)
    reset : Proc(IAudioClient3*, HRESULT)
    set_event_handle : Proc(IAudioClient3*, LibC::HANDLE, HRESULT)
    get_service : Proc(IAudioClient3*, Guid*, Void**, HRESULT)
    is_offload_capable : Proc(IAudioClient3*, AUDIO_STREAM_CATEGORY, LibC::BOOL*, HRESULT)
    set_client_properties : Proc(IAudioClient3*, AudioClientProperties*, HRESULT)
    get_buffer_size_limits : Proc(IAudioClient3*, WAVEFORMATEX*, LibC::BOOL, Int64*, Int64*, HRESULT)
    get_shared_mode_engine_period : Proc(IAudioClient3*, WAVEFORMATEX*, UInt32*, UInt32*, UInt32*, UInt32*, HRESULT)
    get_current_shared_mode_engine_period : Proc(IAudioClient3*, WAVEFORMATEX**, UInt32*, HRESULT)
    initialize_shared_audio_stream : Proc(IAudioClient3*, UInt32, UInt32, WAVEFORMATEX*, Guid*, HRESULT)
  end

  IAudioClient3_GUID = LibC::GUID.new("7ed4ee07-8e67-4cd4-8c1a-2b7a5987ad42")
  CLSID_IAudioClient3 = "7ed4ee07-8e67-4cd4-8c1a-2b7a5987ad42"
  struct IAudioClient3
    lpVtbl : IAudioClient3VTbl*
  end

  struct IAudioRenderClientVTbl
    query_interface : Proc(IAudioRenderClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioRenderClient*, UInt32)
    release : Proc(IAudioRenderClient*, UInt32)
    get_buffer : Proc(IAudioRenderClient*, UInt32, UInt8**, HRESULT)
    release_buffer : Proc(IAudioRenderClient*, UInt32, UInt32, HRESULT)
  end

  IAudioRenderClient_GUID = LibC::GUID.new("f294acfc-3146-4483-a7bf-addca7c260e2")
  CLSID_IAudioRenderClient = "f294acfc-3146-4483-a7bf-addca7c260e2"
  struct IAudioRenderClient
    lpVtbl : IAudioRenderClientVTbl*
  end

  struct IAudioCaptureClientVTbl
    query_interface : Proc(IAudioCaptureClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioCaptureClient*, UInt32)
    release : Proc(IAudioCaptureClient*, UInt32)
    get_buffer : Proc(IAudioCaptureClient*, UInt8**, UInt32*, UInt32*, UInt64*, UInt64*, HRESULT)
    release_buffer : Proc(IAudioCaptureClient*, UInt32, HRESULT)
    get_next_packet_size : Proc(IAudioCaptureClient*, UInt32*, HRESULT)
  end

  IAudioCaptureClient_GUID = LibC::GUID.new("c8adbd64-e71e-48a0-a4de-185c395cd317")
  CLSID_IAudioCaptureClient = "c8adbd64-e71e-48a0-a4de-185c395cd317"
  struct IAudioCaptureClient
    lpVtbl : IAudioCaptureClientVTbl*
  end

  struct IAudioClockVTbl
    query_interface : Proc(IAudioClock*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioClock*, UInt32)
    release : Proc(IAudioClock*, UInt32)
    get_frequency : Proc(IAudioClock*, UInt64*, HRESULT)
    get_position : Proc(IAudioClock*, UInt64*, UInt64*, HRESULT)
    get_characteristics : Proc(IAudioClock*, UInt32*, HRESULT)
  end

  IAudioClock_GUID = LibC::GUID.new("cd63314f-3fba-4a1b-812c-ef96358728e7")
  CLSID_IAudioClock = "cd63314f-3fba-4a1b-812c-ef96358728e7"
  struct IAudioClock
    lpVtbl : IAudioClockVTbl*
  end

  struct IAudioClock2VTbl
    query_interface : Proc(IAudioClock2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioClock2*, UInt32)
    release : Proc(IAudioClock2*, UInt32)
    get_device_position : Proc(IAudioClock2*, UInt64*, UInt64*, HRESULT)
  end

  IAudioClock2_GUID = LibC::GUID.new("6f49ff73-6727-49ac-a008-d98cf5e70048")
  CLSID_IAudioClock2 = "6f49ff73-6727-49ac-a008-d98cf5e70048"
  struct IAudioClock2
    lpVtbl : IAudioClock2VTbl*
  end

  struct IAudioClockAdjustmentVTbl
    query_interface : Proc(IAudioClockAdjustment*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioClockAdjustment*, UInt32)
    release : Proc(IAudioClockAdjustment*, UInt32)
    set_sample_rate : Proc(IAudioClockAdjustment*, Float32, HRESULT)
  end

  IAudioClockAdjustment_GUID = LibC::GUID.new("f6e4c0a0-46d9-4fb8-be21-57a3ef2b626c")
  CLSID_IAudioClockAdjustment = "f6e4c0a0-46d9-4fb8-be21-57a3ef2b626c"
  struct IAudioClockAdjustment
    lpVtbl : IAudioClockAdjustmentVTbl*
  end

  struct ISimpleAudioVolumeVTbl
    query_interface : Proc(ISimpleAudioVolume*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISimpleAudioVolume*, UInt32)
    release : Proc(ISimpleAudioVolume*, UInt32)
    set_master_volume : Proc(ISimpleAudioVolume*, Float32, Guid*, HRESULT)
    get_master_volume : Proc(ISimpleAudioVolume*, Float32*, HRESULT)
    set_mute : Proc(ISimpleAudioVolume*, LibC::BOOL, Guid*, HRESULT)
    get_mute : Proc(ISimpleAudioVolume*, LibC::BOOL*, HRESULT)
  end

  ISimpleAudioVolume_GUID = LibC::GUID.new("87ce5498-68d6-44e5-9215-6da47ef883d8")
  CLSID_ISimpleAudioVolume = "87ce5498-68d6-44e5-9215-6da47ef883d8"
  struct ISimpleAudioVolume
    lpVtbl : ISimpleAudioVolumeVTbl*
  end

  struct IAudioClientDuckingControlVTbl
    query_interface : Proc(IAudioClientDuckingControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioClientDuckingControl*, UInt32)
    release : Proc(IAudioClientDuckingControl*, UInt32)
    set_ducking_options_for_current_stream : Proc(IAudioClientDuckingControl*, AUDIO_DUCKING_OPTIONS, HRESULT)
  end

  IAudioClientDuckingControl_GUID = LibC::GUID.new("c789d381-a28c-4168-b28f-d3a837924dc3")
  CLSID_IAudioClientDuckingControl = "c789d381-a28c-4168-b28f-d3a837924dc3"
  struct IAudioClientDuckingControl
    lpVtbl : IAudioClientDuckingControlVTbl*
  end

  struct IAudioEffectsChangedNotificationClientVTbl
    query_interface : Proc(IAudioEffectsChangedNotificationClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioEffectsChangedNotificationClient*, UInt32)
    release : Proc(IAudioEffectsChangedNotificationClient*, UInt32)
    on_audio_effects_changed : Proc(IAudioEffectsChangedNotificationClient*, HRESULT)
  end

  IAudioEffectsChangedNotificationClient_GUID = LibC::GUID.new("a5ded44f-3c5d-4b2b-bd1e-5dc1ee20bbf6")
  CLSID_IAudioEffectsChangedNotificationClient = "a5ded44f-3c5d-4b2b-bd1e-5dc1ee20bbf6"
  struct IAudioEffectsChangedNotificationClient
    lpVtbl : IAudioEffectsChangedNotificationClientVTbl*
  end

  struct IAudioEffectsManagerVTbl
    query_interface : Proc(IAudioEffectsManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioEffectsManager*, UInt32)
    release : Proc(IAudioEffectsManager*, UInt32)
    register_audio_effects_changed_notification_callback : Proc(IAudioEffectsManager*, IAudioEffectsChangedNotificationClient, HRESULT)
    unregister_audio_effects_changed_notification_callback : Proc(IAudioEffectsManager*, IAudioEffectsChangedNotificationClient, HRESULT)
    get_audio_effects : Proc(IAudioEffectsManager*, AUDIO_EFFECT**, UInt32*, HRESULT)
    set_audio_effect_state : Proc(IAudioEffectsManager*, Guid, AUDIO_EFFECT_STATE, HRESULT)
  end

  IAudioEffectsManager_GUID = LibC::GUID.new("4460b3ae-4b44-4527-8676-7548a8acd260")
  CLSID_IAudioEffectsManager = "4460b3ae-4b44-4527-8676-7548a8acd260"
  struct IAudioEffectsManager
    lpVtbl : IAudioEffectsManagerVTbl*
  end

  struct IAudioStreamVolumeVTbl
    query_interface : Proc(IAudioStreamVolume*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioStreamVolume*, UInt32)
    release : Proc(IAudioStreamVolume*, UInt32)
    get_channel_count : Proc(IAudioStreamVolume*, UInt32*, HRESULT)
    set_channel_volume : Proc(IAudioStreamVolume*, UInt32, Float32, HRESULT)
    get_channel_volume : Proc(IAudioStreamVolume*, UInt32, Float32*, HRESULT)
    set_all_volumes : Proc(IAudioStreamVolume*, UInt32, Float32*, HRESULT)
    get_all_volumes : Proc(IAudioStreamVolume*, UInt32, Float32*, HRESULT)
  end

  IAudioStreamVolume_GUID = LibC::GUID.new("93014887-242d-4068-8a15-cf5e93b90fe3")
  CLSID_IAudioStreamVolume = "93014887-242d-4068-8a15-cf5e93b90fe3"
  struct IAudioStreamVolume
    lpVtbl : IAudioStreamVolumeVTbl*
  end

  struct IAudioAmbisonicsControlVTbl
    query_interface : Proc(IAudioAmbisonicsControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioAmbisonicsControl*, UInt32)
    release : Proc(IAudioAmbisonicsControl*, UInt32)
    set_data : Proc(IAudioAmbisonicsControl*, AMBISONICS_PARAMS*, UInt32, HRESULT)
    set_head_tracking : Proc(IAudioAmbisonicsControl*, LibC::BOOL, HRESULT)
    get_head_tracking : Proc(IAudioAmbisonicsControl*, LibC::BOOL*, HRESULT)
    set_rotation : Proc(IAudioAmbisonicsControl*, Float32, Float32, Float32, Float32, HRESULT)
  end

  IAudioAmbisonicsControl_GUID = LibC::GUID.new("28724c91-df35-4856-9f76-d6a26413f3df")
  CLSID_IAudioAmbisonicsControl = "28724c91-df35-4856-9f76-d6a26413f3df"
  struct IAudioAmbisonicsControl
    lpVtbl : IAudioAmbisonicsControlVTbl*
  end

  struct IChannelAudioVolumeVTbl
    query_interface : Proc(IChannelAudioVolume*, Guid*, Void**, HRESULT)
    add_ref : Proc(IChannelAudioVolume*, UInt32)
    release : Proc(IChannelAudioVolume*, UInt32)
    get_channel_count : Proc(IChannelAudioVolume*, UInt32*, HRESULT)
    set_channel_volume : Proc(IChannelAudioVolume*, UInt32, Float32, Guid*, HRESULT)
    get_channel_volume : Proc(IChannelAudioVolume*, UInt32, Float32*, HRESULT)
    set_all_volumes : Proc(IChannelAudioVolume*, UInt32, Float32*, Guid*, HRESULT)
    get_all_volumes : Proc(IChannelAudioVolume*, UInt32, Float32*, HRESULT)
  end

  IChannelAudioVolume_GUID = LibC::GUID.new("1c158861-b533-4b30-b1cf-e853e51c59b8")
  CLSID_IChannelAudioVolume = "1c158861-b533-4b30-b1cf-e853e51c59b8"
  struct IChannelAudioVolume
    lpVtbl : IChannelAudioVolumeVTbl*
  end

  struct IAudioFormatEnumeratorVTbl
    query_interface : Proc(IAudioFormatEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioFormatEnumerator*, UInt32)
    release : Proc(IAudioFormatEnumerator*, UInt32)
    get_count : Proc(IAudioFormatEnumerator*, UInt32*, HRESULT)
    get_format : Proc(IAudioFormatEnumerator*, UInt32, WAVEFORMATEX**, HRESULT)
  end

  IAudioFormatEnumerator_GUID = LibC::GUID.new("dcdaa858-895a-4a22-a5eb-67bda506096d")
  CLSID_IAudioFormatEnumerator = "dcdaa858-895a-4a22-a5eb-67bda506096d"
  struct IAudioFormatEnumerator
    lpVtbl : IAudioFormatEnumeratorVTbl*
  end

  struct ISpatialAudioObjectBaseVTbl
    query_interface : Proc(ISpatialAudioObjectBase*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectBase*, UInt32)
    release : Proc(ISpatialAudioObjectBase*, UInt32)
    get_buffer : Proc(ISpatialAudioObjectBase*, UInt8**, UInt32*, HRESULT)
    set_end_of_stream : Proc(ISpatialAudioObjectBase*, UInt32, HRESULT)
    is_active : Proc(ISpatialAudioObjectBase*, LibC::BOOL*, HRESULT)
    get_audio_object_type : Proc(ISpatialAudioObjectBase*, AudioObjectType*, HRESULT)
  end

  ISpatialAudioObjectBase_GUID = LibC::GUID.new("cce0b8f2-8d4d-4efb-a8cf-3d6ecf1c30e0")
  CLSID_ISpatialAudioObjectBase = "cce0b8f2-8d4d-4efb-a8cf-3d6ecf1c30e0"
  struct ISpatialAudioObjectBase
    lpVtbl : ISpatialAudioObjectBaseVTbl*
  end

  struct ISpatialAudioObjectVTbl
    query_interface : Proc(ISpatialAudioObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObject*, UInt32)
    release : Proc(ISpatialAudioObject*, UInt32)
    get_buffer : Proc(ISpatialAudioObject*, UInt8**, UInt32*, HRESULT)
    set_end_of_stream : Proc(ISpatialAudioObject*, UInt32, HRESULT)
    is_active : Proc(ISpatialAudioObject*, LibC::BOOL*, HRESULT)
    get_audio_object_type : Proc(ISpatialAudioObject*, AudioObjectType*, HRESULT)
    set_position : Proc(ISpatialAudioObject*, Float32, Float32, Float32, HRESULT)
    set_volume : Proc(ISpatialAudioObject*, Float32, HRESULT)
  end

  ISpatialAudioObject_GUID = LibC::GUID.new("dde28967-521b-46e5-8f00-bd6f2bc8ab1d")
  CLSID_ISpatialAudioObject = "dde28967-521b-46e5-8f00-bd6f2bc8ab1d"
  struct ISpatialAudioObject
    lpVtbl : ISpatialAudioObjectVTbl*
  end

  struct ISpatialAudioObjectRenderStreamBaseVTbl
    query_interface : Proc(ISpatialAudioObjectRenderStreamBase*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32)
    release : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32)
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32*, HRESULT)
    get_service : Proc(ISpatialAudioObjectRenderStreamBase*, Guid*, Void**, HRESULT)
    start : Proc(ISpatialAudioObjectRenderStreamBase*, HRESULT)
    stop : Proc(ISpatialAudioObjectRenderStreamBase*, HRESULT)
    reset : Proc(ISpatialAudioObjectRenderStreamBase*, HRESULT)
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamBase*, UInt32*, UInt32*, HRESULT)
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamBase*, HRESULT)
  end

  ISpatialAudioObjectRenderStreamBase_GUID = LibC::GUID.new("feaaf403-c1d8-450d-aa05-e0ccee7502a8")
  CLSID_ISpatialAudioObjectRenderStreamBase = "feaaf403-c1d8-450d-aa05-e0ccee7502a8"
  struct ISpatialAudioObjectRenderStreamBase
    lpVtbl : ISpatialAudioObjectRenderStreamBaseVTbl*
  end

  struct ISpatialAudioObjectRenderStreamVTbl
    query_interface : Proc(ISpatialAudioObjectRenderStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectRenderStream*, UInt32)
    release : Proc(ISpatialAudioObjectRenderStream*, UInt32)
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStream*, UInt32*, HRESULT)
    get_service : Proc(ISpatialAudioObjectRenderStream*, Guid*, Void**, HRESULT)
    start : Proc(ISpatialAudioObjectRenderStream*, HRESULT)
    stop : Proc(ISpatialAudioObjectRenderStream*, HRESULT)
    reset : Proc(ISpatialAudioObjectRenderStream*, HRESULT)
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStream*, UInt32*, UInt32*, HRESULT)
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStream*, HRESULT)
    activate_spatial_audio_object : Proc(ISpatialAudioObjectRenderStream*, AudioObjectType, ISpatialAudioObject*, HRESULT)
  end

  ISpatialAudioObjectRenderStream_GUID = LibC::GUID.new("bab5f473-b423-477b-85f5-b5a332a04153")
  CLSID_ISpatialAudioObjectRenderStream = "bab5f473-b423-477b-85f5-b5a332a04153"
  struct ISpatialAudioObjectRenderStream
    lpVtbl : ISpatialAudioObjectRenderStreamVTbl*
  end

  struct ISpatialAudioObjectRenderStreamNotifyVTbl
    query_interface : Proc(ISpatialAudioObjectRenderStreamNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectRenderStreamNotify*, UInt32)
    release : Proc(ISpatialAudioObjectRenderStreamNotify*, UInt32)
    on_available_dynamic_object_count_change : Proc(ISpatialAudioObjectRenderStreamNotify*, ISpatialAudioObjectRenderStreamBase, Int64, UInt32, HRESULT)
  end

  ISpatialAudioObjectRenderStreamNotify_GUID = LibC::GUID.new("dddf83e6-68d7-4c70-883f-a1836afb4a50")
  CLSID_ISpatialAudioObjectRenderStreamNotify = "dddf83e6-68d7-4c70-883f-a1836afb4a50"
  struct ISpatialAudioObjectRenderStreamNotify
    lpVtbl : ISpatialAudioObjectRenderStreamNotifyVTbl*
  end

  struct ISpatialAudioClientVTbl
    query_interface : Proc(ISpatialAudioClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioClient*, UInt32)
    release : Proc(ISpatialAudioClient*, UInt32)
    get_static_object_position : Proc(ISpatialAudioClient*, AudioObjectType, Float32*, Float32*, Float32*, HRESULT)
    get_native_static_object_type_mask : Proc(ISpatialAudioClient*, AudioObjectType*, HRESULT)
    get_max_dynamic_object_count : Proc(ISpatialAudioClient*, UInt32*, HRESULT)
    get_supported_audio_object_format_enumerator : Proc(ISpatialAudioClient*, IAudioFormatEnumerator*, HRESULT)
    get_max_frame_count : Proc(ISpatialAudioClient*, WAVEFORMATEX*, UInt32*, HRESULT)
    is_audio_object_format_supported : Proc(ISpatialAudioClient*, WAVEFORMATEX*, HRESULT)
    is_spatial_audio_stream_available : Proc(ISpatialAudioClient*, Guid*, PROPVARIANT*, HRESULT)
    activate_spatial_audio_stream : Proc(ISpatialAudioClient*, PROPVARIANT*, Guid*, Void**, HRESULT)
  end

  ISpatialAudioClient_GUID = LibC::GUID.new("bbf8e066-aaaa-49be-9a4d-fd2a858ea27f")
  CLSID_ISpatialAudioClient = "bbf8e066-aaaa-49be-9a4d-fd2a858ea27f"
  struct ISpatialAudioClient
    lpVtbl : ISpatialAudioClientVTbl*
  end

  struct ISpatialAudioClient2VTbl
    query_interface : Proc(ISpatialAudioClient2*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioClient2*, UInt32)
    release : Proc(ISpatialAudioClient2*, UInt32)
    get_static_object_position : Proc(ISpatialAudioClient2*, AudioObjectType, Float32*, Float32*, Float32*, HRESULT)
    get_native_static_object_type_mask : Proc(ISpatialAudioClient2*, AudioObjectType*, HRESULT)
    get_max_dynamic_object_count : Proc(ISpatialAudioClient2*, UInt32*, HRESULT)
    get_supported_audio_object_format_enumerator : Proc(ISpatialAudioClient2*, IAudioFormatEnumerator*, HRESULT)
    get_max_frame_count : Proc(ISpatialAudioClient2*, WAVEFORMATEX*, UInt32*, HRESULT)
    is_audio_object_format_supported : Proc(ISpatialAudioClient2*, WAVEFORMATEX*, HRESULT)
    is_spatial_audio_stream_available : Proc(ISpatialAudioClient2*, Guid*, PROPVARIANT*, HRESULT)
    activate_spatial_audio_stream : Proc(ISpatialAudioClient2*, PROPVARIANT*, Guid*, Void**, HRESULT)
    is_offload_capable : Proc(ISpatialAudioClient2*, AUDIO_STREAM_CATEGORY, LibC::BOOL*, HRESULT)
    get_max_frame_count_for_category : Proc(ISpatialAudioClient2*, AUDIO_STREAM_CATEGORY, LibC::BOOL, WAVEFORMATEX*, UInt32*, HRESULT)
  end

  ISpatialAudioClient2_GUID = LibC::GUID.new("caabe452-a66a-4bee-a93e-e320463f6a53")
  CLSID_ISpatialAudioClient2 = "caabe452-a66a-4bee-a93e-e320463f6a53"
  struct ISpatialAudioClient2
    lpVtbl : ISpatialAudioClient2VTbl*
  end

  struct ISpatialAudioObjectForHrtfVTbl
    query_interface : Proc(ISpatialAudioObjectForHrtf*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectForHrtf*, UInt32)
    release : Proc(ISpatialAudioObjectForHrtf*, UInt32)
    get_buffer : Proc(ISpatialAudioObjectForHrtf*, UInt8**, UInt32*, HRESULT)
    set_end_of_stream : Proc(ISpatialAudioObjectForHrtf*, UInt32, HRESULT)
    is_active : Proc(ISpatialAudioObjectForHrtf*, LibC::BOOL*, HRESULT)
    get_audio_object_type : Proc(ISpatialAudioObjectForHrtf*, AudioObjectType*, HRESULT)
    set_position : Proc(ISpatialAudioObjectForHrtf*, Float32, Float32, Float32, HRESULT)
    set_gain : Proc(ISpatialAudioObjectForHrtf*, Float32, HRESULT)
    set_orientation : Proc(ISpatialAudioObjectForHrtf*, Float32**, HRESULT)
    set_environment : Proc(ISpatialAudioObjectForHrtf*, SpatialAudioHrtfEnvironmentType, HRESULT)
    set_distance_decay : Proc(ISpatialAudioObjectForHrtf*, SpatialAudioHrtfDistanceDecay*, HRESULT)
    set_directivity : Proc(ISpatialAudioObjectForHrtf*, SpatialAudioHrtfDirectivityUnion*, HRESULT)
  end

  ISpatialAudioObjectForHrtf_GUID = LibC::GUID.new("d7436ade-1978-4e14-aba0-555bd8eb83b4")
  CLSID_ISpatialAudioObjectForHrtf = "d7436ade-1978-4e14-aba0-555bd8eb83b4"
  struct ISpatialAudioObjectForHrtf
    lpVtbl : ISpatialAudioObjectForHrtfVTbl*
  end

  struct ISpatialAudioObjectRenderStreamForHrtfVTbl
    query_interface : Proc(ISpatialAudioObjectRenderStreamForHrtf*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32)
    release : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32)
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32*, HRESULT)
    get_service : Proc(ISpatialAudioObjectRenderStreamForHrtf*, Guid*, Void**, HRESULT)
    start : Proc(ISpatialAudioObjectRenderStreamForHrtf*, HRESULT)
    stop : Proc(ISpatialAudioObjectRenderStreamForHrtf*, HRESULT)
    reset : Proc(ISpatialAudioObjectRenderStreamForHrtf*, HRESULT)
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForHrtf*, UInt32*, UInt32*, HRESULT)
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForHrtf*, HRESULT)
    activate_spatial_audio_object_for_hrtf : Proc(ISpatialAudioObjectRenderStreamForHrtf*, AudioObjectType, ISpatialAudioObjectForHrtf*, HRESULT)
  end

  ISpatialAudioObjectRenderStreamForHrtf_GUID = LibC::GUID.new("e08deef9-5363-406e-9fdc-080ee247bbe0")
  CLSID_ISpatialAudioObjectRenderStreamForHrtf = "e08deef9-5363-406e-9fdc-080ee247bbe0"
  struct ISpatialAudioObjectRenderStreamForHrtf
    lpVtbl : ISpatialAudioObjectRenderStreamForHrtfVTbl*
  end

  struct IMMNotificationClientVTbl
    query_interface : Proc(IMMNotificationClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMMNotificationClient*, UInt32)
    release : Proc(IMMNotificationClient*, UInt32)
    on_device_state_changed : Proc(IMMNotificationClient*, LibC::LPWSTR, UInt32, HRESULT)
    on_device_added : Proc(IMMNotificationClient*, LibC::LPWSTR, HRESULT)
    on_device_removed : Proc(IMMNotificationClient*, LibC::LPWSTR, HRESULT)
    on_default_device_changed : Proc(IMMNotificationClient*, EDataFlow, ERole, LibC::LPWSTR, HRESULT)
    on_property_value_changed : Proc(IMMNotificationClient*, LibC::LPWSTR, PROPERTYKEY, HRESULT)
  end

  IMMNotificationClient_GUID = LibC::GUID.new("7991eec9-7e89-4d85-8390-6c703cec60c0")
  CLSID_IMMNotificationClient = "7991eec9-7e89-4d85-8390-6c703cec60c0"
  struct IMMNotificationClient
    lpVtbl : IMMNotificationClientVTbl*
  end

  struct IMMDeviceVTbl
    query_interface : Proc(IMMDevice*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMMDevice*, UInt32)
    release : Proc(IMMDevice*, UInt32)
    activate : Proc(IMMDevice*, Guid*, UInt32, PROPVARIANT*, Void**, HRESULT)
    open_property_store : Proc(IMMDevice*, UInt32, IPropertyStore*, HRESULT)
    get_id : Proc(IMMDevice*, LibC::LPWSTR*, HRESULT)
    get_state : Proc(IMMDevice*, UInt32*, HRESULT)
  end

  IMMDevice_GUID = LibC::GUID.new("d666063f-1587-4e43-81f1-b948e807363f")
  CLSID_IMMDevice = "d666063f-1587-4e43-81f1-b948e807363f"
  struct IMMDevice
    lpVtbl : IMMDeviceVTbl*
  end

  struct IMMDeviceCollectionVTbl
    query_interface : Proc(IMMDeviceCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMMDeviceCollection*, UInt32)
    release : Proc(IMMDeviceCollection*, UInt32)
    get_count : Proc(IMMDeviceCollection*, UInt32*, HRESULT)
    item : Proc(IMMDeviceCollection*, UInt32, IMMDevice*, HRESULT)
  end

  IMMDeviceCollection_GUID = LibC::GUID.new("0bd7a1be-7a1a-44db-8397-cc5392387b5e")
  CLSID_IMMDeviceCollection = "0bd7a1be-7a1a-44db-8397-cc5392387b5e"
  struct IMMDeviceCollection
    lpVtbl : IMMDeviceCollectionVTbl*
  end

  struct IMMEndpointVTbl
    query_interface : Proc(IMMEndpoint*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMMEndpoint*, UInt32)
    release : Proc(IMMEndpoint*, UInt32)
    get_data_flow : Proc(IMMEndpoint*, EDataFlow*, HRESULT)
  end

  IMMEndpoint_GUID = LibC::GUID.new("1be09788-6894-4089-8586-9a2a6c265ac5")
  CLSID_IMMEndpoint = "1be09788-6894-4089-8586-9a2a6c265ac5"
  struct IMMEndpoint
    lpVtbl : IMMEndpointVTbl*
  end

  struct IMMDeviceEnumeratorVTbl
    query_interface : Proc(IMMDeviceEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMMDeviceEnumerator*, UInt32)
    release : Proc(IMMDeviceEnumerator*, UInt32)
    enum_audio_endpoints : Proc(IMMDeviceEnumerator*, EDataFlow, UInt32, IMMDeviceCollection*, HRESULT)
    get_default_audio_endpoint : Proc(IMMDeviceEnumerator*, EDataFlow, ERole, IMMDevice*, HRESULT)
    get_device : Proc(IMMDeviceEnumerator*, LibC::LPWSTR, IMMDevice*, HRESULT)
    register_endpoint_notification_callback : Proc(IMMDeviceEnumerator*, IMMNotificationClient, HRESULT)
    unregister_endpoint_notification_callback : Proc(IMMDeviceEnumerator*, IMMNotificationClient, HRESULT)
  end

  IMMDeviceEnumerator_GUID = LibC::GUID.new("a95664d2-9614-4f35-a746-de8db63617e6")
  CLSID_IMMDeviceEnumerator = "a95664d2-9614-4f35-a746-de8db63617e6"
  struct IMMDeviceEnumerator
    lpVtbl : IMMDeviceEnumeratorVTbl*
  end

  struct IMMDeviceActivatorVTbl
    query_interface : Proc(IMMDeviceActivator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IMMDeviceActivator*, UInt32)
    release : Proc(IMMDeviceActivator*, UInt32)
    activate : Proc(IMMDeviceActivator*, Guid*, IMMDevice, PROPVARIANT*, Void**, HRESULT)
  end

  IMMDeviceActivator_GUID = LibC::GUID.new("3b0d0ea4-d0a9-4b0e-935b-09516746fac0")
  CLSID_IMMDeviceActivator = "3b0d0ea4-d0a9-4b0e-935b-09516746fac0"
  struct IMMDeviceActivator
    lpVtbl : IMMDeviceActivatorVTbl*
  end

  struct IActivateAudioInterfaceCompletionHandlerVTbl
    query_interface : Proc(IActivateAudioInterfaceCompletionHandler*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActivateAudioInterfaceCompletionHandler*, UInt32)
    release : Proc(IActivateAudioInterfaceCompletionHandler*, UInt32)
    activate_completed : Proc(IActivateAudioInterfaceCompletionHandler*, IActivateAudioInterfaceAsyncOperation, HRESULT)
  end

  IActivateAudioInterfaceCompletionHandler_GUID = LibC::GUID.new("41d949ab-9862-444a-80f6-c261334da5eb")
  CLSID_IActivateAudioInterfaceCompletionHandler = "41d949ab-9862-444a-80f6-c261334da5eb"
  struct IActivateAudioInterfaceCompletionHandler
    lpVtbl : IActivateAudioInterfaceCompletionHandlerVTbl*
  end

  struct IActivateAudioInterfaceAsyncOperationVTbl
    query_interface : Proc(IActivateAudioInterfaceAsyncOperation*, Guid*, Void**, HRESULT)
    add_ref : Proc(IActivateAudioInterfaceAsyncOperation*, UInt32)
    release : Proc(IActivateAudioInterfaceAsyncOperation*, UInt32)
    get_activate_result : Proc(IActivateAudioInterfaceAsyncOperation*, HRESULT*, IUnknown*, HRESULT)
  end

  IActivateAudioInterfaceAsyncOperation_GUID = LibC::GUID.new("72a22d78-cde4-431d-b8cc-843a71199b6d")
  CLSID_IActivateAudioInterfaceAsyncOperation = "72a22d78-cde4-431d-b8cc-843a71199b6d"
  struct IActivateAudioInterfaceAsyncOperation
    lpVtbl : IActivateAudioInterfaceAsyncOperationVTbl*
  end

  struct IAudioSystemEffectsPropertyChangeNotificationClientVTbl
    query_interface : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, UInt32)
    release : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, UInt32)
    on_property_changed : Proc(IAudioSystemEffectsPropertyChangeNotificationClient*, MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002, PROPERTYKEY, HRESULT)
  end

  IAudioSystemEffectsPropertyChangeNotificationClient_GUID = LibC::GUID.new("20049d40-56d5-400e-a2ef-385599feed49")
  CLSID_IAudioSystemEffectsPropertyChangeNotificationClient = "20049d40-56d5-400e-a2ef-385599feed49"
  struct IAudioSystemEffectsPropertyChangeNotificationClient
    lpVtbl : IAudioSystemEffectsPropertyChangeNotificationClientVTbl*
  end

  struct IAudioSystemEffectsPropertyStoreVTbl
    query_interface : Proc(IAudioSystemEffectsPropertyStore*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSystemEffectsPropertyStore*, UInt32)
    release : Proc(IAudioSystemEffectsPropertyStore*, UInt32)
    open_default_property_store : Proc(IAudioSystemEffectsPropertyStore*, UInt32, IPropertyStore*, HRESULT)
    open_user_property_store : Proc(IAudioSystemEffectsPropertyStore*, UInt32, IPropertyStore*, HRESULT)
    open_volatile_property_store : Proc(IAudioSystemEffectsPropertyStore*, UInt32, IPropertyStore*, HRESULT)
    reset_user_property_store : Proc(IAudioSystemEffectsPropertyStore*, HRESULT)
    reset_volatile_property_store : Proc(IAudioSystemEffectsPropertyStore*, HRESULT)
    register_property_change_notification : Proc(IAudioSystemEffectsPropertyStore*, IAudioSystemEffectsPropertyChangeNotificationClient, HRESULT)
    unregister_property_change_notification : Proc(IAudioSystemEffectsPropertyStore*, IAudioSystemEffectsPropertyChangeNotificationClient, HRESULT)
  end

  IAudioSystemEffectsPropertyStore_GUID = LibC::GUID.new("302ae7f9-d7e0-43e4-971b-1f8293613d2a")
  CLSID_IAudioSystemEffectsPropertyStore = "302ae7f9-d7e0-43e4-971b-1f8293613d2a"
  struct IAudioSystemEffectsPropertyStore
    lpVtbl : IAudioSystemEffectsPropertyStoreVTbl*
  end

  struct IPerChannelDbLevelVTbl
    query_interface : Proc(IPerChannelDbLevel*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPerChannelDbLevel*, UInt32)
    release : Proc(IPerChannelDbLevel*, UInt32)
    get_channel_count : Proc(IPerChannelDbLevel*, UInt32*, HRESULT)
    get_level_range : Proc(IPerChannelDbLevel*, UInt32, Float32*, Float32*, Float32*, HRESULT)
    get_level : Proc(IPerChannelDbLevel*, UInt32, Float32*, HRESULT)
    set_level : Proc(IPerChannelDbLevel*, UInt32, Float32, Guid*, HRESULT)
    set_level_uniform : Proc(IPerChannelDbLevel*, Float32, Guid*, HRESULT)
    set_level_all_channels : Proc(IPerChannelDbLevel*, Float32*, UInt32, Guid*, HRESULT)
  end

  IPerChannelDbLevel_GUID = LibC::GUID.new("c2f8e001-f205-4bc9-99bc-c13b1e048ccb")
  CLSID_IPerChannelDbLevel = "c2f8e001-f205-4bc9-99bc-c13b1e048ccb"
  struct IPerChannelDbLevel
    lpVtbl : IPerChannelDbLevelVTbl*
  end

  struct IAudioVolumeLevelVTbl
    query_interface : Proc(IAudioVolumeLevel*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioVolumeLevel*, UInt32)
    release : Proc(IAudioVolumeLevel*, UInt32)
    get_channel_count : Proc(IAudioVolumeLevel*, UInt32*, HRESULT)
    get_level_range : Proc(IAudioVolumeLevel*, UInt32, Float32*, Float32*, Float32*, HRESULT)
    get_level : Proc(IAudioVolumeLevel*, UInt32, Float32*, HRESULT)
    set_level : Proc(IAudioVolumeLevel*, UInt32, Float32, Guid*, HRESULT)
    set_level_uniform : Proc(IAudioVolumeLevel*, Float32, Guid*, HRESULT)
    set_level_all_channels : Proc(IAudioVolumeLevel*, Float32*, UInt32, Guid*, HRESULT)
  end

  IAudioVolumeLevel_GUID = LibC::GUID.new("7fb7b48f-531d-44a2-bcb3-5ad5a134b3dc")
  CLSID_IAudioVolumeLevel = "7fb7b48f-531d-44a2-bcb3-5ad5a134b3dc"
  struct IAudioVolumeLevel
    lpVtbl : IAudioVolumeLevelVTbl*
  end

  struct IAudioChannelConfigVTbl
    query_interface : Proc(IAudioChannelConfig*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioChannelConfig*, UInt32)
    release : Proc(IAudioChannelConfig*, UInt32)
    set_channel_config : Proc(IAudioChannelConfig*, UInt32, Guid*, HRESULT)
    get_channel_config : Proc(IAudioChannelConfig*, UInt32*, HRESULT)
  end

  IAudioChannelConfig_GUID = LibC::GUID.new("bb11c46f-ec28-493c-b88a-5db88062ce98")
  CLSID_IAudioChannelConfig = "bb11c46f-ec28-493c-b88a-5db88062ce98"
  struct IAudioChannelConfig
    lpVtbl : IAudioChannelConfigVTbl*
  end

  struct IAudioLoudnessVTbl
    query_interface : Proc(IAudioLoudness*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioLoudness*, UInt32)
    release : Proc(IAudioLoudness*, UInt32)
    get_enabled : Proc(IAudioLoudness*, LibC::BOOL*, HRESULT)
    set_enabled : Proc(IAudioLoudness*, LibC::BOOL, Guid*, HRESULT)
  end

  IAudioLoudness_GUID = LibC::GUID.new("7d8b1437-dd53-4350-9c1b-1ee2890bd938")
  CLSID_IAudioLoudness = "7d8b1437-dd53-4350-9c1b-1ee2890bd938"
  struct IAudioLoudness
    lpVtbl : IAudioLoudnessVTbl*
  end

  struct IAudioInputSelectorVTbl
    query_interface : Proc(IAudioInputSelector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioInputSelector*, UInt32)
    release : Proc(IAudioInputSelector*, UInt32)
    get_selection : Proc(IAudioInputSelector*, UInt32*, HRESULT)
    set_selection : Proc(IAudioInputSelector*, UInt32, Guid*, HRESULT)
  end

  IAudioInputSelector_GUID = LibC::GUID.new("4f03dc02-5e6e-4653-8f72-a030c123d598")
  CLSID_IAudioInputSelector = "4f03dc02-5e6e-4653-8f72-a030c123d598"
  struct IAudioInputSelector
    lpVtbl : IAudioInputSelectorVTbl*
  end

  struct IAudioOutputSelectorVTbl
    query_interface : Proc(IAudioOutputSelector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioOutputSelector*, UInt32)
    release : Proc(IAudioOutputSelector*, UInt32)
    get_selection : Proc(IAudioOutputSelector*, UInt32*, HRESULT)
    set_selection : Proc(IAudioOutputSelector*, UInt32, Guid*, HRESULT)
  end

  IAudioOutputSelector_GUID = LibC::GUID.new("bb515f69-94a7-429e-8b9c-271b3f11a3ab")
  CLSID_IAudioOutputSelector = "bb515f69-94a7-429e-8b9c-271b3f11a3ab"
  struct IAudioOutputSelector
    lpVtbl : IAudioOutputSelectorVTbl*
  end

  struct IAudioMuteVTbl
    query_interface : Proc(IAudioMute*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioMute*, UInt32)
    release : Proc(IAudioMute*, UInt32)
    set_mute : Proc(IAudioMute*, LibC::BOOL, Guid*, HRESULT)
    get_mute : Proc(IAudioMute*, LibC::BOOL*, HRESULT)
  end

  IAudioMute_GUID = LibC::GUID.new("df45aeea-b74a-4b6b-afad-2366b6aa012e")
  CLSID_IAudioMute = "df45aeea-b74a-4b6b-afad-2366b6aa012e"
  struct IAudioMute
    lpVtbl : IAudioMuteVTbl*
  end

  struct IAudioBassVTbl
    query_interface : Proc(IAudioBass*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioBass*, UInt32)
    release : Proc(IAudioBass*, UInt32)
    get_channel_count : Proc(IAudioBass*, UInt32*, HRESULT)
    get_level_range : Proc(IAudioBass*, UInt32, Float32*, Float32*, Float32*, HRESULT)
    get_level : Proc(IAudioBass*, UInt32, Float32*, HRESULT)
    set_level : Proc(IAudioBass*, UInt32, Float32, Guid*, HRESULT)
    set_level_uniform : Proc(IAudioBass*, Float32, Guid*, HRESULT)
    set_level_all_channels : Proc(IAudioBass*, Float32*, UInt32, Guid*, HRESULT)
  end

  IAudioBass_GUID = LibC::GUID.new("a2b1a1d9-4db3-425d-a2b2-bd335cb3e2e5")
  CLSID_IAudioBass = "a2b1a1d9-4db3-425d-a2b2-bd335cb3e2e5"
  struct IAudioBass
    lpVtbl : IAudioBassVTbl*
  end

  struct IAudioMidrangeVTbl
    query_interface : Proc(IAudioMidrange*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioMidrange*, UInt32)
    release : Proc(IAudioMidrange*, UInt32)
    get_channel_count : Proc(IAudioMidrange*, UInt32*, HRESULT)
    get_level_range : Proc(IAudioMidrange*, UInt32, Float32*, Float32*, Float32*, HRESULT)
    get_level : Proc(IAudioMidrange*, UInt32, Float32*, HRESULT)
    set_level : Proc(IAudioMidrange*, UInt32, Float32, Guid*, HRESULT)
    set_level_uniform : Proc(IAudioMidrange*, Float32, Guid*, HRESULT)
    set_level_all_channels : Proc(IAudioMidrange*, Float32*, UInt32, Guid*, HRESULT)
  end

  IAudioMidrange_GUID = LibC::GUID.new("5e54b6d7-b44b-40d9-9a9e-e691d9ce6edf")
  CLSID_IAudioMidrange = "5e54b6d7-b44b-40d9-9a9e-e691d9ce6edf"
  struct IAudioMidrange
    lpVtbl : IAudioMidrangeVTbl*
  end

  struct IAudioTrebleVTbl
    query_interface : Proc(IAudioTreble*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioTreble*, UInt32)
    release : Proc(IAudioTreble*, UInt32)
    get_channel_count : Proc(IAudioTreble*, UInt32*, HRESULT)
    get_level_range : Proc(IAudioTreble*, UInt32, Float32*, Float32*, Float32*, HRESULT)
    get_level : Proc(IAudioTreble*, UInt32, Float32*, HRESULT)
    set_level : Proc(IAudioTreble*, UInt32, Float32, Guid*, HRESULT)
    set_level_uniform : Proc(IAudioTreble*, Float32, Guid*, HRESULT)
    set_level_all_channels : Proc(IAudioTreble*, Float32*, UInt32, Guid*, HRESULT)
  end

  IAudioTreble_GUID = LibC::GUID.new("0a717812-694e-4907-b74b-bafa5cfdca7b")
  CLSID_IAudioTreble = "0a717812-694e-4907-b74b-bafa5cfdca7b"
  struct IAudioTreble
    lpVtbl : IAudioTrebleVTbl*
  end

  struct IAudioAutoGainControlVTbl
    query_interface : Proc(IAudioAutoGainControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioAutoGainControl*, UInt32)
    release : Proc(IAudioAutoGainControl*, UInt32)
    get_enabled : Proc(IAudioAutoGainControl*, LibC::BOOL*, HRESULT)
    set_enabled : Proc(IAudioAutoGainControl*, LibC::BOOL, Guid*, HRESULT)
  end

  IAudioAutoGainControl_GUID = LibC::GUID.new("85401fd4-6de4-4b9d-9869-2d6753a82f3c")
  CLSID_IAudioAutoGainControl = "85401fd4-6de4-4b9d-9869-2d6753a82f3c"
  struct IAudioAutoGainControl
    lpVtbl : IAudioAutoGainControlVTbl*
  end

  struct IAudioPeakMeterVTbl
    query_interface : Proc(IAudioPeakMeter*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioPeakMeter*, UInt32)
    release : Proc(IAudioPeakMeter*, UInt32)
    get_channel_count : Proc(IAudioPeakMeter*, UInt32*, HRESULT)
    get_level : Proc(IAudioPeakMeter*, UInt32, Float32*, HRESULT)
  end

  IAudioPeakMeter_GUID = LibC::GUID.new("dd79923c-0599-45e0-b8b6-c8df7db6e796")
  CLSID_IAudioPeakMeter = "dd79923c-0599-45e0-b8b6-c8df7db6e796"
  struct IAudioPeakMeter
    lpVtbl : IAudioPeakMeterVTbl*
  end

  struct IDeviceSpecificPropertyVTbl
    query_interface : Proc(IDeviceSpecificProperty*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeviceSpecificProperty*, UInt32)
    release : Proc(IDeviceSpecificProperty*, UInt32)
    get_type : Proc(IDeviceSpecificProperty*, UInt16*, HRESULT)
    get_value : Proc(IDeviceSpecificProperty*, Void*, UInt32*, HRESULT)
    set_value : Proc(IDeviceSpecificProperty*, Void*, UInt32, Guid*, HRESULT)
    get4_b_range : Proc(IDeviceSpecificProperty*, Int32*, Int32*, Int32*, HRESULT)
  end

  IDeviceSpecificProperty_GUID = LibC::GUID.new("3b22bcbf-2586-4af0-8583-205d391b807c")
  CLSID_IDeviceSpecificProperty = "3b22bcbf-2586-4af0-8583-205d391b807c"
  struct IDeviceSpecificProperty
    lpVtbl : IDeviceSpecificPropertyVTbl*
  end

  struct IPartsListVTbl
    query_interface : Proc(IPartsList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPartsList*, UInt32)
    release : Proc(IPartsList*, UInt32)
    get_count : Proc(IPartsList*, UInt32*, HRESULT)
    get_part : Proc(IPartsList*, UInt32, IPart*, HRESULT)
  end

  IPartsList_GUID = LibC::GUID.new("6daa848c-5eb0-45cc-aea5-998a2cda1ffb")
  CLSID_IPartsList = "6daa848c-5eb0-45cc-aea5-998a2cda1ffb"
  struct IPartsList
    lpVtbl : IPartsListVTbl*
  end

  struct IPartVTbl
    query_interface : Proc(IPart*, Guid*, Void**, HRESULT)
    add_ref : Proc(IPart*, UInt32)
    release : Proc(IPart*, UInt32)
    get_name : Proc(IPart*, LibC::LPWSTR*, HRESULT)
    get_local_id : Proc(IPart*, UInt32*, HRESULT)
    get_global_id : Proc(IPart*, LibC::LPWSTR*, HRESULT)
    get_part_type : Proc(IPart*, PartType*, HRESULT)
    get_sub_type : Proc(IPart*, Guid*, HRESULT)
    get_control_interface_count : Proc(IPart*, UInt32*, HRESULT)
    get_control_interface : Proc(IPart*, UInt32, IControlInterface*, HRESULT)
    enum_parts_incoming : Proc(IPart*, IPartsList*, HRESULT)
    enum_parts_outgoing : Proc(IPart*, IPartsList*, HRESULT)
    get_topology_object : Proc(IPart*, IDeviceTopology*, HRESULT)
    activate : Proc(IPart*, UInt32, Guid*, Void**, HRESULT)
    register_control_change_callback : Proc(IPart*, Guid*, IControlChangeNotify, HRESULT)
    unregister_control_change_callback : Proc(IPart*, IControlChangeNotify, HRESULT)
  end

  IPart_GUID = LibC::GUID.new("ae2de0e4-5bca-4f2d-aa46-5d13f8fdb3a9")
  CLSID_IPart = "ae2de0e4-5bca-4f2d-aa46-5d13f8fdb3a9"
  struct IPart
    lpVtbl : IPartVTbl*
  end

  struct IConnectorVTbl
    query_interface : Proc(IConnector*, Guid*, Void**, HRESULT)
    add_ref : Proc(IConnector*, UInt32)
    release : Proc(IConnector*, UInt32)
    get_type : Proc(IConnector*, ConnectorType*, HRESULT)
    get_data_flow : Proc(IConnector*, DataFlow*, HRESULT)
    connect_to : Proc(IConnector*, IConnector, HRESULT)
    disconnect : Proc(IConnector*, HRESULT)
    is_connected : Proc(IConnector*, LibC::BOOL*, HRESULT)
    get_connected_to : Proc(IConnector*, IConnector*, HRESULT)
    get_connector_id_connected_to : Proc(IConnector*, LibC::LPWSTR*, HRESULT)
    get_device_id_connected_to : Proc(IConnector*, LibC::LPWSTR*, HRESULT)
  end

  IConnector_GUID = LibC::GUID.new("9c2c4058-23f5-41de-877a-df3af236a09e")
  CLSID_IConnector = "9c2c4058-23f5-41de-877a-df3af236a09e"
  struct IConnector
    lpVtbl : IConnectorVTbl*
  end

  struct ISubunitVTbl
    query_interface : Proc(ISubunit*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISubunit*, UInt32)
    release : Proc(ISubunit*, UInt32)
  end

  ISubunit_GUID = LibC::GUID.new("82149a85-dba6-4487-86bb-ea8f7fefcc71")
  CLSID_ISubunit = "82149a85-dba6-4487-86bb-ea8f7fefcc71"
  struct ISubunit
    lpVtbl : ISubunitVTbl*
  end

  struct IControlInterfaceVTbl
    query_interface : Proc(IControlInterface*, Guid*, Void**, HRESULT)
    add_ref : Proc(IControlInterface*, UInt32)
    release : Proc(IControlInterface*, UInt32)
    get_name : Proc(IControlInterface*, LibC::LPWSTR*, HRESULT)
    get_iid : Proc(IControlInterface*, Guid*, HRESULT)
  end

  IControlInterface_GUID = LibC::GUID.new("45d37c3f-5140-444a-ae24-400789f3cbf3")
  CLSID_IControlInterface = "45d37c3f-5140-444a-ae24-400789f3cbf3"
  struct IControlInterface
    lpVtbl : IControlInterfaceVTbl*
  end

  struct IControlChangeNotifyVTbl
    query_interface : Proc(IControlChangeNotify*, Guid*, Void**, HRESULT)
    add_ref : Proc(IControlChangeNotify*, UInt32)
    release : Proc(IControlChangeNotify*, UInt32)
    on_notify : Proc(IControlChangeNotify*, UInt32, Guid*, HRESULT)
  end

  IControlChangeNotify_GUID = LibC::GUID.new("a09513ed-c709-4d21-bd7b-5f34c47f3947")
  CLSID_IControlChangeNotify = "a09513ed-c709-4d21-bd7b-5f34c47f3947"
  struct IControlChangeNotify
    lpVtbl : IControlChangeNotifyVTbl*
  end

  struct IDeviceTopologyVTbl
    query_interface : Proc(IDeviceTopology*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDeviceTopology*, UInt32)
    release : Proc(IDeviceTopology*, UInt32)
    get_connector_count : Proc(IDeviceTopology*, UInt32*, HRESULT)
    get_connector : Proc(IDeviceTopology*, UInt32, IConnector*, HRESULT)
    get_subunit_count : Proc(IDeviceTopology*, UInt32*, HRESULT)
    get_subunit : Proc(IDeviceTopology*, UInt32, ISubunit*, HRESULT)
    get_part_by_id : Proc(IDeviceTopology*, UInt32, IPart*, HRESULT)
    get_device_id : Proc(IDeviceTopology*, LibC::LPWSTR*, HRESULT)
    get_signal_path : Proc(IDeviceTopology*, IPart, IPart, LibC::BOOL, IPartsList*, HRESULT)
  end

  IDeviceTopology_GUID = LibC::GUID.new("2a07407e-6497-4a18-9787-32f79bd0d98f")
  CLSID_IDeviceTopology = "2a07407e-6497-4a18-9787-32f79bd0d98f"
  struct IDeviceTopology
    lpVtbl : IDeviceTopologyVTbl*
  end

  struct IAudioSessionEventsVTbl
    query_interface : Proc(IAudioSessionEvents*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionEvents*, UInt32)
    release : Proc(IAudioSessionEvents*, UInt32)
    on_display_name_changed : Proc(IAudioSessionEvents*, LibC::LPWSTR, Guid*, HRESULT)
    on_icon_path_changed : Proc(IAudioSessionEvents*, LibC::LPWSTR, Guid*, HRESULT)
    on_simple_volume_changed : Proc(IAudioSessionEvents*, Float32, LibC::BOOL, Guid*, HRESULT)
    on_channel_volume_changed : Proc(IAudioSessionEvents*, UInt32, Float32*, UInt32, Guid*, HRESULT)
    on_grouping_param_changed : Proc(IAudioSessionEvents*, Guid*, Guid*, HRESULT)
    on_state_changed : Proc(IAudioSessionEvents*, AudioSessionState, HRESULT)
    on_session_disconnected : Proc(IAudioSessionEvents*, AudioSessionDisconnectReason, HRESULT)
  end

  IAudioSessionEvents_GUID = LibC::GUID.new("24918acc-64b3-37c1-8ca9-74a66e9957a8")
  CLSID_IAudioSessionEvents = "24918acc-64b3-37c1-8ca9-74a66e9957a8"
  struct IAudioSessionEvents
    lpVtbl : IAudioSessionEventsVTbl*
  end

  struct IAudioSessionControlVTbl
    query_interface : Proc(IAudioSessionControl*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionControl*, UInt32)
    release : Proc(IAudioSessionControl*, UInt32)
    get_state : Proc(IAudioSessionControl*, AudioSessionState*, HRESULT)
    get_display_name : Proc(IAudioSessionControl*, LibC::LPWSTR*, HRESULT)
    set_display_name : Proc(IAudioSessionControl*, LibC::LPWSTR, Guid*, HRESULT)
    get_icon_path : Proc(IAudioSessionControl*, LibC::LPWSTR*, HRESULT)
    set_icon_path : Proc(IAudioSessionControl*, LibC::LPWSTR, Guid*, HRESULT)
    get_grouping_param : Proc(IAudioSessionControl*, Guid*, HRESULT)
    set_grouping_param : Proc(IAudioSessionControl*, Guid*, Guid*, HRESULT)
    register_audio_session_notification : Proc(IAudioSessionControl*, IAudioSessionEvents, HRESULT)
    unregister_audio_session_notification : Proc(IAudioSessionControl*, IAudioSessionEvents, HRESULT)
  end

  IAudioSessionControl_GUID = LibC::GUID.new("f4b1a599-7266-4319-a8ca-e70acb11e8cd")
  CLSID_IAudioSessionControl = "f4b1a599-7266-4319-a8ca-e70acb11e8cd"
  struct IAudioSessionControl
    lpVtbl : IAudioSessionControlVTbl*
  end

  struct IAudioSessionControl2VTbl
    query_interface : Proc(IAudioSessionControl2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionControl2*, UInt32)
    release : Proc(IAudioSessionControl2*, UInt32)
    get_state : Proc(IAudioSessionControl2*, AudioSessionState*, HRESULT)
    get_display_name : Proc(IAudioSessionControl2*, LibC::LPWSTR*, HRESULT)
    set_display_name : Proc(IAudioSessionControl2*, LibC::LPWSTR, Guid*, HRESULT)
    get_icon_path : Proc(IAudioSessionControl2*, LibC::LPWSTR*, HRESULT)
    set_icon_path : Proc(IAudioSessionControl2*, LibC::LPWSTR, Guid*, HRESULT)
    get_grouping_param : Proc(IAudioSessionControl2*, Guid*, HRESULT)
    set_grouping_param : Proc(IAudioSessionControl2*, Guid*, Guid*, HRESULT)
    register_audio_session_notification : Proc(IAudioSessionControl2*, IAudioSessionEvents, HRESULT)
    unregister_audio_session_notification : Proc(IAudioSessionControl2*, IAudioSessionEvents, HRESULT)
    get_session_identifier : Proc(IAudioSessionControl2*, LibC::LPWSTR*, HRESULT)
    get_session_instance_identifier : Proc(IAudioSessionControl2*, LibC::LPWSTR*, HRESULT)
    get_process_id : Proc(IAudioSessionControl2*, UInt32*, HRESULT)
    is_system_sounds_session : Proc(IAudioSessionControl2*, HRESULT)
    set_ducking_preference : Proc(IAudioSessionControl2*, LibC::BOOL, HRESULT)
  end

  IAudioSessionControl2_GUID = LibC::GUID.new("bfb7ff88-7239-4fc9-8fa2-07c950be9c6d")
  CLSID_IAudioSessionControl2 = "bfb7ff88-7239-4fc9-8fa2-07c950be9c6d"
  struct IAudioSessionControl2
    lpVtbl : IAudioSessionControl2VTbl*
  end

  struct IAudioSessionManagerVTbl
    query_interface : Proc(IAudioSessionManager*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionManager*, UInt32)
    release : Proc(IAudioSessionManager*, UInt32)
    get_audio_session_control : Proc(IAudioSessionManager*, Guid*, UInt32, IAudioSessionControl*, HRESULT)
    get_simple_audio_volume : Proc(IAudioSessionManager*, Guid*, UInt32, ISimpleAudioVolume*, HRESULT)
  end

  IAudioSessionManager_GUID = LibC::GUID.new("bfa971f1-4d5e-40bb-935e-967039bfbee4")
  CLSID_IAudioSessionManager = "bfa971f1-4d5e-40bb-935e-967039bfbee4"
  struct IAudioSessionManager
    lpVtbl : IAudioSessionManagerVTbl*
  end

  struct IAudioVolumeDuckNotificationVTbl
    query_interface : Proc(IAudioVolumeDuckNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioVolumeDuckNotification*, UInt32)
    release : Proc(IAudioVolumeDuckNotification*, UInt32)
    on_volume_duck_notification : Proc(IAudioVolumeDuckNotification*, LibC::LPWSTR, UInt32, HRESULT)
    on_volume_unduck_notification : Proc(IAudioVolumeDuckNotification*, LibC::LPWSTR, HRESULT)
  end

  IAudioVolumeDuckNotification_GUID = LibC::GUID.new("c3b284d4-6d39-4359-b3cf-b56ddb3bb39c")
  CLSID_IAudioVolumeDuckNotification = "c3b284d4-6d39-4359-b3cf-b56ddb3bb39c"
  struct IAudioVolumeDuckNotification
    lpVtbl : IAudioVolumeDuckNotificationVTbl*
  end

  struct IAudioSessionNotificationVTbl
    query_interface : Proc(IAudioSessionNotification*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionNotification*, UInt32)
    release : Proc(IAudioSessionNotification*, UInt32)
    on_session_created : Proc(IAudioSessionNotification*, IAudioSessionControl, HRESULT)
  end

  IAudioSessionNotification_GUID = LibC::GUID.new("641dd20b-4d41-49cc-aba3-174b9477bb08")
  CLSID_IAudioSessionNotification = "641dd20b-4d41-49cc-aba3-174b9477bb08"
  struct IAudioSessionNotification
    lpVtbl : IAudioSessionNotificationVTbl*
  end

  struct IAudioSessionEnumeratorVTbl
    query_interface : Proc(IAudioSessionEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionEnumerator*, UInt32)
    release : Proc(IAudioSessionEnumerator*, UInt32)
    get_count : Proc(IAudioSessionEnumerator*, Int32*, HRESULT)
    get_session : Proc(IAudioSessionEnumerator*, Int32, IAudioSessionControl*, HRESULT)
  end

  IAudioSessionEnumerator_GUID = LibC::GUID.new("e2f5bb11-0570-40ca-acdd-3aa01277dee8")
  CLSID_IAudioSessionEnumerator = "e2f5bb11-0570-40ca-acdd-3aa01277dee8"
  struct IAudioSessionEnumerator
    lpVtbl : IAudioSessionEnumeratorVTbl*
  end

  struct IAudioSessionManager2VTbl
    query_interface : Proc(IAudioSessionManager2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioSessionManager2*, UInt32)
    release : Proc(IAudioSessionManager2*, UInt32)
    get_audio_session_control : Proc(IAudioSessionManager2*, Guid*, UInt32, IAudioSessionControl*, HRESULT)
    get_simple_audio_volume : Proc(IAudioSessionManager2*, Guid*, UInt32, ISimpleAudioVolume*, HRESULT)
    get_session_enumerator : Proc(IAudioSessionManager2*, IAudioSessionEnumerator*, HRESULT)
    register_session_notification : Proc(IAudioSessionManager2*, IAudioSessionNotification, HRESULT)
    unregister_session_notification : Proc(IAudioSessionManager2*, IAudioSessionNotification, HRESULT)
    register_duck_notification : Proc(IAudioSessionManager2*, LibC::LPWSTR, IAudioVolumeDuckNotification, HRESULT)
    unregister_duck_notification : Proc(IAudioSessionManager2*, IAudioVolumeDuckNotification, HRESULT)
  end

  IAudioSessionManager2_GUID = LibC::GUID.new("77aa99a0-1bd6-484f-8bc7-2c654c9a9b6f")
  CLSID_IAudioSessionManager2 = "77aa99a0-1bd6-484f-8bc7-2c654c9a9b6f"
  struct IAudioSessionManager2
    lpVtbl : IAudioSessionManager2VTbl*
  end

  struct ISpatialAudioMetadataItemsVTbl
    query_interface : Proc(ISpatialAudioMetadataItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioMetadataItems*, UInt32)
    release : Proc(ISpatialAudioMetadataItems*, UInt32)
    get_frame_count : Proc(ISpatialAudioMetadataItems*, UInt16*, HRESULT)
    get_item_count : Proc(ISpatialAudioMetadataItems*, UInt16*, HRESULT)
    get_max_item_count : Proc(ISpatialAudioMetadataItems*, UInt16*, HRESULT)
    get_max_value_buffer_length : Proc(ISpatialAudioMetadataItems*, UInt32*, HRESULT)
    get_info : Proc(ISpatialAudioMetadataItems*, SpatialAudioMetadataItemsInfo*, HRESULT)
  end

  ISpatialAudioMetadataItems_GUID = LibC::GUID.new("bcd7c78f-3098-4f22-b547-a2f25a381269")
  CLSID_ISpatialAudioMetadataItems = "bcd7c78f-3098-4f22-b547-a2f25a381269"
  struct ISpatialAudioMetadataItems
    lpVtbl : ISpatialAudioMetadataItemsVTbl*
  end

  struct ISpatialAudioMetadataWriterVTbl
    query_interface : Proc(ISpatialAudioMetadataWriter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioMetadataWriter*, UInt32)
    release : Proc(ISpatialAudioMetadataWriter*, UInt32)
    open : Proc(ISpatialAudioMetadataWriter*, ISpatialAudioMetadataItems, HRESULT)
    write_next_item : Proc(ISpatialAudioMetadataWriter*, UInt16, HRESULT)
    write_next_item_command : Proc(ISpatialAudioMetadataWriter*, UInt8, Void*, UInt32, HRESULT)
    close : Proc(ISpatialAudioMetadataWriter*, HRESULT)
  end

  ISpatialAudioMetadataWriter_GUID = LibC::GUID.new("1b17ca01-2955-444d-a430-537dc589a844")
  CLSID_ISpatialAudioMetadataWriter = "1b17ca01-2955-444d-a430-537dc589a844"
  struct ISpatialAudioMetadataWriter
    lpVtbl : ISpatialAudioMetadataWriterVTbl*
  end

  struct ISpatialAudioMetadataReaderVTbl
    query_interface : Proc(ISpatialAudioMetadataReader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioMetadataReader*, UInt32)
    release : Proc(ISpatialAudioMetadataReader*, UInt32)
    open : Proc(ISpatialAudioMetadataReader*, ISpatialAudioMetadataItems, HRESULT)
    read_next_item : Proc(ISpatialAudioMetadataReader*, UInt8*, UInt16*, HRESULT)
    read_next_item_command : Proc(ISpatialAudioMetadataReader*, UInt8*, Void*, UInt32, UInt32*, HRESULT)
    close : Proc(ISpatialAudioMetadataReader*, HRESULT)
  end

  ISpatialAudioMetadataReader_GUID = LibC::GUID.new("b78e86a2-31d9-4c32-94d2-7df40fc7ebec")
  CLSID_ISpatialAudioMetadataReader = "b78e86a2-31d9-4c32-94d2-7df40fc7ebec"
  struct ISpatialAudioMetadataReader
    lpVtbl : ISpatialAudioMetadataReaderVTbl*
  end

  struct ISpatialAudioMetadataCopierVTbl
    query_interface : Proc(ISpatialAudioMetadataCopier*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioMetadataCopier*, UInt32)
    release : Proc(ISpatialAudioMetadataCopier*, UInt32)
    open : Proc(ISpatialAudioMetadataCopier*, ISpatialAudioMetadataItems, HRESULT)
    copy_metadata_for_frames : Proc(ISpatialAudioMetadataCopier*, UInt16, SpatialAudioMetadataCopyMode, ISpatialAudioMetadataItems, UInt16*, HRESULT)
    close : Proc(ISpatialAudioMetadataCopier*, HRESULT)
  end

  ISpatialAudioMetadataCopier_GUID = LibC::GUID.new("d224b233-e251-4fd0-9ca2-d5ecf9a68404")
  CLSID_ISpatialAudioMetadataCopier = "d224b233-e251-4fd0-9ca2-d5ecf9a68404"
  struct ISpatialAudioMetadataCopier
    lpVtbl : ISpatialAudioMetadataCopierVTbl*
  end

  struct ISpatialAudioMetadataItemsBufferVTbl
    query_interface : Proc(ISpatialAudioMetadataItemsBuffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioMetadataItemsBuffer*, UInt32)
    release : Proc(ISpatialAudioMetadataItemsBuffer*, UInt32)
    attach_to_buffer : Proc(ISpatialAudioMetadataItemsBuffer*, UInt8*, UInt32, HRESULT)
    attach_to_populated_buffer : Proc(ISpatialAudioMetadataItemsBuffer*, UInt8*, UInt32, HRESULT)
    detach_buffer : Proc(ISpatialAudioMetadataItemsBuffer*, HRESULT)
  end

  ISpatialAudioMetadataItemsBuffer_GUID = LibC::GUID.new("42640a16-e1bd-42d9-9ff6-031ab71a2dba")
  CLSID_ISpatialAudioMetadataItemsBuffer = "42640a16-e1bd-42d9-9ff6-031ab71a2dba"
  struct ISpatialAudioMetadataItemsBuffer
    lpVtbl : ISpatialAudioMetadataItemsBufferVTbl*
  end

  struct ISpatialAudioMetadataClientVTbl
    query_interface : Proc(ISpatialAudioMetadataClient*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioMetadataClient*, UInt32)
    release : Proc(ISpatialAudioMetadataClient*, UInt32)
    activate_spatial_audio_metadata_items : Proc(ISpatialAudioMetadataClient*, UInt16, UInt16, ISpatialAudioMetadataItemsBuffer*, ISpatialAudioMetadataItems*, HRESULT)
    get_spatial_audio_metadata_items_buffer_length : Proc(ISpatialAudioMetadataClient*, UInt16, UInt32*, HRESULT)
    activate_spatial_audio_metadata_writer : Proc(ISpatialAudioMetadataClient*, SpatialAudioMetadataWriterOverflowMode, ISpatialAudioMetadataWriter*, HRESULT)
    activate_spatial_audio_metadata_copier : Proc(ISpatialAudioMetadataClient*, ISpatialAudioMetadataCopier*, HRESULT)
    activate_spatial_audio_metadata_reader : Proc(ISpatialAudioMetadataClient*, ISpatialAudioMetadataReader*, HRESULT)
  end

  ISpatialAudioMetadataClient_GUID = LibC::GUID.new("777d4a3b-f6ff-4a26-85dc-68d7cdeda1d4")
  CLSID_ISpatialAudioMetadataClient = "777d4a3b-f6ff-4a26-85dc-68d7cdeda1d4"
  struct ISpatialAudioMetadataClient
    lpVtbl : ISpatialAudioMetadataClientVTbl*
  end

  struct ISpatialAudioObjectForMetadataCommandsVTbl
    query_interface : Proc(ISpatialAudioObjectForMetadataCommands*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectForMetadataCommands*, UInt32)
    release : Proc(ISpatialAudioObjectForMetadataCommands*, UInt32)
    get_buffer : Proc(ISpatialAudioObjectForMetadataCommands*, UInt8**, UInt32*, HRESULT)
    set_end_of_stream : Proc(ISpatialAudioObjectForMetadataCommands*, UInt32, HRESULT)
    is_active : Proc(ISpatialAudioObjectForMetadataCommands*, LibC::BOOL*, HRESULT)
    get_audio_object_type : Proc(ISpatialAudioObjectForMetadataCommands*, AudioObjectType*, HRESULT)
    write_next_metadata_command : Proc(ISpatialAudioObjectForMetadataCommands*, UInt8, Void*, UInt32, HRESULT)
  end

  ISpatialAudioObjectForMetadataCommands_GUID = LibC::GUID.new("0df2c94b-f5f9-472d-af6b-c46e0ac9cd05")
  CLSID_ISpatialAudioObjectForMetadataCommands = "0df2c94b-f5f9-472d-af6b-c46e0ac9cd05"
  struct ISpatialAudioObjectForMetadataCommands
    lpVtbl : ISpatialAudioObjectForMetadataCommandsVTbl*
  end

  struct ISpatialAudioObjectForMetadataItemsVTbl
    query_interface : Proc(ISpatialAudioObjectForMetadataItems*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectForMetadataItems*, UInt32)
    release : Proc(ISpatialAudioObjectForMetadataItems*, UInt32)
    get_buffer : Proc(ISpatialAudioObjectForMetadataItems*, UInt8**, UInt32*, HRESULT)
    set_end_of_stream : Proc(ISpatialAudioObjectForMetadataItems*, UInt32, HRESULT)
    is_active : Proc(ISpatialAudioObjectForMetadataItems*, LibC::BOOL*, HRESULT)
    get_audio_object_type : Proc(ISpatialAudioObjectForMetadataItems*, AudioObjectType*, HRESULT)
    get_spatial_audio_metadata_items : Proc(ISpatialAudioObjectForMetadataItems*, ISpatialAudioMetadataItems*, HRESULT)
  end

  ISpatialAudioObjectForMetadataItems_GUID = LibC::GUID.new("ddea49ff-3bc0-4377-8aad-9fbcfd808566")
  CLSID_ISpatialAudioObjectForMetadataItems = "ddea49ff-3bc0-4377-8aad-9fbcfd808566"
  struct ISpatialAudioObjectForMetadataItems
    lpVtbl : ISpatialAudioObjectForMetadataItemsVTbl*
  end

  struct ISpatialAudioObjectRenderStreamForMetadataVTbl
    query_interface : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Guid*, Void**, HRESULT)
    add_ref : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32)
    release : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32)
    get_available_dynamic_object_count : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32*, HRESULT)
    get_service : Proc(ISpatialAudioObjectRenderStreamForMetadata*, Guid*, Void**, HRESULT)
    start : Proc(ISpatialAudioObjectRenderStreamForMetadata*, HRESULT)
    stop : Proc(ISpatialAudioObjectRenderStreamForMetadata*, HRESULT)
    reset : Proc(ISpatialAudioObjectRenderStreamForMetadata*, HRESULT)
    begin_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForMetadata*, UInt32*, UInt32*, HRESULT)
    end_updating_audio_objects : Proc(ISpatialAudioObjectRenderStreamForMetadata*, HRESULT)
    activate_spatial_audio_object_for_metadata_commands : Proc(ISpatialAudioObjectRenderStreamForMetadata*, AudioObjectType, ISpatialAudioObjectForMetadataCommands*, HRESULT)
    activate_spatial_audio_object_for_metadata_items : Proc(ISpatialAudioObjectRenderStreamForMetadata*, AudioObjectType, ISpatialAudioObjectForMetadataItems*, HRESULT)
  end

  ISpatialAudioObjectRenderStreamForMetadata_GUID = LibC::GUID.new("bbc9c907-48d5-4a2e-a0c7-f7f0d67c1fb1")
  CLSID_ISpatialAudioObjectRenderStreamForMetadata = "bbc9c907-48d5-4a2e-a0c7-f7f0d67c1fb1"
  struct ISpatialAudioObjectRenderStreamForMetadata
    lpVtbl : ISpatialAudioObjectRenderStreamForMetadataVTbl*
  end

  struct IAudioStateMonitorVTbl
    query_interface : Proc(IAudioStateMonitor*, Guid*, Void**, HRESULT)
    add_ref : Proc(IAudioStateMonitor*, UInt32)
    release : Proc(IAudioStateMonitor*, UInt32)
    register_callback : Proc(IAudioStateMonitor*, PAudioStateMonitorCallback, Void*, Int64*, HRESULT)
    unregister_callback : Proc(IAudioStateMonitor*, Int64, Void)
    get_sound_level : Proc(IAudioStateMonitor*, AudioStateMonitorSoundLevel)
  end

  IAudioStateMonitor_GUID = LibC::GUID.new("63bd8738-e30d-4c77-bf5c-834e87c657e2")
  CLSID_IAudioStateMonitor = "63bd8738-e30d-4c77-bf5c-834e87c657e2"
  struct IAudioStateMonitor
    lpVtbl : IAudioStateMonitorVTbl*
  end


  # Params # lpmessagefilter : IMessageFilter [In],lplpmessagefilter : IMessageFilter* [In]
  fun CoRegisterMessageFilter(lpmessagefilter : IMessageFilter, lplpmessagefilter : IMessageFilter*) : HRESULT

  # Params # pszsound : PSTR [In],fusound : UInt32 [In]
  fun sndPlaySoundA(pszsound : PSTR, fusound : UInt32) : LibC::BOOL

  # Params # pszsound : LibC::LPWSTR [In],fusound : UInt32 [In]
  fun sndPlaySoundW(pszsound : LibC::LPWSTR, fusound : UInt32) : LibC::BOOL

  # Params # pszsound : PSTR [In],hmod : HINSTANCE [In],fdwsound : UInt32 [In]
  fun PlaySoundA(pszsound : PSTR, hmod : HINSTANCE, fdwsound : UInt32) : LibC::BOOL

  # Params # pszsound : LibC::LPWSTR [In],hmod : HINSTANCE [In],fdwsound : UInt32 [In]
  fun PlaySoundW(pszsound : LibC::LPWSTR, hmod : HINSTANCE, fdwsound : UInt32) : LibC::BOOL

  # Params # 
  fun waveOutGetNumDevs : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pwoc : WAVEOUTCAPSA* [In],cbwoc : UInt32 [In]
  fun waveOutGetDevCapsA(udeviceid : LibC::UINT_PTR, pwoc : WAVEOUTCAPSA*, cbwoc : UInt32) : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pwoc : WAVEOUTCAPSW* [In],cbwoc : UInt32 [In]
  fun waveOutGetDevCapsW(udeviceid : LibC::UINT_PTR, pwoc : WAVEOUTCAPSW*, cbwoc : UInt32) : UInt32

  # Params # hwo : HWAVEOUT [In],pdwvolume : UInt32* [In]
  fun waveOutGetVolume(hwo : HWAVEOUT, pdwvolume : UInt32*) : UInt32

  # Params # hwo : HWAVEOUT [In],dwvolume : UInt32 [In]
  fun waveOutSetVolume(hwo : HWAVEOUT, dwvolume : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : UInt8* [In],cchtext : UInt32 [In]
  fun waveOutGetErrorTextA(mmrerror : UInt32, psztext : UInt8*, cchtext : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : Char* [In],cchtext : UInt32 [In]
  fun waveOutGetErrorTextW(mmrerror : UInt32, psztext : Char*, cchtext : UInt32) : UInt32

  # Params # phwo : HWAVEOUT* [In],udeviceid : UInt32 [In],pwfx : WAVEFORMATEX* [In],dwcallback : LibC::UINT_PTR [In],dwinstance : LibC::UINT_PTR [In],fdwopen : MIDI_WAVE_OPEN_TYPE [In]
  fun waveOutOpen(phwo : HWAVEOUT*, udeviceid : UInt32, pwfx : WAVEFORMATEX*, dwcallback : LibC::UINT_PTR, dwinstance : LibC::UINT_PTR, fdwopen : MIDI_WAVE_OPEN_TYPE) : UInt32

  # Params # hwo : HWAVEOUT [In]
  fun waveOutClose(hwo : HWAVEOUT) : UInt32

  # Params # hwo : HWAVEOUT [In],pwh : WAVEHDR* [In],cbwh : UInt32 [In]
  fun waveOutPrepareHeader(hwo : HWAVEOUT, pwh : WAVEHDR*, cbwh : UInt32) : UInt32

  # Params # hwo : HWAVEOUT [In],pwh : WAVEHDR* [In],cbwh : UInt32 [In]
  fun waveOutUnprepareHeader(hwo : HWAVEOUT, pwh : WAVEHDR*, cbwh : UInt32) : UInt32

  # Params # hwo : HWAVEOUT [In],pwh : WAVEHDR* [In],cbwh : UInt32 [In]
  fun waveOutWrite(hwo : HWAVEOUT, pwh : WAVEHDR*, cbwh : UInt32) : UInt32

  # Params # hwo : HWAVEOUT [In]
  fun waveOutPause(hwo : HWAVEOUT) : UInt32

  # Params # hwo : HWAVEOUT [In]
  fun waveOutRestart(hwo : HWAVEOUT) : UInt32

  # Params # hwo : HWAVEOUT [In]
  fun waveOutReset(hwo : HWAVEOUT) : UInt32

  # Params # hwo : HWAVEOUT [In]
  fun waveOutBreakLoop(hwo : HWAVEOUT) : UInt32

  # Params # hwo : HWAVEOUT [In],pmmt : MMTIME* [In],cbmmt : UInt32 [In]
  fun waveOutGetPosition(hwo : HWAVEOUT, pmmt : MMTIME*, cbmmt : UInt32) : UInt32

  # Params # hwo : HWAVEOUT [In],pdwpitch : UInt32* [In]
  fun waveOutGetPitch(hwo : HWAVEOUT, pdwpitch : UInt32*) : UInt32

  # Params # hwo : HWAVEOUT [In],dwpitch : UInt32 [In]
  fun waveOutSetPitch(hwo : HWAVEOUT, dwpitch : UInt32) : UInt32

  # Params # hwo : HWAVEOUT [In],pdwrate : UInt32* [In]
  fun waveOutGetPlaybackRate(hwo : HWAVEOUT, pdwrate : UInt32*) : UInt32

  # Params # hwo : HWAVEOUT [In],dwrate : UInt32 [In]
  fun waveOutSetPlaybackRate(hwo : HWAVEOUT, dwrate : UInt32) : UInt32

  # Params # hwo : HWAVEOUT [In],pudeviceid : UInt32* [In]
  fun waveOutGetID(hwo : HWAVEOUT, pudeviceid : UInt32*) : UInt32

  # Params # hwo : HWAVEOUT [In],umsg : UInt32 [In],dw1 : LibC::UINT_PTR [In],dw2 : LibC::UINT_PTR [In]
  fun waveOutMessage(hwo : HWAVEOUT, umsg : UInt32, dw1 : LibC::UINT_PTR, dw2 : LibC::UINT_PTR) : UInt32

  # Params # 
  fun waveInGetNumDevs : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pwic : WAVEINCAPSA* [In],cbwic : UInt32 [In]
  fun waveInGetDevCapsA(udeviceid : LibC::UINT_PTR, pwic : WAVEINCAPSA*, cbwic : UInt32) : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pwic : WAVEINCAPSW* [In],cbwic : UInt32 [In]
  fun waveInGetDevCapsW(udeviceid : LibC::UINT_PTR, pwic : WAVEINCAPSW*, cbwic : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : UInt8* [In],cchtext : UInt32 [In]
  fun waveInGetErrorTextA(mmrerror : UInt32, psztext : UInt8*, cchtext : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : Char* [In],cchtext : UInt32 [In]
  fun waveInGetErrorTextW(mmrerror : UInt32, psztext : Char*, cchtext : UInt32) : UInt32

  # Params # phwi : HWAVEIN* [In],udeviceid : UInt32 [In],pwfx : WAVEFORMATEX* [In],dwcallback : LibC::UINT_PTR [In],dwinstance : LibC::UINT_PTR [In],fdwopen : MIDI_WAVE_OPEN_TYPE [In]
  fun waveInOpen(phwi : HWAVEIN*, udeviceid : UInt32, pwfx : WAVEFORMATEX*, dwcallback : LibC::UINT_PTR, dwinstance : LibC::UINT_PTR, fdwopen : MIDI_WAVE_OPEN_TYPE) : UInt32

  # Params # hwi : HWAVEIN [In]
  fun waveInClose(hwi : HWAVEIN) : UInt32

  # Params # hwi : HWAVEIN [In],pwh : WAVEHDR* [In],cbwh : UInt32 [In]
  fun waveInPrepareHeader(hwi : HWAVEIN, pwh : WAVEHDR*, cbwh : UInt32) : UInt32

  # Params # hwi : HWAVEIN [In],pwh : WAVEHDR* [In],cbwh : UInt32 [In]
  fun waveInUnprepareHeader(hwi : HWAVEIN, pwh : WAVEHDR*, cbwh : UInt32) : UInt32

  # Params # hwi : HWAVEIN [In],pwh : WAVEHDR* [In],cbwh : UInt32 [In]
  fun waveInAddBuffer(hwi : HWAVEIN, pwh : WAVEHDR*, cbwh : UInt32) : UInt32

  # Params # hwi : HWAVEIN [In]
  fun waveInStart(hwi : HWAVEIN) : UInt32

  # Params # hwi : HWAVEIN [In]
  fun waveInStop(hwi : HWAVEIN) : UInt32

  # Params # hwi : HWAVEIN [In]
  fun waveInReset(hwi : HWAVEIN) : UInt32

  # Params # hwi : HWAVEIN [In],pmmt : MMTIME* [In],cbmmt : UInt32 [In]
  fun waveInGetPosition(hwi : HWAVEIN, pmmt : MMTIME*, cbmmt : UInt32) : UInt32

  # Params # hwi : HWAVEIN [In],pudeviceid : UInt32* [In]
  fun waveInGetID(hwi : HWAVEIN, pudeviceid : UInt32*) : UInt32

  # Params # hwi : HWAVEIN [In],umsg : UInt32 [In],dw1 : LibC::UINT_PTR [In],dw2 : LibC::UINT_PTR [In]
  fun waveInMessage(hwi : HWAVEIN, umsg : UInt32, dw1 : LibC::UINT_PTR, dw2 : LibC::UINT_PTR) : UInt32

  # Params # 
  fun midiOutGetNumDevs : UInt32

  # Params # phms : HMIDISTRM* [In],pudeviceid : UInt32* [In],cmidi : UInt32 [In],dwcallback : LibC::UINT_PTR [In],dwinstance : LibC::UINT_PTR [In],fdwopen : UInt32 [In]
  fun midiStreamOpen(phms : HMIDISTRM*, pudeviceid : UInt32*, cmidi : UInt32, dwcallback : LibC::UINT_PTR, dwinstance : LibC::UINT_PTR, fdwopen : UInt32) : UInt32

  # Params # hms : HMIDISTRM [In]
  fun midiStreamClose(hms : HMIDISTRM) : UInt32

  # Params # hms : HMIDISTRM [In],lppropdata : UInt8* [In],dwproperty : UInt32 [In]
  fun midiStreamProperty(hms : HMIDISTRM, lppropdata : UInt8*, dwproperty : UInt32) : UInt32

  # Params # hms : HMIDISTRM [In],lpmmt : MMTIME* [In],cbmmt : UInt32 [In]
  fun midiStreamPosition(hms : HMIDISTRM, lpmmt : MMTIME*, cbmmt : UInt32) : UInt32

  # Params # hms : HMIDISTRM [In],pmh : MIDIHDR* [In],cbmh : UInt32 [In]
  fun midiStreamOut(hms : HMIDISTRM, pmh : MIDIHDR*, cbmh : UInt32) : UInt32

  # Params # hms : HMIDISTRM [In]
  fun midiStreamPause(hms : HMIDISTRM) : UInt32

  # Params # hms : HMIDISTRM [In]
  fun midiStreamRestart(hms : HMIDISTRM) : UInt32

  # Params # hms : HMIDISTRM [In]
  fun midiStreamStop(hms : HMIDISTRM) : UInt32

  # Params # hmi : HMIDI [In],hmo : HMIDIOUT [In],preserved : Void* [In]
  fun midiConnect(hmi : HMIDI, hmo : HMIDIOUT, preserved : Void*) : UInt32

  # Params # hmi : HMIDI [In],hmo : HMIDIOUT [In],preserved : Void* [In]
  fun midiDisconnect(hmi : HMIDI, hmo : HMIDIOUT, preserved : Void*) : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pmoc : MIDIOUTCAPSA* [In],cbmoc : UInt32 [In]
  fun midiOutGetDevCapsA(udeviceid : LibC::UINT_PTR, pmoc : MIDIOUTCAPSA*, cbmoc : UInt32) : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pmoc : MIDIOUTCAPSW* [In],cbmoc : UInt32 [In]
  fun midiOutGetDevCapsW(udeviceid : LibC::UINT_PTR, pmoc : MIDIOUTCAPSW*, cbmoc : UInt32) : UInt32

  # Params # hmo : HMIDIOUT [In],pdwvolume : UInt32* [In]
  fun midiOutGetVolume(hmo : HMIDIOUT, pdwvolume : UInt32*) : UInt32

  # Params # hmo : HMIDIOUT [In],dwvolume : UInt32 [In]
  fun midiOutSetVolume(hmo : HMIDIOUT, dwvolume : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : UInt8* [In],cchtext : UInt32 [In]
  fun midiOutGetErrorTextA(mmrerror : UInt32, psztext : UInt8*, cchtext : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : Char* [In],cchtext : UInt32 [In]
  fun midiOutGetErrorTextW(mmrerror : UInt32, psztext : Char*, cchtext : UInt32) : UInt32

  # Params # phmo : HMIDIOUT* [In],udeviceid : UInt32 [In],dwcallback : LibC::UINT_PTR [In],dwinstance : LibC::UINT_PTR [In],fdwopen : MIDI_WAVE_OPEN_TYPE [In]
  fun midiOutOpen(phmo : HMIDIOUT*, udeviceid : UInt32, dwcallback : LibC::UINT_PTR, dwinstance : LibC::UINT_PTR, fdwopen : MIDI_WAVE_OPEN_TYPE) : UInt32

  # Params # hmo : HMIDIOUT [In]
  fun midiOutClose(hmo : HMIDIOUT) : UInt32

  # Params # hmo : HMIDIOUT [In],pmh : MIDIHDR* [In],cbmh : UInt32 [In]
  fun midiOutPrepareHeader(hmo : HMIDIOUT, pmh : MIDIHDR*, cbmh : UInt32) : UInt32

  # Params # hmo : HMIDIOUT [In],pmh : MIDIHDR* [In],cbmh : UInt32 [In]
  fun midiOutUnprepareHeader(hmo : HMIDIOUT, pmh : MIDIHDR*, cbmh : UInt32) : UInt32

  # Params # hmo : HMIDIOUT [In],dwmsg : UInt32 [In]
  fun midiOutShortMsg(hmo : HMIDIOUT, dwmsg : UInt32) : UInt32

  # Params # hmo : HMIDIOUT [In],pmh : MIDIHDR* [In],cbmh : UInt32 [In]
  fun midiOutLongMsg(hmo : HMIDIOUT, pmh : MIDIHDR*, cbmh : UInt32) : UInt32

  # Params # hmo : HMIDIOUT [In]
  fun midiOutReset(hmo : HMIDIOUT) : UInt32

  # Params # hmo : HMIDIOUT [In],ubank : UInt32 [In],pwpa : UInt16* [In],fucache : UInt32 [In]
  fun midiOutCachePatches(hmo : HMIDIOUT, ubank : UInt32, pwpa : UInt16*, fucache : UInt32) : UInt32

  # Params # hmo : HMIDIOUT [In],upatch : UInt32 [In],pwkya : UInt16* [In],fucache : UInt32 [In]
  fun midiOutCacheDrumPatches(hmo : HMIDIOUT, upatch : UInt32, pwkya : UInt16*, fucache : UInt32) : UInt32

  # Params # hmo : HMIDIOUT [In],pudeviceid : UInt32* [In]
  fun midiOutGetID(hmo : HMIDIOUT, pudeviceid : UInt32*) : UInt32

  # Params # hmo : HMIDIOUT [In],umsg : UInt32 [In],dw1 : LibC::UINT_PTR [In],dw2 : LibC::UINT_PTR [In]
  fun midiOutMessage(hmo : HMIDIOUT, umsg : UInt32, dw1 : LibC::UINT_PTR, dw2 : LibC::UINT_PTR) : UInt32

  # Params # 
  fun midiInGetNumDevs : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pmic : MIDIINCAPSA* [In],cbmic : UInt32 [In]
  fun midiInGetDevCapsA(udeviceid : LibC::UINT_PTR, pmic : MIDIINCAPSA*, cbmic : UInt32) : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pmic : MIDIINCAPSW* [In],cbmic : UInt32 [In]
  fun midiInGetDevCapsW(udeviceid : LibC::UINT_PTR, pmic : MIDIINCAPSW*, cbmic : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : UInt8* [In],cchtext : UInt32 [In]
  fun midiInGetErrorTextA(mmrerror : UInt32, psztext : UInt8*, cchtext : UInt32) : UInt32

  # Params # mmrerror : UInt32 [In],psztext : Char* [In],cchtext : UInt32 [In]
  fun midiInGetErrorTextW(mmrerror : UInt32, psztext : Char*, cchtext : UInt32) : UInt32

  # Params # phmi : HMIDIIN* [In],udeviceid : UInt32 [In],dwcallback : LibC::UINT_PTR [In],dwinstance : LibC::UINT_PTR [In],fdwopen : MIDI_WAVE_OPEN_TYPE [In]
  fun midiInOpen(phmi : HMIDIIN*, udeviceid : UInt32, dwcallback : LibC::UINT_PTR, dwinstance : LibC::UINT_PTR, fdwopen : MIDI_WAVE_OPEN_TYPE) : UInt32

  # Params # hmi : HMIDIIN [In]
  fun midiInClose(hmi : HMIDIIN) : UInt32

  # Params # hmi : HMIDIIN [In],pmh : MIDIHDR* [In],cbmh : UInt32 [In]
  fun midiInPrepareHeader(hmi : HMIDIIN, pmh : MIDIHDR*, cbmh : UInt32) : UInt32

  # Params # hmi : HMIDIIN [In],pmh : MIDIHDR* [In],cbmh : UInt32 [In]
  fun midiInUnprepareHeader(hmi : HMIDIIN, pmh : MIDIHDR*, cbmh : UInt32) : UInt32

  # Params # hmi : HMIDIIN [In],pmh : MIDIHDR* [In],cbmh : UInt32 [In]
  fun midiInAddBuffer(hmi : HMIDIIN, pmh : MIDIHDR*, cbmh : UInt32) : UInt32

  # Params # hmi : HMIDIIN [In]
  fun midiInStart(hmi : HMIDIIN) : UInt32

  # Params # hmi : HMIDIIN [In]
  fun midiInStop(hmi : HMIDIIN) : UInt32

  # Params # hmi : HMIDIIN [In]
  fun midiInReset(hmi : HMIDIIN) : UInt32

  # Params # hmi : HMIDIIN [In],pudeviceid : UInt32* [In]
  fun midiInGetID(hmi : HMIDIIN, pudeviceid : UInt32*) : UInt32

  # Params # hmi : HMIDIIN [In],umsg : UInt32 [In],dw1 : LibC::UINT_PTR [In],dw2 : LibC::UINT_PTR [In]
  fun midiInMessage(hmi : HMIDIIN, umsg : UInt32, dw1 : LibC::UINT_PTR, dw2 : LibC::UINT_PTR) : UInt32

  # Params # 
  fun auxGetNumDevs : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pac : AUXCAPSA* [In],cbac : UInt32 [In]
  fun auxGetDevCapsA(udeviceid : LibC::UINT_PTR, pac : AUXCAPSA*, cbac : UInt32) : UInt32

  # Params # udeviceid : LibC::UINT_PTR [In],pac : AUXCAPSW* [In],cbac : UInt32 [In]
  fun auxGetDevCapsW(udeviceid : LibC::UINT_PTR, pac : AUXCAPSW*, cbac : UInt32) : UInt32

  # Params # udeviceid : UInt32 [In],dwvolume : UInt32 [In]
  fun auxSetVolume(udeviceid : UInt32, dwvolume : UInt32) : UInt32

  # Params # udeviceid : UInt32 [In],pdwvolume : UInt32* [In]
  fun auxGetVolume(udeviceid : UInt32, pdwvolume : UInt32*) : UInt32

  # Params # udeviceid : UInt32 [In],umsg : UInt32 [In],dw1 : LibC::UINT_PTR [In],dw2 : LibC::UINT_PTR [In]
  fun auxOutMessage(udeviceid : UInt32, umsg : UInt32, dw1 : LibC::UINT_PTR, dw2 : LibC::UINT_PTR) : UInt32

  # Params # 
  fun mixerGetNumDevs : UInt32

  # Params # umxid : LibC::UINT_PTR [In],pmxcaps : MIXERCAPSA* [In],cbmxcaps : UInt32 [In]
  fun mixerGetDevCapsA(umxid : LibC::UINT_PTR, pmxcaps : MIXERCAPSA*, cbmxcaps : UInt32) : UInt32

  # Params # umxid : LibC::UINT_PTR [In],pmxcaps : MIXERCAPSW* [In],cbmxcaps : UInt32 [In]
  fun mixerGetDevCapsW(umxid : LibC::UINT_PTR, pmxcaps : MIXERCAPSW*, cbmxcaps : UInt32) : UInt32

  # Params # phmx : LibC::IntPtrT* [In],umxid : UInt32 [In],dwcallback : LibC::UINT_PTR [In],dwinstance : LibC::UINT_PTR [In],fdwopen : UInt32 [In]
  fun mixerOpen(phmx : LibC::IntPtrT*, umxid : UInt32, dwcallback : LibC::UINT_PTR, dwinstance : LibC::UINT_PTR, fdwopen : UInt32) : UInt32

  # Params # hmx : HMIXER [In]
  fun mixerClose(hmx : HMIXER) : UInt32

  # Params # hmx : HMIXER [In],umsg : UInt32 [In],dwparam1 : LibC::UINT_PTR [In],dwparam2 : LibC::UINT_PTR [In]
  fun mixerMessage(hmx : HMIXER, umsg : UInt32, dwparam1 : LibC::UINT_PTR, dwparam2 : LibC::UINT_PTR) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pmxl : MIXERLINEA* [In],fdwinfo : UInt32 [In]
  fun mixerGetLineInfoA(hmxobj : HMIXEROBJ, pmxl : MIXERLINEA*, fdwinfo : UInt32) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pmxl : MIXERLINEW* [In],fdwinfo : UInt32 [In]
  fun mixerGetLineInfoW(hmxobj : HMIXEROBJ, pmxl : MIXERLINEW*, fdwinfo : UInt32) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pumxid : UInt32* [In],fdwid : UInt32 [In]
  fun mixerGetID(hmxobj : HMIXEROBJ, pumxid : UInt32*, fdwid : UInt32) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pmxlc : MIXERLINECONTROLSA* [In],fdwcontrols : UInt32 [In]
  fun mixerGetLineControlsA(hmxobj : HMIXEROBJ, pmxlc : MIXERLINECONTROLSA*, fdwcontrols : UInt32) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pmxlc : MIXERLINECONTROLSW* [In],fdwcontrols : UInt32 [In]
  fun mixerGetLineControlsW(hmxobj : HMIXEROBJ, pmxlc : MIXERLINECONTROLSW*, fdwcontrols : UInt32) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pmxcd : MIXERCONTROLDETAILS* [In],fdwdetails : UInt32 [In]
  fun mixerGetControlDetailsA(hmxobj : HMIXEROBJ, pmxcd : MIXERCONTROLDETAILS*, fdwdetails : UInt32) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pmxcd : MIXERCONTROLDETAILS* [In],fdwdetails : UInt32 [In]
  fun mixerGetControlDetailsW(hmxobj : HMIXEROBJ, pmxcd : MIXERCONTROLDETAILS*, fdwdetails : UInt32) : UInt32

  # Params # hmxobj : HMIXEROBJ [In],pmxcd : MIXERCONTROLDETAILS* [In],fdwdetails : UInt32 [In]
  fun mixerSetControlDetails(hmxobj : HMIXEROBJ, pmxcd : MIXERCONTROLDETAILS*, fdwdetails : UInt32) : UInt32

  # Params # deviceinterfacepath : LibC::LPWSTR [In],riid : Guid* [In],activationparams : PROPVARIANT* [In],completionhandler : IActivateAudioInterfaceCompletionHandler [In],activationoperation : IActivateAudioInterfaceAsyncOperation* [In]
  fun ActivateAudioInterfaceAsync(deviceinterfacepath : LibC::LPWSTR, riid : Guid*, activationparams : PROPVARIANT*, completionhandler : IActivateAudioInterfaceCompletionHandler, activationoperation : IActivateAudioInterfaceAsyncOperation*) : HRESULT

  # Params # audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateRenderAudioStateMonitor(audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # category : AUDIO_STREAM_CATEGORY [In],audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateRenderAudioStateMonitorForCategory(category : AUDIO_STREAM_CATEGORY, audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # category : AUDIO_STREAM_CATEGORY [In],role : ERole [In],audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateRenderAudioStateMonitorForCategoryAndDeviceRole(category : AUDIO_STREAM_CATEGORY, role : ERole, audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # category : AUDIO_STREAM_CATEGORY [In],deviceid : LibC::LPWSTR [In],audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateRenderAudioStateMonitorForCategoryAndDeviceId(category : AUDIO_STREAM_CATEGORY, deviceid : LibC::LPWSTR, audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateCaptureAudioStateMonitor(audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # category : AUDIO_STREAM_CATEGORY [In],audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateCaptureAudioStateMonitorForCategory(category : AUDIO_STREAM_CATEGORY, audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # category : AUDIO_STREAM_CATEGORY [In],role : ERole [In],audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateCaptureAudioStateMonitorForCategoryAndDeviceRole(category : AUDIO_STREAM_CATEGORY, role : ERole, audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # category : AUDIO_STREAM_CATEGORY [In],deviceid : LibC::LPWSTR [In],audiostatemonitor : IAudioStateMonitor* [In]
  fun CreateCaptureAudioStateMonitorForCategoryAndDeviceId(category : AUDIO_STREAM_CATEGORY, deviceid : LibC::LPWSTR, audiostatemonitor : IAudioStateMonitor*) : HRESULT

  # Params # 
  fun acmGetVersion : UInt32

  # Params # hao : HACMOBJ [In],umetric : UInt32 [In],pmetric : Void* [In]
  fun acmMetrics(hao : HACMOBJ, umetric : UInt32, pmetric : Void*) : UInt32

  # Params # fncallback : ACMDRIVERENUMCB [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmDriverEnum(fncallback : ACMDRIVERENUMCB, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # hao : HACMOBJ [In],phadid : LibC::IntPtrT* [In],fdwdriverid : UInt32 [In]
  fun acmDriverID(hao : HACMOBJ, phadid : LibC::IntPtrT*, fdwdriverid : UInt32) : UInt32

  # Params # phadid : LibC::IntPtrT* [In],hinstmodule : HINSTANCE [In],lparam : LPARAM [In],dwpriority : UInt32 [In],fdwadd : UInt32 [In]
  fun acmDriverAddA(phadid : LibC::IntPtrT*, hinstmodule : HINSTANCE, lparam : LPARAM, dwpriority : UInt32, fdwadd : UInt32) : UInt32

  # Params # phadid : LibC::IntPtrT* [In],hinstmodule : HINSTANCE [In],lparam : LPARAM [In],dwpriority : UInt32 [In],fdwadd : UInt32 [In]
  fun acmDriverAddW(phadid : LibC::IntPtrT*, hinstmodule : HINSTANCE, lparam : LPARAM, dwpriority : UInt32, fdwadd : UInt32) : UInt32

  # Params # hadid : HACMDRIVERID [In],fdwremove : UInt32 [In]
  fun acmDriverRemove(hadid : HACMDRIVERID, fdwremove : UInt32) : UInt32

  # Params # phad : LibC::IntPtrT* [In],hadid : HACMDRIVERID [In],fdwopen : UInt32 [In]
  fun acmDriverOpen(phad : LibC::IntPtrT*, hadid : HACMDRIVERID, fdwopen : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],fdwclose : UInt32 [In]
  fun acmDriverClose(had : HACMDRIVER, fdwclose : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],umsg : UInt32 [In],lparam1 : LPARAM [In],lparam2 : LPARAM [In]
  fun acmDriverMessage(had : HACMDRIVER, umsg : UInt32, lparam1 : LPARAM, lparam2 : LPARAM) : LRESULT

  # Params # hadid : HACMDRIVERID [In],dwpriority : UInt32 [In],fdwpriority : UInt32 [In]
  fun acmDriverPriority(hadid : HACMDRIVERID, dwpriority : UInt32, fdwpriority : UInt32) : UInt32

  # Params # hadid : HACMDRIVERID [In],padd : ACMDRIVERDETAILSA* [In],fdwdetails : UInt32 [In]
  fun acmDriverDetailsA(hadid : HACMDRIVERID, padd : ACMDRIVERDETAILSA*, fdwdetails : UInt32) : UInt32

  # Params # hadid : HACMDRIVERID [In],padd : ACMDRIVERDETAILSW* [In],fdwdetails : UInt32 [In]
  fun acmDriverDetailsW(hadid : HACMDRIVERID, padd : ACMDRIVERDETAILSW*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFORMATTAGDETAILSA* [In],fdwdetails : UInt32 [In]
  fun acmFormatTagDetailsA(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSA*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFORMATTAGDETAILSW* [In],fdwdetails : UInt32 [In]
  fun acmFormatTagDetailsW(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSW*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFORMATTAGDETAILSA* [In],fncallback : ACMFORMATTAGENUMCBA [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFormatTagEnumA(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSA*, fncallback : ACMFORMATTAGENUMCBA, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFORMATTAGDETAILSW* [In],fncallback : ACMFORMATTAGENUMCBW [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFormatTagEnumW(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSW*, fncallback : ACMFORMATTAGENUMCBW, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : ACMFORMATDETAILSA* [In],fdwdetails : UInt32 [In]
  fun acmFormatDetailsA(had : HACMDRIVER, pafd : ACMFORMATDETAILSA*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : Tacmformatdetailsw* [In],fdwdetails : UInt32 [In]
  fun acmFormatDetailsW(had : HACMDRIVER, pafd : Tacmformatdetailsw*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : ACMFORMATDETAILSA* [In],fncallback : ACMFORMATENUMCBA [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFormatEnumA(had : HACMDRIVER, pafd : ACMFORMATDETAILSA*, fncallback : ACMFORMATENUMCBA, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : Tacmformatdetailsw* [In],fncallback : ACMFORMATENUMCBW [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFormatEnumW(had : HACMDRIVER, pafd : Tacmformatdetailsw*, fncallback : ACMFORMATENUMCBW, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pwfxsrc : WAVEFORMATEX* [In],pwfxdst : WAVEFORMATEX* [In],cbwfxdst : UInt32 [In],fdwsuggest : UInt32 [In]
  fun acmFormatSuggest(had : HACMDRIVER, pwfxsrc : WAVEFORMATEX*, pwfxdst : WAVEFORMATEX*, cbwfxdst : UInt32, fdwsuggest : UInt32) : UInt32

  # Params # pafmtc : ACMFORMATCHOOSEA* [In]
  fun acmFormatChooseA(pafmtc : ACMFORMATCHOOSEA*) : UInt32

  # Params # pafmtc : ACMFORMATCHOOSEW* [In]
  fun acmFormatChooseW(pafmtc : ACMFORMATCHOOSEW*) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFILTERTAGDETAILSA* [In],fdwdetails : UInt32 [In]
  fun acmFilterTagDetailsA(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSA*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFILTERTAGDETAILSW* [In],fdwdetails : UInt32 [In]
  fun acmFilterTagDetailsW(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSW*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFILTERTAGDETAILSA* [In],fncallback : ACMFILTERTAGENUMCBA [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFilterTagEnumA(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSA*, fncallback : ACMFILTERTAGENUMCBA, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],paftd : ACMFILTERTAGDETAILSW* [In],fncallback : ACMFILTERTAGENUMCBW [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFilterTagEnumW(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSW*, fncallback : ACMFILTERTAGENUMCBW, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : ACMFILTERDETAILSA* [In],fdwdetails : UInt32 [In]
  fun acmFilterDetailsA(had : HACMDRIVER, pafd : ACMFILTERDETAILSA*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : ACMFILTERDETAILSW* [In],fdwdetails : UInt32 [In]
  fun acmFilterDetailsW(had : HACMDRIVER, pafd : ACMFILTERDETAILSW*, fdwdetails : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : ACMFILTERDETAILSA* [In],fncallback : ACMFILTERENUMCBA [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFilterEnumA(had : HACMDRIVER, pafd : ACMFILTERDETAILSA*, fncallback : ACMFILTERENUMCBA, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # had : HACMDRIVER [In],pafd : ACMFILTERDETAILSW* [In],fncallback : ACMFILTERENUMCBW [In],dwinstance : LibC::UINT_PTR [In],fdwenum : UInt32 [In]
  fun acmFilterEnumW(had : HACMDRIVER, pafd : ACMFILTERDETAILSW*, fncallback : ACMFILTERENUMCBW, dwinstance : LibC::UINT_PTR, fdwenum : UInt32) : UInt32

  # Params # pafltrc : ACMFILTERCHOOSEA* [In]
  fun acmFilterChooseA(pafltrc : ACMFILTERCHOOSEA*) : UInt32

  # Params # pafltrc : ACMFILTERCHOOSEW* [In]
  fun acmFilterChooseW(pafltrc : ACMFILTERCHOOSEW*) : UInt32

  # Params # phas : LibC::IntPtrT* [In],had : HACMDRIVER [In],pwfxsrc : WAVEFORMATEX* [In],pwfxdst : WAVEFORMATEX* [In],pwfltr : WAVEFILTER* [In],dwcallback : LibC::UINT_PTR [In],dwinstance : LibC::UINT_PTR [In],fdwopen : UInt32 [In]
  fun acmStreamOpen(phas : LibC::IntPtrT*, had : HACMDRIVER, pwfxsrc : WAVEFORMATEX*, pwfxdst : WAVEFORMATEX*, pwfltr : WAVEFILTER*, dwcallback : LibC::UINT_PTR, dwinstance : LibC::UINT_PTR, fdwopen : UInt32) : UInt32

  # Params # has : HACMSTREAM [In],fdwclose : UInt32 [In]
  fun acmStreamClose(has : HACMSTREAM, fdwclose : UInt32) : UInt32

  # Params # has : HACMSTREAM [In],cbinput : UInt32 [In],pdwoutputbytes : UInt32* [In],fdwsize : UInt32 [In]
  fun acmStreamSize(has : HACMSTREAM, cbinput : UInt32, pdwoutputbytes : UInt32*, fdwsize : UInt32) : UInt32

  # Params # has : HACMSTREAM [In],fdwreset : UInt32 [In]
  fun acmStreamReset(has : HACMSTREAM, fdwreset : UInt32) : UInt32

  # Params # has : HACMSTREAM [In],umsg : UInt32 [In],lparam1 : LPARAM [In],lparam2 : LPARAM [In]
  fun acmStreamMessage(has : HACMSTREAM, umsg : UInt32, lparam1 : LPARAM, lparam2 : LPARAM) : UInt32

  # Params # has : HACMSTREAM [In],pash : ACMSTREAMHEADER* [In],fdwconvert : UInt32 [In]
  fun acmStreamConvert(has : HACMSTREAM, pash : ACMSTREAMHEADER*, fdwconvert : UInt32) : UInt32

  # Params # has : HACMSTREAM [In],pash : ACMSTREAMHEADER* [In],fdwprepare : UInt32 [In]
  fun acmStreamPrepareHeader(has : HACMSTREAM, pash : ACMSTREAMHEADER*, fdwprepare : UInt32) : UInt32

  # Params # has : HACMSTREAM [In],pash : ACMSTREAMHEADER* [In],fdwunprepare : UInt32 [In]
  fun acmStreamUnprepareHeader(has : HACMSTREAM, pash : ACMSTREAMHEADER*, fdwunprepare : UInt32) : UInt32
end
