require "./../foundation.cr"
require "./../system/com.cr"

module Win32cr::Storage::VirtualDiskService
  extend self
  VDS_NF_VOLUME_ARRIVE = 4_u32
  VDS_NF_VOLUME_DEPART = 5_u32
  VDS_NF_VOLUME_MODIFY = 6_u32
  VDS_NF_VOLUME_REBUILDING_PROGRESS = 7_u32
  VDS_NF_PARTITION_ARRIVE = 11_u32
  VDS_NF_PARTITION_DEPART = 12_u32
  VDS_NF_PARTITION_MODIFY = 13_u32
  VDS_NF_SUB_SYSTEM_ARRIVE = 101_u32
  VDS_NF_SUB_SYSTEM_DEPART = 102_u32
  VDS_NF_PORTAL_ARRIVE = 123_u32
  VDS_NF_PORTAL_DEPART = 124_u32
  VDS_NF_PORTAL_MODIFY = 125_u32
  VDS_NF_TARGET_ARRIVE = 126_u32
  VDS_NF_TARGET_DEPART = 127_u32
  VDS_NF_TARGET_MODIFY = 128_u32
  VDS_NF_PORTAL_GROUP_ARRIVE = 129_u32
  VDS_NF_PORTAL_GROUP_DEPART = 130_u32
  VDS_NF_PORTAL_GROUP_MODIFY = 131_u32
  VDS_NF_SUB_SYSTEM_MODIFY = 151_u32
  VDS_NF_DRIVE_LETTER_FREE = 201_u32
  VDS_NF_DRIVE_LETTER_ASSIGN = 202_u32
  VDS_NF_MOUNT_POINTS_CHANGE = 205_u32
  VDS_NF_FILE_SYSTEM_SHRINKING_PROGRESS = 206_u32
  VDS_NF_SERVICE_OUT_OF_SYNC = 301_u32
  GPT_PARTITION_NAME_LENGTH = 36_u32
  VDS_HINT_FASTCRASHRECOVERYREQUIRED = 1_i32
  VDS_HINT_MOSTLYREADS = 2_i32
  VDS_HINT_OPTIMIZEFORSEQUENTIALREADS = 4_i32
  VDS_HINT_OPTIMIZEFORSEQUENTIALWRITES = 8_i32
  VDS_HINT_READBACKVERIFYENABLED = 16_i32
  VDS_HINT_REMAPENABLED = 32_i32
  VDS_HINT_WRITETHROUGHCACHINGENABLED = 64_i32
  VDS_HINT_HARDWARECHECKSUMENABLED = 128_i32
  VDS_HINT_ISYANKABLE = 256_i32
  VDS_HINT_ALLOCATEHOTSPARE = 512_i32
  VDS_HINT_BUSTYPE = 1024_i32
  VDS_HINT_USEMIRROREDCACHE = 2048_i32
  VDS_HINT_READCACHINGENABLED = 4096_i32
  VDS_HINT_WRITECACHINGENABLED = 8192_i32
  VDS_HINT_MEDIASCANENABLED = 16384_i32
  VDS_HINT_CONSISTENCYCHECKENABLED = 32768_i32
  VDS_REBUILD_PRIORITY_MIN = 0_u32
  VDS_REBUILD_PRIORITY_MAX = 16_u32
  VDS_POOL_ATTRIB_RAIDTYPE = 1_i32
  VDS_POOL_ATTRIB_BUSTYPE = 2_i32
  VDS_POOL_ATTRIB_ALLOW_SPINDOWN = 4_i32
  VDS_POOL_ATTRIB_THIN_PROVISION = 8_i32
  VDS_POOL_ATTRIB_NO_SINGLE_POF = 16_i32
  VDS_POOL_ATTRIB_DATA_RDNCY_MAX = 32_i32
  VDS_POOL_ATTRIB_DATA_RDNCY_MIN = 64_i32
  VDS_POOL_ATTRIB_DATA_RDNCY_DEF = 128_i32
  VDS_POOL_ATTRIB_PKG_RDNCY_MAX = 256_i32
  VDS_POOL_ATTRIB_PKG_RDNCY_MIN = 512_i32
  VDS_POOL_ATTRIB_PKG_RDNCY_DEF = 1024_i32
  VDS_POOL_ATTRIB_STRIPE_SIZE = 2048_i32
  VDS_POOL_ATTRIB_STRIPE_SIZE_MAX = 4096_i32
  VDS_POOL_ATTRIB_STRIPE_SIZE_MIN = 8192_i32
  VDS_POOL_ATTRIB_STRIPE_SIZE_DEF = 16384_i32
  VDS_POOL_ATTRIB_NUM_CLMNS = 32768_i32
  VDS_POOL_ATTRIB_NUM_CLMNS_MAX = 65536_i32
  VDS_POOL_ATTRIB_NUM_CLMNS_MIN = 131072_i32
  VDS_POOL_ATTRIB_NUM_CLMNS_DEF = 262144_i32
  VDS_POOL_ATTRIB_DATA_AVL_HINT = 524288_i32
  VDS_POOL_ATTRIB_ACCS_RNDM_HINT = 1048576_i32
  VDS_POOL_ATTRIB_ACCS_DIR_HINT = 2097152_i32
  VDS_POOL_ATTRIB_ACCS_SIZE_HINT = 4194304_i32
  VDS_POOL_ATTRIB_ACCS_LTNCY_HINT = 8388608_i32
  VDS_POOL_ATTRIB_ACCS_BDW_WT_HINT = 16777216_i32
  VDS_POOL_ATTRIB_STOR_COST_HINT = 33554432_i32
  VDS_POOL_ATTRIB_STOR_EFFCY_HINT = 67108864_i32
  VDS_POOL_ATTRIB_CUSTOM_ATTRIB = 134217728_i32
  VDS_ATTACH_VIRTUAL_DISK_FLAG_USE_FILE_ACL = 1_u32
  CLSID_VdsLoader = "9c38ed61-d565-4728-aeee-c80952f0ecde"
  CLSID_VdsService = "7d1933cb-86f6-4a98-8628-01be94c9a575"
  MAX_FS_NAME_SIZE = 8_u32
  MAX_FS_FORMAT_SUPPORT_NAME_SIZE = 32_u32
  MAX_FS_ALLOWED_CLUSTER_SIZES_SIZE = 32_u32
  VER_VDS_LUN_INFORMATION = 1_u32
  VDS_E_NOT_SUPPORTED = -2147212288_i32
  VDS_E_INITIALIZED_FAILED = -2147212287_i32
  VDS_E_INITIALIZE_NOT_CALLED = -2147212286_i32
  VDS_E_ALREADY_REGISTERED = -2147212285_i32
  VDS_E_ANOTHER_CALL_IN_PROGRESS = -2147212284_i32
  VDS_E_OBJECT_NOT_FOUND = -2147212283_i32
  VDS_E_INVALID_SPACE = -2147212282_i32
  VDS_E_PARTITION_LIMIT_REACHED = -2147212281_i32
  VDS_E_PARTITION_NOT_EMPTY = -2147212280_i32
  VDS_E_OPERATION_PENDING = -2147212279_i32
  VDS_E_OPERATION_DENIED = -2147212278_i32
  VDS_E_OBJECT_DELETED = -2147212277_i32
  VDS_E_CANCEL_TOO_LATE = -2147212276_i32
  VDS_E_OPERATION_CANCELED = -2147212275_i32
  VDS_E_CANNOT_EXTEND = -2147212274_i32
  VDS_E_NOT_ENOUGH_SPACE = -2147212273_i32
  VDS_E_NOT_ENOUGH_DRIVE = -2147212272_i32
  VDS_E_BAD_COOKIE = -2147212271_i32
  VDS_E_NO_MEDIA = -2147212270_i32
  VDS_E_DEVICE_IN_USE = -2147212269_i32
  VDS_E_DISK_NOT_EMPTY = -2147212268_i32
  VDS_E_INVALID_OPERATION = -2147212267_i32
  VDS_E_PATH_NOT_FOUND = -2147212266_i32
  VDS_E_DISK_NOT_INITIALIZED = -2147212265_i32
  VDS_E_NOT_AN_UNALLOCATED_DISK = -2147212264_i32
  VDS_E_UNRECOVERABLE_ERROR = -2147212263_i32
  VDS_S_DISK_PARTIALLY_CLEANED = 271386_i32
  VDS_E_DMADMIN_SERVICE_CONNECTION_FAILED = -2147212261_i32
  VDS_E_PROVIDER_INITIALIZATION_FAILED = -2147212260_i32
  VDS_E_OBJECT_EXISTS = -2147212259_i32
  VDS_E_NO_DISKS_FOUND = -2147212258_i32
  VDS_E_PROVIDER_CACHE_CORRUPT = -2147212257_i32
  VDS_E_DMADMIN_METHOD_CALL_FAILED = -2147212256_i32
  VDS_S_PROVIDER_ERROR_LOADING_CACHE = 271393_i32
  VDS_E_PROVIDER_VOL_DEVICE_NAME_NOT_FOUND = -2147212254_i32
  VDS_E_PROVIDER_VOL_OPEN = -2147212253_i32
  VDS_E_DMADMIN_CORRUPT_NOTIFICATION = -2147212252_i32
  VDS_E_INCOMPATIBLE_FILE_SYSTEM = -2147212251_i32
  VDS_E_INCOMPATIBLE_MEDIA = -2147212250_i32
  VDS_E_ACCESS_DENIED = -2147212249_i32
  VDS_E_MEDIA_WRITE_PROTECTED = -2147212248_i32
  VDS_E_BAD_LABEL = -2147212247_i32
  VDS_E_CANT_QUICK_FORMAT = -2147212246_i32
  VDS_E_IO_ERROR = -2147212245_i32
  VDS_E_VOLUME_TOO_SMALL = -2147212244_i32
  VDS_E_VOLUME_TOO_BIG = -2147212243_i32
  VDS_E_CLUSTER_SIZE_TOO_SMALL = -2147212242_i32
  VDS_E_CLUSTER_SIZE_TOO_BIG = -2147212241_i32
  VDS_E_CLUSTER_COUNT_BEYOND_32BITS = -2147212240_i32
  VDS_E_OBJECT_STATUS_FAILED = -2147212239_i32
  VDS_E_VOLUME_INCOMPLETE = -2147212238_i32
  VDS_E_EXTENT_SIZE_LESS_THAN_MIN = -2147212237_i32
  VDS_S_UPDATE_BOOTFILE_FAILED = 271412_i32
  VDS_S_BOOT_PARTITION_NUMBER_CHANGE = 271414_i32
  VDS_E_BOOT_PARTITION_NUMBER_CHANGE = -2147212234_i32
  VDS_E_NO_FREE_SPACE = -2147212233_i32
  VDS_E_ACTIVE_PARTITION = -2147212232_i32
  VDS_E_PARTITION_OF_UNKNOWN_TYPE = -2147212231_i32
  VDS_E_LEGACY_VOLUME_FORMAT = -2147212230_i32
  VDS_E_NON_CONTIGUOUS_DATA_PARTITIONS = -2147212229_i32
  VDS_E_MIGRATE_OPEN_VOLUME = -2147212228_i32
  VDS_E_VOLUME_NOT_ONLINE = -2147212227_i32
  VDS_E_VOLUME_NOT_HEALTHY = -2147212226_i32
  VDS_E_VOLUME_SPANS_DISKS = -2147212225_i32
  VDS_E_REQUIRES_CONTIGUOUS_DISK_SPACE = -2147212224_i32
  VDS_E_BAD_PROVIDER_DATA = -2147212223_i32
  VDS_E_PROVIDER_FAILURE = -2147212222_i32
  VDS_S_VOLUME_COMPRESS_FAILED = 271427_i32
  VDS_E_PACK_OFFLINE = -2147212220_i32
  VDS_E_VOLUME_NOT_A_MIRROR = -2147212219_i32
  VDS_E_NO_EXTENTS_FOR_VOLUME = -2147212218_i32
  VDS_E_DISK_NOT_LOADED_TO_CACHE = -2147212217_i32
  VDS_E_INTERNAL_ERROR = -2147212216_i32
  VDS_S_ACCESS_PATH_NOT_DELETED = 279108_i32
  VDS_E_PROVIDER_TYPE_NOT_SUPPORTED = -2147212214_i32
  VDS_E_DISK_NOT_ONLINE = -2147212213_i32
  VDS_E_DISK_IN_USE_BY_VOLUME = -2147212212_i32
  VDS_S_IN_PROGRESS = 271437_i32
  VDS_E_ASYNC_OBJECT_FAILURE = -2147212210_i32
  VDS_E_VOLUME_NOT_MOUNTED = -2147212209_i32
  VDS_E_PACK_NOT_FOUND = -2147212208_i32
  VDS_E_IMPORT_SET_INCOMPLETE = -2147212207_i32
  VDS_E_DISK_NOT_IMPORTED = -2147212206_i32
  VDS_E_OBJECT_OUT_OF_SYNC = -2147212205_i32
  VDS_E_MISSING_DISK = -2147212204_i32
  VDS_E_DISK_PNP_REG_CORRUPT = -2147212203_i32
  VDS_E_LBN_REMAP_ENABLED_FLAG = -2147212202_i32
  VDS_E_NO_DRIVELETTER_FLAG = -2147212201_i32
  VDS_E_REVERT_ON_CLOSE = -2147212200_i32
  VDS_E_REVERT_ON_CLOSE_SET = -2147212199_i32
  VDS_E_IA64_BOOT_MIRRORED_TO_MBR = -2147212198_i32
  VDS_S_IA64_BOOT_MIRRORED_TO_MBR = 271450_i32
  VDS_S_UNABLE_TO_GET_GPT_ATTRIBUTES = 271451_i32
  VDS_E_VOLUME_TEMPORARILY_DISMOUNTED = -2147212196_i32
  VDS_E_VOLUME_PERMANENTLY_DISMOUNTED = -2147212195_i32
  VDS_E_VOLUME_HAS_PATH = -2147212194_i32
  VDS_E_TIMEOUT = -2147212193_i32
  VDS_E_REPAIR_VOLUMESTATE = -2147212192_i32
  VDS_E_LDM_TIMEOUT = -2147212191_i32
  VDS_E_REVERT_ON_CLOSE_MISMATCH = -2147212190_i32
  VDS_E_RETRY = -2147212189_i32
  VDS_E_ONLINE_PACK_EXISTS = -2147212188_i32
  VDS_S_EXTEND_FILE_SYSTEM_FAILED = 271461_i32
  VDS_E_EXTEND_FILE_SYSTEM_FAILED = -2147212186_i32
  VDS_S_MBR_BOOT_MIRRORED_TO_GPT = 271463_i32
  VDS_E_MAX_USABLE_MBR = -2147212184_i32
  VDS_S_GPT_BOOT_MIRRORED_TO_MBR = -2147212183_i32
  VDS_E_NO_SOFTWARE_PROVIDERS_LOADED = -2147212032_i32
  VDS_E_DISK_NOT_MISSING = -2147212031_i32
  VDS_E_NO_VOLUME_LAYOUT = -2147212030_i32
  VDS_E_CORRUPT_VOLUME_INFO = -2147212029_i32
  VDS_E_INVALID_ENUMERATOR = -2147212028_i32
  VDS_E_DRIVER_INTERNAL_ERROR = -2147212027_i32
  VDS_E_VOLUME_INVALID_NAME = -2147212025_i32
  VDS_S_DISK_IS_MISSING = 271624_i32
  VDS_E_CORRUPT_PARTITION_INFO = -2147212023_i32
  VDS_S_NONCONFORMANT_PARTITION_INFO = 271626_i32
  VDS_E_CORRUPT_EXTENT_INFO = -2147212021_i32
  VDS_E_DUP_EMPTY_PACK_GUID = -2147212020_i32
  VDS_E_DRIVER_NO_PACK_NAME = -2147212019_i32
  VDS_S_SYSTEM_PARTITION = 271630_i32
  VDS_E_BAD_PNP_MESSAGE = -2147212017_i32
  VDS_E_NO_PNP_DISK_ARRIVE = -2147212016_i32
  VDS_E_NO_PNP_VOLUME_ARRIVE = -2147212015_i32
  VDS_E_NO_PNP_DISK_REMOVE = -2147212014_i32
  VDS_E_NO_PNP_VOLUME_REMOVE = -2147212013_i32
  VDS_E_PROVIDER_EXITING = -2147212012_i32
  VDS_E_EXTENT_EXCEEDS_DISK_FREE_SPACE = -2147212011_i32
  VDS_E_MEMBER_SIZE_INVALID = -2147212010_i32
  VDS_S_NO_NOTIFICATION = 271639_i32
  VDS_S_DEFAULT_PLEX_MEMBER_IDS = 271640_i32
  VDS_E_INVALID_DISK = -2147212007_i32
  VDS_E_INVALID_PACK = -2147212006_i32
  VDS_E_VOLUME_ON_DISK = -2147212005_i32
  VDS_E_DRIVER_INVALID_PARAM = -2147212004_i32
  VDS_E_TARGET_PACK_NOT_EMPTY = -2147212003_i32
  VDS_E_CANNOT_SHRINK = -2147212002_i32
  VDS_E_MULTIPLE_PACKS = -2147212001_i32
  VDS_E_PACK_ONLINE = -2147212000_i32
  VDS_E_INVALID_PLEX_COUNT = -2147211999_i32
  VDS_E_INVALID_MEMBER_COUNT = -2147211998_i32
  VDS_E_INVALID_PLEX_ORDER = -2147211997_i32
  VDS_E_INVALID_MEMBER_ORDER = -2147211996_i32
  VDS_E_INVALID_STRIPE_SIZE = -2147211995_i32
  VDS_E_INVALID_DISK_COUNT = -2147211994_i32
  VDS_E_INVALID_EXTENT_COUNT = -2147211993_i32
  VDS_E_SOURCE_IS_TARGET_PACK = -2147211992_i32
  VDS_E_VOLUME_DISK_COUNT_MAX_EXCEEDED = -2147211991_i32
  VDS_E_CORRUPT_NOTIFICATION_INFO = -2147211990_i32
  VDS_E_INVALID_PLEX_GUID = -2147211988_i32
  VDS_E_DISK_NOT_FOUND_IN_PACK = -2147211987_i32
  VDS_E_DUPLICATE_DISK = -2147211986_i32
  VDS_E_LAST_VALID_DISK = -2147211985_i32
  VDS_E_INVALID_SECTOR_SIZE = -2147211984_i32
  VDS_E_ONE_EXTENT_PER_DISK = -2147211983_i32
  VDS_E_INVALID_BLOCK_SIZE = -2147211982_i32
  VDS_E_PLEX_SIZE_INVALID = -2147211981_i32
  VDS_E_NO_EXTENTS_FOR_PLEX = -2147211980_i32
  VDS_E_INVALID_PLEX_TYPE = -2147211979_i32
  VDS_E_INVALID_PLEX_BLOCK_SIZE = -2147211978_i32
  VDS_E_NO_HEALTHY_DISKS = -2147211977_i32
  VDS_E_CONFIG_LIMIT = -2147211976_i32
  VDS_E_DISK_CONFIGURATION_CORRUPTED = -2147211975_i32
  VDS_E_DISK_CONFIGURATION_NOT_IN_SYNC = -2147211974_i32
  VDS_E_DISK_CONFIGURATION_UPDATE_FAILED = -2147211973_i32
  VDS_E_DISK_DYNAMIC = -2147211972_i32
  VDS_E_DRIVER_OBJECT_NOT_FOUND = -2147211971_i32
  VDS_E_PARTITION_NOT_CYLINDER_ALIGNED = -2147211970_i32
  VDS_E_DISK_LAYOUT_PARTITIONS_TOO_SMALL = -2147211969_i32
  VDS_E_DISK_IO_FAILING = -2147211968_i32
  VDS_E_DYNAMIC_DISKS_NOT_SUPPORTED = -2147211967_i32
  VDS_E_FAULT_TOLERANT_DISKS_NOT_SUPPORTED = -2147211966_i32
  VDS_E_GPT_ATTRIBUTES_INVALID = -2147211965_i32
  VDS_E_MEMBER_IS_HEALTHY = -2147211964_i32
  VDS_E_MEMBER_REGENERATING = -2147211963_i32
  VDS_E_PACK_NAME_INVALID = -2147211962_i32
  VDS_E_PLEX_IS_HEALTHY = -2147211961_i32
  VDS_E_PLEX_LAST_ACTIVE = -2147211960_i32
  VDS_E_PLEX_MISSING = -2147211959_i32
  VDS_E_MEMBER_MISSING = -2147211958_i32
  VDS_E_PLEX_REGENERATING = -2147211957_i32
  VDS_E_UNEXPECTED_DISK_LAYOUT_CHANGE = -2147211955_i32
  VDS_E_INVALID_VOLUME_LENGTH = -2147211954_i32
  VDS_E_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = -2147211953_i32
  VDS_E_VOLUME_NOT_RETAINED = -2147211952_i32
  VDS_E_VOLUME_RETAINED = -2147211951_i32
  VDS_E_ALIGN_BEYOND_FIRST_CYLINDER = -2147211949_i32
  VDS_E_ALIGN_NOT_SECTOR_SIZE_MULTIPLE = -2147211948_i32
  VDS_E_ALIGN_NOT_ZERO = -2147211947_i32
  VDS_E_CACHE_CORRUPT = -2147211946_i32
  VDS_E_CANNOT_CLEAR_VOLUME_FLAG = -2147211945_i32
  VDS_E_DISK_BEING_CLEANED = -2147211944_i32
  VDS_E_DISK_NOT_CONVERTIBLE = -2147211943_i32
  VDS_E_DISK_REMOVEABLE = -2147211942_i32
  VDS_E_DISK_REMOVEABLE_NOT_EMPTY = -2147211941_i32
  VDS_E_DRIVE_LETTER_NOT_FREE = -2147211940_i32
  VDS_E_EXTEND_MULTIPLE_DISKS_NOT_SUPPORTED = -2147211939_i32
  VDS_E_INVALID_DRIVE_LETTER = -2147211938_i32
  VDS_E_INVALID_DRIVE_LETTER_COUNT = -2147211937_i32
  VDS_E_INVALID_FS_FLAG = -2147211936_i32
  VDS_E_INVALID_FS_TYPE = -2147211935_i32
  VDS_E_INVALID_OBJECT_TYPE = -2147211934_i32
  VDS_E_INVALID_PARTITION_LAYOUT = -2147211933_i32
  VDS_E_INVALID_PARTITION_STYLE = -2147211932_i32
  VDS_E_INVALID_PARTITION_TYPE = -2147211931_i32
  VDS_E_INVALID_PROVIDER_CLSID = -2147211930_i32
  VDS_E_INVALID_PROVIDER_ID = -2147211929_i32
  VDS_E_INVALID_PROVIDER_NAME = -2147211928_i32
  VDS_E_INVALID_PROVIDER_TYPE = -2147211927_i32
  VDS_E_INVALID_PROVIDER_VERSION_GUID = -2147211926_i32
  VDS_E_INVALID_PROVIDER_VERSION_STRING = -2147211925_i32
  VDS_E_INVALID_QUERY_PROVIDER_FLAG = -2147211924_i32
  VDS_E_INVALID_SERVICE_FLAG = -2147211923_i32
  VDS_E_INVALID_VOLUME_FLAG = -2147211922_i32
  VDS_E_PARTITION_NOT_OEM = -2147211921_i32
  VDS_E_PARTITION_PROTECTED = -2147211920_i32
  VDS_E_PARTITION_STYLE_MISMATCH = -2147211919_i32
  VDS_E_PROVIDER_INTERNAL_ERROR = -2147211918_i32
  VDS_E_SHRINK_SIZE_LESS_THAN_MIN = -2147211917_i32
  VDS_E_SHRINK_SIZE_TOO_BIG = -2147211916_i32
  VDS_E_UNRECOVERABLE_PROVIDER_ERROR = -2147211915_i32
  VDS_E_VOLUME_HIDDEN = -2147211914_i32
  VDS_S_DISMOUNT_FAILED = 271735_i32
  VDS_S_REMOUNT_FAILED = 271736_i32
  VDS_E_FLAG_ALREADY_SET = -2147211911_i32
  VDS_S_RESYNC_NOTIFICATION_TASK_FAILED = 271738_i32
  VDS_E_DISTINCT_VOLUME = -2147211909_i32
  VDS_E_VOLUME_NOT_FOUND_IN_PACK = -2147211908_i32
  VDS_E_PARTITION_NON_DATA = -2147211907_i32
  VDS_E_CRITICAL_PLEX = -2147211906_i32
  VDS_E_VOLUME_SYNCHRONIZING = -2147211905_i32
  VDS_E_VOLUME_REGENERATING = -2147211904_i32
  VDS_S_VSS_FLUSH_AND_HOLD_WRITES = 271745_i32
  VDS_S_VSS_RELEASE_WRITES = 271746_i32
  VDS_S_FS_LOCK = 271747_i32
  VDS_E_READONLY = -2147211900_i32
  VDS_E_INVALID_VOLUME_TYPE = -2147211899_i32
  VDS_E_BAD_BOOT_DISK = -2147211898_i32
  VDS_E_LOG_UPDATE = -2147211897_i32
  VDS_E_VOLUME_MIRRORED = -2147211896_i32
  VDS_E_VOLUME_SIMPLE_SPANNED = -2147211895_i32
  VDS_E_NO_VALID_LOG_COPIES = -2147211894_i32
  VDS_S_PLEX_NOT_LOADED_TO_CACHE = 271755_i32
  VDS_E_PLEX_NOT_LOADED_TO_CACHE = -2147211893_i32
  VDS_E_PARTITION_MSR = -2147211892_i32
  VDS_E_PARTITION_LDM = -2147211891_i32
  VDS_S_WINPE_BOOTENTRY = 271758_i32
  VDS_E_ALIGN_NOT_A_POWER_OF_TWO = -2147211889_i32
  VDS_E_ALIGN_IS_ZERO = -2147211888_i32
  VDS_E_SHRINK_IN_PROGRESS = -2147211887_i32
  VDS_E_CANT_INVALIDATE_FVE = -2147211886_i32
  VDS_E_FS_NOT_DETERMINED = -2147211885_i32
  VDS_E_DISK_NOT_OFFLINE = -2147211883_i32
  VDS_E_FAILED_TO_ONLINE_DISK = -2147211882_i32
  VDS_E_FAILED_TO_OFFLINE_DISK = -2147211881_i32
  VDS_E_BAD_REVISION_NUMBER = -2147211880_i32
  VDS_E_SHRINK_USER_CANCELLED = -2147211879_i32
  VDS_E_SHRINK_DIRTY_VOLUME = -2147211878_i32
  VDS_S_NAME_TRUNCATED = 272128_i32
  VDS_E_NAME_NOT_UNIQUE = -2147211519_i32
  VDS_S_STATUSES_INCOMPLETELY_SET = 272130_i32
  VDS_E_ADDRESSES_INCOMPLETELY_SET = -2147211517_i32
  VDS_E_SECURITY_INCOMPLETELY_SET = -2147211515_i32
  VDS_E_TARGET_SPECIFIC_NOT_SUPPORTED = -2147211514_i32
  VDS_E_INITIATOR_SPECIFIC_NOT_SUPPORTED = -2147211513_i32
  VDS_E_ISCSI_LOGIN_FAILED = -2147211512_i32
  VDS_E_ISCSI_LOGOUT_FAILED = -2147211511_i32
  VDS_E_ISCSI_SESSION_NOT_FOUND = -2147211510_i32
  VDS_E_ASSOCIATED_LUNS_EXIST = -2147211509_i32
  VDS_E_ASSOCIATED_PORTALS_EXIST = -2147211508_i32
  VDS_E_NO_DISCOVERY_DOMAIN = -2147211507_i32
  VDS_E_MULTIPLE_DISCOVERY_DOMAINS = -2147211506_i32
  VDS_E_NO_DISK_PATHNAME = -2147211505_i32
  VDS_E_ISCSI_LOGOUT_INCOMPLETE = -2147211504_i32
  VDS_E_NO_VOLUME_PATHNAME = -2147211503_i32
  VDS_E_PROVIDER_CACHE_OUTOFSYNC = -2147211502_i32
  VDS_E_NO_IMPORT_TARGET = -2147211501_i32
  VDS_S_ALREADY_EXISTS = 272148_i32
  VDS_S_PROPERTIES_INCOMPLETE = 272149_i32
  VDS_S_ISCSI_SESSION_NOT_FOUND_PERSISTENT_LOGIN_REMOVED = 272384_i32
  VDS_S_ISCSI_PERSISTENT_LOGIN_MAY_NOT_BE_REMOVED = 272385_i32
  VDS_S_ISCSI_LOGIN_ALREAD_EXISTS = 272386_i32
  VDS_E_UNABLE_TO_FIND_BOOT_DISK = -2147211261_i32
  VDS_E_INCORRECT_BOOT_VOLUME_EXTENT_INFO = -2147211260_i32
  VDS_E_GET_SAN_POLICY = -2147211259_i32
  VDS_E_SET_SAN_POLICY = -2147211258_i32
  VDS_E_BOOT_DISK = -2147211257_i32
  VDS_S_DISK_MOUNT_FAILED = 272392_i32
  VDS_S_DISK_DISMOUNT_FAILED = 272393_i32
  VDS_E_DISK_IS_OFFLINE = -2147211254_i32
  VDS_E_DISK_IS_READ_ONLY = -2147211253_i32
  VDS_E_PAGEFILE_DISK = -2147211252_i32
  VDS_E_HIBERNATION_FILE_DISK = -2147211251_i32
  VDS_E_CRASHDUMP_DISK = -2147211250_i32
  VDS_E_UNABLE_TO_FIND_SYSTEM_DISK = -2147211249_i32
  VDS_E_INCORRECT_SYSTEM_VOLUME_EXTENT_INFO = -2147211248_i32
  VDS_E_SYSTEM_DISK = -2147211247_i32
  VDS_E_VOLUME_SHRINK_FVE_LOCKED = -2147211246_i32
  VDS_E_VOLUME_SHRINK_FVE_CORRUPT = -2147211245_i32
  VDS_E_VOLUME_SHRINK_FVE_RECOVERY = -2147211244_i32
  VDS_E_VOLUME_SHRINK_FVE = -2147211243_i32
  VDS_E_SHRINK_OVER_DATA = -2147211242_i32
  VDS_E_INVALID_SHRINK_SIZE = -2147211241_i32
  VDS_E_LUN_DISK_MISSING = -2147211240_i32
  VDS_E_LUN_DISK_FAILED = -2147211239_i32
  VDS_E_LUN_DISK_NOT_READY = -2147211238_i32
  VDS_E_LUN_DISK_NO_MEDIA = -2147211237_i32
  VDS_E_LUN_NOT_READY = -2147211236_i32
  VDS_E_LUN_OFFLINE = -2147211235_i32
  VDS_E_LUN_FAILED = -2147211234_i32
  VDS_E_VOLUME_EXTEND_FVE_LOCKED = -2147211233_i32
  VDS_E_VOLUME_EXTEND_FVE_CORRUPT = -2147211232_i32
  VDS_E_VOLUME_EXTEND_FVE_RECOVERY = -2147211231_i32
  VDS_E_VOLUME_EXTEND_FVE = -2147211230_i32
  VDS_E_SECTOR_SIZE_ERROR = -2147211229_i32
  VDS_E_INITIATOR_ADAPTER_NOT_FOUND = -2147211008_i32
  VDS_E_TARGET_PORTAL_NOT_FOUND = -2147211007_i32
  VDS_E_INVALID_PORT_PATH = -2147211006_i32
  VDS_E_INVALID_ISCSI_TARGET_NAME = -2147211005_i32
  VDS_E_SET_TUNNEL_MODE_OUTER_ADDRESS = -2147211004_i32
  VDS_E_ISCSI_GET_IKE_INFO = -2147211003_i32
  VDS_E_ISCSI_SET_IKE_INFO = -2147211002_i32
  VDS_E_SUBSYSTEM_ID_IS_NULL = -2147211001_i32
  VDS_E_ISCSI_INITIATOR_NODE_NAME = -2147211000_i32
  VDS_E_ISCSI_GROUP_PRESHARE_KEY = -2147210999_i32
  VDS_E_ISCSI_CHAP_SECRET = -2147210998_i32
  VDS_E_INVALID_IP_ADDRESS = -2147210997_i32
  VDS_E_REBOOT_REQUIRED = -2147210996_i32
  VDS_E_VOLUME_GUID_PATHNAME_NOT_ALLOWED = -2147210995_i32
  VDS_E_BOOT_PAGEFILE_DRIVE_LETTER = -2147210994_i32
  VDS_E_DELETE_WITH_CRITICAL = -2147210993_i32
  VDS_E_CLEAN_WITH_DATA = -2147210992_i32
  VDS_E_CLEAN_WITH_OEM = -2147210991_i32
  VDS_E_CLEAN_WITH_CRITICAL = -2147210990_i32
  VDS_E_FORMAT_CRITICAL = -2147210989_i32
  VDS_E_NTFS_FORMAT_NOT_SUPPORTED = -2147210988_i32
  VDS_E_FAT32_FORMAT_NOT_SUPPORTED = -2147210987_i32
  VDS_E_FAT_FORMAT_NOT_SUPPORTED = -2147210986_i32
  VDS_E_FORMAT_NOT_SUPPORTED = -2147210985_i32
  VDS_E_COMPRESSION_NOT_SUPPORTED = -2147210984_i32
  VDS_E_VDISK_NOT_OPEN = -2147210983_i32
  VDS_E_VDISK_INVALID_OP_STATE = -2147210982_i32
  VDS_E_INVALID_PATH = -2147210981_i32
  VDS_E_INVALID_ISCSI_PATH = -2147210980_i32
  VDS_E_SHRINK_LUN_NOT_UNMASKED = -2147210979_i32
  VDS_E_LUN_DISK_READ_ONLY = -2147210978_i32
  VDS_E_LUN_UPDATE_DISK = -2147210977_i32
  VDS_E_LUN_DYNAMIC = -2147210976_i32
  VDS_E_LUN_DYNAMIC_OFFLINE = -2147210975_i32
  VDS_E_LUN_SHRINK_GPT_HEADER = -2147210974_i32
  VDS_E_MIRROR_NOT_SUPPORTED = -2147210973_i32
  VDS_E_RAID5_NOT_SUPPORTED = -2147210972_i32
  VDS_E_DISK_NOT_CONVERTIBLE_SIZE = -2147210971_i32
  VDS_E_OFFLINE_NOT_SUPPORTED = -2147210970_i32
  VDS_E_VDISK_PATHNAME_INVALID = -2147210969_i32
  VDS_E_EXTEND_TOO_MANY_CLUSTERS = -2147210968_i32
  VDS_E_EXTEND_UNKNOWN_FILESYSTEM = -2147210967_i32
  VDS_E_SHRINK_UNKNOWN_FILESYSTEM = -2147210966_i32
  VDS_E_VD_DISK_NOT_OPEN = -2147210965_i32
  VDS_E_VD_DISK_IS_EXPANDING = -2147210964_i32
  VDS_E_VD_DISK_IS_COMPACTING = -2147210963_i32
  VDS_E_VD_DISK_IS_MERGING = -2147210962_i32
  VDS_E_VD_IS_ATTACHED = -2147210961_i32
  VDS_E_VD_DISK_ALREADY_OPEN = -2147210960_i32
  VDS_E_VD_DISK_ALREADY_EXPANDING = -2147210959_i32
  VDS_E_VD_ALREADY_COMPACTING = -2147210958_i32
  VDS_E_VD_ALREADY_MERGING = -2147210957_i32
  VDS_E_VD_ALREADY_ATTACHED = -2147210956_i32
  VDS_E_VD_ALREADY_DETACHED = -2147210955_i32
  VDS_E_VD_NOT_ATTACHED_READONLY = -2147210954_i32
  VDS_E_VD_IS_BEING_ATTACHED = -2147210953_i32
  VDS_E_VD_IS_BEING_DETACHED = -2147210952_i32
  VDS_E_NO_POOL = -2147210752_i32
  VDS_E_NO_POOL_CREATED = -2147210751_i32
  VDS_E_NO_MAINTENANCE_MODE = -2147210750_i32
  VDS_E_BLOCK_CLUSTERED = -2147210749_i32
  VDS_E_DISK_HAS_BANDS = -2147210748_i32
  VDS_E_INVALID_STATE = -2147210747_i32
  VDS_E_REFS_FORMAT_NOT_SUPPORTED = -2147210746_i32
  VDS_E_DELETE_WITH_BOOTBACKING = -2147210745_i32
  VDS_E_FORMAT_WITH_BOOTBACKING = -2147210744_i32
  VDS_E_CLEAN_WITH_BOOTBACKING = -2147210743_i32
  VDS_E_SHRINK_EXTEND_UNALIGNED = -2147210496_i32

  enum VDS_NF_PACK : UInt32
    VDS_NF_PACK_ARRIVE = 1_u32
    VDS_NF_PACK_DEPART = 2_u32
    VDS_NF_PACK_MODIFY = 3_u32
  end
  enum VDS_NF_FILE_SYSTEM : UInt32
    VDS_NF_FILE_SYSTEM_MODIFY = 203_u32
    VDS_NF_FILE_SYSTEM_FORMAT_PROGRESS = 204_u32
  end
  enum VDS_NF_CONTROLLER : UInt32
    VDS_NF_CONTROLLER_ARRIVE = 103_u32
    VDS_NF_CONTROLLER_DEPART = 104_u32
    VDS_NF_CONTROLLER_MODIFY = 350_u32
    VDS_NF_CONTROLLER_REMOVED = 351_u32
  end
  enum VDS_NF_DRIVE : UInt32
    VDS_NF_DRIVE_ARRIVE = 105_u32
    VDS_NF_DRIVE_DEPART = 106_u32
    VDS_NF_DRIVE_MODIFY = 107_u32
    VDS_NF_DRIVE_REMOVED = 354_u32
  end
  enum VDS_NF_PORT : UInt32
    VDS_NF_PORT_ARRIVE = 121_u32
    VDS_NF_PORT_DEPART = 122_u32
    VDS_NF_PORT_MODIFY = 352_u32
    VDS_NF_PORT_REMOVED = 353_u32
  end
  enum VDS_NF_LUN : UInt32
    VDS_NF_LUN_ARRIVE = 108_u32
    VDS_NF_LUN_DEPART = 109_u32
    VDS_NF_LUN_MODIFY = 110_u32
  end
  enum VDS_NF_DISK : UInt32
    VDS_NF_DISK_ARRIVE = 8_u32
    VDS_NF_DISK_DEPART = 9_u32
    VDS_NF_DISK_MODIFY = 10_u32
  end
  enum VDS_STORAGE_IDENTIFIER_CODE_SET
    VDSStorageIdCodeSetReserved = 0_i32
    VDSStorageIdCodeSetBinary = 1_i32
    VDSStorageIdCodeSetAscii = 2_i32
    VDSStorageIdCodeSetUtf8 = 3_i32
  end
  enum VDS_STORAGE_IDENTIFIER_TYPE
    VDSStorageIdTypeVendorSpecific = 0_i32
    VDSStorageIdTypeVendorId = 1_i32
    VDSStorageIdTypeEUI64 = 2_i32
    VDSStorageIdTypeFCPHName = 3_i32
    VDSStorageIdTypePortRelative = 4_i32
    VDSStorageIdTypeTargetPortGroup = 5_i32
    VDSStorageIdTypeLogicalUnitGroup = 6_i32
    VDSStorageIdTypeMD5LogicalUnitIdentifier = 7_i32
    VDSStorageIdTypeScsiNameString = 8_i32
  end
  enum VDS_STORAGE_BUS_TYPE
    VDSBusTypeUnknown = 0_i32
    VDSBusTypeScsi = 1_i32
    VDSBusTypeAtapi = 2_i32
    VDSBusTypeAta = 3_i32
    VDSBusType1394 = 4_i32
    VDSBusTypeSsa = 5_i32
    VDSBusTypeFibre = 6_i32
    VDSBusTypeUsb = 7_i32
    VDSBusTypeRAID = 8_i32
    VDSBusTypeiScsi = 9_i32
    VDSBusTypeSas = 10_i32
    VDSBusTypeSata = 11_i32
    VDSBusTypeSd = 12_i32
    VDSBusTypeMmc = 13_i32
    VDSBusTypeMax = 14_i32
    VDSBusTypeVirtual = 14_i32
    VDSBusTypeFileBackedVirtual = 15_i32
    VDSBusTypeSpaces = 16_i32
    VDSBusTypeNVMe = 17_i32
    VDSBusTypeScm = 18_i32
    VDSBusTypeUfs = 19_i32
    VDSBusTypeMaxReserved = 127_i32
  end
  enum VDS_INTERCONNECT_ADDRESS_TYPE
    VDS_IA_UNKNOWN = 0_i32
    VDS_IA_FCFS = 1_i32
    VDS_IA_FCPH = 2_i32
    VDS_IA_FCPH3 = 3_i32
    VDS_IA_MAC = 4_i32
    VDS_IA_SCSI = 5_i32
  end
  enum VDS_OBJECT_TYPE
    VDS_OT_UNKNOWN = 0_i32
    VDS_OT_PROVIDER = 1_i32
    VDS_OT_PACK = 10_i32
    VDS_OT_VOLUME = 11_i32
    VDS_OT_VOLUME_PLEX = 12_i32
    VDS_OT_DISK = 13_i32
    VDS_OT_SUB_SYSTEM = 30_i32
    VDS_OT_CONTROLLER = 31_i32
    VDS_OT_DRIVE = 32_i32
    VDS_OT_LUN = 33_i32
    VDS_OT_LUN_PLEX = 34_i32
    VDS_OT_PORT = 35_i32
    VDS_OT_PORTAL = 36_i32
    VDS_OT_TARGET = 37_i32
    VDS_OT_PORTAL_GROUP = 38_i32
    VDS_OT_STORAGE_POOL = 39_i32
    VDS_OT_HBAPORT = 90_i32
    VDS_OT_INIT_ADAPTER = 91_i32
    VDS_OT_INIT_PORTAL = 92_i32
    VDS_OT_ASYNC = 100_i32
    VDS_OT_ENUM = 101_i32
    VDS_OT_VDISK = 200_i32
    VDS_OT_OPEN_VDISK = 201_i32
  end
  enum VDS_PROVIDER_TYPE
    VDS_PT_UNKNOWN = 0_i32
    VDS_PT_SOFTWARE = 1_i32
    VDS_PT_HARDWARE = 2_i32
    VDS_PT_VIRTUALDISK = 3_i32
    VDS_PT_MAX = 4_i32
  end
  enum VDS_PROVIDER_FLAG
    VDS_PF_DYNAMIC = 1_i32
    VDS_PF_INTERNAL_HARDWARE_PROVIDER = 2_i32
    VDS_PF_ONE_DISK_ONLY_PER_PACK = 4_i32
    VDS_PF_ONE_PACK_ONLINE_ONLY = 8_i32
    VDS_PF_VOLUME_SPACE_MUST_BE_CONTIGUOUS = 16_i32
    VDS_PF_SUPPORT_DYNAMIC = -2147483648_i32
    VDS_PF_SUPPORT_FAULT_TOLERANT = 1073741824_i32
    VDS_PF_SUPPORT_DYNAMIC_1394 = 536870912_i32
    VDS_PF_SUPPORT_MIRROR = 32_i32
    VDS_PF_SUPPORT_RAID5 = 64_i32
  end
  enum VDS_RECOVER_ACTION
    VDS_RA_UNKNOWN = 0_i32
    VDS_RA_REFRESH = 1_i32
    VDS_RA_RESTART = 2_i32
  end
  enum VDS_NOTIFICATION_TARGET_TYPE
    VDS_NTT_UNKNOWN = 0_i32
    VDS_NTT_PACK = 10_i32
    VDS_NTT_VOLUME = 11_i32
    VDS_NTT_DISK = 13_i32
    VDS_NTT_PARTITION = 60_i32
    VDS_NTT_DRIVE_LETTER = 61_i32
    VDS_NTT_FILE_SYSTEM = 62_i32
    VDS_NTT_MOUNT_POINT = 63_i32
    VDS_NTT_SUB_SYSTEM = 30_i32
    VDS_NTT_CONTROLLER = 31_i32
    VDS_NTT_DRIVE = 32_i32
    VDS_NTT_LUN = 33_i32
    VDS_NTT_PORT = 35_i32
    VDS_NTT_PORTAL = 36_i32
    VDS_NTT_TARGET = 37_i32
    VDS_NTT_PORTAL_GROUP = 38_i32
    VDS_NTT_SERVICE = 200_i32
  end
  enum VDS_ASYNC_OUTPUT_TYPE
    VDS_ASYNCOUT_UNKNOWN = 0_i32
    VDS_ASYNCOUT_CREATEVOLUME = 1_i32
    VDS_ASYNCOUT_EXTENDVOLUME = 2_i32
    VDS_ASYNCOUT_SHRINKVOLUME = 3_i32
    VDS_ASYNCOUT_ADDVOLUMEPLEX = 4_i32
    VDS_ASYNCOUT_BREAKVOLUMEPLEX = 5_i32
    VDS_ASYNCOUT_REMOVEVOLUMEPLEX = 6_i32
    VDS_ASYNCOUT_REPAIRVOLUMEPLEX = 7_i32
    VDS_ASYNCOUT_RECOVERPACK = 8_i32
    VDS_ASYNCOUT_REPLACEDISK = 9_i32
    VDS_ASYNCOUT_CREATEPARTITION = 10_i32
    VDS_ASYNCOUT_CLEAN = 11_i32
    VDS_ASYNCOUT_CREATELUN = 50_i32
    VDS_ASYNCOUT_ADDLUNPLEX = 52_i32
    VDS_ASYNCOUT_REMOVELUNPLEX = 53_i32
    VDS_ASYNCOUT_EXTENDLUN = 54_i32
    VDS_ASYNCOUT_SHRINKLUN = 55_i32
    VDS_ASYNCOUT_RECOVERLUN = 56_i32
    VDS_ASYNCOUT_LOGINTOTARGET = 60_i32
    VDS_ASYNCOUT_LOGOUTFROMTARGET = 61_i32
    VDS_ASYNCOUT_CREATETARGET = 62_i32
    VDS_ASYNCOUT_CREATEPORTALGROUP = 63_i32
    VDS_ASYNCOUT_DELETETARGET = 64_i32
    VDS_ASYNCOUT_ADDPORTAL = 65_i32
    VDS_ASYNCOUT_REMOVEPORTAL = 66_i32
    VDS_ASYNCOUT_DELETEPORTALGROUP = 67_i32
    VDS_ASYNCOUT_FORMAT = 101_i32
    VDS_ASYNCOUT_CREATE_VDISK = 200_i32
    VDS_ASYNCOUT_ATTACH_VDISK = 201_i32
    VDS_ASYNCOUT_COMPACT_VDISK = 202_i32
    VDS_ASYNCOUT_MERGE_VDISK = 203_i32
    VDS_ASYNCOUT_EXPAND_VDISK = 204_i32
  end
  enum VDS_IPADDRESS_TYPE
    VDS_IPT_TEXT = 0_i32
    VDS_IPT_IPV4 = 1_i32
    VDS_IPT_IPV6 = 2_i32
    VDS_IPT_EMPTY = 3_i32
  end
  enum VDS_HEALTH
    VDS_H_UNKNOWN = 0_i32
    VDS_H_HEALTHY = 1_i32
    VDS_H_REBUILDING = 2_i32
    VDS_H_STALE = 3_i32
    VDS_H_FAILING = 4_i32
    VDS_H_FAILING_REDUNDANCY = 5_i32
    VDS_H_FAILED_REDUNDANCY = 6_i32
    VDS_H_FAILED_REDUNDANCY_FAILING = 7_i32
    VDS_H_FAILED = 8_i32
    VDS_H_REPLACED = 9_i32
    VDS_H_PENDING_FAILURE = 10_i32
    VDS_H_DEGRADED = 11_i32
  end
  enum VDS_TRANSITION_STATE
    VDS_TS_UNKNOWN = 0_i32
    VDS_TS_STABLE = 1_i32
    VDS_TS_EXTENDING = 2_i32
    VDS_TS_SHRINKING = 3_i32
    VDS_TS_RECONFIGING = 4_i32
    VDS_TS_RESTRIPING = 5_i32
  end
  enum VDS_FILE_SYSTEM_TYPE
    VDS_FST_UNKNOWN = 0_i32
    VDS_FST_RAW = 1_i32
    VDS_FST_FAT = 2_i32
    VDS_FST_FAT32 = 3_i32
    VDS_FST_NTFS = 4_i32
    VDS_FST_CDFS = 5_i32
    VDS_FST_UDF = 6_i32
    VDS_FST_EXFAT = 7_i32
    VDS_FST_CSVFS = 8_i32
    VDS_FST_REFS = 9_i32
  end
  enum VDS_HBAPORT_TYPE
    VDS_HPT_UNKNOWN = 1_i32
    VDS_HPT_OTHER = 2_i32
    VDS_HPT_NOTPRESENT = 3_i32
    VDS_HPT_NPORT = 5_i32
    VDS_HPT_NLPORT = 6_i32
    VDS_HPT_FLPORT = 7_i32
    VDS_HPT_FPORT = 8_i32
    VDS_HPT_EPORT = 9_i32
    VDS_HPT_GPORT = 10_i32
    VDS_HPT_LPORT = 20_i32
    VDS_HPT_PTP = 21_i32
  end
  enum VDS_HBAPORT_STATUS
    VDS_HPS_UNKNOWN = 1_i32
    VDS_HPS_ONLINE = 2_i32
    VDS_HPS_OFFLINE = 3_i32
    VDS_HPS_BYPASSED = 4_i32
    VDS_HPS_DIAGNOSTICS = 5_i32
    VDS_HPS_LINKDOWN = 6_i32
    VDS_HPS_ERROR = 7_i32
    VDS_HPS_LOOPBACK = 8_i32
  end
  enum VDS_HBAPORT_SPEED_FLAG
    VDS_HSF_UNKNOWN = 0_i32
    VDS_HSF_1GBIT = 1_i32
    VDS_HSF_2GBIT = 2_i32
    VDS_HSF_10GBIT = 4_i32
    VDS_HSF_4GBIT = 8_i32
    VDS_HSF_NOT_NEGOTIATED = 32768_i32
  end
  enum VDS_PATH_STATUS
    VDS_MPS_UNKNOWN = 0_i32
    VDS_MPS_ONLINE = 1_i32
    VDS_MPS_FAILED = 5_i32
    VDS_MPS_STANDBY = 7_i32
  end
  enum VDS_LOADBALANCE_POLICY_ENUM
    VDS_LBP_UNKNOWN = 0_i32
    VDS_LBP_FAILOVER = 1_i32
    VDS_LBP_ROUND_ROBIN = 2_i32
    VDS_LBP_ROUND_ROBIN_WITH_SUBSET = 3_i32
    VDS_LBP_DYN_LEAST_QUEUE_DEPTH = 4_i32
    VDS_LBP_WEIGHTED_PATHS = 5_i32
    VDS_LBP_LEAST_BLOCKS = 6_i32
    VDS_LBP_VENDOR_SPECIFIC = 7_i32
  end
  enum VDS_PROVIDER_LBSUPPORT_FLAG
    VDS_LBF_FAILOVER = 1_i32
    VDS_LBF_ROUND_ROBIN = 2_i32
    VDS_LBF_ROUND_ROBIN_WITH_SUBSET = 4_i32
    VDS_LBF_DYN_LEAST_QUEUE_DEPTH = 8_i32
    VDS_LBF_WEIGHTED_PATHS = 16_i32
    VDS_LBF_LEAST_BLOCKS = 32_i32
    VDS_LBF_VENDOR_SPECIFIC = 64_i32
  end
  enum VDS_VERSION_SUPPORT_FLAG
    VDS_VSF_1_0 = 1_i32
    VDS_VSF_1_1 = 2_i32
    VDS_VSF_2_0 = 4_i32
    VDS_VSF_2_1 = 8_i32
    VDS_VSF_3_0 = 16_i32
  end
  enum VDS_HWPROVIDER_TYPE
    VDS_HWT_UNKNOWN = 0_i32
    VDS_HWT_PCI_RAID = 1_i32
    VDS_HWT_FIBRE_CHANNEL = 2_i32
    VDS_HWT_ISCSI = 3_i32
    VDS_HWT_SAS = 4_i32
    VDS_HWT_HYBRID = 5_i32
  end
  enum VDS_ISCSI_LOGIN_TYPE
    VDS_ILT_MANUAL = 0_i32
    VDS_ILT_PERSISTENT = 1_i32
    VDS_ILT_BOOT = 2_i32
  end
  enum VDS_ISCSI_AUTH_TYPE
    VDS_IAT_NONE = 0_i32
    VDS_IAT_CHAP = 1_i32
    VDS_IAT_MUTUAL_CHAP = 2_i32
  end
  enum VDS_ISCSI_IPSEC_FLAG
    VDS_IIF_VALID = 1_i32
    VDS_IIF_IKE = 2_i32
    VDS_IIF_MAIN_MODE = 4_i32
    VDS_IIF_AGGRESSIVE_MODE = 8_i32
    VDS_IIF_PFS_ENABLE = 16_i32
    VDS_IIF_TRANSPORT_MODE_PREFERRED = 32_i32
    VDS_IIF_TUNNEL_MODE_PREFERRED = 64_i32
  end
  enum VDS_ISCSI_LOGIN_FLAG
    VDS_ILF_REQUIRE_IPSEC = 1_i32
    VDS_ILF_MULTIPATH_ENABLED = 2_i32
  end
  enum VDS_SUB_SYSTEM_STATUS
    VDS_SSS_UNKNOWN = 0_i32
    VDS_SSS_ONLINE = 1_i32
    VDS_SSS_NOT_READY = 2_i32
    VDS_SSS_OFFLINE = 4_i32
    VDS_SSS_FAILED = 5_i32
    VDS_SSS_PARTIALLY_MANAGED = 9_i32
  end
  enum VDS_SUB_SYSTEM_FLAG
    VDS_SF_LUN_MASKING_CAPABLE = 1_i32
    VDS_SF_LUN_PLEXING_CAPABLE = 2_i32
    VDS_SF_LUN_REMAPPING_CAPABLE = 4_i32
    VDS_SF_DRIVE_EXTENT_CAPABLE = 8_i32
    VDS_SF_HARDWARE_CHECKSUM_CAPABLE = 16_i32
    VDS_SF_RADIUS_CAPABLE = 32_i32
    VDS_SF_READ_BACK_VERIFY_CAPABLE = 64_i32
    VDS_SF_WRITE_THROUGH_CACHING_CAPABLE = 128_i32
    VDS_SF_SUPPORTS_FAULT_TOLERANT_LUNS = 512_i32
    VDS_SF_SUPPORTS_NON_FAULT_TOLERANT_LUNS = 1024_i32
    VDS_SF_SUPPORTS_SIMPLE_LUNS = 2048_i32
    VDS_SF_SUPPORTS_SPAN_LUNS = 4096_i32
    VDS_SF_SUPPORTS_STRIPE_LUNS = 8192_i32
    VDS_SF_SUPPORTS_MIRROR_LUNS = 16384_i32
    VDS_SF_SUPPORTS_PARITY_LUNS = 32768_i32
    VDS_SF_SUPPORTS_AUTH_CHAP = 65536_i32
    VDS_SF_SUPPORTS_AUTH_MUTUAL_CHAP = 131072_i32
    VDS_SF_SUPPORTS_SIMPLE_TARGET_CONFIG = 262144_i32
    VDS_SF_SUPPORTS_LUN_NUMBER = 524288_i32
    VDS_SF_SUPPORTS_MIRRORED_CACHE = 1048576_i32
    VDS_SF_READ_CACHING_CAPABLE = 2097152_i32
    VDS_SF_WRITE_CACHING_CAPABLE = 4194304_i32
    VDS_SF_MEDIA_SCAN_CAPABLE = 8388608_i32
    VDS_SF_CONSISTENCY_CHECK_CAPABLE = 16777216_i32
  end
  enum VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG
    VDS_SF_SUPPORTS_RAID2_LUNS = 1_i32
    VDS_SF_SUPPORTS_RAID3_LUNS = 2_i32
    VDS_SF_SUPPORTS_RAID4_LUNS = 4_i32
    VDS_SF_SUPPORTS_RAID5_LUNS = 8_i32
    VDS_SF_SUPPORTS_RAID6_LUNS = 16_i32
    VDS_SF_SUPPORTS_RAID01_LUNS = 32_i32
    VDS_SF_SUPPORTS_RAID03_LUNS = 64_i32
    VDS_SF_SUPPORTS_RAID05_LUNS = 128_i32
    VDS_SF_SUPPORTS_RAID10_LUNS = 256_i32
    VDS_SF_SUPPORTS_RAID15_LUNS = 512_i32
    VDS_SF_SUPPORTS_RAID30_LUNS = 1024_i32
    VDS_SF_SUPPORTS_RAID50_LUNS = 2048_i32
    VDS_SF_SUPPORTS_RAID51_LUNS = 4096_i32
    VDS_SF_SUPPORTS_RAID53_LUNS = 8192_i32
    VDS_SF_SUPPORTS_RAID60_LUNS = 16384_i32
    VDS_SF_SUPPORTS_RAID61_LUNS = 32768_i32
  end
  enum VDS_INTERCONNECT_FLAG
    VDS_ITF_PCI_RAID = 1_i32
    VDS_ITF_FIBRE_CHANNEL = 2_i32
    VDS_ITF_ISCSI = 4_i32
    VDS_ITF_SAS = 8_i32
  end
  enum VDS_CONTROLLER_STATUS
    VDS_CS_UNKNOWN = 0_i32
    VDS_CS_ONLINE = 1_i32
    VDS_CS_NOT_READY = 2_i32
    VDS_CS_OFFLINE = 4_i32
    VDS_CS_FAILED = 5_i32
    VDS_CS_REMOVED = 8_i32
  end
  enum VDS_PORT_STATUS
    VDS_PRS_UNKNOWN = 0_i32
    VDS_PRS_ONLINE = 1_i32
    VDS_PRS_NOT_READY = 2_i32
    VDS_PRS_OFFLINE = 4_i32
    VDS_PRS_FAILED = 5_i32
    VDS_PRS_REMOVED = 8_i32
  end
  enum VDS_DRIVE_STATUS
    VDS_DRS_UNKNOWN = 0_i32
    VDS_DRS_ONLINE = 1_i32
    VDS_DRS_NOT_READY = 2_i32
    VDS_DRS_OFFLINE = 4_i32
    VDS_DRS_FAILED = 5_i32
    VDS_DRS_REMOVED = 8_i32
  end
  enum VDS_DRIVE_FLAG
    VDS_DRF_HOTSPARE = 1_i32
    VDS_DRF_ASSIGNED = 2_i32
    VDS_DRF_UNASSIGNED = 4_i32
    VDS_DRF_HOTSPARE_IN_USE = 8_i32
    VDS_DRF_HOTSPARE_STANDBY = 16_i32
  end
  enum VDS_LUN_TYPE
    VDS_LT_UNKNOWN = 0_i32
    VDS_LT_DEFAULT = 1_i32
    VDS_LT_FAULT_TOLERANT = 2_i32
    VDS_LT_NON_FAULT_TOLERANT = 3_i32
    VDS_LT_SIMPLE = 10_i32
    VDS_LT_SPAN = 11_i32
    VDS_LT_STRIPE = 12_i32
    VDS_LT_MIRROR = 13_i32
    VDS_LT_PARITY = 14_i32
    VDS_LT_RAID2 = 15_i32
    VDS_LT_RAID3 = 16_i32
    VDS_LT_RAID4 = 17_i32
    VDS_LT_RAID5 = 18_i32
    VDS_LT_RAID6 = 19_i32
    VDS_LT_RAID01 = 20_i32
    VDS_LT_RAID03 = 21_i32
    VDS_LT_RAID05 = 22_i32
    VDS_LT_RAID10 = 23_i32
    VDS_LT_RAID15 = 24_i32
    VDS_LT_RAID30 = 25_i32
    VDS_LT_RAID50 = 26_i32
    VDS_LT_RAID51 = 27_i32
    VDS_LT_RAID53 = 28_i32
    VDS_LT_RAID60 = 29_i32
    VDS_LT_RAID61 = 30_i32
  end
  enum VDS_LUN_STATUS
    VDS_LS_UNKNOWN = 0_i32
    VDS_LS_ONLINE = 1_i32
    VDS_LS_NOT_READY = 2_i32
    VDS_LS_OFFLINE = 4_i32
    VDS_LS_FAILED = 5_i32
  end
  enum VDS_LUN_FLAG
    VDS_LF_LBN_REMAP_ENABLED = 1_i32
    VDS_LF_READ_BACK_VERIFY_ENABLED = 2_i32
    VDS_LF_WRITE_THROUGH_CACHING_ENABLED = 4_i32
    VDS_LF_HARDWARE_CHECKSUM_ENABLED = 8_i32
    VDS_LF_READ_CACHE_ENABLED = 16_i32
    VDS_LF_WRITE_CACHE_ENABLED = 32_i32
    VDS_LF_MEDIA_SCAN_ENABLED = 64_i32
    VDS_LF_CONSISTENCY_CHECK_ENABLED = 128_i32
    VDS_LF_SNAPSHOT = 256_i32
  end
  enum VDS_LUN_PLEX_TYPE
    VDS_LPT_UNKNOWN = 0_i32
    VDS_LPT_SIMPLE = 10_i32
    VDS_LPT_SPAN = 11_i32
    VDS_LPT_STRIPE = 12_i32
    VDS_LPT_PARITY = 14_i32
    VDS_LPT_RAID2 = 15_i32
    VDS_LPT_RAID3 = 16_i32
    VDS_LPT_RAID4 = 17_i32
    VDS_LPT_RAID5 = 18_i32
    VDS_LPT_RAID6 = 19_i32
    VDS_LPT_RAID03 = 21_i32
    VDS_LPT_RAID05 = 22_i32
    VDS_LPT_RAID10 = 23_i32
    VDS_LPT_RAID15 = 24_i32
    VDS_LPT_RAID30 = 25_i32
    VDS_LPT_RAID50 = 26_i32
    VDS_LPT_RAID53 = 28_i32
    VDS_LPT_RAID60 = 29_i32
  end
  enum VDS_LUN_PLEX_STATUS
    VDS_LPS_UNKNOWN = 0_i32
    VDS_LPS_ONLINE = 1_i32
    VDS_LPS_NOT_READY = 2_i32
    VDS_LPS_OFFLINE = 4_i32
    VDS_LPS_FAILED = 5_i32
  end
  enum VDS_LUN_PLEX_FLAG
    VDS_LPF_LBN_REMAP_ENABLED = 1_i32
  end
  enum VDS_ISCSI_PORTAL_STATUS
    VDS_IPS_UNKNOWN = 0_i32
    VDS_IPS_ONLINE = 1_i32
    VDS_IPS_NOT_READY = 2_i32
    VDS_IPS_OFFLINE = 4_i32
    VDS_IPS_FAILED = 5_i32
  end
  enum VDS_STORAGE_POOL_STATUS
    VDS_SPS_UNKNOWN = 0_i32
    VDS_SPS_ONLINE = 1_i32
    VDS_SPS_NOT_READY = 2_i32
    VDS_SPS_OFFLINE = 4_i32
  end
  enum VDS_STORAGE_POOL_TYPE
    VDS_SPT_UNKNOWN = 0_i32
    VDS_SPT_PRIMORDIAL = 1_i32
    VDS_SPT_CONCRETE = 2_i32
  end
  enum VDS_MAINTENANCE_OPERATION
    BlinkLight = 1_i32
    BeepAlarm = 2_i32
    SpinDown = 3_i32
    SpinUp = 4_i32
    Ping = 5_i32
  end
  enum VDS_RAID_TYPE
    VDS_RT_UNKNOWN = 0_i32
    VDS_RT_RAID0 = 10_i32
    VDS_RT_RAID1 = 11_i32
    VDS_RT_RAID2 = 12_i32
    VDS_RT_RAID3 = 13_i32
    VDS_RT_RAID4 = 14_i32
    VDS_RT_RAID5 = 15_i32
    VDS_RT_RAID6 = 16_i32
    VDS_RT_RAID01 = 17_i32
    VDS_RT_RAID03 = 18_i32
    VDS_RT_RAID05 = 19_i32
    VDS_RT_RAID10 = 20_i32
    VDS_RT_RAID15 = 21_i32
    VDS_RT_RAID30 = 22_i32
    VDS_RT_RAID50 = 23_i32
    VDS_RT_RAID51 = 24_i32
    VDS_RT_RAID53 = 25_i32
    VDS_RT_RAID60 = 26_i32
    VDS_RT_RAID61 = 27_i32
  end

  @[Extern]
  struct VDS_STORAGE_IDENTIFIER
    property m_CodeSet : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_IDENTIFIER_CODE_SET
    property m_Type : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_IDENTIFIER_TYPE
    property m_cbIdentifier : UInt32
    property m_rgbIdentifier : UInt8*
    def initialize(@m_CodeSet : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_IDENTIFIER_CODE_SET, @m_Type : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_IDENTIFIER_TYPE, @m_cbIdentifier : UInt32, @m_rgbIdentifier : UInt8*)
    end
  end

  @[Extern]
  struct VDS_STORAGE_DEVICE_ID_DESCRIPTOR
    property m_version : UInt32
    property m_cIdentifiers : UInt32
    property m_rgIdentifiers : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_IDENTIFIER*
    def initialize(@m_version : UInt32, @m_cIdentifiers : UInt32, @m_rgIdentifiers : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_IDENTIFIER*)
    end
  end

  @[Extern]
  struct VDS_INTERCONNECT
    property m_addressType : Win32cr::Storage::VirtualDiskService::VDS_INTERCONNECT_ADDRESS_TYPE
    property m_cbPort : UInt32
    property m_pbPort : UInt8*
    property m_cbAddress : UInt32
    property m_pbAddress : UInt8*
    def initialize(@m_addressType : Win32cr::Storage::VirtualDiskService::VDS_INTERCONNECT_ADDRESS_TYPE, @m_cbPort : UInt32, @m_pbPort : UInt8*, @m_cbAddress : UInt32, @m_pbAddress : UInt8*)
    end
  end

  @[Extern]
  struct VDS_LUN_INFORMATION
    property m_version : UInt32
    property m_DeviceType : UInt8
    property m_DeviceTypeModifier : UInt8
    property m_bCommandQueueing : Win32cr::Foundation::BOOL
    property m_BusType : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE
    property m_szVendorId : UInt8*
    property m_szProductId : UInt8*
    property m_szProductRevision : UInt8*
    property m_szSerialNumber : UInt8*
    property m_diskSignature : LibC::GUID
    property m_deviceIdDescriptor : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_DEVICE_ID_DESCRIPTOR
    property m_cInterconnects : UInt32
    property m_rgInterconnects : Win32cr::Storage::VirtualDiskService::VDS_INTERCONNECT*
    def initialize(@m_version : UInt32, @m_DeviceType : UInt8, @m_DeviceTypeModifier : UInt8, @m_bCommandQueueing : Win32cr::Foundation::BOOL, @m_BusType : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE, @m_szVendorId : UInt8*, @m_szProductId : UInt8*, @m_szProductRevision : UInt8*, @m_szSerialNumber : UInt8*, @m_diskSignature : LibC::GUID, @m_deviceIdDescriptor : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_DEVICE_ID_DESCRIPTOR, @m_cInterconnects : UInt32, @m_rgInterconnects : Win32cr::Storage::VirtualDiskService::VDS_INTERCONNECT*)
    end
  end

  @[Extern]
  struct VDS_PACK_NOTIFICATION
    property ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_PACK
    property packId : LibC::GUID
    def initialize(@ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_PACK, @packId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_DISK_NOTIFICATION
    property ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_DISK
    property diskId : LibC::GUID
    def initialize(@ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_DISK, @diskId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_VOLUME_NOTIFICATION
    property ulEvent : UInt32
    property volumeId : LibC::GUID
    property plexId : LibC::GUID
    property ulPercentCompleted : UInt32
    def initialize(@ulEvent : UInt32, @volumeId : LibC::GUID, @plexId : LibC::GUID, @ulPercentCompleted : UInt32)
    end
  end

  @[Extern]
  struct VDS_PARTITION_NOTIFICATION
    property ulEvent : UInt32
    property diskId : LibC::GUID
    property ullOffset : UInt64
    def initialize(@ulEvent : UInt32, @diskId : LibC::GUID, @ullOffset : UInt64)
    end
  end

  @[Extern]
  struct VDS_SERVICE_NOTIFICATION
    property ulEvent : UInt32
    property action : Win32cr::Storage::VirtualDiskService::VDS_RECOVER_ACTION
    def initialize(@ulEvent : UInt32, @action : Win32cr::Storage::VirtualDiskService::VDS_RECOVER_ACTION)
    end
  end

  @[Extern]
  struct VDS_DRIVE_LETTER_NOTIFICATION
    property ulEvent : UInt32
    property wcLetter : UInt16
    property volumeId : LibC::GUID
    def initialize(@ulEvent : UInt32, @wcLetter : UInt16, @volumeId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_FILE_SYSTEM_NOTIFICATION
    property ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_FILE_SYSTEM
    property volumeId : LibC::GUID
    property dwPercentCompleted : UInt32
    def initialize(@ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_FILE_SYSTEM, @volumeId : LibC::GUID, @dwPercentCompleted : UInt32)
    end
  end

  @[Extern]
  struct VDS_MOUNT_POINT_NOTIFICATION
    property ulEvent : UInt32
    property volumeId : LibC::GUID
    def initialize(@ulEvent : UInt32, @volumeId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_SUB_SYSTEM_NOTIFICATION
    property ulEvent : UInt32
    property subSystemId : LibC::GUID
    def initialize(@ulEvent : UInt32, @subSystemId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_CONTROLLER_NOTIFICATION
    property ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_CONTROLLER
    property controllerId : LibC::GUID
    def initialize(@ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_CONTROLLER, @controllerId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_DRIVE_NOTIFICATION
    property ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_DRIVE
    property driveId : LibC::GUID
    def initialize(@ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_DRIVE, @driveId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_LUN_NOTIFICATION
    property ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_LUN
    property lun_id : LibC::GUID
    def initialize(@ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_LUN, @lun_id : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_PORT_NOTIFICATION
    property ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_PORT
    property portId : LibC::GUID
    def initialize(@ulEvent : Win32cr::Storage::VirtualDiskService::VDS_NF_PORT, @portId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_PORTAL_NOTIFICATION
    property ulEvent : UInt32
    property portalId : LibC::GUID
    def initialize(@ulEvent : UInt32, @portalId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_TARGET_NOTIFICATION
    property ulEvent : UInt32
    property targetId : LibC::GUID
    def initialize(@ulEvent : UInt32, @targetId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_PORTAL_GROUP_NOTIFICATION
    property ulEvent : UInt32
    property portalGroupId : LibC::GUID
    def initialize(@ulEvent : UInt32, @portalGroupId : LibC::GUID)
    end
  end

  @[Extern]
  struct VDS_NOTIFICATION
    property objectType : Win32cr::Storage::VirtualDiskService::VDS_NOTIFICATION_TARGET_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property pack : Win32cr::Storage::VirtualDiskService::VDS_PACK_NOTIFICATION
    property disk : Win32cr::Storage::VirtualDiskService::VDS_DISK_NOTIFICATION
    property volume : Win32cr::Storage::VirtualDiskService::VDS_VOLUME_NOTIFICATION
    property partition : Win32cr::Storage::VirtualDiskService::VDS_PARTITION_NOTIFICATION
    property letter : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_LETTER_NOTIFICATION
    property file_system : Win32cr::Storage::VirtualDiskService::VDS_FILE_SYSTEM_NOTIFICATION
    property mount_point : Win32cr::Storage::VirtualDiskService::VDS_MOUNT_POINT_NOTIFICATION
    property sub_system : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_NOTIFICATION
    property controller : Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_NOTIFICATION
    property drive : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_NOTIFICATION
    property lun : Win32cr::Storage::VirtualDiskService::VDS_LUN_NOTIFICATION
    property port : Win32cr::Storage::VirtualDiskService::VDS_PORT_NOTIFICATION
    property portal : Win32cr::Storage::VirtualDiskService::VDS_PORTAL_NOTIFICATION
    property target : Win32cr::Storage::VirtualDiskService::VDS_TARGET_NOTIFICATION
    property portal_group : Win32cr::Storage::VirtualDiskService::VDS_PORTAL_GROUP_NOTIFICATION
    property service : Win32cr::Storage::VirtualDiskService::VDS_SERVICE_NOTIFICATION
    def initialize(@pack : Win32cr::Storage::VirtualDiskService::VDS_PACK_NOTIFICATION, @disk : Win32cr::Storage::VirtualDiskService::VDS_DISK_NOTIFICATION, @volume : Win32cr::Storage::VirtualDiskService::VDS_VOLUME_NOTIFICATION, @partition : Win32cr::Storage::VirtualDiskService::VDS_PARTITION_NOTIFICATION, @letter : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_LETTER_NOTIFICATION, @file_system : Win32cr::Storage::VirtualDiskService::VDS_FILE_SYSTEM_NOTIFICATION, @mount_point : Win32cr::Storage::VirtualDiskService::VDS_MOUNT_POINT_NOTIFICATION, @sub_system : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_NOTIFICATION, @controller : Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_NOTIFICATION, @drive : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_NOTIFICATION, @lun : Win32cr::Storage::VirtualDiskService::VDS_LUN_NOTIFICATION, @port : Win32cr::Storage::VirtualDiskService::VDS_PORT_NOTIFICATION, @portal : Win32cr::Storage::VirtualDiskService::VDS_PORTAL_NOTIFICATION, @target : Win32cr::Storage::VirtualDiskService::VDS_TARGET_NOTIFICATION, @portal_group : Win32cr::Storage::VirtualDiskService::VDS_PORTAL_GROUP_NOTIFICATION, @service : Win32cr::Storage::VirtualDiskService::VDS_SERVICE_NOTIFICATION)
    end
    end

    def initialize(@objectType : Win32cr::Storage::VirtualDiskService::VDS_NOTIFICATION_TARGET_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct VDS_ASYNC_OUTPUT
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_ASYNC_OUTPUT_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property cp : Cp_
    property cv : Cv_
    property bvp : Bvp_
    property sv : Sv_
    property cl : Cl_
    property ct : Ct_
    property cpg : Cpg_
    property cvd : Cvd_

      # Nested Type Cpg_
      @[Extern]
      struct Cpg_
    property pPortalGroupUnk : Void*
    def initialize(@pPortalGroupUnk : Void*)
    end
      end


      # Nested Type Cl_
      @[Extern]
      struct Cl_
    property pLunUnk : Void*
    def initialize(@pLunUnk : Void*)
    end
      end


      # Nested Type Bvp_
      @[Extern]
      struct Bvp_
    property pVolumeUnk : Void*
    def initialize(@pVolumeUnk : Void*)
    end
      end


      # Nested Type Cp_
      @[Extern]
      struct Cp_
    property ullOffset : UInt64
    property volumeId : LibC::GUID
    def initialize(@ullOffset : UInt64, @volumeId : LibC::GUID)
    end
      end


      # Nested Type Cvd_
      @[Extern]
      struct Cvd_
    property pVDiskUnk : Void*
    def initialize(@pVDiskUnk : Void*)
    end
      end


      # Nested Type Sv_
      @[Extern]
      struct Sv_
    property ullReclaimedBytes : UInt64
    def initialize(@ullReclaimedBytes : UInt64)
    end
      end


      # Nested Type Ct_
      @[Extern]
      struct Ct_
    property pTargetUnk : Void*
    def initialize(@pTargetUnk : Void*)
    end
      end


      # Nested Type Cv_
      @[Extern]
      struct Cv_
    property pVolumeUnk : Void*
    def initialize(@pVolumeUnk : Void*)
    end
      end

    def initialize(@cp : Cp_, @cv : Cv_, @bvp : Bvp_, @sv : Sv_, @cl : Cl_, @ct : Ct_, @cpg : Cpg_, @cvd : Cvd_)
    end
    end

    def initialize(@type__ : Win32cr::Storage::VirtualDiskService::VDS_ASYNC_OUTPUT_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct VDS_PATH_ID
    property ullSourceId : UInt64
    property ullPathId : UInt64
    def initialize(@ullSourceId : UInt64, @ullPathId : UInt64)
    end
  end

  @[Extern]
  struct VDS_WWN
    property rguchWwn : UInt8[8]
    def initialize(@rguchWwn : UInt8[8])
    end
  end

  @[Extern]
  struct VDS_IPADDRESS
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS_TYPE
    property ipv4Address : UInt32
    property ipv6Address : UInt8[16]
    property ulIpv6FlowInfo : UInt32
    property ulIpv6ScopeId : UInt32
    property wszTextAddress : UInt16[257]
    property ulPort : UInt32
    def initialize(@type__ : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS_TYPE, @ipv4Address : UInt32, @ipv6Address : UInt8[16], @ulIpv6FlowInfo : UInt32, @ulIpv6ScopeId : UInt32, @wszTextAddress : UInt16[257], @ulPort : UInt32)
    end
  end

  @[Extern]
  struct VDS_ISCSI_IPSEC_KEY
    property pKey : UInt8*
    property ulKeySize : UInt32
    def initialize(@pKey : UInt8*, @ulKeySize : UInt32)
    end
  end

  @[Extern]
  struct VDS_ISCSI_SHARED_SECRET
    property pSharedSecret : UInt8*
    property ulSharedSecretSize : UInt32
    def initialize(@pSharedSecret : UInt8*, @ulSharedSecretSize : UInt32)
    end
  end

  @[Extern]
  struct VDS_HBAPORT_PROP
    property id : LibC::GUID
    property wwnNode : Win32cr::Storage::VirtualDiskService::VDS_WWN
    property wwnPort : Win32cr::Storage::VirtualDiskService::VDS_WWN
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_TYPE
    property status : Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_STATUS
    property ulPortSpeed : UInt32
    property ulSupportedPortSpeed : UInt32
    def initialize(@id : LibC::GUID, @wwnNode : Win32cr::Storage::VirtualDiskService::VDS_WWN, @wwnPort : Win32cr::Storage::VirtualDiskService::VDS_WWN, @type__ : Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_TYPE, @status : Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_STATUS, @ulPortSpeed : UInt32, @ulSupportedPortSpeed : UInt32)
    end
  end

  @[Extern]
  struct VDS_ISCSI_INITIATOR_ADAPTER_PROP
    property id : LibC::GUID
    property pwszName : Win32cr::Foundation::PWSTR
    def initialize(@id : LibC::GUID, @pwszName : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct VDS_ISCSI_INITIATOR_PORTAL_PROP
    property id : LibC::GUID
    property address : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS
    property ulPortIndex : UInt32
    def initialize(@id : LibC::GUID, @address : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS, @ulPortIndex : UInt32)
    end
  end

  @[Extern]
  struct VDS_PROVIDER_PROP
    property id : LibC::GUID
    property pwszName : Win32cr::Foundation::PWSTR
    property guidVersionId : LibC::GUID
    property pwszVersion : Win32cr::Foundation::PWSTR
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_PROVIDER_TYPE
    property ulFlags : UInt32
    property ulStripeSizeFlags : UInt32
    property sRebuildPriority : Int16
    def initialize(@id : LibC::GUID, @pwszName : Win32cr::Foundation::PWSTR, @guidVersionId : LibC::GUID, @pwszVersion : Win32cr::Foundation::PWSTR, @type__ : Win32cr::Storage::VirtualDiskService::VDS_PROVIDER_TYPE, @ulFlags : UInt32, @ulStripeSizeFlags : UInt32, @sRebuildPriority : Int16)
    end
  end

  @[Extern]
  struct VDS_PATH_INFO
    property pathId : Win32cr::Storage::VirtualDiskService::VDS_PATH_ID
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_HWPROVIDER_TYPE
    property status : Win32cr::Storage::VirtualDiskService::VDS_PATH_STATUS
    property anonymous1 : Anonymous1_e__Union_
    property anonymous2 : Anonymous2_e__Union_
    property anonymous3 : Anonymous3_e__Union_

    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    struct Anonymous2_e__Union_
    property hbaPortId : LibC::GUID
    property initiatorAdapterId : LibC::GUID
    def initialize(@hbaPortId : LibC::GUID, @initiatorAdapterId : LibC::GUID)
    end
    end


    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    struct Anonymous1_e__Union_
    property controllerPortId : LibC::GUID
    property targetPortalId : LibC::GUID
    def initialize(@controllerPortId : LibC::GUID, @targetPortalId : LibC::GUID)
    end
    end


    # Nested Type Anonymous3_e__Union_
    @[Extern(union: true)]
    struct Anonymous3_e__Union_
    property pHbaPortProp : Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_PROP*
    property pInitiatorPortalIpAddr : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*
    def initialize(@pHbaPortProp : Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_PROP*, @pInitiatorPortalIpAddr : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*)
    end
    end

    def initialize(@pathId : Win32cr::Storage::VirtualDiskService::VDS_PATH_ID, @type__ : Win32cr::Storage::VirtualDiskService::VDS_HWPROVIDER_TYPE, @status : Win32cr::Storage::VirtualDiskService::VDS_PATH_STATUS, @anonymous1 : Anonymous1_e__Union_, @anonymous2 : Anonymous2_e__Union_, @anonymous3 : Anonymous3_e__Union_)
    end
  end

  @[Extern]
  struct VDS_PATH_POLICY
    property pathId : Win32cr::Storage::VirtualDiskService::VDS_PATH_ID
    property bPrimaryPath : Win32cr::Foundation::BOOL
    property ulWeight : UInt32
    def initialize(@pathId : Win32cr::Storage::VirtualDiskService::VDS_PATH_ID, @bPrimaryPath : Win32cr::Foundation::BOOL, @ulWeight : UInt32)
    end
  end

  @[Extern]
  struct VDS_HINTS
    property ullHintMask : UInt64
    property ullExpectedMaximumSize : UInt64
    property ulOptimalReadSize : UInt32
    property ulOptimalReadAlignment : UInt32
    property ulOptimalWriteSize : UInt32
    property ulOptimalWriteAlignment : UInt32
    property ulMaximumDriveCount : UInt32
    property ulStripeSize : UInt32
    property bFastCrashRecoveryRequired : Win32cr::Foundation::BOOL
    property bMostlyReads : Win32cr::Foundation::BOOL
    property bOptimizeForSequentialReads : Win32cr::Foundation::BOOL
    property bOptimizeForSequentialWrites : Win32cr::Foundation::BOOL
    property bRemapEnabled : Win32cr::Foundation::BOOL
    property bReadBackVerifyEnabled : Win32cr::Foundation::BOOL
    property bWriteThroughCachingEnabled : Win32cr::Foundation::BOOL
    property bHardwareChecksumEnabled : Win32cr::Foundation::BOOL
    property bIsYankable : Win32cr::Foundation::BOOL
    property sRebuildPriority : Int16
    def initialize(@ullHintMask : UInt64, @ullExpectedMaximumSize : UInt64, @ulOptimalReadSize : UInt32, @ulOptimalReadAlignment : UInt32, @ulOptimalWriteSize : UInt32, @ulOptimalWriteAlignment : UInt32, @ulMaximumDriveCount : UInt32, @ulStripeSize : UInt32, @bFastCrashRecoveryRequired : Win32cr::Foundation::BOOL, @bMostlyReads : Win32cr::Foundation::BOOL, @bOptimizeForSequentialReads : Win32cr::Foundation::BOOL, @bOptimizeForSequentialWrites : Win32cr::Foundation::BOOL, @bRemapEnabled : Win32cr::Foundation::BOOL, @bReadBackVerifyEnabled : Win32cr::Foundation::BOOL, @bWriteThroughCachingEnabled : Win32cr::Foundation::BOOL, @bHardwareChecksumEnabled : Win32cr::Foundation::BOOL, @bIsYankable : Win32cr::Foundation::BOOL, @sRebuildPriority : Int16)
    end
  end

  @[Extern]
  struct VDS_HINTS2
    property ullHintMask : UInt64
    property ullExpectedMaximumSize : UInt64
    property ulOptimalReadSize : UInt32
    property ulOptimalReadAlignment : UInt32
    property ulOptimalWriteSize : UInt32
    property ulOptimalWriteAlignment : UInt32
    property ulMaximumDriveCount : UInt32
    property ulStripeSize : UInt32
    property ulReserved1 : UInt32
    property ulReserved2 : UInt32
    property ulReserved3 : UInt32
    property bFastCrashRecoveryRequired : Win32cr::Foundation::BOOL
    property bMostlyReads : Win32cr::Foundation::BOOL
    property bOptimizeForSequentialReads : Win32cr::Foundation::BOOL
    property bOptimizeForSequentialWrites : Win32cr::Foundation::BOOL
    property bRemapEnabled : Win32cr::Foundation::BOOL
    property bReadBackVerifyEnabled : Win32cr::Foundation::BOOL
    property bWriteThroughCachingEnabled : Win32cr::Foundation::BOOL
    property bHardwareChecksumEnabled : Win32cr::Foundation::BOOL
    property bIsYankable : Win32cr::Foundation::BOOL
    property bAllocateHotSpare : Win32cr::Foundation::BOOL
    property bUseMirroredCache : Win32cr::Foundation::BOOL
    property bReadCachingEnabled : Win32cr::Foundation::BOOL
    property bWriteCachingEnabled : Win32cr::Foundation::BOOL
    property bMediaScanEnabled : Win32cr::Foundation::BOOL
    property bConsistencyCheckEnabled : Win32cr::Foundation::BOOL
    property bus_type : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE
    property bReserved1 : Win32cr::Foundation::BOOL
    property bReserved2 : Win32cr::Foundation::BOOL
    property bReserved3 : Win32cr::Foundation::BOOL
    property sRebuildPriority : Int16
    def initialize(@ullHintMask : UInt64, @ullExpectedMaximumSize : UInt64, @ulOptimalReadSize : UInt32, @ulOptimalReadAlignment : UInt32, @ulOptimalWriteSize : UInt32, @ulOptimalWriteAlignment : UInt32, @ulMaximumDriveCount : UInt32, @ulStripeSize : UInt32, @ulReserved1 : UInt32, @ulReserved2 : UInt32, @ulReserved3 : UInt32, @bFastCrashRecoveryRequired : Win32cr::Foundation::BOOL, @bMostlyReads : Win32cr::Foundation::BOOL, @bOptimizeForSequentialReads : Win32cr::Foundation::BOOL, @bOptimizeForSequentialWrites : Win32cr::Foundation::BOOL, @bRemapEnabled : Win32cr::Foundation::BOOL, @bReadBackVerifyEnabled : Win32cr::Foundation::BOOL, @bWriteThroughCachingEnabled : Win32cr::Foundation::BOOL, @bHardwareChecksumEnabled : Win32cr::Foundation::BOOL, @bIsYankable : Win32cr::Foundation::BOOL, @bAllocateHotSpare : Win32cr::Foundation::BOOL, @bUseMirroredCache : Win32cr::Foundation::BOOL, @bReadCachingEnabled : Win32cr::Foundation::BOOL, @bWriteCachingEnabled : Win32cr::Foundation::BOOL, @bMediaScanEnabled : Win32cr::Foundation::BOOL, @bConsistencyCheckEnabled : Win32cr::Foundation::BOOL, @bus_type : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE, @bReserved1 : Win32cr::Foundation::BOOL, @bReserved2 : Win32cr::Foundation::BOOL, @bReserved3 : Win32cr::Foundation::BOOL, @sRebuildPriority : Int16)
    end
  end

  @[Extern]
  struct VDS_SUB_SYSTEM_PROP
    property id : LibC::GUID
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property pwszIdentification : Win32cr::Foundation::PWSTR
    property ulFlags : UInt32
    property ulStripeSizeFlags : UInt32
    property status : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property sNumberOfInternalBuses : Int16
    property sMaxNumberOfSlotsEachBus : Int16
    property sMaxNumberOfControllers : Int16
    property sRebuildPriority : Int16
    def initialize(@id : LibC::GUID, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @pwszIdentification : Win32cr::Foundation::PWSTR, @ulFlags : UInt32, @ulStripeSizeFlags : UInt32, @status : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @sNumberOfInternalBuses : Int16, @sMaxNumberOfSlotsEachBus : Int16, @sMaxNumberOfControllers : Int16, @sRebuildPriority : Int16)
    end
  end

  @[Extern]
  struct VDS_SUB_SYSTEM_PROP2
    property id : LibC::GUID
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property pwszIdentification : Win32cr::Foundation::PWSTR
    property ulFlags : UInt32
    property ulStripeSizeFlags : UInt32
    property ulSupportedRaidTypeFlags : UInt32
    property status : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property sNumberOfInternalBuses : Int16
    property sMaxNumberOfSlotsEachBus : Int16
    property sMaxNumberOfControllers : Int16
    property sRebuildPriority : Int16
    property ulNumberOfEnclosures : UInt32
    def initialize(@id : LibC::GUID, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @pwszIdentification : Win32cr::Foundation::PWSTR, @ulFlags : UInt32, @ulStripeSizeFlags : UInt32, @ulSupportedRaidTypeFlags : UInt32, @status : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @sNumberOfInternalBuses : Int16, @sMaxNumberOfSlotsEachBus : Int16, @sMaxNumberOfControllers : Int16, @sRebuildPriority : Int16, @ulNumberOfEnclosures : UInt32)
    end
  end

  @[Extern]
  struct VDS_CONTROLLER_PROP
    property id : LibC::GUID
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property pwszIdentification : Win32cr::Foundation::PWSTR
    property status : Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property sNumberOfPorts : Int16
    def initialize(@id : LibC::GUID, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @pwszIdentification : Win32cr::Foundation::PWSTR, @status : Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @sNumberOfPorts : Int16)
    end
  end

  @[Extern]
  struct VDS_DRIVE_PROP
    property id : LibC::GUID
    property ullSize : UInt64
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property pwszIdentification : Win32cr::Foundation::PWSTR
    property ulFlags : UInt32
    property status : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property sInternalBusNumber : Int16
    property sSlotNumber : Int16
    def initialize(@id : LibC::GUID, @ullSize : UInt64, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @pwszIdentification : Win32cr::Foundation::PWSTR, @ulFlags : UInt32, @status : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @sInternalBusNumber : Int16, @sSlotNumber : Int16)
    end
  end

  @[Extern]
  struct VDS_DRIVE_PROP2
    property id : LibC::GUID
    property ullSize : UInt64
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property pwszIdentification : Win32cr::Foundation::PWSTR
    property ulFlags : UInt32
    property status : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property sInternalBusNumber : Int16
    property sSlotNumber : Int16
    property ulEnclosureNumber : UInt32
    property busType : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE
    property ulSpindleSpeed : UInt32
    def initialize(@id : LibC::GUID, @ullSize : UInt64, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @pwszIdentification : Win32cr::Foundation::PWSTR, @ulFlags : UInt32, @status : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @sInternalBusNumber : Int16, @sSlotNumber : Int16, @ulEnclosureNumber : UInt32, @busType : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE, @ulSpindleSpeed : UInt32)
    end
  end

  @[Extern]
  struct VDS_DRIVE_EXTENT
    property id : LibC::GUID
    property lun_id : LibC::GUID
    property ullSize : UInt64
    property bUsed : Win32cr::Foundation::BOOL
    def initialize(@id : LibC::GUID, @lun_id : LibC::GUID, @ullSize : UInt64, @bUsed : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct VDS_LUN_PROP
    property id : LibC::GUID
    property ullSize : UInt64
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property pwszIdentification : Win32cr::Foundation::PWSTR
    property pwszUnmaskingList : Win32cr::Foundation::PWSTR
    property ulFlags : UInt32
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE
    property status : Win32cr::Storage::VirtualDiskService::VDS_LUN_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property transition_state : Win32cr::Storage::VirtualDiskService::VDS_TRANSITION_STATE
    property sRebuildPriority : Int16
    def initialize(@id : LibC::GUID, @ullSize : UInt64, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @pwszIdentification : Win32cr::Foundation::PWSTR, @pwszUnmaskingList : Win32cr::Foundation::PWSTR, @ulFlags : UInt32, @type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, @status : Win32cr::Storage::VirtualDiskService::VDS_LUN_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @transition_state : Win32cr::Storage::VirtualDiskService::VDS_TRANSITION_STATE, @sRebuildPriority : Int16)
    end
  end

  @[Extern]
  struct VDS_LUN_PLEX_PROP
    property id : LibC::GUID
    property ullSize : UInt64
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_PLEX_TYPE
    property status : Win32cr::Storage::VirtualDiskService::VDS_LUN_PLEX_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property transition_state : Win32cr::Storage::VirtualDiskService::VDS_TRANSITION_STATE
    property ulFlags : UInt32
    property ulStripeSize : UInt32
    property sRebuildPriority : Int16
    def initialize(@id : LibC::GUID, @ullSize : UInt64, @type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_PLEX_TYPE, @status : Win32cr::Storage::VirtualDiskService::VDS_LUN_PLEX_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @transition_state : Win32cr::Storage::VirtualDiskService::VDS_TRANSITION_STATE, @ulFlags : UInt32, @ulStripeSize : UInt32, @sRebuildPriority : Int16)
    end
  end

  @[Extern]
  struct VDS_PORT_PROP
    property id : LibC::GUID
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property pwszIdentification : Win32cr::Foundation::PWSTR
    property status : Win32cr::Storage::VirtualDiskService::VDS_PORT_STATUS
    def initialize(@id : LibC::GUID, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @pwszIdentification : Win32cr::Foundation::PWSTR, @status : Win32cr::Storage::VirtualDiskService::VDS_PORT_STATUS)
    end
  end

  @[Extern]
  struct VDS_ISCSI_PORTAL_PROP
    property id : LibC::GUID
    property address : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS
    property status : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTAL_STATUS
    def initialize(@id : LibC::GUID, @address : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS, @status : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTAL_STATUS)
    end
  end

  @[Extern]
  struct VDS_ISCSI_TARGET_PROP
    property id : LibC::GUID
    property pwszIscsiName : Win32cr::Foundation::PWSTR
    property pwszFriendlyName : Win32cr::Foundation::PWSTR
    property bChapEnabled : Win32cr::Foundation::BOOL
    def initialize(@id : LibC::GUID, @pwszIscsiName : Win32cr::Foundation::PWSTR, @pwszFriendlyName : Win32cr::Foundation::PWSTR, @bChapEnabled : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct VDS_ISCSI_PORTALGROUP_PROP
    property id : LibC::GUID
    property tag : UInt16
    def initialize(@id : LibC::GUID, @tag : UInt16)
    end
  end

  @[Extern]
  struct VDS_POOL_CUSTOM_ATTRIBUTES
    property pwszName : Win32cr::Foundation::PWSTR
    property pwszValue : Win32cr::Foundation::PWSTR
    def initialize(@pwszName : Win32cr::Foundation::PWSTR, @pwszValue : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct VDS_POOL_ATTRIBUTES
    property ullAttributeMask : UInt64
    property raidType : Win32cr::Storage::VirtualDiskService::VDS_RAID_TYPE
    property busType : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE
    property pwszIntendedUsage : Win32cr::Foundation::PWSTR
    property bSpinDown : Win32cr::Foundation::BOOL
    property bIsThinProvisioned : Win32cr::Foundation::BOOL
    property ullProvisionedSpace : UInt64
    property bNoSinglePointOfFailure : Win32cr::Foundation::BOOL
    property ulDataRedundancyMax : UInt32
    property ulDataRedundancyMin : UInt32
    property ulDataRedundancyDefault : UInt32
    property ulPackageRedundancyMax : UInt32
    property ulPackageRedundancyMin : UInt32
    property ulPackageRedundancyDefault : UInt32
    property ulStripeSize : UInt32
    property ulStripeSizeMax : UInt32
    property ulStripeSizeMin : UInt32
    property ulDefaultStripeSize : UInt32
    property ulNumberOfColumns : UInt32
    property ulNumberOfColumnsMax : UInt32
    property ulNumberOfColumnsMin : UInt32
    property ulDefaultNumberofColumns : UInt32
    property ulDataAvailabilityHint : UInt32
    property ulAccessRandomnessHint : UInt32
    property ulAccessDirectionHint : UInt32
    property ulAccessSizeHint : UInt32
    property ulAccessLatencyHint : UInt32
    property ulAccessBandwidthWeightHint : UInt32
    property ulStorageCostHint : UInt32
    property ulStorageEfficiencyHint : UInt32
    property ulNumOfCustomAttributes : UInt32
    property pPoolCustomAttributes : Win32cr::Storage::VirtualDiskService::VDS_POOL_CUSTOM_ATTRIBUTES*
    property bReserved1 : Win32cr::Foundation::BOOL
    property bReserved2 : Win32cr::Foundation::BOOL
    property ulReserved1 : UInt32
    property ulReserved2 : UInt32
    property ullReserved1 : UInt64
    property ullReserved2 : UInt64
    def initialize(@ullAttributeMask : UInt64, @raidType : Win32cr::Storage::VirtualDiskService::VDS_RAID_TYPE, @busType : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_BUS_TYPE, @pwszIntendedUsage : Win32cr::Foundation::PWSTR, @bSpinDown : Win32cr::Foundation::BOOL, @bIsThinProvisioned : Win32cr::Foundation::BOOL, @ullProvisionedSpace : UInt64, @bNoSinglePointOfFailure : Win32cr::Foundation::BOOL, @ulDataRedundancyMax : UInt32, @ulDataRedundancyMin : UInt32, @ulDataRedundancyDefault : UInt32, @ulPackageRedundancyMax : UInt32, @ulPackageRedundancyMin : UInt32, @ulPackageRedundancyDefault : UInt32, @ulStripeSize : UInt32, @ulStripeSizeMax : UInt32, @ulStripeSizeMin : UInt32, @ulDefaultStripeSize : UInt32, @ulNumberOfColumns : UInt32, @ulNumberOfColumnsMax : UInt32, @ulNumberOfColumnsMin : UInt32, @ulDefaultNumberofColumns : UInt32, @ulDataAvailabilityHint : UInt32, @ulAccessRandomnessHint : UInt32, @ulAccessDirectionHint : UInt32, @ulAccessSizeHint : UInt32, @ulAccessLatencyHint : UInt32, @ulAccessBandwidthWeightHint : UInt32, @ulStorageCostHint : UInt32, @ulStorageEfficiencyHint : UInt32, @ulNumOfCustomAttributes : UInt32, @pPoolCustomAttributes : Win32cr::Storage::VirtualDiskService::VDS_POOL_CUSTOM_ATTRIBUTES*, @bReserved1 : Win32cr::Foundation::BOOL, @bReserved2 : Win32cr::Foundation::BOOL, @ulReserved1 : UInt32, @ulReserved2 : UInt32, @ullReserved1 : UInt64, @ullReserved2 : UInt64)
    end
  end

  @[Extern]
  struct VDS_STORAGE_POOL_PROP
    property id : LibC::GUID
    property status : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_STATUS
    property health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH
    property type__ : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_TYPE
    property pwszName : Win32cr::Foundation::PWSTR
    property pwszDescription : Win32cr::Foundation::PWSTR
    property ullTotalConsumedSpace : UInt64
    property ullTotalManagedSpace : UInt64
    property ullRemainingFreeSpace : UInt64
    def initialize(@id : LibC::GUID, @status : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_STATUS, @health : Win32cr::Storage::VirtualDiskService::VDS_HEALTH, @type__ : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_TYPE, @pwszName : Win32cr::Foundation::PWSTR, @pwszDescription : Win32cr::Foundation::PWSTR, @ullTotalConsumedSpace : UInt64, @ullTotalManagedSpace : UInt64, @ullRemainingFreeSpace : UInt64)
    end
  end

  @[Extern]
  struct VDS_STORAGE_POOL_DRIVE_EXTENT
    property id : LibC::GUID
    property ullSize : UInt64
    property bUsed : Win32cr::Foundation::BOOL
    def initialize(@id : LibC::GUID, @ullSize : UInt64, @bUsed : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  record IEnumVdsObjectVtbl,
    query_interface : Proc(IEnumVdsObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumVdsObject*, UInt32),
    release : Proc(IEnumVdsObject*, UInt32),
    next__ : Proc(IEnumVdsObject*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumVdsObject*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumVdsObject*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumVdsObject*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumVdsObject, lpVtbl : IEnumVdsObjectVtbl* do
    GUID = LibC::GUID.new(0x118610b7_u32, 0x8d94_u16, 0x4030_u16, StaticArray[0xb5_u8, 0xb8_u8, 0x50_u8, 0x8_u8, 0x89_u8, 0x78_u8, 0x8e_u8, 0x4e_u8])
    def query_interface(this : IEnumVdsObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumVdsObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumVdsObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumVdsObject*, celt : UInt32, ppObjectArray : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, ppObjectArray, pcFetched)
    end
    def skip(this : IEnumVdsObject*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumVdsObject*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumVdsObject*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IVdsAsyncVtbl,
    query_interface : Proc(IVdsAsync*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsAsync*, UInt32),
    release : Proc(IVdsAsync*, UInt32),
    cancel : Proc(IVdsAsync*, Win32cr::Foundation::HRESULT),
    wait : Proc(IVdsAsync*, Win32cr::Foundation::HRESULT*, Win32cr::Storage::VirtualDiskService::VDS_ASYNC_OUTPUT*, Win32cr::Foundation::HRESULT),
    query_status : Proc(IVdsAsync*, Win32cr::Foundation::HRESULT*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsAsync, lpVtbl : IVdsAsyncVtbl* do
    GUID = LibC::GUID.new(0xd5d23b6d_u32, 0x5a55_u16, 0x4492_u16, StaticArray[0x98_u8, 0x89_u8, 0x39_u8, 0x7a_u8, 0x3c_u8, 0x2d_u8, 0x2d_u8, 0xbc_u8])
    def query_interface(this : IVdsAsync*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsAsync*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsAsync*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def cancel(this : IVdsAsync*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel.call(this)
    end
    def wait(this : IVdsAsync*, pHrResult : Win32cr::Foundation::HRESULT*, pAsyncOut : Win32cr::Storage::VirtualDiskService::VDS_ASYNC_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait.call(this, pHrResult, pAsyncOut)
    end
    def query_status(this : IVdsAsync*, pHrResult : Win32cr::Foundation::HRESULT*, pulPercentCompleted : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_status.call(this, pHrResult, pulPercentCompleted)
    end

  end

  @[Extern]
  record IVdsAdviseSinkVtbl,
    query_interface : Proc(IVdsAdviseSink*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsAdviseSink*, UInt32),
    release : Proc(IVdsAdviseSink*, UInt32),
    on_notify : Proc(IVdsAdviseSink*, Int32, Win32cr::Storage::VirtualDiskService::VDS_NOTIFICATION*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsAdviseSink, lpVtbl : IVdsAdviseSinkVtbl* do
    GUID = LibC::GUID.new(0x8326cd1d_u32, 0xcf59_u16, 0x4936_u16, StaticArray[0xb7_u8, 0x86_u8, 0x5e_u8, 0xfc_u8, 0x8_u8, 0x79_u8, 0x8e_u8, 0x25_u8])
    def query_interface(this : IVdsAdviseSink*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsAdviseSink*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsAdviseSink*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def on_notify(this : IVdsAdviseSink*, lNumberOfNotifications : Int32, pNotificationArray : Win32cr::Storage::VirtualDiskService::VDS_NOTIFICATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_notify.call(this, lNumberOfNotifications, pNotificationArray)
    end

  end

  @[Extern]
  record IVdsProviderVtbl,
    query_interface : Proc(IVdsProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsProvider*, UInt32),
    release : Proc(IVdsProvider*, UInt32),
    get_properties : Proc(IVdsProvider*, Win32cr::Storage::VirtualDiskService::VDS_PROVIDER_PROP*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsProvider, lpVtbl : IVdsProviderVtbl* do
    GUID = LibC::GUID.new(0x10c5e575_u32, 0x7984_u16, 0x4e81_u16, StaticArray[0xa5_u8, 0x6b_u8, 0x43_u8, 0x1f_u8, 0x5f_u8, 0x92_u8, 0xae_u8, 0x42_u8])
    def query_interface(this : IVdsProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsProvider*, pProviderProp : Win32cr::Storage::VirtualDiskService::VDS_PROVIDER_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pProviderProp)
    end

  end

  @[Extern]
  record IVdsProviderSupportVtbl,
    query_interface : Proc(IVdsProviderSupport*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsProviderSupport*, UInt32),
    release : Proc(IVdsProviderSupport*, UInt32),
    get_version_support : Proc(IVdsProviderSupport*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsProviderSupport, lpVtbl : IVdsProviderSupportVtbl* do
    GUID = LibC::GUID.new(0x1732be13_u32, 0xe8f9_u16, 0x4a03_u16, StaticArray[0xbf_u8, 0xbc_u8, 0x5f_u8, 0x61_u8, 0x6a_u8, 0xa6_u8, 0x6c_u8, 0xe1_u8])
    def query_interface(this : IVdsProviderSupport*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsProviderSupport*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsProviderSupport*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_version_support(this : IVdsProviderSupport*, ulVersionSupport : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_version_support.call(this, ulVersionSupport)
    end

  end

  @[Extern]
  record IVdsProviderPrivateVtbl,
    query_interface : Proc(IVdsProviderPrivate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsProviderPrivate*, UInt32),
    release : Proc(IVdsProviderPrivate*, UInt32),
    get_object : Proc(IVdsProviderPrivate*, LibC::GUID, Win32cr::Storage::VirtualDiskService::VDS_OBJECT_TYPE, Void**, Win32cr::Foundation::HRESULT),
    on_load : Proc(IVdsProviderPrivate*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    on_unload : Proc(IVdsProviderPrivate*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsProviderPrivate, lpVtbl : IVdsProviderPrivateVtbl* do
    GUID = LibC::GUID.new(0x11f3cd41_u32, 0xb7e8_u16, 0x48ff_u16, StaticArray[0x94_u8, 0x72_u8, 0x9d_u8, 0xff_u8, 0x1_u8, 0x8a_u8, 0xa2_u8, 0x92_u8])
    def query_interface(this : IVdsProviderPrivate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsProviderPrivate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsProviderPrivate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_object(this : IVdsProviderPrivate*, object_id : LibC::GUID, type__ : Win32cr::Storage::VirtualDiskService::VDS_OBJECT_TYPE, ppObjectUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_object.call(this, object_id, type__, ppObjectUnk)
    end
    def on_load(this : IVdsProviderPrivate*, pwszMachineName : Win32cr::Foundation::PWSTR, pCallbackObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_load.call(this, pwszMachineName, pCallbackObject)
    end
    def on_unload(this : IVdsProviderPrivate*, bForceUnload : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.on_unload.call(this, bForceUnload)
    end

  end

  @[Extern]
  record IVdsHwProviderVtbl,
    query_interface : Proc(IVdsHwProvider*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsHwProvider*, UInt32),
    release : Proc(IVdsHwProvider*, UInt32),
    query_sub_systems : Proc(IVdsHwProvider*, Void**, Win32cr::Foundation::HRESULT),
    reenumerate : Proc(IVdsHwProvider*, Win32cr::Foundation::HRESULT),
    refresh : Proc(IVdsHwProvider*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsHwProvider, lpVtbl : IVdsHwProviderVtbl* do
    GUID = LibC::GUID.new(0xd99bdaae_u32, 0xb13a_u16, 0x4178_u16, StaticArray[0x9f_u8, 0xdb_u8, 0xe2_u8, 0x7f_u8, 0x16_u8, 0xb4_u8, 0x60_u8, 0x3e_u8])
    def query_interface(this : IVdsHwProvider*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsHwProvider*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsHwProvider*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_sub_systems(this : IVdsHwProvider*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_sub_systems.call(this, ppEnum)
    end
    def reenumerate(this : IVdsHwProvider*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reenumerate.call(this)
    end
    def refresh(this : IVdsHwProvider*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.refresh.call(this)
    end

  end

  @[Extern]
  record IVdsHwProviderTypeVtbl,
    query_interface : Proc(IVdsHwProviderType*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsHwProviderType*, UInt32),
    release : Proc(IVdsHwProviderType*, UInt32),
    get_provider_type : Proc(IVdsHwProviderType*, Win32cr::Storage::VirtualDiskService::VDS_HWPROVIDER_TYPE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsHwProviderType, lpVtbl : IVdsHwProviderTypeVtbl* do
    GUID = LibC::GUID.new(0x3e0f5166_u32, 0x542d_u16, 0x4fc6_u16, StaticArray[0x94_u8, 0x7a_u8, 0x1_u8, 0x21_u8, 0x74_u8, 0x24_u8, 0xb_u8, 0x7e_u8])
    def query_interface(this : IVdsHwProviderType*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsHwProviderType*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsHwProviderType*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_provider_type(this : IVdsHwProviderType*, pType : Win32cr::Storage::VirtualDiskService::VDS_HWPROVIDER_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_provider_type.call(this, pType)
    end

  end

  @[Extern]
  record IVdsHwProviderType2Vtbl,
    query_interface : Proc(IVdsHwProviderType2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsHwProviderType2*, UInt32),
    release : Proc(IVdsHwProviderType2*, UInt32),
    get_provider_type2 : Proc(IVdsHwProviderType2*, Win32cr::Storage::VirtualDiskService::VDS_HWPROVIDER_TYPE*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsHwProviderType2, lpVtbl : IVdsHwProviderType2Vtbl* do
    GUID = LibC::GUID.new(0x8190236f_u32, 0xc4d0_u16, 0x4e81_u16, StaticArray[0x80_u8, 0x11_u8, 0xd6_u8, 0x95_u8, 0x12_u8, 0xfc_u8, 0xc9_u8, 0x84_u8])
    def query_interface(this : IVdsHwProviderType2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsHwProviderType2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsHwProviderType2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_provider_type2(this : IVdsHwProviderType2*, pType : Win32cr::Storage::VirtualDiskService::VDS_HWPROVIDER_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_provider_type2.call(this, pType)
    end

  end

  @[Extern]
  record IVdsHwProviderStoragePoolsVtbl,
    query_interface : Proc(IVdsHwProviderStoragePools*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsHwProviderStoragePools*, UInt32),
    release : Proc(IVdsHwProviderStoragePools*, UInt32),
    query_storage_pools : Proc(IVdsHwProviderStoragePools*, UInt32, UInt64, Win32cr::Storage::VirtualDiskService::VDS_POOL_ATTRIBUTES*, Void**, Win32cr::Foundation::HRESULT),
    create_lun_in_storage_pool : Proc(IVdsHwProviderStoragePools*, Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, UInt64, LibC::GUID, Win32cr::Foundation::PWSTR, Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, Void**, Win32cr::Foundation::HRESULT),
    query_max_lun_create_size_in_storage_pool : Proc(IVdsHwProviderStoragePools*, Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, LibC::GUID, Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsHwProviderStoragePools, lpVtbl : IVdsHwProviderStoragePoolsVtbl* do
    GUID = LibC::GUID.new(0xd5b5937a_u32, 0xf188_u16, 0x4c79_u16, StaticArray[0xb8_u8, 0x6c_u8, 0x11_u8, 0xc9_u8, 0x20_u8, 0xad_u8, 0x11_u8, 0xb8_u8])
    def query_interface(this : IVdsHwProviderStoragePools*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsHwProviderStoragePools*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsHwProviderStoragePools*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_storage_pools(this : IVdsHwProviderStoragePools*, ulFlags : UInt32, ullRemainingFreeSpace : UInt64, pPoolAttributes : Win32cr::Storage::VirtualDiskService::VDS_POOL_ATTRIBUTES*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_storage_pools.call(this, ulFlags, ullRemainingFreeSpace, pPoolAttributes, ppEnum)
    end
    def create_lun_in_storage_pool(this : IVdsHwProviderStoragePools*, type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, ullSizeInBytes : UInt64, storage_pool_id : LibC::GUID, pwszUnmaskingList : Win32cr::Foundation::PWSTR, pHints2 : Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lun_in_storage_pool.call(this, type__, ullSizeInBytes, storage_pool_id, pwszUnmaskingList, pHints2, ppAsync)
    end
    def query_max_lun_create_size_in_storage_pool(this : IVdsHwProviderStoragePools*, type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, storage_pool_id : LibC::GUID, pHints2 : Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, pullMaxLunSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_max_lun_create_size_in_storage_pool.call(this, type__, storage_pool_id, pHints2, pullMaxLunSize)
    end

  end

  @[Extern]
  record IVdsSubSystemVtbl,
    query_interface : Proc(IVdsSubSystem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsSubSystem*, UInt32),
    release : Proc(IVdsSubSystem*, UInt32),
    get_properties : Proc(IVdsSubSystem*, Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_PROP*, Win32cr::Foundation::HRESULT),
    get_provider : Proc(IVdsSubSystem*, Void**, Win32cr::Foundation::HRESULT),
    query_controllers : Proc(IVdsSubSystem*, Void**, Win32cr::Foundation::HRESULT),
    query_luns : Proc(IVdsSubSystem*, Void**, Win32cr::Foundation::HRESULT),
    query_drives : Proc(IVdsSubSystem*, Void**, Win32cr::Foundation::HRESULT),
    get_drive : Proc(IVdsSubSystem*, Int16, Int16, Void**, Win32cr::Foundation::HRESULT),
    reenumerate : Proc(IVdsSubSystem*, Win32cr::Foundation::HRESULT),
    set_controller_status : Proc(IVdsSubSystem*, LibC::GUID*, Int32, LibC::GUID*, Int32, Win32cr::Foundation::HRESULT),
    create_lun : Proc(IVdsSubSystem*, Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, UInt64, LibC::GUID*, Int32, Win32cr::Foundation::PWSTR, Win32cr::Storage::VirtualDiskService::VDS_HINTS*, Void**, Win32cr::Foundation::HRESULT),
    replace_drive : Proc(IVdsSubSystem*, LibC::GUID, LibC::GUID, Win32cr::Foundation::HRESULT),
    set_status : Proc(IVdsSubSystem*, Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_STATUS, Win32cr::Foundation::HRESULT),
    query_max_lun_create_size : Proc(IVdsSubSystem*, Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, LibC::GUID*, Int32, Win32cr::Storage::VirtualDiskService::VDS_HINTS*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsSubSystem, lpVtbl : IVdsSubSystemVtbl* do
    GUID = LibC::GUID.new(0x6fcee2d3_u32, 0x6d90_u16, 0x4f91_u16, StaticArray[0x80_u8, 0xe2_u8, 0xa5_u8, 0xc7_u8, 0xca_u8, 0xac_u8, 0xa9_u8, 0xd8_u8])
    def query_interface(this : IVdsSubSystem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsSubSystem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsSubSystem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsSubSystem*, pSubSystemProp : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pSubSystemProp)
    end
    def get_provider(this : IVdsSubSystem*, ppProvider : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_provider.call(this, ppProvider)
    end
    def query_controllers(this : IVdsSubSystem*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_controllers.call(this, ppEnum)
    end
    def query_luns(this : IVdsSubSystem*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_luns.call(this, ppEnum)
    end
    def query_drives(this : IVdsSubSystem*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_drives.call(this, ppEnum)
    end
    def get_drive(this : IVdsSubSystem*, sBusNumber : Int16, sSlotNumber : Int16, ppDrive : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drive.call(this, sBusNumber, sSlotNumber, ppDrive)
    end
    def reenumerate(this : IVdsSubSystem*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reenumerate.call(this)
    end
    def set_controller_status(this : IVdsSubSystem*, pOnlineControllerIdArray : LibC::GUID*, lNumberOfOnlineControllers : Int32, pOfflineControllerIdArray : LibC::GUID*, lNumberOfOfflineControllers : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_controller_status.call(this, pOnlineControllerIdArray, lNumberOfOnlineControllers, pOfflineControllerIdArray, lNumberOfOfflineControllers)
    end
    def create_lun(this : IVdsSubSystem*, type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, ullSizeInBytes : UInt64, pDriveIdArray : LibC::GUID*, lNumberOfDrives : Int32, pwszUnmaskingList : Win32cr::Foundation::PWSTR, pHints : Win32cr::Storage::VirtualDiskService::VDS_HINTS*, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lun.call(this, type__, ullSizeInBytes, pDriveIdArray, lNumberOfDrives, pwszUnmaskingList, pHints, ppAsync)
    end
    def replace_drive(this : IVdsSubSystem*, drive_to_be_replaced : LibC::GUID, replacement_drive : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.replace_drive.call(this, drive_to_be_replaced, replacement_drive)
    end
    def set_status(this : IVdsSubSystem*, status : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, status)
    end
    def query_max_lun_create_size(this : IVdsSubSystem*, type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, pDriveIdArray : LibC::GUID*, lNumberOfDrives : Int32, pHints : Win32cr::Storage::VirtualDiskService::VDS_HINTS*, pullMaxLunSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_max_lun_create_size.call(this, type__, pDriveIdArray, lNumberOfDrives, pHints, pullMaxLunSize)
    end

  end

  @[Extern]
  record IVdsSubSystem2Vtbl,
    query_interface : Proc(IVdsSubSystem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsSubSystem2*, UInt32),
    release : Proc(IVdsSubSystem2*, UInt32),
    get_properties2 : Proc(IVdsSubSystem2*, Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_PROP2*, Win32cr::Foundation::HRESULT),
    get_drive2 : Proc(IVdsSubSystem2*, Int16, Int16, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_lun2 : Proc(IVdsSubSystem2*, Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, UInt64, LibC::GUID*, Int32, Win32cr::Foundation::PWSTR, Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, Void**, Win32cr::Foundation::HRESULT),
    query_max_lun_create_size2 : Proc(IVdsSubSystem2*, Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, LibC::GUID*, Int32, Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsSubSystem2, lpVtbl : IVdsSubSystem2Vtbl* do
    GUID = LibC::GUID.new(0xbe666735_u32, 0x7800_u16, 0x4a77_u16, StaticArray[0x9d_u8, 0x9c_u8, 0x40_u8, 0xf8_u8, 0x5b_u8, 0x87_u8, 0xe2_u8, 0x92_u8])
    def query_interface(this : IVdsSubSystem2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsSubSystem2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsSubSystem2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties2(this : IVdsSubSystem2*, pSubSystemProp2 : Win32cr::Storage::VirtualDiskService::VDS_SUB_SYSTEM_PROP2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties2.call(this, pSubSystemProp2)
    end
    def get_drive2(this : IVdsSubSystem2*, sBusNumber : Int16, sSlotNumber : Int16, ulEnclosureNumber : UInt32, ppDrive : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_drive2.call(this, sBusNumber, sSlotNumber, ulEnclosureNumber, ppDrive)
    end
    def create_lun2(this : IVdsSubSystem2*, type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, ullSizeInBytes : UInt64, pDriveIdArray : LibC::GUID*, lNumberOfDrives : Int32, pwszUnmaskingList : Win32cr::Foundation::PWSTR, pHints2 : Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lun2.call(this, type__, ullSizeInBytes, pDriveIdArray, lNumberOfDrives, pwszUnmaskingList, pHints2, ppAsync)
    end
    def query_max_lun_create_size2(this : IVdsSubSystem2*, type__ : Win32cr::Storage::VirtualDiskService::VDS_LUN_TYPE, pDriveIdArray : LibC::GUID*, lNumberOfDrives : Int32, pHints2 : Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, pullMaxLunSize : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_max_lun_create_size2.call(this, type__, pDriveIdArray, lNumberOfDrives, pHints2, pullMaxLunSize)
    end

  end

  @[Extern]
  record IVdsSubSystemNamingVtbl,
    query_interface : Proc(IVdsSubSystemNaming*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsSubSystemNaming*, UInt32),
    release : Proc(IVdsSubSystemNaming*, UInt32),
    set_friendly_name : Proc(IVdsSubSystemNaming*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsSubSystemNaming, lpVtbl : IVdsSubSystemNamingVtbl* do
    GUID = LibC::GUID.new(0xd70faa3_u32, 0x9cd4_u16, 0x4900_u16, StaticArray[0xaa_u8, 0x20_u8, 0x69_u8, 0x81_u8, 0xb6_u8, 0xaa_u8, 0xfc_u8, 0x75_u8])
    def query_interface(this : IVdsSubSystemNaming*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsSubSystemNaming*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsSubSystemNaming*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_friendly_name(this : IVdsSubSystemNaming*, pwszFriendlyName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_friendly_name.call(this, pwszFriendlyName)
    end

  end

  @[Extern]
  record IVdsSubSystemIscsiVtbl,
    query_interface : Proc(IVdsSubSystemIscsi*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsSubSystemIscsi*, UInt32),
    release : Proc(IVdsSubSystemIscsi*, UInt32),
    query_targets : Proc(IVdsSubSystemIscsi*, Void**, Win32cr::Foundation::HRESULT),
    query_portals : Proc(IVdsSubSystemIscsi*, Void**, Win32cr::Foundation::HRESULT),
    create_target : Proc(IVdsSubSystemIscsi*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, Void**, Win32cr::Foundation::HRESULT),
    set_ipsec_group_preshared_key : Proc(IVdsSubSystemIscsi*, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_IPSEC_KEY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsSubSystemIscsi, lpVtbl : IVdsSubSystemIscsiVtbl* do
    GUID = LibC::GUID.new(0x27346f_u32, 0x40d0_u16, 0x4b45_u16, StaticArray[0x8c_u8, 0xec_u8, 0x59_u8, 0x6_u8, 0xdc_u8, 0x3_u8, 0x80_u8, 0xc8_u8])
    def query_interface(this : IVdsSubSystemIscsi*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsSubSystemIscsi*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsSubSystemIscsi*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_targets(this : IVdsSubSystemIscsi*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_targets.call(this, ppEnum)
    end
    def query_portals(this : IVdsSubSystemIscsi*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_portals.call(this, ppEnum)
    end
    def create_target(this : IVdsSubSystemIscsi*, pwszIscsiName : Win32cr::Foundation::PWSTR, pwszFriendlyName : Win32cr::Foundation::PWSTR, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_target.call(this, pwszIscsiName, pwszFriendlyName, ppAsync)
    end
    def set_ipsec_group_preshared_key(this : IVdsSubSystemIscsi*, pIpsecKey : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_IPSEC_KEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ipsec_group_preshared_key.call(this, pIpsecKey)
    end

  end

  @[Extern]
  record IVdsSubSystemInterconnectVtbl,
    query_interface : Proc(IVdsSubSystemInterconnect*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsSubSystemInterconnect*, UInt32),
    release : Proc(IVdsSubSystemInterconnect*, UInt32),
    get_supported_interconnects : Proc(IVdsSubSystemInterconnect*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsSubSystemInterconnect, lpVtbl : IVdsSubSystemInterconnectVtbl* do
    GUID = LibC::GUID.new(0x9e6fa560_u32, 0xc141_u16, 0x477b_u16, StaticArray[0x83_u8, 0xba_u8, 0xb_u8, 0x6c_u8, 0x38_u8, 0xf7_u8, 0xfe_u8, 0xbf_u8])
    def query_interface(this : IVdsSubSystemInterconnect*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsSubSystemInterconnect*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsSubSystemInterconnect*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_supported_interconnects(this : IVdsSubSystemInterconnect*, pulSupportedInterconnectsFlag : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_interconnects.call(this, pulSupportedInterconnectsFlag)
    end

  end

  @[Extern]
  record IVdsControllerPortVtbl,
    query_interface : Proc(IVdsControllerPort*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsControllerPort*, UInt32),
    release : Proc(IVdsControllerPort*, UInt32),
    get_properties : Proc(IVdsControllerPort*, Win32cr::Storage::VirtualDiskService::VDS_PORT_PROP*, Win32cr::Foundation::HRESULT),
    get_controller : Proc(IVdsControllerPort*, Void**, Win32cr::Foundation::HRESULT),
    query_associated_luns : Proc(IVdsControllerPort*, Void**, Win32cr::Foundation::HRESULT),
    reset : Proc(IVdsControllerPort*, Win32cr::Foundation::HRESULT),
    set_status : Proc(IVdsControllerPort*, Win32cr::Storage::VirtualDiskService::VDS_PORT_STATUS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsControllerPort, lpVtbl : IVdsControllerPortVtbl* do
    GUID = LibC::GUID.new(0x18691d0d_u32, 0x4e7f_u16, 0x43e8_u16, StaticArray[0x92_u8, 0xe4_u8, 0xcf_u8, 0x44_u8, 0xbe_u8, 0xee_u8, 0xd1_u8, 0x1c_u8])
    def query_interface(this : IVdsControllerPort*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsControllerPort*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsControllerPort*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsControllerPort*, pPortProp : Win32cr::Storage::VirtualDiskService::VDS_PORT_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pPortProp)
    end
    def get_controller(this : IVdsControllerPort*, ppController : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_controller.call(this, ppController)
    end
    def query_associated_luns(this : IVdsControllerPort*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_associated_luns.call(this, ppEnum)
    end
    def reset(this : IVdsControllerPort*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def set_status(this : IVdsControllerPort*, status : Win32cr::Storage::VirtualDiskService::VDS_PORT_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, status)
    end

  end

  @[Extern]
  record IVdsControllerVtbl,
    query_interface : Proc(IVdsController*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsController*, UInt32),
    release : Proc(IVdsController*, UInt32),
    get_properties : Proc(IVdsController*, Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_PROP*, Win32cr::Foundation::HRESULT),
    get_sub_system : Proc(IVdsController*, Void**, Win32cr::Foundation::HRESULT),
    get_port_properties : Proc(IVdsController*, Int16, Win32cr::Storage::VirtualDiskService::VDS_PORT_PROP*, Win32cr::Foundation::HRESULT),
    flush_cache : Proc(IVdsController*, Win32cr::Foundation::HRESULT),
    invalidate_cache : Proc(IVdsController*, Win32cr::Foundation::HRESULT),
    reset : Proc(IVdsController*, Win32cr::Foundation::HRESULT),
    query_associated_luns : Proc(IVdsController*, Void**, Win32cr::Foundation::HRESULT),
    set_status : Proc(IVdsController*, Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_STATUS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsController, lpVtbl : IVdsControllerVtbl* do
    GUID = LibC::GUID.new(0xcb53d96e_u32, 0xdffb_u16, 0x474a_u16, StaticArray[0xa0_u8, 0x78_u8, 0x79_u8, 0xd_u8, 0x1e_u8, 0x2b_u8, 0xc0_u8, 0x82_u8])
    def query_interface(this : IVdsController*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsController*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsController*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsController*, pControllerProp : Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pControllerProp)
    end
    def get_sub_system(this : IVdsController*, ppSubSystem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_system.call(this, ppSubSystem)
    end
    def get_port_properties(this : IVdsController*, sPortNumber : Int16, pPortProp : Win32cr::Storage::VirtualDiskService::VDS_PORT_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_port_properties.call(this, sPortNumber, pPortProp)
    end
    def flush_cache(this : IVdsController*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.flush_cache.call(this)
    end
    def invalidate_cache(this : IVdsController*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invalidate_cache.call(this)
    end
    def reset(this : IVdsController*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def query_associated_luns(this : IVdsController*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_associated_luns.call(this, ppEnum)
    end
    def set_status(this : IVdsController*, status : Win32cr::Storage::VirtualDiskService::VDS_CONTROLLER_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, status)
    end

  end

  @[Extern]
  record IVdsControllerControllerPortVtbl,
    query_interface : Proc(IVdsControllerControllerPort*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsControllerControllerPort*, UInt32),
    release : Proc(IVdsControllerControllerPort*, UInt32),
    query_controller_ports : Proc(IVdsControllerControllerPort*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsControllerControllerPort, lpVtbl : IVdsControllerControllerPortVtbl* do
    GUID = LibC::GUID.new(0xca5d735f_u32, 0x6bae_u16, 0x42c0_u16, StaticArray[0xb3_u8, 0xe_u8, 0xf2_u8, 0x66_u8, 0x60_u8, 0x45_u8, 0xce_u8, 0x71_u8])
    def query_interface(this : IVdsControllerControllerPort*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsControllerControllerPort*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsControllerControllerPort*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_controller_ports(this : IVdsControllerControllerPort*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_controller_ports.call(this, ppEnum)
    end

  end

  @[Extern]
  record IVdsDriveVtbl,
    query_interface : Proc(IVdsDrive*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsDrive*, UInt32),
    release : Proc(IVdsDrive*, UInt32),
    get_properties : Proc(IVdsDrive*, Win32cr::Storage::VirtualDiskService::VDS_DRIVE_PROP*, Win32cr::Foundation::HRESULT),
    get_sub_system : Proc(IVdsDrive*, Void**, Win32cr::Foundation::HRESULT),
    query_extents : Proc(IVdsDrive*, Win32cr::Storage::VirtualDiskService::VDS_DRIVE_EXTENT**, Int32*, Win32cr::Foundation::HRESULT),
    set_flags : Proc(IVdsDrive*, UInt32, Win32cr::Foundation::HRESULT),
    clear_flags : Proc(IVdsDrive*, UInt32, Win32cr::Foundation::HRESULT),
    set_status : Proc(IVdsDrive*, Win32cr::Storage::VirtualDiskService::VDS_DRIVE_STATUS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsDrive, lpVtbl : IVdsDriveVtbl* do
    GUID = LibC::GUID.new(0xff24efa4_u32, 0xaade_u16, 0x4b6b_u16, StaticArray[0x89_u8, 0x8b_u8, 0xea_u8, 0xa6_u8, 0xa2_u8, 0x8_u8, 0x87_u8, 0xc7_u8])
    def query_interface(this : IVdsDrive*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsDrive*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsDrive*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsDrive*, pDriveProp : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pDriveProp)
    end
    def get_sub_system(this : IVdsDrive*, ppSubSystem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_system.call(this, ppSubSystem)
    end
    def query_extents(this : IVdsDrive*, ppExtentArray : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_EXTENT**, plNumberOfExtents : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_extents.call(this, ppExtentArray, plNumberOfExtents)
    end
    def set_flags(this : IVdsDrive*, ulFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_flags.call(this, ulFlags)
    end
    def clear_flags(this : IVdsDrive*, ulFlags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_flags.call(this, ulFlags)
    end
    def set_status(this : IVdsDrive*, status : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, status)
    end

  end

  @[Extern]
  record IVdsDrive2Vtbl,
    query_interface : Proc(IVdsDrive2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsDrive2*, UInt32),
    release : Proc(IVdsDrive2*, UInt32),
    get_properties2 : Proc(IVdsDrive2*, Win32cr::Storage::VirtualDiskService::VDS_DRIVE_PROP2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsDrive2, lpVtbl : IVdsDrive2Vtbl* do
    GUID = LibC::GUID.new(0x60b5a730_u32, 0xaddf_u16, 0x4436_u16, StaticArray[0x8c_u8, 0xa7_u8, 0x57_u8, 0x69_u8, 0xe2_u8, 0xd1_u8, 0xff_u8, 0xa4_u8])
    def query_interface(this : IVdsDrive2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsDrive2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsDrive2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties2(this : IVdsDrive2*, pDriveProp2 : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_PROP2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties2.call(this, pDriveProp2)
    end

  end

  @[Extern]
  record IVdsLunVtbl,
    query_interface : Proc(IVdsLun*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLun*, UInt32),
    release : Proc(IVdsLun*, UInt32),
    get_properties : Proc(IVdsLun*, Win32cr::Storage::VirtualDiskService::VDS_LUN_PROP*, Win32cr::Foundation::HRESULT),
    get_sub_system : Proc(IVdsLun*, Void**, Win32cr::Foundation::HRESULT),
    get_identification_data : Proc(IVdsLun*, Win32cr::Storage::VirtualDiskService::VDS_LUN_INFORMATION*, Win32cr::Foundation::HRESULT),
    query_active_controllers : Proc(IVdsLun*, Void**, Win32cr::Foundation::HRESULT),
    extend__ : Proc(IVdsLun*, UInt64, LibC::GUID*, Int32, Void**, Win32cr::Foundation::HRESULT),
    shrink : Proc(IVdsLun*, UInt64, Void**, Win32cr::Foundation::HRESULT),
    query_plexes : Proc(IVdsLun*, Void**, Win32cr::Foundation::HRESULT),
    add_plex : Proc(IVdsLun*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    remove_plex : Proc(IVdsLun*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    recover : Proc(IVdsLun*, Void**, Win32cr::Foundation::HRESULT),
    set_mask : Proc(IVdsLun*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    delete : Proc(IVdsLun*, Win32cr::Foundation::HRESULT),
    associate_controllers : Proc(IVdsLun*, LibC::GUID*, Int32, LibC::GUID*, Int32, Win32cr::Foundation::HRESULT),
    query_hints : Proc(IVdsLun*, Win32cr::Storage::VirtualDiskService::VDS_HINTS*, Win32cr::Foundation::HRESULT),
    apply_hints : Proc(IVdsLun*, Win32cr::Storage::VirtualDiskService::VDS_HINTS*, Win32cr::Foundation::HRESULT),
    set_status : Proc(IVdsLun*, Win32cr::Storage::VirtualDiskService::VDS_LUN_STATUS, Win32cr::Foundation::HRESULT),
    query_max_lun_extend_size : Proc(IVdsLun*, LibC::GUID*, Int32, UInt64*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLun, lpVtbl : IVdsLunVtbl* do
    GUID = LibC::GUID.new(0x3540a9c7_u32, 0xe60f_u16, 0x4111_u16, StaticArray[0xa8_u8, 0x40_u8, 0x8b_u8, 0xba_u8, 0x6c_u8, 0x2c_u8, 0x83_u8, 0xd8_u8])
    def query_interface(this : IVdsLun*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLun*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLun*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsLun*, pLunProp : Win32cr::Storage::VirtualDiskService::VDS_LUN_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pLunProp)
    end
    def get_sub_system(this : IVdsLun*, ppSubSystem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_system.call(this, ppSubSystem)
    end
    def get_identification_data(this : IVdsLun*, pLunInfo : Win32cr::Storage::VirtualDiskService::VDS_LUN_INFORMATION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_identification_data.call(this, pLunInfo)
    end
    def query_active_controllers(this : IVdsLun*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_active_controllers.call(this, ppEnum)
    end
    def extend__(this : IVdsLun*, ullNumberOfBytesToAdd : UInt64, pDriveIdArray : LibC::GUID*, lNumberOfDrives : Int32, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.extend__.call(this, ullNumberOfBytesToAdd, pDriveIdArray, lNumberOfDrives, ppAsync)
    end
    def shrink(this : IVdsLun*, ullNumberOfBytesToRemove : UInt64, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shrink.call(this, ullNumberOfBytesToRemove, ppAsync)
    end
    def query_plexes(this : IVdsLun*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_plexes.call(this, ppEnum)
    end
    def add_plex(this : IVdsLun*, lunId : LibC::GUID, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_plex.call(this, lunId, ppAsync)
    end
    def remove_plex(this : IVdsLun*, plexId : LibC::GUID, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_plex.call(this, plexId, ppAsync)
    end
    def recover(this : IVdsLun*, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.recover.call(this, ppAsync)
    end
    def set_mask(this : IVdsLun*, pwszUnmaskingList : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mask.call(this, pwszUnmaskingList)
    end
    def delete(this : IVdsLun*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this)
    end
    def associate_controllers(this : IVdsLun*, pActiveControllerIdArray : LibC::GUID*, lNumberOfActiveControllers : Int32, pInactiveControllerIdArray : LibC::GUID*, lNumberOfInactiveControllers : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.associate_controllers.call(this, pActiveControllerIdArray, lNumberOfActiveControllers, pInactiveControllerIdArray, lNumberOfInactiveControllers)
    end
    def query_hints(this : IVdsLun*, pHints : Win32cr::Storage::VirtualDiskService::VDS_HINTS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_hints.call(this, pHints)
    end
    def apply_hints(this : IVdsLun*, pHints : Win32cr::Storage::VirtualDiskService::VDS_HINTS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply_hints.call(this, pHints)
    end
    def set_status(this : IVdsLun*, status : Win32cr::Storage::VirtualDiskService::VDS_LUN_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, status)
    end
    def query_max_lun_extend_size(this : IVdsLun*, pDriveIdArray : LibC::GUID*, lNumberOfDrives : Int32, pullMaxBytesToBeAdded : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_max_lun_extend_size.call(this, pDriveIdArray, lNumberOfDrives, pullMaxBytesToBeAdded)
    end

  end

  @[Extern]
  record IVdsLun2Vtbl,
    query_interface : Proc(IVdsLun2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLun2*, UInt32),
    release : Proc(IVdsLun2*, UInt32),
    query_hints2 : Proc(IVdsLun2*, Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, Win32cr::Foundation::HRESULT),
    apply_hints2 : Proc(IVdsLun2*, Win32cr::Storage::VirtualDiskService::VDS_HINTS2*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLun2, lpVtbl : IVdsLun2Vtbl* do
    GUID = LibC::GUID.new(0xe5b3a735_u32, 0x9efb_u16, 0x499a_u16, StaticArray[0x80_u8, 0x71_u8, 0x43_u8, 0x94_u8, 0xd9_u8, 0xee_u8, 0x6f_u8, 0xcb_u8])
    def query_interface(this : IVdsLun2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLun2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLun2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_hints2(this : IVdsLun2*, pHints2 : Win32cr::Storage::VirtualDiskService::VDS_HINTS2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_hints2.call(this, pHints2)
    end
    def apply_hints2(this : IVdsLun2*, pHints2 : Win32cr::Storage::VirtualDiskService::VDS_HINTS2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply_hints2.call(this, pHints2)
    end

  end

  @[Extern]
  record IVdsLunNamingVtbl,
    query_interface : Proc(IVdsLunNaming*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLunNaming*, UInt32),
    release : Proc(IVdsLunNaming*, UInt32),
    set_friendly_name : Proc(IVdsLunNaming*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLunNaming, lpVtbl : IVdsLunNamingVtbl* do
    GUID = LibC::GUID.new(0x907504cb_u32, 0x6b4e_u16, 0x4d88_u16, StaticArray[0xa3_u8, 0x4d_u8, 0x17_u8, 0xba_u8, 0x66_u8, 0x1f_u8, 0xbb_u8, 0x6_u8])
    def query_interface(this : IVdsLunNaming*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLunNaming*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLunNaming*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_friendly_name(this : IVdsLunNaming*, pwszFriendlyName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_friendly_name.call(this, pwszFriendlyName)
    end

  end

  @[Extern]
  record IVdsLunNumberVtbl,
    query_interface : Proc(IVdsLunNumber*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLunNumber*, UInt32),
    release : Proc(IVdsLunNumber*, UInt32),
    get_lun_number : Proc(IVdsLunNumber*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLunNumber, lpVtbl : IVdsLunNumberVtbl* do
    GUID = LibC::GUID.new(0xd3f95e46_u32, 0x54b3_u16, 0x41f9_u16, StaticArray[0xb6_u8, 0x78_u8, 0xf_u8, 0x18_u8, 0x71_u8, 0x44_u8, 0x3a_u8, 0x8_u8])
    def query_interface(this : IVdsLunNumber*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLunNumber*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLunNumber*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_lun_number(this : IVdsLunNumber*, pulLunNumber : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lun_number.call(this, pulLunNumber)
    end

  end

  @[Extern]
  record IVdsLunControllerPortsVtbl,
    query_interface : Proc(IVdsLunControllerPorts*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLunControllerPorts*, UInt32),
    release : Proc(IVdsLunControllerPorts*, UInt32),
    associate_controller_ports : Proc(IVdsLunControllerPorts*, LibC::GUID*, Int32, LibC::GUID*, Int32, Win32cr::Foundation::HRESULT),
    query_active_controller_ports : Proc(IVdsLunControllerPorts*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLunControllerPorts, lpVtbl : IVdsLunControllerPortsVtbl* do
    GUID = LibC::GUID.new(0x451fe266_u32, 0xda6d_u16, 0x406a_u16, StaticArray[0xbb_u8, 0x60_u8, 0x82_u8, 0xe5_u8, 0x34_u8, 0xf8_u8, 0x5a_u8, 0xeb_u8])
    def query_interface(this : IVdsLunControllerPorts*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLunControllerPorts*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLunControllerPorts*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def associate_controller_ports(this : IVdsLunControllerPorts*, pActiveControllerPortIdArray : LibC::GUID*, lNumberOfActiveControllerPorts : Int32, pInactiveControllerPortIdArray : LibC::GUID*, lNumberOfInactiveControllerPorts : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.associate_controller_ports.call(this, pActiveControllerPortIdArray, lNumberOfActiveControllerPorts, pInactiveControllerPortIdArray, lNumberOfInactiveControllerPorts)
    end
    def query_active_controller_ports(this : IVdsLunControllerPorts*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_active_controller_ports.call(this, ppEnum)
    end

  end

  @[Extern]
  record IVdsLunMpioVtbl,
    query_interface : Proc(IVdsLunMpio*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLunMpio*, UInt32),
    release : Proc(IVdsLunMpio*, UInt32),
    get_path_info : Proc(IVdsLunMpio*, Win32cr::Storage::VirtualDiskService::VDS_PATH_INFO**, Int32*, Win32cr::Foundation::HRESULT),
    get_load_balance_policy : Proc(IVdsLunMpio*, Win32cr::Storage::VirtualDiskService::VDS_LOADBALANCE_POLICY_ENUM*, Win32cr::Storage::VirtualDiskService::VDS_PATH_POLICY**, Int32*, Win32cr::Foundation::HRESULT),
    set_load_balance_policy : Proc(IVdsLunMpio*, Win32cr::Storage::VirtualDiskService::VDS_LOADBALANCE_POLICY_ENUM, Win32cr::Storage::VirtualDiskService::VDS_PATH_POLICY*, Int32, Win32cr::Foundation::HRESULT),
    get_supported_lb_policies : Proc(IVdsLunMpio*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLunMpio, lpVtbl : IVdsLunMpioVtbl* do
    GUID = LibC::GUID.new(0x7c5fbae3_u32, 0x333a_u16, 0x48a1_u16, StaticArray[0xa9_u8, 0x82_u8, 0x33_u8, 0xc1_u8, 0x57_u8, 0x88_u8, 0xcd_u8, 0xe3_u8])
    def query_interface(this : IVdsLunMpio*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLunMpio*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLunMpio*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_path_info(this : IVdsLunMpio*, ppPaths : Win32cr::Storage::VirtualDiskService::VDS_PATH_INFO**, plNumberOfPaths : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_path_info.call(this, ppPaths, plNumberOfPaths)
    end
    def get_load_balance_policy(this : IVdsLunMpio*, pPolicy : Win32cr::Storage::VirtualDiskService::VDS_LOADBALANCE_POLICY_ENUM*, ppPaths : Win32cr::Storage::VirtualDiskService::VDS_PATH_POLICY**, plNumberOfPaths : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_load_balance_policy.call(this, pPolicy, ppPaths, plNumberOfPaths)
    end
    def set_load_balance_policy(this : IVdsLunMpio*, policy : Win32cr::Storage::VirtualDiskService::VDS_LOADBALANCE_POLICY_ENUM, pPaths : Win32cr::Storage::VirtualDiskService::VDS_PATH_POLICY*, lNumberOfPaths : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_load_balance_policy.call(this, policy, pPaths, lNumberOfPaths)
    end
    def get_supported_lb_policies(this : IVdsLunMpio*, pulLbFlags : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_lb_policies.call(this, pulLbFlags)
    end

  end

  @[Extern]
  record IVdsLunIscsiVtbl,
    query_interface : Proc(IVdsLunIscsi*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLunIscsi*, UInt32),
    release : Proc(IVdsLunIscsi*, UInt32),
    associate_targets : Proc(IVdsLunIscsi*, LibC::GUID*, Int32, Win32cr::Foundation::HRESULT),
    query_associated_targets : Proc(IVdsLunIscsi*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLunIscsi, lpVtbl : IVdsLunIscsiVtbl* do
    GUID = LibC::GUID.new(0xd7c1e64_u32, 0xb59b_u16, 0x45ae_u16, StaticArray[0xb8_u8, 0x6a_u8, 0x2c_u8, 0x2c_u8, 0xc6_u8, 0xa4_u8, 0x20_u8, 0x67_u8])
    def query_interface(this : IVdsLunIscsi*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLunIscsi*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLunIscsi*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def associate_targets(this : IVdsLunIscsi*, pTargetIdArray : LibC::GUID*, lNumberOfTargets : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.associate_targets.call(this, pTargetIdArray, lNumberOfTargets)
    end
    def query_associated_targets(this : IVdsLunIscsi*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_associated_targets.call(this, ppEnum)
    end

  end

  @[Extern]
  record IVdsLunPlexVtbl,
    query_interface : Proc(IVdsLunPlex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsLunPlex*, UInt32),
    release : Proc(IVdsLunPlex*, UInt32),
    get_properties : Proc(IVdsLunPlex*, Win32cr::Storage::VirtualDiskService::VDS_LUN_PLEX_PROP*, Win32cr::Foundation::HRESULT),
    get_lun : Proc(IVdsLunPlex*, Void**, Win32cr::Foundation::HRESULT),
    query_extents : Proc(IVdsLunPlex*, Win32cr::Storage::VirtualDiskService::VDS_DRIVE_EXTENT**, Int32*, Win32cr::Foundation::HRESULT),
    query_hints : Proc(IVdsLunPlex*, Win32cr::Storage::VirtualDiskService::VDS_HINTS*, Win32cr::Foundation::HRESULT),
    apply_hints : Proc(IVdsLunPlex*, Win32cr::Storage::VirtualDiskService::VDS_HINTS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsLunPlex, lpVtbl : IVdsLunPlexVtbl* do
    GUID = LibC::GUID.new(0xee1a790_u32, 0x5d2e_u16, 0x4abb_u16, StaticArray[0x8c_u8, 0x99_u8, 0xc4_u8, 0x81_u8, 0xe8_u8, 0xbe_u8, 0x21_u8, 0x38_u8])
    def query_interface(this : IVdsLunPlex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsLunPlex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsLunPlex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsLunPlex*, pPlexProp : Win32cr::Storage::VirtualDiskService::VDS_LUN_PLEX_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pPlexProp)
    end
    def get_lun(this : IVdsLunPlex*, ppLun : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_lun.call(this, ppLun)
    end
    def query_extents(this : IVdsLunPlex*, ppExtentArray : Win32cr::Storage::VirtualDiskService::VDS_DRIVE_EXTENT**, plNumberOfExtents : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_extents.call(this, ppExtentArray, plNumberOfExtents)
    end
    def query_hints(this : IVdsLunPlex*, pHints : Win32cr::Storage::VirtualDiskService::VDS_HINTS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_hints.call(this, pHints)
    end
    def apply_hints(this : IVdsLunPlex*, pHints : Win32cr::Storage::VirtualDiskService::VDS_HINTS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply_hints.call(this, pHints)
    end

  end

  @[Extern]
  record IVdsIscsiPortalVtbl,
    query_interface : Proc(IVdsIscsiPortal*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsIscsiPortal*, UInt32),
    release : Proc(IVdsIscsiPortal*, UInt32),
    get_properties : Proc(IVdsIscsiPortal*, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTAL_PROP*, Win32cr::Foundation::HRESULT),
    get_sub_system : Proc(IVdsIscsiPortal*, Void**, Win32cr::Foundation::HRESULT),
    query_associated_portal_groups : Proc(IVdsIscsiPortal*, Void**, Win32cr::Foundation::HRESULT),
    set_status : Proc(IVdsIscsiPortal*, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTAL_STATUS, Win32cr::Foundation::HRESULT),
    set_ipsec_tunnel_address : Proc(IVdsIscsiPortal*, Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*, Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*, Win32cr::Foundation::HRESULT),
    get_ipsec_security : Proc(IVdsIscsiPortal*, Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*, UInt64*, Win32cr::Foundation::HRESULT),
    set_ipsec_security : Proc(IVdsIscsiPortal*, Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*, UInt64, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_IPSEC_KEY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsIscsiPortal, lpVtbl : IVdsIscsiPortalVtbl* do
    GUID = LibC::GUID.new(0x7fa1499d_u32, 0xec85_u16, 0x4a8a_u16, StaticArray[0xa4_u8, 0x7b_u8, 0xff_u8, 0x69_u8, 0x20_u8, 0x1f_u8, 0xcd_u8, 0x34_u8])
    def query_interface(this : IVdsIscsiPortal*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsIscsiPortal*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsIscsiPortal*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsIscsiPortal*, pPortalProp : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTAL_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pPortalProp)
    end
    def get_sub_system(this : IVdsIscsiPortal*, ppSubSystem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_system.call(this, ppSubSystem)
    end
    def query_associated_portal_groups(this : IVdsIscsiPortal*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_associated_portal_groups.call(this, ppEnum)
    end
    def set_status(this : IVdsIscsiPortal*, status : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTAL_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_status.call(this, status)
    end
    def set_ipsec_tunnel_address(this : IVdsIscsiPortal*, pTunnelAddress : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*, pDestinationAddress : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ipsec_tunnel_address.call(this, pTunnelAddress, pDestinationAddress)
    end
    def get_ipsec_security(this : IVdsIscsiPortal*, pInitiatorPortalAddress : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*, pullSecurityFlags : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ipsec_security.call(this, pInitiatorPortalAddress, pullSecurityFlags)
    end
    def set_ipsec_security(this : IVdsIscsiPortal*, pInitiatorPortalAddress : Win32cr::Storage::VirtualDiskService::VDS_IPADDRESS*, ullSecurityFlags : UInt64, pIpsecKey : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_IPSEC_KEY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_ipsec_security.call(this, pInitiatorPortalAddress, ullSecurityFlags, pIpsecKey)
    end

  end

  @[Extern]
  record IVdsIscsiTargetVtbl,
    query_interface : Proc(IVdsIscsiTarget*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsIscsiTarget*, UInt32),
    release : Proc(IVdsIscsiTarget*, UInt32),
    get_properties : Proc(IVdsIscsiTarget*, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_TARGET_PROP*, Win32cr::Foundation::HRESULT),
    get_sub_system : Proc(IVdsIscsiTarget*, Void**, Win32cr::Foundation::HRESULT),
    query_portal_groups : Proc(IVdsIscsiTarget*, Void**, Win32cr::Foundation::HRESULT),
    query_associated_luns : Proc(IVdsIscsiTarget*, Void**, Win32cr::Foundation::HRESULT),
    create_portal_group : Proc(IVdsIscsiTarget*, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IVdsIscsiTarget*, Void**, Win32cr::Foundation::HRESULT),
    set_friendly_name : Proc(IVdsIscsiTarget*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    set_shared_secret : Proc(IVdsIscsiTarget*, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_SHARED_SECRET*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    remember_initiator_shared_secret : Proc(IVdsIscsiTarget*, Win32cr::Foundation::PWSTR, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_SHARED_SECRET*, Win32cr::Foundation::HRESULT),
    get_connected_initiators : Proc(IVdsIscsiTarget*, Win32cr::Foundation::PWSTR**, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsIscsiTarget, lpVtbl : IVdsIscsiTargetVtbl* do
    GUID = LibC::GUID.new(0xaa8f5055_u32, 0x83e5_u16, 0x4bcc_u16, StaticArray[0xaa_u8, 0x73_u8, 0x19_u8, 0x85_u8, 0x1a_u8, 0x36_u8, 0xa8_u8, 0x49_u8])
    def query_interface(this : IVdsIscsiTarget*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsIscsiTarget*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsIscsiTarget*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsIscsiTarget*, pTargetProp : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_TARGET_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pTargetProp)
    end
    def get_sub_system(this : IVdsIscsiTarget*, ppSubSystem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sub_system.call(this, ppSubSystem)
    end
    def query_portal_groups(this : IVdsIscsiTarget*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_portal_groups.call(this, ppEnum)
    end
    def query_associated_luns(this : IVdsIscsiTarget*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_associated_luns.call(this, ppEnum)
    end
    def create_portal_group(this : IVdsIscsiTarget*, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_portal_group.call(this, ppAsync)
    end
    def delete(this : IVdsIscsiTarget*, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this, ppAsync)
    end
    def set_friendly_name(this : IVdsIscsiTarget*, pwszFriendlyName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_friendly_name.call(this, pwszFriendlyName)
    end
    def set_shared_secret(this : IVdsIscsiTarget*, pTargetSharedSecret : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_SHARED_SECRET*, pwszInitiatorName : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_shared_secret.call(this, pTargetSharedSecret, pwszInitiatorName)
    end
    def remember_initiator_shared_secret(this : IVdsIscsiTarget*, pwszInitiatorName : Win32cr::Foundation::PWSTR, pInitiatorSharedSecret : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_SHARED_SECRET*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remember_initiator_shared_secret.call(this, pwszInitiatorName, pInitiatorSharedSecret)
    end
    def get_connected_initiators(this : IVdsIscsiTarget*, pppwszInitiatorList : Win32cr::Foundation::PWSTR**, plNumberOfInitiators : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_connected_initiators.call(this, pppwszInitiatorList, plNumberOfInitiators)
    end

  end

  @[Extern]
  record IVdsIscsiPortalGroupVtbl,
    query_interface : Proc(IVdsIscsiPortalGroup*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsIscsiPortalGroup*, UInt32),
    release : Proc(IVdsIscsiPortalGroup*, UInt32),
    get_properties : Proc(IVdsIscsiPortalGroup*, Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTALGROUP_PROP*, Win32cr::Foundation::HRESULT),
    get_target : Proc(IVdsIscsiPortalGroup*, Void**, Win32cr::Foundation::HRESULT),
    query_associated_portals : Proc(IVdsIscsiPortalGroup*, Void**, Win32cr::Foundation::HRESULT),
    add_portal : Proc(IVdsIscsiPortalGroup*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    remove_portal : Proc(IVdsIscsiPortalGroup*, LibC::GUID, Void**, Win32cr::Foundation::HRESULT),
    delete : Proc(IVdsIscsiPortalGroup*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsIscsiPortalGroup, lpVtbl : IVdsIscsiPortalGroupVtbl* do
    GUID = LibC::GUID.new(0xfef5f89d_u32, 0xa3dd_u16, 0x4b36_u16, StaticArray[0xbf_u8, 0x28_u8, 0xe7_u8, 0xdd_u8, 0xe0_u8, 0x45_u8, 0xc5_u8, 0x93_u8])
    def query_interface(this : IVdsIscsiPortalGroup*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsIscsiPortalGroup*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsIscsiPortalGroup*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_properties(this : IVdsIscsiPortalGroup*, pPortalGroupProp : Win32cr::Storage::VirtualDiskService::VDS_ISCSI_PORTALGROUP_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pPortalGroupProp)
    end
    def get_target(this : IVdsIscsiPortalGroup*, ppTarget : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_target.call(this, ppTarget)
    end
    def query_associated_portals(this : IVdsIscsiPortalGroup*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_associated_portals.call(this, ppEnum)
    end
    def add_portal(this : IVdsIscsiPortalGroup*, portalId : LibC::GUID, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_portal.call(this, portalId, ppAsync)
    end
    def remove_portal(this : IVdsIscsiPortalGroup*, portalId : LibC::GUID, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_portal.call(this, portalId, ppAsync)
    end
    def delete(this : IVdsIscsiPortalGroup*, ppAsync : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.delete.call(this, ppAsync)
    end

  end

  @[Extern]
  record IVdsStoragePoolVtbl,
    query_interface : Proc(IVdsStoragePool*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsStoragePool*, UInt32),
    release : Proc(IVdsStoragePool*, UInt32),
    get_provider : Proc(IVdsStoragePool*, Void**, Win32cr::Foundation::HRESULT),
    get_properties : Proc(IVdsStoragePool*, Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_PROP*, Win32cr::Foundation::HRESULT),
    get_attributes : Proc(IVdsStoragePool*, Win32cr::Storage::VirtualDiskService::VDS_POOL_ATTRIBUTES*, Win32cr::Foundation::HRESULT),
    query_drive_extents : Proc(IVdsStoragePool*, Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_DRIVE_EXTENT**, Int32*, Win32cr::Foundation::HRESULT),
    query_allocated_luns : Proc(IVdsStoragePool*, Void**, Win32cr::Foundation::HRESULT),
    query_allocated_storage_pools : Proc(IVdsStoragePool*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsStoragePool, lpVtbl : IVdsStoragePoolVtbl* do
    GUID = LibC::GUID.new(0x932ca8cf_u32, 0xeb3_u16, 0x4ba8_u16, StaticArray[0x96_u8, 0x20_u8, 0x22_u8, 0x66_u8, 0x5d_u8, 0x7f_u8, 0x84_u8, 0x50_u8])
    def query_interface(this : IVdsStoragePool*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsStoragePool*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsStoragePool*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_provider(this : IVdsStoragePool*, ppProvider : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_provider.call(this, ppProvider)
    end
    def get_properties(this : IVdsStoragePool*, pStoragePoolProp : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_PROP*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_properties.call(this, pStoragePoolProp)
    end
    def get_attributes(this : IVdsStoragePool*, pStoragePoolAttributes : Win32cr::Storage::VirtualDiskService::VDS_POOL_ATTRIBUTES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_attributes.call(this, pStoragePoolAttributes)
    end
    def query_drive_extents(this : IVdsStoragePool*, ppExtentArray : Win32cr::Storage::VirtualDiskService::VDS_STORAGE_POOL_DRIVE_EXTENT**, plNumberOfExtents : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_drive_extents.call(this, ppExtentArray, plNumberOfExtents)
    end
    def query_allocated_luns(this : IVdsStoragePool*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_allocated_luns.call(this, ppEnum)
    end
    def query_allocated_storage_pools(this : IVdsStoragePool*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_allocated_storage_pools.call(this, ppEnum)
    end

  end

  @[Extern]
  record IVdsMaintenanceVtbl,
    query_interface : Proc(IVdsMaintenance*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsMaintenance*, UInt32),
    release : Proc(IVdsMaintenance*, UInt32),
    start_maintenance : Proc(IVdsMaintenance*, Win32cr::Storage::VirtualDiskService::VDS_MAINTENANCE_OPERATION, Win32cr::Foundation::HRESULT),
    stop_maintenance : Proc(IVdsMaintenance*, Win32cr::Storage::VirtualDiskService::VDS_MAINTENANCE_OPERATION, Win32cr::Foundation::HRESULT),
    pulse_maintenance : Proc(IVdsMaintenance*, Win32cr::Storage::VirtualDiskService::VDS_MAINTENANCE_OPERATION, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsMaintenance, lpVtbl : IVdsMaintenanceVtbl* do
    GUID = LibC::GUID.new(0xdaebeef3_u32, 0x8523_u16, 0x47ed_u16, StaticArray[0xa2_u8, 0xb9_u8, 0x5_u8, 0xce_u8, 0xcc_u8, 0xe2_u8, 0xa1_u8, 0xae_u8])
    def query_interface(this : IVdsMaintenance*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsMaintenance*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsMaintenance*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def start_maintenance(this : IVdsMaintenance*, operation : Win32cr::Storage::VirtualDiskService::VDS_MAINTENANCE_OPERATION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.start_maintenance.call(this, operation)
    end
    def stop_maintenance(this : IVdsMaintenance*, operation : Win32cr::Storage::VirtualDiskService::VDS_MAINTENANCE_OPERATION) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stop_maintenance.call(this, operation)
    end
    def pulse_maintenance(this : IVdsMaintenance*, operation : Win32cr::Storage::VirtualDiskService::VDS_MAINTENANCE_OPERATION, ulCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.pulse_maintenance.call(this, operation, ulCount)
    end

  end

  @[Extern]
  record IVdsHwProviderPrivateVtbl,
    query_interface : Proc(IVdsHwProviderPrivate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsHwProviderPrivate*, UInt32),
    release : Proc(IVdsHwProviderPrivate*, UInt32),
    query_if_created_lun : Proc(IVdsHwProviderPrivate*, Win32cr::Foundation::PWSTR, Win32cr::Storage::VirtualDiskService::VDS_LUN_INFORMATION*, LibC::GUID*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsHwProviderPrivate, lpVtbl : IVdsHwProviderPrivateVtbl* do
    GUID = LibC::GUID.new(0x98f17bf3_u32, 0x9f33_u16, 0x4f12_u16, StaticArray[0x87_u8, 0x14_u8, 0x8b_u8, 0x40_u8, 0x75_u8, 0x9_u8, 0x2c_u8, 0x2e_u8])
    def query_interface(this : IVdsHwProviderPrivate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsHwProviderPrivate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsHwProviderPrivate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_if_created_lun(this : IVdsHwProviderPrivate*, pwszDevicePath : Win32cr::Foundation::PWSTR, pVdsLunInformation : Win32cr::Storage::VirtualDiskService::VDS_LUN_INFORMATION*, pLunId : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_if_created_lun.call(this, pwszDevicePath, pVdsLunInformation, pLunId)
    end

  end

  @[Extern]
  record IVdsHwProviderPrivateMpioVtbl,
    query_interface : Proc(IVdsHwProviderPrivateMpio*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsHwProviderPrivateMpio*, UInt32),
    release : Proc(IVdsHwProviderPrivateMpio*, UInt32),
    set_all_path_statuses_from_hba_port : Proc(IVdsHwProviderPrivateMpio*, Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_PROP, Win32cr::Storage::VirtualDiskService::VDS_PATH_STATUS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsHwProviderPrivateMpio, lpVtbl : IVdsHwProviderPrivateMpioVtbl* do
    GUID = LibC::GUID.new(0x310a7715_u32, 0xac2b_u16, 0x4c6f_u16, StaticArray[0x98_u8, 0x27_u8, 0x3d_u8, 0x74_u8, 0x2f_u8, 0x35_u8, 0x16_u8, 0x76_u8])
    def query_interface(this : IVdsHwProviderPrivateMpio*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsHwProviderPrivateMpio*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsHwProviderPrivateMpio*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_all_path_statuses_from_hba_port(this : IVdsHwProviderPrivateMpio*, hbaPortProp : Win32cr::Storage::VirtualDiskService::VDS_HBAPORT_PROP, status : Win32cr::Storage::VirtualDiskService::VDS_PATH_STATUS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_all_path_statuses_from_hba_port.call(this, hbaPortProp, status)
    end

  end

  @[Extern]
  record IVdsAdminVtbl,
    query_interface : Proc(IVdsAdmin*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IVdsAdmin*, UInt32),
    release : Proc(IVdsAdmin*, UInt32),
    register_provider : Proc(IVdsAdmin*, LibC::GUID, LibC::GUID, Win32cr::Foundation::PWSTR, Win32cr::Storage::VirtualDiskService::VDS_PROVIDER_TYPE, Win32cr::Foundation::PWSTR, Win32cr::Foundation::PWSTR, LibC::GUID, Win32cr::Foundation::HRESULT),
    unregister_provider : Proc(IVdsAdmin*, LibC::GUID, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IVdsAdmin, lpVtbl : IVdsAdminVtbl* do
    GUID = LibC::GUID.new(0xd188e97d_u32, 0x85aa_u16, 0x4d33_u16, StaticArray[0xab_u8, 0xc6_u8, 0x26_u8, 0x29_u8, 0x9a_u8, 0x10_u8, 0xff_u8, 0xc1_u8])
    def query_interface(this : IVdsAdmin*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IVdsAdmin*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IVdsAdmin*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def register_provider(this : IVdsAdmin*, providerId : LibC::GUID, providerClsid : LibC::GUID, pwszName : Win32cr::Foundation::PWSTR, type__ : Win32cr::Storage::VirtualDiskService::VDS_PROVIDER_TYPE, pwszMachineName : Win32cr::Foundation::PWSTR, pwszVersion : Win32cr::Foundation::PWSTR, guidVersionId : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_provider.call(this, providerId, providerClsid, pwszName, type__, pwszMachineName, pwszVersion, guidVersionId)
    end
    def unregister_provider(this : IVdsAdmin*, providerId : LibC::GUID) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_provider.call(this, providerId)
    end

  end

end