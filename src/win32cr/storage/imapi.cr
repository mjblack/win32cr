require "./../system/com.cr"
require "./../foundation.cr"
require "./../system/ole.cr"
require "./../system/com/structured_storage.cr"
require "./../system/address_book.cr"

module Win32cr::Storage::Imapi
  extend self
  alias MSGCALLRELEASE = Proc(UInt32, Void*, Void)

  IMAPI_SECTOR_SIZE = 2048_u32
  IMAPI2_DEFAULT_COMMAND_TIMEOUT = 10_u32
  DISPID_DDISCMASTER2EVENTS_DEVICEADDED = 256_u32
  DISPID_DDISCMASTER2EVENTS_DEVICEREMOVED = 257_u32
  DISPID_IDISCRECORDER2_EJECTMEDIA = 256_u32
  DISPID_IDISCRECORDER2_CLOSETRAY = 257_u32
  DISPID_IDISCRECORDER2_ACQUIREEXCLUSIVEACCESS = 258_u32
  DISPID_IDISCRECORDER2_RELEASEEXCLUSIVEACCESS = 259_u32
  DISPID_IDISCRECORDER2_DISABLEMCN = 260_u32
  DISPID_IDISCRECORDER2_ENABLEMCN = 261_u32
  DISPID_IDISCRECORDER2_INITIALIZEDISCRECORDER = 262_u32
  DISPID_IDISCRECORDER2_ACTIVEDISCRECORDER = 0_u32
  DISPID_IDISCRECORDER2_VENDORID = 513_u32
  DISPID_IDISCRECORDER2_PRODUCTID = 514_u32
  DISPID_IDISCRECORDER2_PRODUCTREVISION = 515_u32
  DISPID_IDISCRECORDER2_VOLUMENAME = 516_u32
  DISPID_IDISCRECORDER2_VOLUMEPATHNAMES = 517_u32
  DISPID_IDISCRECORDER2_DEVICECANLOADMEDIA = 518_u32
  DISPID_IDISCRECORDER2_LEGACYDEVICENUMBER = 519_u32
  DISPID_IDISCRECORDER2_SUPPORTEDFEATUREPAGES = 520_u32
  DISPID_IDISCRECORDER2_CURRENTFEATUREPAGES = 521_u32
  DISPID_IDISCRECORDER2_SUPPORTEDPROFILES = 522_u32
  DISPID_IDISCRECORDER2_CURRENTPROFILES = 523_u32
  DISPID_IDISCRECORDER2_SUPPORTEDMODEPAGES = 524_u32
  DISPID_IDISCRECORDER2_EXCLUSIVEACCESSOWNER = 525_u32
  DISPID_IWRITEENGINE2_WRITESECTION = 512_u32
  DISPID_IWRITEENGINE2_CANCELWRITE = 513_u32
  DISPID_IWRITEENGINE2_DISCRECORDER = 256_u32
  DISPID_IWRITEENGINE2_USESTREAMINGWRITE12 = 257_u32
  DISPID_IWRITEENGINE2_STARTINGSECTORSPERSECOND = 258_u32
  DISPID_IWRITEENGINE2_ENDINGSECTORSPERSECOND = 259_u32
  DISPID_IWRITEENGINE2_BYTESPERSECTOR = 260_u32
  DISPID_IWRITEENGINE2_WRITEINPROGRESS = 261_u32
  DISPID_IWRITEENGINE2EVENTARGS_STARTLBA = 256_u32
  DISPID_IWRITEENGINE2EVENTARGS_SECTORCOUNT = 257_u32
  DISPID_IWRITEENGINE2EVENTARGS_LASTREADLBA = 258_u32
  DISPID_IWRITEENGINE2EVENTARGS_LASTWRITTENLBA = 259_u32
  DISPID_IWRITEENGINE2EVENTARGS_TOTALDEVICEBUFFER = 260_u32
  DISPID_IWRITEENGINE2EVENTARGS_USEDDEVICEBUFFER = 261_u32
  DISPID_IWRITEENGINE2EVENTARGS_TOTALSYSTEMBUFFER = 262_u32
  DISPID_IWRITEENGINE2EVENTARGS_USEDSYSTEMBUFFER = 263_u32
  DISPID_IWRITEENGINE2EVENTARGS_FREESYSTEMBUFFER = 264_u32
  DISPID_DWRITEENGINE2EVENTS_UPDATE = 256_u32
  DISPID_IDISCFORMAT2_RECORDERSUPPORTED = 2048_u32
  DISPID_IDISCFORMAT2_MEDIASUPPORTED = 2049_u32
  DISPID_IDISCFORMAT2_MEDIAPHYSICALLYBLANK = 1792_u32
  DISPID_IDISCFORMAT2_MEDIAHEURISTICALLYBLANK = 1793_u32
  DISPID_IDISCFORMAT2_SUPPORTEDMEDIATYPES = 1794_u32
  DISPID_IDISCFORMAT2ERASE_RECORDER = 256_u32
  DISPID_IDISCFORMAT2ERASE_FULLERASE = 257_u32
  DISPID_IDISCFORMAT2ERASE_MEDIATYPE = 258_u32
  DISPID_IDISCFORMAT2ERASE_CLIENTNAME = 259_u32
  DISPID_IDISCFORMAT2ERASE_ERASEMEDIA = 513_u32
  DISPID_IDISCFORMAT2ERASEEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2DATA_RECORDER = 256_u32
  DISPID_IDISCFORMAT2DATA_BUFFERUNDERRUNFREEDISABLED = 257_u32
  DISPID_IDISCFORMAT2DATA_POSTGAPALREADYINIMAGE = 260_u32
  DISPID_IDISCFORMAT2DATA_CURRENTMEDIASTATUS = 262_u32
  DISPID_IDISCFORMAT2DATA_WRITEPROTECTSTATUS = 263_u32
  DISPID_IDISCFORMAT2DATA_TOTALSECTORS = 264_u32
  DISPID_IDISCFORMAT2DATA_FREESECTORS = 265_u32
  DISPID_IDISCFORMAT2DATA_NEXTWRITABLEADDRESS = 266_u32
  DISPID_IDISCFORMAT2DATA_STARTSECTOROFPREVIOUSSESSION = 267_u32
  DISPID_IDISCFORMAT2DATA_LASTSECTOROFPREVIOUSSESSION = 268_u32
  DISPID_IDISCFORMAT2DATA_FORCEMEDIATOBECLOSED = 269_u32
  DISPID_IDISCFORMAT2DATA_DISABLEDVDCOMPATIBILITYMODE = 270_u32
  DISPID_IDISCFORMAT2DATA_CURRENTMEDIATYPE = 271_u32
  DISPID_IDISCFORMAT2DATA_CLIENTNAME = 272_u32
  DISPID_IDISCFORMAT2DATA_REQUESTEDWRITESPEED = 273_u32
  DISPID_IDISCFORMAT2DATA_REQUESTEDROTATIONTYPEISPURECAV = 274_u32
  DISPID_IDISCFORMAT2DATA_CURRENTWRITESPEED = 275_u32
  DISPID_IDISCFORMAT2DATA_CURRENTROTATIONTYPEISPURECAV = 276_u32
  DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDS = 277_u32
  DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDDESCRIPTORS = 278_u32
  DISPID_IDISCFORMAT2DATA_FORCEOVERWRITE = 279_u32
  DISPID_IDISCFORMAT2DATA_MUTLISESSIONINTERFACES = 280_u32
  DISPID_IDISCFORMAT2DATA_WRITE = 512_u32
  DISPID_IDISCFORMAT2DATA_CANCELWRITE = 513_u32
  DISPID_IDISCFORMAT2DATA_SETWRITESPEED = 514_u32
  DISPID_DDISCFORMAT2DATAEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_ELAPSEDTIME = 768_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDREMAININGTIME = 769_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDTOTALTIME = 770_u32
  DISPID_IDISCFORMAT2DATAEVENTARGS_CURRENTACTION = 771_u32
  DISPID_IDISCFORMAT2TAO_RECORDER = 256_u32
  DISPID_IDISCFORMAT2TAO_BUFFERUNDERRUNFREEDISABLED = 258_u32
  DISPID_IDISCFORMAT2TAO_NUMBEROFEXISTINGTRACKS = 259_u32
  DISPID_IDISCFORMAT2TAO_TOTALSECTORSONMEDIA = 260_u32
  DISPID_IDISCFORMAT2TAO_FREESECTORSONMEDIA = 261_u32
  DISPID_IDISCFORMAT2TAO_USEDSECTORSONMEDIA = 262_u32
  DISPID_IDISCFORMAT2TAO_DONOTFINALIZEMEDIA = 263_u32
  DISPID_IDISCFORMAT2TAO_EXPECTEDTABLEOFCONTENTS = 266_u32
  DISPID_IDISCFORMAT2TAO_CURRENTMEDIATYPE = 267_u32
  DISPID_IDISCFORMAT2TAO_CLIENTNAME = 270_u32
  DISPID_IDISCFORMAT2TAO_REQUESTEDWRITESPEED = 271_u32
  DISPID_IDISCFORMAT2TAO_REQUESTEDROTATIONTYPEISPURECAV = 272_u32
  DISPID_IDISCFORMAT2TAO_CURRENTWRITESPEED = 273_u32
  DISPID_IDISCFORMAT2TAO_CURRENTROTATIONTYPEISPURECAV = 274_u32
  DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDS = 275_u32
  DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDDESCRIPTORS = 276_u32
  DISPID_IDISCFORMAT2TAO_PREPAREMEDIA = 512_u32
  DISPID_IDISCFORMAT2TAO_ADDAUDIOTRACK = 513_u32
  DISPID_IDISCFORMAT2TAO_CANCELADDTRACK = 514_u32
  DISPID_IDISCFORMAT2TAO_FINISHMEDIA = 515_u32
  DISPID_IDISCFORMAT2TAO_SETWRITESPEED = 516_u32
  DISPID_DDISCFORMAT2TAOEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTTRACKNUMBER = 768_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTACTION = 769_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_ELAPSEDTIME = 770_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDREMAININGTIME = 771_u32
  DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDTOTALTIME = 772_u32
  DISPID_IDISCFORMAT2RAWCD_RECORDER = 256_u32
  DISPID_IDISCFORMAT2RAWCD_BUFFERUNDERRUNFREEDISABLED = 258_u32
  DISPID_IDISCFORMAT2RAWCD_STARTOFNEXTSESSION = 259_u32
  DISPID_IDISCFORMAT2RAWCD_LASTPOSSIBLESTARTOFLEADOUT = 260_u32
  DISPID_IDISCFORMAT2RAWCD_CURRENTMEDIATYPE = 261_u32
  DISPID_IDISCFORMAT2RAWCD_SUPPORTEDDATASECTORTYPES = 264_u32
  DISPID_IDISCFORMAT2RAWCD_REQUESTEDDATASECTORTYPE = 265_u32
  DISPID_IDISCFORMAT2RAWCD_CLIENTNAME = 266_u32
  DISPID_IDISCFORMAT2RAWCD_REQUESTEDWRITESPEED = 267_u32
  DISPID_IDISCFORMAT2RAWCD_REQUESTEDROTATIONTYPEISPURECAV = 268_u32
  DISPID_IDISCFORMAT2RAWCD_CURRENTWRITESPEED = 269_u32
  DISPID_IDISCFORMAT2RAWCD_CURRENTROTATIONTYPEISPURECAV = 270_u32
  DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDS = 271_u32
  DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDDESCRIPTORS = 272_u32
  DISPID_IDISCFORMAT2RAWCD_PREPAREMEDIA = 512_u32
  DISPID_IDISCFORMAT2RAWCD_WRITEMEDIA = 513_u32
  DISPID_IDISCFORMAT2RAWCD_WRITEMEDIAWITHVALIDATION = 514_u32
  DISPID_IDISCFORMAT2RAWCD_CANCELWRITE = 515_u32
  DISPID_IDISCFORMAT2RAWCD_RELEASEMEDIA = 516_u32
  DISPID_IDISCFORMAT2RAWCD_SETWRITESPEED = 517_u32
  DISPID_DDISCFORMAT2RAWCDEVENTS_UPDATE = 512_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTTRACKNUMBER = 768_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTACTION = 769_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_ELAPSEDTIME = 768_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDREMAININGTIME = 769_u32
  DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDTOTALTIME = 770_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_CD = 75_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_DVD = 680_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_BD = 2195_u32
  IMAPI_SECTORS_PER_SECOND_AT_1X_HD_DVD = 4568_u32
  DISPID_IMULTISESSION_SUPPORTEDONCURRENTMEDIA = 256_u32
  DISPID_IMULTISESSION_INUSE = 257_u32
  DISPID_IMULTISESSION_IMPORTRECORDER = 258_u32
  DISPID_IMULTISESSION_FIRSTDATASESSION = 512_u32
  DISPID_IMULTISESSION_STARTSECTOROFPREVIOUSSESSION = 513_u32
  DISPID_IMULTISESSION_LASTSECTOROFPREVIOUSSESSION = 514_u32
  DISPID_IMULTISESSION_NEXTWRITABLEADDRESS = 515_u32
  DISPID_IMULTISESSION_FREESECTORS = 516_u32
  DISPID_IMULTISESSION_WRITEUNITSIZE = 517_u32
  DISPID_IMULTISESSION_LASTWRITTENADDRESS = 518_u32
  DISPID_IMULTISESSION_SECTORSONMEDIA = 519_u32
  DISPID_IRAWCDIMAGECREATOR_CREATERESULTIMAGE = 512_u32
  DISPID_IRAWCDIMAGECREATOR_ADDTRACK = 513_u32
  DISPID_IRAWCDIMAGECREATOR_ADDSPECIALPREGAP = 514_u32
  DISPID_IRAWCDIMAGECREATOR_ADDSUBCODERWGENERATOR = 515_u32
  DISPID_IRAWCDIMAGECREATOR_RESULTINGIMAGETYPE = 256_u32
  DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUT = 257_u32
  DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUTLIMIT = 258_u32
  DISPID_IRAWCDIMAGECREATOR_DISABLEGAPLESSAUDIO = 259_u32
  DISPID_IRAWCDIMAGECREATOR_MEDIACATALOGNUMBER = 260_u32
  DISPID_IRAWCDIMAGECREATOR_STARTINGTRACKNUMBER = 261_u32
  DISPID_IRAWCDIMAGECREATOR_TRACKINFO = 262_u32
  DISPID_IRAWCDIMAGECREATOR_NUMBEROFEXISTINGTRACKS = 263_u32
  DISPID_IRAWCDIMAGECREATOR_USEDSECTORSONDISC = 264_u32
  DISPID_IRAWCDIMAGECREATOR_EXPECTEDTABLEOFCONTENTS = 265_u32
  DISPID_IRAWCDTRACKINFO_STARTINGLBA = 256_u32
  DISPID_IRAWCDTRACKINFO_SECTORCOUNT = 257_u32
  DISPID_IRAWCDTRACKINFO_TRACKNUMBER = 258_u32
  DISPID_IRAWCDTRACKINFO_SECTORTYPE = 259_u32
  DISPID_IRAWCDTRACKINFO_ISRC = 260_u32
  DISPID_IRAWCDTRACKINFO_DIGITALAUDIOCOPYSETTING = 261_u32
  DISPID_IRAWCDTRACKINFO_AUDIOHASPREEMPHASIS = 262_u32
  DISPID_IBLOCKRANGE_STARTLBA = 256_u32
  DISPID_IBLOCKRANGE_ENDLBA = 257_u32
  DISPID_IBLOCKRANGELIST_BLOCKRANGES = 256_u32
  IMAPILib2_MajorVersion = 1_u32
  IMAPILib2_MinorVersion = 0_u32
  IMAPI2FS_BOOT_ENTRY_COUNT_MAX = 32_u32
  DISPID_DFILESYSTEMIMAGEEVENTS_UPDATE = 256_u32
  DISPID_DFILESYSTEMIMAGEIMPORTEVENTS_UPDATEIMPORT = 257_u32
  IMAPI2FS_MajorVersion = 1_u32
  IMAPI2FS_MinorVersion = 0_u32
  IMAPI2FS_FullVersion_STR = "1.0"
  IMAPI2FS_FullVersion_WSTR = "1.0"
  MP_MSGCLASS_SYSTEM = 1_u32
  MP_MSGCLASS_REPLICATION = 2_u32
  MP_MSGCLASS_DELIVERY_REPORT = 3_u32
  MP_MSGCLASS_NONDELIVERY_REPORT = 4_u32
  MP_STATUS_SUCCESS = 0_u32
  MP_STATUS_RETRY = 1_u32
  MP_STATUS_ABORT_DELIVERY = 2_u32
  MP_STATUS_BAD_MAIL = 3_u32
  MP_STATUS_SUBMITTED = 4_u32
  MP_STATUS_CATEGORIZED = 5_u32
  MP_STATUS_ABANDON_DELIVERY = 6_u32
  RP_RECIP_FLAGS_RESERVED = 15_u32
  RP_DSN_NOTIFY_SUCCESS = 16777216_u32
  RP_DSN_NOTIFY_FAILURE = 33554432_u32
  RP_DSN_NOTIFY_DELAY = 67108864_u32
  RP_DSN_NOTIFY_NEVER = 134217728_u32
  RP_DSN_NOTIFY_MASK = 251658240_u32
  RP_HANDLED = 16_u32
  RP_GENERAL_FAILURE = 32_u32
  RP_DSN_HANDLED = 64_u32
  RP_DELIVERED = 272_u32
  RP_DSN_SENT_NDR = 1104_u32
  RP_FAILED = 2096_u32
  RP_UNRESOLVED = 4144_u32
  RP_ENPANDED = 8208_u32
  RP_EXPANDED = 8208_u32
  RP_DSN_SENT_DELAYED = 16384_u32
  RP_DSN_SENT_EXPANDED = 32832_u32
  RP_DSN_SENT_RELAYED = 65600_u32
  RP_DSN_SENT_DELIVERED = 131136_u32
  RP_REMOTE_MTA_NO_DSN = 524288_u32
  RP_ERROR_CONTEXT_STORE = 1048576_u32
  RP_ERROR_CONTEXT_CAT = 2097152_u32
  RP_ERROR_CONTEXT_MTA = 4194304_u32
  RP_VOLATILE_FLAGS_MASK = 4026531840_u32
  RP_DSN_NOTIFY_INVALID = 0_u32
  MPV_INBOUND_CUTOFF_EXCEEDED = 1_u32
  MPV_WRITE_CONTENT = 2_u32
  NMP_PROCESS_POST = 1_u32
  NMP_PROCESS_CONTROL = 2_u32
  NMP_PROCESS_MODERATOR = 4_u32
  GUID_SMTP_SOURCE_TYPE = "fb65c4dc-e468-11d1-aa67-00c04fa345f6"
  GUID_SMTPSVC_SOURCE = "1b3c0666-e470-11d1-aa67-00c04fa345f6"
  CATID_SMTP_ON_INBOUND_COMMAND = "f6628c8d-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_SERVER_RESPONSE = "f6628c8e-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_SESSION_START = "f6628c8f-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_MESSAGE_START = "f6628c90-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_PER_RECIPIENT = "f6628c91-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_BEFORE_DATA = "f6628c92-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_ON_SESSION_END = "f6628c93-0d5e-11d2-aa68-00c04fa35b82"
  CATID_SMTP_STORE_DRIVER = "59175850-e533-11d1-aa67-00c04fa345f6"
  CATID_SMTP_TRANSPORT_SUBMISSION = "ff3caa23-00b9-11d2-9dfb-00c04fa322ba"
  CATID_SMTP_TRANSPORT_PRECATEGORIZE = "a3acfb0d-83ff-11d2-9e14-00c04fa322ba"
  CATID_SMTP_TRANSPORT_CATEGORIZE = "960252a3-0a3a-11d2-9e00-00c04fa322ba"
  CATID_SMTP_TRANSPORT_POSTCATEGORIZE = "76719654-05a6-11d2-9dfd-00c04fa322ba"
  CATID_SMTP_TRANSPORT_ROUTER = "283430c9-1850-11d2-9e03-00c04fa322ba"
  CATID_SMTP_MSGTRACKLOG = "c6df52aa-7db0-11d2-94f4-00c04f79f1d6"
  CATID_SMTP_DNSRESOLVERRECORDSINK = "bd0b4366-8e03-11d2-94f6-00c04f79f1d6"
  CATID_SMTP_MAXMSGSIZE = "ebf159de-a67e-11d2-94f7-00c04f79f1d6"
  CATID_SMTP_LOG = "93d0a538-2c1e-4b68-a7c9-d73a8aa6ee97"
  CATID_SMTP_GET_AUX_DOMAIN_INFO_FLAGS = "84ff368a-fab3-43d7-bcdf-692c5b46e6b1"
  CLSID_SmtpCat = "b23c35b7-9219-11d2-9e17-00c04fa322ba"
  CATID_SMTP_DSN = "22b55731-f5f8-4d23-bd8f-87b52371a73a"
  SZ_PROGID_SMTPCAT = "Smtp.Cat"
  IMAPI_S_PROPERTIESIGNORED = 262656_i32
  IMAPI_S_BUFFER_TO_SMALL = 262657_i32
  IMAPI_E_NOTOPENED = -2147220981_i32
  IMAPI_E_NOTINITIALIZED = -2147220980_i32
  IMAPI_E_USERABORT = -2147220979_i32
  IMAPI_E_GENERIC = -2147220978_i32
  IMAPI_E_MEDIUM_NOTPRESENT = -2147220977_i32
  IMAPI_E_MEDIUM_INVALIDTYPE = -2147220976_i32
  IMAPI_E_DEVICE_NOPROPERTIES = -2147220975_i32
  IMAPI_E_DEVICE_NOTACCESSIBLE = -2147220974_i32
  IMAPI_E_DEVICE_NOTPRESENT = -2147220973_i32
  IMAPI_E_DEVICE_INVALIDTYPE = -2147220972_i32
  IMAPI_E_INITIALIZE_WRITE = -2147220971_i32
  IMAPI_E_INITIALIZE_ENDWRITE = -2147220970_i32
  IMAPI_E_FILESYSTEM = -2147220969_i32
  IMAPI_E_FILEACCESS = -2147220968_i32
  IMAPI_E_DISCINFO = -2147220967_i32
  IMAPI_E_TRACKNOTOPEN = -2147220966_i32
  IMAPI_E_TRACKOPEN = -2147220965_i32
  IMAPI_E_DISCFULL = -2147220964_i32
  IMAPI_E_BADJOLIETNAME = -2147220963_i32
  IMAPI_E_INVALIDIMAGE = -2147220962_i32
  IMAPI_E_NOACTIVEFORMAT = -2147220961_i32
  IMAPI_E_NOACTIVERECORDER = -2147220960_i32
  IMAPI_E_WRONGFORMAT = -2147220959_i32
  IMAPI_E_ALREADYOPEN = -2147220958_i32
  IMAPI_E_WRONGDISC = -2147220957_i32
  IMAPI_E_FILEEXISTS = -2147220956_i32
  IMAPI_E_STASHINUSE = -2147220955_i32
  IMAPI_E_DEVICE_STILL_IN_USE = -2147220954_i32
  IMAPI_E_LOSS_OF_STREAMING = -2147220953_i32
  IMAPI_E_COMPRESSEDSTASH = -2147220952_i32
  IMAPI_E_ENCRYPTEDSTASH = -2147220951_i32
  IMAPI_E_NOTENOUGHDISKFORSTASH = -2147220950_i32
  IMAPI_E_REMOVABLESTASH = -2147220949_i32
  IMAPI_E_CANNOT_WRITE_TO_MEDIA = -2147220948_i32
  IMAPI_E_TRACK_NOT_BIG_ENOUGH = -2147220947_i32
  IMAPI_E_BOOTIMAGE_AND_NONBLANK_DISC = -2147220946_i32

  CLSID_MsftDiscMaster2 = LibC::GUID.new(0x2735412e_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftDiscRecorder2 = LibC::GUID.new(0x2735412d_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftWriteEngine2 = LibC::GUID.new(0x2735412c_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftDiscFormat2Erase = LibC::GUID.new(0x2735412b_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftDiscFormat2Data = LibC::GUID.new(0x2735412a_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftDiscFormat2TrackAtOnce = LibC::GUID.new(0x27354129_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftDiscFormat2RawCD = LibC::GUID.new(0x27354128_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftStreamZero = LibC::GUID.new(0x27354127_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftStreamPrng001 = LibC::GUID.new(0x27354126_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftStreamConcatenate = LibC::GUID.new(0x27354125_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftStreamInterleave = LibC::GUID.new(0x27354124_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftWriteSpeedDescriptor = LibC::GUID.new(0x27354123_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftMultisessionSequential = LibC::GUID.new(0x27354122_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])

  CLSID_MsftMultisessionRandomWrite = LibC::GUID.new(0xb507ca24_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])

  CLSID_MsftRawCDImageCreator = LibC::GUID.new(0x25983561_u32, 0x9d65_u16, 0x49ce_u16, StaticArray[0xb3_u8, 0x35_u8, 0x40_u8, 0x63_u8, 0xd_u8, 0x90_u8, 0x12_u8, 0x27_u8])

  CLSID_BootOptions = LibC::GUID.new(0x2c941fce_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_FsiStream = LibC::GUID.new(0x2c941fcd_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_FileSystemImageResult = LibC::GUID.new(0x2c941fcc_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_ProgressItem = LibC::GUID.new(0x2c941fcb_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_EnumProgressItems = LibC::GUID.new(0x2c941fca_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_ProgressItems = LibC::GUID.new(0x2c941fc9_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_FsiDirectoryItem = LibC::GUID.new(0x2c941fc8_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_FsiFileItem = LibC::GUID.new(0x2c941fc7_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_EnumFsiItems = LibC::GUID.new(0x2c941fc6_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_FsiNamedStreams = LibC::GUID.new(0xc6b6f8ed_u32, 0x6d19_u16, 0x44b4_u16, StaticArray[0xb5_u8, 0x39_u8, 0xb1_u8, 0x59_u8, 0xb7_u8, 0x93_u8, 0xa3_u8, 0x2d_u8])

  CLSID_MsftFileSystemImage = LibC::GUID.new(0x2c941fc5_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])

  CLSID_MsftIsoImageManager = LibC::GUID.new(0xceee3b62_u32, 0x8f56_u16, 0x4056_u16, StaticArray[0x86_u8, 0x9b_u8, 0xef_u8, 0x16_u8, 0x91_u8, 0x7e_u8, 0x3e_u8, 0xfc_u8])

  CLSID_BlockRange = LibC::GUID.new(0xb507ca27_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])

  CLSID_BlockRangeList = LibC::GUID.new(0xb507ca28_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])

  CLSID_MSDiscRecorderObj = LibC::GUID.new(0x520cca61_u32, 0x51a5_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])

  CLSID_MSDiscMasterObj = LibC::GUID.new(0x520cca63_u32, 0x51a5_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])

  CLSID_MSEnumDiscRecordersObj = LibC::GUID.new(0x8a03567a_u32, 0x63cb_u16, 0x4ba8_u16, StaticArray[0xba_u8, 0xf6_u8, 0x52_u8, 0x11_u8, 0x98_u8, 0x16_u8, 0xd1_u8, 0xef_u8])

  CLSID_tagIMMPID_MP_STRUCT = LibC::GUID.new(0x13384cf0_u32, 0xb3c4_u16, 0x11d1_u16, StaticArray[0xaa_u8, 0x92_u8, 0x0_u8, 0xaa_u8, 0x0_u8, 0x6b_u8, 0xc8_u8, 0xb_u8])

  CLSID_tagIMMPID_RP_STRUCT = LibC::GUID.new(0x79e82048_u32, 0xd320_u16, 0x11d1_u16, StaticArray[0x9f_u8, 0xf4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x73_u8, 0x48_u8])

  CLSID_tagIMMPID_MPV_STRUCT = LibC::GUID.new(0xcbe69706_u32, 0xc9bd_u16, 0x11d1_u16, StaticArray[0x9f_u8, 0xf2_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x73_u8, 0x48_u8])

  CLSID_tagIMMPID_RPV_STRUCT = LibC::GUID.new(0x79e82049_u32, 0xd320_u16, 0x11d1_u16, StaticArray[0x9f_u8, 0xf4_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x73_u8, 0x48_u8])

  CLSID_tagIMMPID_NMP_STRUCT = LibC::GUID.new(0x7433a9aa_u32, 0x20e2_u16, 0x11d2_u16, StaticArray[0x94_u8, 0xd6_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x79_u8, 0xf1_u8])

  CLSID_tagIMMPID_CPV_STRUCT = LibC::GUID.new(0xa2a76b2a_u32, 0xe52d_u16, 0x11d1_u16, StaticArray[0xaa_u8, 0x64_u8, 0x0_u8, 0xc0_u8, 0x4f_u8, 0xa3_u8, 0x5b_u8, 0x82_u8])

  enum DISC_RECORDER_STATE_FLAGS : UInt32
    RECORDER_BURNING = 2_u32
    RECORDER_DOING_NOTHING = 0_u32
    RECORDER_OPENED = 1_u32
  end
  enum IMAPI_MEDIA_PHYSICAL_TYPE
    IMAPI_MEDIA_TYPE_UNKNOWN = 0_i32
    IMAPI_MEDIA_TYPE_CDROM = 1_i32
    IMAPI_MEDIA_TYPE_CDR = 2_i32
    IMAPI_MEDIA_TYPE_CDRW = 3_i32
    IMAPI_MEDIA_TYPE_DVDROM = 4_i32
    IMAPI_MEDIA_TYPE_DVDRAM = 5_i32
    IMAPI_MEDIA_TYPE_DVDPLUSR = 6_i32
    IMAPI_MEDIA_TYPE_DVDPLUSRW = 7_i32
    IMAPI_MEDIA_TYPE_DVDPLUSR_DUALLAYER = 8_i32
    IMAPI_MEDIA_TYPE_DVDDASHR = 9_i32
    IMAPI_MEDIA_TYPE_DVDDASHRW = 10_i32
    IMAPI_MEDIA_TYPE_DVDDASHR_DUALLAYER = 11_i32
    IMAPI_MEDIA_TYPE_DISK = 12_i32
    IMAPI_MEDIA_TYPE_DVDPLUSRW_DUALLAYER = 13_i32
    IMAPI_MEDIA_TYPE_HDDVDROM = 14_i32
    IMAPI_MEDIA_TYPE_HDDVDR = 15_i32
    IMAPI_MEDIA_TYPE_HDDVDRAM = 16_i32
    IMAPI_MEDIA_TYPE_BDROM = 17_i32
    IMAPI_MEDIA_TYPE_BDR = 18_i32
    IMAPI_MEDIA_TYPE_BDRE = 19_i32
    IMAPI_MEDIA_TYPE_MAX = 19_i32
  end
  enum IMAPI_MEDIA_WRITE_PROTECT_STATE
    IMAPI_WRITEPROTECTED_UNTIL_POWERDOWN = 1_i32
    IMAPI_WRITEPROTECTED_BY_CARTRIDGE = 2_i32
    IMAPI_WRITEPROTECTED_BY_MEDIA_SPECIFIC_REASON = 4_i32
    IMAPI_WRITEPROTECTED_BY_SOFTWARE_WRITE_PROTECT = 8_i32
    IMAPI_WRITEPROTECTED_BY_DISC_CONTROL_BLOCK = 16_i32
    IMAPI_WRITEPROTECTED_READ_ONLY_MEDIA = 16384_i32
  end
  enum IMAPI_READ_TRACK_ADDRESS_TYPE
    IMAPI_READ_TRACK_ADDRESS_TYPE_LBA = 0_i32
    IMAPI_READ_TRACK_ADDRESS_TYPE_TRACK = 1_i32
    IMAPI_READ_TRACK_ADDRESS_TYPE_SESSION = 2_i32
  end
  enum IMAPI_MODE_PAGE_REQUEST_TYPE
    IMAPI_MODE_PAGE_REQUEST_TYPE_CURRENT_VALUES = 0_i32
    IMAPI_MODE_PAGE_REQUEST_TYPE_CHANGEABLE_VALUES = 1_i32
    IMAPI_MODE_PAGE_REQUEST_TYPE_DEFAULT_VALUES = 2_i32
    IMAPI_MODE_PAGE_REQUEST_TYPE_SAVED_VALUES = 3_i32
  end
  enum IMAPI_MODE_PAGE_TYPE
    IMAPI_MODE_PAGE_TYPE_READ_WRITE_ERROR_RECOVERY = 1_i32
    IMAPI_MODE_PAGE_TYPE_MRW = 3_i32
    IMAPI_MODE_PAGE_TYPE_WRITE_PARAMETERS = 5_i32
    IMAPI_MODE_PAGE_TYPE_CACHING = 8_i32
    IMAPI_MODE_PAGE_TYPE_INFORMATIONAL_EXCEPTIONS = 28_i32
    IMAPI_MODE_PAGE_TYPE_TIMEOUT_AND_PROTECT = 29_i32
    IMAPI_MODE_PAGE_TYPE_POWER_CONDITION = 26_i32
    IMAPI_MODE_PAGE_TYPE_LEGACY_CAPABILITIES = 42_i32
  end
  enum IMAPI_FEATURE_PAGE_TYPE
    IMAPI_FEATURE_PAGE_TYPE_PROFILE_LIST = 0_i32
    IMAPI_FEATURE_PAGE_TYPE_CORE = 1_i32
    IMAPI_FEATURE_PAGE_TYPE_MORPHING = 2_i32
    IMAPI_FEATURE_PAGE_TYPE_REMOVABLE_MEDIUM = 3_i32
    IMAPI_FEATURE_PAGE_TYPE_WRITE_PROTECT = 4_i32
    IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_READABLE = 16_i32
    IMAPI_FEATURE_PAGE_TYPE_CD_MULTIREAD = 29_i32
    IMAPI_FEATURE_PAGE_TYPE_CD_READ = 30_i32
    IMAPI_FEATURE_PAGE_TYPE_DVD_READ = 31_i32
    IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_WRITABLE = 32_i32
    IMAPI_FEATURE_PAGE_TYPE_INCREMENTAL_STREAMING_WRITABLE = 33_i32
    IMAPI_FEATURE_PAGE_TYPE_SECTOR_ERASABLE = 34_i32
    IMAPI_FEATURE_PAGE_TYPE_FORMATTABLE = 35_i32
    IMAPI_FEATURE_PAGE_TYPE_HARDWARE_DEFECT_MANAGEMENT = 36_i32
    IMAPI_FEATURE_PAGE_TYPE_WRITE_ONCE = 37_i32
    IMAPI_FEATURE_PAGE_TYPE_RESTRICTED_OVERWRITE = 38_i32
    IMAPI_FEATURE_PAGE_TYPE_CDRW_CAV_WRITE = 39_i32
    IMAPI_FEATURE_PAGE_TYPE_MRW = 40_i32
    IMAPI_FEATURE_PAGE_TYPE_ENHANCED_DEFECT_REPORTING = 41_i32
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_RW = 42_i32
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R = 43_i32
    IMAPI_FEATURE_PAGE_TYPE_RIGID_RESTRICTED_OVERWRITE = 44_i32
    IMAPI_FEATURE_PAGE_TYPE_CD_TRACK_AT_ONCE = 45_i32
    IMAPI_FEATURE_PAGE_TYPE_CD_MASTERING = 46_i32
    IMAPI_FEATURE_PAGE_TYPE_DVD_DASH_WRITE = 47_i32
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_READ = 48_i32
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_R_WRITE = 49_i32
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_RW_WRITE = 50_i32
    IMAPI_FEATURE_PAGE_TYPE_LAYER_JUMP_RECORDING = 51_i32
    IMAPI_FEATURE_PAGE_TYPE_CD_RW_MEDIA_WRITE_SUPPORT = 55_i32
    IMAPI_FEATURE_PAGE_TYPE_BD_PSEUDO_OVERWRITE = 56_i32
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R_DUAL_LAYER = 59_i32
    IMAPI_FEATURE_PAGE_TYPE_BD_READ = 64_i32
    IMAPI_FEATURE_PAGE_TYPE_BD_WRITE = 65_i32
    IMAPI_FEATURE_PAGE_TYPE_HD_DVD_READ = 80_i32
    IMAPI_FEATURE_PAGE_TYPE_HD_DVD_WRITE = 81_i32
    IMAPI_FEATURE_PAGE_TYPE_POWER_MANAGEMENT = 256_i32
    IMAPI_FEATURE_PAGE_TYPE_SMART = 257_i32
    IMAPI_FEATURE_PAGE_TYPE_EMBEDDED_CHANGER = 258_i32
    IMAPI_FEATURE_PAGE_TYPE_CD_ANALOG_PLAY = 259_i32
    IMAPI_FEATURE_PAGE_TYPE_MICROCODE_UPDATE = 260_i32
    IMAPI_FEATURE_PAGE_TYPE_TIMEOUT = 261_i32
    IMAPI_FEATURE_PAGE_TYPE_DVD_CSS = 262_i32
    IMAPI_FEATURE_PAGE_TYPE_REAL_TIME_STREAMING = 263_i32
    IMAPI_FEATURE_PAGE_TYPE_LOGICAL_UNIT_SERIAL_NUMBER = 264_i32
    IMAPI_FEATURE_PAGE_TYPE_MEDIA_SERIAL_NUMBER = 265_i32
    IMAPI_FEATURE_PAGE_TYPE_DISC_CONTROL_BLOCKS = 266_i32
    IMAPI_FEATURE_PAGE_TYPE_DVD_CPRM = 267_i32
    IMAPI_FEATURE_PAGE_TYPE_FIRMWARE_INFORMATION = 268_i32
    IMAPI_FEATURE_PAGE_TYPE_AACS = 269_i32
    IMAPI_FEATURE_PAGE_TYPE_VCPS = 272_i32
  end
  enum IMAPI_PROFILE_TYPE
    IMAPI_PROFILE_TYPE_INVALID = 0_i32
    IMAPI_PROFILE_TYPE_NON_REMOVABLE_DISK = 1_i32
    IMAPI_PROFILE_TYPE_REMOVABLE_DISK = 2_i32
    IMAPI_PROFILE_TYPE_MO_ERASABLE = 3_i32
    IMAPI_PROFILE_TYPE_MO_WRITE_ONCE = 4_i32
    IMAPI_PROFILE_TYPE_AS_MO = 5_i32
    IMAPI_PROFILE_TYPE_CDROM = 8_i32
    IMAPI_PROFILE_TYPE_CD_RECORDABLE = 9_i32
    IMAPI_PROFILE_TYPE_CD_REWRITABLE = 10_i32
    IMAPI_PROFILE_TYPE_DVDROM = 16_i32
    IMAPI_PROFILE_TYPE_DVD_DASH_RECORDABLE = 17_i32
    IMAPI_PROFILE_TYPE_DVD_RAM = 18_i32
    IMAPI_PROFILE_TYPE_DVD_DASH_REWRITABLE = 19_i32
    IMAPI_PROFILE_TYPE_DVD_DASH_RW_SEQUENTIAL = 20_i32
    IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_SEQUENTIAL = 21_i32
    IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_LAYER_JUMP = 22_i32
    IMAPI_PROFILE_TYPE_DVD_PLUS_RW = 26_i32
    IMAPI_PROFILE_TYPE_DVD_PLUS_R = 27_i32
    IMAPI_PROFILE_TYPE_DDCDROM = 32_i32
    IMAPI_PROFILE_TYPE_DDCD_RECORDABLE = 33_i32
    IMAPI_PROFILE_TYPE_DDCD_REWRITABLE = 34_i32
    IMAPI_PROFILE_TYPE_DVD_PLUS_RW_DUAL = 42_i32
    IMAPI_PROFILE_TYPE_DVD_PLUS_R_DUAL = 43_i32
    IMAPI_PROFILE_TYPE_BD_ROM = 64_i32
    IMAPI_PROFILE_TYPE_BD_R_SEQUENTIAL = 65_i32
    IMAPI_PROFILE_TYPE_BD_R_RANDOM_RECORDING = 66_i32
    IMAPI_PROFILE_TYPE_BD_REWRITABLE = 67_i32
    IMAPI_PROFILE_TYPE_HD_DVD_ROM = 80_i32
    IMAPI_PROFILE_TYPE_HD_DVD_RECORDABLE = 81_i32
    IMAPI_PROFILE_TYPE_HD_DVD_RAM = 82_i32
    IMAPI_PROFILE_TYPE_NON_STANDARD = 65535_i32
  end
  enum IMAPI_FORMAT2_DATA_WRITE_ACTION
    IMAPI_FORMAT2_DATA_WRITE_ACTION_VALIDATING_MEDIA = 0_i32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_FORMATTING_MEDIA = 1_i32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_INITIALIZING_HARDWARE = 2_i32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_CALIBRATING_POWER = 3_i32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_WRITING_DATA = 4_i32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_FINALIZATION = 5_i32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_COMPLETED = 6_i32
    IMAPI_FORMAT2_DATA_WRITE_ACTION_VERIFYING = 7_i32
  end
  enum IMAPI_FORMAT2_DATA_MEDIA_STATE
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNKNOWN = 0_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_INFORMATIONAL_MASK = 15_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MASK = 64512_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_OVERWRITE_ONLY = 1_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_RANDOMLY_WRITABLE = 1_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_BLANK = 2_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_APPENDABLE = 4_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_FINAL_SESSION = 8_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_DAMAGED = 1024_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_ERASE_REQUIRED = 2048_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_NON_EMPTY_SESSION = 4096_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_WRITE_PROTECTED = 8192_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_FINALIZED = 16384_i32
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MEDIA = 32768_i32
  end
  enum IMAPI_FORMAT2_TAO_WRITE_ACTION
    IMAPI_FORMAT2_TAO_WRITE_ACTION_UNKNOWN = 0_i32
    IMAPI_FORMAT2_TAO_WRITE_ACTION_PREPARING = 1_i32
    IMAPI_FORMAT2_TAO_WRITE_ACTION_WRITING = 2_i32
    IMAPI_FORMAT2_TAO_WRITE_ACTION_FINISHING = 3_i32
    IMAPI_FORMAT2_TAO_WRITE_ACTION_VERIFYING = 4_i32
  end
  enum IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE
    IMAPI_FORMAT2_RAW_CD_SUBCODE_PQ_ONLY = 1_i32
    IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_COOKED = 2_i32
    IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_RAW = 3_i32
  end
  enum IMAPI_FORMAT2_RAW_CD_WRITE_ACTION
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_UNKNOWN = 0_i32
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_PREPARING = 1_i32
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_WRITING = 2_i32
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_FINISHING = 3_i32
  end
  enum IMAPI_CD_SECTOR_TYPE
    IMAPI_CD_SECTOR_AUDIO = 0_i32
    IMAPI_CD_SECTOR_MODE_ZERO = 1_i32
    IMAPI_CD_SECTOR_MODE1 = 2_i32
    IMAPI_CD_SECTOR_MODE2FORM0 = 3_i32
    IMAPI_CD_SECTOR_MODE2FORM1 = 4_i32
    IMAPI_CD_SECTOR_MODE2FORM2 = 5_i32
    IMAPI_CD_SECTOR_MODE1RAW = 6_i32
    IMAPI_CD_SECTOR_MODE2FORM0RAW = 7_i32
    IMAPI_CD_SECTOR_MODE2FORM1RAW = 8_i32
    IMAPI_CD_SECTOR_MODE2FORM2RAW = 9_i32
  end
  enum IMAPI_CD_TRACK_DIGITAL_COPY_SETTING
    IMAPI_CD_TRACK_DIGITAL_COPY_PERMITTED = 0_i32
    IMAPI_CD_TRACK_DIGITAL_COPY_PROHIBITED = 1_i32
    IMAPI_CD_TRACK_DIGITAL_COPY_SCMS = 2_i32
  end
  enum IMAPI_BURN_VERIFICATION_LEVEL
    IMAPI_BURN_VERIFICATION_NONE = 0_i32
    IMAPI_BURN_VERIFICATION_QUICK = 1_i32
    IMAPI_BURN_VERIFICATION_FULL = 2_i32
  end
  enum FsiItemType
    FsiItemNotFound = 0_i32
    FsiItemDirectory = 1_i32
    FsiItemFile = 2_i32
  end
  enum FsiFileSystems
    FsiFileSystemNone = 0_i32
    FsiFileSystemISO9660 = 1_i32
    FsiFileSystemJoliet = 2_i32
    FsiFileSystemUDF = 4_i32
    FsiFileSystemUnknown = 1073741824_i32
  end
  enum EmulationType
    EmulationNone = 0_i32
    Emulation12MFloppy = 1_i32
    Emulation144MFloppy = 2_i32
    Emulation288MFloppy = 3_i32
    EmulationHardDisk = 4_i32
  end
  enum PlatformId
    PlatformX86 = 0_i32
    PlatformPowerPC = 1_i32
    PlatformMac = 2_i32
    PlatformEFI = 239_i32
  end
  enum MEDIA_TYPES
    MEDIA_CDDA_CDROM = 1_i32
    MEDIA_CD_ROM_XA = 2_i32
    MEDIA_CD_I = 3_i32
    MEDIA_CD_EXTRA = 4_i32
    MEDIA_CD_OTHER = 5_i32
    MEDIA_SPECIAL = 6_i32
  end
  enum MEDIA_FLAGS
    MEDIA_BLANK = 1_i32
    MEDIA_RW = 2_i32
    MEDIA_WRITABLE = 4_i32
    MEDIA_FORMAT_UNUSABLE_BY_IMAPI = 8_i32
  end
  enum RECORDER_TYPES
    RECORDER_CDR = 1_i32
    RECORDER_CDRW = 2_i32
  end
  enum IMMPID_MP_ENUM
    IMMPID_MP_BEFORE__ = 4095_i32
    IMMPID_MP_RECIPIENT_LIST = 4096_i32
    IMMPID_MP_CONTENT_FILE_NAME = 4097_i32
    IMMPID_MP_SENDER_ADDRESS_SMTP = 4098_i32
    IMMPID_MP_SENDER_ADDRESS_X500 = 4099_i32
    IMMPID_MP_SENDER_ADDRESS_X400 = 4100_i32
    IMMPID_MP_SENDER_ADDRESS_LEGACY_EX_DN = 4101_i32
    IMMPID_MP_DOMAIN_LIST = 4102_i32
    IMMPID_MP_PICKUP_FILE_NAME = 4103_i32
    IMMPID_MP_AUTHENTICATED_USER_NAME = 4104_i32
    IMMPID_MP_CONNECTION_IP_ADDRESS = 4105_i32
    IMMPID_MP_HELO_DOMAIN = 4106_i32
    IMMPID_MP_EIGHTBIT_MIME_OPTION = 4107_i32
    IMMPID_MP_CHUNKING_OPTION = 4108_i32
    IMMPID_MP_BINARYMIME_OPTION = 4109_i32
    IMMPID_MP_REMOTE_AUTHENTICATION_TYPE = 4110_i32
    IMMPID_MP_ERROR_CODE = 4111_i32
    IMMPID_MP_DSN_ENVID_VALUE = 4112_i32
    IMMPID_MP_DSN_RET_VALUE = 4113_i32
    IMMPID_MP_REMOTE_SERVER_DSN_CAPABLE = 4114_i32
    IMMPID_MP_ARRIVAL_TIME = 4115_i32
    IMMPID_MP_MESSAGE_STATUS = 4116_i32
    IMMPID_MP_EXPIRE_DELAY = 4117_i32
    IMMPID_MP_EXPIRE_NDR = 4118_i32
    IMMPID_MP_LOCAL_EXPIRE_DELAY = 4119_i32
    IMMPID_MP_LOCAL_EXPIRE_NDR = 4120_i32
    IMMPID_MP_ARRIVAL_FILETIME = 4121_i32
    IMMPID_MP_HR_CAT_STATUS = 4122_i32
    IMMPID_MP_MSG_GUID = 4123_i32
    IMMPID_MP_SUPERSEDES_MSG_GUID = 4124_i32
    IMMPID_MP_SCANNED_FOR_CRLF_DOT_CRLF = 4125_i32
    IMMPID_MP_FOUND_EMBEDDED_CRLF_DOT_CRLF = 4126_i32
    IMMPID_MP_MSG_SIZE_HINT = 4127_i32
    IMMPID_MP_RFC822_MSG_ID = 4128_i32
    IMMPID_MP_RFC822_MSG_SUBJECT = 4129_i32
    IMMPID_MP_RFC822_FROM_ADDRESS = 4130_i32
    IMMPID_MP_RFC822_TO_ADDRESS = 4131_i32
    IMMPID_MP_RFC822_CC_ADDRESS = 4132_i32
    IMMPID_MP_RFC822_BCC_ADDRESS = 4133_i32
    IMMPID_MP_CONNECTION_SERVER_IP_ADDRESS = 4134_i32
    IMMPID_MP_SERVER_NAME = 4135_i32
    IMMPID_MP_SERVER_VERSION = 4136_i32
    IMMPID_MP_NUM_RECIPIENTS = 4137_i32
    IMMPID_MP_X_PRIORITY = 4138_i32
    IMMPID_MP_FROM_ADDRESS = 4139_i32
    IMMPID_MP_SENDER_ADDRESS = 4140_i32
    IMMPID_MP_DEFERRED_DELIVERY_FILETIME = 4141_i32
    IMMPID_MP_SENDER_ADDRESS_OTHER = 4142_i32
    IMMPID_MP_ORIGINAL_ARRIVAL_TIME = 4143_i32
    IMMPID_MP_MSGCLASS = 4144_i32
    IMMPID_MP_CONTENT_TYPE = 4145_i32
    IMMPID_MP_ENCRYPTION_TYPE = 4146_i32
    IMMPID_MP_CONNECTION_SERVER_PORT = 4147_i32
    IMMPID_MP_CLIENT_AUTH_USER = 4148_i32
    IMMPID_MP_CLIENT_AUTH_TYPE = 4149_i32
    IMMPID_MP_CRC_GLOBAL = 4150_i32
    IMMPID_MP_CRC_RECIPS = 4151_i32
    IMMPID_MP_INBOUND_MAIL_FROM_AUTH = 4152_i32
    IMMPID_MP_AFTER__ = 4153_i32
  end
  enum IMMPID_RP_ENUM
    IMMPID_RP_BEFORE__ = 8191_i32
    IMMPID_RP_DSN_NOTIFY_SUCCESS = 8192_i32
    IMMPID_RP_DSN_NOTIFY_INVALID = 8193_i32
    IMMPID_RP_ADDRESS_TYPE = 8194_i32
    IMMPID_RP_ADDRESS = 8195_i32
    IMMPID_RP_ADDRESS_TYPE_SMTP = 8196_i32
    IMMPID_RP_ERROR_CODE = 8197_i32
    IMMPID_RP_ERROR_STRING = 8198_i32
    IMMPID_RP_DSN_NOTIFY_VALUE = 8199_i32
    IMMPID_RP_DSN_ORCPT_VALUE = 8200_i32
    IMMPID_RP_ADDRESS_SMTP = 8201_i32
    IMMPID_RP_ADDRESS_X400 = 8202_i32
    IMMPID_RP_ADDRESS_X500 = 8203_i32
    IMMPID_RP_LEGACY_EX_DN = 8204_i32
    IMMPID_RP_RECIPIENT_FLAGS = 8205_i32
    IMMPID_RP_SMTP_STATUS_STRING = 8206_i32
    IMMPID_RP_DSN_PRE_CAT_ADDRESS = 8207_i32
    IMMPID_RP_MDB_GUID = 8208_i32
    IMMPID_RP_USER_GUID = 8209_i32
    IMMPID_RP_DOMAIN = 8210_i32
    IMMPID_RP_ADDRESS_OTHER = 8211_i32
    IMMPID_RP_DISPLAY_NAME = 8212_i32
    IMMPID_RP_AFTER__ = 8213_i32
  end
  enum IMMPID_MPV_ENUM
    IMMPID_MPV_BEFORE__ = 12287_i32
    IMMPID_MPV_STORE_DRIVER_HANDLE = 12288_i32
    IMMPID_MPV_MESSAGE_CREATION_FLAGS = 12289_i32
    IMMPID_MPV_MESSAGE_OPEN_HANDLES = 12290_i32
    IMMPID_MPV_TOTAL_OPEN_HANDLES = 12291_i32
    IMMPID_MPV_TOTAL_OPEN_PROPERTY_STREAM_HANDLES = 12292_i32
    IMMPID_MPV_TOTAL_OPEN_CONTENT_HANDLES = 12293_i32
    IMMPID_MPV_AFTER__ = 12294_i32
  end
  enum IMMPID_RPV_ENUM
    IMMPID_RPV_BEFORE__ = 16383_i32
    IMMPID_RPV_DONT_DELIVER = 16384_i32
    IMMPID_RPV_NO_NAME_COLLISIONS = 16385_i32
    IMMPID_RPV_AFTER__ = 16386_i32
  end
  enum IMMPID_NMP_ENUM
    IMMPID_NMP_BEFORE__ = 24575_i32
    IMMPID_NMP_SECONDARY_GROUPS = 24576_i32
    IMMPID_NMP_SECONDARY_ARTNUM = 24577_i32
    IMMPID_NMP_PRIMARY_GROUP = 24578_i32
    IMMPID_NMP_PRIMARY_ARTID = 24579_i32
    IMMPID_NMP_POST_TOKEN = 24580_i32
    IMMPID_NMP_NEWSGROUP_LIST = 24581_i32
    IMMPID_NMP_HEADERS = 24582_i32
    IMMPID_NMP_NNTP_PROCESSING = 24583_i32
    IMMPID_NMP_NNTP_APPROVED_HEADER = 24584_i32
    IMMPID_NMP_AFTER__ = 24585_i32
  end
  enum IMMPID_CPV_ENUM
    IMMPID_CPV_BEFORE__ = 32767_i32
    IMMPID_CP_START = 32768_i32
    IMMPID_CPV_AFTER__ = 32769_i32
  end

  @[Extern]
  struct MSGSESS_
    def initialize()
    end
  end

  @[Extern]
  struct SPropAttrArray
    property cValues : UInt32
    property aPropAttr : UInt32*
    def initialize(@cValues : UInt32, @aPropAttr : UInt32*)
    end
  end

  @[Extern]
  struct IMMP_MPV_STORE_DRIVER_HANDLE
    property guidSignature : LibC::GUID
    def initialize(@guidSignature : LibC::GUID)
    end
  end

  @[Extern]
  struct IMMPID_GUIDLIST_ITEM
    property pguid : LibC::GUID*
    property dwStart : UInt32
    property dwLast : UInt32
    def initialize(@pguid : LibC::GUID*, @dwStart : UInt32, @dwLast : UInt32)
    end
  end

  @[Extern]
  record IDiscMaster2Vtbl,
    query_interface : Proc(IDiscMaster2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscMaster2*, UInt32),
    release : Proc(IDiscMaster2*, UInt32),
    get_type_info_count : Proc(IDiscMaster2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscMaster2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscMaster2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscMaster2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IDiscMaster2*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IDiscMaster2*, Int32, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IDiscMaster2*, Int32*, Win32cr::Foundation::HRESULT),
    get_IsSupportedEnvironment : Proc(IDiscMaster2*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscMaster2, lpVtbl : IDiscMaster2Vtbl* do
    GUID = LibC::GUID.new(0x27354130_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscMaster2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscMaster2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscMaster2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscMaster2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscMaster2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscMaster2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscMaster2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get__NewEnum(this : IDiscMaster2*, ppunk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, ppunk)
    end
    def get_Item(this : IDiscMaster2*, index : Int32, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, value)
    end
    def get_Count(this : IDiscMaster2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, value)
    end
    def get_IsSupportedEnvironment(this : IDiscMaster2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSupportedEnvironment.call(this, value)
    end

  end

  @[Extern]
  record DDiscMaster2EventsVtbl,
    query_interface : Proc(DDiscMaster2Events*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DDiscMaster2Events*, UInt32),
    release : Proc(DDiscMaster2Events*, UInt32),
    get_type_info_count : Proc(DDiscMaster2Events*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DDiscMaster2Events*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DDiscMaster2Events*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DDiscMaster2Events*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    notify_device_added : Proc(DDiscMaster2Events*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    notify_device_removed : Proc(DDiscMaster2Events*, Void*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DDiscMaster2Events, lpVtbl : DDiscMaster2EventsVtbl* do
    GUID = LibC::GUID.new(0x27354131_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : DDiscMaster2Events*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DDiscMaster2Events*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DDiscMaster2Events*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DDiscMaster2Events*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DDiscMaster2Events*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DDiscMaster2Events*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DDiscMaster2Events*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def notify_device_added(this : DDiscMaster2Events*, object : Void*, uniqueId : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_device_added.call(this, object, uniqueId)
    end
    def notify_device_removed(this : DDiscMaster2Events*, object : Void*, uniqueId : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_device_removed.call(this, object, uniqueId)
    end

  end

  @[Extern]
  record IDiscRecorder2ExVtbl,
    query_interface : Proc(IDiscRecorder2Ex*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscRecorder2Ex*, UInt32),
    release : Proc(IDiscRecorder2Ex*, UInt32),
    send_command_no_data : Proc(IDiscRecorder2Ex*, UInt8*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    send_command_send_data_to_device : Proc(IDiscRecorder2Ex*, UInt8*, UInt32, UInt8*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    send_command_get_data_from_device : Proc(IDiscRecorder2Ex*, UInt8*, UInt32, UInt8*, UInt32, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    read_dvd_structure : Proc(IDiscRecorder2Ex*, UInt32, UInt32, UInt32, UInt32, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    send_dvd_structure : Proc(IDiscRecorder2Ex*, UInt32, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_adapter_descriptor : Proc(IDiscRecorder2Ex*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_device_descriptor : Proc(IDiscRecorder2Ex*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_disc_information : Proc(IDiscRecorder2Ex*, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_track_information : Proc(IDiscRecorder2Ex*, UInt32, Win32cr::Storage::Imapi::IMAPI_READ_TRACK_ADDRESS_TYPE, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_feature_page : Proc(IDiscRecorder2Ex*, Win32cr::Storage::Imapi::IMAPI_FEATURE_PAGE_TYPE, Win32cr::Foundation::BOOLEAN, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    get_mode_page : Proc(IDiscRecorder2Ex*, Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_TYPE, Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_REQUEST_TYPE, UInt8**, UInt32*, Win32cr::Foundation::HRESULT),
    set_mode_page : Proc(IDiscRecorder2Ex*, Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_REQUEST_TYPE, UInt8*, UInt32, Win32cr::Foundation::HRESULT),
    get_supported_feature_pages : Proc(IDiscRecorder2Ex*, Win32cr::Foundation::BOOLEAN, Win32cr::Storage::Imapi::IMAPI_FEATURE_PAGE_TYPE**, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_profiles : Proc(IDiscRecorder2Ex*, Win32cr::Foundation::BOOLEAN, Win32cr::Storage::Imapi::IMAPI_PROFILE_TYPE**, UInt32*, Win32cr::Foundation::HRESULT),
    get_supported_mode_pages : Proc(IDiscRecorder2Ex*, Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_REQUEST_TYPE, Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_TYPE**, UInt32*, Win32cr::Foundation::HRESULT),
    get_byte_alignment_mask : Proc(IDiscRecorder2Ex*, UInt32*, Win32cr::Foundation::HRESULT),
    get_maximum_non_page_aligned_transfer_size : Proc(IDiscRecorder2Ex*, UInt32*, Win32cr::Foundation::HRESULT),
    get_maximum_page_aligned_transfer_size : Proc(IDiscRecorder2Ex*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscRecorder2Ex, lpVtbl : IDiscRecorder2ExVtbl* do
    GUID = LibC::GUID.new(0x27354132_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscRecorder2Ex*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscRecorder2Ex*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscRecorder2Ex*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def send_command_no_data(this : IDiscRecorder2Ex*, cdb : UInt8*, cdb_size : UInt32, sense_buffer : UInt8*, timeout : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_command_no_data.call(this, cdb, cdb_size, sense_buffer, timeout)
    end
    def send_command_send_data_to_device(this : IDiscRecorder2Ex*, cdb : UInt8*, cdb_size : UInt32, sense_buffer : UInt8*, timeout : UInt32, buffer : UInt8*, buffer_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_command_send_data_to_device.call(this, cdb, cdb_size, sense_buffer, timeout, buffer, buffer_size)
    end
    def send_command_get_data_from_device(this : IDiscRecorder2Ex*, cdb : UInt8*, cdb_size : UInt32, sense_buffer : UInt8*, timeout : UInt32, buffer : UInt8*, buffer_size : UInt32, buffer_fetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_command_get_data_from_device.call(this, cdb, cdb_size, sense_buffer, timeout, buffer, buffer_size, buffer_fetched)
    end
    def read_dvd_structure(this : IDiscRecorder2Ex*, format : UInt32, address : UInt32, layer : UInt32, agid : UInt32, data : UInt8**, count : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_dvd_structure.call(this, format, address, layer, agid, data, count)
    end
    def send_dvd_structure(this : IDiscRecorder2Ex*, format : UInt32, data : UInt8*, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.send_dvd_structure.call(this, format, data, count)
    end
    def get_adapter_descriptor(this : IDiscRecorder2Ex*, data : UInt8**, byteSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_adapter_descriptor.call(this, data, byteSize)
    end
    def get_device_descriptor(this : IDiscRecorder2Ex*, data : UInt8**, byteSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_descriptor.call(this, data, byteSize)
    end
    def get_disc_information(this : IDiscRecorder2Ex*, discInformation : UInt8**, byteSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_disc_information.call(this, discInformation, byteSize)
    end
    def get_track_information(this : IDiscRecorder2Ex*, address : UInt32, addressType : Win32cr::Storage::Imapi::IMAPI_READ_TRACK_ADDRESS_TYPE, trackInformation : UInt8**, byteSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_track_information.call(this, address, addressType, trackInformation, byteSize)
    end
    def get_feature_page(this : IDiscRecorder2Ex*, requestedFeature : Win32cr::Storage::Imapi::IMAPI_FEATURE_PAGE_TYPE, currentFeatureOnly : Win32cr::Foundation::BOOLEAN, featureData : UInt8**, byteSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_feature_page.call(this, requestedFeature, currentFeatureOnly, featureData, byteSize)
    end
    def get_mode_page(this : IDiscRecorder2Ex*, requestedModePage : Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_TYPE, requestType : Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_REQUEST_TYPE, modePageData : UInt8**, byteSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mode_page.call(this, requestedModePage, requestType, modePageData, byteSize)
    end
    def set_mode_page(this : IDiscRecorder2Ex*, requestType : Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_REQUEST_TYPE, data : UInt8*, byteSize : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_mode_page.call(this, requestType, data, byteSize)
    end
    def get_supported_feature_pages(this : IDiscRecorder2Ex*, currentFeatureOnly : Win32cr::Foundation::BOOLEAN, featureData : Win32cr::Storage::Imapi::IMAPI_FEATURE_PAGE_TYPE**, byteSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_feature_pages.call(this, currentFeatureOnly, featureData, byteSize)
    end
    def get_supported_profiles(this : IDiscRecorder2Ex*, currentOnly : Win32cr::Foundation::BOOLEAN, profileTypes : Win32cr::Storage::Imapi::IMAPI_PROFILE_TYPE**, validProfiles : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_profiles.call(this, currentOnly, profileTypes, validProfiles)
    end
    def get_supported_mode_pages(this : IDiscRecorder2Ex*, requestType : Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_REQUEST_TYPE, modePageTypes : Win32cr::Storage::Imapi::IMAPI_MODE_PAGE_TYPE**, validPages : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_supported_mode_pages.call(this, requestType, modePageTypes, validPages)
    end
    def get_byte_alignment_mask(this : IDiscRecorder2Ex*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_byte_alignment_mask.call(this, value)
    end
    def get_maximum_non_page_aligned_transfer_size(this : IDiscRecorder2Ex*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maximum_non_page_aligned_transfer_size.call(this, value)
    end
    def get_maximum_page_aligned_transfer_size(this : IDiscRecorder2Ex*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_maximum_page_aligned_transfer_size.call(this, value)
    end

  end

  @[Extern]
  record IDiscRecorder2Vtbl,
    query_interface : Proc(IDiscRecorder2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscRecorder2*, UInt32),
    release : Proc(IDiscRecorder2*, UInt32),
    get_type_info_count : Proc(IDiscRecorder2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscRecorder2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscRecorder2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscRecorder2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    eject_media : Proc(IDiscRecorder2*, Win32cr::Foundation::HRESULT),
    close_tray : Proc(IDiscRecorder2*, Win32cr::Foundation::HRESULT),
    acquire_exclusive_access : Proc(IDiscRecorder2*, Int16, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    release_exclusive_access : Proc(IDiscRecorder2*, Win32cr::Foundation::HRESULT),
    disable_mcn : Proc(IDiscRecorder2*, Win32cr::Foundation::HRESULT),
    enable_mcn : Proc(IDiscRecorder2*, Win32cr::Foundation::HRESULT),
    initialize_disc_recorder : Proc(IDiscRecorder2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ActiveDiscRecorder : Proc(IDiscRecorder2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VendorId : Proc(IDiscRecorder2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ProductId : Proc(IDiscRecorder2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ProductRevision : Proc(IDiscRecorder2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumeName : Proc(IDiscRecorder2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumePathNames : Proc(IDiscRecorder2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_DeviceCanLoadMedia : Proc(IDiscRecorder2*, Int16*, Win32cr::Foundation::HRESULT),
    get_LegacyDeviceNumber : Proc(IDiscRecorder2*, Int32*, Win32cr::Foundation::HRESULT),
    get_SupportedFeaturePages : Proc(IDiscRecorder2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_CurrentFeaturePages : Proc(IDiscRecorder2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_SupportedProfiles : Proc(IDiscRecorder2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_CurrentProfiles : Proc(IDiscRecorder2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_SupportedModePages : Proc(IDiscRecorder2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_ExclusiveAccessOwner : Proc(IDiscRecorder2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscRecorder2, lpVtbl : IDiscRecorder2Vtbl* do
    GUID = LibC::GUID.new(0x27354133_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscRecorder2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscRecorder2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscRecorder2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscRecorder2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscRecorder2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscRecorder2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscRecorder2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def eject_media(this : IDiscRecorder2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.eject_media.call(this)
    end
    def close_tray(this : IDiscRecorder2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_tray.call(this)
    end
    def acquire_exclusive_access(this : IDiscRecorder2*, force : Int16, __midl__i_disc_recorder20000 : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.acquire_exclusive_access.call(this, force, __midl__i_disc_recorder20000)
    end
    def release_exclusive_access(this : IDiscRecorder2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_exclusive_access.call(this)
    end
    def disable_mcn(this : IDiscRecorder2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.disable_mcn.call(this)
    end
    def enable_mcn(this : IDiscRecorder2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enable_mcn.call(this)
    end
    def initialize_disc_recorder(this : IDiscRecorder2*, recorderUniqueId : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize_disc_recorder.call(this, recorderUniqueId)
    end
    def get_ActiveDiscRecorder(this : IDiscRecorder2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ActiveDiscRecorder.call(this, value)
    end
    def get_VendorId(this : IDiscRecorder2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VendorId.call(this, value)
    end
    def get_ProductId(this : IDiscRecorder2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductId.call(this, value)
    end
    def get_ProductRevision(this : IDiscRecorder2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProductRevision.call(this, value)
    end
    def get_VolumeName(this : IDiscRecorder2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeName.call(this, value)
    end
    def get_VolumePathNames(this : IDiscRecorder2*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumePathNames.call(this, value)
    end
    def get_DeviceCanLoadMedia(this : IDiscRecorder2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DeviceCanLoadMedia.call(this, value)
    end
    def get_LegacyDeviceNumber(this : IDiscRecorder2*, legacyDeviceNumber : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LegacyDeviceNumber.call(this, legacyDeviceNumber)
    end
    def get_SupportedFeaturePages(this : IDiscRecorder2*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedFeaturePages.call(this, value)
    end
    def get_CurrentFeaturePages(this : IDiscRecorder2*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentFeaturePages.call(this, value)
    end
    def get_SupportedProfiles(this : IDiscRecorder2*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedProfiles.call(this, value)
    end
    def get_CurrentProfiles(this : IDiscRecorder2*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentProfiles.call(this, value)
    end
    def get_SupportedModePages(this : IDiscRecorder2*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedModePages.call(this, value)
    end
    def get_ExclusiveAccessOwner(this : IDiscRecorder2*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExclusiveAccessOwner.call(this, value)
    end

  end

  @[Extern]
  record IWriteEngine2Vtbl,
    query_interface : Proc(IWriteEngine2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWriteEngine2*, UInt32),
    release : Proc(IWriteEngine2*, UInt32),
    get_type_info_count : Proc(IWriteEngine2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWriteEngine2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWriteEngine2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWriteEngine2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    write_section : Proc(IWriteEngine2*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT),
    cancel_write : Proc(IWriteEngine2*, Win32cr::Foundation::HRESULT),
    put_Recorder : Proc(IWriteEngine2*, Void*, Win32cr::Foundation::HRESULT),
    get_Recorder : Proc(IWriteEngine2*, Void**, Win32cr::Foundation::HRESULT),
    put_UseStreamingWrite12 : Proc(IWriteEngine2*, Int16, Win32cr::Foundation::HRESULT),
    get_UseStreamingWrite12 : Proc(IWriteEngine2*, Int16*, Win32cr::Foundation::HRESULT),
    put_StartingSectorsPerSecond : Proc(IWriteEngine2*, Int32, Win32cr::Foundation::HRESULT),
    get_StartingSectorsPerSecond : Proc(IWriteEngine2*, Int32*, Win32cr::Foundation::HRESULT),
    put_EndingSectorsPerSecond : Proc(IWriteEngine2*, Int32, Win32cr::Foundation::HRESULT),
    get_EndingSectorsPerSecond : Proc(IWriteEngine2*, Int32*, Win32cr::Foundation::HRESULT),
    put_BytesPerSector : Proc(IWriteEngine2*, Int32, Win32cr::Foundation::HRESULT),
    get_BytesPerSector : Proc(IWriteEngine2*, Int32*, Win32cr::Foundation::HRESULT),
    get_WriteInProgress : Proc(IWriteEngine2*, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWriteEngine2, lpVtbl : IWriteEngine2Vtbl* do
    GUID = LibC::GUID.new(0x27354135_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IWriteEngine2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWriteEngine2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWriteEngine2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWriteEngine2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWriteEngine2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWriteEngine2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWriteEngine2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def write_section(this : IWriteEngine2*, data : Void*, startingBlockAddress : Int32, numberOfBlocks : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_section.call(this, data, startingBlockAddress, numberOfBlocks)
    end
    def cancel_write(this : IWriteEngine2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_write.call(this)
    end
    def put_Recorder(this : IWriteEngine2*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Recorder.call(this, value)
    end
    def get_Recorder(this : IWriteEngine2*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Recorder.call(this, value)
    end
    def put_UseStreamingWrite12(this : IWriteEngine2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseStreamingWrite12.call(this, value)
    end
    def get_UseStreamingWrite12(this : IWriteEngine2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseStreamingWrite12.call(this, value)
    end
    def put_StartingSectorsPerSecond(this : IWriteEngine2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartingSectorsPerSecond.call(this, value)
    end
    def get_StartingSectorsPerSecond(this : IWriteEngine2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartingSectorsPerSecond.call(this, value)
    end
    def put_EndingSectorsPerSecond(this : IWriteEngine2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_EndingSectorsPerSecond.call(this, value)
    end
    def get_EndingSectorsPerSecond(this : IWriteEngine2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EndingSectorsPerSecond.call(this, value)
    end
    def put_BytesPerSector(this : IWriteEngine2*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BytesPerSector.call(this, value)
    end
    def get_BytesPerSector(this : IWriteEngine2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BytesPerSector.call(this, value)
    end
    def get_WriteInProgress(this : IWriteEngine2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteInProgress.call(this, value)
    end

  end

  @[Extern]
  record IWriteEngine2EventArgsVtbl,
    query_interface : Proc(IWriteEngine2EventArgs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWriteEngine2EventArgs*, UInt32),
    release : Proc(IWriteEngine2EventArgs*, UInt32),
    get_type_info_count : Proc(IWriteEngine2EventArgs*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWriteEngine2EventArgs*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWriteEngine2EventArgs*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWriteEngine2EventArgs*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StartLba : Proc(IWriteEngine2EventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_SectorCount : Proc(IWriteEngine2EventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastReadLba : Proc(IWriteEngine2EventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenLba : Proc(IWriteEngine2EventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalSystemBuffer : Proc(IWriteEngine2EventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_UsedSystemBuffer : Proc(IWriteEngine2EventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSystemBuffer : Proc(IWriteEngine2EventArgs*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWriteEngine2EventArgs, lpVtbl : IWriteEngine2EventArgsVtbl* do
    GUID = LibC::GUID.new(0x27354136_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IWriteEngine2EventArgs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWriteEngine2EventArgs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWriteEngine2EventArgs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWriteEngine2EventArgs*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWriteEngine2EventArgs*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWriteEngine2EventArgs*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWriteEngine2EventArgs*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StartLba(this : IWriteEngine2EventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartLba.call(this, value)
    end
    def get_SectorCount(this : IWriteEngine2EventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SectorCount.call(this, value)
    end
    def get_LastReadLba(this : IWriteEngine2EventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastReadLba.call(this, value)
    end
    def get_LastWrittenLba(this : IWriteEngine2EventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenLba.call(this, value)
    end
    def get_TotalSystemBuffer(this : IWriteEngine2EventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalSystemBuffer.call(this, value)
    end
    def get_UsedSystemBuffer(this : IWriteEngine2EventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedSystemBuffer.call(this, value)
    end
    def get_FreeSystemBuffer(this : IWriteEngine2EventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSystemBuffer.call(this, value)
    end

  end

  @[Extern]
  record DWriteEngine2EventsVtbl,
    query_interface : Proc(DWriteEngine2Events*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DWriteEngine2Events*, UInt32),
    release : Proc(DWriteEngine2Events*, UInt32),
    get_type_info_count : Proc(DWriteEngine2Events*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DWriteEngine2Events*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DWriteEngine2Events*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DWriteEngine2Events*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    update : Proc(DWriteEngine2Events*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DWriteEngine2Events, lpVtbl : DWriteEngine2EventsVtbl* do
    GUID = LibC::GUID.new(0x27354137_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : DWriteEngine2Events*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DWriteEngine2Events*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DWriteEngine2Events*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DWriteEngine2Events*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DWriteEngine2Events*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DWriteEngine2Events*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DWriteEngine2Events*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def update(this : DWriteEngine2Events*, object : Void*, progress : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, object, progress)
    end

  end

  @[Extern]
  record IDiscFormat2Vtbl,
    query_interface : Proc(IDiscFormat2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2*, UInt32),
    release : Proc(IDiscFormat2*, UInt32),
    get_type_info_count : Proc(IDiscFormat2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_recorder_supported : Proc(IDiscFormat2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_current_media_supported : Proc(IDiscFormat2*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaPhysicallyBlank : Proc(IDiscFormat2*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaHeuristicallyBlank : Proc(IDiscFormat2*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedMediaTypes : Proc(IDiscFormat2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2, lpVtbl : IDiscFormat2Vtbl* do
    GUID = LibC::GUID.new(0x27354152_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_recorder_supported(this : IDiscFormat2*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_recorder_supported.call(this, recorder, value)
    end
    def is_current_media_supported(this : IDiscFormat2*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_current_media_supported.call(this, recorder, value)
    end
    def get_MediaPhysicallyBlank(this : IDiscFormat2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaPhysicallyBlank.call(this, value)
    end
    def get_MediaHeuristicallyBlank(this : IDiscFormat2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaHeuristicallyBlank.call(this, value)
    end
    def get_SupportedMediaTypes(this : IDiscFormat2*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedMediaTypes.call(this, value)
    end

  end

  @[Extern]
  record IDiscFormat2EraseVtbl,
    query_interface : Proc(IDiscFormat2Erase*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2Erase*, UInt32),
    release : Proc(IDiscFormat2Erase*, UInt32),
    get_type_info_count : Proc(IDiscFormat2Erase*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2Erase*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2Erase*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2Erase*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_recorder_supported : Proc(IDiscFormat2Erase*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_current_media_supported : Proc(IDiscFormat2Erase*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaPhysicallyBlank : Proc(IDiscFormat2Erase*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaHeuristicallyBlank : Proc(IDiscFormat2Erase*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedMediaTypes : Proc(IDiscFormat2Erase*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_Recorder : Proc(IDiscFormat2Erase*, Void*, Win32cr::Foundation::HRESULT),
    get_Recorder : Proc(IDiscFormat2Erase*, Void**, Win32cr::Foundation::HRESULT),
    put_FullErase : Proc(IDiscFormat2Erase*, Int16, Win32cr::Foundation::HRESULT),
    get_FullErase : Proc(IDiscFormat2Erase*, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentPhysicalMediaType : Proc(IDiscFormat2Erase*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*, Win32cr::Foundation::HRESULT),
    put_ClientName : Proc(IDiscFormat2Erase*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientName : Proc(IDiscFormat2Erase*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    erase_media : Proc(IDiscFormat2Erase*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2Erase, lpVtbl : IDiscFormat2EraseVtbl* do
    GUID = LibC::GUID.new(0x27354156_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2Erase*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2Erase*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2Erase*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2Erase*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2Erase*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2Erase*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2Erase*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_recorder_supported(this : IDiscFormat2Erase*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_recorder_supported.call(this, recorder, value)
    end
    def is_current_media_supported(this : IDiscFormat2Erase*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_current_media_supported.call(this, recorder, value)
    end
    def get_MediaPhysicallyBlank(this : IDiscFormat2Erase*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaPhysicallyBlank.call(this, value)
    end
    def get_MediaHeuristicallyBlank(this : IDiscFormat2Erase*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaHeuristicallyBlank.call(this, value)
    end
    def get_SupportedMediaTypes(this : IDiscFormat2Erase*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedMediaTypes.call(this, value)
    end
    def put_Recorder(this : IDiscFormat2Erase*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Recorder.call(this, value)
    end
    def get_Recorder(this : IDiscFormat2Erase*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Recorder.call(this, value)
    end
    def put_FullErase(this : IDiscFormat2Erase*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FullErase.call(this, value)
    end
    def get_FullErase(this : IDiscFormat2Erase*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullErase.call(this, value)
    end
    def get_CurrentPhysicalMediaType(this : IDiscFormat2Erase*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPhysicalMediaType.call(this, value)
    end
    def put_ClientName(this : IDiscFormat2Erase*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientName.call(this, value)
    end
    def get_ClientName(this : IDiscFormat2Erase*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientName.call(this, value)
    end
    def erase_media(this : IDiscFormat2Erase*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.erase_media.call(this)
    end

  end

  @[Extern]
  record DDiscFormat2EraseEventsVtbl,
    query_interface : Proc(DDiscFormat2EraseEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DDiscFormat2EraseEvents*, UInt32),
    release : Proc(DDiscFormat2EraseEvents*, UInt32),
    get_type_info_count : Proc(DDiscFormat2EraseEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DDiscFormat2EraseEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DDiscFormat2EraseEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DDiscFormat2EraseEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    update : Proc(DDiscFormat2EraseEvents*, Void*, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DDiscFormat2EraseEvents, lpVtbl : DDiscFormat2EraseEventsVtbl* do
    GUID = LibC::GUID.new(0x2735413a_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : DDiscFormat2EraseEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DDiscFormat2EraseEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DDiscFormat2EraseEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DDiscFormat2EraseEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DDiscFormat2EraseEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DDiscFormat2EraseEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DDiscFormat2EraseEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def update(this : DDiscFormat2EraseEvents*, object : Void*, elapsedSeconds : Int32, estimatedTotalSeconds : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, object, elapsedSeconds, estimatedTotalSeconds)
    end

  end

  @[Extern]
  record IDiscFormat2DataVtbl,
    query_interface : Proc(IDiscFormat2Data*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2Data*, UInt32),
    release : Proc(IDiscFormat2Data*, UInt32),
    get_type_info_count : Proc(IDiscFormat2Data*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2Data*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2Data*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2Data*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_recorder_supported : Proc(IDiscFormat2Data*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_current_media_supported : Proc(IDiscFormat2Data*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaPhysicallyBlank : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaHeuristicallyBlank : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedMediaTypes : Proc(IDiscFormat2Data*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_Recorder : Proc(IDiscFormat2Data*, Void*, Win32cr::Foundation::HRESULT),
    get_Recorder : Proc(IDiscFormat2Data*, Void**, Win32cr::Foundation::HRESULT),
    put_BufferUnderrunFreeDisabled : Proc(IDiscFormat2Data*, Int16, Win32cr::Foundation::HRESULT),
    get_BufferUnderrunFreeDisabled : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    put_PostgapAlreadyInImage : Proc(IDiscFormat2Data*, Int16, Win32cr::Foundation::HRESULT),
    get_PostgapAlreadyInImage : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentMediaStatus : Proc(IDiscFormat2Data*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_DATA_MEDIA_STATE*, Win32cr::Foundation::HRESULT),
    get_WriteProtectStatus : Proc(IDiscFormat2Data*, Win32cr::Storage::Imapi::IMAPI_MEDIA_WRITE_PROTECT_STATE*, Win32cr::Foundation::HRESULT),
    get_TotalSectorsOnMedia : Proc(IDiscFormat2Data*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSectorsOnMedia : Proc(IDiscFormat2Data*, Int32*, Win32cr::Foundation::HRESULT),
    get_NextWritableAddress : Proc(IDiscFormat2Data*, Int32*, Win32cr::Foundation::HRESULT),
    get_StartAddressOfPreviousSession : Proc(IDiscFormat2Data*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenAddressOfPreviousSession : Proc(IDiscFormat2Data*, Int32*, Win32cr::Foundation::HRESULT),
    put_ForceMediaToBeClosed : Proc(IDiscFormat2Data*, Int16, Win32cr::Foundation::HRESULT),
    get_ForceMediaToBeClosed : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    put_DisableConsumerDvdCompatibilityMode : Proc(IDiscFormat2Data*, Int16, Win32cr::Foundation::HRESULT),
    get_DisableConsumerDvdCompatibilityMode : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentPhysicalMediaType : Proc(IDiscFormat2Data*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*, Win32cr::Foundation::HRESULT),
    put_ClientName : Proc(IDiscFormat2Data*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientName : Proc(IDiscFormat2Data*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_RequestedWriteSpeed : Proc(IDiscFormat2Data*, Int32*, Win32cr::Foundation::HRESULT),
    get_RequestedRotationTypeIsPureCAV : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentWriteSpeed : Proc(IDiscFormat2Data*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentRotationTypeIsPureCAV : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedWriteSpeeds : Proc(IDiscFormat2Data*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_SupportedWriteSpeedDescriptors : Proc(IDiscFormat2Data*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_ForceOverwrite : Proc(IDiscFormat2Data*, Int16, Win32cr::Foundation::HRESULT),
    get_ForceOverwrite : Proc(IDiscFormat2Data*, Int16*, Win32cr::Foundation::HRESULT),
    get_MultisessionInterfaces : Proc(IDiscFormat2Data*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    write : Proc(IDiscFormat2Data*, Void*, Win32cr::Foundation::HRESULT),
    cancel_write : Proc(IDiscFormat2Data*, Win32cr::Foundation::HRESULT),
    set_write_speed : Proc(IDiscFormat2Data*, Int32, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2Data, lpVtbl : IDiscFormat2DataVtbl* do
    GUID = LibC::GUID.new(0x27354153_u32, 0x9f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2Data*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2Data*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2Data*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2Data*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2Data*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2Data*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2Data*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_recorder_supported(this : IDiscFormat2Data*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_recorder_supported.call(this, recorder, value)
    end
    def is_current_media_supported(this : IDiscFormat2Data*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_current_media_supported.call(this, recorder, value)
    end
    def get_MediaPhysicallyBlank(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaPhysicallyBlank.call(this, value)
    end
    def get_MediaHeuristicallyBlank(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaHeuristicallyBlank.call(this, value)
    end
    def get_SupportedMediaTypes(this : IDiscFormat2Data*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedMediaTypes.call(this, value)
    end
    def put_Recorder(this : IDiscFormat2Data*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Recorder.call(this, value)
    end
    def get_Recorder(this : IDiscFormat2Data*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Recorder.call(this, value)
    end
    def put_BufferUnderrunFreeDisabled(this : IDiscFormat2Data*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BufferUnderrunFreeDisabled.call(this, value)
    end
    def get_BufferUnderrunFreeDisabled(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BufferUnderrunFreeDisabled.call(this, value)
    end
    def put_PostgapAlreadyInImage(this : IDiscFormat2Data*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PostgapAlreadyInImage.call(this, value)
    end
    def get_PostgapAlreadyInImage(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PostgapAlreadyInImage.call(this, value)
    end
    def get_CurrentMediaStatus(this : IDiscFormat2Data*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_DATA_MEDIA_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentMediaStatus.call(this, value)
    end
    def get_WriteProtectStatus(this : IDiscFormat2Data*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_WRITE_PROTECT_STATE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteProtectStatus.call(this, value)
    end
    def get_TotalSectorsOnMedia(this : IDiscFormat2Data*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalSectorsOnMedia.call(this, value)
    end
    def get_FreeSectorsOnMedia(this : IDiscFormat2Data*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSectorsOnMedia.call(this, value)
    end
    def get_NextWritableAddress(this : IDiscFormat2Data*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NextWritableAddress.call(this, value)
    end
    def get_StartAddressOfPreviousSession(this : IDiscFormat2Data*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartAddressOfPreviousSession.call(this, value)
    end
    def get_LastWrittenAddressOfPreviousSession(this : IDiscFormat2Data*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenAddressOfPreviousSession.call(this, value)
    end
    def put_ForceMediaToBeClosed(this : IDiscFormat2Data*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ForceMediaToBeClosed.call(this, value)
    end
    def get_ForceMediaToBeClosed(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForceMediaToBeClosed.call(this, value)
    end
    def put_DisableConsumerDvdCompatibilityMode(this : IDiscFormat2Data*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DisableConsumerDvdCompatibilityMode.call(this, value)
    end
    def get_DisableConsumerDvdCompatibilityMode(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisableConsumerDvdCompatibilityMode.call(this, value)
    end
    def get_CurrentPhysicalMediaType(this : IDiscFormat2Data*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPhysicalMediaType.call(this, value)
    end
    def put_ClientName(this : IDiscFormat2Data*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientName.call(this, value)
    end
    def get_ClientName(this : IDiscFormat2Data*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientName.call(this, value)
    end
    def get_RequestedWriteSpeed(this : IDiscFormat2Data*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestedWriteSpeed.call(this, value)
    end
    def get_RequestedRotationTypeIsPureCAV(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestedRotationTypeIsPureCAV.call(this, value)
    end
    def get_CurrentWriteSpeed(this : IDiscFormat2Data*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentWriteSpeed.call(this, value)
    end
    def get_CurrentRotationTypeIsPureCAV(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentRotationTypeIsPureCAV.call(this, value)
    end
    def get_SupportedWriteSpeeds(this : IDiscFormat2Data*, supportedSpeeds : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedWriteSpeeds.call(this, supportedSpeeds)
    end
    def get_SupportedWriteSpeedDescriptors(this : IDiscFormat2Data*, supportedSpeedDescriptors : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedWriteSpeedDescriptors.call(this, supportedSpeedDescriptors)
    end
    def put_ForceOverwrite(this : IDiscFormat2Data*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ForceOverwrite.call(this, value)
    end
    def get_ForceOverwrite(this : IDiscFormat2Data*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ForceOverwrite.call(this, value)
    end
    def get_MultisessionInterfaces(this : IDiscFormat2Data*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MultisessionInterfaces.call(this, value)
    end
    def write(this : IDiscFormat2Data*, data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, data)
    end
    def cancel_write(this : IDiscFormat2Data*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_write.call(this)
    end
    def set_write_speed(this : IDiscFormat2Data*, requested_sectors_per_second : Int32, rotation_type_is_pure_cav : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_write_speed.call(this, requested_sectors_per_second, rotation_type_is_pure_cav)
    end

  end

  @[Extern]
  record DDiscFormat2DataEventsVtbl,
    query_interface : Proc(DDiscFormat2DataEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DDiscFormat2DataEvents*, UInt32),
    release : Proc(DDiscFormat2DataEvents*, UInt32),
    get_type_info_count : Proc(DDiscFormat2DataEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DDiscFormat2DataEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DDiscFormat2DataEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DDiscFormat2DataEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    update : Proc(DDiscFormat2DataEvents*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DDiscFormat2DataEvents, lpVtbl : DDiscFormat2DataEventsVtbl* do
    GUID = LibC::GUID.new(0x2735413c_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : DDiscFormat2DataEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DDiscFormat2DataEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DDiscFormat2DataEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DDiscFormat2DataEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DDiscFormat2DataEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DDiscFormat2DataEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DDiscFormat2DataEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def update(this : DDiscFormat2DataEvents*, object : Void*, progress : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, object, progress)
    end

  end

  @[Extern]
  record IDiscFormat2DataEventArgsVtbl,
    query_interface : Proc(IDiscFormat2DataEventArgs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2DataEventArgs*, UInt32),
    release : Proc(IDiscFormat2DataEventArgs*, UInt32),
    get_type_info_count : Proc(IDiscFormat2DataEventArgs*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2DataEventArgs*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2DataEventArgs*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2DataEventArgs*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StartLba : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_SectorCount : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastReadLba : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenLba : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalSystemBuffer : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_UsedSystemBuffer : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSystemBuffer : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_ElapsedTime : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_RemainingTime : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalTime : Proc(IDiscFormat2DataEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentAction : Proc(IDiscFormat2DataEventArgs*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_DATA_WRITE_ACTION*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2DataEventArgs, lpVtbl : IDiscFormat2DataEventArgsVtbl* do
    GUID = LibC::GUID.new(0x2735413d_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2DataEventArgs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2DataEventArgs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2DataEventArgs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2DataEventArgs*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2DataEventArgs*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2DataEventArgs*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2DataEventArgs*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StartLba(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartLba.call(this, value)
    end
    def get_SectorCount(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SectorCount.call(this, value)
    end
    def get_LastReadLba(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastReadLba.call(this, value)
    end
    def get_LastWrittenLba(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenLba.call(this, value)
    end
    def get_TotalSystemBuffer(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalSystemBuffer.call(this, value)
    end
    def get_UsedSystemBuffer(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedSystemBuffer.call(this, value)
    end
    def get_FreeSystemBuffer(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSystemBuffer.call(this, value)
    end
    def get_ElapsedTime(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ElapsedTime.call(this, value)
    end
    def get_RemainingTime(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RemainingTime.call(this, value)
    end
    def get_TotalTime(this : IDiscFormat2DataEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalTime.call(this, value)
    end
    def get_CurrentAction(this : IDiscFormat2DataEventArgs*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_DATA_WRITE_ACTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentAction.call(this, value)
    end

  end

  @[Extern]
  record IDiscFormat2TrackAtOnceVtbl,
    query_interface : Proc(IDiscFormat2TrackAtOnce*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2TrackAtOnce*, UInt32),
    release : Proc(IDiscFormat2TrackAtOnce*, UInt32),
    get_type_info_count : Proc(IDiscFormat2TrackAtOnce*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2TrackAtOnce*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2TrackAtOnce*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2TrackAtOnce*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_recorder_supported : Proc(IDiscFormat2TrackAtOnce*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_current_media_supported : Proc(IDiscFormat2TrackAtOnce*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaPhysicallyBlank : Proc(IDiscFormat2TrackAtOnce*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaHeuristicallyBlank : Proc(IDiscFormat2TrackAtOnce*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedMediaTypes : Proc(IDiscFormat2TrackAtOnce*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    prepare_media : Proc(IDiscFormat2TrackAtOnce*, Win32cr::Foundation::HRESULT),
    add_audio_track : Proc(IDiscFormat2TrackAtOnce*, Void*, Win32cr::Foundation::HRESULT),
    cancel_add_track : Proc(IDiscFormat2TrackAtOnce*, Win32cr::Foundation::HRESULT),
    release_media : Proc(IDiscFormat2TrackAtOnce*, Win32cr::Foundation::HRESULT),
    set_write_speed : Proc(IDiscFormat2TrackAtOnce*, Int32, Int16, Win32cr::Foundation::HRESULT),
    put_Recorder : Proc(IDiscFormat2TrackAtOnce*, Void*, Win32cr::Foundation::HRESULT),
    get_Recorder : Proc(IDiscFormat2TrackAtOnce*, Void**, Win32cr::Foundation::HRESULT),
    put_BufferUnderrunFreeDisabled : Proc(IDiscFormat2TrackAtOnce*, Int16, Win32cr::Foundation::HRESULT),
    get_BufferUnderrunFreeDisabled : Proc(IDiscFormat2TrackAtOnce*, Int16*, Win32cr::Foundation::HRESULT),
    get_NumberOfExistingTracks : Proc(IDiscFormat2TrackAtOnce*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalSectorsOnMedia : Proc(IDiscFormat2TrackAtOnce*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSectorsOnMedia : Proc(IDiscFormat2TrackAtOnce*, Int32*, Win32cr::Foundation::HRESULT),
    get_UsedSectorsOnMedia : Proc(IDiscFormat2TrackAtOnce*, Int32*, Win32cr::Foundation::HRESULT),
    put_DoNotFinalizeMedia : Proc(IDiscFormat2TrackAtOnce*, Int16, Win32cr::Foundation::HRESULT),
    get_DoNotFinalizeMedia : Proc(IDiscFormat2TrackAtOnce*, Int16*, Win32cr::Foundation::HRESULT),
    get_ExpectedTableOfContents : Proc(IDiscFormat2TrackAtOnce*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_CurrentPhysicalMediaType : Proc(IDiscFormat2TrackAtOnce*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*, Win32cr::Foundation::HRESULT),
    put_ClientName : Proc(IDiscFormat2TrackAtOnce*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientName : Proc(IDiscFormat2TrackAtOnce*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_RequestedWriteSpeed : Proc(IDiscFormat2TrackAtOnce*, Int32*, Win32cr::Foundation::HRESULT),
    get_RequestedRotationTypeIsPureCAV : Proc(IDiscFormat2TrackAtOnce*, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentWriteSpeed : Proc(IDiscFormat2TrackAtOnce*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentRotationTypeIsPureCAV : Proc(IDiscFormat2TrackAtOnce*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedWriteSpeeds : Proc(IDiscFormat2TrackAtOnce*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_SupportedWriteSpeedDescriptors : Proc(IDiscFormat2TrackAtOnce*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2TrackAtOnce, lpVtbl : IDiscFormat2TrackAtOnceVtbl* do
    GUID = LibC::GUID.new(0x27354154_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2TrackAtOnce*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2TrackAtOnce*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2TrackAtOnce*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2TrackAtOnce*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2TrackAtOnce*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2TrackAtOnce*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2TrackAtOnce*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_recorder_supported(this : IDiscFormat2TrackAtOnce*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_recorder_supported.call(this, recorder, value)
    end
    def is_current_media_supported(this : IDiscFormat2TrackAtOnce*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_current_media_supported.call(this, recorder, value)
    end
    def get_MediaPhysicallyBlank(this : IDiscFormat2TrackAtOnce*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaPhysicallyBlank.call(this, value)
    end
    def get_MediaHeuristicallyBlank(this : IDiscFormat2TrackAtOnce*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaHeuristicallyBlank.call(this, value)
    end
    def get_SupportedMediaTypes(this : IDiscFormat2TrackAtOnce*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedMediaTypes.call(this, value)
    end
    def prepare_media(this : IDiscFormat2TrackAtOnce*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_media.call(this)
    end
    def add_audio_track(this : IDiscFormat2TrackAtOnce*, data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_audio_track.call(this, data)
    end
    def cancel_add_track(this : IDiscFormat2TrackAtOnce*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_add_track.call(this)
    end
    def release_media(this : IDiscFormat2TrackAtOnce*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_media.call(this)
    end
    def set_write_speed(this : IDiscFormat2TrackAtOnce*, requested_sectors_per_second : Int32, rotation_type_is_pure_cav : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_write_speed.call(this, requested_sectors_per_second, rotation_type_is_pure_cav)
    end
    def put_Recorder(this : IDiscFormat2TrackAtOnce*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Recorder.call(this, value)
    end
    def get_Recorder(this : IDiscFormat2TrackAtOnce*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Recorder.call(this, value)
    end
    def put_BufferUnderrunFreeDisabled(this : IDiscFormat2TrackAtOnce*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BufferUnderrunFreeDisabled.call(this, value)
    end
    def get_BufferUnderrunFreeDisabled(this : IDiscFormat2TrackAtOnce*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BufferUnderrunFreeDisabled.call(this, value)
    end
    def get_NumberOfExistingTracks(this : IDiscFormat2TrackAtOnce*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfExistingTracks.call(this, value)
    end
    def get_TotalSectorsOnMedia(this : IDiscFormat2TrackAtOnce*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalSectorsOnMedia.call(this, value)
    end
    def get_FreeSectorsOnMedia(this : IDiscFormat2TrackAtOnce*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSectorsOnMedia.call(this, value)
    end
    def get_UsedSectorsOnMedia(this : IDiscFormat2TrackAtOnce*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedSectorsOnMedia.call(this, value)
    end
    def put_DoNotFinalizeMedia(this : IDiscFormat2TrackAtOnce*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DoNotFinalizeMedia.call(this, value)
    end
    def get_DoNotFinalizeMedia(this : IDiscFormat2TrackAtOnce*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DoNotFinalizeMedia.call(this, value)
    end
    def get_ExpectedTableOfContents(this : IDiscFormat2TrackAtOnce*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExpectedTableOfContents.call(this, value)
    end
    def get_CurrentPhysicalMediaType(this : IDiscFormat2TrackAtOnce*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPhysicalMediaType.call(this, value)
    end
    def put_ClientName(this : IDiscFormat2TrackAtOnce*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientName.call(this, value)
    end
    def get_ClientName(this : IDiscFormat2TrackAtOnce*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientName.call(this, value)
    end
    def get_RequestedWriteSpeed(this : IDiscFormat2TrackAtOnce*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestedWriteSpeed.call(this, value)
    end
    def get_RequestedRotationTypeIsPureCAV(this : IDiscFormat2TrackAtOnce*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestedRotationTypeIsPureCAV.call(this, value)
    end
    def get_CurrentWriteSpeed(this : IDiscFormat2TrackAtOnce*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentWriteSpeed.call(this, value)
    end
    def get_CurrentRotationTypeIsPureCAV(this : IDiscFormat2TrackAtOnce*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentRotationTypeIsPureCAV.call(this, value)
    end
    def get_SupportedWriteSpeeds(this : IDiscFormat2TrackAtOnce*, supportedSpeeds : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedWriteSpeeds.call(this, supportedSpeeds)
    end
    def get_SupportedWriteSpeedDescriptors(this : IDiscFormat2TrackAtOnce*, supportedSpeedDescriptors : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedWriteSpeedDescriptors.call(this, supportedSpeedDescriptors)
    end

  end

  @[Extern]
  record DDiscFormat2TrackAtOnceEventsVtbl,
    query_interface : Proc(DDiscFormat2TrackAtOnceEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32),
    release : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32),
    get_type_info_count : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DDiscFormat2TrackAtOnceEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DDiscFormat2TrackAtOnceEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DDiscFormat2TrackAtOnceEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    update : Proc(DDiscFormat2TrackAtOnceEvents*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DDiscFormat2TrackAtOnceEvents, lpVtbl : DDiscFormat2TrackAtOnceEventsVtbl* do
    GUID = LibC::GUID.new(0x2735413f_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : DDiscFormat2TrackAtOnceEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DDiscFormat2TrackAtOnceEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DDiscFormat2TrackAtOnceEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DDiscFormat2TrackAtOnceEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DDiscFormat2TrackAtOnceEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DDiscFormat2TrackAtOnceEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DDiscFormat2TrackAtOnceEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def update(this : DDiscFormat2TrackAtOnceEvents*, object : Void*, progress : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, object, progress)
    end

  end

  @[Extern]
  record IDiscFormat2TrackAtOnceEventArgsVtbl,
    query_interface : Proc(IDiscFormat2TrackAtOnceEventArgs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32),
    release : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32),
    get_type_info_count : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2TrackAtOnceEventArgs*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2TrackAtOnceEventArgs*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StartLba : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_SectorCount : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastReadLba : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenLba : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalSystemBuffer : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_UsedSystemBuffer : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSystemBuffer : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentTrackNumber : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentAction : Proc(IDiscFormat2TrackAtOnceEventArgs*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_TAO_WRITE_ACTION*, Win32cr::Foundation::HRESULT),
    get_ElapsedTime : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_RemainingTime : Proc(IDiscFormat2TrackAtOnceEventArgs*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2TrackAtOnceEventArgs, lpVtbl : IDiscFormat2TrackAtOnceEventArgsVtbl* do
    GUID = LibC::GUID.new(0x27354140_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2TrackAtOnceEventArgs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2TrackAtOnceEventArgs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2TrackAtOnceEventArgs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2TrackAtOnceEventArgs*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2TrackAtOnceEventArgs*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2TrackAtOnceEventArgs*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2TrackAtOnceEventArgs*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StartLba(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartLba.call(this, value)
    end
    def get_SectorCount(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SectorCount.call(this, value)
    end
    def get_LastReadLba(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastReadLba.call(this, value)
    end
    def get_LastWrittenLba(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenLba.call(this, value)
    end
    def get_TotalSystemBuffer(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalSystemBuffer.call(this, value)
    end
    def get_UsedSystemBuffer(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedSystemBuffer.call(this, value)
    end
    def get_FreeSystemBuffer(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSystemBuffer.call(this, value)
    end
    def get_CurrentTrackNumber(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentTrackNumber.call(this, value)
    end
    def get_CurrentAction(this : IDiscFormat2TrackAtOnceEventArgs*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_TAO_WRITE_ACTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentAction.call(this, value)
    end
    def get_ElapsedTime(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ElapsedTime.call(this, value)
    end
    def get_RemainingTime(this : IDiscFormat2TrackAtOnceEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RemainingTime.call(this, value)
    end

  end

  @[Extern]
  record IDiscFormat2RawCDVtbl,
    query_interface : Proc(IDiscFormat2RawCD*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2RawCD*, UInt32),
    release : Proc(IDiscFormat2RawCD*, UInt32),
    get_type_info_count : Proc(IDiscFormat2RawCD*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2RawCD*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2RawCD*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2RawCD*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    is_recorder_supported : Proc(IDiscFormat2RawCD*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    is_current_media_supported : Proc(IDiscFormat2RawCD*, Void*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaPhysicallyBlank : Proc(IDiscFormat2RawCD*, Int16*, Win32cr::Foundation::HRESULT),
    get_MediaHeuristicallyBlank : Proc(IDiscFormat2RawCD*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedMediaTypes : Proc(IDiscFormat2RawCD*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    prepare_media : Proc(IDiscFormat2RawCD*, Win32cr::Foundation::HRESULT),
    write_media : Proc(IDiscFormat2RawCD*, Void*, Win32cr::Foundation::HRESULT),
    write_media2 : Proc(IDiscFormat2RawCD*, Void*, Int32, Win32cr::Foundation::HRESULT),
    cancel_write : Proc(IDiscFormat2RawCD*, Win32cr::Foundation::HRESULT),
    release_media : Proc(IDiscFormat2RawCD*, Win32cr::Foundation::HRESULT),
    set_write_speed : Proc(IDiscFormat2RawCD*, Int32, Int16, Win32cr::Foundation::HRESULT),
    put_Recorder : Proc(IDiscFormat2RawCD*, Void*, Win32cr::Foundation::HRESULT),
    get_Recorder : Proc(IDiscFormat2RawCD*, Void**, Win32cr::Foundation::HRESULT),
    put_BufferUnderrunFreeDisabled : Proc(IDiscFormat2RawCD*, Int16, Win32cr::Foundation::HRESULT),
    get_BufferUnderrunFreeDisabled : Proc(IDiscFormat2RawCD*, Int16*, Win32cr::Foundation::HRESULT),
    get_StartOfNextSession : Proc(IDiscFormat2RawCD*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastPossibleStartOfLeadout : Proc(IDiscFormat2RawCD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentPhysicalMediaType : Proc(IDiscFormat2RawCD*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*, Win32cr::Foundation::HRESULT),
    get_SupportedSectorTypes : Proc(IDiscFormat2RawCD*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_RequestedSectorType : Proc(IDiscFormat2RawCD*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE, Win32cr::Foundation::HRESULT),
    get_RequestedSectorType : Proc(IDiscFormat2RawCD*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*, Win32cr::Foundation::HRESULT),
    put_ClientName : Proc(IDiscFormat2RawCD*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ClientName : Proc(IDiscFormat2RawCD*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_RequestedWriteSpeed : Proc(IDiscFormat2RawCD*, Int32*, Win32cr::Foundation::HRESULT),
    get_RequestedRotationTypeIsPureCAV : Proc(IDiscFormat2RawCD*, Int16*, Win32cr::Foundation::HRESULT),
    get_CurrentWriteSpeed : Proc(IDiscFormat2RawCD*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentRotationTypeIsPureCAV : Proc(IDiscFormat2RawCD*, Int16*, Win32cr::Foundation::HRESULT),
    get_SupportedWriteSpeeds : Proc(IDiscFormat2RawCD*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    get_SupportedWriteSpeedDescriptors : Proc(IDiscFormat2RawCD*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2RawCD, lpVtbl : IDiscFormat2RawCDVtbl* do
    GUID = LibC::GUID.new(0x27354155_u32, 0x8f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2RawCD*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2RawCD*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2RawCD*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2RawCD*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2RawCD*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2RawCD*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2RawCD*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def is_recorder_supported(this : IDiscFormat2RawCD*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_recorder_supported.call(this, recorder, value)
    end
    def is_current_media_supported(this : IDiscFormat2RawCD*, recorder : Void*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_current_media_supported.call(this, recorder, value)
    end
    def get_MediaPhysicallyBlank(this : IDiscFormat2RawCD*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaPhysicallyBlank.call(this, value)
    end
    def get_MediaHeuristicallyBlank(this : IDiscFormat2RawCD*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaHeuristicallyBlank.call(this, value)
    end
    def get_SupportedMediaTypes(this : IDiscFormat2RawCD*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedMediaTypes.call(this, value)
    end
    def prepare_media(this : IDiscFormat2RawCD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.prepare_media.call(this)
    end
    def write_media(this : IDiscFormat2RawCD*, data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_media.call(this, data)
    end
    def write_media2(this : IDiscFormat2RawCD*, data : Void*, streamLeadInSectors : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_media2.call(this, data, streamLeadInSectors)
    end
    def cancel_write(this : IDiscFormat2RawCD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.cancel_write.call(this)
    end
    def release_media(this : IDiscFormat2RawCD*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_media.call(this)
    end
    def set_write_speed(this : IDiscFormat2RawCD*, requested_sectors_per_second : Int32, rotation_type_is_pure_cav : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_write_speed.call(this, requested_sectors_per_second, rotation_type_is_pure_cav)
    end
    def put_Recorder(this : IDiscFormat2RawCD*, value : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Recorder.call(this, value)
    end
    def get_Recorder(this : IDiscFormat2RawCD*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Recorder.call(this, value)
    end
    def put_BufferUnderrunFreeDisabled(this : IDiscFormat2RawCD*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BufferUnderrunFreeDisabled.call(this, value)
    end
    def get_BufferUnderrunFreeDisabled(this : IDiscFormat2RawCD*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BufferUnderrunFreeDisabled.call(this, value)
    end
    def get_StartOfNextSession(this : IDiscFormat2RawCD*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartOfNextSession.call(this, value)
    end
    def get_LastPossibleStartOfLeadout(this : IDiscFormat2RawCD*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastPossibleStartOfLeadout.call(this, value)
    end
    def get_CurrentPhysicalMediaType(this : IDiscFormat2RawCD*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentPhysicalMediaType.call(this, value)
    end
    def get_SupportedSectorTypes(this : IDiscFormat2RawCD*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedSectorTypes.call(this, value)
    end
    def put_RequestedSectorType(this : IDiscFormat2RawCD*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_RequestedSectorType.call(this, value)
    end
    def get_RequestedSectorType(this : IDiscFormat2RawCD*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestedSectorType.call(this, value)
    end
    def put_ClientName(this : IDiscFormat2RawCD*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ClientName.call(this, value)
    end
    def get_ClientName(this : IDiscFormat2RawCD*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ClientName.call(this, value)
    end
    def get_RequestedWriteSpeed(this : IDiscFormat2RawCD*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestedWriteSpeed.call(this, value)
    end
    def get_RequestedRotationTypeIsPureCAV(this : IDiscFormat2RawCD*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RequestedRotationTypeIsPureCAV.call(this, value)
    end
    def get_CurrentWriteSpeed(this : IDiscFormat2RawCD*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentWriteSpeed.call(this, value)
    end
    def get_CurrentRotationTypeIsPureCAV(this : IDiscFormat2RawCD*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentRotationTypeIsPureCAV.call(this, value)
    end
    def get_SupportedWriteSpeeds(this : IDiscFormat2RawCD*, supportedSpeeds : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedWriteSpeeds.call(this, supportedSpeeds)
    end
    def get_SupportedWriteSpeedDescriptors(this : IDiscFormat2RawCD*, supportedSpeedDescriptors : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SupportedWriteSpeedDescriptors.call(this, supportedSpeedDescriptors)
    end

  end

  @[Extern]
  record DDiscFormat2RawCDEventsVtbl,
    query_interface : Proc(DDiscFormat2RawCDEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DDiscFormat2RawCDEvents*, UInt32),
    release : Proc(DDiscFormat2RawCDEvents*, UInt32),
    get_type_info_count : Proc(DDiscFormat2RawCDEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DDiscFormat2RawCDEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DDiscFormat2RawCDEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DDiscFormat2RawCDEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    update : Proc(DDiscFormat2RawCDEvents*, Void*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DDiscFormat2RawCDEvents, lpVtbl : DDiscFormat2RawCDEventsVtbl* do
    GUID = LibC::GUID.new(0x27354142_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : DDiscFormat2RawCDEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DDiscFormat2RawCDEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DDiscFormat2RawCDEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DDiscFormat2RawCDEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DDiscFormat2RawCDEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DDiscFormat2RawCDEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DDiscFormat2RawCDEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def update(this : DDiscFormat2RawCDEvents*, object : Void*, progress : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, object, progress)
    end

  end

  @[Extern]
  record IDiscFormat2RawCDEventArgsVtbl,
    query_interface : Proc(IDiscFormat2RawCDEventArgs*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscFormat2RawCDEventArgs*, UInt32),
    release : Proc(IDiscFormat2RawCDEventArgs*, UInt32),
    get_type_info_count : Proc(IDiscFormat2RawCDEventArgs*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IDiscFormat2RawCDEventArgs*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IDiscFormat2RawCDEventArgs*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IDiscFormat2RawCDEventArgs*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StartLba : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_SectorCount : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastReadLba : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenLba : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalSystemBuffer : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_UsedSystemBuffer : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSystemBuffer : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_CurrentAction : Proc(IDiscFormat2RawCDEventArgs*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_WRITE_ACTION*, Win32cr::Foundation::HRESULT),
    get_ElapsedTime : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT),
    get_RemainingTime : Proc(IDiscFormat2RawCDEventArgs*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscFormat2RawCDEventArgs, lpVtbl : IDiscFormat2RawCDEventArgsVtbl* do
    GUID = LibC::GUID.new(0x27354143_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IDiscFormat2RawCDEventArgs*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscFormat2RawCDEventArgs*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscFormat2RawCDEventArgs*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IDiscFormat2RawCDEventArgs*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IDiscFormat2RawCDEventArgs*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IDiscFormat2RawCDEventArgs*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IDiscFormat2RawCDEventArgs*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StartLba(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartLba.call(this, value)
    end
    def get_SectorCount(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SectorCount.call(this, value)
    end
    def get_LastReadLba(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastReadLba.call(this, value)
    end
    def get_LastWrittenLba(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenLba.call(this, value)
    end
    def get_TotalSystemBuffer(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalSystemBuffer.call(this, value)
    end
    def get_UsedSystemBuffer(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedSystemBuffer.call(this, value)
    end
    def get_FreeSystemBuffer(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSystemBuffer.call(this, value)
    end
    def get_CurrentAction(this : IDiscFormat2RawCDEventArgs*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_WRITE_ACTION*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CurrentAction.call(this, value)
    end
    def get_ElapsedTime(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ElapsedTime.call(this, value)
    end
    def get_RemainingTime(this : IDiscFormat2RawCDEventArgs*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RemainingTime.call(this, value)
    end

  end

  @[Extern]
  record IBurnVerificationVtbl,
    query_interface : Proc(IBurnVerification*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBurnVerification*, UInt32),
    release : Proc(IBurnVerification*, UInt32),
    put_BurnVerificationLevel : Proc(IBurnVerification*, Win32cr::Storage::Imapi::IMAPI_BURN_VERIFICATION_LEVEL, Win32cr::Foundation::HRESULT),
    get_BurnVerificationLevel : Proc(IBurnVerification*, Win32cr::Storage::Imapi::IMAPI_BURN_VERIFICATION_LEVEL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBurnVerification, lpVtbl : IBurnVerificationVtbl* do
    GUID = LibC::GUID.new(0xd2ffd834_u32, 0x958b_u16, 0x426d_u16, StaticArray[0x84_u8, 0x70_u8, 0x2a_u8, 0x13_u8, 0x87_u8, 0x9c_u8, 0x6a_u8, 0x91_u8])
    def query_interface(this : IBurnVerification*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBurnVerification*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBurnVerification*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def put_BurnVerificationLevel(this : IBurnVerification*, value : Win32cr::Storage::Imapi::IMAPI_BURN_VERIFICATION_LEVEL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BurnVerificationLevel.call(this, value)
    end
    def get_BurnVerificationLevel(this : IBurnVerification*, value : Win32cr::Storage::Imapi::IMAPI_BURN_VERIFICATION_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BurnVerificationLevel.call(this, value)
    end

  end

  @[Extern]
  record IWriteSpeedDescriptorVtbl,
    query_interface : Proc(IWriteSpeedDescriptor*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IWriteSpeedDescriptor*, UInt32),
    release : Proc(IWriteSpeedDescriptor*, UInt32),
    get_type_info_count : Proc(IWriteSpeedDescriptor*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IWriteSpeedDescriptor*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IWriteSpeedDescriptor*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IWriteSpeedDescriptor*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_MediaType : Proc(IWriteSpeedDescriptor*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*, Win32cr::Foundation::HRESULT),
    get_RotationTypeIsPureCAV : Proc(IWriteSpeedDescriptor*, Int16*, Win32cr::Foundation::HRESULT),
    get_WriteSpeed : Proc(IWriteSpeedDescriptor*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IWriteSpeedDescriptor, lpVtbl : IWriteSpeedDescriptorVtbl* do
    GUID = LibC::GUID.new(0x27354144_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IWriteSpeedDescriptor*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IWriteSpeedDescriptor*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IWriteSpeedDescriptor*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IWriteSpeedDescriptor*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IWriteSpeedDescriptor*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IWriteSpeedDescriptor*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IWriteSpeedDescriptor*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_MediaType(this : IWriteSpeedDescriptor*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaType.call(this, value)
    end
    def get_RotationTypeIsPureCAV(this : IWriteSpeedDescriptor*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_RotationTypeIsPureCAV.call(this, value)
    end
    def get_WriteSpeed(this : IWriteSpeedDescriptor*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteSpeed.call(this, value)
    end

  end

  @[Extern]
  record IMultisessionVtbl,
    query_interface : Proc(IMultisession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultisession*, UInt32),
    release : Proc(IMultisession*, UInt32),
    get_type_info_count : Proc(IMultisession*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMultisession*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMultisession*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMultisession*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_IsSupportedOnCurrentMediaState : Proc(IMultisession*, Int16*, Win32cr::Foundation::HRESULT),
    put_InUse : Proc(IMultisession*, Int16, Win32cr::Foundation::HRESULT),
    get_InUse : Proc(IMultisession*, Int16*, Win32cr::Foundation::HRESULT),
    get_ImportRecorder : Proc(IMultisession*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMultisession, lpVtbl : IMultisessionVtbl* do
    GUID = LibC::GUID.new(0x27354150_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IMultisession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultisession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultisession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMultisession*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMultisession*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMultisession*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMultisession*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_IsSupportedOnCurrentMediaState(this : IMultisession*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSupportedOnCurrentMediaState.call(this, value)
    end
    def put_InUse(this : IMultisession*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InUse.call(this, value)
    end
    def get_InUse(this : IMultisession*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InUse.call(this, value)
    end
    def get_ImportRecorder(this : IMultisession*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImportRecorder.call(this, value)
    end

  end

  @[Extern]
  record IMultisessionSequentialVtbl,
    query_interface : Proc(IMultisessionSequential*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultisessionSequential*, UInt32),
    release : Proc(IMultisessionSequential*, UInt32),
    get_type_info_count : Proc(IMultisessionSequential*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMultisessionSequential*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMultisessionSequential*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMultisessionSequential*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_IsSupportedOnCurrentMediaState : Proc(IMultisessionSequential*, Int16*, Win32cr::Foundation::HRESULT),
    put_InUse : Proc(IMultisessionSequential*, Int16, Win32cr::Foundation::HRESULT),
    get_InUse : Proc(IMultisessionSequential*, Int16*, Win32cr::Foundation::HRESULT),
    get_ImportRecorder : Proc(IMultisessionSequential*, Void**, Win32cr::Foundation::HRESULT),
    get_IsFirstDataSession : Proc(IMultisessionSequential*, Int16*, Win32cr::Foundation::HRESULT),
    get_StartAddressOfPreviousSession : Proc(IMultisessionSequential*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenAddressOfPreviousSession : Proc(IMultisessionSequential*, Int32*, Win32cr::Foundation::HRESULT),
    get_NextWritableAddress : Proc(IMultisessionSequential*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSectorsOnMedia : Proc(IMultisessionSequential*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMultisessionSequential, lpVtbl : IMultisessionSequentialVtbl* do
    GUID = LibC::GUID.new(0x27354151_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IMultisessionSequential*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultisessionSequential*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultisessionSequential*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMultisessionSequential*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMultisessionSequential*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMultisessionSequential*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMultisessionSequential*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_IsSupportedOnCurrentMediaState(this : IMultisessionSequential*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSupportedOnCurrentMediaState.call(this, value)
    end
    def put_InUse(this : IMultisessionSequential*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InUse.call(this, value)
    end
    def get_InUse(this : IMultisessionSequential*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InUse.call(this, value)
    end
    def get_ImportRecorder(this : IMultisessionSequential*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImportRecorder.call(this, value)
    end
    def get_IsFirstDataSession(this : IMultisessionSequential*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsFirstDataSession.call(this, value)
    end
    def get_StartAddressOfPreviousSession(this : IMultisessionSequential*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartAddressOfPreviousSession.call(this, value)
    end
    def get_LastWrittenAddressOfPreviousSession(this : IMultisessionSequential*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenAddressOfPreviousSession.call(this, value)
    end
    def get_NextWritableAddress(this : IMultisessionSequential*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NextWritableAddress.call(this, value)
    end
    def get_FreeSectorsOnMedia(this : IMultisessionSequential*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSectorsOnMedia.call(this, value)
    end

  end

  @[Extern]
  record IMultisessionSequential2Vtbl,
    query_interface : Proc(IMultisessionSequential2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultisessionSequential2*, UInt32),
    release : Proc(IMultisessionSequential2*, UInt32),
    get_type_info_count : Proc(IMultisessionSequential2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMultisessionSequential2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMultisessionSequential2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMultisessionSequential2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_IsSupportedOnCurrentMediaState : Proc(IMultisessionSequential2*, Int16*, Win32cr::Foundation::HRESULT),
    put_InUse : Proc(IMultisessionSequential2*, Int16, Win32cr::Foundation::HRESULT),
    get_InUse : Proc(IMultisessionSequential2*, Int16*, Win32cr::Foundation::HRESULT),
    get_ImportRecorder : Proc(IMultisessionSequential2*, Void**, Win32cr::Foundation::HRESULT),
    get_IsFirstDataSession : Proc(IMultisessionSequential2*, Int16*, Win32cr::Foundation::HRESULT),
    get_StartAddressOfPreviousSession : Proc(IMultisessionSequential2*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenAddressOfPreviousSession : Proc(IMultisessionSequential2*, Int32*, Win32cr::Foundation::HRESULT),
    get_NextWritableAddress : Proc(IMultisessionSequential2*, Int32*, Win32cr::Foundation::HRESULT),
    get_FreeSectorsOnMedia : Proc(IMultisessionSequential2*, Int32*, Win32cr::Foundation::HRESULT),
    get_WriteUnitSize : Proc(IMultisessionSequential2*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMultisessionSequential2, lpVtbl : IMultisessionSequential2Vtbl* do
    GUID = LibC::GUID.new(0xb507ca22_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
    def query_interface(this : IMultisessionSequential2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultisessionSequential2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultisessionSequential2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMultisessionSequential2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMultisessionSequential2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMultisessionSequential2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMultisessionSequential2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_IsSupportedOnCurrentMediaState(this : IMultisessionSequential2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSupportedOnCurrentMediaState.call(this, value)
    end
    def put_InUse(this : IMultisessionSequential2*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InUse.call(this, value)
    end
    def get_InUse(this : IMultisessionSequential2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InUse.call(this, value)
    end
    def get_ImportRecorder(this : IMultisessionSequential2*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImportRecorder.call(this, value)
    end
    def get_IsFirstDataSession(this : IMultisessionSequential2*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsFirstDataSession.call(this, value)
    end
    def get_StartAddressOfPreviousSession(this : IMultisessionSequential2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartAddressOfPreviousSession.call(this, value)
    end
    def get_LastWrittenAddressOfPreviousSession(this : IMultisessionSequential2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenAddressOfPreviousSession.call(this, value)
    end
    def get_NextWritableAddress(this : IMultisessionSequential2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NextWritableAddress.call(this, value)
    end
    def get_FreeSectorsOnMedia(this : IMultisessionSequential2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeSectorsOnMedia.call(this, value)
    end
    def get_WriteUnitSize(this : IMultisessionSequential2*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteUnitSize.call(this, value)
    end

  end

  @[Extern]
  record IMultisessionRandomWriteVtbl,
    query_interface : Proc(IMultisessionRandomWrite*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IMultisessionRandomWrite*, UInt32),
    release : Proc(IMultisessionRandomWrite*, UInt32),
    get_type_info_count : Proc(IMultisessionRandomWrite*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IMultisessionRandomWrite*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IMultisessionRandomWrite*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IMultisessionRandomWrite*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_IsSupportedOnCurrentMediaState : Proc(IMultisessionRandomWrite*, Int16*, Win32cr::Foundation::HRESULT),
    put_InUse : Proc(IMultisessionRandomWrite*, Int16, Win32cr::Foundation::HRESULT),
    get_InUse : Proc(IMultisessionRandomWrite*, Int16*, Win32cr::Foundation::HRESULT),
    get_ImportRecorder : Proc(IMultisessionRandomWrite*, Void**, Win32cr::Foundation::HRESULT),
    get_WriteUnitSize : Proc(IMultisessionRandomWrite*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastWrittenAddress : Proc(IMultisessionRandomWrite*, Int32*, Win32cr::Foundation::HRESULT),
    get_TotalSectorsOnMedia : Proc(IMultisessionRandomWrite*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IMultisessionRandomWrite, lpVtbl : IMultisessionRandomWriteVtbl* do
    GUID = LibC::GUID.new(0xb507ca23_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
    def query_interface(this : IMultisessionRandomWrite*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IMultisessionRandomWrite*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IMultisessionRandomWrite*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IMultisessionRandomWrite*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IMultisessionRandomWrite*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IMultisessionRandomWrite*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IMultisessionRandomWrite*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_IsSupportedOnCurrentMediaState(this : IMultisessionRandomWrite*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsSupportedOnCurrentMediaState.call(this, value)
    end
    def put_InUse(this : IMultisessionRandomWrite*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_InUse.call(this, value)
    end
    def get_InUse(this : IMultisessionRandomWrite*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_InUse.call(this, value)
    end
    def get_ImportRecorder(this : IMultisessionRandomWrite*, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImportRecorder.call(this, value)
    end
    def get_WriteUnitSize(this : IMultisessionRandomWrite*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WriteUnitSize.call(this, value)
    end
    def get_LastWrittenAddress(this : IMultisessionRandomWrite*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastWrittenAddress.call(this, value)
    end
    def get_TotalSectorsOnMedia(this : IMultisessionRandomWrite*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalSectorsOnMedia.call(this, value)
    end

  end

  @[Extern]
  record IStreamPseudoRandomBasedVtbl,
    query_interface : Proc(IStreamPseudoRandomBased*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamPseudoRandomBased*, UInt32),
    release : Proc(IStreamPseudoRandomBased*, UInt32),
    read : Proc(IStreamPseudoRandomBased*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write : Proc(IStreamPseudoRandomBased*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    seek : Proc(IStreamPseudoRandomBased*, Win32cr::Foundation::LARGE_INTEGER, Win32cr::System::Com::STREAM_SEEK, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    set_size : Proc(IStreamPseudoRandomBased*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::HRESULT),
    copy_to : Proc(IStreamPseudoRandomBased*, Void*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    commit : Proc(IStreamPseudoRandomBased*, Win32cr::System::Com::STGC, Win32cr::Foundation::HRESULT),
    revert : Proc(IStreamPseudoRandomBased*, Win32cr::Foundation::HRESULT),
    lock_region : Proc(IStreamPseudoRandomBased*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER, UInt32, Win32cr::Foundation::HRESULT),
    unlock_region : Proc(IStreamPseudoRandomBased*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER, UInt32, Win32cr::Foundation::HRESULT),
    stat : Proc(IStreamPseudoRandomBased*, Win32cr::System::Com::STATSTG*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IStreamPseudoRandomBased*, Void**, Win32cr::Foundation::HRESULT),
    put_Seed : Proc(IStreamPseudoRandomBased*, UInt32, Win32cr::Foundation::HRESULT),
    get_Seed : Proc(IStreamPseudoRandomBased*, UInt32*, Win32cr::Foundation::HRESULT),
    put_ExtendedSeed : Proc(IStreamPseudoRandomBased*, UInt32*, UInt32, Win32cr::Foundation::HRESULT),
    get_ExtendedSeed : Proc(IStreamPseudoRandomBased*, UInt32**, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IStreamPseudoRandomBased, lpVtbl : IStreamPseudoRandomBasedVtbl* do
    GUID = LibC::GUID.new(0x27354145_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IStreamPseudoRandomBased*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamPseudoRandomBased*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamPseudoRandomBased*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read(this : IStreamPseudoRandomBased*, pv : Void*, cb : UInt32, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pv, cb, pcbRead)
    end
    def write(this : IStreamPseudoRandomBased*, pv : Void*, cb : UInt32, pcbWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pv, cb, pcbWritten)
    end
    def seek(this : IStreamPseudoRandomBased*, dlibMove : Win32cr::Foundation::LARGE_INTEGER, dwOrigin : Win32cr::System::Com::STREAM_SEEK, plibNewPosition : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, dlibMove, dwOrigin, plibNewPosition)
    end
    def set_size(this : IStreamPseudoRandomBased*, libNewSize : Win32cr::Foundation::ULARGE_INTEGER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_size.call(this, libNewSize)
    end
    def copy_to(this : IStreamPseudoRandomBased*, pstm : Void*, cb : Win32cr::Foundation::ULARGE_INTEGER, pcbRead : Win32cr::Foundation::ULARGE_INTEGER*, pcbWritten : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_to.call(this, pstm, cb, pcbRead, pcbWritten)
    end
    def commit(this : IStreamPseudoRandomBased*, grfCommitFlags : Win32cr::System::Com::STGC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this, grfCommitFlags)
    end
    def revert(this : IStreamPseudoRandomBased*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revert.call(this)
    end
    def lock_region(this : IStreamPseudoRandomBased*, libOffset : Win32cr::Foundation::ULARGE_INTEGER, cb : Win32cr::Foundation::ULARGE_INTEGER, dwLockType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_region.call(this, libOffset, cb, dwLockType)
    end
    def unlock_region(this : IStreamPseudoRandomBased*, libOffset : Win32cr::Foundation::ULARGE_INTEGER, cb : Win32cr::Foundation::ULARGE_INTEGER, dwLockType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_region.call(this, libOffset, cb, dwLockType)
    end
    def stat(this : IStreamPseudoRandomBased*, pstatstg : Win32cr::System::Com::STATSTG*, grfStatFlag : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stat.call(this, pstatstg, grfStatFlag)
    end
    def clone(this : IStreamPseudoRandomBased*, ppstm : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppstm)
    end
    def put_Seed(this : IStreamPseudoRandomBased*, value : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Seed.call(this, value)
    end
    def get_Seed(this : IStreamPseudoRandomBased*, value : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Seed.call(this, value)
    end
    def put_ExtendedSeed(this : IStreamPseudoRandomBased*, values : UInt32*, eCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ExtendedSeed.call(this, values, eCount)
    end
    def get_ExtendedSeed(this : IStreamPseudoRandomBased*, values : UInt32**, eCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExtendedSeed.call(this, values, eCount)
    end

  end

  @[Extern]
  record IStreamConcatenateVtbl,
    query_interface : Proc(IStreamConcatenate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamConcatenate*, UInt32),
    release : Proc(IStreamConcatenate*, UInt32),
    read : Proc(IStreamConcatenate*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write : Proc(IStreamConcatenate*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    seek : Proc(IStreamConcatenate*, Win32cr::Foundation::LARGE_INTEGER, Win32cr::System::Com::STREAM_SEEK, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    set_size : Proc(IStreamConcatenate*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::HRESULT),
    copy_to : Proc(IStreamConcatenate*, Void*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    commit : Proc(IStreamConcatenate*, Win32cr::System::Com::STGC, Win32cr::Foundation::HRESULT),
    revert : Proc(IStreamConcatenate*, Win32cr::Foundation::HRESULT),
    lock_region : Proc(IStreamConcatenate*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER, UInt32, Win32cr::Foundation::HRESULT),
    unlock_region : Proc(IStreamConcatenate*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER, UInt32, Win32cr::Foundation::HRESULT),
    stat : Proc(IStreamConcatenate*, Win32cr::System::Com::STATSTG*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IStreamConcatenate*, Void**, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IStreamConcatenate*, Void*, Void*, Win32cr::Foundation::HRESULT),
    initialize2 : Proc(IStreamConcatenate*, Void**, UInt32, Win32cr::Foundation::HRESULT),
    append : Proc(IStreamConcatenate*, Void*, Win32cr::Foundation::HRESULT),
    append2 : Proc(IStreamConcatenate*, Void**, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IStreamConcatenate, lpVtbl : IStreamConcatenateVtbl* do
    GUID = LibC::GUID.new(0x27354146_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IStreamConcatenate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamConcatenate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamConcatenate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read(this : IStreamConcatenate*, pv : Void*, cb : UInt32, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pv, cb, pcbRead)
    end
    def write(this : IStreamConcatenate*, pv : Void*, cb : UInt32, pcbWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pv, cb, pcbWritten)
    end
    def seek(this : IStreamConcatenate*, dlibMove : Win32cr::Foundation::LARGE_INTEGER, dwOrigin : Win32cr::System::Com::STREAM_SEEK, plibNewPosition : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, dlibMove, dwOrigin, plibNewPosition)
    end
    def set_size(this : IStreamConcatenate*, libNewSize : Win32cr::Foundation::ULARGE_INTEGER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_size.call(this, libNewSize)
    end
    def copy_to(this : IStreamConcatenate*, pstm : Void*, cb : Win32cr::Foundation::ULARGE_INTEGER, pcbRead : Win32cr::Foundation::ULARGE_INTEGER*, pcbWritten : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_to.call(this, pstm, cb, pcbRead, pcbWritten)
    end
    def commit(this : IStreamConcatenate*, grfCommitFlags : Win32cr::System::Com::STGC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this, grfCommitFlags)
    end
    def revert(this : IStreamConcatenate*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revert.call(this)
    end
    def lock_region(this : IStreamConcatenate*, libOffset : Win32cr::Foundation::ULARGE_INTEGER, cb : Win32cr::Foundation::ULARGE_INTEGER, dwLockType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_region.call(this, libOffset, cb, dwLockType)
    end
    def unlock_region(this : IStreamConcatenate*, libOffset : Win32cr::Foundation::ULARGE_INTEGER, cb : Win32cr::Foundation::ULARGE_INTEGER, dwLockType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_region.call(this, libOffset, cb, dwLockType)
    end
    def stat(this : IStreamConcatenate*, pstatstg : Win32cr::System::Com::STATSTG*, grfStatFlag : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stat.call(this, pstatstg, grfStatFlag)
    end
    def clone(this : IStreamConcatenate*, ppstm : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppstm)
    end
    def initialize__(this : IStreamConcatenate*, stream1 : Void*, stream2 : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, stream1, stream2)
    end
    def initialize2(this : IStreamConcatenate*, streams : Void**, streamCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize2.call(this, streams, streamCount)
    end
    def append(this : IStreamConcatenate*, stream : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append.call(this, stream)
    end
    def append2(this : IStreamConcatenate*, streams : Void**, streamCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.append2.call(this, streams, streamCount)
    end

  end

  @[Extern]
  record IStreamInterleaveVtbl,
    query_interface : Proc(IStreamInterleave*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IStreamInterleave*, UInt32),
    release : Proc(IStreamInterleave*, UInt32),
    read : Proc(IStreamInterleave*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    write : Proc(IStreamInterleave*, Void*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    seek : Proc(IStreamInterleave*, Win32cr::Foundation::LARGE_INTEGER, Win32cr::System::Com::STREAM_SEEK, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    set_size : Proc(IStreamInterleave*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::HRESULT),
    copy_to : Proc(IStreamInterleave*, Void*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::ULARGE_INTEGER*, Win32cr::Foundation::HRESULT),
    commit : Proc(IStreamInterleave*, Win32cr::System::Com::STGC, Win32cr::Foundation::HRESULT),
    revert : Proc(IStreamInterleave*, Win32cr::Foundation::HRESULT),
    lock_region : Proc(IStreamInterleave*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER, UInt32, Win32cr::Foundation::HRESULT),
    unlock_region : Proc(IStreamInterleave*, Win32cr::Foundation::ULARGE_INTEGER, Win32cr::Foundation::ULARGE_INTEGER, UInt32, Win32cr::Foundation::HRESULT),
    stat : Proc(IStreamInterleave*, Win32cr::System::Com::STATSTG*, UInt32, Win32cr::Foundation::HRESULT),
    clone : Proc(IStreamInterleave*, Void**, Win32cr::Foundation::HRESULT),
    initialize__ : Proc(IStreamInterleave*, Void**, UInt32*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IStreamInterleave, lpVtbl : IStreamInterleaveVtbl* do
    GUID = LibC::GUID.new(0x27354147_u32, 0x7f64_u16, 0x5b0f_u16, StaticArray[0x8f_u8, 0x0_u8, 0x5d_u8, 0x77_u8, 0xaf_u8, 0xbe_u8, 0x26_u8, 0x1e_u8])
    def query_interface(this : IStreamInterleave*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IStreamInterleave*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IStreamInterleave*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def read(this : IStreamInterleave*, pv : Void*, cb : UInt32, pcbRead : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read.call(this, pv, cb, pcbRead)
    end
    def write(this : IStreamInterleave*, pv : Void*, cb : UInt32, pcbWritten : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write.call(this, pv, cb, pcbWritten)
    end
    def seek(this : IStreamInterleave*, dlibMove : Win32cr::Foundation::LARGE_INTEGER, dwOrigin : Win32cr::System::Com::STREAM_SEEK, plibNewPosition : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.seek.call(this, dlibMove, dwOrigin, plibNewPosition)
    end
    def set_size(this : IStreamInterleave*, libNewSize : Win32cr::Foundation::ULARGE_INTEGER) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_size.call(this, libNewSize)
    end
    def copy_to(this : IStreamInterleave*, pstm : Void*, cb : Win32cr::Foundation::ULARGE_INTEGER, pcbRead : Win32cr::Foundation::ULARGE_INTEGER*, pcbWritten : Win32cr::Foundation::ULARGE_INTEGER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.copy_to.call(this, pstm, cb, pcbRead, pcbWritten)
    end
    def commit(this : IStreamInterleave*, grfCommitFlags : Win32cr::System::Com::STGC) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.commit.call(this, grfCommitFlags)
    end
    def revert(this : IStreamInterleave*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.revert.call(this)
    end
    def lock_region(this : IStreamInterleave*, libOffset : Win32cr::Foundation::ULARGE_INTEGER, cb : Win32cr::Foundation::ULARGE_INTEGER, dwLockType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_region.call(this, libOffset, cb, dwLockType)
    end
    def unlock_region(this : IStreamInterleave*, libOffset : Win32cr::Foundation::ULARGE_INTEGER, cb : Win32cr::Foundation::ULARGE_INTEGER, dwLockType : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unlock_region.call(this, libOffset, cb, dwLockType)
    end
    def stat(this : IStreamInterleave*, pstatstg : Win32cr::System::Com::STATSTG*, grfStatFlag : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.stat.call(this, pstatstg, grfStatFlag)
    end
    def clone(this : IStreamInterleave*, ppstm : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppstm)
    end
    def initialize__(this : IStreamInterleave*, streams : Void**, interleaveSizes : UInt32*, streamCount : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.initialize__.call(this, streams, interleaveSizes, streamCount)
    end

  end

  @[Extern]
  record IRawCDImageCreatorVtbl,
    query_interface : Proc(IRawCDImageCreator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRawCDImageCreator*, UInt32),
    release : Proc(IRawCDImageCreator*, UInt32),
    get_type_info_count : Proc(IRawCDImageCreator*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IRawCDImageCreator*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IRawCDImageCreator*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IRawCDImageCreator*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    create_result_image : Proc(IRawCDImageCreator*, Void**, Win32cr::Foundation::HRESULT),
    add_track : Proc(IRawCDImageCreator*, Win32cr::Storage::Imapi::IMAPI_CD_SECTOR_TYPE, Void*, Int32*, Win32cr::Foundation::HRESULT),
    add_special_pregap : Proc(IRawCDImageCreator*, Void*, Win32cr::Foundation::HRESULT),
    add_subcode_rw_generator : Proc(IRawCDImageCreator*, Void*, Win32cr::Foundation::HRESULT),
    put_ResultingImageType : Proc(IRawCDImageCreator*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE, Win32cr::Foundation::HRESULT),
    get_ResultingImageType : Proc(IRawCDImageCreator*, Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*, Win32cr::Foundation::HRESULT),
    get_StartOfLeadout : Proc(IRawCDImageCreator*, Int32*, Win32cr::Foundation::HRESULT),
    put_StartOfLeadoutLimit : Proc(IRawCDImageCreator*, Int32, Win32cr::Foundation::HRESULT),
    get_StartOfLeadoutLimit : Proc(IRawCDImageCreator*, Int32*, Win32cr::Foundation::HRESULT),
    put_DisableGaplessAudio : Proc(IRawCDImageCreator*, Int16, Win32cr::Foundation::HRESULT),
    get_DisableGaplessAudio : Proc(IRawCDImageCreator*, Int16*, Win32cr::Foundation::HRESULT),
    put_MediaCatalogNumber : Proc(IRawCDImageCreator*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_MediaCatalogNumber : Proc(IRawCDImageCreator*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_StartingTrackNumber : Proc(IRawCDImageCreator*, Int32, Win32cr::Foundation::HRESULT),
    get_StartingTrackNumber : Proc(IRawCDImageCreator*, Int32*, Win32cr::Foundation::HRESULT),
    get_TrackInfo : Proc(IRawCDImageCreator*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_NumberOfExistingTracks : Proc(IRawCDImageCreator*, Int32*, Win32cr::Foundation::HRESULT),
    get_LastUsedUserSectorInImage : Proc(IRawCDImageCreator*, Int32*, Win32cr::Foundation::HRESULT),
    get_ExpectedTableOfContents : Proc(IRawCDImageCreator*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRawCDImageCreator, lpVtbl : IRawCDImageCreatorVtbl* do
    GUID = LibC::GUID.new(0x25983550_u32, 0x9d65_u16, 0x49ce_u16, StaticArray[0xb3_u8, 0x35_u8, 0x40_u8, 0x63_u8, 0xd_u8, 0x90_u8, 0x12_u8, 0x27_u8])
    def query_interface(this : IRawCDImageCreator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRawCDImageCreator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRawCDImageCreator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IRawCDImageCreator*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IRawCDImageCreator*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IRawCDImageCreator*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IRawCDImageCreator*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def create_result_image(this : IRawCDImageCreator*, resultStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_result_image.call(this, resultStream)
    end
    def add_track(this : IRawCDImageCreator*, dataType : Win32cr::Storage::Imapi::IMAPI_CD_SECTOR_TYPE, data : Void*, trackIndex : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_track.call(this, dataType, data, trackIndex)
    end
    def add_special_pregap(this : IRawCDImageCreator*, data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_special_pregap.call(this, data)
    end
    def add_subcode_rw_generator(this : IRawCDImageCreator*, subcode : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_subcode_rw_generator.call(this, subcode)
    end
    def put_ResultingImageType(this : IRawCDImageCreator*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ResultingImageType.call(this, value)
    end
    def get_ResultingImageType(this : IRawCDImageCreator*, value : Win32cr::Storage::Imapi::IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ResultingImageType.call(this, value)
    end
    def get_StartOfLeadout(this : IRawCDImageCreator*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartOfLeadout.call(this, value)
    end
    def put_StartOfLeadoutLimit(this : IRawCDImageCreator*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartOfLeadoutLimit.call(this, value)
    end
    def get_StartOfLeadoutLimit(this : IRawCDImageCreator*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartOfLeadoutLimit.call(this, value)
    end
    def put_DisableGaplessAudio(this : IRawCDImageCreator*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DisableGaplessAudio.call(this, value)
    end
    def get_DisableGaplessAudio(this : IRawCDImageCreator*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DisableGaplessAudio.call(this, value)
    end
    def put_MediaCatalogNumber(this : IRawCDImageCreator*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MediaCatalogNumber.call(this, value)
    end
    def get_MediaCatalogNumber(this : IRawCDImageCreator*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MediaCatalogNumber.call(this, value)
    end
    def put_StartingTrackNumber(this : IRawCDImageCreator*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StartingTrackNumber.call(this, value)
    end
    def get_StartingTrackNumber(this : IRawCDImageCreator*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartingTrackNumber.call(this, value)
    end
    def get_TrackInfo(this : IRawCDImageCreator*, trackIndex : Int32, value : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TrackInfo.call(this, trackIndex, value)
    end
    def get_NumberOfExistingTracks(this : IRawCDImageCreator*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_NumberOfExistingTracks.call(this, value)
    end
    def get_LastUsedUserSectorInImage(this : IRawCDImageCreator*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastUsedUserSectorInImage.call(this, value)
    end
    def get_ExpectedTableOfContents(this : IRawCDImageCreator*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ExpectedTableOfContents.call(this, value)
    end

  end

  @[Extern]
  record IRawCDImageTrackInfoVtbl,
    query_interface : Proc(IRawCDImageTrackInfo*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRawCDImageTrackInfo*, UInt32),
    release : Proc(IRawCDImageTrackInfo*, UInt32),
    get_type_info_count : Proc(IRawCDImageTrackInfo*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IRawCDImageTrackInfo*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IRawCDImageTrackInfo*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IRawCDImageTrackInfo*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StartingLba : Proc(IRawCDImageTrackInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_SectorCount : Proc(IRawCDImageTrackInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_TrackNumber : Proc(IRawCDImageTrackInfo*, Int32*, Win32cr::Foundation::HRESULT),
    get_SectorType : Proc(IRawCDImageTrackInfo*, Win32cr::Storage::Imapi::IMAPI_CD_SECTOR_TYPE*, Win32cr::Foundation::HRESULT),
    get_ISRC : Proc(IRawCDImageTrackInfo*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_ISRC : Proc(IRawCDImageTrackInfo*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_DigitalAudioCopySetting : Proc(IRawCDImageTrackInfo*, Win32cr::Storage::Imapi::IMAPI_CD_TRACK_DIGITAL_COPY_SETTING*, Win32cr::Foundation::HRESULT),
    put_DigitalAudioCopySetting : Proc(IRawCDImageTrackInfo*, Win32cr::Storage::Imapi::IMAPI_CD_TRACK_DIGITAL_COPY_SETTING, Win32cr::Foundation::HRESULT),
    get_AudioHasPreemphasis : Proc(IRawCDImageTrackInfo*, Int16*, Win32cr::Foundation::HRESULT),
    put_AudioHasPreemphasis : Proc(IRawCDImageTrackInfo*, Int16, Win32cr::Foundation::HRESULT),
    get_TrackIndexes : Proc(IRawCDImageTrackInfo*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    add_track_index : Proc(IRawCDImageTrackInfo*, Int32, Win32cr::Foundation::HRESULT),
    clear_track_index : Proc(IRawCDImageTrackInfo*, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRawCDImageTrackInfo, lpVtbl : IRawCDImageTrackInfoVtbl* do
    GUID = LibC::GUID.new(0x25983551_u32, 0x9d65_u16, 0x49ce_u16, StaticArray[0xb3_u8, 0x35_u8, 0x40_u8, 0x63_u8, 0xd_u8, 0x90_u8, 0x12_u8, 0x27_u8])
    def query_interface(this : IRawCDImageTrackInfo*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRawCDImageTrackInfo*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRawCDImageTrackInfo*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IRawCDImageTrackInfo*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IRawCDImageTrackInfo*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IRawCDImageTrackInfo*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IRawCDImageTrackInfo*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StartingLba(this : IRawCDImageTrackInfo*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartingLba.call(this, value)
    end
    def get_SectorCount(this : IRawCDImageTrackInfo*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SectorCount.call(this, value)
    end
    def get_TrackNumber(this : IRawCDImageTrackInfo*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TrackNumber.call(this, value)
    end
    def get_SectorType(this : IRawCDImageTrackInfo*, value : Win32cr::Storage::Imapi::IMAPI_CD_SECTOR_TYPE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SectorType.call(this, value)
    end
    def get_ISRC(this : IRawCDImageTrackInfo*, value : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ISRC.call(this, value)
    end
    def put_ISRC(this : IRawCDImageTrackInfo*, value : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ISRC.call(this, value)
    end
    def get_DigitalAudioCopySetting(this : IRawCDImageTrackInfo*, value : Win32cr::Storage::Imapi::IMAPI_CD_TRACK_DIGITAL_COPY_SETTING*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DigitalAudioCopySetting.call(this, value)
    end
    def put_DigitalAudioCopySetting(this : IRawCDImageTrackInfo*, value : Win32cr::Storage::Imapi::IMAPI_CD_TRACK_DIGITAL_COPY_SETTING) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_DigitalAudioCopySetting.call(this, value)
    end
    def get_AudioHasPreemphasis(this : IRawCDImageTrackInfo*, value : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_AudioHasPreemphasis.call(this, value)
    end
    def put_AudioHasPreemphasis(this : IRawCDImageTrackInfo*, value : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_AudioHasPreemphasis.call(this, value)
    end
    def get_TrackIndexes(this : IRawCDImageTrackInfo*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TrackIndexes.call(this, value)
    end
    def add_track_index(this : IRawCDImageTrackInfo*, lbaOffset : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_track_index.call(this, lbaOffset)
    end
    def clear_track_index(this : IRawCDImageTrackInfo*, lbaOffset : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_track_index.call(this, lbaOffset)
    end

  end

  @[Extern]
  record IBlockRangeVtbl,
    query_interface : Proc(IBlockRange*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBlockRange*, UInt32),
    release : Proc(IBlockRange*, UInt32),
    get_type_info_count : Proc(IBlockRange*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBlockRange*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBlockRange*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBlockRange*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_StartLba : Proc(IBlockRange*, Int32*, Win32cr::Foundation::HRESULT),
    get_EndLba : Proc(IBlockRange*, Int32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBlockRange, lpVtbl : IBlockRangeVtbl* do
    GUID = LibC::GUID.new(0xb507ca25_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
    def query_interface(this : IBlockRange*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBlockRange*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBlockRange*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBlockRange*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBlockRange*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBlockRange*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBlockRange*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_StartLba(this : IBlockRange*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StartLba.call(this, value)
    end
    def get_EndLba(this : IBlockRange*, value : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EndLba.call(this, value)
    end

  end

  @[Extern]
  record IBlockRangeListVtbl,
    query_interface : Proc(IBlockRangeList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBlockRangeList*, UInt32),
    release : Proc(IBlockRangeList*, UInt32),
    get_type_info_count : Proc(IBlockRangeList*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBlockRangeList*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBlockRangeList*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBlockRangeList*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_BlockRanges : Proc(IBlockRangeList*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBlockRangeList, lpVtbl : IBlockRangeListVtbl* do
    GUID = LibC::GUID.new(0xb507ca26_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
    def query_interface(this : IBlockRangeList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBlockRangeList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBlockRangeList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBlockRangeList*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBlockRangeList*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBlockRangeList*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBlockRangeList*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_BlockRanges(this : IBlockRangeList*, value : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockRanges.call(this, value)
    end

  end

  @[Extern]
  record IBootOptionsVtbl,
    query_interface : Proc(IBootOptions*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IBootOptions*, UInt32),
    release : Proc(IBootOptions*, UInt32),
    get_type_info_count : Proc(IBootOptions*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IBootOptions*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IBootOptions*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IBootOptions*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_BootImage : Proc(IBootOptions*, Void**, Win32cr::Foundation::HRESULT),
    get_Manufacturer : Proc(IBootOptions*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_Manufacturer : Proc(IBootOptions*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_PlatformId : Proc(IBootOptions*, Win32cr::Storage::Imapi::PlatformId*, Win32cr::Foundation::HRESULT),
    put_PlatformId : Proc(IBootOptions*, Win32cr::Storage::Imapi::PlatformId, Win32cr::Foundation::HRESULT),
    get_Emulation : Proc(IBootOptions*, Win32cr::Storage::Imapi::EmulationType*, Win32cr::Foundation::HRESULT),
    put_Emulation : Proc(IBootOptions*, Win32cr::Storage::Imapi::EmulationType, Win32cr::Foundation::HRESULT),
    get_ImageSize : Proc(IBootOptions*, UInt32*, Win32cr::Foundation::HRESULT),
    assign_boot_image : Proc(IBootOptions*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IBootOptions, lpVtbl : IBootOptionsVtbl* do
    GUID = LibC::GUID.new(0x2c941fd4_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IBootOptions*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IBootOptions*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IBootOptions*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IBootOptions*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IBootOptions*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IBootOptions*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IBootOptions*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_BootImage(this : IBootOptions*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BootImage.call(this, pVal)
    end
    def get_Manufacturer(this : IBootOptions*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Manufacturer.call(this, pVal)
    end
    def put_Manufacturer(this : IBootOptions*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Manufacturer.call(this, newVal)
    end
    def get_PlatformId(this : IBootOptions*, pVal : Win32cr::Storage::Imapi::PlatformId*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_PlatformId.call(this, pVal)
    end
    def put_PlatformId(this : IBootOptions*, newVal : Win32cr::Storage::Imapi::PlatformId) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_PlatformId.call(this, newVal)
    end
    def get_Emulation(this : IBootOptions*, pVal : Win32cr::Storage::Imapi::EmulationType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Emulation.call(this, pVal)
    end
    def put_Emulation(this : IBootOptions*, newVal : Win32cr::Storage::Imapi::EmulationType) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Emulation.call(this, newVal)
    end
    def get_ImageSize(this : IBootOptions*, pVal : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImageSize.call(this, pVal)
    end
    def assign_boot_image(this : IBootOptions*, newVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.assign_boot_image.call(this, newVal)
    end

  end

  @[Extern]
  record IProgressItemVtbl,
    query_interface : Proc(IProgressItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProgressItem*, UInt32),
    release : Proc(IProgressItem*, UInt32),
    get_type_info_count : Proc(IProgressItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IProgressItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IProgressItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IProgressItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Description : Proc(IProgressItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FirstBlock : Proc(IProgressItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_LastBlock : Proc(IProgressItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_BlockCount : Proc(IProgressItem*, UInt32*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProgressItem, lpVtbl : IProgressItemVtbl* do
    GUID = LibC::GUID.new(0x2c941fd5_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IProgressItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProgressItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProgressItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IProgressItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IProgressItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IProgressItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IProgressItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Description(this : IProgressItem*, desc : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Description.call(this, desc)
    end
    def get_FirstBlock(this : IProgressItem*, block : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FirstBlock.call(this, block)
    end
    def get_LastBlock(this : IProgressItem*, block : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastBlock.call(this, block)
    end
    def get_BlockCount(this : IProgressItem*, blocks : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockCount.call(this, blocks)
    end

  end

  @[Extern]
  record IEnumProgressItemsVtbl,
    query_interface : Proc(IEnumProgressItems*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumProgressItems*, UInt32),
    release : Proc(IEnumProgressItems*, UInt32),
    next__ : Proc(IEnumProgressItems*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumProgressItems*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumProgressItems*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumProgressItems*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumProgressItems, lpVtbl : IEnumProgressItemsVtbl* do
    GUID = LibC::GUID.new(0x2c941fd6_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IEnumProgressItems*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumProgressItems*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumProgressItems*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumProgressItems*, celt : UInt32, rgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumProgressItems*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumProgressItems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumProgressItems*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IProgressItemsVtbl,
    query_interface : Proc(IProgressItems*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IProgressItems*, UInt32),
    release : Proc(IProgressItems*, UInt32),
    get_type_info_count : Proc(IProgressItems*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IProgressItems*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IProgressItems*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IProgressItems*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IProgressItems*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IProgressItems*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IProgressItems*, Int32*, Win32cr::Foundation::HRESULT),
    progress_item_from_block : Proc(IProgressItems*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    progress_item_from_description : Proc(IProgressItems*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_EnumProgressItems : Proc(IProgressItems*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IProgressItems, lpVtbl : IProgressItemsVtbl* do
    GUID = LibC::GUID.new(0x2c941fd7_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IProgressItems*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IProgressItems*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IProgressItems*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IProgressItems*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IProgressItems*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IProgressItems*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IProgressItems*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get__NewEnum(this : IProgressItems*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end
    def get_Item(this : IProgressItems*, index : Int32, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, item)
    end
    def get_Count(this : IProgressItems*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def progress_item_from_block(this : IProgressItems*, block : UInt32, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.progress_item_from_block.call(this, block, item)
    end
    def progress_item_from_description(this : IProgressItems*, description : Win32cr::Foundation::BSTR, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.progress_item_from_description.call(this, description, item)
    end
    def get_EnumProgressItems(this : IProgressItems*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnumProgressItems.call(this, new_enum)
    end

  end

  @[Extern]
  record IFileSystemImageResultVtbl,
    query_interface : Proc(IFileSystemImageResult*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSystemImageResult*, UInt32),
    release : Proc(IFileSystemImageResult*, UInt32),
    get_type_info_count : Proc(IFileSystemImageResult*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFileSystemImageResult*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFileSystemImageResult*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFileSystemImageResult*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ImageStream : Proc(IFileSystemImageResult*, Void**, Win32cr::Foundation::HRESULT),
    get_ProgressItems : Proc(IFileSystemImageResult*, Void**, Win32cr::Foundation::HRESULT),
    get_TotalBlocks : Proc(IFileSystemImageResult*, Int32*, Win32cr::Foundation::HRESULT),
    get_BlockSize : Proc(IFileSystemImageResult*, Int32*, Win32cr::Foundation::HRESULT),
    get_DiscId : Proc(IFileSystemImageResult*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFileSystemImageResult, lpVtbl : IFileSystemImageResultVtbl* do
    GUID = LibC::GUID.new(0x2c941fd8_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IFileSystemImageResult*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSystemImageResult*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSystemImageResult*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFileSystemImageResult*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFileSystemImageResult*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFileSystemImageResult*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFileSystemImageResult*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ImageStream(this : IFileSystemImageResult*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImageStream.call(this, pVal)
    end
    def get_ProgressItems(this : IFileSystemImageResult*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProgressItems.call(this, pVal)
    end
    def get_TotalBlocks(this : IFileSystemImageResult*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalBlocks.call(this, pVal)
    end
    def get_BlockSize(this : IFileSystemImageResult*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockSize.call(this, pVal)
    end
    def get_DiscId(this : IFileSystemImageResult*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DiscId.call(this, pVal)
    end

  end

  @[Extern]
  record IFileSystemImageResult2Vtbl,
    query_interface : Proc(IFileSystemImageResult2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSystemImageResult2*, UInt32),
    release : Proc(IFileSystemImageResult2*, UInt32),
    get_type_info_count : Proc(IFileSystemImageResult2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFileSystemImageResult2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFileSystemImageResult2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFileSystemImageResult2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_ImageStream : Proc(IFileSystemImageResult2*, Void**, Win32cr::Foundation::HRESULT),
    get_ProgressItems : Proc(IFileSystemImageResult2*, Void**, Win32cr::Foundation::HRESULT),
    get_TotalBlocks : Proc(IFileSystemImageResult2*, Int32*, Win32cr::Foundation::HRESULT),
    get_BlockSize : Proc(IFileSystemImageResult2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DiscId : Proc(IFileSystemImageResult2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_ModifiedBlocks : Proc(IFileSystemImageResult2*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFileSystemImageResult2, lpVtbl : IFileSystemImageResult2Vtbl* do
    GUID = LibC::GUID.new(0xb507ca29_u32, 0x2204_u16, 0x11dd_u16, StaticArray[0x96_u8, 0x6a_u8, 0x0_u8, 0x1a_u8, 0xa0_u8, 0x1b_u8, 0xbc_u8, 0x58_u8])
    def query_interface(this : IFileSystemImageResult2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSystemImageResult2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSystemImageResult2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFileSystemImageResult2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFileSystemImageResult2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFileSystemImageResult2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFileSystemImageResult2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_ImageStream(this : IFileSystemImageResult2*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImageStream.call(this, pVal)
    end
    def get_ProgressItems(this : IFileSystemImageResult2*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ProgressItems.call(this, pVal)
    end
    def get_TotalBlocks(this : IFileSystemImageResult2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_TotalBlocks.call(this, pVal)
    end
    def get_BlockSize(this : IFileSystemImageResult2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BlockSize.call(this, pVal)
    end
    def get_DiscId(this : IFileSystemImageResult2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DiscId.call(this, pVal)
    end
    def get_ModifiedBlocks(this : IFileSystemImageResult2*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ModifiedBlocks.call(this, pVal)
    end

  end

  @[Extern]
  record IFsiItemVtbl,
    query_interface : Proc(IFsiItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFsiItem*, UInt32),
    release : Proc(IFsiItem*, UInt32),
    get_type_info_count : Proc(IFsiItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFsiItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFsiItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFsiItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFsiItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FullPath : Proc(IFsiItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CreationTime : Proc(IFsiItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_CreationTime : Proc(IFsiItem*, Float64, Win32cr::Foundation::HRESULT),
    get_LastAccessedTime : Proc(IFsiItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastAccessedTime : Proc(IFsiItem*, Float64, Win32cr::Foundation::HRESULT),
    get_LastModifiedTime : Proc(IFsiItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastModifiedTime : Proc(IFsiItem*, Float64, Win32cr::Foundation::HRESULT),
    get_IsHidden : Proc(IFsiItem*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsHidden : Proc(IFsiItem*, Int16, Win32cr::Foundation::HRESULT),
    file_system_name : Proc(IFsiItem*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    file_system_path : Proc(IFsiItem*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFsiItem, lpVtbl : IFsiItemVtbl* do
    GUID = LibC::GUID.new(0x2c941fd9_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IFsiItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFsiItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFsiItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFsiItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFsiItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFsiItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFsiItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IFsiItem*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pVal)
    end
    def get_FullPath(this : IFsiItem*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullPath.call(this, pVal)
    end
    def get_CreationTime(this : IFsiItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CreationTime.call(this, pVal)
    end
    def put_CreationTime(this : IFsiItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CreationTime.call(this, newVal)
    end
    def get_LastAccessedTime(this : IFsiItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastAccessedTime.call(this, pVal)
    end
    def put_LastAccessedTime(this : IFsiItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastAccessedTime.call(this, newVal)
    end
    def get_LastModifiedTime(this : IFsiItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastModifiedTime.call(this, pVal)
    end
    def put_LastModifiedTime(this : IFsiItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastModifiedTime.call(this, newVal)
    end
    def get_IsHidden(this : IFsiItem*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsHidden.call(this, pVal)
    end
    def put_IsHidden(this : IFsiItem*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsHidden.call(this, newVal)
    end
    def file_system_name(this : IFsiItem*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_name.call(this, fileSystem, pVal)
    end
    def file_system_path(this : IFsiItem*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_path.call(this, fileSystem, pVal)
    end

  end

  @[Extern]
  record IEnumFsiItemsVtbl,
    query_interface : Proc(IEnumFsiItems*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumFsiItems*, UInt32),
    release : Proc(IEnumFsiItems*, UInt32),
    next__ : Proc(IEnumFsiItems*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumFsiItems*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumFsiItems*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumFsiItems*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumFsiItems, lpVtbl : IEnumFsiItemsVtbl* do
    GUID = LibC::GUID.new(0x2c941fda_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IEnumFsiItems*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumFsiItems*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumFsiItems*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumFsiItems*, celt : UInt32, rgelt : Void**, pceltFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, celt, rgelt, pceltFetched)
    end
    def skip(this : IEnumFsiItems*, celt : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, celt)
    end
    def reset(this : IEnumFsiItems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumFsiItems*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IFsiFileItemVtbl,
    query_interface : Proc(IFsiFileItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFsiFileItem*, UInt32),
    release : Proc(IFsiFileItem*, UInt32),
    get_type_info_count : Proc(IFsiFileItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFsiFileItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFsiFileItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFsiFileItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFsiFileItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FullPath : Proc(IFsiFileItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CreationTime : Proc(IFsiFileItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_CreationTime : Proc(IFsiFileItem*, Float64, Win32cr::Foundation::HRESULT),
    get_LastAccessedTime : Proc(IFsiFileItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastAccessedTime : Proc(IFsiFileItem*, Float64, Win32cr::Foundation::HRESULT),
    get_LastModifiedTime : Proc(IFsiFileItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastModifiedTime : Proc(IFsiFileItem*, Float64, Win32cr::Foundation::HRESULT),
    get_IsHidden : Proc(IFsiFileItem*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsHidden : Proc(IFsiFileItem*, Int16, Win32cr::Foundation::HRESULT),
    file_system_name : Proc(IFsiFileItem*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    file_system_path : Proc(IFsiFileItem*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DataSize : Proc(IFsiFileItem*, Int64*, Win32cr::Foundation::HRESULT),
    get_DataSize32BitLow : Proc(IFsiFileItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_DataSize32BitHigh : Proc(IFsiFileItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_Data : Proc(IFsiFileItem*, Void**, Win32cr::Foundation::HRESULT),
    put_Data : Proc(IFsiFileItem*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFsiFileItem, lpVtbl : IFsiFileItemVtbl* do
    GUID = LibC::GUID.new(0x2c941fdb_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IFsiFileItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFsiFileItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFsiFileItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFsiFileItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFsiFileItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFsiFileItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFsiFileItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IFsiFileItem*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pVal)
    end
    def get_FullPath(this : IFsiFileItem*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullPath.call(this, pVal)
    end
    def get_CreationTime(this : IFsiFileItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CreationTime.call(this, pVal)
    end
    def put_CreationTime(this : IFsiFileItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CreationTime.call(this, newVal)
    end
    def get_LastAccessedTime(this : IFsiFileItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastAccessedTime.call(this, pVal)
    end
    def put_LastAccessedTime(this : IFsiFileItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastAccessedTime.call(this, newVal)
    end
    def get_LastModifiedTime(this : IFsiFileItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastModifiedTime.call(this, pVal)
    end
    def put_LastModifiedTime(this : IFsiFileItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastModifiedTime.call(this, newVal)
    end
    def get_IsHidden(this : IFsiFileItem*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsHidden.call(this, pVal)
    end
    def put_IsHidden(this : IFsiFileItem*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsHidden.call(this, newVal)
    end
    def file_system_name(this : IFsiFileItem*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_name.call(this, fileSystem, pVal)
    end
    def file_system_path(this : IFsiFileItem*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_path.call(this, fileSystem, pVal)
    end
    def get_DataSize(this : IFsiFileItem*, pVal : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataSize.call(this, pVal)
    end
    def get_DataSize32BitLow(this : IFsiFileItem*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataSize32BitLow.call(this, pVal)
    end
    def get_DataSize32BitHigh(this : IFsiFileItem*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataSize32BitHigh.call(this, pVal)
    end
    def get_Data(this : IFsiFileItem*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Data.call(this, pVal)
    end
    def put_Data(this : IFsiFileItem*, newVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Data.call(this, newVal)
    end

  end

  @[Extern]
  record IFsiFileItem2Vtbl,
    query_interface : Proc(IFsiFileItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFsiFileItem2*, UInt32),
    release : Proc(IFsiFileItem2*, UInt32),
    get_type_info_count : Proc(IFsiFileItem2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFsiFileItem2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFsiFileItem2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFsiFileItem2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFsiFileItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FullPath : Proc(IFsiFileItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CreationTime : Proc(IFsiFileItem2*, Float64*, Win32cr::Foundation::HRESULT),
    put_CreationTime : Proc(IFsiFileItem2*, Float64, Win32cr::Foundation::HRESULT),
    get_LastAccessedTime : Proc(IFsiFileItem2*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastAccessedTime : Proc(IFsiFileItem2*, Float64, Win32cr::Foundation::HRESULT),
    get_LastModifiedTime : Proc(IFsiFileItem2*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastModifiedTime : Proc(IFsiFileItem2*, Float64, Win32cr::Foundation::HRESULT),
    get_IsHidden : Proc(IFsiFileItem2*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsHidden : Proc(IFsiFileItem2*, Int16, Win32cr::Foundation::HRESULT),
    file_system_name : Proc(IFsiFileItem2*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    file_system_path : Proc(IFsiFileItem2*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_DataSize : Proc(IFsiFileItem2*, Int64*, Win32cr::Foundation::HRESULT),
    get_DataSize32BitLow : Proc(IFsiFileItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DataSize32BitHigh : Proc(IFsiFileItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_Data : Proc(IFsiFileItem2*, Void**, Win32cr::Foundation::HRESULT),
    put_Data : Proc(IFsiFileItem2*, Void*, Win32cr::Foundation::HRESULT),
    get_FsiNamedStreams : Proc(IFsiFileItem2*, Void**, Win32cr::Foundation::HRESULT),
    get_IsNamedStream : Proc(IFsiFileItem2*, Int16*, Win32cr::Foundation::HRESULT),
    add_stream : Proc(IFsiFileItem2*, Win32cr::Foundation::BSTR, Void*, Win32cr::Foundation::HRESULT),
    remove_stream : Proc(IFsiFileItem2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_IsRealTime : Proc(IFsiFileItem2*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsRealTime : Proc(IFsiFileItem2*, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFsiFileItem2, lpVtbl : IFsiFileItem2Vtbl* do
    GUID = LibC::GUID.new(0x199d0c19_u32, 0x11e1_u16, 0x40eb_u16, StaticArray[0x8e_u8, 0xc2_u8, 0xc8_u8, 0xc8_u8, 0x22_u8, 0xa0_u8, 0x77_u8, 0x92_u8])
    def query_interface(this : IFsiFileItem2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFsiFileItem2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFsiFileItem2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFsiFileItem2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFsiFileItem2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFsiFileItem2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFsiFileItem2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IFsiFileItem2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pVal)
    end
    def get_FullPath(this : IFsiFileItem2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullPath.call(this, pVal)
    end
    def get_CreationTime(this : IFsiFileItem2*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CreationTime.call(this, pVal)
    end
    def put_CreationTime(this : IFsiFileItem2*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CreationTime.call(this, newVal)
    end
    def get_LastAccessedTime(this : IFsiFileItem2*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastAccessedTime.call(this, pVal)
    end
    def put_LastAccessedTime(this : IFsiFileItem2*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastAccessedTime.call(this, newVal)
    end
    def get_LastModifiedTime(this : IFsiFileItem2*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastModifiedTime.call(this, pVal)
    end
    def put_LastModifiedTime(this : IFsiFileItem2*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastModifiedTime.call(this, newVal)
    end
    def get_IsHidden(this : IFsiFileItem2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsHidden.call(this, pVal)
    end
    def put_IsHidden(this : IFsiFileItem2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsHidden.call(this, newVal)
    end
    def file_system_name(this : IFsiFileItem2*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_name.call(this, fileSystem, pVal)
    end
    def file_system_path(this : IFsiFileItem2*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_path.call(this, fileSystem, pVal)
    end
    def get_DataSize(this : IFsiFileItem2*, pVal : Int64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataSize.call(this, pVal)
    end
    def get_DataSize32BitLow(this : IFsiFileItem2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataSize32BitLow.call(this, pVal)
    end
    def get_DataSize32BitHigh(this : IFsiFileItem2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DataSize32BitHigh.call(this, pVal)
    end
    def get_Data(this : IFsiFileItem2*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Data.call(this, pVal)
    end
    def put_Data(this : IFsiFileItem2*, newVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_Data.call(this, newVal)
    end
    def get_FsiNamedStreams(this : IFsiFileItem2*, streams : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FsiNamedStreams.call(this, streams)
    end
    def get_IsNamedStream(this : IFsiFileItem2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsNamedStream.call(this, pVal)
    end
    def add_stream(this : IFsiFileItem2*, name : Win32cr::Foundation::BSTR, streamData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_stream.call(this, name, streamData)
    end
    def remove_stream(this : IFsiFileItem2*, name : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_stream.call(this, name)
    end
    def get_IsRealTime(this : IFsiFileItem2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsRealTime.call(this, pVal)
    end
    def put_IsRealTime(this : IFsiFileItem2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsRealTime.call(this, newVal)
    end

  end

  @[Extern]
  record IFsiNamedStreamsVtbl,
    query_interface : Proc(IFsiNamedStreams*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFsiNamedStreams*, UInt32),
    release : Proc(IFsiNamedStreams*, UInt32),
    get_type_info_count : Proc(IFsiNamedStreams*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFsiNamedStreams*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFsiNamedStreams*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFsiNamedStreams*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IFsiNamedStreams*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IFsiNamedStreams*, Int32, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IFsiNamedStreams*, Int32*, Win32cr::Foundation::HRESULT),
    get_EnumNamedStreams : Proc(IFsiNamedStreams*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFsiNamedStreams, lpVtbl : IFsiNamedStreamsVtbl* do
    GUID = LibC::GUID.new(0xed79ba56_u32, 0x5294_u16, 0x4250_u16, StaticArray[0x8d_u8, 0x46_u8, 0xf9_u8, 0xae_u8, 0xce_u8, 0xe2_u8, 0x34_u8, 0x59_u8])
    def query_interface(this : IFsiNamedStreams*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFsiNamedStreams*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFsiNamedStreams*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFsiNamedStreams*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFsiNamedStreams*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFsiNamedStreams*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFsiNamedStreams*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get__NewEnum(this : IFsiNamedStreams*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end
    def get_Item(this : IFsiNamedStreams*, index : Int32, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, index, item)
    end
    def get_Count(this : IFsiNamedStreams*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get_EnumNamedStreams(this : IFsiNamedStreams*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnumNamedStreams.call(this, new_enum)
    end

  end

  @[Extern]
  record IFsiDirectoryItemVtbl,
    query_interface : Proc(IFsiDirectoryItem*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFsiDirectoryItem*, UInt32),
    release : Proc(IFsiDirectoryItem*, UInt32),
    get_type_info_count : Proc(IFsiDirectoryItem*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFsiDirectoryItem*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFsiDirectoryItem*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFsiDirectoryItem*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FullPath : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CreationTime : Proc(IFsiDirectoryItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_CreationTime : Proc(IFsiDirectoryItem*, Float64, Win32cr::Foundation::HRESULT),
    get_LastAccessedTime : Proc(IFsiDirectoryItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastAccessedTime : Proc(IFsiDirectoryItem*, Float64, Win32cr::Foundation::HRESULT),
    get_LastModifiedTime : Proc(IFsiDirectoryItem*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastModifiedTime : Proc(IFsiDirectoryItem*, Float64, Win32cr::Foundation::HRESULT),
    get_IsHidden : Proc(IFsiDirectoryItem*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsHidden : Proc(IFsiDirectoryItem*, Int16, Win32cr::Foundation::HRESULT),
    file_system_name : Proc(IFsiDirectoryItem*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    file_system_path : Proc(IFsiDirectoryItem*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IFsiDirectoryItem*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IFsiDirectoryItem*, Int32*, Win32cr::Foundation::HRESULT),
    get_EnumFsiItems : Proc(IFsiDirectoryItem*, Void**, Win32cr::Foundation::HRESULT),
    add_directory : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_file : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR, Void*, Win32cr::Foundation::HRESULT),
    add_tree : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    add : Proc(IFsiDirectoryItem*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove_tree : Proc(IFsiDirectoryItem*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFsiDirectoryItem, lpVtbl : IFsiDirectoryItemVtbl* do
    GUID = LibC::GUID.new(0x2c941fdc_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IFsiDirectoryItem*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFsiDirectoryItem*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFsiDirectoryItem*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFsiDirectoryItem*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFsiDirectoryItem*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFsiDirectoryItem*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFsiDirectoryItem*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IFsiDirectoryItem*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pVal)
    end
    def get_FullPath(this : IFsiDirectoryItem*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullPath.call(this, pVal)
    end
    def get_CreationTime(this : IFsiDirectoryItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CreationTime.call(this, pVal)
    end
    def put_CreationTime(this : IFsiDirectoryItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CreationTime.call(this, newVal)
    end
    def get_LastAccessedTime(this : IFsiDirectoryItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastAccessedTime.call(this, pVal)
    end
    def put_LastAccessedTime(this : IFsiDirectoryItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastAccessedTime.call(this, newVal)
    end
    def get_LastModifiedTime(this : IFsiDirectoryItem*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastModifiedTime.call(this, pVal)
    end
    def put_LastModifiedTime(this : IFsiDirectoryItem*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastModifiedTime.call(this, newVal)
    end
    def get_IsHidden(this : IFsiDirectoryItem*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsHidden.call(this, pVal)
    end
    def put_IsHidden(this : IFsiDirectoryItem*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsHidden.call(this, newVal)
    end
    def file_system_name(this : IFsiDirectoryItem*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_name.call(this, fileSystem, pVal)
    end
    def file_system_path(this : IFsiDirectoryItem*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_path.call(this, fileSystem, pVal)
    end
    def get__NewEnum(this : IFsiDirectoryItem*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end
    def get_Item(this : IFsiDirectoryItem*, path : Win32cr::Foundation::BSTR, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, path, item)
    end
    def get_Count(this : IFsiDirectoryItem*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get_EnumFsiItems(this : IFsiDirectoryItem*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnumFsiItems.call(this, new_enum)
    end
    def add_directory(this : IFsiDirectoryItem*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_directory.call(this, path)
    end
    def add_file(this : IFsiDirectoryItem*, path : Win32cr::Foundation::BSTR, fileData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_file.call(this, path, fileData)
    end
    def add_tree(this : IFsiDirectoryItem*, sourceDirectory : Win32cr::Foundation::BSTR, includeBaseDirectory : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_tree.call(this, sourceDirectory, includeBaseDirectory)
    end
    def add(this : IFsiDirectoryItem*, item : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, item)
    end
    def remove(this : IFsiDirectoryItem*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, path)
    end
    def remove_tree(this : IFsiDirectoryItem*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_tree.call(this, path)
    end

  end

  @[Extern]
  record IFsiDirectoryItem2Vtbl,
    query_interface : Proc(IFsiDirectoryItem2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFsiDirectoryItem2*, UInt32),
    release : Proc(IFsiDirectoryItem2*, UInt32),
    get_type_info_count : Proc(IFsiDirectoryItem2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFsiDirectoryItem2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFsiDirectoryItem2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFsiDirectoryItem2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Name : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_FullPath : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_CreationTime : Proc(IFsiDirectoryItem2*, Float64*, Win32cr::Foundation::HRESULT),
    put_CreationTime : Proc(IFsiDirectoryItem2*, Float64, Win32cr::Foundation::HRESULT),
    get_LastAccessedTime : Proc(IFsiDirectoryItem2*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastAccessedTime : Proc(IFsiDirectoryItem2*, Float64, Win32cr::Foundation::HRESULT),
    get_LastModifiedTime : Proc(IFsiDirectoryItem2*, Float64*, Win32cr::Foundation::HRESULT),
    put_LastModifiedTime : Proc(IFsiDirectoryItem2*, Float64, Win32cr::Foundation::HRESULT),
    get_IsHidden : Proc(IFsiDirectoryItem2*, Int16*, Win32cr::Foundation::HRESULT),
    put_IsHidden : Proc(IFsiDirectoryItem2*, Int16, Win32cr::Foundation::HRESULT),
    file_system_name : Proc(IFsiDirectoryItem2*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    file_system_path : Proc(IFsiDirectoryItem2*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get__NewEnum : Proc(IFsiDirectoryItem2*, Void**, Win32cr::Foundation::HRESULT),
    get_Item : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_Count : Proc(IFsiDirectoryItem2*, Int32*, Win32cr::Foundation::HRESULT),
    get_EnumFsiItems : Proc(IFsiDirectoryItem2*, Void**, Win32cr::Foundation::HRESULT),
    add_directory : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_file : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR, Void*, Win32cr::Foundation::HRESULT),
    add_tree : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT),
    add : Proc(IFsiDirectoryItem2*, Void*, Win32cr::Foundation::HRESULT),
    remove : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    remove_tree : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    add_tree_with_named_streams : Proc(IFsiDirectoryItem2*, Win32cr::Foundation::BSTR, Int16, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFsiDirectoryItem2, lpVtbl : IFsiDirectoryItem2Vtbl* do
    GUID = LibC::GUID.new(0xf7fb4b9b_u32, 0x6d96_u16, 0x4d7b_u16, StaticArray[0x91_u8, 0x15_u8, 0x20_u8, 0x1b_u8, 0x14_u8, 0x48_u8, 0x11_u8, 0xef_u8])
    def query_interface(this : IFsiDirectoryItem2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFsiDirectoryItem2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFsiDirectoryItem2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFsiDirectoryItem2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFsiDirectoryItem2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFsiDirectoryItem2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFsiDirectoryItem2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Name(this : IFsiDirectoryItem2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Name.call(this, pVal)
    end
    def get_FullPath(this : IFsiDirectoryItem2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FullPath.call(this, pVal)
    end
    def get_CreationTime(this : IFsiDirectoryItem2*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CreationTime.call(this, pVal)
    end
    def put_CreationTime(this : IFsiDirectoryItem2*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CreationTime.call(this, newVal)
    end
    def get_LastAccessedTime(this : IFsiDirectoryItem2*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastAccessedTime.call(this, pVal)
    end
    def put_LastAccessedTime(this : IFsiDirectoryItem2*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastAccessedTime.call(this, newVal)
    end
    def get_LastModifiedTime(this : IFsiDirectoryItem2*, pVal : Float64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_LastModifiedTime.call(this, pVal)
    end
    def put_LastModifiedTime(this : IFsiDirectoryItem2*, newVal : Float64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_LastModifiedTime.call(this, newVal)
    end
    def get_IsHidden(this : IFsiDirectoryItem2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_IsHidden.call(this, pVal)
    end
    def put_IsHidden(this : IFsiDirectoryItem2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_IsHidden.call(this, newVal)
    end
    def file_system_name(this : IFsiDirectoryItem2*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_name.call(this, fileSystem, pVal)
    end
    def file_system_path(this : IFsiDirectoryItem2*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.file_system_path.call(this, fileSystem, pVal)
    end
    def get__NewEnum(this : IFsiDirectoryItem2*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get__NewEnum.call(this, new_enum)
    end
    def get_Item(this : IFsiDirectoryItem2*, path : Win32cr::Foundation::BSTR, item : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Item.call(this, path, item)
    end
    def get_Count(this : IFsiDirectoryItem2*, count : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Count.call(this, count)
    end
    def get_EnumFsiItems(this : IFsiDirectoryItem2*, new_enum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_EnumFsiItems.call(this, new_enum)
    end
    def add_directory(this : IFsiDirectoryItem2*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_directory.call(this, path)
    end
    def add_file(this : IFsiDirectoryItem2*, path : Win32cr::Foundation::BSTR, fileData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_file.call(this, path, fileData)
    end
    def add_tree(this : IFsiDirectoryItem2*, sourceDirectory : Win32cr::Foundation::BSTR, includeBaseDirectory : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_tree.call(this, sourceDirectory, includeBaseDirectory)
    end
    def add(this : IFsiDirectoryItem2*, item : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add.call(this, item)
    end
    def remove(this : IFsiDirectoryItem2*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove.call(this, path)
    end
    def remove_tree(this : IFsiDirectoryItem2*, path : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.remove_tree.call(this, path)
    end
    def add_tree_with_named_streams(this : IFsiDirectoryItem2*, sourceDirectory : Win32cr::Foundation::BSTR, includeBaseDirectory : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_tree_with_named_streams.call(this, sourceDirectory, includeBaseDirectory)
    end

  end

  @[Extern]
  record IFileSystemImageVtbl,
    query_interface : Proc(IFileSystemImage*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSystemImage*, UInt32),
    release : Proc(IFileSystemImage*, UInt32),
    get_type_info_count : Proc(IFileSystemImage*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFileSystemImage*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFileSystemImage*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFileSystemImage*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Root : Proc(IFileSystemImage*, Void**, Win32cr::Foundation::HRESULT),
    get_SessionStartBlock : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    put_SessionStartBlock : Proc(IFileSystemImage*, Int32, Win32cr::Foundation::HRESULT),
    get_FreeMediaBlocks : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    put_FreeMediaBlocks : Proc(IFileSystemImage*, Int32, Win32cr::Foundation::HRESULT),
    set_max_media_blocks_from_device : Proc(IFileSystemImage*, Void*, Win32cr::Foundation::HRESULT),
    get_UsedBlocks : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    get_VolumeName : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_VolumeName : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ImportedVolumeName : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BootImageOptions : Proc(IFileSystemImage*, Void**, Win32cr::Foundation::HRESULT),
    put_BootImageOptions : Proc(IFileSystemImage*, Void*, Win32cr::Foundation::HRESULT),
    get_FileCount : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    get_DirectoryCount : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    get_WorkingDirectory : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_WorkingDirectory : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ChangePoint : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    get_StrictFileSystemCompliance : Proc(IFileSystemImage*, Int16*, Win32cr::Foundation::HRESULT),
    put_StrictFileSystemCompliance : Proc(IFileSystemImage*, Int16, Win32cr::Foundation::HRESULT),
    get_UseRestrictedCharacterSet : Proc(IFileSystemImage*, Int16*, Win32cr::Foundation::HRESULT),
    put_UseRestrictedCharacterSet : Proc(IFileSystemImage*, Int16, Win32cr::Foundation::HRESULT),
    get_FileSystemsToCreate : Proc(IFileSystemImage*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    put_FileSystemsToCreate : Proc(IFileSystemImage*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::HRESULT),
    get_FileSystemsSupported : Proc(IFileSystemImage*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    put_UDFRevision : Proc(IFileSystemImage*, Int32, Win32cr::Foundation::HRESULT),
    get_UDFRevision : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    get_UDFRevisionsSupported : Proc(IFileSystemImage*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    choose_image_defaults : Proc(IFileSystemImage*, Void*, Win32cr::Foundation::HRESULT),
    choose_image_defaults_for_media_type : Proc(IFileSystemImage*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE, Win32cr::Foundation::HRESULT),
    put_ISO9660InterchangeLevel : Proc(IFileSystemImage*, Int32, Win32cr::Foundation::HRESULT),
    get_ISO9660InterchangeLevel : Proc(IFileSystemImage*, Int32*, Win32cr::Foundation::HRESULT),
    get_ISO9660InterchangeLevelsSupported : Proc(IFileSystemImage*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    create_result_image : Proc(IFileSystemImage*, Void**, Win32cr::Foundation::HRESULT),
    exists : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR, Win32cr::Storage::Imapi::FsiItemType*, Win32cr::Foundation::HRESULT),
    calculate_disc_identifier : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    identify_file_systems_on_disc : Proc(IFileSystemImage*, Void*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    get_default_file_system_for_import : Proc(IFileSystemImage*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    import_file_system : Proc(IFileSystemImage*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    import_specific_file_system : Proc(IFileSystemImage*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::HRESULT),
    rollback_to_change_point : Proc(IFileSystemImage*, Int32, Win32cr::Foundation::HRESULT),
    lock_in_change_point : Proc(IFileSystemImage*, Win32cr::Foundation::HRESULT),
    create_directory_item : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    create_file_item : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_VolumeNameUDF : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumeNameJoliet : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumeNameISO9660 : Proc(IFileSystemImage*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_StageFiles : Proc(IFileSystemImage*, Int16*, Win32cr::Foundation::HRESULT),
    put_StageFiles : Proc(IFileSystemImage*, Int16, Win32cr::Foundation::HRESULT),
    get_MultisessionInterfaces : Proc(IFileSystemImage*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_MultisessionInterfaces : Proc(IFileSystemImage*, Win32cr::System::Com::SAFEARRAY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFileSystemImage, lpVtbl : IFileSystemImageVtbl* do
    GUID = LibC::GUID.new(0x2c941fe1_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : IFileSystemImage*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSystemImage*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSystemImage*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFileSystemImage*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFileSystemImage*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFileSystemImage*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFileSystemImage*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Root(this : IFileSystemImage*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Root.call(this, pVal)
    end
    def get_SessionStartBlock(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SessionStartBlock.call(this, pVal)
    end
    def put_SessionStartBlock(this : IFileSystemImage*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SessionStartBlock.call(this, newVal)
    end
    def get_FreeMediaBlocks(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeMediaBlocks.call(this, pVal)
    end
    def put_FreeMediaBlocks(this : IFileSystemImage*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FreeMediaBlocks.call(this, newVal)
    end
    def set_max_media_blocks_from_device(this : IFileSystemImage*, discRecorder : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_max_media_blocks_from_device.call(this, discRecorder)
    end
    def get_UsedBlocks(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedBlocks.call(this, pVal)
    end
    def get_VolumeName(this : IFileSystemImage*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeName.call(this, pVal)
    end
    def put_VolumeName(this : IFileSystemImage*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VolumeName.call(this, newVal)
    end
    def get_ImportedVolumeName(this : IFileSystemImage*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImportedVolumeName.call(this, pVal)
    end
    def get_BootImageOptions(this : IFileSystemImage*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BootImageOptions.call(this, pVal)
    end
    def put_BootImageOptions(this : IFileSystemImage*, newVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BootImageOptions.call(this, newVal)
    end
    def get_FileCount(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileCount.call(this, pVal)
    end
    def get_DirectoryCount(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DirectoryCount.call(this, pVal)
    end
    def get_WorkingDirectory(this : IFileSystemImage*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WorkingDirectory.call(this, pVal)
    end
    def put_WorkingDirectory(this : IFileSystemImage*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WorkingDirectory.call(this, newVal)
    end
    def get_ChangePoint(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChangePoint.call(this, pVal)
    end
    def get_StrictFileSystemCompliance(this : IFileSystemImage*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StrictFileSystemCompliance.call(this, pVal)
    end
    def put_StrictFileSystemCompliance(this : IFileSystemImage*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StrictFileSystemCompliance.call(this, newVal)
    end
    def get_UseRestrictedCharacterSet(this : IFileSystemImage*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseRestrictedCharacterSet.call(this, pVal)
    end
    def put_UseRestrictedCharacterSet(this : IFileSystemImage*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseRestrictedCharacterSet.call(this, newVal)
    end
    def get_FileSystemsToCreate(this : IFileSystemImage*, pVal : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileSystemsToCreate.call(this, pVal)
    end
    def put_FileSystemsToCreate(this : IFileSystemImage*, newVal : Win32cr::Storage::Imapi::FsiFileSystems) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileSystemsToCreate.call(this, newVal)
    end
    def get_FileSystemsSupported(this : IFileSystemImage*, pVal : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileSystemsSupported.call(this, pVal)
    end
    def put_UDFRevision(this : IFileSystemImage*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UDFRevision.call(this, newVal)
    end
    def get_UDFRevision(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UDFRevision.call(this, pVal)
    end
    def get_UDFRevisionsSupported(this : IFileSystemImage*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UDFRevisionsSupported.call(this, pVal)
    end
    def choose_image_defaults(this : IFileSystemImage*, discRecorder : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.choose_image_defaults.call(this, discRecorder)
    end
    def choose_image_defaults_for_media_type(this : IFileSystemImage*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.choose_image_defaults_for_media_type.call(this, value)
    end
    def put_ISO9660InterchangeLevel(this : IFileSystemImage*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ISO9660InterchangeLevel.call(this, newVal)
    end
    def get_ISO9660InterchangeLevel(this : IFileSystemImage*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ISO9660InterchangeLevel.call(this, pVal)
    end
    def get_ISO9660InterchangeLevelsSupported(this : IFileSystemImage*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ISO9660InterchangeLevelsSupported.call(this, pVal)
    end
    def create_result_image(this : IFileSystemImage*, resultStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_result_image.call(this, resultStream)
    end
    def exists(this : IFileSystemImage*, fullPath : Win32cr::Foundation::BSTR, itemType : Win32cr::Storage::Imapi::FsiItemType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists.call(this, fullPath, itemType)
    end
    def calculate_disc_identifier(this : IFileSystemImage*, discIdentifier : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.calculate_disc_identifier.call(this, discIdentifier)
    end
    def identify_file_systems_on_disc(this : IFileSystemImage*, discRecorder : Void*, fileSystems : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.identify_file_systems_on_disc.call(this, discRecorder, fileSystems)
    end
    def get_default_file_system_for_import(this : IFileSystemImage*, fileSystems : Win32cr::Storage::Imapi::FsiFileSystems, importDefault : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_file_system_for_import.call(this, fileSystems, importDefault)
    end
    def import_file_system(this : IFileSystemImage*, importedFileSystem : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_file_system.call(this, importedFileSystem)
    end
    def import_specific_file_system(this : IFileSystemImage*, fileSystemToUse : Win32cr::Storage::Imapi::FsiFileSystems) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_specific_file_system.call(this, fileSystemToUse)
    end
    def rollback_to_change_point(this : IFileSystemImage*, changePoint : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rollback_to_change_point.call(this, changePoint)
    end
    def lock_in_change_point(this : IFileSystemImage*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_in_change_point.call(this)
    end
    def create_directory_item(this : IFileSystemImage*, name : Win32cr::Foundation::BSTR, newItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_directory_item.call(this, name, newItem)
    end
    def create_file_item(this : IFileSystemImage*, name : Win32cr::Foundation::BSTR, newItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_file_item.call(this, name, newItem)
    end
    def get_VolumeNameUDF(this : IFileSystemImage*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameUDF.call(this, pVal)
    end
    def get_VolumeNameJoliet(this : IFileSystemImage*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameJoliet.call(this, pVal)
    end
    def get_VolumeNameISO9660(this : IFileSystemImage*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameISO9660.call(this, pVal)
    end
    def get_StageFiles(this : IFileSystemImage*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StageFiles.call(this, pVal)
    end
    def put_StageFiles(this : IFileSystemImage*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StageFiles.call(this, newVal)
    end
    def get_MultisessionInterfaces(this : IFileSystemImage*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MultisessionInterfaces.call(this, pVal)
    end
    def put_MultisessionInterfaces(this : IFileSystemImage*, newVal : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MultisessionInterfaces.call(this, newVal)
    end

  end

  @[Extern]
  record IFileSystemImage2Vtbl,
    query_interface : Proc(IFileSystemImage2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSystemImage2*, UInt32),
    release : Proc(IFileSystemImage2*, UInt32),
    get_type_info_count : Proc(IFileSystemImage2*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFileSystemImage2*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFileSystemImage2*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFileSystemImage2*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Root : Proc(IFileSystemImage2*, Void**, Win32cr::Foundation::HRESULT),
    get_SessionStartBlock : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    put_SessionStartBlock : Proc(IFileSystemImage2*, Int32, Win32cr::Foundation::HRESULT),
    get_FreeMediaBlocks : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    put_FreeMediaBlocks : Proc(IFileSystemImage2*, Int32, Win32cr::Foundation::HRESULT),
    set_max_media_blocks_from_device : Proc(IFileSystemImage2*, Void*, Win32cr::Foundation::HRESULT),
    get_UsedBlocks : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    get_VolumeName : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_VolumeName : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ImportedVolumeName : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BootImageOptions : Proc(IFileSystemImage2*, Void**, Win32cr::Foundation::HRESULT),
    put_BootImageOptions : Proc(IFileSystemImage2*, Void*, Win32cr::Foundation::HRESULT),
    get_FileCount : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    get_DirectoryCount : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    get_WorkingDirectory : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_WorkingDirectory : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ChangePoint : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    get_StrictFileSystemCompliance : Proc(IFileSystemImage2*, Int16*, Win32cr::Foundation::HRESULT),
    put_StrictFileSystemCompliance : Proc(IFileSystemImage2*, Int16, Win32cr::Foundation::HRESULT),
    get_UseRestrictedCharacterSet : Proc(IFileSystemImage2*, Int16*, Win32cr::Foundation::HRESULT),
    put_UseRestrictedCharacterSet : Proc(IFileSystemImage2*, Int16, Win32cr::Foundation::HRESULT),
    get_FileSystemsToCreate : Proc(IFileSystemImage2*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    put_FileSystemsToCreate : Proc(IFileSystemImage2*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::HRESULT),
    get_FileSystemsSupported : Proc(IFileSystemImage2*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    put_UDFRevision : Proc(IFileSystemImage2*, Int32, Win32cr::Foundation::HRESULT),
    get_UDFRevision : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    get_UDFRevisionsSupported : Proc(IFileSystemImage2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    choose_image_defaults : Proc(IFileSystemImage2*, Void*, Win32cr::Foundation::HRESULT),
    choose_image_defaults_for_media_type : Proc(IFileSystemImage2*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE, Win32cr::Foundation::HRESULT),
    put_ISO9660InterchangeLevel : Proc(IFileSystemImage2*, Int32, Win32cr::Foundation::HRESULT),
    get_ISO9660InterchangeLevel : Proc(IFileSystemImage2*, Int32*, Win32cr::Foundation::HRESULT),
    get_ISO9660InterchangeLevelsSupported : Proc(IFileSystemImage2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    create_result_image : Proc(IFileSystemImage2*, Void**, Win32cr::Foundation::HRESULT),
    exists : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR, Win32cr::Storage::Imapi::FsiItemType*, Win32cr::Foundation::HRESULT),
    calculate_disc_identifier : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    identify_file_systems_on_disc : Proc(IFileSystemImage2*, Void*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    get_default_file_system_for_import : Proc(IFileSystemImage2*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    import_file_system : Proc(IFileSystemImage2*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    import_specific_file_system : Proc(IFileSystemImage2*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::HRESULT),
    rollback_to_change_point : Proc(IFileSystemImage2*, Int32, Win32cr::Foundation::HRESULT),
    lock_in_change_point : Proc(IFileSystemImage2*, Win32cr::Foundation::HRESULT),
    create_directory_item : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    create_file_item : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_VolumeNameUDF : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumeNameJoliet : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumeNameISO9660 : Proc(IFileSystemImage2*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_StageFiles : Proc(IFileSystemImage2*, Int16*, Win32cr::Foundation::HRESULT),
    put_StageFiles : Proc(IFileSystemImage2*, Int16, Win32cr::Foundation::HRESULT),
    get_MultisessionInterfaces : Proc(IFileSystemImage2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_MultisessionInterfaces : Proc(IFileSystemImage2*, Win32cr::System::Com::SAFEARRAY*, Win32cr::Foundation::HRESULT),
    get_BootImageOptionsArray : Proc(IFileSystemImage2*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_BootImageOptionsArray : Proc(IFileSystemImage2*, Win32cr::System::Com::SAFEARRAY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFileSystemImage2, lpVtbl : IFileSystemImage2Vtbl* do
    GUID = LibC::GUID.new(0xd7644b2c_u32, 0x1537_u16, 0x4767_u16, StaticArray[0xb6_u8, 0x2f_u8, 0xf1_u8, 0x38_u8, 0x7b_u8, 0x2_u8, 0xdd_u8, 0xfd_u8])
    def query_interface(this : IFileSystemImage2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSystemImage2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSystemImage2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFileSystemImage2*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFileSystemImage2*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFileSystemImage2*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFileSystemImage2*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Root(this : IFileSystemImage2*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Root.call(this, pVal)
    end
    def get_SessionStartBlock(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SessionStartBlock.call(this, pVal)
    end
    def put_SessionStartBlock(this : IFileSystemImage2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SessionStartBlock.call(this, newVal)
    end
    def get_FreeMediaBlocks(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeMediaBlocks.call(this, pVal)
    end
    def put_FreeMediaBlocks(this : IFileSystemImage2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FreeMediaBlocks.call(this, newVal)
    end
    def set_max_media_blocks_from_device(this : IFileSystemImage2*, discRecorder : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_max_media_blocks_from_device.call(this, discRecorder)
    end
    def get_UsedBlocks(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedBlocks.call(this, pVal)
    end
    def get_VolumeName(this : IFileSystemImage2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeName.call(this, pVal)
    end
    def put_VolumeName(this : IFileSystemImage2*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VolumeName.call(this, newVal)
    end
    def get_ImportedVolumeName(this : IFileSystemImage2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImportedVolumeName.call(this, pVal)
    end
    def get_BootImageOptions(this : IFileSystemImage2*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BootImageOptions.call(this, pVal)
    end
    def put_BootImageOptions(this : IFileSystemImage2*, newVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BootImageOptions.call(this, newVal)
    end
    def get_FileCount(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileCount.call(this, pVal)
    end
    def get_DirectoryCount(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DirectoryCount.call(this, pVal)
    end
    def get_WorkingDirectory(this : IFileSystemImage2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WorkingDirectory.call(this, pVal)
    end
    def put_WorkingDirectory(this : IFileSystemImage2*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WorkingDirectory.call(this, newVal)
    end
    def get_ChangePoint(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChangePoint.call(this, pVal)
    end
    def get_StrictFileSystemCompliance(this : IFileSystemImage2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StrictFileSystemCompliance.call(this, pVal)
    end
    def put_StrictFileSystemCompliance(this : IFileSystemImage2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StrictFileSystemCompliance.call(this, newVal)
    end
    def get_UseRestrictedCharacterSet(this : IFileSystemImage2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseRestrictedCharacterSet.call(this, pVal)
    end
    def put_UseRestrictedCharacterSet(this : IFileSystemImage2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseRestrictedCharacterSet.call(this, newVal)
    end
    def get_FileSystemsToCreate(this : IFileSystemImage2*, pVal : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileSystemsToCreate.call(this, pVal)
    end
    def put_FileSystemsToCreate(this : IFileSystemImage2*, newVal : Win32cr::Storage::Imapi::FsiFileSystems) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileSystemsToCreate.call(this, newVal)
    end
    def get_FileSystemsSupported(this : IFileSystemImage2*, pVal : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileSystemsSupported.call(this, pVal)
    end
    def put_UDFRevision(this : IFileSystemImage2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UDFRevision.call(this, newVal)
    end
    def get_UDFRevision(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UDFRevision.call(this, pVal)
    end
    def get_UDFRevisionsSupported(this : IFileSystemImage2*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UDFRevisionsSupported.call(this, pVal)
    end
    def choose_image_defaults(this : IFileSystemImage2*, discRecorder : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.choose_image_defaults.call(this, discRecorder)
    end
    def choose_image_defaults_for_media_type(this : IFileSystemImage2*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.choose_image_defaults_for_media_type.call(this, value)
    end
    def put_ISO9660InterchangeLevel(this : IFileSystemImage2*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ISO9660InterchangeLevel.call(this, newVal)
    end
    def get_ISO9660InterchangeLevel(this : IFileSystemImage2*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ISO9660InterchangeLevel.call(this, pVal)
    end
    def get_ISO9660InterchangeLevelsSupported(this : IFileSystemImage2*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ISO9660InterchangeLevelsSupported.call(this, pVal)
    end
    def create_result_image(this : IFileSystemImage2*, resultStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_result_image.call(this, resultStream)
    end
    def exists(this : IFileSystemImage2*, fullPath : Win32cr::Foundation::BSTR, itemType : Win32cr::Storage::Imapi::FsiItemType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists.call(this, fullPath, itemType)
    end
    def calculate_disc_identifier(this : IFileSystemImage2*, discIdentifier : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.calculate_disc_identifier.call(this, discIdentifier)
    end
    def identify_file_systems_on_disc(this : IFileSystemImage2*, discRecorder : Void*, fileSystems : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.identify_file_systems_on_disc.call(this, discRecorder, fileSystems)
    end
    def get_default_file_system_for_import(this : IFileSystemImage2*, fileSystems : Win32cr::Storage::Imapi::FsiFileSystems, importDefault : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_file_system_for_import.call(this, fileSystems, importDefault)
    end
    def import_file_system(this : IFileSystemImage2*, importedFileSystem : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_file_system.call(this, importedFileSystem)
    end
    def import_specific_file_system(this : IFileSystemImage2*, fileSystemToUse : Win32cr::Storage::Imapi::FsiFileSystems) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_specific_file_system.call(this, fileSystemToUse)
    end
    def rollback_to_change_point(this : IFileSystemImage2*, changePoint : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rollback_to_change_point.call(this, changePoint)
    end
    def lock_in_change_point(this : IFileSystemImage2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_in_change_point.call(this)
    end
    def create_directory_item(this : IFileSystemImage2*, name : Win32cr::Foundation::BSTR, newItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_directory_item.call(this, name, newItem)
    end
    def create_file_item(this : IFileSystemImage2*, name : Win32cr::Foundation::BSTR, newItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_file_item.call(this, name, newItem)
    end
    def get_VolumeNameUDF(this : IFileSystemImage2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameUDF.call(this, pVal)
    end
    def get_VolumeNameJoliet(this : IFileSystemImage2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameJoliet.call(this, pVal)
    end
    def get_VolumeNameISO9660(this : IFileSystemImage2*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameISO9660.call(this, pVal)
    end
    def get_StageFiles(this : IFileSystemImage2*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StageFiles.call(this, pVal)
    end
    def put_StageFiles(this : IFileSystemImage2*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StageFiles.call(this, newVal)
    end
    def get_MultisessionInterfaces(this : IFileSystemImage2*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MultisessionInterfaces.call(this, pVal)
    end
    def put_MultisessionInterfaces(this : IFileSystemImage2*, newVal : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MultisessionInterfaces.call(this, newVal)
    end
    def get_BootImageOptionsArray(this : IFileSystemImage2*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BootImageOptionsArray.call(this, pVal)
    end
    def put_BootImageOptionsArray(this : IFileSystemImage2*, newVal : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BootImageOptionsArray.call(this, newVal)
    end

  end

  @[Extern]
  record IFileSystemImage3Vtbl,
    query_interface : Proc(IFileSystemImage3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IFileSystemImage3*, UInt32),
    release : Proc(IFileSystemImage3*, UInt32),
    get_type_info_count : Proc(IFileSystemImage3*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IFileSystemImage3*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IFileSystemImage3*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IFileSystemImage3*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Root : Proc(IFileSystemImage3*, Void**, Win32cr::Foundation::HRESULT),
    get_SessionStartBlock : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    put_SessionStartBlock : Proc(IFileSystemImage3*, Int32, Win32cr::Foundation::HRESULT),
    get_FreeMediaBlocks : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    put_FreeMediaBlocks : Proc(IFileSystemImage3*, Int32, Win32cr::Foundation::HRESULT),
    set_max_media_blocks_from_device : Proc(IFileSystemImage3*, Void*, Win32cr::Foundation::HRESULT),
    get_UsedBlocks : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    get_VolumeName : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_VolumeName : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ImportedVolumeName : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_BootImageOptions : Proc(IFileSystemImage3*, Void**, Win32cr::Foundation::HRESULT),
    put_BootImageOptions : Proc(IFileSystemImage3*, Void*, Win32cr::Foundation::HRESULT),
    get_FileCount : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    get_DirectoryCount : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    get_WorkingDirectory : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    put_WorkingDirectory : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    get_ChangePoint : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    get_StrictFileSystemCompliance : Proc(IFileSystemImage3*, Int16*, Win32cr::Foundation::HRESULT),
    put_StrictFileSystemCompliance : Proc(IFileSystemImage3*, Int16, Win32cr::Foundation::HRESULT),
    get_UseRestrictedCharacterSet : Proc(IFileSystemImage3*, Int16*, Win32cr::Foundation::HRESULT),
    put_UseRestrictedCharacterSet : Proc(IFileSystemImage3*, Int16, Win32cr::Foundation::HRESULT),
    get_FileSystemsToCreate : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    put_FileSystemsToCreate : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::HRESULT),
    get_FileSystemsSupported : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    put_UDFRevision : Proc(IFileSystemImage3*, Int32, Win32cr::Foundation::HRESULT),
    get_UDFRevision : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    get_UDFRevisionsSupported : Proc(IFileSystemImage3*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    choose_image_defaults : Proc(IFileSystemImage3*, Void*, Win32cr::Foundation::HRESULT),
    choose_image_defaults_for_media_type : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE, Win32cr::Foundation::HRESULT),
    put_ISO9660InterchangeLevel : Proc(IFileSystemImage3*, Int32, Win32cr::Foundation::HRESULT),
    get_ISO9660InterchangeLevel : Proc(IFileSystemImage3*, Int32*, Win32cr::Foundation::HRESULT),
    get_ISO9660InterchangeLevelsSupported : Proc(IFileSystemImage3*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    create_result_image : Proc(IFileSystemImage3*, Void**, Win32cr::Foundation::HRESULT),
    exists : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR, Win32cr::Storage::Imapi::FsiItemType*, Win32cr::Foundation::HRESULT),
    calculate_disc_identifier : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    identify_file_systems_on_disc : Proc(IFileSystemImage3*, Void*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    get_default_file_system_for_import : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    import_file_system : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::FsiFileSystems*, Win32cr::Foundation::HRESULT),
    import_specific_file_system : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::HRESULT),
    rollback_to_change_point : Proc(IFileSystemImage3*, Int32, Win32cr::Foundation::HRESULT),
    lock_in_change_point : Proc(IFileSystemImage3*, Win32cr::Foundation::HRESULT),
    create_directory_item : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    create_file_item : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR, Void**, Win32cr::Foundation::HRESULT),
    get_VolumeNameUDF : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumeNameJoliet : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_VolumeNameISO9660 : Proc(IFileSystemImage3*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_StageFiles : Proc(IFileSystemImage3*, Int16*, Win32cr::Foundation::HRESULT),
    put_StageFiles : Proc(IFileSystemImage3*, Int16, Win32cr::Foundation::HRESULT),
    get_MultisessionInterfaces : Proc(IFileSystemImage3*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_MultisessionInterfaces : Proc(IFileSystemImage3*, Win32cr::System::Com::SAFEARRAY*, Win32cr::Foundation::HRESULT),
    get_BootImageOptionsArray : Proc(IFileSystemImage3*, Win32cr::System::Com::SAFEARRAY**, Win32cr::Foundation::HRESULT),
    put_BootImageOptionsArray : Proc(IFileSystemImage3*, Win32cr::System::Com::SAFEARRAY*, Win32cr::Foundation::HRESULT),
    get_CreateRedundantUdfMetadataFiles : Proc(IFileSystemImage3*, Int16*, Win32cr::Foundation::HRESULT),
    put_CreateRedundantUdfMetadataFiles : Proc(IFileSystemImage3*, Int16, Win32cr::Foundation::HRESULT),
    probe_specific_file_system : Proc(IFileSystemImage3*, Win32cr::Storage::Imapi::FsiFileSystems, Int16*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IFileSystemImage3, lpVtbl : IFileSystemImage3Vtbl* do
    GUID = LibC::GUID.new(0x7cff842c_u32, 0x7e97_u16, 0x4807_u16, StaticArray[0x83_u8, 0x4_u8, 0x91_u8, 0xd_u8, 0xd8_u8, 0xf7_u8, 0xc0_u8, 0x51_u8])
    def query_interface(this : IFileSystemImage3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IFileSystemImage3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IFileSystemImage3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IFileSystemImage3*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IFileSystemImage3*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IFileSystemImage3*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IFileSystemImage3*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Root(this : IFileSystemImage3*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Root.call(this, pVal)
    end
    def get_SessionStartBlock(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_SessionStartBlock.call(this, pVal)
    end
    def put_SessionStartBlock(this : IFileSystemImage3*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_SessionStartBlock.call(this, newVal)
    end
    def get_FreeMediaBlocks(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FreeMediaBlocks.call(this, pVal)
    end
    def put_FreeMediaBlocks(this : IFileSystemImage3*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FreeMediaBlocks.call(this, newVal)
    end
    def set_max_media_blocks_from_device(this : IFileSystemImage3*, discRecorder : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_max_media_blocks_from_device.call(this, discRecorder)
    end
    def get_UsedBlocks(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UsedBlocks.call(this, pVal)
    end
    def get_VolumeName(this : IFileSystemImage3*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeName.call(this, pVal)
    end
    def put_VolumeName(this : IFileSystemImage3*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_VolumeName.call(this, newVal)
    end
    def get_ImportedVolumeName(this : IFileSystemImage3*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ImportedVolumeName.call(this, pVal)
    end
    def get_BootImageOptions(this : IFileSystemImage3*, pVal : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BootImageOptions.call(this, pVal)
    end
    def put_BootImageOptions(this : IFileSystemImage3*, newVal : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BootImageOptions.call(this, newVal)
    end
    def get_FileCount(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileCount.call(this, pVal)
    end
    def get_DirectoryCount(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_DirectoryCount.call(this, pVal)
    end
    def get_WorkingDirectory(this : IFileSystemImage3*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_WorkingDirectory.call(this, pVal)
    end
    def put_WorkingDirectory(this : IFileSystemImage3*, newVal : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_WorkingDirectory.call(this, newVal)
    end
    def get_ChangePoint(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ChangePoint.call(this, pVal)
    end
    def get_StrictFileSystemCompliance(this : IFileSystemImage3*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StrictFileSystemCompliance.call(this, pVal)
    end
    def put_StrictFileSystemCompliance(this : IFileSystemImage3*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StrictFileSystemCompliance.call(this, newVal)
    end
    def get_UseRestrictedCharacterSet(this : IFileSystemImage3*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UseRestrictedCharacterSet.call(this, pVal)
    end
    def put_UseRestrictedCharacterSet(this : IFileSystemImage3*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UseRestrictedCharacterSet.call(this, newVal)
    end
    def get_FileSystemsToCreate(this : IFileSystemImage3*, pVal : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileSystemsToCreate.call(this, pVal)
    end
    def put_FileSystemsToCreate(this : IFileSystemImage3*, newVal : Win32cr::Storage::Imapi::FsiFileSystems) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_FileSystemsToCreate.call(this, newVal)
    end
    def get_FileSystemsSupported(this : IFileSystemImage3*, pVal : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_FileSystemsSupported.call(this, pVal)
    end
    def put_UDFRevision(this : IFileSystemImage3*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_UDFRevision.call(this, newVal)
    end
    def get_UDFRevision(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UDFRevision.call(this, pVal)
    end
    def get_UDFRevisionsSupported(this : IFileSystemImage3*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_UDFRevisionsSupported.call(this, pVal)
    end
    def choose_image_defaults(this : IFileSystemImage3*, discRecorder : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.choose_image_defaults.call(this, discRecorder)
    end
    def choose_image_defaults_for_media_type(this : IFileSystemImage3*, value : Win32cr::Storage::Imapi::IMAPI_MEDIA_PHYSICAL_TYPE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.choose_image_defaults_for_media_type.call(this, value)
    end
    def put_ISO9660InterchangeLevel(this : IFileSystemImage3*, newVal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_ISO9660InterchangeLevel.call(this, newVal)
    end
    def get_ISO9660InterchangeLevel(this : IFileSystemImage3*, pVal : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ISO9660InterchangeLevel.call(this, pVal)
    end
    def get_ISO9660InterchangeLevelsSupported(this : IFileSystemImage3*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_ISO9660InterchangeLevelsSupported.call(this, pVal)
    end
    def create_result_image(this : IFileSystemImage3*, resultStream : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_result_image.call(this, resultStream)
    end
    def exists(this : IFileSystemImage3*, fullPath : Win32cr::Foundation::BSTR, itemType : Win32cr::Storage::Imapi::FsiItemType*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.exists.call(this, fullPath, itemType)
    end
    def calculate_disc_identifier(this : IFileSystemImage3*, discIdentifier : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.calculate_disc_identifier.call(this, discIdentifier)
    end
    def identify_file_systems_on_disc(this : IFileSystemImage3*, discRecorder : Void*, fileSystems : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.identify_file_systems_on_disc.call(this, discRecorder, fileSystems)
    end
    def get_default_file_system_for_import(this : IFileSystemImage3*, fileSystems : Win32cr::Storage::Imapi::FsiFileSystems, importDefault : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_default_file_system_for_import.call(this, fileSystems, importDefault)
    end
    def import_file_system(this : IFileSystemImage3*, importedFileSystem : Win32cr::Storage::Imapi::FsiFileSystems*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_file_system.call(this, importedFileSystem)
    end
    def import_specific_file_system(this : IFileSystemImage3*, fileSystemToUse : Win32cr::Storage::Imapi::FsiFileSystems) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.import_specific_file_system.call(this, fileSystemToUse)
    end
    def rollback_to_change_point(this : IFileSystemImage3*, changePoint : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.rollback_to_change_point.call(this, changePoint)
    end
    def lock_in_change_point(this : IFileSystemImage3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.lock_in_change_point.call(this)
    end
    def create_directory_item(this : IFileSystemImage3*, name : Win32cr::Foundation::BSTR, newItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_directory_item.call(this, name, newItem)
    end
    def create_file_item(this : IFileSystemImage3*, name : Win32cr::Foundation::BSTR, newItem : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_file_item.call(this, name, newItem)
    end
    def get_VolumeNameUDF(this : IFileSystemImage3*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameUDF.call(this, pVal)
    end
    def get_VolumeNameJoliet(this : IFileSystemImage3*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameJoliet.call(this, pVal)
    end
    def get_VolumeNameISO9660(this : IFileSystemImage3*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_VolumeNameISO9660.call(this, pVal)
    end
    def get_StageFiles(this : IFileSystemImage3*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_StageFiles.call(this, pVal)
    end
    def put_StageFiles(this : IFileSystemImage3*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_StageFiles.call(this, newVal)
    end
    def get_MultisessionInterfaces(this : IFileSystemImage3*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_MultisessionInterfaces.call(this, pVal)
    end
    def put_MultisessionInterfaces(this : IFileSystemImage3*, newVal : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_MultisessionInterfaces.call(this, newVal)
    end
    def get_BootImageOptionsArray(this : IFileSystemImage3*, pVal : Win32cr::System::Com::SAFEARRAY**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_BootImageOptionsArray.call(this, pVal)
    end
    def put_BootImageOptionsArray(this : IFileSystemImage3*, newVal : Win32cr::System::Com::SAFEARRAY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_BootImageOptionsArray.call(this, newVal)
    end
    def get_CreateRedundantUdfMetadataFiles(this : IFileSystemImage3*, pVal : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_CreateRedundantUdfMetadataFiles.call(this, pVal)
    end
    def put_CreateRedundantUdfMetadataFiles(this : IFileSystemImage3*, newVal : Int16) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.put_CreateRedundantUdfMetadataFiles.call(this, newVal)
    end
    def probe_specific_file_system(this : IFileSystemImage3*, fileSystemToProbe : Win32cr::Storage::Imapi::FsiFileSystems, isAppendable : Int16*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.probe_specific_file_system.call(this, fileSystemToProbe, isAppendable)
    end

  end

  @[Extern]
  record DFileSystemImageEventsVtbl,
    query_interface : Proc(DFileSystemImageEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DFileSystemImageEvents*, UInt32),
    release : Proc(DFileSystemImageEvents*, UInt32),
    get_type_info_count : Proc(DFileSystemImageEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DFileSystemImageEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DFileSystemImageEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DFileSystemImageEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    update : Proc(DFileSystemImageEvents*, Void*, Win32cr::Foundation::BSTR, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DFileSystemImageEvents, lpVtbl : DFileSystemImageEventsVtbl* do
    GUID = LibC::GUID.new(0x2c941fdf_u32, 0x975b_u16, 0x59be_u16, StaticArray[0xa9_u8, 0x60_u8, 0x9a_u8, 0x2a_u8, 0x26_u8, 0x28_u8, 0x53_u8, 0xa5_u8])
    def query_interface(this : DFileSystemImageEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DFileSystemImageEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DFileSystemImageEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DFileSystemImageEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DFileSystemImageEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DFileSystemImageEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DFileSystemImageEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def update(this : DFileSystemImageEvents*, object : Void*, currentFile : Win32cr::Foundation::BSTR, copiedSectors : Int32, totalSectors : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update.call(this, object, currentFile, copiedSectors, totalSectors)
    end

  end

  @[Extern]
  record DFileSystemImageImportEventsVtbl,
    query_interface : Proc(DFileSystemImageImportEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(DFileSystemImageImportEvents*, UInt32),
    release : Proc(DFileSystemImageImportEvents*, UInt32),
    get_type_info_count : Proc(DFileSystemImageImportEvents*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(DFileSystemImageImportEvents*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(DFileSystemImageImportEvents*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(DFileSystemImageImportEvents*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    update_import : Proc(DFileSystemImageImportEvents*, Void*, Win32cr::Storage::Imapi::FsiFileSystems, Win32cr::Foundation::BSTR, Int32, Int32, Int32, Int32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record DFileSystemImageImportEvents, lpVtbl : DFileSystemImageImportEventsVtbl* do
    GUID = LibC::GUID.new(0xd25c30f9_u32, 0x4087_u16, 0x4366_u16, StaticArray[0x9e_u8, 0x24_u8, 0xe5_u8, 0x5b_u8, 0xe2_u8, 0x86_u8, 0x42_u8, 0x4b_u8])
    def query_interface(this : DFileSystemImageImportEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : DFileSystemImageImportEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : DFileSystemImageImportEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : DFileSystemImageImportEvents*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : DFileSystemImageImportEvents*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : DFileSystemImageImportEvents*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : DFileSystemImageImportEvents*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def update_import(this : DFileSystemImageImportEvents*, object : Void*, fileSystem : Win32cr::Storage::Imapi::FsiFileSystems, currentItem : Win32cr::Foundation::BSTR, importedDirectoryItems : Int32, totalDirectoryItems : Int32, importedFileItems : Int32, totalFileItems : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.update_import.call(this, object, fileSystem, currentItem, importedDirectoryItems, totalDirectoryItems, importedFileItems, totalFileItems)
    end

  end

  @[Extern]
  record IIsoImageManagerVtbl,
    query_interface : Proc(IIsoImageManager*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IIsoImageManager*, UInt32),
    release : Proc(IIsoImageManager*, UInt32),
    get_type_info_count : Proc(IIsoImageManager*, UInt32*, Win32cr::Foundation::HRESULT),
    get_type_info : Proc(IIsoImageManager*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_i_ds_of_names : Proc(IIsoImageManager*, LibC::GUID*, Win32cr::Foundation::PWSTR*, UInt32, UInt32, Int32*, Win32cr::Foundation::HRESULT),
    invoke_1 : Proc(IIsoImageManager*, Int32, LibC::GUID*, UInt32, UInt16, Win32cr::System::Com::DISPPARAMS*, Win32cr::System::Com::VARIANT*, Win32cr::System::Com::EXCEPINFO*, UInt32*, Win32cr::Foundation::HRESULT),
    get_Path : Proc(IIsoImageManager*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_Stream : Proc(IIsoImageManager*, Void**, Win32cr::Foundation::HRESULT),
    set_path : Proc(IIsoImageManager*, Win32cr::Foundation::BSTR, Win32cr::Foundation::HRESULT),
    set_stream : Proc(IIsoImageManager*, Void*, Win32cr::Foundation::HRESULT),
    validate : Proc(IIsoImageManager*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IIsoImageManager, lpVtbl : IIsoImageManagerVtbl* do
    GUID = LibC::GUID.new(0x6ca38be5_u32, 0xfbbb_u16, 0x4800_u16, StaticArray[0x95_u8, 0xa1_u8, 0xa4_u8, 0x38_u8, 0x86_u8, 0x5e_u8, 0xb0_u8, 0xd4_u8])
    def query_interface(this : IIsoImageManager*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IIsoImageManager*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IIsoImageManager*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_type_info_count(this : IIsoImageManager*, pctinfo : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info_count.call(this, pctinfo)
    end
    def get_type_info(this : IIsoImageManager*, iTInfo : UInt32, lcid : UInt32, ppTInfo : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_type_info.call(this, iTInfo, lcid, ppTInfo)
    end
    def get_i_ds_of_names(this : IIsoImageManager*, riid : LibC::GUID*, rgszNames : Win32cr::Foundation::PWSTR*, cNames : UInt32, lcid : UInt32, rgDispId : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_i_ds_of_names.call(this, riid, rgszNames, cNames, lcid, rgDispId)
    end
    def invoke_1(this : IIsoImageManager*, dispIdMember : Int32, riid : LibC::GUID*, lcid : UInt32, wFlags : UInt16, pDispParams : Win32cr::System::Com::DISPPARAMS*, pVarResult : Win32cr::System::Com::VARIANT*, pExcepInfo : Win32cr::System::Com::EXCEPINFO*, puArgErr : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.invoke_1.call(this, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)
    end
    def get_Path(this : IIsoImageManager*, pVal : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Path.call(this, pVal)
    end
    def get_Stream(this : IIsoImageManager*, data : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_Stream.call(this, data)
    end
    def set_path(this : IIsoImageManager*, val : Win32cr::Foundation::BSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_path.call(this, val)
    end
    def set_stream(this : IIsoImageManager*, data : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stream.call(this, data)
    end
    def validate(this : IIsoImageManager*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this)
    end

  end

  @[Extern]
  record IDiscRecorderVtbl,
    query_interface : Proc(IDiscRecorder*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscRecorder*, UInt32),
    release : Proc(IDiscRecorder*, UInt32),
    init : Proc(IDiscRecorder*, UInt8*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_recorder_guid : Proc(IDiscRecorder*, UInt8*, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    get_recorder_type : Proc(IDiscRecorder*, Win32cr::Storage::Imapi::RECORDER_TYPES*, Win32cr::Foundation::HRESULT),
    get_display_names : Proc(IDiscRecorder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_base_pn_pid : Proc(IDiscRecorder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_path : Proc(IDiscRecorder*, Win32cr::Foundation::BSTR*, Win32cr::Foundation::HRESULT),
    get_recorder_properties : Proc(IDiscRecorder*, Void**, Win32cr::Foundation::HRESULT),
    set_recorder_properties : Proc(IDiscRecorder*, Void*, Win32cr::Foundation::HRESULT),
    get_recorder_state : Proc(IDiscRecorder*, Win32cr::Storage::Imapi::DISC_RECORDER_STATE_FLAGS*, Win32cr::Foundation::HRESULT),
    open_exclusive : Proc(IDiscRecorder*, Win32cr::Foundation::HRESULT),
    query_media_type : Proc(IDiscRecorder*, Win32cr::Storage::Imapi::MEDIA_TYPES*, Win32cr::Storage::Imapi::MEDIA_FLAGS*, Win32cr::Foundation::HRESULT),
    query_media_info : Proc(IDiscRecorder*, UInt8*, UInt8*, UInt32*, UInt32*, UInt32*, Win32cr::Foundation::HRESULT),
    eject : Proc(IDiscRecorder*, Win32cr::Foundation::HRESULT),
    erase : Proc(IDiscRecorder*, UInt8, Win32cr::Foundation::HRESULT),
    close : Proc(IDiscRecorder*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscRecorder, lpVtbl : IDiscRecorderVtbl* do
    GUID = LibC::GUID.new(0x85ac9776_u32, 0xca88_u16, 0x4cf2_u16, StaticArray[0x89_u8, 0x4e_u8, 0x9_u8, 0x59_u8, 0x8c_u8, 0x7_u8, 0x8a_u8, 0x41_u8])
    def query_interface(this : IDiscRecorder*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscRecorder*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscRecorder*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def init(this : IDiscRecorder*, pbyUniqueID : UInt8*, nulIDSize : UInt32, nulDriveNumber : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.init.call(this, pbyUniqueID, nulIDSize, nulDriveNumber)
    end
    def get_recorder_guid(this : IDiscRecorder*, pbyUniqueID : UInt8*, ulBufferSize : UInt32, pulReturnSizeRequired : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_recorder_guid.call(this, pbyUniqueID, ulBufferSize, pulReturnSizeRequired)
    end
    def get_recorder_type(this : IDiscRecorder*, fTypeCode : Win32cr::Storage::Imapi::RECORDER_TYPES*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_recorder_type.call(this, fTypeCode)
    end
    def get_display_names(this : IDiscRecorder*, pbstrVendorID : Win32cr::Foundation::BSTR*, pbstrProductID : Win32cr::Foundation::BSTR*, pbstrRevision : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_display_names.call(this, pbstrVendorID, pbstrProductID, pbstrRevision)
    end
    def get_base_pn_pid(this : IDiscRecorder*, pbstrBasePnPID : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_base_pn_pid.call(this, pbstrBasePnPID)
    end
    def get_path(this : IDiscRecorder*, pbstrPath : Win32cr::Foundation::BSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_path.call(this, pbstrPath)
    end
    def get_recorder_properties(this : IDiscRecorder*, ppPropStg : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_recorder_properties.call(this, ppPropStg)
    end
    def set_recorder_properties(this : IDiscRecorder*, pPropStg : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_recorder_properties.call(this, pPropStg)
    end
    def get_recorder_state(this : IDiscRecorder*, pulDevStateFlags : Win32cr::Storage::Imapi::DISC_RECORDER_STATE_FLAGS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_recorder_state.call(this, pulDevStateFlags)
    end
    def open_exclusive(this : IDiscRecorder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_exclusive.call(this)
    end
    def query_media_type(this : IDiscRecorder*, fMediaType : Win32cr::Storage::Imapi::MEDIA_TYPES*, fMediaFlags : Win32cr::Storage::Imapi::MEDIA_FLAGS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_media_type.call(this, fMediaType, fMediaFlags)
    end
    def query_media_info(this : IDiscRecorder*, pbSessions : UInt8*, pbLastTrack : UInt8*, ulStartAddress : UInt32*, ulNextWritable : UInt32*, ulFreeBlocks : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_media_info.call(this, pbSessions, pbLastTrack, ulStartAddress, ulNextWritable, ulFreeBlocks)
    end
    def eject(this : IDiscRecorder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.eject.call(this)
    end
    def erase(this : IDiscRecorder*, bFullErase : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.erase.call(this, bFullErase)
    end
    def close(this : IDiscRecorder*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  @[Extern]
  record IEnumDiscRecordersVtbl,
    query_interface : Proc(IEnumDiscRecorders*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDiscRecorders*, UInt32),
    release : Proc(IEnumDiscRecorders*, UInt32),
    next__ : Proc(IEnumDiscRecorders*, UInt32, Void**, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDiscRecorders*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDiscRecorders*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDiscRecorders*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDiscRecorders, lpVtbl : IEnumDiscRecordersVtbl* do
    GUID = LibC::GUID.new(0x9b1921e1_u32, 0x54ac_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
    def query_interface(this : IEnumDiscRecorders*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDiscRecorders*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDiscRecorders*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDiscRecorders*, cRecorders : UInt32, ppRecorder : Void**, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cRecorders, ppRecorder, pcFetched)
    end
    def skip(this : IEnumDiscRecorders*, cRecorders : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cRecorders)
    end
    def reset(this : IEnumDiscRecorders*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDiscRecorders*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IEnumDiscMasterFormatsVtbl,
    query_interface : Proc(IEnumDiscMasterFormats*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IEnumDiscMasterFormats*, UInt32),
    release : Proc(IEnumDiscMasterFormats*, UInt32),
    next__ : Proc(IEnumDiscMasterFormats*, UInt32, LibC::GUID*, UInt32*, Win32cr::Foundation::HRESULT),
    skip : Proc(IEnumDiscMasterFormats*, UInt32, Win32cr::Foundation::HRESULT),
    reset : Proc(IEnumDiscMasterFormats*, Win32cr::Foundation::HRESULT),
    clone : Proc(IEnumDiscMasterFormats*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IEnumDiscMasterFormats, lpVtbl : IEnumDiscMasterFormatsVtbl* do
    GUID = LibC::GUID.new(0xddf445e1_u32, 0x54ba_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
    def query_interface(this : IEnumDiscMasterFormats*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IEnumDiscMasterFormats*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IEnumDiscMasterFormats*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def next__(this : IEnumDiscMasterFormats*, cFormats : UInt32, lpiidFormatID : LibC::GUID*, pcFetched : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.next__.call(this, cFormats, lpiidFormatID, pcFetched)
    end
    def skip(this : IEnumDiscMasterFormats*, cFormats : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.skip.call(this, cFormats)
    end
    def reset(this : IEnumDiscMasterFormats*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end
    def clone(this : IEnumDiscMasterFormats*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clone.call(this, ppEnum)
    end

  end

  @[Extern]
  record IRedbookDiscMasterVtbl,
    query_interface : Proc(IRedbookDiscMaster*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IRedbookDiscMaster*, UInt32),
    release : Proc(IRedbookDiscMaster*, UInt32),
    get_total_audio_tracks : Proc(IRedbookDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    get_total_audio_blocks : Proc(IRedbookDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    get_used_audio_blocks : Proc(IRedbookDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    get_available_audio_track_blocks : Proc(IRedbookDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    get_audio_block_size : Proc(IRedbookDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    create_audio_track : Proc(IRedbookDiscMaster*, Int32, Win32cr::Foundation::HRESULT),
    add_audio_track_blocks : Proc(IRedbookDiscMaster*, UInt8*, Int32, Win32cr::Foundation::HRESULT),
    close_audio_track : Proc(IRedbookDiscMaster*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IRedbookDiscMaster, lpVtbl : IRedbookDiscMasterVtbl* do
    GUID = LibC::GUID.new(0xe3bc42cd_u32, 0x4e5c_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
    def query_interface(this : IRedbookDiscMaster*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IRedbookDiscMaster*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IRedbookDiscMaster*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_total_audio_tracks(this : IRedbookDiscMaster*, pnTracks : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_audio_tracks.call(this, pnTracks)
    end
    def get_total_audio_blocks(this : IRedbookDiscMaster*, pnBlocks : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_audio_blocks.call(this, pnBlocks)
    end
    def get_used_audio_blocks(this : IRedbookDiscMaster*, pnBlocks : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_used_audio_blocks.call(this, pnBlocks)
    end
    def get_available_audio_track_blocks(this : IRedbookDiscMaster*, pnBlocks : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_available_audio_track_blocks.call(this, pnBlocks)
    end
    def get_audio_block_size(this : IRedbookDiscMaster*, pnBlockBytes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_audio_block_size.call(this, pnBlockBytes)
    end
    def create_audio_track(this : IRedbookDiscMaster*, nBlocks : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_audio_track.call(this, nBlocks)
    end
    def add_audio_track_blocks(this : IRedbookDiscMaster*, pby : UInt8*, cb : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_audio_track_blocks.call(this, pby, cb)
    end
    def close_audio_track(this : IRedbookDiscMaster*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close_audio_track.call(this)
    end

  end

  @[Extern]
  record IJolietDiscMasterVtbl,
    query_interface : Proc(IJolietDiscMaster*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IJolietDiscMaster*, UInt32),
    release : Proc(IJolietDiscMaster*, UInt32),
    get_total_data_blocks : Proc(IJolietDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    get_used_data_blocks : Proc(IJolietDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    get_data_block_size : Proc(IJolietDiscMaster*, Int32*, Win32cr::Foundation::HRESULT),
    add_data : Proc(IJolietDiscMaster*, Void*, Int32, Win32cr::Foundation::HRESULT),
    get_joliet_properties : Proc(IJolietDiscMaster*, Void**, Win32cr::Foundation::HRESULT),
    set_joliet_properties : Proc(IJolietDiscMaster*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IJolietDiscMaster, lpVtbl : IJolietDiscMasterVtbl* do
    GUID = LibC::GUID.new(0xe3bc42ce_u32, 0x4e5c_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
    def query_interface(this : IJolietDiscMaster*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IJolietDiscMaster*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IJolietDiscMaster*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_total_data_blocks(this : IJolietDiscMaster*, pnBlocks : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_total_data_blocks.call(this, pnBlocks)
    end
    def get_used_data_blocks(this : IJolietDiscMaster*, pnBlocks : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_used_data_blocks.call(this, pnBlocks)
    end
    def get_data_block_size(this : IJolietDiscMaster*, pnBlockBytes : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data_block_size.call(this, pnBlockBytes)
    end
    def add_data(this : IJolietDiscMaster*, pStorage : Void*, lFileOverwrite : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_data.call(this, pStorage, lFileOverwrite)
    end
    def get_joliet_properties(this : IJolietDiscMaster*, ppPropStg : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_joliet_properties.call(this, ppPropStg)
    end
    def set_joliet_properties(this : IJolietDiscMaster*, pPropStg : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_joliet_properties.call(this, pPropStg)
    end

  end

  @[Extern]
  record IDiscMasterProgressEventsVtbl,
    query_interface : Proc(IDiscMasterProgressEvents*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscMasterProgressEvents*, UInt32),
    release : Proc(IDiscMasterProgressEvents*, UInt32),
    query_cancel : Proc(IDiscMasterProgressEvents*, UInt8*, Win32cr::Foundation::HRESULT),
    notify_pn_p_activity : Proc(IDiscMasterProgressEvents*, Win32cr::Foundation::HRESULT),
    notify_add_progress : Proc(IDiscMasterProgressEvents*, Int32, Int32, Win32cr::Foundation::HRESULT),
    notify_block_progress : Proc(IDiscMasterProgressEvents*, Int32, Int32, Win32cr::Foundation::HRESULT),
    notify_track_progress : Proc(IDiscMasterProgressEvents*, Int32, Int32, Win32cr::Foundation::HRESULT),
    notify_preparing_burn : Proc(IDiscMasterProgressEvents*, Int32, Win32cr::Foundation::HRESULT),
    notify_closing_disc : Proc(IDiscMasterProgressEvents*, Int32, Win32cr::Foundation::HRESULT),
    notify_burn_complete : Proc(IDiscMasterProgressEvents*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT),
    notify_erase_complete : Proc(IDiscMasterProgressEvents*, Win32cr::Foundation::HRESULT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscMasterProgressEvents, lpVtbl : IDiscMasterProgressEventsVtbl* do
    GUID = LibC::GUID.new(0xec9e51c1_u32, 0x4e5d_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
    def query_interface(this : IDiscMasterProgressEvents*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscMasterProgressEvents*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscMasterProgressEvents*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def query_cancel(this : IDiscMasterProgressEvents*, pbCancel : UInt8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_cancel.call(this, pbCancel)
    end
    def notify_pn_p_activity(this : IDiscMasterProgressEvents*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_pn_p_activity.call(this)
    end
    def notify_add_progress(this : IDiscMasterProgressEvents*, nCompletedSteps : Int32, nTotalSteps : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_add_progress.call(this, nCompletedSteps, nTotalSteps)
    end
    def notify_block_progress(this : IDiscMasterProgressEvents*, nCompleted : Int32, nTotal : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_block_progress.call(this, nCompleted, nTotal)
    end
    def notify_track_progress(this : IDiscMasterProgressEvents*, nCurrentTrack : Int32, nTotalTracks : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_track_progress.call(this, nCurrentTrack, nTotalTracks)
    end
    def notify_preparing_burn(this : IDiscMasterProgressEvents*, nEstimatedSeconds : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_preparing_burn.call(this, nEstimatedSeconds)
    end
    def notify_closing_disc(this : IDiscMasterProgressEvents*, nEstimatedSeconds : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_closing_disc.call(this, nEstimatedSeconds)
    end
    def notify_burn_complete(this : IDiscMasterProgressEvents*, status : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_burn_complete.call(this, status)
    end
    def notify_erase_complete(this : IDiscMasterProgressEvents*, status : Win32cr::Foundation::HRESULT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.notify_erase_complete.call(this, status)
    end

  end

  @[Extern]
  record IDiscMasterVtbl,
    query_interface : Proc(IDiscMaster*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(IDiscMaster*, UInt32),
    release : Proc(IDiscMaster*, UInt32),
    open : Proc(IDiscMaster*, Win32cr::Foundation::HRESULT),
    enum_disc_master_formats : Proc(IDiscMaster*, Void**, Win32cr::Foundation::HRESULT),
    get_active_disc_master_format : Proc(IDiscMaster*, LibC::GUID*, Win32cr::Foundation::HRESULT),
    set_active_disc_master_format : Proc(IDiscMaster*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enum_disc_recorders : Proc(IDiscMaster*, Void**, Win32cr::Foundation::HRESULT),
    get_active_disc_recorder : Proc(IDiscMaster*, Void**, Win32cr::Foundation::HRESULT),
    set_active_disc_recorder : Proc(IDiscMaster*, Void*, Win32cr::Foundation::HRESULT),
    clear_format_content : Proc(IDiscMaster*, Win32cr::Foundation::HRESULT),
    progress_advise : Proc(IDiscMaster*, Void*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    progress_unadvise : Proc(IDiscMaster*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    record_disc : Proc(IDiscMaster*, UInt8, UInt8, Win32cr::Foundation::HRESULT),
    close : Proc(IDiscMaster*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record IDiscMaster, lpVtbl : IDiscMasterVtbl* do
    GUID = LibC::GUID.new(0x520cca62_u32, 0x51a5_u16, 0x11d3_u16, StaticArray[0x91_u8, 0x44_u8, 0x0_u8, 0x10_u8, 0x4b_u8, 0xa1_u8, 0x1c_u8, 0x5e_u8])
    def query_interface(this : IDiscMaster*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : IDiscMaster*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : IDiscMaster*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def open(this : IDiscMaster*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open.call(this)
    end
    def enum_disc_master_formats(this : IDiscMaster*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_disc_master_formats.call(this, ppEnum)
    end
    def get_active_disc_master_format(this : IDiscMaster*, lpiid : LibC::GUID*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_active_disc_master_format.call(this, lpiid)
    end
    def set_active_disc_master_format(this : IDiscMaster*, riid : LibC::GUID*, ppUnk : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_active_disc_master_format.call(this, riid, ppUnk)
    end
    def enum_disc_recorders(this : IDiscMaster*, ppEnum : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enum_disc_recorders.call(this, ppEnum)
    end
    def get_active_disc_recorder(this : IDiscMaster*, ppRecorder : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_active_disc_recorder.call(this, ppRecorder)
    end
    def set_active_disc_recorder(this : IDiscMaster*, pRecorder : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_active_disc_recorder.call(this, pRecorder)
    end
    def clear_format_content(this : IDiscMaster*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.clear_format_content.call(this)
    end
    def progress_advise(this : IDiscMaster*, pEvents : Void*, pvCookie : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.progress_advise.call(this, pEvents, pvCookie)
    end
    def progress_unadvise(this : IDiscMaster*, vCookie : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.progress_unadvise.call(this, vCookie)
    end
    def record_disc(this : IDiscMaster*, bSimulate : UInt8, bEjectAfterBurn : UInt8) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.record_disc.call(this, bSimulate, bEjectAfterBurn)
    end
    def close(this : IDiscMaster*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end

  end

  def openIMsgSession(lpMalloc : Void*, ulFlags : UInt32, lppMsgSess : Win32cr::Storage::Imapi::MSGSESS_**) : Int32
    C.OpenIMsgSession(lpMalloc, ulFlags, lppMsgSess)
  end

  def closeIMsgSession(lpMsgSess : Win32cr::Storage::Imapi::MSGSESS_*) : Void
    C.CloseIMsgSession(lpMsgSess)
  end

  def openIMsgOnIStg(lpMsgSess : Win32cr::Storage::Imapi::MSGSESS_*, lpAllocateBuffer : Win32cr::System::AddressBook::LPALLOCATEBUFFER, lpAllocateMore : Win32cr::System::AddressBook::LPALLOCATEMORE, lpFreeBuffer : Win32cr::System::AddressBook::LPFREEBUFFER, lpMalloc : Void*, lpMapiSup : Void*, lpStg : Void*, lpfMsgCallRelease : Win32cr::Storage::Imapi::MSGCALLRELEASE*, ulCallerData : UInt32, ulFlags : UInt32, lppMsg : Void**) : Int32
    C.OpenIMsgOnIStg(lpMsgSess, lpAllocateBuffer, lpAllocateMore, lpFreeBuffer, lpMalloc, lpMapiSup, lpStg, lpfMsgCallRelease, ulCallerData, ulFlags, lppMsg)
  end

  def getAttribIMsgOnIStg(lpObject : Void*, lpPropTagArray : Win32cr::System::AddressBook::SPropTagArray*, lppPropAttrArray : Win32cr::Storage::Imapi::SPropAttrArray**) : Win32cr::Foundation::HRESULT
    C.GetAttribIMsgOnIStg(lpObject, lpPropTagArray, lppPropAttrArray)
  end

  def setAttribIMsgOnIStg(lpObject : Void*, lpPropTags : Win32cr::System::AddressBook::SPropTagArray*, lpPropAttrs : Win32cr::Storage::Imapi::SPropAttrArray*, lppPropProblems : Win32cr::System::AddressBook::SPropProblemArray**) : Win32cr::Foundation::HRESULT
    C.SetAttribIMsgOnIStg(lpObject, lpPropTags, lpPropAttrs, lppPropProblems)
  end

  def mapStorageSCode(stg_s_code : Int32) : Int32
    C.MapStorageSCode(stg_s_code)
  end

  @[Link("mapi32")]
  lib C
    # :nodoc:
    fun OpenIMsgSession(lpMalloc : Void*, ulFlags : UInt32, lppMsgSess : Win32cr::Storage::Imapi::MSGSESS_**) : Int32

    # :nodoc:
    fun CloseIMsgSession(lpMsgSess : Win32cr::Storage::Imapi::MSGSESS_*) : Void

    # :nodoc:
    fun OpenIMsgOnIStg(lpMsgSess : Win32cr::Storage::Imapi::MSGSESS_*, lpAllocateBuffer : Win32cr::System::AddressBook::LPALLOCATEBUFFER, lpAllocateMore : Win32cr::System::AddressBook::LPALLOCATEMORE, lpFreeBuffer : Win32cr::System::AddressBook::LPFREEBUFFER, lpMalloc : Void*, lpMapiSup : Void*, lpStg : Void*, lpfMsgCallRelease : Win32cr::Storage::Imapi::MSGCALLRELEASE*, ulCallerData : UInt32, ulFlags : UInt32, lppMsg : Void**) : Int32

    # :nodoc:
    fun GetAttribIMsgOnIStg(lpObject : Void*, lpPropTagArray : Win32cr::System::AddressBook::SPropTagArray*, lppPropAttrArray : Win32cr::Storage::Imapi::SPropAttrArray**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun SetAttribIMsgOnIStg(lpObject : Void*, lpPropTags : Win32cr::System::AddressBook::SPropTagArray*, lpPropAttrs : Win32cr::Storage::Imapi::SPropAttrArray*, lppPropProblems : Win32cr::System::AddressBook::SPropProblemArray**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun MapStorageSCode(stg_s_code : Int32) : Int32

  end
end